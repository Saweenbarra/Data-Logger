
Data-Logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016cb0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000408  08016f50  08016f50  00026f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017358  08017358  000301cc  2**0
                  CONTENTS
  4 .ARM          00000008  08017358  08017358  00027358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017360  08017360  000301cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017360  08017360  00027360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017364  08017364  00027364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001cc  24000000  08017368  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00041974  240001d0  08017534  000301d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  24041b44  08017534  00031b44  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00044174  00000000  00000000  000301fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007123  00000000  00000000  0007436e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000021e8  00000000  00000000  0007b498  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001f18  00000000  00000000  0007d680  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00041b41  00000000  00000000  0007f598  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00024e86  00000000  00000000  000c10d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0017782b  00000000  00000000  000e5f5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0025d78a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000970c  00000000  00000000  0025d808  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001d0 	.word	0x240001d0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08016f38 	.word	0x08016f38

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001d4 	.word	0x240001d4
 80002dc:	08016f38 	.word	0x08016f38

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <gps_msg_config>:
#include <string.h>
#include <stdint.h>
#include <GPS.h>
#include "main.h"

int gps_msg_config(UART_HandleTypeDef *huart, const char *nema, int rus1){
 8000690:	b580      	push	{r7, lr}
 8000692:	b09e      	sub	sp, #120	; 0x78
 8000694:	af02      	add	r7, sp, #8
 8000696:	60f8      	str	r0, [r7, #12]
 8000698:	60b9      	str	r1, [r7, #8]
 800069a:	607a      	str	r2, [r7, #4]
	if (strlen(nema) != 3) return 1;
 800069c:	68b8      	ldr	r0, [r7, #8]
 800069e:	f7ff fe1f 	bl	80002e0 <strlen>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b03      	cmp	r3, #3
 80006a6:	d001      	beq.n	80006ac <gps_msg_config+0x1c>
 80006a8:	2301      	movs	r3, #1
 80006aa:	e052      	b.n	8000752 <gps_msg_config+0xc2>


	char msg[32];
	snprintf(msg, sizeof(msg)-1,"PUBX,40,%s,0,%i,0,0,0,0", nema, rus1);
 80006ac:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	9300      	str	r3, [sp, #0]
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	4a29      	ldr	r2, [pc, #164]	; (800075c <gps_msg_config+0xcc>)
 80006b8:	211f      	movs	r1, #31
 80006ba:	f015 fc3b 	bl	8015f34 <sniprintf>

	int checksum_int = 0;
 80006be:	2300      	movs	r3, #0
 80006c0:	66fb      	str	r3, [r7, #108]	; 0x6c
	for (int i = 0; msg[i] && i < 32; i++)
 80006c2:	2300      	movs	r3, #0
 80006c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80006c6:	e00b      	b.n	80006e0 <gps_msg_config+0x50>
		checksum_int ^= (unsigned char)msg[i];
 80006c8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80006cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80006ce:	4413      	add	r3, r2
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	461a      	mov	r2, r3
 80006d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80006d6:	4053      	eors	r3, r2
 80006d8:	66fb      	str	r3, [r7, #108]	; 0x6c
	for (int i = 0; msg[i] && i < 32; i++)
 80006da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80006dc:	3301      	adds	r3, #1
 80006de:	66bb      	str	r3, [r7, #104]	; 0x68
 80006e0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80006e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80006e6:	4413      	add	r3, r2
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d002      	beq.n	80006f4 <gps_msg_config+0x64>
 80006ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80006f0:	2b1f      	cmp	r3, #31
 80006f2:	dde9      	ble.n	80006c8 <gps_msg_config+0x38>

	char checksum[8];
	snprintf(checksum, sizeof(checksum)-1, "*%.2X", checksum_int);
 80006f4:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80006f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80006fa:	4a19      	ldr	r2, [pc, #100]	; (8000760 <gps_msg_config+0xd0>)
 80006fc:	2107      	movs	r1, #7
 80006fe:	f015 fc19 	bl	8015f34 <sniprintf>

	char messagetosend[42];
	snprintf(messagetosend, sizeof(messagetosend)-1, "$%s%s\r\n", msg, checksum);
 8000702:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000706:	f107 0014 	add.w	r0, r7, #20
 800070a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800070e:	9300      	str	r3, [sp, #0]
 8000710:	4613      	mov	r3, r2
 8000712:	4a14      	ldr	r2, [pc, #80]	; (8000764 <gps_msg_config+0xd4>)
 8000714:	2129      	movs	r1, #41	; 0x29
 8000716:	f015 fc0d 	bl	8015f34 <sniprintf>
	printf("\n\rSending: ");
 800071a:	4813      	ldr	r0, [pc, #76]	; (8000768 <gps_msg_config+0xd8>)
 800071c:	f015 fb7e 	bl	8015e1c <iprintf>
	printf("%s", messagetosend);
 8000720:	f107 0314 	add.w	r3, r7, #20
 8000724:	4619      	mov	r1, r3
 8000726:	4811      	ldr	r0, [pc, #68]	; (800076c <gps_msg_config+0xdc>)
 8000728:	f015 fb78 	bl	8015e1c <iprintf>
	if (HAL_UART_Transmit(huart, messagetosend, strlen(messagetosend), 100) != HAL_OK){
 800072c:	f107 0314 	add.w	r3, r7, #20
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff fdd5 	bl	80002e0 <strlen>
 8000736:	4603      	mov	r3, r0
 8000738:	b29a      	uxth	r2, r3
 800073a:	f107 0114 	add.w	r1, r7, #20
 800073e:	2364      	movs	r3, #100	; 0x64
 8000740:	68f8      	ldr	r0, [r7, #12]
 8000742:	f00b fe40 	bl	800c3c6 <HAL_UART_Transmit>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <gps_msg_config+0xc0>
		Error_Handler();
 800074c:	f000 ff5e 	bl	800160c <Error_Handler>
	}
	return 0;
 8000750:	2300      	movs	r3, #0
}
 8000752:	4618      	mov	r0, r3
 8000754:	3770      	adds	r7, #112	; 0x70
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	08016f50 	.word	0x08016f50
 8000760:	08016f68 	.word	0x08016f68
 8000764:	08016f70 	.word	0x08016f70
 8000768:	08016f78 	.word	0x08016f78
 800076c:	08016f84 	.word	0x08016f84

08000770 <gps_rate_config>:

int gps_rate_config(UART_HandleTypeDef *huart, uint16_t measRate, uint16_t navRate, uint16_t timeRef){
 8000770:	b580      	push	{r7, lr}
 8000772:	b08a      	sub	sp, #40	; 0x28
 8000774:	af00      	add	r7, sp, #0
 8000776:	60f8      	str	r0, [r7, #12]
 8000778:	4608      	mov	r0, r1
 800077a:	4611      	mov	r1, r2
 800077c:	461a      	mov	r2, r3
 800077e:	4603      	mov	r3, r0
 8000780:	817b      	strh	r3, [r7, #10]
 8000782:	460b      	mov	r3, r1
 8000784:	813b      	strh	r3, [r7, #8]
 8000786:	4613      	mov	r3, r2
 8000788:	80fb      	strh	r3, [r7, #6]
		uint16_t length = 6;
 800078a:	2306      	movs	r3, #6
 800078c:	83fb      	strh	r3, [r7, #30]
		uint8_t msg[14];
		msg[0] = 0xb5;
 800078e:	23b5      	movs	r3, #181	; 0xb5
 8000790:	743b      	strb	r3, [r7, #16]
		msg[1] = 0x62;
 8000792:	2362      	movs	r3, #98	; 0x62
 8000794:	747b      	strb	r3, [r7, #17]
		msg[2] = 0x06;
 8000796:	2306      	movs	r3, #6
 8000798:	74bb      	strb	r3, [r7, #18]
		msg[3] = 0x08;
 800079a:	2308      	movs	r3, #8
 800079c:	74fb      	strb	r3, [r7, #19]
		msg[4] = length;
 800079e:	8bfb      	ldrh	r3, [r7, #30]
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	753b      	strb	r3, [r7, #20]
		msg[5] = 0;
 80007a4:	2300      	movs	r3, #0
 80007a6:	757b      	strb	r3, [r7, #21]
		msg[6] = measRate;
 80007a8:	897b      	ldrh	r3, [r7, #10]
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	75bb      	strb	r3, [r7, #22]
		msg[7] = 0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	75fb      	strb	r3, [r7, #23]
		msg[8] = navRate;
 80007b2:	893b      	ldrh	r3, [r7, #8]
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	763b      	strb	r3, [r7, #24]
		msg[9] = 0;
 80007b8:	2300      	movs	r3, #0
 80007ba:	767b      	strb	r3, [r7, #25]
		msg[10] = timeRef;
 80007bc:	88fb      	ldrh	r3, [r7, #6]
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	76bb      	strb	r3, [r7, #26]
		msg[11] = 0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	76fb      	strb	r3, [r7, #27]

		uint8_t CK_A = 0;
 80007c6:	2300      	movs	r3, #0
 80007c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		uint8_t CK_B = 0;
 80007cc:	2300      	movs	r3, #0
 80007ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		for(int i=2; i<12; i++){
 80007d2:	2302      	movs	r3, #2
 80007d4:	623b      	str	r3, [r7, #32]
 80007d6:	e013      	b.n	8000800 <gps_rate_config+0x90>
	        CK_A = CK_A + msg[i];
 80007d8:	f107 0210 	add.w	r2, r7, #16
 80007dc:	6a3b      	ldr	r3, [r7, #32]
 80007de:	4413      	add	r3, r2
 80007e0:	781a      	ldrb	r2, [r3, #0]
 80007e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80007e6:	4413      	add	r3, r2
 80007e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	        CK_A &= 0xFF;
	        CK_B = CK_B + CK_A;
 80007ec:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80007f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80007f4:	4413      	add	r3, r2
 80007f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		for(int i=2; i<12; i++){
 80007fa:	6a3b      	ldr	r3, [r7, #32]
 80007fc:	3301      	adds	r3, #1
 80007fe:	623b      	str	r3, [r7, #32]
 8000800:	6a3b      	ldr	r3, [r7, #32]
 8000802:	2b0b      	cmp	r3, #11
 8000804:	dde8      	ble.n	80007d8 <gps_rate_config+0x68>
	        CK_B &= 0xFF;
	    }
		msg[12] = CK_A;
 8000806:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800080a:	773b      	strb	r3, [r7, #28]
		msg[13] = CK_B;
 800080c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000810:	777b      	strb	r3, [r7, #29]

		if (HAL_UART_Transmit(huart, msg, sizeof(msg), 100) != HAL_OK){
 8000812:	f107 0110 	add.w	r1, r7, #16
 8000816:	2364      	movs	r3, #100	; 0x64
 8000818:	220e      	movs	r2, #14
 800081a:	68f8      	ldr	r0, [r7, #12]
 800081c:	f00b fdd3 	bl	800c3c6 <HAL_UART_Transmit>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d003      	beq.n	800082e <gps_rate_config+0xbe>
				Error_Handler();
 8000826:	f000 fef1 	bl	800160c <Error_Handler>
				return 1;
 800082a:	2301      	movs	r3, #1
 800082c:	e000      	b.n	8000830 <gps_rate_config+0xc0>
			}
		return 0;
 800082e:	2300      	movs	r3, #0
}
 8000830:	4618      	mov	r0, r3
 8000832:	3728      	adds	r7, #40	; 0x28
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}

08000838 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000840:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000844:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000848:	f003 0301 	and.w	r3, r3, #1
 800084c:	2b00      	cmp	r3, #0
 800084e:	d013      	beq.n	8000878 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000850:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000854:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000858:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800085c:	2b00      	cmp	r3, #0
 800085e:	d00b      	beq.n	8000878 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000860:	e000      	b.n	8000864 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000862:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000864:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d0f9      	beq.n	8000862 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800086e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000872:	687a      	ldr	r2, [r7, #4]
 8000874:	b2d2      	uxtb	r2, r2
 8000876:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000878:	687b      	ldr	r3, [r7, #4]
}
 800087a:	4618      	mov	r0, r3
 800087c:	370c      	adds	r7, #12
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr

08000886 <_write>:
static void MX_RTC_Init(void);
/* USER CODE BEGIN PFP */
int WriteToBuff(char *, int);
static void FDCAN_Config(void);
int _write(int file, char *ptr, int len)
{
 8000886:	b580      	push	{r7, lr}
 8000888:	b086      	sub	sp, #24
 800088a:	af00      	add	r7, sp, #0
 800088c:	60f8      	str	r0, [r7, #12]
 800088e:	60b9      	str	r1, [r7, #8]
 8000890:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 8000892:	2300      	movs	r3, #0
 8000894:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8000896:	2300      	movs	r3, #0
 8000898:	617b      	str	r3, [r7, #20]
 800089a:	e009      	b.n	80008b0 <_write+0x2a>
    ITM_SendChar((*ptr++));
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	1c5a      	adds	r2, r3, #1
 80008a0:	60ba      	str	r2, [r7, #8]
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	4618      	mov	r0, r3
 80008a6:	f7ff ffc7 	bl	8000838 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 80008aa:	697b      	ldr	r3, [r7, #20]
 80008ac:	3301      	adds	r3, #1
 80008ae:	617b      	str	r3, [r7, #20]
 80008b0:	697a      	ldr	r2, [r7, #20]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	429a      	cmp	r2, r3
 80008b6:	dbf1      	blt.n	800089c <_write+0x16>
  return len;
 80008b8:	687b      	ldr	r3, [r7, #4]
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	3718      	adds	r7, #24
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
	...

080008c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008c6:	f2ad 4dec 	subw	sp, sp, #1260	; 0x4ec
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008cc:	f001 fa94 	bl	8001df8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008d0:	f000 f9de 	bl	8000c90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008d4:	f000 fd3e 	bl	8001354 <MX_GPIO_Init>
  MX_DMA_Init();
 80008d8:	f000 fd1c 	bl	8001314 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 80008dc:	f000 fc0a 	bl	80010f4 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 80008e0:	f00f f8a6 	bl	800fa30 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 80008e4:	f014 fca6 	bl	8015234 <MX_USB_DEVICE_Init>
  MX_FDCAN1_Init();
 80008e8:	f000 fadc 	bl	8000ea4 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 80008ec:	f000 fb40 	bl	8000f70 <MX_FDCAN2_Init>
  MX_UART8_Init();
 80008f0:	f000 fc78 	bl	80011e4 <MX_UART8_Init>
  MX_USART3_UART_Init();
 80008f4:	f000 fcc2 	bl	800127c <MX_USART3_UART_Init>
  MX_SPI1_Init();
 80008f8:	f000 fc1e 	bl	8001138 <MX_SPI1_Init>
  MX_RTC_Init();
 80008fc:	f000 fb9c 	bl	8001038 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  printf("Starting\n");
 8000900:	48b9      	ldr	r0, [pc, #740]	; (8000be8 <main+0x324>)
 8000902:	f015 faff 	bl	8015f04 <puts>
  FDCAN_Config();
 8000906:	f000 fe0f 	bl	8001528 <FDCAN_Config>
  //GPS DMA
  HAL_UART_Receive_DMA(&huart3, (uint8_t *)rxBuf, BUFFLENGTH);
 800090a:	2246      	movs	r2, #70	; 0x46
 800090c:	49b7      	ldr	r1, [pc, #732]	; (8000bec <main+0x328>)
 800090e:	48b8      	ldr	r0, [pc, #736]	; (8000bf0 <main+0x32c>)
 8000910:	f00b fdf0 	bl	800c4f4 <HAL_UART_Receive_DMA>
  HAL_Delay(1000);//GPS required this in testing, maybe remove?
 8000914:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000918:	f001 fb00 	bl	8001f1c <HAL_Delay>
  //variables required for 10Hz GPS
  uint16_t measRate = 100;
 800091c:	2364      	movs	r3, #100	; 0x64
 800091e:	f8a7 34de 	strh.w	r3, [r7, #1246]	; 0x4de
  uint16_t navRate = 1;
 8000922:	2301      	movs	r3, #1
 8000924:	f8a7 34dc 	strh.w	r3, [r7, #1244]	; 0x4dc
  uint16_t timeRef = 0;
 8000928:	2300      	movs	r3, #0
 800092a:	f8a7 34da 	strh.w	r3, [r7, #1242]	; 0x4da
  gps_rate_config(&huart3, measRate, navRate, timeRef);
 800092e:	f8b7 34da 	ldrh.w	r3, [r7, #1242]	; 0x4da
 8000932:	f8b7 24dc 	ldrh.w	r2, [r7, #1244]	; 0x4dc
 8000936:	f8b7 14de 	ldrh.w	r1, [r7, #1246]	; 0x4de
 800093a:	48ad      	ldr	r0, [pc, #692]	; (8000bf0 <main+0x32c>)
 800093c:	f7ff ff18 	bl	8000770 <gps_rate_config>

  gps_msg_config(&huart3, "DTM", 0);//ERROR
 8000940:	2200      	movs	r2, #0
 8000942:	49ac      	ldr	r1, [pc, #688]	; (8000bf4 <main+0x330>)
 8000944:	48aa      	ldr	r0, [pc, #680]	; (8000bf0 <main+0x32c>)
 8000946:	f7ff fea3 	bl	8000690 <gps_msg_config>
  gps_msg_config(&huart3, "GAQ", 0);
 800094a:	2200      	movs	r2, #0
 800094c:	49aa      	ldr	r1, [pc, #680]	; (8000bf8 <main+0x334>)
 800094e:	48a8      	ldr	r0, [pc, #672]	; (8000bf0 <main+0x32c>)
 8000950:	f7ff fe9e 	bl	8000690 <gps_msg_config>
  gps_msg_config(&huart3, "GBQ", 0);
 8000954:	2200      	movs	r2, #0
 8000956:	49a9      	ldr	r1, [pc, #676]	; (8000bfc <main+0x338>)
 8000958:	48a5      	ldr	r0, [pc, #660]	; (8000bf0 <main+0x32c>)
 800095a:	f7ff fe99 	bl	8000690 <gps_msg_config>
  gps_msg_config(&huart3, "GBS", 0);//ERROR
 800095e:	2200      	movs	r2, #0
 8000960:	49a7      	ldr	r1, [pc, #668]	; (8000c00 <main+0x33c>)
 8000962:	48a3      	ldr	r0, [pc, #652]	; (8000bf0 <main+0x32c>)
 8000964:	f7ff fe94 	bl	8000690 <gps_msg_config>
  gps_msg_config(&huart3, "GGA", 0);//ERROR
 8000968:	2200      	movs	r2, #0
 800096a:	49a6      	ldr	r1, [pc, #664]	; (8000c04 <main+0x340>)
 800096c:	48a0      	ldr	r0, [pc, #640]	; (8000bf0 <main+0x32c>)
 800096e:	f7ff fe8f 	bl	8000690 <gps_msg_config>
  gps_msg_config(&huart3, "GLL", 0);//ERROR
 8000972:	2200      	movs	r2, #0
 8000974:	49a4      	ldr	r1, [pc, #656]	; (8000c08 <main+0x344>)
 8000976:	489e      	ldr	r0, [pc, #632]	; (8000bf0 <main+0x32c>)
 8000978:	f7ff fe8a 	bl	8000690 <gps_msg_config>
  gps_msg_config(&huart3, "GLQ", 0);
 800097c:	2200      	movs	r2, #0
 800097e:	49a3      	ldr	r1, [pc, #652]	; (8000c0c <main+0x348>)
 8000980:	489b      	ldr	r0, [pc, #620]	; (8000bf0 <main+0x32c>)
 8000982:	f7ff fe85 	bl	8000690 <gps_msg_config>
  gps_msg_config(&huart3, "GNQ", 0);
 8000986:	2200      	movs	r2, #0
 8000988:	49a1      	ldr	r1, [pc, #644]	; (8000c10 <main+0x34c>)
 800098a:	4899      	ldr	r0, [pc, #612]	; (8000bf0 <main+0x32c>)
 800098c:	f7ff fe80 	bl	8000690 <gps_msg_config>
  gps_msg_config(&huart3, "GNS", 0);//ERROR
 8000990:	2200      	movs	r2, #0
 8000992:	49a0      	ldr	r1, [pc, #640]	; (8000c14 <main+0x350>)
 8000994:	4896      	ldr	r0, [pc, #600]	; (8000bf0 <main+0x32c>)
 8000996:	f7ff fe7b 	bl	8000690 <gps_msg_config>
  gps_msg_config(&huart3, "GPQ", 0);
 800099a:	2200      	movs	r2, #0
 800099c:	499e      	ldr	r1, [pc, #632]	; (8000c18 <main+0x354>)
 800099e:	4894      	ldr	r0, [pc, #592]	; (8000bf0 <main+0x32c>)
 80009a0:	f7ff fe76 	bl	8000690 <gps_msg_config>
  gps_msg_config(&huart3, "GRS", 0);//ERROR
 80009a4:	2200      	movs	r2, #0
 80009a6:	499d      	ldr	r1, [pc, #628]	; (8000c1c <main+0x358>)
 80009a8:	4891      	ldr	r0, [pc, #580]	; (8000bf0 <main+0x32c>)
 80009aa:	f7ff fe71 	bl	8000690 <gps_msg_config>
  gps_msg_config(&huart3, "GSA", 0);//ERROR
 80009ae:	2200      	movs	r2, #0
 80009b0:	499b      	ldr	r1, [pc, #620]	; (8000c20 <main+0x35c>)
 80009b2:	488f      	ldr	r0, [pc, #572]	; (8000bf0 <main+0x32c>)
 80009b4:	f7ff fe6c 	bl	8000690 <gps_msg_config>
  gps_msg_config(&huart3, "GST", 0);//ERROR
 80009b8:	2200      	movs	r2, #0
 80009ba:	499a      	ldr	r1, [pc, #616]	; (8000c24 <main+0x360>)
 80009bc:	488c      	ldr	r0, [pc, #560]	; (8000bf0 <main+0x32c>)
 80009be:	f7ff fe67 	bl	8000690 <gps_msg_config>
  gps_msg_config(&huart3, "GSV", 0);//ERROR
 80009c2:	2200      	movs	r2, #0
 80009c4:	4998      	ldr	r1, [pc, #608]	; (8000c28 <main+0x364>)
 80009c6:	488a      	ldr	r0, [pc, #552]	; (8000bf0 <main+0x32c>)
 80009c8:	f7ff fe62 	bl	8000690 <gps_msg_config>
  gps_msg_config(&huart3, "RLM", 0);
 80009cc:	2200      	movs	r2, #0
 80009ce:	4997      	ldr	r1, [pc, #604]	; (8000c2c <main+0x368>)
 80009d0:	4887      	ldr	r0, [pc, #540]	; (8000bf0 <main+0x32c>)
 80009d2:	f7ff fe5d 	bl	8000690 <gps_msg_config>
  gps_msg_config(&huart3, "RMC", 1);//ERROR
 80009d6:	2201      	movs	r2, #1
 80009d8:	4995      	ldr	r1, [pc, #596]	; (8000c30 <main+0x36c>)
 80009da:	4885      	ldr	r0, [pc, #532]	; (8000bf0 <main+0x32c>)
 80009dc:	f7ff fe58 	bl	8000690 <gps_msg_config>
  gps_msg_config(&huart3, "TXT", 0);
 80009e0:	2200      	movs	r2, #0
 80009e2:	4994      	ldr	r1, [pc, #592]	; (8000c34 <main+0x370>)
 80009e4:	4882      	ldr	r0, [pc, #520]	; (8000bf0 <main+0x32c>)
 80009e6:	f7ff fe53 	bl	8000690 <gps_msg_config>
  gps_msg_config(&huart3, "VLW", 0);//ERROR
 80009ea:	2200      	movs	r2, #0
 80009ec:	4992      	ldr	r1, [pc, #584]	; (8000c38 <main+0x374>)
 80009ee:	4880      	ldr	r0, [pc, #512]	; (8000bf0 <main+0x32c>)
 80009f0:	f7ff fe4e 	bl	8000690 <gps_msg_config>
  gps_msg_config(&huart3, "VTG", 0);//ERROR
 80009f4:	2200      	movs	r2, #0
 80009f6:	4991      	ldr	r1, [pc, #580]	; (8000c3c <main+0x378>)
 80009f8:	487d      	ldr	r0, [pc, #500]	; (8000bf0 <main+0x32c>)
 80009fa:	f7ff fe49 	bl	8000690 <gps_msg_config>
  gps_msg_config(&huart3, "ZDA", 0);//ERROR
 80009fe:	2200      	movs	r2, #0
 8000a00:	498f      	ldr	r1, [pc, #572]	; (8000c40 <main+0x37c>)
 8000a02:	487b      	ldr	r0, [pc, #492]	; (8000bf0 <main+0x32c>)
 8000a04:	f7ff fe44 	bl	8000690 <gps_msg_config>

  if(f_mount(&myFATAFS, SDPath, 1) == FR_OK){
 8000a08:	2201      	movs	r2, #1
 8000a0a:	498e      	ldr	r1, [pc, #568]	; (8000c44 <main+0x380>)
 8000a0c:	488e      	ldr	r0, [pc, #568]	; (8000c48 <main+0x384>)
 8000a0e:	f013 fe55 	bl	80146bc <f_mount>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	f040 80bf 	bne.w	8000b98 <main+0x2d4>
  	  //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
  	  char myPath[] = "gps.csv\0";
 8000a1a:	4a8c      	ldr	r2, [pc, #560]	; (8000c4c <main+0x388>)
 8000a1c:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8000a20:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a22:	c303      	stmia	r3!, {r0, r1}
 8000a24:	701a      	strb	r2, [r3, #0]
      char ConfigPath[] ="Config.csv\0";
 8000a26:	4a8a      	ldr	r2, [pc, #552]	; (8000c50 <main+0x38c>)
 8000a28:	f207 43b4 	addw	r3, r7, #1204	; 0x4b4
 8000a2c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a2e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      char ConfigParams[1000];

      //Tries to open config File
      if(f_open(&Config, ConfigPath, FA_READ) == FR_NO_FILE){
 8000a32:	f207 43b4 	addw	r3, r7, #1204	; 0x4b4
 8000a36:	2201      	movs	r2, #1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4886      	ldr	r0, [pc, #536]	; (8000c54 <main+0x390>)
 8000a3c:	f013 fe84 	bl	8014748 <f_open>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b04      	cmp	r3, #4
 8000a44:	d144      	bne.n	8000ad0 <main+0x20c>
        //If file doesnt exist creates a file using hard coded defualts and passes those to internal config array
        f_open(&Config, ConfigPath, FA_WRITE | FA_CREATE_ALWAYS);
 8000a46:	f207 43b4 	addw	r3, r7, #1204	; 0x4b4
 8000a4a:	220a      	movs	r2, #10
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4881      	ldr	r0, [pc, #516]	; (8000c54 <main+0x390>)
 8000a50:	f013 fe7a 	bl	8014748 <f_open>

        sprintf(ConfigParams, "ID,Device,Bytes,Rate(HZ),Type,Description\n");
 8000a54:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000a58:	4a7f      	ldr	r2, [pc, #508]	; (8000c58 <main+0x394>)
 8000a5a:	461c      	mov	r4, r3
 8000a5c:	4615      	mov	r5, r2
 8000a5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a66:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a6a:	c403      	stmia	r4!, {r0, r1}
 8000a6c:	8022      	strh	r2, [r4, #0]
 8000a6e:	3402      	adds	r4, #2
 8000a70:	0c13      	lsrs	r3, r2, #16
 8000a72:	7023      	strb	r3, [r4, #0]
        sprintf(ConfigParams + strlen(ConfigParams),"0x50,Datalogger,8,0.20,uint32_t,HIGH:FileNO LOW:millis,\n");
 8000a74:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f7ff fc31 	bl	80002e0 <strlen>
 8000a7e:	4602      	mov	r2, r0
 8000a80:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000a84:	4413      	add	r3, r2
 8000a86:	4a75      	ldr	r2, [pc, #468]	; (8000c5c <main+0x398>)
 8000a88:	4614      	mov	r4, r2
 8000a8a:	469c      	mov	ip, r3
 8000a8c:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000a90:	4665      	mov	r5, ip
 8000a92:	4626      	mov	r6, r4
 8000a94:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000a96:	6028      	str	r0, [r5, #0]
 8000a98:	6069      	str	r1, [r5, #4]
 8000a9a:	60aa      	str	r2, [r5, #8]
 8000a9c:	60eb      	str	r3, [r5, #12]
 8000a9e:	3410      	adds	r4, #16
 8000aa0:	f10c 0c10 	add.w	ip, ip, #16
 8000aa4:	4574      	cmp	r4, lr
 8000aa6:	d1f3      	bne.n	8000a90 <main+0x1cc>
 8000aa8:	4662      	mov	r2, ip
 8000aaa:	4623      	mov	r3, r4
 8000aac:	cb03      	ldmia	r3!, {r0, r1}
 8000aae:	6010      	str	r0, [r2, #0]
 8000ab0:	6051      	str	r1, [r2, #4]
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	7213      	strb	r3, [r2, #8]

        f_write(&Config, ConfigParams, strlen(ConfigParams), &ConfByteW);
 8000ab6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000aba:	4618      	mov	r0, r3
 8000abc:	f7ff fc10 	bl	80002e0 <strlen>
 8000ac0:	4602      	mov	r2, r0
 8000ac2:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 8000ac6:	4b66      	ldr	r3, [pc, #408]	; (8000c60 <main+0x39c>)
 8000ac8:	4862      	ldr	r0, [pc, #392]	; (8000c54 <main+0x390>)
 8000aca:	f014 f93a 	bl	8014d42 <f_write>
 8000ace:	e00b      	b.n	8000ae8 <main+0x224>
      }else{
        //If file does exist reads in config parameters to internal config array
        f_read(&Config, ConfigParams, strlen(ConfigParams), &ConfByteR);
 8000ad0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f7ff fc03 	bl	80002e0 <strlen>
 8000ada:	4602      	mov	r2, r0
 8000adc:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 8000ae0:	4b60      	ldr	r3, [pc, #384]	; (8000c64 <main+0x3a0>)
 8000ae2:	485c      	ldr	r0, [pc, #368]	; (8000c54 <main+0x390>)
 8000ae4:	f013 ffee 	bl	8014ac4 <f_read>
      }
      f_close(&Config);
 8000ae8:	485a      	ldr	r0, [pc, #360]	; (8000c54 <main+0x390>)
 8000aea:	f014 fb1d 	bl	8015128 <f_close>
  	  f_open(&myFILE, myPath, FA_WRITE | FA_CREATE_ALWAYS);
 8000aee:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8000af2:	220a      	movs	r2, #10
 8000af4:	4619      	mov	r1, r3
 8000af6:	485c      	ldr	r0, [pc, #368]	; (8000c68 <main+0x3a4>)
 8000af8:	f013 fe26 	bl	8014748 <f_open>

  	  //write speed test
  	  	for(int i = 0; i<131072; i++){
 8000afc:	2300      	movs	r3, #0
 8000afe:	f8c7 34e4 	str.w	r3, [r7, #1252]	; 0x4e4
 8000b02:	e00a      	b.n	8000b1a <main+0x256>
  		    DataBuffer.Data.DataBuff1[i] = 'A';
 8000b04:	4a59      	ldr	r2, [pc, #356]	; (8000c6c <main+0x3a8>)
 8000b06:	f8d7 34e4 	ldr.w	r3, [r7, #1252]	; 0x4e4
 8000b0a:	4413      	add	r3, r2
 8000b0c:	2241      	movs	r2, #65	; 0x41
 8000b0e:	701a      	strb	r2, [r3, #0]
  	  	for(int i = 0; i<131072; i++){
 8000b10:	f8d7 34e4 	ldr.w	r3, [r7, #1252]	; 0x4e4
 8000b14:	3301      	adds	r3, #1
 8000b16:	f8c7 34e4 	str.w	r3, [r7, #1252]	; 0x4e4
 8000b1a:	f8d7 34e4 	ldr.w	r3, [r7, #1252]	; 0x4e4
 8000b1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000b22:	dbef      	blt.n	8000b04 <main+0x240>
  	    }
  	    int start = HAL_GetTick();
 8000b24:	f001 f9ee 	bl	8001f04 <HAL_GetTick>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	f8c7 34d4 	str.w	r3, [r7, #1236]	; 0x4d4
  	    for(int i = 0; i<2048; i++){
 8000b2e:	2300      	movs	r3, #0
 8000b30:	f8c7 34e0 	str.w	r3, [r7, #1248]	; 0x4e0
 8000b34:	e00b      	b.n	8000b4e <main+0x28a>
  		f_write(&myFILE, DataBuffer.Data.DataBuff1, sizeof(DataBuffer.Data.DataBuff1), &testByte);
 8000b36:	4b4e      	ldr	r3, [pc, #312]	; (8000c70 <main+0x3ac>)
 8000b38:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000b3c:	494b      	ldr	r1, [pc, #300]	; (8000c6c <main+0x3a8>)
 8000b3e:	484a      	ldr	r0, [pc, #296]	; (8000c68 <main+0x3a4>)
 8000b40:	f014 f8ff 	bl	8014d42 <f_write>
  	    for(int i = 0; i<2048; i++){
 8000b44:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	; 0x4e0
 8000b48:	3301      	adds	r3, #1
 8000b4a:	f8c7 34e0 	str.w	r3, [r7, #1248]	; 0x4e0
 8000b4e:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	; 0x4e0
 8000b52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000b56:	dbee      	blt.n	8000b36 <main+0x272>
        }
  	    int end = HAL_GetTick();
 8000b58:	f001 f9d4 	bl	8001f04 <HAL_GetTick>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	f8c7 34d0 	str.w	r3, [r7, #1232]	; 0x4d0
  	    int duration = end - start;
 8000b62:	f8d7 24d0 	ldr.w	r2, [r7, #1232]	; 0x4d0
 8000b66:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 8000b6a:	1ad3      	subs	r3, r2, r3
 8000b6c:	f8c7 34cc 	str.w	r3, [r7, #1228]	; 0x4cc
  	    char myTime[200];
  	    sprintf(myTime, "\r%i", duration);
 8000b70:	1d3b      	adds	r3, r7, #4
 8000b72:	f8d7 24cc 	ldr.w	r2, [r7, #1228]	; 0x4cc
 8000b76:	493f      	ldr	r1, [pc, #252]	; (8000c74 <main+0x3b0>)
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f015 fa0f 	bl	8015f9c <siprintf>
  	    f_write(&myFILE, myTime, strlen(myTime), &testByte);
 8000b7e:	1d3b      	adds	r3, r7, #4
 8000b80:	4618      	mov	r0, r3
 8000b82:	f7ff fbad 	bl	80002e0 <strlen>
 8000b86:	4602      	mov	r2, r0
 8000b88:	1d39      	adds	r1, r7, #4
 8000b8a:	4b39      	ldr	r3, [pc, #228]	; (8000c70 <main+0x3ac>)
 8000b8c:	4836      	ldr	r0, [pc, #216]	; (8000c68 <main+0x3a4>)
 8000b8e:	f014 f8d8 	bl	8014d42 <f_write>
      f_close(&myFILE);
 8000b92:	4835      	ldr	r0, [pc, #212]	; (8000c68 <main+0x3a4>)
 8000b94:	f014 fac8 	bl	8015128 <f_close>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
	  ///HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
	  printf("loop\n");
 8000b98:	4837      	ldr	r0, [pc, #220]	; (8000c78 <main+0x3b4>)
 8000b9a:	f015 f9b3 	bl	8015f04 <puts>
	  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4936      	ldr	r1, [pc, #216]	; (8000c7c <main+0x3b8>)
 8000ba2:	4837      	ldr	r0, [pc, #220]	; (8000c80 <main+0x3bc>)
 8000ba4:	f009 f928 	bl	8009df8 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	4936      	ldr	r1, [pc, #216]	; (8000c84 <main+0x3c0>)
 8000bac:	4834      	ldr	r0, [pc, #208]	; (8000c80 <main+0x3bc>)
 8000bae:	f009 fa07 	bl	8009fc0 <HAL_RTC_GetDate>


	  printf("Date:%u Month:%u Year:%u\n", sDate.Date, sDate.Month, sDate.Year);
 8000bb2:	4b34      	ldr	r3, [pc, #208]	; (8000c84 <main+0x3c0>)
 8000bb4:	789b      	ldrb	r3, [r3, #2]
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4b32      	ldr	r3, [pc, #200]	; (8000c84 <main+0x3c0>)
 8000bba:	785b      	ldrb	r3, [r3, #1]
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	4b31      	ldr	r3, [pc, #196]	; (8000c84 <main+0x3c0>)
 8000bc0:	78db      	ldrb	r3, [r3, #3]
 8000bc2:	4831      	ldr	r0, [pc, #196]	; (8000c88 <main+0x3c4>)
 8000bc4:	f015 f92a 	bl	8015e1c <iprintf>
	  printf("Hours:%u Minutes:%u Seconds:%u\n", sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000bc8:	4b2c      	ldr	r3, [pc, #176]	; (8000c7c <main+0x3b8>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4b2b      	ldr	r3, [pc, #172]	; (8000c7c <main+0x3b8>)
 8000bd0:	785b      	ldrb	r3, [r3, #1]
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	4b29      	ldr	r3, [pc, #164]	; (8000c7c <main+0x3b8>)
 8000bd6:	789b      	ldrb	r3, [r3, #2]
 8000bd8:	482c      	ldr	r0, [pc, #176]	; (8000c8c <main+0x3c8>)
 8000bda:	f015 f91f 	bl	8015e1c <iprintf>
	  HAL_Delay(1000);
 8000bde:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000be2:	f001 f99b 	bl	8001f1c <HAL_Delay>
	  printf("loop\n");
 8000be6:	e7d7      	b.n	8000b98 <main+0x2d4>
 8000be8:	08016f90 	.word	0x08016f90
 8000bec:	24040610 	.word	0x24040610
 8000bf0:	240402d0 	.word	0x240402d0
 8000bf4:	08016f9c 	.word	0x08016f9c
 8000bf8:	08016fa0 	.word	0x08016fa0
 8000bfc:	08016fa4 	.word	0x08016fa4
 8000c00:	08016fa8 	.word	0x08016fa8
 8000c04:	08016fac 	.word	0x08016fac
 8000c08:	08016fb0 	.word	0x08016fb0
 8000c0c:	08016fb4 	.word	0x08016fb4
 8000c10:	08016fb8 	.word	0x08016fb8
 8000c14:	08016fbc 	.word	0x08016fbc
 8000c18:	08016fc0 	.word	0x08016fc0
 8000c1c:	08016fc4 	.word	0x08016fc4
 8000c20:	08016fc8 	.word	0x08016fc8
 8000c24:	08016fcc 	.word	0x08016fcc
 8000c28:	08016fd0 	.word	0x08016fd0
 8000c2c:	08016fd4 	.word	0x08016fd4
 8000c30:	08016fd8 	.word	0x08016fd8
 8000c34:	08016fdc 	.word	0x08016fdc
 8000c38:	08016fe0 	.word	0x08016fe0
 8000c3c:	08016fe4 	.word	0x08016fe4
 8000c40:	08016fe8 	.word	0x08016fe8
 8000c44:	24040e04 	.word	0x24040e04
 8000c48:	24040834 	.word	0x24040834
 8000c4c:	0801709c 	.word	0x0801709c
 8000c50:	080170a8 	.word	0x080170a8
 8000c54:	24040bcc 	.word	0x24040bcc
 8000c58:	08016fec 	.word	0x08016fec
 8000c5c:	08017018 	.word	0x08017018
 8000c60:	240407a8 	.word	0x240407a8
 8000c64:	2404060c 	.word	0x2404060c
 8000c68:	2404035c 	.word	0x2404035c
 8000c6c:	24000204 	.word	0x24000204
 8000c70:	24040bc8 	.word	0x24040bc8
 8000c74:	08017054 	.word	0x08017054
 8000c78:	08017058 	.word	0x08017058
 8000c7c:	240001ec 	.word	0x240001ec
 8000c80:	24040658 	.word	0x24040658
 8000c84:	24000200 	.word	0x24000200
 8000c88:	08017060 	.word	0x08017060
 8000c8c:	0801707c 	.word	0x0801707c

08000c90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b0cc      	sub	sp, #304	; 0x130
 8000c94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c96:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000c9a:	224c      	movs	r2, #76	; 0x4c
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f015 f80b 	bl	8015cba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ca4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000ca8:	2220      	movs	r2, #32
 8000caa:	2100      	movs	r1, #0
 8000cac:	4618      	mov	r0, r3
 8000cae:	f015 f804 	bl	8015cba <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cb2:	f107 0308 	add.w	r3, r7, #8
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	23bc      	movs	r3, #188	; 0xbc
 8000cba:	461a      	mov	r2, r3
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	f014 fffc 	bl	8015cba <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000cc2:	2002      	movs	r0, #2
 8000cc4:	f006 f8b4 	bl	8006e30 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cc8:	1d3b      	adds	r3, r7, #4
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	4b71      	ldr	r3, [pc, #452]	; (8000e94 <SystemClock_Config+0x204>)
 8000cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cd2:	4a70      	ldr	r2, [pc, #448]	; (8000e94 <SystemClock_Config+0x204>)
 8000cd4:	f023 0301 	bic.w	r3, r3, #1
 8000cd8:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000cda:	4b6e      	ldr	r3, [pc, #440]	; (8000e94 <SystemClock_Config+0x204>)
 8000cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cde:	f003 0201 	and.w	r2, r3, #1
 8000ce2:	1d3b      	adds	r3, r7, #4
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	4b6c      	ldr	r3, [pc, #432]	; (8000e98 <SystemClock_Config+0x208>)
 8000ce8:	699b      	ldr	r3, [r3, #24]
 8000cea:	4a6b      	ldr	r2, [pc, #428]	; (8000e98 <SystemClock_Config+0x208>)
 8000cec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000cf0:	6193      	str	r3, [r2, #24]
 8000cf2:	4b69      	ldr	r3, [pc, #420]	; (8000e98 <SystemClock_Config+0x208>)
 8000cf4:	699b      	ldr	r3, [r3, #24]
 8000cf6:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000cfa:	1d3b      	adds	r3, r7, #4
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	1d3b      	adds	r3, r7, #4
 8000d00:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d02:	bf00      	nop
 8000d04:	4b64      	ldr	r3, [pc, #400]	; (8000e98 <SystemClock_Config+0x208>)
 8000d06:	699b      	ldr	r3, [r3, #24]
 8000d08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d10:	d1f8      	bne.n	8000d04 <SystemClock_Config+0x74>
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000d12:	f006 f87d 	bl	8006e10 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_HIGH);
 8000d16:	f001 f923 	bl	8001f60 <HAL_GetREVID>
 8000d1a:	4b60      	ldr	r3, [pc, #384]	; (8000e9c <SystemClock_Config+0x20c>)
 8000d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d1e:	4a5f      	ldr	r2, [pc, #380]	; (8000e9c <SystemClock_Config+0x20c>)
 8000d20:	f043 0318 	orr.w	r3, r3, #24
 8000d24:	6713      	str	r3, [r2, #112]	; 0x70
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000d26:	4b5d      	ldr	r3, [pc, #372]	; (8000e9c <SystemClock_Config+0x20c>)
 8000d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d2a:	f023 0303 	bic.w	r3, r3, #3
 8000d2e:	4a5b      	ldr	r2, [pc, #364]	; (8000e9c <SystemClock_Config+0x20c>)
 8000d30:	f043 0302 	orr.w	r3, r3, #2
 8000d34:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE
 8000d36:	2325      	movs	r3, #37	; 0x25
 8000d38:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d40:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000d44:	2301      	movs	r3, #1
 8000d46:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d50:	2302      	movs	r3, #2
 8000d52:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d56:	2302      	movs	r3, #2
 8000d58:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000d62:	2340      	movs	r3, #64	; 0x40
 8000d64:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 10;
 8000d6e:	230a      	movs	r3, #10
 8000d70:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d74:	2302      	movs	r3, #2
 8000d76:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000d7a:	230c      	movs	r3, #12
 8000d7c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d80:	2300      	movs	r3, #0
 8000d82:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d86:	2300      	movs	r3, #0
 8000d88:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d8c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000d90:	4618      	mov	r0, r3
 8000d92:	f006 f897 	bl	8006ec4 <HAL_RCC_OscConfig>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000d9c:	f000 fc36 	bl	800160c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000da0:	233f      	movs	r3, #63	; 0x3f
 8000da2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000da6:	2303      	movs	r3, #3
 8000da8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000dac:	2300      	movs	r3, #0
 8000dae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000db2:	2308      	movs	r3, #8
 8000db4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000db8:	2340      	movs	r3, #64	; 0x40
 8000dba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000dbe:	2340      	movs	r3, #64	; 0x40
 8000dc0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000dc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dc8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000dcc:	2340      	movs	r3, #64	; 0x40
 8000dce:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000dd2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000dd6:	2102      	movs	r1, #2
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f006 fc83 	bl	80076e4 <HAL_RCC_ClockConfig>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <SystemClock_Config+0x158>
  {
    Error_Handler();
 8000de4:	f000 fc12 	bl	800160c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART3
 8000de8:	f107 0308 	add.w	r3, r7, #8
 8000dec:	4a2c      	ldr	r2, [pc, #176]	; (8000ea0 <SystemClock_Config+0x210>)
 8000dee:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_FDCAN|RCC_PERIPHCLK_UART8
                              |RCC_PERIPHCLK_SPI1|RCC_PERIPHCLK_SDMMC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000df0:	f107 0308 	add.w	r3, r7, #8
 8000df4:	2202      	movs	r2, #2
 8000df6:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000df8:	f107 0308 	add.w	r3, r7, #8
 8000dfc:	220c      	movs	r2, #12
 8000dfe:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000e00:	f107 0308 	add.w	r3, r7, #8
 8000e04:	2202      	movs	r2, #2
 8000e06:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000e08:	f107 0308 	add.w	r3, r7, #8
 8000e0c:	2202      	movs	r2, #2
 8000e0e:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 3;
 8000e10:	f107 0308 	add.w	r3, r7, #8
 8000e14:	2203      	movs	r2, #3
 8000e16:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000e18:	f107 0308 	add.w	r3, r7, #8
 8000e1c:	22c0      	movs	r2, #192	; 0xc0
 8000e1e:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000e20:	f107 0308 	add.w	r3, r7, #8
 8000e24:	2220      	movs	r2, #32
 8000e26:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000e28:	f107 0308 	add.w	r3, r7, #8
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8000e30:	f107 0308 	add.w	r3, r7, #8
 8000e34:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e38:	64da      	str	r2, [r3, #76]	; 0x4c
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000e3a:	f107 0308 	add.w	r3, r7, #8
 8000e3e:	2200      	movs	r2, #0
 8000e40:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000e42:	f107 0308 	add.w	r3, r7, #8
 8000e46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e4a:	66da      	str	r2, [r3, #108]	; 0x6c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e4c:	f107 0308 	add.w	r3, r7, #8
 8000e50:	2200      	movs	r2, #0
 8000e52:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000e54:	f107 0308 	add.w	r3, r7, #8
 8000e58:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000e5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000e60:	f107 0308 	add.w	r3, r7, #8
 8000e64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e68:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e6c:	f107 0308 	add.w	r3, r7, #8
 8000e70:	4618      	mov	r0, r3
 8000e72:	f006 ffe7 	bl	8007e44 <HAL_RCCEx_PeriphCLKConfig>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <SystemClock_Config+0x1f0>
  {
    Error_Handler();
 8000e7c:	f000 fbc6 	bl	800160c <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000e80:	f006 fde6 	bl	8007a50 <HAL_RCC_EnableCSS>
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8000e84:	f006 f80e 	bl	8006ea4 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8000e88:	bf00      	nop
 8000e8a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	58000400 	.word	0x58000400
 8000e98:	58024800 	.word	0x58024800
 8000e9c:	58024400 	.word	0x58024400
 8000ea0:	00459002 	.word	0x00459002

08000ea4 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000ea8:	4b2f      	ldr	r3, [pc, #188]	; (8000f68 <MX_FDCAN1_Init+0xc4>)
 8000eaa:	4a30      	ldr	r2, [pc, #192]	; (8000f6c <MX_FDCAN1_Init+0xc8>)
 8000eac:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8000eae:	4b2e      	ldr	r3, [pc, #184]	; (8000f68 <MX_FDCAN1_Init+0xc4>)
 8000eb0:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000eb4:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000eb6:	4b2c      	ldr	r3, [pc, #176]	; (8000f68 <MX_FDCAN1_Init+0xc4>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000ebc:	4b2a      	ldr	r3, [pc, #168]	; (8000f68 <MX_FDCAN1_Init+0xc4>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000ec2:	4b29      	ldr	r3, [pc, #164]	; (8000f68 <MX_FDCAN1_Init+0xc4>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000ec8:	4b27      	ldr	r3, [pc, #156]	; (8000f68 <MX_FDCAN1_Init+0xc4>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000ece:	4b26      	ldr	r3, [pc, #152]	; (8000f68 <MX_FDCAN1_Init+0xc4>)
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 50;
 8000ed4:	4b24      	ldr	r3, [pc, #144]	; (8000f68 <MX_FDCAN1_Init+0xc4>)
 8000ed6:	2232      	movs	r2, #50	; 0x32
 8000ed8:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 109;
 8000eda:	4b23      	ldr	r3, [pc, #140]	; (8000f68 <MX_FDCAN1_Init+0xc4>)
 8000edc:	226d      	movs	r2, #109	; 0x6d
 8000ede:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 50;
 8000ee0:	4b21      	ldr	r3, [pc, #132]	; (8000f68 <MX_FDCAN1_Init+0xc4>)
 8000ee2:	2232      	movs	r2, #50	; 0x32
 8000ee4:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000ee6:	4b20      	ldr	r3, [pc, #128]	; (8000f68 <MX_FDCAN1_Init+0xc4>)
 8000ee8:	2201      	movs	r2, #1
 8000eea:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 5;
 8000eec:	4b1e      	ldr	r3, [pc, #120]	; (8000f68 <MX_FDCAN1_Init+0xc4>)
 8000eee:	2205      	movs	r2, #5
 8000ef0:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 10;
 8000ef2:	4b1d      	ldr	r3, [pc, #116]	; (8000f68 <MX_FDCAN1_Init+0xc4>)
 8000ef4:	220a      	movs	r2, #10
 8000ef6:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 5;
 8000ef8:	4b1b      	ldr	r3, [pc, #108]	; (8000f68 <MX_FDCAN1_Init+0xc4>)
 8000efa:	2205      	movs	r2, #5
 8000efc:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000efe:	4b1a      	ldr	r3, [pc, #104]	; (8000f68 <MX_FDCAN1_Init+0xc4>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 2;
 8000f04:	4b18      	ldr	r3, [pc, #96]	; (8000f68 <MX_FDCAN1_Init+0xc4>)
 8000f06:	2202      	movs	r2, #2
 8000f08:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 2;
 8000f0a:	4b17      	ldr	r3, [pc, #92]	; (8000f68 <MX_FDCAN1_Init+0xc4>)
 8000f0c:	2202      	movs	r2, #2
 8000f0e:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 64;
 8000f10:	4b15      	ldr	r3, [pc, #84]	; (8000f68 <MX_FDCAN1_Init+0xc4>)
 8000f12:	2240      	movs	r2, #64	; 0x40
 8000f14:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_64;
 8000f16:	4b14      	ldr	r3, [pc, #80]	; (8000f68 <MX_FDCAN1_Init+0xc4>)
 8000f18:	2212      	movs	r2, #18
 8000f1a:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000f1c:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <MX_FDCAN1_Init+0xc4>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000f22:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <MX_FDCAN1_Init+0xc4>)
 8000f24:	2204      	movs	r2, #4
 8000f26:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000f28:	4b0f      	ldr	r3, [pc, #60]	; (8000f68 <MX_FDCAN1_Init+0xc4>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <MX_FDCAN1_Init+0xc4>)
 8000f30:	2204      	movs	r2, #4
 8000f32:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000f34:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <MX_FDCAN1_Init+0xc4>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000f3a:	4b0b      	ldr	r3, [pc, #44]	; (8000f68 <MX_FDCAN1_Init+0xc4>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000f40:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <MX_FDCAN1_Init+0xc4>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000f46:	4b08      	ldr	r3, [pc, #32]	; (8000f68 <MX_FDCAN1_Init+0xc4>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000f4c:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <MX_FDCAN1_Init+0xc4>)
 8000f4e:	2204      	movs	r2, #4
 8000f50:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000f52:	4805      	ldr	r0, [pc, #20]	; (8000f68 <MX_FDCAN1_Init+0xc4>)
 8000f54:	f003 f9f8 	bl	8004348 <HAL_FDCAN_Init>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 8000f5e:	f000 fb55 	bl	800160c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	2404067c 	.word	0x2404067c
 8000f6c:	4000a000 	.word	0x4000a000

08000f70 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000f74:	4b2e      	ldr	r3, [pc, #184]	; (8001030 <MX_FDCAN2_Init+0xc0>)
 8000f76:	4a2f      	ldr	r2, [pc, #188]	; (8001034 <MX_FDCAN2_Init+0xc4>)
 8000f78:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000f7a:	4b2d      	ldr	r3, [pc, #180]	; (8001030 <MX_FDCAN2_Init+0xc0>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000f80:	4b2b      	ldr	r3, [pc, #172]	; (8001030 <MX_FDCAN2_Init+0xc0>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000f86:	4b2a      	ldr	r3, [pc, #168]	; (8001030 <MX_FDCAN2_Init+0xc0>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000f8c:	4b28      	ldr	r3, [pc, #160]	; (8001030 <MX_FDCAN2_Init+0xc0>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000f92:	4b27      	ldr	r3, [pc, #156]	; (8001030 <MX_FDCAN2_Init+0xc0>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8000f98:	4b25      	ldr	r3, [pc, #148]	; (8001030 <MX_FDCAN2_Init+0xc0>)
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000f9e:	4b24      	ldr	r3, [pc, #144]	; (8001030 <MX_FDCAN2_Init+0xc0>)
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000fa4:	4b22      	ldr	r3, [pc, #136]	; (8001030 <MX_FDCAN2_Init+0xc0>)
 8000fa6:	2202      	movs	r2, #2
 8000fa8:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000faa:	4b21      	ldr	r3, [pc, #132]	; (8001030 <MX_FDCAN2_Init+0xc0>)
 8000fac:	2202      	movs	r2, #2
 8000fae:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000fb0:	4b1f      	ldr	r3, [pc, #124]	; (8001030 <MX_FDCAN2_Init+0xc0>)
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000fb6:	4b1e      	ldr	r3, [pc, #120]	; (8001030 <MX_FDCAN2_Init+0xc0>)
 8000fb8:	2201      	movs	r2, #1
 8000fba:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000fbc:	4b1c      	ldr	r3, [pc, #112]	; (8001030 <MX_FDCAN2_Init+0xc0>)
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000fc2:	4b1b      	ldr	r3, [pc, #108]	; (8001030 <MX_FDCAN2_Init+0xc0>)
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000fc8:	4b19      	ldr	r3, [pc, #100]	; (8001030 <MX_FDCAN2_Init+0xc0>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000fce:	4b18      	ldr	r3, [pc, #96]	; (8001030 <MX_FDCAN2_Init+0xc0>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000fd4:	4b16      	ldr	r3, [pc, #88]	; (8001030 <MX_FDCAN2_Init+0xc0>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000fda:	4b15      	ldr	r3, [pc, #84]	; (8001030 <MX_FDCAN2_Init+0xc0>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000fe0:	4b13      	ldr	r3, [pc, #76]	; (8001030 <MX_FDCAN2_Init+0xc0>)
 8000fe2:	2204      	movs	r2, #4
 8000fe4:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000fe6:	4b12      	ldr	r3, [pc, #72]	; (8001030 <MX_FDCAN2_Init+0xc0>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000fec:	4b10      	ldr	r3, [pc, #64]	; (8001030 <MX_FDCAN2_Init+0xc0>)
 8000fee:	2204      	movs	r2, #4
 8000ff0:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000ff2:	4b0f      	ldr	r3, [pc, #60]	; (8001030 <MX_FDCAN2_Init+0xc0>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000ff8:	4b0d      	ldr	r3, [pc, #52]	; (8001030 <MX_FDCAN2_Init+0xc0>)
 8000ffa:	2204      	movs	r2, #4
 8000ffc:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000ffe:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <MX_FDCAN2_Init+0xc0>)
 8001000:	2200      	movs	r2, #0
 8001002:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8001004:	4b0a      	ldr	r3, [pc, #40]	; (8001030 <MX_FDCAN2_Init+0xc0>)
 8001006:	2200      	movs	r2, #0
 8001008:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 800100a:	4b09      	ldr	r3, [pc, #36]	; (8001030 <MX_FDCAN2_Init+0xc0>)
 800100c:	2200      	movs	r2, #0
 800100e:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001010:	4b07      	ldr	r3, [pc, #28]	; (8001030 <MX_FDCAN2_Init+0xc0>)
 8001012:	2200      	movs	r2, #0
 8001014:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001016:	4b06      	ldr	r3, [pc, #24]	; (8001030 <MX_FDCAN2_Init+0xc0>)
 8001018:	2204      	movs	r2, #4
 800101a:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 800101c:	4804      	ldr	r0, [pc, #16]	; (8001030 <MX_FDCAN2_Init+0xc0>)
 800101e:	f003 f993 	bl	8004348 <HAL_FDCAN_Init>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8001028:	f000 faf0 	bl	800160c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 800102c:	bf00      	nop
 800102e:	bd80      	pop	{r7, pc}
 8001030:	24040b18 	.word	0x24040b18
 8001034:	4000a400 	.word	0x4000a400

08001038 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800103e:	1d3b      	adds	r3, r7, #4
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800104c:	2300      	movs	r3, #0
 800104e:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001050:	4b26      	ldr	r3, [pc, #152]	; (80010ec <MX_RTC_Init+0xb4>)
 8001052:	4a27      	ldr	r2, [pc, #156]	; (80010f0 <MX_RTC_Init+0xb8>)
 8001054:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001056:	4b25      	ldr	r3, [pc, #148]	; (80010ec <MX_RTC_Init+0xb4>)
 8001058:	2200      	movs	r2, #0
 800105a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 1;
 800105c:	4b23      	ldr	r3, [pc, #140]	; (80010ec <MX_RTC_Init+0xb4>)
 800105e:	2201      	movs	r2, #1
 8001060:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 16388;
 8001062:	4b22      	ldr	r3, [pc, #136]	; (80010ec <MX_RTC_Init+0xb4>)
 8001064:	f244 0204 	movw	r2, #16388	; 0x4004
 8001068:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800106a:	4b20      	ldr	r3, [pc, #128]	; (80010ec <MX_RTC_Init+0xb4>)
 800106c:	2200      	movs	r2, #0
 800106e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001070:	4b1e      	ldr	r3, [pc, #120]	; (80010ec <MX_RTC_Init+0xb4>)
 8001072:	2200      	movs	r2, #0
 8001074:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001076:	4b1d      	ldr	r3, [pc, #116]	; (80010ec <MX_RTC_Init+0xb4>)
 8001078:	2200      	movs	r2, #0
 800107a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800107c:	4b1b      	ldr	r3, [pc, #108]	; (80010ec <MX_RTC_Init+0xb4>)
 800107e:	2200      	movs	r2, #0
 8001080:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001082:	481a      	ldr	r0, [pc, #104]	; (80010ec <MX_RTC_Init+0xb4>)
 8001084:	f008 fda2 	bl	8009bcc <HAL_RTC_Init>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800108e:	f000 fabd 	bl	800160c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8001092:	2300      	movs	r3, #0
 8001094:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8001096:	2300      	movs	r3, #0
 8001098:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 800109a:	2300      	movs	r3, #0
 800109c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800109e:	2300      	movs	r3, #0
 80010a0:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80010a2:	2300      	movs	r3, #0
 80010a4:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80010a6:	1d3b      	adds	r3, r7, #4
 80010a8:	2200      	movs	r2, #0
 80010aa:	4619      	mov	r1, r3
 80010ac:	480f      	ldr	r0, [pc, #60]	; (80010ec <MX_RTC_Init+0xb4>)
 80010ae:	f008 fe05 	bl	8009cbc <HAL_RTC_SetTime>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_RTC_Init+0x84>
  {
    Error_Handler();
 80010b8:	f000 faa8 	bl	800160c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80010bc:	2301      	movs	r3, #1
 80010be:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80010c0:	2301      	movs	r3, #1
 80010c2:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 80010c4:	2301      	movs	r3, #1
 80010c6:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 80010c8:	2300      	movs	r3, #0
 80010ca:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80010cc:	463b      	mov	r3, r7
 80010ce:	2200      	movs	r2, #0
 80010d0:	4619      	mov	r1, r3
 80010d2:	4806      	ldr	r0, [pc, #24]	; (80010ec <MX_RTC_Init+0xb4>)
 80010d4:	f008 feec 	bl	8009eb0 <HAL_RTC_SetDate>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 80010de:	f000 fa95 	bl	800160c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80010e2:	bf00      	nop
 80010e4:	3718      	adds	r7, #24
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	24040658 	.word	0x24040658
 80010f0:	58004000 	.word	0x58004000

080010f4 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80010f8:	4b0d      	ldr	r3, [pc, #52]	; (8001130 <MX_SDMMC1_SD_Init+0x3c>)
 80010fa:	4a0e      	ldr	r2, [pc, #56]	; (8001134 <MX_SDMMC1_SD_Init+0x40>)
 80010fc:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80010fe:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <MX_SDMMC1_SD_Init+0x3c>)
 8001100:	2200      	movs	r2, #0
 8001102:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001104:	4b0a      	ldr	r3, [pc, #40]	; (8001130 <MX_SDMMC1_SD_Init+0x3c>)
 8001106:	2200      	movs	r2, #0
 8001108:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800110a:	4b09      	ldr	r3, [pc, #36]	; (8001130 <MX_SDMMC1_SD_Init+0x3c>)
 800110c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001110:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 8001112:	4b07      	ldr	r3, [pc, #28]	; (8001130 <MX_SDMMC1_SD_Init+0x3c>)
 8001114:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001118:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 800111a:	4b05      	ldr	r3, [pc, #20]	; (8001130 <MX_SDMMC1_SD_Init+0x3c>)
 800111c:	2200      	movs	r2, #0
 800111e:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 8001120:	4b03      	ldr	r3, [pc, #12]	; (8001130 <MX_SDMMC1_SD_Init+0x3c>)
 8001122:	2201      	movs	r2, #1
 8001124:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001126:	bf00      	nop
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	2404058c 	.word	0x2404058c
 8001134:	52007000 	.word	0x52007000

08001138 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800113c:	4b27      	ldr	r3, [pc, #156]	; (80011dc <MX_SPI1_Init+0xa4>)
 800113e:	4a28      	ldr	r2, [pc, #160]	; (80011e0 <MX_SPI1_Init+0xa8>)
 8001140:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001142:	4b26      	ldr	r3, [pc, #152]	; (80011dc <MX_SPI1_Init+0xa4>)
 8001144:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001148:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800114a:	4b24      	ldr	r3, [pc, #144]	; (80011dc <MX_SPI1_Init+0xa4>)
 800114c:	2200      	movs	r2, #0
 800114e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001150:	4b22      	ldr	r3, [pc, #136]	; (80011dc <MX_SPI1_Init+0xa4>)
 8001152:	2207      	movs	r2, #7
 8001154:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001156:	4b21      	ldr	r3, [pc, #132]	; (80011dc <MX_SPI1_Init+0xa4>)
 8001158:	2200      	movs	r2, #0
 800115a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800115c:	4b1f      	ldr	r3, [pc, #124]	; (80011dc <MX_SPI1_Init+0xa4>)
 800115e:	2200      	movs	r2, #0
 8001160:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001162:	4b1e      	ldr	r3, [pc, #120]	; (80011dc <MX_SPI1_Init+0xa4>)
 8001164:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001168:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800116a:	4b1c      	ldr	r3, [pc, #112]	; (80011dc <MX_SPI1_Init+0xa4>)
 800116c:	2200      	movs	r2, #0
 800116e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001170:	4b1a      	ldr	r3, [pc, #104]	; (80011dc <MX_SPI1_Init+0xa4>)
 8001172:	2200      	movs	r2, #0
 8001174:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001176:	4b19      	ldr	r3, [pc, #100]	; (80011dc <MX_SPI1_Init+0xa4>)
 8001178:	2200      	movs	r2, #0
 800117a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800117c:	4b17      	ldr	r3, [pc, #92]	; (80011dc <MX_SPI1_Init+0xa4>)
 800117e:	2200      	movs	r2, #0
 8001180:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001182:	4b16      	ldr	r3, [pc, #88]	; (80011dc <MX_SPI1_Init+0xa4>)
 8001184:	2200      	movs	r2, #0
 8001186:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001188:	4b14      	ldr	r3, [pc, #80]	; (80011dc <MX_SPI1_Init+0xa4>)
 800118a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800118e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001190:	4b12      	ldr	r3, [pc, #72]	; (80011dc <MX_SPI1_Init+0xa4>)
 8001192:	2200      	movs	r2, #0
 8001194:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001196:	4b11      	ldr	r3, [pc, #68]	; (80011dc <MX_SPI1_Init+0xa4>)
 8001198:	2200      	movs	r2, #0
 800119a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800119c:	4b0f      	ldr	r3, [pc, #60]	; (80011dc <MX_SPI1_Init+0xa4>)
 800119e:	2200      	movs	r2, #0
 80011a0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80011a2:	4b0e      	ldr	r3, [pc, #56]	; (80011dc <MX_SPI1_Init+0xa4>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80011a8:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <MX_SPI1_Init+0xa4>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80011ae:	4b0b      	ldr	r3, [pc, #44]	; (80011dc <MX_SPI1_Init+0xa4>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80011b4:	4b09      	ldr	r3, [pc, #36]	; (80011dc <MX_SPI1_Init+0xa4>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80011ba:	4b08      	ldr	r3, [pc, #32]	; (80011dc <MX_SPI1_Init+0xa4>)
 80011bc:	2200      	movs	r2, #0
 80011be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80011c0:	4b06      	ldr	r3, [pc, #24]	; (80011dc <MX_SPI1_Init+0xa4>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011c6:	4805      	ldr	r0, [pc, #20]	; (80011dc <MX_SPI1_Init+0xa4>)
 80011c8:	f00a ff9a 	bl	800c100 <HAL_SPI_Init>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 80011d2:	f000 fa1b 	bl	800160c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	240407ac 	.word	0x240407ac
 80011e0:	40013000 	.word	0x40013000

080011e4 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 80011e8:	4b22      	ldr	r3, [pc, #136]	; (8001274 <MX_UART8_Init+0x90>)
 80011ea:	4a23      	ldr	r2, [pc, #140]	; (8001278 <MX_UART8_Init+0x94>)
 80011ec:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 80011ee:	4b21      	ldr	r3, [pc, #132]	; (8001274 <MX_UART8_Init+0x90>)
 80011f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011f4:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80011f6:	4b1f      	ldr	r3, [pc, #124]	; (8001274 <MX_UART8_Init+0x90>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80011fc:	4b1d      	ldr	r3, [pc, #116]	; (8001274 <MX_UART8_Init+0x90>)
 80011fe:	2200      	movs	r2, #0
 8001200:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8001202:	4b1c      	ldr	r3, [pc, #112]	; (8001274 <MX_UART8_Init+0x90>)
 8001204:	2200      	movs	r2, #0
 8001206:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8001208:	4b1a      	ldr	r3, [pc, #104]	; (8001274 <MX_UART8_Init+0x90>)
 800120a:	220c      	movs	r2, #12
 800120c:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800120e:	4b19      	ldr	r3, [pc, #100]	; (8001274 <MX_UART8_Init+0x90>)
 8001210:	2200      	movs	r2, #0
 8001212:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001214:	4b17      	ldr	r3, [pc, #92]	; (8001274 <MX_UART8_Init+0x90>)
 8001216:	2200      	movs	r2, #0
 8001218:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800121a:	4b16      	ldr	r3, [pc, #88]	; (8001274 <MX_UART8_Init+0x90>)
 800121c:	2200      	movs	r2, #0
 800121e:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001220:	4b14      	ldr	r3, [pc, #80]	; (8001274 <MX_UART8_Init+0x90>)
 8001222:	2200      	movs	r2, #0
 8001224:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001226:	4b13      	ldr	r3, [pc, #76]	; (8001274 <MX_UART8_Init+0x90>)
 8001228:	2200      	movs	r2, #0
 800122a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 800122c:	4811      	ldr	r0, [pc, #68]	; (8001274 <MX_UART8_Init+0x90>)
 800122e:	f00b f87a 	bl	800c326 <HAL_UART_Init>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8001238:	f000 f9e8 	bl	800160c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800123c:	2100      	movs	r1, #0
 800123e:	480d      	ldr	r0, [pc, #52]	; (8001274 <MX_UART8_Init+0x90>)
 8001240:	f00c fa0a 	bl	800d658 <HAL_UARTEx_SetTxFifoThreshold>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 800124a:	f000 f9df 	bl	800160c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800124e:	2100      	movs	r1, #0
 8001250:	4808      	ldr	r0, [pc, #32]	; (8001274 <MX_UART8_Init+0x90>)
 8001252:	f00c fa3f 	bl	800d6d4 <HAL_UARTEx_SetRxFifoThreshold>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 800125c:	f000 f9d6 	bl	800160c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8001260:	4804      	ldr	r0, [pc, #16]	; (8001274 <MX_UART8_Init+0x90>)
 8001262:	f00c f9c0 	bl	800d5e6 <HAL_UARTEx_DisableFifoMode>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 800126c:	f000 f9ce 	bl	800160c <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8001270:	bf00      	nop
 8001272:	bd80      	pop	{r7, pc}
 8001274:	2404071c 	.word	0x2404071c
 8001278:	40007c00 	.word	0x40007c00

0800127c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001280:	4b22      	ldr	r3, [pc, #136]	; (800130c <MX_USART3_UART_Init+0x90>)
 8001282:	4a23      	ldr	r2, [pc, #140]	; (8001310 <MX_USART3_UART_Init+0x94>)
 8001284:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8001286:	4b21      	ldr	r3, [pc, #132]	; (800130c <MX_USART3_UART_Init+0x90>)
 8001288:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800128c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800128e:	4b1f      	ldr	r3, [pc, #124]	; (800130c <MX_USART3_UART_Init+0x90>)
 8001290:	2200      	movs	r2, #0
 8001292:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001294:	4b1d      	ldr	r3, [pc, #116]	; (800130c <MX_USART3_UART_Init+0x90>)
 8001296:	2200      	movs	r2, #0
 8001298:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800129a:	4b1c      	ldr	r3, [pc, #112]	; (800130c <MX_USART3_UART_Init+0x90>)
 800129c:	2200      	movs	r2, #0
 800129e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012a0:	4b1a      	ldr	r3, [pc, #104]	; (800130c <MX_USART3_UART_Init+0x90>)
 80012a2:	220c      	movs	r2, #12
 80012a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012a6:	4b19      	ldr	r3, [pc, #100]	; (800130c <MX_USART3_UART_Init+0x90>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012ac:	4b17      	ldr	r3, [pc, #92]	; (800130c <MX_USART3_UART_Init+0x90>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012b2:	4b16      	ldr	r3, [pc, #88]	; (800130c <MX_USART3_UART_Init+0x90>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012b8:	4b14      	ldr	r3, [pc, #80]	; (800130c <MX_USART3_UART_Init+0x90>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012be:	4b13      	ldr	r3, [pc, #76]	; (800130c <MX_USART3_UART_Init+0x90>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80012c4:	4811      	ldr	r0, [pc, #68]	; (800130c <MX_USART3_UART_Init+0x90>)
 80012c6:	f00b f82e 	bl	800c326 <HAL_UART_Init>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80012d0:	f000 f99c 	bl	800160c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012d4:	2100      	movs	r1, #0
 80012d6:	480d      	ldr	r0, [pc, #52]	; (800130c <MX_USART3_UART_Init+0x90>)
 80012d8:	f00c f9be 	bl	800d658 <HAL_UARTEx_SetTxFifoThreshold>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80012e2:	f000 f993 	bl	800160c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012e6:	2100      	movs	r1, #0
 80012e8:	4808      	ldr	r0, [pc, #32]	; (800130c <MX_USART3_UART_Init+0x90>)
 80012ea:	f00c f9f3 	bl	800d6d4 <HAL_UARTEx_SetRxFifoThreshold>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80012f4:	f000 f98a 	bl	800160c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80012f8:	4804      	ldr	r0, [pc, #16]	; (800130c <MX_USART3_UART_Init+0x90>)
 80012fa:	f00c f974 	bl	800d5e6 <HAL_UARTEx_DisableFifoMode>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001304:	f000 f982 	bl	800160c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001308:	bf00      	nop
 800130a:	bd80      	pop	{r7, pc}
 800130c:	240402d0 	.word	0x240402d0
 8001310:	40004800 	.word	0x40004800

08001314 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800131a:	4b0d      	ldr	r3, [pc, #52]	; (8001350 <MX_DMA_Init+0x3c>)
 800131c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001320:	4a0b      	ldr	r2, [pc, #44]	; (8001350 <MX_DMA_Init+0x3c>)
 8001322:	f043 0301 	orr.w	r3, r3, #1
 8001326:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800132a:	4b09      	ldr	r3, [pc, #36]	; (8001350 <MX_DMA_Init+0x3c>)
 800132c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001330:	f003 0301 	and.w	r3, r3, #1
 8001334:	607b      	str	r3, [r7, #4]
 8001336:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001338:	2200      	movs	r2, #0
 800133a:	2100      	movs	r1, #0
 800133c:	200b      	movs	r0, #11
 800133e:	f000 fef6 	bl	800212e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001342:	200b      	movs	r0, #11
 8001344:	f000 ff0d 	bl	8002162 <HAL_NVIC_EnableIRQ>

}
 8001348:	bf00      	nop
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	58024400 	.word	0x58024400

08001354 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b08c      	sub	sp, #48	; 0x30
 8001358:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135a:	f107 031c 	add.w	r3, r7, #28
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	605a      	str	r2, [r3, #4]
 8001364:	609a      	str	r2, [r3, #8]
 8001366:	60da      	str	r2, [r3, #12]
 8001368:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800136a:	4b69      	ldr	r3, [pc, #420]	; (8001510 <MX_GPIO_Init+0x1bc>)
 800136c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001370:	4a67      	ldr	r2, [pc, #412]	; (8001510 <MX_GPIO_Init+0x1bc>)
 8001372:	f043 0310 	orr.w	r3, r3, #16
 8001376:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800137a:	4b65      	ldr	r3, [pc, #404]	; (8001510 <MX_GPIO_Init+0x1bc>)
 800137c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001380:	f003 0310 	and.w	r3, r3, #16
 8001384:	61bb      	str	r3, [r7, #24]
 8001386:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001388:	4b61      	ldr	r3, [pc, #388]	; (8001510 <MX_GPIO_Init+0x1bc>)
 800138a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800138e:	4a60      	ldr	r2, [pc, #384]	; (8001510 <MX_GPIO_Init+0x1bc>)
 8001390:	f043 0304 	orr.w	r3, r3, #4
 8001394:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001398:	4b5d      	ldr	r3, [pc, #372]	; (8001510 <MX_GPIO_Init+0x1bc>)
 800139a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800139e:	f003 0304 	and.w	r3, r3, #4
 80013a2:	617b      	str	r3, [r7, #20]
 80013a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013a6:	4b5a      	ldr	r3, [pc, #360]	; (8001510 <MX_GPIO_Init+0x1bc>)
 80013a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ac:	4a58      	ldr	r2, [pc, #352]	; (8001510 <MX_GPIO_Init+0x1bc>)
 80013ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013b6:	4b56      	ldr	r3, [pc, #344]	; (8001510 <MX_GPIO_Init+0x1bc>)
 80013b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013c0:	613b      	str	r3, [r7, #16]
 80013c2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c4:	4b52      	ldr	r3, [pc, #328]	; (8001510 <MX_GPIO_Init+0x1bc>)
 80013c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ca:	4a51      	ldr	r2, [pc, #324]	; (8001510 <MX_GPIO_Init+0x1bc>)
 80013cc:	f043 0301 	orr.w	r3, r3, #1
 80013d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013d4:	4b4e      	ldr	r3, [pc, #312]	; (8001510 <MX_GPIO_Init+0x1bc>)
 80013d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e2:	4b4b      	ldr	r3, [pc, #300]	; (8001510 <MX_GPIO_Init+0x1bc>)
 80013e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013e8:	4a49      	ldr	r2, [pc, #292]	; (8001510 <MX_GPIO_Init+0x1bc>)
 80013ea:	f043 0302 	orr.w	r3, r3, #2
 80013ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013f2:	4b47      	ldr	r3, [pc, #284]	; (8001510 <MX_GPIO_Init+0x1bc>)
 80013f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013f8:	f003 0302 	and.w	r3, r3, #2
 80013fc:	60bb      	str	r3, [r7, #8]
 80013fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001400:	4b43      	ldr	r3, [pc, #268]	; (8001510 <MX_GPIO_Init+0x1bc>)
 8001402:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001406:	4a42      	ldr	r2, [pc, #264]	; (8001510 <MX_GPIO_Init+0x1bc>)
 8001408:	f043 0308 	orr.w	r3, r3, #8
 800140c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001410:	4b3f      	ldr	r3, [pc, #252]	; (8001510 <MX_GPIO_Init+0x1bc>)
 8001412:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001416:	f003 0308 	and.w	r3, r3, #8
 800141a:	607b      	str	r3, [r7, #4]
 800141c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RS_485_TX_EN_Pin|RS_485_RX_EN_Pin, GPIO_PIN_RESET);
 800141e:	2200      	movs	r2, #0
 8001420:	210c      	movs	r1, #12
 8001422:	483c      	ldr	r0, [pc, #240]	; (8001514 <MX_GPIO_Init+0x1c0>)
 8001424:	f004 fa94 	bl	8005950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TELE_CE_Pin|TELE_CS_Pin, GPIO_PIN_RESET);
 8001428:	2200      	movs	r2, #0
 800142a:	2103      	movs	r1, #3
 800142c:	483a      	ldr	r0, [pc, #232]	; (8001518 <MX_GPIO_Init+0x1c4>)
 800142e:	f004 fa8f 	bl	8005950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001432:	2200      	movs	r2, #0
 8001434:	2101      	movs	r1, #1
 8001436:	4839      	ldr	r0, [pc, #228]	; (800151c <MX_GPIO_Init+0x1c8>)
 8001438:	f004 fa8a 	bl	8005950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPS_RST_GPIO_Port, GPS_RST_Pin, GPIO_PIN_SET);
 800143c:	2201      	movs	r2, #1
 800143e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001442:	4837      	ldr	r0, [pc, #220]	; (8001520 <MX_GPIO_Init+0x1cc>)
 8001444:	f004 fa84 	bl	8005950 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RS_485_TX_EN_Pin RS_485_RX_EN_Pin */
  GPIO_InitStruct.Pin = RS_485_TX_EN_Pin|RS_485_RX_EN_Pin;
 8001448:	230c      	movs	r3, #12
 800144a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800144c:	2301      	movs	r3, #1
 800144e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001454:	2300      	movs	r3, #0
 8001456:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001458:	f107 031c 	add.w	r3, r7, #28
 800145c:	4619      	mov	r1, r3
 800145e:	482d      	ldr	r0, [pc, #180]	; (8001514 <MX_GPIO_Init+0x1c0>)
 8001460:	f004 f8ae 	bl	80055c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TELE_CE_Pin TELE_CS_Pin */
  GPIO_InitStruct.Pin = TELE_CE_Pin|TELE_CS_Pin;
 8001464:	2303      	movs	r3, #3
 8001466:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001468:	2301      	movs	r3, #1
 800146a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001470:	2300      	movs	r3, #0
 8001472:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001474:	f107 031c 	add.w	r3, r7, #28
 8001478:	4619      	mov	r1, r3
 800147a:	4827      	ldr	r0, [pc, #156]	; (8001518 <MX_GPIO_Init+0x1c4>)
 800147c:	f004 f8a0 	bl	80055c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TELE_IRQ_Pin */
  GPIO_InitStruct.Pin = TELE_IRQ_Pin;
 8001480:	2304      	movs	r3, #4
 8001482:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001484:	4b27      	ldr	r3, [pc, #156]	; (8001524 <MX_GPIO_Init+0x1d0>)
 8001486:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001488:	2300      	movs	r3, #0
 800148a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TELE_IRQ_GPIO_Port, &GPIO_InitStruct);
 800148c:	f107 031c 	add.w	r3, r7, #28
 8001490:	4619      	mov	r1, r3
 8001492:	4821      	ldr	r0, [pc, #132]	; (8001518 <MX_GPIO_Init+0x1c4>)
 8001494:	f004 f894 	bl	80055c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001498:	2301      	movs	r3, #1
 800149a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800149c:	2301      	movs	r3, #1
 800149e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a4:	2300      	movs	r3, #0
 80014a6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80014a8:	f107 031c 	add.w	r3, r7, #28
 80014ac:	4619      	mov	r1, r3
 80014ae:	481b      	ldr	r0, [pc, #108]	; (800151c <MX_GPIO_Init+0x1c8>)
 80014b0:	f004 f886 	bl	80055c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_INT_Pin */
  GPIO_InitStruct.Pin = BTN_INT_Pin;
 80014b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014ba:	4b1a      	ldr	r3, [pc, #104]	; (8001524 <MX_GPIO_Init+0x1d0>)
 80014bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BTN_INT_GPIO_Port, &GPIO_InitStruct);
 80014c2:	f107 031c 	add.w	r3, r7, #28
 80014c6:	4619      	mov	r1, r3
 80014c8:	4812      	ldr	r0, [pc, #72]	; (8001514 <MX_GPIO_Init+0x1c0>)
 80014ca:	f004 f879 	bl	80055c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPS_RST_Pin */
  GPIO_InitStruct.Pin = GPS_RST_Pin;
 80014ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d4:	2301      	movs	r3, #1
 80014d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014dc:	2300      	movs	r3, #0
 80014de:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPS_RST_GPIO_Port, &GPIO_InitStruct);
 80014e0:	f107 031c 	add.w	r3, r7, #28
 80014e4:	4619      	mov	r1, r3
 80014e6:	480e      	ldr	r0, [pc, #56]	; (8001520 <MX_GPIO_Init+0x1cc>)
 80014e8:	f004 f86a 	bl	80055c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CARD_DET_Pin */
  GPIO_InitStruct.Pin = CARD_DET_Pin;
 80014ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014f2:	2300      	movs	r3, #0
 80014f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f6:	2300      	movs	r3, #0
 80014f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CARD_DET_GPIO_Port, &GPIO_InitStruct);
 80014fa:	f107 031c 	add.w	r3, r7, #28
 80014fe:	4619      	mov	r1, r3
 8001500:	4805      	ldr	r0, [pc, #20]	; (8001518 <MX_GPIO_Init+0x1c4>)
 8001502:	f004 f85d 	bl	80055c0 <HAL_GPIO_Init>

}
 8001506:	bf00      	nop
 8001508:	3730      	adds	r7, #48	; 0x30
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	58024400 	.word	0x58024400
 8001514:	58021000 	.word	0x58021000
 8001518:	58020000 	.word	0x58020000
 800151c:	58020400 	.word	0x58020400
 8001520:	58020c00 	.word	0x58020c00
 8001524:	11110000 	.word	0x11110000

08001528 <FDCAN_Config>:
    return 2; //buffer 2 is full
  }
  memcpy((DataBuffer.Data.DataBuff + DataBuffer.counter), Data, len+1);
  return 0;
}
static void FDCAN_Config(void){
 8001528:	b580      	push	{r7, lr}
 800152a:	b08a      	sub	sp, #40	; 0x28
 800152c:	af02      	add	r7, sp, #8
	FDCAN_FilterTypeDef sFilterConfig;

	  /* Configure Rx filter */
	  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800152e:	2300      	movs	r3, #0
 8001530:	603b      	str	r3, [r7, #0]
	  sFilterConfig.FilterIndex = 0;
 8001532:	2300      	movs	r3, #0
 8001534:	607b      	str	r3, [r7, #4]
	  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8001536:	2302      	movs	r3, #2
 8001538:	60bb      	str	r3, [r7, #8]
	  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800153a:	2301      	movs	r3, #1
 800153c:	60fb      	str	r3, [r7, #12]
	  sFilterConfig.FilterID1 = 0x321;
 800153e:	f240 3321 	movw	r3, #801	; 0x321
 8001542:	613b      	str	r3, [r7, #16]
	  sFilterConfig.FilterID2 = 0x7FF;
 8001544:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001548:	617b      	str	r3, [r7, #20]
	  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) == HAL_OK)
 800154a:	463b      	mov	r3, r7
 800154c:	4619      	mov	r1, r3
 800154e:	4817      	ldr	r0, [pc, #92]	; (80015ac <FDCAN_Config+0x84>)
 8001550:	f003 f8dc 	bl	800470c <HAL_FDCAN_ConfigFilter>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d102      	bne.n	8001560 <FDCAN_Config+0x38>
	  {
	    printf("Filter configured\n");
 800155a:	4815      	ldr	r0, [pc, #84]	; (80015b0 <FDCAN_Config+0x88>)
 800155c:	f014 fcd2 	bl	8015f04 <puts>
	  }

	  /* Configure global filter:
	     Filter all remote frames with STD and EXT ID
	     Reject non matching frames with STD ID and EXT ID */
	  if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
 8001560:	2300      	movs	r3, #0
 8001562:	9300      	str	r3, [sp, #0]
 8001564:	2300      	movs	r3, #0
 8001566:	2202      	movs	r2, #2
 8001568:	2102      	movs	r1, #2
 800156a:	4810      	ldr	r0, [pc, #64]	; (80015ac <FDCAN_Config+0x84>)
 800156c:	f003 f944 	bl	80047f8 <HAL_FDCAN_ConfigGlobalFilter>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <FDCAN_Config+0x52>
	  {
	    Error_Handler();
 8001576:	f000 f849 	bl	800160c <Error_Handler>
	  }
	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 800157a:	480c      	ldr	r0, [pc, #48]	; (80015ac <FDCAN_Config+0x84>)
 800157c:	f003 f98c 	bl	8004898 <HAL_FDCAN_Start>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <FDCAN_Config+0x62>
	  {
	    Error_Handler();
 8001586:	f000 f841 	bl	800160c <Error_Handler>
	  }
	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 800158a:	2200      	movs	r2, #0
 800158c:	2101      	movs	r1, #1
 800158e:	4807      	ldr	r0, [pc, #28]	; (80015ac <FDCAN_Config+0x84>)
 8001590:	f003 fb0c 	bl	8004bac <HAL_FDCAN_ActivateNotification>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <FDCAN_Config+0x76>
	  {
	    /* Notification Error */
	    Error_Handler();
 800159a:	f000 f837 	bl	800160c <Error_Handler>
	  }
	HAL_FDCAN_EnableTxDelayCompensation(&hfdcan1);
 800159e:	4803      	ldr	r0, [pc, #12]	; (80015ac <FDCAN_Config+0x84>)
 80015a0:	f003 f957 	bl	8004852 <HAL_FDCAN_EnableTxDelayCompensation>

}
 80015a4:	bf00      	nop
 80015a6:	3720      	adds	r7, #32
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	2404067c 	.word	0x2404067c
 80015b0:	080170b4 	.word	0x080170b4

080015b4 <HAL_FDCAN_RxFifo0Callback>:
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan1, uint32_t RxFifo0ITs)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
	if (HAL_FDCAN_GetRxMessage(hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 80015be:	4b0a      	ldr	r3, [pc, #40]	; (80015e8 <HAL_FDCAN_RxFifo0Callback+0x34>)
 80015c0:	4a0a      	ldr	r2, [pc, #40]	; (80015ec <HAL_FDCAN_RxFifo0Callback+0x38>)
 80015c2:	2140      	movs	r1, #64	; 0x40
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f003 f993 	bl	80048f0 <HAL_FDCAN_GetRxMessage>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d106      	bne.n	80015de <HAL_FDCAN_RxFifo0Callback+0x2a>
			      {
					HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80015d0:	2101      	movs	r1, #1
 80015d2:	4807      	ldr	r0, [pc, #28]	; (80015f0 <HAL_FDCAN_RxFifo0Callback+0x3c>)
 80015d4:	f004 f9d5 	bl	8005982 <HAL_GPIO_TogglePin>
					printf("Packet Acquired!\n");
 80015d8:	4806      	ldr	r0, [pc, #24]	; (80015f4 <HAL_FDCAN_RxFifo0Callback+0x40>)
 80015da:	f014 fc93 	bl	8015f04 <puts>
				  			  printf("%c",RxData[i]);
				  	  }
				  	  printf("\n");
				  	*/
			      }
}
 80015de:	bf00      	nop
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	24040a64 	.word	0x24040a64
 80015ec:	24040af0 	.word	0x24040af0
 80015f0:	58020400 	.word	0x58020400
 80015f4:	080170c8 	.word	0x080170c8

080015f8 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  /*for(int i=0; i<BUFFLENGTH; i++){
	  printf("%c", rxBuf[i]);
  }*/
  //printf("GPS Recieved\n");

}
 8001600:	bf00      	nop
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001610:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("Error\n");
 8001612:	4802      	ldr	r0, [pc, #8]	; (800161c <Error_Handler+0x10>)
 8001614:	f014 fc76 	bl	8015f04 <puts>
 8001618:	e7fb      	b.n	8001612 <Error_Handler+0x6>
 800161a:	bf00      	nop
 800161c:	080170dc 	.word	0x080170dc

08001620 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001626:	4b0a      	ldr	r3, [pc, #40]	; (8001650 <HAL_MspInit+0x30>)
 8001628:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800162c:	4a08      	ldr	r2, [pc, #32]	; (8001650 <HAL_MspInit+0x30>)
 800162e:	f043 0302 	orr.w	r3, r3, #2
 8001632:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001636:	4b06      	ldr	r3, [pc, #24]	; (8001650 <HAL_MspInit+0x30>)
 8001638:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800163c:	f003 0302 	and.w	r3, r3, #2
 8001640:	607b      	str	r3, [r7, #4]
 8001642:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001644:	bf00      	nop
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	58024400 	.word	0x58024400

08001654 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b08c      	sub	sp, #48	; 0x30
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165c:	f107 031c 	add.w	r3, r7, #28
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	60da      	str	r2, [r3, #12]
 800166a:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a48      	ldr	r2, [pc, #288]	; (8001794 <HAL_FDCAN_MspInit+0x140>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d14e      	bne.n	8001714 <HAL_FDCAN_MspInit+0xc0>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001676:	4b48      	ldr	r3, [pc, #288]	; (8001798 <HAL_FDCAN_MspInit+0x144>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	3301      	adds	r3, #1
 800167c:	4a46      	ldr	r2, [pc, #280]	; (8001798 <HAL_FDCAN_MspInit+0x144>)
 800167e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001680:	4b45      	ldr	r3, [pc, #276]	; (8001798 <HAL_FDCAN_MspInit+0x144>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2b01      	cmp	r3, #1
 8001686:	d10e      	bne.n	80016a6 <HAL_FDCAN_MspInit+0x52>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001688:	4b44      	ldr	r3, [pc, #272]	; (800179c <HAL_FDCAN_MspInit+0x148>)
 800168a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800168e:	4a43      	ldr	r2, [pc, #268]	; (800179c <HAL_FDCAN_MspInit+0x148>)
 8001690:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001694:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001698:	4b40      	ldr	r3, [pc, #256]	; (800179c <HAL_FDCAN_MspInit+0x148>)
 800169a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800169e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016a2:	61bb      	str	r3, [r7, #24]
 80016a4:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a6:	4b3d      	ldr	r3, [pc, #244]	; (800179c <HAL_FDCAN_MspInit+0x148>)
 80016a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016ac:	4a3b      	ldr	r2, [pc, #236]	; (800179c <HAL_FDCAN_MspInit+0x148>)
 80016ae:	f043 0302 	orr.w	r3, r3, #2
 80016b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016b6:	4b39      	ldr	r3, [pc, #228]	; (800179c <HAL_FDCAN_MspInit+0x148>)
 80016b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	617b      	str	r3, [r7, #20]
 80016c2:	697b      	ldr	r3, [r7, #20]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016c4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ca:	2302      	movs	r3, #2
 80016cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d2:	2303      	movs	r3, #3
 80016d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80016d6:	2309      	movs	r3, #9
 80016d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016da:	f107 031c 	add.w	r3, r7, #28
 80016de:	4619      	mov	r1, r3
 80016e0:	482f      	ldr	r0, [pc, #188]	; (80017a0 <HAL_FDCAN_MspInit+0x14c>)
 80016e2:	f003 ff6d 	bl	80055c0 <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_PMCR_I2C_PB8_FMP);
 80016e6:	2040      	movs	r0, #64	; 0x40
 80016e8:	f004 f966 	bl	80059b8 <HAL_I2CEx_EnableFastModePlus>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_PMCR_I2C_PB9_FMP);
 80016ec:	2080      	movs	r0, #128	; 0x80
 80016ee:	f004 f963 	bl	80059b8 <HAL_I2CEx_EnableFastModePlus>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80016f2:	2200      	movs	r2, #0
 80016f4:	2100      	movs	r1, #0
 80016f6:	2013      	movs	r0, #19
 80016f8:	f000 fd19 	bl	800212e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80016fc:	2013      	movs	r0, #19
 80016fe:	f000 fd30 	bl	8002162 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8001702:	2200      	movs	r2, #0
 8001704:	2100      	movs	r1, #0
 8001706:	2015      	movs	r0, #21
 8001708:	f000 fd11 	bl	800212e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 800170c:	2015      	movs	r0, #21
 800170e:	f000 fd28 	bl	8002162 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8001712:	e03b      	b.n	800178c <HAL_FDCAN_MspInit+0x138>
  else if(hfdcan->Instance==FDCAN2)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a22      	ldr	r2, [pc, #136]	; (80017a4 <HAL_FDCAN_MspInit+0x150>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d136      	bne.n	800178c <HAL_FDCAN_MspInit+0x138>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800171e:	4b1e      	ldr	r3, [pc, #120]	; (8001798 <HAL_FDCAN_MspInit+0x144>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	3301      	adds	r3, #1
 8001724:	4a1c      	ldr	r2, [pc, #112]	; (8001798 <HAL_FDCAN_MspInit+0x144>)
 8001726:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001728:	4b1b      	ldr	r3, [pc, #108]	; (8001798 <HAL_FDCAN_MspInit+0x144>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d10e      	bne.n	800174e <HAL_FDCAN_MspInit+0xfa>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001730:	4b1a      	ldr	r3, [pc, #104]	; (800179c <HAL_FDCAN_MspInit+0x148>)
 8001732:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001736:	4a19      	ldr	r2, [pc, #100]	; (800179c <HAL_FDCAN_MspInit+0x148>)
 8001738:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800173c:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001740:	4b16      	ldr	r3, [pc, #88]	; (800179c <HAL_FDCAN_MspInit+0x148>)
 8001742:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800174a:	613b      	str	r3, [r7, #16]
 800174c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800174e:	4b13      	ldr	r3, [pc, #76]	; (800179c <HAL_FDCAN_MspInit+0x148>)
 8001750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001754:	4a11      	ldr	r2, [pc, #68]	; (800179c <HAL_FDCAN_MspInit+0x148>)
 8001756:	f043 0302 	orr.w	r3, r3, #2
 800175a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800175e:	4b0f      	ldr	r3, [pc, #60]	; (800179c <HAL_FDCAN_MspInit+0x148>)
 8001760:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001764:	f003 0302 	and.w	r3, r3, #2
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800176c:	2360      	movs	r3, #96	; 0x60
 800176e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001770:	2302      	movs	r3, #2
 8001772:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001778:	2300      	movs	r3, #0
 800177a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 800177c:	2309      	movs	r3, #9
 800177e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001780:	f107 031c 	add.w	r3, r7, #28
 8001784:	4619      	mov	r1, r3
 8001786:	4806      	ldr	r0, [pc, #24]	; (80017a0 <HAL_FDCAN_MspInit+0x14c>)
 8001788:	f003 ff1a 	bl	80055c0 <HAL_GPIO_Init>
}
 800178c:	bf00      	nop
 800178e:	3730      	adds	r7, #48	; 0x30
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	4000a000 	.word	0x4000a000
 8001798:	24040208 	.word	0x24040208
 800179c:	58024400 	.word	0x58024400
 80017a0:	58020400 	.word	0x58020400
 80017a4:	4000a400 	.word	0x4000a400

080017a8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a07      	ldr	r2, [pc, #28]	; (80017d4 <HAL_RTC_MspInit+0x2c>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d105      	bne.n	80017c6 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80017ba:	4b07      	ldr	r3, [pc, #28]	; (80017d8 <HAL_RTC_MspInit+0x30>)
 80017bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017be:	4a06      	ldr	r2, [pc, #24]	; (80017d8 <HAL_RTC_MspInit+0x30>)
 80017c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017c4:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80017c6:	bf00      	nop
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	58004000 	.word	0x58004000
 80017d8:	58024400 	.word	0x58024400

080017dc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b08a      	sub	sp, #40	; 0x28
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e4:	f107 0314 	add.w	r3, r7, #20
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	605a      	str	r2, [r3, #4]
 80017ee:	609a      	str	r2, [r3, #8]
 80017f0:	60da      	str	r2, [r3, #12]
 80017f2:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a2e      	ldr	r2, [pc, #184]	; (80018b4 <HAL_SD_MspInit+0xd8>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d155      	bne.n	80018aa <HAL_SD_MspInit+0xce>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80017fe:	4b2e      	ldr	r3, [pc, #184]	; (80018b8 <HAL_SD_MspInit+0xdc>)
 8001800:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001804:	4a2c      	ldr	r2, [pc, #176]	; (80018b8 <HAL_SD_MspInit+0xdc>)
 8001806:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800180a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800180e:	4b2a      	ldr	r3, [pc, #168]	; (80018b8 <HAL_SD_MspInit+0xdc>)
 8001810:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001814:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001818:	613b      	str	r3, [r7, #16]
 800181a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800181c:	4b26      	ldr	r3, [pc, #152]	; (80018b8 <HAL_SD_MspInit+0xdc>)
 800181e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001822:	4a25      	ldr	r2, [pc, #148]	; (80018b8 <HAL_SD_MspInit+0xdc>)
 8001824:	f043 0304 	orr.w	r3, r3, #4
 8001828:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800182c:	4b22      	ldr	r3, [pc, #136]	; (80018b8 <HAL_SD_MspInit+0xdc>)
 800182e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001832:	f003 0304 	and.w	r3, r3, #4
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800183a:	4b1f      	ldr	r3, [pc, #124]	; (80018b8 <HAL_SD_MspInit+0xdc>)
 800183c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001840:	4a1d      	ldr	r2, [pc, #116]	; (80018b8 <HAL_SD_MspInit+0xdc>)
 8001842:	f043 0308 	orr.w	r3, r3, #8
 8001846:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800184a:	4b1b      	ldr	r3, [pc, #108]	; (80018b8 <HAL_SD_MspInit+0xdc>)
 800184c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001850:	f003 0308 	and.w	r3, r3, #8
 8001854:	60bb      	str	r3, [r7, #8]
 8001856:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001858:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800185c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185e:	2302      	movs	r3, #2
 8001860:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001862:	2300      	movs	r3, #0
 8001864:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001866:	2303      	movs	r3, #3
 8001868:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800186a:	230c      	movs	r3, #12
 800186c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800186e:	f107 0314 	add.w	r3, r7, #20
 8001872:	4619      	mov	r1, r3
 8001874:	4811      	ldr	r0, [pc, #68]	; (80018bc <HAL_SD_MspInit+0xe0>)
 8001876:	f003 fea3 	bl	80055c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800187a:	2304      	movs	r3, #4
 800187c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187e:	2302      	movs	r3, #2
 8001880:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001882:	2300      	movs	r3, #0
 8001884:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001886:	2303      	movs	r3, #3
 8001888:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800188a:	230c      	movs	r3, #12
 800188c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800188e:	f107 0314 	add.w	r3, r7, #20
 8001892:	4619      	mov	r1, r3
 8001894:	480a      	ldr	r0, [pc, #40]	; (80018c0 <HAL_SD_MspInit+0xe4>)
 8001896:	f003 fe93 	bl	80055c0 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 800189a:	2200      	movs	r2, #0
 800189c:	2100      	movs	r1, #0
 800189e:	2031      	movs	r0, #49	; 0x31
 80018a0:	f000 fc45 	bl	800212e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80018a4:	2031      	movs	r0, #49	; 0x31
 80018a6:	f000 fc5c 	bl	8002162 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80018aa:	bf00      	nop
 80018ac:	3728      	adds	r7, #40	; 0x28
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	52007000 	.word	0x52007000
 80018b8:	58024400 	.word	0x58024400
 80018bc:	58020800 	.word	0x58020800
 80018c0:	58020c00 	.word	0x58020c00

080018c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b08a      	sub	sp, #40	; 0x28
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018cc:	f107 0314 	add.w	r3, r7, #20
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	60da      	str	r2, [r3, #12]
 80018da:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a1a      	ldr	r2, [pc, #104]	; (800194c <HAL_SPI_MspInit+0x88>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d12d      	bne.n	8001942 <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018e6:	4b1a      	ldr	r3, [pc, #104]	; (8001950 <HAL_SPI_MspInit+0x8c>)
 80018e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80018ec:	4a18      	ldr	r2, [pc, #96]	; (8001950 <HAL_SPI_MspInit+0x8c>)
 80018ee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018f2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80018f6:	4b16      	ldr	r3, [pc, #88]	; (8001950 <HAL_SPI_MspInit+0x8c>)
 80018f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80018fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001900:	613b      	str	r3, [r7, #16]
 8001902:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001904:	4b12      	ldr	r3, [pc, #72]	; (8001950 <HAL_SPI_MspInit+0x8c>)
 8001906:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800190a:	4a11      	ldr	r2, [pc, #68]	; (8001950 <HAL_SPI_MspInit+0x8c>)
 800190c:	f043 0301 	orr.w	r3, r3, #1
 8001910:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001914:	4b0e      	ldr	r3, [pc, #56]	; (8001950 <HAL_SPI_MspInit+0x8c>)
 8001916:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001922:	23e0      	movs	r3, #224	; 0xe0
 8001924:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001926:	2302      	movs	r3, #2
 8001928:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192a:	2300      	movs	r3, #0
 800192c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192e:	2300      	movs	r3, #0
 8001930:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001932:	2305      	movs	r3, #5
 8001934:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001936:	f107 0314 	add.w	r3, r7, #20
 800193a:	4619      	mov	r1, r3
 800193c:	4805      	ldr	r0, [pc, #20]	; (8001954 <HAL_SPI_MspInit+0x90>)
 800193e:	f003 fe3f 	bl	80055c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001942:	bf00      	nop
 8001944:	3728      	adds	r7, #40	; 0x28
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	40013000 	.word	0x40013000
 8001950:	58024400 	.word	0x58024400
 8001954:	58020000 	.word	0x58020000

08001958 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b08c      	sub	sp, #48	; 0x30
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001960:	f107 031c 	add.w	r3, r7, #28
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	609a      	str	r2, [r3, #8]
 800196c:	60da      	str	r2, [r3, #12]
 800196e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a4b      	ldr	r2, [pc, #300]	; (8001aa4 <HAL_UART_MspInit+0x14c>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d12e      	bne.n	80019d8 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 800197a:	4b4b      	ldr	r3, [pc, #300]	; (8001aa8 <HAL_UART_MspInit+0x150>)
 800197c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001980:	4a49      	ldr	r2, [pc, #292]	; (8001aa8 <HAL_UART_MspInit+0x150>)
 8001982:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001986:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800198a:	4b47      	ldr	r3, [pc, #284]	; (8001aa8 <HAL_UART_MspInit+0x150>)
 800198c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001990:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001994:	61bb      	str	r3, [r7, #24]
 8001996:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001998:	4b43      	ldr	r3, [pc, #268]	; (8001aa8 <HAL_UART_MspInit+0x150>)
 800199a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800199e:	4a42      	ldr	r2, [pc, #264]	; (8001aa8 <HAL_UART_MspInit+0x150>)
 80019a0:	f043 0310 	orr.w	r3, r3, #16
 80019a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019a8:	4b3f      	ldr	r3, [pc, #252]	; (8001aa8 <HAL_UART_MspInit+0x150>)
 80019aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019ae:	f003 0310 	and.w	r3, r3, #16
 80019b2:	617b      	str	r3, [r7, #20]
 80019b4:	697b      	ldr	r3, [r7, #20]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80019b6:	2303      	movs	r3, #3
 80019b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ba:	2302      	movs	r3, #2
 80019bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019be:	2300      	movs	r3, #0
 80019c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c2:	2300      	movs	r3, #0
 80019c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80019c6:	2308      	movs	r3, #8
 80019c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019ca:	f107 031c 	add.w	r3, r7, #28
 80019ce:	4619      	mov	r1, r3
 80019d0:	4836      	ldr	r0, [pc, #216]	; (8001aac <HAL_UART_MspInit+0x154>)
 80019d2:	f003 fdf5 	bl	80055c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80019d6:	e061      	b.n	8001a9c <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART3)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a34      	ldr	r2, [pc, #208]	; (8001ab0 <HAL_UART_MspInit+0x158>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d15c      	bne.n	8001a9c <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART3_CLK_ENABLE();
 80019e2:	4b31      	ldr	r3, [pc, #196]	; (8001aa8 <HAL_UART_MspInit+0x150>)
 80019e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019e8:	4a2f      	ldr	r2, [pc, #188]	; (8001aa8 <HAL_UART_MspInit+0x150>)
 80019ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019ee:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80019f2:	4b2d      	ldr	r3, [pc, #180]	; (8001aa8 <HAL_UART_MspInit+0x150>)
 80019f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019fc:	613b      	str	r3, [r7, #16]
 80019fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a00:	4b29      	ldr	r3, [pc, #164]	; (8001aa8 <HAL_UART_MspInit+0x150>)
 8001a02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a06:	4a28      	ldr	r2, [pc, #160]	; (8001aa8 <HAL_UART_MspInit+0x150>)
 8001a08:	f043 0308 	orr.w	r3, r3, #8
 8001a0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a10:	4b25      	ldr	r3, [pc, #148]	; (8001aa8 <HAL_UART_MspInit+0x150>)
 8001a12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a16:	f003 0308 	and.w	r3, r3, #8
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a1e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a24:	2302      	movs	r3, #2
 8001a26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a30:	2307      	movs	r3, #7
 8001a32:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a34:	f107 031c 	add.w	r3, r7, #28
 8001a38:	4619      	mov	r1, r3
 8001a3a:	481e      	ldr	r0, [pc, #120]	; (8001ab4 <HAL_UART_MspInit+0x15c>)
 8001a3c:	f003 fdc0 	bl	80055c0 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8001a40:	4b1d      	ldr	r3, [pc, #116]	; (8001ab8 <HAL_UART_MspInit+0x160>)
 8001a42:	4a1e      	ldr	r2, [pc, #120]	; (8001abc <HAL_UART_MspInit+0x164>)
 8001a44:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001a46:	4b1c      	ldr	r3, [pc, #112]	; (8001ab8 <HAL_UART_MspInit+0x160>)
 8001a48:	222d      	movs	r2, #45	; 0x2d
 8001a4a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a4c:	4b1a      	ldr	r3, [pc, #104]	; (8001ab8 <HAL_UART_MspInit+0x160>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a52:	4b19      	ldr	r3, [pc, #100]	; (8001ab8 <HAL_UART_MspInit+0x160>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a58:	4b17      	ldr	r3, [pc, #92]	; (8001ab8 <HAL_UART_MspInit+0x160>)
 8001a5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a5e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a60:	4b15      	ldr	r3, [pc, #84]	; (8001ab8 <HAL_UART_MspInit+0x160>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a66:	4b14      	ldr	r3, [pc, #80]	; (8001ab8 <HAL_UART_MspInit+0x160>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001a6c:	4b12      	ldr	r3, [pc, #72]	; (8001ab8 <HAL_UART_MspInit+0x160>)
 8001a6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a72:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a74:	4b10      	ldr	r3, [pc, #64]	; (8001ab8 <HAL_UART_MspInit+0x160>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a7a:	4b0f      	ldr	r3, [pc, #60]	; (8001ab8 <HAL_UART_MspInit+0x160>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001a80:	480d      	ldr	r0, [pc, #52]	; (8001ab8 <HAL_UART_MspInit+0x160>)
 8001a82:	f000 fb89 	bl	8002198 <HAL_DMA_Init>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <HAL_UART_MspInit+0x138>
      Error_Handler();
 8001a8c:	f7ff fdbe 	bl	800160c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	4a09      	ldr	r2, [pc, #36]	; (8001ab8 <HAL_UART_MspInit+0x160>)
 8001a94:	679a      	str	r2, [r3, #120]	; 0x78
 8001a96:	4a08      	ldr	r2, [pc, #32]	; (8001ab8 <HAL_UART_MspInit+0x160>)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001a9c:	bf00      	nop
 8001a9e:	3730      	adds	r7, #48	; 0x30
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	40007c00 	.word	0x40007c00
 8001aa8:	58024400 	.word	0x58024400
 8001aac:	58021000 	.word	0x58021000
 8001ab0:	40004800 	.word	0x40004800
 8001ab4:	58020c00 	.word	0x58020c00
 8001ab8:	24040258 	.word	0x24040258
 8001abc:	40020010 	.word	0x40020010

08001ac0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001ac4:	f006 f9a2 	bl	8007e0c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ac8:	e7fe      	b.n	8001ac8 <NMI_Handler+0x8>

08001aca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aca:	b480      	push	{r7}
 8001acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ace:	e7fe      	b.n	8001ace <HardFault_Handler+0x4>

08001ad0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ad4:	e7fe      	b.n	8001ad4 <MemManage_Handler+0x4>

08001ad6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ada:	e7fe      	b.n	8001ada <BusFault_Handler+0x4>

08001adc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ae0:	e7fe      	b.n	8001ae0 <UsageFault_Handler+0x4>

08001ae2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001af4:	bf00      	nop
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001afe:	b480      	push	{r7}
 8001b00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b02:	bf00      	nop
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b10:	f000 f9e4 	bl	8001edc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b14:	bf00      	nop
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001b1c:	4802      	ldr	r0, [pc, #8]	; (8001b28 <DMA1_Stream0_IRQHandler+0x10>)
 8001b1e:	f001 f901 	bl	8002d24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	24040258 	.word	0x24040258

08001b2c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001b30:	4802      	ldr	r0, [pc, #8]	; (8001b3c <FDCAN1_IT0_IRQHandler+0x10>)
 8001b32:	f003 f8b5 	bl	8004ca0 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	2404067c 	.word	0x2404067c

08001b40 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001b44:	4802      	ldr	r0, [pc, #8]	; (8001b50 <FDCAN1_IT1_IRQHandler+0x10>)
 8001b46:	f003 f8ab 	bl	8004ca0 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	2404067c 	.word	0x2404067c

08001b54 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001b58:	4802      	ldr	r0, [pc, #8]	; (8001b64 <SDMMC1_IRQHandler+0x10>)
 8001b5a:	f009 f8d9 	bl	800ad10 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	2404058c 	.word	0x2404058c

08001b68 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001b6c:	4802      	ldr	r0, [pc, #8]	; (8001b78 <OTG_FS_IRQHandler+0x10>)
 8001b6e:	f004 f89e 	bl	8005cae <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001b72:	bf00      	nop
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	24041738 	.word	0x24041738

08001b7c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b086      	sub	sp, #24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b88:	2300      	movs	r3, #0
 8001b8a:	617b      	str	r3, [r7, #20]
 8001b8c:	e00a      	b.n	8001ba4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b8e:	f3af 8000 	nop.w
 8001b92:	4601      	mov	r1, r0
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	1c5a      	adds	r2, r3, #1
 8001b98:	60ba      	str	r2, [r7, #8]
 8001b9a:	b2ca      	uxtb	r2, r1
 8001b9c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	617b      	str	r3, [r7, #20]
 8001ba4:	697a      	ldr	r2, [r7, #20]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	dbf0      	blt.n	8001b8e <_read+0x12>
	}

return len;
 8001bac:	687b      	ldr	r3, [r7, #4]
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3718      	adds	r7, #24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	b083      	sub	sp, #12
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
	return -1;
 8001bbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr

08001bce <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	b083      	sub	sp, #12
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
 8001bd6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bde:	605a      	str	r2, [r3, #4]
	return 0;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr

08001bee <_isatty>:

int _isatty(int file)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	b083      	sub	sp, #12
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
	return 1;
 8001bf6:	2301      	movs	r3, #1
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	607a      	str	r2, [r7, #4]
	return 0;
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3714      	adds	r7, #20
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
	...

08001c20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b086      	sub	sp, #24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c28:	4a14      	ldr	r2, [pc, #80]	; (8001c7c <_sbrk+0x5c>)
 8001c2a:	4b15      	ldr	r3, [pc, #84]	; (8001c80 <_sbrk+0x60>)
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c34:	4b13      	ldr	r3, [pc, #76]	; (8001c84 <_sbrk+0x64>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d102      	bne.n	8001c42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c3c:	4b11      	ldr	r3, [pc, #68]	; (8001c84 <_sbrk+0x64>)
 8001c3e:	4a12      	ldr	r2, [pc, #72]	; (8001c88 <_sbrk+0x68>)
 8001c40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c42:	4b10      	ldr	r3, [pc, #64]	; (8001c84 <_sbrk+0x64>)
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4413      	add	r3, r2
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d207      	bcs.n	8001c60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c50:	f013 ffee 	bl	8015c30 <__errno>
 8001c54:	4602      	mov	r2, r0
 8001c56:	230c      	movs	r3, #12
 8001c58:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c5e:	e009      	b.n	8001c74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c60:	4b08      	ldr	r3, [pc, #32]	; (8001c84 <_sbrk+0x64>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c66:	4b07      	ldr	r3, [pc, #28]	; (8001c84 <_sbrk+0x64>)
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	4a05      	ldr	r2, [pc, #20]	; (8001c84 <_sbrk+0x64>)
 8001c70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c72:	68fb      	ldr	r3, [r7, #12]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3718      	adds	r7, #24
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	24080000 	.word	0x24080000
 8001c80:	00000400 	.word	0x00000400
 8001c84:	2404020c 	.word	0x2404020c
 8001c88:	24041b48 	.word	0x24041b48

08001c8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001c90:	4b39      	ldr	r3, [pc, #228]	; (8001d78 <SystemInit+0xec>)
 8001c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c96:	4a38      	ldr	r2, [pc, #224]	; (8001d78 <SystemInit+0xec>)
 8001c98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001ca0:	4b36      	ldr	r3, [pc, #216]	; (8001d7c <SystemInit+0xf0>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 030f 	and.w	r3, r3, #15
 8001ca8:	2b06      	cmp	r3, #6
 8001caa:	d807      	bhi.n	8001cbc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001cac:	4b33      	ldr	r3, [pc, #204]	; (8001d7c <SystemInit+0xf0>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f023 030f 	bic.w	r3, r3, #15
 8001cb4:	4a31      	ldr	r2, [pc, #196]	; (8001d7c <SystemInit+0xf0>)
 8001cb6:	f043 0307 	orr.w	r3, r3, #7
 8001cba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001cbc:	4b30      	ldr	r3, [pc, #192]	; (8001d80 <SystemInit+0xf4>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a2f      	ldr	r2, [pc, #188]	; (8001d80 <SystemInit+0xf4>)
 8001cc2:	f043 0301 	orr.w	r3, r3, #1
 8001cc6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001cc8:	4b2d      	ldr	r3, [pc, #180]	; (8001d80 <SystemInit+0xf4>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001cce:	4b2c      	ldr	r3, [pc, #176]	; (8001d80 <SystemInit+0xf4>)
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	492b      	ldr	r1, [pc, #172]	; (8001d80 <SystemInit+0xf4>)
 8001cd4:	4b2b      	ldr	r3, [pc, #172]	; (8001d84 <SystemInit+0xf8>)
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001cda:	4b28      	ldr	r3, [pc, #160]	; (8001d7c <SystemInit+0xf0>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 030f 	and.w	r3, r3, #15
 8001ce2:	2b07      	cmp	r3, #7
 8001ce4:	d907      	bls.n	8001cf6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001ce6:	4b25      	ldr	r3, [pc, #148]	; (8001d7c <SystemInit+0xf0>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f023 030f 	bic.w	r3, r3, #15
 8001cee:	4a23      	ldr	r2, [pc, #140]	; (8001d7c <SystemInit+0xf0>)
 8001cf0:	f043 0307 	orr.w	r3, r3, #7
 8001cf4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001cf6:	4b22      	ldr	r3, [pc, #136]	; (8001d80 <SystemInit+0xf4>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001cfc:	4b20      	ldr	r3, [pc, #128]	; (8001d80 <SystemInit+0xf4>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001d02:	4b1f      	ldr	r3, [pc, #124]	; (8001d80 <SystemInit+0xf4>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001d08:	4b1d      	ldr	r3, [pc, #116]	; (8001d80 <SystemInit+0xf4>)
 8001d0a:	4a1f      	ldr	r2, [pc, #124]	; (8001d88 <SystemInit+0xfc>)
 8001d0c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001d0e:	4b1c      	ldr	r3, [pc, #112]	; (8001d80 <SystemInit+0xf4>)
 8001d10:	4a1e      	ldr	r2, [pc, #120]	; (8001d8c <SystemInit+0x100>)
 8001d12:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001d14:	4b1a      	ldr	r3, [pc, #104]	; (8001d80 <SystemInit+0xf4>)
 8001d16:	4a1e      	ldr	r2, [pc, #120]	; (8001d90 <SystemInit+0x104>)
 8001d18:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001d1a:	4b19      	ldr	r3, [pc, #100]	; (8001d80 <SystemInit+0xf4>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001d20:	4b17      	ldr	r3, [pc, #92]	; (8001d80 <SystemInit+0xf4>)
 8001d22:	4a1b      	ldr	r2, [pc, #108]	; (8001d90 <SystemInit+0x104>)
 8001d24:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001d26:	4b16      	ldr	r3, [pc, #88]	; (8001d80 <SystemInit+0xf4>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001d2c:	4b14      	ldr	r3, [pc, #80]	; (8001d80 <SystemInit+0xf4>)
 8001d2e:	4a18      	ldr	r2, [pc, #96]	; (8001d90 <SystemInit+0x104>)
 8001d30:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001d32:	4b13      	ldr	r3, [pc, #76]	; (8001d80 <SystemInit+0xf4>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001d38:	4b11      	ldr	r3, [pc, #68]	; (8001d80 <SystemInit+0xf4>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a10      	ldr	r2, [pc, #64]	; (8001d80 <SystemInit+0xf4>)
 8001d3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d42:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001d44:	4b0e      	ldr	r3, [pc, #56]	; (8001d80 <SystemInit+0xf4>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001d4a:	4b12      	ldr	r3, [pc, #72]	; (8001d94 <SystemInit+0x108>)
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	4b12      	ldr	r3, [pc, #72]	; (8001d98 <SystemInit+0x10c>)
 8001d50:	4013      	ands	r3, r2
 8001d52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d56:	d202      	bcs.n	8001d5e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001d58:	4b10      	ldr	r3, [pc, #64]	; (8001d9c <SystemInit+0x110>)
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001d5e:	4b10      	ldr	r3, [pc, #64]	; (8001da0 <SystemInit+0x114>)
 8001d60:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001d64:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d66:	4b04      	ldr	r3, [pc, #16]	; (8001d78 <SystemInit+0xec>)
 8001d68:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d6c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001d6e:	bf00      	nop
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr
 8001d78:	e000ed00 	.word	0xe000ed00
 8001d7c:	52002000 	.word	0x52002000
 8001d80:	58024400 	.word	0x58024400
 8001d84:	eaf6ed7f 	.word	0xeaf6ed7f
 8001d88:	02020200 	.word	0x02020200
 8001d8c:	01ff0000 	.word	0x01ff0000
 8001d90:	01010280 	.word	0x01010280
 8001d94:	5c001000 	.word	0x5c001000
 8001d98:	ffff0000 	.word	0xffff0000
 8001d9c:	51008108 	.word	0x51008108
 8001da0:	52004000 	.word	0x52004000

08001da4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001da4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ddc <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001da8:	f7ff ff70 	bl	8001c8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001dac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001dae:	e003      	b.n	8001db8 <LoopCopyDataInit>

08001db0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001db0:	4b0b      	ldr	r3, [pc, #44]	; (8001de0 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8001db2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001db4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001db6:	3104      	adds	r1, #4

08001db8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001db8:	480a      	ldr	r0, [pc, #40]	; (8001de4 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001dba:	4b0b      	ldr	r3, [pc, #44]	; (8001de8 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001dbc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001dbe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001dc0:	d3f6      	bcc.n	8001db0 <CopyDataInit>
  ldr  r2, =_sbss
 8001dc2:	4a0a      	ldr	r2, [pc, #40]	; (8001dec <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001dc4:	e002      	b.n	8001dcc <LoopFillZerobss>

08001dc6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001dc6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001dc8:	f842 3b04 	str.w	r3, [r2], #4

08001dcc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001dcc:	4b08      	ldr	r3, [pc, #32]	; (8001df0 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8001dce:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001dd0:	d3f9      	bcc.n	8001dc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dd2:	f013 ff33 	bl	8015c3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dd6:	f7fe fd75 	bl	80008c4 <main>
  bx  lr    
 8001dda:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ddc:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001de0:	08017368 	.word	0x08017368
  ldr  r0, =_sdata
 8001de4:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001de8:	240001cc 	.word	0x240001cc
  ldr  r2, =_sbss
 8001dec:	240001d0 	.word	0x240001d0
  ldr  r3, = _ebss
 8001df0:	24041b44 	.word	0x24041b44

08001df4 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001df4:	e7fe      	b.n	8001df4 <ADC3_IRQHandler>
	...

08001df8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dfe:	2003      	movs	r0, #3
 8001e00:	f000 f98a 	bl	8002118 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001e04:	f005 fe34 	bl	8007a70 <HAL_RCC_GetSysClockFreq>
 8001e08:	4601      	mov	r1, r0
 8001e0a:	4b15      	ldr	r3, [pc, #84]	; (8001e60 <HAL_Init+0x68>)
 8001e0c:	699b      	ldr	r3, [r3, #24]
 8001e0e:	0a1b      	lsrs	r3, r3, #8
 8001e10:	f003 030f 	and.w	r3, r3, #15
 8001e14:	4a13      	ldr	r2, [pc, #76]	; (8001e64 <HAL_Init+0x6c>)
 8001e16:	5cd3      	ldrb	r3, [r2, r3]
 8001e18:	f003 031f 	and.w	r3, r3, #31
 8001e1c:	fa21 f303 	lsr.w	r3, r1, r3
 8001e20:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001e22:	4b0f      	ldr	r3, [pc, #60]	; (8001e60 <HAL_Init+0x68>)
 8001e24:	699b      	ldr	r3, [r3, #24]
 8001e26:	f003 030f 	and.w	r3, r3, #15
 8001e2a:	4a0e      	ldr	r2, [pc, #56]	; (8001e64 <HAL_Init+0x6c>)
 8001e2c:	5cd3      	ldrb	r3, [r2, r3]
 8001e2e:	f003 031f 	and.w	r3, r3, #31
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	fa22 f303 	lsr.w	r3, r2, r3
 8001e38:	4a0b      	ldr	r2, [pc, #44]	; (8001e68 <HAL_Init+0x70>)
 8001e3a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001e3c:	4a0b      	ldr	r2, [pc, #44]	; (8001e6c <HAL_Init+0x74>)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e42:	2000      	movs	r0, #0
 8001e44:	f000 f814 	bl	8001e70 <HAL_InitTick>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e002      	b.n	8001e58 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001e52:	f7ff fbe5 	bl	8001620 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e56:	2300      	movs	r3, #0
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3708      	adds	r7, #8
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	58024400 	.word	0x58024400
 8001e64:	080171c8 	.word	0x080171c8
 8001e68:	24000004 	.word	0x24000004
 8001e6c:	24000000 	.word	0x24000000

08001e70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001e78:	4b15      	ldr	r3, [pc, #84]	; (8001ed0 <HAL_InitTick+0x60>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d101      	bne.n	8001e84 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e021      	b.n	8001ec8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001e84:	4b13      	ldr	r3, [pc, #76]	; (8001ed4 <HAL_InitTick+0x64>)
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	4b11      	ldr	r3, [pc, #68]	; (8001ed0 <HAL_InitTick+0x60>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e92:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f000 f96f 	bl	800217e <HAL_SYSTICK_Config>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e00e      	b.n	8001ec8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2b0f      	cmp	r3, #15
 8001eae:	d80a      	bhi.n	8001ec6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	6879      	ldr	r1, [r7, #4]
 8001eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001eb8:	f000 f939 	bl	800212e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ebc:	4a06      	ldr	r2, [pc, #24]	; (8001ed8 <HAL_InitTick+0x68>)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	e000      	b.n	8001ec8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	2400000c 	.word	0x2400000c
 8001ed4:	24000000 	.word	0x24000000
 8001ed8:	24000008 	.word	0x24000008

08001edc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ee0:	4b06      	ldr	r3, [pc, #24]	; (8001efc <HAL_IncTick+0x20>)
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <HAL_IncTick+0x24>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4413      	add	r3, r2
 8001eec:	4a04      	ldr	r2, [pc, #16]	; (8001f00 <HAL_IncTick+0x24>)
 8001eee:	6013      	str	r3, [r2, #0]
}
 8001ef0:	bf00      	nop
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	2400000c 	.word	0x2400000c
 8001f00:	24040dfc 	.word	0x24040dfc

08001f04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  return uwTick;
 8001f08:	4b03      	ldr	r3, [pc, #12]	; (8001f18 <HAL_GetTick+0x14>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	24040dfc 	.word	0x24040dfc

08001f1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f24:	f7ff ffee 	bl	8001f04 <HAL_GetTick>
 8001f28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f34:	d005      	beq.n	8001f42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f36:	4b09      	ldr	r3, [pc, #36]	; (8001f5c <HAL_Delay+0x40>)
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	4413      	add	r3, r2
 8001f40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f42:	bf00      	nop
 8001f44:	f7ff ffde 	bl	8001f04 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	68fa      	ldr	r2, [r7, #12]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d8f7      	bhi.n	8001f44 <HAL_Delay+0x28>
  {
  }
}
 8001f54:	bf00      	nop
 8001f56:	3710      	adds	r7, #16
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	2400000c 	.word	0x2400000c

08001f60 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001f64:	4b03      	ldr	r3, [pc, #12]	; (8001f74 <HAL_GetREVID+0x14>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	0c1b      	lsrs	r3, r3, #16
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr
 8001f74:	5c001000 	.word	0x5c001000

08001f78 <__NVIC_SetPriorityGrouping>:
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f003 0307 	and.w	r3, r3, #7
 8001f86:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f88:	4b0b      	ldr	r3, [pc, #44]	; (8001fb8 <__NVIC_SetPriorityGrouping+0x40>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f8e:	68ba      	ldr	r2, [r7, #8]
 8001f90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f94:	4013      	ands	r3, r2
 8001f96:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001fa0:	4b06      	ldr	r3, [pc, #24]	; (8001fbc <__NVIC_SetPriorityGrouping+0x44>)
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fa6:	4a04      	ldr	r2, [pc, #16]	; (8001fb8 <__NVIC_SetPriorityGrouping+0x40>)
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	60d3      	str	r3, [r2, #12]
}
 8001fac:	bf00      	nop
 8001fae:	3714      	adds	r7, #20
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr
 8001fb8:	e000ed00 	.word	0xe000ed00
 8001fbc:	05fa0000 	.word	0x05fa0000

08001fc0 <__NVIC_GetPriorityGrouping>:
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fc4:	4b04      	ldr	r3, [pc, #16]	; (8001fd8 <__NVIC_GetPriorityGrouping+0x18>)
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	0a1b      	lsrs	r3, r3, #8
 8001fca:	f003 0307 	and.w	r3, r3, #7
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	e000ed00 	.word	0xe000ed00

08001fdc <__NVIC_EnableIRQ>:
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001fe6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	db0b      	blt.n	8002006 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fee:	88fb      	ldrh	r3, [r7, #6]
 8001ff0:	f003 021f 	and.w	r2, r3, #31
 8001ff4:	4907      	ldr	r1, [pc, #28]	; (8002014 <__NVIC_EnableIRQ+0x38>)
 8001ff6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ffa:	095b      	lsrs	r3, r3, #5
 8001ffc:	2001      	movs	r0, #1
 8001ffe:	fa00 f202 	lsl.w	r2, r0, r2
 8002002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002006:	bf00      	nop
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	e000e100 	.word	0xe000e100

08002018 <__NVIC_SetPriority>:
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	4603      	mov	r3, r0
 8002020:	6039      	str	r1, [r7, #0]
 8002022:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002024:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002028:	2b00      	cmp	r3, #0
 800202a:	db0a      	blt.n	8002042 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	b2da      	uxtb	r2, r3
 8002030:	490c      	ldr	r1, [pc, #48]	; (8002064 <__NVIC_SetPriority+0x4c>)
 8002032:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002036:	0112      	lsls	r2, r2, #4
 8002038:	b2d2      	uxtb	r2, r2
 800203a:	440b      	add	r3, r1
 800203c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002040:	e00a      	b.n	8002058 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	b2da      	uxtb	r2, r3
 8002046:	4908      	ldr	r1, [pc, #32]	; (8002068 <__NVIC_SetPriority+0x50>)
 8002048:	88fb      	ldrh	r3, [r7, #6]
 800204a:	f003 030f 	and.w	r3, r3, #15
 800204e:	3b04      	subs	r3, #4
 8002050:	0112      	lsls	r2, r2, #4
 8002052:	b2d2      	uxtb	r2, r2
 8002054:	440b      	add	r3, r1
 8002056:	761a      	strb	r2, [r3, #24]
}
 8002058:	bf00      	nop
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr
 8002064:	e000e100 	.word	0xe000e100
 8002068:	e000ed00 	.word	0xe000ed00

0800206c <NVIC_EncodePriority>:
{
 800206c:	b480      	push	{r7}
 800206e:	b089      	sub	sp, #36	; 0x24
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f003 0307 	and.w	r3, r3, #7
 800207e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	f1c3 0307 	rsb	r3, r3, #7
 8002086:	2b04      	cmp	r3, #4
 8002088:	bf28      	it	cs
 800208a:	2304      	movcs	r3, #4
 800208c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	3304      	adds	r3, #4
 8002092:	2b06      	cmp	r3, #6
 8002094:	d902      	bls.n	800209c <NVIC_EncodePriority+0x30>
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	3b03      	subs	r3, #3
 800209a:	e000      	b.n	800209e <NVIC_EncodePriority+0x32>
 800209c:	2300      	movs	r3, #0
 800209e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a0:	f04f 32ff 	mov.w	r2, #4294967295
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	43da      	mvns	r2, r3
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	401a      	ands	r2, r3
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020b4:	f04f 31ff 	mov.w	r1, #4294967295
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	fa01 f303 	lsl.w	r3, r1, r3
 80020be:	43d9      	mvns	r1, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c4:	4313      	orrs	r3, r2
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3724      	adds	r7, #36	; 0x24
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
	...

080020d4 <SysTick_Config>:
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	3b01      	subs	r3, #1
 80020e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020e4:	d301      	bcc.n	80020ea <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80020e6:	2301      	movs	r3, #1
 80020e8:	e00f      	b.n	800210a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020ea:	4a0a      	ldr	r2, [pc, #40]	; (8002114 <SysTick_Config+0x40>)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	3b01      	subs	r3, #1
 80020f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020f2:	210f      	movs	r1, #15
 80020f4:	f04f 30ff 	mov.w	r0, #4294967295
 80020f8:	f7ff ff8e 	bl	8002018 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020fc:	4b05      	ldr	r3, [pc, #20]	; (8002114 <SysTick_Config+0x40>)
 80020fe:	2200      	movs	r2, #0
 8002100:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002102:	4b04      	ldr	r3, [pc, #16]	; (8002114 <SysTick_Config+0x40>)
 8002104:	2207      	movs	r2, #7
 8002106:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	e000e010 	.word	0xe000e010

08002118 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f7ff ff29 	bl	8001f78 <__NVIC_SetPriorityGrouping>
}
 8002126:	bf00      	nop
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b086      	sub	sp, #24
 8002132:	af00      	add	r7, sp, #0
 8002134:	4603      	mov	r3, r0
 8002136:	60b9      	str	r1, [r7, #8]
 8002138:	607a      	str	r2, [r7, #4]
 800213a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800213c:	f7ff ff40 	bl	8001fc0 <__NVIC_GetPriorityGrouping>
 8002140:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	68b9      	ldr	r1, [r7, #8]
 8002146:	6978      	ldr	r0, [r7, #20]
 8002148:	f7ff ff90 	bl	800206c <NVIC_EncodePriority>
 800214c:	4602      	mov	r2, r0
 800214e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002152:	4611      	mov	r1, r2
 8002154:	4618      	mov	r0, r3
 8002156:	f7ff ff5f 	bl	8002018 <__NVIC_SetPriority>
}
 800215a:	bf00      	nop
 800215c:	3718      	adds	r7, #24
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002162:	b580      	push	{r7, lr}
 8002164:	b082      	sub	sp, #8
 8002166:	af00      	add	r7, sp, #0
 8002168:	4603      	mov	r3, r0
 800216a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800216c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002170:	4618      	mov	r0, r3
 8002172:	f7ff ff33 	bl	8001fdc <__NVIC_EnableIRQ>
}
 8002176:	bf00      	nop
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800217e:	b580      	push	{r7, lr}
 8002180:	b082      	sub	sp, #8
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f7ff ffa4 	bl	80020d4 <SysTick_Config>
 800218c:	4603      	mov	r3, r0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
	...

08002198 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80021a0:	f7ff feb0 	bl	8001f04 <HAL_GetTick>
 80021a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d101      	bne.n	80021b0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e316      	b.n	80027de <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a66      	ldr	r2, [pc, #408]	; (8002350 <HAL_DMA_Init+0x1b8>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d04a      	beq.n	8002250 <HAL_DMA_Init+0xb8>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a65      	ldr	r2, [pc, #404]	; (8002354 <HAL_DMA_Init+0x1bc>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d045      	beq.n	8002250 <HAL_DMA_Init+0xb8>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a63      	ldr	r2, [pc, #396]	; (8002358 <HAL_DMA_Init+0x1c0>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d040      	beq.n	8002250 <HAL_DMA_Init+0xb8>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a62      	ldr	r2, [pc, #392]	; (800235c <HAL_DMA_Init+0x1c4>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d03b      	beq.n	8002250 <HAL_DMA_Init+0xb8>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a60      	ldr	r2, [pc, #384]	; (8002360 <HAL_DMA_Init+0x1c8>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d036      	beq.n	8002250 <HAL_DMA_Init+0xb8>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a5f      	ldr	r2, [pc, #380]	; (8002364 <HAL_DMA_Init+0x1cc>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d031      	beq.n	8002250 <HAL_DMA_Init+0xb8>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a5d      	ldr	r2, [pc, #372]	; (8002368 <HAL_DMA_Init+0x1d0>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d02c      	beq.n	8002250 <HAL_DMA_Init+0xb8>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a5c      	ldr	r2, [pc, #368]	; (800236c <HAL_DMA_Init+0x1d4>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d027      	beq.n	8002250 <HAL_DMA_Init+0xb8>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a5a      	ldr	r2, [pc, #360]	; (8002370 <HAL_DMA_Init+0x1d8>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d022      	beq.n	8002250 <HAL_DMA_Init+0xb8>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a59      	ldr	r2, [pc, #356]	; (8002374 <HAL_DMA_Init+0x1dc>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d01d      	beq.n	8002250 <HAL_DMA_Init+0xb8>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a57      	ldr	r2, [pc, #348]	; (8002378 <HAL_DMA_Init+0x1e0>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d018      	beq.n	8002250 <HAL_DMA_Init+0xb8>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a56      	ldr	r2, [pc, #344]	; (800237c <HAL_DMA_Init+0x1e4>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d013      	beq.n	8002250 <HAL_DMA_Init+0xb8>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a54      	ldr	r2, [pc, #336]	; (8002380 <HAL_DMA_Init+0x1e8>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d00e      	beq.n	8002250 <HAL_DMA_Init+0xb8>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a53      	ldr	r2, [pc, #332]	; (8002384 <HAL_DMA_Init+0x1ec>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d009      	beq.n	8002250 <HAL_DMA_Init+0xb8>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a51      	ldr	r2, [pc, #324]	; (8002388 <HAL_DMA_Init+0x1f0>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d004      	beq.n	8002250 <HAL_DMA_Init+0xb8>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a50      	ldr	r2, [pc, #320]	; (800238c <HAL_DMA_Init+0x1f4>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d101      	bne.n	8002254 <HAL_DMA_Init+0xbc>
 8002250:	2301      	movs	r3, #1
 8002252:	e000      	b.n	8002256 <HAL_DMA_Init+0xbe>
 8002254:	2300      	movs	r3, #0
 8002256:	2b00      	cmp	r3, #0
 8002258:	f000 813b 	beq.w	80024d2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2202      	movs	r2, #2
 8002268:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a37      	ldr	r2, [pc, #220]	; (8002350 <HAL_DMA_Init+0x1b8>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d04a      	beq.n	800230c <HAL_DMA_Init+0x174>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a36      	ldr	r2, [pc, #216]	; (8002354 <HAL_DMA_Init+0x1bc>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d045      	beq.n	800230c <HAL_DMA_Init+0x174>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a34      	ldr	r2, [pc, #208]	; (8002358 <HAL_DMA_Init+0x1c0>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d040      	beq.n	800230c <HAL_DMA_Init+0x174>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a33      	ldr	r2, [pc, #204]	; (800235c <HAL_DMA_Init+0x1c4>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d03b      	beq.n	800230c <HAL_DMA_Init+0x174>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a31      	ldr	r2, [pc, #196]	; (8002360 <HAL_DMA_Init+0x1c8>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d036      	beq.n	800230c <HAL_DMA_Init+0x174>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a30      	ldr	r2, [pc, #192]	; (8002364 <HAL_DMA_Init+0x1cc>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d031      	beq.n	800230c <HAL_DMA_Init+0x174>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a2e      	ldr	r2, [pc, #184]	; (8002368 <HAL_DMA_Init+0x1d0>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d02c      	beq.n	800230c <HAL_DMA_Init+0x174>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a2d      	ldr	r2, [pc, #180]	; (800236c <HAL_DMA_Init+0x1d4>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d027      	beq.n	800230c <HAL_DMA_Init+0x174>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a2b      	ldr	r2, [pc, #172]	; (8002370 <HAL_DMA_Init+0x1d8>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d022      	beq.n	800230c <HAL_DMA_Init+0x174>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a2a      	ldr	r2, [pc, #168]	; (8002374 <HAL_DMA_Init+0x1dc>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d01d      	beq.n	800230c <HAL_DMA_Init+0x174>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a28      	ldr	r2, [pc, #160]	; (8002378 <HAL_DMA_Init+0x1e0>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d018      	beq.n	800230c <HAL_DMA_Init+0x174>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a27      	ldr	r2, [pc, #156]	; (800237c <HAL_DMA_Init+0x1e4>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d013      	beq.n	800230c <HAL_DMA_Init+0x174>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a25      	ldr	r2, [pc, #148]	; (8002380 <HAL_DMA_Init+0x1e8>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d00e      	beq.n	800230c <HAL_DMA_Init+0x174>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a24      	ldr	r2, [pc, #144]	; (8002384 <HAL_DMA_Init+0x1ec>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d009      	beq.n	800230c <HAL_DMA_Init+0x174>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a22      	ldr	r2, [pc, #136]	; (8002388 <HAL_DMA_Init+0x1f0>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d004      	beq.n	800230c <HAL_DMA_Init+0x174>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a21      	ldr	r2, [pc, #132]	; (800238c <HAL_DMA_Init+0x1f4>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d108      	bne.n	800231e <HAL_DMA_Init+0x186>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f022 0201 	bic.w	r2, r2, #1
 800231a:	601a      	str	r2, [r3, #0]
 800231c:	e007      	b.n	800232e <HAL_DMA_Init+0x196>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f022 0201 	bic.w	r2, r2, #1
 800232c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800232e:	e02f      	b.n	8002390 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002330:	f7ff fde8 	bl	8001f04 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b05      	cmp	r3, #5
 800233c:	d928      	bls.n	8002390 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2220      	movs	r2, #32
 8002342:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2203      	movs	r2, #3
 8002348:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e246      	b.n	80027de <HAL_DMA_Init+0x646>
 8002350:	40020010 	.word	0x40020010
 8002354:	40020028 	.word	0x40020028
 8002358:	40020040 	.word	0x40020040
 800235c:	40020058 	.word	0x40020058
 8002360:	40020070 	.word	0x40020070
 8002364:	40020088 	.word	0x40020088
 8002368:	400200a0 	.word	0x400200a0
 800236c:	400200b8 	.word	0x400200b8
 8002370:	40020410 	.word	0x40020410
 8002374:	40020428 	.word	0x40020428
 8002378:	40020440 	.word	0x40020440
 800237c:	40020458 	.word	0x40020458
 8002380:	40020470 	.word	0x40020470
 8002384:	40020488 	.word	0x40020488
 8002388:	400204a0 	.word	0x400204a0
 800238c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	2b00      	cmp	r3, #0
 800239c:	d1c8      	bne.n	8002330 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80023a6:	697a      	ldr	r2, [r7, #20]
 80023a8:	4b83      	ldr	r3, [pc, #524]	; (80025b8 <HAL_DMA_Init+0x420>)
 80023aa:	4013      	ands	r3, r2
 80023ac:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80023b6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023c2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	699b      	ldr	r3, [r3, #24]
 80023c8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023ce:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a1b      	ldr	r3, [r3, #32]
 80023d4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80023d6:	697a      	ldr	r2, [r7, #20]
 80023d8:	4313      	orrs	r3, r2
 80023da:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e0:	2b04      	cmp	r3, #4
 80023e2:	d107      	bne.n	80023f4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ec:	4313      	orrs	r3, r2
 80023ee:	697a      	ldr	r2, [r7, #20]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80023f4:	4b71      	ldr	r3, [pc, #452]	; (80025bc <HAL_DMA_Init+0x424>)
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	4b71      	ldr	r3, [pc, #452]	; (80025c0 <HAL_DMA_Init+0x428>)
 80023fa:	4013      	ands	r3, r2
 80023fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002400:	d328      	bcc.n	8002454 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	2b28      	cmp	r3, #40	; 0x28
 8002408:	d903      	bls.n	8002412 <HAL_DMA_Init+0x27a>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	2b2e      	cmp	r3, #46	; 0x2e
 8002410:	d917      	bls.n	8002442 <HAL_DMA_Init+0x2aa>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	2b3e      	cmp	r3, #62	; 0x3e
 8002418:	d903      	bls.n	8002422 <HAL_DMA_Init+0x28a>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	2b42      	cmp	r3, #66	; 0x42
 8002420:	d90f      	bls.n	8002442 <HAL_DMA_Init+0x2aa>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	2b46      	cmp	r3, #70	; 0x46
 8002428:	d903      	bls.n	8002432 <HAL_DMA_Init+0x29a>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	2b48      	cmp	r3, #72	; 0x48
 8002430:	d907      	bls.n	8002442 <HAL_DMA_Init+0x2aa>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	2b4e      	cmp	r3, #78	; 0x4e
 8002438:	d905      	bls.n	8002446 <HAL_DMA_Init+0x2ae>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	2b52      	cmp	r3, #82	; 0x52
 8002440:	d801      	bhi.n	8002446 <HAL_DMA_Init+0x2ae>
 8002442:	2301      	movs	r3, #1
 8002444:	e000      	b.n	8002448 <HAL_DMA_Init+0x2b0>
 8002446:	2300      	movs	r3, #0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d003      	beq.n	8002454 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002452:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	697a      	ldr	r2, [r7, #20]
 800245a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	695b      	ldr	r3, [r3, #20]
 8002462:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	f023 0307 	bic.w	r3, r3, #7
 800246a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002470:	697a      	ldr	r2, [r7, #20]
 8002472:	4313      	orrs	r3, r2
 8002474:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247a:	2b04      	cmp	r3, #4
 800247c:	d117      	bne.n	80024ae <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002482:	697a      	ldr	r2, [r7, #20]
 8002484:	4313      	orrs	r3, r2
 8002486:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800248c:	2b00      	cmp	r3, #0
 800248e:	d00e      	beq.n	80024ae <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f001 fdcf 	bl	8004034 <DMA_CheckFifoParam>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d008      	beq.n	80024ae <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2240      	movs	r2, #64	; 0x40
 80024a0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2201      	movs	r2, #1
 80024a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e197      	b.n	80027de <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	697a      	ldr	r2, [r7, #20]
 80024b4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f001 fd0a 	bl	8003ed0 <DMA_CalcBaseAndBitshift>
 80024bc:	4603      	mov	r3, r0
 80024be:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c4:	f003 031f 	and.w	r3, r3, #31
 80024c8:	223f      	movs	r2, #63	; 0x3f
 80024ca:	409a      	lsls	r2, r3
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	609a      	str	r2, [r3, #8]
 80024d0:	e0cd      	b.n	800266e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a3b      	ldr	r2, [pc, #236]	; (80025c4 <HAL_DMA_Init+0x42c>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d022      	beq.n	8002522 <HAL_DMA_Init+0x38a>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a39      	ldr	r2, [pc, #228]	; (80025c8 <HAL_DMA_Init+0x430>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d01d      	beq.n	8002522 <HAL_DMA_Init+0x38a>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a38      	ldr	r2, [pc, #224]	; (80025cc <HAL_DMA_Init+0x434>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d018      	beq.n	8002522 <HAL_DMA_Init+0x38a>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a36      	ldr	r2, [pc, #216]	; (80025d0 <HAL_DMA_Init+0x438>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d013      	beq.n	8002522 <HAL_DMA_Init+0x38a>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a35      	ldr	r2, [pc, #212]	; (80025d4 <HAL_DMA_Init+0x43c>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d00e      	beq.n	8002522 <HAL_DMA_Init+0x38a>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a33      	ldr	r2, [pc, #204]	; (80025d8 <HAL_DMA_Init+0x440>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d009      	beq.n	8002522 <HAL_DMA_Init+0x38a>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a32      	ldr	r2, [pc, #200]	; (80025dc <HAL_DMA_Init+0x444>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d004      	beq.n	8002522 <HAL_DMA_Init+0x38a>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a30      	ldr	r2, [pc, #192]	; (80025e0 <HAL_DMA_Init+0x448>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d101      	bne.n	8002526 <HAL_DMA_Init+0x38e>
 8002522:	2301      	movs	r3, #1
 8002524:	e000      	b.n	8002528 <HAL_DMA_Init+0x390>
 8002526:	2300      	movs	r3, #0
 8002528:	2b00      	cmp	r3, #0
 800252a:	f000 8097 	beq.w	800265c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a24      	ldr	r2, [pc, #144]	; (80025c4 <HAL_DMA_Init+0x42c>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d021      	beq.n	800257c <HAL_DMA_Init+0x3e4>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a22      	ldr	r2, [pc, #136]	; (80025c8 <HAL_DMA_Init+0x430>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d01c      	beq.n	800257c <HAL_DMA_Init+0x3e4>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a21      	ldr	r2, [pc, #132]	; (80025cc <HAL_DMA_Init+0x434>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d017      	beq.n	800257c <HAL_DMA_Init+0x3e4>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a1f      	ldr	r2, [pc, #124]	; (80025d0 <HAL_DMA_Init+0x438>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d012      	beq.n	800257c <HAL_DMA_Init+0x3e4>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a1e      	ldr	r2, [pc, #120]	; (80025d4 <HAL_DMA_Init+0x43c>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d00d      	beq.n	800257c <HAL_DMA_Init+0x3e4>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a1c      	ldr	r2, [pc, #112]	; (80025d8 <HAL_DMA_Init+0x440>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d008      	beq.n	800257c <HAL_DMA_Init+0x3e4>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a1b      	ldr	r2, [pc, #108]	; (80025dc <HAL_DMA_Init+0x444>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d003      	beq.n	800257c <HAL_DMA_Init+0x3e4>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a19      	ldr	r2, [pc, #100]	; (80025e0 <HAL_DMA_Init+0x448>)
 800257a:	4293      	cmp	r3, r2
 800257c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2202      	movs	r2, #2
 800258a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002596:	697a      	ldr	r2, [r7, #20]
 8002598:	4b12      	ldr	r3, [pc, #72]	; (80025e4 <HAL_DMA_Init+0x44c>)
 800259a:	4013      	ands	r3, r2
 800259c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	2b40      	cmp	r3, #64	; 0x40
 80025a4:	d020      	beq.n	80025e8 <HAL_DMA_Init+0x450>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	2b80      	cmp	r3, #128	; 0x80
 80025ac:	d102      	bne.n	80025b4 <HAL_DMA_Init+0x41c>
 80025ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80025b2:	e01a      	b.n	80025ea <HAL_DMA_Init+0x452>
 80025b4:	2300      	movs	r3, #0
 80025b6:	e018      	b.n	80025ea <HAL_DMA_Init+0x452>
 80025b8:	fe10803f 	.word	0xfe10803f
 80025bc:	5c001000 	.word	0x5c001000
 80025c0:	ffff0000 	.word	0xffff0000
 80025c4:	58025408 	.word	0x58025408
 80025c8:	5802541c 	.word	0x5802541c
 80025cc:	58025430 	.word	0x58025430
 80025d0:	58025444 	.word	0x58025444
 80025d4:	58025458 	.word	0x58025458
 80025d8:	5802546c 	.word	0x5802546c
 80025dc:	58025480 	.word	0x58025480
 80025e0:	58025494 	.word	0x58025494
 80025e4:	fffe000f 	.word	0xfffe000f
 80025e8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	68d2      	ldr	r2, [r2, #12]
 80025ee:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80025f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80025f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002600:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	699b      	ldr	r3, [r3, #24]
 8002606:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002608:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	69db      	ldr	r3, [r3, #28]
 800260e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002610:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a1b      	ldr	r3, [r3, #32]
 8002616:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002618:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800261a:	697a      	ldr	r2, [r7, #20]
 800261c:	4313      	orrs	r3, r2
 800261e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	697a      	ldr	r2, [r7, #20]
 8002626:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	461a      	mov	r2, r3
 800262e:	4b6e      	ldr	r3, [pc, #440]	; (80027e8 <HAL_DMA_Init+0x650>)
 8002630:	4413      	add	r3, r2
 8002632:	4a6e      	ldr	r2, [pc, #440]	; (80027ec <HAL_DMA_Init+0x654>)
 8002634:	fba2 2303 	umull	r2, r3, r2, r3
 8002638:	091b      	lsrs	r3, r3, #4
 800263a:	009a      	lsls	r2, r3, #2
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f001 fc45 	bl	8003ed0 <DMA_CalcBaseAndBitshift>
 8002646:	4603      	mov	r3, r0
 8002648:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800264e:	f003 031f 	and.w	r3, r3, #31
 8002652:	2201      	movs	r2, #1
 8002654:	409a      	lsls	r2, r3
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	605a      	str	r2, [r3, #4]
 800265a:	e008      	b.n	800266e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2240      	movs	r2, #64	; 0x40
 8002660:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2203      	movs	r2, #3
 8002666:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e0b7      	b.n	80027de <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a5f      	ldr	r2, [pc, #380]	; (80027f0 <HAL_DMA_Init+0x658>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d072      	beq.n	800275e <HAL_DMA_Init+0x5c6>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a5d      	ldr	r2, [pc, #372]	; (80027f4 <HAL_DMA_Init+0x65c>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d06d      	beq.n	800275e <HAL_DMA_Init+0x5c6>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a5c      	ldr	r2, [pc, #368]	; (80027f8 <HAL_DMA_Init+0x660>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d068      	beq.n	800275e <HAL_DMA_Init+0x5c6>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a5a      	ldr	r2, [pc, #360]	; (80027fc <HAL_DMA_Init+0x664>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d063      	beq.n	800275e <HAL_DMA_Init+0x5c6>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a59      	ldr	r2, [pc, #356]	; (8002800 <HAL_DMA_Init+0x668>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d05e      	beq.n	800275e <HAL_DMA_Init+0x5c6>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a57      	ldr	r2, [pc, #348]	; (8002804 <HAL_DMA_Init+0x66c>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d059      	beq.n	800275e <HAL_DMA_Init+0x5c6>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a56      	ldr	r2, [pc, #344]	; (8002808 <HAL_DMA_Init+0x670>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d054      	beq.n	800275e <HAL_DMA_Init+0x5c6>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a54      	ldr	r2, [pc, #336]	; (800280c <HAL_DMA_Init+0x674>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d04f      	beq.n	800275e <HAL_DMA_Init+0x5c6>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a53      	ldr	r2, [pc, #332]	; (8002810 <HAL_DMA_Init+0x678>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d04a      	beq.n	800275e <HAL_DMA_Init+0x5c6>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a51      	ldr	r2, [pc, #324]	; (8002814 <HAL_DMA_Init+0x67c>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d045      	beq.n	800275e <HAL_DMA_Init+0x5c6>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a50      	ldr	r2, [pc, #320]	; (8002818 <HAL_DMA_Init+0x680>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d040      	beq.n	800275e <HAL_DMA_Init+0x5c6>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a4e      	ldr	r2, [pc, #312]	; (800281c <HAL_DMA_Init+0x684>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d03b      	beq.n	800275e <HAL_DMA_Init+0x5c6>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a4d      	ldr	r2, [pc, #308]	; (8002820 <HAL_DMA_Init+0x688>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d036      	beq.n	800275e <HAL_DMA_Init+0x5c6>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a4b      	ldr	r2, [pc, #300]	; (8002824 <HAL_DMA_Init+0x68c>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d031      	beq.n	800275e <HAL_DMA_Init+0x5c6>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a4a      	ldr	r2, [pc, #296]	; (8002828 <HAL_DMA_Init+0x690>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d02c      	beq.n	800275e <HAL_DMA_Init+0x5c6>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a48      	ldr	r2, [pc, #288]	; (800282c <HAL_DMA_Init+0x694>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d027      	beq.n	800275e <HAL_DMA_Init+0x5c6>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a47      	ldr	r2, [pc, #284]	; (8002830 <HAL_DMA_Init+0x698>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d022      	beq.n	800275e <HAL_DMA_Init+0x5c6>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a45      	ldr	r2, [pc, #276]	; (8002834 <HAL_DMA_Init+0x69c>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d01d      	beq.n	800275e <HAL_DMA_Init+0x5c6>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a44      	ldr	r2, [pc, #272]	; (8002838 <HAL_DMA_Init+0x6a0>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d018      	beq.n	800275e <HAL_DMA_Init+0x5c6>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a42      	ldr	r2, [pc, #264]	; (800283c <HAL_DMA_Init+0x6a4>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d013      	beq.n	800275e <HAL_DMA_Init+0x5c6>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a41      	ldr	r2, [pc, #260]	; (8002840 <HAL_DMA_Init+0x6a8>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d00e      	beq.n	800275e <HAL_DMA_Init+0x5c6>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a3f      	ldr	r2, [pc, #252]	; (8002844 <HAL_DMA_Init+0x6ac>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d009      	beq.n	800275e <HAL_DMA_Init+0x5c6>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a3e      	ldr	r2, [pc, #248]	; (8002848 <HAL_DMA_Init+0x6b0>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d004      	beq.n	800275e <HAL_DMA_Init+0x5c6>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a3c      	ldr	r2, [pc, #240]	; (800284c <HAL_DMA_Init+0x6b4>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d101      	bne.n	8002762 <HAL_DMA_Init+0x5ca>
 800275e:	2301      	movs	r3, #1
 8002760:	e000      	b.n	8002764 <HAL_DMA_Init+0x5cc>
 8002762:	2300      	movs	r3, #0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d032      	beq.n	80027ce <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f001 fcdf 	bl	800412c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	2b80      	cmp	r3, #128	; 0x80
 8002774:	d102      	bne.n	800277c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685a      	ldr	r2, [r3, #4]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002784:	b2d2      	uxtb	r2, r2
 8002786:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002790:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d010      	beq.n	80027bc <HAL_DMA_Init+0x624>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	2b08      	cmp	r3, #8
 80027a0:	d80c      	bhi.n	80027bc <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f001 fd5c 	bl	8004260 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027ac:	2200      	movs	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80027b8:	605a      	str	r2, [r3, #4]
 80027ba:	e008      	b.n	80027ce <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3718      	adds	r7, #24
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	a7fdabf8 	.word	0xa7fdabf8
 80027ec:	cccccccd 	.word	0xcccccccd
 80027f0:	40020010 	.word	0x40020010
 80027f4:	40020028 	.word	0x40020028
 80027f8:	40020040 	.word	0x40020040
 80027fc:	40020058 	.word	0x40020058
 8002800:	40020070 	.word	0x40020070
 8002804:	40020088 	.word	0x40020088
 8002808:	400200a0 	.word	0x400200a0
 800280c:	400200b8 	.word	0x400200b8
 8002810:	40020410 	.word	0x40020410
 8002814:	40020428 	.word	0x40020428
 8002818:	40020440 	.word	0x40020440
 800281c:	40020458 	.word	0x40020458
 8002820:	40020470 	.word	0x40020470
 8002824:	40020488 	.word	0x40020488
 8002828:	400204a0 	.word	0x400204a0
 800282c:	400204b8 	.word	0x400204b8
 8002830:	58025408 	.word	0x58025408
 8002834:	5802541c 	.word	0x5802541c
 8002838:	58025430 	.word	0x58025430
 800283c:	58025444 	.word	0x58025444
 8002840:	58025458 	.word	0x58025458
 8002844:	5802546c 	.word	0x5802546c
 8002848:	58025480 	.word	0x58025480
 800284c:	58025494 	.word	0x58025494

08002850 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b086      	sub	sp, #24
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	607a      	str	r2, [r7, #4]
 800285c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800285e:	2300      	movs	r3, #0
 8002860:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d101      	bne.n	800286c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e226      	b.n	8002cba <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002872:	2b01      	cmp	r3, #1
 8002874:	d101      	bne.n	800287a <HAL_DMA_Start_IT+0x2a>
 8002876:	2302      	movs	r3, #2
 8002878:	e21f      	b.n	8002cba <HAL_DMA_Start_IT+0x46a>
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2201      	movs	r2, #1
 800287e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2b01      	cmp	r3, #1
 800288c:	f040 820a 	bne.w	8002ca4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2202      	movs	r2, #2
 8002894:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2200      	movs	r2, #0
 800289c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a68      	ldr	r2, [pc, #416]	; (8002a44 <HAL_DMA_Start_IT+0x1f4>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d04a      	beq.n	800293e <HAL_DMA_Start_IT+0xee>
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a66      	ldr	r2, [pc, #408]	; (8002a48 <HAL_DMA_Start_IT+0x1f8>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d045      	beq.n	800293e <HAL_DMA_Start_IT+0xee>
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a65      	ldr	r2, [pc, #404]	; (8002a4c <HAL_DMA_Start_IT+0x1fc>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d040      	beq.n	800293e <HAL_DMA_Start_IT+0xee>
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a63      	ldr	r2, [pc, #396]	; (8002a50 <HAL_DMA_Start_IT+0x200>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d03b      	beq.n	800293e <HAL_DMA_Start_IT+0xee>
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a62      	ldr	r2, [pc, #392]	; (8002a54 <HAL_DMA_Start_IT+0x204>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d036      	beq.n	800293e <HAL_DMA_Start_IT+0xee>
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a60      	ldr	r2, [pc, #384]	; (8002a58 <HAL_DMA_Start_IT+0x208>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d031      	beq.n	800293e <HAL_DMA_Start_IT+0xee>
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a5f      	ldr	r2, [pc, #380]	; (8002a5c <HAL_DMA_Start_IT+0x20c>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d02c      	beq.n	800293e <HAL_DMA_Start_IT+0xee>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a5d      	ldr	r2, [pc, #372]	; (8002a60 <HAL_DMA_Start_IT+0x210>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d027      	beq.n	800293e <HAL_DMA_Start_IT+0xee>
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a5c      	ldr	r2, [pc, #368]	; (8002a64 <HAL_DMA_Start_IT+0x214>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d022      	beq.n	800293e <HAL_DMA_Start_IT+0xee>
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a5a      	ldr	r2, [pc, #360]	; (8002a68 <HAL_DMA_Start_IT+0x218>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d01d      	beq.n	800293e <HAL_DMA_Start_IT+0xee>
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a59      	ldr	r2, [pc, #356]	; (8002a6c <HAL_DMA_Start_IT+0x21c>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d018      	beq.n	800293e <HAL_DMA_Start_IT+0xee>
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a57      	ldr	r2, [pc, #348]	; (8002a70 <HAL_DMA_Start_IT+0x220>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d013      	beq.n	800293e <HAL_DMA_Start_IT+0xee>
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a56      	ldr	r2, [pc, #344]	; (8002a74 <HAL_DMA_Start_IT+0x224>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d00e      	beq.n	800293e <HAL_DMA_Start_IT+0xee>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a54      	ldr	r2, [pc, #336]	; (8002a78 <HAL_DMA_Start_IT+0x228>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d009      	beq.n	800293e <HAL_DMA_Start_IT+0xee>
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a53      	ldr	r2, [pc, #332]	; (8002a7c <HAL_DMA_Start_IT+0x22c>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d004      	beq.n	800293e <HAL_DMA_Start_IT+0xee>
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a51      	ldr	r2, [pc, #324]	; (8002a80 <HAL_DMA_Start_IT+0x230>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d108      	bne.n	8002950 <HAL_DMA_Start_IT+0x100>
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f022 0201 	bic.w	r2, r2, #1
 800294c:	601a      	str	r2, [r3, #0]
 800294e:	e007      	b.n	8002960 <HAL_DMA_Start_IT+0x110>
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f022 0201 	bic.w	r2, r2, #1
 800295e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	68b9      	ldr	r1, [r7, #8]
 8002966:	68f8      	ldr	r0, [r7, #12]
 8002968:	f001 f906 	bl	8003b78 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a34      	ldr	r2, [pc, #208]	; (8002a44 <HAL_DMA_Start_IT+0x1f4>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d04a      	beq.n	8002a0c <HAL_DMA_Start_IT+0x1bc>
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a33      	ldr	r2, [pc, #204]	; (8002a48 <HAL_DMA_Start_IT+0x1f8>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d045      	beq.n	8002a0c <HAL_DMA_Start_IT+0x1bc>
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a31      	ldr	r2, [pc, #196]	; (8002a4c <HAL_DMA_Start_IT+0x1fc>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d040      	beq.n	8002a0c <HAL_DMA_Start_IT+0x1bc>
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a30      	ldr	r2, [pc, #192]	; (8002a50 <HAL_DMA_Start_IT+0x200>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d03b      	beq.n	8002a0c <HAL_DMA_Start_IT+0x1bc>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a2e      	ldr	r2, [pc, #184]	; (8002a54 <HAL_DMA_Start_IT+0x204>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d036      	beq.n	8002a0c <HAL_DMA_Start_IT+0x1bc>
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a2d      	ldr	r2, [pc, #180]	; (8002a58 <HAL_DMA_Start_IT+0x208>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d031      	beq.n	8002a0c <HAL_DMA_Start_IT+0x1bc>
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a2b      	ldr	r2, [pc, #172]	; (8002a5c <HAL_DMA_Start_IT+0x20c>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d02c      	beq.n	8002a0c <HAL_DMA_Start_IT+0x1bc>
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a2a      	ldr	r2, [pc, #168]	; (8002a60 <HAL_DMA_Start_IT+0x210>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d027      	beq.n	8002a0c <HAL_DMA_Start_IT+0x1bc>
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a28      	ldr	r2, [pc, #160]	; (8002a64 <HAL_DMA_Start_IT+0x214>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d022      	beq.n	8002a0c <HAL_DMA_Start_IT+0x1bc>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a27      	ldr	r2, [pc, #156]	; (8002a68 <HAL_DMA_Start_IT+0x218>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d01d      	beq.n	8002a0c <HAL_DMA_Start_IT+0x1bc>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a25      	ldr	r2, [pc, #148]	; (8002a6c <HAL_DMA_Start_IT+0x21c>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d018      	beq.n	8002a0c <HAL_DMA_Start_IT+0x1bc>
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a24      	ldr	r2, [pc, #144]	; (8002a70 <HAL_DMA_Start_IT+0x220>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d013      	beq.n	8002a0c <HAL_DMA_Start_IT+0x1bc>
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a22      	ldr	r2, [pc, #136]	; (8002a74 <HAL_DMA_Start_IT+0x224>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d00e      	beq.n	8002a0c <HAL_DMA_Start_IT+0x1bc>
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a21      	ldr	r2, [pc, #132]	; (8002a78 <HAL_DMA_Start_IT+0x228>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d009      	beq.n	8002a0c <HAL_DMA_Start_IT+0x1bc>
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a1f      	ldr	r2, [pc, #124]	; (8002a7c <HAL_DMA_Start_IT+0x22c>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d004      	beq.n	8002a0c <HAL_DMA_Start_IT+0x1bc>
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a1e      	ldr	r2, [pc, #120]	; (8002a80 <HAL_DMA_Start_IT+0x230>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d101      	bne.n	8002a10 <HAL_DMA_Start_IT+0x1c0>
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e000      	b.n	8002a12 <HAL_DMA_Start_IT+0x1c2>
 8002a10:	2300      	movs	r3, #0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d036      	beq.n	8002a84 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f023 021e 	bic.w	r2, r3, #30
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f042 0216 	orr.w	r2, r2, #22
 8002a28:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d03e      	beq.n	8002ab0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f042 0208 	orr.w	r2, r2, #8
 8002a40:	601a      	str	r2, [r3, #0]
 8002a42:	e035      	b.n	8002ab0 <HAL_DMA_Start_IT+0x260>
 8002a44:	40020010 	.word	0x40020010
 8002a48:	40020028 	.word	0x40020028
 8002a4c:	40020040 	.word	0x40020040
 8002a50:	40020058 	.word	0x40020058
 8002a54:	40020070 	.word	0x40020070
 8002a58:	40020088 	.word	0x40020088
 8002a5c:	400200a0 	.word	0x400200a0
 8002a60:	400200b8 	.word	0x400200b8
 8002a64:	40020410 	.word	0x40020410
 8002a68:	40020428 	.word	0x40020428
 8002a6c:	40020440 	.word	0x40020440
 8002a70:	40020458 	.word	0x40020458
 8002a74:	40020470 	.word	0x40020470
 8002a78:	40020488 	.word	0x40020488
 8002a7c:	400204a0 	.word	0x400204a0
 8002a80:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f023 020e 	bic.w	r2, r3, #14
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f042 020a 	orr.w	r2, r2, #10
 8002a96:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d007      	beq.n	8002ab0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f042 0204 	orr.w	r2, r2, #4
 8002aae:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a83      	ldr	r2, [pc, #524]	; (8002cc4 <HAL_DMA_Start_IT+0x474>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d072      	beq.n	8002ba0 <HAL_DMA_Start_IT+0x350>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a82      	ldr	r2, [pc, #520]	; (8002cc8 <HAL_DMA_Start_IT+0x478>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d06d      	beq.n	8002ba0 <HAL_DMA_Start_IT+0x350>
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a80      	ldr	r2, [pc, #512]	; (8002ccc <HAL_DMA_Start_IT+0x47c>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d068      	beq.n	8002ba0 <HAL_DMA_Start_IT+0x350>
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a7f      	ldr	r2, [pc, #508]	; (8002cd0 <HAL_DMA_Start_IT+0x480>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d063      	beq.n	8002ba0 <HAL_DMA_Start_IT+0x350>
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a7d      	ldr	r2, [pc, #500]	; (8002cd4 <HAL_DMA_Start_IT+0x484>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d05e      	beq.n	8002ba0 <HAL_DMA_Start_IT+0x350>
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a7c      	ldr	r2, [pc, #496]	; (8002cd8 <HAL_DMA_Start_IT+0x488>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d059      	beq.n	8002ba0 <HAL_DMA_Start_IT+0x350>
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a7a      	ldr	r2, [pc, #488]	; (8002cdc <HAL_DMA_Start_IT+0x48c>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d054      	beq.n	8002ba0 <HAL_DMA_Start_IT+0x350>
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a79      	ldr	r2, [pc, #484]	; (8002ce0 <HAL_DMA_Start_IT+0x490>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d04f      	beq.n	8002ba0 <HAL_DMA_Start_IT+0x350>
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a77      	ldr	r2, [pc, #476]	; (8002ce4 <HAL_DMA_Start_IT+0x494>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d04a      	beq.n	8002ba0 <HAL_DMA_Start_IT+0x350>
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a76      	ldr	r2, [pc, #472]	; (8002ce8 <HAL_DMA_Start_IT+0x498>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d045      	beq.n	8002ba0 <HAL_DMA_Start_IT+0x350>
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a74      	ldr	r2, [pc, #464]	; (8002cec <HAL_DMA_Start_IT+0x49c>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d040      	beq.n	8002ba0 <HAL_DMA_Start_IT+0x350>
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a73      	ldr	r2, [pc, #460]	; (8002cf0 <HAL_DMA_Start_IT+0x4a0>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d03b      	beq.n	8002ba0 <HAL_DMA_Start_IT+0x350>
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a71      	ldr	r2, [pc, #452]	; (8002cf4 <HAL_DMA_Start_IT+0x4a4>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d036      	beq.n	8002ba0 <HAL_DMA_Start_IT+0x350>
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a70      	ldr	r2, [pc, #448]	; (8002cf8 <HAL_DMA_Start_IT+0x4a8>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d031      	beq.n	8002ba0 <HAL_DMA_Start_IT+0x350>
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a6e      	ldr	r2, [pc, #440]	; (8002cfc <HAL_DMA_Start_IT+0x4ac>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d02c      	beq.n	8002ba0 <HAL_DMA_Start_IT+0x350>
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a6d      	ldr	r2, [pc, #436]	; (8002d00 <HAL_DMA_Start_IT+0x4b0>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d027      	beq.n	8002ba0 <HAL_DMA_Start_IT+0x350>
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a6b      	ldr	r2, [pc, #428]	; (8002d04 <HAL_DMA_Start_IT+0x4b4>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d022      	beq.n	8002ba0 <HAL_DMA_Start_IT+0x350>
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a6a      	ldr	r2, [pc, #424]	; (8002d08 <HAL_DMA_Start_IT+0x4b8>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d01d      	beq.n	8002ba0 <HAL_DMA_Start_IT+0x350>
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a68      	ldr	r2, [pc, #416]	; (8002d0c <HAL_DMA_Start_IT+0x4bc>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d018      	beq.n	8002ba0 <HAL_DMA_Start_IT+0x350>
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a67      	ldr	r2, [pc, #412]	; (8002d10 <HAL_DMA_Start_IT+0x4c0>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d013      	beq.n	8002ba0 <HAL_DMA_Start_IT+0x350>
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a65      	ldr	r2, [pc, #404]	; (8002d14 <HAL_DMA_Start_IT+0x4c4>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d00e      	beq.n	8002ba0 <HAL_DMA_Start_IT+0x350>
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a64      	ldr	r2, [pc, #400]	; (8002d18 <HAL_DMA_Start_IT+0x4c8>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d009      	beq.n	8002ba0 <HAL_DMA_Start_IT+0x350>
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a62      	ldr	r2, [pc, #392]	; (8002d1c <HAL_DMA_Start_IT+0x4cc>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d004      	beq.n	8002ba0 <HAL_DMA_Start_IT+0x350>
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a61      	ldr	r2, [pc, #388]	; (8002d20 <HAL_DMA_Start_IT+0x4d0>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d101      	bne.n	8002ba4 <HAL_DMA_Start_IT+0x354>
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e000      	b.n	8002ba6 <HAL_DMA_Start_IT+0x356>
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d01a      	beq.n	8002be0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d007      	beq.n	8002bc8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bc6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d007      	beq.n	8002be0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bde:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a37      	ldr	r2, [pc, #220]	; (8002cc4 <HAL_DMA_Start_IT+0x474>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d04a      	beq.n	8002c80 <HAL_DMA_Start_IT+0x430>
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a36      	ldr	r2, [pc, #216]	; (8002cc8 <HAL_DMA_Start_IT+0x478>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d045      	beq.n	8002c80 <HAL_DMA_Start_IT+0x430>
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a34      	ldr	r2, [pc, #208]	; (8002ccc <HAL_DMA_Start_IT+0x47c>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d040      	beq.n	8002c80 <HAL_DMA_Start_IT+0x430>
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a33      	ldr	r2, [pc, #204]	; (8002cd0 <HAL_DMA_Start_IT+0x480>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d03b      	beq.n	8002c80 <HAL_DMA_Start_IT+0x430>
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a31      	ldr	r2, [pc, #196]	; (8002cd4 <HAL_DMA_Start_IT+0x484>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d036      	beq.n	8002c80 <HAL_DMA_Start_IT+0x430>
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a30      	ldr	r2, [pc, #192]	; (8002cd8 <HAL_DMA_Start_IT+0x488>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d031      	beq.n	8002c80 <HAL_DMA_Start_IT+0x430>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a2e      	ldr	r2, [pc, #184]	; (8002cdc <HAL_DMA_Start_IT+0x48c>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d02c      	beq.n	8002c80 <HAL_DMA_Start_IT+0x430>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a2d      	ldr	r2, [pc, #180]	; (8002ce0 <HAL_DMA_Start_IT+0x490>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d027      	beq.n	8002c80 <HAL_DMA_Start_IT+0x430>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a2b      	ldr	r2, [pc, #172]	; (8002ce4 <HAL_DMA_Start_IT+0x494>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d022      	beq.n	8002c80 <HAL_DMA_Start_IT+0x430>
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a2a      	ldr	r2, [pc, #168]	; (8002ce8 <HAL_DMA_Start_IT+0x498>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d01d      	beq.n	8002c80 <HAL_DMA_Start_IT+0x430>
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a28      	ldr	r2, [pc, #160]	; (8002cec <HAL_DMA_Start_IT+0x49c>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d018      	beq.n	8002c80 <HAL_DMA_Start_IT+0x430>
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a27      	ldr	r2, [pc, #156]	; (8002cf0 <HAL_DMA_Start_IT+0x4a0>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d013      	beq.n	8002c80 <HAL_DMA_Start_IT+0x430>
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a25      	ldr	r2, [pc, #148]	; (8002cf4 <HAL_DMA_Start_IT+0x4a4>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d00e      	beq.n	8002c80 <HAL_DMA_Start_IT+0x430>
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a24      	ldr	r2, [pc, #144]	; (8002cf8 <HAL_DMA_Start_IT+0x4a8>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d009      	beq.n	8002c80 <HAL_DMA_Start_IT+0x430>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a22      	ldr	r2, [pc, #136]	; (8002cfc <HAL_DMA_Start_IT+0x4ac>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d004      	beq.n	8002c80 <HAL_DMA_Start_IT+0x430>
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a21      	ldr	r2, [pc, #132]	; (8002d00 <HAL_DMA_Start_IT+0x4b0>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d108      	bne.n	8002c92 <HAL_DMA_Start_IT+0x442>
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f042 0201 	orr.w	r2, r2, #1
 8002c8e:	601a      	str	r2, [r3, #0]
 8002c90:	e012      	b.n	8002cb8 <HAL_DMA_Start_IT+0x468>
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f042 0201 	orr.w	r2, r2, #1
 8002ca0:	601a      	str	r2, [r3, #0]
 8002ca2:	e009      	b.n	8002cb8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002cb2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002cb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3718      	adds	r7, #24
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	40020010 	.word	0x40020010
 8002cc8:	40020028 	.word	0x40020028
 8002ccc:	40020040 	.word	0x40020040
 8002cd0:	40020058 	.word	0x40020058
 8002cd4:	40020070 	.word	0x40020070
 8002cd8:	40020088 	.word	0x40020088
 8002cdc:	400200a0 	.word	0x400200a0
 8002ce0:	400200b8 	.word	0x400200b8
 8002ce4:	40020410 	.word	0x40020410
 8002ce8:	40020428 	.word	0x40020428
 8002cec:	40020440 	.word	0x40020440
 8002cf0:	40020458 	.word	0x40020458
 8002cf4:	40020470 	.word	0x40020470
 8002cf8:	40020488 	.word	0x40020488
 8002cfc:	400204a0 	.word	0x400204a0
 8002d00:	400204b8 	.word	0x400204b8
 8002d04:	58025408 	.word	0x58025408
 8002d08:	5802541c 	.word	0x5802541c
 8002d0c:	58025430 	.word	0x58025430
 8002d10:	58025444 	.word	0x58025444
 8002d14:	58025458 	.word	0x58025458
 8002d18:	5802546c 	.word	0x5802546c
 8002d1c:	58025480 	.word	0x58025480
 8002d20:	58025494 	.word	0x58025494

08002d24 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b08a      	sub	sp, #40	; 0x28
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002d30:	4b67      	ldr	r3, [pc, #412]	; (8002ed0 <HAL_DMA_IRQHandler+0x1ac>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a67      	ldr	r2, [pc, #412]	; (8002ed4 <HAL_DMA_IRQHandler+0x1b0>)
 8002d36:	fba2 2303 	umull	r2, r3, r2, r3
 8002d3a:	0a9b      	lsrs	r3, r3, #10
 8002d3c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d42:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d48:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002d4a:	6a3b      	ldr	r3, [r7, #32]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a5f      	ldr	r2, [pc, #380]	; (8002ed8 <HAL_DMA_IRQHandler+0x1b4>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d04a      	beq.n	8002df6 <HAL_DMA_IRQHandler+0xd2>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a5d      	ldr	r2, [pc, #372]	; (8002edc <HAL_DMA_IRQHandler+0x1b8>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d045      	beq.n	8002df6 <HAL_DMA_IRQHandler+0xd2>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a5c      	ldr	r2, [pc, #368]	; (8002ee0 <HAL_DMA_IRQHandler+0x1bc>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d040      	beq.n	8002df6 <HAL_DMA_IRQHandler+0xd2>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a5a      	ldr	r2, [pc, #360]	; (8002ee4 <HAL_DMA_IRQHandler+0x1c0>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d03b      	beq.n	8002df6 <HAL_DMA_IRQHandler+0xd2>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a59      	ldr	r2, [pc, #356]	; (8002ee8 <HAL_DMA_IRQHandler+0x1c4>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d036      	beq.n	8002df6 <HAL_DMA_IRQHandler+0xd2>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a57      	ldr	r2, [pc, #348]	; (8002eec <HAL_DMA_IRQHandler+0x1c8>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d031      	beq.n	8002df6 <HAL_DMA_IRQHandler+0xd2>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a56      	ldr	r2, [pc, #344]	; (8002ef0 <HAL_DMA_IRQHandler+0x1cc>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d02c      	beq.n	8002df6 <HAL_DMA_IRQHandler+0xd2>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a54      	ldr	r2, [pc, #336]	; (8002ef4 <HAL_DMA_IRQHandler+0x1d0>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d027      	beq.n	8002df6 <HAL_DMA_IRQHandler+0xd2>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a53      	ldr	r2, [pc, #332]	; (8002ef8 <HAL_DMA_IRQHandler+0x1d4>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d022      	beq.n	8002df6 <HAL_DMA_IRQHandler+0xd2>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a51      	ldr	r2, [pc, #324]	; (8002efc <HAL_DMA_IRQHandler+0x1d8>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d01d      	beq.n	8002df6 <HAL_DMA_IRQHandler+0xd2>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a50      	ldr	r2, [pc, #320]	; (8002f00 <HAL_DMA_IRQHandler+0x1dc>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d018      	beq.n	8002df6 <HAL_DMA_IRQHandler+0xd2>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a4e      	ldr	r2, [pc, #312]	; (8002f04 <HAL_DMA_IRQHandler+0x1e0>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d013      	beq.n	8002df6 <HAL_DMA_IRQHandler+0xd2>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a4d      	ldr	r2, [pc, #308]	; (8002f08 <HAL_DMA_IRQHandler+0x1e4>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d00e      	beq.n	8002df6 <HAL_DMA_IRQHandler+0xd2>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a4b      	ldr	r2, [pc, #300]	; (8002f0c <HAL_DMA_IRQHandler+0x1e8>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d009      	beq.n	8002df6 <HAL_DMA_IRQHandler+0xd2>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a4a      	ldr	r2, [pc, #296]	; (8002f10 <HAL_DMA_IRQHandler+0x1ec>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d004      	beq.n	8002df6 <HAL_DMA_IRQHandler+0xd2>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a48      	ldr	r2, [pc, #288]	; (8002f14 <HAL_DMA_IRQHandler+0x1f0>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d101      	bne.n	8002dfa <HAL_DMA_IRQHandler+0xd6>
 8002df6:	2301      	movs	r3, #1
 8002df8:	e000      	b.n	8002dfc <HAL_DMA_IRQHandler+0xd8>
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	f000 842b 	beq.w	8003658 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e06:	f003 031f 	and.w	r3, r3, #31
 8002e0a:	2208      	movs	r2, #8
 8002e0c:	409a      	lsls	r2, r3
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	4013      	ands	r3, r2
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	f000 80a2 	beq.w	8002f5c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a2e      	ldr	r2, [pc, #184]	; (8002ed8 <HAL_DMA_IRQHandler+0x1b4>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d04a      	beq.n	8002eb8 <HAL_DMA_IRQHandler+0x194>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a2d      	ldr	r2, [pc, #180]	; (8002edc <HAL_DMA_IRQHandler+0x1b8>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d045      	beq.n	8002eb8 <HAL_DMA_IRQHandler+0x194>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a2b      	ldr	r2, [pc, #172]	; (8002ee0 <HAL_DMA_IRQHandler+0x1bc>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d040      	beq.n	8002eb8 <HAL_DMA_IRQHandler+0x194>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a2a      	ldr	r2, [pc, #168]	; (8002ee4 <HAL_DMA_IRQHandler+0x1c0>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d03b      	beq.n	8002eb8 <HAL_DMA_IRQHandler+0x194>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a28      	ldr	r2, [pc, #160]	; (8002ee8 <HAL_DMA_IRQHandler+0x1c4>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d036      	beq.n	8002eb8 <HAL_DMA_IRQHandler+0x194>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a27      	ldr	r2, [pc, #156]	; (8002eec <HAL_DMA_IRQHandler+0x1c8>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d031      	beq.n	8002eb8 <HAL_DMA_IRQHandler+0x194>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a25      	ldr	r2, [pc, #148]	; (8002ef0 <HAL_DMA_IRQHandler+0x1cc>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d02c      	beq.n	8002eb8 <HAL_DMA_IRQHandler+0x194>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a24      	ldr	r2, [pc, #144]	; (8002ef4 <HAL_DMA_IRQHandler+0x1d0>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d027      	beq.n	8002eb8 <HAL_DMA_IRQHandler+0x194>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a22      	ldr	r2, [pc, #136]	; (8002ef8 <HAL_DMA_IRQHandler+0x1d4>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d022      	beq.n	8002eb8 <HAL_DMA_IRQHandler+0x194>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a21      	ldr	r2, [pc, #132]	; (8002efc <HAL_DMA_IRQHandler+0x1d8>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d01d      	beq.n	8002eb8 <HAL_DMA_IRQHandler+0x194>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a1f      	ldr	r2, [pc, #124]	; (8002f00 <HAL_DMA_IRQHandler+0x1dc>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d018      	beq.n	8002eb8 <HAL_DMA_IRQHandler+0x194>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a1e      	ldr	r2, [pc, #120]	; (8002f04 <HAL_DMA_IRQHandler+0x1e0>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d013      	beq.n	8002eb8 <HAL_DMA_IRQHandler+0x194>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a1c      	ldr	r2, [pc, #112]	; (8002f08 <HAL_DMA_IRQHandler+0x1e4>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d00e      	beq.n	8002eb8 <HAL_DMA_IRQHandler+0x194>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a1b      	ldr	r2, [pc, #108]	; (8002f0c <HAL_DMA_IRQHandler+0x1e8>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d009      	beq.n	8002eb8 <HAL_DMA_IRQHandler+0x194>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a19      	ldr	r2, [pc, #100]	; (8002f10 <HAL_DMA_IRQHandler+0x1ec>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d004      	beq.n	8002eb8 <HAL_DMA_IRQHandler+0x194>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a18      	ldr	r2, [pc, #96]	; (8002f14 <HAL_DMA_IRQHandler+0x1f0>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d12f      	bne.n	8002f18 <HAL_DMA_IRQHandler+0x1f4>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0304 	and.w	r3, r3, #4
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	bf14      	ite	ne
 8002ec6:	2301      	movne	r3, #1
 8002ec8:	2300      	moveq	r3, #0
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	e02e      	b.n	8002f2c <HAL_DMA_IRQHandler+0x208>
 8002ece:	bf00      	nop
 8002ed0:	24000000 	.word	0x24000000
 8002ed4:	1b4e81b5 	.word	0x1b4e81b5
 8002ed8:	40020010 	.word	0x40020010
 8002edc:	40020028 	.word	0x40020028
 8002ee0:	40020040 	.word	0x40020040
 8002ee4:	40020058 	.word	0x40020058
 8002ee8:	40020070 	.word	0x40020070
 8002eec:	40020088 	.word	0x40020088
 8002ef0:	400200a0 	.word	0x400200a0
 8002ef4:	400200b8 	.word	0x400200b8
 8002ef8:	40020410 	.word	0x40020410
 8002efc:	40020428 	.word	0x40020428
 8002f00:	40020440 	.word	0x40020440
 8002f04:	40020458 	.word	0x40020458
 8002f08:	40020470 	.word	0x40020470
 8002f0c:	40020488 	.word	0x40020488
 8002f10:	400204a0 	.word	0x400204a0
 8002f14:	400204b8 	.word	0x400204b8
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0308 	and.w	r3, r3, #8
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	bf14      	ite	ne
 8002f26:	2301      	movne	r3, #1
 8002f28:	2300      	moveq	r3, #0
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d015      	beq.n	8002f5c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f022 0204 	bic.w	r2, r2, #4
 8002f3e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f44:	f003 031f 	and.w	r3, r3, #31
 8002f48:	2208      	movs	r2, #8
 8002f4a:	409a      	lsls	r2, r3
 8002f4c:	6a3b      	ldr	r3, [r7, #32]
 8002f4e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f54:	f043 0201 	orr.w	r2, r3, #1
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f60:	f003 031f 	and.w	r3, r3, #31
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	fa22 f303 	lsr.w	r3, r2, r3
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d06e      	beq.n	8003050 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a69      	ldr	r2, [pc, #420]	; (800311c <HAL_DMA_IRQHandler+0x3f8>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d04a      	beq.n	8003012 <HAL_DMA_IRQHandler+0x2ee>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a67      	ldr	r2, [pc, #412]	; (8003120 <HAL_DMA_IRQHandler+0x3fc>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d045      	beq.n	8003012 <HAL_DMA_IRQHandler+0x2ee>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a66      	ldr	r2, [pc, #408]	; (8003124 <HAL_DMA_IRQHandler+0x400>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d040      	beq.n	8003012 <HAL_DMA_IRQHandler+0x2ee>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a64      	ldr	r2, [pc, #400]	; (8003128 <HAL_DMA_IRQHandler+0x404>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d03b      	beq.n	8003012 <HAL_DMA_IRQHandler+0x2ee>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a63      	ldr	r2, [pc, #396]	; (800312c <HAL_DMA_IRQHandler+0x408>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d036      	beq.n	8003012 <HAL_DMA_IRQHandler+0x2ee>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a61      	ldr	r2, [pc, #388]	; (8003130 <HAL_DMA_IRQHandler+0x40c>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d031      	beq.n	8003012 <HAL_DMA_IRQHandler+0x2ee>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a60      	ldr	r2, [pc, #384]	; (8003134 <HAL_DMA_IRQHandler+0x410>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d02c      	beq.n	8003012 <HAL_DMA_IRQHandler+0x2ee>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a5e      	ldr	r2, [pc, #376]	; (8003138 <HAL_DMA_IRQHandler+0x414>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d027      	beq.n	8003012 <HAL_DMA_IRQHandler+0x2ee>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a5d      	ldr	r2, [pc, #372]	; (800313c <HAL_DMA_IRQHandler+0x418>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d022      	beq.n	8003012 <HAL_DMA_IRQHandler+0x2ee>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a5b      	ldr	r2, [pc, #364]	; (8003140 <HAL_DMA_IRQHandler+0x41c>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d01d      	beq.n	8003012 <HAL_DMA_IRQHandler+0x2ee>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a5a      	ldr	r2, [pc, #360]	; (8003144 <HAL_DMA_IRQHandler+0x420>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d018      	beq.n	8003012 <HAL_DMA_IRQHandler+0x2ee>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a58      	ldr	r2, [pc, #352]	; (8003148 <HAL_DMA_IRQHandler+0x424>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d013      	beq.n	8003012 <HAL_DMA_IRQHandler+0x2ee>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a57      	ldr	r2, [pc, #348]	; (800314c <HAL_DMA_IRQHandler+0x428>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d00e      	beq.n	8003012 <HAL_DMA_IRQHandler+0x2ee>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a55      	ldr	r2, [pc, #340]	; (8003150 <HAL_DMA_IRQHandler+0x42c>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d009      	beq.n	8003012 <HAL_DMA_IRQHandler+0x2ee>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a54      	ldr	r2, [pc, #336]	; (8003154 <HAL_DMA_IRQHandler+0x430>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d004      	beq.n	8003012 <HAL_DMA_IRQHandler+0x2ee>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a52      	ldr	r2, [pc, #328]	; (8003158 <HAL_DMA_IRQHandler+0x434>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d10a      	bne.n	8003028 <HAL_DMA_IRQHandler+0x304>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	695b      	ldr	r3, [r3, #20]
 8003018:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800301c:	2b00      	cmp	r3, #0
 800301e:	bf14      	ite	ne
 8003020:	2301      	movne	r3, #1
 8003022:	2300      	moveq	r3, #0
 8003024:	b2db      	uxtb	r3, r3
 8003026:	e003      	b.n	8003030 <HAL_DMA_IRQHandler+0x30c>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2300      	movs	r3, #0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d00d      	beq.n	8003050 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003038:	f003 031f 	and.w	r3, r3, #31
 800303c:	2201      	movs	r2, #1
 800303e:	409a      	lsls	r2, r3
 8003040:	6a3b      	ldr	r3, [r7, #32]
 8003042:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003048:	f043 0202 	orr.w	r2, r3, #2
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003054:	f003 031f 	and.w	r3, r3, #31
 8003058:	2204      	movs	r2, #4
 800305a:	409a      	lsls	r2, r3
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	4013      	ands	r3, r2
 8003060:	2b00      	cmp	r3, #0
 8003062:	f000 808f 	beq.w	8003184 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a2c      	ldr	r2, [pc, #176]	; (800311c <HAL_DMA_IRQHandler+0x3f8>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d04a      	beq.n	8003106 <HAL_DMA_IRQHandler+0x3e2>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a2a      	ldr	r2, [pc, #168]	; (8003120 <HAL_DMA_IRQHandler+0x3fc>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d045      	beq.n	8003106 <HAL_DMA_IRQHandler+0x3e2>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a29      	ldr	r2, [pc, #164]	; (8003124 <HAL_DMA_IRQHandler+0x400>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d040      	beq.n	8003106 <HAL_DMA_IRQHandler+0x3e2>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a27      	ldr	r2, [pc, #156]	; (8003128 <HAL_DMA_IRQHandler+0x404>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d03b      	beq.n	8003106 <HAL_DMA_IRQHandler+0x3e2>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a26      	ldr	r2, [pc, #152]	; (800312c <HAL_DMA_IRQHandler+0x408>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d036      	beq.n	8003106 <HAL_DMA_IRQHandler+0x3e2>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a24      	ldr	r2, [pc, #144]	; (8003130 <HAL_DMA_IRQHandler+0x40c>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d031      	beq.n	8003106 <HAL_DMA_IRQHandler+0x3e2>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a23      	ldr	r2, [pc, #140]	; (8003134 <HAL_DMA_IRQHandler+0x410>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d02c      	beq.n	8003106 <HAL_DMA_IRQHandler+0x3e2>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a21      	ldr	r2, [pc, #132]	; (8003138 <HAL_DMA_IRQHandler+0x414>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d027      	beq.n	8003106 <HAL_DMA_IRQHandler+0x3e2>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a20      	ldr	r2, [pc, #128]	; (800313c <HAL_DMA_IRQHandler+0x418>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d022      	beq.n	8003106 <HAL_DMA_IRQHandler+0x3e2>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a1e      	ldr	r2, [pc, #120]	; (8003140 <HAL_DMA_IRQHandler+0x41c>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d01d      	beq.n	8003106 <HAL_DMA_IRQHandler+0x3e2>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a1d      	ldr	r2, [pc, #116]	; (8003144 <HAL_DMA_IRQHandler+0x420>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d018      	beq.n	8003106 <HAL_DMA_IRQHandler+0x3e2>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a1b      	ldr	r2, [pc, #108]	; (8003148 <HAL_DMA_IRQHandler+0x424>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d013      	beq.n	8003106 <HAL_DMA_IRQHandler+0x3e2>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a1a      	ldr	r2, [pc, #104]	; (800314c <HAL_DMA_IRQHandler+0x428>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d00e      	beq.n	8003106 <HAL_DMA_IRQHandler+0x3e2>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a18      	ldr	r2, [pc, #96]	; (8003150 <HAL_DMA_IRQHandler+0x42c>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d009      	beq.n	8003106 <HAL_DMA_IRQHandler+0x3e2>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a17      	ldr	r2, [pc, #92]	; (8003154 <HAL_DMA_IRQHandler+0x430>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d004      	beq.n	8003106 <HAL_DMA_IRQHandler+0x3e2>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a15      	ldr	r2, [pc, #84]	; (8003158 <HAL_DMA_IRQHandler+0x434>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d12a      	bne.n	800315c <HAL_DMA_IRQHandler+0x438>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0302 	and.w	r3, r3, #2
 8003110:	2b00      	cmp	r3, #0
 8003112:	bf14      	ite	ne
 8003114:	2301      	movne	r3, #1
 8003116:	2300      	moveq	r3, #0
 8003118:	b2db      	uxtb	r3, r3
 800311a:	e023      	b.n	8003164 <HAL_DMA_IRQHandler+0x440>
 800311c:	40020010 	.word	0x40020010
 8003120:	40020028 	.word	0x40020028
 8003124:	40020040 	.word	0x40020040
 8003128:	40020058 	.word	0x40020058
 800312c:	40020070 	.word	0x40020070
 8003130:	40020088 	.word	0x40020088
 8003134:	400200a0 	.word	0x400200a0
 8003138:	400200b8 	.word	0x400200b8
 800313c:	40020410 	.word	0x40020410
 8003140:	40020428 	.word	0x40020428
 8003144:	40020440 	.word	0x40020440
 8003148:	40020458 	.word	0x40020458
 800314c:	40020470 	.word	0x40020470
 8003150:	40020488 	.word	0x40020488
 8003154:	400204a0 	.word	0x400204a0
 8003158:	400204b8 	.word	0x400204b8
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2300      	movs	r3, #0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d00d      	beq.n	8003184 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800316c:	f003 031f 	and.w	r3, r3, #31
 8003170:	2204      	movs	r2, #4
 8003172:	409a      	lsls	r2, r3
 8003174:	6a3b      	ldr	r3, [r7, #32]
 8003176:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800317c:	f043 0204 	orr.w	r2, r3, #4
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003188:	f003 031f 	and.w	r3, r3, #31
 800318c:	2210      	movs	r2, #16
 800318e:	409a      	lsls	r2, r3
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	4013      	ands	r3, r2
 8003194:	2b00      	cmp	r3, #0
 8003196:	f000 80a6 	beq.w	80032e6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a85      	ldr	r2, [pc, #532]	; (80033b4 <HAL_DMA_IRQHandler+0x690>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d04a      	beq.n	800323a <HAL_DMA_IRQHandler+0x516>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a83      	ldr	r2, [pc, #524]	; (80033b8 <HAL_DMA_IRQHandler+0x694>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d045      	beq.n	800323a <HAL_DMA_IRQHandler+0x516>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a82      	ldr	r2, [pc, #520]	; (80033bc <HAL_DMA_IRQHandler+0x698>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d040      	beq.n	800323a <HAL_DMA_IRQHandler+0x516>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a80      	ldr	r2, [pc, #512]	; (80033c0 <HAL_DMA_IRQHandler+0x69c>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d03b      	beq.n	800323a <HAL_DMA_IRQHandler+0x516>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a7f      	ldr	r2, [pc, #508]	; (80033c4 <HAL_DMA_IRQHandler+0x6a0>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d036      	beq.n	800323a <HAL_DMA_IRQHandler+0x516>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a7d      	ldr	r2, [pc, #500]	; (80033c8 <HAL_DMA_IRQHandler+0x6a4>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d031      	beq.n	800323a <HAL_DMA_IRQHandler+0x516>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a7c      	ldr	r2, [pc, #496]	; (80033cc <HAL_DMA_IRQHandler+0x6a8>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d02c      	beq.n	800323a <HAL_DMA_IRQHandler+0x516>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a7a      	ldr	r2, [pc, #488]	; (80033d0 <HAL_DMA_IRQHandler+0x6ac>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d027      	beq.n	800323a <HAL_DMA_IRQHandler+0x516>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a79      	ldr	r2, [pc, #484]	; (80033d4 <HAL_DMA_IRQHandler+0x6b0>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d022      	beq.n	800323a <HAL_DMA_IRQHandler+0x516>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a77      	ldr	r2, [pc, #476]	; (80033d8 <HAL_DMA_IRQHandler+0x6b4>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d01d      	beq.n	800323a <HAL_DMA_IRQHandler+0x516>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a76      	ldr	r2, [pc, #472]	; (80033dc <HAL_DMA_IRQHandler+0x6b8>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d018      	beq.n	800323a <HAL_DMA_IRQHandler+0x516>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a74      	ldr	r2, [pc, #464]	; (80033e0 <HAL_DMA_IRQHandler+0x6bc>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d013      	beq.n	800323a <HAL_DMA_IRQHandler+0x516>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a73      	ldr	r2, [pc, #460]	; (80033e4 <HAL_DMA_IRQHandler+0x6c0>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d00e      	beq.n	800323a <HAL_DMA_IRQHandler+0x516>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a71      	ldr	r2, [pc, #452]	; (80033e8 <HAL_DMA_IRQHandler+0x6c4>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d009      	beq.n	800323a <HAL_DMA_IRQHandler+0x516>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a70      	ldr	r2, [pc, #448]	; (80033ec <HAL_DMA_IRQHandler+0x6c8>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d004      	beq.n	800323a <HAL_DMA_IRQHandler+0x516>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a6e      	ldr	r2, [pc, #440]	; (80033f0 <HAL_DMA_IRQHandler+0x6cc>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d10a      	bne.n	8003250 <HAL_DMA_IRQHandler+0x52c>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0308 	and.w	r3, r3, #8
 8003244:	2b00      	cmp	r3, #0
 8003246:	bf14      	ite	ne
 8003248:	2301      	movne	r3, #1
 800324a:	2300      	moveq	r3, #0
 800324c:	b2db      	uxtb	r3, r3
 800324e:	e009      	b.n	8003264 <HAL_DMA_IRQHandler+0x540>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0304 	and.w	r3, r3, #4
 800325a:	2b00      	cmp	r3, #0
 800325c:	bf14      	ite	ne
 800325e:	2301      	movne	r3, #1
 8003260:	2300      	moveq	r3, #0
 8003262:	b2db      	uxtb	r3, r3
 8003264:	2b00      	cmp	r3, #0
 8003266:	d03e      	beq.n	80032e6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800326c:	f003 031f 	and.w	r3, r3, #31
 8003270:	2210      	movs	r2, #16
 8003272:	409a      	lsls	r2, r3
 8003274:	6a3b      	ldr	r3, [r7, #32]
 8003276:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d018      	beq.n	80032b8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d108      	bne.n	80032a6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003298:	2b00      	cmp	r3, #0
 800329a:	d024      	beq.n	80032e6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	4798      	blx	r3
 80032a4:	e01f      	b.n	80032e6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d01b      	beq.n	80032e6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	4798      	blx	r3
 80032b6:	e016      	b.n	80032e6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d107      	bne.n	80032d6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f022 0208 	bic.w	r2, r2, #8
 80032d4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d003      	beq.n	80032e6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ea:	f003 031f 	and.w	r3, r3, #31
 80032ee:	2220      	movs	r2, #32
 80032f0:	409a      	lsls	r2, r3
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	4013      	ands	r3, r2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	f000 8110 	beq.w	800351c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a2c      	ldr	r2, [pc, #176]	; (80033b4 <HAL_DMA_IRQHandler+0x690>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d04a      	beq.n	800339c <HAL_DMA_IRQHandler+0x678>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a2b      	ldr	r2, [pc, #172]	; (80033b8 <HAL_DMA_IRQHandler+0x694>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d045      	beq.n	800339c <HAL_DMA_IRQHandler+0x678>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a29      	ldr	r2, [pc, #164]	; (80033bc <HAL_DMA_IRQHandler+0x698>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d040      	beq.n	800339c <HAL_DMA_IRQHandler+0x678>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a28      	ldr	r2, [pc, #160]	; (80033c0 <HAL_DMA_IRQHandler+0x69c>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d03b      	beq.n	800339c <HAL_DMA_IRQHandler+0x678>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a26      	ldr	r2, [pc, #152]	; (80033c4 <HAL_DMA_IRQHandler+0x6a0>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d036      	beq.n	800339c <HAL_DMA_IRQHandler+0x678>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a25      	ldr	r2, [pc, #148]	; (80033c8 <HAL_DMA_IRQHandler+0x6a4>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d031      	beq.n	800339c <HAL_DMA_IRQHandler+0x678>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a23      	ldr	r2, [pc, #140]	; (80033cc <HAL_DMA_IRQHandler+0x6a8>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d02c      	beq.n	800339c <HAL_DMA_IRQHandler+0x678>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a22      	ldr	r2, [pc, #136]	; (80033d0 <HAL_DMA_IRQHandler+0x6ac>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d027      	beq.n	800339c <HAL_DMA_IRQHandler+0x678>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a20      	ldr	r2, [pc, #128]	; (80033d4 <HAL_DMA_IRQHandler+0x6b0>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d022      	beq.n	800339c <HAL_DMA_IRQHandler+0x678>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a1f      	ldr	r2, [pc, #124]	; (80033d8 <HAL_DMA_IRQHandler+0x6b4>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d01d      	beq.n	800339c <HAL_DMA_IRQHandler+0x678>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a1d      	ldr	r2, [pc, #116]	; (80033dc <HAL_DMA_IRQHandler+0x6b8>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d018      	beq.n	800339c <HAL_DMA_IRQHandler+0x678>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a1c      	ldr	r2, [pc, #112]	; (80033e0 <HAL_DMA_IRQHandler+0x6bc>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d013      	beq.n	800339c <HAL_DMA_IRQHandler+0x678>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a1a      	ldr	r2, [pc, #104]	; (80033e4 <HAL_DMA_IRQHandler+0x6c0>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d00e      	beq.n	800339c <HAL_DMA_IRQHandler+0x678>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a19      	ldr	r2, [pc, #100]	; (80033e8 <HAL_DMA_IRQHandler+0x6c4>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d009      	beq.n	800339c <HAL_DMA_IRQHandler+0x678>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a17      	ldr	r2, [pc, #92]	; (80033ec <HAL_DMA_IRQHandler+0x6c8>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d004      	beq.n	800339c <HAL_DMA_IRQHandler+0x678>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a16      	ldr	r2, [pc, #88]	; (80033f0 <HAL_DMA_IRQHandler+0x6cc>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d12b      	bne.n	80033f4 <HAL_DMA_IRQHandler+0x6d0>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0310 	and.w	r3, r3, #16
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	bf14      	ite	ne
 80033aa:	2301      	movne	r3, #1
 80033ac:	2300      	moveq	r3, #0
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	e02a      	b.n	8003408 <HAL_DMA_IRQHandler+0x6e4>
 80033b2:	bf00      	nop
 80033b4:	40020010 	.word	0x40020010
 80033b8:	40020028 	.word	0x40020028
 80033bc:	40020040 	.word	0x40020040
 80033c0:	40020058 	.word	0x40020058
 80033c4:	40020070 	.word	0x40020070
 80033c8:	40020088 	.word	0x40020088
 80033cc:	400200a0 	.word	0x400200a0
 80033d0:	400200b8 	.word	0x400200b8
 80033d4:	40020410 	.word	0x40020410
 80033d8:	40020428 	.word	0x40020428
 80033dc:	40020440 	.word	0x40020440
 80033e0:	40020458 	.word	0x40020458
 80033e4:	40020470 	.word	0x40020470
 80033e8:	40020488 	.word	0x40020488
 80033ec:	400204a0 	.word	0x400204a0
 80033f0:	400204b8 	.word	0x400204b8
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0302 	and.w	r3, r3, #2
 80033fe:	2b00      	cmp	r3, #0
 8003400:	bf14      	ite	ne
 8003402:	2301      	movne	r3, #1
 8003404:	2300      	moveq	r3, #0
 8003406:	b2db      	uxtb	r3, r3
 8003408:	2b00      	cmp	r3, #0
 800340a:	f000 8087 	beq.w	800351c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003412:	f003 031f 	and.w	r3, r3, #31
 8003416:	2220      	movs	r2, #32
 8003418:	409a      	lsls	r2, r3
 800341a:	6a3b      	ldr	r3, [r7, #32]
 800341c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b04      	cmp	r3, #4
 8003428:	d139      	bne.n	800349e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f022 0216 	bic.w	r2, r2, #22
 8003438:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	695a      	ldr	r2, [r3, #20]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003448:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344e:	2b00      	cmp	r3, #0
 8003450:	d103      	bne.n	800345a <HAL_DMA_IRQHandler+0x736>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003456:	2b00      	cmp	r3, #0
 8003458:	d007      	beq.n	800346a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f022 0208 	bic.w	r2, r2, #8
 8003468:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800346e:	f003 031f 	and.w	r3, r3, #31
 8003472:	223f      	movs	r2, #63	; 0x3f
 8003474:	409a      	lsls	r2, r3
 8003476:	6a3b      	ldr	r3, [r7, #32]
 8003478:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2201      	movs	r2, #1
 8003486:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800348e:	2b00      	cmp	r3, #0
 8003490:	f000 834a 	beq.w	8003b28 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	4798      	blx	r3
          }
          return;
 800349c:	e344      	b.n	8003b28 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d018      	beq.n	80034de <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d108      	bne.n	80034cc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d02c      	beq.n	800351c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	4798      	blx	r3
 80034ca:	e027      	b.n	800351c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d023      	beq.n	800351c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	4798      	blx	r3
 80034dc:	e01e      	b.n	800351c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d10f      	bne.n	800350c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f022 0210 	bic.w	r2, r2, #16
 80034fa:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003510:	2b00      	cmp	r3, #0
 8003512:	d003      	beq.n	800351c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003520:	2b00      	cmp	r3, #0
 8003522:	f000 8306 	beq.w	8003b32 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800352a:	f003 0301 	and.w	r3, r3, #1
 800352e:	2b00      	cmp	r3, #0
 8003530:	f000 8088 	beq.w	8003644 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2204      	movs	r2, #4
 8003538:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a7a      	ldr	r2, [pc, #488]	; (800372c <HAL_DMA_IRQHandler+0xa08>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d04a      	beq.n	80035dc <HAL_DMA_IRQHandler+0x8b8>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a79      	ldr	r2, [pc, #484]	; (8003730 <HAL_DMA_IRQHandler+0xa0c>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d045      	beq.n	80035dc <HAL_DMA_IRQHandler+0x8b8>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a77      	ldr	r2, [pc, #476]	; (8003734 <HAL_DMA_IRQHandler+0xa10>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d040      	beq.n	80035dc <HAL_DMA_IRQHandler+0x8b8>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a76      	ldr	r2, [pc, #472]	; (8003738 <HAL_DMA_IRQHandler+0xa14>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d03b      	beq.n	80035dc <HAL_DMA_IRQHandler+0x8b8>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a74      	ldr	r2, [pc, #464]	; (800373c <HAL_DMA_IRQHandler+0xa18>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d036      	beq.n	80035dc <HAL_DMA_IRQHandler+0x8b8>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a73      	ldr	r2, [pc, #460]	; (8003740 <HAL_DMA_IRQHandler+0xa1c>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d031      	beq.n	80035dc <HAL_DMA_IRQHandler+0x8b8>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a71      	ldr	r2, [pc, #452]	; (8003744 <HAL_DMA_IRQHandler+0xa20>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d02c      	beq.n	80035dc <HAL_DMA_IRQHandler+0x8b8>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a70      	ldr	r2, [pc, #448]	; (8003748 <HAL_DMA_IRQHandler+0xa24>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d027      	beq.n	80035dc <HAL_DMA_IRQHandler+0x8b8>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a6e      	ldr	r2, [pc, #440]	; (800374c <HAL_DMA_IRQHandler+0xa28>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d022      	beq.n	80035dc <HAL_DMA_IRQHandler+0x8b8>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a6d      	ldr	r2, [pc, #436]	; (8003750 <HAL_DMA_IRQHandler+0xa2c>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d01d      	beq.n	80035dc <HAL_DMA_IRQHandler+0x8b8>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a6b      	ldr	r2, [pc, #428]	; (8003754 <HAL_DMA_IRQHandler+0xa30>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d018      	beq.n	80035dc <HAL_DMA_IRQHandler+0x8b8>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a6a      	ldr	r2, [pc, #424]	; (8003758 <HAL_DMA_IRQHandler+0xa34>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d013      	beq.n	80035dc <HAL_DMA_IRQHandler+0x8b8>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a68      	ldr	r2, [pc, #416]	; (800375c <HAL_DMA_IRQHandler+0xa38>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d00e      	beq.n	80035dc <HAL_DMA_IRQHandler+0x8b8>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a67      	ldr	r2, [pc, #412]	; (8003760 <HAL_DMA_IRQHandler+0xa3c>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d009      	beq.n	80035dc <HAL_DMA_IRQHandler+0x8b8>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a65      	ldr	r2, [pc, #404]	; (8003764 <HAL_DMA_IRQHandler+0xa40>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d004      	beq.n	80035dc <HAL_DMA_IRQHandler+0x8b8>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a64      	ldr	r2, [pc, #400]	; (8003768 <HAL_DMA_IRQHandler+0xa44>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d108      	bne.n	80035ee <HAL_DMA_IRQHandler+0x8ca>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f022 0201 	bic.w	r2, r2, #1
 80035ea:	601a      	str	r2, [r3, #0]
 80035ec:	e007      	b.n	80035fe <HAL_DMA_IRQHandler+0x8da>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f022 0201 	bic.w	r2, r2, #1
 80035fc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	3301      	adds	r3, #1
 8003602:	60fb      	str	r3, [r7, #12]
 8003604:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003606:	429a      	cmp	r2, r3
 8003608:	d307      	bcc.n	800361a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0301 	and.w	r3, r3, #1
 8003614:	2b00      	cmp	r3, #0
 8003616:	d1f2      	bne.n	80035fe <HAL_DMA_IRQHandler+0x8da>
 8003618:	e000      	b.n	800361c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800361a:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	2b00      	cmp	r3, #0
 8003630:	d004      	beq.n	800363c <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2203      	movs	r2, #3
 8003636:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800363a:	e003      	b.n	8003644 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003648:	2b00      	cmp	r3, #0
 800364a:	f000 8272 	beq.w	8003b32 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	4798      	blx	r3
 8003656:	e26c      	b.n	8003b32 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a43      	ldr	r2, [pc, #268]	; (800376c <HAL_DMA_IRQHandler+0xa48>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d022      	beq.n	80036a8 <HAL_DMA_IRQHandler+0x984>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a42      	ldr	r2, [pc, #264]	; (8003770 <HAL_DMA_IRQHandler+0xa4c>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d01d      	beq.n	80036a8 <HAL_DMA_IRQHandler+0x984>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a40      	ldr	r2, [pc, #256]	; (8003774 <HAL_DMA_IRQHandler+0xa50>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d018      	beq.n	80036a8 <HAL_DMA_IRQHandler+0x984>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a3f      	ldr	r2, [pc, #252]	; (8003778 <HAL_DMA_IRQHandler+0xa54>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d013      	beq.n	80036a8 <HAL_DMA_IRQHandler+0x984>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a3d      	ldr	r2, [pc, #244]	; (800377c <HAL_DMA_IRQHandler+0xa58>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d00e      	beq.n	80036a8 <HAL_DMA_IRQHandler+0x984>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a3c      	ldr	r2, [pc, #240]	; (8003780 <HAL_DMA_IRQHandler+0xa5c>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d009      	beq.n	80036a8 <HAL_DMA_IRQHandler+0x984>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a3a      	ldr	r2, [pc, #232]	; (8003784 <HAL_DMA_IRQHandler+0xa60>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d004      	beq.n	80036a8 <HAL_DMA_IRQHandler+0x984>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a39      	ldr	r2, [pc, #228]	; (8003788 <HAL_DMA_IRQHandler+0xa64>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d101      	bne.n	80036ac <HAL_DMA_IRQHandler+0x988>
 80036a8:	2301      	movs	r3, #1
 80036aa:	e000      	b.n	80036ae <HAL_DMA_IRQHandler+0x98a>
 80036ac:	2300      	movs	r3, #0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	f000 823f 	beq.w	8003b32 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036c0:	f003 031f 	and.w	r3, r3, #31
 80036c4:	2204      	movs	r2, #4
 80036c6:	409a      	lsls	r2, r3
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	4013      	ands	r3, r2
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	f000 80cd 	beq.w	800386c <HAL_DMA_IRQHandler+0xb48>
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	f003 0304 	and.w	r3, r3, #4
 80036d8:	2b00      	cmp	r3, #0
 80036da:	f000 80c7 	beq.w	800386c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036e2:	f003 031f 	and.w	r3, r3, #31
 80036e6:	2204      	movs	r2, #4
 80036e8:	409a      	lsls	r2, r3
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d049      	beq.n	800378c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d109      	bne.n	8003716 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003706:	2b00      	cmp	r3, #0
 8003708:	f000 8210 	beq.w	8003b2c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003714:	e20a      	b.n	8003b2c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371a:	2b00      	cmp	r3, #0
 800371c:	f000 8206 	beq.w	8003b2c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003728:	e200      	b.n	8003b2c <HAL_DMA_IRQHandler+0xe08>
 800372a:	bf00      	nop
 800372c:	40020010 	.word	0x40020010
 8003730:	40020028 	.word	0x40020028
 8003734:	40020040 	.word	0x40020040
 8003738:	40020058 	.word	0x40020058
 800373c:	40020070 	.word	0x40020070
 8003740:	40020088 	.word	0x40020088
 8003744:	400200a0 	.word	0x400200a0
 8003748:	400200b8 	.word	0x400200b8
 800374c:	40020410 	.word	0x40020410
 8003750:	40020428 	.word	0x40020428
 8003754:	40020440 	.word	0x40020440
 8003758:	40020458 	.word	0x40020458
 800375c:	40020470 	.word	0x40020470
 8003760:	40020488 	.word	0x40020488
 8003764:	400204a0 	.word	0x400204a0
 8003768:	400204b8 	.word	0x400204b8
 800376c:	58025408 	.word	0x58025408
 8003770:	5802541c 	.word	0x5802541c
 8003774:	58025430 	.word	0x58025430
 8003778:	58025444 	.word	0x58025444
 800377c:	58025458 	.word	0x58025458
 8003780:	5802546c 	.word	0x5802546c
 8003784:	58025480 	.word	0x58025480
 8003788:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	f003 0320 	and.w	r3, r3, #32
 8003792:	2b00      	cmp	r3, #0
 8003794:	d160      	bne.n	8003858 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a8c      	ldr	r2, [pc, #560]	; (80039cc <HAL_DMA_IRQHandler+0xca8>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d04a      	beq.n	8003836 <HAL_DMA_IRQHandler+0xb12>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a8a      	ldr	r2, [pc, #552]	; (80039d0 <HAL_DMA_IRQHandler+0xcac>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d045      	beq.n	8003836 <HAL_DMA_IRQHandler+0xb12>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a89      	ldr	r2, [pc, #548]	; (80039d4 <HAL_DMA_IRQHandler+0xcb0>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d040      	beq.n	8003836 <HAL_DMA_IRQHandler+0xb12>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a87      	ldr	r2, [pc, #540]	; (80039d8 <HAL_DMA_IRQHandler+0xcb4>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d03b      	beq.n	8003836 <HAL_DMA_IRQHandler+0xb12>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a86      	ldr	r2, [pc, #536]	; (80039dc <HAL_DMA_IRQHandler+0xcb8>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d036      	beq.n	8003836 <HAL_DMA_IRQHandler+0xb12>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a84      	ldr	r2, [pc, #528]	; (80039e0 <HAL_DMA_IRQHandler+0xcbc>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d031      	beq.n	8003836 <HAL_DMA_IRQHandler+0xb12>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a83      	ldr	r2, [pc, #524]	; (80039e4 <HAL_DMA_IRQHandler+0xcc0>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d02c      	beq.n	8003836 <HAL_DMA_IRQHandler+0xb12>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a81      	ldr	r2, [pc, #516]	; (80039e8 <HAL_DMA_IRQHandler+0xcc4>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d027      	beq.n	8003836 <HAL_DMA_IRQHandler+0xb12>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a80      	ldr	r2, [pc, #512]	; (80039ec <HAL_DMA_IRQHandler+0xcc8>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d022      	beq.n	8003836 <HAL_DMA_IRQHandler+0xb12>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a7e      	ldr	r2, [pc, #504]	; (80039f0 <HAL_DMA_IRQHandler+0xccc>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d01d      	beq.n	8003836 <HAL_DMA_IRQHandler+0xb12>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a7d      	ldr	r2, [pc, #500]	; (80039f4 <HAL_DMA_IRQHandler+0xcd0>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d018      	beq.n	8003836 <HAL_DMA_IRQHandler+0xb12>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a7b      	ldr	r2, [pc, #492]	; (80039f8 <HAL_DMA_IRQHandler+0xcd4>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d013      	beq.n	8003836 <HAL_DMA_IRQHandler+0xb12>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a7a      	ldr	r2, [pc, #488]	; (80039fc <HAL_DMA_IRQHandler+0xcd8>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d00e      	beq.n	8003836 <HAL_DMA_IRQHandler+0xb12>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a78      	ldr	r2, [pc, #480]	; (8003a00 <HAL_DMA_IRQHandler+0xcdc>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d009      	beq.n	8003836 <HAL_DMA_IRQHandler+0xb12>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a77      	ldr	r2, [pc, #476]	; (8003a04 <HAL_DMA_IRQHandler+0xce0>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d004      	beq.n	8003836 <HAL_DMA_IRQHandler+0xb12>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a75      	ldr	r2, [pc, #468]	; (8003a08 <HAL_DMA_IRQHandler+0xce4>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d108      	bne.n	8003848 <HAL_DMA_IRQHandler+0xb24>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f022 0208 	bic.w	r2, r2, #8
 8003844:	601a      	str	r2, [r3, #0]
 8003846:	e007      	b.n	8003858 <HAL_DMA_IRQHandler+0xb34>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f022 0204 	bic.w	r2, r2, #4
 8003856:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385c:	2b00      	cmp	r3, #0
 800385e:	f000 8165 	beq.w	8003b2c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800386a:	e15f      	b.n	8003b2c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003870:	f003 031f 	and.w	r3, r3, #31
 8003874:	2202      	movs	r2, #2
 8003876:	409a      	lsls	r2, r3
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	4013      	ands	r3, r2
 800387c:	2b00      	cmp	r3, #0
 800387e:	f000 80c5 	beq.w	8003a0c <HAL_DMA_IRQHandler+0xce8>
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	f003 0302 	and.w	r3, r3, #2
 8003888:	2b00      	cmp	r3, #0
 800388a:	f000 80bf 	beq.w	8003a0c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003892:	f003 031f 	and.w	r3, r3, #31
 8003896:	2202      	movs	r2, #2
 8003898:	409a      	lsls	r2, r3
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d018      	beq.n	80038da <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d109      	bne.n	80038c6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	f000 813a 	beq.w	8003b30 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80038c4:	e134      	b.n	8003b30 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	f000 8130 	beq.w	8003b30 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80038d8:	e12a      	b.n	8003b30 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	f003 0320 	and.w	r3, r3, #32
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d168      	bne.n	80039b6 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a38      	ldr	r2, [pc, #224]	; (80039cc <HAL_DMA_IRQHandler+0xca8>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d04a      	beq.n	8003984 <HAL_DMA_IRQHandler+0xc60>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a37      	ldr	r2, [pc, #220]	; (80039d0 <HAL_DMA_IRQHandler+0xcac>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d045      	beq.n	8003984 <HAL_DMA_IRQHandler+0xc60>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a35      	ldr	r2, [pc, #212]	; (80039d4 <HAL_DMA_IRQHandler+0xcb0>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d040      	beq.n	8003984 <HAL_DMA_IRQHandler+0xc60>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a34      	ldr	r2, [pc, #208]	; (80039d8 <HAL_DMA_IRQHandler+0xcb4>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d03b      	beq.n	8003984 <HAL_DMA_IRQHandler+0xc60>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a32      	ldr	r2, [pc, #200]	; (80039dc <HAL_DMA_IRQHandler+0xcb8>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d036      	beq.n	8003984 <HAL_DMA_IRQHandler+0xc60>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a31      	ldr	r2, [pc, #196]	; (80039e0 <HAL_DMA_IRQHandler+0xcbc>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d031      	beq.n	8003984 <HAL_DMA_IRQHandler+0xc60>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a2f      	ldr	r2, [pc, #188]	; (80039e4 <HAL_DMA_IRQHandler+0xcc0>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d02c      	beq.n	8003984 <HAL_DMA_IRQHandler+0xc60>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a2e      	ldr	r2, [pc, #184]	; (80039e8 <HAL_DMA_IRQHandler+0xcc4>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d027      	beq.n	8003984 <HAL_DMA_IRQHandler+0xc60>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a2c      	ldr	r2, [pc, #176]	; (80039ec <HAL_DMA_IRQHandler+0xcc8>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d022      	beq.n	8003984 <HAL_DMA_IRQHandler+0xc60>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a2b      	ldr	r2, [pc, #172]	; (80039f0 <HAL_DMA_IRQHandler+0xccc>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d01d      	beq.n	8003984 <HAL_DMA_IRQHandler+0xc60>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a29      	ldr	r2, [pc, #164]	; (80039f4 <HAL_DMA_IRQHandler+0xcd0>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d018      	beq.n	8003984 <HAL_DMA_IRQHandler+0xc60>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a28      	ldr	r2, [pc, #160]	; (80039f8 <HAL_DMA_IRQHandler+0xcd4>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d013      	beq.n	8003984 <HAL_DMA_IRQHandler+0xc60>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a26      	ldr	r2, [pc, #152]	; (80039fc <HAL_DMA_IRQHandler+0xcd8>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d00e      	beq.n	8003984 <HAL_DMA_IRQHandler+0xc60>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a25      	ldr	r2, [pc, #148]	; (8003a00 <HAL_DMA_IRQHandler+0xcdc>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d009      	beq.n	8003984 <HAL_DMA_IRQHandler+0xc60>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a23      	ldr	r2, [pc, #140]	; (8003a04 <HAL_DMA_IRQHandler+0xce0>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d004      	beq.n	8003984 <HAL_DMA_IRQHandler+0xc60>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a22      	ldr	r2, [pc, #136]	; (8003a08 <HAL_DMA_IRQHandler+0xce4>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d108      	bne.n	8003996 <HAL_DMA_IRQHandler+0xc72>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f022 0214 	bic.w	r2, r2, #20
 8003992:	601a      	str	r2, [r3, #0]
 8003994:	e007      	b.n	80039a6 <HAL_DMA_IRQHandler+0xc82>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f022 020a 	bic.w	r2, r2, #10
 80039a4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2201      	movs	r2, #1
 80039b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	f000 80b8 	beq.w	8003b30 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039c8:	e0b2      	b.n	8003b30 <HAL_DMA_IRQHandler+0xe0c>
 80039ca:	bf00      	nop
 80039cc:	40020010 	.word	0x40020010
 80039d0:	40020028 	.word	0x40020028
 80039d4:	40020040 	.word	0x40020040
 80039d8:	40020058 	.word	0x40020058
 80039dc:	40020070 	.word	0x40020070
 80039e0:	40020088 	.word	0x40020088
 80039e4:	400200a0 	.word	0x400200a0
 80039e8:	400200b8 	.word	0x400200b8
 80039ec:	40020410 	.word	0x40020410
 80039f0:	40020428 	.word	0x40020428
 80039f4:	40020440 	.word	0x40020440
 80039f8:	40020458 	.word	0x40020458
 80039fc:	40020470 	.word	0x40020470
 8003a00:	40020488 	.word	0x40020488
 8003a04:	400204a0 	.word	0x400204a0
 8003a08:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a10:	f003 031f 	and.w	r3, r3, #31
 8003a14:	2208      	movs	r2, #8
 8003a16:	409a      	lsls	r2, r3
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	f000 8088 	beq.w	8003b32 <HAL_DMA_IRQHandler+0xe0e>
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	f003 0308 	and.w	r3, r3, #8
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	f000 8082 	beq.w	8003b32 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a41      	ldr	r2, [pc, #260]	; (8003b38 <HAL_DMA_IRQHandler+0xe14>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d04a      	beq.n	8003ace <HAL_DMA_IRQHandler+0xdaa>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a3f      	ldr	r2, [pc, #252]	; (8003b3c <HAL_DMA_IRQHandler+0xe18>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d045      	beq.n	8003ace <HAL_DMA_IRQHandler+0xdaa>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a3e      	ldr	r2, [pc, #248]	; (8003b40 <HAL_DMA_IRQHandler+0xe1c>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d040      	beq.n	8003ace <HAL_DMA_IRQHandler+0xdaa>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a3c      	ldr	r2, [pc, #240]	; (8003b44 <HAL_DMA_IRQHandler+0xe20>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d03b      	beq.n	8003ace <HAL_DMA_IRQHandler+0xdaa>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a3b      	ldr	r2, [pc, #236]	; (8003b48 <HAL_DMA_IRQHandler+0xe24>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d036      	beq.n	8003ace <HAL_DMA_IRQHandler+0xdaa>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a39      	ldr	r2, [pc, #228]	; (8003b4c <HAL_DMA_IRQHandler+0xe28>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d031      	beq.n	8003ace <HAL_DMA_IRQHandler+0xdaa>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a38      	ldr	r2, [pc, #224]	; (8003b50 <HAL_DMA_IRQHandler+0xe2c>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d02c      	beq.n	8003ace <HAL_DMA_IRQHandler+0xdaa>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a36      	ldr	r2, [pc, #216]	; (8003b54 <HAL_DMA_IRQHandler+0xe30>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d027      	beq.n	8003ace <HAL_DMA_IRQHandler+0xdaa>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a35      	ldr	r2, [pc, #212]	; (8003b58 <HAL_DMA_IRQHandler+0xe34>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d022      	beq.n	8003ace <HAL_DMA_IRQHandler+0xdaa>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a33      	ldr	r2, [pc, #204]	; (8003b5c <HAL_DMA_IRQHandler+0xe38>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d01d      	beq.n	8003ace <HAL_DMA_IRQHandler+0xdaa>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a32      	ldr	r2, [pc, #200]	; (8003b60 <HAL_DMA_IRQHandler+0xe3c>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d018      	beq.n	8003ace <HAL_DMA_IRQHandler+0xdaa>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a30      	ldr	r2, [pc, #192]	; (8003b64 <HAL_DMA_IRQHandler+0xe40>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d013      	beq.n	8003ace <HAL_DMA_IRQHandler+0xdaa>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a2f      	ldr	r2, [pc, #188]	; (8003b68 <HAL_DMA_IRQHandler+0xe44>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d00e      	beq.n	8003ace <HAL_DMA_IRQHandler+0xdaa>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a2d      	ldr	r2, [pc, #180]	; (8003b6c <HAL_DMA_IRQHandler+0xe48>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d009      	beq.n	8003ace <HAL_DMA_IRQHandler+0xdaa>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a2c      	ldr	r2, [pc, #176]	; (8003b70 <HAL_DMA_IRQHandler+0xe4c>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d004      	beq.n	8003ace <HAL_DMA_IRQHandler+0xdaa>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a2a      	ldr	r2, [pc, #168]	; (8003b74 <HAL_DMA_IRQHandler+0xe50>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d108      	bne.n	8003ae0 <HAL_DMA_IRQHandler+0xdbc>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f022 021c 	bic.w	r2, r2, #28
 8003adc:	601a      	str	r2, [r3, #0]
 8003ade:	e007      	b.n	8003af0 <HAL_DMA_IRQHandler+0xdcc>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f022 020e 	bic.w	r2, r2, #14
 8003aee:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003af4:	f003 031f 	and.w	r3, r3, #31
 8003af8:	2201      	movs	r2, #1
 8003afa:	409a      	lsls	r2, r3
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2201      	movs	r2, #1
 8003b12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d009      	beq.n	8003b32 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	4798      	blx	r3
 8003b26:	e004      	b.n	8003b32 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003b28:	bf00      	nop
 8003b2a:	e002      	b.n	8003b32 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b2c:	bf00      	nop
 8003b2e:	e000      	b.n	8003b32 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b30:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003b32:	3728      	adds	r7, #40	; 0x28
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	40020010 	.word	0x40020010
 8003b3c:	40020028 	.word	0x40020028
 8003b40:	40020040 	.word	0x40020040
 8003b44:	40020058 	.word	0x40020058
 8003b48:	40020070 	.word	0x40020070
 8003b4c:	40020088 	.word	0x40020088
 8003b50:	400200a0 	.word	0x400200a0
 8003b54:	400200b8 	.word	0x400200b8
 8003b58:	40020410 	.word	0x40020410
 8003b5c:	40020428 	.word	0x40020428
 8003b60:	40020440 	.word	0x40020440
 8003b64:	40020458 	.word	0x40020458
 8003b68:	40020470 	.word	0x40020470
 8003b6c:	40020488 	.word	0x40020488
 8003b70:	400204a0 	.word	0x400204a0
 8003b74:	400204b8 	.word	0x400204b8

08003b78 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b087      	sub	sp, #28
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	607a      	str	r2, [r7, #4]
 8003b84:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b8a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b90:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a84      	ldr	r2, [pc, #528]	; (8003da8 <DMA_SetConfig+0x230>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d072      	beq.n	8003c82 <DMA_SetConfig+0x10a>
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a82      	ldr	r2, [pc, #520]	; (8003dac <DMA_SetConfig+0x234>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d06d      	beq.n	8003c82 <DMA_SetConfig+0x10a>
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a81      	ldr	r2, [pc, #516]	; (8003db0 <DMA_SetConfig+0x238>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d068      	beq.n	8003c82 <DMA_SetConfig+0x10a>
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a7f      	ldr	r2, [pc, #508]	; (8003db4 <DMA_SetConfig+0x23c>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d063      	beq.n	8003c82 <DMA_SetConfig+0x10a>
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a7e      	ldr	r2, [pc, #504]	; (8003db8 <DMA_SetConfig+0x240>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d05e      	beq.n	8003c82 <DMA_SetConfig+0x10a>
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a7c      	ldr	r2, [pc, #496]	; (8003dbc <DMA_SetConfig+0x244>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d059      	beq.n	8003c82 <DMA_SetConfig+0x10a>
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a7b      	ldr	r2, [pc, #492]	; (8003dc0 <DMA_SetConfig+0x248>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d054      	beq.n	8003c82 <DMA_SetConfig+0x10a>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a79      	ldr	r2, [pc, #484]	; (8003dc4 <DMA_SetConfig+0x24c>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d04f      	beq.n	8003c82 <DMA_SetConfig+0x10a>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a78      	ldr	r2, [pc, #480]	; (8003dc8 <DMA_SetConfig+0x250>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d04a      	beq.n	8003c82 <DMA_SetConfig+0x10a>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a76      	ldr	r2, [pc, #472]	; (8003dcc <DMA_SetConfig+0x254>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d045      	beq.n	8003c82 <DMA_SetConfig+0x10a>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a75      	ldr	r2, [pc, #468]	; (8003dd0 <DMA_SetConfig+0x258>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d040      	beq.n	8003c82 <DMA_SetConfig+0x10a>
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a73      	ldr	r2, [pc, #460]	; (8003dd4 <DMA_SetConfig+0x25c>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d03b      	beq.n	8003c82 <DMA_SetConfig+0x10a>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a72      	ldr	r2, [pc, #456]	; (8003dd8 <DMA_SetConfig+0x260>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d036      	beq.n	8003c82 <DMA_SetConfig+0x10a>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a70      	ldr	r2, [pc, #448]	; (8003ddc <DMA_SetConfig+0x264>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d031      	beq.n	8003c82 <DMA_SetConfig+0x10a>
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a6f      	ldr	r2, [pc, #444]	; (8003de0 <DMA_SetConfig+0x268>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d02c      	beq.n	8003c82 <DMA_SetConfig+0x10a>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a6d      	ldr	r2, [pc, #436]	; (8003de4 <DMA_SetConfig+0x26c>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d027      	beq.n	8003c82 <DMA_SetConfig+0x10a>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a6c      	ldr	r2, [pc, #432]	; (8003de8 <DMA_SetConfig+0x270>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d022      	beq.n	8003c82 <DMA_SetConfig+0x10a>
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a6a      	ldr	r2, [pc, #424]	; (8003dec <DMA_SetConfig+0x274>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d01d      	beq.n	8003c82 <DMA_SetConfig+0x10a>
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a69      	ldr	r2, [pc, #420]	; (8003df0 <DMA_SetConfig+0x278>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d018      	beq.n	8003c82 <DMA_SetConfig+0x10a>
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a67      	ldr	r2, [pc, #412]	; (8003df4 <DMA_SetConfig+0x27c>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d013      	beq.n	8003c82 <DMA_SetConfig+0x10a>
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a66      	ldr	r2, [pc, #408]	; (8003df8 <DMA_SetConfig+0x280>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d00e      	beq.n	8003c82 <DMA_SetConfig+0x10a>
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a64      	ldr	r2, [pc, #400]	; (8003dfc <DMA_SetConfig+0x284>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d009      	beq.n	8003c82 <DMA_SetConfig+0x10a>
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a63      	ldr	r2, [pc, #396]	; (8003e00 <DMA_SetConfig+0x288>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d004      	beq.n	8003c82 <DMA_SetConfig+0x10a>
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a61      	ldr	r2, [pc, #388]	; (8003e04 <DMA_SetConfig+0x28c>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d101      	bne.n	8003c86 <DMA_SetConfig+0x10e>
 8003c82:	2301      	movs	r3, #1
 8003c84:	e000      	b.n	8003c88 <DMA_SetConfig+0x110>
 8003c86:	2300      	movs	r3, #0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00d      	beq.n	8003ca8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c90:	68fa      	ldr	r2, [r7, #12]
 8003c92:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003c94:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d004      	beq.n	8003ca8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003ca6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a3e      	ldr	r2, [pc, #248]	; (8003da8 <DMA_SetConfig+0x230>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d04a      	beq.n	8003d48 <DMA_SetConfig+0x1d0>
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a3d      	ldr	r2, [pc, #244]	; (8003dac <DMA_SetConfig+0x234>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d045      	beq.n	8003d48 <DMA_SetConfig+0x1d0>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a3b      	ldr	r2, [pc, #236]	; (8003db0 <DMA_SetConfig+0x238>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d040      	beq.n	8003d48 <DMA_SetConfig+0x1d0>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a3a      	ldr	r2, [pc, #232]	; (8003db4 <DMA_SetConfig+0x23c>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d03b      	beq.n	8003d48 <DMA_SetConfig+0x1d0>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a38      	ldr	r2, [pc, #224]	; (8003db8 <DMA_SetConfig+0x240>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d036      	beq.n	8003d48 <DMA_SetConfig+0x1d0>
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a37      	ldr	r2, [pc, #220]	; (8003dbc <DMA_SetConfig+0x244>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d031      	beq.n	8003d48 <DMA_SetConfig+0x1d0>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a35      	ldr	r2, [pc, #212]	; (8003dc0 <DMA_SetConfig+0x248>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d02c      	beq.n	8003d48 <DMA_SetConfig+0x1d0>
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a34      	ldr	r2, [pc, #208]	; (8003dc4 <DMA_SetConfig+0x24c>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d027      	beq.n	8003d48 <DMA_SetConfig+0x1d0>
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a32      	ldr	r2, [pc, #200]	; (8003dc8 <DMA_SetConfig+0x250>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d022      	beq.n	8003d48 <DMA_SetConfig+0x1d0>
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a31      	ldr	r2, [pc, #196]	; (8003dcc <DMA_SetConfig+0x254>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d01d      	beq.n	8003d48 <DMA_SetConfig+0x1d0>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a2f      	ldr	r2, [pc, #188]	; (8003dd0 <DMA_SetConfig+0x258>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d018      	beq.n	8003d48 <DMA_SetConfig+0x1d0>
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a2e      	ldr	r2, [pc, #184]	; (8003dd4 <DMA_SetConfig+0x25c>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d013      	beq.n	8003d48 <DMA_SetConfig+0x1d0>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a2c      	ldr	r2, [pc, #176]	; (8003dd8 <DMA_SetConfig+0x260>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d00e      	beq.n	8003d48 <DMA_SetConfig+0x1d0>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a2b      	ldr	r2, [pc, #172]	; (8003ddc <DMA_SetConfig+0x264>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d009      	beq.n	8003d48 <DMA_SetConfig+0x1d0>
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a29      	ldr	r2, [pc, #164]	; (8003de0 <DMA_SetConfig+0x268>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d004      	beq.n	8003d48 <DMA_SetConfig+0x1d0>
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a28      	ldr	r2, [pc, #160]	; (8003de4 <DMA_SetConfig+0x26c>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d101      	bne.n	8003d4c <DMA_SetConfig+0x1d4>
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e000      	b.n	8003d4e <DMA_SetConfig+0x1d6>
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d05a      	beq.n	8003e08 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d56:	f003 031f 	and.w	r3, r3, #31
 8003d5a:	223f      	movs	r2, #63	; 0x3f
 8003d5c:	409a      	lsls	r2, r3
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003d70:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	683a      	ldr	r2, [r7, #0]
 8003d78:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	2b40      	cmp	r3, #64	; 0x40
 8003d80:	d108      	bne.n	8003d94 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68ba      	ldr	r2, [r7, #8]
 8003d90:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003d92:	e087      	b.n	8003ea4 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68ba      	ldr	r2, [r7, #8]
 8003d9a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	60da      	str	r2, [r3, #12]
}
 8003da4:	e07e      	b.n	8003ea4 <DMA_SetConfig+0x32c>
 8003da6:	bf00      	nop
 8003da8:	40020010 	.word	0x40020010
 8003dac:	40020028 	.word	0x40020028
 8003db0:	40020040 	.word	0x40020040
 8003db4:	40020058 	.word	0x40020058
 8003db8:	40020070 	.word	0x40020070
 8003dbc:	40020088 	.word	0x40020088
 8003dc0:	400200a0 	.word	0x400200a0
 8003dc4:	400200b8 	.word	0x400200b8
 8003dc8:	40020410 	.word	0x40020410
 8003dcc:	40020428 	.word	0x40020428
 8003dd0:	40020440 	.word	0x40020440
 8003dd4:	40020458 	.word	0x40020458
 8003dd8:	40020470 	.word	0x40020470
 8003ddc:	40020488 	.word	0x40020488
 8003de0:	400204a0 	.word	0x400204a0
 8003de4:	400204b8 	.word	0x400204b8
 8003de8:	58025408 	.word	0x58025408
 8003dec:	5802541c 	.word	0x5802541c
 8003df0:	58025430 	.word	0x58025430
 8003df4:	58025444 	.word	0x58025444
 8003df8:	58025458 	.word	0x58025458
 8003dfc:	5802546c 	.word	0x5802546c
 8003e00:	58025480 	.word	0x58025480
 8003e04:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a28      	ldr	r2, [pc, #160]	; (8003eb0 <DMA_SetConfig+0x338>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d022      	beq.n	8003e58 <DMA_SetConfig+0x2e0>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a27      	ldr	r2, [pc, #156]	; (8003eb4 <DMA_SetConfig+0x33c>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d01d      	beq.n	8003e58 <DMA_SetConfig+0x2e0>
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a25      	ldr	r2, [pc, #148]	; (8003eb8 <DMA_SetConfig+0x340>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d018      	beq.n	8003e58 <DMA_SetConfig+0x2e0>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a24      	ldr	r2, [pc, #144]	; (8003ebc <DMA_SetConfig+0x344>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d013      	beq.n	8003e58 <DMA_SetConfig+0x2e0>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a22      	ldr	r2, [pc, #136]	; (8003ec0 <DMA_SetConfig+0x348>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d00e      	beq.n	8003e58 <DMA_SetConfig+0x2e0>
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a21      	ldr	r2, [pc, #132]	; (8003ec4 <DMA_SetConfig+0x34c>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d009      	beq.n	8003e58 <DMA_SetConfig+0x2e0>
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a1f      	ldr	r2, [pc, #124]	; (8003ec8 <DMA_SetConfig+0x350>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d004      	beq.n	8003e58 <DMA_SetConfig+0x2e0>
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a1e      	ldr	r2, [pc, #120]	; (8003ecc <DMA_SetConfig+0x354>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d101      	bne.n	8003e5c <DMA_SetConfig+0x2e4>
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e000      	b.n	8003e5e <DMA_SetConfig+0x2e6>
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d020      	beq.n	8003ea4 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e66:	f003 031f 	and.w	r3, r3, #31
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	409a      	lsls	r2, r3
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	683a      	ldr	r2, [r7, #0]
 8003e78:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	2b40      	cmp	r3, #64	; 0x40
 8003e80:	d108      	bne.n	8003e94 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68ba      	ldr	r2, [r7, #8]
 8003e90:	60da      	str	r2, [r3, #12]
}
 8003e92:	e007      	b.n	8003ea4 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	68ba      	ldr	r2, [r7, #8]
 8003e9a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	60da      	str	r2, [r3, #12]
}
 8003ea4:	bf00      	nop
 8003ea6:	371c      	adds	r7, #28
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr
 8003eb0:	58025408 	.word	0x58025408
 8003eb4:	5802541c 	.word	0x5802541c
 8003eb8:	58025430 	.word	0x58025430
 8003ebc:	58025444 	.word	0x58025444
 8003ec0:	58025458 	.word	0x58025458
 8003ec4:	5802546c 	.word	0x5802546c
 8003ec8:	58025480 	.word	0x58025480
 8003ecc:	58025494 	.word	0x58025494

08003ed0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b085      	sub	sp, #20
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a42      	ldr	r2, [pc, #264]	; (8003fe8 <DMA_CalcBaseAndBitshift+0x118>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d04a      	beq.n	8003f78 <DMA_CalcBaseAndBitshift+0xa8>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a41      	ldr	r2, [pc, #260]	; (8003fec <DMA_CalcBaseAndBitshift+0x11c>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d045      	beq.n	8003f78 <DMA_CalcBaseAndBitshift+0xa8>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a3f      	ldr	r2, [pc, #252]	; (8003ff0 <DMA_CalcBaseAndBitshift+0x120>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d040      	beq.n	8003f78 <DMA_CalcBaseAndBitshift+0xa8>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a3e      	ldr	r2, [pc, #248]	; (8003ff4 <DMA_CalcBaseAndBitshift+0x124>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d03b      	beq.n	8003f78 <DMA_CalcBaseAndBitshift+0xa8>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a3c      	ldr	r2, [pc, #240]	; (8003ff8 <DMA_CalcBaseAndBitshift+0x128>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d036      	beq.n	8003f78 <DMA_CalcBaseAndBitshift+0xa8>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a3b      	ldr	r2, [pc, #236]	; (8003ffc <DMA_CalcBaseAndBitshift+0x12c>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d031      	beq.n	8003f78 <DMA_CalcBaseAndBitshift+0xa8>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a39      	ldr	r2, [pc, #228]	; (8004000 <DMA_CalcBaseAndBitshift+0x130>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d02c      	beq.n	8003f78 <DMA_CalcBaseAndBitshift+0xa8>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a38      	ldr	r2, [pc, #224]	; (8004004 <DMA_CalcBaseAndBitshift+0x134>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d027      	beq.n	8003f78 <DMA_CalcBaseAndBitshift+0xa8>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a36      	ldr	r2, [pc, #216]	; (8004008 <DMA_CalcBaseAndBitshift+0x138>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d022      	beq.n	8003f78 <DMA_CalcBaseAndBitshift+0xa8>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a35      	ldr	r2, [pc, #212]	; (800400c <DMA_CalcBaseAndBitshift+0x13c>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d01d      	beq.n	8003f78 <DMA_CalcBaseAndBitshift+0xa8>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a33      	ldr	r2, [pc, #204]	; (8004010 <DMA_CalcBaseAndBitshift+0x140>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d018      	beq.n	8003f78 <DMA_CalcBaseAndBitshift+0xa8>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a32      	ldr	r2, [pc, #200]	; (8004014 <DMA_CalcBaseAndBitshift+0x144>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d013      	beq.n	8003f78 <DMA_CalcBaseAndBitshift+0xa8>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a30      	ldr	r2, [pc, #192]	; (8004018 <DMA_CalcBaseAndBitshift+0x148>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d00e      	beq.n	8003f78 <DMA_CalcBaseAndBitshift+0xa8>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a2f      	ldr	r2, [pc, #188]	; (800401c <DMA_CalcBaseAndBitshift+0x14c>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d009      	beq.n	8003f78 <DMA_CalcBaseAndBitshift+0xa8>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a2d      	ldr	r2, [pc, #180]	; (8004020 <DMA_CalcBaseAndBitshift+0x150>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d004      	beq.n	8003f78 <DMA_CalcBaseAndBitshift+0xa8>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a2c      	ldr	r2, [pc, #176]	; (8004024 <DMA_CalcBaseAndBitshift+0x154>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d101      	bne.n	8003f7c <DMA_CalcBaseAndBitshift+0xac>
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e000      	b.n	8003f7e <DMA_CalcBaseAndBitshift+0xae>
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d024      	beq.n	8003fcc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	3b10      	subs	r3, #16
 8003f8a:	4a27      	ldr	r2, [pc, #156]	; (8004028 <DMA_CalcBaseAndBitshift+0x158>)
 8003f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f90:	091b      	lsrs	r3, r3, #4
 8003f92:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f003 0307 	and.w	r3, r3, #7
 8003f9a:	4a24      	ldr	r2, [pc, #144]	; (800402c <DMA_CalcBaseAndBitshift+0x15c>)
 8003f9c:	5cd3      	ldrb	r3, [r2, r3]
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2b03      	cmp	r3, #3
 8003fa8:	d908      	bls.n	8003fbc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	461a      	mov	r2, r3
 8003fb0:	4b1f      	ldr	r3, [pc, #124]	; (8004030 <DMA_CalcBaseAndBitshift+0x160>)
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	1d1a      	adds	r2, r3, #4
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	659a      	str	r2, [r3, #88]	; 0x58
 8003fba:	e00d      	b.n	8003fd8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	4b1b      	ldr	r3, [pc, #108]	; (8004030 <DMA_CalcBaseAndBitshift+0x160>)
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	6593      	str	r3, [r2, #88]	; 0x58
 8003fca:	e005      	b.n	8003fd8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3714      	adds	r7, #20
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr
 8003fe8:	40020010 	.word	0x40020010
 8003fec:	40020028 	.word	0x40020028
 8003ff0:	40020040 	.word	0x40020040
 8003ff4:	40020058 	.word	0x40020058
 8003ff8:	40020070 	.word	0x40020070
 8003ffc:	40020088 	.word	0x40020088
 8004000:	400200a0 	.word	0x400200a0
 8004004:	400200b8 	.word	0x400200b8
 8004008:	40020410 	.word	0x40020410
 800400c:	40020428 	.word	0x40020428
 8004010:	40020440 	.word	0x40020440
 8004014:	40020458 	.word	0x40020458
 8004018:	40020470 	.word	0x40020470
 800401c:	40020488 	.word	0x40020488
 8004020:	400204a0 	.word	0x400204a0
 8004024:	400204b8 	.word	0x400204b8
 8004028:	aaaaaaab 	.word	0xaaaaaaab
 800402c:	080171d8 	.word	0x080171d8
 8004030:	fffffc00 	.word	0xfffffc00

08004034 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004034:	b480      	push	{r7}
 8004036:	b085      	sub	sp, #20
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800403c:	2300      	movs	r3, #0
 800403e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	699b      	ldr	r3, [r3, #24]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d120      	bne.n	800408a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800404c:	2b03      	cmp	r3, #3
 800404e:	d858      	bhi.n	8004102 <DMA_CheckFifoParam+0xce>
 8004050:	a201      	add	r2, pc, #4	; (adr r2, 8004058 <DMA_CheckFifoParam+0x24>)
 8004052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004056:	bf00      	nop
 8004058:	08004069 	.word	0x08004069
 800405c:	0800407b 	.word	0x0800407b
 8004060:	08004069 	.word	0x08004069
 8004064:	08004103 	.word	0x08004103
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d048      	beq.n	8004106 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004078:	e045      	b.n	8004106 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800407e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004082:	d142      	bne.n	800410a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004088:	e03f      	b.n	800410a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	699b      	ldr	r3, [r3, #24]
 800408e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004092:	d123      	bne.n	80040dc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004098:	2b03      	cmp	r3, #3
 800409a:	d838      	bhi.n	800410e <DMA_CheckFifoParam+0xda>
 800409c:	a201      	add	r2, pc, #4	; (adr r2, 80040a4 <DMA_CheckFifoParam+0x70>)
 800409e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040a2:	bf00      	nop
 80040a4:	080040b5 	.word	0x080040b5
 80040a8:	080040bb 	.word	0x080040bb
 80040ac:	080040b5 	.word	0x080040b5
 80040b0:	080040cd 	.word	0x080040cd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	73fb      	strb	r3, [r7, #15]
        break;
 80040b8:	e030      	b.n	800411c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d025      	beq.n	8004112 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80040ca:	e022      	b.n	8004112 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80040d4:	d11f      	bne.n	8004116 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80040da:	e01c      	b.n	8004116 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d902      	bls.n	80040ea <DMA_CheckFifoParam+0xb6>
 80040e4:	2b03      	cmp	r3, #3
 80040e6:	d003      	beq.n	80040f0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80040e8:	e018      	b.n	800411c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	73fb      	strb	r3, [r7, #15]
        break;
 80040ee:	e015      	b.n	800411c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d00e      	beq.n	800411a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	73fb      	strb	r3, [r7, #15]
    break;
 8004100:	e00b      	b.n	800411a <DMA_CheckFifoParam+0xe6>
        break;
 8004102:	bf00      	nop
 8004104:	e00a      	b.n	800411c <DMA_CheckFifoParam+0xe8>
        break;
 8004106:	bf00      	nop
 8004108:	e008      	b.n	800411c <DMA_CheckFifoParam+0xe8>
        break;
 800410a:	bf00      	nop
 800410c:	e006      	b.n	800411c <DMA_CheckFifoParam+0xe8>
        break;
 800410e:	bf00      	nop
 8004110:	e004      	b.n	800411c <DMA_CheckFifoParam+0xe8>
        break;
 8004112:	bf00      	nop
 8004114:	e002      	b.n	800411c <DMA_CheckFifoParam+0xe8>
        break;
 8004116:	bf00      	nop
 8004118:	e000      	b.n	800411c <DMA_CheckFifoParam+0xe8>
    break;
 800411a:	bf00      	nop
    }
  }

  return status;
 800411c:	7bfb      	ldrb	r3, [r7, #15]
}
 800411e:	4618      	mov	r0, r3
 8004120:	3714      	adds	r7, #20
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop

0800412c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800412c:	b480      	push	{r7}
 800412e:	b085      	sub	sp, #20
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a38      	ldr	r2, [pc, #224]	; (8004220 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d022      	beq.n	800418a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a36      	ldr	r2, [pc, #216]	; (8004224 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d01d      	beq.n	800418a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a35      	ldr	r2, [pc, #212]	; (8004228 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d018      	beq.n	800418a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a33      	ldr	r2, [pc, #204]	; (800422c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d013      	beq.n	800418a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a32      	ldr	r2, [pc, #200]	; (8004230 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d00e      	beq.n	800418a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a30      	ldr	r2, [pc, #192]	; (8004234 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d009      	beq.n	800418a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a2f      	ldr	r2, [pc, #188]	; (8004238 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d004      	beq.n	800418a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a2d      	ldr	r2, [pc, #180]	; (800423c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d101      	bne.n	800418e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800418a:	2301      	movs	r3, #1
 800418c:	e000      	b.n	8004190 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800418e:	2300      	movs	r3, #0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d01a      	beq.n	80041ca <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	b2db      	uxtb	r3, r3
 800419a:	3b08      	subs	r3, #8
 800419c:	4a28      	ldr	r2, [pc, #160]	; (8004240 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800419e:	fba2 2303 	umull	r2, r3, r2, r3
 80041a2:	091b      	lsrs	r3, r3, #4
 80041a4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80041a6:	68fa      	ldr	r2, [r7, #12]
 80041a8:	4b26      	ldr	r3, [pc, #152]	; (8004244 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80041aa:	4413      	add	r3, r2
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	461a      	mov	r2, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4a24      	ldr	r2, [pc, #144]	; (8004248 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80041b8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f003 031f 	and.w	r3, r3, #31
 80041c0:	2201      	movs	r2, #1
 80041c2:	409a      	lsls	r2, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80041c8:	e024      	b.n	8004214 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	3b10      	subs	r3, #16
 80041d2:	4a1e      	ldr	r2, [pc, #120]	; (800424c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80041d4:	fba2 2303 	umull	r2, r3, r2, r3
 80041d8:	091b      	lsrs	r3, r3, #4
 80041da:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	4a1c      	ldr	r2, [pc, #112]	; (8004250 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d806      	bhi.n	80041f2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	4a1b      	ldr	r2, [pc, #108]	; (8004254 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d902      	bls.n	80041f2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	3308      	adds	r3, #8
 80041f0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	4b18      	ldr	r3, [pc, #96]	; (8004258 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80041f6:	4413      	add	r3, r2
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	461a      	mov	r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4a16      	ldr	r2, [pc, #88]	; (800425c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004204:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f003 031f 	and.w	r3, r3, #31
 800420c:	2201      	movs	r2, #1
 800420e:	409a      	lsls	r2, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004214:	bf00      	nop
 8004216:	3714      	adds	r7, #20
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr
 8004220:	58025408 	.word	0x58025408
 8004224:	5802541c 	.word	0x5802541c
 8004228:	58025430 	.word	0x58025430
 800422c:	58025444 	.word	0x58025444
 8004230:	58025458 	.word	0x58025458
 8004234:	5802546c 	.word	0x5802546c
 8004238:	58025480 	.word	0x58025480
 800423c:	58025494 	.word	0x58025494
 8004240:	cccccccd 	.word	0xcccccccd
 8004244:	16009600 	.word	0x16009600
 8004248:	58025880 	.word	0x58025880
 800424c:	aaaaaaab 	.word	0xaaaaaaab
 8004250:	400204b8 	.word	0x400204b8
 8004254:	4002040f 	.word	0x4002040f
 8004258:	10008200 	.word	0x10008200
 800425c:	40020880 	.word	0x40020880

08004260 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004260:	b480      	push	{r7}
 8004262:	b085      	sub	sp, #20
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	b2db      	uxtb	r3, r3
 800426e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d04a      	beq.n	800430c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2b08      	cmp	r3, #8
 800427a:	d847      	bhi.n	800430c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a25      	ldr	r2, [pc, #148]	; (8004318 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d022      	beq.n	80042cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a24      	ldr	r2, [pc, #144]	; (800431c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d01d      	beq.n	80042cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a22      	ldr	r2, [pc, #136]	; (8004320 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d018      	beq.n	80042cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a21      	ldr	r2, [pc, #132]	; (8004324 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d013      	beq.n	80042cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a1f      	ldr	r2, [pc, #124]	; (8004328 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d00e      	beq.n	80042cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a1e      	ldr	r2, [pc, #120]	; (800432c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d009      	beq.n	80042cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a1c      	ldr	r2, [pc, #112]	; (8004330 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d004      	beq.n	80042cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a1b      	ldr	r2, [pc, #108]	; (8004334 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d101      	bne.n	80042d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80042cc:	2301      	movs	r3, #1
 80042ce:	e000      	b.n	80042d2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80042d0:	2300      	movs	r3, #0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00a      	beq.n	80042ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80042d6:	68fa      	ldr	r2, [r7, #12]
 80042d8:	4b17      	ldr	r3, [pc, #92]	; (8004338 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80042da:	4413      	add	r3, r2
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	461a      	mov	r2, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4a15      	ldr	r2, [pc, #84]	; (800433c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80042e8:	671a      	str	r2, [r3, #112]	; 0x70
 80042ea:	e009      	b.n	8004300 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80042ec:	68fa      	ldr	r2, [r7, #12]
 80042ee:	4b14      	ldr	r3, [pc, #80]	; (8004340 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80042f0:	4413      	add	r3, r2
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	461a      	mov	r2, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a11      	ldr	r2, [pc, #68]	; (8004344 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80042fe:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	3b01      	subs	r3, #1
 8004304:	2201      	movs	r2, #1
 8004306:	409a      	lsls	r2, r3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800430c:	bf00      	nop
 800430e:	3714      	adds	r7, #20
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr
 8004318:	58025408 	.word	0x58025408
 800431c:	5802541c 	.word	0x5802541c
 8004320:	58025430 	.word	0x58025430
 8004324:	58025444 	.word	0x58025444
 8004328:	58025458 	.word	0x58025458
 800432c:	5802546c 	.word	0x5802546c
 8004330:	58025480 	.word	0x58025480
 8004334:	58025494 	.word	0x58025494
 8004338:	1600963f 	.word	0x1600963f
 800433c:	58025940 	.word	0x58025940
 8004340:	1000823f 	.word	0x1000823f
 8004344:	40020940 	.word	0x40020940

08004348 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b098      	sub	sp, #96	; 0x60
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8004350:	4a84      	ldr	r2, [pc, #528]	; (8004564 <HAL_FDCAN_Init+0x21c>)
 8004352:	f107 030c 	add.w	r3, r7, #12
 8004356:	4611      	mov	r1, r2
 8004358:	224c      	movs	r2, #76	; 0x4c
 800435a:	4618      	mov	r0, r3
 800435c:	f011 fca2 	bl	8015ca4 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d101      	bne.n	800436a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e1ca      	b.n	8004700 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a7e      	ldr	r2, [pc, #504]	; (8004568 <HAL_FDCAN_Init+0x220>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d106      	bne.n	8004382 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800437c:	461a      	mov	r2, r3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004388:	b2db      	uxtb	r3, r3
 800438a:	2b00      	cmp	r3, #0
 800438c:	d106      	bne.n	800439c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f7fd f95c 	bl	8001654 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	699a      	ldr	r2, [r3, #24]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f022 0210 	bic.w	r2, r2, #16
 80043aa:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80043ac:	f7fd fdaa 	bl	8001f04 <HAL_GetTick>
 80043b0:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80043b2:	e014      	b.n	80043de <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80043b4:	f7fd fda6 	bl	8001f04 <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	2b0a      	cmp	r3, #10
 80043c0:	d90d      	bls.n	80043de <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043c8:	f043 0201 	orr.w	r2, r3, #1
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2203      	movs	r2, #3
 80043d6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e190      	b.n	8004700 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	699b      	ldr	r3, [r3, #24]
 80043e4:	f003 0308 	and.w	r3, r3, #8
 80043e8:	2b08      	cmp	r3, #8
 80043ea:	d0e3      	beq.n	80043b4 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	699a      	ldr	r2, [r3, #24]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f042 0201 	orr.w	r2, r2, #1
 80043fa:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80043fc:	f7fd fd82 	bl	8001f04 <HAL_GetTick>
 8004400:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004402:	e014      	b.n	800442e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004404:	f7fd fd7e 	bl	8001f04 <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	2b0a      	cmp	r3, #10
 8004410:	d90d      	bls.n	800442e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004418:	f043 0201 	orr.w	r2, r3, #1
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2203      	movs	r2, #3
 8004426:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e168      	b.n	8004700 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	f003 0301 	and.w	r3, r3, #1
 8004438:	2b00      	cmp	r3, #0
 800443a:	d0e3      	beq.n	8004404 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	699a      	ldr	r2, [r3, #24]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f042 0202 	orr.w	r2, r2, #2
 800444a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	7c1b      	ldrb	r3, [r3, #16]
 8004450:	2b01      	cmp	r3, #1
 8004452:	d108      	bne.n	8004466 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	699a      	ldr	r2, [r3, #24]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004462:	619a      	str	r2, [r3, #24]
 8004464:	e007      	b.n	8004476 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	699a      	ldr	r2, [r3, #24]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004474:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	7c5b      	ldrb	r3, [r3, #17]
 800447a:	2b01      	cmp	r3, #1
 800447c:	d108      	bne.n	8004490 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	699a      	ldr	r2, [r3, #24]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800448c:	619a      	str	r2, [r3, #24]
 800448e:	e007      	b.n	80044a0 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	699a      	ldr	r2, [r3, #24]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800449e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	7c9b      	ldrb	r3, [r3, #18]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d108      	bne.n	80044ba <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	699a      	ldr	r2, [r3, #24]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80044b6:	619a      	str	r2, [r3, #24]
 80044b8:	e007      	b.n	80044ca <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	699a      	ldr	r2, [r3, #24]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80044c8:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	699b      	ldr	r3, [r3, #24]
 80044d0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	689a      	ldr	r2, [r3, #8]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	430a      	orrs	r2, r1
 80044de:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	699a      	ldr	r2, [r3, #24]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80044ee:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	691a      	ldr	r2, [r3, #16]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f022 0210 	bic.w	r2, r2, #16
 80044fe:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	2b01      	cmp	r3, #1
 8004506:	d108      	bne.n	800451a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	699a      	ldr	r2, [r3, #24]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f042 0204 	orr.w	r2, r2, #4
 8004516:	619a      	str	r2, [r3, #24]
 8004518:	e030      	b.n	800457c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d02c      	beq.n	800457c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	2b02      	cmp	r3, #2
 8004528:	d020      	beq.n	800456c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	699a      	ldr	r2, [r3, #24]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004538:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	691a      	ldr	r2, [r3, #16]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f042 0210 	orr.w	r2, r2, #16
 8004548:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	2b03      	cmp	r3, #3
 8004550:	d114      	bne.n	800457c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	699a      	ldr	r2, [r3, #24]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f042 0220 	orr.w	r2, r2, #32
 8004560:	619a      	str	r2, [r3, #24]
 8004562:	e00b      	b.n	800457c <HAL_FDCAN_Init+0x234>
 8004564:	080170e4 	.word	0x080170e4
 8004568:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	699a      	ldr	r2, [r3, #24]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f042 0220 	orr.w	r2, r2, #32
 800457a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	3b01      	subs	r3, #1
 8004582:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	69db      	ldr	r3, [r3, #28]
 8004588:	3b01      	subs	r3, #1
 800458a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800458c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a1b      	ldr	r3, [r3, #32]
 8004592:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004594:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	695b      	ldr	r3, [r3, #20]
 800459c:	3b01      	subs	r3, #1
 800459e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80045a4:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80045a6:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045b0:	d115      	bne.n	80045de <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b6:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045bc:	3b01      	subs	r3, #1
 80045be:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80045c0:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c6:	3b01      	subs	r3, #1
 80045c8:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80045ca:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d2:	3b01      	subs	r3, #1
 80045d4:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80045da:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80045dc:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d00a      	beq.n	80045fc <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	430a      	orrs	r2, r1
 80045f8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004604:	4413      	add	r3, r2
 8004606:	2b00      	cmp	r3, #0
 8004608:	d012      	beq.n	8004630 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8004612:	f023 0107 	bic.w	r1, r3, #7
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004620:	4413      	add	r3, r2
 8004622:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	430a      	orrs	r2, r1
 800462c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004634:	2b00      	cmp	r3, #0
 8004636:	d012      	beq.n	800465e <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004640:	f023 0107 	bic.w	r1, r3, #7
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800464e:	4413      	add	r3, r2
 8004650:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	430a      	orrs	r2, r1
 800465a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004662:	2b00      	cmp	r3, #0
 8004664:	d013      	beq.n	800468e <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800466e:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800467c:	4413      	add	r3, r2
 800467e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004682:	011a      	lsls	r2, r3, #4
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	430a      	orrs	r2, r1
 800468a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004692:	2b00      	cmp	r3, #0
 8004694:	d013      	beq.n	80046be <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800469e:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80046ac:	4413      	add	r3, r2
 80046ae:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80046b2:	021a      	lsls	r2, r3, #8
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	430a      	orrs	r2, r1
 80046ba:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a11      	ldr	r2, [pc, #68]	; (8004708 <HAL_FDCAN_Init+0x3c0>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d107      	bne.n	80046d8 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	689a      	ldr	r2, [r3, #8]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f022 0203 	bic.w	r2, r2, #3
 80046d6:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f000 fddf 	bl	80052b4 <FDCAN_CalcultateRamBlockAddresses>
 80046f6:	4603      	mov	r3, r0
 80046f8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80046fc:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8004700:	4618      	mov	r0, r3
 8004702:	3760      	adds	r7, #96	; 0x60
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}
 8004708:	4000a000 	.word	0x4000a000

0800470c <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 800470c:	b480      	push	{r7}
 800470e:	b087      	sub	sp, #28
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800471c:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800471e:	7bfb      	ldrb	r3, [r7, #15]
 8004720:	2b01      	cmp	r3, #1
 8004722:	d002      	beq.n	800472a <HAL_FDCAN_ConfigFilter+0x1e>
 8004724:	7bfb      	ldrb	r3, [r7, #15]
 8004726:	2b02      	cmp	r3, #2
 8004728:	d157      	bne.n	80047da <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d12b      	bne.n	800478a <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	2b07      	cmp	r3, #7
 8004738:	d10d      	bne.n	8004756 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	69db      	ldr	r3, [r3, #28]
 8004744:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8004746:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 800474c:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 800474e:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 8004752:	617b      	str	r3, [r7, #20]
 8004754:	e00e      	b.n	8004774 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004762:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 800476a:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004770:	4313      	orrs	r3, r2
 8004772:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	4413      	add	r3, r2
 8004780:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	697a      	ldr	r2, [r7, #20]
 8004786:	601a      	str	r2, [r3, #0]
 8004788:	e025      	b.n	80047d6 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	075a      	lsls	r2, r3, #29
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	691b      	ldr	r3, [r3, #16]
 8004794:	4313      	orrs	r3, r2
 8004796:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	2b07      	cmp	r3, #7
 800479e:	d103      	bne.n	80047a8 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	699b      	ldr	r3, [r3, #24]
 80047a4:	613b      	str	r3, [r7, #16]
 80047a6:	e006      	b.n	80047b6 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	079a      	lsls	r2, r3, #30
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	695b      	ldr	r3, [r3, #20]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	00db      	lsls	r3, r3, #3
 80047c0:	4413      	add	r3, r2
 80047c2:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	697a      	ldr	r2, [r7, #20]
 80047c8:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	3304      	adds	r3, #4
 80047ce:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	693a      	ldr	r2, [r7, #16]
 80047d4:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80047d6:	2300      	movs	r3, #0
 80047d8:	e008      	b.n	80047ec <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80047e0:	f043 0202 	orr.w	r2, r3, #2
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
  }
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	371c      	adds	r7, #28
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b085      	sub	sp, #20
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	607a      	str	r2, [r7, #4]
 8004804:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b01      	cmp	r3, #1
 8004810:	d110      	bne.n	8004834 <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800481a:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8004820:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8004828:	69ba      	ldr	r2, [r7, #24]
 800482a:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800482c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 8004830:	2300      	movs	r3, #0
 8004832:	e008      	b.n	8004846 <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800483a:	f043 0204 	orr.w	r2, r3, #4
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
  }
}
 8004846:	4618      	mov	r0, r3
 8004848:	3714      	adds	r7, #20
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr

08004852 <HAL_FDCAN_EnableTxDelayCompensation>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan)
{
 8004852:	b480      	push	{r7}
 8004854:	b083      	sub	sp, #12
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004860:	b2db      	uxtb	r3, r3
 8004862:	2b01      	cmp	r3, #1
 8004864:	d109      	bne.n	800487a <HAL_FDCAN_EnableTxDelayCompensation+0x28>
  {
    /* Enable transmitter delay compensation */
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68da      	ldr	r2, [r3, #12]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004874:	60da      	str	r2, [r3, #12]

    /* Return function status */
    return HAL_OK;
 8004876:	2300      	movs	r3, #0
 8004878:	e008      	b.n	800488c <HAL_FDCAN_EnableTxDelayCompensation+0x3a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004880:	f043 0204 	orr.w	r2, r3, #4
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
  }
}
 800488c:	4618      	mov	r0, r3
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d111      	bne.n	80048d0 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2202      	movs	r2, #2
 80048b0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	699a      	ldr	r2, [r3, #24]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f022 0201 	bic.w	r2, r2, #1
 80048c2:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 80048cc:	2300      	movs	r3, #0
 80048ce:	e008      	b.n	80048e2 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80048d6:	f043 0204 	orr.w	r2, r3, #4
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
  }
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	370c      	adds	r7, #12
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr
	...

080048f0 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b08b      	sub	sp, #44	; 0x2c
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	607a      	str	r2, [r7, #4]
 80048fc:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80048fe:	2300      	movs	r3, #0
 8004900:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004908:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 800490a:	7efb      	ldrb	r3, [r7, #27]
 800490c:	2b02      	cmp	r3, #2
 800490e:	f040 813b 	bne.w	8004b88 <HAL_FDCAN_GetRxMessage+0x298>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	2b40      	cmp	r3, #64	; 0x40
 8004916:	d145      	bne.n	80049a4 <HAL_FDCAN_GetRxMessage+0xb4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004920:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004924:	2b00      	cmp	r3, #0
 8004926:	d109      	bne.n	800493c <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800492e:	f043 0220 	orr.w	r2, r3, #32
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e12e      	b.n	8004b9a <HAL_FDCAN_GetRxMessage+0x2aa>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004944:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004948:	2b00      	cmp	r3, #0
 800494a:	d109      	bne.n	8004960 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004952:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e11c      	b.n	8004b9a <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004968:	0e1b      	lsrs	r3, r3, #24
 800496a:	f003 0301 	and.w	r3, r3, #1
 800496e:	2b01      	cmp	r3, #1
 8004970:	d103      	bne.n	800497a <HAL_FDCAN_GetRxMessage+0x8a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
            GetIndex = 1U;
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004982:	0a1b      	lsrs	r3, r3, #8
 8004984:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004988:	69fa      	ldr	r2, [r7, #28]
 800498a:	4413      	add	r3, r2
 800498c:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004996:	69f9      	ldr	r1, [r7, #28]
 8004998:	fb01 f303 	mul.w	r3, r1, r3
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	4413      	add	r3, r2
 80049a0:	627b      	str	r3, [r7, #36]	; 0x24
 80049a2:	e061      	b.n	8004a68 <HAL_FDCAN_GetRxMessage+0x178>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	2b41      	cmp	r3, #65	; 0x41
 80049a8:	d145      	bne.n	8004a36 <HAL_FDCAN_GetRxMessage+0x146>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80049b2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d109      	bne.n	80049ce <HAL_FDCAN_GetRxMessage+0xde>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80049c0:	f043 0220 	orr.w	r2, r3, #32
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e0e5      	b.n	8004b9a <HAL_FDCAN_GetRxMessage+0x2aa>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80049d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d109      	bne.n	80049f2 <HAL_FDCAN_GetRxMessage+0x102>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80049e4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e0d3      	b.n	8004b9a <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80049fa:	0e1b      	lsrs	r3, r3, #24
 80049fc:	f003 0301 	and.w	r3, r3, #1
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d103      	bne.n	8004a0c <HAL_FDCAN_GetRxMessage+0x11c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
            GetIndex = 1U;
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004a14:	0a1b      	lsrs	r3, r3, #8
 8004a16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a1a:	69fa      	ldr	r2, [r7, #28]
 8004a1c:	4413      	add	r3, r2
 8004a1e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a28:	69f9      	ldr	r1, [r7, #28]
 8004a2a:	fb01 f303 	mul.w	r3, r1, r3
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	4413      	add	r3, r2
 8004a32:	627b      	str	r3, [r7, #36]	; 0x24
 8004a34:	e018      	b.n	8004a68 <HAL_FDCAN_GetRxMessage+0x178>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a3a:	68ba      	ldr	r2, [r7, #8]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d309      	bcc.n	8004a54 <HAL_FDCAN_GetRxMessage+0x164>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a46:	f043 0220 	orr.w	r2, r3, #32
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e0a2      	b.n	8004b9a <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a5c:	68b9      	ldr	r1, [r7, #8]
 8004a5e:	fb01 f303 	mul.w	r3, r1, r3
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	4413      	add	r3, r2
 8004a66:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8004a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d107      	bne.n	8004a8c <HAL_FDCAN_GetRxMessage+0x19c>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8004a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	0c9b      	lsrs	r3, r3, #18
 8004a82:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	601a      	str	r2, [r3, #0]
 8004a8a:	e005      	b.n	8004a98 <HAL_FDCAN_GetRxMessage+0x1a8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8004a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8004a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8004aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8004ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab2:	3304      	adds	r3, #4
 8004ab4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8004ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	b29a      	uxth	r2, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8004ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8004acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8004ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8004ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	0e1b      	lsrs	r3, r3, #24
 8004aea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8004af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	0fda      	lsrs	r2, r3, #31
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8004afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afe:	3304      	adds	r3, #4
 8004b00:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8004b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b04:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8004b06:	2300      	movs	r3, #0
 8004b08:	623b      	str	r3, [r7, #32]
 8004b0a:	e00a      	b.n	8004b22 <HAL_FDCAN_GetRxMessage+0x232>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8004b0c:	697a      	ldr	r2, [r7, #20]
 8004b0e:	6a3b      	ldr	r3, [r7, #32]
 8004b10:	441a      	add	r2, r3
 8004b12:	6839      	ldr	r1, [r7, #0]
 8004b14:	6a3b      	ldr	r3, [r7, #32]
 8004b16:	440b      	add	r3, r1
 8004b18:	7812      	ldrb	r2, [r2, #0]
 8004b1a:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8004b1c:	6a3b      	ldr	r3, [r7, #32]
 8004b1e:	3301      	adds	r3, #1
 8004b20:	623b      	str	r3, [r7, #32]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	0c1b      	lsrs	r3, r3, #16
 8004b28:	4a1f      	ldr	r2, [pc, #124]	; (8004ba8 <HAL_FDCAN_GetRxMessage+0x2b8>)
 8004b2a:	5cd3      	ldrb	r3, [r2, r3]
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	6a3b      	ldr	r3, [r7, #32]
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d3eb      	bcc.n	8004b0c <HAL_FDCAN_GetRxMessage+0x21c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	2b40      	cmp	r3, #64	; 0x40
 8004b38:	d105      	bne.n	8004b46 <HAL_FDCAN_GetRxMessage+0x256>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	69fa      	ldr	r2, [r7, #28]
 8004b40:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8004b44:	e01e      	b.n	8004b84 <HAL_FDCAN_GetRxMessage+0x294>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	2b41      	cmp	r3, #65	; 0x41
 8004b4a:	d105      	bne.n	8004b58 <HAL_FDCAN_GetRxMessage+0x268>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	69fa      	ldr	r2, [r7, #28]
 8004b52:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8004b56:	e015      	b.n	8004b84 <HAL_FDCAN_GetRxMessage+0x294>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	2b1f      	cmp	r3, #31
 8004b5c:	d808      	bhi.n	8004b70 <HAL_FDCAN_GetRxMessage+0x280>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2101      	movs	r1, #1
 8004b64:	68ba      	ldr	r2, [r7, #8]
 8004b66:	fa01 f202 	lsl.w	r2, r1, r2
 8004b6a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8004b6e:	e009      	b.n	8004b84 <HAL_FDCAN_GetRxMessage+0x294>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	f003 021f 	and.w	r2, r3, #31
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	2101      	movs	r1, #1
 8004b7c:	fa01 f202 	lsl.w	r2, r1, r2
 8004b80:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8004b84:	2300      	movs	r3, #0
 8004b86:	e008      	b.n	8004b9a <HAL_FDCAN_GetRxMessage+0x2aa>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b8e:	f043 0208 	orr.w	r2, r3, #8
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
  }
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	372c      	adds	r7, #44	; 0x2c
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr
 8004ba6:	bf00      	nop
 8004ba8:	080171e0 	.word	0x080171e0

08004bac <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b087      	sub	sp, #28
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	60b9      	str	r1, [r7, #8]
 8004bb6:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004bbe:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8004bc0:	7dfb      	ldrb	r3, [r7, #23]
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d002      	beq.n	8004bcc <HAL_FDCAN_ActivateNotification+0x20>
 8004bc6:	7dfb      	ldrb	r3, [r7, #23]
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	d155      	bne.n	8004c78 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d108      	bne.n	8004bec <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f042 0201 	orr.w	r2, r2, #1
 8004be8:	65da      	str	r2, [r3, #92]	; 0x5c
 8004bea:	e014      	b.n	8004c16 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	68ba      	ldr	r2, [r7, #8]
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d108      	bne.n	8004c0e <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f042 0202 	orr.w	r2, r2, #2
 8004c0a:	65da      	str	r2, [r3, #92]	; 0x5c
 8004c0c:	e003      	b.n	8004c16 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2203      	movs	r2, #3
 8004c14:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d009      	beq.n	8004c34 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occure if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	430a      	orrs	r2, r1
 8004c30:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d009      	beq.n	8004c52 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occure if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	430a      	orrs	r2, r1
 8004c4e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004c58:	68ba      	ldr	r2, [r7, #8]
 8004c5a:	4b0f      	ldr	r3, [pc, #60]	; (8004c98 <HAL_FDCAN_ActivateNotification+0xec>)
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	68fa      	ldr	r2, [r7, #12]
 8004c60:	6812      	ldr	r2, [r2, #0]
 8004c62:	430b      	orrs	r3, r1
 8004c64:	6553      	str	r3, [r2, #84]	; 0x54
 8004c66:	4b0d      	ldr	r3, [pc, #52]	; (8004c9c <HAL_FDCAN_ActivateNotification+0xf0>)
 8004c68:	695a      	ldr	r2, [r3, #20]
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	0f9b      	lsrs	r3, r3, #30
 8004c6e:	490b      	ldr	r1, [pc, #44]	; (8004c9c <HAL_FDCAN_ActivateNotification+0xf0>)
 8004c70:	4313      	orrs	r3, r2
 8004c72:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8004c74:	2300      	movs	r3, #0
 8004c76:	e008      	b.n	8004c8a <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c7e:	f043 0202 	orr.w	r2, r3, #2
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
  }
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	371c      	adds	r7, #28
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr
 8004c96:	bf00      	nop
 8004c98:	3fcfffff 	.word	0x3fcfffff
 8004c9c:	4000a800 	.word	0x4000a800

08004ca0 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b092      	sub	sp, #72	; 0x48
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8004ca8:	4b90      	ldr	r3, [pc, #576]	; (8004eec <HAL_FDCAN_IRQHandler+0x24c>)
 8004caa:	691b      	ldr	r3, [r3, #16]
 8004cac:	079b      	lsls	r3, r3, #30
 8004cae:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8004cb0:	4b8e      	ldr	r3, [pc, #568]	; (8004eec <HAL_FDCAN_IRQHandler+0x24c>)
 8004cb2:	695b      	ldr	r3, [r3, #20]
 8004cb4:	079b      	lsls	r3, r3, #30
 8004cb6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004cb8:	4013      	ands	r3, r2
 8004cba:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cc2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004cc6:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cda:	f003 030f 	and.w	r3, r3, #15
 8004cde:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ce6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004ce8:	4013      	ands	r3, r2
 8004cea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cf2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cf6:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cfe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d00:	4013      	ands	r3, r2
 8004d02:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d0a:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 8004d0e:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d18:	4013      	ands	r3, r2
 8004d1a:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d22:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8004d26:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d30:	4013      	ands	r3, r2
 8004d32:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d011      	beq.n	8004d66 <HAL_FDCAN_IRQHandler+0xc6>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d00a      	beq.n	8004d66 <HAL_FDCAN_IRQHandler+0xc6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d58:	651a      	str	r2, [r3, #80]	; 0x50
 8004d5a:	4b64      	ldr	r3, [pc, #400]	; (8004eec <HAL_FDCAN_IRQHandler+0x24c>)
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f000 fa5a 	bl	800521a <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d01e      	beq.n	8004db2 <HAL_FDCAN_IRQHandler+0x112>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d017      	beq.n	8004db2 <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004d94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d96:	4013      	ands	r3, r2
 8004d98:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004da2:	651a      	str	r2, [r3, #80]	; 0x50
 8004da4:	4b51      	ldr	r3, [pc, #324]	; (8004eec <HAL_FDCAN_IRQHandler+0x24c>)
 8004da6:	2200      	movs	r2, #0
 8004da8:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8004daa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f000 fa0b 	bl	80051c8 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8004db2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d00d      	beq.n	8004dd4 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004dbe:	4b4c      	ldr	r3, [pc, #304]	; (8004ef0 <HAL_FDCAN_IRQHandler+0x250>)
 8004dc0:	400b      	ands	r3, r1
 8004dc2:	6513      	str	r3, [r2, #80]	; 0x50
 8004dc4:	4a49      	ldr	r2, [pc, #292]	; (8004eec <HAL_FDCAN_IRQHandler+0x24c>)
 8004dc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dc8:	0f9b      	lsrs	r3, r3, #30
 8004dca:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8004dcc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f000 f9c4 	bl	800515c <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8004dd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d00d      	beq.n	8004df6 <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004de0:	4b43      	ldr	r3, [pc, #268]	; (8004ef0 <HAL_FDCAN_IRQHandler+0x250>)
 8004de2:	400b      	ands	r3, r1
 8004de4:	6513      	str	r3, [r2, #80]	; 0x50
 8004de6:	4a41      	ldr	r2, [pc, #260]	; (8004eec <HAL_FDCAN_IRQHandler+0x24c>)
 8004de8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dea:	0f9b      	lsrs	r3, r3, #30
 8004dec:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8004dee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f000 f9be 	bl	8005172 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8004df6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d00d      	beq.n	8004e18 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004e02:	4b3b      	ldr	r3, [pc, #236]	; (8004ef0 <HAL_FDCAN_IRQHandler+0x250>)
 8004e04:	400b      	ands	r3, r1
 8004e06:	6513      	str	r3, [r2, #80]	; 0x50
 8004e08:	4a38      	ldr	r2, [pc, #224]	; (8004eec <HAL_FDCAN_IRQHandler+0x24c>)
 8004e0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e0c:	0f9b      	lsrs	r3, r3, #30
 8004e0e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8004e10:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f7fc fbce 	bl	80015b4 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8004e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d00d      	beq.n	8004e3a <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004e24:	4b32      	ldr	r3, [pc, #200]	; (8004ef0 <HAL_FDCAN_IRQHandler+0x250>)
 8004e26:	400b      	ands	r3, r1
 8004e28:	6513      	str	r3, [r2, #80]	; 0x50
 8004e2a:	4a30      	ldr	r2, [pc, #192]	; (8004eec <HAL_FDCAN_IRQHandler+0x24c>)
 8004e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e2e:	0f9b      	lsrs	r3, r3, #30
 8004e30:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8004e32:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f000 f9a7 	bl	8005188 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d011      	beq.n	8004e6c <HAL_FDCAN_IRQHandler+0x1cc>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d00a      	beq.n	8004e6c <HAL_FDCAN_IRQHandler+0x1cc>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e5e:	651a      	str	r2, [r3, #80]	; 0x50
 8004e60:	4b22      	ldr	r3, [pc, #136]	; (8004eec <HAL_FDCAN_IRQHandler+0x24c>)
 8004e62:	2200      	movs	r2, #0
 8004e64:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f000 f999 	bl	800519e <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d01e      	beq.n	8004eb8 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d017      	beq.n	8004eb8 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004e90:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ea8:	651a      	str	r2, [r3, #80]	; 0x50
 8004eaa:	4b10      	ldr	r3, [pc, #64]	; (8004eec <HAL_FDCAN_IRQHandler+0x24c>)
 8004eac:	2200      	movs	r2, #0
 8004eae:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8004eb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f000 f97d 	bl	80051b2 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ebe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d016      	beq.n	8004ef4 <HAL_FDCAN_IRQHandler+0x254>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ecc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d00f      	beq.n	8004ef4 <HAL_FDCAN_IRQHandler+0x254>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004edc:	651a      	str	r2, [r3, #80]	; 0x50
 8004ede:	4b03      	ldr	r3, [pc, #12]	; (8004eec <HAL_FDCAN_IRQHandler+0x24c>)
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f000 f97a 	bl	80051de <HAL_FDCAN_RxBufferNewMessageCallback>
 8004eea:	e003      	b.n	8004ef4 <HAL_FDCAN_IRQHandler+0x254>
 8004eec:	4000a800 	.word	0x4000a800
 8004ef0:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004efa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d011      	beq.n	8004f26 <HAL_FDCAN_IRQHandler+0x286>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d00a      	beq.n	8004f26 <HAL_FDCAN_IRQHandler+0x286>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004f18:	651a      	str	r2, [r3, #80]	; 0x50
 8004f1a:	4b8d      	ldr	r3, [pc, #564]	; (8005150 <HAL_FDCAN_IRQHandler+0x4b0>)
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f000 f966 	bl	80051f2 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d011      	beq.n	8004f58 <HAL_FDCAN_IRQHandler+0x2b8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00a      	beq.n	8004f58 <HAL_FDCAN_IRQHandler+0x2b8>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004f4a:	651a      	str	r2, [r3, #80]	; 0x50
 8004f4c:	4b80      	ldr	r3, [pc, #512]	; (8005150 <HAL_FDCAN_IRQHandler+0x4b0>)
 8004f4e:	2200      	movs	r2, #0
 8004f50:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f000 f957 	bl	8005206 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d016      	beq.n	8004f94 <HAL_FDCAN_IRQHandler+0x2f4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d00f      	beq.n	8004f94 <HAL_FDCAN_IRQHandler+0x2f4>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004f7c:	651a      	str	r2, [r3, #80]	; 0x50
 8004f7e:	4b74      	ldr	r3, [pc, #464]	; (8005150 <HAL_FDCAN_IRQHandler+0x4b0>)
 8004f80:	2200      	movs	r2, #0
 8004f82:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f8a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8004f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d00d      	beq.n	8004fb6 <HAL_FDCAN_IRQHandler+0x316>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004fa0:	4b6c      	ldr	r3, [pc, #432]	; (8005154 <HAL_FDCAN_IRQHandler+0x4b4>)
 8004fa2:	400b      	ands	r3, r1
 8004fa4:	6513      	str	r3, [r2, #80]	; 0x50
 8004fa6:	4a6a      	ldr	r2, [pc, #424]	; (8005150 <HAL_FDCAN_IRQHandler+0x4b0>)
 8004fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004faa:	0f9b      	lsrs	r3, r3, #30
 8004fac:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8004fae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 f946 	bl	8005242 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8004fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d011      	beq.n	8004fe0 <HAL_FDCAN_IRQHandler+0x340>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004fc2:	4b64      	ldr	r3, [pc, #400]	; (8005154 <HAL_FDCAN_IRQHandler+0x4b4>)
 8004fc4:	400b      	ands	r3, r1
 8004fc6:	6513      	str	r3, [r2, #80]	; 0x50
 8004fc8:	4a61      	ldr	r2, [pc, #388]	; (8005150 <HAL_FDCAN_IRQHandler+0x4b0>)
 8004fca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fcc:	0f9b      	lsrs	r3, r3, #30
 8004fce:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8004fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fd8:	431a      	orrs	r2, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a5c      	ldr	r2, [pc, #368]	; (8005158 <HAL_FDCAN_IRQHandler+0x4b8>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	f040 80a6 	bne.w	8005138 <HAL_FDCAN_IRQHandler+0x498>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	f003 0303 	and.w	r3, r3, #3
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	f000 809e 	beq.w	8005138 <HAL_FDCAN_IRQHandler+0x498>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	6a1b      	ldr	r3, [r3, #32]
 8005002:	f003 030f 	and.w	r3, r3, #15
 8005006:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005010:	4013      	ands	r3, r2
 8005012:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	6a1b      	ldr	r3, [r3, #32]
 800501a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800501e:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005026:	6a3a      	ldr	r2, [r7, #32]
 8005028:	4013      	ands	r3, r2
 800502a:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	6a1b      	ldr	r3, [r3, #32]
 8005032:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8005036:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503e:	69fa      	ldr	r2, [r7, #28]
 8005040:	4013      	ands	r3, r2
 8005042:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	6a1b      	ldr	r3, [r3, #32]
 800504a:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 800504e:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005056:	69ba      	ldr	r2, [r7, #24]
 8005058:	4013      	ands	r3, r2
 800505a:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	6a1b      	ldr	r3, [r3, #32]
 8005062:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8005066:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506e:	697a      	ldr	r2, [r7, #20]
 8005070:	4013      	ands	r3, r2
 8005072:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8005074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005076:	2b00      	cmp	r3, #0
 8005078:	d007      	beq.n	800508a <HAL_FDCAN_IRQHandler+0x3ea>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005080:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8005082:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f000 f8e7 	bl	8005258 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 800508a:	6a3b      	ldr	r3, [r7, #32]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d007      	beq.n	80050a0 <HAL_FDCAN_IRQHandler+0x400>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	6a3a      	ldr	r2, [r7, #32]
 8005096:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8005098:	6a39      	ldr	r1, [r7, #32]
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f000 f8e7 	bl	800526e <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d01b      	beq.n	80050e6 <HAL_FDCAN_IRQHandler+0x446>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	6a1b      	ldr	r3, [r3, #32]
 80050b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d014      	beq.n	80050e6 <HAL_FDCAN_IRQHandler+0x446>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050c2:	0c1b      	lsrs	r3, r3, #16
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050d2:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	2240      	movs	r2, #64	; 0x40
 80050da:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	6939      	ldr	r1, [r7, #16]
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f000 f8cf 	bl	8005284 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d007      	beq.n	80050fc <HAL_FDCAN_IRQHandler+0x45c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	69fa      	ldr	r2, [r7, #28]
 80050f2:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 80050f4:	69f9      	ldr	r1, [r7, #28]
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 f8d0 	bl	800529c <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d00b      	beq.n	800511a <HAL_FDCAN_IRQHandler+0x47a>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	69ba      	ldr	r2, [r7, #24]
 8005108:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	431a      	orrs	r2, r3
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d00b      	beq.n	8005138 <HAL_FDCAN_IRQHandler+0x498>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	697a      	ldr	r2, [r7, #20]
 8005126:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	431a      	orrs	r2, r3
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800513e:	2b00      	cmp	r3, #0
 8005140:	d002      	beq.n	8005148 <HAL_FDCAN_IRQHandler+0x4a8>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 f873 	bl	800522e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8005148:	bf00      	nop
 800514a:	3748      	adds	r7, #72	; 0x48
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}
 8005150:	4000a800 	.word	0x4000a800
 8005154:	3fcfffff 	.word	0x3fcfffff
 8005158:	4000a000 	.word	0x4000a000

0800515c <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8005166:	bf00      	nop
 8005168:	370c      	adds	r7, #12
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr

08005172 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8005172:	b480      	push	{r7}
 8005174:	b083      	sub	sp, #12
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
 800517a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800517c:	bf00      	nop
 800517e:	370c      	adds	r7, #12
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr

08005188 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8005192:	bf00      	nop
 8005194:	370c      	adds	r7, #12
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr

0800519e <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800519e:	b480      	push	{r7}
 80051a0:	b083      	sub	sp, #12
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80051a6:	bf00      	nop
 80051a8:	370c      	adds	r7, #12
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr

080051b2 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80051b2:	b480      	push	{r7}
 80051b4:	b083      	sub	sp, #12
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
 80051ba:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80051bc:	bf00      	nop
 80051be:	370c      	adds	r7, #12
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr

080051c8 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80051d2:	bf00      	nop
 80051d4:	370c      	adds	r7, #12
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr

080051de <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80051de:	b480      	push	{r7}
 80051e0:	b083      	sub	sp, #12
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 80051e6:	bf00      	nop
 80051e8:	370c      	adds	r7, #12
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr

080051f2 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80051f2:	b480      	push	{r7}
 80051f4:	b083      	sub	sp, #12
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80051fa:	bf00      	nop
 80051fc:	370c      	adds	r7, #12
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr

08005206 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005206:	b480      	push	{r7}
 8005208:	b083      	sub	sp, #12
 800520a:	af00      	add	r7, sp, #0
 800520c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800520e:	bf00      	nop
 8005210:	370c      	adds	r7, #12
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr

0800521a <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800521a:	b480      	push	{r7}
 800521c:	b083      	sub	sp, #12
 800521e:	af00      	add	r7, sp, #0
 8005220:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8005222:	bf00      	nop
 8005224:	370c      	adds	r7, #12
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr

0800522e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800522e:	b480      	push	{r7}
 8005230:	b083      	sub	sp, #12
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8005236:	bf00      	nop
 8005238:	370c      	adds	r7, #12
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr

08005242 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8005242:	b480      	push	{r7}
 8005244:	b083      	sub	sp, #12
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
 800524a:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800524c:	bf00      	nop
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8005262:	bf00      	nop
 8005264:	370c      	adds	r7, #12
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr

0800526e <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 800526e:	b480      	push	{r7}
 8005270:	b083      	sub	sp, #12
 8005272:	af00      	add	r7, sp, #0
 8005274:	6078      	str	r0, [r7, #4]
 8005276:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8005278:	bf00      	nop
 800527a:	370c      	adds	r7, #12
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr

08005284 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8005284:	b480      	push	{r7}
 8005286:	b085      	sub	sp, #20
 8005288:	af00      	add	r7, sp, #0
 800528a:	60f8      	str	r0, [r7, #12]
 800528c:	60b9      	str	r1, [r7, #8]
 800528e:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8005290:	bf00      	nop
 8005292:	3714      	adds	r7, #20
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 80052a6:	bf00      	nop
 80052a8:	370c      	adds	r7, #12
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr
	...

080052b4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b085      	sub	sp, #20
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052c0:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80052ca:	4ba7      	ldr	r3, [pc, #668]	; (8005568 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80052cc:	4013      	ands	r3, r2
 80052ce:	68ba      	ldr	r2, [r7, #8]
 80052d0:	0091      	lsls	r1, r2, #2
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	6812      	ldr	r2, [r2, #0]
 80052d6:	430b      	orrs	r3, r1
 80052d8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052e4:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ec:	041a      	lsls	r2, r3, #16
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	430a      	orrs	r2, r1
 80052f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052fc:	68ba      	ldr	r2, [r7, #8]
 80052fe:	4413      	add	r3, r2
 8005300:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800530a:	4b97      	ldr	r3, [pc, #604]	; (8005568 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800530c:	4013      	ands	r3, r2
 800530e:	68ba      	ldr	r2, [r7, #8]
 8005310:	0091      	lsls	r1, r2, #2
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	6812      	ldr	r2, [r2, #0]
 8005316:	430b      	orrs	r3, r1
 8005318:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005324:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800532c:	041a      	lsls	r2, r3, #16
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	430a      	orrs	r2, r1
 8005334:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800533c:	005b      	lsls	r3, r3, #1
 800533e:	68ba      	ldr	r2, [r7, #8]
 8005340:	4413      	add	r3, r2
 8005342:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800534c:	4b86      	ldr	r3, [pc, #536]	; (8005568 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800534e:	4013      	ands	r3, r2
 8005350:	68ba      	ldr	r2, [r7, #8]
 8005352:	0091      	lsls	r1, r2, #2
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	6812      	ldr	r2, [r2, #0]
 8005358:	430b      	orrs	r3, r1
 800535a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005366:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536e:	041a      	lsls	r2, r3, #16
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	430a      	orrs	r2, r1
 8005376:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005382:	fb02 f303 	mul.w	r3, r2, r3
 8005386:	68ba      	ldr	r2, [r7, #8]
 8005388:	4413      	add	r3, r2
 800538a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005394:	4b74      	ldr	r3, [pc, #464]	; (8005568 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005396:	4013      	ands	r3, r2
 8005398:	68ba      	ldr	r2, [r7, #8]
 800539a:	0091      	lsls	r1, r2, #2
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	6812      	ldr	r2, [r2, #0]
 80053a0:	430b      	orrs	r3, r1
 80053a2:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80053ae:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053b6:	041a      	lsls	r2, r3, #16
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	430a      	orrs	r2, r1
 80053be:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80053ca:	fb02 f303 	mul.w	r3, r2, r3
 80053ce:	68ba      	ldr	r2, [r7, #8]
 80053d0:	4413      	add	r3, r2
 80053d2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80053dc:	4b62      	ldr	r3, [pc, #392]	; (8005568 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80053de:	4013      	ands	r3, r2
 80053e0:	68ba      	ldr	r2, [r7, #8]
 80053e2:	0091      	lsls	r1, r2, #2
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	6812      	ldr	r2, [r2, #0]
 80053e8:	430b      	orrs	r3, r1
 80053ea:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80053f6:	fb02 f303 	mul.w	r3, r2, r3
 80053fa:	68ba      	ldr	r2, [r7, #8]
 80053fc:	4413      	add	r3, r2
 80053fe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8005408:	4b57      	ldr	r3, [pc, #348]	; (8005568 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800540a:	4013      	ands	r3, r2
 800540c:	68ba      	ldr	r2, [r7, #8]
 800540e:	0091      	lsls	r1, r2, #2
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	6812      	ldr	r2, [r2, #0]
 8005414:	430b      	orrs	r3, r1
 8005416:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005422:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800542a:	041a      	lsls	r2, r3, #16
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	430a      	orrs	r2, r1
 8005432:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800543a:	005b      	lsls	r3, r3, #1
 800543c:	68ba      	ldr	r2, [r7, #8]
 800543e:	4413      	add	r3, r2
 8005440:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800544a:	4b47      	ldr	r3, [pc, #284]	; (8005568 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800544c:	4013      	ands	r3, r2
 800544e:	68ba      	ldr	r2, [r7, #8]
 8005450:	0091      	lsls	r1, r2, #2
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	6812      	ldr	r2, [r2, #0]
 8005456:	430b      	orrs	r3, r1
 8005458:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005464:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800546c:	041a      	lsls	r2, r3, #16
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	430a      	orrs	r2, r1
 8005474:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005480:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005488:	061a      	lsls	r2, r3, #24
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	430a      	orrs	r2, r1
 8005490:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005498:	4b34      	ldr	r3, [pc, #208]	; (800556c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800549a:	4413      	add	r3, r2
 800549c:	009a      	lsls	r2, r3, #2
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	441a      	add	r2, r3
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ba:	00db      	lsls	r3, r3, #3
 80054bc:	441a      	add	r2, r3
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ca:	6879      	ldr	r1, [r7, #4]
 80054cc:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80054ce:	fb01 f303 	mul.w	r3, r1, r3
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	441a      	add	r2, r3
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054e2:	6879      	ldr	r1, [r7, #4]
 80054e4:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80054e6:	fb01 f303 	mul.w	r3, r1, r3
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	441a      	add	r2, r3
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054fa:	6879      	ldr	r1, [r7, #4]
 80054fc:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80054fe:	fb01 f303 	mul.w	r3, r1, r3
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	441a      	add	r2, r3
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005516:	00db      	lsls	r3, r3, #3
 8005518:	441a      	add	r2, r3
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800552a:	6879      	ldr	r1, [r7, #4]
 800552c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800552e:	fb01 f303 	mul.w	r3, r1, r3
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	441a      	add	r2, r3
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005546:	6879      	ldr	r1, [r7, #4]
 8005548:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800554a:	fb01 f303 	mul.w	r3, r1, r3
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	441a      	add	r2, r3
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800555e:	4a04      	ldr	r2, [pc, #16]	; (8005570 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d915      	bls.n	8005590 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8005564:	e006      	b.n	8005574 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8005566:	bf00      	nop
 8005568:	ffff0003 	.word	0xffff0003
 800556c:	10002b00 	.word	0x10002b00
 8005570:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800557a:	f043 0220 	orr.w	r2, r3, #32
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2203      	movs	r2, #3
 8005588:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e010      	b.n	80055b2 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005594:	60fb      	str	r3, [r7, #12]
 8005596:	e005      	b.n	80055a4 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2200      	movs	r2, #0
 800559c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	3304      	adds	r3, #4
 80055a2:	60fb      	str	r3, [r7, #12]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055aa:	68fa      	ldr	r2, [r7, #12]
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d3f3      	bcc.n	8005598 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80055b0:	2300      	movs	r3, #0
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3714      	adds	r7, #20
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr
 80055be:	bf00      	nop

080055c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b089      	sub	sp, #36	; 0x24
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80055ca:	2300      	movs	r3, #0
 80055cc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80055ce:	4b89      	ldr	r3, [pc, #548]	; (80057f4 <HAL_GPIO_Init+0x234>)
 80055d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80055d2:	e194      	b.n	80058fe <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	2101      	movs	r1, #1
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	fa01 f303 	lsl.w	r3, r1, r3
 80055e0:	4013      	ands	r3, r2
 80055e2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	f000 8186 	beq.w	80058f8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d00b      	beq.n	800560c <HAL_GPIO_Init+0x4c>
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	2b02      	cmp	r3, #2
 80055fa:	d007      	beq.n	800560c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005600:	2b11      	cmp	r3, #17
 8005602:	d003      	beq.n	800560c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	2b12      	cmp	r3, #18
 800560a:	d130      	bne.n	800566e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	005b      	lsls	r3, r3, #1
 8005616:	2203      	movs	r2, #3
 8005618:	fa02 f303 	lsl.w	r3, r2, r3
 800561c:	43db      	mvns	r3, r3
 800561e:	69ba      	ldr	r2, [r7, #24]
 8005620:	4013      	ands	r3, r2
 8005622:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	68da      	ldr	r2, [r3, #12]
 8005628:	69fb      	ldr	r3, [r7, #28]
 800562a:	005b      	lsls	r3, r3, #1
 800562c:	fa02 f303 	lsl.w	r3, r2, r3
 8005630:	69ba      	ldr	r2, [r7, #24]
 8005632:	4313      	orrs	r3, r2
 8005634:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	69ba      	ldr	r2, [r7, #24]
 800563a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005642:	2201      	movs	r2, #1
 8005644:	69fb      	ldr	r3, [r7, #28]
 8005646:	fa02 f303 	lsl.w	r3, r2, r3
 800564a:	43db      	mvns	r3, r3
 800564c:	69ba      	ldr	r2, [r7, #24]
 800564e:	4013      	ands	r3, r2
 8005650:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	091b      	lsrs	r3, r3, #4
 8005658:	f003 0201 	and.w	r2, r3, #1
 800565c:	69fb      	ldr	r3, [r7, #28]
 800565e:	fa02 f303 	lsl.w	r3, r2, r3
 8005662:	69ba      	ldr	r2, [r7, #24]
 8005664:	4313      	orrs	r3, r2
 8005666:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	69ba      	ldr	r2, [r7, #24]
 800566c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005674:	69fb      	ldr	r3, [r7, #28]
 8005676:	005b      	lsls	r3, r3, #1
 8005678:	2203      	movs	r2, #3
 800567a:	fa02 f303 	lsl.w	r3, r2, r3
 800567e:	43db      	mvns	r3, r3
 8005680:	69ba      	ldr	r2, [r7, #24]
 8005682:	4013      	ands	r3, r2
 8005684:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	689a      	ldr	r2, [r3, #8]
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	005b      	lsls	r3, r3, #1
 800568e:	fa02 f303 	lsl.w	r3, r2, r3
 8005692:	69ba      	ldr	r2, [r7, #24]
 8005694:	4313      	orrs	r3, r2
 8005696:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	69ba      	ldr	r2, [r7, #24]
 800569c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	2b02      	cmp	r3, #2
 80056a4:	d003      	beq.n	80056ae <HAL_GPIO_Init+0xee>
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	2b12      	cmp	r3, #18
 80056ac:	d123      	bne.n	80056f6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	08da      	lsrs	r2, r3, #3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	3208      	adds	r2, #8
 80056b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80056bc:	69fb      	ldr	r3, [r7, #28]
 80056be:	f003 0307 	and.w	r3, r3, #7
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	220f      	movs	r2, #15
 80056c6:	fa02 f303 	lsl.w	r3, r2, r3
 80056ca:	43db      	mvns	r3, r3
 80056cc:	69ba      	ldr	r2, [r7, #24]
 80056ce:	4013      	ands	r3, r2
 80056d0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	691a      	ldr	r2, [r3, #16]
 80056d6:	69fb      	ldr	r3, [r7, #28]
 80056d8:	f003 0307 	and.w	r3, r3, #7
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	fa02 f303 	lsl.w	r3, r2, r3
 80056e2:	69ba      	ldr	r2, [r7, #24]
 80056e4:	4313      	orrs	r3, r2
 80056e6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	08da      	lsrs	r2, r3, #3
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	3208      	adds	r2, #8
 80056f0:	69b9      	ldr	r1, [r7, #24]
 80056f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	005b      	lsls	r3, r3, #1
 8005700:	2203      	movs	r2, #3
 8005702:	fa02 f303 	lsl.w	r3, r2, r3
 8005706:	43db      	mvns	r3, r3
 8005708:	69ba      	ldr	r2, [r7, #24]
 800570a:	4013      	ands	r3, r2
 800570c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	f003 0203 	and.w	r2, r3, #3
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	005b      	lsls	r3, r3, #1
 800571a:	fa02 f303 	lsl.w	r3, r2, r3
 800571e:	69ba      	ldr	r2, [r7, #24]
 8005720:	4313      	orrs	r3, r2
 8005722:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	69ba      	ldr	r2, [r7, #24]
 8005728:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005732:	2b00      	cmp	r3, #0
 8005734:	f000 80e0 	beq.w	80058f8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005738:	4b2f      	ldr	r3, [pc, #188]	; (80057f8 <HAL_GPIO_Init+0x238>)
 800573a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800573e:	4a2e      	ldr	r2, [pc, #184]	; (80057f8 <HAL_GPIO_Init+0x238>)
 8005740:	f043 0302 	orr.w	r3, r3, #2
 8005744:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005748:	4b2b      	ldr	r3, [pc, #172]	; (80057f8 <HAL_GPIO_Init+0x238>)
 800574a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800574e:	f003 0302 	and.w	r3, r3, #2
 8005752:	60fb      	str	r3, [r7, #12]
 8005754:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005756:	4a29      	ldr	r2, [pc, #164]	; (80057fc <HAL_GPIO_Init+0x23c>)
 8005758:	69fb      	ldr	r3, [r7, #28]
 800575a:	089b      	lsrs	r3, r3, #2
 800575c:	3302      	adds	r3, #2
 800575e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005762:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005764:	69fb      	ldr	r3, [r7, #28]
 8005766:	f003 0303 	and.w	r3, r3, #3
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	220f      	movs	r2, #15
 800576e:	fa02 f303 	lsl.w	r3, r2, r3
 8005772:	43db      	mvns	r3, r3
 8005774:	69ba      	ldr	r2, [r7, #24]
 8005776:	4013      	ands	r3, r2
 8005778:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4a20      	ldr	r2, [pc, #128]	; (8005800 <HAL_GPIO_Init+0x240>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d052      	beq.n	8005828 <HAL_GPIO_Init+0x268>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	4a1f      	ldr	r2, [pc, #124]	; (8005804 <HAL_GPIO_Init+0x244>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d031      	beq.n	80057ee <HAL_GPIO_Init+0x22e>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4a1e      	ldr	r2, [pc, #120]	; (8005808 <HAL_GPIO_Init+0x248>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d02b      	beq.n	80057ea <HAL_GPIO_Init+0x22a>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	4a1d      	ldr	r2, [pc, #116]	; (800580c <HAL_GPIO_Init+0x24c>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d025      	beq.n	80057e6 <HAL_GPIO_Init+0x226>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4a1c      	ldr	r2, [pc, #112]	; (8005810 <HAL_GPIO_Init+0x250>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d01f      	beq.n	80057e2 <HAL_GPIO_Init+0x222>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	4a1b      	ldr	r2, [pc, #108]	; (8005814 <HAL_GPIO_Init+0x254>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d019      	beq.n	80057de <HAL_GPIO_Init+0x21e>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4a1a      	ldr	r2, [pc, #104]	; (8005818 <HAL_GPIO_Init+0x258>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d013      	beq.n	80057da <HAL_GPIO_Init+0x21a>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a19      	ldr	r2, [pc, #100]	; (800581c <HAL_GPIO_Init+0x25c>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d00d      	beq.n	80057d6 <HAL_GPIO_Init+0x216>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4a18      	ldr	r2, [pc, #96]	; (8005820 <HAL_GPIO_Init+0x260>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d007      	beq.n	80057d2 <HAL_GPIO_Init+0x212>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a17      	ldr	r2, [pc, #92]	; (8005824 <HAL_GPIO_Init+0x264>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d101      	bne.n	80057ce <HAL_GPIO_Init+0x20e>
 80057ca:	2309      	movs	r3, #9
 80057cc:	e02d      	b.n	800582a <HAL_GPIO_Init+0x26a>
 80057ce:	230a      	movs	r3, #10
 80057d0:	e02b      	b.n	800582a <HAL_GPIO_Init+0x26a>
 80057d2:	2308      	movs	r3, #8
 80057d4:	e029      	b.n	800582a <HAL_GPIO_Init+0x26a>
 80057d6:	2307      	movs	r3, #7
 80057d8:	e027      	b.n	800582a <HAL_GPIO_Init+0x26a>
 80057da:	2306      	movs	r3, #6
 80057dc:	e025      	b.n	800582a <HAL_GPIO_Init+0x26a>
 80057de:	2305      	movs	r3, #5
 80057e0:	e023      	b.n	800582a <HAL_GPIO_Init+0x26a>
 80057e2:	2304      	movs	r3, #4
 80057e4:	e021      	b.n	800582a <HAL_GPIO_Init+0x26a>
 80057e6:	2303      	movs	r3, #3
 80057e8:	e01f      	b.n	800582a <HAL_GPIO_Init+0x26a>
 80057ea:	2302      	movs	r3, #2
 80057ec:	e01d      	b.n	800582a <HAL_GPIO_Init+0x26a>
 80057ee:	2301      	movs	r3, #1
 80057f0:	e01b      	b.n	800582a <HAL_GPIO_Init+0x26a>
 80057f2:	bf00      	nop
 80057f4:	58000080 	.word	0x58000080
 80057f8:	58024400 	.word	0x58024400
 80057fc:	58000400 	.word	0x58000400
 8005800:	58020000 	.word	0x58020000
 8005804:	58020400 	.word	0x58020400
 8005808:	58020800 	.word	0x58020800
 800580c:	58020c00 	.word	0x58020c00
 8005810:	58021000 	.word	0x58021000
 8005814:	58021400 	.word	0x58021400
 8005818:	58021800 	.word	0x58021800
 800581c:	58021c00 	.word	0x58021c00
 8005820:	58022000 	.word	0x58022000
 8005824:	58022400 	.word	0x58022400
 8005828:	2300      	movs	r3, #0
 800582a:	69fa      	ldr	r2, [r7, #28]
 800582c:	f002 0203 	and.w	r2, r2, #3
 8005830:	0092      	lsls	r2, r2, #2
 8005832:	4093      	lsls	r3, r2
 8005834:	69ba      	ldr	r2, [r7, #24]
 8005836:	4313      	orrs	r3, r2
 8005838:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800583a:	4938      	ldr	r1, [pc, #224]	; (800591c <HAL_GPIO_Init+0x35c>)
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	089b      	lsrs	r3, r3, #2
 8005840:	3302      	adds	r3, #2
 8005842:	69ba      	ldr	r2, [r7, #24]
 8005844:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	43db      	mvns	r3, r3
 8005852:	69ba      	ldr	r2, [r7, #24]
 8005854:	4013      	ands	r3, r2
 8005856:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005860:	2b00      	cmp	r3, #0
 8005862:	d003      	beq.n	800586c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005864:	69ba      	ldr	r2, [r7, #24]
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	4313      	orrs	r3, r2
 800586a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	69ba      	ldr	r2, [r7, #24]
 8005870:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	43db      	mvns	r3, r3
 800587c:	69ba      	ldr	r2, [r7, #24]
 800587e:	4013      	ands	r3, r2
 8005880:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800588a:	2b00      	cmp	r3, #0
 800588c:	d003      	beq.n	8005896 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800588e:	69ba      	ldr	r2, [r7, #24]
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	4313      	orrs	r3, r2
 8005894:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	69ba      	ldr	r2, [r7, #24]
 800589a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800589c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	43db      	mvns	r3, r3
 80058a8:	69ba      	ldr	r2, [r7, #24]
 80058aa:	4013      	ands	r3, r2
 80058ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d003      	beq.n	80058c2 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80058ba:	69ba      	ldr	r2, [r7, #24]
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	4313      	orrs	r3, r2
 80058c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80058c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058c6:	69bb      	ldr	r3, [r7, #24]
 80058c8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80058ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	43db      	mvns	r3, r3
 80058d6:	69ba      	ldr	r2, [r7, #24]
 80058d8:	4013      	ands	r3, r2
 80058da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d003      	beq.n	80058f0 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80058e8:	69ba      	ldr	r2, [r7, #24]
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	4313      	orrs	r3, r2
 80058ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80058f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058f4:	69bb      	ldr	r3, [r7, #24]
 80058f6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	3301      	adds	r3, #1
 80058fc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	69fb      	ldr	r3, [r7, #28]
 8005904:	fa22 f303 	lsr.w	r3, r2, r3
 8005908:	2b00      	cmp	r3, #0
 800590a:	f47f ae63 	bne.w	80055d4 <HAL_GPIO_Init+0x14>
  }
}
 800590e:	bf00      	nop
 8005910:	3724      	adds	r7, #36	; 0x24
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr
 800591a:	bf00      	nop
 800591c:	58000400 	.word	0x58000400

08005920 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005920:	b480      	push	{r7}
 8005922:	b085      	sub	sp, #20
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	460b      	mov	r3, r1
 800592a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	691a      	ldr	r2, [r3, #16]
 8005930:	887b      	ldrh	r3, [r7, #2]
 8005932:	4013      	ands	r3, r2
 8005934:	2b00      	cmp	r3, #0
 8005936:	d002      	beq.n	800593e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005938:	2301      	movs	r3, #1
 800593a:	73fb      	strb	r3, [r7, #15]
 800593c:	e001      	b.n	8005942 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800593e:	2300      	movs	r3, #0
 8005940:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005942:	7bfb      	ldrb	r3, [r7, #15]
}
 8005944:	4618      	mov	r0, r3
 8005946:	3714      	adds	r7, #20
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	460b      	mov	r3, r1
 800595a:	807b      	strh	r3, [r7, #2]
 800595c:	4613      	mov	r3, r2
 800595e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005960:	787b      	ldrb	r3, [r7, #1]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d003      	beq.n	800596e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005966:	887a      	ldrh	r2, [r7, #2]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800596c:	e003      	b.n	8005976 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800596e:	887b      	ldrh	r3, [r7, #2]
 8005970:	041a      	lsls	r2, r3, #16
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	619a      	str	r2, [r3, #24]
}
 8005976:	bf00      	nop
 8005978:	370c      	adds	r7, #12
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr

08005982 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005982:	b480      	push	{r7}
 8005984:	b083      	sub	sp, #12
 8005986:	af00      	add	r7, sp, #0
 8005988:	6078      	str	r0, [r7, #4]
 800598a:	460b      	mov	r3, r1
 800598c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	695a      	ldr	r2, [r3, #20]
 8005992:	887b      	ldrh	r3, [r7, #2]
 8005994:	401a      	ands	r2, r3
 8005996:	887b      	ldrh	r3, [r7, #2]
 8005998:	429a      	cmp	r2, r3
 800599a:	d104      	bne.n	80059a6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800599c:	887b      	ldrh	r3, [r7, #2]
 800599e:	041a      	lsls	r2, r3, #16
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80059a4:	e002      	b.n	80059ac <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80059a6:	887a      	ldrh	r2, [r7, #2]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	619a      	str	r2, [r3, #24]
}
 80059ac:	bf00      	nop
 80059ae:	370c      	adds	r7, #12
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr

080059b8 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b085      	sub	sp, #20
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80059c0:	4b0d      	ldr	r3, [pc, #52]	; (80059f8 <HAL_I2CEx_EnableFastModePlus+0x40>)
 80059c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80059c6:	4a0c      	ldr	r2, [pc, #48]	; (80059f8 <HAL_I2CEx_EnableFastModePlus+0x40>)
 80059c8:	f043 0302 	orr.w	r3, r3, #2
 80059cc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80059d0:	4b09      	ldr	r3, [pc, #36]	; (80059f8 <HAL_I2CEx_EnableFastModePlus+0x40>)
 80059d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80059d6:	f003 0302 	and.w	r3, r3, #2
 80059da:	60fb      	str	r3, [r7, #12]
 80059dc:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 80059de:	4b07      	ldr	r3, [pc, #28]	; (80059fc <HAL_I2CEx_EnableFastModePlus+0x44>)
 80059e0:	685a      	ldr	r2, [r3, #4]
 80059e2:	4906      	ldr	r1, [pc, #24]	; (80059fc <HAL_I2CEx_EnableFastModePlus+0x44>)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	604b      	str	r3, [r1, #4]
}
 80059ea:	bf00      	nop
 80059ec:	3714      	adds	r7, #20
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr
 80059f6:	bf00      	nop
 80059f8:	58024400 	.word	0x58024400
 80059fc:	58000400 	.word	0x58000400

08005a00 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005a00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a02:	b08f      	sub	sp, #60	; 0x3c
 8005a04:	af0a      	add	r7, sp, #40	; 0x28
 8005a06:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d101      	bne.n	8005a12 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e116      	b.n	8005c40 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005a1e:	b2db      	uxtb	r3, r3
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d106      	bne.n	8005a32 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f00f fde1 	bl	80155f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2203      	movs	r2, #3
 8005a36:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d102      	bne.n	8005a4c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4618      	mov	r0, r3
 8005a52:	f008 fde6 	bl	800e622 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	603b      	str	r3, [r7, #0]
 8005a5c:	687e      	ldr	r6, [r7, #4]
 8005a5e:	466d      	mov	r5, sp
 8005a60:	f106 0410 	add.w	r4, r6, #16
 8005a64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a6c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005a70:	e885 0003 	stmia.w	r5, {r0, r1}
 8005a74:	1d33      	adds	r3, r6, #4
 8005a76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005a78:	6838      	ldr	r0, [r7, #0]
 8005a7a:	f008 fcbd 	bl	800e3f8 <USB_CoreInit>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d005      	beq.n	8005a90 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2202      	movs	r2, #2
 8005a88:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e0d7      	b.n	8005c40 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	2100      	movs	r1, #0
 8005a96:	4618      	mov	r0, r3
 8005a98:	f008 fdd4 	bl	800e644 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	73fb      	strb	r3, [r7, #15]
 8005aa0:	e04a      	b.n	8005b38 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005aa2:	7bfa      	ldrb	r2, [r7, #15]
 8005aa4:	6879      	ldr	r1, [r7, #4]
 8005aa6:	4613      	mov	r3, r2
 8005aa8:	00db      	lsls	r3, r3, #3
 8005aaa:	1a9b      	subs	r3, r3, r2
 8005aac:	009b      	lsls	r3, r3, #2
 8005aae:	440b      	add	r3, r1
 8005ab0:	333d      	adds	r3, #61	; 0x3d
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005ab6:	7bfa      	ldrb	r2, [r7, #15]
 8005ab8:	6879      	ldr	r1, [r7, #4]
 8005aba:	4613      	mov	r3, r2
 8005abc:	00db      	lsls	r3, r3, #3
 8005abe:	1a9b      	subs	r3, r3, r2
 8005ac0:	009b      	lsls	r3, r3, #2
 8005ac2:	440b      	add	r3, r1
 8005ac4:	333c      	adds	r3, #60	; 0x3c
 8005ac6:	7bfa      	ldrb	r2, [r7, #15]
 8005ac8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005aca:	7bfa      	ldrb	r2, [r7, #15]
 8005acc:	7bfb      	ldrb	r3, [r7, #15]
 8005ace:	b298      	uxth	r0, r3
 8005ad0:	6879      	ldr	r1, [r7, #4]
 8005ad2:	4613      	mov	r3, r2
 8005ad4:	00db      	lsls	r3, r3, #3
 8005ad6:	1a9b      	subs	r3, r3, r2
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	440b      	add	r3, r1
 8005adc:	3342      	adds	r3, #66	; 0x42
 8005ade:	4602      	mov	r2, r0
 8005ae0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005ae2:	7bfa      	ldrb	r2, [r7, #15]
 8005ae4:	6879      	ldr	r1, [r7, #4]
 8005ae6:	4613      	mov	r3, r2
 8005ae8:	00db      	lsls	r3, r3, #3
 8005aea:	1a9b      	subs	r3, r3, r2
 8005aec:	009b      	lsls	r3, r3, #2
 8005aee:	440b      	add	r3, r1
 8005af0:	333f      	adds	r3, #63	; 0x3f
 8005af2:	2200      	movs	r2, #0
 8005af4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005af6:	7bfa      	ldrb	r2, [r7, #15]
 8005af8:	6879      	ldr	r1, [r7, #4]
 8005afa:	4613      	mov	r3, r2
 8005afc:	00db      	lsls	r3, r3, #3
 8005afe:	1a9b      	subs	r3, r3, r2
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	440b      	add	r3, r1
 8005b04:	3344      	adds	r3, #68	; 0x44
 8005b06:	2200      	movs	r2, #0
 8005b08:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005b0a:	7bfa      	ldrb	r2, [r7, #15]
 8005b0c:	6879      	ldr	r1, [r7, #4]
 8005b0e:	4613      	mov	r3, r2
 8005b10:	00db      	lsls	r3, r3, #3
 8005b12:	1a9b      	subs	r3, r3, r2
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	440b      	add	r3, r1
 8005b18:	3348      	adds	r3, #72	; 0x48
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005b1e:	7bfa      	ldrb	r2, [r7, #15]
 8005b20:	6879      	ldr	r1, [r7, #4]
 8005b22:	4613      	mov	r3, r2
 8005b24:	00db      	lsls	r3, r3, #3
 8005b26:	1a9b      	subs	r3, r3, r2
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	440b      	add	r3, r1
 8005b2c:	3350      	adds	r3, #80	; 0x50
 8005b2e:	2200      	movs	r2, #0
 8005b30:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b32:	7bfb      	ldrb	r3, [r7, #15]
 8005b34:	3301      	adds	r3, #1
 8005b36:	73fb      	strb	r3, [r7, #15]
 8005b38:	7bfa      	ldrb	r2, [r7, #15]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d3af      	bcc.n	8005aa2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b42:	2300      	movs	r3, #0
 8005b44:	73fb      	strb	r3, [r7, #15]
 8005b46:	e044      	b.n	8005bd2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005b48:	7bfa      	ldrb	r2, [r7, #15]
 8005b4a:	6879      	ldr	r1, [r7, #4]
 8005b4c:	4613      	mov	r3, r2
 8005b4e:	00db      	lsls	r3, r3, #3
 8005b50:	1a9b      	subs	r3, r3, r2
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	440b      	add	r3, r1
 8005b56:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005b5e:	7bfa      	ldrb	r2, [r7, #15]
 8005b60:	6879      	ldr	r1, [r7, #4]
 8005b62:	4613      	mov	r3, r2
 8005b64:	00db      	lsls	r3, r3, #3
 8005b66:	1a9b      	subs	r3, r3, r2
 8005b68:	009b      	lsls	r3, r3, #2
 8005b6a:	440b      	add	r3, r1
 8005b6c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005b70:	7bfa      	ldrb	r2, [r7, #15]
 8005b72:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005b74:	7bfa      	ldrb	r2, [r7, #15]
 8005b76:	6879      	ldr	r1, [r7, #4]
 8005b78:	4613      	mov	r3, r2
 8005b7a:	00db      	lsls	r3, r3, #3
 8005b7c:	1a9b      	subs	r3, r3, r2
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	440b      	add	r3, r1
 8005b82:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005b86:	2200      	movs	r2, #0
 8005b88:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005b8a:	7bfa      	ldrb	r2, [r7, #15]
 8005b8c:	6879      	ldr	r1, [r7, #4]
 8005b8e:	4613      	mov	r3, r2
 8005b90:	00db      	lsls	r3, r3, #3
 8005b92:	1a9b      	subs	r3, r3, r2
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	440b      	add	r3, r1
 8005b98:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005ba0:	7bfa      	ldrb	r2, [r7, #15]
 8005ba2:	6879      	ldr	r1, [r7, #4]
 8005ba4:	4613      	mov	r3, r2
 8005ba6:	00db      	lsls	r3, r3, #3
 8005ba8:	1a9b      	subs	r3, r3, r2
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	440b      	add	r3, r1
 8005bae:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005bb6:	7bfa      	ldrb	r2, [r7, #15]
 8005bb8:	6879      	ldr	r1, [r7, #4]
 8005bba:	4613      	mov	r3, r2
 8005bbc:	00db      	lsls	r3, r3, #3
 8005bbe:	1a9b      	subs	r3, r3, r2
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	440b      	add	r3, r1
 8005bc4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005bc8:	2200      	movs	r2, #0
 8005bca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005bcc:	7bfb      	ldrb	r3, [r7, #15]
 8005bce:	3301      	adds	r3, #1
 8005bd0:	73fb      	strb	r3, [r7, #15]
 8005bd2:	7bfa      	ldrb	r2, [r7, #15]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d3b5      	bcc.n	8005b48 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	603b      	str	r3, [r7, #0]
 8005be2:	687e      	ldr	r6, [r7, #4]
 8005be4:	466d      	mov	r5, sp
 8005be6:	f106 0410 	add.w	r4, r6, #16
 8005bea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005bec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005bee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005bf0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005bf2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005bf6:	e885 0003 	stmia.w	r5, {r0, r1}
 8005bfa:	1d33      	adds	r3, r6, #4
 8005bfc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005bfe:	6838      	ldr	r0, [r7, #0]
 8005c00:	f008 fd4a 	bl	800e698 <USB_DevInit>
 8005c04:	4603      	mov	r3, r0
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d005      	beq.n	8005c16 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2202      	movs	r2, #2
 8005c0e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	e014      	b.n	8005c40 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2201      	movs	r2, #1
 8005c22:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d102      	bne.n	8005c34 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f001 f8be 	bl	8006db0 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f009 fd89 	bl	800f750 <USB_DevDisconnect>

  return HAL_OK;
 8005c3e:	2300      	movs	r3, #0
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3714      	adds	r7, #20
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005c48 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b084      	sub	sp, #16
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d101      	bne.n	8005c64 <HAL_PCD_Start+0x1c>
 8005c60:	2302      	movs	r3, #2
 8005c62:	e020      	b.n	8005ca6 <HAL_PCD_Start+0x5e>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d109      	bne.n	8005c88 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d005      	beq.n	8005c88 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c80:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f009 fd47 	bl	800f720 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4618      	mov	r0, r3
 8005c98:	f008 fcb2 	bl	800e600 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005ca4:	2300      	movs	r3, #0
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3710      	adds	r7, #16
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}

08005cae <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005cae:	b590      	push	{r4, r7, lr}
 8005cb0:	b08d      	sub	sp, #52	; 0x34
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cbc:	6a3b      	ldr	r3, [r7, #32]
 8005cbe:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f009 fdee 	bl	800f8a6 <USB_GetMode>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	f040 83ca 	bne.w	8006466 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f009 fd52 	bl	800f780 <USB_ReadInterrupts>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	f000 83c0 	beq.w	8006464 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f009 fd49 	bl	800f780 <USB_ReadInterrupts>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	f003 0302 	and.w	r3, r3, #2
 8005cf4:	2b02      	cmp	r3, #2
 8005cf6:	d107      	bne.n	8005d08 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	695a      	ldr	r2, [r3, #20]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f002 0202 	and.w	r2, r2, #2
 8005d06:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f009 fd37 	bl	800f780 <USB_ReadInterrupts>
 8005d12:	4603      	mov	r3, r0
 8005d14:	f003 0310 	and.w	r3, r3, #16
 8005d18:	2b10      	cmp	r3, #16
 8005d1a:	d161      	bne.n	8005de0 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	699a      	ldr	r2, [r3, #24]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f022 0210 	bic.w	r2, r2, #16
 8005d2a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8005d2c:	6a3b      	ldr	r3, [r7, #32]
 8005d2e:	6a1b      	ldr	r3, [r3, #32]
 8005d30:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8005d32:	69bb      	ldr	r3, [r7, #24]
 8005d34:	f003 020f 	and.w	r2, r3, #15
 8005d38:	4613      	mov	r3, r2
 8005d3a:	00db      	lsls	r3, r3, #3
 8005d3c:	1a9b      	subs	r3, r3, r2
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	4413      	add	r3, r2
 8005d48:	3304      	adds	r3, #4
 8005d4a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	0c5b      	lsrs	r3, r3, #17
 8005d50:	f003 030f 	and.w	r3, r3, #15
 8005d54:	2b02      	cmp	r3, #2
 8005d56:	d124      	bne.n	8005da2 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005d58:	69ba      	ldr	r2, [r7, #24]
 8005d5a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005d5e:	4013      	ands	r3, r2
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d035      	beq.n	8005dd0 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005d68:	69bb      	ldr	r3, [r7, #24]
 8005d6a:	091b      	lsrs	r3, r3, #4
 8005d6c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005d6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	461a      	mov	r2, r3
 8005d76:	6a38      	ldr	r0, [r7, #32]
 8005d78:	f009 fbaf 	bl	800f4da <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	68da      	ldr	r2, [r3, #12]
 8005d80:	69bb      	ldr	r3, [r7, #24]
 8005d82:	091b      	lsrs	r3, r3, #4
 8005d84:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005d88:	441a      	add	r2, r3
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	699a      	ldr	r2, [r3, #24]
 8005d92:	69bb      	ldr	r3, [r7, #24]
 8005d94:	091b      	lsrs	r3, r3, #4
 8005d96:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005d9a:	441a      	add	r2, r3
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	619a      	str	r2, [r3, #24]
 8005da0:	e016      	b.n	8005dd0 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8005da2:	69bb      	ldr	r3, [r7, #24]
 8005da4:	0c5b      	lsrs	r3, r3, #17
 8005da6:	f003 030f 	and.w	r3, r3, #15
 8005daa:	2b06      	cmp	r3, #6
 8005dac:	d110      	bne.n	8005dd0 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005db4:	2208      	movs	r2, #8
 8005db6:	4619      	mov	r1, r3
 8005db8:	6a38      	ldr	r0, [r7, #32]
 8005dba:	f009 fb8e 	bl	800f4da <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	699a      	ldr	r2, [r3, #24]
 8005dc2:	69bb      	ldr	r3, [r7, #24]
 8005dc4:	091b      	lsrs	r3, r3, #4
 8005dc6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005dca:	441a      	add	r2, r3
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	699a      	ldr	r2, [r3, #24]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f042 0210 	orr.w	r2, r2, #16
 8005dde:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4618      	mov	r0, r3
 8005de6:	f009 fccb 	bl	800f780 <USB_ReadInterrupts>
 8005dea:	4603      	mov	r3, r0
 8005dec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005df0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005df4:	d16e      	bne.n	8005ed4 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8005df6:	2300      	movs	r3, #0
 8005df8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f009 fcd1 	bl	800f7a6 <USB_ReadDevAllOutEpInterrupt>
 8005e04:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005e06:	e062      	b.n	8005ece <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e0a:	f003 0301 	and.w	r3, r3, #1
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d057      	beq.n	8005ec2 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e18:	b2d2      	uxtb	r2, r2
 8005e1a:	4611      	mov	r1, r2
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f009 fcf6 	bl	800f80e <USB_ReadDevOutEPInterrupt>
 8005e22:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	f003 0301 	and.w	r3, r3, #1
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d00c      	beq.n	8005e48 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e30:	015a      	lsls	r2, r3, #5
 8005e32:	69fb      	ldr	r3, [r7, #28]
 8005e34:	4413      	add	r3, r2
 8005e36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005e40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f000 fe0a 	bl	8006a5c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	f003 0308 	and.w	r3, r3, #8
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d00c      	beq.n	8005e6c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e54:	015a      	lsls	r2, r3, #5
 8005e56:	69fb      	ldr	r3, [r7, #28]
 8005e58:	4413      	add	r3, r2
 8005e5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e5e:	461a      	mov	r2, r3
 8005e60:	2308      	movs	r3, #8
 8005e62:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005e64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f000 ff04 	bl	8006c74 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	f003 0310 	and.w	r3, r3, #16
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d008      	beq.n	8005e88 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e78:	015a      	lsls	r2, r3, #5
 8005e7a:	69fb      	ldr	r3, [r7, #28]
 8005e7c:	4413      	add	r3, r2
 8005e7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e82:	461a      	mov	r2, r3
 8005e84:	2310      	movs	r3, #16
 8005e86:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	f003 0320 	and.w	r3, r3, #32
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d008      	beq.n	8005ea4 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e94:	015a      	lsls	r2, r3, #5
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	4413      	add	r3, r2
 8005e9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	2320      	movs	r3, #32
 8005ea2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d009      	beq.n	8005ec2 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb0:	015a      	lsls	r2, r3, #5
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	4413      	add	r3, r2
 8005eb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eba:	461a      	mov	r2, r3
 8005ebc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005ec0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec4:	3301      	adds	r3, #1
 8005ec6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eca:	085b      	lsrs	r3, r3, #1
 8005ecc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d199      	bne.n	8005e08 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f009 fc51 	bl	800f780 <USB_ReadInterrupts>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ee4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005ee8:	f040 80c0 	bne.w	800606c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f009 fc72 	bl	800f7da <USB_ReadDevAllInEpInterrupt>
 8005ef6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005efc:	e0b2      	b.n	8006064 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f00:	f003 0301 	and.w	r3, r3, #1
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	f000 80a7 	beq.w	8006058 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f10:	b2d2      	uxtb	r2, r2
 8005f12:	4611      	mov	r1, r2
 8005f14:	4618      	mov	r0, r3
 8005f16:	f009 fc98 	bl	800f84a <USB_ReadDevInEPInterrupt>
 8005f1a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	f003 0301 	and.w	r3, r3, #1
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d057      	beq.n	8005fd6 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f28:	f003 030f 	and.w	r3, r3, #15
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f32:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005f34:	69fb      	ldr	r3, [r7, #28]
 8005f36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	43db      	mvns	r3, r3
 8005f40:	69f9      	ldr	r1, [r7, #28]
 8005f42:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f46:	4013      	ands	r3, r2
 8005f48:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4c:	015a      	lsls	r2, r3, #5
 8005f4e:	69fb      	ldr	r3, [r7, #28]
 8005f50:	4413      	add	r3, r2
 8005f52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f56:	461a      	mov	r2, r3
 8005f58:	2301      	movs	r3, #1
 8005f5a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	691b      	ldr	r3, [r3, #16]
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d132      	bne.n	8005fca <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005f64:	6879      	ldr	r1, [r7, #4]
 8005f66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f68:	4613      	mov	r3, r2
 8005f6a:	00db      	lsls	r3, r3, #3
 8005f6c:	1a9b      	subs	r3, r3, r2
 8005f6e:	009b      	lsls	r3, r3, #2
 8005f70:	440b      	add	r3, r1
 8005f72:	3348      	adds	r3, #72	; 0x48
 8005f74:	6819      	ldr	r1, [r3, #0]
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f7a:	4613      	mov	r3, r2
 8005f7c:	00db      	lsls	r3, r3, #3
 8005f7e:	1a9b      	subs	r3, r3, r2
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	4403      	add	r3, r0
 8005f84:	3344      	adds	r3, #68	; 0x44
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4419      	add	r1, r3
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f8e:	4613      	mov	r3, r2
 8005f90:	00db      	lsls	r3, r3, #3
 8005f92:	1a9b      	subs	r3, r3, r2
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	4403      	add	r3, r0
 8005f98:	3348      	adds	r3, #72	; 0x48
 8005f9a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d113      	bne.n	8005fca <HAL_PCD_IRQHandler+0x31c>
 8005fa2:	6879      	ldr	r1, [r7, #4]
 8005fa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fa6:	4613      	mov	r3, r2
 8005fa8:	00db      	lsls	r3, r3, #3
 8005faa:	1a9b      	subs	r3, r3, r2
 8005fac:	009b      	lsls	r3, r3, #2
 8005fae:	440b      	add	r3, r1
 8005fb0:	3350      	adds	r3, #80	; 0x50
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d108      	bne.n	8005fca <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6818      	ldr	r0, [r3, #0]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	2101      	movs	r1, #1
 8005fc6:	f009 fca1 	bl	800f90c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fcc:	b2db      	uxtb	r3, r3
 8005fce:	4619      	mov	r1, r3
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f00f fb8e 	bl	80156f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	f003 0308 	and.w	r3, r3, #8
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d008      	beq.n	8005ff2 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe2:	015a      	lsls	r2, r3, #5
 8005fe4:	69fb      	ldr	r3, [r7, #28]
 8005fe6:	4413      	add	r3, r2
 8005fe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fec:	461a      	mov	r2, r3
 8005fee:	2308      	movs	r3, #8
 8005ff0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	f003 0310 	and.w	r3, r3, #16
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d008      	beq.n	800600e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffe:	015a      	lsls	r2, r3, #5
 8006000:	69fb      	ldr	r3, [r7, #28]
 8006002:	4413      	add	r3, r2
 8006004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006008:	461a      	mov	r2, r3
 800600a:	2310      	movs	r3, #16
 800600c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006014:	2b00      	cmp	r3, #0
 8006016:	d008      	beq.n	800602a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800601a:	015a      	lsls	r2, r3, #5
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	4413      	add	r3, r2
 8006020:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006024:	461a      	mov	r2, r3
 8006026:	2340      	movs	r3, #64	; 0x40
 8006028:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	f003 0302 	and.w	r3, r3, #2
 8006030:	2b00      	cmp	r3, #0
 8006032:	d008      	beq.n	8006046 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006036:	015a      	lsls	r2, r3, #5
 8006038:	69fb      	ldr	r3, [r7, #28]
 800603a:	4413      	add	r3, r2
 800603c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006040:	461a      	mov	r2, r3
 8006042:	2302      	movs	r3, #2
 8006044:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800604c:	2b00      	cmp	r3, #0
 800604e:	d003      	beq.n	8006058 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006050:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 fc75 	bl	8006942 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605a:	3301      	adds	r3, #1
 800605c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800605e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006060:	085b      	lsrs	r3, r3, #1
 8006062:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006066:	2b00      	cmp	r3, #0
 8006068:	f47f af49 	bne.w	8005efe <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4618      	mov	r0, r3
 8006072:	f009 fb85 	bl	800f780 <USB_ReadInterrupts>
 8006076:	4603      	mov	r3, r0
 8006078:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800607c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006080:	d122      	bne.n	80060c8 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	69fa      	ldr	r2, [r7, #28]
 800608c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006090:	f023 0301 	bic.w	r3, r3, #1
 8006094:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800609c:	2b01      	cmp	r3, #1
 800609e:	d108      	bne.n	80060b2 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2200      	movs	r2, #0
 80060a4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80060a8:	2100      	movs	r1, #0
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f000 fea4 	bl	8006df8 <HAL_PCDEx_LPM_Callback>
 80060b0:	e002      	b.n	80060b8 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f00f fb94 	bl	80157e0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	695a      	ldr	r2, [r3, #20]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80060c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4618      	mov	r0, r3
 80060ce:	f009 fb57 	bl	800f780 <USB_ReadInterrupts>
 80060d2:	4603      	mov	r3, r0
 80060d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060dc:	d112      	bne.n	8006104 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80060de:	69fb      	ldr	r3, [r7, #28]
 80060e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	f003 0301 	and.w	r3, r3, #1
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d102      	bne.n	80060f4 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f00f fb50 	bl	8015794 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	695a      	ldr	r2, [r3, #20]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006102:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4618      	mov	r0, r3
 800610a:	f009 fb39 	bl	800f780 <USB_ReadInterrupts>
 800610e:	4603      	mov	r3, r0
 8006110:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006114:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006118:	d121      	bne.n	800615e <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	695a      	ldr	r2, [r3, #20]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8006128:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8006130:	2b00      	cmp	r3, #0
 8006132:	d111      	bne.n	8006158 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2201      	movs	r2, #1
 8006138:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006142:	089b      	lsrs	r3, r3, #2
 8006144:	f003 020f 	and.w	r2, r3, #15
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800614e:	2101      	movs	r1, #1
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f000 fe51 	bl	8006df8 <HAL_PCDEx_LPM_Callback>
 8006156:	e002      	b.n	800615e <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f00f fb1b 	bl	8015794 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4618      	mov	r0, r3
 8006164:	f009 fb0c 	bl	800f780 <USB_ReadInterrupts>
 8006168:	4603      	mov	r3, r0
 800616a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800616e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006172:	f040 80c7 	bne.w	8006304 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006176:	69fb      	ldr	r3, [r7, #28]
 8006178:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	69fa      	ldr	r2, [r7, #28]
 8006180:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006184:	f023 0301 	bic.w	r3, r3, #1
 8006188:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	2110      	movs	r1, #16
 8006190:	4618      	mov	r0, r3
 8006192:	f008 fbdf 	bl	800e954 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006196:	2300      	movs	r3, #0
 8006198:	62fb      	str	r3, [r7, #44]	; 0x2c
 800619a:	e056      	b.n	800624a <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800619c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800619e:	015a      	lsls	r2, r3, #5
 80061a0:	69fb      	ldr	r3, [r7, #28]
 80061a2:	4413      	add	r3, r2
 80061a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061a8:	461a      	mov	r2, r3
 80061aa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80061ae:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80061b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b2:	015a      	lsls	r2, r3, #5
 80061b4:	69fb      	ldr	r3, [r7, #28]
 80061b6:	4413      	add	r3, r2
 80061b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061c0:	0151      	lsls	r1, r2, #5
 80061c2:	69fa      	ldr	r2, [r7, #28]
 80061c4:	440a      	add	r2, r1
 80061c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80061ce:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80061d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d2:	015a      	lsls	r2, r3, #5
 80061d4:	69fb      	ldr	r3, [r7, #28]
 80061d6:	4413      	add	r3, r2
 80061d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061e0:	0151      	lsls	r1, r2, #5
 80061e2:	69fa      	ldr	r2, [r7, #28]
 80061e4:	440a      	add	r2, r1
 80061e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80061ee:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80061f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061f2:	015a      	lsls	r2, r3, #5
 80061f4:	69fb      	ldr	r3, [r7, #28]
 80061f6:	4413      	add	r3, r2
 80061f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061fc:	461a      	mov	r2, r3
 80061fe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006202:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006206:	015a      	lsls	r2, r3, #5
 8006208:	69fb      	ldr	r3, [r7, #28]
 800620a:	4413      	add	r3, r2
 800620c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006214:	0151      	lsls	r1, r2, #5
 8006216:	69fa      	ldr	r2, [r7, #28]
 8006218:	440a      	add	r2, r1
 800621a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800621e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006222:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006226:	015a      	lsls	r2, r3, #5
 8006228:	69fb      	ldr	r3, [r7, #28]
 800622a:	4413      	add	r3, r2
 800622c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006234:	0151      	lsls	r1, r2, #5
 8006236:	69fa      	ldr	r2, [r7, #28]
 8006238:	440a      	add	r2, r1
 800623a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800623e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006242:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006246:	3301      	adds	r3, #1
 8006248:	62fb      	str	r3, [r7, #44]	; 0x2c
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006250:	429a      	cmp	r2, r3
 8006252:	d3a3      	bcc.n	800619c <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006254:	69fb      	ldr	r3, [r7, #28]
 8006256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800625a:	69db      	ldr	r3, [r3, #28]
 800625c:	69fa      	ldr	r2, [r7, #28]
 800625e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006262:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006266:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800626c:	2b00      	cmp	r3, #0
 800626e:	d016      	beq.n	800629e <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006270:	69fb      	ldr	r3, [r7, #28]
 8006272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006276:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800627a:	69fa      	ldr	r2, [r7, #28]
 800627c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006280:	f043 030b 	orr.w	r3, r3, #11
 8006284:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006288:	69fb      	ldr	r3, [r7, #28]
 800628a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800628e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006290:	69fa      	ldr	r2, [r7, #28]
 8006292:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006296:	f043 030b 	orr.w	r3, r3, #11
 800629a:	6453      	str	r3, [r2, #68]	; 0x44
 800629c:	e015      	b.n	80062ca <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800629e:	69fb      	ldr	r3, [r7, #28]
 80062a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062a4:	695a      	ldr	r2, [r3, #20]
 80062a6:	69fb      	ldr	r3, [r7, #28]
 80062a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062ac:	4619      	mov	r1, r3
 80062ae:	f242 032b 	movw	r3, #8235	; 0x202b
 80062b2:	4313      	orrs	r3, r2
 80062b4:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80062b6:	69fb      	ldr	r3, [r7, #28]
 80062b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062bc:	691b      	ldr	r3, [r3, #16]
 80062be:	69fa      	ldr	r2, [r7, #28]
 80062c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062c4:	f043 030b 	orr.w	r3, r3, #11
 80062c8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80062ca:	69fb      	ldr	r3, [r7, #28]
 80062cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	69fa      	ldr	r2, [r7, #28]
 80062d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062d8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80062dc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6818      	ldr	r0, [r3, #0]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	691b      	ldr	r3, [r3, #16]
 80062e6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80062ee:	461a      	mov	r2, r3
 80062f0:	f009 fb0c 	bl	800f90c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	695a      	ldr	r2, [r3, #20]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006302:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4618      	mov	r0, r3
 800630a:	f009 fa39 	bl	800f780 <USB_ReadInterrupts>
 800630e:	4603      	mov	r3, r0
 8006310:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006314:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006318:	d124      	bne.n	8006364 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4618      	mov	r0, r3
 8006320:	f009 fad0 	bl	800f8c4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4618      	mov	r0, r3
 800632a:	f008 fb74 	bl	800ea16 <USB_GetDevSpeed>
 800632e:	4603      	mov	r3, r0
 8006330:	461a      	mov	r2, r3
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681c      	ldr	r4, [r3, #0]
 800633a:	f001 fd0b 	bl	8007d54 <HAL_RCC_GetHCLKFreq>
 800633e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006344:	b2db      	uxtb	r3, r3
 8006346:	461a      	mov	r2, r3
 8006348:	4620      	mov	r0, r4
 800634a:	f008 f8b7 	bl	800e4bc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f00f f9f7 	bl	8015742 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	695a      	ldr	r2, [r3, #20]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8006362:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4618      	mov	r0, r3
 800636a:	f009 fa09 	bl	800f780 <USB_ReadInterrupts>
 800636e:	4603      	mov	r3, r0
 8006370:	f003 0308 	and.w	r3, r3, #8
 8006374:	2b08      	cmp	r3, #8
 8006376:	d10a      	bne.n	800638e <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f00f f9d4 	bl	8015726 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	695a      	ldr	r2, [r3, #20]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f002 0208 	and.w	r2, r2, #8
 800638c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4618      	mov	r0, r3
 8006394:	f009 f9f4 	bl	800f780 <USB_ReadInterrupts>
 8006398:	4603      	mov	r3, r0
 800639a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800639e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063a2:	d10f      	bne.n	80063c4 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80063a4:	2300      	movs	r3, #0
 80063a6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80063a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063aa:	b2db      	uxtb	r3, r3
 80063ac:	4619      	mov	r1, r3
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f00f fa36 	bl	8015820 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	695a      	ldr	r2, [r3, #20]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80063c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4618      	mov	r0, r3
 80063ca:	f009 f9d9 	bl	800f780 <USB_ReadInterrupts>
 80063ce:	4603      	mov	r3, r0
 80063d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80063d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80063d8:	d10f      	bne.n	80063fa <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80063da:	2300      	movs	r3, #0
 80063dc:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80063de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	4619      	mov	r1, r3
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f00f fa09 	bl	80157fc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	695a      	ldr	r2, [r3, #20]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80063f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4618      	mov	r0, r3
 8006400:	f009 f9be 	bl	800f780 <USB_ReadInterrupts>
 8006404:	4603      	mov	r3, r0
 8006406:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800640a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800640e:	d10a      	bne.n	8006426 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f00f fa17 	bl	8015844 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	695a      	ldr	r2, [r3, #20]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006424:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4618      	mov	r0, r3
 800642c:	f009 f9a8 	bl	800f780 <USB_ReadInterrupts>
 8006430:	4603      	mov	r3, r0
 8006432:	f003 0304 	and.w	r3, r3, #4
 8006436:	2b04      	cmp	r3, #4
 8006438:	d115      	bne.n	8006466 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006442:	69bb      	ldr	r3, [r7, #24]
 8006444:	f003 0304 	and.w	r3, r3, #4
 8006448:	2b00      	cmp	r3, #0
 800644a:	d002      	beq.n	8006452 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f00f fa07 	bl	8015860 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	6859      	ldr	r1, [r3, #4]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	69ba      	ldr	r2, [r7, #24]
 800645e:	430a      	orrs	r2, r1
 8006460:	605a      	str	r2, [r3, #4]
 8006462:	e000      	b.n	8006466 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8006464:	bf00      	nop
    }
  }
}
 8006466:	3734      	adds	r7, #52	; 0x34
 8006468:	46bd      	mov	sp, r7
 800646a:	bd90      	pop	{r4, r7, pc}

0800646c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b082      	sub	sp, #8
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	460b      	mov	r3, r1
 8006476:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800647e:	2b01      	cmp	r3, #1
 8006480:	d101      	bne.n	8006486 <HAL_PCD_SetAddress+0x1a>
 8006482:	2302      	movs	r3, #2
 8006484:	e013      	b.n	80064ae <HAL_PCD_SetAddress+0x42>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2201      	movs	r2, #1
 800648a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	78fa      	ldrb	r2, [r7, #3]
 8006492:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	78fa      	ldrb	r2, [r7, #3]
 800649c:	4611      	mov	r1, r2
 800649e:	4618      	mov	r0, r3
 80064a0:	f009 f918 	bl	800f6d4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80064ac:	2300      	movs	r3, #0
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3708      	adds	r7, #8
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}

080064b6 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80064b6:	b580      	push	{r7, lr}
 80064b8:	b084      	sub	sp, #16
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	6078      	str	r0, [r7, #4]
 80064be:	4608      	mov	r0, r1
 80064c0:	4611      	mov	r1, r2
 80064c2:	461a      	mov	r2, r3
 80064c4:	4603      	mov	r3, r0
 80064c6:	70fb      	strb	r3, [r7, #3]
 80064c8:	460b      	mov	r3, r1
 80064ca:	803b      	strh	r3, [r7, #0]
 80064cc:	4613      	mov	r3, r2
 80064ce:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80064d0:	2300      	movs	r3, #0
 80064d2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80064d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	da0f      	bge.n	80064fc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80064dc:	78fb      	ldrb	r3, [r7, #3]
 80064de:	f003 020f 	and.w	r2, r3, #15
 80064e2:	4613      	mov	r3, r2
 80064e4:	00db      	lsls	r3, r3, #3
 80064e6:	1a9b      	subs	r3, r3, r2
 80064e8:	009b      	lsls	r3, r3, #2
 80064ea:	3338      	adds	r3, #56	; 0x38
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	4413      	add	r3, r2
 80064f0:	3304      	adds	r3, #4
 80064f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2201      	movs	r2, #1
 80064f8:	705a      	strb	r2, [r3, #1]
 80064fa:	e00f      	b.n	800651c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80064fc:	78fb      	ldrb	r3, [r7, #3]
 80064fe:	f003 020f 	and.w	r2, r3, #15
 8006502:	4613      	mov	r3, r2
 8006504:	00db      	lsls	r3, r3, #3
 8006506:	1a9b      	subs	r3, r3, r2
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	4413      	add	r3, r2
 8006512:	3304      	adds	r3, #4
 8006514:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2200      	movs	r2, #0
 800651a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800651c:	78fb      	ldrb	r3, [r7, #3]
 800651e:	f003 030f 	and.w	r3, r3, #15
 8006522:	b2da      	uxtb	r2, r3
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006528:	883a      	ldrh	r2, [r7, #0]
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	78ba      	ldrb	r2, [r7, #2]
 8006532:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	785b      	ldrb	r3, [r3, #1]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d004      	beq.n	8006546 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	781b      	ldrb	r3, [r3, #0]
 8006540:	b29a      	uxth	r2, r3
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006546:	78bb      	ldrb	r3, [r7, #2]
 8006548:	2b02      	cmp	r3, #2
 800654a:	d102      	bne.n	8006552 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2200      	movs	r2, #0
 8006550:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006558:	2b01      	cmp	r3, #1
 800655a:	d101      	bne.n	8006560 <HAL_PCD_EP_Open+0xaa>
 800655c:	2302      	movs	r3, #2
 800655e:	e00e      	b.n	800657e <HAL_PCD_EP_Open+0xc8>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2201      	movs	r2, #1
 8006564:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	68f9      	ldr	r1, [r7, #12]
 800656e:	4618      	mov	r0, r3
 8006570:	f008 fa76 	bl	800ea60 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800657c:	7afb      	ldrb	r3, [r7, #11]
}
 800657e:	4618      	mov	r0, r3
 8006580:	3710      	adds	r7, #16
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}

08006586 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006586:	b580      	push	{r7, lr}
 8006588:	b084      	sub	sp, #16
 800658a:	af00      	add	r7, sp, #0
 800658c:	6078      	str	r0, [r7, #4]
 800658e:	460b      	mov	r3, r1
 8006590:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006592:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006596:	2b00      	cmp	r3, #0
 8006598:	da0f      	bge.n	80065ba <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800659a:	78fb      	ldrb	r3, [r7, #3]
 800659c:	f003 020f 	and.w	r2, r3, #15
 80065a0:	4613      	mov	r3, r2
 80065a2:	00db      	lsls	r3, r3, #3
 80065a4:	1a9b      	subs	r3, r3, r2
 80065a6:	009b      	lsls	r3, r3, #2
 80065a8:	3338      	adds	r3, #56	; 0x38
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	4413      	add	r3, r2
 80065ae:	3304      	adds	r3, #4
 80065b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2201      	movs	r2, #1
 80065b6:	705a      	strb	r2, [r3, #1]
 80065b8:	e00f      	b.n	80065da <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80065ba:	78fb      	ldrb	r3, [r7, #3]
 80065bc:	f003 020f 	and.w	r2, r3, #15
 80065c0:	4613      	mov	r3, r2
 80065c2:	00db      	lsls	r3, r3, #3
 80065c4:	1a9b      	subs	r3, r3, r2
 80065c6:	009b      	lsls	r3, r3, #2
 80065c8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80065cc:	687a      	ldr	r2, [r7, #4]
 80065ce:	4413      	add	r3, r2
 80065d0:	3304      	adds	r3, #4
 80065d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2200      	movs	r2, #0
 80065d8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80065da:	78fb      	ldrb	r3, [r7, #3]
 80065dc:	f003 030f 	and.w	r3, r3, #15
 80065e0:	b2da      	uxtb	r2, r3
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d101      	bne.n	80065f4 <HAL_PCD_EP_Close+0x6e>
 80065f0:	2302      	movs	r3, #2
 80065f2:	e00e      	b.n	8006612 <HAL_PCD_EP_Close+0x8c>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2201      	movs	r2, #1
 80065f8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	68f9      	ldr	r1, [r7, #12]
 8006602:	4618      	mov	r0, r3
 8006604:	f008 fab4 	bl	800eb70 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2200      	movs	r2, #0
 800660c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8006610:	2300      	movs	r3, #0
}
 8006612:	4618      	mov	r0, r3
 8006614:	3710      	adds	r7, #16
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}

0800661a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800661a:	b580      	push	{r7, lr}
 800661c:	b086      	sub	sp, #24
 800661e:	af00      	add	r7, sp, #0
 8006620:	60f8      	str	r0, [r7, #12]
 8006622:	607a      	str	r2, [r7, #4]
 8006624:	603b      	str	r3, [r7, #0]
 8006626:	460b      	mov	r3, r1
 8006628:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800662a:	7afb      	ldrb	r3, [r7, #11]
 800662c:	f003 020f 	and.w	r2, r3, #15
 8006630:	4613      	mov	r3, r2
 8006632:	00db      	lsls	r3, r3, #3
 8006634:	1a9b      	subs	r3, r3, r2
 8006636:	009b      	lsls	r3, r3, #2
 8006638:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800663c:	68fa      	ldr	r2, [r7, #12]
 800663e:	4413      	add	r3, r2
 8006640:	3304      	adds	r3, #4
 8006642:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	683a      	ldr	r2, [r7, #0]
 800664e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	2200      	movs	r2, #0
 8006654:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	2200      	movs	r2, #0
 800665a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800665c:	7afb      	ldrb	r3, [r7, #11]
 800665e:	f003 030f 	and.w	r3, r3, #15
 8006662:	b2da      	uxtb	r2, r3
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	691b      	ldr	r3, [r3, #16]
 800666c:	2b01      	cmp	r3, #1
 800666e:	d102      	bne.n	8006676 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006676:	7afb      	ldrb	r3, [r7, #11]
 8006678:	f003 030f 	and.w	r3, r3, #15
 800667c:	2b00      	cmp	r3, #0
 800667e:	d109      	bne.n	8006694 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	6818      	ldr	r0, [r3, #0]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	691b      	ldr	r3, [r3, #16]
 8006688:	b2db      	uxtb	r3, r3
 800668a:	461a      	mov	r2, r3
 800668c:	6979      	ldr	r1, [r7, #20]
 800668e:	f008 fd97 	bl	800f1c0 <USB_EP0StartXfer>
 8006692:	e008      	b.n	80066a6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6818      	ldr	r0, [r3, #0]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	691b      	ldr	r3, [r3, #16]
 800669c:	b2db      	uxtb	r3, r3
 800669e:	461a      	mov	r2, r3
 80066a0:	6979      	ldr	r1, [r7, #20]
 80066a2:	f008 fb41 	bl	800ed28 <USB_EPStartXfer>
  }

  return HAL_OK;
 80066a6:	2300      	movs	r3, #0
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3718      	adds	r7, #24
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}

080066b0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b083      	sub	sp, #12
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	460b      	mov	r3, r1
 80066ba:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80066bc:	78fb      	ldrb	r3, [r7, #3]
 80066be:	f003 020f 	and.w	r2, r3, #15
 80066c2:	6879      	ldr	r1, [r7, #4]
 80066c4:	4613      	mov	r3, r2
 80066c6:	00db      	lsls	r3, r3, #3
 80066c8:	1a9b      	subs	r3, r3, r2
 80066ca:	009b      	lsls	r3, r3, #2
 80066cc:	440b      	add	r3, r1
 80066ce:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80066d2:	681b      	ldr	r3, [r3, #0]
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	370c      	adds	r7, #12
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr

080066e0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b086      	sub	sp, #24
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	60f8      	str	r0, [r7, #12]
 80066e8:	607a      	str	r2, [r7, #4]
 80066ea:	603b      	str	r3, [r7, #0]
 80066ec:	460b      	mov	r3, r1
 80066ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80066f0:	7afb      	ldrb	r3, [r7, #11]
 80066f2:	f003 020f 	and.w	r2, r3, #15
 80066f6:	4613      	mov	r3, r2
 80066f8:	00db      	lsls	r3, r3, #3
 80066fa:	1a9b      	subs	r3, r3, r2
 80066fc:	009b      	lsls	r3, r3, #2
 80066fe:	3338      	adds	r3, #56	; 0x38
 8006700:	68fa      	ldr	r2, [r7, #12]
 8006702:	4413      	add	r3, r2
 8006704:	3304      	adds	r3, #4
 8006706:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	687a      	ldr	r2, [r7, #4]
 800670c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	683a      	ldr	r2, [r7, #0]
 8006712:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	2200      	movs	r2, #0
 8006718:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	2201      	movs	r2, #1
 800671e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006720:	7afb      	ldrb	r3, [r7, #11]
 8006722:	f003 030f 	and.w	r3, r3, #15
 8006726:	b2da      	uxtb	r2, r3
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	691b      	ldr	r3, [r3, #16]
 8006730:	2b01      	cmp	r3, #1
 8006732:	d102      	bne.n	800673a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800673a:	7afb      	ldrb	r3, [r7, #11]
 800673c:	f003 030f 	and.w	r3, r3, #15
 8006740:	2b00      	cmp	r3, #0
 8006742:	d109      	bne.n	8006758 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	6818      	ldr	r0, [r3, #0]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	691b      	ldr	r3, [r3, #16]
 800674c:	b2db      	uxtb	r3, r3
 800674e:	461a      	mov	r2, r3
 8006750:	6979      	ldr	r1, [r7, #20]
 8006752:	f008 fd35 	bl	800f1c0 <USB_EP0StartXfer>
 8006756:	e008      	b.n	800676a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	6818      	ldr	r0, [r3, #0]
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	691b      	ldr	r3, [r3, #16]
 8006760:	b2db      	uxtb	r3, r3
 8006762:	461a      	mov	r2, r3
 8006764:	6979      	ldr	r1, [r7, #20]
 8006766:	f008 fadf 	bl	800ed28 <USB_EPStartXfer>
  }

  return HAL_OK;
 800676a:	2300      	movs	r3, #0
}
 800676c:	4618      	mov	r0, r3
 800676e:	3718      	adds	r7, #24
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}

08006774 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b084      	sub	sp, #16
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	460b      	mov	r3, r1
 800677e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006780:	78fb      	ldrb	r3, [r7, #3]
 8006782:	f003 020f 	and.w	r2, r3, #15
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	429a      	cmp	r2, r3
 800678c:	d901      	bls.n	8006792 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	e050      	b.n	8006834 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006792:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006796:	2b00      	cmp	r3, #0
 8006798:	da0f      	bge.n	80067ba <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800679a:	78fb      	ldrb	r3, [r7, #3]
 800679c:	f003 020f 	and.w	r2, r3, #15
 80067a0:	4613      	mov	r3, r2
 80067a2:	00db      	lsls	r3, r3, #3
 80067a4:	1a9b      	subs	r3, r3, r2
 80067a6:	009b      	lsls	r3, r3, #2
 80067a8:	3338      	adds	r3, #56	; 0x38
 80067aa:	687a      	ldr	r2, [r7, #4]
 80067ac:	4413      	add	r3, r2
 80067ae:	3304      	adds	r3, #4
 80067b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2201      	movs	r2, #1
 80067b6:	705a      	strb	r2, [r3, #1]
 80067b8:	e00d      	b.n	80067d6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80067ba:	78fa      	ldrb	r2, [r7, #3]
 80067bc:	4613      	mov	r3, r2
 80067be:	00db      	lsls	r3, r3, #3
 80067c0:	1a9b      	subs	r3, r3, r2
 80067c2:	009b      	lsls	r3, r3, #2
 80067c4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	4413      	add	r3, r2
 80067cc:	3304      	adds	r3, #4
 80067ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2200      	movs	r2, #0
 80067d4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2201      	movs	r2, #1
 80067da:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80067dc:	78fb      	ldrb	r3, [r7, #3]
 80067de:	f003 030f 	and.w	r3, r3, #15
 80067e2:	b2da      	uxtb	r2, r3
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80067ee:	2b01      	cmp	r3, #1
 80067f0:	d101      	bne.n	80067f6 <HAL_PCD_EP_SetStall+0x82>
 80067f2:	2302      	movs	r3, #2
 80067f4:	e01e      	b.n	8006834 <HAL_PCD_EP_SetStall+0xc0>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2201      	movs	r2, #1
 80067fa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	68f9      	ldr	r1, [r7, #12]
 8006804:	4618      	mov	r0, r3
 8006806:	f008 fe91 	bl	800f52c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800680a:	78fb      	ldrb	r3, [r7, #3]
 800680c:	f003 030f 	and.w	r3, r3, #15
 8006810:	2b00      	cmp	r3, #0
 8006812:	d10a      	bne.n	800682a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6818      	ldr	r0, [r3, #0]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	691b      	ldr	r3, [r3, #16]
 800681c:	b2d9      	uxtb	r1, r3
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006824:	461a      	mov	r2, r3
 8006826:	f009 f871 	bl	800f90c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2200      	movs	r2, #0
 800682e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006832:	2300      	movs	r3, #0
}
 8006834:	4618      	mov	r0, r3
 8006836:	3710      	adds	r7, #16
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}

0800683c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	460b      	mov	r3, r1
 8006846:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006848:	78fb      	ldrb	r3, [r7, #3]
 800684a:	f003 020f 	and.w	r2, r3, #15
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	429a      	cmp	r2, r3
 8006854:	d901      	bls.n	800685a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	e042      	b.n	80068e0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800685a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800685e:	2b00      	cmp	r3, #0
 8006860:	da0f      	bge.n	8006882 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006862:	78fb      	ldrb	r3, [r7, #3]
 8006864:	f003 020f 	and.w	r2, r3, #15
 8006868:	4613      	mov	r3, r2
 800686a:	00db      	lsls	r3, r3, #3
 800686c:	1a9b      	subs	r3, r3, r2
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	3338      	adds	r3, #56	; 0x38
 8006872:	687a      	ldr	r2, [r7, #4]
 8006874:	4413      	add	r3, r2
 8006876:	3304      	adds	r3, #4
 8006878:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2201      	movs	r2, #1
 800687e:	705a      	strb	r2, [r3, #1]
 8006880:	e00f      	b.n	80068a2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006882:	78fb      	ldrb	r3, [r7, #3]
 8006884:	f003 020f 	and.w	r2, r3, #15
 8006888:	4613      	mov	r3, r2
 800688a:	00db      	lsls	r3, r3, #3
 800688c:	1a9b      	subs	r3, r3, r2
 800688e:	009b      	lsls	r3, r3, #2
 8006890:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	4413      	add	r3, r2
 8006898:	3304      	adds	r3, #4
 800689a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2200      	movs	r2, #0
 80068a0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2200      	movs	r2, #0
 80068a6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80068a8:	78fb      	ldrb	r3, [r7, #3]
 80068aa:	f003 030f 	and.w	r3, r3, #15
 80068ae:	b2da      	uxtb	r2, r3
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d101      	bne.n	80068c2 <HAL_PCD_EP_ClrStall+0x86>
 80068be:	2302      	movs	r3, #2
 80068c0:	e00e      	b.n	80068e0 <HAL_PCD_EP_ClrStall+0xa4>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2201      	movs	r2, #1
 80068c6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	68f9      	ldr	r1, [r7, #12]
 80068d0:	4618      	mov	r0, r3
 80068d2:	f008 fe99 	bl	800f608 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2200      	movs	r2, #0
 80068da:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80068de:	2300      	movs	r3, #0
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3710      	adds	r7, #16
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}

080068e8 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b082      	sub	sp, #8
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	460b      	mov	r3, r1
 80068f2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	d101      	bne.n	8006902 <HAL_PCD_EP_Flush+0x1a>
 80068fe:	2302      	movs	r3, #2
 8006900:	e01b      	b.n	800693a <HAL_PCD_EP_Flush+0x52>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2201      	movs	r2, #1
 8006906:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 800690a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800690e:	2b00      	cmp	r3, #0
 8006910:	da09      	bge.n	8006926 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681a      	ldr	r2, [r3, #0]
 8006916:	78fb      	ldrb	r3, [r7, #3]
 8006918:	f003 030f 	and.w	r3, r3, #15
 800691c:	4619      	mov	r1, r3
 800691e:	4610      	mov	r0, r2
 8006920:	f008 f818 	bl	800e954 <USB_FlushTxFifo>
 8006924:	e004      	b.n	8006930 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4618      	mov	r0, r3
 800692c:	f008 f838 	bl	800e9a0 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006938:	2300      	movs	r3, #0
}
 800693a:	4618      	mov	r0, r3
 800693c:	3708      	adds	r7, #8
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}

08006942 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006942:	b580      	push	{r7, lr}
 8006944:	b08a      	sub	sp, #40	; 0x28
 8006946:	af02      	add	r7, sp, #8
 8006948:	6078      	str	r0, [r7, #4]
 800694a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006956:	683a      	ldr	r2, [r7, #0]
 8006958:	4613      	mov	r3, r2
 800695a:	00db      	lsls	r3, r3, #3
 800695c:	1a9b      	subs	r3, r3, r2
 800695e:	009b      	lsls	r3, r3, #2
 8006960:	3338      	adds	r3, #56	; 0x38
 8006962:	687a      	ldr	r2, [r7, #4]
 8006964:	4413      	add	r3, r2
 8006966:	3304      	adds	r3, #4
 8006968:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	699a      	ldr	r2, [r3, #24]
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	695b      	ldr	r3, [r3, #20]
 8006972:	429a      	cmp	r2, r3
 8006974:	d901      	bls.n	800697a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	e06c      	b.n	8006a54 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	695a      	ldr	r2, [r3, #20]
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	699b      	ldr	r3, [r3, #24]
 8006982:	1ad3      	subs	r3, r2, r3
 8006984:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	69fa      	ldr	r2, [r7, #28]
 800698c:	429a      	cmp	r2, r3
 800698e:	d902      	bls.n	8006996 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006996:	69fb      	ldr	r3, [r7, #28]
 8006998:	3303      	adds	r3, #3
 800699a:	089b      	lsrs	r3, r3, #2
 800699c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800699e:	e02b      	b.n	80069f8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	695a      	ldr	r2, [r3, #20]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	699b      	ldr	r3, [r3, #24]
 80069a8:	1ad3      	subs	r3, r2, r3
 80069aa:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	69fa      	ldr	r2, [r7, #28]
 80069b2:	429a      	cmp	r2, r3
 80069b4:	d902      	bls.n	80069bc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80069bc:	69fb      	ldr	r3, [r7, #28]
 80069be:	3303      	adds	r3, #3
 80069c0:	089b      	lsrs	r3, r3, #2
 80069c2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	68d9      	ldr	r1, [r3, #12]
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	b2da      	uxtb	r2, r3
 80069cc:	69fb      	ldr	r3, [r7, #28]
 80069ce:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	9300      	str	r3, [sp, #0]
 80069d8:	4603      	mov	r3, r0
 80069da:	6978      	ldr	r0, [r7, #20]
 80069dc:	f008 fd48 	bl	800f470 <USB_WritePacket>

    ep->xfer_buff  += len;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	68da      	ldr	r2, [r3, #12]
 80069e4:	69fb      	ldr	r3, [r7, #28]
 80069e6:	441a      	add	r2, r3
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	699a      	ldr	r2, [r3, #24]
 80069f0:	69fb      	ldr	r3, [r7, #28]
 80069f2:	441a      	add	r2, r3
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	015a      	lsls	r2, r3, #5
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	4413      	add	r3, r2
 8006a00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a04:	699b      	ldr	r3, [r3, #24]
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	69ba      	ldr	r2, [r7, #24]
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d809      	bhi.n	8006a22 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	699a      	ldr	r2, [r3, #24]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d203      	bcs.n	8006a22 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	695b      	ldr	r3, [r3, #20]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d1be      	bne.n	80069a0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	695a      	ldr	r2, [r3, #20]
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	699b      	ldr	r3, [r3, #24]
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d811      	bhi.n	8006a52 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	f003 030f 	and.w	r3, r3, #15
 8006a34:	2201      	movs	r2, #1
 8006a36:	fa02 f303 	lsl.w	r3, r2, r3
 8006a3a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	43db      	mvns	r3, r3
 8006a48:	6939      	ldr	r1, [r7, #16]
 8006a4a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a4e:	4013      	ands	r3, r2
 8006a50:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006a52:	2300      	movs	r3, #0
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3720      	adds	r7, #32
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}

08006a5c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b086      	sub	sp, #24
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	333c      	adds	r3, #60	; 0x3c
 8006a74:	3304      	adds	r3, #4
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	015a      	lsls	r2, r3, #5
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	4413      	add	r3, r2
 8006a82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	691b      	ldr	r3, [r3, #16]
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	f040 80a0 	bne.w	8006bd4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	f003 0308 	and.w	r3, r3, #8
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d015      	beq.n	8006aca <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	4a72      	ldr	r2, [pc, #456]	; (8006c6c <PCD_EP_OutXfrComplete_int+0x210>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	f240 80dd 	bls.w	8006c62 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	f000 80d7 	beq.w	8006c62 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	015a      	lsls	r2, r3, #5
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	4413      	add	r3, r2
 8006abc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ac6:	6093      	str	r3, [r2, #8]
 8006ac8:	e0cb      	b.n	8006c62 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	f003 0320 	and.w	r3, r3, #32
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d009      	beq.n	8006ae8 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	015a      	lsls	r2, r3, #5
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	4413      	add	r3, r2
 8006adc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	2320      	movs	r3, #32
 8006ae4:	6093      	str	r3, [r2, #8]
 8006ae6:	e0bc      	b.n	8006c62 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	f040 80b7 	bne.w	8006c62 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	4a5d      	ldr	r2, [pc, #372]	; (8006c6c <PCD_EP_OutXfrComplete_int+0x210>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d90f      	bls.n	8006b1c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d00a      	beq.n	8006b1c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	015a      	lsls	r2, r3, #5
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	4413      	add	r3, r2
 8006b0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b12:	461a      	mov	r2, r3
 8006b14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b18:	6093      	str	r3, [r2, #8]
 8006b1a:	e0a2      	b.n	8006c62 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8006b1c:	6879      	ldr	r1, [r7, #4]
 8006b1e:	683a      	ldr	r2, [r7, #0]
 8006b20:	4613      	mov	r3, r2
 8006b22:	00db      	lsls	r3, r3, #3
 8006b24:	1a9b      	subs	r3, r3, r2
 8006b26:	009b      	lsls	r3, r3, #2
 8006b28:	440b      	add	r3, r1
 8006b2a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006b2e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	0159      	lsls	r1, r3, #5
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	440b      	add	r3, r1
 8006b38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b3c:	691b      	ldr	r3, [r3, #16]
 8006b3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8006b42:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	683a      	ldr	r2, [r7, #0]
 8006b48:	4613      	mov	r3, r2
 8006b4a:	00db      	lsls	r3, r3, #3
 8006b4c:	1a9b      	subs	r3, r3, r2
 8006b4e:	009b      	lsls	r3, r3, #2
 8006b50:	4403      	add	r3, r0
 8006b52:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006b56:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8006b58:	6879      	ldr	r1, [r7, #4]
 8006b5a:	683a      	ldr	r2, [r7, #0]
 8006b5c:	4613      	mov	r3, r2
 8006b5e:	00db      	lsls	r3, r3, #3
 8006b60:	1a9b      	subs	r3, r3, r2
 8006b62:	009b      	lsls	r3, r3, #2
 8006b64:	440b      	add	r3, r1
 8006b66:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006b6a:	6819      	ldr	r1, [r3, #0]
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	683a      	ldr	r2, [r7, #0]
 8006b70:	4613      	mov	r3, r2
 8006b72:	00db      	lsls	r3, r3, #3
 8006b74:	1a9b      	subs	r3, r3, r2
 8006b76:	009b      	lsls	r3, r3, #2
 8006b78:	4403      	add	r3, r0
 8006b7a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4419      	add	r1, r3
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	683a      	ldr	r2, [r7, #0]
 8006b86:	4613      	mov	r3, r2
 8006b88:	00db      	lsls	r3, r3, #3
 8006b8a:	1a9b      	subs	r3, r3, r2
 8006b8c:	009b      	lsls	r3, r3, #2
 8006b8e:	4403      	add	r3, r0
 8006b90:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006b94:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d114      	bne.n	8006bc6 <PCD_EP_OutXfrComplete_int+0x16a>
 8006b9c:	6879      	ldr	r1, [r7, #4]
 8006b9e:	683a      	ldr	r2, [r7, #0]
 8006ba0:	4613      	mov	r3, r2
 8006ba2:	00db      	lsls	r3, r3, #3
 8006ba4:	1a9b      	subs	r3, r3, r2
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	440b      	add	r3, r1
 8006baa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d108      	bne.n	8006bc6 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6818      	ldr	r0, [r3, #0]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	2101      	movs	r1, #1
 8006bc2:	f008 fea3 	bl	800f90c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	4619      	mov	r1, r3
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f00e fd75 	bl	80156bc <HAL_PCD_DataOutStageCallback>
 8006bd2:	e046      	b.n	8006c62 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	4a26      	ldr	r2, [pc, #152]	; (8006c70 <PCD_EP_OutXfrComplete_int+0x214>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d124      	bne.n	8006c26 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d00a      	beq.n	8006bfc <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	015a      	lsls	r2, r3, #5
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	4413      	add	r3, r2
 8006bee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bf2:	461a      	mov	r2, r3
 8006bf4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006bf8:	6093      	str	r3, [r2, #8]
 8006bfa:	e032      	b.n	8006c62 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	f003 0320 	and.w	r3, r3, #32
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d008      	beq.n	8006c18 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	015a      	lsls	r2, r3, #5
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	4413      	add	r3, r2
 8006c0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c12:	461a      	mov	r2, r3
 8006c14:	2320      	movs	r3, #32
 8006c16:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	b2db      	uxtb	r3, r3
 8006c1c:	4619      	mov	r1, r3
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f00e fd4c 	bl	80156bc <HAL_PCD_DataOutStageCallback>
 8006c24:	e01d      	b.n	8006c62 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d114      	bne.n	8006c56 <PCD_EP_OutXfrComplete_int+0x1fa>
 8006c2c:	6879      	ldr	r1, [r7, #4]
 8006c2e:	683a      	ldr	r2, [r7, #0]
 8006c30:	4613      	mov	r3, r2
 8006c32:	00db      	lsls	r3, r3, #3
 8006c34:	1a9b      	subs	r3, r3, r2
 8006c36:	009b      	lsls	r3, r3, #2
 8006c38:	440b      	add	r3, r1
 8006c3a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d108      	bne.n	8006c56 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6818      	ldr	r0, [r3, #0]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006c4e:	461a      	mov	r2, r3
 8006c50:	2100      	movs	r1, #0
 8006c52:	f008 fe5b 	bl	800f90c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	b2db      	uxtb	r3, r3
 8006c5a:	4619      	mov	r1, r3
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f00e fd2d 	bl	80156bc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006c62:	2300      	movs	r3, #0
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3718      	adds	r7, #24
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}
 8006c6c:	4f54300a 	.word	0x4f54300a
 8006c70:	4f54310a 	.word	0x4f54310a

08006c74 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b086      	sub	sp, #24
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	333c      	adds	r3, #60	; 0x3c
 8006c8c:	3304      	adds	r3, #4
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	015a      	lsls	r2, r3, #5
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	4413      	add	r3, r2
 8006c9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	4a15      	ldr	r2, [pc, #84]	; (8006cfc <PCD_EP_OutSetupPacket_int+0x88>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d90e      	bls.n	8006cc8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d009      	beq.n	8006cc8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	015a      	lsls	r2, r3, #5
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	4413      	add	r3, r2
 8006cbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cc6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f00e fce5 	bl	8015698 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	4a0a      	ldr	r2, [pc, #40]	; (8006cfc <PCD_EP_OutSetupPacket_int+0x88>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d90c      	bls.n	8006cf0 <PCD_EP_OutSetupPacket_int+0x7c>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	691b      	ldr	r3, [r3, #16]
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d108      	bne.n	8006cf0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6818      	ldr	r0, [r3, #0]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006ce8:	461a      	mov	r2, r3
 8006cea:	2101      	movs	r1, #1
 8006cec:	f008 fe0e 	bl	800f90c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006cf0:	2300      	movs	r3, #0
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3718      	adds	r7, #24
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}
 8006cfa:	bf00      	nop
 8006cfc:	4f54300a 	.word	0x4f54300a

08006d00 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b085      	sub	sp, #20
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	460b      	mov	r3, r1
 8006d0a:	70fb      	strb	r3, [r7, #3]
 8006d0c:	4613      	mov	r3, r2
 8006d0e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d16:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006d18:	78fb      	ldrb	r3, [r7, #3]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d107      	bne.n	8006d2e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006d1e:	883b      	ldrh	r3, [r7, #0]
 8006d20:	0419      	lsls	r1, r3, #16
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	68ba      	ldr	r2, [r7, #8]
 8006d28:	430a      	orrs	r2, r1
 8006d2a:	629a      	str	r2, [r3, #40]	; 0x28
 8006d2c:	e028      	b.n	8006d80 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d34:	0c1b      	lsrs	r3, r3, #16
 8006d36:	68ba      	ldr	r2, [r7, #8]
 8006d38:	4413      	add	r3, r2
 8006d3a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	73fb      	strb	r3, [r7, #15]
 8006d40:	e00d      	b.n	8006d5e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681a      	ldr	r2, [r3, #0]
 8006d46:	7bfb      	ldrb	r3, [r7, #15]
 8006d48:	3340      	adds	r3, #64	; 0x40
 8006d4a:	009b      	lsls	r3, r3, #2
 8006d4c:	4413      	add	r3, r2
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	0c1b      	lsrs	r3, r3, #16
 8006d52:	68ba      	ldr	r2, [r7, #8]
 8006d54:	4413      	add	r3, r2
 8006d56:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006d58:	7bfb      	ldrb	r3, [r7, #15]
 8006d5a:	3301      	adds	r3, #1
 8006d5c:	73fb      	strb	r3, [r7, #15]
 8006d5e:	7bfa      	ldrb	r2, [r7, #15]
 8006d60:	78fb      	ldrb	r3, [r7, #3]
 8006d62:	3b01      	subs	r3, #1
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d3ec      	bcc.n	8006d42 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006d68:	883b      	ldrh	r3, [r7, #0]
 8006d6a:	0418      	lsls	r0, r3, #16
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6819      	ldr	r1, [r3, #0]
 8006d70:	78fb      	ldrb	r3, [r7, #3]
 8006d72:	3b01      	subs	r3, #1
 8006d74:	68ba      	ldr	r2, [r7, #8]
 8006d76:	4302      	orrs	r2, r0
 8006d78:	3340      	adds	r3, #64	; 0x40
 8006d7a:	009b      	lsls	r3, r3, #2
 8006d7c:	440b      	add	r3, r1
 8006d7e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006d80:	2300      	movs	r3, #0
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3714      	adds	r7, #20
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr

08006d8e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006d8e:	b480      	push	{r7}
 8006d90:	b083      	sub	sp, #12
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
 8006d96:	460b      	mov	r3, r1
 8006d98:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	887a      	ldrh	r2, [r7, #2]
 8006da0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006da2:	2300      	movs	r3, #0
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	370c      	adds	r7, #12
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr

08006db0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b085      	sub	sp, #20
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	699b      	ldr	r3, [r3, #24]
 8006dd2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006dde:	4b05      	ldr	r3, [pc, #20]	; (8006df4 <HAL_PCDEx_ActivateLPM+0x44>)
 8006de0:	4313      	orrs	r3, r2
 8006de2:	68fa      	ldr	r2, [r7, #12]
 8006de4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006de6:	2300      	movs	r3, #0
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3714      	adds	r7, #20
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr
 8006df4:	10000003 	.word	0x10000003

08006df8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b083      	sub	sp, #12
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	460b      	mov	r3, r1
 8006e02:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006e04:	bf00      	nop
 8006e06:	370c      	adds	r7, #12
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr

08006e10 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8006e10:	b480      	push	{r7}
 8006e12:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8006e14:	4b05      	ldr	r3, [pc, #20]	; (8006e2c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a04      	ldr	r2, [pc, #16]	; (8006e2c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006e1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e1e:	6013      	str	r3, [r2, #0]
}
 8006e20:	bf00      	nop
 8006e22:	46bd      	mov	sp, r7
 8006e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e28:	4770      	bx	lr
 8006e2a:	bf00      	nop
 8006e2c:	58024800 	.word	0x58024800

08006e30 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b084      	sub	sp, #16
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006e38:	4b19      	ldr	r3, [pc, #100]	; (8006ea0 <HAL_PWREx_ConfigSupply+0x70>)
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	f003 0304 	and.w	r3, r3, #4
 8006e40:	2b04      	cmp	r3, #4
 8006e42:	d00a      	beq.n	8006e5a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006e44:	4b16      	ldr	r3, [pc, #88]	; (8006ea0 <HAL_PWREx_ConfigSupply+0x70>)
 8006e46:	68db      	ldr	r3, [r3, #12]
 8006e48:	f003 0307 	and.w	r3, r3, #7
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d001      	beq.n	8006e56 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006e52:	2301      	movs	r3, #1
 8006e54:	e01f      	b.n	8006e96 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006e56:	2300      	movs	r3, #0
 8006e58:	e01d      	b.n	8006e96 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006e5a:	4b11      	ldr	r3, [pc, #68]	; (8006ea0 <HAL_PWREx_ConfigSupply+0x70>)
 8006e5c:	68db      	ldr	r3, [r3, #12]
 8006e5e:	f023 0207 	bic.w	r2, r3, #7
 8006e62:	490f      	ldr	r1, [pc, #60]	; (8006ea0 <HAL_PWREx_ConfigSupply+0x70>)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	4313      	orrs	r3, r2
 8006e68:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006e6a:	f7fb f84b 	bl	8001f04 <HAL_GetTick>
 8006e6e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006e70:	e009      	b.n	8006e86 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006e72:	f7fb f847 	bl	8001f04 <HAL_GetTick>
 8006e76:	4602      	mov	r2, r0
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	1ad3      	subs	r3, r2, r3
 8006e7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e80:	d901      	bls.n	8006e86 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006e82:	2301      	movs	r3, #1
 8006e84:	e007      	b.n	8006e96 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006e86:	4b06      	ldr	r3, [pc, #24]	; (8006ea0 <HAL_PWREx_ConfigSupply+0x70>)
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e92:	d1ee      	bne.n	8006e72 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006e94:	2300      	movs	r3, #0
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3710      	adds	r7, #16
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}
 8006e9e:	bf00      	nop
 8006ea0:	58024800 	.word	0x58024800

08006ea4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006ea8:	4b05      	ldr	r3, [pc, #20]	; (8006ec0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006eaa:	68db      	ldr	r3, [r3, #12]
 8006eac:	4a04      	ldr	r2, [pc, #16]	; (8006ec0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006eae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006eb2:	60d3      	str	r3, [r2, #12]
}
 8006eb4:	bf00      	nop
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebc:	4770      	bx	lr
 8006ebe:	bf00      	nop
 8006ec0:	58024800 	.word	0x58024800

08006ec4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b08c      	sub	sp, #48	; 0x30
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d101      	bne.n	8006ed6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	e3ff      	b.n	80076d6 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f003 0301 	and.w	r3, r3, #1
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	f000 8087 	beq.w	8006ff2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ee4:	4b99      	ldr	r3, [pc, #612]	; (800714c <HAL_RCC_OscConfig+0x288>)
 8006ee6:	691b      	ldr	r3, [r3, #16]
 8006ee8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006eec:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006eee:	4b97      	ldr	r3, [pc, #604]	; (800714c <HAL_RCC_OscConfig+0x288>)
 8006ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ef2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ef6:	2b10      	cmp	r3, #16
 8006ef8:	d007      	beq.n	8006f0a <HAL_RCC_OscConfig+0x46>
 8006efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006efc:	2b18      	cmp	r3, #24
 8006efe:	d110      	bne.n	8006f22 <HAL_RCC_OscConfig+0x5e>
 8006f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f02:	f003 0303 	and.w	r3, r3, #3
 8006f06:	2b02      	cmp	r3, #2
 8006f08:	d10b      	bne.n	8006f22 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f0a:	4b90      	ldr	r3, [pc, #576]	; (800714c <HAL_RCC_OscConfig+0x288>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d06c      	beq.n	8006ff0 <HAL_RCC_OscConfig+0x12c>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d168      	bne.n	8006ff0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	e3d9      	b.n	80076d6 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f2a:	d106      	bne.n	8006f3a <HAL_RCC_OscConfig+0x76>
 8006f2c:	4b87      	ldr	r3, [pc, #540]	; (800714c <HAL_RCC_OscConfig+0x288>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a86      	ldr	r2, [pc, #536]	; (800714c <HAL_RCC_OscConfig+0x288>)
 8006f32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f36:	6013      	str	r3, [r2, #0]
 8006f38:	e02e      	b.n	8006f98 <HAL_RCC_OscConfig+0xd4>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d10c      	bne.n	8006f5c <HAL_RCC_OscConfig+0x98>
 8006f42:	4b82      	ldr	r3, [pc, #520]	; (800714c <HAL_RCC_OscConfig+0x288>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a81      	ldr	r2, [pc, #516]	; (800714c <HAL_RCC_OscConfig+0x288>)
 8006f48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f4c:	6013      	str	r3, [r2, #0]
 8006f4e:	4b7f      	ldr	r3, [pc, #508]	; (800714c <HAL_RCC_OscConfig+0x288>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a7e      	ldr	r2, [pc, #504]	; (800714c <HAL_RCC_OscConfig+0x288>)
 8006f54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f58:	6013      	str	r3, [r2, #0]
 8006f5a:	e01d      	b.n	8006f98 <HAL_RCC_OscConfig+0xd4>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f64:	d10c      	bne.n	8006f80 <HAL_RCC_OscConfig+0xbc>
 8006f66:	4b79      	ldr	r3, [pc, #484]	; (800714c <HAL_RCC_OscConfig+0x288>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a78      	ldr	r2, [pc, #480]	; (800714c <HAL_RCC_OscConfig+0x288>)
 8006f6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006f70:	6013      	str	r3, [r2, #0]
 8006f72:	4b76      	ldr	r3, [pc, #472]	; (800714c <HAL_RCC_OscConfig+0x288>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a75      	ldr	r2, [pc, #468]	; (800714c <HAL_RCC_OscConfig+0x288>)
 8006f78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f7c:	6013      	str	r3, [r2, #0]
 8006f7e:	e00b      	b.n	8006f98 <HAL_RCC_OscConfig+0xd4>
 8006f80:	4b72      	ldr	r3, [pc, #456]	; (800714c <HAL_RCC_OscConfig+0x288>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a71      	ldr	r2, [pc, #452]	; (800714c <HAL_RCC_OscConfig+0x288>)
 8006f86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f8a:	6013      	str	r3, [r2, #0]
 8006f8c:	4b6f      	ldr	r3, [pc, #444]	; (800714c <HAL_RCC_OscConfig+0x288>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a6e      	ldr	r2, [pc, #440]	; (800714c <HAL_RCC_OscConfig+0x288>)
 8006f92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d013      	beq.n	8006fc8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fa0:	f7fa ffb0 	bl	8001f04 <HAL_GetTick>
 8006fa4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006fa6:	e008      	b.n	8006fba <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006fa8:	f7fa ffac 	bl	8001f04 <HAL_GetTick>
 8006fac:	4602      	mov	r2, r0
 8006fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb0:	1ad3      	subs	r3, r2, r3
 8006fb2:	2b64      	cmp	r3, #100	; 0x64
 8006fb4:	d901      	bls.n	8006fba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006fb6:	2303      	movs	r3, #3
 8006fb8:	e38d      	b.n	80076d6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006fba:	4b64      	ldr	r3, [pc, #400]	; (800714c <HAL_RCC_OscConfig+0x288>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d0f0      	beq.n	8006fa8 <HAL_RCC_OscConfig+0xe4>
 8006fc6:	e014      	b.n	8006ff2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fc8:	f7fa ff9c 	bl	8001f04 <HAL_GetTick>
 8006fcc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006fce:	e008      	b.n	8006fe2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006fd0:	f7fa ff98 	bl	8001f04 <HAL_GetTick>
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd8:	1ad3      	subs	r3, r2, r3
 8006fda:	2b64      	cmp	r3, #100	; 0x64
 8006fdc:	d901      	bls.n	8006fe2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006fde:	2303      	movs	r3, #3
 8006fe0:	e379      	b.n	80076d6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006fe2:	4b5a      	ldr	r3, [pc, #360]	; (800714c <HAL_RCC_OscConfig+0x288>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d1f0      	bne.n	8006fd0 <HAL_RCC_OscConfig+0x10c>
 8006fee:	e000      	b.n	8006ff2 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ff0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f003 0302 	and.w	r3, r3, #2
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	f000 80ae 	beq.w	800715c <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007000:	4b52      	ldr	r3, [pc, #328]	; (800714c <HAL_RCC_OscConfig+0x288>)
 8007002:	691b      	ldr	r3, [r3, #16]
 8007004:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007008:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800700a:	4b50      	ldr	r3, [pc, #320]	; (800714c <HAL_RCC_OscConfig+0x288>)
 800700c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800700e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007010:	6a3b      	ldr	r3, [r7, #32]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d007      	beq.n	8007026 <HAL_RCC_OscConfig+0x162>
 8007016:	6a3b      	ldr	r3, [r7, #32]
 8007018:	2b18      	cmp	r3, #24
 800701a:	d13a      	bne.n	8007092 <HAL_RCC_OscConfig+0x1ce>
 800701c:	69fb      	ldr	r3, [r7, #28]
 800701e:	f003 0303 	and.w	r3, r3, #3
 8007022:	2b00      	cmp	r3, #0
 8007024:	d135      	bne.n	8007092 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007026:	4b49      	ldr	r3, [pc, #292]	; (800714c <HAL_RCC_OscConfig+0x288>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f003 0304 	and.w	r3, r3, #4
 800702e:	2b00      	cmp	r3, #0
 8007030:	d005      	beq.n	800703e <HAL_RCC_OscConfig+0x17a>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	68db      	ldr	r3, [r3, #12]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d101      	bne.n	800703e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800703a:	2301      	movs	r3, #1
 800703c:	e34b      	b.n	80076d6 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800703e:	f7fa ff8f 	bl	8001f60 <HAL_GetREVID>
 8007042:	4602      	mov	r2, r0
 8007044:	f241 0303 	movw	r3, #4099	; 0x1003
 8007048:	429a      	cmp	r2, r3
 800704a:	d817      	bhi.n	800707c <HAL_RCC_OscConfig+0x1b8>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	691b      	ldr	r3, [r3, #16]
 8007050:	2b40      	cmp	r3, #64	; 0x40
 8007052:	d108      	bne.n	8007066 <HAL_RCC_OscConfig+0x1a2>
 8007054:	4b3d      	ldr	r3, [pc, #244]	; (800714c <HAL_RCC_OscConfig+0x288>)
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800705c:	4a3b      	ldr	r2, [pc, #236]	; (800714c <HAL_RCC_OscConfig+0x288>)
 800705e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007062:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007064:	e07a      	b.n	800715c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007066:	4b39      	ldr	r3, [pc, #228]	; (800714c <HAL_RCC_OscConfig+0x288>)
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	691b      	ldr	r3, [r3, #16]
 8007072:	031b      	lsls	r3, r3, #12
 8007074:	4935      	ldr	r1, [pc, #212]	; (800714c <HAL_RCC_OscConfig+0x288>)
 8007076:	4313      	orrs	r3, r2
 8007078:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800707a:	e06f      	b.n	800715c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800707c:	4b33      	ldr	r3, [pc, #204]	; (800714c <HAL_RCC_OscConfig+0x288>)
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	691b      	ldr	r3, [r3, #16]
 8007088:	061b      	lsls	r3, r3, #24
 800708a:	4930      	ldr	r1, [pc, #192]	; (800714c <HAL_RCC_OscConfig+0x288>)
 800708c:	4313      	orrs	r3, r2
 800708e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007090:	e064      	b.n	800715c <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	68db      	ldr	r3, [r3, #12]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d045      	beq.n	8007126 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800709a:	4b2c      	ldr	r3, [pc, #176]	; (800714c <HAL_RCC_OscConfig+0x288>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f023 0219 	bic.w	r2, r3, #25
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	68db      	ldr	r3, [r3, #12]
 80070a6:	4929      	ldr	r1, [pc, #164]	; (800714c <HAL_RCC_OscConfig+0x288>)
 80070a8:	4313      	orrs	r3, r2
 80070aa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070ac:	f7fa ff2a 	bl	8001f04 <HAL_GetTick>
 80070b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80070b2:	e008      	b.n	80070c6 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80070b4:	f7fa ff26 	bl	8001f04 <HAL_GetTick>
 80070b8:	4602      	mov	r2, r0
 80070ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070bc:	1ad3      	subs	r3, r2, r3
 80070be:	2b02      	cmp	r3, #2
 80070c0:	d901      	bls.n	80070c6 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80070c2:	2303      	movs	r3, #3
 80070c4:	e307      	b.n	80076d6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80070c6:	4b21      	ldr	r3, [pc, #132]	; (800714c <HAL_RCC_OscConfig+0x288>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f003 0304 	and.w	r3, r3, #4
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d0f0      	beq.n	80070b4 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070d2:	f7fa ff45 	bl	8001f60 <HAL_GetREVID>
 80070d6:	4602      	mov	r2, r0
 80070d8:	f241 0303 	movw	r3, #4099	; 0x1003
 80070dc:	429a      	cmp	r2, r3
 80070de:	d817      	bhi.n	8007110 <HAL_RCC_OscConfig+0x24c>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	691b      	ldr	r3, [r3, #16]
 80070e4:	2b40      	cmp	r3, #64	; 0x40
 80070e6:	d108      	bne.n	80070fa <HAL_RCC_OscConfig+0x236>
 80070e8:	4b18      	ldr	r3, [pc, #96]	; (800714c <HAL_RCC_OscConfig+0x288>)
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80070f0:	4a16      	ldr	r2, [pc, #88]	; (800714c <HAL_RCC_OscConfig+0x288>)
 80070f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070f6:	6053      	str	r3, [r2, #4]
 80070f8:	e030      	b.n	800715c <HAL_RCC_OscConfig+0x298>
 80070fa:	4b14      	ldr	r3, [pc, #80]	; (800714c <HAL_RCC_OscConfig+0x288>)
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	691b      	ldr	r3, [r3, #16]
 8007106:	031b      	lsls	r3, r3, #12
 8007108:	4910      	ldr	r1, [pc, #64]	; (800714c <HAL_RCC_OscConfig+0x288>)
 800710a:	4313      	orrs	r3, r2
 800710c:	604b      	str	r3, [r1, #4]
 800710e:	e025      	b.n	800715c <HAL_RCC_OscConfig+0x298>
 8007110:	4b0e      	ldr	r3, [pc, #56]	; (800714c <HAL_RCC_OscConfig+0x288>)
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	691b      	ldr	r3, [r3, #16]
 800711c:	061b      	lsls	r3, r3, #24
 800711e:	490b      	ldr	r1, [pc, #44]	; (800714c <HAL_RCC_OscConfig+0x288>)
 8007120:	4313      	orrs	r3, r2
 8007122:	604b      	str	r3, [r1, #4]
 8007124:	e01a      	b.n	800715c <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007126:	4b09      	ldr	r3, [pc, #36]	; (800714c <HAL_RCC_OscConfig+0x288>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a08      	ldr	r2, [pc, #32]	; (800714c <HAL_RCC_OscConfig+0x288>)
 800712c:	f023 0301 	bic.w	r3, r3, #1
 8007130:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007132:	f7fa fee7 	bl	8001f04 <HAL_GetTick>
 8007136:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007138:	e00a      	b.n	8007150 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800713a:	f7fa fee3 	bl	8001f04 <HAL_GetTick>
 800713e:	4602      	mov	r2, r0
 8007140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007142:	1ad3      	subs	r3, r2, r3
 8007144:	2b02      	cmp	r3, #2
 8007146:	d903      	bls.n	8007150 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8007148:	2303      	movs	r3, #3
 800714a:	e2c4      	b.n	80076d6 <HAL_RCC_OscConfig+0x812>
 800714c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007150:	4ba4      	ldr	r3, [pc, #656]	; (80073e4 <HAL_RCC_OscConfig+0x520>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f003 0304 	and.w	r3, r3, #4
 8007158:	2b00      	cmp	r3, #0
 800715a:	d1ee      	bne.n	800713a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f003 0310 	and.w	r3, r3, #16
 8007164:	2b00      	cmp	r3, #0
 8007166:	f000 80a9 	beq.w	80072bc <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800716a:	4b9e      	ldr	r3, [pc, #632]	; (80073e4 <HAL_RCC_OscConfig+0x520>)
 800716c:	691b      	ldr	r3, [r3, #16]
 800716e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007172:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007174:	4b9b      	ldr	r3, [pc, #620]	; (80073e4 <HAL_RCC_OscConfig+0x520>)
 8007176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007178:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800717a:	69bb      	ldr	r3, [r7, #24]
 800717c:	2b08      	cmp	r3, #8
 800717e:	d007      	beq.n	8007190 <HAL_RCC_OscConfig+0x2cc>
 8007180:	69bb      	ldr	r3, [r7, #24]
 8007182:	2b18      	cmp	r3, #24
 8007184:	d13a      	bne.n	80071fc <HAL_RCC_OscConfig+0x338>
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	f003 0303 	and.w	r3, r3, #3
 800718c:	2b01      	cmp	r3, #1
 800718e:	d135      	bne.n	80071fc <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007190:	4b94      	ldr	r3, [pc, #592]	; (80073e4 <HAL_RCC_OscConfig+0x520>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007198:	2b00      	cmp	r3, #0
 800719a:	d005      	beq.n	80071a8 <HAL_RCC_OscConfig+0x2e4>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	69db      	ldr	r3, [r3, #28]
 80071a0:	2b80      	cmp	r3, #128	; 0x80
 80071a2:	d001      	beq.n	80071a8 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80071a4:	2301      	movs	r3, #1
 80071a6:	e296      	b.n	80076d6 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80071a8:	f7fa feda 	bl	8001f60 <HAL_GetREVID>
 80071ac:	4602      	mov	r2, r0
 80071ae:	f241 0303 	movw	r3, #4099	; 0x1003
 80071b2:	429a      	cmp	r2, r3
 80071b4:	d817      	bhi.n	80071e6 <HAL_RCC_OscConfig+0x322>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6a1b      	ldr	r3, [r3, #32]
 80071ba:	2b20      	cmp	r3, #32
 80071bc:	d108      	bne.n	80071d0 <HAL_RCC_OscConfig+0x30c>
 80071be:	4b89      	ldr	r3, [pc, #548]	; (80073e4 <HAL_RCC_OscConfig+0x520>)
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80071c6:	4a87      	ldr	r2, [pc, #540]	; (80073e4 <HAL_RCC_OscConfig+0x520>)
 80071c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80071cc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80071ce:	e075      	b.n	80072bc <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80071d0:	4b84      	ldr	r3, [pc, #528]	; (80073e4 <HAL_RCC_OscConfig+0x520>)
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6a1b      	ldr	r3, [r3, #32]
 80071dc:	069b      	lsls	r3, r3, #26
 80071de:	4981      	ldr	r1, [pc, #516]	; (80073e4 <HAL_RCC_OscConfig+0x520>)
 80071e0:	4313      	orrs	r3, r2
 80071e2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80071e4:	e06a      	b.n	80072bc <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80071e6:	4b7f      	ldr	r3, [pc, #508]	; (80073e4 <HAL_RCC_OscConfig+0x520>)
 80071e8:	68db      	ldr	r3, [r3, #12]
 80071ea:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6a1b      	ldr	r3, [r3, #32]
 80071f2:	061b      	lsls	r3, r3, #24
 80071f4:	497b      	ldr	r1, [pc, #492]	; (80073e4 <HAL_RCC_OscConfig+0x520>)
 80071f6:	4313      	orrs	r3, r2
 80071f8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80071fa:	e05f      	b.n	80072bc <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	69db      	ldr	r3, [r3, #28]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d042      	beq.n	800728a <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007204:	4b77      	ldr	r3, [pc, #476]	; (80073e4 <HAL_RCC_OscConfig+0x520>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a76      	ldr	r2, [pc, #472]	; (80073e4 <HAL_RCC_OscConfig+0x520>)
 800720a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800720e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007210:	f7fa fe78 	bl	8001f04 <HAL_GetTick>
 8007214:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007216:	e008      	b.n	800722a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007218:	f7fa fe74 	bl	8001f04 <HAL_GetTick>
 800721c:	4602      	mov	r2, r0
 800721e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007220:	1ad3      	subs	r3, r2, r3
 8007222:	2b02      	cmp	r3, #2
 8007224:	d901      	bls.n	800722a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8007226:	2303      	movs	r3, #3
 8007228:	e255      	b.n	80076d6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800722a:	4b6e      	ldr	r3, [pc, #440]	; (80073e4 <HAL_RCC_OscConfig+0x520>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007232:	2b00      	cmp	r3, #0
 8007234:	d0f0      	beq.n	8007218 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007236:	f7fa fe93 	bl	8001f60 <HAL_GetREVID>
 800723a:	4602      	mov	r2, r0
 800723c:	f241 0303 	movw	r3, #4099	; 0x1003
 8007240:	429a      	cmp	r2, r3
 8007242:	d817      	bhi.n	8007274 <HAL_RCC_OscConfig+0x3b0>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6a1b      	ldr	r3, [r3, #32]
 8007248:	2b20      	cmp	r3, #32
 800724a:	d108      	bne.n	800725e <HAL_RCC_OscConfig+0x39a>
 800724c:	4b65      	ldr	r3, [pc, #404]	; (80073e4 <HAL_RCC_OscConfig+0x520>)
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007254:	4a63      	ldr	r2, [pc, #396]	; (80073e4 <HAL_RCC_OscConfig+0x520>)
 8007256:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800725a:	6053      	str	r3, [r2, #4]
 800725c:	e02e      	b.n	80072bc <HAL_RCC_OscConfig+0x3f8>
 800725e:	4b61      	ldr	r3, [pc, #388]	; (80073e4 <HAL_RCC_OscConfig+0x520>)
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6a1b      	ldr	r3, [r3, #32]
 800726a:	069b      	lsls	r3, r3, #26
 800726c:	495d      	ldr	r1, [pc, #372]	; (80073e4 <HAL_RCC_OscConfig+0x520>)
 800726e:	4313      	orrs	r3, r2
 8007270:	604b      	str	r3, [r1, #4]
 8007272:	e023      	b.n	80072bc <HAL_RCC_OscConfig+0x3f8>
 8007274:	4b5b      	ldr	r3, [pc, #364]	; (80073e4 <HAL_RCC_OscConfig+0x520>)
 8007276:	68db      	ldr	r3, [r3, #12]
 8007278:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6a1b      	ldr	r3, [r3, #32]
 8007280:	061b      	lsls	r3, r3, #24
 8007282:	4958      	ldr	r1, [pc, #352]	; (80073e4 <HAL_RCC_OscConfig+0x520>)
 8007284:	4313      	orrs	r3, r2
 8007286:	60cb      	str	r3, [r1, #12]
 8007288:	e018      	b.n	80072bc <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800728a:	4b56      	ldr	r3, [pc, #344]	; (80073e4 <HAL_RCC_OscConfig+0x520>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a55      	ldr	r2, [pc, #340]	; (80073e4 <HAL_RCC_OscConfig+0x520>)
 8007290:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007294:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007296:	f7fa fe35 	bl	8001f04 <HAL_GetTick>
 800729a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800729c:	e008      	b.n	80072b0 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800729e:	f7fa fe31 	bl	8001f04 <HAL_GetTick>
 80072a2:	4602      	mov	r2, r0
 80072a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a6:	1ad3      	subs	r3, r2, r3
 80072a8:	2b02      	cmp	r3, #2
 80072aa:	d901      	bls.n	80072b0 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80072ac:	2303      	movs	r3, #3
 80072ae:	e212      	b.n	80076d6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80072b0:	4b4c      	ldr	r3, [pc, #304]	; (80073e4 <HAL_RCC_OscConfig+0x520>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d1f0      	bne.n	800729e <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f003 0308 	and.w	r3, r3, #8
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d036      	beq.n	8007336 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	695b      	ldr	r3, [r3, #20]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d019      	beq.n	8007304 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80072d0:	4b44      	ldr	r3, [pc, #272]	; (80073e4 <HAL_RCC_OscConfig+0x520>)
 80072d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072d4:	4a43      	ldr	r2, [pc, #268]	; (80073e4 <HAL_RCC_OscConfig+0x520>)
 80072d6:	f043 0301 	orr.w	r3, r3, #1
 80072da:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072dc:	f7fa fe12 	bl	8001f04 <HAL_GetTick>
 80072e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80072e2:	e008      	b.n	80072f6 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80072e4:	f7fa fe0e 	bl	8001f04 <HAL_GetTick>
 80072e8:	4602      	mov	r2, r0
 80072ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ec:	1ad3      	subs	r3, r2, r3
 80072ee:	2b02      	cmp	r3, #2
 80072f0:	d901      	bls.n	80072f6 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80072f2:	2303      	movs	r3, #3
 80072f4:	e1ef      	b.n	80076d6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80072f6:	4b3b      	ldr	r3, [pc, #236]	; (80073e4 <HAL_RCC_OscConfig+0x520>)
 80072f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072fa:	f003 0302 	and.w	r3, r3, #2
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d0f0      	beq.n	80072e4 <HAL_RCC_OscConfig+0x420>
 8007302:	e018      	b.n	8007336 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007304:	4b37      	ldr	r3, [pc, #220]	; (80073e4 <HAL_RCC_OscConfig+0x520>)
 8007306:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007308:	4a36      	ldr	r2, [pc, #216]	; (80073e4 <HAL_RCC_OscConfig+0x520>)
 800730a:	f023 0301 	bic.w	r3, r3, #1
 800730e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007310:	f7fa fdf8 	bl	8001f04 <HAL_GetTick>
 8007314:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007316:	e008      	b.n	800732a <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007318:	f7fa fdf4 	bl	8001f04 <HAL_GetTick>
 800731c:	4602      	mov	r2, r0
 800731e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007320:	1ad3      	subs	r3, r2, r3
 8007322:	2b02      	cmp	r3, #2
 8007324:	d901      	bls.n	800732a <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8007326:	2303      	movs	r3, #3
 8007328:	e1d5      	b.n	80076d6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800732a:	4b2e      	ldr	r3, [pc, #184]	; (80073e4 <HAL_RCC_OscConfig+0x520>)
 800732c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800732e:	f003 0302 	and.w	r3, r3, #2
 8007332:	2b00      	cmp	r3, #0
 8007334:	d1f0      	bne.n	8007318 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f003 0320 	and.w	r3, r3, #32
 800733e:	2b00      	cmp	r3, #0
 8007340:	d036      	beq.n	80073b0 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	699b      	ldr	r3, [r3, #24]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d019      	beq.n	800737e <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800734a:	4b26      	ldr	r3, [pc, #152]	; (80073e4 <HAL_RCC_OscConfig+0x520>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a25      	ldr	r2, [pc, #148]	; (80073e4 <HAL_RCC_OscConfig+0x520>)
 8007350:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007354:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007356:	f7fa fdd5 	bl	8001f04 <HAL_GetTick>
 800735a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800735c:	e008      	b.n	8007370 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800735e:	f7fa fdd1 	bl	8001f04 <HAL_GetTick>
 8007362:	4602      	mov	r2, r0
 8007364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007366:	1ad3      	subs	r3, r2, r3
 8007368:	2b02      	cmp	r3, #2
 800736a:	d901      	bls.n	8007370 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 800736c:	2303      	movs	r3, #3
 800736e:	e1b2      	b.n	80076d6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007370:	4b1c      	ldr	r3, [pc, #112]	; (80073e4 <HAL_RCC_OscConfig+0x520>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007378:	2b00      	cmp	r3, #0
 800737a:	d0f0      	beq.n	800735e <HAL_RCC_OscConfig+0x49a>
 800737c:	e018      	b.n	80073b0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800737e:	4b19      	ldr	r3, [pc, #100]	; (80073e4 <HAL_RCC_OscConfig+0x520>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a18      	ldr	r2, [pc, #96]	; (80073e4 <HAL_RCC_OscConfig+0x520>)
 8007384:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007388:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800738a:	f7fa fdbb 	bl	8001f04 <HAL_GetTick>
 800738e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007390:	e008      	b.n	80073a4 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007392:	f7fa fdb7 	bl	8001f04 <HAL_GetTick>
 8007396:	4602      	mov	r2, r0
 8007398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739a:	1ad3      	subs	r3, r2, r3
 800739c:	2b02      	cmp	r3, #2
 800739e:	d901      	bls.n	80073a4 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80073a0:	2303      	movs	r3, #3
 80073a2:	e198      	b.n	80076d6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80073a4:	4b0f      	ldr	r3, [pc, #60]	; (80073e4 <HAL_RCC_OscConfig+0x520>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d1f0      	bne.n	8007392 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f003 0304 	and.w	r3, r3, #4
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	f000 8085 	beq.w	80074c8 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80073be:	4b0a      	ldr	r3, [pc, #40]	; (80073e8 <HAL_RCC_OscConfig+0x524>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a09      	ldr	r2, [pc, #36]	; (80073e8 <HAL_RCC_OscConfig+0x524>)
 80073c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073c8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80073ca:	f7fa fd9b 	bl	8001f04 <HAL_GetTick>
 80073ce:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80073d0:	e00c      	b.n	80073ec <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80073d2:	f7fa fd97 	bl	8001f04 <HAL_GetTick>
 80073d6:	4602      	mov	r2, r0
 80073d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073da:	1ad3      	subs	r3, r2, r3
 80073dc:	2b64      	cmp	r3, #100	; 0x64
 80073de:	d905      	bls.n	80073ec <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80073e0:	2303      	movs	r3, #3
 80073e2:	e178      	b.n	80076d6 <HAL_RCC_OscConfig+0x812>
 80073e4:	58024400 	.word	0x58024400
 80073e8:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80073ec:	4b96      	ldr	r3, [pc, #600]	; (8007648 <HAL_RCC_OscConfig+0x784>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d0ec      	beq.n	80073d2 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d106      	bne.n	800740e <HAL_RCC_OscConfig+0x54a>
 8007400:	4b92      	ldr	r3, [pc, #584]	; (800764c <HAL_RCC_OscConfig+0x788>)
 8007402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007404:	4a91      	ldr	r2, [pc, #580]	; (800764c <HAL_RCC_OscConfig+0x788>)
 8007406:	f043 0301 	orr.w	r3, r3, #1
 800740a:	6713      	str	r3, [r2, #112]	; 0x70
 800740c:	e02d      	b.n	800746a <HAL_RCC_OscConfig+0x5a6>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	689b      	ldr	r3, [r3, #8]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d10c      	bne.n	8007430 <HAL_RCC_OscConfig+0x56c>
 8007416:	4b8d      	ldr	r3, [pc, #564]	; (800764c <HAL_RCC_OscConfig+0x788>)
 8007418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800741a:	4a8c      	ldr	r2, [pc, #560]	; (800764c <HAL_RCC_OscConfig+0x788>)
 800741c:	f023 0301 	bic.w	r3, r3, #1
 8007420:	6713      	str	r3, [r2, #112]	; 0x70
 8007422:	4b8a      	ldr	r3, [pc, #552]	; (800764c <HAL_RCC_OscConfig+0x788>)
 8007424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007426:	4a89      	ldr	r2, [pc, #548]	; (800764c <HAL_RCC_OscConfig+0x788>)
 8007428:	f023 0304 	bic.w	r3, r3, #4
 800742c:	6713      	str	r3, [r2, #112]	; 0x70
 800742e:	e01c      	b.n	800746a <HAL_RCC_OscConfig+0x5a6>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	689b      	ldr	r3, [r3, #8]
 8007434:	2b05      	cmp	r3, #5
 8007436:	d10c      	bne.n	8007452 <HAL_RCC_OscConfig+0x58e>
 8007438:	4b84      	ldr	r3, [pc, #528]	; (800764c <HAL_RCC_OscConfig+0x788>)
 800743a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800743c:	4a83      	ldr	r2, [pc, #524]	; (800764c <HAL_RCC_OscConfig+0x788>)
 800743e:	f043 0304 	orr.w	r3, r3, #4
 8007442:	6713      	str	r3, [r2, #112]	; 0x70
 8007444:	4b81      	ldr	r3, [pc, #516]	; (800764c <HAL_RCC_OscConfig+0x788>)
 8007446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007448:	4a80      	ldr	r2, [pc, #512]	; (800764c <HAL_RCC_OscConfig+0x788>)
 800744a:	f043 0301 	orr.w	r3, r3, #1
 800744e:	6713      	str	r3, [r2, #112]	; 0x70
 8007450:	e00b      	b.n	800746a <HAL_RCC_OscConfig+0x5a6>
 8007452:	4b7e      	ldr	r3, [pc, #504]	; (800764c <HAL_RCC_OscConfig+0x788>)
 8007454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007456:	4a7d      	ldr	r2, [pc, #500]	; (800764c <HAL_RCC_OscConfig+0x788>)
 8007458:	f023 0301 	bic.w	r3, r3, #1
 800745c:	6713      	str	r3, [r2, #112]	; 0x70
 800745e:	4b7b      	ldr	r3, [pc, #492]	; (800764c <HAL_RCC_OscConfig+0x788>)
 8007460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007462:	4a7a      	ldr	r2, [pc, #488]	; (800764c <HAL_RCC_OscConfig+0x788>)
 8007464:	f023 0304 	bic.w	r3, r3, #4
 8007468:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d015      	beq.n	800749e <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007472:	f7fa fd47 	bl	8001f04 <HAL_GetTick>
 8007476:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007478:	e00a      	b.n	8007490 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800747a:	f7fa fd43 	bl	8001f04 <HAL_GetTick>
 800747e:	4602      	mov	r2, r0
 8007480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007482:	1ad3      	subs	r3, r2, r3
 8007484:	f241 3288 	movw	r2, #5000	; 0x1388
 8007488:	4293      	cmp	r3, r2
 800748a:	d901      	bls.n	8007490 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 800748c:	2303      	movs	r3, #3
 800748e:	e122      	b.n	80076d6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007490:	4b6e      	ldr	r3, [pc, #440]	; (800764c <HAL_RCC_OscConfig+0x788>)
 8007492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007494:	f003 0302 	and.w	r3, r3, #2
 8007498:	2b00      	cmp	r3, #0
 800749a:	d0ee      	beq.n	800747a <HAL_RCC_OscConfig+0x5b6>
 800749c:	e014      	b.n	80074c8 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800749e:	f7fa fd31 	bl	8001f04 <HAL_GetTick>
 80074a2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80074a4:	e00a      	b.n	80074bc <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80074a6:	f7fa fd2d 	bl	8001f04 <HAL_GetTick>
 80074aa:	4602      	mov	r2, r0
 80074ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ae:	1ad3      	subs	r3, r2, r3
 80074b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d901      	bls.n	80074bc <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80074b8:	2303      	movs	r3, #3
 80074ba:	e10c      	b.n	80076d6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80074bc:	4b63      	ldr	r3, [pc, #396]	; (800764c <HAL_RCC_OscConfig+0x788>)
 80074be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074c0:	f003 0302 	and.w	r3, r3, #2
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d1ee      	bne.n	80074a6 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	f000 8101 	beq.w	80076d4 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80074d2:	4b5e      	ldr	r3, [pc, #376]	; (800764c <HAL_RCC_OscConfig+0x788>)
 80074d4:	691b      	ldr	r3, [r3, #16]
 80074d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80074da:	2b18      	cmp	r3, #24
 80074dc:	f000 80bc 	beq.w	8007658 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e4:	2b02      	cmp	r3, #2
 80074e6:	f040 8095 	bne.w	8007614 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074ea:	4b58      	ldr	r3, [pc, #352]	; (800764c <HAL_RCC_OscConfig+0x788>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a57      	ldr	r2, [pc, #348]	; (800764c <HAL_RCC_OscConfig+0x788>)
 80074f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80074f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074f6:	f7fa fd05 	bl	8001f04 <HAL_GetTick>
 80074fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80074fc:	e008      	b.n	8007510 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80074fe:	f7fa fd01 	bl	8001f04 <HAL_GetTick>
 8007502:	4602      	mov	r2, r0
 8007504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007506:	1ad3      	subs	r3, r2, r3
 8007508:	2b02      	cmp	r3, #2
 800750a:	d901      	bls.n	8007510 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 800750c:	2303      	movs	r3, #3
 800750e:	e0e2      	b.n	80076d6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007510:	4b4e      	ldr	r3, [pc, #312]	; (800764c <HAL_RCC_OscConfig+0x788>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007518:	2b00      	cmp	r3, #0
 800751a:	d1f0      	bne.n	80074fe <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800751c:	4b4b      	ldr	r3, [pc, #300]	; (800764c <HAL_RCC_OscConfig+0x788>)
 800751e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007520:	4b4b      	ldr	r3, [pc, #300]	; (8007650 <HAL_RCC_OscConfig+0x78c>)
 8007522:	4013      	ands	r3, r2
 8007524:	687a      	ldr	r2, [r7, #4]
 8007526:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007528:	687a      	ldr	r2, [r7, #4]
 800752a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800752c:	0112      	lsls	r2, r2, #4
 800752e:	430a      	orrs	r2, r1
 8007530:	4946      	ldr	r1, [pc, #280]	; (800764c <HAL_RCC_OscConfig+0x788>)
 8007532:	4313      	orrs	r3, r2
 8007534:	628b      	str	r3, [r1, #40]	; 0x28
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800753a:	3b01      	subs	r3, #1
 800753c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007544:	3b01      	subs	r3, #1
 8007546:	025b      	lsls	r3, r3, #9
 8007548:	b29b      	uxth	r3, r3
 800754a:	431a      	orrs	r2, r3
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007550:	3b01      	subs	r3, #1
 8007552:	041b      	lsls	r3, r3, #16
 8007554:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007558:	431a      	orrs	r2, r3
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800755e:	3b01      	subs	r3, #1
 8007560:	061b      	lsls	r3, r3, #24
 8007562:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007566:	4939      	ldr	r1, [pc, #228]	; (800764c <HAL_RCC_OscConfig+0x788>)
 8007568:	4313      	orrs	r3, r2
 800756a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800756c:	4b37      	ldr	r3, [pc, #220]	; (800764c <HAL_RCC_OscConfig+0x788>)
 800756e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007570:	4a36      	ldr	r2, [pc, #216]	; (800764c <HAL_RCC_OscConfig+0x788>)
 8007572:	f023 0301 	bic.w	r3, r3, #1
 8007576:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007578:	4b34      	ldr	r3, [pc, #208]	; (800764c <HAL_RCC_OscConfig+0x788>)
 800757a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800757c:	4b35      	ldr	r3, [pc, #212]	; (8007654 <HAL_RCC_OscConfig+0x790>)
 800757e:	4013      	ands	r3, r2
 8007580:	687a      	ldr	r2, [r7, #4]
 8007582:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007584:	00d2      	lsls	r2, r2, #3
 8007586:	4931      	ldr	r1, [pc, #196]	; (800764c <HAL_RCC_OscConfig+0x788>)
 8007588:	4313      	orrs	r3, r2
 800758a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800758c:	4b2f      	ldr	r3, [pc, #188]	; (800764c <HAL_RCC_OscConfig+0x788>)
 800758e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007590:	f023 020c 	bic.w	r2, r3, #12
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007598:	492c      	ldr	r1, [pc, #176]	; (800764c <HAL_RCC_OscConfig+0x788>)
 800759a:	4313      	orrs	r3, r2
 800759c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800759e:	4b2b      	ldr	r3, [pc, #172]	; (800764c <HAL_RCC_OscConfig+0x788>)
 80075a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075a2:	f023 0202 	bic.w	r2, r3, #2
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075aa:	4928      	ldr	r1, [pc, #160]	; (800764c <HAL_RCC_OscConfig+0x788>)
 80075ac:	4313      	orrs	r3, r2
 80075ae:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80075b0:	4b26      	ldr	r3, [pc, #152]	; (800764c <HAL_RCC_OscConfig+0x788>)
 80075b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b4:	4a25      	ldr	r2, [pc, #148]	; (800764c <HAL_RCC_OscConfig+0x788>)
 80075b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075bc:	4b23      	ldr	r3, [pc, #140]	; (800764c <HAL_RCC_OscConfig+0x788>)
 80075be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075c0:	4a22      	ldr	r2, [pc, #136]	; (800764c <HAL_RCC_OscConfig+0x788>)
 80075c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80075c8:	4b20      	ldr	r3, [pc, #128]	; (800764c <HAL_RCC_OscConfig+0x788>)
 80075ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075cc:	4a1f      	ldr	r2, [pc, #124]	; (800764c <HAL_RCC_OscConfig+0x788>)
 80075ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80075d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80075d4:	4b1d      	ldr	r3, [pc, #116]	; (800764c <HAL_RCC_OscConfig+0x788>)
 80075d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075d8:	4a1c      	ldr	r2, [pc, #112]	; (800764c <HAL_RCC_OscConfig+0x788>)
 80075da:	f043 0301 	orr.w	r3, r3, #1
 80075de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80075e0:	4b1a      	ldr	r3, [pc, #104]	; (800764c <HAL_RCC_OscConfig+0x788>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a19      	ldr	r2, [pc, #100]	; (800764c <HAL_RCC_OscConfig+0x788>)
 80075e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80075ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075ec:	f7fa fc8a 	bl	8001f04 <HAL_GetTick>
 80075f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80075f2:	e008      	b.n	8007606 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80075f4:	f7fa fc86 	bl	8001f04 <HAL_GetTick>
 80075f8:	4602      	mov	r2, r0
 80075fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fc:	1ad3      	subs	r3, r2, r3
 80075fe:	2b02      	cmp	r3, #2
 8007600:	d901      	bls.n	8007606 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8007602:	2303      	movs	r3, #3
 8007604:	e067      	b.n	80076d6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007606:	4b11      	ldr	r3, [pc, #68]	; (800764c <HAL_RCC_OscConfig+0x788>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800760e:	2b00      	cmp	r3, #0
 8007610:	d0f0      	beq.n	80075f4 <HAL_RCC_OscConfig+0x730>
 8007612:	e05f      	b.n	80076d4 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007614:	4b0d      	ldr	r3, [pc, #52]	; (800764c <HAL_RCC_OscConfig+0x788>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a0c      	ldr	r2, [pc, #48]	; (800764c <HAL_RCC_OscConfig+0x788>)
 800761a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800761e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007620:	f7fa fc70 	bl	8001f04 <HAL_GetTick>
 8007624:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007626:	e008      	b.n	800763a <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007628:	f7fa fc6c 	bl	8001f04 <HAL_GetTick>
 800762c:	4602      	mov	r2, r0
 800762e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007630:	1ad3      	subs	r3, r2, r3
 8007632:	2b02      	cmp	r3, #2
 8007634:	d901      	bls.n	800763a <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8007636:	2303      	movs	r3, #3
 8007638:	e04d      	b.n	80076d6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800763a:	4b04      	ldr	r3, [pc, #16]	; (800764c <HAL_RCC_OscConfig+0x788>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007642:	2b00      	cmp	r3, #0
 8007644:	d1f0      	bne.n	8007628 <HAL_RCC_OscConfig+0x764>
 8007646:	e045      	b.n	80076d4 <HAL_RCC_OscConfig+0x810>
 8007648:	58024800 	.word	0x58024800
 800764c:	58024400 	.word	0x58024400
 8007650:	fffffc0c 	.word	0xfffffc0c
 8007654:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007658:	4b21      	ldr	r3, [pc, #132]	; (80076e0 <HAL_RCC_OscConfig+0x81c>)
 800765a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800765c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800765e:	4b20      	ldr	r3, [pc, #128]	; (80076e0 <HAL_RCC_OscConfig+0x81c>)
 8007660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007662:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007668:	2b01      	cmp	r3, #1
 800766a:	d031      	beq.n	80076d0 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	f003 0203 	and.w	r2, r3, #3
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007676:	429a      	cmp	r2, r3
 8007678:	d12a      	bne.n	80076d0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	091b      	lsrs	r3, r3, #4
 800767e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007686:	429a      	cmp	r2, r3
 8007688:	d122      	bne.n	80076d0 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007694:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007696:	429a      	cmp	r2, r3
 8007698:	d11a      	bne.n	80076d0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	0a5b      	lsrs	r3, r3, #9
 800769e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076a6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80076a8:	429a      	cmp	r2, r3
 80076aa:	d111      	bne.n	80076d0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	0c1b      	lsrs	r3, r3, #16
 80076b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076b8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80076ba:	429a      	cmp	r2, r3
 80076bc:	d108      	bne.n	80076d0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	0e1b      	lsrs	r3, r3, #24
 80076c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076ca:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d001      	beq.n	80076d4 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80076d0:	2301      	movs	r3, #1
 80076d2:	e000      	b.n	80076d6 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80076d4:	2300      	movs	r3, #0
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3730      	adds	r7, #48	; 0x30
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}
 80076de:	bf00      	nop
 80076e0:	58024400 	.word	0x58024400

080076e4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b086      	sub	sp, #24
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d101      	bne.n	80076f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80076f4:	2301      	movs	r3, #1
 80076f6:	e19c      	b.n	8007a32 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80076f8:	4b8a      	ldr	r3, [pc, #552]	; (8007924 <HAL_RCC_ClockConfig+0x240>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f003 030f 	and.w	r3, r3, #15
 8007700:	683a      	ldr	r2, [r7, #0]
 8007702:	429a      	cmp	r2, r3
 8007704:	d910      	bls.n	8007728 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007706:	4b87      	ldr	r3, [pc, #540]	; (8007924 <HAL_RCC_ClockConfig+0x240>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f023 020f 	bic.w	r2, r3, #15
 800770e:	4985      	ldr	r1, [pc, #532]	; (8007924 <HAL_RCC_ClockConfig+0x240>)
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	4313      	orrs	r3, r2
 8007714:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007716:	4b83      	ldr	r3, [pc, #524]	; (8007924 <HAL_RCC_ClockConfig+0x240>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f003 030f 	and.w	r3, r3, #15
 800771e:	683a      	ldr	r2, [r7, #0]
 8007720:	429a      	cmp	r2, r3
 8007722:	d001      	beq.n	8007728 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007724:	2301      	movs	r3, #1
 8007726:	e184      	b.n	8007a32 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f003 0304 	and.w	r3, r3, #4
 8007730:	2b00      	cmp	r3, #0
 8007732:	d010      	beq.n	8007756 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	691a      	ldr	r2, [r3, #16]
 8007738:	4b7b      	ldr	r3, [pc, #492]	; (8007928 <HAL_RCC_ClockConfig+0x244>)
 800773a:	699b      	ldr	r3, [r3, #24]
 800773c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007740:	429a      	cmp	r2, r3
 8007742:	d908      	bls.n	8007756 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007744:	4b78      	ldr	r3, [pc, #480]	; (8007928 <HAL_RCC_ClockConfig+0x244>)
 8007746:	699b      	ldr	r3, [r3, #24]
 8007748:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	691b      	ldr	r3, [r3, #16]
 8007750:	4975      	ldr	r1, [pc, #468]	; (8007928 <HAL_RCC_ClockConfig+0x244>)
 8007752:	4313      	orrs	r3, r2
 8007754:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f003 0308 	and.w	r3, r3, #8
 800775e:	2b00      	cmp	r3, #0
 8007760:	d010      	beq.n	8007784 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	695a      	ldr	r2, [r3, #20]
 8007766:	4b70      	ldr	r3, [pc, #448]	; (8007928 <HAL_RCC_ClockConfig+0x244>)
 8007768:	69db      	ldr	r3, [r3, #28]
 800776a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800776e:	429a      	cmp	r2, r3
 8007770:	d908      	bls.n	8007784 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007772:	4b6d      	ldr	r3, [pc, #436]	; (8007928 <HAL_RCC_ClockConfig+0x244>)
 8007774:	69db      	ldr	r3, [r3, #28]
 8007776:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	695b      	ldr	r3, [r3, #20]
 800777e:	496a      	ldr	r1, [pc, #424]	; (8007928 <HAL_RCC_ClockConfig+0x244>)
 8007780:	4313      	orrs	r3, r2
 8007782:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f003 0310 	and.w	r3, r3, #16
 800778c:	2b00      	cmp	r3, #0
 800778e:	d010      	beq.n	80077b2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	699a      	ldr	r2, [r3, #24]
 8007794:	4b64      	ldr	r3, [pc, #400]	; (8007928 <HAL_RCC_ClockConfig+0x244>)
 8007796:	69db      	ldr	r3, [r3, #28]
 8007798:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800779c:	429a      	cmp	r2, r3
 800779e:	d908      	bls.n	80077b2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80077a0:	4b61      	ldr	r3, [pc, #388]	; (8007928 <HAL_RCC_ClockConfig+0x244>)
 80077a2:	69db      	ldr	r3, [r3, #28]
 80077a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	699b      	ldr	r3, [r3, #24]
 80077ac:	495e      	ldr	r1, [pc, #376]	; (8007928 <HAL_RCC_ClockConfig+0x244>)
 80077ae:	4313      	orrs	r3, r2
 80077b0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f003 0320 	and.w	r3, r3, #32
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d010      	beq.n	80077e0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	69da      	ldr	r2, [r3, #28]
 80077c2:	4b59      	ldr	r3, [pc, #356]	; (8007928 <HAL_RCC_ClockConfig+0x244>)
 80077c4:	6a1b      	ldr	r3, [r3, #32]
 80077c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80077ca:	429a      	cmp	r2, r3
 80077cc:	d908      	bls.n	80077e0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80077ce:	4b56      	ldr	r3, [pc, #344]	; (8007928 <HAL_RCC_ClockConfig+0x244>)
 80077d0:	6a1b      	ldr	r3, [r3, #32]
 80077d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	69db      	ldr	r3, [r3, #28]
 80077da:	4953      	ldr	r1, [pc, #332]	; (8007928 <HAL_RCC_ClockConfig+0x244>)
 80077dc:	4313      	orrs	r3, r2
 80077de:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f003 0302 	and.w	r3, r3, #2
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d010      	beq.n	800780e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	68da      	ldr	r2, [r3, #12]
 80077f0:	4b4d      	ldr	r3, [pc, #308]	; (8007928 <HAL_RCC_ClockConfig+0x244>)
 80077f2:	699b      	ldr	r3, [r3, #24]
 80077f4:	f003 030f 	and.w	r3, r3, #15
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d908      	bls.n	800780e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80077fc:	4b4a      	ldr	r3, [pc, #296]	; (8007928 <HAL_RCC_ClockConfig+0x244>)
 80077fe:	699b      	ldr	r3, [r3, #24]
 8007800:	f023 020f 	bic.w	r2, r3, #15
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	68db      	ldr	r3, [r3, #12]
 8007808:	4947      	ldr	r1, [pc, #284]	; (8007928 <HAL_RCC_ClockConfig+0x244>)
 800780a:	4313      	orrs	r3, r2
 800780c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f003 0301 	and.w	r3, r3, #1
 8007816:	2b00      	cmp	r3, #0
 8007818:	d055      	beq.n	80078c6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800781a:	4b43      	ldr	r3, [pc, #268]	; (8007928 <HAL_RCC_ClockConfig+0x244>)
 800781c:	699b      	ldr	r3, [r3, #24]
 800781e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	689b      	ldr	r3, [r3, #8]
 8007826:	4940      	ldr	r1, [pc, #256]	; (8007928 <HAL_RCC_ClockConfig+0x244>)
 8007828:	4313      	orrs	r3, r2
 800782a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	2b02      	cmp	r3, #2
 8007832:	d107      	bne.n	8007844 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007834:	4b3c      	ldr	r3, [pc, #240]	; (8007928 <HAL_RCC_ClockConfig+0x244>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800783c:	2b00      	cmp	r3, #0
 800783e:	d121      	bne.n	8007884 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007840:	2301      	movs	r3, #1
 8007842:	e0f6      	b.n	8007a32 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	2b03      	cmp	r3, #3
 800784a:	d107      	bne.n	800785c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800784c:	4b36      	ldr	r3, [pc, #216]	; (8007928 <HAL_RCC_ClockConfig+0x244>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007854:	2b00      	cmp	r3, #0
 8007856:	d115      	bne.n	8007884 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007858:	2301      	movs	r3, #1
 800785a:	e0ea      	b.n	8007a32 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	685b      	ldr	r3, [r3, #4]
 8007860:	2b01      	cmp	r3, #1
 8007862:	d107      	bne.n	8007874 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007864:	4b30      	ldr	r3, [pc, #192]	; (8007928 <HAL_RCC_ClockConfig+0x244>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800786c:	2b00      	cmp	r3, #0
 800786e:	d109      	bne.n	8007884 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007870:	2301      	movs	r3, #1
 8007872:	e0de      	b.n	8007a32 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007874:	4b2c      	ldr	r3, [pc, #176]	; (8007928 <HAL_RCC_ClockConfig+0x244>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f003 0304 	and.w	r3, r3, #4
 800787c:	2b00      	cmp	r3, #0
 800787e:	d101      	bne.n	8007884 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007880:	2301      	movs	r3, #1
 8007882:	e0d6      	b.n	8007a32 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007884:	4b28      	ldr	r3, [pc, #160]	; (8007928 <HAL_RCC_ClockConfig+0x244>)
 8007886:	691b      	ldr	r3, [r3, #16]
 8007888:	f023 0207 	bic.w	r2, r3, #7
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	4925      	ldr	r1, [pc, #148]	; (8007928 <HAL_RCC_ClockConfig+0x244>)
 8007892:	4313      	orrs	r3, r2
 8007894:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007896:	f7fa fb35 	bl	8001f04 <HAL_GetTick>
 800789a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800789c:	e00a      	b.n	80078b4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800789e:	f7fa fb31 	bl	8001f04 <HAL_GetTick>
 80078a2:	4602      	mov	r2, r0
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	1ad3      	subs	r3, r2, r3
 80078a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d901      	bls.n	80078b4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80078b0:	2303      	movs	r3, #3
 80078b2:	e0be      	b.n	8007a32 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078b4:	4b1c      	ldr	r3, [pc, #112]	; (8007928 <HAL_RCC_ClockConfig+0x244>)
 80078b6:	691b      	ldr	r3, [r3, #16]
 80078b8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	685b      	ldr	r3, [r3, #4]
 80078c0:	00db      	lsls	r3, r3, #3
 80078c2:	429a      	cmp	r2, r3
 80078c4:	d1eb      	bne.n	800789e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f003 0302 	and.w	r3, r3, #2
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d010      	beq.n	80078f4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	68da      	ldr	r2, [r3, #12]
 80078d6:	4b14      	ldr	r3, [pc, #80]	; (8007928 <HAL_RCC_ClockConfig+0x244>)
 80078d8:	699b      	ldr	r3, [r3, #24]
 80078da:	f003 030f 	and.w	r3, r3, #15
 80078de:	429a      	cmp	r2, r3
 80078e0:	d208      	bcs.n	80078f4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80078e2:	4b11      	ldr	r3, [pc, #68]	; (8007928 <HAL_RCC_ClockConfig+0x244>)
 80078e4:	699b      	ldr	r3, [r3, #24]
 80078e6:	f023 020f 	bic.w	r2, r3, #15
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	68db      	ldr	r3, [r3, #12]
 80078ee:	490e      	ldr	r1, [pc, #56]	; (8007928 <HAL_RCC_ClockConfig+0x244>)
 80078f0:	4313      	orrs	r3, r2
 80078f2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80078f4:	4b0b      	ldr	r3, [pc, #44]	; (8007924 <HAL_RCC_ClockConfig+0x240>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f003 030f 	and.w	r3, r3, #15
 80078fc:	683a      	ldr	r2, [r7, #0]
 80078fe:	429a      	cmp	r2, r3
 8007900:	d214      	bcs.n	800792c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007902:	4b08      	ldr	r3, [pc, #32]	; (8007924 <HAL_RCC_ClockConfig+0x240>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f023 020f 	bic.w	r2, r3, #15
 800790a:	4906      	ldr	r1, [pc, #24]	; (8007924 <HAL_RCC_ClockConfig+0x240>)
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	4313      	orrs	r3, r2
 8007910:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007912:	4b04      	ldr	r3, [pc, #16]	; (8007924 <HAL_RCC_ClockConfig+0x240>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f003 030f 	and.w	r3, r3, #15
 800791a:	683a      	ldr	r2, [r7, #0]
 800791c:	429a      	cmp	r2, r3
 800791e:	d005      	beq.n	800792c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007920:	2301      	movs	r3, #1
 8007922:	e086      	b.n	8007a32 <HAL_RCC_ClockConfig+0x34e>
 8007924:	52002000 	.word	0x52002000
 8007928:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f003 0304 	and.w	r3, r3, #4
 8007934:	2b00      	cmp	r3, #0
 8007936:	d010      	beq.n	800795a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	691a      	ldr	r2, [r3, #16]
 800793c:	4b3f      	ldr	r3, [pc, #252]	; (8007a3c <HAL_RCC_ClockConfig+0x358>)
 800793e:	699b      	ldr	r3, [r3, #24]
 8007940:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007944:	429a      	cmp	r2, r3
 8007946:	d208      	bcs.n	800795a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007948:	4b3c      	ldr	r3, [pc, #240]	; (8007a3c <HAL_RCC_ClockConfig+0x358>)
 800794a:	699b      	ldr	r3, [r3, #24]
 800794c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	691b      	ldr	r3, [r3, #16]
 8007954:	4939      	ldr	r1, [pc, #228]	; (8007a3c <HAL_RCC_ClockConfig+0x358>)
 8007956:	4313      	orrs	r3, r2
 8007958:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f003 0308 	and.w	r3, r3, #8
 8007962:	2b00      	cmp	r3, #0
 8007964:	d010      	beq.n	8007988 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	695a      	ldr	r2, [r3, #20]
 800796a:	4b34      	ldr	r3, [pc, #208]	; (8007a3c <HAL_RCC_ClockConfig+0x358>)
 800796c:	69db      	ldr	r3, [r3, #28]
 800796e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007972:	429a      	cmp	r2, r3
 8007974:	d208      	bcs.n	8007988 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007976:	4b31      	ldr	r3, [pc, #196]	; (8007a3c <HAL_RCC_ClockConfig+0x358>)
 8007978:	69db      	ldr	r3, [r3, #28]
 800797a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	695b      	ldr	r3, [r3, #20]
 8007982:	492e      	ldr	r1, [pc, #184]	; (8007a3c <HAL_RCC_ClockConfig+0x358>)
 8007984:	4313      	orrs	r3, r2
 8007986:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f003 0310 	and.w	r3, r3, #16
 8007990:	2b00      	cmp	r3, #0
 8007992:	d010      	beq.n	80079b6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	699a      	ldr	r2, [r3, #24]
 8007998:	4b28      	ldr	r3, [pc, #160]	; (8007a3c <HAL_RCC_ClockConfig+0x358>)
 800799a:	69db      	ldr	r3, [r3, #28]
 800799c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80079a0:	429a      	cmp	r2, r3
 80079a2:	d208      	bcs.n	80079b6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80079a4:	4b25      	ldr	r3, [pc, #148]	; (8007a3c <HAL_RCC_ClockConfig+0x358>)
 80079a6:	69db      	ldr	r3, [r3, #28]
 80079a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	699b      	ldr	r3, [r3, #24]
 80079b0:	4922      	ldr	r1, [pc, #136]	; (8007a3c <HAL_RCC_ClockConfig+0x358>)
 80079b2:	4313      	orrs	r3, r2
 80079b4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f003 0320 	and.w	r3, r3, #32
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d010      	beq.n	80079e4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	69da      	ldr	r2, [r3, #28]
 80079c6:	4b1d      	ldr	r3, [pc, #116]	; (8007a3c <HAL_RCC_ClockConfig+0x358>)
 80079c8:	6a1b      	ldr	r3, [r3, #32]
 80079ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80079ce:	429a      	cmp	r2, r3
 80079d0:	d208      	bcs.n	80079e4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80079d2:	4b1a      	ldr	r3, [pc, #104]	; (8007a3c <HAL_RCC_ClockConfig+0x358>)
 80079d4:	6a1b      	ldr	r3, [r3, #32]
 80079d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	69db      	ldr	r3, [r3, #28]
 80079de:	4917      	ldr	r1, [pc, #92]	; (8007a3c <HAL_RCC_ClockConfig+0x358>)
 80079e0:	4313      	orrs	r3, r2
 80079e2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80079e4:	f000 f844 	bl	8007a70 <HAL_RCC_GetSysClockFreq>
 80079e8:	4601      	mov	r1, r0
 80079ea:	4b14      	ldr	r3, [pc, #80]	; (8007a3c <HAL_RCC_ClockConfig+0x358>)
 80079ec:	699b      	ldr	r3, [r3, #24]
 80079ee:	0a1b      	lsrs	r3, r3, #8
 80079f0:	f003 030f 	and.w	r3, r3, #15
 80079f4:	4a12      	ldr	r2, [pc, #72]	; (8007a40 <HAL_RCC_ClockConfig+0x35c>)
 80079f6:	5cd3      	ldrb	r3, [r2, r3]
 80079f8:	f003 031f 	and.w	r3, r3, #31
 80079fc:	fa21 f303 	lsr.w	r3, r1, r3
 8007a00:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007a02:	4b0e      	ldr	r3, [pc, #56]	; (8007a3c <HAL_RCC_ClockConfig+0x358>)
 8007a04:	699b      	ldr	r3, [r3, #24]
 8007a06:	f003 030f 	and.w	r3, r3, #15
 8007a0a:	4a0d      	ldr	r2, [pc, #52]	; (8007a40 <HAL_RCC_ClockConfig+0x35c>)
 8007a0c:	5cd3      	ldrb	r3, [r2, r3]
 8007a0e:	f003 031f 	and.w	r3, r3, #31
 8007a12:	693a      	ldr	r2, [r7, #16]
 8007a14:	fa22 f303 	lsr.w	r3, r2, r3
 8007a18:	4a0a      	ldr	r2, [pc, #40]	; (8007a44 <HAL_RCC_ClockConfig+0x360>)
 8007a1a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007a1c:	4a0a      	ldr	r2, [pc, #40]	; (8007a48 <HAL_RCC_ClockConfig+0x364>)
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8007a22:	4b0a      	ldr	r3, [pc, #40]	; (8007a4c <HAL_RCC_ClockConfig+0x368>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4618      	mov	r0, r3
 8007a28:	f7fa fa22 	bl	8001e70 <HAL_InitTick>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3718      	adds	r7, #24
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}
 8007a3a:	bf00      	nop
 8007a3c:	58024400 	.word	0x58024400
 8007a40:	080171c8 	.word	0x080171c8
 8007a44:	24000004 	.word	0x24000004
 8007a48:	24000000 	.word	0x24000000
 8007a4c:	24000008 	.word	0x24000008

08007a50 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8007a50:	b480      	push	{r7}
 8007a52:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 8007a54:	4b05      	ldr	r3, [pc, #20]	; (8007a6c <HAL_RCC_EnableCSS+0x1c>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4a04      	ldr	r2, [pc, #16]	; (8007a6c <HAL_RCC_EnableCSS+0x1c>)
 8007a5a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007a5e:	6013      	str	r3, [r2, #0]
}
 8007a60:	bf00      	nop
 8007a62:	46bd      	mov	sp, r7
 8007a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a68:	4770      	bx	lr
 8007a6a:	bf00      	nop
 8007a6c:	58024400 	.word	0x58024400

08007a70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b089      	sub	sp, #36	; 0x24
 8007a74:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007a76:	4baf      	ldr	r3, [pc, #700]	; (8007d34 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007a78:	691b      	ldr	r3, [r3, #16]
 8007a7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007a7e:	2b18      	cmp	r3, #24
 8007a80:	f200 814e 	bhi.w	8007d20 <HAL_RCC_GetSysClockFreq+0x2b0>
 8007a84:	a201      	add	r2, pc, #4	; (adr r2, 8007a8c <HAL_RCC_GetSysClockFreq+0x1c>)
 8007a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a8a:	bf00      	nop
 8007a8c:	08007af1 	.word	0x08007af1
 8007a90:	08007d21 	.word	0x08007d21
 8007a94:	08007d21 	.word	0x08007d21
 8007a98:	08007d21 	.word	0x08007d21
 8007a9c:	08007d21 	.word	0x08007d21
 8007aa0:	08007d21 	.word	0x08007d21
 8007aa4:	08007d21 	.word	0x08007d21
 8007aa8:	08007d21 	.word	0x08007d21
 8007aac:	08007b17 	.word	0x08007b17
 8007ab0:	08007d21 	.word	0x08007d21
 8007ab4:	08007d21 	.word	0x08007d21
 8007ab8:	08007d21 	.word	0x08007d21
 8007abc:	08007d21 	.word	0x08007d21
 8007ac0:	08007d21 	.word	0x08007d21
 8007ac4:	08007d21 	.word	0x08007d21
 8007ac8:	08007d21 	.word	0x08007d21
 8007acc:	08007b1d 	.word	0x08007b1d
 8007ad0:	08007d21 	.word	0x08007d21
 8007ad4:	08007d21 	.word	0x08007d21
 8007ad8:	08007d21 	.word	0x08007d21
 8007adc:	08007d21 	.word	0x08007d21
 8007ae0:	08007d21 	.word	0x08007d21
 8007ae4:	08007d21 	.word	0x08007d21
 8007ae8:	08007d21 	.word	0x08007d21
 8007aec:	08007b23 	.word	0x08007b23
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007af0:	4b90      	ldr	r3, [pc, #576]	; (8007d34 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f003 0320 	and.w	r3, r3, #32
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d009      	beq.n	8007b10 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007afc:	4b8d      	ldr	r3, [pc, #564]	; (8007d34 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	08db      	lsrs	r3, r3, #3
 8007b02:	f003 0303 	and.w	r3, r3, #3
 8007b06:	4a8c      	ldr	r2, [pc, #560]	; (8007d38 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8007b08:	fa22 f303 	lsr.w	r3, r2, r3
 8007b0c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8007b0e:	e10a      	b.n	8007d26 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007b10:	4b89      	ldr	r3, [pc, #548]	; (8007d38 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8007b12:	61bb      	str	r3, [r7, #24]
    break;
 8007b14:	e107      	b.n	8007d26 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8007b16:	4b89      	ldr	r3, [pc, #548]	; (8007d3c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8007b18:	61bb      	str	r3, [r7, #24]
    break;
 8007b1a:	e104      	b.n	8007d26 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007b1c:	4b88      	ldr	r3, [pc, #544]	; (8007d40 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8007b1e:	61bb      	str	r3, [r7, #24]
    break;
 8007b20:	e101      	b.n	8007d26 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007b22:	4b84      	ldr	r3, [pc, #528]	; (8007d34 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b26:	f003 0303 	and.w	r3, r3, #3
 8007b2a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007b2c:	4b81      	ldr	r3, [pc, #516]	; (8007d34 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b30:	091b      	lsrs	r3, r3, #4
 8007b32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007b36:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007b38:	4b7e      	ldr	r3, [pc, #504]	; (8007d34 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b3c:	f003 0301 	and.w	r3, r3, #1
 8007b40:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007b42:	4b7c      	ldr	r3, [pc, #496]	; (8007d34 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b46:	08db      	lsrs	r3, r3, #3
 8007b48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007b4c:	68fa      	ldr	r2, [r7, #12]
 8007b4e:	fb02 f303 	mul.w	r3, r2, r3
 8007b52:	ee07 3a90 	vmov	s15, r3
 8007b56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b5a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	f000 80da 	beq.w	8007d1a <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	2b01      	cmp	r3, #1
 8007b6a:	d05a      	beq.n	8007c22 <HAL_RCC_GetSysClockFreq+0x1b2>
 8007b6c:	2b01      	cmp	r3, #1
 8007b6e:	d302      	bcc.n	8007b76 <HAL_RCC_GetSysClockFreq+0x106>
 8007b70:	2b02      	cmp	r3, #2
 8007b72:	d078      	beq.n	8007c66 <HAL_RCC_GetSysClockFreq+0x1f6>
 8007b74:	e099      	b.n	8007caa <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b76:	4b6f      	ldr	r3, [pc, #444]	; (8007d34 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f003 0320 	and.w	r3, r3, #32
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d02d      	beq.n	8007bde <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007b82:	4b6c      	ldr	r3, [pc, #432]	; (8007d34 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	08db      	lsrs	r3, r3, #3
 8007b88:	f003 0303 	and.w	r3, r3, #3
 8007b8c:	4a6a      	ldr	r2, [pc, #424]	; (8007d38 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8007b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8007b92:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	ee07 3a90 	vmov	s15, r3
 8007b9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	ee07 3a90 	vmov	s15, r3
 8007ba4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ba8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bac:	4b61      	ldr	r3, [pc, #388]	; (8007d34 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bb4:	ee07 3a90 	vmov	s15, r3
 8007bb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bbc:	ed97 6a02 	vldr	s12, [r7, #8]
 8007bc0:	eddf 5a60 	vldr	s11, [pc, #384]	; 8007d44 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007bc4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bc8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bcc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bd0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bd8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007bdc:	e087      	b.n	8007cee <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	ee07 3a90 	vmov	s15, r3
 8007be4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007be8:	eddf 6a57 	vldr	s13, [pc, #348]	; 8007d48 <HAL_RCC_GetSysClockFreq+0x2d8>
 8007bec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bf0:	4b50      	ldr	r3, [pc, #320]	; (8007d34 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bf8:	ee07 3a90 	vmov	s15, r3
 8007bfc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c00:	ed97 6a02 	vldr	s12, [r7, #8]
 8007c04:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8007d44 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007c08:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c10:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c1c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c20:	e065      	b.n	8007cee <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	ee07 3a90 	vmov	s15, r3
 8007c28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c2c:	eddf 6a47 	vldr	s13, [pc, #284]	; 8007d4c <HAL_RCC_GetSysClockFreq+0x2dc>
 8007c30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c34:	4b3f      	ldr	r3, [pc, #252]	; (8007d34 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c3c:	ee07 3a90 	vmov	s15, r3
 8007c40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c44:	ed97 6a02 	vldr	s12, [r7, #8]
 8007c48:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8007d44 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007c4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c50:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c60:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c64:	e043      	b.n	8007cee <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	ee07 3a90 	vmov	s15, r3
 8007c6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c70:	eddf 6a37 	vldr	s13, [pc, #220]	; 8007d50 <HAL_RCC_GetSysClockFreq+0x2e0>
 8007c74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c78:	4b2e      	ldr	r3, [pc, #184]	; (8007d34 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c80:	ee07 3a90 	vmov	s15, r3
 8007c84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c88:	ed97 6a02 	vldr	s12, [r7, #8]
 8007c8c:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8007d44 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007c90:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c94:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c98:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ca0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ca4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007ca8:	e021      	b.n	8007cee <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	ee07 3a90 	vmov	s15, r3
 8007cb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cb4:	eddf 6a25 	vldr	s13, [pc, #148]	; 8007d4c <HAL_RCC_GetSysClockFreq+0x2dc>
 8007cb8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cbc:	4b1d      	ldr	r3, [pc, #116]	; (8007d34 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cc4:	ee07 3a90 	vmov	s15, r3
 8007cc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ccc:	ed97 6a02 	vldr	s12, [r7, #8]
 8007cd0:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8007d44 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007cd4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cd8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cdc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ce0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ce4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ce8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007cec:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007cee:	4b11      	ldr	r3, [pc, #68]	; (8007d34 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cf2:	0a5b      	lsrs	r3, r3, #9
 8007cf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cf8:	3301      	adds	r3, #1
 8007cfa:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	ee07 3a90 	vmov	s15, r3
 8007d02:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007d06:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d12:	ee17 3a90 	vmov	r3, s15
 8007d16:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8007d18:	e005      	b.n	8007d26 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	61bb      	str	r3, [r7, #24]
    break;
 8007d1e:	e002      	b.n	8007d26 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8007d20:	4b06      	ldr	r3, [pc, #24]	; (8007d3c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8007d22:	61bb      	str	r3, [r7, #24]
    break;
 8007d24:	bf00      	nop
  }

  return sysclockfreq;
 8007d26:	69bb      	ldr	r3, [r7, #24]
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3724      	adds	r7, #36	; 0x24
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr
 8007d34:	58024400 	.word	0x58024400
 8007d38:	03d09000 	.word	0x03d09000
 8007d3c:	003d0900 	.word	0x003d0900
 8007d40:	017d7840 	.word	0x017d7840
 8007d44:	46000000 	.word	0x46000000
 8007d48:	4c742400 	.word	0x4c742400
 8007d4c:	4a742400 	.word	0x4a742400
 8007d50:	4bbebc20 	.word	0x4bbebc20

08007d54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b082      	sub	sp, #8
 8007d58:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007d5a:	f7ff fe89 	bl	8007a70 <HAL_RCC_GetSysClockFreq>
 8007d5e:	4601      	mov	r1, r0
 8007d60:	4b10      	ldr	r3, [pc, #64]	; (8007da4 <HAL_RCC_GetHCLKFreq+0x50>)
 8007d62:	699b      	ldr	r3, [r3, #24]
 8007d64:	0a1b      	lsrs	r3, r3, #8
 8007d66:	f003 030f 	and.w	r3, r3, #15
 8007d6a:	4a0f      	ldr	r2, [pc, #60]	; (8007da8 <HAL_RCC_GetHCLKFreq+0x54>)
 8007d6c:	5cd3      	ldrb	r3, [r2, r3]
 8007d6e:	f003 031f 	and.w	r3, r3, #31
 8007d72:	fa21 f303 	lsr.w	r3, r1, r3
 8007d76:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007d78:	4b0a      	ldr	r3, [pc, #40]	; (8007da4 <HAL_RCC_GetHCLKFreq+0x50>)
 8007d7a:	699b      	ldr	r3, [r3, #24]
 8007d7c:	f003 030f 	and.w	r3, r3, #15
 8007d80:	4a09      	ldr	r2, [pc, #36]	; (8007da8 <HAL_RCC_GetHCLKFreq+0x54>)
 8007d82:	5cd3      	ldrb	r3, [r2, r3]
 8007d84:	f003 031f 	and.w	r3, r3, #31
 8007d88:	687a      	ldr	r2, [r7, #4]
 8007d8a:	fa22 f303 	lsr.w	r3, r2, r3
 8007d8e:	4a07      	ldr	r2, [pc, #28]	; (8007dac <HAL_RCC_GetHCLKFreq+0x58>)
 8007d90:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007d92:	4a07      	ldr	r2, [pc, #28]	; (8007db0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007d98:	4b04      	ldr	r3, [pc, #16]	; (8007dac <HAL_RCC_GetHCLKFreq+0x58>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3708      	adds	r7, #8
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}
 8007da4:	58024400 	.word	0x58024400
 8007da8:	080171c8 	.word	0x080171c8
 8007dac:	24000004 	.word	0x24000004
 8007db0:	24000000 	.word	0x24000000

08007db4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007db8:	f7ff ffcc 	bl	8007d54 <HAL_RCC_GetHCLKFreq>
 8007dbc:	4601      	mov	r1, r0
 8007dbe:	4b06      	ldr	r3, [pc, #24]	; (8007dd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007dc0:	69db      	ldr	r3, [r3, #28]
 8007dc2:	091b      	lsrs	r3, r3, #4
 8007dc4:	f003 0307 	and.w	r3, r3, #7
 8007dc8:	4a04      	ldr	r2, [pc, #16]	; (8007ddc <HAL_RCC_GetPCLK1Freq+0x28>)
 8007dca:	5cd3      	ldrb	r3, [r2, r3]
 8007dcc:	f003 031f 	and.w	r3, r3, #31
 8007dd0:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	bd80      	pop	{r7, pc}
 8007dd8:	58024400 	.word	0x58024400
 8007ddc:	080171c8 	.word	0x080171c8

08007de0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007de4:	f7ff ffb6 	bl	8007d54 <HAL_RCC_GetHCLKFreq>
 8007de8:	4601      	mov	r1, r0
 8007dea:	4b06      	ldr	r3, [pc, #24]	; (8007e04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007dec:	69db      	ldr	r3, [r3, #28]
 8007dee:	0a1b      	lsrs	r3, r3, #8
 8007df0:	f003 0307 	and.w	r3, r3, #7
 8007df4:	4a04      	ldr	r2, [pc, #16]	; (8007e08 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007df6:	5cd3      	ldrb	r3, [r2, r3]
 8007df8:	f003 031f 	and.w	r3, r3, #31
 8007dfc:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	bd80      	pop	{r7, pc}
 8007e04:	58024400 	.word	0x58024400
 8007e08:	080171c8 	.word	0x080171c8

08007e0c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8007e10:	4b07      	ldr	r3, [pc, #28]	; (8007e30 <HAL_RCC_NMI_IRQHandler+0x24>)
 8007e12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e1c:	d105      	bne.n	8007e2a <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CCSCallback();
 8007e1e:	f000 f809 	bl	8007e34 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8007e22:	4b03      	ldr	r3, [pc, #12]	; (8007e30 <HAL_RCC_NMI_IRQHandler+0x24>)
 8007e24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007e28:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 8007e2a:	bf00      	nop
 8007e2c:	bd80      	pop	{r7, pc}
 8007e2e:	bf00      	nop
 8007e30:	58024400 	.word	0x58024400

08007e34 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CCSCallback(void)
{
 8007e34:	b480      	push	{r7}
 8007e36:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CCSCallback could be implemented in the user file
   */
}
 8007e38:	bf00      	nop
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e40:	4770      	bx	lr
	...

08007e44 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b086      	sub	sp, #24
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007e50:	2300      	movs	r3, #0
 8007e52:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d03d      	beq.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e68:	d013      	beq.n	8007e92 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8007e6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e6e:	d802      	bhi.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d007      	beq.n	8007e84 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8007e74:	e01f      	b.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8007e76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007e7a:	d013      	beq.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8007e7c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007e80:	d01c      	beq.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0x78>
 8007e82:	e018      	b.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e84:	4baf      	ldr	r3, [pc, #700]	; (8008144 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e88:	4aae      	ldr	r2, [pc, #696]	; (8008144 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007e8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e8e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007e90:	e015      	b.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	3304      	adds	r3, #4
 8007e96:	2102      	movs	r1, #2
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f001 fd33 	bl	8009904 <RCCEx_PLL2_Config>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007ea2:	e00c      	b.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	3324      	adds	r3, #36	; 0x24
 8007ea8:	2102      	movs	r1, #2
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f001 fddc 	bl	8009a68 <RCCEx_PLL3_Config>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007eb4:	e003      	b.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	75fb      	strb	r3, [r7, #23]
      break;
 8007eba:	e000      	b.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8007ebc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ebe:	7dfb      	ldrb	r3, [r7, #23]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d109      	bne.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007ec4:	4b9f      	ldr	r3, [pc, #636]	; (8008144 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007ec6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ec8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ed0:	499c      	ldr	r1, [pc, #624]	; (8008144 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	650b      	str	r3, [r1, #80]	; 0x50
 8007ed6:	e001      	b.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ed8:	7dfb      	ldrb	r3, [r7, #23]
 8007eda:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d03d      	beq.n	8007f64 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eec:	2b04      	cmp	r3, #4
 8007eee:	d826      	bhi.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8007ef0:	a201      	add	r2, pc, #4	; (adr r2, 8007ef8 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8007ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ef6:	bf00      	nop
 8007ef8:	08007f0d 	.word	0x08007f0d
 8007efc:	08007f1b 	.word	0x08007f1b
 8007f00:	08007f2d 	.word	0x08007f2d
 8007f04:	08007f45 	.word	0x08007f45
 8007f08:	08007f45 	.word	0x08007f45
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f0c:	4b8d      	ldr	r3, [pc, #564]	; (8008144 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f10:	4a8c      	ldr	r2, [pc, #560]	; (8008144 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007f12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f16:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007f18:	e015      	b.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	3304      	adds	r3, #4
 8007f1e:	2100      	movs	r1, #0
 8007f20:	4618      	mov	r0, r3
 8007f22:	f001 fcef 	bl	8009904 <RCCEx_PLL2_Config>
 8007f26:	4603      	mov	r3, r0
 8007f28:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007f2a:	e00c      	b.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	3324      	adds	r3, #36	; 0x24
 8007f30:	2100      	movs	r1, #0
 8007f32:	4618      	mov	r0, r3
 8007f34:	f001 fd98 	bl	8009a68 <RCCEx_PLL3_Config>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007f3c:	e003      	b.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f3e:	2301      	movs	r3, #1
 8007f40:	75fb      	strb	r3, [r7, #23]
      break;
 8007f42:	e000      	b.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8007f44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f46:	7dfb      	ldrb	r3, [r7, #23]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d109      	bne.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007f4c:	4b7d      	ldr	r3, [pc, #500]	; (8008144 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007f4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f50:	f023 0207 	bic.w	r2, r3, #7
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f58:	497a      	ldr	r1, [pc, #488]	; (8008144 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007f5a:	4313      	orrs	r3, r2
 8007f5c:	650b      	str	r3, [r1, #80]	; 0x50
 8007f5e:	e001      	b.n	8007f64 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f60:	7dfb      	ldrb	r3, [r7, #23]
 8007f62:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d03e      	beq.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f74:	2b80      	cmp	r3, #128	; 0x80
 8007f76:	d01c      	beq.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8007f78:	2b80      	cmp	r3, #128	; 0x80
 8007f7a:	d804      	bhi.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d008      	beq.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8007f80:	2b40      	cmp	r3, #64	; 0x40
 8007f82:	d00d      	beq.n	8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8007f84:	e01e      	b.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8007f86:	2bc0      	cmp	r3, #192	; 0xc0
 8007f88:	d01f      	beq.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0x186>
 8007f8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f8e:	d01e      	beq.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007f90:	e018      	b.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f92:	4b6c      	ldr	r3, [pc, #432]	; (8008144 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f96:	4a6b      	ldr	r2, [pc, #428]	; (8008144 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007f98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f9c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007f9e:	e017      	b.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	3304      	adds	r3, #4
 8007fa4:	2100      	movs	r1, #0
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f001 fcac 	bl	8009904 <RCCEx_PLL2_Config>
 8007fac:	4603      	mov	r3, r0
 8007fae:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007fb0:	e00e      	b.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	3324      	adds	r3, #36	; 0x24
 8007fb6:	2100      	movs	r1, #0
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f001 fd55 	bl	8009a68 <RCCEx_PLL3_Config>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007fc2:	e005      	b.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	75fb      	strb	r3, [r7, #23]
      break;
 8007fc8:	e002      	b.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8007fca:	bf00      	nop
 8007fcc:	e000      	b.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8007fce:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007fd0:	7dfb      	ldrb	r3, [r7, #23]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d109      	bne.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007fd6:	4b5b      	ldr	r3, [pc, #364]	; (8008144 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007fd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fda:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fe2:	4958      	ldr	r1, [pc, #352]	; (8008144 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007fe4:	4313      	orrs	r3, r2
 8007fe6:	650b      	str	r3, [r1, #80]	; 0x50
 8007fe8:	e001      	b.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fea:	7dfb      	ldrb	r3, [r7, #23]
 8007fec:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d044      	beq.n	8008084 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008000:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008004:	d01f      	beq.n	8008046 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8008006:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800800a:	d805      	bhi.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800800c:	2b00      	cmp	r3, #0
 800800e:	d00a      	beq.n	8008026 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008010:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008014:	d00e      	beq.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8008016:	e01f      	b.n	8008058 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8008018:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800801c:	d01f      	beq.n	800805e <HAL_RCCEx_PeriphCLKConfig+0x21a>
 800801e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008022:	d01e      	beq.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8008024:	e018      	b.n	8008058 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008026:	4b47      	ldr	r3, [pc, #284]	; (8008144 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800802a:	4a46      	ldr	r2, [pc, #280]	; (8008144 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800802c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008030:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008032:	e017      	b.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	3304      	adds	r3, #4
 8008038:	2100      	movs	r1, #0
 800803a:	4618      	mov	r0, r3
 800803c:	f001 fc62 	bl	8009904 <RCCEx_PLL2_Config>
 8008040:	4603      	mov	r3, r0
 8008042:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008044:	e00e      	b.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	3324      	adds	r3, #36	; 0x24
 800804a:	2100      	movs	r1, #0
 800804c:	4618      	mov	r0, r3
 800804e:	f001 fd0b 	bl	8009a68 <RCCEx_PLL3_Config>
 8008052:	4603      	mov	r3, r0
 8008054:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008056:	e005      	b.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008058:	2301      	movs	r3, #1
 800805a:	75fb      	strb	r3, [r7, #23]
      break;
 800805c:	e002      	b.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800805e:	bf00      	nop
 8008060:	e000      	b.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8008062:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008064:	7dfb      	ldrb	r3, [r7, #23]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d10a      	bne.n	8008080 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800806a:	4b36      	ldr	r3, [pc, #216]	; (8008144 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800806c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800806e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008078:	4932      	ldr	r1, [pc, #200]	; (8008144 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800807a:	4313      	orrs	r3, r2
 800807c:	658b      	str	r3, [r1, #88]	; 0x58
 800807e:	e001      	b.n	8008084 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008080:	7dfb      	ldrb	r3, [r7, #23]
 8008082:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800808c:	2b00      	cmp	r3, #0
 800808e:	d044      	beq.n	800811a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008096:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800809a:	d01f      	beq.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0x298>
 800809c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80080a0:	d805      	bhi.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d00a      	beq.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0x278>
 80080a6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80080aa:	d00e      	beq.n	80080ca <HAL_RCCEx_PeriphCLKConfig+0x286>
 80080ac:	e01f      	b.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 80080ae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80080b2:	d01f      	beq.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80080b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80080b8:	d01e      	beq.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80080ba:	e018      	b.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080bc:	4b21      	ldr	r3, [pc, #132]	; (8008144 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80080be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080c0:	4a20      	ldr	r2, [pc, #128]	; (8008144 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80080c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80080c8:	e017      	b.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	3304      	adds	r3, #4
 80080ce:	2100      	movs	r1, #0
 80080d0:	4618      	mov	r0, r3
 80080d2:	f001 fc17 	bl	8009904 <RCCEx_PLL2_Config>
 80080d6:	4603      	mov	r3, r0
 80080d8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80080da:	e00e      	b.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	3324      	adds	r3, #36	; 0x24
 80080e0:	2100      	movs	r1, #0
 80080e2:	4618      	mov	r0, r3
 80080e4:	f001 fcc0 	bl	8009a68 <RCCEx_PLL3_Config>
 80080e8:	4603      	mov	r3, r0
 80080ea:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80080ec:	e005      	b.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80080ee:	2301      	movs	r3, #1
 80080f0:	75fb      	strb	r3, [r7, #23]
      break;
 80080f2:	e002      	b.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80080f4:	bf00      	nop
 80080f6:	e000      	b.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80080f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80080fa:	7dfb      	ldrb	r3, [r7, #23]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d10a      	bne.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008100:	4b10      	ldr	r3, [pc, #64]	; (8008144 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008104:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800810e:	490d      	ldr	r1, [pc, #52]	; (8008144 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008110:	4313      	orrs	r3, r2
 8008112:	658b      	str	r3, [r1, #88]	; 0x58
 8008114:	e001      	b.n	800811a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008116:	7dfb      	ldrb	r3, [r7, #23]
 8008118:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008122:	2b00      	cmp	r3, #0
 8008124:	d035      	beq.n	8008192 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800812a:	2b10      	cmp	r3, #16
 800812c:	d00c      	beq.n	8008148 <HAL_RCCEx_PeriphCLKConfig+0x304>
 800812e:	2b10      	cmp	r3, #16
 8008130:	d802      	bhi.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8008132:	2b00      	cmp	r3, #0
 8008134:	d01b      	beq.n	800816e <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8008136:	e017      	b.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8008138:	2b20      	cmp	r3, #32
 800813a:	d00c      	beq.n	8008156 <HAL_RCCEx_PeriphCLKConfig+0x312>
 800813c:	2b30      	cmp	r3, #48	; 0x30
 800813e:	d018      	beq.n	8008172 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8008140:	e012      	b.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8008142:	bf00      	nop
 8008144:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008148:	4baf      	ldr	r3, [pc, #700]	; (8008408 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800814a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800814c:	4aae      	ldr	r2, [pc, #696]	; (8008408 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800814e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008152:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008154:	e00e      	b.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	3304      	adds	r3, #4
 800815a:	2102      	movs	r1, #2
 800815c:	4618      	mov	r0, r3
 800815e:	f001 fbd1 	bl	8009904 <RCCEx_PLL2_Config>
 8008162:	4603      	mov	r3, r0
 8008164:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008166:	e005      	b.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008168:	2301      	movs	r3, #1
 800816a:	75fb      	strb	r3, [r7, #23]
      break;
 800816c:	e002      	b.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800816e:	bf00      	nop
 8008170:	e000      	b.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8008172:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008174:	7dfb      	ldrb	r3, [r7, #23]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d109      	bne.n	800818e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800817a:	4ba3      	ldr	r3, [pc, #652]	; (8008408 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800817c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800817e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008186:	49a0      	ldr	r1, [pc, #640]	; (8008408 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008188:	4313      	orrs	r3, r2
 800818a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800818c:	e001      	b.n	8008192 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800818e:	7dfb      	ldrb	r3, [r7, #23]
 8008190:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800819a:	2b00      	cmp	r3, #0
 800819c:	d042      	beq.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081a6:	d01f      	beq.n	80081e8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80081a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081ac:	d805      	bhi.n	80081ba <HAL_RCCEx_PeriphCLKConfig+0x376>
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d00a      	beq.n	80081c8 <HAL_RCCEx_PeriphCLKConfig+0x384>
 80081b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081b6:	d00e      	beq.n	80081d6 <HAL_RCCEx_PeriphCLKConfig+0x392>
 80081b8:	e01f      	b.n	80081fa <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 80081ba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80081be:	d01f      	beq.n	8008200 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80081c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80081c4:	d01e      	beq.n	8008204 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80081c6:	e018      	b.n	80081fa <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081c8:	4b8f      	ldr	r3, [pc, #572]	; (8008408 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80081ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081cc:	4a8e      	ldr	r2, [pc, #568]	; (8008408 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80081ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80081d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80081d4:	e017      	b.n	8008206 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	3304      	adds	r3, #4
 80081da:	2100      	movs	r1, #0
 80081dc:	4618      	mov	r0, r3
 80081de:	f001 fb91 	bl	8009904 <RCCEx_PLL2_Config>
 80081e2:	4603      	mov	r3, r0
 80081e4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80081e6:	e00e      	b.n	8008206 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	3324      	adds	r3, #36	; 0x24
 80081ec:	2100      	movs	r1, #0
 80081ee:	4618      	mov	r0, r3
 80081f0:	f001 fc3a 	bl	8009a68 <RCCEx_PLL3_Config>
 80081f4:	4603      	mov	r3, r0
 80081f6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80081f8:	e005      	b.n	8008206 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80081fa:	2301      	movs	r3, #1
 80081fc:	75fb      	strb	r3, [r7, #23]
      break;
 80081fe:	e002      	b.n	8008206 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8008200:	bf00      	nop
 8008202:	e000      	b.n	8008206 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8008204:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008206:	7dfb      	ldrb	r3, [r7, #23]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d109      	bne.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800820c:	4b7e      	ldr	r3, [pc, #504]	; (8008408 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800820e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008210:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008218:	497b      	ldr	r1, [pc, #492]	; (8008408 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800821a:	4313      	orrs	r3, r2
 800821c:	650b      	str	r3, [r1, #80]	; 0x50
 800821e:	e001      	b.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008220:	7dfb      	ldrb	r3, [r7, #23]
 8008222:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800822c:	2b00      	cmp	r3, #0
 800822e:	d042      	beq.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008234:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008238:	d01b      	beq.n	8008272 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800823a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800823e:	d805      	bhi.n	800824c <HAL_RCCEx_PeriphCLKConfig+0x408>
 8008240:	2b00      	cmp	r3, #0
 8008242:	d022      	beq.n	800828a <HAL_RCCEx_PeriphCLKConfig+0x446>
 8008244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008248:	d00a      	beq.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800824a:	e01b      	b.n	8008284 <HAL_RCCEx_PeriphCLKConfig+0x440>
 800824c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008250:	d01d      	beq.n	800828e <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8008252:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008256:	d01c      	beq.n	8008292 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8008258:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800825c:	d01b      	beq.n	8008296 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800825e:	e011      	b.n	8008284 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	3304      	adds	r3, #4
 8008264:	2101      	movs	r1, #1
 8008266:	4618      	mov	r0, r3
 8008268:	f001 fb4c 	bl	8009904 <RCCEx_PLL2_Config>
 800826c:	4603      	mov	r3, r0
 800826e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008270:	e012      	b.n	8008298 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	3324      	adds	r3, #36	; 0x24
 8008276:	2101      	movs	r1, #1
 8008278:	4618      	mov	r0, r3
 800827a:	f001 fbf5 	bl	8009a68 <RCCEx_PLL3_Config>
 800827e:	4603      	mov	r3, r0
 8008280:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008282:	e009      	b.n	8008298 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008284:	2301      	movs	r3, #1
 8008286:	75fb      	strb	r3, [r7, #23]
      break;
 8008288:	e006      	b.n	8008298 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800828a:	bf00      	nop
 800828c:	e004      	b.n	8008298 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800828e:	bf00      	nop
 8008290:	e002      	b.n	8008298 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8008292:	bf00      	nop
 8008294:	e000      	b.n	8008298 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8008296:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008298:	7dfb      	ldrb	r3, [r7, #23]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d109      	bne.n	80082b2 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800829e:	4b5a      	ldr	r3, [pc, #360]	; (8008408 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80082a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082a2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082aa:	4957      	ldr	r1, [pc, #348]	; (8008408 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80082ac:	4313      	orrs	r3, r2
 80082ae:	650b      	str	r3, [r1, #80]	; 0x50
 80082b0:	e001      	b.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082b2:	7dfb      	ldrb	r3, [r7, #23]
 80082b4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d044      	beq.n	800834c <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80082c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082cc:	d01b      	beq.n	8008306 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80082ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082d2:	d805      	bhi.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d022      	beq.n	800831e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80082d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80082dc:	d00a      	beq.n	80082f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80082de:	e01b      	b.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80082e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082e4:	d01d      	beq.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80082e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80082ea:	d01c      	beq.n	8008326 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 80082ec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80082f0:	d01b      	beq.n	800832a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80082f2:	e011      	b.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	3304      	adds	r3, #4
 80082f8:	2101      	movs	r1, #1
 80082fa:	4618      	mov	r0, r3
 80082fc:	f001 fb02 	bl	8009904 <RCCEx_PLL2_Config>
 8008300:	4603      	mov	r3, r0
 8008302:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008304:	e012      	b.n	800832c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	3324      	adds	r3, #36	; 0x24
 800830a:	2101      	movs	r1, #1
 800830c:	4618      	mov	r0, r3
 800830e:	f001 fbab 	bl	8009a68 <RCCEx_PLL3_Config>
 8008312:	4603      	mov	r3, r0
 8008314:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008316:	e009      	b.n	800832c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008318:	2301      	movs	r3, #1
 800831a:	75fb      	strb	r3, [r7, #23]
      break;
 800831c:	e006      	b.n	800832c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800831e:	bf00      	nop
 8008320:	e004      	b.n	800832c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8008322:	bf00      	nop
 8008324:	e002      	b.n	800832c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8008326:	bf00      	nop
 8008328:	e000      	b.n	800832c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800832a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800832c:	7dfb      	ldrb	r3, [r7, #23]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d10a      	bne.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008332:	4b35      	ldr	r3, [pc, #212]	; (8008408 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008336:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008340:	4931      	ldr	r1, [pc, #196]	; (8008408 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008342:	4313      	orrs	r3, r2
 8008344:	658b      	str	r3, [r1, #88]	; 0x58
 8008346:	e001      	b.n	800834c <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008348:	7dfb      	ldrb	r3, [r7, #23]
 800834a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008354:	2b00      	cmp	r3, #0
 8008356:	d02d      	beq.n	80083b4 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800835c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008360:	d005      	beq.n	800836e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8008362:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008366:	d009      	beq.n	800837c <HAL_RCCEx_PeriphCLKConfig+0x538>
 8008368:	2b00      	cmp	r3, #0
 800836a:	d013      	beq.n	8008394 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800836c:	e00f      	b.n	800838e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800836e:	4b26      	ldr	r3, [pc, #152]	; (8008408 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008372:	4a25      	ldr	r2, [pc, #148]	; (8008408 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008374:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008378:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800837a:	e00c      	b.n	8008396 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	3304      	adds	r3, #4
 8008380:	2101      	movs	r1, #1
 8008382:	4618      	mov	r0, r3
 8008384:	f001 fabe 	bl	8009904 <RCCEx_PLL2_Config>
 8008388:	4603      	mov	r3, r0
 800838a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800838c:	e003      	b.n	8008396 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800838e:	2301      	movs	r3, #1
 8008390:	75fb      	strb	r3, [r7, #23]
      break;
 8008392:	e000      	b.n	8008396 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8008394:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008396:	7dfb      	ldrb	r3, [r7, #23]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d109      	bne.n	80083b0 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800839c:	4b1a      	ldr	r3, [pc, #104]	; (8008408 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800839e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083a0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083a8:	4917      	ldr	r1, [pc, #92]	; (8008408 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80083aa:	4313      	orrs	r3, r2
 80083ac:	650b      	str	r3, [r1, #80]	; 0x50
 80083ae:	e001      	b.n	80083b4 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083b0:	7dfb      	ldrb	r3, [r7, #23]
 80083b2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d035      	beq.n	800842c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083c4:	2b03      	cmp	r3, #3
 80083c6:	d81b      	bhi.n	8008400 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80083c8:	a201      	add	r2, pc, #4	; (adr r2, 80083d0 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80083ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083ce:	bf00      	nop
 80083d0:	0800840d 	.word	0x0800840d
 80083d4:	080083e1 	.word	0x080083e1
 80083d8:	080083ef 	.word	0x080083ef
 80083dc:	0800840d 	.word	0x0800840d
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083e0:	4b09      	ldr	r3, [pc, #36]	; (8008408 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80083e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083e4:	4a08      	ldr	r2, [pc, #32]	; (8008408 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80083e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80083ec:	e00f      	b.n	800840e <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	3304      	adds	r3, #4
 80083f2:	2102      	movs	r1, #2
 80083f4:	4618      	mov	r0, r3
 80083f6:	f001 fa85 	bl	8009904 <RCCEx_PLL2_Config>
 80083fa:	4603      	mov	r3, r0
 80083fc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80083fe:	e006      	b.n	800840e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008400:	2301      	movs	r3, #1
 8008402:	75fb      	strb	r3, [r7, #23]
      break;
 8008404:	e003      	b.n	800840e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8008406:	bf00      	nop
 8008408:	58024400 	.word	0x58024400
      break;
 800840c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800840e:	7dfb      	ldrb	r3, [r7, #23]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d109      	bne.n	8008428 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008414:	4bba      	ldr	r3, [pc, #744]	; (8008700 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008418:	f023 0203 	bic.w	r2, r3, #3
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008420:	49b7      	ldr	r1, [pc, #732]	; (8008700 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008422:	4313      	orrs	r3, r2
 8008424:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008426:	e001      	b.n	800842c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008428:	7dfb      	ldrb	r3, [r7, #23]
 800842a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008434:	2b00      	cmp	r3, #0
 8008436:	f000 8086 	beq.w	8008546 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800843a:	4bb2      	ldr	r3, [pc, #712]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4ab1      	ldr	r2, [pc, #708]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8008440:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008444:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008446:	f7f9 fd5d 	bl	8001f04 <HAL_GetTick>
 800844a:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800844c:	e009      	b.n	8008462 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800844e:	f7f9 fd59 	bl	8001f04 <HAL_GetTick>
 8008452:	4602      	mov	r2, r0
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	1ad3      	subs	r3, r2, r3
 8008458:	2b64      	cmp	r3, #100	; 0x64
 800845a:	d902      	bls.n	8008462 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 800845c:	2303      	movs	r3, #3
 800845e:	75fb      	strb	r3, [r7, #23]
        break;
 8008460:	e005      	b.n	800846e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008462:	4ba8      	ldr	r3, [pc, #672]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800846a:	2b00      	cmp	r3, #0
 800846c:	d0ef      	beq.n	800844e <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 800846e:	7dfb      	ldrb	r3, [r7, #23]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d166      	bne.n	8008542 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008474:	4ba2      	ldr	r3, [pc, #648]	; (8008700 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008476:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800847e:	4053      	eors	r3, r2
 8008480:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008484:	2b00      	cmp	r3, #0
 8008486:	d013      	beq.n	80084b0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008488:	4b9d      	ldr	r3, [pc, #628]	; (8008700 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800848a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800848c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008490:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008492:	4b9b      	ldr	r3, [pc, #620]	; (8008700 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008496:	4a9a      	ldr	r2, [pc, #616]	; (8008700 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008498:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800849c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800849e:	4b98      	ldr	r3, [pc, #608]	; (8008700 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80084a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084a2:	4a97      	ldr	r2, [pc, #604]	; (8008700 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80084a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80084a8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80084aa:	4a95      	ldr	r2, [pc, #596]	; (8008700 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80084b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084ba:	d115      	bne.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084bc:	f7f9 fd22 	bl	8001f04 <HAL_GetTick>
 80084c0:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80084c2:	e00b      	b.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80084c4:	f7f9 fd1e 	bl	8001f04 <HAL_GetTick>
 80084c8:	4602      	mov	r2, r0
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	1ad3      	subs	r3, r2, r3
 80084ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d902      	bls.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 80084d6:	2303      	movs	r3, #3
 80084d8:	75fb      	strb	r3, [r7, #23]
            break;
 80084da:	e005      	b.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80084dc:	4b88      	ldr	r3, [pc, #544]	; (8008700 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80084de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084e0:	f003 0302 	and.w	r3, r3, #2
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d0ed      	beq.n	80084c4 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 80084e8:	7dfb      	ldrb	r3, [r7, #23]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d126      	bne.n	800853c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80084f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80084fc:	d10d      	bne.n	800851a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80084fe:	4b80      	ldr	r3, [pc, #512]	; (8008700 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008500:	691b      	ldr	r3, [r3, #16]
 8008502:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800850c:	0919      	lsrs	r1, r3, #4
 800850e:	4b7e      	ldr	r3, [pc, #504]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8008510:	400b      	ands	r3, r1
 8008512:	497b      	ldr	r1, [pc, #492]	; (8008700 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008514:	4313      	orrs	r3, r2
 8008516:	610b      	str	r3, [r1, #16]
 8008518:	e005      	b.n	8008526 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800851a:	4b79      	ldr	r3, [pc, #484]	; (8008700 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800851c:	691b      	ldr	r3, [r3, #16]
 800851e:	4a78      	ldr	r2, [pc, #480]	; (8008700 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008520:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008524:	6113      	str	r3, [r2, #16]
 8008526:	4b76      	ldr	r3, [pc, #472]	; (8008700 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008528:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008530:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008534:	4972      	ldr	r1, [pc, #456]	; (8008700 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008536:	4313      	orrs	r3, r2
 8008538:	670b      	str	r3, [r1, #112]	; 0x70
 800853a:	e004      	b.n	8008546 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800853c:	7dfb      	ldrb	r3, [r7, #23]
 800853e:	75bb      	strb	r3, [r7, #22]
 8008540:	e001      	b.n	8008546 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008542:	7dfb      	ldrb	r3, [r7, #23]
 8008544:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f003 0301 	and.w	r3, r3, #1
 800854e:	2b00      	cmp	r3, #0
 8008550:	d07d      	beq.n	800864e <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008556:	2b28      	cmp	r3, #40	; 0x28
 8008558:	d866      	bhi.n	8008628 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 800855a:	a201      	add	r2, pc, #4	; (adr r2, 8008560 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800855c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008560:	0800862f 	.word	0x0800862f
 8008564:	08008629 	.word	0x08008629
 8008568:	08008629 	.word	0x08008629
 800856c:	08008629 	.word	0x08008629
 8008570:	08008629 	.word	0x08008629
 8008574:	08008629 	.word	0x08008629
 8008578:	08008629 	.word	0x08008629
 800857c:	08008629 	.word	0x08008629
 8008580:	08008605 	.word	0x08008605
 8008584:	08008629 	.word	0x08008629
 8008588:	08008629 	.word	0x08008629
 800858c:	08008629 	.word	0x08008629
 8008590:	08008629 	.word	0x08008629
 8008594:	08008629 	.word	0x08008629
 8008598:	08008629 	.word	0x08008629
 800859c:	08008629 	.word	0x08008629
 80085a0:	08008617 	.word	0x08008617
 80085a4:	08008629 	.word	0x08008629
 80085a8:	08008629 	.word	0x08008629
 80085ac:	08008629 	.word	0x08008629
 80085b0:	08008629 	.word	0x08008629
 80085b4:	08008629 	.word	0x08008629
 80085b8:	08008629 	.word	0x08008629
 80085bc:	08008629 	.word	0x08008629
 80085c0:	0800862f 	.word	0x0800862f
 80085c4:	08008629 	.word	0x08008629
 80085c8:	08008629 	.word	0x08008629
 80085cc:	08008629 	.word	0x08008629
 80085d0:	08008629 	.word	0x08008629
 80085d4:	08008629 	.word	0x08008629
 80085d8:	08008629 	.word	0x08008629
 80085dc:	08008629 	.word	0x08008629
 80085e0:	0800862f 	.word	0x0800862f
 80085e4:	08008629 	.word	0x08008629
 80085e8:	08008629 	.word	0x08008629
 80085ec:	08008629 	.word	0x08008629
 80085f0:	08008629 	.word	0x08008629
 80085f4:	08008629 	.word	0x08008629
 80085f8:	08008629 	.word	0x08008629
 80085fc:	08008629 	.word	0x08008629
 8008600:	0800862f 	.word	0x0800862f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	3304      	adds	r3, #4
 8008608:	2101      	movs	r1, #1
 800860a:	4618      	mov	r0, r3
 800860c:	f001 f97a 	bl	8009904 <RCCEx_PLL2_Config>
 8008610:	4603      	mov	r3, r0
 8008612:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008614:	e00c      	b.n	8008630 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	3324      	adds	r3, #36	; 0x24
 800861a:	2101      	movs	r1, #1
 800861c:	4618      	mov	r0, r3
 800861e:	f001 fa23 	bl	8009a68 <RCCEx_PLL3_Config>
 8008622:	4603      	mov	r3, r0
 8008624:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008626:	e003      	b.n	8008630 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008628:	2301      	movs	r3, #1
 800862a:	75fb      	strb	r3, [r7, #23]
      break;
 800862c:	e000      	b.n	8008630 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 800862e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008630:	7dfb      	ldrb	r3, [r7, #23]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d109      	bne.n	800864a <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008636:	4b32      	ldr	r3, [pc, #200]	; (8008700 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800863a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008642:	492f      	ldr	r1, [pc, #188]	; (8008700 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008644:	4313      	orrs	r3, r2
 8008646:	654b      	str	r3, [r1, #84]	; 0x54
 8008648:	e001      	b.n	800864e <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800864a:	7dfb      	ldrb	r3, [r7, #23]
 800864c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f003 0302 	and.w	r3, r3, #2
 8008656:	2b00      	cmp	r3, #0
 8008658:	d037      	beq.n	80086ca <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800865e:	2b05      	cmp	r3, #5
 8008660:	d820      	bhi.n	80086a4 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8008662:	a201      	add	r2, pc, #4	; (adr r2, 8008668 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8008664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008668:	080086ab 	.word	0x080086ab
 800866c:	08008681 	.word	0x08008681
 8008670:	08008693 	.word	0x08008693
 8008674:	080086ab 	.word	0x080086ab
 8008678:	080086ab 	.word	0x080086ab
 800867c:	080086ab 	.word	0x080086ab
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	3304      	adds	r3, #4
 8008684:	2101      	movs	r1, #1
 8008686:	4618      	mov	r0, r3
 8008688:	f001 f93c 	bl	8009904 <RCCEx_PLL2_Config>
 800868c:	4603      	mov	r3, r0
 800868e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008690:	e00c      	b.n	80086ac <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	3324      	adds	r3, #36	; 0x24
 8008696:	2101      	movs	r1, #1
 8008698:	4618      	mov	r0, r3
 800869a:	f001 f9e5 	bl	8009a68 <RCCEx_PLL3_Config>
 800869e:	4603      	mov	r3, r0
 80086a0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80086a2:	e003      	b.n	80086ac <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80086a4:	2301      	movs	r3, #1
 80086a6:	75fb      	strb	r3, [r7, #23]
      break;
 80086a8:	e000      	b.n	80086ac <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 80086aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80086ac:	7dfb      	ldrb	r3, [r7, #23]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d109      	bne.n	80086c6 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80086b2:	4b13      	ldr	r3, [pc, #76]	; (8008700 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80086b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086b6:	f023 0207 	bic.w	r2, r3, #7
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086be:	4910      	ldr	r1, [pc, #64]	; (8008700 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80086c0:	4313      	orrs	r3, r2
 80086c2:	654b      	str	r3, [r1, #84]	; 0x54
 80086c4:	e001      	b.n	80086ca <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086c6:	7dfb      	ldrb	r3, [r7, #23]
 80086c8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f003 0304 	and.w	r3, r3, #4
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d040      	beq.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086dc:	2b05      	cmp	r3, #5
 80086de:	d827      	bhi.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80086e0:	a201      	add	r2, pc, #4	; (adr r2, 80086e8 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 80086e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086e6:	bf00      	nop
 80086e8:	08008737 	.word	0x08008737
 80086ec:	0800870d 	.word	0x0800870d
 80086f0:	0800871f 	.word	0x0800871f
 80086f4:	08008737 	.word	0x08008737
 80086f8:	08008737 	.word	0x08008737
 80086fc:	08008737 	.word	0x08008737
 8008700:	58024400 	.word	0x58024400
 8008704:	58024800 	.word	0x58024800
 8008708:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	3304      	adds	r3, #4
 8008710:	2101      	movs	r1, #1
 8008712:	4618      	mov	r0, r3
 8008714:	f001 f8f6 	bl	8009904 <RCCEx_PLL2_Config>
 8008718:	4603      	mov	r3, r0
 800871a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800871c:	e00c      	b.n	8008738 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	3324      	adds	r3, #36	; 0x24
 8008722:	2101      	movs	r1, #1
 8008724:	4618      	mov	r0, r3
 8008726:	f001 f99f 	bl	8009a68 <RCCEx_PLL3_Config>
 800872a:	4603      	mov	r3, r0
 800872c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800872e:	e003      	b.n	8008738 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008730:	2301      	movs	r3, #1
 8008732:	75fb      	strb	r3, [r7, #23]
      break;
 8008734:	e000      	b.n	8008738 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8008736:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008738:	7dfb      	ldrb	r3, [r7, #23]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d10a      	bne.n	8008754 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800873e:	4bb2      	ldr	r3, [pc, #712]	; (8008a08 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008742:	f023 0207 	bic.w	r2, r3, #7
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800874c:	49ae      	ldr	r1, [pc, #696]	; (8008a08 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800874e:	4313      	orrs	r3, r2
 8008750:	658b      	str	r3, [r1, #88]	; 0x58
 8008752:	e001      	b.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008754:	7dfb      	ldrb	r3, [r7, #23]
 8008756:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f003 0320 	and.w	r3, r3, #32
 8008760:	2b00      	cmp	r3, #0
 8008762:	d044      	beq.n	80087ee <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800876a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800876e:	d01b      	beq.n	80087a8 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8008770:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008774:	d805      	bhi.n	8008782 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8008776:	2b00      	cmp	r3, #0
 8008778:	d022      	beq.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 800877a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800877e:	d00a      	beq.n	8008796 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8008780:	e01b      	b.n	80087ba <HAL_RCCEx_PeriphCLKConfig+0x976>
 8008782:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008786:	d01d      	beq.n	80087c4 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8008788:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800878c:	d01c      	beq.n	80087c8 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800878e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008792:	d01b      	beq.n	80087cc <HAL_RCCEx_PeriphCLKConfig+0x988>
 8008794:	e011      	b.n	80087ba <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	3304      	adds	r3, #4
 800879a:	2100      	movs	r1, #0
 800879c:	4618      	mov	r0, r3
 800879e:	f001 f8b1 	bl	8009904 <RCCEx_PLL2_Config>
 80087a2:	4603      	mov	r3, r0
 80087a4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80087a6:	e012      	b.n	80087ce <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	3324      	adds	r3, #36	; 0x24
 80087ac:	2102      	movs	r1, #2
 80087ae:	4618      	mov	r0, r3
 80087b0:	f001 f95a 	bl	8009a68 <RCCEx_PLL3_Config>
 80087b4:	4603      	mov	r3, r0
 80087b6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80087b8:	e009      	b.n	80087ce <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80087ba:	2301      	movs	r3, #1
 80087bc:	75fb      	strb	r3, [r7, #23]
      break;
 80087be:	e006      	b.n	80087ce <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80087c0:	bf00      	nop
 80087c2:	e004      	b.n	80087ce <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80087c4:	bf00      	nop
 80087c6:	e002      	b.n	80087ce <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80087c8:	bf00      	nop
 80087ca:	e000      	b.n	80087ce <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80087cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80087ce:	7dfb      	ldrb	r3, [r7, #23]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d10a      	bne.n	80087ea <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80087d4:	4b8c      	ldr	r3, [pc, #560]	; (8008a08 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80087d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087d8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80087e2:	4989      	ldr	r1, [pc, #548]	; (8008a08 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80087e4:	4313      	orrs	r3, r2
 80087e6:	654b      	str	r3, [r1, #84]	; 0x54
 80087e8:	e001      	b.n	80087ee <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087ea:	7dfb      	ldrb	r3, [r7, #23]
 80087ec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d044      	beq.n	8008884 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008800:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008804:	d01b      	beq.n	800883e <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8008806:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800880a:	d805      	bhi.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 800880c:	2b00      	cmp	r3, #0
 800880e:	d022      	beq.n	8008856 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8008810:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008814:	d00a      	beq.n	800882c <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8008816:	e01b      	b.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8008818:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800881c:	d01d      	beq.n	800885a <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800881e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008822:	d01c      	beq.n	800885e <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8008824:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008828:	d01b      	beq.n	8008862 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 800882a:	e011      	b.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	3304      	adds	r3, #4
 8008830:	2100      	movs	r1, #0
 8008832:	4618      	mov	r0, r3
 8008834:	f001 f866 	bl	8009904 <RCCEx_PLL2_Config>
 8008838:	4603      	mov	r3, r0
 800883a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800883c:	e012      	b.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	3324      	adds	r3, #36	; 0x24
 8008842:	2102      	movs	r1, #2
 8008844:	4618      	mov	r0, r3
 8008846:	f001 f90f 	bl	8009a68 <RCCEx_PLL3_Config>
 800884a:	4603      	mov	r3, r0
 800884c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800884e:	e009      	b.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008850:	2301      	movs	r3, #1
 8008852:	75fb      	strb	r3, [r7, #23]
      break;
 8008854:	e006      	b.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8008856:	bf00      	nop
 8008858:	e004      	b.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800885a:	bf00      	nop
 800885c:	e002      	b.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800885e:	bf00      	nop
 8008860:	e000      	b.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8008862:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008864:	7dfb      	ldrb	r3, [r7, #23]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d10a      	bne.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800886a:	4b67      	ldr	r3, [pc, #412]	; (8008a08 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800886c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800886e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008878:	4963      	ldr	r1, [pc, #396]	; (8008a08 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800887a:	4313      	orrs	r3, r2
 800887c:	658b      	str	r3, [r1, #88]	; 0x58
 800887e:	e001      	b.n	8008884 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008880:	7dfb      	ldrb	r3, [r7, #23]
 8008882:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800888c:	2b00      	cmp	r3, #0
 800888e:	d044      	beq.n	800891a <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008896:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800889a:	d01b      	beq.n	80088d4 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 800889c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80088a0:	d805      	bhi.n	80088ae <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d022      	beq.n	80088ec <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80088a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088aa:	d00a      	beq.n	80088c2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80088ac:	e01b      	b.n	80088e6 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 80088ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80088b2:	d01d      	beq.n	80088f0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80088b4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80088b8:	d01c      	beq.n	80088f4 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 80088ba:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80088be:	d01b      	beq.n	80088f8 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80088c0:	e011      	b.n	80088e6 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	3304      	adds	r3, #4
 80088c6:	2100      	movs	r1, #0
 80088c8:	4618      	mov	r0, r3
 80088ca:	f001 f81b 	bl	8009904 <RCCEx_PLL2_Config>
 80088ce:	4603      	mov	r3, r0
 80088d0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80088d2:	e012      	b.n	80088fa <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	3324      	adds	r3, #36	; 0x24
 80088d8:	2102      	movs	r1, #2
 80088da:	4618      	mov	r0, r3
 80088dc:	f001 f8c4 	bl	8009a68 <RCCEx_PLL3_Config>
 80088e0:	4603      	mov	r3, r0
 80088e2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80088e4:	e009      	b.n	80088fa <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80088e6:	2301      	movs	r3, #1
 80088e8:	75fb      	strb	r3, [r7, #23]
      break;
 80088ea:	e006      	b.n	80088fa <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80088ec:	bf00      	nop
 80088ee:	e004      	b.n	80088fa <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80088f0:	bf00      	nop
 80088f2:	e002      	b.n	80088fa <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80088f4:	bf00      	nop
 80088f6:	e000      	b.n	80088fa <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80088f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80088fa:	7dfb      	ldrb	r3, [r7, #23]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d10a      	bne.n	8008916 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008900:	4b41      	ldr	r3, [pc, #260]	; (8008a08 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008904:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800890e:	493e      	ldr	r1, [pc, #248]	; (8008a08 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008910:	4313      	orrs	r3, r2
 8008912:	658b      	str	r3, [r1, #88]	; 0x58
 8008914:	e001      	b.n	800891a <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008916:	7dfb      	ldrb	r3, [r7, #23]
 8008918:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f003 0308 	and.w	r3, r3, #8
 8008922:	2b00      	cmp	r3, #0
 8008924:	d01a      	beq.n	800895c <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800892c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008930:	d10a      	bne.n	8008948 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	3324      	adds	r3, #36	; 0x24
 8008936:	2102      	movs	r1, #2
 8008938:	4618      	mov	r0, r3
 800893a:	f001 f895 	bl	8009a68 <RCCEx_PLL3_Config>
 800893e:	4603      	mov	r3, r0
 8008940:	2b00      	cmp	r3, #0
 8008942:	d001      	beq.n	8008948 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8008944:	2301      	movs	r3, #1
 8008946:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008948:	4b2f      	ldr	r3, [pc, #188]	; (8008a08 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800894a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800894c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008956:	492c      	ldr	r1, [pc, #176]	; (8008a08 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008958:	4313      	orrs	r3, r2
 800895a:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f003 0310 	and.w	r3, r3, #16
 8008964:	2b00      	cmp	r3, #0
 8008966:	d01a      	beq.n	800899e <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800896e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008972:	d10a      	bne.n	800898a <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	3324      	adds	r3, #36	; 0x24
 8008978:	2102      	movs	r1, #2
 800897a:	4618      	mov	r0, r3
 800897c:	f001 f874 	bl	8009a68 <RCCEx_PLL3_Config>
 8008980:	4603      	mov	r3, r0
 8008982:	2b00      	cmp	r3, #0
 8008984:	d001      	beq.n	800898a <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8008986:	2301      	movs	r3, #1
 8008988:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800898a:	4b1f      	ldr	r3, [pc, #124]	; (8008a08 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800898c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800898e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008998:	491b      	ldr	r1, [pc, #108]	; (8008a08 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800899a:	4313      	orrs	r3, r2
 800899c:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d032      	beq.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80089b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089b4:	d00d      	beq.n	80089d2 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 80089b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80089ba:	d016      	beq.n	80089ea <HAL_RCCEx_PeriphCLKConfig+0xba6>
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d111      	bne.n	80089e4 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	3304      	adds	r3, #4
 80089c4:	2100      	movs	r1, #0
 80089c6:	4618      	mov	r0, r3
 80089c8:	f000 ff9c 	bl	8009904 <RCCEx_PLL2_Config>
 80089cc:	4603      	mov	r3, r0
 80089ce:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80089d0:	e00c      	b.n	80089ec <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	3324      	adds	r3, #36	; 0x24
 80089d6:	2102      	movs	r1, #2
 80089d8:	4618      	mov	r0, r3
 80089da:	f001 f845 	bl	8009a68 <RCCEx_PLL3_Config>
 80089de:	4603      	mov	r3, r0
 80089e0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80089e2:	e003      	b.n	80089ec <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80089e4:	2301      	movs	r3, #1
 80089e6:	75fb      	strb	r3, [r7, #23]
      break;
 80089e8:	e000      	b.n	80089ec <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 80089ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80089ec:	7dfb      	ldrb	r3, [r7, #23]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d10c      	bne.n	8008a0c <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80089f2:	4b05      	ldr	r3, [pc, #20]	; (8008a08 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80089f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089f6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008a00:	4901      	ldr	r1, [pc, #4]	; (8008a08 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008a02:	4313      	orrs	r3, r2
 8008a04:	658b      	str	r3, [r1, #88]	; 0x58
 8008a06:	e003      	b.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8008a08:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a0c:	7dfb      	ldrb	r3, [r7, #23]
 8008a0e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d02f      	beq.n	8008a7c <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008a26:	d00c      	beq.n	8008a42 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8008a28:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008a2c:	d015      	beq.n	8008a5a <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8008a2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a32:	d10f      	bne.n	8008a54 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a34:	4b79      	ldr	r3, [pc, #484]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a38:	4a78      	ldr	r2, [pc, #480]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008a3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a3e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8008a40:	e00c      	b.n	8008a5c <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	3324      	adds	r3, #36	; 0x24
 8008a46:	2101      	movs	r1, #1
 8008a48:	4618      	mov	r0, r3
 8008a4a:	f001 f80d 	bl	8009a68 <RCCEx_PLL3_Config>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008a52:	e003      	b.n	8008a5c <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008a54:	2301      	movs	r3, #1
 8008a56:	75fb      	strb	r3, [r7, #23]
      break;
 8008a58:	e000      	b.n	8008a5c <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8008a5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a5c:	7dfb      	ldrb	r3, [r7, #23]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d10a      	bne.n	8008a78 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008a62:	4b6e      	ldr	r3, [pc, #440]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a66:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a70:	496a      	ldr	r1, [pc, #424]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008a72:	4313      	orrs	r3, r2
 8008a74:	654b      	str	r3, [r1, #84]	; 0x54
 8008a76:	e001      	b.n	8008a7c <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a78:	7dfb      	ldrb	r3, [r7, #23]
 8008a7a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d029      	beq.n	8008adc <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d003      	beq.n	8008a98 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8008a90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a94:	d007      	beq.n	8008aa6 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8008a96:	e00f      	b.n	8008ab8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a98:	4b60      	ldr	r3, [pc, #384]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a9c:	4a5f      	ldr	r2, [pc, #380]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008a9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008aa2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008aa4:	e00b      	b.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	3304      	adds	r3, #4
 8008aaa:	2102      	movs	r1, #2
 8008aac:	4618      	mov	r0, r3
 8008aae:	f000 ff29 	bl	8009904 <RCCEx_PLL2_Config>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008ab6:	e002      	b.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8008ab8:	2301      	movs	r3, #1
 8008aba:	75fb      	strb	r3, [r7, #23]
      break;
 8008abc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008abe:	7dfb      	ldrb	r3, [r7, #23]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d109      	bne.n	8008ad8 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008ac4:	4b55      	ldr	r3, [pc, #340]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ac8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ad0:	4952      	ldr	r1, [pc, #328]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008ad6:	e001      	b.n	8008adc <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ad8:	7dfb      	ldrb	r3, [r7, #23]
 8008ada:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d00a      	beq.n	8008afe <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	3324      	adds	r3, #36	; 0x24
 8008aec:	2102      	movs	r1, #2
 8008aee:	4618      	mov	r0, r3
 8008af0:	f000 ffba 	bl	8009a68 <RCCEx_PLL3_Config>
 8008af4:	4603      	mov	r3, r0
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d001      	beq.n	8008afe <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8008afa:	2301      	movs	r3, #1
 8008afc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d02f      	beq.n	8008b6a <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b12:	d00c      	beq.n	8008b2e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8008b14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b18:	d802      	bhi.n	8008b20 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d011      	beq.n	8008b42 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8008b1e:	e00d      	b.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8008b20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b24:	d00f      	beq.n	8008b46 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8008b26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b2a:	d00e      	beq.n	8008b4a <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8008b2c:	e006      	b.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b2e:	4b3b      	ldr	r3, [pc, #236]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b32:	4a3a      	ldr	r2, [pc, #232]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008b34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b38:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8008b3a:	e007      	b.n	8008b4c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	75fb      	strb	r3, [r7, #23]
      break;
 8008b40:	e004      	b.n	8008b4c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8008b42:	bf00      	nop
 8008b44:	e002      	b.n	8008b4c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8008b46:	bf00      	nop
 8008b48:	e000      	b.n	8008b4c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8008b4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b4c:	7dfb      	ldrb	r3, [r7, #23]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d109      	bne.n	8008b66 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008b52:	4b32      	ldr	r3, [pc, #200]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b56:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b5e:	492f      	ldr	r1, [pc, #188]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008b60:	4313      	orrs	r3, r2
 8008b62:	654b      	str	r3, [r1, #84]	; 0x54
 8008b64:	e001      	b.n	8008b6a <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b66:	7dfb      	ldrb	r3, [r7, #23]
 8008b68:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d008      	beq.n	8008b88 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008b76:	4b29      	ldr	r3, [pc, #164]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008b78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b7a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b82:	4926      	ldr	r1, [pc, #152]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008b84:	4313      	orrs	r3, r2
 8008b86:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d009      	beq.n	8008ba8 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008b94:	4b21      	ldr	r3, [pc, #132]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008b96:	691b      	ldr	r3, [r3, #16]
 8008b98:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008ba2:	491e      	ldr	r1, [pc, #120]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008ba4:	4313      	orrs	r3, r2
 8008ba6:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d008      	beq.n	8008bc6 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008bb4:	4b19      	ldr	r3, [pc, #100]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008bb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bb8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008bc0:	4916      	ldr	r1, [pc, #88]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d00d      	beq.n	8008bee <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008bd2:	4b12      	ldr	r3, [pc, #72]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008bd4:	691b      	ldr	r3, [r3, #16]
 8008bd6:	4a11      	ldr	r2, [pc, #68]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008bd8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008bdc:	6113      	str	r3, [r2, #16]
 8008bde:	4b0f      	ldr	r3, [pc, #60]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008be0:	691a      	ldr	r2, [r3, #16]
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008be8:	490c      	ldr	r1, [pc, #48]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008bea:	4313      	orrs	r3, r2
 8008bec:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	da08      	bge.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008bf6:	4b09      	ldr	r3, [pc, #36]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bfa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c02:	4906      	ldr	r1, [pc, #24]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008c04:	4313      	orrs	r3, r2
 8008c06:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8008c08:	7dbb      	ldrb	r3, [r7, #22]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d101      	bne.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	e000      	b.n	8008c14 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 8008c12:	2301      	movs	r3, #1
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3718      	adds	r7, #24
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}
 8008c1c:	58024400 	.word	0x58024400

08008c20 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b090      	sub	sp, #64	; 0x40
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c2e:	d150      	bne.n	8008cd2 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8008c30:	4ba1      	ldr	r3, [pc, #644]	; (8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008c32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c34:	f003 0307 	and.w	r3, r3, #7
 8008c38:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c3c:	2b04      	cmp	r3, #4
 8008c3e:	d844      	bhi.n	8008cca <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8008c40:	a201      	add	r2, pc, #4	; (adr r2, 8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8008c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c46:	bf00      	nop
 8008c48:	08008c5d 	.word	0x08008c5d
 8008c4c:	08008c6d 	.word	0x08008c6d
 8008c50:	08008c7d 	.word	0x08008c7d
 8008c54:	08008cc5 	.word	0x08008cc5
 8008c58:	08008c8d 	.word	0x08008c8d
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008c5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c60:	4618      	mov	r0, r3
 8008c62:	f000 fd03 	bl	800966c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c6a:	e241      	b.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c6c:	f107 0318 	add.w	r3, r7, #24
 8008c70:	4618      	mov	r0, r3
 8008c72:	f000 fa63 	bl	800913c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008c76:	69bb      	ldr	r3, [r7, #24]
 8008c78:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c7a:	e239      	b.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c7c:	f107 030c 	add.w	r3, r7, #12
 8008c80:	4618      	mov	r0, r3
 8008c82:	f000 fba7 	bl	80093d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c8a:	e231      	b.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008c8c:	4b8a      	ldr	r3, [pc, #552]	; (8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008c8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c90:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008c94:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d102      	bne.n	8008ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008c9c:	4b87      	ldr	r3, [pc, #540]	; (8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008ca0:	e226      	b.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ca4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ca8:	d102      	bne.n	8008cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8008caa:	4b85      	ldr	r3, [pc, #532]	; (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008cac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008cae:	e21f      	b.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008cb6:	d102      	bne.n	8008cbe <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8008cb8:	4b82      	ldr	r3, [pc, #520]	; (8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008cba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008cbc:	e218      	b.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008cc2:	e215      	b.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008cc4:	4b80      	ldr	r3, [pc, #512]	; (8008ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8008cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008cc8:	e212      	b.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8008cca:	2300      	movs	r3, #0
 8008ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008cce:	bf00      	nop
 8008cd0:	e20e      	b.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008cd8:	d14f      	bne.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8008cda:	4b77      	ldr	r3, [pc, #476]	; (8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008cdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cde:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8008ce2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce6:	2b80      	cmp	r3, #128	; 0x80
 8008ce8:	d01c      	beq.n	8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8008cea:	2b80      	cmp	r3, #128	; 0x80
 8008cec:	d804      	bhi.n	8008cf8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d008      	beq.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8008cf2:	2b40      	cmp	r3, #64	; 0x40
 8008cf4:	d00e      	beq.n	8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8008cf6:	e03c      	b.n	8008d72 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8008cf8:	2bc0      	cmp	r3, #192	; 0xc0
 8008cfa:	d037      	beq.n	8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8008cfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d00:	d018      	beq.n	8008d34 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8008d02:	e036      	b.n	8008d72 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008d04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008d08:	4618      	mov	r0, r3
 8008d0a:	f000 fcaf 	bl	800966c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d10:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d12:	e1ed      	b.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d14:	f107 0318 	add.w	r3, r7, #24
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f000 fa0f 	bl	800913c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008d1e:	69bb      	ldr	r3, [r7, #24]
 8008d20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d22:	e1e5      	b.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d24:	f107 030c 	add.w	r3, r7, #12
 8008d28:	4618      	mov	r0, r3
 8008d2a:	f000 fb53 	bl	80093d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d32:	e1dd      	b.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008d34:	4b60      	ldr	r3, [pc, #384]	; (8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008d36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d38:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008d3c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d102      	bne.n	8008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008d44:	4b5d      	ldr	r3, [pc, #372]	; (8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008d46:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008d48:	e1d2      	b.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008d4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d50:	d102      	bne.n	8008d58 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 8008d52:	4b5b      	ldr	r3, [pc, #364]	; (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008d54:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d56:	e1cb      	b.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d5e:	d102      	bne.n	8008d66 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8008d60:	4b58      	ldr	r3, [pc, #352]	; (8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008d62:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d64:	e1c4      	b.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008d66:	2300      	movs	r3, #0
 8008d68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d6a:	e1c1      	b.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008d6c:	4b56      	ldr	r3, [pc, #344]	; (8008ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8008d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d70:	e1be      	b.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8008d72:	2300      	movs	r3, #0
 8008d74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d76:	bf00      	nop
 8008d78:	e1ba      	b.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d80:	d153      	bne.n	8008e2a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8008d82:	4b4d      	ldr	r3, [pc, #308]	; (8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d86:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8008d8a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008d92:	d01f      	beq.n	8008dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8008d94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008d98:	d805      	bhi.n	8008da6 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d00a      	beq.n	8008db4 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8008d9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008da2:	d00f      	beq.n	8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8008da4:	e03d      	b.n	8008e22 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8008da6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008daa:	d037      	beq.n	8008e1c <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8008dac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008db0:	d018      	beq.n	8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8008db2:	e036      	b.n	8008e22 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008db4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008db8:	4618      	mov	r0, r3
 8008dba:	f000 fc57 	bl	800966c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008dc2:	e195      	b.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008dc4:	f107 0318 	add.w	r3, r7, #24
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f000 f9b7 	bl	800913c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008dce:	69bb      	ldr	r3, [r7, #24]
 8008dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008dd2:	e18d      	b.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008dd4:	f107 030c 	add.w	r3, r7, #12
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f000 fafb 	bl	80093d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008de2:	e185      	b.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008de4:	4b34      	ldr	r3, [pc, #208]	; (8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008de6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008de8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008dec:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d102      	bne.n	8008dfa <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008df4:	4b31      	ldr	r3, [pc, #196]	; (8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008df6:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008df8:	e17a      	b.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dfc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008e00:	d102      	bne.n	8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 8008e02:	4b2f      	ldr	r3, [pc, #188]	; (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008e04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e06:	e173      	b.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e0e:	d102      	bne.n	8008e16 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 8008e10:	4b2c      	ldr	r3, [pc, #176]	; (8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008e12:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e14:	e16c      	b.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008e16:	2300      	movs	r3, #0
 8008e18:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e1a:	e169      	b.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008e1c:	4b2a      	ldr	r3, [pc, #168]	; (8008ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8008e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e20:	e166      	b.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8008e22:	2300      	movs	r3, #0
 8008e24:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e26:	bf00      	nop
 8008e28:	e162      	b.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e30:	d15d      	bne.n	8008eee <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8008e32:	4b21      	ldr	r3, [pc, #132]	; (8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e36:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008e3a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e42:	d01f      	beq.n	8008e84 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8008e44:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e48:	d805      	bhi.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d00a      	beq.n	8008e64 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8008e4e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008e52:	d00f      	beq.n	8008e74 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8008e54:	e047      	b.n	8008ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8008e56:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008e5a:	d041      	beq.n	8008ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8008e5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008e60:	d018      	beq.n	8008e94 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8008e62:	e040      	b.n	8008ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008e64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f000 fbff 	bl	800966c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e72:	e13d      	b.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e74:	f107 0318 	add.w	r3, r7, #24
 8008e78:	4618      	mov	r0, r3
 8008e7a:	f000 f95f 	bl	800913c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008e7e:	69bb      	ldr	r3, [r7, #24]
 8008e80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e82:	e135      	b.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e84:	f107 030c 	add.w	r3, r7, #12
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f000 faa3 	bl	80093d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e92:	e12d      	b.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008e94:	4b08      	ldr	r3, [pc, #32]	; (8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008e96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e98:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008e9c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d102      	bne.n	8008eaa <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008ea4:	4b05      	ldr	r3, [pc, #20]	; (8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008ea8:	e122      	b.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008eac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008eb0:	d10c      	bne.n	8008ecc <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 8008eb2:	4b03      	ldr	r3, [pc, #12]	; (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008eb6:	e11b      	b.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8008eb8:	58024400 	.word	0x58024400
 8008ebc:	03d09000 	.word	0x03d09000
 8008ec0:	003d0900 	.word	0x003d0900
 8008ec4:	017d7840 	.word	0x017d7840
 8008ec8:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ece:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ed2:	d102      	bne.n	8008eda <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8008ed4:	4b89      	ldr	r3, [pc, #548]	; (80090fc <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8008ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ed8:	e10a      	b.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008eda:	2300      	movs	r3, #0
 8008edc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ede:	e107      	b.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008ee0:	4b87      	ldr	r3, [pc, #540]	; (8009100 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8008ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ee4:	e104      	b.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008eea:	bf00      	nop
 8008eec:	e100      	b.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ef4:	d153      	bne.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8008ef6:	4b83      	ldr	r3, [pc, #524]	; (8009104 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008ef8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008efa:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008efe:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f06:	d01f      	beq.n	8008f48 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8008f08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f0c:	d805      	bhi.n	8008f1a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d00a      	beq.n	8008f28 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8008f12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f16:	d00f      	beq.n	8008f38 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8008f18:	e03d      	b.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 8008f1a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008f1e:	d037      	beq.n	8008f90 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8008f20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f24:	d018      	beq.n	8008f58 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8008f26:	e036      	b.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008f28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f000 fb9d 	bl	800966c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f34:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f36:	e0db      	b.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f38:	f107 0318 	add.w	r3, r7, #24
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f000 f8fd 	bl	800913c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008f42:	69bb      	ldr	r3, [r7, #24]
 8008f44:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f46:	e0d3      	b.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f48:	f107 030c 	add.w	r3, r7, #12
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f000 fa41 	bl	80093d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f56:	e0cb      	b.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008f58:	4b6a      	ldr	r3, [pc, #424]	; (8009104 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008f5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f5c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008f60:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008f62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d102      	bne.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008f68:	4b67      	ldr	r3, [pc, #412]	; (8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8008f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008f6c:	e0c0      	b.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f74:	d102      	bne.n	8008f7c <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 8008f76:	4b65      	ldr	r3, [pc, #404]	; (800910c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008f78:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f7a:	e0b9      	b.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008f7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f82:	d102      	bne.n	8008f8a <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 8008f84:	4b5d      	ldr	r3, [pc, #372]	; (80090fc <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8008f86:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f88:	e0b2      	b.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f8e:	e0af      	b.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008f90:	4b5b      	ldr	r3, [pc, #364]	; (8009100 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8008f92:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f94:	e0ac      	b.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8008f96:	2300      	movs	r3, #0
 8008f98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f9a:	bf00      	nop
 8008f9c:	e0a8      	b.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008fa4:	d13d      	bne.n	8009022 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8008fa6:	4b57      	ldr	r3, [pc, #348]	; (8009104 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008faa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008fae:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008fb6:	d00c      	beq.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8008fb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008fbc:	d011      	beq.n	8008fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d12b      	bne.n	800901a <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fc2:	f107 0318 	add.w	r3, r7, #24
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f000 f8b8 	bl	800913c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008fcc:	69bb      	ldr	r3, [r7, #24]
 8008fce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008fd0:	e08e      	b.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008fd2:	f107 030c 	add.w	r3, r7, #12
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f000 f9fc 	bl	80093d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008fdc:	697b      	ldr	r3, [r7, #20]
 8008fde:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008fe0:	e086      	b.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008fe2:	4b48      	ldr	r3, [pc, #288]	; (8009104 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fe6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008fea:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d102      	bne.n	8008ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008ff2:	4b45      	ldr	r3, [pc, #276]	; (8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8008ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008ff6:	e07b      	b.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ffa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ffe:	d102      	bne.n	8009006 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 8009000:	4b42      	ldr	r3, [pc, #264]	; (800910c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8009002:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009004:	e074      	b.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8009006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009008:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800900c:	d102      	bne.n	8009014 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 800900e:	4b3b      	ldr	r3, [pc, #236]	; (80090fc <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8009010:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009012:	e06d      	b.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8009014:	2300      	movs	r3, #0
 8009016:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009018:	e06a      	b.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800901a:	2300      	movs	r3, #0
 800901c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800901e:	bf00      	nop
 8009020:	e066      	b.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009028:	d11f      	bne.n	800906a <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800902a:	4b36      	ldr	r3, [pc, #216]	; (8009104 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800902c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800902e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009032:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009036:	2b00      	cmp	r3, #0
 8009038:	d003      	beq.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800903a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800903e:	d008      	beq.n	8009052 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8009040:	e00f      	b.n	8009062 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009042:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009046:	4618      	mov	r0, r3
 8009048:	f000 fb10 	bl	800966c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800904c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800904e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009050:	e04e      	b.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009052:	f107 0318 	add.w	r3, r7, #24
 8009056:	4618      	mov	r0, r3
 8009058:	f000 f870 	bl	800913c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800905c:	6a3b      	ldr	r3, [r7, #32]
 800905e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009060:	e046      	b.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8009062:	2300      	movs	r3, #0
 8009064:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009066:	bf00      	nop
 8009068:	e042      	b.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009070:	d13c      	bne.n	80090ec <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8009072:	4b24      	ldr	r3, [pc, #144]	; (8009104 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8009074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009076:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800907a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800907c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800907e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009082:	d01e      	beq.n	80090c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 8009084:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009088:	d805      	bhi.n	8009096 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 800908a:	2b00      	cmp	r3, #0
 800908c:	d00d      	beq.n	80090aa <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800908e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009092:	d00e      	beq.n	80090b2 <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 8009094:	e026      	b.n	80090e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8009096:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800909a:	d01d      	beq.n	80090d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 800909c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80090a0:	d01d      	beq.n	80090de <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 80090a2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80090a6:	d014      	beq.n	80090d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 80090a8:	e01c      	b.n	80090e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80090aa:	f000 f831 	bl	8009110 <HAL_RCCEx_GetD3PCLK1Freq>
 80090ae:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 80090b0:	e01e      	b.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090b2:	f107 0318 	add.w	r3, r7, #24
 80090b6:	4618      	mov	r0, r3
 80090b8:	f000 f840 	bl	800913c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80090bc:	69fb      	ldr	r3, [r7, #28]
 80090be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090c0:	e016      	b.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090c2:	f107 030c 	add.w	r3, r7, #12
 80090c6:	4618      	mov	r0, r3
 80090c8:	f000 f984 	bl	80093d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80090cc:	693b      	ldr	r3, [r7, #16]
 80090ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090d0:	e00e      	b.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 80090d2:	4b0d      	ldr	r3, [pc, #52]	; (8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80090d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090d6:	e00b      	b.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 80090d8:	4b0c      	ldr	r3, [pc, #48]	; (800910c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80090da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090dc:	e008      	b.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 80090de:	4b07      	ldr	r3, [pc, #28]	; (80090fc <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80090e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090e2:	e005      	b.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80090e4:	2300      	movs	r3, #0
 80090e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090e8:	bf00      	nop
 80090ea:	e001      	b.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 80090ec:	2300      	movs	r3, #0
 80090ee:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80090f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80090f2:	4618      	mov	r0, r3
 80090f4:	3740      	adds	r7, #64	; 0x40
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}
 80090fa:	bf00      	nop
 80090fc:	017d7840 	.word	0x017d7840
 8009100:	00bb8000 	.word	0x00bb8000
 8009104:	58024400 	.word	0x58024400
 8009108:	03d09000 	.word	0x03d09000
 800910c:	003d0900 	.word	0x003d0900

08009110 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009114:	f7fe fe1e 	bl	8007d54 <HAL_RCC_GetHCLKFreq>
 8009118:	4601      	mov	r1, r0
 800911a:	4b06      	ldr	r3, [pc, #24]	; (8009134 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800911c:	6a1b      	ldr	r3, [r3, #32]
 800911e:	091b      	lsrs	r3, r3, #4
 8009120:	f003 0307 	and.w	r3, r3, #7
 8009124:	4a04      	ldr	r2, [pc, #16]	; (8009138 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009126:	5cd3      	ldrb	r3, [r2, r3]
 8009128:	f003 031f 	and.w	r3, r3, #31
 800912c:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009130:	4618      	mov	r0, r3
 8009132:	bd80      	pop	{r7, pc}
 8009134:	58024400 	.word	0x58024400
 8009138:	080171c8 	.word	0x080171c8

0800913c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800913c:	b480      	push	{r7}
 800913e:	b089      	sub	sp, #36	; 0x24
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009144:	4b9d      	ldr	r3, [pc, #628]	; (80093bc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009148:	f003 0303 	and.w	r3, r3, #3
 800914c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800914e:	4b9b      	ldr	r3, [pc, #620]	; (80093bc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009152:	0b1b      	lsrs	r3, r3, #12
 8009154:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009158:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800915a:	4b98      	ldr	r3, [pc, #608]	; (80093bc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800915c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800915e:	091b      	lsrs	r3, r3, #4
 8009160:	f003 0301 	and.w	r3, r3, #1
 8009164:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009166:	4b95      	ldr	r3, [pc, #596]	; (80093bc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800916a:	08db      	lsrs	r3, r3, #3
 800916c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009170:	693a      	ldr	r2, [r7, #16]
 8009172:	fb02 f303 	mul.w	r3, r2, r3
 8009176:	ee07 3a90 	vmov	s15, r3
 800917a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800917e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	2b00      	cmp	r3, #0
 8009186:	f000 810a 	beq.w	800939e <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 800918a:	69bb      	ldr	r3, [r7, #24]
 800918c:	2b01      	cmp	r3, #1
 800918e:	d05a      	beq.n	8009246 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8009190:	2b01      	cmp	r3, #1
 8009192:	d302      	bcc.n	800919a <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8009194:	2b02      	cmp	r3, #2
 8009196:	d078      	beq.n	800928a <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8009198:	e099      	b.n	80092ce <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800919a:	4b88      	ldr	r3, [pc, #544]	; (80093bc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f003 0320 	and.w	r3, r3, #32
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d02d      	beq.n	8009202 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80091a6:	4b85      	ldr	r3, [pc, #532]	; (80093bc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	08db      	lsrs	r3, r3, #3
 80091ac:	f003 0303 	and.w	r3, r3, #3
 80091b0:	4a83      	ldr	r2, [pc, #524]	; (80093c0 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 80091b2:	fa22 f303 	lsr.w	r3, r2, r3
 80091b6:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	ee07 3a90 	vmov	s15, r3
 80091be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091c2:	697b      	ldr	r3, [r7, #20]
 80091c4:	ee07 3a90 	vmov	s15, r3
 80091c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091d0:	4b7a      	ldr	r3, [pc, #488]	; (80093bc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80091d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091d8:	ee07 3a90 	vmov	s15, r3
 80091dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091e0:	ed97 6a03 	vldr	s12, [r7, #12]
 80091e4:	eddf 5a77 	vldr	s11, [pc, #476]	; 80093c4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80091e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80091f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091fc:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009200:	e087      	b.n	8009312 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	ee07 3a90 	vmov	s15, r3
 8009208:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800920c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80093c8 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8009210:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009214:	4b69      	ldr	r3, [pc, #420]	; (80093bc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009218:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800921c:	ee07 3a90 	vmov	s15, r3
 8009220:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009224:	ed97 6a03 	vldr	s12, [r7, #12]
 8009228:	eddf 5a66 	vldr	s11, [pc, #408]	; 80093c4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800922c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009230:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009234:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009238:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800923c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009240:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009244:	e065      	b.n	8009312 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009246:	697b      	ldr	r3, [r7, #20]
 8009248:	ee07 3a90 	vmov	s15, r3
 800924c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009250:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80093cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8009254:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009258:	4b58      	ldr	r3, [pc, #352]	; (80093bc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800925a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800925c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009260:	ee07 3a90 	vmov	s15, r3
 8009264:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009268:	ed97 6a03 	vldr	s12, [r7, #12]
 800926c:	eddf 5a55 	vldr	s11, [pc, #340]	; 80093c4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8009270:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009274:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009278:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800927c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009280:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009284:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009288:	e043      	b.n	8009312 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	ee07 3a90 	vmov	s15, r3
 8009290:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009294:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80093d0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8009298:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800929c:	4b47      	ldr	r3, [pc, #284]	; (80093bc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800929e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092a4:	ee07 3a90 	vmov	s15, r3
 80092a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092ac:	ed97 6a03 	vldr	s12, [r7, #12]
 80092b0:	eddf 5a44 	vldr	s11, [pc, #272]	; 80093c4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80092b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80092c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092c8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80092cc:	e021      	b.n	8009312 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80092ce:	697b      	ldr	r3, [r7, #20]
 80092d0:	ee07 3a90 	vmov	s15, r3
 80092d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092d8:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80093cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80092dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092e0:	4b36      	ldr	r3, [pc, #216]	; (80093bc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80092e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092e8:	ee07 3a90 	vmov	s15, r3
 80092ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092f0:	ed97 6a03 	vldr	s12, [r7, #12]
 80092f4:	eddf 5a33 	vldr	s11, [pc, #204]	; 80093c4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80092f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009300:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009304:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009308:	ee67 7a27 	vmul.f32	s15, s14, s15
 800930c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009310:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009312:	4b2a      	ldr	r3, [pc, #168]	; (80093bc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009316:	0a5b      	lsrs	r3, r3, #9
 8009318:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800931c:	ee07 3a90 	vmov	s15, r3
 8009320:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009324:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009328:	ee37 7a87 	vadd.f32	s14, s15, s14
 800932c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009330:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009334:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009338:	ee17 2a90 	vmov	r2, s15
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009340:	4b1e      	ldr	r3, [pc, #120]	; (80093bc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009344:	0c1b      	lsrs	r3, r3, #16
 8009346:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800934a:	ee07 3a90 	vmov	s15, r3
 800934e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009352:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009356:	ee37 7a87 	vadd.f32	s14, s15, s14
 800935a:	edd7 6a07 	vldr	s13, [r7, #28]
 800935e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009362:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009366:	ee17 2a90 	vmov	r2, s15
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800936e:	4b13      	ldr	r3, [pc, #76]	; (80093bc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009372:	0e1b      	lsrs	r3, r3, #24
 8009374:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009378:	ee07 3a90 	vmov	s15, r3
 800937c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009380:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009384:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009388:	edd7 6a07 	vldr	s13, [r7, #28]
 800938c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009390:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009394:	ee17 2a90 	vmov	r2, s15
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800939c:	e008      	b.n	80093b0 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2200      	movs	r2, #0
 80093a2:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2200      	movs	r2, #0
 80093a8:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2200      	movs	r2, #0
 80093ae:	609a      	str	r2, [r3, #8]
}
 80093b0:	bf00      	nop
 80093b2:	3724      	adds	r7, #36	; 0x24
 80093b4:	46bd      	mov	sp, r7
 80093b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ba:	4770      	bx	lr
 80093bc:	58024400 	.word	0x58024400
 80093c0:	03d09000 	.word	0x03d09000
 80093c4:	46000000 	.word	0x46000000
 80093c8:	4c742400 	.word	0x4c742400
 80093cc:	4a742400 	.word	0x4a742400
 80093d0:	4bbebc20 	.word	0x4bbebc20

080093d4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80093d4:	b480      	push	{r7}
 80093d6:	b089      	sub	sp, #36	; 0x24
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80093dc:	4b9d      	ldr	r3, [pc, #628]	; (8009654 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80093de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093e0:	f003 0303 	and.w	r3, r3, #3
 80093e4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80093e6:	4b9b      	ldr	r3, [pc, #620]	; (8009654 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80093e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093ea:	0d1b      	lsrs	r3, r3, #20
 80093ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80093f0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80093f2:	4b98      	ldr	r3, [pc, #608]	; (8009654 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80093f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093f6:	0a1b      	lsrs	r3, r3, #8
 80093f8:	f003 0301 	and.w	r3, r3, #1
 80093fc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80093fe:	4b95      	ldr	r3, [pc, #596]	; (8009654 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009402:	08db      	lsrs	r3, r3, #3
 8009404:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009408:	693a      	ldr	r2, [r7, #16]
 800940a:	fb02 f303 	mul.w	r3, r2, r3
 800940e:	ee07 3a90 	vmov	s15, r3
 8009412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009416:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	2b00      	cmp	r3, #0
 800941e:	f000 810a 	beq.w	8009636 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8009422:	69bb      	ldr	r3, [r7, #24]
 8009424:	2b01      	cmp	r3, #1
 8009426:	d05a      	beq.n	80094de <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8009428:	2b01      	cmp	r3, #1
 800942a:	d302      	bcc.n	8009432 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 800942c:	2b02      	cmp	r3, #2
 800942e:	d078      	beq.n	8009522 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8009430:	e099      	b.n	8009566 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009432:	4b88      	ldr	r3, [pc, #544]	; (8009654 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f003 0320 	and.w	r3, r3, #32
 800943a:	2b00      	cmp	r3, #0
 800943c:	d02d      	beq.n	800949a <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800943e:	4b85      	ldr	r3, [pc, #532]	; (8009654 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	08db      	lsrs	r3, r3, #3
 8009444:	f003 0303 	and.w	r3, r3, #3
 8009448:	4a83      	ldr	r2, [pc, #524]	; (8009658 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 800944a:	fa22 f303 	lsr.w	r3, r2, r3
 800944e:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	ee07 3a90 	vmov	s15, r3
 8009456:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	ee07 3a90 	vmov	s15, r3
 8009460:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009464:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009468:	4b7a      	ldr	r3, [pc, #488]	; (8009654 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800946a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800946c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009470:	ee07 3a90 	vmov	s15, r3
 8009474:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009478:	ed97 6a03 	vldr	s12, [r7, #12]
 800947c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800965c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8009480:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009484:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009488:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800948c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009490:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009494:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009498:	e087      	b.n	80095aa <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800949a:	697b      	ldr	r3, [r7, #20]
 800949c:	ee07 3a90 	vmov	s15, r3
 80094a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094a4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009660 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 80094a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094ac:	4b69      	ldr	r3, [pc, #420]	; (8009654 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80094ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094b4:	ee07 3a90 	vmov	s15, r3
 80094b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094bc:	ed97 6a03 	vldr	s12, [r7, #12]
 80094c0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800965c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80094c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094d8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80094dc:	e065      	b.n	80095aa <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	ee07 3a90 	vmov	s15, r3
 80094e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094e8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009664 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80094ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094f0:	4b58      	ldr	r3, [pc, #352]	; (8009654 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80094f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094f8:	ee07 3a90 	vmov	s15, r3
 80094fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009500:	ed97 6a03 	vldr	s12, [r7, #12]
 8009504:	eddf 5a55 	vldr	s11, [pc, #340]	; 800965c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8009508:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800950c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009510:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009514:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009518:	ee67 7a27 	vmul.f32	s15, s14, s15
 800951c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009520:	e043      	b.n	80095aa <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	ee07 3a90 	vmov	s15, r3
 8009528:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800952c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009668 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8009530:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009534:	4b47      	ldr	r3, [pc, #284]	; (8009654 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009538:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800953c:	ee07 3a90 	vmov	s15, r3
 8009540:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009544:	ed97 6a03 	vldr	s12, [r7, #12]
 8009548:	eddf 5a44 	vldr	s11, [pc, #272]	; 800965c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800954c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009550:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009554:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009558:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800955c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009560:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009564:	e021      	b.n	80095aa <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	ee07 3a90 	vmov	s15, r3
 800956c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009570:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8009664 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8009574:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009578:	4b36      	ldr	r3, [pc, #216]	; (8009654 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800957a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800957c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009580:	ee07 3a90 	vmov	s15, r3
 8009584:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009588:	ed97 6a03 	vldr	s12, [r7, #12]
 800958c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800965c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8009590:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009594:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009598:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800959c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095a4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80095a8:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80095aa:	4b2a      	ldr	r3, [pc, #168]	; (8009654 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80095ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ae:	0a5b      	lsrs	r3, r3, #9
 80095b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095b4:	ee07 3a90 	vmov	s15, r3
 80095b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80095c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80095c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80095c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80095cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80095d0:	ee17 2a90 	vmov	r2, s15
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80095d8:	4b1e      	ldr	r3, [pc, #120]	; (8009654 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80095da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095dc:	0c1b      	lsrs	r3, r3, #16
 80095de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095e2:	ee07 3a90 	vmov	s15, r3
 80095e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80095ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80095f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80095f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80095fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80095fe:	ee17 2a90 	vmov	r2, s15
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009606:	4b13      	ldr	r3, [pc, #76]	; (8009654 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800960a:	0e1b      	lsrs	r3, r3, #24
 800960c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009610:	ee07 3a90 	vmov	s15, r3
 8009614:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009618:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800961c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009620:	edd7 6a07 	vldr	s13, [r7, #28]
 8009624:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009628:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800962c:	ee17 2a90 	vmov	r2, s15
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009634:	e008      	b.n	8009648 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2200      	movs	r2, #0
 800963a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2200      	movs	r2, #0
 8009640:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2200      	movs	r2, #0
 8009646:	609a      	str	r2, [r3, #8]
}
 8009648:	bf00      	nop
 800964a:	3724      	adds	r7, #36	; 0x24
 800964c:	46bd      	mov	sp, r7
 800964e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009652:	4770      	bx	lr
 8009654:	58024400 	.word	0x58024400
 8009658:	03d09000 	.word	0x03d09000
 800965c:	46000000 	.word	0x46000000
 8009660:	4c742400 	.word	0x4c742400
 8009664:	4a742400 	.word	0x4a742400
 8009668:	4bbebc20 	.word	0x4bbebc20

0800966c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800966c:	b480      	push	{r7}
 800966e:	b089      	sub	sp, #36	; 0x24
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009674:	4b9d      	ldr	r3, [pc, #628]	; (80098ec <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009678:	f003 0303 	and.w	r3, r3, #3
 800967c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800967e:	4b9b      	ldr	r3, [pc, #620]	; (80098ec <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009682:	091b      	lsrs	r3, r3, #4
 8009684:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009688:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800968a:	4b98      	ldr	r3, [pc, #608]	; (80098ec <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800968c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800968e:	f003 0301 	and.w	r3, r3, #1
 8009692:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009694:	4b95      	ldr	r3, [pc, #596]	; (80098ec <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009698:	08db      	lsrs	r3, r3, #3
 800969a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800969e:	693a      	ldr	r2, [r7, #16]
 80096a0:	fb02 f303 	mul.w	r3, r2, r3
 80096a4:	ee07 3a90 	vmov	s15, r3
 80096a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096ac:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80096b0:	697b      	ldr	r3, [r7, #20]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	f000 810a 	beq.w	80098cc <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 80096b8:	69bb      	ldr	r3, [r7, #24]
 80096ba:	2b01      	cmp	r3, #1
 80096bc:	d05a      	beq.n	8009774 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 80096be:	2b01      	cmp	r3, #1
 80096c0:	d302      	bcc.n	80096c8 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 80096c2:	2b02      	cmp	r3, #2
 80096c4:	d078      	beq.n	80097b8 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 80096c6:	e099      	b.n	80097fc <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80096c8:	4b88      	ldr	r3, [pc, #544]	; (80098ec <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f003 0320 	and.w	r3, r3, #32
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d02d      	beq.n	8009730 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80096d4:	4b85      	ldr	r3, [pc, #532]	; (80098ec <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	08db      	lsrs	r3, r3, #3
 80096da:	f003 0303 	and.w	r3, r3, #3
 80096de:	4a84      	ldr	r2, [pc, #528]	; (80098f0 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 80096e0:	fa22 f303 	lsr.w	r3, r2, r3
 80096e4:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	ee07 3a90 	vmov	s15, r3
 80096ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096f0:	697b      	ldr	r3, [r7, #20]
 80096f2:	ee07 3a90 	vmov	s15, r3
 80096f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096fe:	4b7b      	ldr	r3, [pc, #492]	; (80098ec <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009702:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009706:	ee07 3a90 	vmov	s15, r3
 800970a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800970e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009712:	eddf 5a78 	vldr	s11, [pc, #480]	; 80098f4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8009716:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800971a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800971e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009722:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800972a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800972e:	e087      	b.n	8009840 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009730:	697b      	ldr	r3, [r7, #20]
 8009732:	ee07 3a90 	vmov	s15, r3
 8009736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800973a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80098f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 800973e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009742:	4b6a      	ldr	r3, [pc, #424]	; (80098ec <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009746:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800974a:	ee07 3a90 	vmov	s15, r3
 800974e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009752:	ed97 6a03 	vldr	s12, [r7, #12]
 8009756:	eddf 5a67 	vldr	s11, [pc, #412]	; 80098f4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800975a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800975e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009762:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009766:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800976a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800976e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009772:	e065      	b.n	8009840 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009774:	697b      	ldr	r3, [r7, #20]
 8009776:	ee07 3a90 	vmov	s15, r3
 800977a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800977e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80098fc <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8009782:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009786:	4b59      	ldr	r3, [pc, #356]	; (80098ec <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800978a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800978e:	ee07 3a90 	vmov	s15, r3
 8009792:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009796:	ed97 6a03 	vldr	s12, [r7, #12]
 800979a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80098f4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800979e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80097aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80097b6:	e043      	b.n	8009840 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	ee07 3a90 	vmov	s15, r3
 80097be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097c2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009900 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80097c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097ca:	4b48      	ldr	r3, [pc, #288]	; (80098ec <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80097cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097d2:	ee07 3a90 	vmov	s15, r3
 80097d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097da:	ed97 6a03 	vldr	s12, [r7, #12]
 80097de:	eddf 5a45 	vldr	s11, [pc, #276]	; 80098f4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80097e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80097ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80097fa:	e021      	b.n	8009840 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80097fc:	697b      	ldr	r3, [r7, #20]
 80097fe:	ee07 3a90 	vmov	s15, r3
 8009802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009806:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80098fc <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800980a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800980e:	4b37      	ldr	r3, [pc, #220]	; (80098ec <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009816:	ee07 3a90 	vmov	s15, r3
 800981a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800981e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009822:	eddf 5a34 	vldr	s11, [pc, #208]	; 80098f4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8009826:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800982a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800982e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009832:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800983a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800983e:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8009840:	4b2a      	ldr	r3, [pc, #168]	; (80098ec <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009844:	0a5b      	lsrs	r3, r3, #9
 8009846:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800984a:	ee07 3a90 	vmov	s15, r3
 800984e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009852:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009856:	ee37 7a87 	vadd.f32	s14, s15, s14
 800985a:	edd7 6a07 	vldr	s13, [r7, #28]
 800985e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009862:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009866:	ee17 2a90 	vmov	r2, s15
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800986e:	4b1f      	ldr	r3, [pc, #124]	; (80098ec <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009872:	0c1b      	lsrs	r3, r3, #16
 8009874:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009878:	ee07 3a90 	vmov	s15, r3
 800987c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009880:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009884:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009888:	edd7 6a07 	vldr	s13, [r7, #28]
 800988c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009890:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009894:	ee17 2a90 	vmov	r2, s15
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800989c:	4b13      	ldr	r3, [pc, #76]	; (80098ec <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800989e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098a0:	0e1b      	lsrs	r3, r3, #24
 80098a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098a6:	ee07 3a90 	vmov	s15, r3
 80098aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80098b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80098b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80098ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80098be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80098c2:	ee17 2a90 	vmov	r2, s15
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80098ca:	e008      	b.n	80098de <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2200      	movs	r2, #0
 80098d0:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	2200      	movs	r2, #0
 80098d6:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2200      	movs	r2, #0
 80098dc:	609a      	str	r2, [r3, #8]
}
 80098de:	bf00      	nop
 80098e0:	3724      	adds	r7, #36	; 0x24
 80098e2:	46bd      	mov	sp, r7
 80098e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e8:	4770      	bx	lr
 80098ea:	bf00      	nop
 80098ec:	58024400 	.word	0x58024400
 80098f0:	03d09000 	.word	0x03d09000
 80098f4:	46000000 	.word	0x46000000
 80098f8:	4c742400 	.word	0x4c742400
 80098fc:	4a742400 	.word	0x4a742400
 8009900:	4bbebc20 	.word	0x4bbebc20

08009904 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b084      	sub	sp, #16
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
 800990c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800990e:	2300      	movs	r3, #0
 8009910:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009912:	4b53      	ldr	r3, [pc, #332]	; (8009a60 <RCCEx_PLL2_Config+0x15c>)
 8009914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009916:	f003 0303 	and.w	r3, r3, #3
 800991a:	2b03      	cmp	r3, #3
 800991c:	d101      	bne.n	8009922 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800991e:	2301      	movs	r3, #1
 8009920:	e099      	b.n	8009a56 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009922:	4b4f      	ldr	r3, [pc, #316]	; (8009a60 <RCCEx_PLL2_Config+0x15c>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	4a4e      	ldr	r2, [pc, #312]	; (8009a60 <RCCEx_PLL2_Config+0x15c>)
 8009928:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800992c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800992e:	f7f8 fae9 	bl	8001f04 <HAL_GetTick>
 8009932:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009934:	e008      	b.n	8009948 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009936:	f7f8 fae5 	bl	8001f04 <HAL_GetTick>
 800993a:	4602      	mov	r2, r0
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	1ad3      	subs	r3, r2, r3
 8009940:	2b02      	cmp	r3, #2
 8009942:	d901      	bls.n	8009948 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009944:	2303      	movs	r3, #3
 8009946:	e086      	b.n	8009a56 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009948:	4b45      	ldr	r3, [pc, #276]	; (8009a60 <RCCEx_PLL2_Config+0x15c>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009950:	2b00      	cmp	r3, #0
 8009952:	d1f0      	bne.n	8009936 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009954:	4b42      	ldr	r3, [pc, #264]	; (8009a60 <RCCEx_PLL2_Config+0x15c>)
 8009956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009958:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	031b      	lsls	r3, r3, #12
 8009962:	493f      	ldr	r1, [pc, #252]	; (8009a60 <RCCEx_PLL2_Config+0x15c>)
 8009964:	4313      	orrs	r3, r2
 8009966:	628b      	str	r3, [r1, #40]	; 0x28
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	685b      	ldr	r3, [r3, #4]
 800996c:	3b01      	subs	r3, #1
 800996e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	689b      	ldr	r3, [r3, #8]
 8009976:	3b01      	subs	r3, #1
 8009978:	025b      	lsls	r3, r3, #9
 800997a:	b29b      	uxth	r3, r3
 800997c:	431a      	orrs	r2, r3
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	68db      	ldr	r3, [r3, #12]
 8009982:	3b01      	subs	r3, #1
 8009984:	041b      	lsls	r3, r3, #16
 8009986:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800998a:	431a      	orrs	r2, r3
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	691b      	ldr	r3, [r3, #16]
 8009990:	3b01      	subs	r3, #1
 8009992:	061b      	lsls	r3, r3, #24
 8009994:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009998:	4931      	ldr	r1, [pc, #196]	; (8009a60 <RCCEx_PLL2_Config+0x15c>)
 800999a:	4313      	orrs	r3, r2
 800999c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800999e:	4b30      	ldr	r3, [pc, #192]	; (8009a60 <RCCEx_PLL2_Config+0x15c>)
 80099a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099a2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	695b      	ldr	r3, [r3, #20]
 80099aa:	492d      	ldr	r1, [pc, #180]	; (8009a60 <RCCEx_PLL2_Config+0x15c>)
 80099ac:	4313      	orrs	r3, r2
 80099ae:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80099b0:	4b2b      	ldr	r3, [pc, #172]	; (8009a60 <RCCEx_PLL2_Config+0x15c>)
 80099b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099b4:	f023 0220 	bic.w	r2, r3, #32
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	699b      	ldr	r3, [r3, #24]
 80099bc:	4928      	ldr	r1, [pc, #160]	; (8009a60 <RCCEx_PLL2_Config+0x15c>)
 80099be:	4313      	orrs	r3, r2
 80099c0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80099c2:	4b27      	ldr	r3, [pc, #156]	; (8009a60 <RCCEx_PLL2_Config+0x15c>)
 80099c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099c6:	4a26      	ldr	r2, [pc, #152]	; (8009a60 <RCCEx_PLL2_Config+0x15c>)
 80099c8:	f023 0310 	bic.w	r3, r3, #16
 80099cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80099ce:	4b24      	ldr	r3, [pc, #144]	; (8009a60 <RCCEx_PLL2_Config+0x15c>)
 80099d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80099d2:	4b24      	ldr	r3, [pc, #144]	; (8009a64 <RCCEx_PLL2_Config+0x160>)
 80099d4:	4013      	ands	r3, r2
 80099d6:	687a      	ldr	r2, [r7, #4]
 80099d8:	69d2      	ldr	r2, [r2, #28]
 80099da:	00d2      	lsls	r2, r2, #3
 80099dc:	4920      	ldr	r1, [pc, #128]	; (8009a60 <RCCEx_PLL2_Config+0x15c>)
 80099de:	4313      	orrs	r3, r2
 80099e0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80099e2:	4b1f      	ldr	r3, [pc, #124]	; (8009a60 <RCCEx_PLL2_Config+0x15c>)
 80099e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099e6:	4a1e      	ldr	r2, [pc, #120]	; (8009a60 <RCCEx_PLL2_Config+0x15c>)
 80099e8:	f043 0310 	orr.w	r3, r3, #16
 80099ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d106      	bne.n	8009a02 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80099f4:	4b1a      	ldr	r3, [pc, #104]	; (8009a60 <RCCEx_PLL2_Config+0x15c>)
 80099f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099f8:	4a19      	ldr	r2, [pc, #100]	; (8009a60 <RCCEx_PLL2_Config+0x15c>)
 80099fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80099fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009a00:	e00f      	b.n	8009a22 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	2b01      	cmp	r3, #1
 8009a06:	d106      	bne.n	8009a16 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009a08:	4b15      	ldr	r3, [pc, #84]	; (8009a60 <RCCEx_PLL2_Config+0x15c>)
 8009a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a0c:	4a14      	ldr	r2, [pc, #80]	; (8009a60 <RCCEx_PLL2_Config+0x15c>)
 8009a0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009a12:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009a14:	e005      	b.n	8009a22 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009a16:	4b12      	ldr	r3, [pc, #72]	; (8009a60 <RCCEx_PLL2_Config+0x15c>)
 8009a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a1a:	4a11      	ldr	r2, [pc, #68]	; (8009a60 <RCCEx_PLL2_Config+0x15c>)
 8009a1c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009a20:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009a22:	4b0f      	ldr	r3, [pc, #60]	; (8009a60 <RCCEx_PLL2_Config+0x15c>)
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	4a0e      	ldr	r2, [pc, #56]	; (8009a60 <RCCEx_PLL2_Config+0x15c>)
 8009a28:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009a2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a2e:	f7f8 fa69 	bl	8001f04 <HAL_GetTick>
 8009a32:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009a34:	e008      	b.n	8009a48 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009a36:	f7f8 fa65 	bl	8001f04 <HAL_GetTick>
 8009a3a:	4602      	mov	r2, r0
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	1ad3      	subs	r3, r2, r3
 8009a40:	2b02      	cmp	r3, #2
 8009a42:	d901      	bls.n	8009a48 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009a44:	2303      	movs	r3, #3
 8009a46:	e006      	b.n	8009a56 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009a48:	4b05      	ldr	r3, [pc, #20]	; (8009a60 <RCCEx_PLL2_Config+0x15c>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d0f0      	beq.n	8009a36 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a56:	4618      	mov	r0, r3
 8009a58:	3710      	adds	r7, #16
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}
 8009a5e:	bf00      	nop
 8009a60:	58024400 	.word	0x58024400
 8009a64:	ffff0007 	.word	0xffff0007

08009a68 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b084      	sub	sp, #16
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
 8009a70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009a72:	2300      	movs	r3, #0
 8009a74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009a76:	4b53      	ldr	r3, [pc, #332]	; (8009bc4 <RCCEx_PLL3_Config+0x15c>)
 8009a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a7a:	f003 0303 	and.w	r3, r3, #3
 8009a7e:	2b03      	cmp	r3, #3
 8009a80:	d101      	bne.n	8009a86 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009a82:	2301      	movs	r3, #1
 8009a84:	e099      	b.n	8009bba <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009a86:	4b4f      	ldr	r3, [pc, #316]	; (8009bc4 <RCCEx_PLL3_Config+0x15c>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	4a4e      	ldr	r2, [pc, #312]	; (8009bc4 <RCCEx_PLL3_Config+0x15c>)
 8009a8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009a90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a92:	f7f8 fa37 	bl	8001f04 <HAL_GetTick>
 8009a96:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009a98:	e008      	b.n	8009aac <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009a9a:	f7f8 fa33 	bl	8001f04 <HAL_GetTick>
 8009a9e:	4602      	mov	r2, r0
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	1ad3      	subs	r3, r2, r3
 8009aa4:	2b02      	cmp	r3, #2
 8009aa6:	d901      	bls.n	8009aac <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009aa8:	2303      	movs	r3, #3
 8009aaa:	e086      	b.n	8009bba <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009aac:	4b45      	ldr	r3, [pc, #276]	; (8009bc4 <RCCEx_PLL3_Config+0x15c>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d1f0      	bne.n	8009a9a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009ab8:	4b42      	ldr	r3, [pc, #264]	; (8009bc4 <RCCEx_PLL3_Config+0x15c>)
 8009aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009abc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	051b      	lsls	r3, r3, #20
 8009ac6:	493f      	ldr	r1, [pc, #252]	; (8009bc4 <RCCEx_PLL3_Config+0x15c>)
 8009ac8:	4313      	orrs	r3, r2
 8009aca:	628b      	str	r3, [r1, #40]	; 0x28
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	685b      	ldr	r3, [r3, #4]
 8009ad0:	3b01      	subs	r3, #1
 8009ad2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	689b      	ldr	r3, [r3, #8]
 8009ada:	3b01      	subs	r3, #1
 8009adc:	025b      	lsls	r3, r3, #9
 8009ade:	b29b      	uxth	r3, r3
 8009ae0:	431a      	orrs	r2, r3
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	68db      	ldr	r3, [r3, #12]
 8009ae6:	3b01      	subs	r3, #1
 8009ae8:	041b      	lsls	r3, r3, #16
 8009aea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009aee:	431a      	orrs	r2, r3
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	691b      	ldr	r3, [r3, #16]
 8009af4:	3b01      	subs	r3, #1
 8009af6:	061b      	lsls	r3, r3, #24
 8009af8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009afc:	4931      	ldr	r1, [pc, #196]	; (8009bc4 <RCCEx_PLL3_Config+0x15c>)
 8009afe:	4313      	orrs	r3, r2
 8009b00:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009b02:	4b30      	ldr	r3, [pc, #192]	; (8009bc4 <RCCEx_PLL3_Config+0x15c>)
 8009b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b06:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	695b      	ldr	r3, [r3, #20]
 8009b0e:	492d      	ldr	r1, [pc, #180]	; (8009bc4 <RCCEx_PLL3_Config+0x15c>)
 8009b10:	4313      	orrs	r3, r2
 8009b12:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009b14:	4b2b      	ldr	r3, [pc, #172]	; (8009bc4 <RCCEx_PLL3_Config+0x15c>)
 8009b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b18:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	699b      	ldr	r3, [r3, #24]
 8009b20:	4928      	ldr	r1, [pc, #160]	; (8009bc4 <RCCEx_PLL3_Config+0x15c>)
 8009b22:	4313      	orrs	r3, r2
 8009b24:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009b26:	4b27      	ldr	r3, [pc, #156]	; (8009bc4 <RCCEx_PLL3_Config+0x15c>)
 8009b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b2a:	4a26      	ldr	r2, [pc, #152]	; (8009bc4 <RCCEx_PLL3_Config+0x15c>)
 8009b2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009b30:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009b32:	4b24      	ldr	r3, [pc, #144]	; (8009bc4 <RCCEx_PLL3_Config+0x15c>)
 8009b34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009b36:	4b24      	ldr	r3, [pc, #144]	; (8009bc8 <RCCEx_PLL3_Config+0x160>)
 8009b38:	4013      	ands	r3, r2
 8009b3a:	687a      	ldr	r2, [r7, #4]
 8009b3c:	69d2      	ldr	r2, [r2, #28]
 8009b3e:	00d2      	lsls	r2, r2, #3
 8009b40:	4920      	ldr	r1, [pc, #128]	; (8009bc4 <RCCEx_PLL3_Config+0x15c>)
 8009b42:	4313      	orrs	r3, r2
 8009b44:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009b46:	4b1f      	ldr	r3, [pc, #124]	; (8009bc4 <RCCEx_PLL3_Config+0x15c>)
 8009b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b4a:	4a1e      	ldr	r2, [pc, #120]	; (8009bc4 <RCCEx_PLL3_Config+0x15c>)
 8009b4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b50:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d106      	bne.n	8009b66 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009b58:	4b1a      	ldr	r3, [pc, #104]	; (8009bc4 <RCCEx_PLL3_Config+0x15c>)
 8009b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b5c:	4a19      	ldr	r2, [pc, #100]	; (8009bc4 <RCCEx_PLL3_Config+0x15c>)
 8009b5e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009b62:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009b64:	e00f      	b.n	8009b86 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	2b01      	cmp	r3, #1
 8009b6a:	d106      	bne.n	8009b7a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009b6c:	4b15      	ldr	r3, [pc, #84]	; (8009bc4 <RCCEx_PLL3_Config+0x15c>)
 8009b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b70:	4a14      	ldr	r2, [pc, #80]	; (8009bc4 <RCCEx_PLL3_Config+0x15c>)
 8009b72:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009b76:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009b78:	e005      	b.n	8009b86 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009b7a:	4b12      	ldr	r3, [pc, #72]	; (8009bc4 <RCCEx_PLL3_Config+0x15c>)
 8009b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b7e:	4a11      	ldr	r2, [pc, #68]	; (8009bc4 <RCCEx_PLL3_Config+0x15c>)
 8009b80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009b84:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009b86:	4b0f      	ldr	r3, [pc, #60]	; (8009bc4 <RCCEx_PLL3_Config+0x15c>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	4a0e      	ldr	r2, [pc, #56]	; (8009bc4 <RCCEx_PLL3_Config+0x15c>)
 8009b8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b92:	f7f8 f9b7 	bl	8001f04 <HAL_GetTick>
 8009b96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009b98:	e008      	b.n	8009bac <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009b9a:	f7f8 f9b3 	bl	8001f04 <HAL_GetTick>
 8009b9e:	4602      	mov	r2, r0
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	1ad3      	subs	r3, r2, r3
 8009ba4:	2b02      	cmp	r3, #2
 8009ba6:	d901      	bls.n	8009bac <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009ba8:	2303      	movs	r3, #3
 8009baa:	e006      	b.n	8009bba <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009bac:	4b05      	ldr	r3, [pc, #20]	; (8009bc4 <RCCEx_PLL3_Config+0x15c>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d0f0      	beq.n	8009b9a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bba:	4618      	mov	r0, r3
 8009bbc:	3710      	adds	r7, #16
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}
 8009bc2:	bf00      	nop
 8009bc4:	58024400 	.word	0x58024400
 8009bc8:	ffff0007 	.word	0xffff0007

08009bcc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b084      	sub	sp, #16
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d067      	beq.n	8009cae <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009be4:	b2db      	uxtb	r3, r3
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d106      	bne.n	8009bf8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2200      	movs	r2, #0
 8009bee:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f7f7 fdd8 	bl	80017a8 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2202      	movs	r2, #2
 8009bfc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	22ca      	movs	r2, #202	; 0xca
 8009c06:	625a      	str	r2, [r3, #36]	; 0x24
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	2253      	movs	r2, #83	; 0x53
 8009c0e:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f000 fa49 	bl	800a0a8 <RTC_EnterInitMode>
 8009c16:	4603      	mov	r3, r0
 8009c18:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8009c1a:	7bfb      	ldrb	r3, [r7, #15]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d13b      	bne.n	8009c98 <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	6899      	ldr	r1, [r3, #8]
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681a      	ldr	r2, [r3, #0]
 8009c2a:	4b23      	ldr	r3, [pc, #140]	; (8009cb8 <HAL_RTC_Init+0xec>)
 8009c2c:	400b      	ands	r3, r1
 8009c2e:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	6899      	ldr	r1, [r3, #8]
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	685a      	ldr	r2, [r3, #4]
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	691b      	ldr	r3, [r3, #16]
 8009c3e:	431a      	orrs	r2, r3
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	699b      	ldr	r3, [r3, #24]
 8009c44:	431a      	orrs	r2, r3
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	430a      	orrs	r2, r1
 8009c4c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	689b      	ldr	r3, [r3, #8]
 8009c52:	0419      	lsls	r1, r3, #16
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	68da      	ldr	r2, [r3, #12]
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	430a      	orrs	r2, r1
 8009c5e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	f000 fa51 	bl	800a108 <RTC_ExitInitMode>
 8009c66:	4603      	mov	r3, r0
 8009c68:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 8009c6a:	7bfb      	ldrb	r3, [r7, #15]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d113      	bne.n	8009c98 <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	f022 0203 	bic.w	r2, r2, #3
 8009c7e:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	69da      	ldr	r2, [r3, #28]
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	695b      	ldr	r3, [r3, #20]
 8009c8e:	431a      	orrs	r2, r3
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	430a      	orrs	r2, r1
 8009c96:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	22ff      	movs	r2, #255	; 0xff
 8009c9e:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8009ca0:	7bfb      	ldrb	r3, [r7, #15]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d103      	bne.n	8009cae <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2201      	movs	r2, #1
 8009caa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 8009cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	3710      	adds	r7, #16
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}
 8009cb8:	ff8fffbf 	.word	0xff8fffbf

08009cbc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009cbc:	b590      	push	{r4, r7, lr}
 8009cbe:	b087      	sub	sp, #28
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	60f8      	str	r0, [r7, #12]
 8009cc4:	60b9      	str	r1, [r7, #8]
 8009cc6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009cce:	2b01      	cmp	r3, #1
 8009cd0:	d101      	bne.n	8009cd6 <HAL_RTC_SetTime+0x1a>
 8009cd2:	2302      	movs	r3, #2
 8009cd4:	e089      	b.n	8009dea <HAL_RTC_SetTime+0x12e>
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	2201      	movs	r2, #1
 8009cda:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	2202      	movs	r2, #2
 8009ce2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	22ca      	movs	r2, #202	; 0xca
 8009cec:	625a      	str	r2, [r3, #36]	; 0x24
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	2253      	movs	r2, #83	; 0x53
 8009cf4:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009cf6:	68f8      	ldr	r0, [r7, #12]
 8009cf8:	f000 f9d6 	bl	800a0a8 <RTC_EnterInitMode>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8009d00:	7cfb      	ldrb	r3, [r7, #19]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d161      	bne.n	8009dca <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d126      	bne.n	8009d5a <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	689b      	ldr	r3, [r3, #8]
 8009d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d102      	bne.n	8009d20 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	781b      	ldrb	r3, [r3, #0]
 8009d24:	4618      	mov	r0, r3
 8009d26:	f000 fa2d 	bl	800a184 <RTC_ByteToBcd2>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	785b      	ldrb	r3, [r3, #1]
 8009d32:	4618      	mov	r0, r3
 8009d34:	f000 fa26 	bl	800a184 <RTC_ByteToBcd2>
 8009d38:	4603      	mov	r3, r0
 8009d3a:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009d3c:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8009d3e:	68bb      	ldr	r3, [r7, #8]
 8009d40:	789b      	ldrb	r3, [r3, #2]
 8009d42:	4618      	mov	r0, r3
 8009d44:	f000 fa1e 	bl	800a184 <RTC_ByteToBcd2>
 8009d48:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009d4a:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009d4e:	68bb      	ldr	r3, [r7, #8]
 8009d50:	78db      	ldrb	r3, [r3, #3]
 8009d52:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009d54:	4313      	orrs	r3, r2
 8009d56:	617b      	str	r3, [r7, #20]
 8009d58:	e018      	b.n	8009d8c <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	689b      	ldr	r3, [r3, #8]
 8009d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d102      	bne.n	8009d6e <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009d6e:	68bb      	ldr	r3, [r7, #8]
 8009d70:	781b      	ldrb	r3, [r3, #0]
 8009d72:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009d74:	68bb      	ldr	r3, [r7, #8]
 8009d76:	785b      	ldrb	r3, [r3, #1]
 8009d78:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009d7a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8009d7c:	68ba      	ldr	r2, [r7, #8]
 8009d7e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009d80:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009d82:	68bb      	ldr	r3, [r7, #8]
 8009d84:	78db      	ldrb	r3, [r3, #3]
 8009d86:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009d88:	4313      	orrs	r3, r2
 8009d8a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	681a      	ldr	r2, [r3, #0]
 8009d90:	6979      	ldr	r1, [r7, #20]
 8009d92:	4b18      	ldr	r3, [pc, #96]	; (8009df4 <HAL_RTC_SetTime+0x138>)
 8009d94:	400b      	ands	r3, r1
 8009d96:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	689a      	ldr	r2, [r3, #8]
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009da6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	6899      	ldr	r1, [r3, #8]
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	68da      	ldr	r2, [r3, #12]
 8009db2:	68bb      	ldr	r3, [r7, #8]
 8009db4:	691b      	ldr	r3, [r3, #16]
 8009db6:	431a      	orrs	r2, r3
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	430a      	orrs	r2, r1
 8009dbe:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009dc0:	68f8      	ldr	r0, [r7, #12]
 8009dc2:	f000 f9a1 	bl	800a108 <RTC_ExitInitMode>
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	22ff      	movs	r2, #255	; 0xff
 8009dd0:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8009dd2:	7cfb      	ldrb	r3, [r7, #19]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d103      	bne.n	8009de0 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	2201      	movs	r2, #1
 8009ddc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	2200      	movs	r2, #0
 8009de4:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8009de8:	7cfb      	ldrb	r3, [r7, #19]
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	371c      	adds	r7, #28
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd90      	pop	{r4, r7, pc}
 8009df2:	bf00      	nop
 8009df4:	007f7f7f 	.word	0x007f7f7f

08009df8 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b086      	sub	sp, #24
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	60f8      	str	r0, [r7, #12]
 8009e00:	60b9      	str	r1, [r7, #8]
 8009e02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009e0a:	68bb      	ldr	r3, [r7, #8]
 8009e0c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	691b      	ldr	r3, [r3, #16]
 8009e14:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8009e18:	68bb      	ldr	r3, [r7, #8]
 8009e1a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	681a      	ldr	r2, [r3, #0]
 8009e22:	4b22      	ldr	r3, [pc, #136]	; (8009eac <HAL_RTC_GetTime+0xb4>)
 8009e24:	4013      	ands	r3, r2
 8009e26:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8009e28:	697b      	ldr	r3, [r7, #20]
 8009e2a:	0c1b      	lsrs	r3, r3, #16
 8009e2c:	b2db      	uxtb	r3, r3
 8009e2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009e32:	b2da      	uxtb	r2, r3
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8009e38:	697b      	ldr	r3, [r7, #20]
 8009e3a:	0a1b      	lsrs	r3, r3, #8
 8009e3c:	b2db      	uxtb	r3, r3
 8009e3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e42:	b2da      	uxtb	r2, r3
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 8009e48:	697b      	ldr	r3, [r7, #20]
 8009e4a:	b2db      	uxtb	r3, r3
 8009e4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e50:	b2da      	uxtb	r2, r3
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8009e56:	697b      	ldr	r3, [r7, #20]
 8009e58:	0d9b      	lsrs	r3, r3, #22
 8009e5a:	b2db      	uxtb	r3, r3
 8009e5c:	f003 0301 	and.w	r3, r3, #1
 8009e60:	b2da      	uxtb	r2, r3
 8009e62:	68bb      	ldr	r3, [r7, #8]
 8009e64:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d11a      	bne.n	8009ea2 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	781b      	ldrb	r3, [r3, #0]
 8009e70:	4618      	mov	r0, r3
 8009e72:	f000 f9a7 	bl	800a1c4 <RTC_Bcd2ToByte>
 8009e76:	4603      	mov	r3, r0
 8009e78:	461a      	mov	r2, r3
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8009e7e:	68bb      	ldr	r3, [r7, #8]
 8009e80:	785b      	ldrb	r3, [r3, #1]
 8009e82:	4618      	mov	r0, r3
 8009e84:	f000 f99e 	bl	800a1c4 <RTC_Bcd2ToByte>
 8009e88:	4603      	mov	r3, r0
 8009e8a:	461a      	mov	r2, r3
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	789b      	ldrb	r3, [r3, #2]
 8009e94:	4618      	mov	r0, r3
 8009e96:	f000 f995 	bl	800a1c4 <RTC_Bcd2ToByte>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	461a      	mov	r2, r3
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8009ea2:	2300      	movs	r3, #0
}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	3718      	adds	r7, #24
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}
 8009eac:	007f7f7f 	.word	0x007f7f7f

08009eb0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009eb0:	b590      	push	{r4, r7, lr}
 8009eb2:	b087      	sub	sp, #28
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	60f8      	str	r0, [r7, #12]
 8009eb8:	60b9      	str	r1, [r7, #8]
 8009eba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009ec2:	2b01      	cmp	r3, #1
 8009ec4:	d101      	bne.n	8009eca <HAL_RTC_SetDate+0x1a>
 8009ec6:	2302      	movs	r3, #2
 8009ec8:	e073      	b.n	8009fb2 <HAL_RTC_SetDate+0x102>
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	2201      	movs	r2, #1
 8009ece:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	2202      	movs	r2, #2
 8009ed6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d10e      	bne.n	8009efe <HAL_RTC_SetDate+0x4e>
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	785b      	ldrb	r3, [r3, #1]
 8009ee4:	f003 0310 	and.w	r3, r3, #16
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d008      	beq.n	8009efe <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	785b      	ldrb	r3, [r3, #1]
 8009ef0:	f023 0310 	bic.w	r3, r3, #16
 8009ef4:	b2db      	uxtb	r3, r3
 8009ef6:	330a      	adds	r3, #10
 8009ef8:	b2da      	uxtb	r2, r3
 8009efa:	68bb      	ldr	r3, [r7, #8]
 8009efc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d11c      	bne.n	8009f3e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	78db      	ldrb	r3, [r3, #3]
 8009f08:	4618      	mov	r0, r3
 8009f0a:	f000 f93b 	bl	800a184 <RTC_ByteToBcd2>
 8009f0e:	4603      	mov	r3, r0
 8009f10:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009f12:	68bb      	ldr	r3, [r7, #8]
 8009f14:	785b      	ldrb	r3, [r3, #1]
 8009f16:	4618      	mov	r0, r3
 8009f18:	f000 f934 	bl	800a184 <RTC_ByteToBcd2>
 8009f1c:	4603      	mov	r3, r0
 8009f1e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009f20:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8009f22:	68bb      	ldr	r3, [r7, #8]
 8009f24:	789b      	ldrb	r3, [r3, #2]
 8009f26:	4618      	mov	r0, r3
 8009f28:	f000 f92c 	bl	800a184 <RTC_ByteToBcd2>
 8009f2c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009f2e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	781b      	ldrb	r3, [r3, #0]
 8009f36:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009f38:	4313      	orrs	r3, r2
 8009f3a:	617b      	str	r3, [r7, #20]
 8009f3c:	e00e      	b.n	8009f5c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	78db      	ldrb	r3, [r3, #3]
 8009f42:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009f44:	68bb      	ldr	r3, [r7, #8]
 8009f46:	785b      	ldrb	r3, [r3, #1]
 8009f48:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009f4a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8009f4c:	68ba      	ldr	r2, [r7, #8]
 8009f4e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009f50:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8009f52:	68bb      	ldr	r3, [r7, #8]
 8009f54:	781b      	ldrb	r3, [r3, #0]
 8009f56:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009f58:	4313      	orrs	r3, r2
 8009f5a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	22ca      	movs	r2, #202	; 0xca
 8009f62:	625a      	str	r2, [r3, #36]	; 0x24
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	2253      	movs	r2, #83	; 0x53
 8009f6a:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009f6c:	68f8      	ldr	r0, [r7, #12]
 8009f6e:	f000 f89b 	bl	800a0a8 <RTC_EnterInitMode>
 8009f72:	4603      	mov	r3, r0
 8009f74:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8009f76:	7cfb      	ldrb	r3, [r7, #19]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d10a      	bne.n	8009f92 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	681a      	ldr	r2, [r3, #0]
 8009f80:	6979      	ldr	r1, [r7, #20]
 8009f82:	4b0e      	ldr	r3, [pc, #56]	; (8009fbc <HAL_RTC_SetDate+0x10c>)
 8009f84:	400b      	ands	r3, r1
 8009f86:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009f88:	68f8      	ldr	r0, [r7, #12]
 8009f8a:	f000 f8bd 	bl	800a108 <RTC_ExitInitMode>
 8009f8e:	4603      	mov	r3, r0
 8009f90:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	22ff      	movs	r2, #255	; 0xff
 8009f98:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8009f9a:	7cfb      	ldrb	r3, [r7, #19]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d103      	bne.n	8009fa8 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	2201      	movs	r2, #1
 8009fa4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	2200      	movs	r2, #0
 8009fac:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8009fb0:	7cfb      	ldrb	r3, [r7, #19]


}
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	371c      	adds	r7, #28
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bd90      	pop	{r4, r7, pc}
 8009fba:	bf00      	nop
 8009fbc:	00ffff3f 	.word	0x00ffff3f

08009fc0 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b086      	sub	sp, #24
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	60f8      	str	r0, [r7, #12]
 8009fc8:	60b9      	str	r1, [r7, #8]
 8009fca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	685a      	ldr	r2, [r3, #4]
 8009fd2:	4b21      	ldr	r3, [pc, #132]	; (800a058 <HAL_RTC_GetDate+0x98>)
 8009fd4:	4013      	ands	r3, r2
 8009fd6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8009fd8:	697b      	ldr	r3, [r7, #20]
 8009fda:	0c1b      	lsrs	r3, r3, #16
 8009fdc:	b2da      	uxtb	r2, r3
 8009fde:	68bb      	ldr	r3, [r7, #8]
 8009fe0:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8009fe2:	697b      	ldr	r3, [r7, #20]
 8009fe4:	0a1b      	lsrs	r3, r3, #8
 8009fe6:	b2db      	uxtb	r3, r3
 8009fe8:	f003 031f 	and.w	r3, r3, #31
 8009fec:	b2da      	uxtb	r2, r3
 8009fee:	68bb      	ldr	r3, [r7, #8]
 8009ff0:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8009ff2:	697b      	ldr	r3, [r7, #20]
 8009ff4:	b2db      	uxtb	r3, r3
 8009ff6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009ffa:	b2da      	uxtb	r2, r3
 8009ffc:	68bb      	ldr	r3, [r7, #8]
 8009ffe:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800a000:	697b      	ldr	r3, [r7, #20]
 800a002:	0b5b      	lsrs	r3, r3, #13
 800a004:	b2db      	uxtb	r3, r3
 800a006:	f003 0307 	and.w	r3, r3, #7
 800a00a:	b2da      	uxtb	r2, r3
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d11a      	bne.n	800a04c <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	78db      	ldrb	r3, [r3, #3]
 800a01a:	4618      	mov	r0, r3
 800a01c:	f000 f8d2 	bl	800a1c4 <RTC_Bcd2ToByte>
 800a020:	4603      	mov	r3, r0
 800a022:	461a      	mov	r2, r3
 800a024:	68bb      	ldr	r3, [r7, #8]
 800a026:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800a028:	68bb      	ldr	r3, [r7, #8]
 800a02a:	785b      	ldrb	r3, [r3, #1]
 800a02c:	4618      	mov	r0, r3
 800a02e:	f000 f8c9 	bl	800a1c4 <RTC_Bcd2ToByte>
 800a032:	4603      	mov	r3, r0
 800a034:	461a      	mov	r2, r3
 800a036:	68bb      	ldr	r3, [r7, #8]
 800a038:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	789b      	ldrb	r3, [r3, #2]
 800a03e:	4618      	mov	r0, r3
 800a040:	f000 f8c0 	bl	800a1c4 <RTC_Bcd2ToByte>
 800a044:	4603      	mov	r3, r0
 800a046:	461a      	mov	r2, r3
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800a04c:	2300      	movs	r3, #0
}
 800a04e:	4618      	mov	r0, r3
 800a050:	3718      	adds	r7, #24
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}
 800a056:	bf00      	nop
 800a058:	00ffff3f 	.word	0x00ffff3f

0800a05c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b084      	sub	sp, #16
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	68da      	ldr	r2, [r3, #12]
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a072:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 800a074:	f7f7 ff46 	bl	8001f04 <HAL_GetTick>
 800a078:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a07a:	e009      	b.n	800a090 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a07c:	f7f7 ff42 	bl	8001f04 <HAL_GetTick>
 800a080:	4602      	mov	r2, r0
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	1ad3      	subs	r3, r2, r3
 800a086:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a08a:	d901      	bls.n	800a090 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 800a08c:	2303      	movs	r3, #3
 800a08e:	e007      	b.n	800a0a0 <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	68db      	ldr	r3, [r3, #12]
 800a096:	f003 0320 	and.w	r3, r3, #32
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d0ee      	beq.n	800a07c <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 800a09e:	2300      	movs	r3, #0
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	3710      	adds	r7, #16
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bd80      	pop	{r7, pc}

0800a0a8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b084      	sub	sp, #16
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	68db      	ldr	r3, [r3, #12]
 800a0ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d11d      	bne.n	800a0fe <RTC_EnterInitMode+0x56>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f04f 32ff 	mov.w	r2, #4294967295
 800a0ca:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800a0cc:	f7f7 ff1a 	bl	8001f04 <HAL_GetTick>
 800a0d0:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a0d2:	e00d      	b.n	800a0f0 <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800a0d4:	f7f7 ff16 	bl	8001f04 <HAL_GetTick>
 800a0d8:	4602      	mov	r2, r0
 800a0da:	68bb      	ldr	r3, [r7, #8]
 800a0dc:	1ad3      	subs	r3, r2, r3
 800a0de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a0e2:	d905      	bls.n	800a0f0 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800a0e4:	2303      	movs	r3, #3
 800a0e6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2203      	movs	r2, #3
 800a0ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	68db      	ldr	r3, [r3, #12]
 800a0f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d0ea      	beq.n	800a0d4 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 800a0fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800a100:	4618      	mov	r0, r3
 800a102:	3710      	adds	r7, #16
 800a104:	46bd      	mov	sp, r7
 800a106:	bd80      	pop	{r7, pc}

0800a108 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b084      	sub	sp, #16
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a110:	2300      	movs	r3, #0
 800a112:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 800a114:	4b1a      	ldr	r3, [pc, #104]	; (800a180 <RTC_ExitInitMode+0x78>)
 800a116:	68db      	ldr	r3, [r3, #12]
 800a118:	4a19      	ldr	r2, [pc, #100]	; (800a180 <RTC_ExitInitMode+0x78>)
 800a11a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a11e:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800a120:	4b17      	ldr	r3, [pc, #92]	; (800a180 <RTC_ExitInitMode+0x78>)
 800a122:	689b      	ldr	r3, [r3, #8]
 800a124:	f003 0320 	and.w	r3, r3, #32
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d10c      	bne.n	800a146 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	f7ff ff95 	bl	800a05c <HAL_RTC_WaitForSynchro>
 800a132:	4603      	mov	r3, r0
 800a134:	2b00      	cmp	r3, #0
 800a136:	d01e      	beq.n	800a176 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2203      	movs	r2, #3
 800a13c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800a140:	2303      	movs	r3, #3
 800a142:	73fb      	strb	r3, [r7, #15]
 800a144:	e017      	b.n	800a176 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a146:	4b0e      	ldr	r3, [pc, #56]	; (800a180 <RTC_ExitInitMode+0x78>)
 800a148:	689b      	ldr	r3, [r3, #8]
 800a14a:	4a0d      	ldr	r2, [pc, #52]	; (800a180 <RTC_ExitInitMode+0x78>)
 800a14c:	f023 0320 	bic.w	r3, r3, #32
 800a150:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a152:	6878      	ldr	r0, [r7, #4]
 800a154:	f7ff ff82 	bl	800a05c <HAL_RTC_WaitForSynchro>
 800a158:	4603      	mov	r3, r0
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d005      	beq.n	800a16a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	2203      	movs	r2, #3
 800a162:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800a166:	2303      	movs	r3, #3
 800a168:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a16a:	4b05      	ldr	r3, [pc, #20]	; (800a180 <RTC_ExitInitMode+0x78>)
 800a16c:	689b      	ldr	r3, [r3, #8]
 800a16e:	4a04      	ldr	r2, [pc, #16]	; (800a180 <RTC_ExitInitMode+0x78>)
 800a170:	f043 0320 	orr.w	r3, r3, #32
 800a174:	6093      	str	r3, [r2, #8]
  }

  return status;
 800a176:	7bfb      	ldrb	r3, [r7, #15]
}
 800a178:	4618      	mov	r0, r3
 800a17a:	3710      	adds	r7, #16
 800a17c:	46bd      	mov	sp, r7
 800a17e:	bd80      	pop	{r7, pc}
 800a180:	58004000 	.word	0x58004000

0800a184 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800a184:	b480      	push	{r7}
 800a186:	b085      	sub	sp, #20
 800a188:	af00      	add	r7, sp, #0
 800a18a:	4603      	mov	r3, r0
 800a18c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800a18e:	2300      	movs	r3, #0
 800a190:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800a192:	79fb      	ldrb	r3, [r7, #7]
 800a194:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800a196:	e005      	b.n	800a1a4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	3301      	adds	r3, #1
 800a19c:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800a19e:	7afb      	ldrb	r3, [r7, #11]
 800a1a0:	3b0a      	subs	r3, #10
 800a1a2:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800a1a4:	7afb      	ldrb	r3, [r7, #11]
 800a1a6:	2b09      	cmp	r3, #9
 800a1a8:	d8f6      	bhi.n	800a198 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	b2db      	uxtb	r3, r3
 800a1ae:	011b      	lsls	r3, r3, #4
 800a1b0:	b2da      	uxtb	r2, r3
 800a1b2:	7afb      	ldrb	r3, [r7, #11]
 800a1b4:	4313      	orrs	r3, r2
 800a1b6:	b2db      	uxtb	r3, r3
}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	3714      	adds	r7, #20
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c2:	4770      	bx	lr

0800a1c4 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800a1c4:	b480      	push	{r7}
 800a1c6:	b085      	sub	sp, #20
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800a1ce:	79fb      	ldrb	r3, [r7, #7]
 800a1d0:	091b      	lsrs	r3, r3, #4
 800a1d2:	b2db      	uxtb	r3, r3
 800a1d4:	461a      	mov	r2, r3
 800a1d6:	0092      	lsls	r2, r2, #2
 800a1d8:	4413      	add	r3, r2
 800a1da:	005b      	lsls	r3, r3, #1
 800a1dc:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800a1de:	79fb      	ldrb	r3, [r7, #7]
 800a1e0:	f003 030f 	and.w	r3, r3, #15
 800a1e4:	b2da      	uxtb	r2, r3
 800a1e6:	7bfb      	ldrb	r3, [r7, #15]
 800a1e8:	4413      	add	r3, r2
 800a1ea:	b2db      	uxtb	r3, r3
}
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	3714      	adds	r7, #20
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f6:	4770      	bx	lr

0800a1f8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b08a      	sub	sp, #40	; 0x28
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d101      	bne.n	800a20a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800a206:	2301      	movs	r3, #1
 800a208:	e07c      	b.n	800a304 <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a210:	b2db      	uxtb	r3, r3
 800a212:	2b00      	cmp	r3, #0
 800a214:	d10c      	bne.n	800a230 <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2200      	movs	r2, #0
 800a21a:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	699b      	ldr	r3, [r3, #24]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d102      	bne.n	800a22a <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2202      	movs	r2, #2
 800a228:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800a22a:	6878      	ldr	r0, [r7, #4]
 800a22c:	f7f7 fad6 	bl	80017dc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2203      	movs	r2, #3
 800a234:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800a238:	6878      	ldr	r0, [r7, #4]
 800a23a:	f000 f867 	bl	800a30c <HAL_SD_InitCard>
 800a23e:	4603      	mov	r3, r0
 800a240:	2b00      	cmp	r3, #0
 800a242:	d001      	beq.n	800a248 <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 800a244:	2301      	movs	r3, #1
 800a246:	e05d      	b.n	800a304 <HAL_SD_Init+0x10c>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800a248:	f107 0308 	add.w	r3, r7, #8
 800a24c:	4619      	mov	r1, r3
 800a24e:	6878      	ldr	r0, [r7, #4]
 800a250:	f001 f8ce 	bl	800b3f0 <HAL_SD_GetCardStatus>
 800a254:	4603      	mov	r3, r0
 800a256:	2b00      	cmp	r3, #0
 800a258:	d001      	beq.n	800a25e <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 800a25a:	2301      	movs	r3, #1
 800a25c:	e052      	b.n	800a304 <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800a25e:	7e3b      	ldrb	r3, [r7, #24]
 800a260:	b2db      	uxtb	r3, r3
 800a262:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800a264:	7e7b      	ldrb	r3, [r7, #25]
 800a266:	b2db      	uxtb	r3, r3
 800a268:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a26e:	2b01      	cmp	r3, #1
 800a270:	d10a      	bne.n	800a288 <HAL_SD_Init+0x90>
 800a272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a274:	2b00      	cmp	r3, #0
 800a276:	d102      	bne.n	800a27e <HAL_SD_Init+0x86>
 800a278:	6a3b      	ldr	r3, [r7, #32]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d004      	beq.n	800a288 <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a284:	65da      	str	r2, [r3, #92]	; 0x5c
 800a286:	e00b      	b.n	800a2a0 <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a28c:	2b01      	cmp	r3, #1
 800a28e:	d104      	bne.n	800a29a <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a296:	65da      	str	r2, [r3, #92]	; 0x5c
 800a298:	e002      	b.n	800a2a0 <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2200      	movs	r2, #0
 800a29e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	68db      	ldr	r3, [r3, #12]
 800a2a4:	4619      	mov	r1, r3
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	f001 f984 	bl	800b5b4 <HAL_SD_ConfigWideBusOperation>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d001      	beq.n	800a2b6 <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	e026      	b.n	800a304 <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800a2b6:	f7f7 fe25 	bl	8001f04 <HAL_GetTick>
 800a2ba:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800a2bc:	e011      	b.n	800a2e2 <HAL_SD_Init+0xea>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 800a2be:	f7f7 fe21 	bl	8001f04 <HAL_GetTick>
 800a2c2:	4602      	mov	r2, r0
 800a2c4:	69fb      	ldr	r3, [r7, #28]
 800a2c6:	1ad3      	subs	r3, r2, r3
 800a2c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2cc:	d109      	bne.n	800a2e2 <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a2d4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	2201      	movs	r2, #1
 800a2da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 800a2de:	2303      	movs	r3, #3
 800a2e0:	e010      	b.n	800a304 <HAL_SD_Init+0x10c>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800a2e2:	6878      	ldr	r0, [r7, #4]
 800a2e4:	f001 fa10 	bl	800b708 <HAL_SD_GetCardState>
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	2b04      	cmp	r3, #4
 800a2ec:	d1e7      	bne.n	800a2be <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	2201      	movs	r2, #1
 800a2fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800a302:	2300      	movs	r3, #0
}
 800a304:	4618      	mov	r0, r3
 800a306:	3728      	adds	r7, #40	; 0x28
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd80      	pop	{r7, pc}

0800a30c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a30c:	b5b0      	push	{r4, r5, r7, lr}
 800a30e:	b08e      	sub	sp, #56	; 0x38
 800a310:	af04      	add	r7, sp, #16
 800a312:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800a314:	2300      	movs	r3, #0
 800a316:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800a318:	2300      	movs	r3, #0
 800a31a:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800a31c:	2300      	movs	r3, #0
 800a31e:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800a320:	2300      	movs	r3, #0
 800a322:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800a324:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800a328:	f7fe fc7a 	bl	8008c20 <HAL_RCCEx_GetPeriphCLKFreq>
 800a32c:	6278      	str	r0, [r7, #36]	; 0x24
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 800a32e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a330:	0a1b      	lsrs	r3, r3, #8
 800a332:	4a40      	ldr	r2, [pc, #256]	; (800a434 <HAL_SD_InitCard+0x128>)
 800a334:	fba2 2303 	umull	r2, r3, r2, r3
 800a338:	091b      	lsrs	r3, r3, #4
 800a33a:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	699b      	ldr	r3, [r3, #24]
 800a340:	2b02      	cmp	r3, #2
 800a342:	d107      	bne.n	800a354 <HAL_SD_InitCard+0x48>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	681a      	ldr	r2, [r3, #0]
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	f042 0210 	orr.w	r2, r2, #16
 800a352:	601a      	str	r2, [r3, #0]
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681d      	ldr	r5, [r3, #0]
 800a358:	466c      	mov	r4, sp
 800a35a:	f107 0314 	add.w	r3, r7, #20
 800a35e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a362:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a366:	f107 0308 	add.w	r3, r7, #8
 800a36a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a36c:	4628      	mov	r0, r5
 800a36e:	f003 fa57 	bl	800d820 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	4618      	mov	r0, r3
 800a378:	f003 fa9a 	bl	800d8b0 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 800a37c:	69bb      	ldr	r3, [r7, #24]
 800a37e:	005b      	lsls	r3, r3, #1
 800a380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a382:	fbb2 f3f3 	udiv	r3, r2, r3
 800a386:	627b      	str	r3, [r7, #36]	; 0x24

  if(sdmmc_clk != 0U)
 800a388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d008      	beq.n	800a3a0 <HAL_SD_InitCard+0x94>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 800a38e:	4a2a      	ldr	r2, [pc, #168]	; (800a438 <HAL_SD_InitCard+0x12c>)
 800a390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a392:	fbb2 f3f3 	udiv	r3, r2, r3
 800a396:	3301      	adds	r3, #1
 800a398:	4618      	mov	r0, r3
 800a39a:	f7f7 fdbf 	bl	8001f1c <HAL_Delay>
 800a39e:	e002      	b.n	800a3a6 <HAL_SD_InitCard+0x9a>
  }
  else
  {
    HAL_Delay(2U);
 800a3a0:	2002      	movs	r0, #2
 800a3a2:	f7f7 fdbb 	bl	8001f1c <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800a3a6:	6878      	ldr	r0, [r7, #4]
 800a3a8:	f001 fa8c 	bl	800b8c4 <SD_PowerON>
 800a3ac:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a3ae:	6a3b      	ldr	r3, [r7, #32]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d00b      	beq.n	800a3cc <HAL_SD_InitCard+0xc0>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2201      	movs	r2, #1
 800a3b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a3c0:	6a3b      	ldr	r3, [r7, #32]
 800a3c2:	431a      	orrs	r2, r3
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a3c8:	2301      	movs	r3, #1
 800a3ca:	e02e      	b.n	800a42a <HAL_SD_InitCard+0x11e>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800a3cc:	6878      	ldr	r0, [r7, #4]
 800a3ce:	f001 f9bb 	bl	800b748 <SD_InitCard>
 800a3d2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a3d4:	6a3b      	ldr	r3, [r7, #32]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d00b      	beq.n	800a3f2 <HAL_SD_InitCard+0xe6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	2201      	movs	r2, #1
 800a3de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a3e6:	6a3b      	ldr	r3, [r7, #32]
 800a3e8:	431a      	orrs	r2, r3
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	e01b      	b.n	800a42a <HAL_SD_InitCard+0x11e>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	f003 faee 	bl	800d9dc <SDMMC_CmdBlockLength>
 800a400:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a402:	6a3b      	ldr	r3, [r7, #32]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d00f      	beq.n	800a428 <HAL_SD_InitCard+0x11c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	4a0b      	ldr	r2, [pc, #44]	; (800a43c <HAL_SD_InitCard+0x130>)
 800a40e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a414:	6a3b      	ldr	r3, [r7, #32]
 800a416:	431a      	orrs	r2, r3
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2201      	movs	r2, #1
 800a420:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a424:	2301      	movs	r3, #1
 800a426:	e000      	b.n	800a42a <HAL_SD_InitCard+0x11e>
  }

  return HAL_OK;
 800a428:	2300      	movs	r3, #0
}
 800a42a:	4618      	mov	r0, r3
 800a42c:	3728      	adds	r7, #40	; 0x28
 800a42e:	46bd      	mov	sp, r7
 800a430:	bdb0      	pop	{r4, r5, r7, pc}
 800a432:	bf00      	nop
 800a434:	014f8b59 	.word	0x014f8b59
 800a438:	00012110 	.word	0x00012110
 800a43c:	1fe00fff 	.word	0x1fe00fff

0800a440 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b092      	sub	sp, #72	; 0x48
 800a444:	af00      	add	r7, sp, #0
 800a446:	60f8      	str	r0, [r7, #12]
 800a448:	60b9      	str	r1, [r7, #8]
 800a44a:	607a      	str	r2, [r7, #4]
 800a44c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a44e:	f7f7 fd59 	bl	8001f04 <HAL_GetTick>
 800a452:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d107      	bne.n	800a472 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a466:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a46e:	2301      	movs	r3, #1
 800a470:	e167      	b.n	800a742 <HAL_SD_ReadBlocks+0x302>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a478:	b2db      	uxtb	r3, r3
 800a47a:	2b01      	cmp	r3, #1
 800a47c:	f040 815a 	bne.w	800a734 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	2200      	movs	r2, #0
 800a484:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a486:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	441a      	add	r2, r3
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a490:	429a      	cmp	r2, r3
 800a492:	d907      	bls.n	800a4a4 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a498:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	e14e      	b.n	800a742 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	2203      	movs	r2, #3
 800a4a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4b8:	2b01      	cmp	r3, #1
 800a4ba:	d002      	beq.n	800a4c2 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800a4bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4be:	025b      	lsls	r3, r3, #9
 800a4c0:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a4c2:	f04f 33ff 	mov.w	r3, #4294967295
 800a4c6:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	025b      	lsls	r3, r3, #9
 800a4cc:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a4ce:	2390      	movs	r3, #144	; 0x90
 800a4d0:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a4d2:	2302      	movs	r3, #2
 800a4d4:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800a4da:	2300      	movs	r3, #0
 800a4dc:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	f107 0214 	add.w	r2, r7, #20
 800a4e6:	4611      	mov	r1, r2
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	f003 fa4b 	bl	800d984 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	68da      	ldr	r2, [r3, #12]
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a4fc:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	2b01      	cmp	r3, #1
 800a502:	d90a      	bls.n	800a51a <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	2202      	movs	r2, #2
 800a508:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a510:	4618      	mov	r0, r3
 800a512:	f003 faa9 	bl	800da68 <SDMMC_CmdReadMultiBlock>
 800a516:	6478      	str	r0, [r7, #68]	; 0x44
 800a518:	e009      	b.n	800a52e <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	2201      	movs	r2, #1
 800a51e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a526:	4618      	mov	r0, r3
 800a528:	f003 fa7b 	bl	800da22 <SDMMC_CmdReadSingleBlock>
 800a52c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a52e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a530:	2b00      	cmp	r3, #0
 800a532:	d012      	beq.n	800a55a <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	4a84      	ldr	r2, [pc, #528]	; (800a74c <HAL_SD_ReadBlocks+0x30c>)
 800a53a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a540:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a542:	431a      	orrs	r2, r3
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	2201      	movs	r2, #1
 800a54c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	2200      	movs	r2, #0
 800a554:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a556:	2301      	movs	r3, #1
 800a558:	e0f3      	b.n	800a742 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800a55a:	69bb      	ldr	r3, [r7, #24]
 800a55c:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800a55e:	e058      	b.n	800a612 <HAL_SD_ReadBlocks+0x1d2>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a566:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d033      	beq.n	800a5d6 <HAL_SD_ReadBlocks+0x196>
 800a56e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a570:	2b1f      	cmp	r3, #31
 800a572:	d930      	bls.n	800a5d6 <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800a574:	2300      	movs	r3, #0
 800a576:	643b      	str	r3, [r7, #64]	; 0x40
 800a578:	e027      	b.n	800a5ca <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	4618      	mov	r0, r3
 800a580:	f003 f978 	bl	800d874 <SDMMC_ReadFIFO>
 800a584:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800a586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a588:	b2da      	uxtb	r2, r3
 800a58a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a58c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a58e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a590:	3301      	adds	r3, #1
 800a592:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800a594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a596:	0a1b      	lsrs	r3, r3, #8
 800a598:	b2da      	uxtb	r2, r3
 800a59a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a59c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a59e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5a0:	3301      	adds	r3, #1
 800a5a2:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800a5a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5a6:	0c1b      	lsrs	r3, r3, #16
 800a5a8:	b2da      	uxtb	r2, r3
 800a5aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5ac:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a5ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5b0:	3301      	adds	r3, #1
 800a5b2:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800a5b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5b6:	0e1b      	lsrs	r3, r3, #24
 800a5b8:	b2da      	uxtb	r2, r3
 800a5ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5bc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a5be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5c0:	3301      	adds	r3, #1
 800a5c2:	637b      	str	r3, [r7, #52]	; 0x34
        for(count = 0U; count < 8U; count++)
 800a5c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5c6:	3301      	adds	r3, #1
 800a5c8:	643b      	str	r3, [r7, #64]	; 0x40
 800a5ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5cc:	2b07      	cmp	r3, #7
 800a5ce:	d9d4      	bls.n	800a57a <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 800a5d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5d2:	3b20      	subs	r3, #32
 800a5d4:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800a5d6:	f7f7 fc95 	bl	8001f04 <HAL_GetTick>
 800a5da:	4602      	mov	r2, r0
 800a5dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5de:	1ad3      	subs	r3, r2, r3
 800a5e0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a5e2:	429a      	cmp	r2, r3
 800a5e4:	d902      	bls.n	800a5ec <HAL_SD_ReadBlocks+0x1ac>
 800a5e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d112      	bne.n	800a612 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	4a56      	ldr	r2, [pc, #344]	; (800a74c <HAL_SD_ReadBlocks+0x30c>)
 800a5f2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5f8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	2201      	movs	r2, #1
 800a604:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	2200      	movs	r2, #0
 800a60c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800a60e:	2303      	movs	r3, #3
 800a610:	e097      	b.n	800a742 <HAL_SD_ReadBlocks+0x302>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a618:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d09f      	beq.n	800a560 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	68da      	ldr	r2, [r3, #12]
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a62e:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d022      	beq.n	800a684 <HAL_SD_ReadBlocks+0x244>
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	2b01      	cmp	r3, #1
 800a642:	d91f      	bls.n	800a684 <HAL_SD_ReadBlocks+0x244>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a648:	2b03      	cmp	r3, #3
 800a64a:	d01b      	beq.n	800a684 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	4618      	mov	r0, r3
 800a652:	f003 fa73 	bl	800db3c <SDMMC_CmdStopTransfer>
 800a656:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800a658:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d012      	beq.n	800a684 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	4a3a      	ldr	r2, [pc, #232]	; (800a74c <HAL_SD_ReadBlocks+0x30c>)
 800a664:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a66a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a66c:	431a      	orrs	r2, r3
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	2201      	movs	r2, #1
 800a676:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	2200      	movs	r2, #0
 800a67e:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800a680:	2301      	movs	r3, #1
 800a682:	e05e      	b.n	800a742 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a68a:	f003 0308 	and.w	r3, r3, #8
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d012      	beq.n	800a6b8 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	4a2d      	ldr	r2, [pc, #180]	; (800a74c <HAL_SD_ReadBlocks+0x30c>)
 800a698:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a69e:	f043 0208 	orr.w	r2, r3, #8
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	2201      	movs	r2, #1
 800a6aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a6b4:	2301      	movs	r3, #1
 800a6b6:	e044      	b.n	800a742 <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6be:	f003 0302 	and.w	r3, r3, #2
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d012      	beq.n	800a6ec <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	4a20      	ldr	r2, [pc, #128]	; (800a74c <HAL_SD_ReadBlocks+0x30c>)
 800a6cc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6d2:	f043 0202 	orr.w	r2, r3, #2
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	2201      	movs	r2, #1
 800a6de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a6e8:	2301      	movs	r3, #1
 800a6ea:	e02a      	b.n	800a742 <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6f2:	f003 0320 	and.w	r3, r3, #32
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d012      	beq.n	800a720 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	4a13      	ldr	r2, [pc, #76]	; (800a74c <HAL_SD_ReadBlocks+0x30c>)
 800a700:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a706:	f043 0220 	orr.w	r2, r3, #32
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	2201      	movs	r2, #1
 800a712:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	2200      	movs	r2, #0
 800a71a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a71c:	2301      	movs	r3, #1
 800a71e:	e010      	b.n	800a742 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	4a0a      	ldr	r2, [pc, #40]	; (800a750 <HAL_SD_ReadBlocks+0x310>)
 800a726:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	2201      	movs	r2, #1
 800a72c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800a730:	2300      	movs	r3, #0
 800a732:	e006      	b.n	800a742 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a738:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a740:	2301      	movs	r3, #1
  }
}
 800a742:	4618      	mov	r0, r3
 800a744:	3748      	adds	r7, #72	; 0x48
 800a746:	46bd      	mov	sp, r7
 800a748:	bd80      	pop	{r7, pc}
 800a74a:	bf00      	nop
 800a74c:	1fe00fff 	.word	0x1fe00fff
 800a750:	18000f3a 	.word	0x18000f3a

0800a754 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b092      	sub	sp, #72	; 0x48
 800a758:	af00      	add	r7, sp, #0
 800a75a:	60f8      	str	r0, [r7, #12]
 800a75c:	60b9      	str	r1, [r7, #8]
 800a75e:	607a      	str	r2, [r7, #4]
 800a760:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a762:	f7f7 fbcf 	bl	8001f04 <HAL_GetTick>
 800a766:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800a76c:	68bb      	ldr	r3, [r7, #8]
 800a76e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800a770:	68bb      	ldr	r3, [r7, #8]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d107      	bne.n	800a786 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a77a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a782:	2301      	movs	r3, #1
 800a784:	e16b      	b.n	800aa5e <HAL_SD_WriteBlocks+0x30a>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a78c:	b2db      	uxtb	r3, r3
 800a78e:	2b01      	cmp	r3, #1
 800a790:	f040 815e 	bne.w	800aa50 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	2200      	movs	r2, #0
 800a798:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a79a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	441a      	add	r2, r3
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7a4:	429a      	cmp	r2, r3
 800a7a6:	d907      	bls.n	800a7b8 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7ac:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a7b4:	2301      	movs	r3, #1
 800a7b6:	e152      	b.n	800aa5e <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	2203      	movs	r2, #3
 800a7bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7cc:	2b01      	cmp	r3, #1
 800a7ce:	d002      	beq.n	800a7d6 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800a7d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7d2:	025b      	lsls	r3, r3, #9
 800a7d4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a7d6:	f04f 33ff 	mov.w	r3, #4294967295
 800a7da:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	025b      	lsls	r3, r3, #9
 800a7e0:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a7e2:	2390      	movs	r3, #144	; 0x90
 800a7e4:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	f107 0218 	add.w	r2, r7, #24
 800a7fa:	4611      	mov	r1, r2
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	f003 f8c1 	bl	800d984 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	68da      	ldr	r2, [r3, #12]
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a810:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	2b01      	cmp	r3, #1
 800a816:	d90a      	bls.n	800a82e <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	2220      	movs	r2, #32
 800a81c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a824:	4618      	mov	r0, r3
 800a826:	f003 f965 	bl	800daf4 <SDMMC_CmdWriteMultiBlock>
 800a82a:	6478      	str	r0, [r7, #68]	; 0x44
 800a82c:	e009      	b.n	800a842 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	2210      	movs	r2, #16
 800a832:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a83a:	4618      	mov	r0, r3
 800a83c:	f003 f937 	bl	800daae <SDMMC_CmdWriteSingleBlock>
 800a840:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a842:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a844:	2b00      	cmp	r3, #0
 800a846:	d012      	beq.n	800a86e <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	4a86      	ldr	r2, [pc, #536]	; (800aa68 <HAL_SD_WriteBlocks+0x314>)
 800a84e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a854:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a856:	431a      	orrs	r2, r3
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	2201      	movs	r2, #1
 800a860:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	2200      	movs	r2, #0
 800a868:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a86a:	2301      	movs	r3, #1
 800a86c:	e0f7      	b.n	800aa5e <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800a86e:	69fb      	ldr	r3, [r7, #28]
 800a870:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800a872:	e05c      	b.n	800a92e <HAL_SD_WriteBlocks+0x1da>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a87a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d037      	beq.n	800a8f2 <HAL_SD_WriteBlocks+0x19e>
 800a882:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a884:	2b1f      	cmp	r3, #31
 800a886:	d934      	bls.n	800a8f2 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800a888:	2300      	movs	r3, #0
 800a88a:	643b      	str	r3, [r7, #64]	; 0x40
 800a88c:	e02b      	b.n	800a8e6 <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 800a88e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a890:	781b      	ldrb	r3, [r3, #0]
 800a892:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a896:	3301      	adds	r3, #1
 800a898:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 800a89a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a89c:	781b      	ldrb	r3, [r3, #0]
 800a89e:	021a      	lsls	r2, r3, #8
 800a8a0:	697b      	ldr	r3, [r7, #20]
 800a8a2:	4313      	orrs	r3, r2
 800a8a4:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a8a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8a8:	3301      	adds	r3, #1
 800a8aa:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 800a8ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8ae:	781b      	ldrb	r3, [r3, #0]
 800a8b0:	041a      	lsls	r2, r3, #16
 800a8b2:	697b      	ldr	r3, [r7, #20]
 800a8b4:	4313      	orrs	r3, r2
 800a8b6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a8b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8ba:	3301      	adds	r3, #1
 800a8bc:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 800a8be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8c0:	781b      	ldrb	r3, [r3, #0]
 800a8c2:	061a      	lsls	r2, r3, #24
 800a8c4:	697b      	ldr	r3, [r7, #20]
 800a8c6:	4313      	orrs	r3, r2
 800a8c8:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a8ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8cc:	3301      	adds	r3, #1
 800a8ce:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	f107 0214 	add.w	r2, r7, #20
 800a8d8:	4611      	mov	r1, r2
 800a8da:	4618      	mov	r0, r3
 800a8dc:	f002 ffd7 	bl	800d88e <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800a8e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a8e2:	3301      	adds	r3, #1
 800a8e4:	643b      	str	r3, [r7, #64]	; 0x40
 800a8e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a8e8:	2b07      	cmp	r3, #7
 800a8ea:	d9d0      	bls.n	800a88e <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 800a8ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8ee:	3b20      	subs	r3, #32
 800a8f0:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800a8f2:	f7f7 fb07 	bl	8001f04 <HAL_GetTick>
 800a8f6:	4602      	mov	r2, r0
 800a8f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8fa:	1ad3      	subs	r3, r2, r3
 800a8fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a8fe:	429a      	cmp	r2, r3
 800a900:	d902      	bls.n	800a908 <HAL_SD_WriteBlocks+0x1b4>
 800a902:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a904:	2b00      	cmp	r3, #0
 800a906:	d112      	bne.n	800a92e <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	4a56      	ldr	r2, [pc, #344]	; (800aa68 <HAL_SD_WriteBlocks+0x314>)
 800a90e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a914:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a916:	431a      	orrs	r2, r3
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	2201      	movs	r2, #1
 800a920:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	2200      	movs	r2, #0
 800a928:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800a92a:	2303      	movs	r3, #3
 800a92c:	e097      	b.n	800aa5e <HAL_SD_WriteBlocks+0x30a>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a934:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d09b      	beq.n	800a874 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	68da      	ldr	r2, [r3, #12]
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a94a:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a956:	2b00      	cmp	r3, #0
 800a958:	d022      	beq.n	800a9a0 <HAL_SD_WriteBlocks+0x24c>
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	2b01      	cmp	r3, #1
 800a95e:	d91f      	bls.n	800a9a0 <HAL_SD_WriteBlocks+0x24c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a964:	2b03      	cmp	r3, #3
 800a966:	d01b      	beq.n	800a9a0 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	4618      	mov	r0, r3
 800a96e:	f003 f8e5 	bl	800db3c <SDMMC_CmdStopTransfer>
 800a972:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800a974:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a976:	2b00      	cmp	r3, #0
 800a978:	d012      	beq.n	800a9a0 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	4a3a      	ldr	r2, [pc, #232]	; (800aa68 <HAL_SD_WriteBlocks+0x314>)
 800a980:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a986:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a988:	431a      	orrs	r2, r3
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	2201      	movs	r2, #1
 800a992:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	2200      	movs	r2, #0
 800a99a:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800a99c:	2301      	movs	r3, #1
 800a99e:	e05e      	b.n	800aa5e <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9a6:	f003 0308 	and.w	r3, r3, #8
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d012      	beq.n	800a9d4 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	4a2d      	ldr	r2, [pc, #180]	; (800aa68 <HAL_SD_WriteBlocks+0x314>)
 800a9b4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9ba:	f043 0208 	orr.w	r2, r3, #8
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	2201      	movs	r2, #1
 800a9c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a9d0:	2301      	movs	r3, #1
 800a9d2:	e044      	b.n	800aa5e <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9da:	f003 0302 	and.w	r3, r3, #2
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d012      	beq.n	800aa08 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	4a20      	ldr	r2, [pc, #128]	; (800aa68 <HAL_SD_WriteBlocks+0x314>)
 800a9e8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9ee:	f043 0202 	orr.w	r2, r3, #2
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	2201      	movs	r2, #1
 800a9fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	2200      	movs	r2, #0
 800aa02:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800aa04:	2301      	movs	r3, #1
 800aa06:	e02a      	b.n	800aa5e <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa0e:	f003 0310 	and.w	r3, r3, #16
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d012      	beq.n	800aa3c <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	4a13      	ldr	r2, [pc, #76]	; (800aa68 <HAL_SD_WriteBlocks+0x314>)
 800aa1c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa22:	f043 0210 	orr.w	r2, r3, #16
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	2201      	movs	r2, #1
 800aa2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	2200      	movs	r2, #0
 800aa36:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800aa38:	2301      	movs	r3, #1
 800aa3a:	e010      	b.n	800aa5e <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	4a0a      	ldr	r2, [pc, #40]	; (800aa6c <HAL_SD_WriteBlocks+0x318>)
 800aa42:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	2201      	movs	r2, #1
 800aa48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	e006      	b.n	800aa5e <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa54:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800aa5c:	2301      	movs	r3, #1
  }
}
 800aa5e:	4618      	mov	r0, r3
 800aa60:	3748      	adds	r7, #72	; 0x48
 800aa62:	46bd      	mov	sp, r7
 800aa64:	bd80      	pop	{r7, pc}
 800aa66:	bf00      	nop
 800aa68:	1fe00fff 	.word	0x1fe00fff
 800aa6c:	18000f3a 	.word	0x18000f3a

0800aa70 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b08c      	sub	sp, #48	; 0x30
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	60f8      	str	r0, [r7, #12]
 800aa78:	60b9      	str	r1, [r7, #8]
 800aa7a:	607a      	str	r2, [r7, #4]
 800aa7c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800aa82:	68bb      	ldr	r3, [r7, #8]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d107      	bne.n	800aa98 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa8c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800aa94:	2301      	movs	r3, #1
 800aa96:	e08d      	b.n	800abb4 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800aa9e:	b2db      	uxtb	r3, r3
 800aaa0:	2b01      	cmp	r3, #1
 800aaa2:	f040 8086 	bne.w	800abb2 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800aaac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	441a      	add	r2, r3
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aab6:	429a      	cmp	r2, r3
 800aab8:	d907      	bls.n	800aaca <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aabe:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800aac6:	2301      	movs	r3, #1
 800aac8:	e074      	b.n	800abb4 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	2203      	movs	r2, #3
 800aace:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	2200      	movs	r2, #0
 800aad8:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	68ba      	ldr	r2, [r7, #8]
 800aade:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	025a      	lsls	r2, r3, #9
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aaec:	2b01      	cmp	r3, #1
 800aaee:	d002      	beq.n	800aaf6 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800aaf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaf2:	025b      	lsls	r3, r3, #9
 800aaf4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800aaf6:	f04f 33ff 	mov.w	r3, #4294967295
 800aafa:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	025b      	lsls	r3, r3, #9
 800ab00:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800ab02:	2390      	movs	r3, #144	; 0x90
 800ab04:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800ab06:	2302      	movs	r3, #2
 800ab08:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800ab0e:	2300      	movs	r3, #0
 800ab10:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f107 0210 	add.w	r2, r7, #16
 800ab1a:	4611      	mov	r1, r2
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	f002 ff31 	bl	800d984 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	68da      	ldr	r2, [r3, #12]
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ab30:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	68ba      	ldr	r2, [r7, #8]
 800ab38:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	2201      	movs	r2, #1
 800ab40:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if(NumberOfBlocks > 1U)
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	2b01      	cmp	r3, #1
 800ab46:	d90a      	bls.n	800ab5e <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	2282      	movs	r2, #130	; 0x82
 800ab4c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ab54:	4618      	mov	r0, r3
 800ab56:	f002 ff87 	bl	800da68 <SDMMC_CmdReadMultiBlock>
 800ab5a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800ab5c:	e009      	b.n	800ab72 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	2281      	movs	r2, #129	; 0x81
 800ab62:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f002 ff59 	bl	800da22 <SDMMC_CmdReadSingleBlock>
 800ab70:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800ab72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d012      	beq.n	800ab9e <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	4a0f      	ldr	r2, [pc, #60]	; (800abbc <HAL_SD_ReadBlocks_DMA+0x14c>)
 800ab7e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab86:	431a      	orrs	r2, r3
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	2201      	movs	r2, #1
 800ab90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	2200      	movs	r2, #0
 800ab98:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800ab9a:	2301      	movs	r3, #1
 800ab9c:	e00a      	b.n	800abb4 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800abac:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800abae:	2300      	movs	r3, #0
 800abb0:	e000      	b.n	800abb4 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800abb2:	2302      	movs	r3, #2
  }
}
 800abb4:	4618      	mov	r0, r3
 800abb6:	3730      	adds	r7, #48	; 0x30
 800abb8:	46bd      	mov	sp, r7
 800abba:	bd80      	pop	{r7, pc}
 800abbc:	1fe00fff 	.word	0x1fe00fff

0800abc0 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b08c      	sub	sp, #48	; 0x30
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	60f8      	str	r0, [r7, #12]
 800abc8:	60b9      	str	r1, [r7, #8]
 800abca:	607a      	str	r2, [r7, #4]
 800abcc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d107      	bne.n	800abe8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abdc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800abe4:	2301      	movs	r3, #1
 800abe6:	e08d      	b.n	800ad04 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800abee:	b2db      	uxtb	r3, r3
 800abf0:	2b01      	cmp	r3, #1
 800abf2:	f040 8086 	bne.w	800ad02 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	2200      	movs	r2, #0
 800abfa:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800abfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	441a      	add	r2, r3
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac06:	429a      	cmp	r2, r3
 800ac08:	d907      	bls.n	800ac1a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac0e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800ac16:	2301      	movs	r3, #1
 800ac18:	e074      	b.n	800ad04 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	2203      	movs	r2, #3
 800ac1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	2200      	movs	r2, #0
 800ac28:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	68ba      	ldr	r2, [r7, #8]
 800ac2e:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	025a      	lsls	r2, r3, #9
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	625a      	str	r2, [r3, #36]	; 0x24

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac3c:	2b01      	cmp	r3, #1
 800ac3e:	d002      	beq.n	800ac46 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800ac40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac42:	025b      	lsls	r3, r3, #9
 800ac44:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ac46:	f04f 33ff 	mov.w	r3, #4294967295
 800ac4a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	025b      	lsls	r3, r3, #9
 800ac50:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800ac52:	2390      	movs	r3, #144	; 0x90
 800ac54:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800ac56:	2300      	movs	r3, #0
 800ac58:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800ac5e:	2300      	movs	r3, #0
 800ac60:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	f107 0210 	add.w	r2, r7, #16
 800ac6a:	4611      	mov	r1, r2
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	f002 fe89 	bl	800d984 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	68da      	ldr	r2, [r3, #12]
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ac80:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	68ba      	ldr	r2, [r7, #8]
 800ac88:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	2201      	movs	r2, #1
 800ac90:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	2b01      	cmp	r3, #1
 800ac96:	d90a      	bls.n	800acae <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	22a0      	movs	r2, #160	; 0xa0
 800ac9c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aca4:	4618      	mov	r0, r3
 800aca6:	f002 ff25 	bl	800daf4 <SDMMC_CmdWriteMultiBlock>
 800acaa:	62f8      	str	r0, [r7, #44]	; 0x2c
 800acac:	e009      	b.n	800acc2 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	2290      	movs	r2, #144	; 0x90
 800acb2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800acba:	4618      	mov	r0, r3
 800acbc:	f002 fef7 	bl	800daae <SDMMC_CmdWriteSingleBlock>
 800acc0:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800acc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d012      	beq.n	800acee <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	4a0f      	ldr	r2, [pc, #60]	; (800ad0c <HAL_SD_WriteBlocks_DMA+0x14c>)
 800acce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800acd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acd6:	431a      	orrs	r2, r3
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	2201      	movs	r2, #1
 800ace0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	2200      	movs	r2, #0
 800ace8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800acea:	2301      	movs	r3, #1
 800acec:	e00a      	b.n	800ad04 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800acfc:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800acfe:	2300      	movs	r3, #0
 800ad00:	e000      	b.n	800ad04 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800ad02:	2302      	movs	r3, #2
  }
}
 800ad04:	4618      	mov	r0, r3
 800ad06:	3730      	adds	r7, #48	; 0x30
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	bd80      	pop	{r7, pc}
 800ad0c:	1fe00fff 	.word	0x1fe00fff

0800ad10 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b084      	sub	sp, #16
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad1c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d008      	beq.n	800ad3e <HAL_SD_IRQHandler+0x2e>
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	f003 0308 	and.w	r3, r3, #8
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d003      	beq.n	800ad3e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f001 f92a 	bl	800bf90 <SD_Read_IT>
 800ad3c:	e19a      	b.n	800b074 <HAL_SD_IRQHandler+0x364>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	f000 80ac 	beq.w	800aea6 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ad56:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681a      	ldr	r2, [r3, #0]
 800ad62:	4b9d      	ldr	r3, [pc, #628]	; (800afd8 <HAL_SD_IRQHandler+0x2c8>)
 800ad64:	400b      	ands	r3, r1
 800ad66:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800ad76:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	68da      	ldr	r2, [r3, #12]
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ad86:	60da      	str	r2, [r3, #12]

    if((context & SD_CONTEXT_IT) != 0U)
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	f003 0308 	and.w	r3, r3, #8
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d038      	beq.n	800ae04 <HAL_SD_IRQHandler+0xf4>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	f003 0302 	and.w	r3, r3, #2
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d104      	bne.n	800ada6 <HAL_SD_IRQHandler+0x96>
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	f003 0320 	and.w	r3, r3, #32
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d011      	beq.n	800adca <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	4618      	mov	r0, r3
 800adac:	f002 fec6 	bl	800db3c <SDMMC_CmdStopTransfer>
 800adb0:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800adb2:	68bb      	ldr	r3, [r7, #8]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d008      	beq.n	800adca <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	431a      	orrs	r2, r3
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800adc4:	6878      	ldr	r0, [r7, #4]
 800adc6:	f000 f959 	bl	800b07c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	4a83      	ldr	r2, [pc, #524]	; (800afdc <HAL_SD_IRQHandler+0x2cc>)
 800add0:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	2201      	movs	r2, #1
 800add6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	2200      	movs	r2, #0
 800adde:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	f003 0301 	and.w	r3, r3, #1
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d104      	bne.n	800adf4 <HAL_SD_IRQHandler+0xe4>
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	f003 0302 	and.w	r3, r3, #2
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d003      	beq.n	800adfc <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800adf4:	6878      	ldr	r0, [r7, #4]
 800adf6:	f004 feb7 	bl	800fb68 <HAL_SD_RxCpltCallback>
 800adfa:	e13b      	b.n	800b074 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800adfc:	6878      	ldr	r0, [r7, #4]
 800adfe:	f004 fea9 	bl	800fb54 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800ae02:	e137      	b.n	800b074 <HAL_SD_IRQHandler+0x364>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	f000 8132 	beq.w	800b074 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	2200      	movs	r2, #0
 800ae16:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	2200      	movs	r2, #0
 800ae26:	651a      	str	r2, [r3, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	f003 0302 	and.w	r3, r3, #2
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d104      	bne.n	800ae3c <HAL_SD_IRQHandler+0x12c>
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	f003 0320 	and.w	r3, r3, #32
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d011      	beq.n	800ae60 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	4618      	mov	r0, r3
 800ae42:	f002 fe7b 	bl	800db3c <SDMMC_CmdStopTransfer>
 800ae46:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d008      	beq.n	800ae60 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae52:	68bb      	ldr	r3, [r7, #8]
 800ae54:	431a      	orrs	r2, r3
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800ae5a:	6878      	ldr	r0, [r7, #4]
 800ae5c:	f000 f90e 	bl	800b07c <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2201      	movs	r2, #1
 800ae64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	f003 0310 	and.w	r3, r3, #16
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d104      	bne.n	800ae82 <HAL_SD_IRQHandler+0x172>
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	f003 0320 	and.w	r3, r3, #32
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d002      	beq.n	800ae88 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800ae82:	6878      	ldr	r0, [r7, #4]
 800ae84:	f004 fe66 	bl	800fb54 <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	f003 0301 	and.w	r3, r3, #1
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d105      	bne.n	800ae9e <HAL_SD_IRQHandler+0x18e>
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	f003 0302 	and.w	r3, r3, #2
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	f000 80eb 	beq.w	800b074 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	f004 fe62 	bl	800fb68 <HAL_SD_RxCpltCallback>
}
 800aea4:	e0e6      	b.n	800b074 <HAL_SD_IRQHandler+0x364>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aeac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d008      	beq.n	800aec6 <HAL_SD_IRQHandler+0x1b6>
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	f003 0308 	and.w	r3, r3, #8
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d003      	beq.n	800aec6 <HAL_SD_IRQHandler+0x1b6>
    SD_Write_IT(hsd);
 800aebe:	6878      	ldr	r0, [r7, #4]
 800aec0:	f001 f8ac 	bl	800c01c <SD_Write_IT>
 800aec4:	e0d6      	b.n	800b074 <HAL_SD_IRQHandler+0x364>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aecc:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	f000 80a2 	beq.w	800b01a <HAL_SD_IRQHandler+0x30a>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aedc:	f003 0302 	and.w	r3, r3, #2
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d005      	beq.n	800aef0 <HAL_SD_IRQHandler+0x1e0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aee8:	f043 0202 	orr.w	r2, r3, #2
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aef6:	f003 0308 	and.w	r3, r3, #8
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d005      	beq.n	800af0a <HAL_SD_IRQHandler+0x1fa>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af02:	f043 0208 	orr.w	r2, r3, #8
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af10:	f003 0320 	and.w	r3, r3, #32
 800af14:	2b00      	cmp	r3, #0
 800af16:	d005      	beq.n	800af24 <HAL_SD_IRQHandler+0x214>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af1c:	f043 0220 	orr.w	r2, r3, #32
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af2a:	f003 0310 	and.w	r3, r3, #16
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d005      	beq.n	800af3e <HAL_SD_IRQHandler+0x22e>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af36:	f043 0210 	orr.w	r2, r3, #16
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	4a26      	ldr	r2, [pc, #152]	; (800afdc <HAL_SD_IRQHandler+0x2cc>)
 800af44:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800af54:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	68da      	ldr	r2, [r3, #12]
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800af64:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800af74:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	68da      	ldr	r2, [r3, #12]
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800af84:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	4618      	mov	r0, r3
 800af8c:	f002 fdd6 	bl	800db3c <SDMMC_CmdStopTransfer>
 800af90:	4602      	mov	r2, r0
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af96:	431a      	orrs	r2, r3
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	68da      	ldr	r2, [r3, #12]
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800afaa:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800afb4:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	f003 0308 	and.w	r3, r3, #8
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d00f      	beq.n	800afe0 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	2201      	movs	r2, #1
 800afc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2200      	movs	r2, #0
 800afcc:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800afce:	6878      	ldr	r0, [r7, #4]
 800afd0:	f000 f854 	bl	800b07c <HAL_SD_ErrorCallback>
}
 800afd4:	e04e      	b.n	800b074 <HAL_SD_IRQHandler+0x364>
 800afd6:	bf00      	nop
 800afd8:	ffff3ec5 	.word	0xffff3ec5
 800afdc:	18000f3a 	.word	0x18000f3a
    else if((context & SD_CONTEXT_DMA) != 0U)
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d044      	beq.n	800b074 <HAL_SD_IRQHandler+0x364>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d040      	beq.n	800b074 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800b000:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	2200      	movs	r2, #0
 800b008:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	2201      	movs	r2, #1
 800b00e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 800b012:	6878      	ldr	r0, [r7, #4]
 800b014:	f000 f832 	bl	800b07c <HAL_SD_ErrorCallback>
}
 800b018:	e02c      	b.n	800b074 <HAL_SD_IRQHandler+0x364>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b020:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b024:	2b00      	cmp	r3, #0
 800b026:	d025      	beq.n	800b074 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b030:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b038:	f003 0304 	and.w	r3, r3, #4
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d10c      	bne.n	800b05a <HAL_SD_IRQHandler+0x34a>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	f003 0320 	and.w	r3, r3, #32
 800b046:	2b00      	cmp	r3, #0
 800b048:	d003      	beq.n	800b052 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800b04a:	6878      	ldr	r0, [r7, #4]
 800b04c:	f001 f84e 	bl	800c0ec <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800b050:	e010      	b.n	800b074 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800b052:	6878      	ldr	r0, [r7, #4]
 800b054:	f001 f836 	bl	800c0c4 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800b058:	e00c      	b.n	800b074 <HAL_SD_IRQHandler+0x364>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	f003 0320 	and.w	r3, r3, #32
 800b060:	2b00      	cmp	r3, #0
 800b062:	d003      	beq.n	800b06c <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800b064:	6878      	ldr	r0, [r7, #4]
 800b066:	f001 f837 	bl	800c0d8 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800b06a:	e003      	b.n	800b074 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800b06c:	6878      	ldr	r0, [r7, #4]
 800b06e:	f001 f81f 	bl	800c0b0 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800b072:	e7ff      	b.n	800b074 <HAL_SD_IRQHandler+0x364>
 800b074:	bf00      	nop
 800b076:	3710      	adds	r7, #16
 800b078:	46bd      	mov	sp, r7
 800b07a:	bd80      	pop	{r7, pc}

0800b07c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800b07c:	b480      	push	{r7}
 800b07e:	b083      	sub	sp, #12
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800b084:	bf00      	nop
 800b086:	370c      	adds	r7, #12
 800b088:	46bd      	mov	sp, r7
 800b08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08e:	4770      	bx	lr

0800b090 <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 800b090:	b480      	push	{r7}
 800b092:	b083      	sub	sp, #12
 800b094:	af00      	add	r7, sp, #0
 800b096:	4603      	mov	r3, r0
 800b098:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 800b09a:	bf00      	nop
 800b09c:	370c      	adds	r7, #12
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a4:	4770      	bx	lr
	...

0800b0a8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800b0a8:	b480      	push	{r7}
 800b0aa:	b083      	sub	sp, #12
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
 800b0b0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b0b6:	0f9b      	lsrs	r3, r3, #30
 800b0b8:	b2da      	uxtb	r2, r3
 800b0ba:	683b      	ldr	r3, [r7, #0]
 800b0bc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b0c2:	0e9b      	lsrs	r3, r3, #26
 800b0c4:	b2db      	uxtb	r3, r3
 800b0c6:	f003 030f 	and.w	r3, r3, #15
 800b0ca:	b2da      	uxtb	r2, r3
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b0d4:	0e1b      	lsrs	r3, r3, #24
 800b0d6:	b2db      	uxtb	r3, r3
 800b0d8:	f003 0303 	and.w	r3, r3, #3
 800b0dc:	b2da      	uxtb	r2, r3
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b0e6:	0c1b      	lsrs	r3, r3, #16
 800b0e8:	b2da      	uxtb	r2, r3
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b0f2:	0a1b      	lsrs	r3, r3, #8
 800b0f4:	b2da      	uxtb	r2, r3
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b0fe:	b2da      	uxtb	r2, r3
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b108:	0d1b      	lsrs	r3, r3, #20
 800b10a:	b29a      	uxth	r2, r3
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b114:	0c1b      	lsrs	r3, r3, #16
 800b116:	b2db      	uxtb	r3, r3
 800b118:	f003 030f 	and.w	r3, r3, #15
 800b11c:	b2da      	uxtb	r2, r3
 800b11e:	683b      	ldr	r3, [r7, #0]
 800b120:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b126:	0bdb      	lsrs	r3, r3, #15
 800b128:	b2db      	uxtb	r3, r3
 800b12a:	f003 0301 	and.w	r3, r3, #1
 800b12e:	b2da      	uxtb	r2, r3
 800b130:	683b      	ldr	r3, [r7, #0]
 800b132:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b138:	0b9b      	lsrs	r3, r3, #14
 800b13a:	b2db      	uxtb	r3, r3
 800b13c:	f003 0301 	and.w	r3, r3, #1
 800b140:	b2da      	uxtb	r2, r3
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b14a:	0b5b      	lsrs	r3, r3, #13
 800b14c:	b2db      	uxtb	r3, r3
 800b14e:	f003 0301 	and.w	r3, r3, #1
 800b152:	b2da      	uxtb	r2, r3
 800b154:	683b      	ldr	r3, [r7, #0]
 800b156:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b15c:	0b1b      	lsrs	r3, r3, #12
 800b15e:	b2db      	uxtb	r3, r3
 800b160:	f003 0301 	and.w	r3, r3, #1
 800b164:	b2da      	uxtb	r2, r3
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	2200      	movs	r2, #0
 800b16e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b174:	2b00      	cmp	r3, #0
 800b176:	d163      	bne.n	800b240 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b17c:	009a      	lsls	r2, r3, #2
 800b17e:	f640 73fc 	movw	r3, #4092	; 0xffc
 800b182:	4013      	ands	r3, r2
 800b184:	687a      	ldr	r2, [r7, #4]
 800b186:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800b188:	0f92      	lsrs	r2, r2, #30
 800b18a:	431a      	orrs	r2, r3
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b194:	0edb      	lsrs	r3, r3, #27
 800b196:	b2db      	uxtb	r3, r3
 800b198:	f003 0307 	and.w	r3, r3, #7
 800b19c:	b2da      	uxtb	r2, r3
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b1a6:	0e1b      	lsrs	r3, r3, #24
 800b1a8:	b2db      	uxtb	r3, r3
 800b1aa:	f003 0307 	and.w	r3, r3, #7
 800b1ae:	b2da      	uxtb	r2, r3
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b1b8:	0d5b      	lsrs	r3, r3, #21
 800b1ba:	b2db      	uxtb	r3, r3
 800b1bc:	f003 0307 	and.w	r3, r3, #7
 800b1c0:	b2da      	uxtb	r2, r3
 800b1c2:	683b      	ldr	r3, [r7, #0]
 800b1c4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b1ca:	0c9b      	lsrs	r3, r3, #18
 800b1cc:	b2db      	uxtb	r3, r3
 800b1ce:	f003 0307 	and.w	r3, r3, #7
 800b1d2:	b2da      	uxtb	r2, r3
 800b1d4:	683b      	ldr	r3, [r7, #0]
 800b1d6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b1dc:	0bdb      	lsrs	r3, r3, #15
 800b1de:	b2db      	uxtb	r3, r3
 800b1e0:	f003 0307 	and.w	r3, r3, #7
 800b1e4:	b2da      	uxtb	r2, r3
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800b1ea:	683b      	ldr	r3, [r7, #0]
 800b1ec:	691b      	ldr	r3, [r3, #16]
 800b1ee:	1c5a      	adds	r2, r3, #1
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800b1f4:	683b      	ldr	r3, [r7, #0]
 800b1f6:	7e1b      	ldrb	r3, [r3, #24]
 800b1f8:	b2db      	uxtb	r3, r3
 800b1fa:	f003 0307 	and.w	r3, r3, #7
 800b1fe:	3302      	adds	r3, #2
 800b200:	2201      	movs	r2, #1
 800b202:	fa02 f303 	lsl.w	r3, r2, r3
 800b206:	687a      	ldr	r2, [r7, #4]
 800b208:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800b20a:	fb02 f203 	mul.w	r2, r2, r3
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	7a1b      	ldrb	r3, [r3, #8]
 800b216:	b2db      	uxtb	r3, r3
 800b218:	f003 030f 	and.w	r3, r3, #15
 800b21c:	2201      	movs	r2, #1
 800b21e:	409a      	lsls	r2, r3
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b228:	687a      	ldr	r2, [r7, #4]
 800b22a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800b22c:	0a52      	lsrs	r2, r2, #9
 800b22e:	fb02 f203 	mul.w	r2, r2, r3
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b23c:	659a      	str	r2, [r3, #88]	; 0x58
 800b23e:	e031      	b.n	800b2a4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b244:	2b01      	cmp	r3, #1
 800b246:	d11d      	bne.n	800b284 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b24c:	041b      	lsls	r3, r3, #16
 800b24e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b256:	0c1b      	lsrs	r3, r3, #16
 800b258:	431a      	orrs	r2, r3
 800b25a:	683b      	ldr	r3, [r7, #0]
 800b25c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	691b      	ldr	r3, [r3, #16]
 800b262:	3301      	adds	r3, #1
 800b264:	029a      	lsls	r2, r3, #10
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b278:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	659a      	str	r2, [r3, #88]	; 0x58
 800b282:	e00f      	b.n	800b2a4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	4a58      	ldr	r2, [pc, #352]	; (800b3ec <HAL_SD_GetCardCSD+0x344>)
 800b28a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b290:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	2201      	movs	r2, #1
 800b29c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b2a0:	2301      	movs	r3, #1
 800b2a2:	e09d      	b.n	800b3e0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b2a8:	0b9b      	lsrs	r3, r3, #14
 800b2aa:	b2db      	uxtb	r3, r3
 800b2ac:	f003 0301 	and.w	r3, r3, #1
 800b2b0:	b2da      	uxtb	r2, r3
 800b2b2:	683b      	ldr	r3, [r7, #0]
 800b2b4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b2ba:	09db      	lsrs	r3, r3, #7
 800b2bc:	b2db      	uxtb	r3, r3
 800b2be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2c2:	b2da      	uxtb	r2, r3
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b2cc:	b2db      	uxtb	r3, r3
 800b2ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2d2:	b2da      	uxtb	r2, r3
 800b2d4:	683b      	ldr	r3, [r7, #0]
 800b2d6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2dc:	0fdb      	lsrs	r3, r3, #31
 800b2de:	b2da      	uxtb	r2, r3
 800b2e0:	683b      	ldr	r3, [r7, #0]
 800b2e2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2e8:	0f5b      	lsrs	r3, r3, #29
 800b2ea:	b2db      	uxtb	r3, r3
 800b2ec:	f003 0303 	and.w	r3, r3, #3
 800b2f0:	b2da      	uxtb	r2, r3
 800b2f2:	683b      	ldr	r3, [r7, #0]
 800b2f4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2fa:	0e9b      	lsrs	r3, r3, #26
 800b2fc:	b2db      	uxtb	r3, r3
 800b2fe:	f003 0307 	and.w	r3, r3, #7
 800b302:	b2da      	uxtb	r2, r3
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b30c:	0d9b      	lsrs	r3, r3, #22
 800b30e:	b2db      	uxtb	r3, r3
 800b310:	f003 030f 	and.w	r3, r3, #15
 800b314:	b2da      	uxtb	r2, r3
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b31e:	0d5b      	lsrs	r3, r3, #21
 800b320:	b2db      	uxtb	r3, r3
 800b322:	f003 0301 	and.w	r3, r3, #1
 800b326:	b2da      	uxtb	r2, r3
 800b328:	683b      	ldr	r3, [r7, #0]
 800b32a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800b32e:	683b      	ldr	r3, [r7, #0]
 800b330:	2200      	movs	r2, #0
 800b332:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b33a:	0c1b      	lsrs	r3, r3, #16
 800b33c:	b2db      	uxtb	r3, r3
 800b33e:	f003 0301 	and.w	r3, r3, #1
 800b342:	b2da      	uxtb	r2, r3
 800b344:	683b      	ldr	r3, [r7, #0]
 800b346:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b34e:	0bdb      	lsrs	r3, r3, #15
 800b350:	b2db      	uxtb	r3, r3
 800b352:	f003 0301 	and.w	r3, r3, #1
 800b356:	b2da      	uxtb	r2, r3
 800b358:	683b      	ldr	r3, [r7, #0]
 800b35a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b362:	0b9b      	lsrs	r3, r3, #14
 800b364:	b2db      	uxtb	r3, r3
 800b366:	f003 0301 	and.w	r3, r3, #1
 800b36a:	b2da      	uxtb	r2, r3
 800b36c:	683b      	ldr	r3, [r7, #0]
 800b36e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b376:	0b5b      	lsrs	r3, r3, #13
 800b378:	b2db      	uxtb	r3, r3
 800b37a:	f003 0301 	and.w	r3, r3, #1
 800b37e:	b2da      	uxtb	r2, r3
 800b380:	683b      	ldr	r3, [r7, #0]
 800b382:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b38a:	0b1b      	lsrs	r3, r3, #12
 800b38c:	b2db      	uxtb	r3, r3
 800b38e:	f003 0301 	and.w	r3, r3, #1
 800b392:	b2da      	uxtb	r2, r3
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b39e:	0a9b      	lsrs	r3, r3, #10
 800b3a0:	b2db      	uxtb	r3, r3
 800b3a2:	f003 0303 	and.w	r3, r3, #3
 800b3a6:	b2da      	uxtb	r2, r3
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b3b2:	0a1b      	lsrs	r3, r3, #8
 800b3b4:	b2db      	uxtb	r3, r3
 800b3b6:	f003 0303 	and.w	r3, r3, #3
 800b3ba:	b2da      	uxtb	r2, r3
 800b3bc:	683b      	ldr	r3, [r7, #0]
 800b3be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b3c6:	085b      	lsrs	r3, r3, #1
 800b3c8:	b2db      	uxtb	r3, r3
 800b3ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b3ce:	b2da      	uxtb	r2, r3
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	2201      	movs	r2, #1
 800b3da:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800b3de:	2300      	movs	r3, #0
}
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	370c      	adds	r7, #12
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ea:	4770      	bx	lr
 800b3ec:	1fe00fff 	.word	0x1fe00fff

0800b3f0 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b094      	sub	sp, #80	; 0x50
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
 800b3f8:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800b400:	f107 0308 	add.w	r3, r7, #8
 800b404:	4619      	mov	r1, r3
 800b406:	6878      	ldr	r0, [r7, #4]
 800b408:	f000 fb64 	bl	800bad4 <SD_SendSDStatus>
 800b40c:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800b40e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b410:	2b00      	cmp	r3, #0
 800b412:	d011      	beq.n	800b438 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	4a4f      	ldr	r2, [pc, #316]	; (800b558 <HAL_SD_GetCardStatus+0x168>)
 800b41a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b420:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b422:	431a      	orrs	r2, r3
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2201      	movs	r2, #1
 800b42c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800b430:	2301      	movs	r3, #1
 800b432:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800b436:	e070      	b.n	800b51a <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	099b      	lsrs	r3, r3, #6
 800b43c:	b2db      	uxtb	r3, r3
 800b43e:	f003 0303 	and.w	r3, r3, #3
 800b442:	b2da      	uxtb	r2, r3
 800b444:	683b      	ldr	r3, [r7, #0]
 800b446:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	095b      	lsrs	r3, r3, #5
 800b44c:	b2db      	uxtb	r3, r3
 800b44e:	f003 0301 	and.w	r3, r3, #1
 800b452:	b2da      	uxtb	r2, r3
 800b454:	683b      	ldr	r3, [r7, #0]
 800b456:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800b458:	68bb      	ldr	r3, [r7, #8]
 800b45a:	0a1b      	lsrs	r3, r3, #8
 800b45c:	b29b      	uxth	r3, r3
 800b45e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b462:	b29a      	uxth	r2, r3
 800b464:	68bb      	ldr	r3, [r7, #8]
 800b466:	0e1b      	lsrs	r3, r3, #24
 800b468:	b29b      	uxth	r3, r3
 800b46a:	4313      	orrs	r3, r2
 800b46c:	b29a      	uxth	r2, r3
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	061a      	lsls	r2, r3, #24
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	021b      	lsls	r3, r3, #8
 800b47a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b47e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	0a1b      	lsrs	r3, r3, #8
 800b484:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800b488:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	0e1b      	lsrs	r3, r3, #24
 800b48e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800b494:	693b      	ldr	r3, [r7, #16]
 800b496:	b2da      	uxtb	r2, r3
 800b498:	683b      	ldr	r3, [r7, #0]
 800b49a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800b49c:	693b      	ldr	r3, [r7, #16]
 800b49e:	0a1b      	lsrs	r3, r3, #8
 800b4a0:	b2da      	uxtb	r2, r3
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800b4a6:	693b      	ldr	r3, [r7, #16]
 800b4a8:	0d1b      	lsrs	r3, r3, #20
 800b4aa:	b2db      	uxtb	r3, r3
 800b4ac:	f003 030f 	and.w	r3, r3, #15
 800b4b0:	b2da      	uxtb	r2, r3
 800b4b2:	683b      	ldr	r3, [r7, #0]
 800b4b4:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800b4b6:	693b      	ldr	r3, [r7, #16]
 800b4b8:	0c1b      	lsrs	r3, r3, #16
 800b4ba:	b29b      	uxth	r3, r3
 800b4bc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b4c0:	b29a      	uxth	r2, r3
 800b4c2:	697b      	ldr	r3, [r7, #20]
 800b4c4:	b29b      	uxth	r3, r3
 800b4c6:	b2db      	uxtb	r3, r3
 800b4c8:	b29b      	uxth	r3, r3
 800b4ca:	4313      	orrs	r3, r2
 800b4cc:	b29a      	uxth	r2, r3
 800b4ce:	683b      	ldr	r3, [r7, #0]
 800b4d0:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800b4d2:	697b      	ldr	r3, [r7, #20]
 800b4d4:	0a9b      	lsrs	r3, r3, #10
 800b4d6:	b2db      	uxtb	r3, r3
 800b4d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b4dc:	b2da      	uxtb	r2, r3
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800b4e2:	697b      	ldr	r3, [r7, #20]
 800b4e4:	0a1b      	lsrs	r3, r3, #8
 800b4e6:	b2db      	uxtb	r3, r3
 800b4e8:	f003 0303 	and.w	r3, r3, #3
 800b4ec:	b2da      	uxtb	r2, r3
 800b4ee:	683b      	ldr	r3, [r7, #0]
 800b4f0:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800b4f2:	697b      	ldr	r3, [r7, #20]
 800b4f4:	091b      	lsrs	r3, r3, #4
 800b4f6:	b2db      	uxtb	r3, r3
 800b4f8:	f003 030f 	and.w	r3, r3, #15
 800b4fc:	b2da      	uxtb	r2, r3
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800b502:	697b      	ldr	r3, [r7, #20]
 800b504:	b2db      	uxtb	r3, r3
 800b506:	f003 030f 	and.w	r3, r3, #15
 800b50a:	b2da      	uxtb	r2, r3
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800b510:	69bb      	ldr	r3, [r7, #24]
 800b512:	0e1b      	lsrs	r3, r3, #24
 800b514:	b2da      	uxtb	r2, r3
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b522:	4618      	mov	r0, r3
 800b524:	f002 fa5a 	bl	800d9dc <SDMMC_CmdBlockLength>
 800b528:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800b52a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d00d      	beq.n	800b54c <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	4a08      	ldr	r2, [pc, #32]	; (800b558 <HAL_SD_GetCardStatus+0x168>)
 800b536:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b53c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	2201      	movs	r2, #1
 800b542:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800b546:	2301      	movs	r3, #1
 800b548:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 800b54c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800b550:	4618      	mov	r0, r3
 800b552:	3750      	adds	r7, #80	; 0x50
 800b554:	46bd      	mov	sp, r7
 800b556:	bd80      	pop	{r7, pc}
 800b558:	1fe00fff 	.word	0x1fe00fff

0800b55c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800b55c:	b480      	push	{r7}
 800b55e:	b083      	sub	sp, #12
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
 800b564:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b57a:	683b      	ldr	r3, [r7, #0]
 800b57c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b582:	683b      	ldr	r3, [r7, #0]
 800b584:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b592:	683b      	ldr	r3, [r7, #0]
 800b594:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b59a:	683b      	ldr	r3, [r7, #0]
 800b59c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b5a2:	683b      	ldr	r3, [r7, #0]
 800b5a4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800b5a6:	2300      	movs	r3, #0
}
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	370c      	adds	r7, #12
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b2:	4770      	bx	lr

0800b5b4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800b5b4:	b5b0      	push	{r4, r5, r7, lr}
 800b5b6:	b08e      	sub	sp, #56	; 0x38
 800b5b8:	af04      	add	r7, sp, #16
 800b5ba:	6078      	str	r0, [r7, #4]
 800b5bc:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800b5be:	2300      	movs	r3, #0
 800b5c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2203      	movs	r2, #3
 800b5c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5d0:	2b03      	cmp	r3, #3
 800b5d2:	d02e      	beq.n	800b632 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800b5d4:	683b      	ldr	r3, [r7, #0]
 800b5d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b5da:	d106      	bne.n	800b5ea <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5e0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	639a      	str	r2, [r3, #56]	; 0x38
 800b5e8:	e029      	b.n	800b63e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800b5ea:	683b      	ldr	r3, [r7, #0]
 800b5ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b5f0:	d10a      	bne.n	800b608 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	f000 fb66 	bl	800bcc4 <SD_WideBus_Enable>
 800b5f8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b5fe:	6a3b      	ldr	r3, [r7, #32]
 800b600:	431a      	orrs	r2, r3
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	639a      	str	r2, [r3, #56]	; 0x38
 800b606:	e01a      	b.n	800b63e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d10a      	bne.n	800b624 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800b60e:	6878      	ldr	r0, [r7, #4]
 800b610:	f000 fba3 	bl	800bd5a <SD_WideBus_Disable>
 800b614:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b61a:	6a3b      	ldr	r3, [r7, #32]
 800b61c:	431a      	orrs	r2, r3
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	639a      	str	r2, [r3, #56]	; 0x38
 800b622:	e00c      	b.n	800b63e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b628:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	639a      	str	r2, [r3, #56]	; 0x38
 800b630:	e005      	b.n	800b63e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b636:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b642:	2b00      	cmp	r3, #0
 800b644:	d007      	beq.n	800b656 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	4a2e      	ldr	r2, [pc, #184]	; (800b704 <HAL_SD_ConfigWideBusOperation+0x150>)
 800b64c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800b64e:	2301      	movs	r3, #1
 800b650:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b654:	e034      	b.n	800b6c0 <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	685b      	ldr	r3, [r3, #4]
 800b65a:	60bb      	str	r3, [r7, #8]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	689b      	ldr	r3, [r3, #8]
 800b660:	60fb      	str	r3, [r7, #12]
    Init.BusWide             = WideMode;
 800b662:	683b      	ldr	r3, [r7, #0]
 800b664:	613b      	str	r3, [r7, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	691b      	ldr	r3, [r3, #16]
 800b66a:	617b      	str	r3, [r7, #20]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	695b      	ldr	r3, [r3, #20]
 800b670:	2b03      	cmp	r3, #3
 800b672:	d903      	bls.n	800b67c <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	695b      	ldr	r3, [r3, #20]
 800b678:	61bb      	str	r3, [r7, #24]
 800b67a:	e012      	b.n	800b6a2 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b680:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b684:	d103      	bne.n	800b68e <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	695b      	ldr	r3, [r3, #20]
 800b68a:	61bb      	str	r3, [r7, #24]
 800b68c:	e009      	b.n	800b6a2 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b692:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b696:	d102      	bne.n	800b69e <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 800b698:	2302      	movs	r3, #2
 800b69a:	61bb      	str	r3, [r7, #24]
 800b69c:	e001      	b.n	800b6a2 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 800b69e:	2304      	movs	r3, #4
 800b6a0:	61bb      	str	r3, [r7, #24]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681d      	ldr	r5, [r3, #0]
 800b6a6:	466c      	mov	r4, sp
 800b6a8:	f107 0314 	add.w	r3, r7, #20
 800b6ac:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b6b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b6b4:	f107 0308 	add.w	r3, r7, #8
 800b6b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b6ba:	4628      	mov	r0, r5
 800b6bc:	f002 f8b0 	bl	800d820 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	f002 f987 	bl	800d9dc <SDMMC_CmdBlockLength>
 800b6ce:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b6d0:	6a3b      	ldr	r3, [r7, #32]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d00c      	beq.n	800b6f0 <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	4a0a      	ldr	r2, [pc, #40]	; (800b704 <HAL_SD_ConfigWideBusOperation+0x150>)
 800b6dc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b6e2:	6a3b      	ldr	r3, [r7, #32]
 800b6e4:	431a      	orrs	r2, r3
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800b6ea:	2301      	movs	r3, #1
 800b6ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	2201      	movs	r2, #1
 800b6f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800b6f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	3728      	adds	r7, #40	; 0x28
 800b700:	46bd      	mov	sp, r7
 800b702:	bdb0      	pop	{r4, r5, r7, pc}
 800b704:	1fe00fff 	.word	0x1fe00fff

0800b708 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b086      	sub	sp, #24
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800b710:	2300      	movs	r3, #0
 800b712:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800b714:	f107 030c 	add.w	r3, r7, #12
 800b718:	4619      	mov	r1, r3
 800b71a:	6878      	ldr	r0, [r7, #4]
 800b71c:	f000 faaa 	bl	800bc74 <SD_SendStatus>
 800b720:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b722:	697b      	ldr	r3, [r7, #20]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d005      	beq.n	800b734 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b72c:	697b      	ldr	r3, [r7, #20]
 800b72e:	431a      	orrs	r2, r3
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	0a5b      	lsrs	r3, r3, #9
 800b738:	f003 030f 	and.w	r3, r3, #15
 800b73c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800b73e:	693b      	ldr	r3, [r7, #16]
}
 800b740:	4618      	mov	r0, r3
 800b742:	3718      	adds	r7, #24
 800b744:	46bd      	mov	sp, r7
 800b746:	bd80      	pop	{r7, pc}

0800b748 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b748:	b590      	push	{r4, r7, lr}
 800b74a:	b091      	sub	sp, #68	; 0x44
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800b750:	2301      	movs	r3, #1
 800b752:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	4618      	mov	r0, r3
 800b75a:	f002 f8ba 	bl	800d8d2 <SDMMC_GetPowerState>
 800b75e:	4603      	mov	r3, r0
 800b760:	2b00      	cmp	r3, #0
 800b762:	d102      	bne.n	800b76a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b764:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800b768:	e0a8      	b.n	800b8bc <SD_InitCard+0x174>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b76e:	2b03      	cmp	r3, #3
 800b770:	d02e      	beq.n	800b7d0 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	4618      	mov	r0, r3
 800b778:	f002 fb06 	bl	800dd88 <SDMMC_CmdSendCID>
 800b77c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b77e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b780:	2b00      	cmp	r3, #0
 800b782:	d001      	beq.n	800b788 <SD_InitCard+0x40>
    {
      return errorstate;
 800b784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b786:	e099      	b.n	800b8bc <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	2100      	movs	r1, #0
 800b78e:	4618      	mov	r0, r3
 800b790:	f002 f8e5 	bl	800d95e <SDMMC_GetResponse>
 800b794:	4602      	mov	r2, r0
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	2104      	movs	r1, #4
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	f002 f8dc 	bl	800d95e <SDMMC_GetResponse>
 800b7a6:	4602      	mov	r2, r0
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	2108      	movs	r1, #8
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	f002 f8d3 	bl	800d95e <SDMMC_GetResponse>
 800b7b8:	4602      	mov	r2, r0
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	210c      	movs	r1, #12
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	f002 f8ca 	bl	800d95e <SDMMC_GetResponse>
 800b7ca:	4602      	mov	r2, r0
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7d4:	2b03      	cmp	r3, #3
 800b7d6:	d00d      	beq.n	800b7f4 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	f107 020e 	add.w	r2, r7, #14
 800b7e0:	4611      	mov	r1, r2
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	f002 fb0f 	bl	800de06 <SDMMC_CmdSetRelAdd>
 800b7e8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b7ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d001      	beq.n	800b7f4 <SD_InitCard+0xac>
    {
      return errorstate;
 800b7f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7f2:	e063      	b.n	800b8bc <SD_InitCard+0x174>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7f8:	2b03      	cmp	r3, #3
 800b7fa:	d036      	beq.n	800b86a <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800b7fc:	89fb      	ldrh	r3, [r7, #14]
 800b7fe:	461a      	mov	r2, r3
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681a      	ldr	r2, [r3, #0]
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b80c:	041b      	lsls	r3, r3, #16
 800b80e:	4619      	mov	r1, r3
 800b810:	4610      	mov	r0, r2
 800b812:	f002 fad8 	bl	800ddc6 <SDMMC_CmdSendCSD>
 800b816:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b818:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d001      	beq.n	800b822 <SD_InitCard+0xda>
    {
      return errorstate;
 800b81e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b820:	e04c      	b.n	800b8bc <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	2100      	movs	r1, #0
 800b828:	4618      	mov	r0, r3
 800b82a:	f002 f898 	bl	800d95e <SDMMC_GetResponse>
 800b82e:	4602      	mov	r2, r0
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	2104      	movs	r1, #4
 800b83a:	4618      	mov	r0, r3
 800b83c:	f002 f88f 	bl	800d95e <SDMMC_GetResponse>
 800b840:	4602      	mov	r2, r0
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	2108      	movs	r1, #8
 800b84c:	4618      	mov	r0, r3
 800b84e:	f002 f886 	bl	800d95e <SDMMC_GetResponse>
 800b852:	4602      	mov	r2, r0
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	210c      	movs	r1, #12
 800b85e:	4618      	mov	r0, r3
 800b860:	f002 f87d 	bl	800d95e <SDMMC_GetResponse>
 800b864:	4602      	mov	r2, r0
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	2104      	movs	r1, #4
 800b870:	4618      	mov	r0, r3
 800b872:	f002 f874 	bl	800d95e <SDMMC_GetResponse>
 800b876:	4603      	mov	r3, r0
 800b878:	0d1a      	lsrs	r2, r3, #20
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800b87e:	f107 0310 	add.w	r3, r7, #16
 800b882:	4619      	mov	r1, r3
 800b884:	6878      	ldr	r0, [r7, #4]
 800b886:	f7ff fc0f 	bl	800b0a8 <HAL_SD_GetCardCSD>
 800b88a:	4603      	mov	r3, r0
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d002      	beq.n	800b896 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b890:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b894:	e012      	b.n	800b8bc <SD_InitCard+0x174>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	6819      	ldr	r1, [r3, #0]
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b89e:	041b      	lsls	r3, r3, #16
 800b8a0:	f04f 0400 	mov.w	r4, #0
 800b8a4:	461a      	mov	r2, r3
 800b8a6:	4623      	mov	r3, r4
 800b8a8:	4608      	mov	r0, r1
 800b8aa:	f002 f983 	bl	800dbb4 <SDMMC_CmdSelDesel>
 800b8ae:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800b8b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d001      	beq.n	800b8ba <SD_InitCard+0x172>
  {
    return errorstate;
 800b8b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8b8:	e000      	b.n	800b8bc <SD_InitCard+0x174>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800b8ba:	2300      	movs	r3, #0
}
 800b8bc:	4618      	mov	r0, r3
 800b8be:	3744      	adds	r7, #68	; 0x44
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	bd90      	pop	{r4, r7, pc}

0800b8c4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b088      	sub	sp, #32
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	61fb      	str	r3, [r7, #28]
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 800b8d8:	f7f6 fb14 	bl	8001f04 <HAL_GetTick>
 800b8dc:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	f002 f98a 	bl	800dbfc <SDMMC_CmdGoIdleState>
 800b8e8:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b8ea:	693b      	ldr	r3, [r7, #16]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d001      	beq.n	800b8f4 <SD_PowerON+0x30>
  {
    return errorstate;
 800b8f0:	693b      	ldr	r3, [r7, #16]
 800b8f2:	e0e9      	b.n	800bac8 <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	f002 f99d 	bl	800dc38 <SDMMC_CmdOperCond>
 800b8fe:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b900:	693b      	ldr	r3, [r7, #16]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d00d      	beq.n	800b922 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	2200      	movs	r2, #0
 800b90a:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	4618      	mov	r0, r3
 800b912:	f002 f973 	bl	800dbfc <SDMMC_CmdGoIdleState>
 800b916:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b918:	693b      	ldr	r3, [r7, #16]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d004      	beq.n	800b928 <SD_PowerON+0x64>
    {
      return errorstate;
 800b91e:	693b      	ldr	r3, [r7, #16]
 800b920:	e0d2      	b.n	800bac8 <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	2201      	movs	r2, #1
 800b926:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b92c:	2b01      	cmp	r3, #1
 800b92e:	d137      	bne.n	800b9a0 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	2100      	movs	r1, #0
 800b936:	4618      	mov	r0, r3
 800b938:	f002 f99e 	bl	800dc78 <SDMMC_CmdAppCommand>
 800b93c:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b93e:	693b      	ldr	r3, [r7, #16]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d02d      	beq.n	800b9a0 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b944:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b948:	e0be      	b.n	800bac8 <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	2100      	movs	r1, #0
 800b950:	4618      	mov	r0, r3
 800b952:	f002 f991 	bl	800dc78 <SDMMC_CmdAppCommand>
 800b956:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b958:	693b      	ldr	r3, [r7, #16]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d001      	beq.n	800b962 <SD_PowerON+0x9e>
    {
      return errorstate;
 800b95e:	693b      	ldr	r3, [r7, #16]
 800b960:	e0b2      	b.n	800bac8 <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	495a      	ldr	r1, [pc, #360]	; (800bad0 <SD_PowerON+0x20c>)
 800b968:	4618      	mov	r0, r3
 800b96a:	f002 f9a8 	bl	800dcbe <SDMMC_CmdAppOperCommand>
 800b96e:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b970:	693b      	ldr	r3, [r7, #16]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d002      	beq.n	800b97c <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b976:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b97a:	e0a5      	b.n	800bac8 <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	2100      	movs	r1, #0
 800b982:	4618      	mov	r0, r3
 800b984:	f001 ffeb 	bl	800d95e <SDMMC_GetResponse>
 800b988:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800b98a:	69fb      	ldr	r3, [r7, #28]
 800b98c:	0fdb      	lsrs	r3, r3, #31
 800b98e:	2b01      	cmp	r3, #1
 800b990:	d101      	bne.n	800b996 <SD_PowerON+0xd2>
 800b992:	2301      	movs	r3, #1
 800b994:	e000      	b.n	800b998 <SD_PowerON+0xd4>
 800b996:	2300      	movs	r3, #0
 800b998:	61bb      	str	r3, [r7, #24]

    count++;
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	3301      	adds	r3, #1
 800b99e:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b9a6:	4293      	cmp	r3, r2
 800b9a8:	d802      	bhi.n	800b9b0 <SD_PowerON+0xec>
 800b9aa:	69bb      	ldr	r3, [r7, #24]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d0cc      	beq.n	800b94a <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b9b6:	4293      	cmp	r3, r2
 800b9b8:	d902      	bls.n	800b9c0 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b9ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b9be:	e083      	b.n	800bac8 <SD_PowerON+0x204>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800b9c0:	69fb      	ldr	r3, [r7, #28]
 800b9c2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d07d      	beq.n	800bac6 <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	2201      	movs	r2, #1
 800b9ce:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	699b      	ldr	r3, [r3, #24]
 800b9d4:	2b02      	cmp	r3, #2
 800b9d6:	d176      	bne.n	800bac6 <SD_PowerON+0x202>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800b9d8:	69fb      	ldr	r3, [r7, #28]
 800b9da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d071      	beq.n	800bac6 <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b9e8:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	681a      	ldr	r2, [r3, #0]
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	f042 0208 	orr.w	r2, r2, #8
 800b9f8:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	4618      	mov	r0, r3
 800ba00:	f002 fa68 	bl	800ded4 <SDMMC_CmdVoltageSwitch>
 800ba04:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 800ba06:	693b      	ldr	r3, [r7, #16]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d00c      	beq.n	800ba26 <SD_PowerON+0x162>
        {
          return errorstate;
 800ba0c:	693b      	ldr	r3, [r7, #16]
 800ba0e:	e05b      	b.n	800bac8 <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ba10:	f7f6 fa78 	bl	8001f04 <HAL_GetTick>
 800ba14:	4602      	mov	r2, r0
 800ba16:	697b      	ldr	r3, [r7, #20]
 800ba18:	1ad3      	subs	r3, r2, r3
 800ba1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba1e:	d102      	bne.n	800ba26 <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 800ba20:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ba24:	e050      	b.n	800bac8 <SD_PowerON+0x204>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ba30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ba34:	d1ec      	bne.n	800ba10 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800ba3e:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ba4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ba4e:	d002      	beq.n	800ba56 <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 800ba50:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ba54:	e038      	b.n	800bac8 <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 800ba56:	2001      	movs	r0, #1
 800ba58:	f7ff fb1a 	bl	800b090 <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	681a      	ldr	r2, [r3, #0]
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	f042 0204 	orr.w	r2, r2, #4
 800ba6a:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800ba6c:	e00a      	b.n	800ba84 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ba6e:	f7f6 fa49 	bl	8001f04 <HAL_GetTick>
 800ba72:	4602      	mov	r2, r0
 800ba74:	697b      	ldr	r3, [r7, #20]
 800ba76:	1ad3      	subs	r3, r2, r3
 800ba78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba7c:	d102      	bne.n	800ba84 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 800ba7e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ba82:	e021      	b.n	800bac8 <SD_PowerON+0x204>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ba8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ba92:	d1ec      	bne.n	800ba6e <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800ba9c:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800baa4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800baa8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800baac:	d102      	bne.n	800bab4 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800baae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bab2:	e009      	b.n	800bac8 <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	2213      	movs	r2, #19
 800baba:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	f04f 32ff 	mov.w	r2, #4294967295
 800bac4:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800bac6:	2300      	movs	r3, #0
}
 800bac8:	4618      	mov	r0, r3
 800baca:	3720      	adds	r7, #32
 800bacc:	46bd      	mov	sp, r7
 800bace:	bd80      	pop	{r7, pc}
 800bad0:	c1100000 	.word	0xc1100000

0800bad4 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b08c      	sub	sp, #48	; 0x30
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
 800badc:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800bade:	f7f6 fa11 	bl	8001f04 <HAL_GetTick>
 800bae2:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800bae4:	683b      	ldr	r3, [r7, #0]
 800bae6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	2100      	movs	r1, #0
 800baee:	4618      	mov	r0, r3
 800baf0:	f001 ff35 	bl	800d95e <SDMMC_GetResponse>
 800baf4:	4603      	mov	r3, r0
 800baf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bafa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bafe:	d102      	bne.n	800bb06 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800bb00:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bb04:	e0b0      	b.n	800bc68 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	2140      	movs	r1, #64	; 0x40
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	f001 ff65 	bl	800d9dc <SDMMC_CmdBlockLength>
 800bb12:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bb14:	6a3b      	ldr	r3, [r7, #32]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d005      	beq.n	800bb26 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800bb22:	6a3b      	ldr	r3, [r7, #32]
 800bb24:	e0a0      	b.n	800bc68 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681a      	ldr	r2, [r3, #0]
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bb2e:	041b      	lsls	r3, r3, #16
 800bb30:	4619      	mov	r1, r3
 800bb32:	4610      	mov	r0, r2
 800bb34:	f002 f8a0 	bl	800dc78 <SDMMC_CmdAppCommand>
 800bb38:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bb3a:	6a3b      	ldr	r3, [r7, #32]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d005      	beq.n	800bb4c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800bb48:	6a3b      	ldr	r3, [r7, #32]
 800bb4a:	e08d      	b.n	800bc68 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800bb4c:	f04f 33ff 	mov.w	r3, #4294967295
 800bb50:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800bb52:	2340      	movs	r3, #64	; 0x40
 800bb54:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800bb56:	2360      	movs	r3, #96	; 0x60
 800bb58:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800bb5a:	2302      	movs	r3, #2
 800bb5c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800bb5e:	2300      	movs	r3, #0
 800bb60:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800bb62:	2301      	movs	r3, #1
 800bb64:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	f107 0208 	add.w	r2, r7, #8
 800bb6e:	4611      	mov	r1, r2
 800bb70:	4618      	mov	r0, r3
 800bb72:	f001 ff07 	bl	800d984 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	f002 f988 	bl	800de90 <SDMMC_CmdStatusRegister>
 800bb80:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bb82:	6a3b      	ldr	r3, [r7, #32]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d02b      	beq.n	800bbe0 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800bb90:	6a3b      	ldr	r3, [r7, #32]
 800bb92:	e069      	b.n	800bc68 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d013      	beq.n	800bbca <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 800bba2:	2300      	movs	r3, #0
 800bba4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bba6:	e00d      	b.n	800bbc4 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	4618      	mov	r0, r3
 800bbae:	f001 fe61 	bl	800d874 <SDMMC_ReadFIFO>
 800bbb2:	4602      	mov	r2, r0
 800bbb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbb6:	601a      	str	r2, [r3, #0]
        pData++;
 800bbb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbba:	3304      	adds	r3, #4
 800bbbc:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 800bbbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbc0:	3301      	adds	r3, #1
 800bbc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bbc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbc6:	2b07      	cmp	r3, #7
 800bbc8:	d9ee      	bls.n	800bba8 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800bbca:	f7f6 f99b 	bl	8001f04 <HAL_GetTick>
 800bbce:	4602      	mov	r2, r0
 800bbd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbd2:	1ad3      	subs	r3, r2, r3
 800bbd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbd8:	d102      	bne.n	800bbe0 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800bbda:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bbde:	e043      	b.n	800bc68 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbe6:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d0d2      	beq.n	800bb94 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbf4:	f003 0308 	and.w	r3, r3, #8
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d001      	beq.n	800bc00 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800bbfc:	2308      	movs	r3, #8
 800bbfe:	e033      	b.n	800bc68 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc06:	f003 0302 	and.w	r3, r3, #2
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d001      	beq.n	800bc12 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800bc0e:	2302      	movs	r3, #2
 800bc10:	e02a      	b.n	800bc68 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc18:	f003 0320 	and.w	r3, r3, #32
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d017      	beq.n	800bc50 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800bc20:	2320      	movs	r3, #32
 800bc22:	e021      	b.n	800bc68 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	4618      	mov	r0, r3
 800bc2a:	f001 fe23 	bl	800d874 <SDMMC_ReadFIFO>
 800bc2e:	4602      	mov	r2, r0
 800bc30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc32:	601a      	str	r2, [r3, #0]
    pData++;
 800bc34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc36:	3304      	adds	r3, #4
 800bc38:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800bc3a:	f7f6 f963 	bl	8001f04 <HAL_GetTick>
 800bc3e:	4602      	mov	r2, r0
 800bc40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc42:	1ad3      	subs	r3, r2, r3
 800bc44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc48:	d102      	bne.n	800bc50 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800bc4a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bc4e:	e00b      	b.n	800bc68 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d1e2      	bne.n	800bc24 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	4a03      	ldr	r2, [pc, #12]	; (800bc70 <SD_SendSDStatus+0x19c>)
 800bc64:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800bc66:	2300      	movs	r3, #0
}
 800bc68:	4618      	mov	r0, r3
 800bc6a:	3730      	adds	r7, #48	; 0x30
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	bd80      	pop	{r7, pc}
 800bc70:	18000f3a 	.word	0x18000f3a

0800bc74 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b084      	sub	sp, #16
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
 800bc7c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800bc7e:	683b      	ldr	r3, [r7, #0]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d102      	bne.n	800bc8a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800bc84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bc88:	e018      	b.n	800bcbc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681a      	ldr	r2, [r3, #0]
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc92:	041b      	lsls	r3, r3, #16
 800bc94:	4619      	mov	r1, r3
 800bc96:	4610      	mov	r0, r2
 800bc98:	f002 f8d7 	bl	800de4a <SDMMC_CmdSendStatus>
 800bc9c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d001      	beq.n	800bca8 <SD_SendStatus+0x34>
  {
    return errorstate;
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	e009      	b.n	800bcbc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	2100      	movs	r1, #0
 800bcae:	4618      	mov	r0, r3
 800bcb0:	f001 fe55 	bl	800d95e <SDMMC_GetResponse>
 800bcb4:	4602      	mov	r2, r0
 800bcb6:	683b      	ldr	r3, [r7, #0]
 800bcb8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800bcba:	2300      	movs	r3, #0
}
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	3710      	adds	r7, #16
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	bd80      	pop	{r7, pc}

0800bcc4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b086      	sub	sp, #24
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800bccc:	2300      	movs	r3, #0
 800bcce:	60fb      	str	r3, [r7, #12]
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	2100      	movs	r1, #0
 800bcda:	4618      	mov	r0, r3
 800bcdc:	f001 fe3f 	bl	800d95e <SDMMC_GetResponse>
 800bce0:	4603      	mov	r3, r0
 800bce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bce6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bcea:	d102      	bne.n	800bcf2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800bcec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bcf0:	e02f      	b.n	800bd52 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800bcf2:	f107 030c 	add.w	r3, r7, #12
 800bcf6:	4619      	mov	r1, r3
 800bcf8:	6878      	ldr	r0, [r7, #4]
 800bcfa:	f000 f879 	bl	800bdf0 <SD_FindSCR>
 800bcfe:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bd00:	697b      	ldr	r3, [r7, #20]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d001      	beq.n	800bd0a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800bd06:	697b      	ldr	r3, [r7, #20]
 800bd08:	e023      	b.n	800bd52 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800bd0a:	693b      	ldr	r3, [r7, #16]
 800bd0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d01c      	beq.n	800bd4e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681a      	ldr	r2, [r3, #0]
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd1c:	041b      	lsls	r3, r3, #16
 800bd1e:	4619      	mov	r1, r3
 800bd20:	4610      	mov	r0, r2
 800bd22:	f001 ffa9 	bl	800dc78 <SDMMC_CmdAppCommand>
 800bd26:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bd28:	697b      	ldr	r3, [r7, #20]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d001      	beq.n	800bd32 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800bd2e:	697b      	ldr	r3, [r7, #20]
 800bd30:	e00f      	b.n	800bd52 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	2102      	movs	r1, #2
 800bd38:	4618      	mov	r0, r3
 800bd3a:	f001 ffe0 	bl	800dcfe <SDMMC_CmdBusWidth>
 800bd3e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bd40:	697b      	ldr	r3, [r7, #20]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d001      	beq.n	800bd4a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800bd46:	697b      	ldr	r3, [r7, #20]
 800bd48:	e003      	b.n	800bd52 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	e001      	b.n	800bd52 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800bd4e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800bd52:	4618      	mov	r0, r3
 800bd54:	3718      	adds	r7, #24
 800bd56:	46bd      	mov	sp, r7
 800bd58:	bd80      	pop	{r7, pc}

0800bd5a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800bd5a:	b580      	push	{r7, lr}
 800bd5c:	b086      	sub	sp, #24
 800bd5e:	af00      	add	r7, sp, #0
 800bd60:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800bd62:	2300      	movs	r3, #0
 800bd64:	60fb      	str	r3, [r7, #12]
 800bd66:	2300      	movs	r3, #0
 800bd68:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	2100      	movs	r1, #0
 800bd70:	4618      	mov	r0, r3
 800bd72:	f001 fdf4 	bl	800d95e <SDMMC_GetResponse>
 800bd76:	4603      	mov	r3, r0
 800bd78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bd80:	d102      	bne.n	800bd88 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800bd82:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bd86:	e02f      	b.n	800bde8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800bd88:	f107 030c 	add.w	r3, r7, #12
 800bd8c:	4619      	mov	r1, r3
 800bd8e:	6878      	ldr	r0, [r7, #4]
 800bd90:	f000 f82e 	bl	800bdf0 <SD_FindSCR>
 800bd94:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bd96:	697b      	ldr	r3, [r7, #20]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d001      	beq.n	800bda0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800bd9c:	697b      	ldr	r3, [r7, #20]
 800bd9e:	e023      	b.n	800bde8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800bda0:	693b      	ldr	r3, [r7, #16]
 800bda2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d01c      	beq.n	800bde4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681a      	ldr	r2, [r3, #0]
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bdb2:	041b      	lsls	r3, r3, #16
 800bdb4:	4619      	mov	r1, r3
 800bdb6:	4610      	mov	r0, r2
 800bdb8:	f001 ff5e 	bl	800dc78 <SDMMC_CmdAppCommand>
 800bdbc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bdbe:	697b      	ldr	r3, [r7, #20]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d001      	beq.n	800bdc8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800bdc4:	697b      	ldr	r3, [r7, #20]
 800bdc6:	e00f      	b.n	800bde8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	2100      	movs	r1, #0
 800bdce:	4618      	mov	r0, r3
 800bdd0:	f001 ff95 	bl	800dcfe <SDMMC_CmdBusWidth>
 800bdd4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bdd6:	697b      	ldr	r3, [r7, #20]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d001      	beq.n	800bde0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800bddc:	697b      	ldr	r3, [r7, #20]
 800bdde:	e003      	b.n	800bde8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800bde0:	2300      	movs	r3, #0
 800bde2:	e001      	b.n	800bde8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800bde4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800bde8:	4618      	mov	r0, r3
 800bdea:	3718      	adds	r7, #24
 800bdec:	46bd      	mov	sp, r7
 800bdee:	bd80      	pop	{r7, pc}

0800bdf0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b08e      	sub	sp, #56	; 0x38
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
 800bdf8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800bdfa:	f7f6 f883 	bl	8001f04 <HAL_GetTick>
 800bdfe:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800be00:	2300      	movs	r3, #0
 800be02:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800be04:	2300      	movs	r3, #0
 800be06:	60bb      	str	r3, [r7, #8]
 800be08:	2300      	movs	r3, #0
 800be0a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800be0c:	683b      	ldr	r3, [r7, #0]
 800be0e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	2108      	movs	r1, #8
 800be16:	4618      	mov	r0, r3
 800be18:	f001 fde0 	bl	800d9dc <SDMMC_CmdBlockLength>
 800be1c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800be1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be20:	2b00      	cmp	r3, #0
 800be22:	d001      	beq.n	800be28 <SD_FindSCR+0x38>
  {
    return errorstate;
 800be24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be26:	e0ad      	b.n	800bf84 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681a      	ldr	r2, [r3, #0]
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800be30:	041b      	lsls	r3, r3, #16
 800be32:	4619      	mov	r1, r3
 800be34:	4610      	mov	r0, r2
 800be36:	f001 ff1f 	bl	800dc78 <SDMMC_CmdAppCommand>
 800be3a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800be3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d001      	beq.n	800be46 <SD_FindSCR+0x56>
  {
    return errorstate;
 800be42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be44:	e09e      	b.n	800bf84 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800be46:	f04f 33ff 	mov.w	r3, #4294967295
 800be4a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800be4c:	2308      	movs	r3, #8
 800be4e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800be50:	2330      	movs	r3, #48	; 0x30
 800be52:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800be54:	2302      	movs	r3, #2
 800be56:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800be58:	2300      	movs	r3, #0
 800be5a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800be5c:	2301      	movs	r3, #1
 800be5e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	f107 0210 	add.w	r2, r7, #16
 800be68:	4611      	mov	r1, r2
 800be6a:	4618      	mov	r0, r3
 800be6c:	f001 fd8a 	bl	800d984 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	4618      	mov	r0, r3
 800be76:	f001 ff65 	bl	800dd44 <SDMMC_CmdSendSCR>
 800be7a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800be7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d027      	beq.n	800bed2 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800be82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be84:	e07e      	b.n	800bf84 <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800be90:	2b00      	cmp	r3, #0
 800be92:	d113      	bne.n	800bebc <SD_FindSCR+0xcc>
 800be94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be96:	2b00      	cmp	r3, #0
 800be98:	d110      	bne.n	800bebc <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	4618      	mov	r0, r3
 800bea0:	f001 fce8 	bl	800d874 <SDMMC_ReadFIFO>
 800bea4:	4603      	mov	r3, r0
 800bea6:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	4618      	mov	r0, r3
 800beae:	f001 fce1 	bl	800d874 <SDMMC_ReadFIFO>
 800beb2:	4603      	mov	r3, r0
 800beb4:	60fb      	str	r3, [r7, #12]
      index++;
 800beb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800beb8:	3301      	adds	r3, #1
 800beba:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800bebc:	f7f6 f822 	bl	8001f04 <HAL_GetTick>
 800bec0:	4602      	mov	r2, r0
 800bec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bec4:	1ad3      	subs	r3, r2, r3
 800bec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800beca:	d102      	bne.n	800bed2 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800becc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bed0:	e058      	b.n	800bf84 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bed8:	f240 532a 	movw	r3, #1322	; 0x52a
 800bedc:	4013      	ands	r3, r2
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d0d1      	beq.n	800be86 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bee8:	f003 0308 	and.w	r3, r3, #8
 800beec:	2b00      	cmp	r3, #0
 800beee:	d005      	beq.n	800befc <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	2208      	movs	r2, #8
 800bef6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800bef8:	2308      	movs	r3, #8
 800befa:	e043      	b.n	800bf84 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf02:	f003 0302 	and.w	r3, r3, #2
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d005      	beq.n	800bf16 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	2202      	movs	r2, #2
 800bf10:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800bf12:	2302      	movs	r3, #2
 800bf14:	e036      	b.n	800bf84 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf1c:	f003 0320 	and.w	r3, r3, #32
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d005      	beq.n	800bf30 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	2220      	movs	r2, #32
 800bf2a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800bf2c:	2320      	movs	r3, #32
 800bf2e:	e029      	b.n	800bf84 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	4a15      	ldr	r2, [pc, #84]	; (800bf8c <SD_FindSCR+0x19c>)
 800bf36:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	061a      	lsls	r2, r3, #24
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	021b      	lsls	r3, r3, #8
 800bf40:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bf44:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	0a1b      	lsrs	r3, r3, #8
 800bf4a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800bf4e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	0e1b      	lsrs	r3, r3, #24
 800bf54:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800bf56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf58:	601a      	str	r2, [r3, #0]
    scr++;
 800bf5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf5c:	3304      	adds	r3, #4
 800bf5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800bf60:	68bb      	ldr	r3, [r7, #8]
 800bf62:	061a      	lsls	r2, r3, #24
 800bf64:	68bb      	ldr	r3, [r7, #8]
 800bf66:	021b      	lsls	r3, r3, #8
 800bf68:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bf6c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800bf6e:	68bb      	ldr	r3, [r7, #8]
 800bf70:	0a1b      	lsrs	r3, r3, #8
 800bf72:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800bf76:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800bf78:	68bb      	ldr	r3, [r7, #8]
 800bf7a:	0e1b      	lsrs	r3, r3, #24
 800bf7c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800bf7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf80:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800bf82:	2300      	movs	r3, #0
}
 800bf84:	4618      	mov	r0, r3
 800bf86:	3738      	adds	r7, #56	; 0x38
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	bd80      	pop	{r7, pc}
 800bf8c:	18000f3a 	.word	0x18000f3a

0800bf90 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b086      	sub	sp, #24
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf9c:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfa2:	2b1f      	cmp	r3, #31
 800bfa4:	d936      	bls.n	800c014 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	617b      	str	r3, [r7, #20]
 800bfaa:	e027      	b.n	800bffc <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	f001 fc5f 	bl	800d874 <SDMMC_ReadFIFO>
 800bfb6:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	b2da      	uxtb	r2, r3
 800bfbc:	693b      	ldr	r3, [r7, #16]
 800bfbe:	701a      	strb	r2, [r3, #0]
      tmp++;
 800bfc0:	693b      	ldr	r3, [r7, #16]
 800bfc2:	3301      	adds	r3, #1
 800bfc4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	0a1b      	lsrs	r3, r3, #8
 800bfca:	b2da      	uxtb	r2, r3
 800bfcc:	693b      	ldr	r3, [r7, #16]
 800bfce:	701a      	strb	r2, [r3, #0]
      tmp++;
 800bfd0:	693b      	ldr	r3, [r7, #16]
 800bfd2:	3301      	adds	r3, #1
 800bfd4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	0c1b      	lsrs	r3, r3, #16
 800bfda:	b2da      	uxtb	r2, r3
 800bfdc:	693b      	ldr	r3, [r7, #16]
 800bfde:	701a      	strb	r2, [r3, #0]
      tmp++;
 800bfe0:	693b      	ldr	r3, [r7, #16]
 800bfe2:	3301      	adds	r3, #1
 800bfe4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	0e1b      	lsrs	r3, r3, #24
 800bfea:	b2da      	uxtb	r2, r3
 800bfec:	693b      	ldr	r3, [r7, #16]
 800bfee:	701a      	strb	r2, [r3, #0]
      tmp++;
 800bff0:	693b      	ldr	r3, [r7, #16]
 800bff2:	3301      	adds	r3, #1
 800bff4:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800bff6:	697b      	ldr	r3, [r7, #20]
 800bff8:	3301      	adds	r3, #1
 800bffa:	617b      	str	r3, [r7, #20]
 800bffc:	697b      	ldr	r3, [r7, #20]
 800bffe:	2b07      	cmp	r3, #7
 800c000:	d9d4      	bls.n	800bfac <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	693a      	ldr	r2, [r7, #16]
 800c006:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize -= 32U;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c00c:	f1a3 0220 	sub.w	r2, r3, #32
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800c014:	bf00      	nop
 800c016:	3718      	adds	r7, #24
 800c018:	46bd      	mov	sp, r7
 800c01a:	bd80      	pop	{r7, pc}

0800c01c <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800c01c:	b580      	push	{r7, lr}
 800c01e:	b086      	sub	sp, #24
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	6a1b      	ldr	r3, [r3, #32]
 800c028:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c02e:	2b1f      	cmp	r3, #31
 800c030:	d93a      	bls.n	800c0a8 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800c032:	2300      	movs	r3, #0
 800c034:	617b      	str	r3, [r7, #20]
 800c036:	e02b      	b.n	800c090 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800c038:	693b      	ldr	r3, [r7, #16]
 800c03a:	781b      	ldrb	r3, [r3, #0]
 800c03c:	60fb      	str	r3, [r7, #12]
      tmp++;
 800c03e:	693b      	ldr	r3, [r7, #16]
 800c040:	3301      	adds	r3, #1
 800c042:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800c044:	693b      	ldr	r3, [r7, #16]
 800c046:	781b      	ldrb	r3, [r3, #0]
 800c048:	021a      	lsls	r2, r3, #8
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	4313      	orrs	r3, r2
 800c04e:	60fb      	str	r3, [r7, #12]
      tmp++;
 800c050:	693b      	ldr	r3, [r7, #16]
 800c052:	3301      	adds	r3, #1
 800c054:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800c056:	693b      	ldr	r3, [r7, #16]
 800c058:	781b      	ldrb	r3, [r3, #0]
 800c05a:	041a      	lsls	r2, r3, #16
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	4313      	orrs	r3, r2
 800c060:	60fb      	str	r3, [r7, #12]
      tmp++;
 800c062:	693b      	ldr	r3, [r7, #16]
 800c064:	3301      	adds	r3, #1
 800c066:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800c068:	693b      	ldr	r3, [r7, #16]
 800c06a:	781b      	ldrb	r3, [r3, #0]
 800c06c:	061a      	lsls	r2, r3, #24
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	4313      	orrs	r3, r2
 800c072:	60fb      	str	r3, [r7, #12]
      tmp++;
 800c074:	693b      	ldr	r3, [r7, #16]
 800c076:	3301      	adds	r3, #1
 800c078:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	f107 020c 	add.w	r2, r7, #12
 800c082:	4611      	mov	r1, r2
 800c084:	4618      	mov	r0, r3
 800c086:	f001 fc02 	bl	800d88e <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800c08a:	697b      	ldr	r3, [r7, #20]
 800c08c:	3301      	adds	r3, #1
 800c08e:	617b      	str	r3, [r7, #20]
 800c090:	697b      	ldr	r3, [r7, #20]
 800c092:	2b07      	cmp	r3, #7
 800c094:	d9d0      	bls.n	800c038 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	693a      	ldr	r2, [r7, #16]
 800c09a:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize -= 32U;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0a0:	f1a3 0220 	sub.w	r2, r3, #32
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800c0a8:	bf00      	nop
 800c0aa:	3718      	adds	r7, #24
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	bd80      	pop	{r7, pc}

0800c0b0 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800c0b0:	b480      	push	{r7}
 800c0b2:	b083      	sub	sp, #12
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800c0b8:	bf00      	nop
 800c0ba:	370c      	adds	r7, #12
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c2:	4770      	bx	lr

0800c0c4 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800c0c4:	b480      	push	{r7}
 800c0c6:	b083      	sub	sp, #12
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800c0cc:	bf00      	nop
 800c0ce:	370c      	adds	r7, #12
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d6:	4770      	bx	lr

0800c0d8 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800c0d8:	b480      	push	{r7}
 800c0da:	b083      	sub	sp, #12
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800c0e0:	bf00      	nop
 800c0e2:	370c      	adds	r7, #12
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ea:	4770      	bx	lr

0800c0ec <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800c0ec:	b480      	push	{r7}
 800c0ee:	b083      	sub	sp, #12
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800c0f4:	bf00      	nop
 800c0f6:	370c      	adds	r7, #12
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fe:	4770      	bx	lr

0800c100 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b084      	sub	sp, #16
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 800c108:	2300      	movs	r3, #0
 800c10a:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d101      	bne.n	800c116 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800c112:	2301      	movs	r3, #1
 800c114:	e0e2      	b.n	800c2dc <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	2200      	movs	r2, #0
 800c11a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	4a70      	ldr	r2, [pc, #448]	; (800c2e4 <HAL_SPI_Init+0x1e4>)
 800c122:	4293      	cmp	r3, r2
 800c124:	d00f      	beq.n	800c146 <HAL_SPI_Init+0x46>
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	4a6f      	ldr	r2, [pc, #444]	; (800c2e8 <HAL_SPI_Init+0x1e8>)
 800c12c:	4293      	cmp	r3, r2
 800c12e:	d00a      	beq.n	800c146 <HAL_SPI_Init+0x46>
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	4a6d      	ldr	r2, [pc, #436]	; (800c2ec <HAL_SPI_Init+0x1ec>)
 800c136:	4293      	cmp	r3, r2
 800c138:	d005      	beq.n	800c146 <HAL_SPI_Init+0x46>
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	68db      	ldr	r3, [r3, #12]
 800c13e:	2b0f      	cmp	r3, #15
 800c140:	d901      	bls.n	800c146 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800c142:	2301      	movs	r3, #1
 800c144:	e0ca      	b.n	800c2dc <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800c146:	6878      	ldr	r0, [r7, #4]
 800c148:	f000 f8d2 	bl	800c2f0 <SPI_GetPacketSize>
 800c14c:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	4a64      	ldr	r2, [pc, #400]	; (800c2e4 <HAL_SPI_Init+0x1e4>)
 800c154:	4293      	cmp	r3, r2
 800c156:	d00c      	beq.n	800c172 <HAL_SPI_Init+0x72>
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	4a62      	ldr	r2, [pc, #392]	; (800c2e8 <HAL_SPI_Init+0x1e8>)
 800c15e:	4293      	cmp	r3, r2
 800c160:	d007      	beq.n	800c172 <HAL_SPI_Init+0x72>
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	4a61      	ldr	r2, [pc, #388]	; (800c2ec <HAL_SPI_Init+0x1ec>)
 800c168:	4293      	cmp	r3, r2
 800c16a:	d002      	beq.n	800c172 <HAL_SPI_Init+0x72>
 800c16c:	68bb      	ldr	r3, [r7, #8]
 800c16e:	2b08      	cmp	r3, #8
 800c170:	d811      	bhi.n	800c196 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c176:	4a5b      	ldr	r2, [pc, #364]	; (800c2e4 <HAL_SPI_Init+0x1e4>)
 800c178:	4293      	cmp	r3, r2
 800c17a:	d009      	beq.n	800c190 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	4a59      	ldr	r2, [pc, #356]	; (800c2e8 <HAL_SPI_Init+0x1e8>)
 800c182:	4293      	cmp	r3, r2
 800c184:	d004      	beq.n	800c190 <HAL_SPI_Init+0x90>
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	4a58      	ldr	r2, [pc, #352]	; (800c2ec <HAL_SPI_Init+0x1ec>)
 800c18c:	4293      	cmp	r3, r2
 800c18e:	d104      	bne.n	800c19a <HAL_SPI_Init+0x9a>
 800c190:	68bb      	ldr	r3, [r7, #8]
 800c192:	2b10      	cmp	r3, #16
 800c194:	d901      	bls.n	800c19a <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800c196:	2301      	movs	r3, #1
 800c198:	e0a0      	b.n	800c2dc <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c1a0:	b2db      	uxtb	r3, r3
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d106      	bne.n	800c1b4 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	2200      	movs	r2, #0
 800c1aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c1ae:	6878      	ldr	r0, [r7, #4]
 800c1b0:	f7f5 fb88 	bl	80018c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	2202      	movs	r2, #2
 800c1b8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	681a      	ldr	r2, [r3, #0]
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	f022 0201 	bic.w	r2, r2, #1
 800c1ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	699b      	ldr	r3, [r3, #24]
 800c1d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c1d4:	d110      	bne.n	800c1f8 <HAL_SPI_Init+0xf8>
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	685b      	ldr	r3, [r3, #4]
 800c1da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c1de:	d10b      	bne.n	800c1f8 <HAL_SPI_Init+0xf8>
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d107      	bne.n	800c1f8 <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	681a      	ldr	r2, [r3, #0]
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c1f6:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	69da      	ldr	r2, [r3, #28]
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c200:	431a      	orrs	r2, r3
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	431a      	orrs	r2, r3
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c20a:	ea42 0103 	orr.w	r1, r2, r3
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	68da      	ldr	r2, [r3, #12]
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	430a      	orrs	r2, r1
 800c218:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c222:	431a      	orrs	r2, r3
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c228:	431a      	orrs	r2, r3
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	699b      	ldr	r3, [r3, #24]
 800c22e:	431a      	orrs	r2, r3
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	691b      	ldr	r3, [r3, #16]
 800c234:	431a      	orrs	r2, r3
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	695b      	ldr	r3, [r3, #20]
 800c23a:	431a      	orrs	r2, r3
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	6a1b      	ldr	r3, [r3, #32]
 800c240:	431a      	orrs	r2, r3
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	685b      	ldr	r3, [r3, #4]
 800c246:	431a      	orrs	r2, r3
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c24c:	431a      	orrs	r2, r3
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	689b      	ldr	r3, [r3, #8]
 800c252:	431a      	orrs	r2, r3
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c258:	ea42 0103 	orr.w	r1, r2, r3
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	430a      	orrs	r2, r1
 800c266:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	685b      	ldr	r3, [r3, #4]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d113      	bne.n	800c298 <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	689b      	ldr	r3, [r3, #8]
 800c276:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c282:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	689b      	ldr	r3, [r3, #8]
 800c28a:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c296:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	f022 0201 	bic.w	r2, r2, #1
 800c2a6:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	685b      	ldr	r3, [r3, #4]
 800c2ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d00a      	beq.n	800c2ca <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	68db      	ldr	r3, [r3, #12]
 800c2ba:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	430a      	orrs	r2, r1
 800c2c8:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	2200      	movs	r2, #0
 800c2ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	2201      	movs	r2, #1
 800c2d6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800c2da:	2300      	movs	r3, #0
}
 800c2dc:	4618      	mov	r0, r3
 800c2de:	3710      	adds	r7, #16
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	bd80      	pop	{r7, pc}
 800c2e4:	40013000 	.word	0x40013000
 800c2e8:	40003800 	.word	0x40003800
 800c2ec:	40003c00 	.word	0x40003c00

0800c2f0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800c2f0:	b480      	push	{r7}
 800c2f2:	b085      	sub	sp, #20
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2fc:	095b      	lsrs	r3, r3, #5
 800c2fe:	3301      	adds	r3, #1
 800c300:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	68db      	ldr	r3, [r3, #12]
 800c306:	3301      	adds	r3, #1
 800c308:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c30a:	68bb      	ldr	r3, [r7, #8]
 800c30c:	3307      	adds	r3, #7
 800c30e:	08db      	lsrs	r3, r3, #3
 800c310:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c312:	68bb      	ldr	r3, [r7, #8]
 800c314:	68fa      	ldr	r2, [r7, #12]
 800c316:	fb02 f303 	mul.w	r3, r2, r3
}
 800c31a:	4618      	mov	r0, r3
 800c31c:	3714      	adds	r7, #20
 800c31e:	46bd      	mov	sp, r7
 800c320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c324:	4770      	bx	lr

0800c326 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c326:	b580      	push	{r7, lr}
 800c328:	b082      	sub	sp, #8
 800c32a:	af00      	add	r7, sp, #0
 800c32c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d101      	bne.n	800c338 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c334:	2301      	movs	r3, #1
 800c336:	e042      	b.n	800c3be <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d106      	bne.n	800c350 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	2200      	movs	r2, #0
 800c346:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c34a:	6878      	ldr	r0, [r7, #4]
 800c34c:	f7f5 fb04 	bl	8001958 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	2224      	movs	r2, #36	; 0x24
 800c354:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	681a      	ldr	r2, [r3, #0]
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	f022 0201 	bic.w	r2, r2, #1
 800c366:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c368:	6878      	ldr	r0, [r7, #4]
 800c36a:	f000 f95f 	bl	800c62c <UART_SetConfig>
 800c36e:	4603      	mov	r3, r0
 800c370:	2b01      	cmp	r3, #1
 800c372:	d101      	bne.n	800c378 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c374:	2301      	movs	r3, #1
 800c376:	e022      	b.n	800c3be <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d002      	beq.n	800c386 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c380:	6878      	ldr	r0, [r7, #4]
 800c382:	f000 ff03 	bl	800d18c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	685a      	ldr	r2, [r3, #4]
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c394:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	689a      	ldr	r2, [r3, #8]
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c3a4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	681a      	ldr	r2, [r3, #0]
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	f042 0201 	orr.w	r2, r2, #1
 800c3b4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c3b6:	6878      	ldr	r0, [r7, #4]
 800c3b8:	f000 ff8a 	bl	800d2d0 <UART_CheckIdleState>
 800c3bc:	4603      	mov	r3, r0
}
 800c3be:	4618      	mov	r0, r3
 800c3c0:	3708      	adds	r7, #8
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	bd80      	pop	{r7, pc}

0800c3c6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c3c6:	b580      	push	{r7, lr}
 800c3c8:	b08a      	sub	sp, #40	; 0x28
 800c3ca:	af02      	add	r7, sp, #8
 800c3cc:	60f8      	str	r0, [r7, #12]
 800c3ce:	60b9      	str	r1, [r7, #8]
 800c3d0:	603b      	str	r3, [r7, #0]
 800c3d2:	4613      	mov	r3, r2
 800c3d4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c3dc:	2b20      	cmp	r3, #32
 800c3de:	f040 8083 	bne.w	800c4e8 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800c3e2:	68bb      	ldr	r3, [r7, #8]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d002      	beq.n	800c3ee <HAL_UART_Transmit+0x28>
 800c3e8:	88fb      	ldrh	r3, [r7, #6]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d101      	bne.n	800c3f2 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800c3ee:	2301      	movs	r3, #1
 800c3f0:	e07b      	b.n	800c4ea <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c3f8:	2b01      	cmp	r3, #1
 800c3fa:	d101      	bne.n	800c400 <HAL_UART_Transmit+0x3a>
 800c3fc:	2302      	movs	r3, #2
 800c3fe:	e074      	b.n	800c4ea <HAL_UART_Transmit+0x124>
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	2201      	movs	r2, #1
 800c404:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	2200      	movs	r2, #0
 800c40c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	2221      	movs	r2, #33	; 0x21
 800c414:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800c418:	f7f5 fd74 	bl	8001f04 <HAL_GetTick>
 800c41c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	88fa      	ldrh	r2, [r7, #6]
 800c422:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	88fa      	ldrh	r2, [r7, #6]
 800c42a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	689b      	ldr	r3, [r3, #8]
 800c432:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c436:	d108      	bne.n	800c44a <HAL_UART_Transmit+0x84>
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	691b      	ldr	r3, [r3, #16]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d104      	bne.n	800c44a <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800c440:	2300      	movs	r3, #0
 800c442:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800c444:	68bb      	ldr	r3, [r7, #8]
 800c446:	61bb      	str	r3, [r7, #24]
 800c448:	e003      	b.n	800c452 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800c44a:	68bb      	ldr	r3, [r7, #8]
 800c44c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c44e:	2300      	movs	r3, #0
 800c450:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	2200      	movs	r2, #0
 800c456:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 800c45a:	e02c      	b.n	800c4b6 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c45c:	683b      	ldr	r3, [r7, #0]
 800c45e:	9300      	str	r3, [sp, #0]
 800c460:	697b      	ldr	r3, [r7, #20]
 800c462:	2200      	movs	r2, #0
 800c464:	2180      	movs	r1, #128	; 0x80
 800c466:	68f8      	ldr	r0, [r7, #12]
 800c468:	f000 ff7a 	bl	800d360 <UART_WaitOnFlagUntilTimeout>
 800c46c:	4603      	mov	r3, r0
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d001      	beq.n	800c476 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800c472:	2303      	movs	r3, #3
 800c474:	e039      	b.n	800c4ea <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800c476:	69fb      	ldr	r3, [r7, #28]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d10b      	bne.n	800c494 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c47c:	69bb      	ldr	r3, [r7, #24]
 800c47e:	881b      	ldrh	r3, [r3, #0]
 800c480:	461a      	mov	r2, r3
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c48a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800c48c:	69bb      	ldr	r3, [r7, #24]
 800c48e:	3302      	adds	r3, #2
 800c490:	61bb      	str	r3, [r7, #24]
 800c492:	e007      	b.n	800c4a4 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c494:	69fb      	ldr	r3, [r7, #28]
 800c496:	781a      	ldrb	r2, [r3, #0]
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800c49e:	69fb      	ldr	r3, [r7, #28]
 800c4a0:	3301      	adds	r3, #1
 800c4a2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c4aa:	b29b      	uxth	r3, r3
 800c4ac:	3b01      	subs	r3, #1
 800c4ae:	b29a      	uxth	r2, r3
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c4bc:	b29b      	uxth	r3, r3
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d1cc      	bne.n	800c45c <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c4c2:	683b      	ldr	r3, [r7, #0]
 800c4c4:	9300      	str	r3, [sp, #0]
 800c4c6:	697b      	ldr	r3, [r7, #20]
 800c4c8:	2200      	movs	r2, #0
 800c4ca:	2140      	movs	r1, #64	; 0x40
 800c4cc:	68f8      	ldr	r0, [r7, #12]
 800c4ce:	f000 ff47 	bl	800d360 <UART_WaitOnFlagUntilTimeout>
 800c4d2:	4603      	mov	r3, r0
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d001      	beq.n	800c4dc <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800c4d8:	2303      	movs	r3, #3
 800c4da:	e006      	b.n	800c4ea <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	2220      	movs	r2, #32
 800c4e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	e000      	b.n	800c4ea <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800c4e8:	2302      	movs	r3, #2
  }
}
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	3720      	adds	r7, #32
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	bd80      	pop	{r7, pc}
	...

0800c4f4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	b084      	sub	sp, #16
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	60f8      	str	r0, [r7, #12]
 800c4fc:	60b9      	str	r1, [r7, #8]
 800c4fe:	4613      	mov	r3, r2
 800c500:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c508:	2b20      	cmp	r3, #32
 800c50a:	d170      	bne.n	800c5ee <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 800c50c:	68bb      	ldr	r3, [r7, #8]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d002      	beq.n	800c518 <HAL_UART_Receive_DMA+0x24>
 800c512:	88fb      	ldrh	r3, [r7, #6]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d101      	bne.n	800c51c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800c518:	2301      	movs	r3, #1
 800c51a:	e069      	b.n	800c5f0 <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c522:	2b01      	cmp	r3, #1
 800c524:	d101      	bne.n	800c52a <HAL_UART_Receive_DMA+0x36>
 800c526:	2302      	movs	r3, #2
 800c528:	e062      	b.n	800c5f0 <HAL_UART_Receive_DMA+0xfc>
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	2201      	movs	r2, #1
 800c52e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	68ba      	ldr	r2, [r7, #8]
 800c536:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	88fa      	ldrh	r2, [r7, #6]
 800c53c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	2200      	movs	r2, #0
 800c544:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	2222      	movs	r2, #34	; 0x22
 800c54c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c554:	2b00      	cmp	r3, #0
 800c556:	d02c      	beq.n	800c5b2 <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c55c:	4a26      	ldr	r2, [pc, #152]	; (800c5f8 <HAL_UART_Receive_DMA+0x104>)
 800c55e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c564:	4a25      	ldr	r2, [pc, #148]	; (800c5fc <HAL_UART_Receive_DMA+0x108>)
 800c566:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c56c:	4a24      	ldr	r2, [pc, #144]	; (800c600 <HAL_UART_Receive_DMA+0x10c>)
 800c56e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c574:	2200      	movs	r2, #0
 800c576:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	3324      	adds	r3, #36	; 0x24
 800c582:	4619      	mov	r1, r3
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c588:	461a      	mov	r2, r3
 800c58a:	88fb      	ldrh	r3, [r7, #6]
 800c58c:	f7f6 f960 	bl	8002850 <HAL_DMA_Start_IT>
 800c590:	4603      	mov	r3, r0
 800c592:	2b00      	cmp	r3, #0
 800c594:	d00d      	beq.n	800c5b2 <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	2210      	movs	r2, #16
 800c59a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	2220      	movs	r2, #32
 800c5aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 800c5ae:	2301      	movs	r3, #1
 800c5b0:	e01e      	b.n	800c5f0 <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	681a      	ldr	r2, [r3, #0]
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c5c8:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	689a      	ldr	r2, [r3, #8]
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	f042 0201 	orr.w	r2, r2, #1
 800c5d8:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	689a      	ldr	r2, [r3, #8]
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c5e8:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	e000      	b.n	800c5f0 <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 800c5ee:	2302      	movs	r3, #2
  }
}
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	3710      	adds	r7, #16
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	bd80      	pop	{r7, pc}
 800c5f8:	0800d4e5 	.word	0x0800d4e5
 800c5fc:	0800d54b 	.word	0x0800d54b
 800c600:	0800d567 	.word	0x0800d567

0800c604 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c604:	b480      	push	{r7}
 800c606:	b083      	sub	sp, #12
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c60c:	bf00      	nop
 800c60e:	370c      	adds	r7, #12
 800c610:	46bd      	mov	sp, r7
 800c612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c616:	4770      	bx	lr

0800c618 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c618:	b480      	push	{r7}
 800c61a:	b083      	sub	sp, #12
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c620:	bf00      	nop
 800c622:	370c      	adds	r7, #12
 800c624:	46bd      	mov	sp, r7
 800c626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62a:	4770      	bx	lr

0800c62c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c62c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800c630:	b08e      	sub	sp, #56	; 0x38
 800c632:	af00      	add	r7, sp, #0
 800c634:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c636:	2300      	movs	r3, #0
 800c638:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	689a      	ldr	r2, [r3, #8]
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	691b      	ldr	r3, [r3, #16]
 800c644:	431a      	orrs	r2, r3
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	695b      	ldr	r3, [r3, #20]
 800c64a:	431a      	orrs	r2, r3
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	69db      	ldr	r3, [r3, #28]
 800c650:	4313      	orrs	r3, r2
 800c652:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c658:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c65a:	4313      	orrs	r3, r2
 800c65c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	681a      	ldr	r2, [r3, #0]
 800c664:	4bc1      	ldr	r3, [pc, #772]	; (800c96c <UART_SetConfig+0x340>)
 800c666:	4013      	ands	r3, r2
 800c668:	687a      	ldr	r2, [r7, #4]
 800c66a:	6812      	ldr	r2, [r2, #0]
 800c66c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c66e:	430b      	orrs	r3, r1
 800c670:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	685b      	ldr	r3, [r3, #4]
 800c678:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	68da      	ldr	r2, [r3, #12]
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	430a      	orrs	r2, r1
 800c686:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	699b      	ldr	r3, [r3, #24]
 800c68c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	4ab7      	ldr	r2, [pc, #732]	; (800c970 <UART_SetConfig+0x344>)
 800c694:	4293      	cmp	r3, r2
 800c696:	d004      	beq.n	800c6a2 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	6a1b      	ldr	r3, [r3, #32]
 800c69c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c69e:	4313      	orrs	r3, r2
 800c6a0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	689a      	ldr	r2, [r3, #8]
 800c6a8:	4bb2      	ldr	r3, [pc, #712]	; (800c974 <UART_SetConfig+0x348>)
 800c6aa:	4013      	ands	r3, r2
 800c6ac:	687a      	ldr	r2, [r7, #4]
 800c6ae:	6812      	ldr	r2, [r2, #0]
 800c6b0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c6b2:	430b      	orrs	r3, r1
 800c6b4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6bc:	f023 010f 	bic.w	r1, r3, #15
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	430a      	orrs	r2, r1
 800c6ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	4aa9      	ldr	r2, [pc, #676]	; (800c978 <UART_SetConfig+0x34c>)
 800c6d2:	4293      	cmp	r3, r2
 800c6d4:	d177      	bne.n	800c7c6 <UART_SetConfig+0x19a>
 800c6d6:	4ba9      	ldr	r3, [pc, #676]	; (800c97c <UART_SetConfig+0x350>)
 800c6d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c6da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c6de:	2b28      	cmp	r3, #40	; 0x28
 800c6e0:	d86c      	bhi.n	800c7bc <UART_SetConfig+0x190>
 800c6e2:	a201      	add	r2, pc, #4	; (adr r2, 800c6e8 <UART_SetConfig+0xbc>)
 800c6e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6e8:	0800c78d 	.word	0x0800c78d
 800c6ec:	0800c7bd 	.word	0x0800c7bd
 800c6f0:	0800c7bd 	.word	0x0800c7bd
 800c6f4:	0800c7bd 	.word	0x0800c7bd
 800c6f8:	0800c7bd 	.word	0x0800c7bd
 800c6fc:	0800c7bd 	.word	0x0800c7bd
 800c700:	0800c7bd 	.word	0x0800c7bd
 800c704:	0800c7bd 	.word	0x0800c7bd
 800c708:	0800c795 	.word	0x0800c795
 800c70c:	0800c7bd 	.word	0x0800c7bd
 800c710:	0800c7bd 	.word	0x0800c7bd
 800c714:	0800c7bd 	.word	0x0800c7bd
 800c718:	0800c7bd 	.word	0x0800c7bd
 800c71c:	0800c7bd 	.word	0x0800c7bd
 800c720:	0800c7bd 	.word	0x0800c7bd
 800c724:	0800c7bd 	.word	0x0800c7bd
 800c728:	0800c79d 	.word	0x0800c79d
 800c72c:	0800c7bd 	.word	0x0800c7bd
 800c730:	0800c7bd 	.word	0x0800c7bd
 800c734:	0800c7bd 	.word	0x0800c7bd
 800c738:	0800c7bd 	.word	0x0800c7bd
 800c73c:	0800c7bd 	.word	0x0800c7bd
 800c740:	0800c7bd 	.word	0x0800c7bd
 800c744:	0800c7bd 	.word	0x0800c7bd
 800c748:	0800c7a5 	.word	0x0800c7a5
 800c74c:	0800c7bd 	.word	0x0800c7bd
 800c750:	0800c7bd 	.word	0x0800c7bd
 800c754:	0800c7bd 	.word	0x0800c7bd
 800c758:	0800c7bd 	.word	0x0800c7bd
 800c75c:	0800c7bd 	.word	0x0800c7bd
 800c760:	0800c7bd 	.word	0x0800c7bd
 800c764:	0800c7bd 	.word	0x0800c7bd
 800c768:	0800c7ad 	.word	0x0800c7ad
 800c76c:	0800c7bd 	.word	0x0800c7bd
 800c770:	0800c7bd 	.word	0x0800c7bd
 800c774:	0800c7bd 	.word	0x0800c7bd
 800c778:	0800c7bd 	.word	0x0800c7bd
 800c77c:	0800c7bd 	.word	0x0800c7bd
 800c780:	0800c7bd 	.word	0x0800c7bd
 800c784:	0800c7bd 	.word	0x0800c7bd
 800c788:	0800c7b5 	.word	0x0800c7b5
 800c78c:	2301      	movs	r3, #1
 800c78e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c792:	e233      	b.n	800cbfc <UART_SetConfig+0x5d0>
 800c794:	2304      	movs	r3, #4
 800c796:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c79a:	e22f      	b.n	800cbfc <UART_SetConfig+0x5d0>
 800c79c:	2308      	movs	r3, #8
 800c79e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c7a2:	e22b      	b.n	800cbfc <UART_SetConfig+0x5d0>
 800c7a4:	2310      	movs	r3, #16
 800c7a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c7aa:	e227      	b.n	800cbfc <UART_SetConfig+0x5d0>
 800c7ac:	2320      	movs	r3, #32
 800c7ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c7b2:	e223      	b.n	800cbfc <UART_SetConfig+0x5d0>
 800c7b4:	2340      	movs	r3, #64	; 0x40
 800c7b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c7ba:	e21f      	b.n	800cbfc <UART_SetConfig+0x5d0>
 800c7bc:	2380      	movs	r3, #128	; 0x80
 800c7be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c7c2:	bf00      	nop
 800c7c4:	e21a      	b.n	800cbfc <UART_SetConfig+0x5d0>
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	4a6d      	ldr	r2, [pc, #436]	; (800c980 <UART_SetConfig+0x354>)
 800c7cc:	4293      	cmp	r3, r2
 800c7ce:	d132      	bne.n	800c836 <UART_SetConfig+0x20a>
 800c7d0:	4b6a      	ldr	r3, [pc, #424]	; (800c97c <UART_SetConfig+0x350>)
 800c7d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c7d4:	f003 0307 	and.w	r3, r3, #7
 800c7d8:	2b05      	cmp	r3, #5
 800c7da:	d827      	bhi.n	800c82c <UART_SetConfig+0x200>
 800c7dc:	a201      	add	r2, pc, #4	; (adr r2, 800c7e4 <UART_SetConfig+0x1b8>)
 800c7de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7e2:	bf00      	nop
 800c7e4:	0800c7fd 	.word	0x0800c7fd
 800c7e8:	0800c805 	.word	0x0800c805
 800c7ec:	0800c80d 	.word	0x0800c80d
 800c7f0:	0800c815 	.word	0x0800c815
 800c7f4:	0800c81d 	.word	0x0800c81d
 800c7f8:	0800c825 	.word	0x0800c825
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c802:	e1fb      	b.n	800cbfc <UART_SetConfig+0x5d0>
 800c804:	2304      	movs	r3, #4
 800c806:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c80a:	e1f7      	b.n	800cbfc <UART_SetConfig+0x5d0>
 800c80c:	2308      	movs	r3, #8
 800c80e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c812:	e1f3      	b.n	800cbfc <UART_SetConfig+0x5d0>
 800c814:	2310      	movs	r3, #16
 800c816:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c81a:	e1ef      	b.n	800cbfc <UART_SetConfig+0x5d0>
 800c81c:	2320      	movs	r3, #32
 800c81e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c822:	e1eb      	b.n	800cbfc <UART_SetConfig+0x5d0>
 800c824:	2340      	movs	r3, #64	; 0x40
 800c826:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c82a:	e1e7      	b.n	800cbfc <UART_SetConfig+0x5d0>
 800c82c:	2380      	movs	r3, #128	; 0x80
 800c82e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c832:	bf00      	nop
 800c834:	e1e2      	b.n	800cbfc <UART_SetConfig+0x5d0>
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	4a52      	ldr	r2, [pc, #328]	; (800c984 <UART_SetConfig+0x358>)
 800c83c:	4293      	cmp	r3, r2
 800c83e:	d132      	bne.n	800c8a6 <UART_SetConfig+0x27a>
 800c840:	4b4e      	ldr	r3, [pc, #312]	; (800c97c <UART_SetConfig+0x350>)
 800c842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c844:	f003 0307 	and.w	r3, r3, #7
 800c848:	2b05      	cmp	r3, #5
 800c84a:	d827      	bhi.n	800c89c <UART_SetConfig+0x270>
 800c84c:	a201      	add	r2, pc, #4	; (adr r2, 800c854 <UART_SetConfig+0x228>)
 800c84e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c852:	bf00      	nop
 800c854:	0800c86d 	.word	0x0800c86d
 800c858:	0800c875 	.word	0x0800c875
 800c85c:	0800c87d 	.word	0x0800c87d
 800c860:	0800c885 	.word	0x0800c885
 800c864:	0800c88d 	.word	0x0800c88d
 800c868:	0800c895 	.word	0x0800c895
 800c86c:	2300      	movs	r3, #0
 800c86e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c872:	e1c3      	b.n	800cbfc <UART_SetConfig+0x5d0>
 800c874:	2304      	movs	r3, #4
 800c876:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c87a:	e1bf      	b.n	800cbfc <UART_SetConfig+0x5d0>
 800c87c:	2308      	movs	r3, #8
 800c87e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c882:	e1bb      	b.n	800cbfc <UART_SetConfig+0x5d0>
 800c884:	2310      	movs	r3, #16
 800c886:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c88a:	e1b7      	b.n	800cbfc <UART_SetConfig+0x5d0>
 800c88c:	2320      	movs	r3, #32
 800c88e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c892:	e1b3      	b.n	800cbfc <UART_SetConfig+0x5d0>
 800c894:	2340      	movs	r3, #64	; 0x40
 800c896:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c89a:	e1af      	b.n	800cbfc <UART_SetConfig+0x5d0>
 800c89c:	2380      	movs	r3, #128	; 0x80
 800c89e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8a2:	bf00      	nop
 800c8a4:	e1aa      	b.n	800cbfc <UART_SetConfig+0x5d0>
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	4a37      	ldr	r2, [pc, #220]	; (800c988 <UART_SetConfig+0x35c>)
 800c8ac:	4293      	cmp	r3, r2
 800c8ae:	d132      	bne.n	800c916 <UART_SetConfig+0x2ea>
 800c8b0:	4b32      	ldr	r3, [pc, #200]	; (800c97c <UART_SetConfig+0x350>)
 800c8b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8b4:	f003 0307 	and.w	r3, r3, #7
 800c8b8:	2b05      	cmp	r3, #5
 800c8ba:	d827      	bhi.n	800c90c <UART_SetConfig+0x2e0>
 800c8bc:	a201      	add	r2, pc, #4	; (adr r2, 800c8c4 <UART_SetConfig+0x298>)
 800c8be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8c2:	bf00      	nop
 800c8c4:	0800c8dd 	.word	0x0800c8dd
 800c8c8:	0800c8e5 	.word	0x0800c8e5
 800c8cc:	0800c8ed 	.word	0x0800c8ed
 800c8d0:	0800c8f5 	.word	0x0800c8f5
 800c8d4:	0800c8fd 	.word	0x0800c8fd
 800c8d8:	0800c905 	.word	0x0800c905
 800c8dc:	2300      	movs	r3, #0
 800c8de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8e2:	e18b      	b.n	800cbfc <UART_SetConfig+0x5d0>
 800c8e4:	2304      	movs	r3, #4
 800c8e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8ea:	e187      	b.n	800cbfc <UART_SetConfig+0x5d0>
 800c8ec:	2308      	movs	r3, #8
 800c8ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8f2:	e183      	b.n	800cbfc <UART_SetConfig+0x5d0>
 800c8f4:	2310      	movs	r3, #16
 800c8f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8fa:	e17f      	b.n	800cbfc <UART_SetConfig+0x5d0>
 800c8fc:	2320      	movs	r3, #32
 800c8fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c902:	e17b      	b.n	800cbfc <UART_SetConfig+0x5d0>
 800c904:	2340      	movs	r3, #64	; 0x40
 800c906:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c90a:	e177      	b.n	800cbfc <UART_SetConfig+0x5d0>
 800c90c:	2380      	movs	r3, #128	; 0x80
 800c90e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c912:	bf00      	nop
 800c914:	e172      	b.n	800cbfc <UART_SetConfig+0x5d0>
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	4a1c      	ldr	r2, [pc, #112]	; (800c98c <UART_SetConfig+0x360>)
 800c91c:	4293      	cmp	r3, r2
 800c91e:	d144      	bne.n	800c9aa <UART_SetConfig+0x37e>
 800c920:	4b16      	ldr	r3, [pc, #88]	; (800c97c <UART_SetConfig+0x350>)
 800c922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c924:	f003 0307 	and.w	r3, r3, #7
 800c928:	2b05      	cmp	r3, #5
 800c92a:	d839      	bhi.n	800c9a0 <UART_SetConfig+0x374>
 800c92c:	a201      	add	r2, pc, #4	; (adr r2, 800c934 <UART_SetConfig+0x308>)
 800c92e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c932:	bf00      	nop
 800c934:	0800c94d 	.word	0x0800c94d
 800c938:	0800c955 	.word	0x0800c955
 800c93c:	0800c95d 	.word	0x0800c95d
 800c940:	0800c965 	.word	0x0800c965
 800c944:	0800c991 	.word	0x0800c991
 800c948:	0800c999 	.word	0x0800c999
 800c94c:	2300      	movs	r3, #0
 800c94e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c952:	e153      	b.n	800cbfc <UART_SetConfig+0x5d0>
 800c954:	2304      	movs	r3, #4
 800c956:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c95a:	e14f      	b.n	800cbfc <UART_SetConfig+0x5d0>
 800c95c:	2308      	movs	r3, #8
 800c95e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c962:	e14b      	b.n	800cbfc <UART_SetConfig+0x5d0>
 800c964:	2310      	movs	r3, #16
 800c966:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c96a:	e147      	b.n	800cbfc <UART_SetConfig+0x5d0>
 800c96c:	cfff69f3 	.word	0xcfff69f3
 800c970:	58000c00 	.word	0x58000c00
 800c974:	11fff4ff 	.word	0x11fff4ff
 800c978:	40011000 	.word	0x40011000
 800c97c:	58024400 	.word	0x58024400
 800c980:	40004400 	.word	0x40004400
 800c984:	40004800 	.word	0x40004800
 800c988:	40004c00 	.word	0x40004c00
 800c98c:	40005000 	.word	0x40005000
 800c990:	2320      	movs	r3, #32
 800c992:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c996:	e131      	b.n	800cbfc <UART_SetConfig+0x5d0>
 800c998:	2340      	movs	r3, #64	; 0x40
 800c99a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c99e:	e12d      	b.n	800cbfc <UART_SetConfig+0x5d0>
 800c9a0:	2380      	movs	r3, #128	; 0x80
 800c9a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9a6:	bf00      	nop
 800c9a8:	e128      	b.n	800cbfc <UART_SetConfig+0x5d0>
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	4ab6      	ldr	r2, [pc, #728]	; (800cc88 <UART_SetConfig+0x65c>)
 800c9b0:	4293      	cmp	r3, r2
 800c9b2:	d178      	bne.n	800caa6 <UART_SetConfig+0x47a>
 800c9b4:	4bb5      	ldr	r3, [pc, #724]	; (800cc8c <UART_SetConfig+0x660>)
 800c9b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c9b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c9bc:	2b28      	cmp	r3, #40	; 0x28
 800c9be:	d86d      	bhi.n	800ca9c <UART_SetConfig+0x470>
 800c9c0:	a201      	add	r2, pc, #4	; (adr r2, 800c9c8 <UART_SetConfig+0x39c>)
 800c9c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9c6:	bf00      	nop
 800c9c8:	0800ca6d 	.word	0x0800ca6d
 800c9cc:	0800ca9d 	.word	0x0800ca9d
 800c9d0:	0800ca9d 	.word	0x0800ca9d
 800c9d4:	0800ca9d 	.word	0x0800ca9d
 800c9d8:	0800ca9d 	.word	0x0800ca9d
 800c9dc:	0800ca9d 	.word	0x0800ca9d
 800c9e0:	0800ca9d 	.word	0x0800ca9d
 800c9e4:	0800ca9d 	.word	0x0800ca9d
 800c9e8:	0800ca75 	.word	0x0800ca75
 800c9ec:	0800ca9d 	.word	0x0800ca9d
 800c9f0:	0800ca9d 	.word	0x0800ca9d
 800c9f4:	0800ca9d 	.word	0x0800ca9d
 800c9f8:	0800ca9d 	.word	0x0800ca9d
 800c9fc:	0800ca9d 	.word	0x0800ca9d
 800ca00:	0800ca9d 	.word	0x0800ca9d
 800ca04:	0800ca9d 	.word	0x0800ca9d
 800ca08:	0800ca7d 	.word	0x0800ca7d
 800ca0c:	0800ca9d 	.word	0x0800ca9d
 800ca10:	0800ca9d 	.word	0x0800ca9d
 800ca14:	0800ca9d 	.word	0x0800ca9d
 800ca18:	0800ca9d 	.word	0x0800ca9d
 800ca1c:	0800ca9d 	.word	0x0800ca9d
 800ca20:	0800ca9d 	.word	0x0800ca9d
 800ca24:	0800ca9d 	.word	0x0800ca9d
 800ca28:	0800ca85 	.word	0x0800ca85
 800ca2c:	0800ca9d 	.word	0x0800ca9d
 800ca30:	0800ca9d 	.word	0x0800ca9d
 800ca34:	0800ca9d 	.word	0x0800ca9d
 800ca38:	0800ca9d 	.word	0x0800ca9d
 800ca3c:	0800ca9d 	.word	0x0800ca9d
 800ca40:	0800ca9d 	.word	0x0800ca9d
 800ca44:	0800ca9d 	.word	0x0800ca9d
 800ca48:	0800ca8d 	.word	0x0800ca8d
 800ca4c:	0800ca9d 	.word	0x0800ca9d
 800ca50:	0800ca9d 	.word	0x0800ca9d
 800ca54:	0800ca9d 	.word	0x0800ca9d
 800ca58:	0800ca9d 	.word	0x0800ca9d
 800ca5c:	0800ca9d 	.word	0x0800ca9d
 800ca60:	0800ca9d 	.word	0x0800ca9d
 800ca64:	0800ca9d 	.word	0x0800ca9d
 800ca68:	0800ca95 	.word	0x0800ca95
 800ca6c:	2301      	movs	r3, #1
 800ca6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca72:	e0c3      	b.n	800cbfc <UART_SetConfig+0x5d0>
 800ca74:	2304      	movs	r3, #4
 800ca76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca7a:	e0bf      	b.n	800cbfc <UART_SetConfig+0x5d0>
 800ca7c:	2308      	movs	r3, #8
 800ca7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca82:	e0bb      	b.n	800cbfc <UART_SetConfig+0x5d0>
 800ca84:	2310      	movs	r3, #16
 800ca86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca8a:	e0b7      	b.n	800cbfc <UART_SetConfig+0x5d0>
 800ca8c:	2320      	movs	r3, #32
 800ca8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca92:	e0b3      	b.n	800cbfc <UART_SetConfig+0x5d0>
 800ca94:	2340      	movs	r3, #64	; 0x40
 800ca96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca9a:	e0af      	b.n	800cbfc <UART_SetConfig+0x5d0>
 800ca9c:	2380      	movs	r3, #128	; 0x80
 800ca9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800caa2:	bf00      	nop
 800caa4:	e0aa      	b.n	800cbfc <UART_SetConfig+0x5d0>
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	4a79      	ldr	r2, [pc, #484]	; (800cc90 <UART_SetConfig+0x664>)
 800caac:	4293      	cmp	r3, r2
 800caae:	d132      	bne.n	800cb16 <UART_SetConfig+0x4ea>
 800cab0:	4b76      	ldr	r3, [pc, #472]	; (800cc8c <UART_SetConfig+0x660>)
 800cab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cab4:	f003 0307 	and.w	r3, r3, #7
 800cab8:	2b05      	cmp	r3, #5
 800caba:	d827      	bhi.n	800cb0c <UART_SetConfig+0x4e0>
 800cabc:	a201      	add	r2, pc, #4	; (adr r2, 800cac4 <UART_SetConfig+0x498>)
 800cabe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cac2:	bf00      	nop
 800cac4:	0800cadd 	.word	0x0800cadd
 800cac8:	0800cae5 	.word	0x0800cae5
 800cacc:	0800caed 	.word	0x0800caed
 800cad0:	0800caf5 	.word	0x0800caf5
 800cad4:	0800cafd 	.word	0x0800cafd
 800cad8:	0800cb05 	.word	0x0800cb05
 800cadc:	2300      	movs	r3, #0
 800cade:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cae2:	e08b      	b.n	800cbfc <UART_SetConfig+0x5d0>
 800cae4:	2304      	movs	r3, #4
 800cae6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800caea:	e087      	b.n	800cbfc <UART_SetConfig+0x5d0>
 800caec:	2308      	movs	r3, #8
 800caee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800caf2:	e083      	b.n	800cbfc <UART_SetConfig+0x5d0>
 800caf4:	2310      	movs	r3, #16
 800caf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cafa:	e07f      	b.n	800cbfc <UART_SetConfig+0x5d0>
 800cafc:	2320      	movs	r3, #32
 800cafe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb02:	e07b      	b.n	800cbfc <UART_SetConfig+0x5d0>
 800cb04:	2340      	movs	r3, #64	; 0x40
 800cb06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb0a:	e077      	b.n	800cbfc <UART_SetConfig+0x5d0>
 800cb0c:	2380      	movs	r3, #128	; 0x80
 800cb0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb12:	bf00      	nop
 800cb14:	e072      	b.n	800cbfc <UART_SetConfig+0x5d0>
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	4a5e      	ldr	r2, [pc, #376]	; (800cc94 <UART_SetConfig+0x668>)
 800cb1c:	4293      	cmp	r3, r2
 800cb1e:	d132      	bne.n	800cb86 <UART_SetConfig+0x55a>
 800cb20:	4b5a      	ldr	r3, [pc, #360]	; (800cc8c <UART_SetConfig+0x660>)
 800cb22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb24:	f003 0307 	and.w	r3, r3, #7
 800cb28:	2b05      	cmp	r3, #5
 800cb2a:	d827      	bhi.n	800cb7c <UART_SetConfig+0x550>
 800cb2c:	a201      	add	r2, pc, #4	; (adr r2, 800cb34 <UART_SetConfig+0x508>)
 800cb2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb32:	bf00      	nop
 800cb34:	0800cb4d 	.word	0x0800cb4d
 800cb38:	0800cb55 	.word	0x0800cb55
 800cb3c:	0800cb5d 	.word	0x0800cb5d
 800cb40:	0800cb65 	.word	0x0800cb65
 800cb44:	0800cb6d 	.word	0x0800cb6d
 800cb48:	0800cb75 	.word	0x0800cb75
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb52:	e053      	b.n	800cbfc <UART_SetConfig+0x5d0>
 800cb54:	2304      	movs	r3, #4
 800cb56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb5a:	e04f      	b.n	800cbfc <UART_SetConfig+0x5d0>
 800cb5c:	2308      	movs	r3, #8
 800cb5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb62:	e04b      	b.n	800cbfc <UART_SetConfig+0x5d0>
 800cb64:	2310      	movs	r3, #16
 800cb66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb6a:	e047      	b.n	800cbfc <UART_SetConfig+0x5d0>
 800cb6c:	2320      	movs	r3, #32
 800cb6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb72:	e043      	b.n	800cbfc <UART_SetConfig+0x5d0>
 800cb74:	2340      	movs	r3, #64	; 0x40
 800cb76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb7a:	e03f      	b.n	800cbfc <UART_SetConfig+0x5d0>
 800cb7c:	2380      	movs	r3, #128	; 0x80
 800cb7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb82:	bf00      	nop
 800cb84:	e03a      	b.n	800cbfc <UART_SetConfig+0x5d0>
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	4a43      	ldr	r2, [pc, #268]	; (800cc98 <UART_SetConfig+0x66c>)
 800cb8c:	4293      	cmp	r3, r2
 800cb8e:	d132      	bne.n	800cbf6 <UART_SetConfig+0x5ca>
 800cb90:	4b3e      	ldr	r3, [pc, #248]	; (800cc8c <UART_SetConfig+0x660>)
 800cb92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb94:	f003 0307 	and.w	r3, r3, #7
 800cb98:	2b05      	cmp	r3, #5
 800cb9a:	d827      	bhi.n	800cbec <UART_SetConfig+0x5c0>
 800cb9c:	a201      	add	r2, pc, #4	; (adr r2, 800cba4 <UART_SetConfig+0x578>)
 800cb9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cba2:	bf00      	nop
 800cba4:	0800cbbd 	.word	0x0800cbbd
 800cba8:	0800cbc5 	.word	0x0800cbc5
 800cbac:	0800cbcd 	.word	0x0800cbcd
 800cbb0:	0800cbd5 	.word	0x0800cbd5
 800cbb4:	0800cbdd 	.word	0x0800cbdd
 800cbb8:	0800cbe5 	.word	0x0800cbe5
 800cbbc:	2302      	movs	r3, #2
 800cbbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbc2:	e01b      	b.n	800cbfc <UART_SetConfig+0x5d0>
 800cbc4:	2304      	movs	r3, #4
 800cbc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbca:	e017      	b.n	800cbfc <UART_SetConfig+0x5d0>
 800cbcc:	2308      	movs	r3, #8
 800cbce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbd2:	e013      	b.n	800cbfc <UART_SetConfig+0x5d0>
 800cbd4:	2310      	movs	r3, #16
 800cbd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbda:	e00f      	b.n	800cbfc <UART_SetConfig+0x5d0>
 800cbdc:	2320      	movs	r3, #32
 800cbde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbe2:	e00b      	b.n	800cbfc <UART_SetConfig+0x5d0>
 800cbe4:	2340      	movs	r3, #64	; 0x40
 800cbe6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbea:	e007      	b.n	800cbfc <UART_SetConfig+0x5d0>
 800cbec:	2380      	movs	r3, #128	; 0x80
 800cbee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbf2:	bf00      	nop
 800cbf4:	e002      	b.n	800cbfc <UART_SetConfig+0x5d0>
 800cbf6:	2380      	movs	r3, #128	; 0x80
 800cbf8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	4a25      	ldr	r2, [pc, #148]	; (800cc98 <UART_SetConfig+0x66c>)
 800cc02:	4293      	cmp	r3, r2
 800cc04:	f040 80b8 	bne.w	800cd78 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800cc08:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cc0c:	2b08      	cmp	r3, #8
 800cc0e:	d019      	beq.n	800cc44 <UART_SetConfig+0x618>
 800cc10:	2b08      	cmp	r3, #8
 800cc12:	dc04      	bgt.n	800cc1e <UART_SetConfig+0x5f2>
 800cc14:	2b02      	cmp	r3, #2
 800cc16:	d009      	beq.n	800cc2c <UART_SetConfig+0x600>
 800cc18:	2b04      	cmp	r3, #4
 800cc1a:	d00b      	beq.n	800cc34 <UART_SetConfig+0x608>
 800cc1c:	e042      	b.n	800cca4 <UART_SetConfig+0x678>
 800cc1e:	2b20      	cmp	r3, #32
 800cc20:	d02b      	beq.n	800cc7a <UART_SetConfig+0x64e>
 800cc22:	2b40      	cmp	r3, #64	; 0x40
 800cc24:	d02c      	beq.n	800cc80 <UART_SetConfig+0x654>
 800cc26:	2b10      	cmp	r3, #16
 800cc28:	d014      	beq.n	800cc54 <UART_SetConfig+0x628>
 800cc2a:	e03b      	b.n	800cca4 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800cc2c:	f7fc fa70 	bl	8009110 <HAL_RCCEx_GetD3PCLK1Freq>
 800cc30:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800cc32:	e03d      	b.n	800ccb0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cc34:	f107 0314 	add.w	r3, r7, #20
 800cc38:	4618      	mov	r0, r3
 800cc3a:	f7fc fa7f 	bl	800913c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cc3e:	69bb      	ldr	r3, [r7, #24]
 800cc40:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cc42:	e035      	b.n	800ccb0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cc44:	f107 0308 	add.w	r3, r7, #8
 800cc48:	4618      	mov	r0, r3
 800cc4a:	f7fc fbc3 	bl	80093d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cc52:	e02d      	b.n	800ccb0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cc54:	4b0d      	ldr	r3, [pc, #52]	; (800cc8c <UART_SetConfig+0x660>)
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	f003 0320 	and.w	r3, r3, #32
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d009      	beq.n	800cc74 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cc60:	4b0a      	ldr	r3, [pc, #40]	; (800cc8c <UART_SetConfig+0x660>)
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	08db      	lsrs	r3, r3, #3
 800cc66:	f003 0303 	and.w	r3, r3, #3
 800cc6a:	4a0c      	ldr	r2, [pc, #48]	; (800cc9c <UART_SetConfig+0x670>)
 800cc6c:	fa22 f303 	lsr.w	r3, r2, r3
 800cc70:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cc72:	e01d      	b.n	800ccb0 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 800cc74:	4b09      	ldr	r3, [pc, #36]	; (800cc9c <UART_SetConfig+0x670>)
 800cc76:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cc78:	e01a      	b.n	800ccb0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cc7a:	4b09      	ldr	r3, [pc, #36]	; (800cca0 <UART_SetConfig+0x674>)
 800cc7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cc7e:	e017      	b.n	800ccb0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cc80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cc84:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cc86:	e013      	b.n	800ccb0 <UART_SetConfig+0x684>
 800cc88:	40011400 	.word	0x40011400
 800cc8c:	58024400 	.word	0x58024400
 800cc90:	40007800 	.word	0x40007800
 800cc94:	40007c00 	.word	0x40007c00
 800cc98:	58000c00 	.word	0x58000c00
 800cc9c:	03d09000 	.word	0x03d09000
 800cca0:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800cca4:	2300      	movs	r3, #0
 800cca6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800cca8:	2301      	movs	r3, #1
 800ccaa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800ccae:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ccb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	f000 824d 	beq.w	800d152 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccbc:	4aad      	ldr	r2, [pc, #692]	; (800cf74 <UART_SetConfig+0x948>)
 800ccbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ccc2:	461a      	mov	r2, r3
 800ccc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccc6:	fbb3 f3f2 	udiv	r3, r3, r2
 800ccca:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	685a      	ldr	r2, [r3, #4]
 800ccd0:	4613      	mov	r3, r2
 800ccd2:	005b      	lsls	r3, r3, #1
 800ccd4:	4413      	add	r3, r2
 800ccd6:	6a3a      	ldr	r2, [r7, #32]
 800ccd8:	429a      	cmp	r2, r3
 800ccda:	d305      	bcc.n	800cce8 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	685b      	ldr	r3, [r3, #4]
 800cce0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cce2:	6a3a      	ldr	r2, [r7, #32]
 800cce4:	429a      	cmp	r2, r3
 800cce6:	d903      	bls.n	800ccf0 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 800cce8:	2301      	movs	r3, #1
 800ccea:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800ccee:	e230      	b.n	800d152 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ccf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	f04f 0100 	mov.w	r1, #0
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccfc:	4a9d      	ldr	r2, [pc, #628]	; (800cf74 <UART_SetConfig+0x948>)
 800ccfe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cd02:	b29b      	uxth	r3, r3
 800cd04:	f04f 0400 	mov.w	r4, #0
 800cd08:	461a      	mov	r2, r3
 800cd0a:	4623      	mov	r3, r4
 800cd0c:	f7f3 fb40 	bl	8000390 <__aeabi_uldivmod>
 800cd10:	4603      	mov	r3, r0
 800cd12:	460c      	mov	r4, r1
 800cd14:	4619      	mov	r1, r3
 800cd16:	4622      	mov	r2, r4
 800cd18:	f04f 0300 	mov.w	r3, #0
 800cd1c:	f04f 0400 	mov.w	r4, #0
 800cd20:	0214      	lsls	r4, r2, #8
 800cd22:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800cd26:	020b      	lsls	r3, r1, #8
 800cd28:	687a      	ldr	r2, [r7, #4]
 800cd2a:	6852      	ldr	r2, [r2, #4]
 800cd2c:	0852      	lsrs	r2, r2, #1
 800cd2e:	4611      	mov	r1, r2
 800cd30:	f04f 0200 	mov.w	r2, #0
 800cd34:	eb13 0b01 	adds.w	fp, r3, r1
 800cd38:	eb44 0c02 	adc.w	ip, r4, r2
 800cd3c:	4658      	mov	r0, fp
 800cd3e:	4661      	mov	r1, ip
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	685b      	ldr	r3, [r3, #4]
 800cd44:	f04f 0400 	mov.w	r4, #0
 800cd48:	461a      	mov	r2, r3
 800cd4a:	4623      	mov	r3, r4
 800cd4c:	f7f3 fb20 	bl	8000390 <__aeabi_uldivmod>
 800cd50:	4603      	mov	r3, r0
 800cd52:	460c      	mov	r4, r1
 800cd54:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cd56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cd5c:	d308      	bcc.n	800cd70 <UART_SetConfig+0x744>
 800cd5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cd64:	d204      	bcs.n	800cd70 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd6c:	60da      	str	r2, [r3, #12]
 800cd6e:	e1f0      	b.n	800d152 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 800cd70:	2301      	movs	r3, #1
 800cd72:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800cd76:	e1ec      	b.n	800d152 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	69db      	ldr	r3, [r3, #28]
 800cd7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cd80:	f040 8100 	bne.w	800cf84 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 800cd84:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cd88:	2b40      	cmp	r3, #64	; 0x40
 800cd8a:	f200 80b7 	bhi.w	800cefc <UART_SetConfig+0x8d0>
 800cd8e:	a201      	add	r2, pc, #4	; (adr r2, 800cd94 <UART_SetConfig+0x768>)
 800cd90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd94:	0800ce99 	.word	0x0800ce99
 800cd98:	0800cea1 	.word	0x0800cea1
 800cd9c:	0800cefd 	.word	0x0800cefd
 800cda0:	0800cefd 	.word	0x0800cefd
 800cda4:	0800cea9 	.word	0x0800cea9
 800cda8:	0800cefd 	.word	0x0800cefd
 800cdac:	0800cefd 	.word	0x0800cefd
 800cdb0:	0800cefd 	.word	0x0800cefd
 800cdb4:	0800ceb9 	.word	0x0800ceb9
 800cdb8:	0800cefd 	.word	0x0800cefd
 800cdbc:	0800cefd 	.word	0x0800cefd
 800cdc0:	0800cefd 	.word	0x0800cefd
 800cdc4:	0800cefd 	.word	0x0800cefd
 800cdc8:	0800cefd 	.word	0x0800cefd
 800cdcc:	0800cefd 	.word	0x0800cefd
 800cdd0:	0800cefd 	.word	0x0800cefd
 800cdd4:	0800cec9 	.word	0x0800cec9
 800cdd8:	0800cefd 	.word	0x0800cefd
 800cddc:	0800cefd 	.word	0x0800cefd
 800cde0:	0800cefd 	.word	0x0800cefd
 800cde4:	0800cefd 	.word	0x0800cefd
 800cde8:	0800cefd 	.word	0x0800cefd
 800cdec:	0800cefd 	.word	0x0800cefd
 800cdf0:	0800cefd 	.word	0x0800cefd
 800cdf4:	0800cefd 	.word	0x0800cefd
 800cdf8:	0800cefd 	.word	0x0800cefd
 800cdfc:	0800cefd 	.word	0x0800cefd
 800ce00:	0800cefd 	.word	0x0800cefd
 800ce04:	0800cefd 	.word	0x0800cefd
 800ce08:	0800cefd 	.word	0x0800cefd
 800ce0c:	0800cefd 	.word	0x0800cefd
 800ce10:	0800cefd 	.word	0x0800cefd
 800ce14:	0800ceef 	.word	0x0800ceef
 800ce18:	0800cefd 	.word	0x0800cefd
 800ce1c:	0800cefd 	.word	0x0800cefd
 800ce20:	0800cefd 	.word	0x0800cefd
 800ce24:	0800cefd 	.word	0x0800cefd
 800ce28:	0800cefd 	.word	0x0800cefd
 800ce2c:	0800cefd 	.word	0x0800cefd
 800ce30:	0800cefd 	.word	0x0800cefd
 800ce34:	0800cefd 	.word	0x0800cefd
 800ce38:	0800cefd 	.word	0x0800cefd
 800ce3c:	0800cefd 	.word	0x0800cefd
 800ce40:	0800cefd 	.word	0x0800cefd
 800ce44:	0800cefd 	.word	0x0800cefd
 800ce48:	0800cefd 	.word	0x0800cefd
 800ce4c:	0800cefd 	.word	0x0800cefd
 800ce50:	0800cefd 	.word	0x0800cefd
 800ce54:	0800cefd 	.word	0x0800cefd
 800ce58:	0800cefd 	.word	0x0800cefd
 800ce5c:	0800cefd 	.word	0x0800cefd
 800ce60:	0800cefd 	.word	0x0800cefd
 800ce64:	0800cefd 	.word	0x0800cefd
 800ce68:	0800cefd 	.word	0x0800cefd
 800ce6c:	0800cefd 	.word	0x0800cefd
 800ce70:	0800cefd 	.word	0x0800cefd
 800ce74:	0800cefd 	.word	0x0800cefd
 800ce78:	0800cefd 	.word	0x0800cefd
 800ce7c:	0800cefd 	.word	0x0800cefd
 800ce80:	0800cefd 	.word	0x0800cefd
 800ce84:	0800cefd 	.word	0x0800cefd
 800ce88:	0800cefd 	.word	0x0800cefd
 800ce8c:	0800cefd 	.word	0x0800cefd
 800ce90:	0800cefd 	.word	0x0800cefd
 800ce94:	0800cef5 	.word	0x0800cef5
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ce98:	f7fa ff8c 	bl	8007db4 <HAL_RCC_GetPCLK1Freq>
 800ce9c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ce9e:	e033      	b.n	800cf08 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cea0:	f7fa ff9e 	bl	8007de0 <HAL_RCC_GetPCLK2Freq>
 800cea4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800cea6:	e02f      	b.n	800cf08 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cea8:	f107 0314 	add.w	r3, r7, #20
 800ceac:	4618      	mov	r0, r3
 800ceae:	f7fc f945 	bl	800913c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ceb2:	69bb      	ldr	r3, [r7, #24]
 800ceb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ceb6:	e027      	b.n	800cf08 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ceb8:	f107 0308 	add.w	r3, r7, #8
 800cebc:	4618      	mov	r0, r3
 800cebe:	f7fc fa89 	bl	80093d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cec6:	e01f      	b.n	800cf08 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cec8:	4b2b      	ldr	r3, [pc, #172]	; (800cf78 <UART_SetConfig+0x94c>)
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	f003 0320 	and.w	r3, r3, #32
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d009      	beq.n	800cee8 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ced4:	4b28      	ldr	r3, [pc, #160]	; (800cf78 <UART_SetConfig+0x94c>)
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	08db      	lsrs	r3, r3, #3
 800ceda:	f003 0303 	and.w	r3, r3, #3
 800cede:	4a27      	ldr	r2, [pc, #156]	; (800cf7c <UART_SetConfig+0x950>)
 800cee0:	fa22 f303 	lsr.w	r3, r2, r3
 800cee4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cee6:	e00f      	b.n	800cf08 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 800cee8:	4b24      	ldr	r3, [pc, #144]	; (800cf7c <UART_SetConfig+0x950>)
 800ceea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ceec:	e00c      	b.n	800cf08 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ceee:	4b24      	ldr	r3, [pc, #144]	; (800cf80 <UART_SetConfig+0x954>)
 800cef0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cef2:	e009      	b.n	800cf08 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cef4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cef8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cefa:	e005      	b.n	800cf08 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 800cefc:	2300      	movs	r3, #0
 800cefe:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800cf00:	2301      	movs	r3, #1
 800cf02:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800cf06:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cf08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	f000 8121 	beq.w	800d152 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf14:	4a17      	ldr	r2, [pc, #92]	; (800cf74 <UART_SetConfig+0x948>)
 800cf16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cf1a:	461a      	mov	r2, r3
 800cf1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf1e:	fbb3 f3f2 	udiv	r3, r3, r2
 800cf22:	005a      	lsls	r2, r3, #1
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	685b      	ldr	r3, [r3, #4]
 800cf28:	085b      	lsrs	r3, r3, #1
 800cf2a:	441a      	add	r2, r3
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	685b      	ldr	r3, [r3, #4]
 800cf30:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf34:	b29b      	uxth	r3, r3
 800cf36:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cf38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf3a:	2b0f      	cmp	r3, #15
 800cf3c:	d916      	bls.n	800cf6c <UART_SetConfig+0x940>
 800cf3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf44:	d212      	bcs.n	800cf6c <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cf46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf48:	b29b      	uxth	r3, r3
 800cf4a:	f023 030f 	bic.w	r3, r3, #15
 800cf4e:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cf50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf52:	085b      	lsrs	r3, r3, #1
 800cf54:	b29b      	uxth	r3, r3
 800cf56:	f003 0307 	and.w	r3, r3, #7
 800cf5a:	b29a      	uxth	r2, r3
 800cf5c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cf5e:	4313      	orrs	r3, r2
 800cf60:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800cf68:	60da      	str	r2, [r3, #12]
 800cf6a:	e0f2      	b.n	800d152 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800cf6c:	2301      	movs	r3, #1
 800cf6e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800cf72:	e0ee      	b.n	800d152 <UART_SetConfig+0xb26>
 800cf74:	080171f0 	.word	0x080171f0
 800cf78:	58024400 	.word	0x58024400
 800cf7c:	03d09000 	.word	0x03d09000
 800cf80:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 800cf84:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cf88:	2b40      	cmp	r3, #64	; 0x40
 800cf8a:	f200 80b7 	bhi.w	800d0fc <UART_SetConfig+0xad0>
 800cf8e:	a201      	add	r2, pc, #4	; (adr r2, 800cf94 <UART_SetConfig+0x968>)
 800cf90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf94:	0800d099 	.word	0x0800d099
 800cf98:	0800d0a1 	.word	0x0800d0a1
 800cf9c:	0800d0fd 	.word	0x0800d0fd
 800cfa0:	0800d0fd 	.word	0x0800d0fd
 800cfa4:	0800d0a9 	.word	0x0800d0a9
 800cfa8:	0800d0fd 	.word	0x0800d0fd
 800cfac:	0800d0fd 	.word	0x0800d0fd
 800cfb0:	0800d0fd 	.word	0x0800d0fd
 800cfb4:	0800d0b9 	.word	0x0800d0b9
 800cfb8:	0800d0fd 	.word	0x0800d0fd
 800cfbc:	0800d0fd 	.word	0x0800d0fd
 800cfc0:	0800d0fd 	.word	0x0800d0fd
 800cfc4:	0800d0fd 	.word	0x0800d0fd
 800cfc8:	0800d0fd 	.word	0x0800d0fd
 800cfcc:	0800d0fd 	.word	0x0800d0fd
 800cfd0:	0800d0fd 	.word	0x0800d0fd
 800cfd4:	0800d0c9 	.word	0x0800d0c9
 800cfd8:	0800d0fd 	.word	0x0800d0fd
 800cfdc:	0800d0fd 	.word	0x0800d0fd
 800cfe0:	0800d0fd 	.word	0x0800d0fd
 800cfe4:	0800d0fd 	.word	0x0800d0fd
 800cfe8:	0800d0fd 	.word	0x0800d0fd
 800cfec:	0800d0fd 	.word	0x0800d0fd
 800cff0:	0800d0fd 	.word	0x0800d0fd
 800cff4:	0800d0fd 	.word	0x0800d0fd
 800cff8:	0800d0fd 	.word	0x0800d0fd
 800cffc:	0800d0fd 	.word	0x0800d0fd
 800d000:	0800d0fd 	.word	0x0800d0fd
 800d004:	0800d0fd 	.word	0x0800d0fd
 800d008:	0800d0fd 	.word	0x0800d0fd
 800d00c:	0800d0fd 	.word	0x0800d0fd
 800d010:	0800d0fd 	.word	0x0800d0fd
 800d014:	0800d0ef 	.word	0x0800d0ef
 800d018:	0800d0fd 	.word	0x0800d0fd
 800d01c:	0800d0fd 	.word	0x0800d0fd
 800d020:	0800d0fd 	.word	0x0800d0fd
 800d024:	0800d0fd 	.word	0x0800d0fd
 800d028:	0800d0fd 	.word	0x0800d0fd
 800d02c:	0800d0fd 	.word	0x0800d0fd
 800d030:	0800d0fd 	.word	0x0800d0fd
 800d034:	0800d0fd 	.word	0x0800d0fd
 800d038:	0800d0fd 	.word	0x0800d0fd
 800d03c:	0800d0fd 	.word	0x0800d0fd
 800d040:	0800d0fd 	.word	0x0800d0fd
 800d044:	0800d0fd 	.word	0x0800d0fd
 800d048:	0800d0fd 	.word	0x0800d0fd
 800d04c:	0800d0fd 	.word	0x0800d0fd
 800d050:	0800d0fd 	.word	0x0800d0fd
 800d054:	0800d0fd 	.word	0x0800d0fd
 800d058:	0800d0fd 	.word	0x0800d0fd
 800d05c:	0800d0fd 	.word	0x0800d0fd
 800d060:	0800d0fd 	.word	0x0800d0fd
 800d064:	0800d0fd 	.word	0x0800d0fd
 800d068:	0800d0fd 	.word	0x0800d0fd
 800d06c:	0800d0fd 	.word	0x0800d0fd
 800d070:	0800d0fd 	.word	0x0800d0fd
 800d074:	0800d0fd 	.word	0x0800d0fd
 800d078:	0800d0fd 	.word	0x0800d0fd
 800d07c:	0800d0fd 	.word	0x0800d0fd
 800d080:	0800d0fd 	.word	0x0800d0fd
 800d084:	0800d0fd 	.word	0x0800d0fd
 800d088:	0800d0fd 	.word	0x0800d0fd
 800d08c:	0800d0fd 	.word	0x0800d0fd
 800d090:	0800d0fd 	.word	0x0800d0fd
 800d094:	0800d0f5 	.word	0x0800d0f5
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d098:	f7fa fe8c 	bl	8007db4 <HAL_RCC_GetPCLK1Freq>
 800d09c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d09e:	e033      	b.n	800d108 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d0a0:	f7fa fe9e 	bl	8007de0 <HAL_RCC_GetPCLK2Freq>
 800d0a4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d0a6:	e02f      	b.n	800d108 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d0a8:	f107 0314 	add.w	r3, r7, #20
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	f7fc f845 	bl	800913c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d0b2:	69bb      	ldr	r3, [r7, #24]
 800d0b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d0b6:	e027      	b.n	800d108 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d0b8:	f107 0308 	add.w	r3, r7, #8
 800d0bc:	4618      	mov	r0, r3
 800d0be:	f7fc f989 	bl	80093d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d0c6:	e01f      	b.n	800d108 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d0c8:	4b2c      	ldr	r3, [pc, #176]	; (800d17c <UART_SetConfig+0xb50>)
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	f003 0320 	and.w	r3, r3, #32
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d009      	beq.n	800d0e8 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d0d4:	4b29      	ldr	r3, [pc, #164]	; (800d17c <UART_SetConfig+0xb50>)
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	08db      	lsrs	r3, r3, #3
 800d0da:	f003 0303 	and.w	r3, r3, #3
 800d0de:	4a28      	ldr	r2, [pc, #160]	; (800d180 <UART_SetConfig+0xb54>)
 800d0e0:	fa22 f303 	lsr.w	r3, r2, r3
 800d0e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d0e6:	e00f      	b.n	800d108 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 800d0e8:	4b25      	ldr	r3, [pc, #148]	; (800d180 <UART_SetConfig+0xb54>)
 800d0ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d0ec:	e00c      	b.n	800d108 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d0ee:	4b25      	ldr	r3, [pc, #148]	; (800d184 <UART_SetConfig+0xb58>)
 800d0f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d0f2:	e009      	b.n	800d108 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d0f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d0f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d0fa:	e005      	b.n	800d108 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 800d0fc:	2300      	movs	r3, #0
 800d0fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800d100:	2301      	movs	r3, #1
 800d102:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800d106:	bf00      	nop
    }

    if (pclk != 0U)
 800d108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d021      	beq.n	800d152 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d112:	4a1d      	ldr	r2, [pc, #116]	; (800d188 <UART_SetConfig+0xb5c>)
 800d114:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d118:	461a      	mov	r2, r3
 800d11a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d11c:	fbb3 f2f2 	udiv	r2, r3, r2
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	685b      	ldr	r3, [r3, #4]
 800d124:	085b      	lsrs	r3, r3, #1
 800d126:	441a      	add	r2, r3
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	685b      	ldr	r3, [r3, #4]
 800d12c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d130:	b29b      	uxth	r3, r3
 800d132:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d136:	2b0f      	cmp	r3, #15
 800d138:	d908      	bls.n	800d14c <UART_SetConfig+0xb20>
 800d13a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d13c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d140:	d204      	bcs.n	800d14c <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d148:	60da      	str	r2, [r3, #12]
 800d14a:	e002      	b.n	800d152 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800d14c:	2301      	movs	r3, #1
 800d14e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	2201      	movs	r2, #1
 800d156:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	2201      	movs	r2, #1
 800d15e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	2200      	movs	r2, #0
 800d166:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	2200      	movs	r2, #0
 800d16c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800d16e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800d172:	4618      	mov	r0, r3
 800d174:	3738      	adds	r7, #56	; 0x38
 800d176:	46bd      	mov	sp, r7
 800d178:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800d17c:	58024400 	.word	0x58024400
 800d180:	03d09000 	.word	0x03d09000
 800d184:	003d0900 	.word	0x003d0900
 800d188:	080171f0 	.word	0x080171f0

0800d18c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d18c:	b480      	push	{r7}
 800d18e:	b083      	sub	sp, #12
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d198:	f003 0301 	and.w	r3, r3, #1
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d00a      	beq.n	800d1b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	685b      	ldr	r3, [r3, #4]
 800d1a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	430a      	orrs	r2, r1
 800d1b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1ba:	f003 0302 	and.w	r3, r3, #2
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d00a      	beq.n	800d1d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	685b      	ldr	r3, [r3, #4]
 800d1c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	430a      	orrs	r2, r1
 800d1d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1dc:	f003 0304 	and.w	r3, r3, #4
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d00a      	beq.n	800d1fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	685b      	ldr	r3, [r3, #4]
 800d1ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	430a      	orrs	r2, r1
 800d1f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1fe:	f003 0308 	and.w	r3, r3, #8
 800d202:	2b00      	cmp	r3, #0
 800d204:	d00a      	beq.n	800d21c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	685b      	ldr	r3, [r3, #4]
 800d20c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	430a      	orrs	r2, r1
 800d21a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d220:	f003 0310 	and.w	r3, r3, #16
 800d224:	2b00      	cmp	r3, #0
 800d226:	d00a      	beq.n	800d23e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	689b      	ldr	r3, [r3, #8]
 800d22e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	430a      	orrs	r2, r1
 800d23c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d242:	f003 0320 	and.w	r3, r3, #32
 800d246:	2b00      	cmp	r3, #0
 800d248:	d00a      	beq.n	800d260 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	689b      	ldr	r3, [r3, #8]
 800d250:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	430a      	orrs	r2, r1
 800d25e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d01a      	beq.n	800d2a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	685b      	ldr	r3, [r3, #4]
 800d272:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	430a      	orrs	r2, r1
 800d280:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d286:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d28a:	d10a      	bne.n	800d2a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	685b      	ldr	r3, [r3, #4]
 800d292:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	430a      	orrs	r2, r1
 800d2a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d00a      	beq.n	800d2c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	685b      	ldr	r3, [r3, #4]
 800d2b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	430a      	orrs	r2, r1
 800d2c2:	605a      	str	r2, [r3, #4]
  }
}
 800d2c4:	bf00      	nop
 800d2c6:	370c      	adds	r7, #12
 800d2c8:	46bd      	mov	sp, r7
 800d2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ce:	4770      	bx	lr

0800d2d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d2d0:	b580      	push	{r7, lr}
 800d2d2:	b086      	sub	sp, #24
 800d2d4:	af02      	add	r7, sp, #8
 800d2d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	2200      	movs	r2, #0
 800d2dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800d2e0:	f7f4 fe10 	bl	8001f04 <HAL_GetTick>
 800d2e4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	f003 0308 	and.w	r3, r3, #8
 800d2f0:	2b08      	cmp	r3, #8
 800d2f2:	d10e      	bne.n	800d312 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d2f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d2f8:	9300      	str	r3, [sp, #0]
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	2200      	movs	r2, #0
 800d2fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d302:	6878      	ldr	r0, [r7, #4]
 800d304:	f000 f82c 	bl	800d360 <UART_WaitOnFlagUntilTimeout>
 800d308:	4603      	mov	r3, r0
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d001      	beq.n	800d312 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d30e:	2303      	movs	r3, #3
 800d310:	e022      	b.n	800d358 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	f003 0304 	and.w	r3, r3, #4
 800d31c:	2b04      	cmp	r3, #4
 800d31e:	d10e      	bne.n	800d33e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d320:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d324:	9300      	str	r3, [sp, #0]
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	2200      	movs	r2, #0
 800d32a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d32e:	6878      	ldr	r0, [r7, #4]
 800d330:	f000 f816 	bl	800d360 <UART_WaitOnFlagUntilTimeout>
 800d334:	4603      	mov	r3, r0
 800d336:	2b00      	cmp	r3, #0
 800d338:	d001      	beq.n	800d33e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d33a:	2303      	movs	r3, #3
 800d33c:	e00c      	b.n	800d358 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	2220      	movs	r2, #32
 800d342:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	2220      	movs	r2, #32
 800d34a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	2200      	movs	r2, #0
 800d352:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800d356:	2300      	movs	r3, #0
}
 800d358:	4618      	mov	r0, r3
 800d35a:	3710      	adds	r7, #16
 800d35c:	46bd      	mov	sp, r7
 800d35e:	bd80      	pop	{r7, pc}

0800d360 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d360:	b580      	push	{r7, lr}
 800d362:	b084      	sub	sp, #16
 800d364:	af00      	add	r7, sp, #0
 800d366:	60f8      	str	r0, [r7, #12]
 800d368:	60b9      	str	r1, [r7, #8]
 800d36a:	603b      	str	r3, [r7, #0]
 800d36c:	4613      	mov	r3, r2
 800d36e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d370:	e062      	b.n	800d438 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d372:	69bb      	ldr	r3, [r7, #24]
 800d374:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d378:	d05e      	beq.n	800d438 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d37a:	f7f4 fdc3 	bl	8001f04 <HAL_GetTick>
 800d37e:	4602      	mov	r2, r0
 800d380:	683b      	ldr	r3, [r7, #0]
 800d382:	1ad3      	subs	r3, r2, r3
 800d384:	69ba      	ldr	r2, [r7, #24]
 800d386:	429a      	cmp	r2, r3
 800d388:	d302      	bcc.n	800d390 <UART_WaitOnFlagUntilTimeout+0x30>
 800d38a:	69bb      	ldr	r3, [r7, #24]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d11d      	bne.n	800d3cc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	681a      	ldr	r2, [r3, #0]
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d39e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	689a      	ldr	r2, [r3, #8]
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	f022 0201 	bic.w	r2, r2, #1
 800d3ae:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	2220      	movs	r2, #32
 800d3b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	2220      	movs	r2, #32
 800d3bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800d3c8:	2303      	movs	r3, #3
 800d3ca:	e045      	b.n	800d458 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	f003 0304 	and.w	r3, r3, #4
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d02e      	beq.n	800d438 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	69db      	ldr	r3, [r3, #28]
 800d3e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d3e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d3e8:	d126      	bne.n	800d438 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d3f2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	681a      	ldr	r2, [r3, #0]
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d402:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	689a      	ldr	r2, [r3, #8]
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	f022 0201 	bic.w	r2, r2, #1
 800d412:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	2220      	movs	r2, #32
 800d418:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	2220      	movs	r2, #32
 800d420:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	2220      	movs	r2, #32
 800d428:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	2200      	movs	r2, #0
 800d430:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800d434:	2303      	movs	r3, #3
 800d436:	e00f      	b.n	800d458 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	69da      	ldr	r2, [r3, #28]
 800d43e:	68bb      	ldr	r3, [r7, #8]
 800d440:	4013      	ands	r3, r2
 800d442:	68ba      	ldr	r2, [r7, #8]
 800d444:	429a      	cmp	r2, r3
 800d446:	bf0c      	ite	eq
 800d448:	2301      	moveq	r3, #1
 800d44a:	2300      	movne	r3, #0
 800d44c:	b2db      	uxtb	r3, r3
 800d44e:	461a      	mov	r2, r3
 800d450:	79fb      	ldrb	r3, [r7, #7]
 800d452:	429a      	cmp	r2, r3
 800d454:	d08d      	beq.n	800d372 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d456:	2300      	movs	r3, #0
}
 800d458:	4618      	mov	r0, r3
 800d45a:	3710      	adds	r7, #16
 800d45c:	46bd      	mov	sp, r7
 800d45e:	bd80      	pop	{r7, pc}

0800d460 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d460:	b480      	push	{r7}
 800d462:	b083      	sub	sp, #12
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	681a      	ldr	r2, [r3, #0]
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800d476:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	689a      	ldr	r2, [r3, #8]
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800d486:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	2220      	movs	r2, #32
 800d48c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800d490:	bf00      	nop
 800d492:	370c      	adds	r7, #12
 800d494:	46bd      	mov	sp, r7
 800d496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d49a:	4770      	bx	lr

0800d49c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d49c:	b480      	push	{r7}
 800d49e:	b083      	sub	sp, #12
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	681a      	ldr	r2, [r3, #0]
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800d4b2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	6899      	ldr	r1, [r3, #8]
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	681a      	ldr	r2, [r3, #0]
 800d4be:	4b08      	ldr	r3, [pc, #32]	; (800d4e0 <UART_EndRxTransfer+0x44>)
 800d4c0:	400b      	ands	r3, r1
 800d4c2:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	2220      	movs	r2, #32
 800d4c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800d4d2:	bf00      	nop
 800d4d4:	370c      	adds	r7, #12
 800d4d6:	46bd      	mov	sp, r7
 800d4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4dc:	4770      	bx	lr
 800d4de:	bf00      	nop
 800d4e0:	effffffe 	.word	0xeffffffe

0800d4e4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	b084      	sub	sp, #16
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4f0:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	69db      	ldr	r3, [r3, #28]
 800d4f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d4fa:	d01f      	beq.n	800d53c <UART_DMAReceiveCplt+0x58>
  {
    huart->RxXferCount = 0U;
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	2200      	movs	r2, #0
 800d500:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	681a      	ldr	r2, [r3, #0]
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d512:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	689a      	ldr	r2, [r3, #8]
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	f022 0201 	bic.w	r2, r2, #1
 800d522:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	689a      	ldr	r2, [r3, #8]
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d532:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	2220      	movs	r2, #32
 800d538:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800d53c:	68f8      	ldr	r0, [r7, #12]
 800d53e:	f7f4 f85b 	bl	80015f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d542:	bf00      	nop
 800d544:	3710      	adds	r7, #16
 800d546:	46bd      	mov	sp, r7
 800d548:	bd80      	pop	{r7, pc}

0800d54a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d54a:	b580      	push	{r7, lr}
 800d54c:	b084      	sub	sp, #16
 800d54e:	af00      	add	r7, sp, #0
 800d550:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d556:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800d558:	68f8      	ldr	r0, [r7, #12]
 800d55a:	f7ff f853 	bl	800c604 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d55e:	bf00      	nop
 800d560:	3710      	adds	r7, #16
 800d562:	46bd      	mov	sp, r7
 800d564:	bd80      	pop	{r7, pc}

0800d566 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d566:	b580      	push	{r7, lr}
 800d568:	b086      	sub	sp, #24
 800d56a:	af00      	add	r7, sp, #0
 800d56c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d572:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d574:	697b      	ldr	r3, [r7, #20]
 800d576:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d57a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d57c:	697b      	ldr	r3, [r7, #20]
 800d57e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d582:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d584:	697b      	ldr	r3, [r7, #20]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	689b      	ldr	r3, [r3, #8]
 800d58a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d58e:	2b80      	cmp	r3, #128	; 0x80
 800d590:	d109      	bne.n	800d5a6 <UART_DMAError+0x40>
 800d592:	693b      	ldr	r3, [r7, #16]
 800d594:	2b21      	cmp	r3, #33	; 0x21
 800d596:	d106      	bne.n	800d5a6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800d598:	697b      	ldr	r3, [r7, #20]
 800d59a:	2200      	movs	r2, #0
 800d59c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800d5a0:	6978      	ldr	r0, [r7, #20]
 800d5a2:	f7ff ff5d 	bl	800d460 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d5a6:	697b      	ldr	r3, [r7, #20]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	689b      	ldr	r3, [r3, #8]
 800d5ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5b0:	2b40      	cmp	r3, #64	; 0x40
 800d5b2:	d109      	bne.n	800d5c8 <UART_DMAError+0x62>
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	2b22      	cmp	r3, #34	; 0x22
 800d5b8:	d106      	bne.n	800d5c8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800d5ba:	697b      	ldr	r3, [r7, #20]
 800d5bc:	2200      	movs	r2, #0
 800d5be:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800d5c2:	6978      	ldr	r0, [r7, #20]
 800d5c4:	f7ff ff6a 	bl	800d49c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d5c8:	697b      	ldr	r3, [r7, #20]
 800d5ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d5ce:	f043 0210 	orr.w	r2, r3, #16
 800d5d2:	697b      	ldr	r3, [r7, #20]
 800d5d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d5d8:	6978      	ldr	r0, [r7, #20]
 800d5da:	f7ff f81d 	bl	800c618 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d5de:	bf00      	nop
 800d5e0:	3718      	adds	r7, #24
 800d5e2:	46bd      	mov	sp, r7
 800d5e4:	bd80      	pop	{r7, pc}

0800d5e6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d5e6:	b480      	push	{r7}
 800d5e8:	b085      	sub	sp, #20
 800d5ea:	af00      	add	r7, sp, #0
 800d5ec:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800d5f4:	2b01      	cmp	r3, #1
 800d5f6:	d101      	bne.n	800d5fc <HAL_UARTEx_DisableFifoMode+0x16>
 800d5f8:	2302      	movs	r3, #2
 800d5fa:	e027      	b.n	800d64c <HAL_UARTEx_DisableFifoMode+0x66>
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	2201      	movs	r2, #1
 800d600:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	2224      	movs	r2, #36	; 0x24
 800d608:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	681a      	ldr	r2, [r3, #0]
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	f022 0201 	bic.w	r2, r2, #1
 800d622:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d62a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	2200      	movs	r2, #0
 800d630:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	68fa      	ldr	r2, [r7, #12]
 800d638:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	2220      	movs	r2, #32
 800d63e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	2200      	movs	r2, #0
 800d646:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800d64a:	2300      	movs	r3, #0
}
 800d64c:	4618      	mov	r0, r3
 800d64e:	3714      	adds	r7, #20
 800d650:	46bd      	mov	sp, r7
 800d652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d656:	4770      	bx	lr

0800d658 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d658:	b580      	push	{r7, lr}
 800d65a:	b084      	sub	sp, #16
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	6078      	str	r0, [r7, #4]
 800d660:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800d668:	2b01      	cmp	r3, #1
 800d66a:	d101      	bne.n	800d670 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d66c:	2302      	movs	r3, #2
 800d66e:	e02d      	b.n	800d6cc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	2201      	movs	r2, #1
 800d674:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	2224      	movs	r2, #36	; 0x24
 800d67c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	681a      	ldr	r2, [r3, #0]
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	f022 0201 	bic.w	r2, r2, #1
 800d696:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	689b      	ldr	r3, [r3, #8]
 800d69e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	683a      	ldr	r2, [r7, #0]
 800d6a8:	430a      	orrs	r2, r1
 800d6aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d6ac:	6878      	ldr	r0, [r7, #4]
 800d6ae:	f000 f84f 	bl	800d750 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	68fa      	ldr	r2, [r7, #12]
 800d6b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	2220      	movs	r2, #32
 800d6be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	2200      	movs	r2, #0
 800d6c6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800d6ca:	2300      	movs	r3, #0
}
 800d6cc:	4618      	mov	r0, r3
 800d6ce:	3710      	adds	r7, #16
 800d6d0:	46bd      	mov	sp, r7
 800d6d2:	bd80      	pop	{r7, pc}

0800d6d4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d6d4:	b580      	push	{r7, lr}
 800d6d6:	b084      	sub	sp, #16
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	6078      	str	r0, [r7, #4]
 800d6dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800d6e4:	2b01      	cmp	r3, #1
 800d6e6:	d101      	bne.n	800d6ec <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d6e8:	2302      	movs	r3, #2
 800d6ea:	e02d      	b.n	800d748 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	2201      	movs	r2, #1
 800d6f0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	2224      	movs	r2, #36	; 0x24
 800d6f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	681a      	ldr	r2, [r3, #0]
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	f022 0201 	bic.w	r2, r2, #1
 800d712:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	689b      	ldr	r3, [r3, #8]
 800d71a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	683a      	ldr	r2, [r7, #0]
 800d724:	430a      	orrs	r2, r1
 800d726:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d728:	6878      	ldr	r0, [r7, #4]
 800d72a:	f000 f811 	bl	800d750 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	68fa      	ldr	r2, [r7, #12]
 800d734:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	2220      	movs	r2, #32
 800d73a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	2200      	movs	r2, #0
 800d742:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800d746:	2300      	movs	r3, #0
}
 800d748:	4618      	mov	r0, r3
 800d74a:	3710      	adds	r7, #16
 800d74c:	46bd      	mov	sp, r7
 800d74e:	bd80      	pop	{r7, pc}

0800d750 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d750:	b480      	push	{r7}
 800d752:	b089      	sub	sp, #36	; 0x24
 800d754:	af00      	add	r7, sp, #0
 800d756:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800d758:	4a2f      	ldr	r2, [pc, #188]	; (800d818 <UARTEx_SetNbDataToProcess+0xc8>)
 800d75a:	f107 0314 	add.w	r3, r7, #20
 800d75e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d762:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800d766:	4a2d      	ldr	r2, [pc, #180]	; (800d81c <UARTEx_SetNbDataToProcess+0xcc>)
 800d768:	f107 030c 	add.w	r3, r7, #12
 800d76c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d770:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d108      	bne.n	800d78e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	2201      	movs	r2, #1
 800d780:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	2201      	movs	r2, #1
 800d788:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d78c:	e03d      	b.n	800d80a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d78e:	2310      	movs	r3, #16
 800d790:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d792:	2310      	movs	r3, #16
 800d794:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	689b      	ldr	r3, [r3, #8]
 800d79c:	0e5b      	lsrs	r3, r3, #25
 800d79e:	b2db      	uxtb	r3, r3
 800d7a0:	f003 0307 	and.w	r3, r3, #7
 800d7a4:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	689b      	ldr	r3, [r3, #8]
 800d7ac:	0f5b      	lsrs	r3, r3, #29
 800d7ae:	b2db      	uxtb	r3, r3
 800d7b0:	f003 0307 	and.w	r3, r3, #7
 800d7b4:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800d7b6:	7fbb      	ldrb	r3, [r7, #30]
 800d7b8:	7f3a      	ldrb	r2, [r7, #28]
 800d7ba:	f107 0120 	add.w	r1, r7, #32
 800d7be:	440a      	add	r2, r1
 800d7c0:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800d7c4:	fb02 f303 	mul.w	r3, r2, r3
 800d7c8:	7f3a      	ldrb	r2, [r7, #28]
 800d7ca:	f107 0120 	add.w	r1, r7, #32
 800d7ce:	440a      	add	r2, r1
 800d7d0:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800d7d4:	fb93 f3f2 	sdiv	r3, r3, r2
 800d7d8:	b29a      	uxth	r2, r3
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800d7e0:	7ffb      	ldrb	r3, [r7, #31]
 800d7e2:	7f7a      	ldrb	r2, [r7, #29]
 800d7e4:	f107 0120 	add.w	r1, r7, #32
 800d7e8:	440a      	add	r2, r1
 800d7ea:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800d7ee:	fb02 f303 	mul.w	r3, r2, r3
 800d7f2:	7f7a      	ldrb	r2, [r7, #29]
 800d7f4:	f107 0120 	add.w	r1, r7, #32
 800d7f8:	440a      	add	r2, r1
 800d7fa:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800d7fe:	fb93 f3f2 	sdiv	r3, r3, r2
 800d802:	b29a      	uxth	r2, r3
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d80a:	bf00      	nop
 800d80c:	3724      	adds	r7, #36	; 0x24
 800d80e:	46bd      	mov	sp, r7
 800d810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d814:	4770      	bx	lr
 800d816:	bf00      	nop
 800d818:	08017130 	.word	0x08017130
 800d81c:	08017138 	.word	0x08017138

0800d820 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800d820:	b084      	sub	sp, #16
 800d822:	b480      	push	{r7}
 800d824:	b085      	sub	sp, #20
 800d826:	af00      	add	r7, sp, #0
 800d828:	6078      	str	r0, [r7, #4]
 800d82a:	f107 001c 	add.w	r0, r7, #28
 800d82e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800d832:	2300      	movs	r3, #0
 800d834:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800d836:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800d838:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800d83a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800d83c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800d83e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800d840:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800d842:	431a      	orrs	r2, r3
             Init.ClockDiv
 800d844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800d846:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800d848:	68fa      	ldr	r2, [r7, #12]
 800d84a:	4313      	orrs	r3, r2
 800d84c:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	685a      	ldr	r2, [r3, #4]
 800d852:	4b07      	ldr	r3, [pc, #28]	; (800d870 <SDMMC_Init+0x50>)
 800d854:	4013      	ands	r3, r2
 800d856:	68fa      	ldr	r2, [r7, #12]
 800d858:	431a      	orrs	r2, r3
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800d85e:	2300      	movs	r3, #0
}
 800d860:	4618      	mov	r0, r3
 800d862:	3714      	adds	r7, #20
 800d864:	46bd      	mov	sp, r7
 800d866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d86a:	b004      	add	sp, #16
 800d86c:	4770      	bx	lr
 800d86e:	bf00      	nop
 800d870:	ffc02c00 	.word	0xffc02c00

0800d874 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800d874:	b480      	push	{r7}
 800d876:	b083      	sub	sp, #12
 800d878:	af00      	add	r7, sp, #0
 800d87a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800d882:	4618      	mov	r0, r3
 800d884:	370c      	adds	r7, #12
 800d886:	46bd      	mov	sp, r7
 800d888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d88c:	4770      	bx	lr

0800d88e <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800d88e:	b480      	push	{r7}
 800d890:	b083      	sub	sp, #12
 800d892:	af00      	add	r7, sp, #0
 800d894:	6078      	str	r0, [r7, #4]
 800d896:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800d898:	683b      	ldr	r3, [r7, #0]
 800d89a:	681a      	ldr	r2, [r3, #0]
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d8a2:	2300      	movs	r3, #0
}
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	370c      	adds	r7, #12
 800d8a8:	46bd      	mov	sp, r7
 800d8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ae:	4770      	bx	lr

0800d8b0 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800d8b0:	b480      	push	{r7}
 800d8b2:	b083      	sub	sp, #12
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	f043 0203 	orr.w	r2, r3, #3
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800d8c4:	2300      	movs	r3, #0
}
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	370c      	adds	r7, #12
 800d8ca:	46bd      	mov	sp, r7
 800d8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d0:	4770      	bx	lr

0800d8d2 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800d8d2:	b480      	push	{r7}
 800d8d4:	b083      	sub	sp, #12
 800d8d6:	af00      	add	r7, sp, #0
 800d8d8:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	f003 0303 	and.w	r3, r3, #3
}
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	370c      	adds	r7, #12
 800d8e6:	46bd      	mov	sp, r7
 800d8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ec:	4770      	bx	lr
	...

0800d8f0 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800d8f0:	b480      	push	{r7}
 800d8f2:	b085      	sub	sp, #20
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	6078      	str	r0, [r7, #4]
 800d8f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d8fa:	2300      	movs	r3, #0
 800d8fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800d8fe:	683b      	ldr	r3, [r7, #0]
 800d900:	681a      	ldr	r2, [r3, #0]
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d906:	683b      	ldr	r3, [r7, #0]
 800d908:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800d90a:	683b      	ldr	r3, [r7, #0]
 800d90c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d90e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800d910:	683b      	ldr	r3, [r7, #0]
 800d912:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800d914:	431a      	orrs	r2, r3
                       Command->CPSM);
 800d916:	683b      	ldr	r3, [r7, #0]
 800d918:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800d91a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d91c:	68fa      	ldr	r2, [r7, #12]
 800d91e:	4313      	orrs	r3, r2
 800d920:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	68da      	ldr	r2, [r3, #12]
 800d926:	4b06      	ldr	r3, [pc, #24]	; (800d940 <SDMMC_SendCommand+0x50>)
 800d928:	4013      	ands	r3, r2
 800d92a:	68fa      	ldr	r2, [r7, #12]
 800d92c:	431a      	orrs	r2, r3
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d932:	2300      	movs	r3, #0
}
 800d934:	4618      	mov	r0, r3
 800d936:	3714      	adds	r7, #20
 800d938:	46bd      	mov	sp, r7
 800d93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93e:	4770      	bx	lr
 800d940:	fffee0c0 	.word	0xfffee0c0

0800d944 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800d944:	b480      	push	{r7}
 800d946:	b083      	sub	sp, #12
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	691b      	ldr	r3, [r3, #16]
 800d950:	b2db      	uxtb	r3, r3
}
 800d952:	4618      	mov	r0, r3
 800d954:	370c      	adds	r7, #12
 800d956:	46bd      	mov	sp, r7
 800d958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d95c:	4770      	bx	lr

0800d95e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800d95e:	b480      	push	{r7}
 800d960:	b085      	sub	sp, #20
 800d962:	af00      	add	r7, sp, #0
 800d964:	6078      	str	r0, [r7, #4]
 800d966:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	3314      	adds	r3, #20
 800d96c:	461a      	mov	r2, r3
 800d96e:	683b      	ldr	r3, [r7, #0]
 800d970:	4413      	add	r3, r2
 800d972:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	681b      	ldr	r3, [r3, #0]
}
 800d978:	4618      	mov	r0, r3
 800d97a:	3714      	adds	r7, #20
 800d97c:	46bd      	mov	sp, r7
 800d97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d982:	4770      	bx	lr

0800d984 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800d984:	b480      	push	{r7}
 800d986:	b085      	sub	sp, #20
 800d988:	af00      	add	r7, sp, #0
 800d98a:	6078      	str	r0, [r7, #4]
 800d98c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d98e:	2300      	movs	r3, #0
 800d990:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800d992:	683b      	ldr	r3, [r7, #0]
 800d994:	681a      	ldr	r2, [r3, #0]
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800d99a:	683b      	ldr	r3, [r7, #0]
 800d99c:	685a      	ldr	r2, [r3, #4]
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d9a2:	683b      	ldr	r3, [r7, #0]
 800d9a4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800d9a6:	683b      	ldr	r3, [r7, #0]
 800d9a8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d9aa:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800d9ac:	683b      	ldr	r3, [r7, #0]
 800d9ae:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800d9b0:	431a      	orrs	r2, r3
                       Data->DPSM);
 800d9b2:	683b      	ldr	r3, [r7, #0]
 800d9b4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800d9b6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d9b8:	68fa      	ldr	r2, [r7, #12]
 800d9ba:	4313      	orrs	r3, r2
 800d9bc:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9c2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	431a      	orrs	r2, r3
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800d9ce:	2300      	movs	r3, #0

}
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	3714      	adds	r7, #20
 800d9d4:	46bd      	mov	sp, r7
 800d9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9da:	4770      	bx	lr

0800d9dc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b088      	sub	sp, #32
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
 800d9e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800d9e6:	683b      	ldr	r3, [r7, #0]
 800d9e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800d9ea:	2310      	movs	r3, #16
 800d9ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d9ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d9f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d9f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d9fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d9fe:	f107 0308 	add.w	r3, r7, #8
 800da02:	4619      	mov	r1, r3
 800da04:	6878      	ldr	r0, [r7, #4]
 800da06:	f7ff ff73 	bl	800d8f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800da0a:	f241 3288 	movw	r2, #5000	; 0x1388
 800da0e:	2110      	movs	r1, #16
 800da10:	6878      	ldr	r0, [r7, #4]
 800da12:	f000 faaf 	bl	800df74 <SDMMC_GetCmdResp1>
 800da16:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800da18:	69fb      	ldr	r3, [r7, #28]
}
 800da1a:	4618      	mov	r0, r3
 800da1c:	3720      	adds	r7, #32
 800da1e:	46bd      	mov	sp, r7
 800da20:	bd80      	pop	{r7, pc}

0800da22 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800da22:	b580      	push	{r7, lr}
 800da24:	b088      	sub	sp, #32
 800da26:	af00      	add	r7, sp, #0
 800da28:	6078      	str	r0, [r7, #4]
 800da2a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800da2c:	683b      	ldr	r3, [r7, #0]
 800da2e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800da30:	2311      	movs	r3, #17
 800da32:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800da34:	f44f 7380 	mov.w	r3, #256	; 0x100
 800da38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800da3a:	2300      	movs	r3, #0
 800da3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800da3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800da42:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800da44:	f107 0308 	add.w	r3, r7, #8
 800da48:	4619      	mov	r1, r3
 800da4a:	6878      	ldr	r0, [r7, #4]
 800da4c:	f7ff ff50 	bl	800d8f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800da50:	f241 3288 	movw	r2, #5000	; 0x1388
 800da54:	2111      	movs	r1, #17
 800da56:	6878      	ldr	r0, [r7, #4]
 800da58:	f000 fa8c 	bl	800df74 <SDMMC_GetCmdResp1>
 800da5c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800da5e:	69fb      	ldr	r3, [r7, #28]
}
 800da60:	4618      	mov	r0, r3
 800da62:	3720      	adds	r7, #32
 800da64:	46bd      	mov	sp, r7
 800da66:	bd80      	pop	{r7, pc}

0800da68 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800da68:	b580      	push	{r7, lr}
 800da6a:	b088      	sub	sp, #32
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	6078      	str	r0, [r7, #4]
 800da70:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800da72:	683b      	ldr	r3, [r7, #0]
 800da74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800da76:	2312      	movs	r3, #18
 800da78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800da7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800da7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800da80:	2300      	movs	r3, #0
 800da82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800da84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800da88:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800da8a:	f107 0308 	add.w	r3, r7, #8
 800da8e:	4619      	mov	r1, r3
 800da90:	6878      	ldr	r0, [r7, #4]
 800da92:	f7ff ff2d 	bl	800d8f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800da96:	f241 3288 	movw	r2, #5000	; 0x1388
 800da9a:	2112      	movs	r1, #18
 800da9c:	6878      	ldr	r0, [r7, #4]
 800da9e:	f000 fa69 	bl	800df74 <SDMMC_GetCmdResp1>
 800daa2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800daa4:	69fb      	ldr	r3, [r7, #28]
}
 800daa6:	4618      	mov	r0, r3
 800daa8:	3720      	adds	r7, #32
 800daaa:	46bd      	mov	sp, r7
 800daac:	bd80      	pop	{r7, pc}

0800daae <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800daae:	b580      	push	{r7, lr}
 800dab0:	b088      	sub	sp, #32
 800dab2:	af00      	add	r7, sp, #0
 800dab4:	6078      	str	r0, [r7, #4]
 800dab6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800dab8:	683b      	ldr	r3, [r7, #0]
 800daba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800dabc:	2318      	movs	r3, #24
 800dabe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dac0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dac4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dac6:	2300      	movs	r3, #0
 800dac8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800daca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dace:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dad0:	f107 0308 	add.w	r3, r7, #8
 800dad4:	4619      	mov	r1, r3
 800dad6:	6878      	ldr	r0, [r7, #4]
 800dad8:	f7ff ff0a 	bl	800d8f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800dadc:	f241 3288 	movw	r2, #5000	; 0x1388
 800dae0:	2118      	movs	r1, #24
 800dae2:	6878      	ldr	r0, [r7, #4]
 800dae4:	f000 fa46 	bl	800df74 <SDMMC_GetCmdResp1>
 800dae8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800daea:	69fb      	ldr	r3, [r7, #28]
}
 800daec:	4618      	mov	r0, r3
 800daee:	3720      	adds	r7, #32
 800daf0:	46bd      	mov	sp, r7
 800daf2:	bd80      	pop	{r7, pc}

0800daf4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800daf4:	b580      	push	{r7, lr}
 800daf6:	b088      	sub	sp, #32
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	6078      	str	r0, [r7, #4]
 800dafc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800dafe:	683b      	ldr	r3, [r7, #0]
 800db00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800db02:	2319      	movs	r3, #25
 800db04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800db06:	f44f 7380 	mov.w	r3, #256	; 0x100
 800db0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800db0c:	2300      	movs	r3, #0
 800db0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800db10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800db14:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800db16:	f107 0308 	add.w	r3, r7, #8
 800db1a:	4619      	mov	r1, r3
 800db1c:	6878      	ldr	r0, [r7, #4]
 800db1e:	f7ff fee7 	bl	800d8f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800db22:	f241 3288 	movw	r2, #5000	; 0x1388
 800db26:	2119      	movs	r1, #25
 800db28:	6878      	ldr	r0, [r7, #4]
 800db2a:	f000 fa23 	bl	800df74 <SDMMC_GetCmdResp1>
 800db2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800db30:	69fb      	ldr	r3, [r7, #28]
}
 800db32:	4618      	mov	r0, r3
 800db34:	3720      	adds	r7, #32
 800db36:	46bd      	mov	sp, r7
 800db38:	bd80      	pop	{r7, pc}
	...

0800db3c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800db3c:	b580      	push	{r7, lr}
 800db3e:	b088      	sub	sp, #32
 800db40:	af00      	add	r7, sp, #0
 800db42:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800db44:	2300      	movs	r3, #0
 800db46:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800db48:	230c      	movs	r3, #12
 800db4a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800db4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800db50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800db52:	2300      	movs	r3, #0
 800db54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800db56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800db5a:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	68db      	ldr	r3, [r3, #12]
 800db60:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	68db      	ldr	r3, [r3, #12]
 800db6c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800db74:	f107 0308 	add.w	r3, r7, #8
 800db78:	4619      	mov	r1, r3
 800db7a:	6878      	ldr	r0, [r7, #4]
 800db7c:	f7ff feb8 	bl	800d8f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800db80:	4a0b      	ldr	r2, [pc, #44]	; (800dbb0 <SDMMC_CmdStopTransfer+0x74>)
 800db82:	210c      	movs	r1, #12
 800db84:	6878      	ldr	r0, [r7, #4]
 800db86:	f000 f9f5 	bl	800df74 <SDMMC_GetCmdResp1>
 800db8a:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	68db      	ldr	r3, [r3, #12]
 800db90:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800db98:	69fb      	ldr	r3, [r7, #28]
 800db9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800db9e:	d101      	bne.n	800dba4 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800dba0:	2300      	movs	r3, #0
 800dba2:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800dba4:	69fb      	ldr	r3, [r7, #28]
}
 800dba6:	4618      	mov	r0, r3
 800dba8:	3720      	adds	r7, #32
 800dbaa:	46bd      	mov	sp, r7
 800dbac:	bd80      	pop	{r7, pc}
 800dbae:	bf00      	nop
 800dbb0:	05f5e100 	.word	0x05f5e100

0800dbb4 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	b08a      	sub	sp, #40	; 0x28
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	60f8      	str	r0, [r7, #12]
 800dbbc:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800dbc0:	683b      	ldr	r3, [r7, #0]
 800dbc2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800dbc4:	2307      	movs	r3, #7
 800dbc6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dbc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dbcc:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dbce:	2300      	movs	r3, #0
 800dbd0:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dbd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dbd6:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dbd8:	f107 0310 	add.w	r3, r7, #16
 800dbdc:	4619      	mov	r1, r3
 800dbde:	68f8      	ldr	r0, [r7, #12]
 800dbe0:	f7ff fe86 	bl	800d8f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800dbe4:	f241 3288 	movw	r2, #5000	; 0x1388
 800dbe8:	2107      	movs	r1, #7
 800dbea:	68f8      	ldr	r0, [r7, #12]
 800dbec:	f000 f9c2 	bl	800df74 <SDMMC_GetCmdResp1>
 800dbf0:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800dbf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	3728      	adds	r7, #40	; 0x28
 800dbf8:	46bd      	mov	sp, r7
 800dbfa:	bd80      	pop	{r7, pc}

0800dbfc <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	b088      	sub	sp, #32
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800dc04:	2300      	movs	r3, #0
 800dc06:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800dc08:	2300      	movs	r3, #0
 800dc0a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800dc0c:	2300      	movs	r3, #0
 800dc0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dc10:	2300      	movs	r3, #0
 800dc12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dc14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dc18:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dc1a:	f107 0308 	add.w	r3, r7, #8
 800dc1e:	4619      	mov	r1, r3
 800dc20:	6878      	ldr	r0, [r7, #4]
 800dc22:	f7ff fe65 	bl	800d8f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800dc26:	6878      	ldr	r0, [r7, #4]
 800dc28:	f000 f976 	bl	800df18 <SDMMC_GetCmdError>
 800dc2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dc2e:	69fb      	ldr	r3, [r7, #28]
}
 800dc30:	4618      	mov	r0, r3
 800dc32:	3720      	adds	r7, #32
 800dc34:	46bd      	mov	sp, r7
 800dc36:	bd80      	pop	{r7, pc}

0800dc38 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800dc38:	b580      	push	{r7, lr}
 800dc3a:	b088      	sub	sp, #32
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800dc40:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800dc44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800dc46:	2308      	movs	r3, #8
 800dc48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dc4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dc4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dc50:	2300      	movs	r3, #0
 800dc52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dc54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dc58:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dc5a:	f107 0308 	add.w	r3, r7, #8
 800dc5e:	4619      	mov	r1, r3
 800dc60:	6878      	ldr	r0, [r7, #4]
 800dc62:	f7ff fe45 	bl	800d8f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800dc66:	6878      	ldr	r0, [r7, #4]
 800dc68:	f000 fb78 	bl	800e35c <SDMMC_GetCmdResp7>
 800dc6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dc6e:	69fb      	ldr	r3, [r7, #28]
}
 800dc70:	4618      	mov	r0, r3
 800dc72:	3720      	adds	r7, #32
 800dc74:	46bd      	mov	sp, r7
 800dc76:	bd80      	pop	{r7, pc}

0800dc78 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800dc78:	b580      	push	{r7, lr}
 800dc7a:	b088      	sub	sp, #32
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	6078      	str	r0, [r7, #4]
 800dc80:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800dc82:	683b      	ldr	r3, [r7, #0]
 800dc84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800dc86:	2337      	movs	r3, #55	; 0x37
 800dc88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dc8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dc8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dc90:	2300      	movs	r3, #0
 800dc92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dc94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dc98:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dc9a:	f107 0308 	add.w	r3, r7, #8
 800dc9e:	4619      	mov	r1, r3
 800dca0:	6878      	ldr	r0, [r7, #4]
 800dca2:	f7ff fe25 	bl	800d8f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800dca6:	f241 3288 	movw	r2, #5000	; 0x1388
 800dcaa:	2137      	movs	r1, #55	; 0x37
 800dcac:	6878      	ldr	r0, [r7, #4]
 800dcae:	f000 f961 	bl	800df74 <SDMMC_GetCmdResp1>
 800dcb2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dcb4:	69fb      	ldr	r3, [r7, #28]
}
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	3720      	adds	r7, #32
 800dcba:	46bd      	mov	sp, r7
 800dcbc:	bd80      	pop	{r7, pc}

0800dcbe <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800dcbe:	b580      	push	{r7, lr}
 800dcc0:	b088      	sub	sp, #32
 800dcc2:	af00      	add	r7, sp, #0
 800dcc4:	6078      	str	r0, [r7, #4]
 800dcc6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800dcc8:	683b      	ldr	r3, [r7, #0]
 800dcca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800dccc:	2329      	movs	r3, #41	; 0x29
 800dcce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dcd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dcd4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dcda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dcde:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dce0:	f107 0308 	add.w	r3, r7, #8
 800dce4:	4619      	mov	r1, r3
 800dce6:	6878      	ldr	r0, [r7, #4]
 800dce8:	f7ff fe02 	bl	800d8f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800dcec:	6878      	ldr	r0, [r7, #4]
 800dcee:	f000 fa7d 	bl	800e1ec <SDMMC_GetCmdResp3>
 800dcf2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dcf4:	69fb      	ldr	r3, [r7, #28]
}
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	3720      	adds	r7, #32
 800dcfa:	46bd      	mov	sp, r7
 800dcfc:	bd80      	pop	{r7, pc}

0800dcfe <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800dcfe:	b580      	push	{r7, lr}
 800dd00:	b088      	sub	sp, #32
 800dd02:	af00      	add	r7, sp, #0
 800dd04:	6078      	str	r0, [r7, #4]
 800dd06:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800dd08:	683b      	ldr	r3, [r7, #0]
 800dd0a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800dd0c:	2306      	movs	r3, #6
 800dd0e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dd10:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dd14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dd16:	2300      	movs	r3, #0
 800dd18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dd1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dd1e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dd20:	f107 0308 	add.w	r3, r7, #8
 800dd24:	4619      	mov	r1, r3
 800dd26:	6878      	ldr	r0, [r7, #4]
 800dd28:	f7ff fde2 	bl	800d8f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800dd2c:	f241 3288 	movw	r2, #5000	; 0x1388
 800dd30:	2106      	movs	r1, #6
 800dd32:	6878      	ldr	r0, [r7, #4]
 800dd34:	f000 f91e 	bl	800df74 <SDMMC_GetCmdResp1>
 800dd38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dd3a:	69fb      	ldr	r3, [r7, #28]
}
 800dd3c:	4618      	mov	r0, r3
 800dd3e:	3720      	adds	r7, #32
 800dd40:	46bd      	mov	sp, r7
 800dd42:	bd80      	pop	{r7, pc}

0800dd44 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b088      	sub	sp, #32
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800dd50:	2333      	movs	r3, #51	; 0x33
 800dd52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dd54:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dd58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dd5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dd62:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dd64:	f107 0308 	add.w	r3, r7, #8
 800dd68:	4619      	mov	r1, r3
 800dd6a:	6878      	ldr	r0, [r7, #4]
 800dd6c:	f7ff fdc0 	bl	800d8f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800dd70:	f241 3288 	movw	r2, #5000	; 0x1388
 800dd74:	2133      	movs	r1, #51	; 0x33
 800dd76:	6878      	ldr	r0, [r7, #4]
 800dd78:	f000 f8fc 	bl	800df74 <SDMMC_GetCmdResp1>
 800dd7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dd7e:	69fb      	ldr	r3, [r7, #28]
}
 800dd80:	4618      	mov	r0, r3
 800dd82:	3720      	adds	r7, #32
 800dd84:	46bd      	mov	sp, r7
 800dd86:	bd80      	pop	{r7, pc}

0800dd88 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800dd88:	b580      	push	{r7, lr}
 800dd8a:	b088      	sub	sp, #32
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800dd90:	2300      	movs	r3, #0
 800dd92:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800dd94:	2302      	movs	r3, #2
 800dd96:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800dd98:	f44f 7340 	mov.w	r3, #768	; 0x300
 800dd9c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dd9e:	2300      	movs	r3, #0
 800dda0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dda2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dda6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dda8:	f107 0308 	add.w	r3, r7, #8
 800ddac:	4619      	mov	r1, r3
 800ddae:	6878      	ldr	r0, [r7, #4]
 800ddb0:	f7ff fd9e 	bl	800d8f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ddb4:	6878      	ldr	r0, [r7, #4]
 800ddb6:	f000 f9cf 	bl	800e158 <SDMMC_GetCmdResp2>
 800ddba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ddbc:	69fb      	ldr	r3, [r7, #28]
}
 800ddbe:	4618      	mov	r0, r3
 800ddc0:	3720      	adds	r7, #32
 800ddc2:	46bd      	mov	sp, r7
 800ddc4:	bd80      	pop	{r7, pc}

0800ddc6 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ddc6:	b580      	push	{r7, lr}
 800ddc8:	b088      	sub	sp, #32
 800ddca:	af00      	add	r7, sp, #0
 800ddcc:	6078      	str	r0, [r7, #4]
 800ddce:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800ddd0:	683b      	ldr	r3, [r7, #0]
 800ddd2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800ddd4:	2309      	movs	r3, #9
 800ddd6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ddd8:	f44f 7340 	mov.w	r3, #768	; 0x300
 800dddc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ddde:	2300      	movs	r3, #0
 800dde0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dde2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dde6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dde8:	f107 0308 	add.w	r3, r7, #8
 800ddec:	4619      	mov	r1, r3
 800ddee:	6878      	ldr	r0, [r7, #4]
 800ddf0:	f7ff fd7e 	bl	800d8f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ddf4:	6878      	ldr	r0, [r7, #4]
 800ddf6:	f000 f9af 	bl	800e158 <SDMMC_GetCmdResp2>
 800ddfa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ddfc:	69fb      	ldr	r3, [r7, #28]
}
 800ddfe:	4618      	mov	r0, r3
 800de00:	3720      	adds	r7, #32
 800de02:	46bd      	mov	sp, r7
 800de04:	bd80      	pop	{r7, pc}

0800de06 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800de06:	b580      	push	{r7, lr}
 800de08:	b088      	sub	sp, #32
 800de0a:	af00      	add	r7, sp, #0
 800de0c:	6078      	str	r0, [r7, #4]
 800de0e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800de10:	2300      	movs	r3, #0
 800de12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800de14:	2303      	movs	r3, #3
 800de16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800de18:	f44f 7380 	mov.w	r3, #256	; 0x100
 800de1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800de1e:	2300      	movs	r3, #0
 800de20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800de22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800de26:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800de28:	f107 0308 	add.w	r3, r7, #8
 800de2c:	4619      	mov	r1, r3
 800de2e:	6878      	ldr	r0, [r7, #4]
 800de30:	f7ff fd5e 	bl	800d8f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800de34:	683a      	ldr	r2, [r7, #0]
 800de36:	2103      	movs	r1, #3
 800de38:	6878      	ldr	r0, [r7, #4]
 800de3a:	f000 fa17 	bl	800e26c <SDMMC_GetCmdResp6>
 800de3e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800de40:	69fb      	ldr	r3, [r7, #28]
}
 800de42:	4618      	mov	r0, r3
 800de44:	3720      	adds	r7, #32
 800de46:	46bd      	mov	sp, r7
 800de48:	bd80      	pop	{r7, pc}

0800de4a <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800de4a:	b580      	push	{r7, lr}
 800de4c:	b088      	sub	sp, #32
 800de4e:	af00      	add	r7, sp, #0
 800de50:	6078      	str	r0, [r7, #4]
 800de52:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800de54:	683b      	ldr	r3, [r7, #0]
 800de56:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800de58:	230d      	movs	r3, #13
 800de5a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800de5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800de60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800de62:	2300      	movs	r3, #0
 800de64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800de66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800de6a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800de6c:	f107 0308 	add.w	r3, r7, #8
 800de70:	4619      	mov	r1, r3
 800de72:	6878      	ldr	r0, [r7, #4]
 800de74:	f7ff fd3c 	bl	800d8f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800de78:	f241 3288 	movw	r2, #5000	; 0x1388
 800de7c:	210d      	movs	r1, #13
 800de7e:	6878      	ldr	r0, [r7, #4]
 800de80:	f000 f878 	bl	800df74 <SDMMC_GetCmdResp1>
 800de84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800de86:	69fb      	ldr	r3, [r7, #28]
}
 800de88:	4618      	mov	r0, r3
 800de8a:	3720      	adds	r7, #32
 800de8c:	46bd      	mov	sp, r7
 800de8e:	bd80      	pop	{r7, pc}

0800de90 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800de90:	b580      	push	{r7, lr}
 800de92:	b088      	sub	sp, #32
 800de94:	af00      	add	r7, sp, #0
 800de96:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800de98:	2300      	movs	r3, #0
 800de9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800de9c:	230d      	movs	r3, #13
 800de9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dea0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dea4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dea6:	2300      	movs	r3, #0
 800dea8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800deaa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800deae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800deb0:	f107 0308 	add.w	r3, r7, #8
 800deb4:	4619      	mov	r1, r3
 800deb6:	6878      	ldr	r0, [r7, #4]
 800deb8:	f7ff fd1a 	bl	800d8f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800debc:	f241 3288 	movw	r2, #5000	; 0x1388
 800dec0:	210d      	movs	r1, #13
 800dec2:	6878      	ldr	r0, [r7, #4]
 800dec4:	f000 f856 	bl	800df74 <SDMMC_GetCmdResp1>
 800dec8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800deca:	69fb      	ldr	r3, [r7, #28]
}
 800decc:	4618      	mov	r0, r3
 800dece:	3720      	adds	r7, #32
 800ded0:	46bd      	mov	sp, r7
 800ded2:	bd80      	pop	{r7, pc}

0800ded4 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800ded4:	b580      	push	{r7, lr}
 800ded6:	b088      	sub	sp, #32
 800ded8:	af00      	add	r7, sp, #0
 800deda:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800dedc:	2300      	movs	r3, #0
 800dede:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800dee0:	230b      	movs	r3, #11
 800dee2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dee4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dee8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800deea:	2300      	movs	r3, #0
 800deec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800deee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800def2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800def4:	f107 0308 	add.w	r3, r7, #8
 800def8:	4619      	mov	r1, r3
 800defa:	6878      	ldr	r0, [r7, #4]
 800defc:	f7ff fcf8 	bl	800d8f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800df00:	f241 3288 	movw	r2, #5000	; 0x1388
 800df04:	210b      	movs	r1, #11
 800df06:	6878      	ldr	r0, [r7, #4]
 800df08:	f000 f834 	bl	800df74 <SDMMC_GetCmdResp1>
 800df0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800df0e:	69fb      	ldr	r3, [r7, #28]
}
 800df10:	4618      	mov	r0, r3
 800df12:	3720      	adds	r7, #32
 800df14:	46bd      	mov	sp, r7
 800df16:	bd80      	pop	{r7, pc}

0800df18 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800df18:	b480      	push	{r7}
 800df1a:	b085      	sub	sp, #20
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800df20:	4b11      	ldr	r3, [pc, #68]	; (800df68 <SDMMC_GetCmdError+0x50>)
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	4a11      	ldr	r2, [pc, #68]	; (800df6c <SDMMC_GetCmdError+0x54>)
 800df26:	fba2 2303 	umull	r2, r3, r2, r3
 800df2a:	0a5b      	lsrs	r3, r3, #9
 800df2c:	f241 3288 	movw	r2, #5000	; 0x1388
 800df30:	fb02 f303 	mul.w	r3, r2, r3
 800df34:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	1e5a      	subs	r2, r3, #1
 800df3a:	60fa      	str	r2, [r7, #12]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d102      	bne.n	800df46 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800df40:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800df44:	e009      	b.n	800df5a <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d0f1      	beq.n	800df36 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	4a06      	ldr	r2, [pc, #24]	; (800df70 <SDMMC_GetCmdError+0x58>)
 800df56:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800df58:	2300      	movs	r3, #0
}
 800df5a:	4618      	mov	r0, r3
 800df5c:	3714      	adds	r7, #20
 800df5e:	46bd      	mov	sp, r7
 800df60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df64:	4770      	bx	lr
 800df66:	bf00      	nop
 800df68:	24000000 	.word	0x24000000
 800df6c:	10624dd3 	.word	0x10624dd3
 800df70:	002000c5 	.word	0x002000c5

0800df74 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800df74:	b580      	push	{r7, lr}
 800df76:	b088      	sub	sp, #32
 800df78:	af00      	add	r7, sp, #0
 800df7a:	60f8      	str	r0, [r7, #12]
 800df7c:	460b      	mov	r3, r1
 800df7e:	607a      	str	r2, [r7, #4]
 800df80:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800df82:	4b70      	ldr	r3, [pc, #448]	; (800e144 <SDMMC_GetCmdResp1+0x1d0>)
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	4a70      	ldr	r2, [pc, #448]	; (800e148 <SDMMC_GetCmdResp1+0x1d4>)
 800df88:	fba2 2303 	umull	r2, r3, r2, r3
 800df8c:	0a5a      	lsrs	r2, r3, #9
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	fb02 f303 	mul.w	r3, r2, r3
 800df94:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800df96:	69fb      	ldr	r3, [r7, #28]
 800df98:	1e5a      	subs	r2, r3, #1
 800df9a:	61fa      	str	r2, [r7, #28]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d102      	bne.n	800dfa6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dfa0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dfa4:	e0c9      	b.n	800e13a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfaa:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800dfac:	69ba      	ldr	r2, [r7, #24]
 800dfae:	4b67      	ldr	r3, [pc, #412]	; (800e14c <SDMMC_GetCmdResp1+0x1d8>)
 800dfb0:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d0ef      	beq.n	800df96 <SDMMC_GetCmdResp1+0x22>
 800dfb6:	69bb      	ldr	r3, [r7, #24]
 800dfb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d1ea      	bne.n	800df96 <SDMMC_GetCmdResp1+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfc4:	f003 0304 	and.w	r3, r3, #4
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d004      	beq.n	800dfd6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	2204      	movs	r2, #4
 800dfd0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dfd2:	2304      	movs	r3, #4
 800dfd4:	e0b1      	b.n	800e13a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfda:	f003 0301 	and.w	r3, r3, #1
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d004      	beq.n	800dfec <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	2201      	movs	r2, #1
 800dfe6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dfe8:	2301      	movs	r3, #1
 800dfea:	e0a6      	b.n	800e13a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	4a58      	ldr	r2, [pc, #352]	; (800e150 <SDMMC_GetCmdResp1+0x1dc>)
 800dff0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800dff2:	68f8      	ldr	r0, [r7, #12]
 800dff4:	f7ff fca6 	bl	800d944 <SDMMC_GetCommandResponse>
 800dff8:	4603      	mov	r3, r0
 800dffa:	461a      	mov	r2, r3
 800dffc:	7afb      	ldrb	r3, [r7, #11]
 800dffe:	4293      	cmp	r3, r2
 800e000:	d001      	beq.n	800e006 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e002:	2301      	movs	r3, #1
 800e004:	e099      	b.n	800e13a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800e006:	2100      	movs	r1, #0
 800e008:	68f8      	ldr	r0, [r7, #12]
 800e00a:	f7ff fca8 	bl	800d95e <SDMMC_GetResponse>
 800e00e:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e010:	697a      	ldr	r2, [r7, #20]
 800e012:	4b50      	ldr	r3, [pc, #320]	; (800e154 <SDMMC_GetCmdResp1+0x1e0>)
 800e014:	4013      	ands	r3, r2
 800e016:	2b00      	cmp	r3, #0
 800e018:	d101      	bne.n	800e01e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800e01a:	2300      	movs	r3, #0
 800e01c:	e08d      	b.n	800e13a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e01e:	697b      	ldr	r3, [r7, #20]
 800e020:	2b00      	cmp	r3, #0
 800e022:	da02      	bge.n	800e02a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e024:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e028:	e087      	b.n	800e13a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e02a:	697b      	ldr	r3, [r7, #20]
 800e02c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e030:	2b00      	cmp	r3, #0
 800e032:	d001      	beq.n	800e038 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e034:	2340      	movs	r3, #64	; 0x40
 800e036:	e080      	b.n	800e13a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e038:	697b      	ldr	r3, [r7, #20]
 800e03a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d001      	beq.n	800e046 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e042:	2380      	movs	r3, #128	; 0x80
 800e044:	e079      	b.n	800e13a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e046:	697b      	ldr	r3, [r7, #20]
 800e048:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d002      	beq.n	800e056 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e050:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e054:	e071      	b.n	800e13a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e056:	697b      	ldr	r3, [r7, #20]
 800e058:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d002      	beq.n	800e066 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e060:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e064:	e069      	b.n	800e13a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e066:	697b      	ldr	r3, [r7, #20]
 800e068:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d002      	beq.n	800e076 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e070:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e074:	e061      	b.n	800e13a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e076:	697b      	ldr	r3, [r7, #20]
 800e078:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d002      	beq.n	800e086 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e080:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e084:	e059      	b.n	800e13a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e086:	697b      	ldr	r3, [r7, #20]
 800e088:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d002      	beq.n	800e096 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e090:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e094:	e051      	b.n	800e13a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e096:	697b      	ldr	r3, [r7, #20]
 800e098:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d002      	beq.n	800e0a6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e0a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e0a4:	e049      	b.n	800e13a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e0a6:	697b      	ldr	r3, [r7, #20]
 800e0a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d002      	beq.n	800e0b6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e0b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e0b4:	e041      	b.n	800e13a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e0b6:	697b      	ldr	r3, [r7, #20]
 800e0b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d002      	beq.n	800e0c6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800e0c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e0c4:	e039      	b.n	800e13a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e0c6:	697b      	ldr	r3, [r7, #20]
 800e0c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d002      	beq.n	800e0d6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e0d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e0d4:	e031      	b.n	800e13a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e0d6:	697b      	ldr	r3, [r7, #20]
 800e0d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d002      	beq.n	800e0e6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e0e0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e0e4:	e029      	b.n	800e13a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e0e6:	697b      	ldr	r3, [r7, #20]
 800e0e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d002      	beq.n	800e0f6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e0f0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e0f4:	e021      	b.n	800e13a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e0f6:	697b      	ldr	r3, [r7, #20]
 800e0f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d002      	beq.n	800e106 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e100:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800e104:	e019      	b.n	800e13a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e106:	697b      	ldr	r3, [r7, #20]
 800e108:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d002      	beq.n	800e116 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e110:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800e114:	e011      	b.n	800e13a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e116:	697b      	ldr	r3, [r7, #20]
 800e118:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d002      	beq.n	800e126 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800e120:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e124:	e009      	b.n	800e13a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800e126:	697b      	ldr	r3, [r7, #20]
 800e128:	f003 0308 	and.w	r3, r3, #8
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d002      	beq.n	800e136 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800e130:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800e134:	e001      	b.n	800e13a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e136:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e13a:	4618      	mov	r0, r3
 800e13c:	3720      	adds	r7, #32
 800e13e:	46bd      	mov	sp, r7
 800e140:	bd80      	pop	{r7, pc}
 800e142:	bf00      	nop
 800e144:	24000000 	.word	0x24000000
 800e148:	10624dd3 	.word	0x10624dd3
 800e14c:	00200045 	.word	0x00200045
 800e150:	002000c5 	.word	0x002000c5
 800e154:	fdffe008 	.word	0xfdffe008

0800e158 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800e158:	b480      	push	{r7}
 800e15a:	b085      	sub	sp, #20
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e160:	4b1f      	ldr	r3, [pc, #124]	; (800e1e0 <SDMMC_GetCmdResp2+0x88>)
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	4a1f      	ldr	r2, [pc, #124]	; (800e1e4 <SDMMC_GetCmdResp2+0x8c>)
 800e166:	fba2 2303 	umull	r2, r3, r2, r3
 800e16a:	0a5b      	lsrs	r3, r3, #9
 800e16c:	f241 3288 	movw	r2, #5000	; 0x1388
 800e170:	fb02 f303 	mul.w	r3, r2, r3
 800e174:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	1e5a      	subs	r2, r3, #1
 800e17a:	60fa      	str	r2, [r7, #12]
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d102      	bne.n	800e186 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e180:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e184:	e026      	b.n	800e1d4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e18a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e18c:	68bb      	ldr	r3, [r7, #8]
 800e18e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e192:	2b00      	cmp	r3, #0
 800e194:	d0ef      	beq.n	800e176 <SDMMC_GetCmdResp2+0x1e>
 800e196:	68bb      	ldr	r3, [r7, #8]
 800e198:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d1ea      	bne.n	800e176 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1a4:	f003 0304 	and.w	r3, r3, #4
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d004      	beq.n	800e1b6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	2204      	movs	r2, #4
 800e1b0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e1b2:	2304      	movs	r3, #4
 800e1b4:	e00e      	b.n	800e1d4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1ba:	f003 0301 	and.w	r3, r3, #1
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d004      	beq.n	800e1cc <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	2201      	movs	r2, #1
 800e1c6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e1c8:	2301      	movs	r3, #1
 800e1ca:	e003      	b.n	800e1d4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	4a06      	ldr	r2, [pc, #24]	; (800e1e8 <SDMMC_GetCmdResp2+0x90>)
 800e1d0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e1d2:	2300      	movs	r3, #0
}
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	3714      	adds	r7, #20
 800e1d8:	46bd      	mov	sp, r7
 800e1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1de:	4770      	bx	lr
 800e1e0:	24000000 	.word	0x24000000
 800e1e4:	10624dd3 	.word	0x10624dd3
 800e1e8:	002000c5 	.word	0x002000c5

0800e1ec <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800e1ec:	b480      	push	{r7}
 800e1ee:	b085      	sub	sp, #20
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e1f4:	4b1a      	ldr	r3, [pc, #104]	; (800e260 <SDMMC_GetCmdResp3+0x74>)
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	4a1a      	ldr	r2, [pc, #104]	; (800e264 <SDMMC_GetCmdResp3+0x78>)
 800e1fa:	fba2 2303 	umull	r2, r3, r2, r3
 800e1fe:	0a5b      	lsrs	r3, r3, #9
 800e200:	f241 3288 	movw	r2, #5000	; 0x1388
 800e204:	fb02 f303 	mul.w	r3, r2, r3
 800e208:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	1e5a      	subs	r2, r3, #1
 800e20e:	60fa      	str	r2, [r7, #12]
 800e210:	2b00      	cmp	r3, #0
 800e212:	d102      	bne.n	800e21a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e214:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e218:	e01b      	b.n	800e252 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e21e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e220:	68bb      	ldr	r3, [r7, #8]
 800e222:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e226:	2b00      	cmp	r3, #0
 800e228:	d0ef      	beq.n	800e20a <SDMMC_GetCmdResp3+0x1e>
 800e22a:	68bb      	ldr	r3, [r7, #8]
 800e22c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e230:	2b00      	cmp	r3, #0
 800e232:	d1ea      	bne.n	800e20a <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e238:	f003 0304 	and.w	r3, r3, #4
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d004      	beq.n	800e24a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	2204      	movs	r2, #4
 800e244:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e246:	2304      	movs	r3, #4
 800e248:	e003      	b.n	800e252 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	4a06      	ldr	r2, [pc, #24]	; (800e268 <SDMMC_GetCmdResp3+0x7c>)
 800e24e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e250:	2300      	movs	r3, #0
}
 800e252:	4618      	mov	r0, r3
 800e254:	3714      	adds	r7, #20
 800e256:	46bd      	mov	sp, r7
 800e258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e25c:	4770      	bx	lr
 800e25e:	bf00      	nop
 800e260:	24000000 	.word	0x24000000
 800e264:	10624dd3 	.word	0x10624dd3
 800e268:	002000c5 	.word	0x002000c5

0800e26c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800e26c:	b580      	push	{r7, lr}
 800e26e:	b088      	sub	sp, #32
 800e270:	af00      	add	r7, sp, #0
 800e272:	60f8      	str	r0, [r7, #12]
 800e274:	460b      	mov	r3, r1
 800e276:	607a      	str	r2, [r7, #4]
 800e278:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e27a:	4b35      	ldr	r3, [pc, #212]	; (800e350 <SDMMC_GetCmdResp6+0xe4>)
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	4a35      	ldr	r2, [pc, #212]	; (800e354 <SDMMC_GetCmdResp6+0xe8>)
 800e280:	fba2 2303 	umull	r2, r3, r2, r3
 800e284:	0a5b      	lsrs	r3, r3, #9
 800e286:	f241 3288 	movw	r2, #5000	; 0x1388
 800e28a:	fb02 f303 	mul.w	r3, r2, r3
 800e28e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800e290:	69fb      	ldr	r3, [r7, #28]
 800e292:	1e5a      	subs	r2, r3, #1
 800e294:	61fa      	str	r2, [r7, #28]
 800e296:	2b00      	cmp	r3, #0
 800e298:	d102      	bne.n	800e2a0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e29a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e29e:	e052      	b.n	800e346 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2a4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e2a6:	69bb      	ldr	r3, [r7, #24]
 800e2a8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d0ef      	beq.n	800e290 <SDMMC_GetCmdResp6+0x24>
 800e2b0:	69bb      	ldr	r3, [r7, #24]
 800e2b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d1ea      	bne.n	800e290 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2be:	f003 0304 	and.w	r3, r3, #4
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d004      	beq.n	800e2d0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	2204      	movs	r2, #4
 800e2ca:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e2cc:	2304      	movs	r3, #4
 800e2ce:	e03a      	b.n	800e346 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2d4:	f003 0301 	and.w	r3, r3, #1
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d004      	beq.n	800e2e6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	2201      	movs	r2, #1
 800e2e0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e2e2:	2301      	movs	r3, #1
 800e2e4:	e02f      	b.n	800e346 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e2e6:	68f8      	ldr	r0, [r7, #12]
 800e2e8:	f7ff fb2c 	bl	800d944 <SDMMC_GetCommandResponse>
 800e2ec:	4603      	mov	r3, r0
 800e2ee:	461a      	mov	r2, r3
 800e2f0:	7afb      	ldrb	r3, [r7, #11]
 800e2f2:	4293      	cmp	r3, r2
 800e2f4:	d001      	beq.n	800e2fa <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e2f6:	2301      	movs	r3, #1
 800e2f8:	e025      	b.n	800e346 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	4a16      	ldr	r2, [pc, #88]	; (800e358 <SDMMC_GetCmdResp6+0xec>)
 800e2fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800e300:	2100      	movs	r1, #0
 800e302:	68f8      	ldr	r0, [r7, #12]
 800e304:	f7ff fb2b 	bl	800d95e <SDMMC_GetResponse>
 800e308:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800e30a:	697b      	ldr	r3, [r7, #20]
 800e30c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e310:	2b00      	cmp	r3, #0
 800e312:	d106      	bne.n	800e322 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800e314:	697b      	ldr	r3, [r7, #20]
 800e316:	0c1b      	lsrs	r3, r3, #16
 800e318:	b29a      	uxth	r2, r3
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800e31e:	2300      	movs	r3, #0
 800e320:	e011      	b.n	800e346 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800e322:	697b      	ldr	r3, [r7, #20]
 800e324:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d002      	beq.n	800e332 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e32c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e330:	e009      	b.n	800e346 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800e332:	697b      	ldr	r3, [r7, #20]
 800e334:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d002      	beq.n	800e342 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e33c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e340:	e001      	b.n	800e346 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e342:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e346:	4618      	mov	r0, r3
 800e348:	3720      	adds	r7, #32
 800e34a:	46bd      	mov	sp, r7
 800e34c:	bd80      	pop	{r7, pc}
 800e34e:	bf00      	nop
 800e350:	24000000 	.word	0x24000000
 800e354:	10624dd3 	.word	0x10624dd3
 800e358:	002000c5 	.word	0x002000c5

0800e35c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800e35c:	b480      	push	{r7}
 800e35e:	b085      	sub	sp, #20
 800e360:	af00      	add	r7, sp, #0
 800e362:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e364:	4b22      	ldr	r3, [pc, #136]	; (800e3f0 <SDMMC_GetCmdResp7+0x94>)
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	4a22      	ldr	r2, [pc, #136]	; (800e3f4 <SDMMC_GetCmdResp7+0x98>)
 800e36a:	fba2 2303 	umull	r2, r3, r2, r3
 800e36e:	0a5b      	lsrs	r3, r3, #9
 800e370:	f241 3288 	movw	r2, #5000	; 0x1388
 800e374:	fb02 f303 	mul.w	r3, r2, r3
 800e378:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	1e5a      	subs	r2, r3, #1
 800e37e:	60fa      	str	r2, [r7, #12]
 800e380:	2b00      	cmp	r3, #0
 800e382:	d102      	bne.n	800e38a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e384:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e388:	e02c      	b.n	800e3e4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e38e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e390:	68bb      	ldr	r3, [r7, #8]
 800e392:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e396:	2b00      	cmp	r3, #0
 800e398:	d0ef      	beq.n	800e37a <SDMMC_GetCmdResp7+0x1e>
 800e39a:	68bb      	ldr	r3, [r7, #8]
 800e39c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d1ea      	bne.n	800e37a <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3a8:	f003 0304 	and.w	r3, r3, #4
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d004      	beq.n	800e3ba <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	2204      	movs	r2, #4
 800e3b4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e3b6:	2304      	movs	r3, #4
 800e3b8:	e014      	b.n	800e3e4 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3be:	f003 0301 	and.w	r3, r3, #1
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d004      	beq.n	800e3d0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	2201      	movs	r2, #1
 800e3ca:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e3cc:	2301      	movs	r3, #1
 800e3ce:	e009      	b.n	800e3e4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d002      	beq.n	800e3e2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	2240      	movs	r2, #64	; 0x40
 800e3e0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e3e2:	2300      	movs	r3, #0

}
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	3714      	adds	r7, #20
 800e3e8:	46bd      	mov	sp, r7
 800e3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ee:	4770      	bx	lr
 800e3f0:	24000000 	.word	0x24000000
 800e3f4:	10624dd3 	.word	0x10624dd3

0800e3f8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e3f8:	b084      	sub	sp, #16
 800e3fa:	b580      	push	{r7, lr}
 800e3fc:	b084      	sub	sp, #16
 800e3fe:	af00      	add	r7, sp, #0
 800e400:	6078      	str	r0, [r7, #4]
 800e402:	f107 001c 	add.w	r0, r7, #28
 800e406:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e40a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e40c:	2b01      	cmp	r3, #1
 800e40e:	d120      	bne.n	800e452 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e414:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	68da      	ldr	r2, [r3, #12]
 800e420:	4b25      	ldr	r3, [pc, #148]	; (800e4b8 <USB_CoreInit+0xc0>)
 800e422:	4013      	ands	r3, r2
 800e424:	687a      	ldr	r2, [r7, #4]
 800e426:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	68db      	ldr	r3, [r3, #12]
 800e42c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800e434:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e436:	2b01      	cmp	r3, #1
 800e438:	d105      	bne.n	800e446 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	68db      	ldr	r3, [r3, #12]
 800e43e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800e446:	6878      	ldr	r0, [r7, #4]
 800e448:	f001 fabe 	bl	800f9c8 <USB_CoreReset>
 800e44c:	4603      	mov	r3, r0
 800e44e:	73fb      	strb	r3, [r7, #15]
 800e450:	e01a      	b.n	800e488 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	68db      	ldr	r3, [r3, #12]
 800e456:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800e45e:	6878      	ldr	r0, [r7, #4]
 800e460:	f001 fab2 	bl	800f9c8 <USB_CoreReset>
 800e464:	4603      	mov	r3, r0
 800e466:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800e468:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d106      	bne.n	800e47c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e472:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	639a      	str	r2, [r3, #56]	; 0x38
 800e47a:	e005      	b.n	800e488 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e480:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800e488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e48a:	2b01      	cmp	r3, #1
 800e48c:	d10b      	bne.n	800e4a6 <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	689b      	ldr	r3, [r3, #8]
 800e492:	f043 0206 	orr.w	r2, r3, #6
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	689b      	ldr	r3, [r3, #8]
 800e49e:	f043 0220 	orr.w	r2, r3, #32
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800e4a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4a8:	4618      	mov	r0, r3
 800e4aa:	3710      	adds	r7, #16
 800e4ac:	46bd      	mov	sp, r7
 800e4ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e4b2:	b004      	add	sp, #16
 800e4b4:	4770      	bx	lr
 800e4b6:	bf00      	nop
 800e4b8:	ffbdffbf 	.word	0xffbdffbf

0800e4bc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800e4bc:	b480      	push	{r7}
 800e4be:	b087      	sub	sp, #28
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	60f8      	str	r0, [r7, #12]
 800e4c4:	60b9      	str	r1, [r7, #8]
 800e4c6:	4613      	mov	r3, r2
 800e4c8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800e4ca:	79fb      	ldrb	r3, [r7, #7]
 800e4cc:	2b02      	cmp	r3, #2
 800e4ce:	d165      	bne.n	800e59c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800e4d0:	68bb      	ldr	r3, [r7, #8]
 800e4d2:	4a41      	ldr	r2, [pc, #260]	; (800e5d8 <USB_SetTurnaroundTime+0x11c>)
 800e4d4:	4293      	cmp	r3, r2
 800e4d6:	d906      	bls.n	800e4e6 <USB_SetTurnaroundTime+0x2a>
 800e4d8:	68bb      	ldr	r3, [r7, #8]
 800e4da:	4a40      	ldr	r2, [pc, #256]	; (800e5dc <USB_SetTurnaroundTime+0x120>)
 800e4dc:	4293      	cmp	r3, r2
 800e4de:	d802      	bhi.n	800e4e6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800e4e0:	230f      	movs	r3, #15
 800e4e2:	617b      	str	r3, [r7, #20]
 800e4e4:	e062      	b.n	800e5ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800e4e6:	68bb      	ldr	r3, [r7, #8]
 800e4e8:	4a3c      	ldr	r2, [pc, #240]	; (800e5dc <USB_SetTurnaroundTime+0x120>)
 800e4ea:	4293      	cmp	r3, r2
 800e4ec:	d906      	bls.n	800e4fc <USB_SetTurnaroundTime+0x40>
 800e4ee:	68bb      	ldr	r3, [r7, #8]
 800e4f0:	4a3b      	ldr	r2, [pc, #236]	; (800e5e0 <USB_SetTurnaroundTime+0x124>)
 800e4f2:	4293      	cmp	r3, r2
 800e4f4:	d802      	bhi.n	800e4fc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800e4f6:	230e      	movs	r3, #14
 800e4f8:	617b      	str	r3, [r7, #20]
 800e4fa:	e057      	b.n	800e5ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800e4fc:	68bb      	ldr	r3, [r7, #8]
 800e4fe:	4a38      	ldr	r2, [pc, #224]	; (800e5e0 <USB_SetTurnaroundTime+0x124>)
 800e500:	4293      	cmp	r3, r2
 800e502:	d906      	bls.n	800e512 <USB_SetTurnaroundTime+0x56>
 800e504:	68bb      	ldr	r3, [r7, #8]
 800e506:	4a37      	ldr	r2, [pc, #220]	; (800e5e4 <USB_SetTurnaroundTime+0x128>)
 800e508:	4293      	cmp	r3, r2
 800e50a:	d802      	bhi.n	800e512 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800e50c:	230d      	movs	r3, #13
 800e50e:	617b      	str	r3, [r7, #20]
 800e510:	e04c      	b.n	800e5ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800e512:	68bb      	ldr	r3, [r7, #8]
 800e514:	4a33      	ldr	r2, [pc, #204]	; (800e5e4 <USB_SetTurnaroundTime+0x128>)
 800e516:	4293      	cmp	r3, r2
 800e518:	d906      	bls.n	800e528 <USB_SetTurnaroundTime+0x6c>
 800e51a:	68bb      	ldr	r3, [r7, #8]
 800e51c:	4a32      	ldr	r2, [pc, #200]	; (800e5e8 <USB_SetTurnaroundTime+0x12c>)
 800e51e:	4293      	cmp	r3, r2
 800e520:	d802      	bhi.n	800e528 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800e522:	230c      	movs	r3, #12
 800e524:	617b      	str	r3, [r7, #20]
 800e526:	e041      	b.n	800e5ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800e528:	68bb      	ldr	r3, [r7, #8]
 800e52a:	4a2f      	ldr	r2, [pc, #188]	; (800e5e8 <USB_SetTurnaroundTime+0x12c>)
 800e52c:	4293      	cmp	r3, r2
 800e52e:	d906      	bls.n	800e53e <USB_SetTurnaroundTime+0x82>
 800e530:	68bb      	ldr	r3, [r7, #8]
 800e532:	4a2e      	ldr	r2, [pc, #184]	; (800e5ec <USB_SetTurnaroundTime+0x130>)
 800e534:	4293      	cmp	r3, r2
 800e536:	d802      	bhi.n	800e53e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800e538:	230b      	movs	r3, #11
 800e53a:	617b      	str	r3, [r7, #20]
 800e53c:	e036      	b.n	800e5ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800e53e:	68bb      	ldr	r3, [r7, #8]
 800e540:	4a2a      	ldr	r2, [pc, #168]	; (800e5ec <USB_SetTurnaroundTime+0x130>)
 800e542:	4293      	cmp	r3, r2
 800e544:	d906      	bls.n	800e554 <USB_SetTurnaroundTime+0x98>
 800e546:	68bb      	ldr	r3, [r7, #8]
 800e548:	4a29      	ldr	r2, [pc, #164]	; (800e5f0 <USB_SetTurnaroundTime+0x134>)
 800e54a:	4293      	cmp	r3, r2
 800e54c:	d802      	bhi.n	800e554 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800e54e:	230a      	movs	r3, #10
 800e550:	617b      	str	r3, [r7, #20]
 800e552:	e02b      	b.n	800e5ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800e554:	68bb      	ldr	r3, [r7, #8]
 800e556:	4a26      	ldr	r2, [pc, #152]	; (800e5f0 <USB_SetTurnaroundTime+0x134>)
 800e558:	4293      	cmp	r3, r2
 800e55a:	d906      	bls.n	800e56a <USB_SetTurnaroundTime+0xae>
 800e55c:	68bb      	ldr	r3, [r7, #8]
 800e55e:	4a25      	ldr	r2, [pc, #148]	; (800e5f4 <USB_SetTurnaroundTime+0x138>)
 800e560:	4293      	cmp	r3, r2
 800e562:	d802      	bhi.n	800e56a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800e564:	2309      	movs	r3, #9
 800e566:	617b      	str	r3, [r7, #20]
 800e568:	e020      	b.n	800e5ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800e56a:	68bb      	ldr	r3, [r7, #8]
 800e56c:	4a21      	ldr	r2, [pc, #132]	; (800e5f4 <USB_SetTurnaroundTime+0x138>)
 800e56e:	4293      	cmp	r3, r2
 800e570:	d906      	bls.n	800e580 <USB_SetTurnaroundTime+0xc4>
 800e572:	68bb      	ldr	r3, [r7, #8]
 800e574:	4a20      	ldr	r2, [pc, #128]	; (800e5f8 <USB_SetTurnaroundTime+0x13c>)
 800e576:	4293      	cmp	r3, r2
 800e578:	d802      	bhi.n	800e580 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800e57a:	2308      	movs	r3, #8
 800e57c:	617b      	str	r3, [r7, #20]
 800e57e:	e015      	b.n	800e5ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800e580:	68bb      	ldr	r3, [r7, #8]
 800e582:	4a1d      	ldr	r2, [pc, #116]	; (800e5f8 <USB_SetTurnaroundTime+0x13c>)
 800e584:	4293      	cmp	r3, r2
 800e586:	d906      	bls.n	800e596 <USB_SetTurnaroundTime+0xda>
 800e588:	68bb      	ldr	r3, [r7, #8]
 800e58a:	4a1c      	ldr	r2, [pc, #112]	; (800e5fc <USB_SetTurnaroundTime+0x140>)
 800e58c:	4293      	cmp	r3, r2
 800e58e:	d802      	bhi.n	800e596 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800e590:	2307      	movs	r3, #7
 800e592:	617b      	str	r3, [r7, #20]
 800e594:	e00a      	b.n	800e5ac <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800e596:	2306      	movs	r3, #6
 800e598:	617b      	str	r3, [r7, #20]
 800e59a:	e007      	b.n	800e5ac <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800e59c:	79fb      	ldrb	r3, [r7, #7]
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d102      	bne.n	800e5a8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800e5a2:	2309      	movs	r3, #9
 800e5a4:	617b      	str	r3, [r7, #20]
 800e5a6:	e001      	b.n	800e5ac <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800e5a8:	2309      	movs	r3, #9
 800e5aa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	68db      	ldr	r3, [r3, #12]
 800e5b0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	68da      	ldr	r2, [r3, #12]
 800e5bc:	697b      	ldr	r3, [r7, #20]
 800e5be:	029b      	lsls	r3, r3, #10
 800e5c0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800e5c4:	431a      	orrs	r2, r3
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800e5ca:	2300      	movs	r3, #0
}
 800e5cc:	4618      	mov	r0, r3
 800e5ce:	371c      	adds	r7, #28
 800e5d0:	46bd      	mov	sp, r7
 800e5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d6:	4770      	bx	lr
 800e5d8:	00d8acbf 	.word	0x00d8acbf
 800e5dc:	00e4e1bf 	.word	0x00e4e1bf
 800e5e0:	00f423ff 	.word	0x00f423ff
 800e5e4:	0106737f 	.word	0x0106737f
 800e5e8:	011a499f 	.word	0x011a499f
 800e5ec:	01312cff 	.word	0x01312cff
 800e5f0:	014ca43f 	.word	0x014ca43f
 800e5f4:	016e35ff 	.word	0x016e35ff
 800e5f8:	01a6ab1f 	.word	0x01a6ab1f
 800e5fc:	01e847ff 	.word	0x01e847ff

0800e600 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e600:	b480      	push	{r7}
 800e602:	b083      	sub	sp, #12
 800e604:	af00      	add	r7, sp, #0
 800e606:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	689b      	ldr	r3, [r3, #8]
 800e60c:	f043 0201 	orr.w	r2, r3, #1
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e614:	2300      	movs	r3, #0
}
 800e616:	4618      	mov	r0, r3
 800e618:	370c      	adds	r7, #12
 800e61a:	46bd      	mov	sp, r7
 800e61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e620:	4770      	bx	lr

0800e622 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e622:	b480      	push	{r7}
 800e624:	b083      	sub	sp, #12
 800e626:	af00      	add	r7, sp, #0
 800e628:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	689b      	ldr	r3, [r3, #8]
 800e62e:	f023 0201 	bic.w	r2, r3, #1
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e636:	2300      	movs	r3, #0
}
 800e638:	4618      	mov	r0, r3
 800e63a:	370c      	adds	r7, #12
 800e63c:	46bd      	mov	sp, r7
 800e63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e642:	4770      	bx	lr

0800e644 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800e644:	b580      	push	{r7, lr}
 800e646:	b082      	sub	sp, #8
 800e648:	af00      	add	r7, sp, #0
 800e64a:	6078      	str	r0, [r7, #4]
 800e64c:	460b      	mov	r3, r1
 800e64e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	68db      	ldr	r3, [r3, #12]
 800e654:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800e65c:	78fb      	ldrb	r3, [r7, #3]
 800e65e:	2b01      	cmp	r3, #1
 800e660:	d106      	bne.n	800e670 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	68db      	ldr	r3, [r3, #12]
 800e666:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	60da      	str	r2, [r3, #12]
 800e66e:	e00b      	b.n	800e688 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800e670:	78fb      	ldrb	r3, [r7, #3]
 800e672:	2b00      	cmp	r3, #0
 800e674:	d106      	bne.n	800e684 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	68db      	ldr	r3, [r3, #12]
 800e67a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	60da      	str	r2, [r3, #12]
 800e682:	e001      	b.n	800e688 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800e684:	2301      	movs	r3, #1
 800e686:	e003      	b.n	800e690 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800e688:	2032      	movs	r0, #50	; 0x32
 800e68a:	f7f3 fc47 	bl	8001f1c <HAL_Delay>

  return HAL_OK;
 800e68e:	2300      	movs	r3, #0
}
 800e690:	4618      	mov	r0, r3
 800e692:	3708      	adds	r7, #8
 800e694:	46bd      	mov	sp, r7
 800e696:	bd80      	pop	{r7, pc}

0800e698 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e698:	b084      	sub	sp, #16
 800e69a:	b580      	push	{r7, lr}
 800e69c:	b086      	sub	sp, #24
 800e69e:	af00      	add	r7, sp, #0
 800e6a0:	6078      	str	r0, [r7, #4]
 800e6a2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800e6a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	613b      	str	r3, [r7, #16]
 800e6b6:	e009      	b.n	800e6cc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800e6b8:	687a      	ldr	r2, [r7, #4]
 800e6ba:	693b      	ldr	r3, [r7, #16]
 800e6bc:	3340      	adds	r3, #64	; 0x40
 800e6be:	009b      	lsls	r3, r3, #2
 800e6c0:	4413      	add	r3, r2
 800e6c2:	2200      	movs	r2, #0
 800e6c4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800e6c6:	693b      	ldr	r3, [r7, #16]
 800e6c8:	3301      	adds	r3, #1
 800e6ca:	613b      	str	r3, [r7, #16]
 800e6cc:	693b      	ldr	r3, [r7, #16]
 800e6ce:	2b0e      	cmp	r3, #14
 800e6d0:	d9f2      	bls.n	800e6b8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800e6d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d11c      	bne.n	800e712 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e6de:	685b      	ldr	r3, [r3, #4]
 800e6e0:	68fa      	ldr	r2, [r7, #12]
 800e6e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e6e6:	f043 0302 	orr.w	r3, r3, #2
 800e6ea:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6f0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	601a      	str	r2, [r3, #0]
 800e710:	e005      	b.n	800e71e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e716:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e724:	461a      	mov	r2, r3
 800e726:	2300      	movs	r3, #0
 800e728:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e730:	4619      	mov	r1, r3
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e738:	461a      	mov	r2, r3
 800e73a:	680b      	ldr	r3, [r1, #0]
 800e73c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e73e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e740:	2b01      	cmp	r3, #1
 800e742:	d10c      	bne.n	800e75e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800e744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e746:	2b00      	cmp	r3, #0
 800e748:	d104      	bne.n	800e754 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800e74a:	2100      	movs	r1, #0
 800e74c:	6878      	ldr	r0, [r7, #4]
 800e74e:	f000 f949 	bl	800e9e4 <USB_SetDevSpeed>
 800e752:	e008      	b.n	800e766 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800e754:	2101      	movs	r1, #1
 800e756:	6878      	ldr	r0, [r7, #4]
 800e758:	f000 f944 	bl	800e9e4 <USB_SetDevSpeed>
 800e75c:	e003      	b.n	800e766 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800e75e:	2103      	movs	r1, #3
 800e760:	6878      	ldr	r0, [r7, #4]
 800e762:	f000 f93f 	bl	800e9e4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e766:	2110      	movs	r1, #16
 800e768:	6878      	ldr	r0, [r7, #4]
 800e76a:	f000 f8f3 	bl	800e954 <USB_FlushTxFifo>
 800e76e:	4603      	mov	r3, r0
 800e770:	2b00      	cmp	r3, #0
 800e772:	d001      	beq.n	800e778 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800e774:	2301      	movs	r3, #1
 800e776:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e778:	6878      	ldr	r0, [r7, #4]
 800e77a:	f000 f911 	bl	800e9a0 <USB_FlushRxFifo>
 800e77e:	4603      	mov	r3, r0
 800e780:	2b00      	cmp	r3, #0
 800e782:	d001      	beq.n	800e788 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800e784:	2301      	movs	r3, #1
 800e786:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e78e:	461a      	mov	r2, r3
 800e790:	2300      	movs	r3, #0
 800e792:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e79a:	461a      	mov	r2, r3
 800e79c:	2300      	movs	r3, #0
 800e79e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e7a6:	461a      	mov	r2, r3
 800e7a8:	2300      	movs	r3, #0
 800e7aa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e7ac:	2300      	movs	r3, #0
 800e7ae:	613b      	str	r3, [r7, #16]
 800e7b0:	e043      	b.n	800e83a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e7b2:	693b      	ldr	r3, [r7, #16]
 800e7b4:	015a      	lsls	r2, r3, #5
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	4413      	add	r3, r2
 800e7ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e7c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e7c8:	d118      	bne.n	800e7fc <USB_DevInit+0x164>
    {
      if (i == 0U)
 800e7ca:	693b      	ldr	r3, [r7, #16]
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d10a      	bne.n	800e7e6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800e7d0:	693b      	ldr	r3, [r7, #16]
 800e7d2:	015a      	lsls	r2, r3, #5
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	4413      	add	r3, r2
 800e7d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e7dc:	461a      	mov	r2, r3
 800e7de:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e7e2:	6013      	str	r3, [r2, #0]
 800e7e4:	e013      	b.n	800e80e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800e7e6:	693b      	ldr	r3, [r7, #16]
 800e7e8:	015a      	lsls	r2, r3, #5
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	4413      	add	r3, r2
 800e7ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e7f2:	461a      	mov	r2, r3
 800e7f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e7f8:	6013      	str	r3, [r2, #0]
 800e7fa:	e008      	b.n	800e80e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800e7fc:	693b      	ldr	r3, [r7, #16]
 800e7fe:	015a      	lsls	r2, r3, #5
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	4413      	add	r3, r2
 800e804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e808:	461a      	mov	r2, r3
 800e80a:	2300      	movs	r3, #0
 800e80c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800e80e:	693b      	ldr	r3, [r7, #16]
 800e810:	015a      	lsls	r2, r3, #5
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	4413      	add	r3, r2
 800e816:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e81a:	461a      	mov	r2, r3
 800e81c:	2300      	movs	r3, #0
 800e81e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800e820:	693b      	ldr	r3, [r7, #16]
 800e822:	015a      	lsls	r2, r3, #5
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	4413      	add	r3, r2
 800e828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e82c:	461a      	mov	r2, r3
 800e82e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e832:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e834:	693b      	ldr	r3, [r7, #16]
 800e836:	3301      	adds	r3, #1
 800e838:	613b      	str	r3, [r7, #16]
 800e83a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e83c:	693a      	ldr	r2, [r7, #16]
 800e83e:	429a      	cmp	r2, r3
 800e840:	d3b7      	bcc.n	800e7b2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e842:	2300      	movs	r3, #0
 800e844:	613b      	str	r3, [r7, #16]
 800e846:	e043      	b.n	800e8d0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e848:	693b      	ldr	r3, [r7, #16]
 800e84a:	015a      	lsls	r2, r3, #5
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	4413      	add	r3, r2
 800e850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e85a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e85e:	d118      	bne.n	800e892 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800e860:	693b      	ldr	r3, [r7, #16]
 800e862:	2b00      	cmp	r3, #0
 800e864:	d10a      	bne.n	800e87c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800e866:	693b      	ldr	r3, [r7, #16]
 800e868:	015a      	lsls	r2, r3, #5
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	4413      	add	r3, r2
 800e86e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e872:	461a      	mov	r2, r3
 800e874:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e878:	6013      	str	r3, [r2, #0]
 800e87a:	e013      	b.n	800e8a4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800e87c:	693b      	ldr	r3, [r7, #16]
 800e87e:	015a      	lsls	r2, r3, #5
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	4413      	add	r3, r2
 800e884:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e888:	461a      	mov	r2, r3
 800e88a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e88e:	6013      	str	r3, [r2, #0]
 800e890:	e008      	b.n	800e8a4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800e892:	693b      	ldr	r3, [r7, #16]
 800e894:	015a      	lsls	r2, r3, #5
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	4413      	add	r3, r2
 800e89a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e89e:	461a      	mov	r2, r3
 800e8a0:	2300      	movs	r3, #0
 800e8a2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800e8a4:	693b      	ldr	r3, [r7, #16]
 800e8a6:	015a      	lsls	r2, r3, #5
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	4413      	add	r3, r2
 800e8ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e8b0:	461a      	mov	r2, r3
 800e8b2:	2300      	movs	r3, #0
 800e8b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800e8b6:	693b      	ldr	r3, [r7, #16]
 800e8b8:	015a      	lsls	r2, r3, #5
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	4413      	add	r3, r2
 800e8be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e8c2:	461a      	mov	r2, r3
 800e8c4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e8c8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e8ca:	693b      	ldr	r3, [r7, #16]
 800e8cc:	3301      	adds	r3, #1
 800e8ce:	613b      	str	r3, [r7, #16]
 800e8d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8d2:	693a      	ldr	r2, [r7, #16]
 800e8d4:	429a      	cmp	r2, r3
 800e8d6:	d3b7      	bcc.n	800e848 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e8de:	691b      	ldr	r3, [r3, #16]
 800e8e0:	68fa      	ldr	r2, [r7, #12]
 800e8e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e8e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e8ea:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	2200      	movs	r2, #0
 800e8f0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800e8f8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800e8fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d105      	bne.n	800e90c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	699b      	ldr	r3, [r3, #24]
 800e904:	f043 0210 	orr.w	r2, r3, #16
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	699a      	ldr	r2, [r3, #24]
 800e910:	4b0e      	ldr	r3, [pc, #56]	; (800e94c <USB_DevInit+0x2b4>)
 800e912:	4313      	orrs	r3, r2
 800e914:	687a      	ldr	r2, [r7, #4]
 800e916:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800e918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d005      	beq.n	800e92a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	699b      	ldr	r3, [r3, #24]
 800e922:	f043 0208 	orr.w	r2, r3, #8
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800e92a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e92c:	2b01      	cmp	r3, #1
 800e92e:	d105      	bne.n	800e93c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	699a      	ldr	r2, [r3, #24]
 800e934:	4b06      	ldr	r3, [pc, #24]	; (800e950 <USB_DevInit+0x2b8>)
 800e936:	4313      	orrs	r3, r2
 800e938:	687a      	ldr	r2, [r7, #4]
 800e93a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800e93c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e93e:	4618      	mov	r0, r3
 800e940:	3718      	adds	r7, #24
 800e942:	46bd      	mov	sp, r7
 800e944:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e948:	b004      	add	sp, #16
 800e94a:	4770      	bx	lr
 800e94c:	803c3800 	.word	0x803c3800
 800e950:	40000004 	.word	0x40000004

0800e954 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e954:	b480      	push	{r7}
 800e956:	b085      	sub	sp, #20
 800e958:	af00      	add	r7, sp, #0
 800e95a:	6078      	str	r0, [r7, #4]
 800e95c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800e95e:	2300      	movs	r3, #0
 800e960:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e962:	683b      	ldr	r3, [r7, #0]
 800e964:	019b      	lsls	r3, r3, #6
 800e966:	f043 0220 	orr.w	r2, r3, #32
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	3301      	adds	r3, #1
 800e972:	60fb      	str	r3, [r7, #12]
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	4a09      	ldr	r2, [pc, #36]	; (800e99c <USB_FlushTxFifo+0x48>)
 800e978:	4293      	cmp	r3, r2
 800e97a:	d901      	bls.n	800e980 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800e97c:	2303      	movs	r3, #3
 800e97e:	e006      	b.n	800e98e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	691b      	ldr	r3, [r3, #16]
 800e984:	f003 0320 	and.w	r3, r3, #32
 800e988:	2b20      	cmp	r3, #32
 800e98a:	d0f0      	beq.n	800e96e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800e98c:	2300      	movs	r3, #0
}
 800e98e:	4618      	mov	r0, r3
 800e990:	3714      	adds	r7, #20
 800e992:	46bd      	mov	sp, r7
 800e994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e998:	4770      	bx	lr
 800e99a:	bf00      	nop
 800e99c:	00030d40 	.word	0x00030d40

0800e9a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e9a0:	b480      	push	{r7}
 800e9a2:	b085      	sub	sp, #20
 800e9a4:	af00      	add	r7, sp, #0
 800e9a6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800e9a8:	2300      	movs	r3, #0
 800e9aa:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	2210      	movs	r2, #16
 800e9b0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	3301      	adds	r3, #1
 800e9b6:	60fb      	str	r3, [r7, #12]
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	4a09      	ldr	r2, [pc, #36]	; (800e9e0 <USB_FlushRxFifo+0x40>)
 800e9bc:	4293      	cmp	r3, r2
 800e9be:	d901      	bls.n	800e9c4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800e9c0:	2303      	movs	r3, #3
 800e9c2:	e006      	b.n	800e9d2 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	691b      	ldr	r3, [r3, #16]
 800e9c8:	f003 0310 	and.w	r3, r3, #16
 800e9cc:	2b10      	cmp	r3, #16
 800e9ce:	d0f0      	beq.n	800e9b2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800e9d0:	2300      	movs	r3, #0
}
 800e9d2:	4618      	mov	r0, r3
 800e9d4:	3714      	adds	r7, #20
 800e9d6:	46bd      	mov	sp, r7
 800e9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9dc:	4770      	bx	lr
 800e9de:	bf00      	nop
 800e9e0:	00030d40 	.word	0x00030d40

0800e9e4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800e9e4:	b480      	push	{r7}
 800e9e6:	b085      	sub	sp, #20
 800e9e8:	af00      	add	r7, sp, #0
 800e9ea:	6078      	str	r0, [r7, #4]
 800e9ec:	460b      	mov	r3, r1
 800e9ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e9fa:	681a      	ldr	r2, [r3, #0]
 800e9fc:	78fb      	ldrb	r3, [r7, #3]
 800e9fe:	68f9      	ldr	r1, [r7, #12]
 800ea00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ea04:	4313      	orrs	r3, r2
 800ea06:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ea08:	2300      	movs	r3, #0
}
 800ea0a:	4618      	mov	r0, r3
 800ea0c:	3714      	adds	r7, #20
 800ea0e:	46bd      	mov	sp, r7
 800ea10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea14:	4770      	bx	lr

0800ea16 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800ea16:	b480      	push	{r7}
 800ea18:	b087      	sub	sp, #28
 800ea1a:	af00      	add	r7, sp, #0
 800ea1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ea22:	693b      	ldr	r3, [r7, #16]
 800ea24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea28:	689b      	ldr	r3, [r3, #8]
 800ea2a:	f003 0306 	and.w	r3, r3, #6
 800ea2e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d102      	bne.n	800ea3c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800ea36:	2300      	movs	r3, #0
 800ea38:	75fb      	strb	r3, [r7, #23]
 800ea3a:	e00a      	b.n	800ea52 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	2b02      	cmp	r3, #2
 800ea40:	d002      	beq.n	800ea48 <USB_GetDevSpeed+0x32>
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	2b06      	cmp	r3, #6
 800ea46:	d102      	bne.n	800ea4e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ea48:	2302      	movs	r3, #2
 800ea4a:	75fb      	strb	r3, [r7, #23]
 800ea4c:	e001      	b.n	800ea52 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800ea4e:	230f      	movs	r3, #15
 800ea50:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ea52:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea54:	4618      	mov	r0, r3
 800ea56:	371c      	adds	r7, #28
 800ea58:	46bd      	mov	sp, r7
 800ea5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea5e:	4770      	bx	lr

0800ea60 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ea60:	b480      	push	{r7}
 800ea62:	b085      	sub	sp, #20
 800ea64:	af00      	add	r7, sp, #0
 800ea66:	6078      	str	r0, [r7, #4]
 800ea68:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ea6e:	683b      	ldr	r3, [r7, #0]
 800ea70:	781b      	ldrb	r3, [r3, #0]
 800ea72:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ea74:	683b      	ldr	r3, [r7, #0]
 800ea76:	785b      	ldrb	r3, [r3, #1]
 800ea78:	2b01      	cmp	r3, #1
 800ea7a:	d139      	bne.n	800eaf0 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea82:	69da      	ldr	r2, [r3, #28]
 800ea84:	683b      	ldr	r3, [r7, #0]
 800ea86:	781b      	ldrb	r3, [r3, #0]
 800ea88:	f003 030f 	and.w	r3, r3, #15
 800ea8c:	2101      	movs	r1, #1
 800ea8e:	fa01 f303 	lsl.w	r3, r1, r3
 800ea92:	b29b      	uxth	r3, r3
 800ea94:	68f9      	ldr	r1, [r7, #12]
 800ea96:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ea9a:	4313      	orrs	r3, r2
 800ea9c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ea9e:	68bb      	ldr	r3, [r7, #8]
 800eaa0:	015a      	lsls	r2, r3, #5
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	4413      	add	r3, r2
 800eaa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d153      	bne.n	800eb5c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800eab4:	68bb      	ldr	r3, [r7, #8]
 800eab6:	015a      	lsls	r2, r3, #5
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	4413      	add	r3, r2
 800eabc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eac0:	681a      	ldr	r2, [r3, #0]
 800eac2:	683b      	ldr	r3, [r7, #0]
 800eac4:	689b      	ldr	r3, [r3, #8]
 800eac6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800eaca:	683b      	ldr	r3, [r7, #0]
 800eacc:	78db      	ldrb	r3, [r3, #3]
 800eace:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ead0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ead2:	68bb      	ldr	r3, [r7, #8]
 800ead4:	059b      	lsls	r3, r3, #22
 800ead6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ead8:	431a      	orrs	r2, r3
 800eada:	68bb      	ldr	r3, [r7, #8]
 800eadc:	0159      	lsls	r1, r3, #5
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	440b      	add	r3, r1
 800eae2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eae6:	4619      	mov	r1, r3
 800eae8:	4b20      	ldr	r3, [pc, #128]	; (800eb6c <USB_ActivateEndpoint+0x10c>)
 800eaea:	4313      	orrs	r3, r2
 800eaec:	600b      	str	r3, [r1, #0]
 800eaee:	e035      	b.n	800eb5c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eaf6:	69da      	ldr	r2, [r3, #28]
 800eaf8:	683b      	ldr	r3, [r7, #0]
 800eafa:	781b      	ldrb	r3, [r3, #0]
 800eafc:	f003 030f 	and.w	r3, r3, #15
 800eb00:	2101      	movs	r1, #1
 800eb02:	fa01 f303 	lsl.w	r3, r1, r3
 800eb06:	041b      	lsls	r3, r3, #16
 800eb08:	68f9      	ldr	r1, [r7, #12]
 800eb0a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800eb0e:	4313      	orrs	r3, r2
 800eb10:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800eb12:	68bb      	ldr	r3, [r7, #8]
 800eb14:	015a      	lsls	r2, r3, #5
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	4413      	add	r3, r2
 800eb1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d119      	bne.n	800eb5c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800eb28:	68bb      	ldr	r3, [r7, #8]
 800eb2a:	015a      	lsls	r2, r3, #5
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	4413      	add	r3, r2
 800eb30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb34:	681a      	ldr	r2, [r3, #0]
 800eb36:	683b      	ldr	r3, [r7, #0]
 800eb38:	689b      	ldr	r3, [r3, #8]
 800eb3a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800eb3e:	683b      	ldr	r3, [r7, #0]
 800eb40:	78db      	ldrb	r3, [r3, #3]
 800eb42:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800eb44:	430b      	orrs	r3, r1
 800eb46:	431a      	orrs	r2, r3
 800eb48:	68bb      	ldr	r3, [r7, #8]
 800eb4a:	0159      	lsls	r1, r3, #5
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	440b      	add	r3, r1
 800eb50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb54:	4619      	mov	r1, r3
 800eb56:	4b05      	ldr	r3, [pc, #20]	; (800eb6c <USB_ActivateEndpoint+0x10c>)
 800eb58:	4313      	orrs	r3, r2
 800eb5a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800eb5c:	2300      	movs	r3, #0
}
 800eb5e:	4618      	mov	r0, r3
 800eb60:	3714      	adds	r7, #20
 800eb62:	46bd      	mov	sp, r7
 800eb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb68:	4770      	bx	lr
 800eb6a:	bf00      	nop
 800eb6c:	10008000 	.word	0x10008000

0800eb70 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800eb70:	b480      	push	{r7}
 800eb72:	b085      	sub	sp, #20
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	6078      	str	r0, [r7, #4]
 800eb78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800eb7e:	683b      	ldr	r3, [r7, #0]
 800eb80:	781b      	ldrb	r3, [r3, #0]
 800eb82:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800eb84:	683b      	ldr	r3, [r7, #0]
 800eb86:	785b      	ldrb	r3, [r3, #1]
 800eb88:	2b01      	cmp	r3, #1
 800eb8a:	d161      	bne.n	800ec50 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800eb8c:	68bb      	ldr	r3, [r7, #8]
 800eb8e:	015a      	lsls	r2, r3, #5
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	4413      	add	r3, r2
 800eb94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800eb9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800eba2:	d11f      	bne.n	800ebe4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800eba4:	68bb      	ldr	r3, [r7, #8]
 800eba6:	015a      	lsls	r2, r3, #5
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	4413      	add	r3, r2
 800ebac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	68ba      	ldr	r2, [r7, #8]
 800ebb4:	0151      	lsls	r1, r2, #5
 800ebb6:	68fa      	ldr	r2, [r7, #12]
 800ebb8:	440a      	add	r2, r1
 800ebba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ebbe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ebc2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800ebc4:	68bb      	ldr	r3, [r7, #8]
 800ebc6:	015a      	lsls	r2, r3, #5
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	4413      	add	r3, r2
 800ebcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	68ba      	ldr	r2, [r7, #8]
 800ebd4:	0151      	lsls	r1, r2, #5
 800ebd6:	68fa      	ldr	r2, [r7, #12]
 800ebd8:	440a      	add	r2, r1
 800ebda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ebde:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ebe2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ebea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ebec:	683b      	ldr	r3, [r7, #0]
 800ebee:	781b      	ldrb	r3, [r3, #0]
 800ebf0:	f003 030f 	and.w	r3, r3, #15
 800ebf4:	2101      	movs	r1, #1
 800ebf6:	fa01 f303 	lsl.w	r3, r1, r3
 800ebfa:	b29b      	uxth	r3, r3
 800ebfc:	43db      	mvns	r3, r3
 800ebfe:	68f9      	ldr	r1, [r7, #12]
 800ec00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ec04:	4013      	ands	r3, r2
 800ec06:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec0e:	69da      	ldr	r2, [r3, #28]
 800ec10:	683b      	ldr	r3, [r7, #0]
 800ec12:	781b      	ldrb	r3, [r3, #0]
 800ec14:	f003 030f 	and.w	r3, r3, #15
 800ec18:	2101      	movs	r1, #1
 800ec1a:	fa01 f303 	lsl.w	r3, r1, r3
 800ec1e:	b29b      	uxth	r3, r3
 800ec20:	43db      	mvns	r3, r3
 800ec22:	68f9      	ldr	r1, [r7, #12]
 800ec24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ec28:	4013      	ands	r3, r2
 800ec2a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ec2c:	68bb      	ldr	r3, [r7, #8]
 800ec2e:	015a      	lsls	r2, r3, #5
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	4413      	add	r3, r2
 800ec34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec38:	681a      	ldr	r2, [r3, #0]
 800ec3a:	68bb      	ldr	r3, [r7, #8]
 800ec3c:	0159      	lsls	r1, r3, #5
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	440b      	add	r3, r1
 800ec42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec46:	4619      	mov	r1, r3
 800ec48:	4b35      	ldr	r3, [pc, #212]	; (800ed20 <USB_DeactivateEndpoint+0x1b0>)
 800ec4a:	4013      	ands	r3, r2
 800ec4c:	600b      	str	r3, [r1, #0]
 800ec4e:	e060      	b.n	800ed12 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ec50:	68bb      	ldr	r3, [r7, #8]
 800ec52:	015a      	lsls	r2, r3, #5
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	4413      	add	r3, r2
 800ec58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ec62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ec66:	d11f      	bne.n	800eca8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800ec68:	68bb      	ldr	r3, [r7, #8]
 800ec6a:	015a      	lsls	r2, r3, #5
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	4413      	add	r3, r2
 800ec70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	68ba      	ldr	r2, [r7, #8]
 800ec78:	0151      	lsls	r1, r2, #5
 800ec7a:	68fa      	ldr	r2, [r7, #12]
 800ec7c:	440a      	add	r2, r1
 800ec7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ec82:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ec86:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800ec88:	68bb      	ldr	r3, [r7, #8]
 800ec8a:	015a      	lsls	r2, r3, #5
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	4413      	add	r3, r2
 800ec90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	68ba      	ldr	r2, [r7, #8]
 800ec98:	0151      	lsls	r1, r2, #5
 800ec9a:	68fa      	ldr	r2, [r7, #12]
 800ec9c:	440a      	add	r2, r1
 800ec9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eca2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800eca6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ecae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ecb0:	683b      	ldr	r3, [r7, #0]
 800ecb2:	781b      	ldrb	r3, [r3, #0]
 800ecb4:	f003 030f 	and.w	r3, r3, #15
 800ecb8:	2101      	movs	r1, #1
 800ecba:	fa01 f303 	lsl.w	r3, r1, r3
 800ecbe:	041b      	lsls	r3, r3, #16
 800ecc0:	43db      	mvns	r3, r3
 800ecc2:	68f9      	ldr	r1, [r7, #12]
 800ecc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ecc8:	4013      	ands	r3, r2
 800ecca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ecd2:	69da      	ldr	r2, [r3, #28]
 800ecd4:	683b      	ldr	r3, [r7, #0]
 800ecd6:	781b      	ldrb	r3, [r3, #0]
 800ecd8:	f003 030f 	and.w	r3, r3, #15
 800ecdc:	2101      	movs	r1, #1
 800ecde:	fa01 f303 	lsl.w	r3, r1, r3
 800ece2:	041b      	lsls	r3, r3, #16
 800ece4:	43db      	mvns	r3, r3
 800ece6:	68f9      	ldr	r1, [r7, #12]
 800ece8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ecec:	4013      	ands	r3, r2
 800ecee:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800ecf0:	68bb      	ldr	r3, [r7, #8]
 800ecf2:	015a      	lsls	r2, r3, #5
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	4413      	add	r3, r2
 800ecf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ecfc:	681a      	ldr	r2, [r3, #0]
 800ecfe:	68bb      	ldr	r3, [r7, #8]
 800ed00:	0159      	lsls	r1, r3, #5
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	440b      	add	r3, r1
 800ed06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed0a:	4619      	mov	r1, r3
 800ed0c:	4b05      	ldr	r3, [pc, #20]	; (800ed24 <USB_DeactivateEndpoint+0x1b4>)
 800ed0e:	4013      	ands	r3, r2
 800ed10:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800ed12:	2300      	movs	r3, #0
}
 800ed14:	4618      	mov	r0, r3
 800ed16:	3714      	adds	r7, #20
 800ed18:	46bd      	mov	sp, r7
 800ed1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed1e:	4770      	bx	lr
 800ed20:	ec337800 	.word	0xec337800
 800ed24:	eff37800 	.word	0xeff37800

0800ed28 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ed28:	b580      	push	{r7, lr}
 800ed2a:	b08a      	sub	sp, #40	; 0x28
 800ed2c:	af02      	add	r7, sp, #8
 800ed2e:	60f8      	str	r0, [r7, #12]
 800ed30:	60b9      	str	r1, [r7, #8]
 800ed32:	4613      	mov	r3, r2
 800ed34:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800ed3a:	68bb      	ldr	r3, [r7, #8]
 800ed3c:	781b      	ldrb	r3, [r3, #0]
 800ed3e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ed40:	68bb      	ldr	r3, [r7, #8]
 800ed42:	785b      	ldrb	r3, [r3, #1]
 800ed44:	2b01      	cmp	r3, #1
 800ed46:	f040 8163 	bne.w	800f010 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ed4a:	68bb      	ldr	r3, [r7, #8]
 800ed4c:	695b      	ldr	r3, [r3, #20]
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d132      	bne.n	800edb8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ed52:	69bb      	ldr	r3, [r7, #24]
 800ed54:	015a      	lsls	r2, r3, #5
 800ed56:	69fb      	ldr	r3, [r7, #28]
 800ed58:	4413      	add	r3, r2
 800ed5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed5e:	691a      	ldr	r2, [r3, #16]
 800ed60:	69bb      	ldr	r3, [r7, #24]
 800ed62:	0159      	lsls	r1, r3, #5
 800ed64:	69fb      	ldr	r3, [r7, #28]
 800ed66:	440b      	add	r3, r1
 800ed68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed6c:	4619      	mov	r1, r3
 800ed6e:	4ba5      	ldr	r3, [pc, #660]	; (800f004 <USB_EPStartXfer+0x2dc>)
 800ed70:	4013      	ands	r3, r2
 800ed72:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ed74:	69bb      	ldr	r3, [r7, #24]
 800ed76:	015a      	lsls	r2, r3, #5
 800ed78:	69fb      	ldr	r3, [r7, #28]
 800ed7a:	4413      	add	r3, r2
 800ed7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed80:	691b      	ldr	r3, [r3, #16]
 800ed82:	69ba      	ldr	r2, [r7, #24]
 800ed84:	0151      	lsls	r1, r2, #5
 800ed86:	69fa      	ldr	r2, [r7, #28]
 800ed88:	440a      	add	r2, r1
 800ed8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ed8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ed92:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ed94:	69bb      	ldr	r3, [r7, #24]
 800ed96:	015a      	lsls	r2, r3, #5
 800ed98:	69fb      	ldr	r3, [r7, #28]
 800ed9a:	4413      	add	r3, r2
 800ed9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eda0:	691a      	ldr	r2, [r3, #16]
 800eda2:	69bb      	ldr	r3, [r7, #24]
 800eda4:	0159      	lsls	r1, r3, #5
 800eda6:	69fb      	ldr	r3, [r7, #28]
 800eda8:	440b      	add	r3, r1
 800edaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800edae:	4619      	mov	r1, r3
 800edb0:	4b95      	ldr	r3, [pc, #596]	; (800f008 <USB_EPStartXfer+0x2e0>)
 800edb2:	4013      	ands	r3, r2
 800edb4:	610b      	str	r3, [r1, #16]
 800edb6:	e074      	b.n	800eea2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800edb8:	69bb      	ldr	r3, [r7, #24]
 800edba:	015a      	lsls	r2, r3, #5
 800edbc:	69fb      	ldr	r3, [r7, #28]
 800edbe:	4413      	add	r3, r2
 800edc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800edc4:	691a      	ldr	r2, [r3, #16]
 800edc6:	69bb      	ldr	r3, [r7, #24]
 800edc8:	0159      	lsls	r1, r3, #5
 800edca:	69fb      	ldr	r3, [r7, #28]
 800edcc:	440b      	add	r3, r1
 800edce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800edd2:	4619      	mov	r1, r3
 800edd4:	4b8c      	ldr	r3, [pc, #560]	; (800f008 <USB_EPStartXfer+0x2e0>)
 800edd6:	4013      	ands	r3, r2
 800edd8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800edda:	69bb      	ldr	r3, [r7, #24]
 800eddc:	015a      	lsls	r2, r3, #5
 800edde:	69fb      	ldr	r3, [r7, #28]
 800ede0:	4413      	add	r3, r2
 800ede2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ede6:	691a      	ldr	r2, [r3, #16]
 800ede8:	69bb      	ldr	r3, [r7, #24]
 800edea:	0159      	lsls	r1, r3, #5
 800edec:	69fb      	ldr	r3, [r7, #28]
 800edee:	440b      	add	r3, r1
 800edf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800edf4:	4619      	mov	r1, r3
 800edf6:	4b83      	ldr	r3, [pc, #524]	; (800f004 <USB_EPStartXfer+0x2dc>)
 800edf8:	4013      	ands	r3, r2
 800edfa:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800edfc:	69bb      	ldr	r3, [r7, #24]
 800edfe:	015a      	lsls	r2, r3, #5
 800ee00:	69fb      	ldr	r3, [r7, #28]
 800ee02:	4413      	add	r3, r2
 800ee04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee08:	691a      	ldr	r2, [r3, #16]
 800ee0a:	68bb      	ldr	r3, [r7, #8]
 800ee0c:	6959      	ldr	r1, [r3, #20]
 800ee0e:	68bb      	ldr	r3, [r7, #8]
 800ee10:	689b      	ldr	r3, [r3, #8]
 800ee12:	440b      	add	r3, r1
 800ee14:	1e59      	subs	r1, r3, #1
 800ee16:	68bb      	ldr	r3, [r7, #8]
 800ee18:	689b      	ldr	r3, [r3, #8]
 800ee1a:	fbb1 f3f3 	udiv	r3, r1, r3
 800ee1e:	04d9      	lsls	r1, r3, #19
 800ee20:	4b7a      	ldr	r3, [pc, #488]	; (800f00c <USB_EPStartXfer+0x2e4>)
 800ee22:	400b      	ands	r3, r1
 800ee24:	69b9      	ldr	r1, [r7, #24]
 800ee26:	0148      	lsls	r0, r1, #5
 800ee28:	69f9      	ldr	r1, [r7, #28]
 800ee2a:	4401      	add	r1, r0
 800ee2c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ee30:	4313      	orrs	r3, r2
 800ee32:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ee34:	69bb      	ldr	r3, [r7, #24]
 800ee36:	015a      	lsls	r2, r3, #5
 800ee38:	69fb      	ldr	r3, [r7, #28]
 800ee3a:	4413      	add	r3, r2
 800ee3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee40:	691a      	ldr	r2, [r3, #16]
 800ee42:	68bb      	ldr	r3, [r7, #8]
 800ee44:	695b      	ldr	r3, [r3, #20]
 800ee46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ee4a:	69b9      	ldr	r1, [r7, #24]
 800ee4c:	0148      	lsls	r0, r1, #5
 800ee4e:	69f9      	ldr	r1, [r7, #28]
 800ee50:	4401      	add	r1, r0
 800ee52:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ee56:	4313      	orrs	r3, r2
 800ee58:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800ee5a:	68bb      	ldr	r3, [r7, #8]
 800ee5c:	78db      	ldrb	r3, [r3, #3]
 800ee5e:	2b01      	cmp	r3, #1
 800ee60:	d11f      	bne.n	800eea2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800ee62:	69bb      	ldr	r3, [r7, #24]
 800ee64:	015a      	lsls	r2, r3, #5
 800ee66:	69fb      	ldr	r3, [r7, #28]
 800ee68:	4413      	add	r3, r2
 800ee6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee6e:	691b      	ldr	r3, [r3, #16]
 800ee70:	69ba      	ldr	r2, [r7, #24]
 800ee72:	0151      	lsls	r1, r2, #5
 800ee74:	69fa      	ldr	r2, [r7, #28]
 800ee76:	440a      	add	r2, r1
 800ee78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ee7c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800ee80:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800ee82:	69bb      	ldr	r3, [r7, #24]
 800ee84:	015a      	lsls	r2, r3, #5
 800ee86:	69fb      	ldr	r3, [r7, #28]
 800ee88:	4413      	add	r3, r2
 800ee8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee8e:	691b      	ldr	r3, [r3, #16]
 800ee90:	69ba      	ldr	r2, [r7, #24]
 800ee92:	0151      	lsls	r1, r2, #5
 800ee94:	69fa      	ldr	r2, [r7, #28]
 800ee96:	440a      	add	r2, r1
 800ee98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ee9c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800eea0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800eea2:	79fb      	ldrb	r3, [r7, #7]
 800eea4:	2b01      	cmp	r3, #1
 800eea6:	d14b      	bne.n	800ef40 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800eea8:	68bb      	ldr	r3, [r7, #8]
 800eeaa:	691b      	ldr	r3, [r3, #16]
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d009      	beq.n	800eec4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800eeb0:	69bb      	ldr	r3, [r7, #24]
 800eeb2:	015a      	lsls	r2, r3, #5
 800eeb4:	69fb      	ldr	r3, [r7, #28]
 800eeb6:	4413      	add	r3, r2
 800eeb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eebc:	461a      	mov	r2, r3
 800eebe:	68bb      	ldr	r3, [r7, #8]
 800eec0:	691b      	ldr	r3, [r3, #16]
 800eec2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800eec4:	68bb      	ldr	r3, [r7, #8]
 800eec6:	78db      	ldrb	r3, [r3, #3]
 800eec8:	2b01      	cmp	r3, #1
 800eeca:	d128      	bne.n	800ef1e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800eecc:	69fb      	ldr	r3, [r7, #28]
 800eece:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eed2:	689b      	ldr	r3, [r3, #8]
 800eed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d110      	bne.n	800eefe <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800eedc:	69bb      	ldr	r3, [r7, #24]
 800eede:	015a      	lsls	r2, r3, #5
 800eee0:	69fb      	ldr	r3, [r7, #28]
 800eee2:	4413      	add	r3, r2
 800eee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	69ba      	ldr	r2, [r7, #24]
 800eeec:	0151      	lsls	r1, r2, #5
 800eeee:	69fa      	ldr	r2, [r7, #28]
 800eef0:	440a      	add	r2, r1
 800eef2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eef6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800eefa:	6013      	str	r3, [r2, #0]
 800eefc:	e00f      	b.n	800ef1e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800eefe:	69bb      	ldr	r3, [r7, #24]
 800ef00:	015a      	lsls	r2, r3, #5
 800ef02:	69fb      	ldr	r3, [r7, #28]
 800ef04:	4413      	add	r3, r2
 800ef06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	69ba      	ldr	r2, [r7, #24]
 800ef0e:	0151      	lsls	r1, r2, #5
 800ef10:	69fa      	ldr	r2, [r7, #28]
 800ef12:	440a      	add	r2, r1
 800ef14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ef18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ef1c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ef1e:	69bb      	ldr	r3, [r7, #24]
 800ef20:	015a      	lsls	r2, r3, #5
 800ef22:	69fb      	ldr	r3, [r7, #28]
 800ef24:	4413      	add	r3, r2
 800ef26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	69ba      	ldr	r2, [r7, #24]
 800ef2e:	0151      	lsls	r1, r2, #5
 800ef30:	69fa      	ldr	r2, [r7, #28]
 800ef32:	440a      	add	r2, r1
 800ef34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ef38:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ef3c:	6013      	str	r3, [r2, #0]
 800ef3e:	e133      	b.n	800f1a8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ef40:	69bb      	ldr	r3, [r7, #24]
 800ef42:	015a      	lsls	r2, r3, #5
 800ef44:	69fb      	ldr	r3, [r7, #28]
 800ef46:	4413      	add	r3, r2
 800ef48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	69ba      	ldr	r2, [r7, #24]
 800ef50:	0151      	lsls	r1, r2, #5
 800ef52:	69fa      	ldr	r2, [r7, #28]
 800ef54:	440a      	add	r2, r1
 800ef56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ef5a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ef5e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ef60:	68bb      	ldr	r3, [r7, #8]
 800ef62:	78db      	ldrb	r3, [r3, #3]
 800ef64:	2b01      	cmp	r3, #1
 800ef66:	d015      	beq.n	800ef94 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800ef68:	68bb      	ldr	r3, [r7, #8]
 800ef6a:	695b      	ldr	r3, [r3, #20]
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	f000 811b 	beq.w	800f1a8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ef72:	69fb      	ldr	r3, [r7, #28]
 800ef74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ef7a:	68bb      	ldr	r3, [r7, #8]
 800ef7c:	781b      	ldrb	r3, [r3, #0]
 800ef7e:	f003 030f 	and.w	r3, r3, #15
 800ef82:	2101      	movs	r1, #1
 800ef84:	fa01 f303 	lsl.w	r3, r1, r3
 800ef88:	69f9      	ldr	r1, [r7, #28]
 800ef8a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ef8e:	4313      	orrs	r3, r2
 800ef90:	634b      	str	r3, [r1, #52]	; 0x34
 800ef92:	e109      	b.n	800f1a8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ef94:	69fb      	ldr	r3, [r7, #28]
 800ef96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef9a:	689b      	ldr	r3, [r3, #8]
 800ef9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d110      	bne.n	800efc6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800efa4:	69bb      	ldr	r3, [r7, #24]
 800efa6:	015a      	lsls	r2, r3, #5
 800efa8:	69fb      	ldr	r3, [r7, #28]
 800efaa:	4413      	add	r3, r2
 800efac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	69ba      	ldr	r2, [r7, #24]
 800efb4:	0151      	lsls	r1, r2, #5
 800efb6:	69fa      	ldr	r2, [r7, #28]
 800efb8:	440a      	add	r2, r1
 800efba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800efbe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800efc2:	6013      	str	r3, [r2, #0]
 800efc4:	e00f      	b.n	800efe6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800efc6:	69bb      	ldr	r3, [r7, #24]
 800efc8:	015a      	lsls	r2, r3, #5
 800efca:	69fb      	ldr	r3, [r7, #28]
 800efcc:	4413      	add	r3, r2
 800efce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	69ba      	ldr	r2, [r7, #24]
 800efd6:	0151      	lsls	r1, r2, #5
 800efd8:	69fa      	ldr	r2, [r7, #28]
 800efda:	440a      	add	r2, r1
 800efdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800efe0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800efe4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800efe6:	68bb      	ldr	r3, [r7, #8]
 800efe8:	68d9      	ldr	r1, [r3, #12]
 800efea:	68bb      	ldr	r3, [r7, #8]
 800efec:	781a      	ldrb	r2, [r3, #0]
 800efee:	68bb      	ldr	r3, [r7, #8]
 800eff0:	695b      	ldr	r3, [r3, #20]
 800eff2:	b298      	uxth	r0, r3
 800eff4:	79fb      	ldrb	r3, [r7, #7]
 800eff6:	9300      	str	r3, [sp, #0]
 800eff8:	4603      	mov	r3, r0
 800effa:	68f8      	ldr	r0, [r7, #12]
 800effc:	f000 fa38 	bl	800f470 <USB_WritePacket>
 800f000:	e0d2      	b.n	800f1a8 <USB_EPStartXfer+0x480>
 800f002:	bf00      	nop
 800f004:	e007ffff 	.word	0xe007ffff
 800f008:	fff80000 	.word	0xfff80000
 800f00c:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f010:	69bb      	ldr	r3, [r7, #24]
 800f012:	015a      	lsls	r2, r3, #5
 800f014:	69fb      	ldr	r3, [r7, #28]
 800f016:	4413      	add	r3, r2
 800f018:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f01c:	691a      	ldr	r2, [r3, #16]
 800f01e:	69bb      	ldr	r3, [r7, #24]
 800f020:	0159      	lsls	r1, r3, #5
 800f022:	69fb      	ldr	r3, [r7, #28]
 800f024:	440b      	add	r3, r1
 800f026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f02a:	4619      	mov	r1, r3
 800f02c:	4b61      	ldr	r3, [pc, #388]	; (800f1b4 <USB_EPStartXfer+0x48c>)
 800f02e:	4013      	ands	r3, r2
 800f030:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f032:	69bb      	ldr	r3, [r7, #24]
 800f034:	015a      	lsls	r2, r3, #5
 800f036:	69fb      	ldr	r3, [r7, #28]
 800f038:	4413      	add	r3, r2
 800f03a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f03e:	691a      	ldr	r2, [r3, #16]
 800f040:	69bb      	ldr	r3, [r7, #24]
 800f042:	0159      	lsls	r1, r3, #5
 800f044:	69fb      	ldr	r3, [r7, #28]
 800f046:	440b      	add	r3, r1
 800f048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f04c:	4619      	mov	r1, r3
 800f04e:	4b5a      	ldr	r3, [pc, #360]	; (800f1b8 <USB_EPStartXfer+0x490>)
 800f050:	4013      	ands	r3, r2
 800f052:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800f054:	68bb      	ldr	r3, [r7, #8]
 800f056:	695b      	ldr	r3, [r3, #20]
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d123      	bne.n	800f0a4 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800f05c:	69bb      	ldr	r3, [r7, #24]
 800f05e:	015a      	lsls	r2, r3, #5
 800f060:	69fb      	ldr	r3, [r7, #28]
 800f062:	4413      	add	r3, r2
 800f064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f068:	691a      	ldr	r2, [r3, #16]
 800f06a:	68bb      	ldr	r3, [r7, #8]
 800f06c:	689b      	ldr	r3, [r3, #8]
 800f06e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f072:	69b9      	ldr	r1, [r7, #24]
 800f074:	0148      	lsls	r0, r1, #5
 800f076:	69f9      	ldr	r1, [r7, #28]
 800f078:	4401      	add	r1, r0
 800f07a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f07e:	4313      	orrs	r3, r2
 800f080:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f082:	69bb      	ldr	r3, [r7, #24]
 800f084:	015a      	lsls	r2, r3, #5
 800f086:	69fb      	ldr	r3, [r7, #28]
 800f088:	4413      	add	r3, r2
 800f08a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f08e:	691b      	ldr	r3, [r3, #16]
 800f090:	69ba      	ldr	r2, [r7, #24]
 800f092:	0151      	lsls	r1, r2, #5
 800f094:	69fa      	ldr	r2, [r7, #28]
 800f096:	440a      	add	r2, r1
 800f098:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f09c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f0a0:	6113      	str	r3, [r2, #16]
 800f0a2:	e033      	b.n	800f10c <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800f0a4:	68bb      	ldr	r3, [r7, #8]
 800f0a6:	695a      	ldr	r2, [r3, #20]
 800f0a8:	68bb      	ldr	r3, [r7, #8]
 800f0aa:	689b      	ldr	r3, [r3, #8]
 800f0ac:	4413      	add	r3, r2
 800f0ae:	1e5a      	subs	r2, r3, #1
 800f0b0:	68bb      	ldr	r3, [r7, #8]
 800f0b2:	689b      	ldr	r3, [r3, #8]
 800f0b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800f0b8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800f0ba:	69bb      	ldr	r3, [r7, #24]
 800f0bc:	015a      	lsls	r2, r3, #5
 800f0be:	69fb      	ldr	r3, [r7, #28]
 800f0c0:	4413      	add	r3, r2
 800f0c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0c6:	691a      	ldr	r2, [r3, #16]
 800f0c8:	8afb      	ldrh	r3, [r7, #22]
 800f0ca:	04d9      	lsls	r1, r3, #19
 800f0cc:	4b3b      	ldr	r3, [pc, #236]	; (800f1bc <USB_EPStartXfer+0x494>)
 800f0ce:	400b      	ands	r3, r1
 800f0d0:	69b9      	ldr	r1, [r7, #24]
 800f0d2:	0148      	lsls	r0, r1, #5
 800f0d4:	69f9      	ldr	r1, [r7, #28]
 800f0d6:	4401      	add	r1, r0
 800f0d8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f0dc:	4313      	orrs	r3, r2
 800f0de:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800f0e0:	69bb      	ldr	r3, [r7, #24]
 800f0e2:	015a      	lsls	r2, r3, #5
 800f0e4:	69fb      	ldr	r3, [r7, #28]
 800f0e6:	4413      	add	r3, r2
 800f0e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0ec:	691a      	ldr	r2, [r3, #16]
 800f0ee:	68bb      	ldr	r3, [r7, #8]
 800f0f0:	689b      	ldr	r3, [r3, #8]
 800f0f2:	8af9      	ldrh	r1, [r7, #22]
 800f0f4:	fb01 f303 	mul.w	r3, r1, r3
 800f0f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f0fc:	69b9      	ldr	r1, [r7, #24]
 800f0fe:	0148      	lsls	r0, r1, #5
 800f100:	69f9      	ldr	r1, [r7, #28]
 800f102:	4401      	add	r1, r0
 800f104:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f108:	4313      	orrs	r3, r2
 800f10a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800f10c:	79fb      	ldrb	r3, [r7, #7]
 800f10e:	2b01      	cmp	r3, #1
 800f110:	d10d      	bne.n	800f12e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800f112:	68bb      	ldr	r3, [r7, #8]
 800f114:	68db      	ldr	r3, [r3, #12]
 800f116:	2b00      	cmp	r3, #0
 800f118:	d009      	beq.n	800f12e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f11a:	68bb      	ldr	r3, [r7, #8]
 800f11c:	68d9      	ldr	r1, [r3, #12]
 800f11e:	69bb      	ldr	r3, [r7, #24]
 800f120:	015a      	lsls	r2, r3, #5
 800f122:	69fb      	ldr	r3, [r7, #28]
 800f124:	4413      	add	r3, r2
 800f126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f12a:	460a      	mov	r2, r1
 800f12c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800f12e:	68bb      	ldr	r3, [r7, #8]
 800f130:	78db      	ldrb	r3, [r3, #3]
 800f132:	2b01      	cmp	r3, #1
 800f134:	d128      	bne.n	800f188 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f136:	69fb      	ldr	r3, [r7, #28]
 800f138:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f13c:	689b      	ldr	r3, [r3, #8]
 800f13e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f142:	2b00      	cmp	r3, #0
 800f144:	d110      	bne.n	800f168 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800f146:	69bb      	ldr	r3, [r7, #24]
 800f148:	015a      	lsls	r2, r3, #5
 800f14a:	69fb      	ldr	r3, [r7, #28]
 800f14c:	4413      	add	r3, r2
 800f14e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	69ba      	ldr	r2, [r7, #24]
 800f156:	0151      	lsls	r1, r2, #5
 800f158:	69fa      	ldr	r2, [r7, #28]
 800f15a:	440a      	add	r2, r1
 800f15c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f160:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f164:	6013      	str	r3, [r2, #0]
 800f166:	e00f      	b.n	800f188 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800f168:	69bb      	ldr	r3, [r7, #24]
 800f16a:	015a      	lsls	r2, r3, #5
 800f16c:	69fb      	ldr	r3, [r7, #28]
 800f16e:	4413      	add	r3, r2
 800f170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	69ba      	ldr	r2, [r7, #24]
 800f178:	0151      	lsls	r1, r2, #5
 800f17a:	69fa      	ldr	r2, [r7, #28]
 800f17c:	440a      	add	r2, r1
 800f17e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f182:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f186:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f188:	69bb      	ldr	r3, [r7, #24]
 800f18a:	015a      	lsls	r2, r3, #5
 800f18c:	69fb      	ldr	r3, [r7, #28]
 800f18e:	4413      	add	r3, r2
 800f190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	69ba      	ldr	r2, [r7, #24]
 800f198:	0151      	lsls	r1, r2, #5
 800f19a:	69fa      	ldr	r2, [r7, #28]
 800f19c:	440a      	add	r2, r1
 800f19e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f1a2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f1a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f1a8:	2300      	movs	r3, #0
}
 800f1aa:	4618      	mov	r0, r3
 800f1ac:	3720      	adds	r7, #32
 800f1ae:	46bd      	mov	sp, r7
 800f1b0:	bd80      	pop	{r7, pc}
 800f1b2:	bf00      	nop
 800f1b4:	fff80000 	.word	0xfff80000
 800f1b8:	e007ffff 	.word	0xe007ffff
 800f1bc:	1ff80000 	.word	0x1ff80000

0800f1c0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800f1c0:	b480      	push	{r7}
 800f1c2:	b087      	sub	sp, #28
 800f1c4:	af00      	add	r7, sp, #0
 800f1c6:	60f8      	str	r0, [r7, #12]
 800f1c8:	60b9      	str	r1, [r7, #8]
 800f1ca:	4613      	mov	r3, r2
 800f1cc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800f1d2:	68bb      	ldr	r3, [r7, #8]
 800f1d4:	781b      	ldrb	r3, [r3, #0]
 800f1d6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f1d8:	68bb      	ldr	r3, [r7, #8]
 800f1da:	785b      	ldrb	r3, [r3, #1]
 800f1dc:	2b01      	cmp	r3, #1
 800f1de:	f040 80cd 	bne.w	800f37c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800f1e2:	68bb      	ldr	r3, [r7, #8]
 800f1e4:	695b      	ldr	r3, [r3, #20]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d132      	bne.n	800f250 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f1ea:	693b      	ldr	r3, [r7, #16]
 800f1ec:	015a      	lsls	r2, r3, #5
 800f1ee:	697b      	ldr	r3, [r7, #20]
 800f1f0:	4413      	add	r3, r2
 800f1f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f1f6:	691a      	ldr	r2, [r3, #16]
 800f1f8:	693b      	ldr	r3, [r7, #16]
 800f1fa:	0159      	lsls	r1, r3, #5
 800f1fc:	697b      	ldr	r3, [r7, #20]
 800f1fe:	440b      	add	r3, r1
 800f200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f204:	4619      	mov	r1, r3
 800f206:	4b98      	ldr	r3, [pc, #608]	; (800f468 <USB_EP0StartXfer+0x2a8>)
 800f208:	4013      	ands	r3, r2
 800f20a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f20c:	693b      	ldr	r3, [r7, #16]
 800f20e:	015a      	lsls	r2, r3, #5
 800f210:	697b      	ldr	r3, [r7, #20]
 800f212:	4413      	add	r3, r2
 800f214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f218:	691b      	ldr	r3, [r3, #16]
 800f21a:	693a      	ldr	r2, [r7, #16]
 800f21c:	0151      	lsls	r1, r2, #5
 800f21e:	697a      	ldr	r2, [r7, #20]
 800f220:	440a      	add	r2, r1
 800f222:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f226:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f22a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f22c:	693b      	ldr	r3, [r7, #16]
 800f22e:	015a      	lsls	r2, r3, #5
 800f230:	697b      	ldr	r3, [r7, #20]
 800f232:	4413      	add	r3, r2
 800f234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f238:	691a      	ldr	r2, [r3, #16]
 800f23a:	693b      	ldr	r3, [r7, #16]
 800f23c:	0159      	lsls	r1, r3, #5
 800f23e:	697b      	ldr	r3, [r7, #20]
 800f240:	440b      	add	r3, r1
 800f242:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f246:	4619      	mov	r1, r3
 800f248:	4b88      	ldr	r3, [pc, #544]	; (800f46c <USB_EP0StartXfer+0x2ac>)
 800f24a:	4013      	ands	r3, r2
 800f24c:	610b      	str	r3, [r1, #16]
 800f24e:	e04e      	b.n	800f2ee <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f250:	693b      	ldr	r3, [r7, #16]
 800f252:	015a      	lsls	r2, r3, #5
 800f254:	697b      	ldr	r3, [r7, #20]
 800f256:	4413      	add	r3, r2
 800f258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f25c:	691a      	ldr	r2, [r3, #16]
 800f25e:	693b      	ldr	r3, [r7, #16]
 800f260:	0159      	lsls	r1, r3, #5
 800f262:	697b      	ldr	r3, [r7, #20]
 800f264:	440b      	add	r3, r1
 800f266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f26a:	4619      	mov	r1, r3
 800f26c:	4b7f      	ldr	r3, [pc, #508]	; (800f46c <USB_EP0StartXfer+0x2ac>)
 800f26e:	4013      	ands	r3, r2
 800f270:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f272:	693b      	ldr	r3, [r7, #16]
 800f274:	015a      	lsls	r2, r3, #5
 800f276:	697b      	ldr	r3, [r7, #20]
 800f278:	4413      	add	r3, r2
 800f27a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f27e:	691a      	ldr	r2, [r3, #16]
 800f280:	693b      	ldr	r3, [r7, #16]
 800f282:	0159      	lsls	r1, r3, #5
 800f284:	697b      	ldr	r3, [r7, #20]
 800f286:	440b      	add	r3, r1
 800f288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f28c:	4619      	mov	r1, r3
 800f28e:	4b76      	ldr	r3, [pc, #472]	; (800f468 <USB_EP0StartXfer+0x2a8>)
 800f290:	4013      	ands	r3, r2
 800f292:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800f294:	68bb      	ldr	r3, [r7, #8]
 800f296:	695a      	ldr	r2, [r3, #20]
 800f298:	68bb      	ldr	r3, [r7, #8]
 800f29a:	689b      	ldr	r3, [r3, #8]
 800f29c:	429a      	cmp	r2, r3
 800f29e:	d903      	bls.n	800f2a8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800f2a0:	68bb      	ldr	r3, [r7, #8]
 800f2a2:	689a      	ldr	r2, [r3, #8]
 800f2a4:	68bb      	ldr	r3, [r7, #8]
 800f2a6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f2a8:	693b      	ldr	r3, [r7, #16]
 800f2aa:	015a      	lsls	r2, r3, #5
 800f2ac:	697b      	ldr	r3, [r7, #20]
 800f2ae:	4413      	add	r3, r2
 800f2b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f2b4:	691b      	ldr	r3, [r3, #16]
 800f2b6:	693a      	ldr	r2, [r7, #16]
 800f2b8:	0151      	lsls	r1, r2, #5
 800f2ba:	697a      	ldr	r2, [r7, #20]
 800f2bc:	440a      	add	r2, r1
 800f2be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f2c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f2c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f2c8:	693b      	ldr	r3, [r7, #16]
 800f2ca:	015a      	lsls	r2, r3, #5
 800f2cc:	697b      	ldr	r3, [r7, #20]
 800f2ce:	4413      	add	r3, r2
 800f2d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f2d4:	691a      	ldr	r2, [r3, #16]
 800f2d6:	68bb      	ldr	r3, [r7, #8]
 800f2d8:	695b      	ldr	r3, [r3, #20]
 800f2da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f2de:	6939      	ldr	r1, [r7, #16]
 800f2e0:	0148      	lsls	r0, r1, #5
 800f2e2:	6979      	ldr	r1, [r7, #20]
 800f2e4:	4401      	add	r1, r0
 800f2e6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f2ea:	4313      	orrs	r3, r2
 800f2ec:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800f2ee:	79fb      	ldrb	r3, [r7, #7]
 800f2f0:	2b01      	cmp	r3, #1
 800f2f2:	d11e      	bne.n	800f332 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800f2f4:	68bb      	ldr	r3, [r7, #8]
 800f2f6:	691b      	ldr	r3, [r3, #16]
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d009      	beq.n	800f310 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800f2fc:	693b      	ldr	r3, [r7, #16]
 800f2fe:	015a      	lsls	r2, r3, #5
 800f300:	697b      	ldr	r3, [r7, #20]
 800f302:	4413      	add	r3, r2
 800f304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f308:	461a      	mov	r2, r3
 800f30a:	68bb      	ldr	r3, [r7, #8]
 800f30c:	691b      	ldr	r3, [r3, #16]
 800f30e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f310:	693b      	ldr	r3, [r7, #16]
 800f312:	015a      	lsls	r2, r3, #5
 800f314:	697b      	ldr	r3, [r7, #20]
 800f316:	4413      	add	r3, r2
 800f318:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	693a      	ldr	r2, [r7, #16]
 800f320:	0151      	lsls	r1, r2, #5
 800f322:	697a      	ldr	r2, [r7, #20]
 800f324:	440a      	add	r2, r1
 800f326:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f32a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f32e:	6013      	str	r3, [r2, #0]
 800f330:	e092      	b.n	800f458 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f332:	693b      	ldr	r3, [r7, #16]
 800f334:	015a      	lsls	r2, r3, #5
 800f336:	697b      	ldr	r3, [r7, #20]
 800f338:	4413      	add	r3, r2
 800f33a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	693a      	ldr	r2, [r7, #16]
 800f342:	0151      	lsls	r1, r2, #5
 800f344:	697a      	ldr	r2, [r7, #20]
 800f346:	440a      	add	r2, r1
 800f348:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f34c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f350:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800f352:	68bb      	ldr	r3, [r7, #8]
 800f354:	695b      	ldr	r3, [r3, #20]
 800f356:	2b00      	cmp	r3, #0
 800f358:	d07e      	beq.n	800f458 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f35a:	697b      	ldr	r3, [r7, #20]
 800f35c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f360:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f362:	68bb      	ldr	r3, [r7, #8]
 800f364:	781b      	ldrb	r3, [r3, #0]
 800f366:	f003 030f 	and.w	r3, r3, #15
 800f36a:	2101      	movs	r1, #1
 800f36c:	fa01 f303 	lsl.w	r3, r1, r3
 800f370:	6979      	ldr	r1, [r7, #20]
 800f372:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f376:	4313      	orrs	r3, r2
 800f378:	634b      	str	r3, [r1, #52]	; 0x34
 800f37a:	e06d      	b.n	800f458 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f37c:	693b      	ldr	r3, [r7, #16]
 800f37e:	015a      	lsls	r2, r3, #5
 800f380:	697b      	ldr	r3, [r7, #20]
 800f382:	4413      	add	r3, r2
 800f384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f388:	691a      	ldr	r2, [r3, #16]
 800f38a:	693b      	ldr	r3, [r7, #16]
 800f38c:	0159      	lsls	r1, r3, #5
 800f38e:	697b      	ldr	r3, [r7, #20]
 800f390:	440b      	add	r3, r1
 800f392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f396:	4619      	mov	r1, r3
 800f398:	4b34      	ldr	r3, [pc, #208]	; (800f46c <USB_EP0StartXfer+0x2ac>)
 800f39a:	4013      	ands	r3, r2
 800f39c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f39e:	693b      	ldr	r3, [r7, #16]
 800f3a0:	015a      	lsls	r2, r3, #5
 800f3a2:	697b      	ldr	r3, [r7, #20]
 800f3a4:	4413      	add	r3, r2
 800f3a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3aa:	691a      	ldr	r2, [r3, #16]
 800f3ac:	693b      	ldr	r3, [r7, #16]
 800f3ae:	0159      	lsls	r1, r3, #5
 800f3b0:	697b      	ldr	r3, [r7, #20]
 800f3b2:	440b      	add	r3, r1
 800f3b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3b8:	4619      	mov	r1, r3
 800f3ba:	4b2b      	ldr	r3, [pc, #172]	; (800f468 <USB_EP0StartXfer+0x2a8>)
 800f3bc:	4013      	ands	r3, r2
 800f3be:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800f3c0:	68bb      	ldr	r3, [r7, #8]
 800f3c2:	695b      	ldr	r3, [r3, #20]
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d003      	beq.n	800f3d0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800f3c8:	68bb      	ldr	r3, [r7, #8]
 800f3ca:	689a      	ldr	r2, [r3, #8]
 800f3cc:	68bb      	ldr	r3, [r7, #8]
 800f3ce:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f3d0:	693b      	ldr	r3, [r7, #16]
 800f3d2:	015a      	lsls	r2, r3, #5
 800f3d4:	697b      	ldr	r3, [r7, #20]
 800f3d6:	4413      	add	r3, r2
 800f3d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3dc:	691b      	ldr	r3, [r3, #16]
 800f3de:	693a      	ldr	r2, [r7, #16]
 800f3e0:	0151      	lsls	r1, r2, #5
 800f3e2:	697a      	ldr	r2, [r7, #20]
 800f3e4:	440a      	add	r2, r1
 800f3e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f3ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f3ee:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800f3f0:	693b      	ldr	r3, [r7, #16]
 800f3f2:	015a      	lsls	r2, r3, #5
 800f3f4:	697b      	ldr	r3, [r7, #20]
 800f3f6:	4413      	add	r3, r2
 800f3f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3fc:	691a      	ldr	r2, [r3, #16]
 800f3fe:	68bb      	ldr	r3, [r7, #8]
 800f400:	689b      	ldr	r3, [r3, #8]
 800f402:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f406:	6939      	ldr	r1, [r7, #16]
 800f408:	0148      	lsls	r0, r1, #5
 800f40a:	6979      	ldr	r1, [r7, #20]
 800f40c:	4401      	add	r1, r0
 800f40e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f412:	4313      	orrs	r3, r2
 800f414:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800f416:	79fb      	ldrb	r3, [r7, #7]
 800f418:	2b01      	cmp	r3, #1
 800f41a:	d10d      	bne.n	800f438 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800f41c:	68bb      	ldr	r3, [r7, #8]
 800f41e:	68db      	ldr	r3, [r3, #12]
 800f420:	2b00      	cmp	r3, #0
 800f422:	d009      	beq.n	800f438 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f424:	68bb      	ldr	r3, [r7, #8]
 800f426:	68d9      	ldr	r1, [r3, #12]
 800f428:	693b      	ldr	r3, [r7, #16]
 800f42a:	015a      	lsls	r2, r3, #5
 800f42c:	697b      	ldr	r3, [r7, #20]
 800f42e:	4413      	add	r3, r2
 800f430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f434:	460a      	mov	r2, r1
 800f436:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f438:	693b      	ldr	r3, [r7, #16]
 800f43a:	015a      	lsls	r2, r3, #5
 800f43c:	697b      	ldr	r3, [r7, #20]
 800f43e:	4413      	add	r3, r2
 800f440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	693a      	ldr	r2, [r7, #16]
 800f448:	0151      	lsls	r1, r2, #5
 800f44a:	697a      	ldr	r2, [r7, #20]
 800f44c:	440a      	add	r2, r1
 800f44e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f452:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f456:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f458:	2300      	movs	r3, #0
}
 800f45a:	4618      	mov	r0, r3
 800f45c:	371c      	adds	r7, #28
 800f45e:	46bd      	mov	sp, r7
 800f460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f464:	4770      	bx	lr
 800f466:	bf00      	nop
 800f468:	e007ffff 	.word	0xe007ffff
 800f46c:	fff80000 	.word	0xfff80000

0800f470 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800f470:	b480      	push	{r7}
 800f472:	b089      	sub	sp, #36	; 0x24
 800f474:	af00      	add	r7, sp, #0
 800f476:	60f8      	str	r0, [r7, #12]
 800f478:	60b9      	str	r1, [r7, #8]
 800f47a:	4611      	mov	r1, r2
 800f47c:	461a      	mov	r2, r3
 800f47e:	460b      	mov	r3, r1
 800f480:	71fb      	strb	r3, [r7, #7]
 800f482:	4613      	mov	r3, r2
 800f484:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800f48a:	68bb      	ldr	r3, [r7, #8]
 800f48c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800f48e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f492:	2b00      	cmp	r3, #0
 800f494:	d11a      	bne.n	800f4cc <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800f496:	88bb      	ldrh	r3, [r7, #4]
 800f498:	3303      	adds	r3, #3
 800f49a:	089b      	lsrs	r3, r3, #2
 800f49c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800f49e:	2300      	movs	r3, #0
 800f4a0:	61bb      	str	r3, [r7, #24]
 800f4a2:	e00f      	b.n	800f4c4 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800f4a4:	79fb      	ldrb	r3, [r7, #7]
 800f4a6:	031a      	lsls	r2, r3, #12
 800f4a8:	697b      	ldr	r3, [r7, #20]
 800f4aa:	4413      	add	r3, r2
 800f4ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f4b0:	461a      	mov	r2, r3
 800f4b2:	69fb      	ldr	r3, [r7, #28]
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	6013      	str	r3, [r2, #0]
      pSrc++;
 800f4b8:	69fb      	ldr	r3, [r7, #28]
 800f4ba:	3304      	adds	r3, #4
 800f4bc:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800f4be:	69bb      	ldr	r3, [r7, #24]
 800f4c0:	3301      	adds	r3, #1
 800f4c2:	61bb      	str	r3, [r7, #24]
 800f4c4:	69ba      	ldr	r2, [r7, #24]
 800f4c6:	693b      	ldr	r3, [r7, #16]
 800f4c8:	429a      	cmp	r2, r3
 800f4ca:	d3eb      	bcc.n	800f4a4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800f4cc:	2300      	movs	r3, #0
}
 800f4ce:	4618      	mov	r0, r3
 800f4d0:	3724      	adds	r7, #36	; 0x24
 800f4d2:	46bd      	mov	sp, r7
 800f4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d8:	4770      	bx	lr

0800f4da <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800f4da:	b480      	push	{r7}
 800f4dc:	b089      	sub	sp, #36	; 0x24
 800f4de:	af00      	add	r7, sp, #0
 800f4e0:	60f8      	str	r0, [r7, #12]
 800f4e2:	60b9      	str	r1, [r7, #8]
 800f4e4:	4613      	mov	r3, r2
 800f4e6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800f4ec:	68bb      	ldr	r3, [r7, #8]
 800f4ee:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800f4f0:	88fb      	ldrh	r3, [r7, #6]
 800f4f2:	3303      	adds	r3, #3
 800f4f4:	089b      	lsrs	r3, r3, #2
 800f4f6:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800f4f8:	2300      	movs	r3, #0
 800f4fa:	61bb      	str	r3, [r7, #24]
 800f4fc:	e00b      	b.n	800f516 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800f4fe:	697b      	ldr	r3, [r7, #20]
 800f500:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f504:	681a      	ldr	r2, [r3, #0]
 800f506:	69fb      	ldr	r3, [r7, #28]
 800f508:	601a      	str	r2, [r3, #0]
    pDest++;
 800f50a:	69fb      	ldr	r3, [r7, #28]
 800f50c:	3304      	adds	r3, #4
 800f50e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800f510:	69bb      	ldr	r3, [r7, #24]
 800f512:	3301      	adds	r3, #1
 800f514:	61bb      	str	r3, [r7, #24]
 800f516:	69ba      	ldr	r2, [r7, #24]
 800f518:	693b      	ldr	r3, [r7, #16]
 800f51a:	429a      	cmp	r2, r3
 800f51c:	d3ef      	bcc.n	800f4fe <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800f51e:	69fb      	ldr	r3, [r7, #28]
}
 800f520:	4618      	mov	r0, r3
 800f522:	3724      	adds	r7, #36	; 0x24
 800f524:	46bd      	mov	sp, r7
 800f526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f52a:	4770      	bx	lr

0800f52c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f52c:	b480      	push	{r7}
 800f52e:	b085      	sub	sp, #20
 800f530:	af00      	add	r7, sp, #0
 800f532:	6078      	str	r0, [r7, #4]
 800f534:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f53a:	683b      	ldr	r3, [r7, #0]
 800f53c:	781b      	ldrb	r3, [r3, #0]
 800f53e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f540:	683b      	ldr	r3, [r7, #0]
 800f542:	785b      	ldrb	r3, [r3, #1]
 800f544:	2b01      	cmp	r3, #1
 800f546:	d12c      	bne.n	800f5a2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f548:	68bb      	ldr	r3, [r7, #8]
 800f54a:	015a      	lsls	r2, r3, #5
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	4413      	add	r3, r2
 800f550:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	2b00      	cmp	r3, #0
 800f558:	db12      	blt.n	800f580 <USB_EPSetStall+0x54>
 800f55a:	68bb      	ldr	r3, [r7, #8]
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d00f      	beq.n	800f580 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800f560:	68bb      	ldr	r3, [r7, #8]
 800f562:	015a      	lsls	r2, r3, #5
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	4413      	add	r3, r2
 800f568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	68ba      	ldr	r2, [r7, #8]
 800f570:	0151      	lsls	r1, r2, #5
 800f572:	68fa      	ldr	r2, [r7, #12]
 800f574:	440a      	add	r2, r1
 800f576:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f57a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f57e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800f580:	68bb      	ldr	r3, [r7, #8]
 800f582:	015a      	lsls	r2, r3, #5
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	4413      	add	r3, r2
 800f588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	68ba      	ldr	r2, [r7, #8]
 800f590:	0151      	lsls	r1, r2, #5
 800f592:	68fa      	ldr	r2, [r7, #12]
 800f594:	440a      	add	r2, r1
 800f596:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f59a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f59e:	6013      	str	r3, [r2, #0]
 800f5a0:	e02b      	b.n	800f5fa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f5a2:	68bb      	ldr	r3, [r7, #8]
 800f5a4:	015a      	lsls	r2, r3, #5
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	4413      	add	r3, r2
 800f5aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	db12      	blt.n	800f5da <USB_EPSetStall+0xae>
 800f5b4:	68bb      	ldr	r3, [r7, #8]
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d00f      	beq.n	800f5da <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800f5ba:	68bb      	ldr	r3, [r7, #8]
 800f5bc:	015a      	lsls	r2, r3, #5
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	4413      	add	r3, r2
 800f5c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	68ba      	ldr	r2, [r7, #8]
 800f5ca:	0151      	lsls	r1, r2, #5
 800f5cc:	68fa      	ldr	r2, [r7, #12]
 800f5ce:	440a      	add	r2, r1
 800f5d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f5d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f5d8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800f5da:	68bb      	ldr	r3, [r7, #8]
 800f5dc:	015a      	lsls	r2, r3, #5
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	4413      	add	r3, r2
 800f5e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	68ba      	ldr	r2, [r7, #8]
 800f5ea:	0151      	lsls	r1, r2, #5
 800f5ec:	68fa      	ldr	r2, [r7, #12]
 800f5ee:	440a      	add	r2, r1
 800f5f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f5f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f5f8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f5fa:	2300      	movs	r3, #0
}
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	3714      	adds	r7, #20
 800f600:	46bd      	mov	sp, r7
 800f602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f606:	4770      	bx	lr

0800f608 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f608:	b480      	push	{r7}
 800f60a:	b085      	sub	sp, #20
 800f60c:	af00      	add	r7, sp, #0
 800f60e:	6078      	str	r0, [r7, #4]
 800f610:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f616:	683b      	ldr	r3, [r7, #0]
 800f618:	781b      	ldrb	r3, [r3, #0]
 800f61a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f61c:	683b      	ldr	r3, [r7, #0]
 800f61e:	785b      	ldrb	r3, [r3, #1]
 800f620:	2b01      	cmp	r3, #1
 800f622:	d128      	bne.n	800f676 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800f624:	68bb      	ldr	r3, [r7, #8]
 800f626:	015a      	lsls	r2, r3, #5
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	4413      	add	r3, r2
 800f62c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	68ba      	ldr	r2, [r7, #8]
 800f634:	0151      	lsls	r1, r2, #5
 800f636:	68fa      	ldr	r2, [r7, #12]
 800f638:	440a      	add	r2, r1
 800f63a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f63e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f642:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f644:	683b      	ldr	r3, [r7, #0]
 800f646:	78db      	ldrb	r3, [r3, #3]
 800f648:	2b03      	cmp	r3, #3
 800f64a:	d003      	beq.n	800f654 <USB_EPClearStall+0x4c>
 800f64c:	683b      	ldr	r3, [r7, #0]
 800f64e:	78db      	ldrb	r3, [r3, #3]
 800f650:	2b02      	cmp	r3, #2
 800f652:	d138      	bne.n	800f6c6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f654:	68bb      	ldr	r3, [r7, #8]
 800f656:	015a      	lsls	r2, r3, #5
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	4413      	add	r3, r2
 800f65c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	68ba      	ldr	r2, [r7, #8]
 800f664:	0151      	lsls	r1, r2, #5
 800f666:	68fa      	ldr	r2, [r7, #12]
 800f668:	440a      	add	r2, r1
 800f66a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f66e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f672:	6013      	str	r3, [r2, #0]
 800f674:	e027      	b.n	800f6c6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800f676:	68bb      	ldr	r3, [r7, #8]
 800f678:	015a      	lsls	r2, r3, #5
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	4413      	add	r3, r2
 800f67e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	68ba      	ldr	r2, [r7, #8]
 800f686:	0151      	lsls	r1, r2, #5
 800f688:	68fa      	ldr	r2, [r7, #12]
 800f68a:	440a      	add	r2, r1
 800f68c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f690:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f694:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f696:	683b      	ldr	r3, [r7, #0]
 800f698:	78db      	ldrb	r3, [r3, #3]
 800f69a:	2b03      	cmp	r3, #3
 800f69c:	d003      	beq.n	800f6a6 <USB_EPClearStall+0x9e>
 800f69e:	683b      	ldr	r3, [r7, #0]
 800f6a0:	78db      	ldrb	r3, [r3, #3]
 800f6a2:	2b02      	cmp	r3, #2
 800f6a4:	d10f      	bne.n	800f6c6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f6a6:	68bb      	ldr	r3, [r7, #8]
 800f6a8:	015a      	lsls	r2, r3, #5
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	4413      	add	r3, r2
 800f6ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	68ba      	ldr	r2, [r7, #8]
 800f6b6:	0151      	lsls	r1, r2, #5
 800f6b8:	68fa      	ldr	r2, [r7, #12]
 800f6ba:	440a      	add	r2, r1
 800f6bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f6c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f6c4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800f6c6:	2300      	movs	r3, #0
}
 800f6c8:	4618      	mov	r0, r3
 800f6ca:	3714      	adds	r7, #20
 800f6cc:	46bd      	mov	sp, r7
 800f6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d2:	4770      	bx	lr

0800f6d4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800f6d4:	b480      	push	{r7}
 800f6d6:	b085      	sub	sp, #20
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	6078      	str	r0, [r7, #4]
 800f6dc:	460b      	mov	r3, r1
 800f6de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	68fa      	ldr	r2, [r7, #12]
 800f6ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f6f2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800f6f6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f6fe:	681a      	ldr	r2, [r3, #0]
 800f700:	78fb      	ldrb	r3, [r7, #3]
 800f702:	011b      	lsls	r3, r3, #4
 800f704:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800f708:	68f9      	ldr	r1, [r7, #12]
 800f70a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f70e:	4313      	orrs	r3, r2
 800f710:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800f712:	2300      	movs	r3, #0
}
 800f714:	4618      	mov	r0, r3
 800f716:	3714      	adds	r7, #20
 800f718:	46bd      	mov	sp, r7
 800f71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f71e:	4770      	bx	lr

0800f720 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800f720:	b580      	push	{r7, lr}
 800f722:	b084      	sub	sp, #16
 800f724:	af00      	add	r7, sp, #0
 800f726:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f732:	685b      	ldr	r3, [r3, #4]
 800f734:	68fa      	ldr	r2, [r7, #12]
 800f736:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f73a:	f023 0302 	bic.w	r3, r3, #2
 800f73e:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800f740:	2003      	movs	r0, #3
 800f742:	f7f2 fbeb 	bl	8001f1c <HAL_Delay>

  return HAL_OK;
 800f746:	2300      	movs	r3, #0
}
 800f748:	4618      	mov	r0, r3
 800f74a:	3710      	adds	r7, #16
 800f74c:	46bd      	mov	sp, r7
 800f74e:	bd80      	pop	{r7, pc}

0800f750 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800f750:	b580      	push	{r7, lr}
 800f752:	b084      	sub	sp, #16
 800f754:	af00      	add	r7, sp, #0
 800f756:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f762:	685b      	ldr	r3, [r3, #4]
 800f764:	68fa      	ldr	r2, [r7, #12]
 800f766:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f76a:	f043 0302 	orr.w	r3, r3, #2
 800f76e:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800f770:	2003      	movs	r0, #3
 800f772:	f7f2 fbd3 	bl	8001f1c <HAL_Delay>

  return HAL_OK;
 800f776:	2300      	movs	r3, #0
}
 800f778:	4618      	mov	r0, r3
 800f77a:	3710      	adds	r7, #16
 800f77c:	46bd      	mov	sp, r7
 800f77e:	bd80      	pop	{r7, pc}

0800f780 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800f780:	b480      	push	{r7}
 800f782:	b085      	sub	sp, #20
 800f784:	af00      	add	r7, sp, #0
 800f786:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	695b      	ldr	r3, [r3, #20]
 800f78c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	699b      	ldr	r3, [r3, #24]
 800f792:	68fa      	ldr	r2, [r7, #12]
 800f794:	4013      	ands	r3, r2
 800f796:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800f798:	68fb      	ldr	r3, [r7, #12]
}
 800f79a:	4618      	mov	r0, r3
 800f79c:	3714      	adds	r7, #20
 800f79e:	46bd      	mov	sp, r7
 800f7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a4:	4770      	bx	lr

0800f7a6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800f7a6:	b480      	push	{r7}
 800f7a8:	b085      	sub	sp, #20
 800f7aa:	af00      	add	r7, sp, #0
 800f7ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f7b8:	699b      	ldr	r3, [r3, #24]
 800f7ba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f7c2:	69db      	ldr	r3, [r3, #28]
 800f7c4:	68ba      	ldr	r2, [r7, #8]
 800f7c6:	4013      	ands	r3, r2
 800f7c8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800f7ca:	68bb      	ldr	r3, [r7, #8]
 800f7cc:	0c1b      	lsrs	r3, r3, #16
}
 800f7ce:	4618      	mov	r0, r3
 800f7d0:	3714      	adds	r7, #20
 800f7d2:	46bd      	mov	sp, r7
 800f7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7d8:	4770      	bx	lr

0800f7da <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800f7da:	b480      	push	{r7}
 800f7dc:	b085      	sub	sp, #20
 800f7de:	af00      	add	r7, sp, #0
 800f7e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f7ec:	699b      	ldr	r3, [r3, #24]
 800f7ee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f7f6:	69db      	ldr	r3, [r3, #28]
 800f7f8:	68ba      	ldr	r2, [r7, #8]
 800f7fa:	4013      	ands	r3, r2
 800f7fc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800f7fe:	68bb      	ldr	r3, [r7, #8]
 800f800:	b29b      	uxth	r3, r3
}
 800f802:	4618      	mov	r0, r3
 800f804:	3714      	adds	r7, #20
 800f806:	46bd      	mov	sp, r7
 800f808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f80c:	4770      	bx	lr

0800f80e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f80e:	b480      	push	{r7}
 800f810:	b085      	sub	sp, #20
 800f812:	af00      	add	r7, sp, #0
 800f814:	6078      	str	r0, [r7, #4]
 800f816:	460b      	mov	r3, r1
 800f818:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800f81e:	78fb      	ldrb	r3, [r7, #3]
 800f820:	015a      	lsls	r2, r3, #5
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	4413      	add	r3, r2
 800f826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f82a:	689b      	ldr	r3, [r3, #8]
 800f82c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f834:	695b      	ldr	r3, [r3, #20]
 800f836:	68ba      	ldr	r2, [r7, #8]
 800f838:	4013      	ands	r3, r2
 800f83a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f83c:	68bb      	ldr	r3, [r7, #8]
}
 800f83e:	4618      	mov	r0, r3
 800f840:	3714      	adds	r7, #20
 800f842:	46bd      	mov	sp, r7
 800f844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f848:	4770      	bx	lr

0800f84a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f84a:	b480      	push	{r7}
 800f84c:	b087      	sub	sp, #28
 800f84e:	af00      	add	r7, sp, #0
 800f850:	6078      	str	r0, [r7, #4]
 800f852:	460b      	mov	r3, r1
 800f854:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800f85a:	697b      	ldr	r3, [r7, #20]
 800f85c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f860:	691b      	ldr	r3, [r3, #16]
 800f862:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800f864:	697b      	ldr	r3, [r7, #20]
 800f866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f86a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f86c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800f86e:	78fb      	ldrb	r3, [r7, #3]
 800f870:	f003 030f 	and.w	r3, r3, #15
 800f874:	68fa      	ldr	r2, [r7, #12]
 800f876:	fa22 f303 	lsr.w	r3, r2, r3
 800f87a:	01db      	lsls	r3, r3, #7
 800f87c:	b2db      	uxtb	r3, r3
 800f87e:	693a      	ldr	r2, [r7, #16]
 800f880:	4313      	orrs	r3, r2
 800f882:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800f884:	78fb      	ldrb	r3, [r7, #3]
 800f886:	015a      	lsls	r2, r3, #5
 800f888:	697b      	ldr	r3, [r7, #20]
 800f88a:	4413      	add	r3, r2
 800f88c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f890:	689b      	ldr	r3, [r3, #8]
 800f892:	693a      	ldr	r2, [r7, #16]
 800f894:	4013      	ands	r3, r2
 800f896:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f898:	68bb      	ldr	r3, [r7, #8]
}
 800f89a:	4618      	mov	r0, r3
 800f89c:	371c      	adds	r7, #28
 800f89e:	46bd      	mov	sp, r7
 800f8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8a4:	4770      	bx	lr

0800f8a6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800f8a6:	b480      	push	{r7}
 800f8a8:	b083      	sub	sp, #12
 800f8aa:	af00      	add	r7, sp, #0
 800f8ac:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	695b      	ldr	r3, [r3, #20]
 800f8b2:	f003 0301 	and.w	r3, r3, #1
}
 800f8b6:	4618      	mov	r0, r3
 800f8b8:	370c      	adds	r7, #12
 800f8ba:	46bd      	mov	sp, r7
 800f8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8c0:	4770      	bx	lr
	...

0800f8c4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800f8c4:	b480      	push	{r7}
 800f8c6:	b085      	sub	sp, #20
 800f8c8:	af00      	add	r7, sp, #0
 800f8ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f8d6:	681a      	ldr	r2, [r3, #0]
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f8de:	4619      	mov	r1, r3
 800f8e0:	4b09      	ldr	r3, [pc, #36]	; (800f908 <USB_ActivateSetup+0x44>)
 800f8e2:	4013      	ands	r3, r2
 800f8e4:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f8ec:	685b      	ldr	r3, [r3, #4]
 800f8ee:	68fa      	ldr	r2, [r7, #12]
 800f8f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f8f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f8f8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f8fa:	2300      	movs	r3, #0
}
 800f8fc:	4618      	mov	r0, r3
 800f8fe:	3714      	adds	r7, #20
 800f900:	46bd      	mov	sp, r7
 800f902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f906:	4770      	bx	lr
 800f908:	fffff800 	.word	0xfffff800

0800f90c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800f90c:	b480      	push	{r7}
 800f90e:	b087      	sub	sp, #28
 800f910:	af00      	add	r7, sp, #0
 800f912:	60f8      	str	r0, [r7, #12]
 800f914:	460b      	mov	r3, r1
 800f916:	607a      	str	r2, [r7, #4]
 800f918:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	333c      	adds	r3, #60	; 0x3c
 800f922:	3304      	adds	r3, #4
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800f928:	693b      	ldr	r3, [r7, #16]
 800f92a:	4a26      	ldr	r2, [pc, #152]	; (800f9c4 <USB_EP0_OutStart+0xb8>)
 800f92c:	4293      	cmp	r3, r2
 800f92e:	d90a      	bls.n	800f946 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f930:	697b      	ldr	r3, [r7, #20]
 800f932:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f93c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f940:	d101      	bne.n	800f946 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800f942:	2300      	movs	r3, #0
 800f944:	e037      	b.n	800f9b6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800f946:	697b      	ldr	r3, [r7, #20]
 800f948:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f94c:	461a      	mov	r2, r3
 800f94e:	2300      	movs	r3, #0
 800f950:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f952:	697b      	ldr	r3, [r7, #20]
 800f954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f958:	691b      	ldr	r3, [r3, #16]
 800f95a:	697a      	ldr	r2, [r7, #20]
 800f95c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f960:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f964:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800f966:	697b      	ldr	r3, [r7, #20]
 800f968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f96c:	691b      	ldr	r3, [r3, #16]
 800f96e:	697a      	ldr	r2, [r7, #20]
 800f970:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f974:	f043 0318 	orr.w	r3, r3, #24
 800f978:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800f97a:	697b      	ldr	r3, [r7, #20]
 800f97c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f980:	691b      	ldr	r3, [r3, #16]
 800f982:	697a      	ldr	r2, [r7, #20]
 800f984:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f988:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800f98c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800f98e:	7afb      	ldrb	r3, [r7, #11]
 800f990:	2b01      	cmp	r3, #1
 800f992:	d10f      	bne.n	800f9b4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800f994:	697b      	ldr	r3, [r7, #20]
 800f996:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f99a:	461a      	mov	r2, r3
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800f9a0:	697b      	ldr	r3, [r7, #20]
 800f9a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	697a      	ldr	r2, [r7, #20]
 800f9aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f9ae:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800f9b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f9b4:	2300      	movs	r3, #0
}
 800f9b6:	4618      	mov	r0, r3
 800f9b8:	371c      	adds	r7, #28
 800f9ba:	46bd      	mov	sp, r7
 800f9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9c0:	4770      	bx	lr
 800f9c2:	bf00      	nop
 800f9c4:	4f54300a 	.word	0x4f54300a

0800f9c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800f9c8:	b480      	push	{r7}
 800f9ca:	b085      	sub	sp, #20
 800f9cc:	af00      	add	r7, sp, #0
 800f9ce:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800f9d0:	2300      	movs	r3, #0
 800f9d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	3301      	adds	r3, #1
 800f9d8:	60fb      	str	r3, [r7, #12]
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	4a13      	ldr	r2, [pc, #76]	; (800fa2c <USB_CoreReset+0x64>)
 800f9de:	4293      	cmp	r3, r2
 800f9e0:	d901      	bls.n	800f9e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800f9e2:	2303      	movs	r3, #3
 800f9e4:	e01b      	b.n	800fa1e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	691b      	ldr	r3, [r3, #16]
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	daf2      	bge.n	800f9d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800f9ee:	2300      	movs	r3, #0
 800f9f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	691b      	ldr	r3, [r3, #16]
 800f9f6:	f043 0201 	orr.w	r2, r3, #1
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	3301      	adds	r3, #1
 800fa02:	60fb      	str	r3, [r7, #12]
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	4a09      	ldr	r2, [pc, #36]	; (800fa2c <USB_CoreReset+0x64>)
 800fa08:	4293      	cmp	r3, r2
 800fa0a:	d901      	bls.n	800fa10 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800fa0c:	2303      	movs	r3, #3
 800fa0e:	e006      	b.n	800fa1e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	691b      	ldr	r3, [r3, #16]
 800fa14:	f003 0301 	and.w	r3, r3, #1
 800fa18:	2b01      	cmp	r3, #1
 800fa1a:	d0f0      	beq.n	800f9fe <USB_CoreReset+0x36>

  return HAL_OK;
 800fa1c:	2300      	movs	r3, #0
}
 800fa1e:	4618      	mov	r0, r3
 800fa20:	3714      	adds	r7, #20
 800fa22:	46bd      	mov	sp, r7
 800fa24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa28:	4770      	bx	lr
 800fa2a:	bf00      	nop
 800fa2c:	00030d40 	.word	0x00030d40

0800fa30 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800fa30:	b580      	push	{r7, lr}
 800fa32:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800fa34:	4904      	ldr	r1, [pc, #16]	; (800fa48 <MX_FATFS_Init+0x18>)
 800fa36:	4805      	ldr	r0, [pc, #20]	; (800fa4c <MX_FATFS_Init+0x1c>)
 800fa38:	f005 fbec 	bl	8015214 <FATFS_LinkDriver>
 800fa3c:	4603      	mov	r3, r0
 800fa3e:	461a      	mov	r2, r3
 800fa40:	4b03      	ldr	r3, [pc, #12]	; (800fa50 <MX_FATFS_Init+0x20>)
 800fa42:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800fa44:	bf00      	nop
 800fa46:	bd80      	pop	{r7, pc}
 800fa48:	24040e04 	.word	0x24040e04
 800fa4c:	08017208 	.word	0x08017208
 800fa50:	24040e00 	.word	0x24040e00

0800fa54 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800fa54:	b480      	push	{r7}
 800fa56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800fa58:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800fa5a:	4618      	mov	r0, r3
 800fa5c:	46bd      	mov	sp, r7
 800fa5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa62:	4770      	bx	lr

0800fa64 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800fa64:	b580      	push	{r7, lr}
 800fa66:	b082      	sub	sp, #8
 800fa68:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800fa6a:	2300      	movs	r3, #0
 800fa6c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800fa6e:	f000 f885 	bl	800fb7c <BSP_SD_IsDetected>
 800fa72:	4603      	mov	r3, r0
 800fa74:	2b01      	cmp	r3, #1
 800fa76:	d001      	beq.n	800fa7c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800fa78:	2302      	movs	r3, #2
 800fa7a:	e012      	b.n	800faa2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800fa7c:	480b      	ldr	r0, [pc, #44]	; (800faac <BSP_SD_Init+0x48>)
 800fa7e:	f7fa fbbb 	bl	800a1f8 <HAL_SD_Init>
 800fa82:	4603      	mov	r3, r0
 800fa84:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800fa86:	79fb      	ldrb	r3, [r7, #7]
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d109      	bne.n	800faa0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800fa8c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800fa90:	4806      	ldr	r0, [pc, #24]	; (800faac <BSP_SD_Init+0x48>)
 800fa92:	f7fb fd8f 	bl	800b5b4 <HAL_SD_ConfigWideBusOperation>
 800fa96:	4603      	mov	r3, r0
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d001      	beq.n	800faa0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800fa9c:	2301      	movs	r3, #1
 800fa9e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800faa0:	79fb      	ldrb	r3, [r7, #7]
}
 800faa2:	4618      	mov	r0, r3
 800faa4:	3708      	adds	r7, #8
 800faa6:	46bd      	mov	sp, r7
 800faa8:	bd80      	pop	{r7, pc}
 800faaa:	bf00      	nop
 800faac:	2404058c 	.word	0x2404058c

0800fab0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800fab0:	b580      	push	{r7, lr}
 800fab2:	b086      	sub	sp, #24
 800fab4:	af00      	add	r7, sp, #0
 800fab6:	60f8      	str	r0, [r7, #12]
 800fab8:	60b9      	str	r1, [r7, #8]
 800faba:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800fabc:	2300      	movs	r3, #0
 800fabe:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	68ba      	ldr	r2, [r7, #8]
 800fac4:	68f9      	ldr	r1, [r7, #12]
 800fac6:	4806      	ldr	r0, [pc, #24]	; (800fae0 <BSP_SD_ReadBlocks_DMA+0x30>)
 800fac8:	f7fa ffd2 	bl	800aa70 <HAL_SD_ReadBlocks_DMA>
 800facc:	4603      	mov	r3, r0
 800face:	2b00      	cmp	r3, #0
 800fad0:	d001      	beq.n	800fad6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800fad2:	2301      	movs	r3, #1
 800fad4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800fad6:	7dfb      	ldrb	r3, [r7, #23]
}
 800fad8:	4618      	mov	r0, r3
 800fada:	3718      	adds	r7, #24
 800fadc:	46bd      	mov	sp, r7
 800fade:	bd80      	pop	{r7, pc}
 800fae0:	2404058c 	.word	0x2404058c

0800fae4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800fae4:	b580      	push	{r7, lr}
 800fae6:	b086      	sub	sp, #24
 800fae8:	af00      	add	r7, sp, #0
 800faea:	60f8      	str	r0, [r7, #12]
 800faec:	60b9      	str	r1, [r7, #8]
 800faee:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800faf0:	2300      	movs	r3, #0
 800faf2:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	68ba      	ldr	r2, [r7, #8]
 800faf8:	68f9      	ldr	r1, [r7, #12]
 800fafa:	4806      	ldr	r0, [pc, #24]	; (800fb14 <BSP_SD_WriteBlocks_DMA+0x30>)
 800fafc:	f7fb f860 	bl	800abc0 <HAL_SD_WriteBlocks_DMA>
 800fb00:	4603      	mov	r3, r0
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d001      	beq.n	800fb0a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800fb06:	2301      	movs	r3, #1
 800fb08:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800fb0a:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb0c:	4618      	mov	r0, r3
 800fb0e:	3718      	adds	r7, #24
 800fb10:	46bd      	mov	sp, r7
 800fb12:	bd80      	pop	{r7, pc}
 800fb14:	2404058c 	.word	0x2404058c

0800fb18 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800fb18:	b580      	push	{r7, lr}
 800fb1a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800fb1c:	4805      	ldr	r0, [pc, #20]	; (800fb34 <BSP_SD_GetCardState+0x1c>)
 800fb1e:	f7fb fdf3 	bl	800b708 <HAL_SD_GetCardState>
 800fb22:	4603      	mov	r3, r0
 800fb24:	2b04      	cmp	r3, #4
 800fb26:	bf14      	ite	ne
 800fb28:	2301      	movne	r3, #1
 800fb2a:	2300      	moveq	r3, #0
 800fb2c:	b2db      	uxtb	r3, r3
}
 800fb2e:	4618      	mov	r0, r3
 800fb30:	bd80      	pop	{r7, pc}
 800fb32:	bf00      	nop
 800fb34:	2404058c 	.word	0x2404058c

0800fb38 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800fb38:	b580      	push	{r7, lr}
 800fb3a:	b082      	sub	sp, #8
 800fb3c:	af00      	add	r7, sp, #0
 800fb3e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800fb40:	6879      	ldr	r1, [r7, #4]
 800fb42:	4803      	ldr	r0, [pc, #12]	; (800fb50 <BSP_SD_GetCardInfo+0x18>)
 800fb44:	f7fb fd0a 	bl	800b55c <HAL_SD_GetCardInfo>
}
 800fb48:	bf00      	nop
 800fb4a:	3708      	adds	r7, #8
 800fb4c:	46bd      	mov	sp, r7
 800fb4e:	bd80      	pop	{r7, pc}
 800fb50:	2404058c 	.word	0x2404058c

0800fb54 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800fb54:	b580      	push	{r7, lr}
 800fb56:	b082      	sub	sp, #8
 800fb58:	af00      	add	r7, sp, #0
 800fb5a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800fb5c:	f000 f9a0 	bl	800fea0 <BSP_SD_WriteCpltCallback>
}
 800fb60:	bf00      	nop
 800fb62:	3708      	adds	r7, #8
 800fb64:	46bd      	mov	sp, r7
 800fb66:	bd80      	pop	{r7, pc}

0800fb68 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800fb68:	b580      	push	{r7, lr}
 800fb6a:	b082      	sub	sp, #8
 800fb6c:	af00      	add	r7, sp, #0
 800fb6e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800fb70:	f000 f9a2 	bl	800feb8 <BSP_SD_ReadCpltCallback>
}
 800fb74:	bf00      	nop
 800fb76:	3708      	adds	r7, #8
 800fb78:	46bd      	mov	sp, r7
 800fb7a:	bd80      	pop	{r7, pc}

0800fb7c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800fb7c:	b580      	push	{r7, lr}
 800fb7e:	b082      	sub	sp, #8
 800fb80:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800fb82:	2301      	movs	r3, #1
 800fb84:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800fb86:	f000 f80b 	bl	800fba0 <BSP_PlatformIsDetected>
 800fb8a:	4603      	mov	r3, r0
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d101      	bne.n	800fb94 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800fb90:	2300      	movs	r3, #0
 800fb92:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800fb94:	79fb      	ldrb	r3, [r7, #7]
 800fb96:	b2db      	uxtb	r3, r3
}
 800fb98:	4618      	mov	r0, r3
 800fb9a:	3708      	adds	r7, #8
 800fb9c:	46bd      	mov	sp, r7
 800fb9e:	bd80      	pop	{r7, pc}

0800fba0 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800fba0:	b580      	push	{r7, lr}
 800fba2:	b082      	sub	sp, #8
 800fba4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800fba6:	2301      	movs	r3, #1
 800fba8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800fbaa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800fbae:	4806      	ldr	r0, [pc, #24]	; (800fbc8 <BSP_PlatformIsDetected+0x28>)
 800fbb0:	f7f5 feb6 	bl	8005920 <HAL_GPIO_ReadPin>
 800fbb4:	4603      	mov	r3, r0
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d001      	beq.n	800fbbe <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800fbba:	2300      	movs	r3, #0
 800fbbc:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800fbbe:	79fb      	ldrb	r3, [r7, #7]
}
 800fbc0:	4618      	mov	r0, r3
 800fbc2:	3708      	adds	r7, #8
 800fbc4:	46bd      	mov	sp, r7
 800fbc6:	bd80      	pop	{r7, pc}
 800fbc8:	58020000 	.word	0x58020000

0800fbcc <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800fbcc:	b580      	push	{r7, lr}
 800fbce:	b084      	sub	sp, #16
 800fbd0:	af00      	add	r7, sp, #0
 800fbd2:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800fbd4:	f7f2 f996 	bl	8001f04 <HAL_GetTick>
 800fbd8:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800fbda:	e006      	b.n	800fbea <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800fbdc:	f7ff ff9c 	bl	800fb18 <BSP_SD_GetCardState>
 800fbe0:	4603      	mov	r3, r0
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d101      	bne.n	800fbea <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800fbe6:	2300      	movs	r3, #0
 800fbe8:	e009      	b.n	800fbfe <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800fbea:	f7f2 f98b 	bl	8001f04 <HAL_GetTick>
 800fbee:	4602      	mov	r2, r0
 800fbf0:	68fb      	ldr	r3, [r7, #12]
 800fbf2:	1ad3      	subs	r3, r2, r3
 800fbf4:	687a      	ldr	r2, [r7, #4]
 800fbf6:	429a      	cmp	r2, r3
 800fbf8:	d8f0      	bhi.n	800fbdc <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800fbfa:	f04f 33ff 	mov.w	r3, #4294967295
}
 800fbfe:	4618      	mov	r0, r3
 800fc00:	3710      	adds	r7, #16
 800fc02:	46bd      	mov	sp, r7
 800fc04:	bd80      	pop	{r7, pc}
	...

0800fc08 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800fc08:	b580      	push	{r7, lr}
 800fc0a:	b082      	sub	sp, #8
 800fc0c:	af00      	add	r7, sp, #0
 800fc0e:	4603      	mov	r3, r0
 800fc10:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800fc12:	4b0b      	ldr	r3, [pc, #44]	; (800fc40 <SD_CheckStatus+0x38>)
 800fc14:	2201      	movs	r2, #1
 800fc16:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800fc18:	f7ff ff7e 	bl	800fb18 <BSP_SD_GetCardState>
 800fc1c:	4603      	mov	r3, r0
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d107      	bne.n	800fc32 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800fc22:	4b07      	ldr	r3, [pc, #28]	; (800fc40 <SD_CheckStatus+0x38>)
 800fc24:	781b      	ldrb	r3, [r3, #0]
 800fc26:	b2db      	uxtb	r3, r3
 800fc28:	f023 0301 	bic.w	r3, r3, #1
 800fc2c:	b2da      	uxtb	r2, r3
 800fc2e:	4b04      	ldr	r3, [pc, #16]	; (800fc40 <SD_CheckStatus+0x38>)
 800fc30:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800fc32:	4b03      	ldr	r3, [pc, #12]	; (800fc40 <SD_CheckStatus+0x38>)
 800fc34:	781b      	ldrb	r3, [r3, #0]
 800fc36:	b2db      	uxtb	r3, r3
}
 800fc38:	4618      	mov	r0, r3
 800fc3a:	3708      	adds	r7, #8
 800fc3c:	46bd      	mov	sp, r7
 800fc3e:	bd80      	pop	{r7, pc}
 800fc40:	2400000d 	.word	0x2400000d

0800fc44 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800fc44:	b580      	push	{r7, lr}
 800fc46:	b082      	sub	sp, #8
 800fc48:	af00      	add	r7, sp, #0
 800fc4a:	4603      	mov	r3, r0
 800fc4c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800fc4e:	f7ff ff09 	bl	800fa64 <BSP_SD_Init>
 800fc52:	4603      	mov	r3, r0
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d107      	bne.n	800fc68 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800fc58:	79fb      	ldrb	r3, [r7, #7]
 800fc5a:	4618      	mov	r0, r3
 800fc5c:	f7ff ffd4 	bl	800fc08 <SD_CheckStatus>
 800fc60:	4603      	mov	r3, r0
 800fc62:	461a      	mov	r2, r3
 800fc64:	4b04      	ldr	r3, [pc, #16]	; (800fc78 <SD_initialize+0x34>)
 800fc66:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800fc68:	4b03      	ldr	r3, [pc, #12]	; (800fc78 <SD_initialize+0x34>)
 800fc6a:	781b      	ldrb	r3, [r3, #0]
 800fc6c:	b2db      	uxtb	r3, r3
}
 800fc6e:	4618      	mov	r0, r3
 800fc70:	3708      	adds	r7, #8
 800fc72:	46bd      	mov	sp, r7
 800fc74:	bd80      	pop	{r7, pc}
 800fc76:	bf00      	nop
 800fc78:	2400000d 	.word	0x2400000d

0800fc7c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800fc7c:	b580      	push	{r7, lr}
 800fc7e:	b082      	sub	sp, #8
 800fc80:	af00      	add	r7, sp, #0
 800fc82:	4603      	mov	r3, r0
 800fc84:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800fc86:	79fb      	ldrb	r3, [r7, #7]
 800fc88:	4618      	mov	r0, r3
 800fc8a:	f7ff ffbd 	bl	800fc08 <SD_CheckStatus>
 800fc8e:	4603      	mov	r3, r0
}
 800fc90:	4618      	mov	r0, r3
 800fc92:	3708      	adds	r7, #8
 800fc94:	46bd      	mov	sp, r7
 800fc96:	bd80      	pop	{r7, pc}

0800fc98 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800fc98:	b580      	push	{r7, lr}
 800fc9a:	b086      	sub	sp, #24
 800fc9c:	af00      	add	r7, sp, #0
 800fc9e:	60b9      	str	r1, [r7, #8]
 800fca0:	607a      	str	r2, [r7, #4]
 800fca2:	603b      	str	r3, [r7, #0]
 800fca4:	4603      	mov	r3, r0
 800fca6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800fca8:	2301      	movs	r3, #1
 800fcaa:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800fcac:	f247 5030 	movw	r0, #30000	; 0x7530
 800fcb0:	f7ff ff8c 	bl	800fbcc <SD_CheckStatusWithTimeout>
 800fcb4:	4603      	mov	r3, r0
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	da01      	bge.n	800fcbe <SD_read+0x26>
  {
    return res;
 800fcba:	7dfb      	ldrb	r3, [r7, #23]
 800fcbc:	e03b      	b.n	800fd36 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800fcbe:	683a      	ldr	r2, [r7, #0]
 800fcc0:	6879      	ldr	r1, [r7, #4]
 800fcc2:	68b8      	ldr	r0, [r7, #8]
 800fcc4:	f7ff fef4 	bl	800fab0 <BSP_SD_ReadBlocks_DMA>
 800fcc8:	4603      	mov	r3, r0
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d132      	bne.n	800fd34 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800fcce:	4b1c      	ldr	r3, [pc, #112]	; (800fd40 <SD_read+0xa8>)
 800fcd0:	2200      	movs	r2, #0
 800fcd2:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800fcd4:	f7f2 f916 	bl	8001f04 <HAL_GetTick>
 800fcd8:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800fcda:	bf00      	nop
 800fcdc:	4b18      	ldr	r3, [pc, #96]	; (800fd40 <SD_read+0xa8>)
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d108      	bne.n	800fcf6 <SD_read+0x5e>
 800fce4:	f7f2 f90e 	bl	8001f04 <HAL_GetTick>
 800fce8:	4602      	mov	r2, r0
 800fcea:	693b      	ldr	r3, [r7, #16]
 800fcec:	1ad3      	subs	r3, r2, r3
 800fcee:	f247 522f 	movw	r2, #29999	; 0x752f
 800fcf2:	4293      	cmp	r3, r2
 800fcf4:	d9f2      	bls.n	800fcdc <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 800fcf6:	4b12      	ldr	r3, [pc, #72]	; (800fd40 <SD_read+0xa8>)
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d102      	bne.n	800fd04 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800fcfe:	2301      	movs	r3, #1
 800fd00:	75fb      	strb	r3, [r7, #23]
 800fd02:	e017      	b.n	800fd34 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800fd04:	4b0e      	ldr	r3, [pc, #56]	; (800fd40 <SD_read+0xa8>)
 800fd06:	2200      	movs	r2, #0
 800fd08:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800fd0a:	f7f2 f8fb 	bl	8001f04 <HAL_GetTick>
 800fd0e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800fd10:	e007      	b.n	800fd22 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800fd12:	f7ff ff01 	bl	800fb18 <BSP_SD_GetCardState>
 800fd16:	4603      	mov	r3, r0
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d102      	bne.n	800fd22 <SD_read+0x8a>
          {
            res = RES_OK;
 800fd1c:	2300      	movs	r3, #0
 800fd1e:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800fd20:	e008      	b.n	800fd34 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800fd22:	f7f2 f8ef 	bl	8001f04 <HAL_GetTick>
 800fd26:	4602      	mov	r2, r0
 800fd28:	693b      	ldr	r3, [r7, #16]
 800fd2a:	1ad3      	subs	r3, r2, r3
 800fd2c:	f247 522f 	movw	r2, #29999	; 0x752f
 800fd30:	4293      	cmp	r3, r2
 800fd32:	d9ee      	bls.n	800fd12 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800fd34:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd36:	4618      	mov	r0, r3
 800fd38:	3718      	adds	r7, #24
 800fd3a:	46bd      	mov	sp, r7
 800fd3c:	bd80      	pop	{r7, pc}
 800fd3e:	bf00      	nop
 800fd40:	24040214 	.word	0x24040214

0800fd44 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800fd44:	b580      	push	{r7, lr}
 800fd46:	b086      	sub	sp, #24
 800fd48:	af00      	add	r7, sp, #0
 800fd4a:	60b9      	str	r1, [r7, #8]
 800fd4c:	607a      	str	r2, [r7, #4]
 800fd4e:	603b      	str	r3, [r7, #0]
 800fd50:	4603      	mov	r3, r0
 800fd52:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800fd54:	2301      	movs	r3, #1
 800fd56:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800fd58:	4b24      	ldr	r3, [pc, #144]	; (800fdec <SD_write+0xa8>)
 800fd5a:	2200      	movs	r2, #0
 800fd5c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800fd5e:	f247 5030 	movw	r0, #30000	; 0x7530
 800fd62:	f7ff ff33 	bl	800fbcc <SD_CheckStatusWithTimeout>
 800fd66:	4603      	mov	r3, r0
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	da01      	bge.n	800fd70 <SD_write+0x2c>
  {
    return res;
 800fd6c:	7dfb      	ldrb	r3, [r7, #23]
 800fd6e:	e038      	b.n	800fde2 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800fd70:	683a      	ldr	r2, [r7, #0]
 800fd72:	6879      	ldr	r1, [r7, #4]
 800fd74:	68b8      	ldr	r0, [r7, #8]
 800fd76:	f7ff feb5 	bl	800fae4 <BSP_SD_WriteBlocks_DMA>
 800fd7a:	4603      	mov	r3, r0
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d12f      	bne.n	800fde0 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800fd80:	f7f2 f8c0 	bl	8001f04 <HAL_GetTick>
 800fd84:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800fd86:	bf00      	nop
 800fd88:	4b18      	ldr	r3, [pc, #96]	; (800fdec <SD_write+0xa8>)
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d108      	bne.n	800fda2 <SD_write+0x5e>
 800fd90:	f7f2 f8b8 	bl	8001f04 <HAL_GetTick>
 800fd94:	4602      	mov	r2, r0
 800fd96:	693b      	ldr	r3, [r7, #16]
 800fd98:	1ad3      	subs	r3, r2, r3
 800fd9a:	f247 522f 	movw	r2, #29999	; 0x752f
 800fd9e:	4293      	cmp	r3, r2
 800fda0:	d9f2      	bls.n	800fd88 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800fda2:	4b12      	ldr	r3, [pc, #72]	; (800fdec <SD_write+0xa8>)
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d102      	bne.n	800fdb0 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800fdaa:	2301      	movs	r3, #1
 800fdac:	75fb      	strb	r3, [r7, #23]
 800fdae:	e017      	b.n	800fde0 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800fdb0:	4b0e      	ldr	r3, [pc, #56]	; (800fdec <SD_write+0xa8>)
 800fdb2:	2200      	movs	r2, #0
 800fdb4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800fdb6:	f7f2 f8a5 	bl	8001f04 <HAL_GetTick>
 800fdba:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800fdbc:	e007      	b.n	800fdce <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800fdbe:	f7ff feab 	bl	800fb18 <BSP_SD_GetCardState>
 800fdc2:	4603      	mov	r3, r0
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d102      	bne.n	800fdce <SD_write+0x8a>
          {
            res = RES_OK;
 800fdc8:	2300      	movs	r3, #0
 800fdca:	75fb      	strb	r3, [r7, #23]
            break;
 800fdcc:	e008      	b.n	800fde0 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800fdce:	f7f2 f899 	bl	8001f04 <HAL_GetTick>
 800fdd2:	4602      	mov	r2, r0
 800fdd4:	693b      	ldr	r3, [r7, #16]
 800fdd6:	1ad3      	subs	r3, r2, r3
 800fdd8:	f247 522f 	movw	r2, #29999	; 0x752f
 800fddc:	4293      	cmp	r3, r2
 800fdde:	d9ee      	bls.n	800fdbe <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800fde0:	7dfb      	ldrb	r3, [r7, #23]
}
 800fde2:	4618      	mov	r0, r3
 800fde4:	3718      	adds	r7, #24
 800fde6:	46bd      	mov	sp, r7
 800fde8:	bd80      	pop	{r7, pc}
 800fdea:	bf00      	nop
 800fdec:	24040210 	.word	0x24040210

0800fdf0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800fdf0:	b580      	push	{r7, lr}
 800fdf2:	b08c      	sub	sp, #48	; 0x30
 800fdf4:	af00      	add	r7, sp, #0
 800fdf6:	4603      	mov	r3, r0
 800fdf8:	603a      	str	r2, [r7, #0]
 800fdfa:	71fb      	strb	r3, [r7, #7]
 800fdfc:	460b      	mov	r3, r1
 800fdfe:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800fe00:	2301      	movs	r3, #1
 800fe02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800fe06:	4b25      	ldr	r3, [pc, #148]	; (800fe9c <SD_ioctl+0xac>)
 800fe08:	781b      	ldrb	r3, [r3, #0]
 800fe0a:	b2db      	uxtb	r3, r3
 800fe0c:	f003 0301 	and.w	r3, r3, #1
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d001      	beq.n	800fe18 <SD_ioctl+0x28>
 800fe14:	2303      	movs	r3, #3
 800fe16:	e03c      	b.n	800fe92 <SD_ioctl+0xa2>

  switch (cmd)
 800fe18:	79bb      	ldrb	r3, [r7, #6]
 800fe1a:	2b03      	cmp	r3, #3
 800fe1c:	d834      	bhi.n	800fe88 <SD_ioctl+0x98>
 800fe1e:	a201      	add	r2, pc, #4	; (adr r2, 800fe24 <SD_ioctl+0x34>)
 800fe20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe24:	0800fe35 	.word	0x0800fe35
 800fe28:	0800fe3d 	.word	0x0800fe3d
 800fe2c:	0800fe55 	.word	0x0800fe55
 800fe30:	0800fe6f 	.word	0x0800fe6f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800fe34:	2300      	movs	r3, #0
 800fe36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800fe3a:	e028      	b.n	800fe8e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800fe3c:	f107 0308 	add.w	r3, r7, #8
 800fe40:	4618      	mov	r0, r3
 800fe42:	f7ff fe79 	bl	800fb38 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800fe46:	6a3a      	ldr	r2, [r7, #32]
 800fe48:	683b      	ldr	r3, [r7, #0]
 800fe4a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800fe4c:	2300      	movs	r3, #0
 800fe4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800fe52:	e01c      	b.n	800fe8e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800fe54:	f107 0308 	add.w	r3, r7, #8
 800fe58:	4618      	mov	r0, r3
 800fe5a:	f7ff fe6d 	bl	800fb38 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800fe5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe60:	b29a      	uxth	r2, r3
 800fe62:	683b      	ldr	r3, [r7, #0]
 800fe64:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800fe66:	2300      	movs	r3, #0
 800fe68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800fe6c:	e00f      	b.n	800fe8e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800fe6e:	f107 0308 	add.w	r3, r7, #8
 800fe72:	4618      	mov	r0, r3
 800fe74:	f7ff fe60 	bl	800fb38 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800fe78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe7a:	0a5a      	lsrs	r2, r3, #9
 800fe7c:	683b      	ldr	r3, [r7, #0]
 800fe7e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800fe80:	2300      	movs	r3, #0
 800fe82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800fe86:	e002      	b.n	800fe8e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800fe88:	2304      	movs	r3, #4
 800fe8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800fe8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800fe92:	4618      	mov	r0, r3
 800fe94:	3730      	adds	r7, #48	; 0x30
 800fe96:	46bd      	mov	sp, r7
 800fe98:	bd80      	pop	{r7, pc}
 800fe9a:	bf00      	nop
 800fe9c:	2400000d 	.word	0x2400000d

0800fea0 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800fea0:	b480      	push	{r7}
 800fea2:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800fea4:	4b03      	ldr	r3, [pc, #12]	; (800feb4 <BSP_SD_WriteCpltCallback+0x14>)
 800fea6:	2201      	movs	r2, #1
 800fea8:	601a      	str	r2, [r3, #0]
}
 800feaa:	bf00      	nop
 800feac:	46bd      	mov	sp, r7
 800feae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feb2:	4770      	bx	lr
 800feb4:	24040210 	.word	0x24040210

0800feb8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800feb8:	b480      	push	{r7}
 800feba:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800febc:	4b03      	ldr	r3, [pc, #12]	; (800fecc <BSP_SD_ReadCpltCallback+0x14>)
 800febe:	2201      	movs	r2, #1
 800fec0:	601a      	str	r2, [r3, #0]
}
 800fec2:	bf00      	nop
 800fec4:	46bd      	mov	sp, r7
 800fec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feca:	4770      	bx	lr
 800fecc:	24040214 	.word	0x24040214

0800fed0 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fed0:	b580      	push	{r7, lr}
 800fed2:	b084      	sub	sp, #16
 800fed4:	af00      	add	r7, sp, #0
 800fed6:	6078      	str	r0, [r7, #4]
 800fed8:	460b      	mov	r3, r1
 800feda:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 800fedc:	f248 0074 	movw	r0, #32884	; 0x8074
 800fee0:	f005 fed0 	bl	8015c84 <malloc>
 800fee4:	4603      	mov	r3, r0
 800fee6:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	2b00      	cmp	r3, #0
 800feec:	d105      	bne.n	800fefa <USBD_MSC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	2200      	movs	r2, #0
 800fef2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800fef6:	2302      	movs	r3, #2
 800fef8:	e034      	b.n	800ff64 <USBD_MSC_Init+0x94>
  }

  pdev->pClassData = (void *)hmsc;
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	68fa      	ldr	r2, [r7, #12]
 800fefe:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	7c1b      	ldrb	r3, [r3, #16]
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d115      	bne.n	800ff36 <USBD_MSC_Init+0x66>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800ff0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ff0e:	2202      	movs	r2, #2
 800ff10:	2101      	movs	r1, #1
 800ff12:	6878      	ldr	r0, [r7, #4]
 800ff14:	f005 fd1d 	bl	8015952 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	2201      	movs	r2, #1
 800ff1c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800ff20:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ff24:	2202      	movs	r2, #2
 800ff26:	2181      	movs	r1, #129	; 0x81
 800ff28:	6878      	ldr	r0, [r7, #4]
 800ff2a:	f005 fd12 	bl	8015952 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	2201      	movs	r2, #1
 800ff32:	871a      	strh	r2, [r3, #56]	; 0x38
 800ff34:	e012      	b.n	800ff5c <USBD_MSC_Init+0x8c>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800ff36:	2340      	movs	r3, #64	; 0x40
 800ff38:	2202      	movs	r2, #2
 800ff3a:	2101      	movs	r1, #1
 800ff3c:	6878      	ldr	r0, [r7, #4]
 800ff3e:	f005 fd08 	bl	8015952 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	2201      	movs	r2, #1
 800ff46:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800ff4a:	2340      	movs	r3, #64	; 0x40
 800ff4c:	2202      	movs	r2, #2
 800ff4e:	2181      	movs	r1, #129	; 0x81
 800ff50:	6878      	ldr	r0, [r7, #4]
 800ff52:	f005 fcfe 	bl	8015952 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	2201      	movs	r2, #1
 800ff5a:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 800ff5c:	6878      	ldr	r0, [r7, #4]
 800ff5e:	f000 f98e 	bl	801027e <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 800ff62:	2300      	movs	r3, #0
}
 800ff64:	4618      	mov	r0, r3
 800ff66:	3710      	adds	r7, #16
 800ff68:	46bd      	mov	sp, r7
 800ff6a:	bd80      	pop	{r7, pc}

0800ff6c <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ff6c:	b580      	push	{r7, lr}
 800ff6e:	b082      	sub	sp, #8
 800ff70:	af00      	add	r7, sp, #0
 800ff72:	6078      	str	r0, [r7, #4]
 800ff74:	460b      	mov	r3, r1
 800ff76:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 800ff78:	2101      	movs	r1, #1
 800ff7a:	6878      	ldr	r0, [r7, #4]
 800ff7c:	f005 fd0f 	bl	801599e <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	2200      	movs	r2, #0
 800ff84:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 800ff88:	2181      	movs	r1, #129	; 0x81
 800ff8a:	6878      	ldr	r0, [r7, #4]
 800ff8c:	f005 fd07 	bl	801599e <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	2200      	movs	r2, #0
 800ff94:	871a      	strh	r2, [r3, #56]	; 0x38

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 800ff96:	6878      	ldr	r0, [r7, #4]
 800ff98:	f000 f9cf 	bl	801033a <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d009      	beq.n	800ffba <USBD_MSC_DeInit+0x4e>
  {
    (void)USBD_free(pdev->pClassData);
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ffac:	4618      	mov	r0, r3
 800ffae:	f005 fe71 	bl	8015c94 <free>
    pdev->pClassData = NULL;
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	2200      	movs	r2, #0
 800ffb6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ffba:	2300      	movs	r3, #0
}
 800ffbc:	4618      	mov	r0, r3
 800ffbe:	3708      	adds	r7, #8
 800ffc0:	46bd      	mov	sp, r7
 800ffc2:	bd80      	pop	{r7, pc}

0800ffc4 <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ffc4:	b580      	push	{r7, lr}
 800ffc6:	b086      	sub	sp, #24
 800ffc8:	af00      	add	r7, sp, #0
 800ffca:	6078      	str	r0, [r7, #4]
 800ffcc:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ffd4:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800ffd6:	2300      	movs	r3, #0
 800ffd8:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 800ffda:	2300      	movs	r3, #0
 800ffdc:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ffde:	683b      	ldr	r3, [r7, #0]
 800ffe0:	781b      	ldrb	r3, [r3, #0]
 800ffe2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d04d      	beq.n	8010086 <USBD_MSC_Setup+0xc2>
 800ffea:	2b20      	cmp	r3, #32
 800ffec:	f040 80c6 	bne.w	801017c <USBD_MSC_Setup+0x1b8>
  {
    /* Class request */
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 800fff0:	683b      	ldr	r3, [r7, #0]
 800fff2:	785b      	ldrb	r3, [r3, #1]
 800fff4:	2bfe      	cmp	r3, #254	; 0xfe
 800fff6:	d002      	beq.n	800fffe <USBD_MSC_Setup+0x3a>
 800fff8:	2bff      	cmp	r3, #255	; 0xff
 800fffa:	d024      	beq.n	8010046 <USBD_MSC_Setup+0x82>
 800fffc:	e03b      	b.n	8010076 <USBD_MSC_Setup+0xb2>
    {
    case BOT_GET_MAX_LUN:
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800fffe:	683b      	ldr	r3, [r7, #0]
 8010000:	885b      	ldrh	r3, [r3, #2]
 8010002:	2b00      	cmp	r3, #0
 8010004:	d118      	bne.n	8010038 <USBD_MSC_Setup+0x74>
 8010006:	683b      	ldr	r3, [r7, #0]
 8010008:	88db      	ldrh	r3, [r3, #6]
 801000a:	2b01      	cmp	r3, #1
 801000c:	d114      	bne.n	8010038 <USBD_MSC_Setup+0x74>
          ((req->bmRequest & 0x80U) == 0x80U))
 801000e:	683b      	ldr	r3, [r7, #0]
 8010010:	781b      	ldrb	r3, [r3, #0]
 8010012:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8010014:	2b00      	cmp	r3, #0
 8010016:	da0f      	bge.n	8010038 <USBD_MSC_Setup+0x74>
      {
        hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801001e:	699b      	ldr	r3, [r3, #24]
 8010020:	4798      	blx	r3
 8010022:	4603      	mov	r3, r0
 8010024:	461a      	mov	r2, r3
 8010026:	693b      	ldr	r3, [r7, #16]
 8010028:	601a      	str	r2, [r3, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 801002a:	693b      	ldr	r3, [r7, #16]
 801002c:	2201      	movs	r2, #1
 801002e:	4619      	mov	r1, r3
 8010030:	6878      	ldr	r0, [r7, #4]
 8010032:	f002 fdaa 	bl	8012b8a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8010036:	e025      	b.n	8010084 <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 8010038:	6839      	ldr	r1, [r7, #0]
 801003a:	6878      	ldr	r0, [r7, #4]
 801003c:	f002 fd34 	bl	8012aa8 <USBD_CtlError>
        ret = USBD_FAIL;
 8010040:	2303      	movs	r3, #3
 8010042:	75fb      	strb	r3, [r7, #23]
      break;
 8010044:	e01e      	b.n	8010084 <USBD_MSC_Setup+0xc0>

    case BOT_RESET :
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8010046:	683b      	ldr	r3, [r7, #0]
 8010048:	885b      	ldrh	r3, [r3, #2]
 801004a:	2b00      	cmp	r3, #0
 801004c:	d10c      	bne.n	8010068 <USBD_MSC_Setup+0xa4>
 801004e:	683b      	ldr	r3, [r7, #0]
 8010050:	88db      	ldrh	r3, [r3, #6]
 8010052:	2b00      	cmp	r3, #0
 8010054:	d108      	bne.n	8010068 <USBD_MSC_Setup+0xa4>
          ((req->bmRequest & 0x80U) != 0x80U))
 8010056:	683b      	ldr	r3, [r7, #0]
 8010058:	781b      	ldrb	r3, [r3, #0]
 801005a:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 801005c:	2b00      	cmp	r3, #0
 801005e:	db03      	blt.n	8010068 <USBD_MSC_Setup+0xa4>
      {
        MSC_BOT_Reset(pdev);
 8010060:	6878      	ldr	r0, [r7, #4]
 8010062:	f000 f947 	bl	80102f4 <MSC_BOT_Reset>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8010066:	e00d      	b.n	8010084 <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 8010068:	6839      	ldr	r1, [r7, #0]
 801006a:	6878      	ldr	r0, [r7, #4]
 801006c:	f002 fd1c 	bl	8012aa8 <USBD_CtlError>
        ret = USBD_FAIL;
 8010070:	2303      	movs	r3, #3
 8010072:	75fb      	strb	r3, [r7, #23]
      break;
 8010074:	e006      	b.n	8010084 <USBD_MSC_Setup+0xc0>

    default:
      USBD_CtlError(pdev, req);
 8010076:	6839      	ldr	r1, [r7, #0]
 8010078:	6878      	ldr	r0, [r7, #4]
 801007a:	f002 fd15 	bl	8012aa8 <USBD_CtlError>
      ret = USBD_FAIL;
 801007e:	2303      	movs	r3, #3
 8010080:	75fb      	strb	r3, [r7, #23]
      break;
 8010082:	bf00      	nop
    }
    break;
 8010084:	e081      	b.n	801018a <USBD_MSC_Setup+0x1c6>
    /* Interface & Endpoint request */
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8010086:	683b      	ldr	r3, [r7, #0]
 8010088:	785b      	ldrb	r3, [r3, #1]
 801008a:	2b0b      	cmp	r3, #11
 801008c:	d86d      	bhi.n	801016a <USBD_MSC_Setup+0x1a6>
 801008e:	a201      	add	r2, pc, #4	; (adr r2, 8010094 <USBD_MSC_Setup+0xd0>)
 8010090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010094:	080100c5 	.word	0x080100c5
 8010098:	0801013b 	.word	0x0801013b
 801009c:	0801016b 	.word	0x0801016b
 80100a0:	0801016b 	.word	0x0801016b
 80100a4:	0801016b 	.word	0x0801016b
 80100a8:	0801016b 	.word	0x0801016b
 80100ac:	0801016b 	.word	0x0801016b
 80100b0:	0801016b 	.word	0x0801016b
 80100b4:	0801016b 	.word	0x0801016b
 80100b8:	0801016b 	.word	0x0801016b
 80100bc:	080100ed 	.word	0x080100ed
 80100c0:	08010115 	.word	0x08010115
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80100ca:	2b03      	cmp	r3, #3
 80100cc:	d107      	bne.n	80100de <USBD_MSC_Setup+0x11a>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80100ce:	f107 030e 	add.w	r3, r7, #14
 80100d2:	2202      	movs	r2, #2
 80100d4:	4619      	mov	r1, r3
 80100d6:	6878      	ldr	r0, [r7, #4]
 80100d8:	f002 fd57 	bl	8012b8a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80100dc:	e04d      	b.n	801017a <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 80100de:	6839      	ldr	r1, [r7, #0]
 80100e0:	6878      	ldr	r0, [r7, #4]
 80100e2:	f002 fce1 	bl	8012aa8 <USBD_CtlError>
        ret = USBD_FAIL;
 80100e6:	2303      	movs	r3, #3
 80100e8:	75fb      	strb	r3, [r7, #23]
      break;
 80100ea:	e046      	b.n	801017a <USBD_MSC_Setup+0x1b6>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80100f2:	2b03      	cmp	r3, #3
 80100f4:	d107      	bne.n	8010106 <USBD_MSC_Setup+0x142>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 80100f6:	693b      	ldr	r3, [r7, #16]
 80100f8:	3304      	adds	r3, #4
 80100fa:	2201      	movs	r2, #1
 80100fc:	4619      	mov	r1, r3
 80100fe:	6878      	ldr	r0, [r7, #4]
 8010100:	f002 fd43 	bl	8012b8a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8010104:	e039      	b.n	801017a <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 8010106:	6839      	ldr	r1, [r7, #0]
 8010108:	6878      	ldr	r0, [r7, #4]
 801010a:	f002 fccd 	bl	8012aa8 <USBD_CtlError>
        ret = USBD_FAIL;
 801010e:	2303      	movs	r3, #3
 8010110:	75fb      	strb	r3, [r7, #23]
      break;
 8010112:	e032      	b.n	801017a <USBD_MSC_Setup+0x1b6>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801011a:	2b03      	cmp	r3, #3
 801011c:	d106      	bne.n	801012c <USBD_MSC_Setup+0x168>
      {
        hmsc->interface = (uint8_t)(req->wValue);
 801011e:	683b      	ldr	r3, [r7, #0]
 8010120:	885b      	ldrh	r3, [r3, #2]
 8010122:	b2db      	uxtb	r3, r3
 8010124:	461a      	mov	r2, r3
 8010126:	693b      	ldr	r3, [r7, #16]
 8010128:	605a      	str	r2, [r3, #4]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 801012a:	e026      	b.n	801017a <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 801012c:	6839      	ldr	r1, [r7, #0]
 801012e:	6878      	ldr	r0, [r7, #4]
 8010130:	f002 fcba 	bl	8012aa8 <USBD_CtlError>
        ret = USBD_FAIL;
 8010134:	2303      	movs	r3, #3
 8010136:	75fb      	strb	r3, [r7, #23]
      break;
 8010138:	e01f      	b.n	801017a <USBD_MSC_Setup+0x1b6>

    case USB_REQ_CLEAR_FEATURE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010140:	2b03      	cmp	r3, #3
 8010142:	d119      	bne.n	8010178 <USBD_MSC_Setup+0x1b4>
      {
        if (req->wValue == USB_FEATURE_EP_HALT)
 8010144:	683b      	ldr	r3, [r7, #0]
 8010146:	885b      	ldrh	r3, [r3, #2]
 8010148:	2b00      	cmp	r3, #0
 801014a:	d115      	bne.n	8010178 <USBD_MSC_Setup+0x1b4>
        {
          /* Flush the FIFO */
          (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 801014c:	683b      	ldr	r3, [r7, #0]
 801014e:	889b      	ldrh	r3, [r3, #4]
 8010150:	b2db      	uxtb	r3, r3
 8010152:	4619      	mov	r1, r3
 8010154:	6878      	ldr	r0, [r7, #4]
 8010156:	f005 fc41 	bl	80159dc <USBD_LL_FlushEP>

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 801015a:	683b      	ldr	r3, [r7, #0]
 801015c:	889b      	ldrh	r3, [r3, #4]
 801015e:	b2db      	uxtb	r3, r3
 8010160:	4619      	mov	r1, r3
 8010162:	6878      	ldr	r0, [r7, #4]
 8010164:	f000 fa90 	bl	8010688 <MSC_BOT_CplClrFeature>
        }
      }
      break;
 8010168:	e006      	b.n	8010178 <USBD_MSC_Setup+0x1b4>

    default:
      USBD_CtlError(pdev, req);
 801016a:	6839      	ldr	r1, [r7, #0]
 801016c:	6878      	ldr	r0, [r7, #4]
 801016e:	f002 fc9b 	bl	8012aa8 <USBD_CtlError>
      ret = USBD_FAIL;
 8010172:	2303      	movs	r3, #3
 8010174:	75fb      	strb	r3, [r7, #23]
      break;
 8010176:	e000      	b.n	801017a <USBD_MSC_Setup+0x1b6>
      break;
 8010178:	bf00      	nop
    }
    break;
 801017a:	e006      	b.n	801018a <USBD_MSC_Setup+0x1c6>

  default:
    USBD_CtlError(pdev, req);
 801017c:	6839      	ldr	r1, [r7, #0]
 801017e:	6878      	ldr	r0, [r7, #4]
 8010180:	f002 fc92 	bl	8012aa8 <USBD_CtlError>
    ret = USBD_FAIL;
 8010184:	2303      	movs	r3, #3
 8010186:	75fb      	strb	r3, [r7, #23]
    break;
 8010188:	bf00      	nop
  }

  return (uint8_t)ret;
 801018a:	7dfb      	ldrb	r3, [r7, #23]
}
 801018c:	4618      	mov	r0, r3
 801018e:	3718      	adds	r7, #24
 8010190:	46bd      	mov	sp, r7
 8010192:	bd80      	pop	{r7, pc}

08010194 <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010194:	b580      	push	{r7, lr}
 8010196:	b082      	sub	sp, #8
 8010198:	af00      	add	r7, sp, #0
 801019a:	6078      	str	r0, [r7, #4]
 801019c:	460b      	mov	r3, r1
 801019e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 80101a0:	78fb      	ldrb	r3, [r7, #3]
 80101a2:	4619      	mov	r1, r3
 80101a4:	6878      	ldr	r0, [r7, #4]
 80101a6:	f000 f8d9 	bl	801035c <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 80101aa:	2300      	movs	r3, #0
}
 80101ac:	4618      	mov	r0, r3
 80101ae:	3708      	adds	r7, #8
 80101b0:	46bd      	mov	sp, r7
 80101b2:	bd80      	pop	{r7, pc}

080101b4 <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80101b4:	b580      	push	{r7, lr}
 80101b6:	b082      	sub	sp, #8
 80101b8:	af00      	add	r7, sp, #0
 80101ba:	6078      	str	r0, [r7, #4]
 80101bc:	460b      	mov	r3, r1
 80101be:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 80101c0:	78fb      	ldrb	r3, [r7, #3]
 80101c2:	4619      	mov	r1, r3
 80101c4:	6878      	ldr	r0, [r7, #4]
 80101c6:	f000 f8fd 	bl	80103c4 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 80101ca:	2300      	movs	r3, #0
}
 80101cc:	4618      	mov	r0, r3
 80101ce:	3708      	adds	r7, #8
 80101d0:	46bd      	mov	sp, r7
 80101d2:	bd80      	pop	{r7, pc}

080101d4 <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 80101d4:	b480      	push	{r7}
 80101d6:	b083      	sub	sp, #12
 80101d8:	af00      	add	r7, sp, #0
 80101da:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	2220      	movs	r2, #32
 80101e0:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 80101e2:	4b03      	ldr	r3, [pc, #12]	; (80101f0 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 80101e4:	4618      	mov	r0, r3
 80101e6:	370c      	adds	r7, #12
 80101e8:	46bd      	mov	sp, r7
 80101ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ee:	4770      	bx	lr
 80101f0:	24000048 	.word	0x24000048

080101f4 <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 80101f4:	b480      	push	{r7}
 80101f6:	b083      	sub	sp, #12
 80101f8:	af00      	add	r7, sp, #0
 80101fa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	2220      	movs	r2, #32
 8010200:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 8010202:	4b03      	ldr	r3, [pc, #12]	; (8010210 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 8010204:	4618      	mov	r0, r3
 8010206:	370c      	adds	r7, #12
 8010208:	46bd      	mov	sp, r7
 801020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801020e:	4770      	bx	lr
 8010210:	24000068 	.word	0x24000068

08010214 <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8010214:	b480      	push	{r7}
 8010216:	b083      	sub	sp, #12
 8010218:	af00      	add	r7, sp, #0
 801021a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	2220      	movs	r2, #32
 8010220:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 8010222:	4b03      	ldr	r3, [pc, #12]	; (8010230 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 8010224:	4618      	mov	r0, r3
 8010226:	370c      	adds	r7, #12
 8010228:	46bd      	mov	sp, r7
 801022a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801022e:	4770      	bx	lr
 8010230:	24000088 	.word	0x24000088

08010234 <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8010234:	b480      	push	{r7}
 8010236:	b083      	sub	sp, #12
 8010238:	af00      	add	r7, sp, #0
 801023a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	220a      	movs	r2, #10
 8010240:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8010242:	4b03      	ldr	r3, [pc, #12]	; (8010250 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8010244:	4618      	mov	r0, r3
 8010246:	370c      	adds	r7, #12
 8010248:	46bd      	mov	sp, r7
 801024a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801024e:	4770      	bx	lr
 8010250:	240000a8 	.word	0x240000a8

08010254 <USBD_MSC_RegisterStorage>:
* @brief  USBD_MSC_RegisterStorage
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8010254:	b480      	push	{r7}
 8010256:	b083      	sub	sp, #12
 8010258:	af00      	add	r7, sp, #0
 801025a:	6078      	str	r0, [r7, #4]
 801025c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801025e:	683b      	ldr	r3, [r7, #0]
 8010260:	2b00      	cmp	r3, #0
 8010262:	d101      	bne.n	8010268 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8010264:	2303      	movs	r3, #3
 8010266:	e004      	b.n	8010272 <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	683a      	ldr	r2, [r7, #0]
 801026c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8010270:	2300      	movs	r3, #0
}
 8010272:	4618      	mov	r0, r3
 8010274:	370c      	adds	r7, #12
 8010276:	46bd      	mov	sp, r7
 8010278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801027c:	4770      	bx	lr

0801027e <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 801027e:	b580      	push	{r7, lr}
 8010280:	b084      	sub	sp, #16
 8010282:	af00      	add	r7, sp, #0
 8010284:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801028c:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	2200      	movs	r2, #0
 8010292:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	2200      	movs	r2, #0
 8010298:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 801029a:	68fa      	ldr	r2, [r7, #12]
 801029c:	f248 0361 	movw	r3, #32865	; 0x8061
 80102a0:	4413      	add	r3, r2
 80102a2:	2200      	movs	r2, #0
 80102a4:	701a      	strb	r2, [r3, #0]
  hmsc->scsi_sense_head = 0U;
 80102a6:	68fa      	ldr	r2, [r7, #12]
 80102a8:	f248 0360 	movw	r3, #32864	; 0x8060
 80102ac:	4413      	add	r3, r2
 80102ae:	2200      	movs	r2, #0
 80102b0:	701a      	strb	r2, [r3, #0]
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80102b2:	68fa      	ldr	r2, [r7, #12]
 80102b4:	f248 0362 	movw	r3, #32866	; 0x8062
 80102b8:	4413      	add	r3, r2
 80102ba:	2200      	movs	r2, #0
 80102bc:	701a      	strb	r2, [r3, #0]

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	2000      	movs	r0, #0
 80102c8:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 80102ca:	2101      	movs	r1, #1
 80102cc:	6878      	ldr	r0, [r7, #4]
 80102ce:	f005 fb85 	bl	80159dc <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 80102d2:	2181      	movs	r1, #129	; 0x81
 80102d4:	6878      	ldr	r0, [r7, #4]
 80102d6:	f005 fb81 	bl	80159dc <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	f248 0210 	movw	r2, #32784	; 0x8010
 80102e0:	441a      	add	r2, r3
 80102e2:	231f      	movs	r3, #31
 80102e4:	2101      	movs	r1, #1
 80102e6:	6878      	ldr	r0, [r7, #4]
 80102e8:	f005 fc41 	bl	8015b6e <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 80102ec:	bf00      	nop
 80102ee:	3710      	adds	r7, #16
 80102f0:	46bd      	mov	sp, r7
 80102f2:	bd80      	pop	{r7, pc}

080102f4 <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 80102f4:	b580      	push	{r7, lr}
 80102f6:	b084      	sub	sp, #16
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010302:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	2200      	movs	r2, #0
 8010308:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	2201      	movs	r2, #1
 801030e:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 8010310:	2181      	movs	r1, #129	; 0x81
 8010312:	6878      	ldr	r0, [r7, #4]
 8010314:	f005 fba0 	bl	8015a58 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 8010318:	2101      	movs	r1, #1
 801031a:	6878      	ldr	r0, [r7, #4]
 801031c:	f005 fb9c 	bl	8015a58 <USBD_LL_ClearStallEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	f248 0210 	movw	r2, #32784	; 0x8010
 8010326:	441a      	add	r2, r3
 8010328:	231f      	movs	r3, #31
 801032a:	2101      	movs	r1, #1
 801032c:	6878      	ldr	r0, [r7, #4]
 801032e:	f005 fc1e 	bl	8015b6e <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 8010332:	bf00      	nop
 8010334:	3710      	adds	r7, #16
 8010336:	46bd      	mov	sp, r7
 8010338:	bd80      	pop	{r7, pc}

0801033a <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 801033a:	b480      	push	{r7}
 801033c:	b085      	sub	sp, #20
 801033e:	af00      	add	r7, sp, #0
 8010340:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010348:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	2200      	movs	r2, #0
 801034e:	721a      	strb	r2, [r3, #8]
}
 8010350:	bf00      	nop
 8010352:	3714      	adds	r7, #20
 8010354:	46bd      	mov	sp, r7
 8010356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801035a:	4770      	bx	lr

0801035c <MSC_BOT_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801035c:	b580      	push	{r7, lr}
 801035e:	b084      	sub	sp, #16
 8010360:	af00      	add	r7, sp, #0
 8010362:	6078      	str	r0, [r7, #4]
 8010364:	460b      	mov	r3, r1
 8010366:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801036e:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	7a1b      	ldrb	r3, [r3, #8]
 8010374:	2b02      	cmp	r3, #2
 8010376:	d004      	beq.n	8010382 <MSC_BOT_DataIn+0x26>
 8010378:	2b02      	cmp	r3, #2
 801037a:	db1c      	blt.n	80103b6 <MSC_BOT_DataIn+0x5a>
 801037c:	2b04      	cmp	r3, #4
 801037e:	dc1a      	bgt.n	80103b6 <MSC_BOT_DataIn+0x5a>
 8010380:	e014      	b.n	80103ac <MSC_BOT_DataIn+0x50>
  {
  case USBD_BOT_DATA_IN:
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8010382:	68fa      	ldr	r2, [r7, #12]
 8010384:	f248 031d 	movw	r3, #32797	; 0x801d
 8010388:	4413      	add	r3, r2
 801038a:	7819      	ldrb	r1, [r3, #0]
 801038c:	68fa      	ldr	r2, [r7, #12]
 801038e:	f248 031f 	movw	r3, #32799	; 0x801f
 8010392:	4413      	add	r3, r2
 8010394:	461a      	mov	r2, r3
 8010396:	6878      	ldr	r0, [r7, #4]
 8010398:	f000 f99e 	bl	80106d8 <SCSI_ProcessCmd>
 801039c:	4603      	mov	r3, r0
 801039e:	2b00      	cmp	r3, #0
 80103a0:	da0b      	bge.n	80103ba <MSC_BOT_DataIn+0x5e>
    {
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80103a2:	2101      	movs	r1, #1
 80103a4:	6878      	ldr	r0, [r7, #4]
 80103a6:	f000 f90b 	bl	80105c0 <MSC_BOT_SendCSW>
    }
    break;
 80103aa:	e006      	b.n	80103ba <MSC_BOT_DataIn+0x5e>

  case USBD_BOT_SEND_DATA:
  case USBD_BOT_LAST_DATA_IN:
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80103ac:	2100      	movs	r1, #0
 80103ae:	6878      	ldr	r0, [r7, #4]
 80103b0:	f000 f906 	bl	80105c0 <MSC_BOT_SendCSW>
    break;
 80103b4:	e002      	b.n	80103bc <MSC_BOT_DataIn+0x60>

  default:
    break;
 80103b6:	bf00      	nop
 80103b8:	e000      	b.n	80103bc <MSC_BOT_DataIn+0x60>
    break;
 80103ba:	bf00      	nop
  }
}
 80103bc:	bf00      	nop
 80103be:	3710      	adds	r7, #16
 80103c0:	46bd      	mov	sp, r7
 80103c2:	bd80      	pop	{r7, pc}

080103c4 <MSC_BOT_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80103c4:	b580      	push	{r7, lr}
 80103c6:	b084      	sub	sp, #16
 80103c8:	af00      	add	r7, sp, #0
 80103ca:	6078      	str	r0, [r7, #4]
 80103cc:	460b      	mov	r3, r1
 80103ce:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80103d6:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 80103d8:	68fb      	ldr	r3, [r7, #12]
 80103da:	7a1b      	ldrb	r3, [r3, #8]
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d002      	beq.n	80103e6 <MSC_BOT_DataOut+0x22>
 80103e0:	2b01      	cmp	r3, #1
 80103e2:	d004      	beq.n	80103ee <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 80103e4:	e018      	b.n	8010418 <MSC_BOT_DataOut+0x54>
      MSC_BOT_CBW_Decode(pdev);
 80103e6:	6878      	ldr	r0, [r7, #4]
 80103e8:	f000 f81a 	bl	8010420 <MSC_BOT_CBW_Decode>
      break;
 80103ec:	e014      	b.n	8010418 <MSC_BOT_DataOut+0x54>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80103ee:	68fa      	ldr	r2, [r7, #12]
 80103f0:	f248 031d 	movw	r3, #32797	; 0x801d
 80103f4:	4413      	add	r3, r2
 80103f6:	7819      	ldrb	r1, [r3, #0]
 80103f8:	68fa      	ldr	r2, [r7, #12]
 80103fa:	f248 031f 	movw	r3, #32799	; 0x801f
 80103fe:	4413      	add	r3, r2
 8010400:	461a      	mov	r2, r3
 8010402:	6878      	ldr	r0, [r7, #4]
 8010404:	f000 f968 	bl	80106d8 <SCSI_ProcessCmd>
 8010408:	4603      	mov	r3, r0
 801040a:	2b00      	cmp	r3, #0
 801040c:	da03      	bge.n	8010416 <MSC_BOT_DataOut+0x52>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801040e:	2101      	movs	r1, #1
 8010410:	6878      	ldr	r0, [r7, #4]
 8010412:	f000 f8d5 	bl	80105c0 <MSC_BOT_SendCSW>
      break;
 8010416:	bf00      	nop
  }
}
 8010418:	bf00      	nop
 801041a:	3710      	adds	r7, #16
 801041c:	46bd      	mov	sp, r7
 801041e:	bd80      	pop	{r7, pc}

08010420 <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8010420:	b580      	push	{r7, lr}
 8010422:	b084      	sub	sp, #16
 8010424:	af00      	add	r7, sp, #0
 8010426:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801042e:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8010430:	68fa      	ldr	r2, [r7, #12]
 8010432:	f248 0314 	movw	r3, #32788	; 0x8014
 8010436:	4413      	add	r3, r2
 8010438:	681a      	ldr	r2, [r3, #0]
 801043a:	68f9      	ldr	r1, [r7, #12]
 801043c:	f248 0334 	movw	r3, #32820	; 0x8034
 8010440:	440b      	add	r3, r1
 8010442:	601a      	str	r2, [r3, #0]
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8010444:	68fa      	ldr	r2, [r7, #12]
 8010446:	f248 0318 	movw	r3, #32792	; 0x8018
 801044a:	4413      	add	r3, r2
 801044c:	681a      	ldr	r2, [r3, #0]
 801044e:	68f9      	ldr	r1, [r7, #12]
 8010450:	f248 0338 	movw	r3, #32824	; 0x8038
 8010454:	440b      	add	r3, r1
 8010456:	601a      	str	r2, [r3, #0]

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8010458:	2101      	movs	r1, #1
 801045a:	6878      	ldr	r0, [r7, #4]
 801045c:	f005 fba8 	bl	8015bb0 <USBD_LL_GetRxDataSize>
 8010460:	4603      	mov	r3, r0
 8010462:	2b1f      	cmp	r3, #31
 8010464:	d11c      	bne.n	80104a0 <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8010466:	68fa      	ldr	r2, [r7, #12]
 8010468:	f248 0310 	movw	r3, #32784	; 0x8010
 801046c:	4413      	add	r3, r2
 801046e:	681b      	ldr	r3, [r3, #0]
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8010470:	4a38      	ldr	r2, [pc, #224]	; (8010554 <MSC_BOT_CBW_Decode+0x134>)
 8010472:	4293      	cmp	r3, r2
 8010474:	d114      	bne.n	80104a0 <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8010476:	68fa      	ldr	r2, [r7, #12]
 8010478:	f248 031d 	movw	r3, #32797	; 0x801d
 801047c:	4413      	add	r3, r2
 801047e:	781b      	ldrb	r3, [r3, #0]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8010480:	2b01      	cmp	r3, #1
 8010482:	d80d      	bhi.n	80104a0 <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8010484:	68fa      	ldr	r2, [r7, #12]
 8010486:	f248 031e 	movw	r3, #32798	; 0x801e
 801048a:	4413      	add	r3, r2
 801048c:	781b      	ldrb	r3, [r3, #0]
 801048e:	2b00      	cmp	r3, #0
 8010490:	d006      	beq.n	80104a0 <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.bCBLength > 16U))
 8010492:	68fa      	ldr	r2, [r7, #12]
 8010494:	f248 031e 	movw	r3, #32798	; 0x801e
 8010498:	4413      	add	r3, r2
 801049a:	781b      	ldrb	r3, [r3, #0]
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801049c:	2b10      	cmp	r3, #16
 801049e:	d910      	bls.n	80104c2 <MSC_BOT_CBW_Decode+0xa2>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80104a0:	68fa      	ldr	r2, [r7, #12]
 80104a2:	f248 031d 	movw	r3, #32797	; 0x801d
 80104a6:	4413      	add	r3, r2
 80104a8:	7819      	ldrb	r1, [r3, #0]
 80104aa:	2320      	movs	r3, #32
 80104ac:	2205      	movs	r2, #5
 80104ae:	6878      	ldr	r0, [r7, #4]
 80104b0:	f000 fd36 	bl	8010f20 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	2202      	movs	r2, #2
 80104b8:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 80104ba:	6878      	ldr	r0, [r7, #4]
 80104bc:	f000 f8b2 	bl	8010624 <MSC_BOT_Abort>
 80104c0:	e044      	b.n	801054c <MSC_BOT_CBW_Decode+0x12c>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80104c2:	68fa      	ldr	r2, [r7, #12]
 80104c4:	f248 031d 	movw	r3, #32797	; 0x801d
 80104c8:	4413      	add	r3, r2
 80104ca:	7819      	ldrb	r1, [r3, #0]
 80104cc:	68fa      	ldr	r2, [r7, #12]
 80104ce:	f248 031f 	movw	r3, #32799	; 0x801f
 80104d2:	4413      	add	r3, r2
 80104d4:	461a      	mov	r2, r3
 80104d6:	6878      	ldr	r0, [r7, #4]
 80104d8:	f000 f8fe 	bl	80106d8 <SCSI_ProcessCmd>
 80104dc:	4603      	mov	r3, r0
 80104de:	2b00      	cmp	r3, #0
 80104e0:	da0c      	bge.n	80104fc <MSC_BOT_CBW_Decode+0xdc>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	7a1b      	ldrb	r3, [r3, #8]
 80104e6:	2b05      	cmp	r3, #5
 80104e8:	d104      	bne.n	80104f4 <MSC_BOT_CBW_Decode+0xd4>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80104ea:	2101      	movs	r1, #1
 80104ec:	6878      	ldr	r0, [r7, #4]
 80104ee:	f000 f867 	bl	80105c0 <MSC_BOT_SendCSW>
 80104f2:	e02b      	b.n	801054c <MSC_BOT_CBW_Decode+0x12c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80104f4:	6878      	ldr	r0, [r7, #4]
 80104f6:	f000 f895 	bl	8010624 <MSC_BOT_Abort>
 80104fa:	e027      	b.n	801054c <MSC_BOT_CBW_Decode+0x12c>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	7a1b      	ldrb	r3, [r3, #8]
 8010500:	2b02      	cmp	r3, #2
 8010502:	d022      	beq.n	801054a <MSC_BOT_CBW_Decode+0x12a>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8010508:	2b01      	cmp	r3, #1
 801050a:	d01e      	beq.n	801054a <MSC_BOT_CBW_Decode+0x12a>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8010510:	2b03      	cmp	r3, #3
 8010512:	d01a      	beq.n	801054a <MSC_BOT_CBW_Decode+0x12a>
    {
      if (hmsc->bot_data_length > 0U)
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	68db      	ldr	r3, [r3, #12]
 8010518:	2b00      	cmp	r3, #0
 801051a:	d009      	beq.n	8010530 <MSC_BOT_CBW_Decode+0x110>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	f103 0110 	add.w	r1, r3, #16
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	68db      	ldr	r3, [r3, #12]
 8010526:	461a      	mov	r2, r3
 8010528:	6878      	ldr	r0, [r7, #4]
 801052a:	f000 f815 	bl	8010558 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 801052e:	e00d      	b.n	801054c <MSC_BOT_CBW_Decode+0x12c>
      }
      else if (hmsc->bot_data_length == 0U)
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	68db      	ldr	r3, [r3, #12]
 8010534:	2b00      	cmp	r3, #0
 8010536:	d104      	bne.n	8010542 <MSC_BOT_CBW_Decode+0x122>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8010538:	2100      	movs	r1, #0
 801053a:	6878      	ldr	r0, [r7, #4]
 801053c:	f000 f840 	bl	80105c0 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8010540:	e004      	b.n	801054c <MSC_BOT_CBW_Decode+0x12c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8010542:	6878      	ldr	r0, [r7, #4]
 8010544:	f000 f86e 	bl	8010624 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8010548:	e000      	b.n	801054c <MSC_BOT_CBW_Decode+0x12c>
      }
    }
    else
    {
      return;
 801054a:	bf00      	nop
    }
  }
}
 801054c:	3710      	adds	r7, #16
 801054e:	46bd      	mov	sp, r7
 8010550:	bd80      	pop	{r7, pc}
 8010552:	bf00      	nop
 8010554:	43425355 	.word	0x43425355

08010558 <MSC_BOT_SendData>:
* @param  buf: pointer to data buffer
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8010558:	b580      	push	{r7, lr}
 801055a:	b086      	sub	sp, #24
 801055c:	af00      	add	r7, sp, #0
 801055e:	60f8      	str	r0, [r7, #12]
 8010560:	60b9      	str	r1, [r7, #8]
 8010562:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801056a:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 801056c:	697a      	ldr	r2, [r7, #20]
 801056e:	f248 0318 	movw	r3, #32792	; 0x8018
 8010572:	4413      	add	r3, r2
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	687a      	ldr	r2, [r7, #4]
 8010578:	4293      	cmp	r3, r2
 801057a:	bf28      	it	cs
 801057c:	4613      	movcs	r3, r2
 801057e:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 8010580:	697a      	ldr	r2, [r7, #20]
 8010582:	f248 0338 	movw	r3, #32824	; 0x8038
 8010586:	4413      	add	r3, r2
 8010588:	681a      	ldr	r2, [r3, #0]
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	1ad2      	subs	r2, r2, r3
 801058e:	6979      	ldr	r1, [r7, #20]
 8010590:	f248 0338 	movw	r3, #32824	; 0x8038
 8010594:	440b      	add	r3, r1
 8010596:	601a      	str	r2, [r3, #0]
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8010598:	697a      	ldr	r2, [r7, #20]
 801059a:	f248 033c 	movw	r3, #32828	; 0x803c
 801059e:	4413      	add	r3, r2
 80105a0:	2200      	movs	r2, #0
 80105a2:	701a      	strb	r2, [r3, #0]
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 80105a4:	697b      	ldr	r3, [r7, #20]
 80105a6:	2204      	movs	r2, #4
 80105a8:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 80105aa:	693b      	ldr	r3, [r7, #16]
 80105ac:	68ba      	ldr	r2, [r7, #8]
 80105ae:	2181      	movs	r1, #129	; 0x81
 80105b0:	68f8      	ldr	r0, [r7, #12]
 80105b2:	f005 fabb 	bl	8015b2c <USBD_LL_Transmit>
}
 80105b6:	bf00      	nop
 80105b8:	3718      	adds	r7, #24
 80105ba:	46bd      	mov	sp, r7
 80105bc:	bd80      	pop	{r7, pc}
	...

080105c0 <MSC_BOT_SendCSW>:
* @param  pdev: device instance
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 80105c0:	b580      	push	{r7, lr}
 80105c2:	b084      	sub	sp, #16
 80105c4:	af00      	add	r7, sp, #0
 80105c6:	6078      	str	r0, [r7, #4]
 80105c8:	460b      	mov	r3, r1
 80105ca:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80105d2:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 80105d4:	68fa      	ldr	r2, [r7, #12]
 80105d6:	f248 0330 	movw	r3, #32816	; 0x8030
 80105da:	4413      	add	r3, r2
 80105dc:	4a10      	ldr	r2, [pc, #64]	; (8010620 <MSC_BOT_SendCSW+0x60>)
 80105de:	601a      	str	r2, [r3, #0]
  hmsc->csw.bStatus = CSW_Status;
 80105e0:	68fa      	ldr	r2, [r7, #12]
 80105e2:	f248 033c 	movw	r3, #32828	; 0x803c
 80105e6:	4413      	add	r3, r2
 80105e8:	78fa      	ldrb	r2, [r7, #3]
 80105ea:	701a      	strb	r2, [r3, #0]
  hmsc->bot_state = USBD_BOT_IDLE;
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	2200      	movs	r2, #0
 80105f0:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	f248 0230 	movw	r2, #32816	; 0x8030
 80105f8:	441a      	add	r2, r3
 80105fa:	230d      	movs	r3, #13
 80105fc:	2181      	movs	r1, #129	; 0x81
 80105fe:	6878      	ldr	r0, [r7, #4]
 8010600:	f005 fa94 	bl	8015b2c <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	f248 0210 	movw	r2, #32784	; 0x8010
 801060a:	441a      	add	r2, r3
 801060c:	231f      	movs	r3, #31
 801060e:	2101      	movs	r1, #1
 8010610:	6878      	ldr	r0, [r7, #4]
 8010612:	f005 faac 	bl	8015b6e <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 8010616:	bf00      	nop
 8010618:	3710      	adds	r7, #16
 801061a:	46bd      	mov	sp, r7
 801061c:	bd80      	pop	{r7, pc}
 801061e:	bf00      	nop
 8010620:	53425355 	.word	0x53425355

08010624 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8010624:	b580      	push	{r7, lr}
 8010626:	b084      	sub	sp, #16
 8010628:	af00      	add	r7, sp, #0
 801062a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010632:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 8010634:	68fa      	ldr	r2, [r7, #12]
 8010636:	f248 031c 	movw	r3, #32796	; 0x801c
 801063a:	4413      	add	r3, r2
 801063c:	781b      	ldrb	r3, [r3, #0]
 801063e:	2b00      	cmp	r3, #0
 8010640:	d10e      	bne.n	8010660 <MSC_BOT_Abort+0x3c>
      (hmsc->cbw.dDataLength != 0U) &&
 8010642:	68fa      	ldr	r2, [r7, #12]
 8010644:	f248 0318 	movw	r3, #32792	; 0x8018
 8010648:	4413      	add	r3, r2
 801064a:	681b      	ldr	r3, [r3, #0]
  if ((hmsc->cbw.bmFlags == 0U) &&
 801064c:	2b00      	cmp	r3, #0
 801064e:	d007      	beq.n	8010660 <MSC_BOT_Abort+0x3c>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8010650:	68fb      	ldr	r3, [r7, #12]
 8010652:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8010654:	2b00      	cmp	r3, #0
 8010656:	d103      	bne.n	8010660 <MSC_BOT_Abort+0x3c>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8010658:	2101      	movs	r1, #1
 801065a:	6878      	ldr	r0, [r7, #4]
 801065c:	f005 f9dd 	bl	8015a1a <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8010660:	2181      	movs	r1, #129	; 0x81
 8010662:	6878      	ldr	r0, [r7, #4]
 8010664:	f005 f9d9 	bl	8015a1a <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	7a5b      	ldrb	r3, [r3, #9]
 801066c:	2b02      	cmp	r3, #2
 801066e:	d107      	bne.n	8010680 <MSC_BOT_Abort+0x5c>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8010670:	2181      	movs	r1, #129	; 0x81
 8010672:	6878      	ldr	r0, [r7, #4]
 8010674:	f005 f9d1 	bl	8015a1a <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8010678:	2101      	movs	r1, #1
 801067a:	6878      	ldr	r0, [r7, #4]
 801067c:	f005 f9cd 	bl	8015a1a <USBD_LL_StallEP>
  }
}
 8010680:	bf00      	nop
 8010682:	3710      	adds	r7, #16
 8010684:	46bd      	mov	sp, r7
 8010686:	bd80      	pop	{r7, pc}

08010688 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010688:	b580      	push	{r7, lr}
 801068a:	b084      	sub	sp, #16
 801068c:	af00      	add	r7, sp, #0
 801068e:	6078      	str	r0, [r7, #4]
 8010690:	460b      	mov	r3, r1
 8010692:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801069a:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 801069c:	68fb      	ldr	r3, [r7, #12]
 801069e:	7a5b      	ldrb	r3, [r3, #9]
 80106a0:	2b02      	cmp	r3, #2
 80106a2:	d108      	bne.n	80106b6 <MSC_BOT_CplClrFeature+0x2e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 80106a4:	2181      	movs	r1, #129	; 0x81
 80106a6:	6878      	ldr	r0, [r7, #4]
 80106a8:	f005 f9b7 	bl	8015a1a <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 80106ac:	2101      	movs	r1, #1
 80106ae:	6878      	ldr	r0, [r7, #4]
 80106b0:	f005 f9b3 	bl	8015a1a <USBD_LL_StallEP>
 80106b4:	e00d      	b.n	80106d2 <MSC_BOT_CplClrFeature+0x4a>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 80106b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	da08      	bge.n	80106d0 <MSC_BOT_CplClrFeature+0x48>
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	7a5b      	ldrb	r3, [r3, #9]
 80106c2:	2b01      	cmp	r3, #1
 80106c4:	d004      	beq.n	80106d0 <MSC_BOT_CplClrFeature+0x48>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80106c6:	2101      	movs	r1, #1
 80106c8:	6878      	ldr	r0, [r7, #4]
 80106ca:	f7ff ff79 	bl	80105c0 <MSC_BOT_SendCSW>
 80106ce:	e000      	b.n	80106d2 <MSC_BOT_CplClrFeature+0x4a>
  }
  else
  {
    return;
 80106d0:	bf00      	nop
  }
}
 80106d2:	3710      	adds	r7, #16
 80106d4:	46bd      	mov	sp, r7
 80106d6:	bd80      	pop	{r7, pc}

080106d8 <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 80106d8:	b580      	push	{r7, lr}
 80106da:	b086      	sub	sp, #24
 80106dc:	af00      	add	r7, sp, #0
 80106de:	60f8      	str	r0, [r7, #12]
 80106e0:	460b      	mov	r3, r1
 80106e2:	607a      	str	r2, [r7, #4]
 80106e4:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80106e6:	68fb      	ldr	r3, [r7, #12]
 80106e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80106ec:	613b      	str	r3, [r7, #16]

  switch (cmd[0])
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	781b      	ldrb	r3, [r3, #0]
 80106f2:	2b25      	cmp	r3, #37	; 0x25
 80106f4:	d06e      	beq.n	80107d4 <SCSI_ProcessCmd+0xfc>
 80106f6:	2b25      	cmp	r3, #37	; 0x25
 80106f8:	dc11      	bgt.n	801071e <SCSI_ProcessCmd+0x46>
 80106fa:	2b1a      	cmp	r3, #26
 80106fc:	d04f      	beq.n	801079e <SCSI_ProcessCmd+0xc6>
 80106fe:	2b1a      	cmp	r3, #26
 8010700:	dc06      	bgt.n	8010710 <SCSI_ProcessCmd+0x38>
 8010702:	2b03      	cmp	r3, #3
 8010704:	d027      	beq.n	8010756 <SCSI_ProcessCmd+0x7e>
 8010706:	2b12      	cmp	r3, #18
 8010708:	d02e      	beq.n	8010768 <SCSI_ProcessCmd+0x90>
 801070a:	2b00      	cmp	r3, #0
 801070c:	d01a      	beq.n	8010744 <SCSI_ProcessCmd+0x6c>
 801070e:	e0a0      	b.n	8010852 <SCSI_ProcessCmd+0x17a>
 8010710:	2b1e      	cmp	r3, #30
 8010712:	d03b      	beq.n	801078c <SCSI_ProcessCmd+0xb4>
 8010714:	2b23      	cmp	r3, #35	; 0x23
 8010716:	d054      	beq.n	80107c2 <SCSI_ProcessCmd+0xea>
 8010718:	2b1b      	cmp	r3, #27
 801071a:	d02e      	beq.n	801077a <SCSI_ProcessCmd+0xa2>
 801071c:	e099      	b.n	8010852 <SCSI_ProcessCmd+0x17a>
 801071e:	2b5a      	cmp	r3, #90	; 0x5a
 8010720:	d046      	beq.n	80107b0 <SCSI_ProcessCmd+0xd8>
 8010722:	2b5a      	cmp	r3, #90	; 0x5a
 8010724:	dc07      	bgt.n	8010736 <SCSI_ProcessCmd+0x5e>
 8010726:	2b2a      	cmp	r3, #42	; 0x2a
 8010728:	d078      	beq.n	801081c <SCSI_ProcessCmd+0x144>
 801072a:	2b2f      	cmp	r3, #47	; 0x2f
 801072c:	f000 8088 	beq.w	8010840 <SCSI_ProcessCmd+0x168>
 8010730:	2b28      	cmp	r3, #40	; 0x28
 8010732:	d061      	beq.n	80107f8 <SCSI_ProcessCmd+0x120>
 8010734:	e08d      	b.n	8010852 <SCSI_ProcessCmd+0x17a>
 8010736:	2ba8      	cmp	r3, #168	; 0xa8
 8010738:	d067      	beq.n	801080a <SCSI_ProcessCmd+0x132>
 801073a:	2baa      	cmp	r3, #170	; 0xaa
 801073c:	d077      	beq.n	801082e <SCSI_ProcessCmd+0x156>
 801073e:	2b9e      	cmp	r3, #158	; 0x9e
 8010740:	d051      	beq.n	80107e6 <SCSI_ProcessCmd+0x10e>
 8010742:	e086      	b.n	8010852 <SCSI_ProcessCmd+0x17a>
  {
  case SCSI_TEST_UNIT_READY:
    ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8010744:	7afb      	ldrb	r3, [r7, #11]
 8010746:	687a      	ldr	r2, [r7, #4]
 8010748:	4619      	mov	r1, r3
 801074a:	68f8      	ldr	r0, [r7, #12]
 801074c:	f000 f893 	bl	8010876 <SCSI_TestUnitReady>
 8010750:	4603      	mov	r3, r0
 8010752:	75fb      	strb	r3, [r7, #23]
    break;
 8010754:	e089      	b.n	801086a <SCSI_ProcessCmd+0x192>

  case SCSI_REQUEST_SENSE:
    ret = SCSI_RequestSense(pdev, lun, cmd);
 8010756:	7afb      	ldrb	r3, [r7, #11]
 8010758:	687a      	ldr	r2, [r7, #4]
 801075a:	4619      	mov	r1, r3
 801075c:	68f8      	ldr	r0, [r7, #12]
 801075e:	f000 fb47 	bl	8010df0 <SCSI_RequestSense>
 8010762:	4603      	mov	r3, r0
 8010764:	75fb      	strb	r3, [r7, #23]
    break;
 8010766:	e080      	b.n	801086a <SCSI_ProcessCmd+0x192>

  case SCSI_INQUIRY:
    ret = SCSI_Inquiry(pdev, lun, cmd);
 8010768:	7afb      	ldrb	r3, [r7, #11]
 801076a:	687a      	ldr	r2, [r7, #4]
 801076c:	4619      	mov	r1, r3
 801076e:	68f8      	ldr	r0, [r7, #12]
 8010770:	f000 f8d2 	bl	8010918 <SCSI_Inquiry>
 8010774:	4603      	mov	r3, r0
 8010776:	75fb      	strb	r3, [r7, #23]
    break;
 8010778:	e077      	b.n	801086a <SCSI_ProcessCmd+0x192>

  case SCSI_START_STOP_UNIT:
    ret = SCSI_StartStopUnit(pdev, lun, cmd);
 801077a:	7afb      	ldrb	r3, [r7, #11]
 801077c:	687a      	ldr	r2, [r7, #4]
 801077e:	4619      	mov	r1, r3
 8010780:	68f8      	ldr	r0, [r7, #12]
 8010782:	f000 fc27 	bl	8010fd4 <SCSI_StartStopUnit>
 8010786:	4603      	mov	r3, r0
 8010788:	75fb      	strb	r3, [r7, #23]
    break;
 801078a:	e06e      	b.n	801086a <SCSI_ProcessCmd+0x192>

  case SCSI_ALLOW_MEDIUM_REMOVAL:
    ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 801078c:	7afb      	ldrb	r3, [r7, #11]
 801078e:	687a      	ldr	r2, [r7, #4]
 8010790:	4619      	mov	r1, r3
 8010792:	68f8      	ldr	r0, [r7, #12]
 8010794:	f000 fc71 	bl	801107a <SCSI_AllowPreventRemovable>
 8010798:	4603      	mov	r3, r0
 801079a:	75fb      	strb	r3, [r7, #23]
    break;
 801079c:	e065      	b.n	801086a <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE6:
    ret = SCSI_ModeSense6(pdev, lun, cmd);
 801079e:	7afb      	ldrb	r3, [r7, #11]
 80107a0:	687a      	ldr	r2, [r7, #4]
 80107a2:	4619      	mov	r1, r3
 80107a4:	68f8      	ldr	r0, [r7, #12]
 80107a6:	f000 fad7 	bl	8010d58 <SCSI_ModeSense6>
 80107aa:	4603      	mov	r3, r0
 80107ac:	75fb      	strb	r3, [r7, #23]
    break;
 80107ae:	e05c      	b.n	801086a <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE10:
    ret = SCSI_ModeSense10(pdev, lun, cmd);
 80107b0:	7afb      	ldrb	r3, [r7, #11]
 80107b2:	687a      	ldr	r2, [r7, #4]
 80107b4:	4619      	mov	r1, r3
 80107b6:	68f8      	ldr	r0, [r7, #12]
 80107b8:	f000 faf4 	bl	8010da4 <SCSI_ModeSense10>
 80107bc:	4603      	mov	r3, r0
 80107be:	75fb      	strb	r3, [r7, #23]
    break;
 80107c0:	e053      	b.n	801086a <SCSI_ProcessCmd+0x192>

  case SCSI_READ_FORMAT_CAPACITIES:
    ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 80107c2:	7afb      	ldrb	r3, [r7, #11]
 80107c4:	687a      	ldr	r2, [r7, #4]
 80107c6:	4619      	mov	r1, r3
 80107c8:	68f8      	ldr	r0, [r7, #12]
 80107ca:	f000 fa56 	bl	8010c7a <SCSI_ReadFormatCapacity>
 80107ce:	4603      	mov	r3, r0
 80107d0:	75fb      	strb	r3, [r7, #23]
    break;
 80107d2:	e04a      	b.n	801086a <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY10:
    ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 80107d4:	7afb      	ldrb	r3, [r7, #11]
 80107d6:	687a      	ldr	r2, [r7, #4]
 80107d8:	4619      	mov	r1, r3
 80107da:	68f8      	ldr	r0, [r7, #12]
 80107dc:	f000 f910 	bl	8010a00 <SCSI_ReadCapacity10>
 80107e0:	4603      	mov	r3, r0
 80107e2:	75fb      	strb	r3, [r7, #23]
    break;
 80107e4:	e041      	b.n	801086a <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY16:
    ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 80107e6:	7afb      	ldrb	r3, [r7, #11]
 80107e8:	687a      	ldr	r2, [r7, #4]
 80107ea:	4619      	mov	r1, r3
 80107ec:	68f8      	ldr	r0, [r7, #12]
 80107ee:	f000 f98b 	bl	8010b08 <SCSI_ReadCapacity16>
 80107f2:	4603      	mov	r3, r0
 80107f4:	75fb      	strb	r3, [r7, #23]
    break;
 80107f6:	e038      	b.n	801086a <SCSI_ProcessCmd+0x192>

  case SCSI_READ10:
    ret = SCSI_Read10(pdev, lun, cmd);
 80107f8:	7afb      	ldrb	r3, [r7, #11]
 80107fa:	687a      	ldr	r2, [r7, #4]
 80107fc:	4619      	mov	r1, r3
 80107fe:	68f8      	ldr	r0, [r7, #12]
 8010800:	f000 fc62 	bl	80110c8 <SCSI_Read10>
 8010804:	4603      	mov	r3, r0
 8010806:	75fb      	strb	r3, [r7, #23]
    break;
 8010808:	e02f      	b.n	801086a <SCSI_ProcessCmd+0x192>

  case SCSI_READ12:
    ret = SCSI_Read12(pdev, lun, cmd);
 801080a:	7afb      	ldrb	r3, [r7, #11]
 801080c:	687a      	ldr	r2, [r7, #4]
 801080e:	4619      	mov	r1, r3
 8010810:	68f8      	ldr	r0, [r7, #12]
 8010812:	f000 fd0b 	bl	801122c <SCSI_Read12>
 8010816:	4603      	mov	r3, r0
 8010818:	75fb      	strb	r3, [r7, #23]
    break;
 801081a:	e026      	b.n	801086a <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE10:
    ret = SCSI_Write10(pdev, lun, cmd);
 801081c:	7afb      	ldrb	r3, [r7, #11]
 801081e:	687a      	ldr	r2, [r7, #4]
 8010820:	4619      	mov	r1, r3
 8010822:	68f8      	ldr	r0, [r7, #12]
 8010824:	f000 fdbe 	bl	80113a4 <SCSI_Write10>
 8010828:	4603      	mov	r3, r0
 801082a:	75fb      	strb	r3, [r7, #23]
    break;
 801082c:	e01d      	b.n	801086a <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE12:
    ret = SCSI_Write12(pdev, lun, cmd);
 801082e:	7afb      	ldrb	r3, [r7, #11]
 8010830:	687a      	ldr	r2, [r7, #4]
 8010832:	4619      	mov	r1, r3
 8010834:	68f8      	ldr	r0, [r7, #12]
 8010836:	f000 fe8d 	bl	8011554 <SCSI_Write12>
 801083a:	4603      	mov	r3, r0
 801083c:	75fb      	strb	r3, [r7, #23]
    break;
 801083e:	e014      	b.n	801086a <SCSI_ProcessCmd+0x192>

  case SCSI_VERIFY10:
    ret = SCSI_Verify10(pdev, lun, cmd);
 8010840:	7afb      	ldrb	r3, [r7, #11]
 8010842:	687a      	ldr	r2, [r7, #4]
 8010844:	4619      	mov	r1, r3
 8010846:	68f8      	ldr	r0, [r7, #12]
 8010848:	f000 ff6c 	bl	8011724 <SCSI_Verify10>
 801084c:	4603      	mov	r3, r0
 801084e:	75fb      	strb	r3, [r7, #23]
    break;
 8010850:	e00b      	b.n	801086a <SCSI_ProcessCmd+0x192>

  default:
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8010852:	7af9      	ldrb	r1, [r7, #11]
 8010854:	2320      	movs	r3, #32
 8010856:	2205      	movs	r2, #5
 8010858:	68f8      	ldr	r0, [r7, #12]
 801085a:	f000 fb61 	bl	8010f20 <SCSI_SenseCode>
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 801085e:	693b      	ldr	r3, [r7, #16]
 8010860:	2202      	movs	r2, #2
 8010862:	725a      	strb	r2, [r3, #9]
    ret = -1;
 8010864:	23ff      	movs	r3, #255	; 0xff
 8010866:	75fb      	strb	r3, [r7, #23]
    break;
 8010868:	bf00      	nop
  }

  return ret;
 801086a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801086e:	4618      	mov	r0, r3
 8010870:	3718      	adds	r7, #24
 8010872:	46bd      	mov	sp, r7
 8010874:	bd80      	pop	{r7, pc}

08010876 <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8010876:	b580      	push	{r7, lr}
 8010878:	b086      	sub	sp, #24
 801087a:	af00      	add	r7, sp, #0
 801087c:	60f8      	str	r0, [r7, #12]
 801087e:	460b      	mov	r3, r1
 8010880:	607a      	str	r2, [r7, #4]
 8010882:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801088a:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 801088c:	697a      	ldr	r2, [r7, #20]
 801088e:	f248 0318 	movw	r3, #32792	; 0x8018
 8010892:	4413      	add	r3, r2
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	2b00      	cmp	r3, #0
 8010898:	d00c      	beq.n	80108b4 <SCSI_TestUnitReady+0x3e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801089a:	697a      	ldr	r2, [r7, #20]
 801089c:	f248 031d 	movw	r3, #32797	; 0x801d
 80108a0:	4413      	add	r3, r2
 80108a2:	7819      	ldrb	r1, [r3, #0]
 80108a4:	2320      	movs	r3, #32
 80108a6:	2205      	movs	r2, #5
 80108a8:	68f8      	ldr	r0, [r7, #12]
 80108aa:	f000 fb39 	bl	8010f20 <SCSI_SenseCode>

    return -1;
 80108ae:	f04f 33ff 	mov.w	r3, #4294967295
 80108b2:	e02c      	b.n	801090e <SCSI_TestUnitReady+0x98>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80108b4:	697a      	ldr	r2, [r7, #20]
 80108b6:	f248 0362 	movw	r3, #32866	; 0x8062
 80108ba:	4413      	add	r3, r2
 80108bc:	781b      	ldrb	r3, [r3, #0]
 80108be:	2b02      	cmp	r3, #2
 80108c0:	d10b      	bne.n	80108da <SCSI_TestUnitReady+0x64>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80108c2:	7af9      	ldrb	r1, [r7, #11]
 80108c4:	233a      	movs	r3, #58	; 0x3a
 80108c6:	2202      	movs	r2, #2
 80108c8:	68f8      	ldr	r0, [r7, #12]
 80108ca:	f000 fb29 	bl	8010f20 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 80108ce:	697b      	ldr	r3, [r7, #20]
 80108d0:	2205      	movs	r2, #5
 80108d2:	721a      	strb	r2, [r3, #8]
    return -1;
 80108d4:	f04f 33ff 	mov.w	r3, #4294967295
 80108d8:	e019      	b.n	801090e <SCSI_TestUnitReady+0x98>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80108e0:	689b      	ldr	r3, [r3, #8]
 80108e2:	7afa      	ldrb	r2, [r7, #11]
 80108e4:	4610      	mov	r0, r2
 80108e6:	4798      	blx	r3
 80108e8:	4603      	mov	r3, r0
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d00b      	beq.n	8010906 <SCSI_TestUnitReady+0x90>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80108ee:	7af9      	ldrb	r1, [r7, #11]
 80108f0:	233a      	movs	r3, #58	; 0x3a
 80108f2:	2202      	movs	r2, #2
 80108f4:	68f8      	ldr	r0, [r7, #12]
 80108f6:	f000 fb13 	bl	8010f20 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 80108fa:	697b      	ldr	r3, [r7, #20]
 80108fc:	2205      	movs	r2, #5
 80108fe:	721a      	strb	r2, [r3, #8]

    return -1;
 8010900:	f04f 33ff 	mov.w	r3, #4294967295
 8010904:	e003      	b.n	801090e <SCSI_TestUnitReady+0x98>
  }
  hmsc->bot_data_length = 0U;
 8010906:	697b      	ldr	r3, [r7, #20]
 8010908:	2200      	movs	r2, #0
 801090a:	60da      	str	r2, [r3, #12]

  return 0;
 801090c:	2300      	movs	r3, #0
}
 801090e:	4618      	mov	r0, r3
 8010910:	3718      	adds	r7, #24
 8010912:	46bd      	mov	sp, r7
 8010914:	bd80      	pop	{r7, pc}
	...

08010918 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8010918:	b580      	push	{r7, lr}
 801091a:	b088      	sub	sp, #32
 801091c:	af00      	add	r7, sp, #0
 801091e:	60f8      	str	r0, [r7, #12]
 8010920:	460b      	mov	r3, r1
 8010922:	607a      	str	r2, [r7, #4]
 8010924:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010926:	68fb      	ldr	r3, [r7, #12]
 8010928:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801092c:	61bb      	str	r3, [r7, #24]

  if (hmsc->cbw.dDataLength == 0U)
 801092e:	69ba      	ldr	r2, [r7, #24]
 8010930:	f248 0318 	movw	r3, #32792	; 0x8018
 8010934:	4413      	add	r3, r2
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	2b00      	cmp	r3, #0
 801093a:	d10c      	bne.n	8010956 <SCSI_Inquiry+0x3e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801093c:	69ba      	ldr	r2, [r7, #24]
 801093e:	f248 031d 	movw	r3, #32797	; 0x801d
 8010942:	4413      	add	r3, r2
 8010944:	7819      	ldrb	r1, [r3, #0]
 8010946:	2320      	movs	r3, #32
 8010948:	2205      	movs	r2, #5
 801094a:	68f8      	ldr	r0, [r7, #12]
 801094c:	f000 fae8 	bl	8010f20 <SCSI_SenseCode>
    return -1;
 8010950:	f04f 33ff 	mov.w	r3, #4294967295
 8010954:	e04c      	b.n	80109f0 <SCSI_Inquiry+0xd8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	3301      	adds	r3, #1
 801095a:	781b      	ldrb	r3, [r3, #0]
 801095c:	f003 0301 	and.w	r3, r3, #1
 8010960:	2b00      	cmp	r3, #0
 8010962:	d022      	beq.n	80109aa <SCSI_Inquiry+0x92>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	3302      	adds	r3, #2
 8010968:	781b      	ldrb	r3, [r3, #0]
 801096a:	2b00      	cmp	r3, #0
 801096c:	d105      	bne.n	801097a <SCSI_Inquiry+0x62>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 801096e:	2206      	movs	r2, #6
 8010970:	4921      	ldr	r1, [pc, #132]	; (80109f8 <SCSI_Inquiry+0xe0>)
 8010972:	69b8      	ldr	r0, [r7, #24]
 8010974:	f001 f862 	bl	8011a3c <SCSI_UpdateBotData>
 8010978:	e039      	b.n	80109ee <SCSI_Inquiry+0xd6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	3302      	adds	r3, #2
 801097e:	781b      	ldrb	r3, [r3, #0]
 8010980:	2b80      	cmp	r3, #128	; 0x80
 8010982:	d105      	bne.n	8010990 <SCSI_Inquiry+0x78>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8010984:	2208      	movs	r2, #8
 8010986:	491d      	ldr	r1, [pc, #116]	; (80109fc <SCSI_Inquiry+0xe4>)
 8010988:	69b8      	ldr	r0, [r7, #24]
 801098a:	f001 f857 	bl	8011a3c <SCSI_UpdateBotData>
 801098e:	e02e      	b.n	80109ee <SCSI_Inquiry+0xd6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8010990:	69ba      	ldr	r2, [r7, #24]
 8010992:	f248 031d 	movw	r3, #32797	; 0x801d
 8010996:	4413      	add	r3, r2
 8010998:	7819      	ldrb	r1, [r3, #0]
 801099a:	2324      	movs	r3, #36	; 0x24
 801099c:	2205      	movs	r2, #5
 801099e:	68f8      	ldr	r0, [r7, #12]
 80109a0:	f000 fabe 	bl	8010f20 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 80109a4:	f04f 33ff 	mov.w	r3, #4294967295
 80109a8:	e022      	b.n	80109f0 <SCSI_Inquiry+0xd8>
    }
  }
  else
  {
    pPage = (uint8_t *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80109b0:	69d9      	ldr	r1, [r3, #28]
 80109b2:	7afa      	ldrb	r2, [r7, #11]
 80109b4:	4613      	mov	r3, r2
 80109b6:	00db      	lsls	r3, r3, #3
 80109b8:	4413      	add	r3, r2
 80109ba:	009b      	lsls	r3, r3, #2
 80109bc:	440b      	add	r3, r1
 80109be:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 80109c0:	697b      	ldr	r3, [r7, #20]
 80109c2:	3304      	adds	r3, #4
 80109c4:	781b      	ldrb	r3, [r3, #0]
 80109c6:	b29b      	uxth	r3, r3
 80109c8:	3305      	adds	r3, #5
 80109ca:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	3304      	adds	r3, #4
 80109d0:	781b      	ldrb	r3, [r3, #0]
 80109d2:	b29b      	uxth	r3, r3
 80109d4:	8bfa      	ldrh	r2, [r7, #30]
 80109d6:	429a      	cmp	r2, r3
 80109d8:	d303      	bcc.n	80109e2 <SCSI_Inquiry+0xca>
    {
      len = params[4];
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	3304      	adds	r3, #4
 80109de:	781b      	ldrb	r3, [r3, #0]
 80109e0:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 80109e2:	8bfb      	ldrh	r3, [r7, #30]
 80109e4:	461a      	mov	r2, r3
 80109e6:	6979      	ldr	r1, [r7, #20]
 80109e8:	69b8      	ldr	r0, [r7, #24]
 80109ea:	f001 f827 	bl	8011a3c <SCSI_UpdateBotData>
  }

  return 0;
 80109ee:	2300      	movs	r3, #0
}
 80109f0:	4618      	mov	r0, r3
 80109f2:	3720      	adds	r7, #32
 80109f4:	46bd      	mov	sp, r7
 80109f6:	bd80      	pop	{r7, pc}
 80109f8:	240000b4 	.word	0x240000b4
 80109fc:	240000bc 	.word	0x240000bc

08010a00 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8010a00:	b590      	push	{r4, r7, lr}
 8010a02:	b087      	sub	sp, #28
 8010a04:	af00      	add	r7, sp, #0
 8010a06:	60f8      	str	r0, [r7, #12]
 8010a08:	460b      	mov	r3, r1
 8010a0a:	607a      	str	r2, [r7, #4]
 8010a0c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010a14:	617b      	str	r3, [r7, #20]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8010a16:	68fb      	ldr	r3, [r7, #12]
 8010a18:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010a1c:	685c      	ldr	r4, [r3, #4]
 8010a1e:	697a      	ldr	r2, [r7, #20]
 8010a20:	f248 0368 	movw	r3, #32872	; 0x8068
 8010a24:	4413      	add	r3, r2
 8010a26:	6979      	ldr	r1, [r7, #20]
 8010a28:	f248 0264 	movw	r2, #32868	; 0x8064
 8010a2c:	440a      	add	r2, r1
 8010a2e:	7af8      	ldrb	r0, [r7, #11]
 8010a30:	4619      	mov	r1, r3
 8010a32:	47a0      	blx	r4
 8010a34:	4603      	mov	r3, r0
 8010a36:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8010a38:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d106      	bne.n	8010a4e <SCSI_ReadCapacity10+0x4e>
 8010a40:	697a      	ldr	r2, [r7, #20]
 8010a42:	f248 0362 	movw	r3, #32866	; 0x8062
 8010a46:	4413      	add	r3, r2
 8010a48:	781b      	ldrb	r3, [r3, #0]
 8010a4a:	2b02      	cmp	r3, #2
 8010a4c:	d108      	bne.n	8010a60 <SCSI_ReadCapacity10+0x60>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8010a4e:	7af9      	ldrb	r1, [r7, #11]
 8010a50:	233a      	movs	r3, #58	; 0x3a
 8010a52:	2202      	movs	r2, #2
 8010a54:	68f8      	ldr	r0, [r7, #12]
 8010a56:	f000 fa63 	bl	8010f20 <SCSI_SenseCode>
    return -1;
 8010a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8010a5e:	e04f      	b.n	8010b00 <SCSI_ReadCapacity10+0x100>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8010a60:	697a      	ldr	r2, [r7, #20]
 8010a62:	f248 0368 	movw	r3, #32872	; 0x8068
 8010a66:	4413      	add	r3, r2
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	3b01      	subs	r3, #1
 8010a6c:	0e1b      	lsrs	r3, r3, #24
 8010a6e:	b2da      	uxtb	r2, r3
 8010a70:	697b      	ldr	r3, [r7, #20]
 8010a72:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8010a74:	697a      	ldr	r2, [r7, #20]
 8010a76:	f248 0368 	movw	r3, #32872	; 0x8068
 8010a7a:	4413      	add	r3, r2
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	3b01      	subs	r3, #1
 8010a80:	0c1b      	lsrs	r3, r3, #16
 8010a82:	b2da      	uxtb	r2, r3
 8010a84:	697b      	ldr	r3, [r7, #20]
 8010a86:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8010a88:	697a      	ldr	r2, [r7, #20]
 8010a8a:	f248 0368 	movw	r3, #32872	; 0x8068
 8010a8e:	4413      	add	r3, r2
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	3b01      	subs	r3, #1
 8010a94:	0a1b      	lsrs	r3, r3, #8
 8010a96:	b2da      	uxtb	r2, r3
 8010a98:	697b      	ldr	r3, [r7, #20]
 8010a9a:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8010a9c:	697a      	ldr	r2, [r7, #20]
 8010a9e:	f248 0368 	movw	r3, #32872	; 0x8068
 8010aa2:	4413      	add	r3, r2
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	b2db      	uxtb	r3, r3
 8010aa8:	3b01      	subs	r3, #1
 8010aaa:	b2da      	uxtb	r2, r3
 8010aac:	697b      	ldr	r3, [r7, #20]
 8010aae:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8010ab0:	697a      	ldr	r2, [r7, #20]
 8010ab2:	f248 0364 	movw	r3, #32868	; 0x8064
 8010ab6:	4413      	add	r3, r2
 8010ab8:	881b      	ldrh	r3, [r3, #0]
 8010aba:	161b      	asrs	r3, r3, #24
 8010abc:	b2da      	uxtb	r2, r3
 8010abe:	697b      	ldr	r3, [r7, #20]
 8010ac0:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8010ac2:	697a      	ldr	r2, [r7, #20]
 8010ac4:	f248 0364 	movw	r3, #32868	; 0x8064
 8010ac8:	4413      	add	r3, r2
 8010aca:	881b      	ldrh	r3, [r3, #0]
 8010acc:	141b      	asrs	r3, r3, #16
 8010ace:	b2da      	uxtb	r2, r3
 8010ad0:	697b      	ldr	r3, [r7, #20]
 8010ad2:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8010ad4:	697a      	ldr	r2, [r7, #20]
 8010ad6:	f248 0364 	movw	r3, #32868	; 0x8064
 8010ada:	4413      	add	r3, r2
 8010adc:	881b      	ldrh	r3, [r3, #0]
 8010ade:	0a1b      	lsrs	r3, r3, #8
 8010ae0:	b29b      	uxth	r3, r3
 8010ae2:	b2da      	uxtb	r2, r3
 8010ae4:	697b      	ldr	r3, [r7, #20]
 8010ae6:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8010ae8:	697a      	ldr	r2, [r7, #20]
 8010aea:	f248 0364 	movw	r3, #32868	; 0x8064
 8010aee:	4413      	add	r3, r2
 8010af0:	881b      	ldrh	r3, [r3, #0]
 8010af2:	b2da      	uxtb	r2, r3
 8010af4:	697b      	ldr	r3, [r7, #20]
 8010af6:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8010af8:	697b      	ldr	r3, [r7, #20]
 8010afa:	2208      	movs	r2, #8
 8010afc:	60da      	str	r2, [r3, #12]

  return 0;
 8010afe:	2300      	movs	r3, #0

}
 8010b00:	4618      	mov	r0, r3
 8010b02:	371c      	adds	r7, #28
 8010b04:	46bd      	mov	sp, r7
 8010b06:	bd90      	pop	{r4, r7, pc}

08010b08 <SCSI_ReadCapacity16>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8010b08:	b590      	push	{r4, r7, lr}
 8010b0a:	b089      	sub	sp, #36	; 0x24
 8010b0c:	af00      	add	r7, sp, #0
 8010b0e:	60f8      	str	r0, [r7, #12]
 8010b10:	460b      	mov	r3, r1
 8010b12:	607a      	str	r2, [r7, #4]
 8010b14:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010b16:	68fb      	ldr	r3, [r7, #12]
 8010b18:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010b1c:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8010b1e:	68fb      	ldr	r3, [r7, #12]
 8010b20:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010b24:	685c      	ldr	r4, [r3, #4]
 8010b26:	69ba      	ldr	r2, [r7, #24]
 8010b28:	f248 0368 	movw	r3, #32872	; 0x8068
 8010b2c:	4413      	add	r3, r2
 8010b2e:	69b9      	ldr	r1, [r7, #24]
 8010b30:	f248 0264 	movw	r2, #32868	; 0x8064
 8010b34:	440a      	add	r2, r1
 8010b36:	7af8      	ldrb	r0, [r7, #11]
 8010b38:	4619      	mov	r1, r3
 8010b3a:	47a0      	blx	r4
 8010b3c:	4603      	mov	r3, r0
 8010b3e:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8010b40:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d106      	bne.n	8010b56 <SCSI_ReadCapacity16+0x4e>
 8010b48:	69ba      	ldr	r2, [r7, #24]
 8010b4a:	f248 0362 	movw	r3, #32866	; 0x8062
 8010b4e:	4413      	add	r3, r2
 8010b50:	781b      	ldrb	r3, [r3, #0]
 8010b52:	2b02      	cmp	r3, #2
 8010b54:	d108      	bne.n	8010b68 <SCSI_ReadCapacity16+0x60>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8010b56:	7af9      	ldrb	r1, [r7, #11]
 8010b58:	233a      	movs	r3, #58	; 0x3a
 8010b5a:	2202      	movs	r2, #2
 8010b5c:	68f8      	ldr	r0, [r7, #12]
 8010b5e:	f000 f9df 	bl	8010f20 <SCSI_SenseCode>
    return -1;
 8010b62:	f04f 33ff 	mov.w	r3, #4294967295
 8010b66:	e084      	b.n	8010c72 <SCSI_ReadCapacity16+0x16a>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	330a      	adds	r3, #10
 8010b6c:	781b      	ldrb	r3, [r3, #0]
 8010b6e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	330b      	adds	r3, #11
 8010b74:	781b      	ldrb	r3, [r3, #0]
 8010b76:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8010b78:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	330c      	adds	r3, #12
 8010b7e:	781b      	ldrb	r3, [r3, #0]
 8010b80:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8010b82:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 8010b84:	687a      	ldr	r2, [r7, #4]
 8010b86:	320d      	adds	r2, #13
 8010b88:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8010b8a:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8010b8c:	69bb      	ldr	r3, [r7, #24]
 8010b8e:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8010b90:	2300      	movs	r3, #0
 8010b92:	77fb      	strb	r3, [r7, #31]
 8010b94:	e007      	b.n	8010ba6 <SCSI_ReadCapacity16+0x9e>
  {
    hmsc->bot_data[idx] = 0U;
 8010b96:	7ffb      	ldrb	r3, [r7, #31]
 8010b98:	69ba      	ldr	r2, [r7, #24]
 8010b9a:	4413      	add	r3, r2
 8010b9c:	2200      	movs	r2, #0
 8010b9e:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8010ba0:	7ffb      	ldrb	r3, [r7, #31]
 8010ba2:	3301      	adds	r3, #1
 8010ba4:	77fb      	strb	r3, [r7, #31]
 8010ba6:	7ffa      	ldrb	r2, [r7, #31]
 8010ba8:	69bb      	ldr	r3, [r7, #24]
 8010baa:	68db      	ldr	r3, [r3, #12]
 8010bac:	429a      	cmp	r2, r3
 8010bae:	d3f2      	bcc.n	8010b96 <SCSI_ReadCapacity16+0x8e>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8010bb0:	69ba      	ldr	r2, [r7, #24]
 8010bb2:	f248 0368 	movw	r3, #32872	; 0x8068
 8010bb6:	4413      	add	r3, r2
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	3b01      	subs	r3, #1
 8010bbc:	0e1b      	lsrs	r3, r3, #24
 8010bbe:	b2da      	uxtb	r2, r3
 8010bc0:	69bb      	ldr	r3, [r7, #24]
 8010bc2:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8010bc4:	69ba      	ldr	r2, [r7, #24]
 8010bc6:	f248 0368 	movw	r3, #32872	; 0x8068
 8010bca:	4413      	add	r3, r2
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	3b01      	subs	r3, #1
 8010bd0:	0c1b      	lsrs	r3, r3, #16
 8010bd2:	b2da      	uxtb	r2, r3
 8010bd4:	69bb      	ldr	r3, [r7, #24]
 8010bd6:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8010bd8:	69ba      	ldr	r2, [r7, #24]
 8010bda:	f248 0368 	movw	r3, #32872	; 0x8068
 8010bde:	4413      	add	r3, r2
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	3b01      	subs	r3, #1
 8010be4:	0a1b      	lsrs	r3, r3, #8
 8010be6:	b2da      	uxtb	r2, r3
 8010be8:	69bb      	ldr	r3, [r7, #24]
 8010bea:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8010bec:	69ba      	ldr	r2, [r7, #24]
 8010bee:	f248 0368 	movw	r3, #32872	; 0x8068
 8010bf2:	4413      	add	r3, r2
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	b2db      	uxtb	r3, r3
 8010bf8:	3b01      	subs	r3, #1
 8010bfa:	b2da      	uxtb	r2, r3
 8010bfc:	69bb      	ldr	r3, [r7, #24]
 8010bfe:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8010c00:	69ba      	ldr	r2, [r7, #24]
 8010c02:	f248 0364 	movw	r3, #32868	; 0x8064
 8010c06:	4413      	add	r3, r2
 8010c08:	881b      	ldrh	r3, [r3, #0]
 8010c0a:	161b      	asrs	r3, r3, #24
 8010c0c:	b2da      	uxtb	r2, r3
 8010c0e:	69bb      	ldr	r3, [r7, #24]
 8010c10:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8010c12:	69ba      	ldr	r2, [r7, #24]
 8010c14:	f248 0364 	movw	r3, #32868	; 0x8064
 8010c18:	4413      	add	r3, r2
 8010c1a:	881b      	ldrh	r3, [r3, #0]
 8010c1c:	141b      	asrs	r3, r3, #16
 8010c1e:	b2da      	uxtb	r2, r3
 8010c20:	69bb      	ldr	r3, [r7, #24]
 8010c22:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8010c24:	69ba      	ldr	r2, [r7, #24]
 8010c26:	f248 0364 	movw	r3, #32868	; 0x8064
 8010c2a:	4413      	add	r3, r2
 8010c2c:	881b      	ldrh	r3, [r3, #0]
 8010c2e:	0a1b      	lsrs	r3, r3, #8
 8010c30:	b29b      	uxth	r3, r3
 8010c32:	b2da      	uxtb	r2, r3
 8010c34:	69bb      	ldr	r3, [r7, #24]
 8010c36:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8010c38:	69ba      	ldr	r2, [r7, #24]
 8010c3a:	f248 0364 	movw	r3, #32868	; 0x8064
 8010c3e:	4413      	add	r3, r2
 8010c40:	881b      	ldrh	r3, [r3, #0]
 8010c42:	b2da      	uxtb	r2, r3
 8010c44:	69bb      	ldr	r3, [r7, #24]
 8010c46:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	330a      	adds	r3, #10
 8010c4c:	781b      	ldrb	r3, [r3, #0]
 8010c4e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	330b      	adds	r3, #11
 8010c54:	781b      	ldrb	r3, [r3, #0]
 8010c56:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8010c58:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	330c      	adds	r3, #12
 8010c5e:	781b      	ldrb	r3, [r3, #0]
 8010c60:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8010c62:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 8010c64:	687a      	ldr	r2, [r7, #4]
 8010c66:	320d      	adds	r2, #13
 8010c68:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8010c6a:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8010c6c:	69bb      	ldr	r3, [r7, #24]
 8010c6e:	60da      	str	r2, [r3, #12]

  return 0;
 8010c70:	2300      	movs	r3, #0
}
 8010c72:	4618      	mov	r0, r3
 8010c74:	3724      	adds	r7, #36	; 0x24
 8010c76:	46bd      	mov	sp, r7
 8010c78:	bd90      	pop	{r4, r7, pc}

08010c7a <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8010c7a:	b580      	push	{r7, lr}
 8010c7c:	b088      	sub	sp, #32
 8010c7e:	af00      	add	r7, sp, #0
 8010c80:	60f8      	str	r0, [r7, #12]
 8010c82:	460b      	mov	r3, r1
 8010c84:	607a      	str	r2, [r7, #4]
 8010c86:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010c88:	68fb      	ldr	r3, [r7, #12]
 8010c8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010c8e:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 8010c90:	68fb      	ldr	r3, [r7, #12]
 8010c92:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010c96:	685b      	ldr	r3, [r3, #4]
 8010c98:	f107 0214 	add.w	r2, r7, #20
 8010c9c:	f107 0110 	add.w	r1, r7, #16
 8010ca0:	7af8      	ldrb	r0, [r7, #11]
 8010ca2:	4798      	blx	r3
 8010ca4:	4603      	mov	r3, r0
 8010ca6:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8010ca8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d106      	bne.n	8010cbe <SCSI_ReadFormatCapacity+0x44>
 8010cb0:	69ba      	ldr	r2, [r7, #24]
 8010cb2:	f248 0362 	movw	r3, #32866	; 0x8062
 8010cb6:	4413      	add	r3, r2
 8010cb8:	781b      	ldrb	r3, [r3, #0]
 8010cba:	2b02      	cmp	r3, #2
 8010cbc:	d108      	bne.n	8010cd0 <SCSI_ReadFormatCapacity+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8010cbe:	7af9      	ldrb	r1, [r7, #11]
 8010cc0:	233a      	movs	r3, #58	; 0x3a
 8010cc2:	2202      	movs	r2, #2
 8010cc4:	68f8      	ldr	r0, [r7, #12]
 8010cc6:	f000 f92b 	bl	8010f20 <SCSI_SenseCode>
    return -1;
 8010cca:	f04f 33ff 	mov.w	r3, #4294967295
 8010cce:	e03e      	b.n	8010d4e <SCSI_ReadFormatCapacity+0xd4>
  }

  for (i = 0U; i < 12U ; i++)
 8010cd0:	2300      	movs	r3, #0
 8010cd2:	83fb      	strh	r3, [r7, #30]
 8010cd4:	e007      	b.n	8010ce6 <SCSI_ReadFormatCapacity+0x6c>
  {
    hmsc->bot_data[i] = 0U;
 8010cd6:	8bfb      	ldrh	r3, [r7, #30]
 8010cd8:	69ba      	ldr	r2, [r7, #24]
 8010cda:	4413      	add	r3, r2
 8010cdc:	2200      	movs	r2, #0
 8010cde:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8010ce0:	8bfb      	ldrh	r3, [r7, #30]
 8010ce2:	3301      	adds	r3, #1
 8010ce4:	83fb      	strh	r3, [r7, #30]
 8010ce6:	8bfb      	ldrh	r3, [r7, #30]
 8010ce8:	2b0b      	cmp	r3, #11
 8010cea:	d9f4      	bls.n	8010cd6 <SCSI_ReadFormatCapacity+0x5c>
  }

  hmsc->bot_data[3] = 0x08U;
 8010cec:	69bb      	ldr	r3, [r7, #24]
 8010cee:	2208      	movs	r2, #8
 8010cf0:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8010cf2:	693b      	ldr	r3, [r7, #16]
 8010cf4:	3b01      	subs	r3, #1
 8010cf6:	0e1b      	lsrs	r3, r3, #24
 8010cf8:	b2da      	uxtb	r2, r3
 8010cfa:	69bb      	ldr	r3, [r7, #24]
 8010cfc:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8010cfe:	693b      	ldr	r3, [r7, #16]
 8010d00:	3b01      	subs	r3, #1
 8010d02:	0c1b      	lsrs	r3, r3, #16
 8010d04:	b2da      	uxtb	r2, r3
 8010d06:	69bb      	ldr	r3, [r7, #24]
 8010d08:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8010d0a:	693b      	ldr	r3, [r7, #16]
 8010d0c:	3b01      	subs	r3, #1
 8010d0e:	0a1b      	lsrs	r3, r3, #8
 8010d10:	b2da      	uxtb	r2, r3
 8010d12:	69bb      	ldr	r3, [r7, #24]
 8010d14:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8010d16:	693b      	ldr	r3, [r7, #16]
 8010d18:	b2db      	uxtb	r3, r3
 8010d1a:	3b01      	subs	r3, #1
 8010d1c:	b2da      	uxtb	r2, r3
 8010d1e:	69bb      	ldr	r3, [r7, #24]
 8010d20:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8010d22:	69bb      	ldr	r3, [r7, #24]
 8010d24:	2202      	movs	r2, #2
 8010d26:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8010d28:	8abb      	ldrh	r3, [r7, #20]
 8010d2a:	141b      	asrs	r3, r3, #16
 8010d2c:	b2da      	uxtb	r2, r3
 8010d2e:	69bb      	ldr	r3, [r7, #24]
 8010d30:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8010d32:	8abb      	ldrh	r3, [r7, #20]
 8010d34:	0a1b      	lsrs	r3, r3, #8
 8010d36:	b29b      	uxth	r3, r3
 8010d38:	b2da      	uxtb	r2, r3
 8010d3a:	69bb      	ldr	r3, [r7, #24]
 8010d3c:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8010d3e:	8abb      	ldrh	r3, [r7, #20]
 8010d40:	b2da      	uxtb	r2, r3
 8010d42:	69bb      	ldr	r3, [r7, #24]
 8010d44:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8010d46:	69bb      	ldr	r3, [r7, #24]
 8010d48:	220c      	movs	r2, #12
 8010d4a:	60da      	str	r2, [r3, #12]

  return 0;
 8010d4c:	2300      	movs	r3, #0
}
 8010d4e:	4618      	mov	r0, r3
 8010d50:	3720      	adds	r7, #32
 8010d52:	46bd      	mov	sp, r7
 8010d54:	bd80      	pop	{r7, pc}
	...

08010d58 <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8010d58:	b580      	push	{r7, lr}
 8010d5a:	b086      	sub	sp, #24
 8010d5c:	af00      	add	r7, sp, #0
 8010d5e:	60f8      	str	r0, [r7, #12]
 8010d60:	460b      	mov	r3, r1
 8010d62:	607a      	str	r2, [r7, #4]
 8010d64:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010d66:	68fb      	ldr	r3, [r7, #12]
 8010d68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010d6c:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8010d6e:	2317      	movs	r3, #23
 8010d70:	82fb      	strh	r3, [r7, #22]

  if (params[4] <= len)
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	3304      	adds	r3, #4
 8010d76:	781b      	ldrb	r3, [r3, #0]
 8010d78:	b29b      	uxth	r3, r3
 8010d7a:	8afa      	ldrh	r2, [r7, #22]
 8010d7c:	429a      	cmp	r2, r3
 8010d7e:	d303      	bcc.n	8010d88 <SCSI_ModeSense6+0x30>
  {
    len = params[4];
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	3304      	adds	r3, #4
 8010d84:	781b      	ldrb	r3, [r3, #0]
 8010d86:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8010d88:	8afb      	ldrh	r3, [r7, #22]
 8010d8a:	461a      	mov	r2, r3
 8010d8c:	4904      	ldr	r1, [pc, #16]	; (8010da0 <SCSI_ModeSense6+0x48>)
 8010d8e:	6938      	ldr	r0, [r7, #16]
 8010d90:	f000 fe54 	bl	8011a3c <SCSI_UpdateBotData>

  return 0;
 8010d94:	2300      	movs	r3, #0
}
 8010d96:	4618      	mov	r0, r3
 8010d98:	3718      	adds	r7, #24
 8010d9a:	46bd      	mov	sp, r7
 8010d9c:	bd80      	pop	{r7, pc}
 8010d9e:	bf00      	nop
 8010da0:	240000c4 	.word	0x240000c4

08010da4 <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8010da4:	b580      	push	{r7, lr}
 8010da6:	b086      	sub	sp, #24
 8010da8:	af00      	add	r7, sp, #0
 8010daa:	60f8      	str	r0, [r7, #12]
 8010dac:	460b      	mov	r3, r1
 8010dae:	607a      	str	r2, [r7, #4]
 8010db0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010db2:	68fb      	ldr	r3, [r7, #12]
 8010db4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010db8:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 8010dba:	231b      	movs	r3, #27
 8010dbc:	82fb      	strh	r3, [r7, #22]

  if (params[8] <= len)
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	3308      	adds	r3, #8
 8010dc2:	781b      	ldrb	r3, [r3, #0]
 8010dc4:	b29b      	uxth	r3, r3
 8010dc6:	8afa      	ldrh	r2, [r7, #22]
 8010dc8:	429a      	cmp	r2, r3
 8010dca:	d303      	bcc.n	8010dd4 <SCSI_ModeSense10+0x30>
  {
    len = params[8];
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	3308      	adds	r3, #8
 8010dd0:	781b      	ldrb	r3, [r3, #0]
 8010dd2:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8010dd4:	8afb      	ldrh	r3, [r7, #22]
 8010dd6:	461a      	mov	r2, r3
 8010dd8:	4904      	ldr	r1, [pc, #16]	; (8010dec <SCSI_ModeSense10+0x48>)
 8010dda:	6938      	ldr	r0, [r7, #16]
 8010ddc:	f000 fe2e 	bl	8011a3c <SCSI_UpdateBotData>

  return 0;
 8010de0:	2300      	movs	r3, #0
}
 8010de2:	4618      	mov	r0, r3
 8010de4:	3718      	adds	r7, #24
 8010de6:	46bd      	mov	sp, r7
 8010de8:	bd80      	pop	{r7, pc}
 8010dea:	bf00      	nop
 8010dec:	240000dc 	.word	0x240000dc

08010df0 <SCSI_RequestSense>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8010df0:	b580      	push	{r7, lr}
 8010df2:	b086      	sub	sp, #24
 8010df4:	af00      	add	r7, sp, #0
 8010df6:	60f8      	str	r0, [r7, #12]
 8010df8:	460b      	mov	r3, r1
 8010dfa:	607a      	str	r2, [r7, #4]
 8010dfc:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010dfe:	68fb      	ldr	r3, [r7, #12]
 8010e00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010e04:	613b      	str	r3, [r7, #16]

  if (hmsc->cbw.dDataLength == 0U)
 8010e06:	693a      	ldr	r2, [r7, #16]
 8010e08:	f248 0318 	movw	r3, #32792	; 0x8018
 8010e0c:	4413      	add	r3, r2
 8010e0e:	681b      	ldr	r3, [r3, #0]
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d10c      	bne.n	8010e2e <SCSI_RequestSense+0x3e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8010e14:	693a      	ldr	r2, [r7, #16]
 8010e16:	f248 031d 	movw	r3, #32797	; 0x801d
 8010e1a:	4413      	add	r3, r2
 8010e1c:	7819      	ldrb	r1, [r3, #0]
 8010e1e:	2320      	movs	r3, #32
 8010e20:	2205      	movs	r2, #5
 8010e22:	68f8      	ldr	r0, [r7, #12]
 8010e24:	f000 f87c 	bl	8010f20 <SCSI_SenseCode>
    return -1;
 8010e28:	f04f 33ff 	mov.w	r3, #4294967295
 8010e2c:	e074      	b.n	8010f18 <SCSI_RequestSense+0x128>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8010e2e:	2300      	movs	r3, #0
 8010e30:	75fb      	strb	r3, [r7, #23]
 8010e32:	e007      	b.n	8010e44 <SCSI_RequestSense+0x54>
  {
    hmsc->bot_data[i] = 0U;
 8010e34:	7dfb      	ldrb	r3, [r7, #23]
 8010e36:	693a      	ldr	r2, [r7, #16]
 8010e38:	4413      	add	r3, r2
 8010e3a:	2200      	movs	r2, #0
 8010e3c:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8010e3e:	7dfb      	ldrb	r3, [r7, #23]
 8010e40:	3301      	adds	r3, #1
 8010e42:	75fb      	strb	r3, [r7, #23]
 8010e44:	7dfb      	ldrb	r3, [r7, #23]
 8010e46:	2b11      	cmp	r3, #17
 8010e48:	d9f4      	bls.n	8010e34 <SCSI_RequestSense+0x44>
  }

  hmsc->bot_data[0] = 0x70U;
 8010e4a:	693b      	ldr	r3, [r7, #16]
 8010e4c:	2270      	movs	r2, #112	; 0x70
 8010e4e:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8010e50:	693b      	ldr	r3, [r7, #16]
 8010e52:	220c      	movs	r2, #12
 8010e54:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8010e56:	693a      	ldr	r2, [r7, #16]
 8010e58:	f248 0360 	movw	r3, #32864	; 0x8060
 8010e5c:	4413      	add	r3, r2
 8010e5e:	781a      	ldrb	r2, [r3, #0]
 8010e60:	6939      	ldr	r1, [r7, #16]
 8010e62:	f248 0361 	movw	r3, #32865	; 0x8061
 8010e66:	440b      	add	r3, r1
 8010e68:	781b      	ldrb	r3, [r3, #0]
 8010e6a:	429a      	cmp	r2, r3
 8010e6c:	d045      	beq.n	8010efa <SCSI_RequestSense+0x10a>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8010e6e:	693a      	ldr	r2, [r7, #16]
 8010e70:	f248 0360 	movw	r3, #32864	; 0x8060
 8010e74:	4413      	add	r3, r2
 8010e76:	781b      	ldrb	r3, [r3, #0]
 8010e78:	4619      	mov	r1, r3
 8010e7a:	693a      	ldr	r2, [r7, #16]
 8010e7c:	f241 0308 	movw	r3, #4104	; 0x1008
 8010e80:	440b      	add	r3, r1
 8010e82:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 8010e86:	693b      	ldr	r3, [r7, #16]
 8010e88:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8010e8a:	693a      	ldr	r2, [r7, #16]
 8010e8c:	f248 0360 	movw	r3, #32864	; 0x8060
 8010e90:	4413      	add	r3, r2
 8010e92:	781b      	ldrb	r3, [r3, #0]
 8010e94:	4619      	mov	r1, r3
 8010e96:	693a      	ldr	r2, [r7, #16]
 8010e98:	f241 0308 	movw	r3, #4104	; 0x1008
 8010e9c:	440b      	add	r3, r1
 8010e9e:	00db      	lsls	r3, r3, #3
 8010ea0:	4413      	add	r3, r2
 8010ea2:	791a      	ldrb	r2, [r3, #4]
 8010ea4:	693b      	ldr	r3, [r7, #16]
 8010ea6:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8010ea8:	693a      	ldr	r2, [r7, #16]
 8010eaa:	f248 0360 	movw	r3, #32864	; 0x8060
 8010eae:	4413      	add	r3, r2
 8010eb0:	781b      	ldrb	r3, [r3, #0]
 8010eb2:	4619      	mov	r1, r3
 8010eb4:	693a      	ldr	r2, [r7, #16]
 8010eb6:	f241 0308 	movw	r3, #4104	; 0x1008
 8010eba:	440b      	add	r3, r1
 8010ebc:	00db      	lsls	r3, r3, #3
 8010ebe:	4413      	add	r3, r2
 8010ec0:	795a      	ldrb	r2, [r3, #5]
 8010ec2:	693b      	ldr	r3, [r7, #16]
 8010ec4:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 8010ec6:	693a      	ldr	r2, [r7, #16]
 8010ec8:	f248 0360 	movw	r3, #32864	; 0x8060
 8010ecc:	4413      	add	r3, r2
 8010ece:	781b      	ldrb	r3, [r3, #0]
 8010ed0:	3301      	adds	r3, #1
 8010ed2:	b2d9      	uxtb	r1, r3
 8010ed4:	693a      	ldr	r2, [r7, #16]
 8010ed6:	f248 0360 	movw	r3, #32864	; 0x8060
 8010eda:	4413      	add	r3, r2
 8010edc:	460a      	mov	r2, r1
 8010ede:	701a      	strb	r2, [r3, #0]

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8010ee0:	693a      	ldr	r2, [r7, #16]
 8010ee2:	f248 0360 	movw	r3, #32864	; 0x8060
 8010ee6:	4413      	add	r3, r2
 8010ee8:	781b      	ldrb	r3, [r3, #0]
 8010eea:	2b04      	cmp	r3, #4
 8010eec:	d105      	bne.n	8010efa <SCSI_RequestSense+0x10a>
    {
      hmsc->scsi_sense_head = 0U;
 8010eee:	693a      	ldr	r2, [r7, #16]
 8010ef0:	f248 0360 	movw	r3, #32864	; 0x8060
 8010ef4:	4413      	add	r3, r2
 8010ef6:	2200      	movs	r2, #0
 8010ef8:	701a      	strb	r2, [r3, #0]
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8010efa:	693b      	ldr	r3, [r7, #16]
 8010efc:	2212      	movs	r2, #18
 8010efe:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	3304      	adds	r3, #4
 8010f04:	781b      	ldrb	r3, [r3, #0]
 8010f06:	2b12      	cmp	r3, #18
 8010f08:	d805      	bhi.n	8010f16 <SCSI_RequestSense+0x126>
  {
    hmsc->bot_data_length = params[4];
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	3304      	adds	r3, #4
 8010f0e:	781b      	ldrb	r3, [r3, #0]
 8010f10:	461a      	mov	r2, r3
 8010f12:	693b      	ldr	r3, [r7, #16]
 8010f14:	60da      	str	r2, [r3, #12]
  }

  return 0;
 8010f16:	2300      	movs	r3, #0
}
 8010f18:	4618      	mov	r0, r3
 8010f1a:	3718      	adds	r7, #24
 8010f1c:	46bd      	mov	sp, r7
 8010f1e:	bd80      	pop	{r7, pc}

08010f20 <SCSI_SenseCode>:
* @param  ASC: Additional Sense Code
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8010f20:	b480      	push	{r7}
 8010f22:	b085      	sub	sp, #20
 8010f24:	af00      	add	r7, sp, #0
 8010f26:	6078      	str	r0, [r7, #4]
 8010f28:	4608      	mov	r0, r1
 8010f2a:	4611      	mov	r1, r2
 8010f2c:	461a      	mov	r2, r3
 8010f2e:	4603      	mov	r3, r0
 8010f30:	70fb      	strb	r3, [r7, #3]
 8010f32:	460b      	mov	r3, r1
 8010f34:	70bb      	strb	r3, [r7, #2]
 8010f36:	4613      	mov	r3, r2
 8010f38:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010f40:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 8010f42:	68fa      	ldr	r2, [r7, #12]
 8010f44:	f248 0361 	movw	r3, #32865	; 0x8061
 8010f48:	4413      	add	r3, r2
 8010f4a:	781b      	ldrb	r3, [r3, #0]
 8010f4c:	4619      	mov	r1, r3
 8010f4e:	68fa      	ldr	r2, [r7, #12]
 8010f50:	f241 0308 	movw	r3, #4104	; 0x1008
 8010f54:	440b      	add	r3, r1
 8010f56:	78b9      	ldrb	r1, [r7, #2]
 8010f58:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8010f5c:	68fa      	ldr	r2, [r7, #12]
 8010f5e:	f248 0361 	movw	r3, #32865	; 0x8061
 8010f62:	4413      	add	r3, r2
 8010f64:	781b      	ldrb	r3, [r3, #0]
 8010f66:	4619      	mov	r1, r3
 8010f68:	68fa      	ldr	r2, [r7, #12]
 8010f6a:	f241 0308 	movw	r3, #4104	; 0x1008
 8010f6e:	440b      	add	r3, r1
 8010f70:	00db      	lsls	r3, r3, #3
 8010f72:	4413      	add	r3, r2
 8010f74:	787a      	ldrb	r2, [r7, #1]
 8010f76:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 8010f78:	68fa      	ldr	r2, [r7, #12]
 8010f7a:	f248 0361 	movw	r3, #32865	; 0x8061
 8010f7e:	4413      	add	r3, r2
 8010f80:	781b      	ldrb	r3, [r3, #0]
 8010f82:	4619      	mov	r1, r3
 8010f84:	68fa      	ldr	r2, [r7, #12]
 8010f86:	f241 0308 	movw	r3, #4104	; 0x1008
 8010f8a:	440b      	add	r3, r1
 8010f8c:	00db      	lsls	r3, r3, #3
 8010f8e:	4413      	add	r3, r2
 8010f90:	2200      	movs	r2, #0
 8010f92:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8010f94:	68fa      	ldr	r2, [r7, #12]
 8010f96:	f248 0361 	movw	r3, #32865	; 0x8061
 8010f9a:	4413      	add	r3, r2
 8010f9c:	781b      	ldrb	r3, [r3, #0]
 8010f9e:	3301      	adds	r3, #1
 8010fa0:	b2d9      	uxtb	r1, r3
 8010fa2:	68fa      	ldr	r2, [r7, #12]
 8010fa4:	f248 0361 	movw	r3, #32865	; 0x8061
 8010fa8:	4413      	add	r3, r2
 8010faa:	460a      	mov	r2, r1
 8010fac:	701a      	strb	r2, [r3, #0]

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8010fae:	68fa      	ldr	r2, [r7, #12]
 8010fb0:	f248 0361 	movw	r3, #32865	; 0x8061
 8010fb4:	4413      	add	r3, r2
 8010fb6:	781b      	ldrb	r3, [r3, #0]
 8010fb8:	2b04      	cmp	r3, #4
 8010fba:	d105      	bne.n	8010fc8 <SCSI_SenseCode+0xa8>
  {
    hmsc->scsi_sense_tail = 0U;
 8010fbc:	68fa      	ldr	r2, [r7, #12]
 8010fbe:	f248 0361 	movw	r3, #32865	; 0x8061
 8010fc2:	4413      	add	r3, r2
 8010fc4:	2200      	movs	r2, #0
 8010fc6:	701a      	strb	r2, [r3, #0]
  }
}
 8010fc8:	bf00      	nop
 8010fca:	3714      	adds	r7, #20
 8010fcc:	46bd      	mov	sp, r7
 8010fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fd2:	4770      	bx	lr

08010fd4 <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8010fd4:	b580      	push	{r7, lr}
 8010fd6:	b086      	sub	sp, #24
 8010fd8:	af00      	add	r7, sp, #0
 8010fda:	60f8      	str	r0, [r7, #12]
 8010fdc:	460b      	mov	r3, r1
 8010fde:	607a      	str	r2, [r7, #4]
 8010fe0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010fe8:	617b      	str	r3, [r7, #20]

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 8010fea:	697a      	ldr	r2, [r7, #20]
 8010fec:	f248 0362 	movw	r3, #32866	; 0x8062
 8010ff0:	4413      	add	r3, r2
 8010ff2:	781b      	ldrb	r3, [r3, #0]
 8010ff4:	2b01      	cmp	r3, #1
 8010ff6:	d10f      	bne.n	8011018 <SCSI_StartStopUnit+0x44>
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	3304      	adds	r3, #4
 8010ffc:	781b      	ldrb	r3, [r3, #0]
 8010ffe:	f003 0303 	and.w	r3, r3, #3
 8011002:	2b02      	cmp	r3, #2
 8011004:	d108      	bne.n	8011018 <SCSI_StartStopUnit+0x44>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8011006:	7af9      	ldrb	r1, [r7, #11]
 8011008:	2324      	movs	r3, #36	; 0x24
 801100a:	2205      	movs	r2, #5
 801100c:	68f8      	ldr	r0, [r7, #12]
 801100e:	f7ff ff87 	bl	8010f20 <SCSI_SenseCode>

    return -1;
 8011012:	f04f 33ff 	mov.w	r3, #4294967295
 8011016:	e02c      	b.n	8011072 <SCSI_StartStopUnit+0x9e>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	3304      	adds	r3, #4
 801101c:	781b      	ldrb	r3, [r3, #0]
 801101e:	f003 0303 	and.w	r3, r3, #3
 8011022:	2b01      	cmp	r3, #1
 8011024:	d106      	bne.n	8011034 <SCSI_StartStopUnit+0x60>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8011026:	697a      	ldr	r2, [r7, #20]
 8011028:	f248 0362 	movw	r3, #32866	; 0x8062
 801102c:	4413      	add	r3, r2
 801102e:	2200      	movs	r2, #0
 8011030:	701a      	strb	r2, [r3, #0]
 8011032:	e01a      	b.n	801106a <SCSI_StartStopUnit+0x96>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	3304      	adds	r3, #4
 8011038:	781b      	ldrb	r3, [r3, #0]
 801103a:	f003 0303 	and.w	r3, r3, #3
 801103e:	2b02      	cmp	r3, #2
 8011040:	d106      	bne.n	8011050 <SCSI_StartStopUnit+0x7c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 8011042:	697a      	ldr	r2, [r7, #20]
 8011044:	f248 0362 	movw	r3, #32866	; 0x8062
 8011048:	4413      	add	r3, r2
 801104a:	2202      	movs	r2, #2
 801104c:	701a      	strb	r2, [r3, #0]
 801104e:	e00c      	b.n	801106a <SCSI_StartStopUnit+0x96>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	3304      	adds	r3, #4
 8011054:	781b      	ldrb	r3, [r3, #0]
 8011056:	f003 0303 	and.w	r3, r3, #3
 801105a:	2b03      	cmp	r3, #3
 801105c:	d105      	bne.n	801106a <SCSI_StartStopUnit+0x96>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801105e:	697a      	ldr	r2, [r7, #20]
 8011060:	f248 0362 	movw	r3, #32866	; 0x8062
 8011064:	4413      	add	r3, r2
 8011066:	2200      	movs	r2, #0
 8011068:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 801106a:	697b      	ldr	r3, [r7, #20]
 801106c:	2200      	movs	r2, #0
 801106e:	60da      	str	r2, [r3, #12]

  return 0;
 8011070:	2300      	movs	r3, #0
}
 8011072:	4618      	mov	r0, r3
 8011074:	3718      	adds	r7, #24
 8011076:	46bd      	mov	sp, r7
 8011078:	bd80      	pop	{r7, pc}

0801107a <SCSI_AllowPreventRemovable>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801107a:	b480      	push	{r7}
 801107c:	b087      	sub	sp, #28
 801107e:	af00      	add	r7, sp, #0
 8011080:	60f8      	str	r0, [r7, #12]
 8011082:	460b      	mov	r3, r1
 8011084:	607a      	str	r2, [r7, #4]
 8011086:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801108e:	617b      	str	r3, [r7, #20]

  if (params[4] == 0U)
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	3304      	adds	r3, #4
 8011094:	781b      	ldrb	r3, [r3, #0]
 8011096:	2b00      	cmp	r3, #0
 8011098:	d106      	bne.n	80110a8 <SCSI_AllowPreventRemovable+0x2e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801109a:	697a      	ldr	r2, [r7, #20]
 801109c:	f248 0362 	movw	r3, #32866	; 0x8062
 80110a0:	4413      	add	r3, r2
 80110a2:	2200      	movs	r2, #0
 80110a4:	701a      	strb	r2, [r3, #0]
 80110a6:	e005      	b.n	80110b4 <SCSI_AllowPreventRemovable+0x3a>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 80110a8:	697a      	ldr	r2, [r7, #20]
 80110aa:	f248 0362 	movw	r3, #32866	; 0x8062
 80110ae:	4413      	add	r3, r2
 80110b0:	2201      	movs	r2, #1
 80110b2:	701a      	strb	r2, [r3, #0]
  }

  hmsc->bot_data_length = 0U;
 80110b4:	697b      	ldr	r3, [r7, #20]
 80110b6:	2200      	movs	r2, #0
 80110b8:	60da      	str	r2, [r3, #12]

  return 0;
 80110ba:	2300      	movs	r3, #0
}
 80110bc:	4618      	mov	r0, r3
 80110be:	371c      	adds	r7, #28
 80110c0:	46bd      	mov	sp, r7
 80110c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110c6:	4770      	bx	lr

080110c8 <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80110c8:	b580      	push	{r7, lr}
 80110ca:	b086      	sub	sp, #24
 80110cc:	af00      	add	r7, sp, #0
 80110ce:	60f8      	str	r0, [r7, #12]
 80110d0:	460b      	mov	r3, r1
 80110d2:	607a      	str	r2, [r7, #4]
 80110d4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80110d6:	68fb      	ldr	r3, [r7, #12]
 80110d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80110dc:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80110de:	697b      	ldr	r3, [r7, #20]
 80110e0:	7a1b      	ldrb	r3, [r3, #8]
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	f040 8094 	bne.w	8011210 <SCSI_Read10+0x148>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80110e8:	697a      	ldr	r2, [r7, #20]
 80110ea:	f248 031c 	movw	r3, #32796	; 0x801c
 80110ee:	4413      	add	r3, r2
 80110f0:	781b      	ldrb	r3, [r3, #0]
 80110f2:	b25b      	sxtb	r3, r3
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	db0c      	blt.n	8011112 <SCSI_Read10+0x4a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80110f8:	697a      	ldr	r2, [r7, #20]
 80110fa:	f248 031d 	movw	r3, #32797	; 0x801d
 80110fe:	4413      	add	r3, r2
 8011100:	7819      	ldrb	r1, [r3, #0]
 8011102:	2320      	movs	r3, #32
 8011104:	2205      	movs	r2, #5
 8011106:	68f8      	ldr	r0, [r7, #12]
 8011108:	f7ff ff0a 	bl	8010f20 <SCSI_SenseCode>
      return -1;
 801110c:	f04f 33ff 	mov.w	r3, #4294967295
 8011110:	e088      	b.n	8011224 <SCSI_Read10+0x15c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8011112:	697a      	ldr	r2, [r7, #20]
 8011114:	f248 0362 	movw	r3, #32866	; 0x8062
 8011118:	4413      	add	r3, r2
 801111a:	781b      	ldrb	r3, [r3, #0]
 801111c:	2b02      	cmp	r3, #2
 801111e:	d108      	bne.n	8011132 <SCSI_Read10+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8011120:	7af9      	ldrb	r1, [r7, #11]
 8011122:	233a      	movs	r3, #58	; 0x3a
 8011124:	2202      	movs	r2, #2
 8011126:	68f8      	ldr	r0, [r7, #12]
 8011128:	f7ff fefa 	bl	8010f20 <SCSI_SenseCode>

      return -1;
 801112c:	f04f 33ff 	mov.w	r3, #4294967295
 8011130:	e078      	b.n	8011224 <SCSI_Read10+0x15c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8011132:	68fb      	ldr	r3, [r7, #12]
 8011134:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011138:	689b      	ldr	r3, [r3, #8]
 801113a:	7afa      	ldrb	r2, [r7, #11]
 801113c:	4610      	mov	r0, r2
 801113e:	4798      	blx	r3
 8011140:	4603      	mov	r3, r0
 8011142:	2b00      	cmp	r3, #0
 8011144:	d008      	beq.n	8011158 <SCSI_Read10+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8011146:	7af9      	ldrb	r1, [r7, #11]
 8011148:	233a      	movs	r3, #58	; 0x3a
 801114a:	2202      	movs	r2, #2
 801114c:	68f8      	ldr	r0, [r7, #12]
 801114e:	f7ff fee7 	bl	8010f20 <SCSI_SenseCode>
      return -1;
 8011152:	f04f 33ff 	mov.w	r3, #4294967295
 8011156:	e065      	b.n	8011224 <SCSI_Read10+0x15c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	3302      	adds	r3, #2
 801115c:	781b      	ldrb	r3, [r3, #0]
 801115e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	3303      	adds	r3, #3
 8011164:	781b      	ldrb	r3, [r3, #0]
 8011166:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8011168:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	3304      	adds	r3, #4
 801116e:	781b      	ldrb	r3, [r3, #0]
 8011170:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8011172:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8011174:	687a      	ldr	r2, [r7, #4]
 8011176:	3205      	adds	r2, #5
 8011178:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 801117a:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801117c:	6979      	ldr	r1, [r7, #20]
 801117e:	f248 036c 	movw	r3, #32876	; 0x806c
 8011182:	440b      	add	r3, r1
 8011184:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	3307      	adds	r3, #7
 801118a:	781b      	ldrb	r3, [r3, #0]
 801118c:	021b      	lsls	r3, r3, #8
 801118e:	687a      	ldr	r2, [r7, #4]
 8011190:	3208      	adds	r2, #8
 8011192:	7812      	ldrb	r2, [r2, #0]
 8011194:	431a      	orrs	r2, r3
 8011196:	6979      	ldr	r1, [r7, #20]
 8011198:	f248 0370 	movw	r3, #32880	; 0x8070
 801119c:	440b      	add	r3, r1
 801119e:	601a      	str	r2, [r3, #0]

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80111a0:	697a      	ldr	r2, [r7, #20]
 80111a2:	f248 036c 	movw	r3, #32876	; 0x806c
 80111a6:	4413      	add	r3, r2
 80111a8:	6818      	ldr	r0, [r3, #0]
 80111aa:	697a      	ldr	r2, [r7, #20]
 80111ac:	f248 0370 	movw	r3, #32880	; 0x8070
 80111b0:	4413      	add	r3, r2
 80111b2:	681b      	ldr	r3, [r3, #0]
 80111b4:	7af9      	ldrb	r1, [r7, #11]
 80111b6:	4602      	mov	r2, r0
 80111b8:	68f8      	ldr	r0, [r7, #12]
 80111ba:	f000 faeb 	bl	8011794 <SCSI_CheckAddressRange>
 80111be:	4603      	mov	r3, r0
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	da02      	bge.n	80111ca <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80111c4:	f04f 33ff 	mov.w	r3, #4294967295
 80111c8:	e02c      	b.n	8011224 <SCSI_Read10+0x15c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80111ca:	697a      	ldr	r2, [r7, #20]
 80111cc:	f248 0318 	movw	r3, #32792	; 0x8018
 80111d0:	4413      	add	r3, r2
 80111d2:	681a      	ldr	r2, [r3, #0]
 80111d4:	6979      	ldr	r1, [r7, #20]
 80111d6:	f248 0370 	movw	r3, #32880	; 0x8070
 80111da:	440b      	add	r3, r1
 80111dc:	6819      	ldr	r1, [r3, #0]
 80111de:	6978      	ldr	r0, [r7, #20]
 80111e0:	f248 0364 	movw	r3, #32868	; 0x8064
 80111e4:	4403      	add	r3, r0
 80111e6:	881b      	ldrh	r3, [r3, #0]
 80111e8:	fb03 f301 	mul.w	r3, r3, r1
 80111ec:	429a      	cmp	r2, r3
 80111ee:	d00c      	beq.n	801120a <SCSI_Read10+0x142>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80111f0:	697a      	ldr	r2, [r7, #20]
 80111f2:	f248 031d 	movw	r3, #32797	; 0x801d
 80111f6:	4413      	add	r3, r2
 80111f8:	7819      	ldrb	r1, [r3, #0]
 80111fa:	2320      	movs	r3, #32
 80111fc:	2205      	movs	r2, #5
 80111fe:	68f8      	ldr	r0, [r7, #12]
 8011200:	f7ff fe8e 	bl	8010f20 <SCSI_SenseCode>
      return -1;
 8011204:	f04f 33ff 	mov.w	r3, #4294967295
 8011208:	e00c      	b.n	8011224 <SCSI_Read10+0x15c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 801120a:	697b      	ldr	r3, [r7, #20]
 801120c:	2202      	movs	r2, #2
 801120e:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8011210:	697b      	ldr	r3, [r7, #20]
 8011212:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8011216:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8011218:	7afb      	ldrb	r3, [r7, #11]
 801121a:	4619      	mov	r1, r3
 801121c:	68f8      	ldr	r0, [r7, #12]
 801121e:	f000 fadd 	bl	80117dc <SCSI_ProcessRead>
 8011222:	4603      	mov	r3, r0
}
 8011224:	4618      	mov	r0, r3
 8011226:	3718      	adds	r7, #24
 8011228:	46bd      	mov	sp, r7
 801122a:	bd80      	pop	{r7, pc}

0801122c <SCSI_Read12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801122c:	b580      	push	{r7, lr}
 801122e:	b086      	sub	sp, #24
 8011230:	af00      	add	r7, sp, #0
 8011232:	60f8      	str	r0, [r7, #12]
 8011234:	460b      	mov	r3, r1
 8011236:	607a      	str	r2, [r7, #4]
 8011238:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801123a:	68fb      	ldr	r3, [r7, #12]
 801123c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011240:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8011242:	697b      	ldr	r3, [r7, #20]
 8011244:	7a1b      	ldrb	r3, [r3, #8]
 8011246:	2b00      	cmp	r3, #0
 8011248:	f040 809e 	bne.w	8011388 <SCSI_Read12+0x15c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 801124c:	697a      	ldr	r2, [r7, #20]
 801124e:	f248 031c 	movw	r3, #32796	; 0x801c
 8011252:	4413      	add	r3, r2
 8011254:	781b      	ldrb	r3, [r3, #0]
 8011256:	b25b      	sxtb	r3, r3
 8011258:	2b00      	cmp	r3, #0
 801125a:	db0c      	blt.n	8011276 <SCSI_Read12+0x4a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801125c:	697a      	ldr	r2, [r7, #20]
 801125e:	f248 031d 	movw	r3, #32797	; 0x801d
 8011262:	4413      	add	r3, r2
 8011264:	7819      	ldrb	r1, [r3, #0]
 8011266:	2320      	movs	r3, #32
 8011268:	2205      	movs	r2, #5
 801126a:	68f8      	ldr	r0, [r7, #12]
 801126c:	f7ff fe58 	bl	8010f20 <SCSI_SenseCode>
      return -1;
 8011270:	f04f 33ff 	mov.w	r3, #4294967295
 8011274:	e092      	b.n	801139c <SCSI_Read12+0x170>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8011276:	697a      	ldr	r2, [r7, #20]
 8011278:	f248 0362 	movw	r3, #32866	; 0x8062
 801127c:	4413      	add	r3, r2
 801127e:	781b      	ldrb	r3, [r3, #0]
 8011280:	2b02      	cmp	r3, #2
 8011282:	d108      	bne.n	8011296 <SCSI_Read12+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8011284:	7af9      	ldrb	r1, [r7, #11]
 8011286:	233a      	movs	r3, #58	; 0x3a
 8011288:	2202      	movs	r2, #2
 801128a:	68f8      	ldr	r0, [r7, #12]
 801128c:	f7ff fe48 	bl	8010f20 <SCSI_SenseCode>
      return -1;
 8011290:	f04f 33ff 	mov.w	r3, #4294967295
 8011294:	e082      	b.n	801139c <SCSI_Read12+0x170>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8011296:	68fb      	ldr	r3, [r7, #12]
 8011298:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801129c:	689b      	ldr	r3, [r3, #8]
 801129e:	7afa      	ldrb	r2, [r7, #11]
 80112a0:	4610      	mov	r0, r2
 80112a2:	4798      	blx	r3
 80112a4:	4603      	mov	r3, r0
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d008      	beq.n	80112bc <SCSI_Read12+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80112aa:	7af9      	ldrb	r1, [r7, #11]
 80112ac:	233a      	movs	r3, #58	; 0x3a
 80112ae:	2202      	movs	r2, #2
 80112b0:	68f8      	ldr	r0, [r7, #12]
 80112b2:	f7ff fe35 	bl	8010f20 <SCSI_SenseCode>
      return -1;
 80112b6:	f04f 33ff 	mov.w	r3, #4294967295
 80112ba:	e06f      	b.n	801139c <SCSI_Read12+0x170>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	3302      	adds	r3, #2
 80112c0:	781b      	ldrb	r3, [r3, #0]
 80112c2:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	3303      	adds	r3, #3
 80112c8:	781b      	ldrb	r3, [r3, #0]
 80112ca:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80112cc:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	3304      	adds	r3, #4
 80112d2:	781b      	ldrb	r3, [r3, #0]
 80112d4:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80112d6:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80112d8:	687a      	ldr	r2, [r7, #4]
 80112da:	3205      	adds	r2, #5
 80112dc:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 80112de:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80112e0:	6979      	ldr	r1, [r7, #20]
 80112e2:	f248 036c 	movw	r3, #32876	; 0x806c
 80112e6:	440b      	add	r3, r1
 80112e8:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	3306      	adds	r3, #6
 80112ee:	781b      	ldrb	r3, [r3, #0]
 80112f0:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	3307      	adds	r3, #7
 80112f6:	781b      	ldrb	r3, [r3, #0]
 80112f8:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80112fa:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	3308      	adds	r3, #8
 8011300:	781b      	ldrb	r3, [r3, #0]
 8011302:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8011304:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8011306:	687a      	ldr	r2, [r7, #4]
 8011308:	3209      	adds	r2, #9
 801130a:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 801130c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 801130e:	6979      	ldr	r1, [r7, #20]
 8011310:	f248 0370 	movw	r3, #32880	; 0x8070
 8011314:	440b      	add	r3, r1
 8011316:	601a      	str	r2, [r3, #0]

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8011318:	697a      	ldr	r2, [r7, #20]
 801131a:	f248 036c 	movw	r3, #32876	; 0x806c
 801131e:	4413      	add	r3, r2
 8011320:	6818      	ldr	r0, [r3, #0]
 8011322:	697a      	ldr	r2, [r7, #20]
 8011324:	f248 0370 	movw	r3, #32880	; 0x8070
 8011328:	4413      	add	r3, r2
 801132a:	681b      	ldr	r3, [r3, #0]
 801132c:	7af9      	ldrb	r1, [r7, #11]
 801132e:	4602      	mov	r2, r0
 8011330:	68f8      	ldr	r0, [r7, #12]
 8011332:	f000 fa2f 	bl	8011794 <SCSI_CheckAddressRange>
 8011336:	4603      	mov	r3, r0
 8011338:	2b00      	cmp	r3, #0
 801133a:	da02      	bge.n	8011342 <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 801133c:	f04f 33ff 	mov.w	r3, #4294967295
 8011340:	e02c      	b.n	801139c <SCSI_Read12+0x170>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8011342:	697a      	ldr	r2, [r7, #20]
 8011344:	f248 0318 	movw	r3, #32792	; 0x8018
 8011348:	4413      	add	r3, r2
 801134a:	681a      	ldr	r2, [r3, #0]
 801134c:	6979      	ldr	r1, [r7, #20]
 801134e:	f248 0370 	movw	r3, #32880	; 0x8070
 8011352:	440b      	add	r3, r1
 8011354:	6819      	ldr	r1, [r3, #0]
 8011356:	6978      	ldr	r0, [r7, #20]
 8011358:	f248 0364 	movw	r3, #32868	; 0x8064
 801135c:	4403      	add	r3, r0
 801135e:	881b      	ldrh	r3, [r3, #0]
 8011360:	fb03 f301 	mul.w	r3, r3, r1
 8011364:	429a      	cmp	r2, r3
 8011366:	d00c      	beq.n	8011382 <SCSI_Read12+0x156>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8011368:	697a      	ldr	r2, [r7, #20]
 801136a:	f248 031d 	movw	r3, #32797	; 0x801d
 801136e:	4413      	add	r3, r2
 8011370:	7819      	ldrb	r1, [r3, #0]
 8011372:	2320      	movs	r3, #32
 8011374:	2205      	movs	r2, #5
 8011376:	68f8      	ldr	r0, [r7, #12]
 8011378:	f7ff fdd2 	bl	8010f20 <SCSI_SenseCode>
      return -1;
 801137c:	f04f 33ff 	mov.w	r3, #4294967295
 8011380:	e00c      	b.n	801139c <SCSI_Read12+0x170>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8011382:	697b      	ldr	r3, [r7, #20]
 8011384:	2202      	movs	r2, #2
 8011386:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8011388:	697b      	ldr	r3, [r7, #20]
 801138a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801138e:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8011390:	7afb      	ldrb	r3, [r7, #11]
 8011392:	4619      	mov	r1, r3
 8011394:	68f8      	ldr	r0, [r7, #12]
 8011396:	f000 fa21 	bl	80117dc <SCSI_ProcessRead>
 801139a:	4603      	mov	r3, r0
}
 801139c:	4618      	mov	r0, r3
 801139e:	3718      	adds	r7, #24
 80113a0:	46bd      	mov	sp, r7
 80113a2:	bd80      	pop	{r7, pc}

080113a4 <SCSI_Write10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80113a4:	b580      	push	{r7, lr}
 80113a6:	b086      	sub	sp, #24
 80113a8:	af00      	add	r7, sp, #0
 80113aa:	60f8      	str	r0, [r7, #12]
 80113ac:	460b      	mov	r3, r1
 80113ae:	607a      	str	r2, [r7, #4]
 80113b0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80113b2:	68fb      	ldr	r3, [r7, #12]
 80113b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80113b8:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80113ba:	697b      	ldr	r3, [r7, #20]
 80113bc:	7a1b      	ldrb	r3, [r3, #8]
 80113be:	2b00      	cmp	r3, #0
 80113c0:	f040 80be 	bne.w	8011540 <SCSI_Write10+0x19c>
  {
    if (hmsc->cbw.dDataLength == 0U)
 80113c4:	697a      	ldr	r2, [r7, #20]
 80113c6:	f248 0318 	movw	r3, #32792	; 0x8018
 80113ca:	4413      	add	r3, r2
 80113cc:	681b      	ldr	r3, [r3, #0]
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d10c      	bne.n	80113ec <SCSI_Write10+0x48>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80113d2:	697a      	ldr	r2, [r7, #20]
 80113d4:	f248 031d 	movw	r3, #32797	; 0x801d
 80113d8:	4413      	add	r3, r2
 80113da:	7819      	ldrb	r1, [r3, #0]
 80113dc:	2320      	movs	r3, #32
 80113de:	2205      	movs	r2, #5
 80113e0:	68f8      	ldr	r0, [r7, #12]
 80113e2:	f7ff fd9d 	bl	8010f20 <SCSI_SenseCode>
      return -1;
 80113e6:	f04f 33ff 	mov.w	r3, #4294967295
 80113ea:	e0af      	b.n	801154c <SCSI_Write10+0x1a8>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 80113ec:	697a      	ldr	r2, [r7, #20]
 80113ee:	f248 031c 	movw	r3, #32796	; 0x801c
 80113f2:	4413      	add	r3, r2
 80113f4:	781b      	ldrb	r3, [r3, #0]
 80113f6:	b25b      	sxtb	r3, r3
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	da0c      	bge.n	8011416 <SCSI_Write10+0x72>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80113fc:	697a      	ldr	r2, [r7, #20]
 80113fe:	f248 031d 	movw	r3, #32797	; 0x801d
 8011402:	4413      	add	r3, r2
 8011404:	7819      	ldrb	r1, [r3, #0]
 8011406:	2320      	movs	r3, #32
 8011408:	2205      	movs	r2, #5
 801140a:	68f8      	ldr	r0, [r7, #12]
 801140c:	f7ff fd88 	bl	8010f20 <SCSI_SenseCode>
      return -1;
 8011410:	f04f 33ff 	mov.w	r3, #4294967295
 8011414:	e09a      	b.n	801154c <SCSI_Write10+0x1a8>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8011416:	68fb      	ldr	r3, [r7, #12]
 8011418:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801141c:	689b      	ldr	r3, [r3, #8]
 801141e:	7afa      	ldrb	r2, [r7, #11]
 8011420:	4610      	mov	r0, r2
 8011422:	4798      	blx	r3
 8011424:	4603      	mov	r3, r0
 8011426:	2b00      	cmp	r3, #0
 8011428:	d008      	beq.n	801143c <SCSI_Write10+0x98>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801142a:	7af9      	ldrb	r1, [r7, #11]
 801142c:	233a      	movs	r3, #58	; 0x3a
 801142e:	2202      	movs	r2, #2
 8011430:	68f8      	ldr	r0, [r7, #12]
 8011432:	f7ff fd75 	bl	8010f20 <SCSI_SenseCode>
      return -1;
 8011436:	f04f 33ff 	mov.w	r3, #4294967295
 801143a:	e087      	b.n	801154c <SCSI_Write10+0x1a8>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 801143c:	68fb      	ldr	r3, [r7, #12]
 801143e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011442:	68db      	ldr	r3, [r3, #12]
 8011444:	7afa      	ldrb	r2, [r7, #11]
 8011446:	4610      	mov	r0, r2
 8011448:	4798      	blx	r3
 801144a:	4603      	mov	r3, r0
 801144c:	2b00      	cmp	r3, #0
 801144e:	d008      	beq.n	8011462 <SCSI_Write10+0xbe>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8011450:	7af9      	ldrb	r1, [r7, #11]
 8011452:	2327      	movs	r3, #39	; 0x27
 8011454:	2202      	movs	r2, #2
 8011456:	68f8      	ldr	r0, [r7, #12]
 8011458:	f7ff fd62 	bl	8010f20 <SCSI_SenseCode>
      return -1;
 801145c:	f04f 33ff 	mov.w	r3, #4294967295
 8011460:	e074      	b.n	801154c <SCSI_Write10+0x1a8>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	3302      	adds	r3, #2
 8011466:	781b      	ldrb	r3, [r3, #0]
 8011468:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	3303      	adds	r3, #3
 801146e:	781b      	ldrb	r3, [r3, #0]
 8011470:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8011472:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	3304      	adds	r3, #4
 8011478:	781b      	ldrb	r3, [r3, #0]
 801147a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 801147c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 801147e:	687a      	ldr	r2, [r7, #4]
 8011480:	3205      	adds	r2, #5
 8011482:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8011484:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8011486:	6979      	ldr	r1, [r7, #20]
 8011488:	f248 036c 	movw	r3, #32876	; 0x806c
 801148c:	440b      	add	r3, r1
 801148e:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	3307      	adds	r3, #7
 8011494:	781b      	ldrb	r3, [r3, #0]
 8011496:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8011498:	687a      	ldr	r2, [r7, #4]
 801149a:	3208      	adds	r2, #8
 801149c:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 801149e:	431a      	orrs	r2, r3
 80114a0:	6979      	ldr	r1, [r7, #20]
 80114a2:	f248 0370 	movw	r3, #32880	; 0x8070
 80114a6:	440b      	add	r3, r1
 80114a8:	601a      	str	r2, [r3, #0]

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80114aa:	697a      	ldr	r2, [r7, #20]
 80114ac:	f248 036c 	movw	r3, #32876	; 0x806c
 80114b0:	4413      	add	r3, r2
 80114b2:	6818      	ldr	r0, [r3, #0]
 80114b4:	697a      	ldr	r2, [r7, #20]
 80114b6:	f248 0370 	movw	r3, #32880	; 0x8070
 80114ba:	4413      	add	r3, r2
 80114bc:	681b      	ldr	r3, [r3, #0]
 80114be:	7af9      	ldrb	r1, [r7, #11]
 80114c0:	4602      	mov	r2, r0
 80114c2:	68f8      	ldr	r0, [r7, #12]
 80114c4:	f000 f966 	bl	8011794 <SCSI_CheckAddressRange>
 80114c8:	4603      	mov	r3, r0
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	da02      	bge.n	80114d4 <SCSI_Write10+0x130>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80114ce:	f04f 33ff 	mov.w	r3, #4294967295
 80114d2:	e03b      	b.n	801154c <SCSI_Write10+0x1a8>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80114d4:	697a      	ldr	r2, [r7, #20]
 80114d6:	f248 0370 	movw	r3, #32880	; 0x8070
 80114da:	4413      	add	r3, r2
 80114dc:	681a      	ldr	r2, [r3, #0]
 80114de:	6979      	ldr	r1, [r7, #20]
 80114e0:	f248 0364 	movw	r3, #32868	; 0x8064
 80114e4:	440b      	add	r3, r1
 80114e6:	881b      	ldrh	r3, [r3, #0]
 80114e8:	fb03 f302 	mul.w	r3, r3, r2
 80114ec:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 80114ee:	697a      	ldr	r2, [r7, #20]
 80114f0:	f248 0318 	movw	r3, #32792	; 0x8018
 80114f4:	4413      	add	r3, r2
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	693a      	ldr	r2, [r7, #16]
 80114fa:	429a      	cmp	r2, r3
 80114fc:	d00c      	beq.n	8011518 <SCSI_Write10+0x174>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80114fe:	697a      	ldr	r2, [r7, #20]
 8011500:	f248 031d 	movw	r3, #32797	; 0x801d
 8011504:	4413      	add	r3, r2
 8011506:	7819      	ldrb	r1, [r3, #0]
 8011508:	2320      	movs	r3, #32
 801150a:	2205      	movs	r2, #5
 801150c:	68f8      	ldr	r0, [r7, #12]
 801150e:	f7ff fd07 	bl	8010f20 <SCSI_SenseCode>
      return -1;
 8011512:	f04f 33ff 	mov.w	r3, #4294967295
 8011516:	e019      	b.n	801154c <SCSI_Write10+0x1a8>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8011518:	693b      	ldr	r3, [r7, #16]
 801151a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801151e:	bf28      	it	cs
 8011520:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8011524:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8011526:	697b      	ldr	r3, [r7, #20]
 8011528:	2201      	movs	r2, #1
 801152a:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 801152c:	697b      	ldr	r3, [r7, #20]
 801152e:	f103 0210 	add.w	r2, r3, #16
 8011532:	693b      	ldr	r3, [r7, #16]
 8011534:	2101      	movs	r1, #1
 8011536:	68f8      	ldr	r0, [r7, #12]
 8011538:	f004 fb19 	bl	8015b6e <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 801153c:	2300      	movs	r3, #0
 801153e:	e005      	b.n	801154c <SCSI_Write10+0x1a8>
    return SCSI_ProcessWrite(pdev, lun);
 8011540:	7afb      	ldrb	r3, [r7, #11]
 8011542:	4619      	mov	r1, r3
 8011544:	68f8      	ldr	r0, [r7, #12]
 8011546:	f000 f9d7 	bl	80118f8 <SCSI_ProcessWrite>
 801154a:	4603      	mov	r3, r0
}
 801154c:	4618      	mov	r0, r3
 801154e:	3718      	adds	r7, #24
 8011550:	46bd      	mov	sp, r7
 8011552:	bd80      	pop	{r7, pc}

08011554 <SCSI_Write12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011554:	b580      	push	{r7, lr}
 8011556:	b086      	sub	sp, #24
 8011558:	af00      	add	r7, sp, #0
 801155a:	60f8      	str	r0, [r7, #12]
 801155c:	460b      	mov	r3, r1
 801155e:	607a      	str	r2, [r7, #4]
 8011560:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011562:	68fb      	ldr	r3, [r7, #12]
 8011564:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011568:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 801156a:	697b      	ldr	r3, [r7, #20]
 801156c:	7a1b      	ldrb	r3, [r3, #8]
 801156e:	2b00      	cmp	r3, #0
 8011570:	f040 80ce 	bne.w	8011710 <SCSI_Write12+0x1bc>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8011574:	697a      	ldr	r2, [r7, #20]
 8011576:	f248 0318 	movw	r3, #32792	; 0x8018
 801157a:	4413      	add	r3, r2
 801157c:	681b      	ldr	r3, [r3, #0]
 801157e:	2b00      	cmp	r3, #0
 8011580:	d10c      	bne.n	801159c <SCSI_Write12+0x48>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8011582:	697a      	ldr	r2, [r7, #20]
 8011584:	f248 031d 	movw	r3, #32797	; 0x801d
 8011588:	4413      	add	r3, r2
 801158a:	7819      	ldrb	r1, [r3, #0]
 801158c:	2320      	movs	r3, #32
 801158e:	2205      	movs	r2, #5
 8011590:	68f8      	ldr	r0, [r7, #12]
 8011592:	f7ff fcc5 	bl	8010f20 <SCSI_SenseCode>
      return -1;
 8011596:	f04f 33ff 	mov.w	r3, #4294967295
 801159a:	e0bf      	b.n	801171c <SCSI_Write12+0x1c8>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 801159c:	697a      	ldr	r2, [r7, #20]
 801159e:	f248 031c 	movw	r3, #32796	; 0x801c
 80115a2:	4413      	add	r3, r2
 80115a4:	781b      	ldrb	r3, [r3, #0]
 80115a6:	b25b      	sxtb	r3, r3
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	da0c      	bge.n	80115c6 <SCSI_Write12+0x72>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80115ac:	697a      	ldr	r2, [r7, #20]
 80115ae:	f248 031d 	movw	r3, #32797	; 0x801d
 80115b2:	4413      	add	r3, r2
 80115b4:	7819      	ldrb	r1, [r3, #0]
 80115b6:	2320      	movs	r3, #32
 80115b8:	2205      	movs	r2, #5
 80115ba:	68f8      	ldr	r0, [r7, #12]
 80115bc:	f7ff fcb0 	bl	8010f20 <SCSI_SenseCode>
      return -1;
 80115c0:	f04f 33ff 	mov.w	r3, #4294967295
 80115c4:	e0aa      	b.n	801171c <SCSI_Write12+0x1c8>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80115c6:	68fb      	ldr	r3, [r7, #12]
 80115c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80115cc:	689b      	ldr	r3, [r3, #8]
 80115ce:	7afa      	ldrb	r2, [r7, #11]
 80115d0:	4610      	mov	r0, r2
 80115d2:	4798      	blx	r3
 80115d4:	4603      	mov	r3, r0
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d00b      	beq.n	80115f2 <SCSI_Write12+0x9e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80115da:	7af9      	ldrb	r1, [r7, #11]
 80115dc:	233a      	movs	r3, #58	; 0x3a
 80115de:	2202      	movs	r2, #2
 80115e0:	68f8      	ldr	r0, [r7, #12]
 80115e2:	f7ff fc9d 	bl	8010f20 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 80115e6:	697b      	ldr	r3, [r7, #20]
 80115e8:	2205      	movs	r2, #5
 80115ea:	721a      	strb	r2, [r3, #8]
      return -1;
 80115ec:	f04f 33ff 	mov.w	r3, #4294967295
 80115f0:	e094      	b.n	801171c <SCSI_Write12+0x1c8>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 80115f2:	68fb      	ldr	r3, [r7, #12]
 80115f4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80115f8:	68db      	ldr	r3, [r3, #12]
 80115fa:	7afa      	ldrb	r2, [r7, #11]
 80115fc:	4610      	mov	r0, r2
 80115fe:	4798      	blx	r3
 8011600:	4603      	mov	r3, r0
 8011602:	2b00      	cmp	r3, #0
 8011604:	d00b      	beq.n	801161e <SCSI_Write12+0xca>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8011606:	7af9      	ldrb	r1, [r7, #11]
 8011608:	2327      	movs	r3, #39	; 0x27
 801160a:	2202      	movs	r2, #2
 801160c:	68f8      	ldr	r0, [r7, #12]
 801160e:	f7ff fc87 	bl	8010f20 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8011612:	697b      	ldr	r3, [r7, #20]
 8011614:	2205      	movs	r2, #5
 8011616:	721a      	strb	r2, [r3, #8]
      return -1;
 8011618:	f04f 33ff 	mov.w	r3, #4294967295
 801161c:	e07e      	b.n	801171c <SCSI_Write12+0x1c8>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	3302      	adds	r3, #2
 8011622:	781b      	ldrb	r3, [r3, #0]
 8011624:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	3303      	adds	r3, #3
 801162a:	781b      	ldrb	r3, [r3, #0]
 801162c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801162e:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	3304      	adds	r3, #4
 8011634:	781b      	ldrb	r3, [r3, #0]
 8011636:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8011638:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 801163a:	687a      	ldr	r2, [r7, #4]
 801163c:	3205      	adds	r2, #5
 801163e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8011640:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8011642:	6979      	ldr	r1, [r7, #20]
 8011644:	f248 036c 	movw	r3, #32876	; 0x806c
 8011648:	440b      	add	r3, r1
 801164a:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	3306      	adds	r3, #6
 8011650:	781b      	ldrb	r3, [r3, #0]
 8011652:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	3307      	adds	r3, #7
 8011658:	781b      	ldrb	r3, [r3, #0]
 801165a:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 801165c:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	3308      	adds	r3, #8
 8011662:	781b      	ldrb	r3, [r3, #0]
 8011664:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8011666:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8011668:	687a      	ldr	r2, [r7, #4]
 801166a:	3209      	adds	r2, #9
 801166c:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 801166e:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8011670:	6979      	ldr	r1, [r7, #20]
 8011672:	f248 0370 	movw	r3, #32880	; 0x8070
 8011676:	440b      	add	r3, r1
 8011678:	601a      	str	r2, [r3, #0]

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 801167a:	697a      	ldr	r2, [r7, #20]
 801167c:	f248 036c 	movw	r3, #32876	; 0x806c
 8011680:	4413      	add	r3, r2
 8011682:	6818      	ldr	r0, [r3, #0]
 8011684:	697a      	ldr	r2, [r7, #20]
 8011686:	f248 0370 	movw	r3, #32880	; 0x8070
 801168a:	4413      	add	r3, r2
 801168c:	681b      	ldr	r3, [r3, #0]
 801168e:	7af9      	ldrb	r1, [r7, #11]
 8011690:	4602      	mov	r2, r0
 8011692:	68f8      	ldr	r0, [r7, #12]
 8011694:	f000 f87e 	bl	8011794 <SCSI_CheckAddressRange>
 8011698:	4603      	mov	r3, r0
 801169a:	2b00      	cmp	r3, #0
 801169c:	da02      	bge.n	80116a4 <SCSI_Write12+0x150>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 801169e:	f04f 33ff 	mov.w	r3, #4294967295
 80116a2:	e03b      	b.n	801171c <SCSI_Write12+0x1c8>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80116a4:	697a      	ldr	r2, [r7, #20]
 80116a6:	f248 0370 	movw	r3, #32880	; 0x8070
 80116aa:	4413      	add	r3, r2
 80116ac:	681a      	ldr	r2, [r3, #0]
 80116ae:	6979      	ldr	r1, [r7, #20]
 80116b0:	f248 0364 	movw	r3, #32868	; 0x8064
 80116b4:	440b      	add	r3, r1
 80116b6:	881b      	ldrh	r3, [r3, #0]
 80116b8:	fb03 f302 	mul.w	r3, r3, r2
 80116bc:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 80116be:	697a      	ldr	r2, [r7, #20]
 80116c0:	f248 0318 	movw	r3, #32792	; 0x8018
 80116c4:	4413      	add	r3, r2
 80116c6:	681b      	ldr	r3, [r3, #0]
 80116c8:	693a      	ldr	r2, [r7, #16]
 80116ca:	429a      	cmp	r2, r3
 80116cc:	d00c      	beq.n	80116e8 <SCSI_Write12+0x194>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80116ce:	697a      	ldr	r2, [r7, #20]
 80116d0:	f248 031d 	movw	r3, #32797	; 0x801d
 80116d4:	4413      	add	r3, r2
 80116d6:	7819      	ldrb	r1, [r3, #0]
 80116d8:	2320      	movs	r3, #32
 80116da:	2205      	movs	r2, #5
 80116dc:	68f8      	ldr	r0, [r7, #12]
 80116de:	f7ff fc1f 	bl	8010f20 <SCSI_SenseCode>
      return -1;
 80116e2:	f04f 33ff 	mov.w	r3, #4294967295
 80116e6:	e019      	b.n	801171c <SCSI_Write12+0x1c8>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 80116e8:	693b      	ldr	r3, [r7, #16]
 80116ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80116ee:	bf28      	it	cs
 80116f0:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 80116f4:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 80116f6:	697b      	ldr	r3, [r7, #20]
 80116f8:	2201      	movs	r2, #1
 80116fa:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 80116fc:	697b      	ldr	r3, [r7, #20]
 80116fe:	f103 0210 	add.w	r2, r3, #16
 8011702:	693b      	ldr	r3, [r7, #16]
 8011704:	2101      	movs	r1, #1
 8011706:	68f8      	ldr	r0, [r7, #12]
 8011708:	f004 fa31 	bl	8015b6e <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 801170c:	2300      	movs	r3, #0
 801170e:	e005      	b.n	801171c <SCSI_Write12+0x1c8>
    return SCSI_ProcessWrite(pdev, lun);
 8011710:	7afb      	ldrb	r3, [r7, #11]
 8011712:	4619      	mov	r1, r3
 8011714:	68f8      	ldr	r0, [r7, #12]
 8011716:	f000 f8ef 	bl	80118f8 <SCSI_ProcessWrite>
 801171a:	4603      	mov	r3, r0
}
 801171c:	4618      	mov	r0, r3
 801171e:	3718      	adds	r7, #24
 8011720:	46bd      	mov	sp, r7
 8011722:	bd80      	pop	{r7, pc}

08011724 <SCSI_Verify10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011724:	b580      	push	{r7, lr}
 8011726:	b086      	sub	sp, #24
 8011728:	af00      	add	r7, sp, #0
 801172a:	60f8      	str	r0, [r7, #12]
 801172c:	460b      	mov	r3, r1
 801172e:	607a      	str	r2, [r7, #4]
 8011730:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011738:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	3301      	adds	r3, #1
 801173e:	781b      	ldrb	r3, [r3, #0]
 8011740:	f003 0302 	and.w	r3, r3, #2
 8011744:	2b00      	cmp	r3, #0
 8011746:	d008      	beq.n	801175a <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8011748:	7af9      	ldrb	r1, [r7, #11]
 801174a:	2324      	movs	r3, #36	; 0x24
 801174c:	2205      	movs	r2, #5
 801174e:	68f8      	ldr	r0, [r7, #12]
 8011750:	f7ff fbe6 	bl	8010f20 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8011754:	f04f 33ff 	mov.w	r3, #4294967295
 8011758:	e018      	b.n	801178c <SCSI_Verify10+0x68>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 801175a:	697a      	ldr	r2, [r7, #20]
 801175c:	f248 036c 	movw	r3, #32876	; 0x806c
 8011760:	4413      	add	r3, r2
 8011762:	6818      	ldr	r0, [r3, #0]
 8011764:	697a      	ldr	r2, [r7, #20]
 8011766:	f248 0370 	movw	r3, #32880	; 0x8070
 801176a:	4413      	add	r3, r2
 801176c:	681b      	ldr	r3, [r3, #0]
 801176e:	7af9      	ldrb	r1, [r7, #11]
 8011770:	4602      	mov	r2, r0
 8011772:	68f8      	ldr	r0, [r7, #12]
 8011774:	f000 f80e 	bl	8011794 <SCSI_CheckAddressRange>
 8011778:	4603      	mov	r3, r0
 801177a:	2b00      	cmp	r3, #0
 801177c:	da02      	bge.n	8011784 <SCSI_Verify10+0x60>
  {
    return -1; /* error */
 801177e:	f04f 33ff 	mov.w	r3, #4294967295
 8011782:	e003      	b.n	801178c <SCSI_Verify10+0x68>
  }

  hmsc->bot_data_length = 0U;
 8011784:	697b      	ldr	r3, [r7, #20]
 8011786:	2200      	movs	r2, #0
 8011788:	60da      	str	r2, [r3, #12]

  return 0;
 801178a:	2300      	movs	r3, #0
}
 801178c:	4618      	mov	r0, r3
 801178e:	3718      	adds	r7, #24
 8011790:	46bd      	mov	sp, r7
 8011792:	bd80      	pop	{r7, pc}

08011794 <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8011794:	b580      	push	{r7, lr}
 8011796:	b086      	sub	sp, #24
 8011798:	af00      	add	r7, sp, #0
 801179a:	60f8      	str	r0, [r7, #12]
 801179c:	607a      	str	r2, [r7, #4]
 801179e:	603b      	str	r3, [r7, #0]
 80117a0:	460b      	mov	r3, r1
 80117a2:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80117a4:	68fb      	ldr	r3, [r7, #12]
 80117a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80117aa:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 80117ac:	687a      	ldr	r2, [r7, #4]
 80117ae:	683b      	ldr	r3, [r7, #0]
 80117b0:	441a      	add	r2, r3
 80117b2:	6979      	ldr	r1, [r7, #20]
 80117b4:	f248 0368 	movw	r3, #32872	; 0x8068
 80117b8:	440b      	add	r3, r1
 80117ba:	681b      	ldr	r3, [r3, #0]
 80117bc:	429a      	cmp	r2, r3
 80117be:	d908      	bls.n	80117d2 <SCSI_CheckAddressRange+0x3e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 80117c0:	7af9      	ldrb	r1, [r7, #11]
 80117c2:	2321      	movs	r3, #33	; 0x21
 80117c4:	2205      	movs	r2, #5
 80117c6:	68f8      	ldr	r0, [r7, #12]
 80117c8:	f7ff fbaa 	bl	8010f20 <SCSI_SenseCode>
    return -1;
 80117cc:	f04f 33ff 	mov.w	r3, #4294967295
 80117d0:	e000      	b.n	80117d4 <SCSI_CheckAddressRange+0x40>
  }

  return 0;
 80117d2:	2300      	movs	r3, #0
}
 80117d4:	4618      	mov	r0, r3
 80117d6:	3718      	adds	r7, #24
 80117d8:	46bd      	mov	sp, r7
 80117da:	bd80      	pop	{r7, pc}

080117dc <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 80117dc:	b5b0      	push	{r4, r5, r7, lr}
 80117de:	b084      	sub	sp, #16
 80117e0:	af00      	add	r7, sp, #0
 80117e2:	6078      	str	r0, [r7, #4]
 80117e4:	460b      	mov	r3, r1
 80117e6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80117ee:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80117f0:	68fa      	ldr	r2, [r7, #12]
 80117f2:	f248 0370 	movw	r3, #32880	; 0x8070
 80117f6:	4413      	add	r3, r2
 80117f8:	681a      	ldr	r2, [r3, #0]
 80117fa:	68f9      	ldr	r1, [r7, #12]
 80117fc:	f248 0364 	movw	r3, #32868	; 0x8064
 8011800:	440b      	add	r3, r1
 8011802:	881b      	ldrh	r3, [r3, #0]
 8011804:	fb03 f302 	mul.w	r3, r3, r2
 8011808:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 801180a:	68bb      	ldr	r3, [r7, #8]
 801180c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011810:	bf28      	it	cs
 8011812:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8011816:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801181e:	691c      	ldr	r4, [r3, #16]
 8011820:	68fb      	ldr	r3, [r7, #12]
 8011822:	f103 0110 	add.w	r1, r3, #16
 8011826:	68fa      	ldr	r2, [r7, #12]
 8011828:	f248 036c 	movw	r3, #32876	; 0x806c
 801182c:	4413      	add	r3, r2
 801182e:	681d      	ldr	r5, [r3, #0]
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 8011830:	68fa      	ldr	r2, [r7, #12]
 8011832:	f248 0364 	movw	r3, #32868	; 0x8064
 8011836:	4413      	add	r3, r2
 8011838:	881b      	ldrh	r3, [r3, #0]
 801183a:	461a      	mov	r2, r3
 801183c:	68bb      	ldr	r3, [r7, #8]
 801183e:	fbb3 f3f2 	udiv	r3, r3, r2
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8011842:	b29b      	uxth	r3, r3
 8011844:	78f8      	ldrb	r0, [r7, #3]
 8011846:	462a      	mov	r2, r5
 8011848:	47a0      	blx	r4
 801184a:	4603      	mov	r3, r0
 801184c:	2b00      	cmp	r3, #0
 801184e:	da08      	bge.n	8011862 <SCSI_ProcessRead+0x86>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8011850:	78f9      	ldrb	r1, [r7, #3]
 8011852:	2311      	movs	r3, #17
 8011854:	2204      	movs	r2, #4
 8011856:	6878      	ldr	r0, [r7, #4]
 8011858:	f7ff fb62 	bl	8010f20 <SCSI_SenseCode>
    return -1;
 801185c:	f04f 33ff 	mov.w	r3, #4294967295
 8011860:	e046      	b.n	80118f0 <SCSI_ProcessRead+0x114>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 8011862:	68fb      	ldr	r3, [r7, #12]
 8011864:	f103 0210 	add.w	r2, r3, #16
 8011868:	68bb      	ldr	r3, [r7, #8]
 801186a:	2181      	movs	r1, #129	; 0x81
 801186c:	6878      	ldr	r0, [r7, #4]
 801186e:	f004 f95d 	bl	8015b2c <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8011872:	68fa      	ldr	r2, [r7, #12]
 8011874:	f248 036c 	movw	r3, #32876	; 0x806c
 8011878:	4413      	add	r3, r2
 801187a:	681a      	ldr	r2, [r3, #0]
 801187c:	68f9      	ldr	r1, [r7, #12]
 801187e:	f248 0364 	movw	r3, #32868	; 0x8064
 8011882:	440b      	add	r3, r1
 8011884:	881b      	ldrh	r3, [r3, #0]
 8011886:	4619      	mov	r1, r3
 8011888:	68bb      	ldr	r3, [r7, #8]
 801188a:	fbb3 f3f1 	udiv	r3, r3, r1
 801188e:	441a      	add	r2, r3
 8011890:	68f9      	ldr	r1, [r7, #12]
 8011892:	f248 036c 	movw	r3, #32876	; 0x806c
 8011896:	440b      	add	r3, r1
 8011898:	601a      	str	r2, [r3, #0]
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 801189a:	68fa      	ldr	r2, [r7, #12]
 801189c:	f248 0370 	movw	r3, #32880	; 0x8070
 80118a0:	4413      	add	r3, r2
 80118a2:	681a      	ldr	r2, [r3, #0]
 80118a4:	68f9      	ldr	r1, [r7, #12]
 80118a6:	f248 0364 	movw	r3, #32868	; 0x8064
 80118aa:	440b      	add	r3, r1
 80118ac:	881b      	ldrh	r3, [r3, #0]
 80118ae:	4619      	mov	r1, r3
 80118b0:	68bb      	ldr	r3, [r7, #8]
 80118b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80118b6:	1ad2      	subs	r2, r2, r3
 80118b8:	68f9      	ldr	r1, [r7, #12]
 80118ba:	f248 0370 	movw	r3, #32880	; 0x8070
 80118be:	440b      	add	r3, r1
 80118c0:	601a      	str	r2, [r3, #0]

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 80118c2:	68fa      	ldr	r2, [r7, #12]
 80118c4:	f248 0338 	movw	r3, #32824	; 0x8038
 80118c8:	4413      	add	r3, r2
 80118ca:	681a      	ldr	r2, [r3, #0]
 80118cc:	68bb      	ldr	r3, [r7, #8]
 80118ce:	1ad2      	subs	r2, r2, r3
 80118d0:	68f9      	ldr	r1, [r7, #12]
 80118d2:	f248 0338 	movw	r3, #32824	; 0x8038
 80118d6:	440b      	add	r3, r1
 80118d8:	601a      	str	r2, [r3, #0]

  if (hmsc->scsi_blk_len == 0U)
 80118da:	68fa      	ldr	r2, [r7, #12]
 80118dc:	f248 0370 	movw	r3, #32880	; 0x8070
 80118e0:	4413      	add	r3, r2
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	d102      	bne.n	80118ee <SCSI_ProcessRead+0x112>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 80118e8:	68fb      	ldr	r3, [r7, #12]
 80118ea:	2203      	movs	r2, #3
 80118ec:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 80118ee:	2300      	movs	r3, #0
}
 80118f0:	4618      	mov	r0, r3
 80118f2:	3710      	adds	r7, #16
 80118f4:	46bd      	mov	sp, r7
 80118f6:	bdb0      	pop	{r4, r5, r7, pc}

080118f8 <SCSI_ProcessWrite>:
*         Handle Write Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 80118f8:	b5b0      	push	{r4, r5, r7, lr}
 80118fa:	b084      	sub	sp, #16
 80118fc:	af00      	add	r7, sp, #0
 80118fe:	6078      	str	r0, [r7, #4]
 8011900:	460b      	mov	r3, r1
 8011902:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801190a:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 801190c:	68fa      	ldr	r2, [r7, #12]
 801190e:	f248 0370 	movw	r3, #32880	; 0x8070
 8011912:	4413      	add	r3, r2
 8011914:	681a      	ldr	r2, [r3, #0]
 8011916:	68f9      	ldr	r1, [r7, #12]
 8011918:	f248 0364 	movw	r3, #32868	; 0x8064
 801191c:	440b      	add	r3, r1
 801191e:	881b      	ldrh	r3, [r3, #0]
 8011920:	fb03 f302 	mul.w	r3, r3, r2
 8011924:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 8011926:	68bb      	ldr	r3, [r7, #8]
 8011928:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801192c:	bf28      	it	cs
 801192e:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8011932:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801193a:	695c      	ldr	r4, [r3, #20]
 801193c:	68fb      	ldr	r3, [r7, #12]
 801193e:	f103 0110 	add.w	r1, r3, #16
 8011942:	68fa      	ldr	r2, [r7, #12]
 8011944:	f248 036c 	movw	r3, #32876	; 0x806c
 8011948:	4413      	add	r3, r2
 801194a:	681d      	ldr	r5, [r3, #0]
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 801194c:	68fa      	ldr	r2, [r7, #12]
 801194e:	f248 0364 	movw	r3, #32868	; 0x8064
 8011952:	4413      	add	r3, r2
 8011954:	881b      	ldrh	r3, [r3, #0]
 8011956:	461a      	mov	r2, r3
 8011958:	68bb      	ldr	r3, [r7, #8]
 801195a:	fbb3 f3f2 	udiv	r3, r3, r2
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 801195e:	b29b      	uxth	r3, r3
 8011960:	78f8      	ldrb	r0, [r7, #3]
 8011962:	462a      	mov	r2, r5
 8011964:	47a0      	blx	r4
 8011966:	4603      	mov	r3, r0
 8011968:	2b00      	cmp	r3, #0
 801196a:	da08      	bge.n	801197e <SCSI_ProcessWrite+0x86>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 801196c:	78f9      	ldrb	r1, [r7, #3]
 801196e:	2303      	movs	r3, #3
 8011970:	2204      	movs	r2, #4
 8011972:	6878      	ldr	r0, [r7, #4]
 8011974:	f7ff fad4 	bl	8010f20 <SCSI_SenseCode>
    return -1;
 8011978:	f04f 33ff 	mov.w	r3, #4294967295
 801197c:	e05a      	b.n	8011a34 <SCSI_ProcessWrite+0x13c>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 801197e:	68fa      	ldr	r2, [r7, #12]
 8011980:	f248 036c 	movw	r3, #32876	; 0x806c
 8011984:	4413      	add	r3, r2
 8011986:	681a      	ldr	r2, [r3, #0]
 8011988:	68f9      	ldr	r1, [r7, #12]
 801198a:	f248 0364 	movw	r3, #32868	; 0x8064
 801198e:	440b      	add	r3, r1
 8011990:	881b      	ldrh	r3, [r3, #0]
 8011992:	4619      	mov	r1, r3
 8011994:	68bb      	ldr	r3, [r7, #8]
 8011996:	fbb3 f3f1 	udiv	r3, r3, r1
 801199a:	441a      	add	r2, r3
 801199c:	68f9      	ldr	r1, [r7, #12]
 801199e:	f248 036c 	movw	r3, #32876	; 0x806c
 80119a2:	440b      	add	r3, r1
 80119a4:	601a      	str	r2, [r3, #0]
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 80119a6:	68fa      	ldr	r2, [r7, #12]
 80119a8:	f248 0370 	movw	r3, #32880	; 0x8070
 80119ac:	4413      	add	r3, r2
 80119ae:	681a      	ldr	r2, [r3, #0]
 80119b0:	68f9      	ldr	r1, [r7, #12]
 80119b2:	f248 0364 	movw	r3, #32868	; 0x8064
 80119b6:	440b      	add	r3, r1
 80119b8:	881b      	ldrh	r3, [r3, #0]
 80119ba:	4619      	mov	r1, r3
 80119bc:	68bb      	ldr	r3, [r7, #8]
 80119be:	fbb3 f3f1 	udiv	r3, r3, r1
 80119c2:	1ad2      	subs	r2, r2, r3
 80119c4:	68f9      	ldr	r1, [r7, #12]
 80119c6:	f248 0370 	movw	r3, #32880	; 0x8070
 80119ca:	440b      	add	r3, r1
 80119cc:	601a      	str	r2, [r3, #0]

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 80119ce:	68fa      	ldr	r2, [r7, #12]
 80119d0:	f248 0338 	movw	r3, #32824	; 0x8038
 80119d4:	4413      	add	r3, r2
 80119d6:	681a      	ldr	r2, [r3, #0]
 80119d8:	68bb      	ldr	r3, [r7, #8]
 80119da:	1ad2      	subs	r2, r2, r3
 80119dc:	68f9      	ldr	r1, [r7, #12]
 80119de:	f248 0338 	movw	r3, #32824	; 0x8038
 80119e2:	440b      	add	r3, r1
 80119e4:	601a      	str	r2, [r3, #0]

  if (hmsc->scsi_blk_len == 0U)
 80119e6:	68fa      	ldr	r2, [r7, #12]
 80119e8:	f248 0370 	movw	r3, #32880	; 0x8070
 80119ec:	4413      	add	r3, r2
 80119ee:	681b      	ldr	r3, [r3, #0]
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	d104      	bne.n	80119fe <SCSI_ProcessWrite+0x106>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80119f4:	2100      	movs	r1, #0
 80119f6:	6878      	ldr	r0, [r7, #4]
 80119f8:	f7fe fde2 	bl	80105c0 <MSC_BOT_SendCSW>
 80119fc:	e019      	b.n	8011a32 <SCSI_ProcessWrite+0x13a>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 80119fe:	68fa      	ldr	r2, [r7, #12]
 8011a00:	f248 0370 	movw	r3, #32880	; 0x8070
 8011a04:	4413      	add	r3, r2
 8011a06:	681a      	ldr	r2, [r3, #0]
 8011a08:	68f9      	ldr	r1, [r7, #12]
 8011a0a:	f248 0364 	movw	r3, #32868	; 0x8064
 8011a0e:	440b      	add	r3, r1
 8011a10:	881b      	ldrh	r3, [r3, #0]
 8011a12:	fb03 f302 	mul.w	r3, r3, r2
 8011a16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011a1a:	bf28      	it	cs
 8011a1c:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8011a20:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8011a22:	68fb      	ldr	r3, [r7, #12]
 8011a24:	f103 0210 	add.w	r2, r3, #16
 8011a28:	68bb      	ldr	r3, [r7, #8]
 8011a2a:	2101      	movs	r1, #1
 8011a2c:	6878      	ldr	r0, [r7, #4]
 8011a2e:	f004 f89e 	bl	8015b6e <USBD_LL_PrepareReceive>
  }

  return 0;
 8011a32:	2300      	movs	r3, #0
}
 8011a34:	4618      	mov	r0, r3
 8011a36:	3710      	adds	r7, #16
 8011a38:	46bd      	mov	sp, r7
 8011a3a:	bdb0      	pop	{r4, r5, r7, pc}

08011a3c <SCSI_UpdateBotData>:
* @param  length: Data length
* @retval status
*/
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8011a3c:	b480      	push	{r7}
 8011a3e:	b087      	sub	sp, #28
 8011a40:	af00      	add	r7, sp, #0
 8011a42:	60f8      	str	r0, [r7, #12]
 8011a44:	60b9      	str	r1, [r7, #8]
 8011a46:	4613      	mov	r3, r2
 8011a48:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 8011a4a:	88fb      	ldrh	r3, [r7, #6]
 8011a4c:	82fb      	strh	r3, [r7, #22]

  hmsc->bot_data_length = len;
 8011a4e:	8afa      	ldrh	r2, [r7, #22]
 8011a50:	68fb      	ldr	r3, [r7, #12]
 8011a52:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8011a54:	e00b      	b.n	8011a6e <SCSI_UpdateBotData+0x32>
  {
    len--;
 8011a56:	8afb      	ldrh	r3, [r7, #22]
 8011a58:	3b01      	subs	r3, #1
 8011a5a:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 8011a5c:	8afb      	ldrh	r3, [r7, #22]
 8011a5e:	68ba      	ldr	r2, [r7, #8]
 8011a60:	441a      	add	r2, r3
 8011a62:	8afb      	ldrh	r3, [r7, #22]
 8011a64:	7811      	ldrb	r1, [r2, #0]
 8011a66:	68fa      	ldr	r2, [r7, #12]
 8011a68:	4413      	add	r3, r2
 8011a6a:	460a      	mov	r2, r1
 8011a6c:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 8011a6e:	8afb      	ldrh	r3, [r7, #22]
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d1f0      	bne.n	8011a56 <SCSI_UpdateBotData+0x1a>
  }

  return 0;
 8011a74:	2300      	movs	r3, #0
}
 8011a76:	4618      	mov	r0, r3
 8011a78:	371c      	adds	r7, #28
 8011a7a:	46bd      	mov	sp, r7
 8011a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a80:	4770      	bx	lr

08011a82 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8011a82:	b580      	push	{r7, lr}
 8011a84:	b086      	sub	sp, #24
 8011a86:	af00      	add	r7, sp, #0
 8011a88:	60f8      	str	r0, [r7, #12]
 8011a8a:	60b9      	str	r1, [r7, #8]
 8011a8c:	4613      	mov	r3, r2
 8011a8e:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8011a90:	68fb      	ldr	r3, [r7, #12]
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d101      	bne.n	8011a9a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8011a96:	2303      	movs	r3, #3
 8011a98:	e025      	b.n	8011ae6 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8011a9a:	68fb      	ldr	r3, [r7, #12]
 8011a9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d003      	beq.n	8011aac <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8011aa4:	68fb      	ldr	r3, [r7, #12]
 8011aa6:	2200      	movs	r2, #0
 8011aa8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8011aac:	68fb      	ldr	r3, [r7, #12]
 8011aae:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8011ab2:	2b00      	cmp	r3, #0
 8011ab4:	d003      	beq.n	8011abe <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8011ab6:	68fb      	ldr	r3, [r7, #12]
 8011ab8:	2200      	movs	r2, #0
 8011aba:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8011abe:	68bb      	ldr	r3, [r7, #8]
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d003      	beq.n	8011acc <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8011ac4:	68fb      	ldr	r3, [r7, #12]
 8011ac6:	68ba      	ldr	r2, [r7, #8]
 8011ac8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011acc:	68fb      	ldr	r3, [r7, #12]
 8011ace:	2201      	movs	r2, #1
 8011ad0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8011ad4:	68fb      	ldr	r3, [r7, #12]
 8011ad6:	79fa      	ldrb	r2, [r7, #7]
 8011ad8:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8011ada:	68f8      	ldr	r0, [r7, #12]
 8011adc:	f003 fece 	bl	801587c <USBD_LL_Init>
 8011ae0:	4603      	mov	r3, r0
 8011ae2:	75fb      	strb	r3, [r7, #23]

  return ret;
 8011ae4:	7dfb      	ldrb	r3, [r7, #23]
}
 8011ae6:	4618      	mov	r0, r3
 8011ae8:	3718      	adds	r7, #24
 8011aea:	46bd      	mov	sp, r7
 8011aec:	bd80      	pop	{r7, pc}

08011aee <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8011aee:	b580      	push	{r7, lr}
 8011af0:	b084      	sub	sp, #16
 8011af2:	af00      	add	r7, sp, #0
 8011af4:	6078      	str	r0, [r7, #4]
 8011af6:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011af8:	2300      	movs	r3, #0
 8011afa:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8011afc:	683b      	ldr	r3, [r7, #0]
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d101      	bne.n	8011b06 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8011b02:	2303      	movs	r3, #3
 8011b04:	e010      	b.n	8011b28 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	683a      	ldr	r2, [r7, #0]
 8011b0a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b16:	f107 020e 	add.w	r2, r7, #14
 8011b1a:	4610      	mov	r0, r2
 8011b1c:	4798      	blx	r3
 8011b1e:	4602      	mov	r2, r0
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8011b26:	2300      	movs	r3, #0
}
 8011b28:	4618      	mov	r0, r3
 8011b2a:	3710      	adds	r7, #16
 8011b2c:	46bd      	mov	sp, r7
 8011b2e:	bd80      	pop	{r7, pc}

08011b30 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8011b30:	b580      	push	{r7, lr}
 8011b32:	b082      	sub	sp, #8
 8011b34:	af00      	add	r7, sp, #0
 8011b36:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8011b38:	6878      	ldr	r0, [r7, #4]
 8011b3a:	f003 feef 	bl	801591c <USBD_LL_Start>
 8011b3e:	4603      	mov	r3, r0
}
 8011b40:	4618      	mov	r0, r3
 8011b42:	3708      	adds	r7, #8
 8011b44:	46bd      	mov	sp, r7
 8011b46:	bd80      	pop	{r7, pc}

08011b48 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8011b48:	b480      	push	{r7}
 8011b4a:	b083      	sub	sp, #12
 8011b4c:	af00      	add	r7, sp, #0
 8011b4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011b50:	2300      	movs	r3, #0
}
 8011b52:	4618      	mov	r0, r3
 8011b54:	370c      	adds	r7, #12
 8011b56:	46bd      	mov	sp, r7
 8011b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b5c:	4770      	bx	lr

08011b5e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011b5e:	b580      	push	{r7, lr}
 8011b60:	b084      	sub	sp, #16
 8011b62:	af00      	add	r7, sp, #0
 8011b64:	6078      	str	r0, [r7, #4]
 8011b66:	460b      	mov	r3, r1
 8011b68:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8011b6a:	2303      	movs	r3, #3
 8011b6c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	d009      	beq.n	8011b8c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011b7e:	681b      	ldr	r3, [r3, #0]
 8011b80:	78fa      	ldrb	r2, [r7, #3]
 8011b82:	4611      	mov	r1, r2
 8011b84:	6878      	ldr	r0, [r7, #4]
 8011b86:	4798      	blx	r3
 8011b88:	4603      	mov	r3, r0
 8011b8a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8011b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b8e:	4618      	mov	r0, r3
 8011b90:	3710      	adds	r7, #16
 8011b92:	46bd      	mov	sp, r7
 8011b94:	bd80      	pop	{r7, pc}

08011b96 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011b96:	b580      	push	{r7, lr}
 8011b98:	b082      	sub	sp, #8
 8011b9a:	af00      	add	r7, sp, #0
 8011b9c:	6078      	str	r0, [r7, #4]
 8011b9e:	460b      	mov	r3, r1
 8011ba0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d007      	beq.n	8011bbc <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011bb2:	685b      	ldr	r3, [r3, #4]
 8011bb4:	78fa      	ldrb	r2, [r7, #3]
 8011bb6:	4611      	mov	r1, r2
 8011bb8:	6878      	ldr	r0, [r7, #4]
 8011bba:	4798      	blx	r3
  }

  return USBD_OK;
 8011bbc:	2300      	movs	r3, #0
}
 8011bbe:	4618      	mov	r0, r3
 8011bc0:	3708      	adds	r7, #8
 8011bc2:	46bd      	mov	sp, r7
 8011bc4:	bd80      	pop	{r7, pc}

08011bc6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8011bc6:	b580      	push	{r7, lr}
 8011bc8:	b084      	sub	sp, #16
 8011bca:	af00      	add	r7, sp, #0
 8011bcc:	6078      	str	r0, [r7, #4]
 8011bce:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011bd6:	6839      	ldr	r1, [r7, #0]
 8011bd8:	4618      	mov	r0, r3
 8011bda:	f000 ff2b 	bl	8012a34 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	2201      	movs	r2, #1
 8011be2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8011bec:	461a      	mov	r2, r3
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011bfa:	f003 031f 	and.w	r3, r3, #31
 8011bfe:	2b01      	cmp	r3, #1
 8011c00:	d00e      	beq.n	8011c20 <USBD_LL_SetupStage+0x5a>
 8011c02:	2b01      	cmp	r3, #1
 8011c04:	d302      	bcc.n	8011c0c <USBD_LL_SetupStage+0x46>
 8011c06:	2b02      	cmp	r3, #2
 8011c08:	d014      	beq.n	8011c34 <USBD_LL_SetupStage+0x6e>
 8011c0a:	e01d      	b.n	8011c48 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011c12:	4619      	mov	r1, r3
 8011c14:	6878      	ldr	r0, [r7, #4]
 8011c16:	f000 fa17 	bl	8012048 <USBD_StdDevReq>
 8011c1a:	4603      	mov	r3, r0
 8011c1c:	73fb      	strb	r3, [r7, #15]
      break;
 8011c1e:	e020      	b.n	8011c62 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011c26:	4619      	mov	r1, r3
 8011c28:	6878      	ldr	r0, [r7, #4]
 8011c2a:	f000 fa7b 	bl	8012124 <USBD_StdItfReq>
 8011c2e:	4603      	mov	r3, r0
 8011c30:	73fb      	strb	r3, [r7, #15]
      break;
 8011c32:	e016      	b.n	8011c62 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011c3a:	4619      	mov	r1, r3
 8011c3c:	6878      	ldr	r0, [r7, #4]
 8011c3e:	f000 fab7 	bl	80121b0 <USBD_StdEPReq>
 8011c42:	4603      	mov	r3, r0
 8011c44:	73fb      	strb	r3, [r7, #15]
      break;
 8011c46:	e00c      	b.n	8011c62 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011c4e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8011c52:	b2db      	uxtb	r3, r3
 8011c54:	4619      	mov	r1, r3
 8011c56:	6878      	ldr	r0, [r7, #4]
 8011c58:	f003 fedf 	bl	8015a1a <USBD_LL_StallEP>
 8011c5c:	4603      	mov	r3, r0
 8011c5e:	73fb      	strb	r3, [r7, #15]
      break;
 8011c60:	bf00      	nop
  }

  return ret;
 8011c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c64:	4618      	mov	r0, r3
 8011c66:	3710      	adds	r7, #16
 8011c68:	46bd      	mov	sp, r7
 8011c6a:	bd80      	pop	{r7, pc}

08011c6c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8011c6c:	b580      	push	{r7, lr}
 8011c6e:	b086      	sub	sp, #24
 8011c70:	af00      	add	r7, sp, #0
 8011c72:	60f8      	str	r0, [r7, #12]
 8011c74:	460b      	mov	r3, r1
 8011c76:	607a      	str	r2, [r7, #4]
 8011c78:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8011c7a:	7afb      	ldrb	r3, [r7, #11]
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	d137      	bne.n	8011cf0 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8011c80:	68fb      	ldr	r3, [r7, #12]
 8011c82:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8011c86:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8011c88:	68fb      	ldr	r3, [r7, #12]
 8011c8a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011c8e:	2b03      	cmp	r3, #3
 8011c90:	d14a      	bne.n	8011d28 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8011c92:	693b      	ldr	r3, [r7, #16]
 8011c94:	689a      	ldr	r2, [r3, #8]
 8011c96:	693b      	ldr	r3, [r7, #16]
 8011c98:	68db      	ldr	r3, [r3, #12]
 8011c9a:	429a      	cmp	r2, r3
 8011c9c:	d913      	bls.n	8011cc6 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011c9e:	693b      	ldr	r3, [r7, #16]
 8011ca0:	689a      	ldr	r2, [r3, #8]
 8011ca2:	693b      	ldr	r3, [r7, #16]
 8011ca4:	68db      	ldr	r3, [r3, #12]
 8011ca6:	1ad2      	subs	r2, r2, r3
 8011ca8:	693b      	ldr	r3, [r7, #16]
 8011caa:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8011cac:	693b      	ldr	r3, [r7, #16]
 8011cae:	68da      	ldr	r2, [r3, #12]
 8011cb0:	693b      	ldr	r3, [r7, #16]
 8011cb2:	689b      	ldr	r3, [r3, #8]
 8011cb4:	4293      	cmp	r3, r2
 8011cb6:	bf28      	it	cs
 8011cb8:	4613      	movcs	r3, r2
 8011cba:	461a      	mov	r2, r3
 8011cbc:	6879      	ldr	r1, [r7, #4]
 8011cbe:	68f8      	ldr	r0, [r7, #12]
 8011cc0:	f000 ff8f 	bl	8012be2 <USBD_CtlContinueRx>
 8011cc4:	e030      	b.n	8011d28 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8011cc6:	68fb      	ldr	r3, [r7, #12]
 8011cc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011ccc:	691b      	ldr	r3, [r3, #16]
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d00a      	beq.n	8011ce8 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011cd2:	68fb      	ldr	r3, [r7, #12]
 8011cd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8011cd8:	2b03      	cmp	r3, #3
 8011cda:	d105      	bne.n	8011ce8 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8011cdc:	68fb      	ldr	r3, [r7, #12]
 8011cde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011ce2:	691b      	ldr	r3, [r3, #16]
 8011ce4:	68f8      	ldr	r0, [r7, #12]
 8011ce6:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8011ce8:	68f8      	ldr	r0, [r7, #12]
 8011cea:	f000 ff8b 	bl	8012c04 <USBD_CtlSendStatus>
 8011cee:	e01b      	b.n	8011d28 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8011cf0:	68fb      	ldr	r3, [r7, #12]
 8011cf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011cf6:	699b      	ldr	r3, [r3, #24]
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	d013      	beq.n	8011d24 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011cfc:	68fb      	ldr	r3, [r7, #12]
 8011cfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8011d02:	2b03      	cmp	r3, #3
 8011d04:	d10e      	bne.n	8011d24 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8011d06:	68fb      	ldr	r3, [r7, #12]
 8011d08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011d0c:	699b      	ldr	r3, [r3, #24]
 8011d0e:	7afa      	ldrb	r2, [r7, #11]
 8011d10:	4611      	mov	r1, r2
 8011d12:	68f8      	ldr	r0, [r7, #12]
 8011d14:	4798      	blx	r3
 8011d16:	4603      	mov	r3, r0
 8011d18:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8011d1a:	7dfb      	ldrb	r3, [r7, #23]
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d003      	beq.n	8011d28 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8011d20:	7dfb      	ldrb	r3, [r7, #23]
 8011d22:	e002      	b.n	8011d2a <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8011d24:	2303      	movs	r3, #3
 8011d26:	e000      	b.n	8011d2a <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8011d28:	2300      	movs	r3, #0
}
 8011d2a:	4618      	mov	r0, r3
 8011d2c:	3718      	adds	r7, #24
 8011d2e:	46bd      	mov	sp, r7
 8011d30:	bd80      	pop	{r7, pc}

08011d32 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8011d32:	b580      	push	{r7, lr}
 8011d34:	b086      	sub	sp, #24
 8011d36:	af00      	add	r7, sp, #0
 8011d38:	60f8      	str	r0, [r7, #12]
 8011d3a:	460b      	mov	r3, r1
 8011d3c:	607a      	str	r2, [r7, #4]
 8011d3e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8011d40:	7afb      	ldrb	r3, [r7, #11]
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d16a      	bne.n	8011e1c <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8011d46:	68fb      	ldr	r3, [r7, #12]
 8011d48:	3314      	adds	r3, #20
 8011d4a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8011d4c:	68fb      	ldr	r3, [r7, #12]
 8011d4e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011d52:	2b02      	cmp	r3, #2
 8011d54:	d155      	bne.n	8011e02 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8011d56:	693b      	ldr	r3, [r7, #16]
 8011d58:	689a      	ldr	r2, [r3, #8]
 8011d5a:	693b      	ldr	r3, [r7, #16]
 8011d5c:	68db      	ldr	r3, [r3, #12]
 8011d5e:	429a      	cmp	r2, r3
 8011d60:	d914      	bls.n	8011d8c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011d62:	693b      	ldr	r3, [r7, #16]
 8011d64:	689a      	ldr	r2, [r3, #8]
 8011d66:	693b      	ldr	r3, [r7, #16]
 8011d68:	68db      	ldr	r3, [r3, #12]
 8011d6a:	1ad2      	subs	r2, r2, r3
 8011d6c:	693b      	ldr	r3, [r7, #16]
 8011d6e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8011d70:	693b      	ldr	r3, [r7, #16]
 8011d72:	689b      	ldr	r3, [r3, #8]
 8011d74:	461a      	mov	r2, r3
 8011d76:	6879      	ldr	r1, [r7, #4]
 8011d78:	68f8      	ldr	r0, [r7, #12]
 8011d7a:	f000 ff21 	bl	8012bc0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011d7e:	2300      	movs	r3, #0
 8011d80:	2200      	movs	r2, #0
 8011d82:	2100      	movs	r1, #0
 8011d84:	68f8      	ldr	r0, [r7, #12]
 8011d86:	f003 fef2 	bl	8015b6e <USBD_LL_PrepareReceive>
 8011d8a:	e03a      	b.n	8011e02 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8011d8c:	693b      	ldr	r3, [r7, #16]
 8011d8e:	68da      	ldr	r2, [r3, #12]
 8011d90:	693b      	ldr	r3, [r7, #16]
 8011d92:	689b      	ldr	r3, [r3, #8]
 8011d94:	429a      	cmp	r2, r3
 8011d96:	d11c      	bne.n	8011dd2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8011d98:	693b      	ldr	r3, [r7, #16]
 8011d9a:	685a      	ldr	r2, [r3, #4]
 8011d9c:	693b      	ldr	r3, [r7, #16]
 8011d9e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8011da0:	429a      	cmp	r2, r3
 8011da2:	d316      	bcc.n	8011dd2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8011da4:	693b      	ldr	r3, [r7, #16]
 8011da6:	685a      	ldr	r2, [r3, #4]
 8011da8:	68fb      	ldr	r3, [r7, #12]
 8011daa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8011dae:	429a      	cmp	r2, r3
 8011db0:	d20f      	bcs.n	8011dd2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8011db2:	2200      	movs	r2, #0
 8011db4:	2100      	movs	r1, #0
 8011db6:	68f8      	ldr	r0, [r7, #12]
 8011db8:	f000 ff02 	bl	8012bc0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8011dbc:	68fb      	ldr	r3, [r7, #12]
 8011dbe:	2200      	movs	r2, #0
 8011dc0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011dc4:	2300      	movs	r3, #0
 8011dc6:	2200      	movs	r2, #0
 8011dc8:	2100      	movs	r1, #0
 8011dca:	68f8      	ldr	r0, [r7, #12]
 8011dcc:	f003 fecf 	bl	8015b6e <USBD_LL_PrepareReceive>
 8011dd0:	e017      	b.n	8011e02 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8011dd2:	68fb      	ldr	r3, [r7, #12]
 8011dd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011dd8:	68db      	ldr	r3, [r3, #12]
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d00a      	beq.n	8011df4 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011dde:	68fb      	ldr	r3, [r7, #12]
 8011de0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8011de4:	2b03      	cmp	r3, #3
 8011de6:	d105      	bne.n	8011df4 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8011de8:	68fb      	ldr	r3, [r7, #12]
 8011dea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011dee:	68db      	ldr	r3, [r3, #12]
 8011df0:	68f8      	ldr	r0, [r7, #12]
 8011df2:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011df4:	2180      	movs	r1, #128	; 0x80
 8011df6:	68f8      	ldr	r0, [r7, #12]
 8011df8:	f003 fe0f 	bl	8015a1a <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8011dfc:	68f8      	ldr	r0, [r7, #12]
 8011dfe:	f000 ff14 	bl	8012c2a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8011e02:	68fb      	ldr	r3, [r7, #12]
 8011e04:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8011e08:	2b01      	cmp	r3, #1
 8011e0a:	d123      	bne.n	8011e54 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8011e0c:	68f8      	ldr	r0, [r7, #12]
 8011e0e:	f7ff fe9b 	bl	8011b48 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8011e12:	68fb      	ldr	r3, [r7, #12]
 8011e14:	2200      	movs	r2, #0
 8011e16:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8011e1a:	e01b      	b.n	8011e54 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8011e1c:	68fb      	ldr	r3, [r7, #12]
 8011e1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011e22:	695b      	ldr	r3, [r3, #20]
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	d013      	beq.n	8011e50 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011e28:	68fb      	ldr	r3, [r7, #12]
 8011e2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8011e2e:	2b03      	cmp	r3, #3
 8011e30:	d10e      	bne.n	8011e50 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8011e32:	68fb      	ldr	r3, [r7, #12]
 8011e34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011e38:	695b      	ldr	r3, [r3, #20]
 8011e3a:	7afa      	ldrb	r2, [r7, #11]
 8011e3c:	4611      	mov	r1, r2
 8011e3e:	68f8      	ldr	r0, [r7, #12]
 8011e40:	4798      	blx	r3
 8011e42:	4603      	mov	r3, r0
 8011e44:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8011e46:	7dfb      	ldrb	r3, [r7, #23]
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d003      	beq.n	8011e54 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8011e4c:	7dfb      	ldrb	r3, [r7, #23]
 8011e4e:	e002      	b.n	8011e56 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8011e50:	2303      	movs	r3, #3
 8011e52:	e000      	b.n	8011e56 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8011e54:	2300      	movs	r3, #0
}
 8011e56:	4618      	mov	r0, r3
 8011e58:	3718      	adds	r7, #24
 8011e5a:	46bd      	mov	sp, r7
 8011e5c:	bd80      	pop	{r7, pc}

08011e5e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8011e5e:	b580      	push	{r7, lr}
 8011e60:	b082      	sub	sp, #8
 8011e62:	af00      	add	r7, sp, #0
 8011e64:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	2201      	movs	r2, #1
 8011e6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	2200      	movs	r2, #0
 8011e72:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	2200      	movs	r2, #0
 8011e7a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	2200      	movs	r2, #0
 8011e80:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d009      	beq.n	8011ea2 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011e94:	685b      	ldr	r3, [r3, #4]
 8011e96:	687a      	ldr	r2, [r7, #4]
 8011e98:	6852      	ldr	r2, [r2, #4]
 8011e9a:	b2d2      	uxtb	r2, r2
 8011e9c:	4611      	mov	r1, r2
 8011e9e:	6878      	ldr	r0, [r7, #4]
 8011ea0:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011ea2:	2340      	movs	r3, #64	; 0x40
 8011ea4:	2200      	movs	r2, #0
 8011ea6:	2100      	movs	r1, #0
 8011ea8:	6878      	ldr	r0, [r7, #4]
 8011eaa:	f003 fd52 	bl	8015952 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	2201      	movs	r2, #1
 8011eb2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	2240      	movs	r2, #64	; 0x40
 8011eba:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011ebe:	2340      	movs	r3, #64	; 0x40
 8011ec0:	2200      	movs	r2, #0
 8011ec2:	2180      	movs	r1, #128	; 0x80
 8011ec4:	6878      	ldr	r0, [r7, #4]
 8011ec6:	f003 fd44 	bl	8015952 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	2201      	movs	r2, #1
 8011ece:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	2240      	movs	r2, #64	; 0x40
 8011ed4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8011ed6:	2300      	movs	r3, #0
}
 8011ed8:	4618      	mov	r0, r3
 8011eda:	3708      	adds	r7, #8
 8011edc:	46bd      	mov	sp, r7
 8011ede:	bd80      	pop	{r7, pc}

08011ee0 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8011ee0:	b480      	push	{r7}
 8011ee2:	b083      	sub	sp, #12
 8011ee4:	af00      	add	r7, sp, #0
 8011ee6:	6078      	str	r0, [r7, #4]
 8011ee8:	460b      	mov	r3, r1
 8011eea:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	78fa      	ldrb	r2, [r7, #3]
 8011ef0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8011ef2:	2300      	movs	r3, #0
}
 8011ef4:	4618      	mov	r0, r3
 8011ef6:	370c      	adds	r7, #12
 8011ef8:	46bd      	mov	sp, r7
 8011efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011efe:	4770      	bx	lr

08011f00 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8011f00:	b480      	push	{r7}
 8011f02:	b083      	sub	sp, #12
 8011f04:	af00      	add	r7, sp, #0
 8011f06:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	2204      	movs	r2, #4
 8011f18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8011f1c:	2300      	movs	r3, #0
}
 8011f1e:	4618      	mov	r0, r3
 8011f20:	370c      	adds	r7, #12
 8011f22:	46bd      	mov	sp, r7
 8011f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f28:	4770      	bx	lr

08011f2a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8011f2a:	b480      	push	{r7}
 8011f2c:	b083      	sub	sp, #12
 8011f2e:	af00      	add	r7, sp, #0
 8011f30:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011f38:	2b04      	cmp	r3, #4
 8011f3a:	d105      	bne.n	8011f48 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8011f48:	2300      	movs	r3, #0
}
 8011f4a:	4618      	mov	r0, r3
 8011f4c:	370c      	adds	r7, #12
 8011f4e:	46bd      	mov	sp, r7
 8011f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f54:	4770      	bx	lr

08011f56 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8011f56:	b580      	push	{r7, lr}
 8011f58:	b082      	sub	sp, #8
 8011f5a:	af00      	add	r7, sp, #0
 8011f5c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011f64:	2b03      	cmp	r3, #3
 8011f66:	d10b      	bne.n	8011f80 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011f6e:	69db      	ldr	r3, [r3, #28]
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d005      	beq.n	8011f80 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011f7a:	69db      	ldr	r3, [r3, #28]
 8011f7c:	6878      	ldr	r0, [r7, #4]
 8011f7e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011f80:	2300      	movs	r3, #0
}
 8011f82:	4618      	mov	r0, r3
 8011f84:	3708      	adds	r7, #8
 8011f86:	46bd      	mov	sp, r7
 8011f88:	bd80      	pop	{r7, pc}

08011f8a <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8011f8a:	b480      	push	{r7}
 8011f8c:	b083      	sub	sp, #12
 8011f8e:	af00      	add	r7, sp, #0
 8011f90:	6078      	str	r0, [r7, #4]
 8011f92:	460b      	mov	r3, r1
 8011f94:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8011f96:	2300      	movs	r3, #0
}
 8011f98:	4618      	mov	r0, r3
 8011f9a:	370c      	adds	r7, #12
 8011f9c:	46bd      	mov	sp, r7
 8011f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fa2:	4770      	bx	lr

08011fa4 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8011fa4:	b480      	push	{r7}
 8011fa6:	b083      	sub	sp, #12
 8011fa8:	af00      	add	r7, sp, #0
 8011faa:	6078      	str	r0, [r7, #4]
 8011fac:	460b      	mov	r3, r1
 8011fae:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8011fb0:	2300      	movs	r3, #0
}
 8011fb2:	4618      	mov	r0, r3
 8011fb4:	370c      	adds	r7, #12
 8011fb6:	46bd      	mov	sp, r7
 8011fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fbc:	4770      	bx	lr

08011fbe <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8011fbe:	b480      	push	{r7}
 8011fc0:	b083      	sub	sp, #12
 8011fc2:	af00      	add	r7, sp, #0
 8011fc4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011fc6:	2300      	movs	r3, #0
}
 8011fc8:	4618      	mov	r0, r3
 8011fca:	370c      	adds	r7, #12
 8011fcc:	46bd      	mov	sp, r7
 8011fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fd2:	4770      	bx	lr

08011fd4 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8011fd4:	b580      	push	{r7, lr}
 8011fd6:	b082      	sub	sp, #8
 8011fd8:	af00      	add	r7, sp, #0
 8011fda:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	2201      	movs	r2, #1
 8011fe0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d009      	beq.n	8012002 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011ff4:	685b      	ldr	r3, [r3, #4]
 8011ff6:	687a      	ldr	r2, [r7, #4]
 8011ff8:	6852      	ldr	r2, [r2, #4]
 8011ffa:	b2d2      	uxtb	r2, r2
 8011ffc:	4611      	mov	r1, r2
 8011ffe:	6878      	ldr	r0, [r7, #4]
 8012000:	4798      	blx	r3
  }

  return USBD_OK;
 8012002:	2300      	movs	r3, #0
}
 8012004:	4618      	mov	r0, r3
 8012006:	3708      	adds	r7, #8
 8012008:	46bd      	mov	sp, r7
 801200a:	bd80      	pop	{r7, pc}

0801200c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801200c:	b480      	push	{r7}
 801200e:	b087      	sub	sp, #28
 8012010:	af00      	add	r7, sp, #0
 8012012:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8012018:	697b      	ldr	r3, [r7, #20]
 801201a:	781b      	ldrb	r3, [r3, #0]
 801201c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801201e:	697b      	ldr	r3, [r7, #20]
 8012020:	3301      	adds	r3, #1
 8012022:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8012024:	697b      	ldr	r3, [r7, #20]
 8012026:	781b      	ldrb	r3, [r3, #0]
 8012028:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801202a:	8a3b      	ldrh	r3, [r7, #16]
 801202c:	021b      	lsls	r3, r3, #8
 801202e:	b21a      	sxth	r2, r3
 8012030:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012034:	4313      	orrs	r3, r2
 8012036:	b21b      	sxth	r3, r3
 8012038:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801203a:	89fb      	ldrh	r3, [r7, #14]
}
 801203c:	4618      	mov	r0, r3
 801203e:	371c      	adds	r7, #28
 8012040:	46bd      	mov	sp, r7
 8012042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012046:	4770      	bx	lr

08012048 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012048:	b580      	push	{r7, lr}
 801204a:	b084      	sub	sp, #16
 801204c:	af00      	add	r7, sp, #0
 801204e:	6078      	str	r0, [r7, #4]
 8012050:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012052:	2300      	movs	r3, #0
 8012054:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012056:	683b      	ldr	r3, [r7, #0]
 8012058:	781b      	ldrb	r3, [r3, #0]
 801205a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801205e:	2b20      	cmp	r3, #32
 8012060:	d004      	beq.n	801206c <USBD_StdDevReq+0x24>
 8012062:	2b40      	cmp	r3, #64	; 0x40
 8012064:	d002      	beq.n	801206c <USBD_StdDevReq+0x24>
 8012066:	2b00      	cmp	r3, #0
 8012068:	d00a      	beq.n	8012080 <USBD_StdDevReq+0x38>
 801206a:	e050      	b.n	801210e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012072:	689b      	ldr	r3, [r3, #8]
 8012074:	6839      	ldr	r1, [r7, #0]
 8012076:	6878      	ldr	r0, [r7, #4]
 8012078:	4798      	blx	r3
 801207a:	4603      	mov	r3, r0
 801207c:	73fb      	strb	r3, [r7, #15]
    break;
 801207e:	e04b      	b.n	8012118 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8012080:	683b      	ldr	r3, [r7, #0]
 8012082:	785b      	ldrb	r3, [r3, #1]
 8012084:	2b09      	cmp	r3, #9
 8012086:	d83c      	bhi.n	8012102 <USBD_StdDevReq+0xba>
 8012088:	a201      	add	r2, pc, #4	; (adr r2, 8012090 <USBD_StdDevReq+0x48>)
 801208a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801208e:	bf00      	nop
 8012090:	080120e5 	.word	0x080120e5
 8012094:	080120f9 	.word	0x080120f9
 8012098:	08012103 	.word	0x08012103
 801209c:	080120ef 	.word	0x080120ef
 80120a0:	08012103 	.word	0x08012103
 80120a4:	080120c3 	.word	0x080120c3
 80120a8:	080120b9 	.word	0x080120b9
 80120ac:	08012103 	.word	0x08012103
 80120b0:	080120db 	.word	0x080120db
 80120b4:	080120cd 	.word	0x080120cd
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80120b8:	6839      	ldr	r1, [r7, #0]
 80120ba:	6878      	ldr	r0, [r7, #4]
 80120bc:	f000 f9ce 	bl	801245c <USBD_GetDescriptor>
      break;
 80120c0:	e024      	b.n	801210c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80120c2:	6839      	ldr	r1, [r7, #0]
 80120c4:	6878      	ldr	r0, [r7, #4]
 80120c6:	f000 fb33 	bl	8012730 <USBD_SetAddress>
      break;
 80120ca:	e01f      	b.n	801210c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80120cc:	6839      	ldr	r1, [r7, #0]
 80120ce:	6878      	ldr	r0, [r7, #4]
 80120d0:	f000 fb70 	bl	80127b4 <USBD_SetConfig>
 80120d4:	4603      	mov	r3, r0
 80120d6:	73fb      	strb	r3, [r7, #15]
      break;
 80120d8:	e018      	b.n	801210c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80120da:	6839      	ldr	r1, [r7, #0]
 80120dc:	6878      	ldr	r0, [r7, #4]
 80120de:	f000 fc0d 	bl	80128fc <USBD_GetConfig>
      break;
 80120e2:	e013      	b.n	801210c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80120e4:	6839      	ldr	r1, [r7, #0]
 80120e6:	6878      	ldr	r0, [r7, #4]
 80120e8:	f000 fc3c 	bl	8012964 <USBD_GetStatus>
      break;
 80120ec:	e00e      	b.n	801210c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80120ee:	6839      	ldr	r1, [r7, #0]
 80120f0:	6878      	ldr	r0, [r7, #4]
 80120f2:	f000 fc6a 	bl	80129ca <USBD_SetFeature>
      break;
 80120f6:	e009      	b.n	801210c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80120f8:	6839      	ldr	r1, [r7, #0]
 80120fa:	6878      	ldr	r0, [r7, #4]
 80120fc:	f000 fc79 	bl	80129f2 <USBD_ClrFeature>
      break;
 8012100:	e004      	b.n	801210c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8012102:	6839      	ldr	r1, [r7, #0]
 8012104:	6878      	ldr	r0, [r7, #4]
 8012106:	f000 fccf 	bl	8012aa8 <USBD_CtlError>
      break;
 801210a:	bf00      	nop
    }
    break;
 801210c:	e004      	b.n	8012118 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 801210e:	6839      	ldr	r1, [r7, #0]
 8012110:	6878      	ldr	r0, [r7, #4]
 8012112:	f000 fcc9 	bl	8012aa8 <USBD_CtlError>
    break;
 8012116:	bf00      	nop
  }

  return ret;
 8012118:	7bfb      	ldrb	r3, [r7, #15]
}
 801211a:	4618      	mov	r0, r3
 801211c:	3710      	adds	r7, #16
 801211e:	46bd      	mov	sp, r7
 8012120:	bd80      	pop	{r7, pc}
 8012122:	bf00      	nop

08012124 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012124:	b580      	push	{r7, lr}
 8012126:	b084      	sub	sp, #16
 8012128:	af00      	add	r7, sp, #0
 801212a:	6078      	str	r0, [r7, #4]
 801212c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801212e:	2300      	movs	r3, #0
 8012130:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012132:	683b      	ldr	r3, [r7, #0]
 8012134:	781b      	ldrb	r3, [r3, #0]
 8012136:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801213a:	2b20      	cmp	r3, #32
 801213c:	d003      	beq.n	8012146 <USBD_StdItfReq+0x22>
 801213e:	2b40      	cmp	r3, #64	; 0x40
 8012140:	d001      	beq.n	8012146 <USBD_StdItfReq+0x22>
 8012142:	2b00      	cmp	r3, #0
 8012144:	d12a      	bne.n	801219c <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801214c:	3b01      	subs	r3, #1
 801214e:	2b02      	cmp	r3, #2
 8012150:	d81d      	bhi.n	801218e <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8012152:	683b      	ldr	r3, [r7, #0]
 8012154:	889b      	ldrh	r3, [r3, #4]
 8012156:	b2db      	uxtb	r3, r3
 8012158:	2b01      	cmp	r3, #1
 801215a:	d813      	bhi.n	8012184 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012162:	689b      	ldr	r3, [r3, #8]
 8012164:	6839      	ldr	r1, [r7, #0]
 8012166:	6878      	ldr	r0, [r7, #4]
 8012168:	4798      	blx	r3
 801216a:	4603      	mov	r3, r0
 801216c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 801216e:	683b      	ldr	r3, [r7, #0]
 8012170:	88db      	ldrh	r3, [r3, #6]
 8012172:	2b00      	cmp	r3, #0
 8012174:	d110      	bne.n	8012198 <USBD_StdItfReq+0x74>
 8012176:	7bfb      	ldrb	r3, [r7, #15]
 8012178:	2b00      	cmp	r3, #0
 801217a:	d10d      	bne.n	8012198 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 801217c:	6878      	ldr	r0, [r7, #4]
 801217e:	f000 fd41 	bl	8012c04 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8012182:	e009      	b.n	8012198 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8012184:	6839      	ldr	r1, [r7, #0]
 8012186:	6878      	ldr	r0, [r7, #4]
 8012188:	f000 fc8e 	bl	8012aa8 <USBD_CtlError>
      break;
 801218c:	e004      	b.n	8012198 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 801218e:	6839      	ldr	r1, [r7, #0]
 8012190:	6878      	ldr	r0, [r7, #4]
 8012192:	f000 fc89 	bl	8012aa8 <USBD_CtlError>
      break;
 8012196:	e000      	b.n	801219a <USBD_StdItfReq+0x76>
      break;
 8012198:	bf00      	nop
    }
    break;
 801219a:	e004      	b.n	80121a6 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 801219c:	6839      	ldr	r1, [r7, #0]
 801219e:	6878      	ldr	r0, [r7, #4]
 80121a0:	f000 fc82 	bl	8012aa8 <USBD_CtlError>
    break;
 80121a4:	bf00      	nop
  }

  return ret;
 80121a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80121a8:	4618      	mov	r0, r3
 80121aa:	3710      	adds	r7, #16
 80121ac:	46bd      	mov	sp, r7
 80121ae:	bd80      	pop	{r7, pc}

080121b0 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80121b0:	b580      	push	{r7, lr}
 80121b2:	b084      	sub	sp, #16
 80121b4:	af00      	add	r7, sp, #0
 80121b6:	6078      	str	r0, [r7, #4]
 80121b8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80121ba:	2300      	movs	r3, #0
 80121bc:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80121be:	683b      	ldr	r3, [r7, #0]
 80121c0:	889b      	ldrh	r3, [r3, #4]
 80121c2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80121c4:	683b      	ldr	r3, [r7, #0]
 80121c6:	781b      	ldrb	r3, [r3, #0]
 80121c8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80121cc:	2b20      	cmp	r3, #32
 80121ce:	d004      	beq.n	80121da <USBD_StdEPReq+0x2a>
 80121d0:	2b40      	cmp	r3, #64	; 0x40
 80121d2:	d002      	beq.n	80121da <USBD_StdEPReq+0x2a>
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d00a      	beq.n	80121ee <USBD_StdEPReq+0x3e>
 80121d8:	e135      	b.n	8012446 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80121e0:	689b      	ldr	r3, [r3, #8]
 80121e2:	6839      	ldr	r1, [r7, #0]
 80121e4:	6878      	ldr	r0, [r7, #4]
 80121e6:	4798      	blx	r3
 80121e8:	4603      	mov	r3, r0
 80121ea:	73fb      	strb	r3, [r7, #15]
    break;
 80121ec:	e130      	b.n	8012450 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80121ee:	683b      	ldr	r3, [r7, #0]
 80121f0:	785b      	ldrb	r3, [r3, #1]
 80121f2:	2b01      	cmp	r3, #1
 80121f4:	d03e      	beq.n	8012274 <USBD_StdEPReq+0xc4>
 80121f6:	2b03      	cmp	r3, #3
 80121f8:	d002      	beq.n	8012200 <USBD_StdEPReq+0x50>
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	d077      	beq.n	80122ee <USBD_StdEPReq+0x13e>
 80121fe:	e11c      	b.n	801243a <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012206:	2b02      	cmp	r3, #2
 8012208:	d002      	beq.n	8012210 <USBD_StdEPReq+0x60>
 801220a:	2b03      	cmp	r3, #3
 801220c:	d015      	beq.n	801223a <USBD_StdEPReq+0x8a>
 801220e:	e02b      	b.n	8012268 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012210:	7bbb      	ldrb	r3, [r7, #14]
 8012212:	2b00      	cmp	r3, #0
 8012214:	d00c      	beq.n	8012230 <USBD_StdEPReq+0x80>
 8012216:	7bbb      	ldrb	r3, [r7, #14]
 8012218:	2b80      	cmp	r3, #128	; 0x80
 801221a:	d009      	beq.n	8012230 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 801221c:	7bbb      	ldrb	r3, [r7, #14]
 801221e:	4619      	mov	r1, r3
 8012220:	6878      	ldr	r0, [r7, #4]
 8012222:	f003 fbfa 	bl	8015a1a <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8012226:	2180      	movs	r1, #128	; 0x80
 8012228:	6878      	ldr	r0, [r7, #4]
 801222a:	f003 fbf6 	bl	8015a1a <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 801222e:	e020      	b.n	8012272 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8012230:	6839      	ldr	r1, [r7, #0]
 8012232:	6878      	ldr	r0, [r7, #4]
 8012234:	f000 fc38 	bl	8012aa8 <USBD_CtlError>
        break;
 8012238:	e01b      	b.n	8012272 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 801223a:	683b      	ldr	r3, [r7, #0]
 801223c:	885b      	ldrh	r3, [r3, #2]
 801223e:	2b00      	cmp	r3, #0
 8012240:	d10e      	bne.n	8012260 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8012242:	7bbb      	ldrb	r3, [r7, #14]
 8012244:	2b00      	cmp	r3, #0
 8012246:	d00b      	beq.n	8012260 <USBD_StdEPReq+0xb0>
 8012248:	7bbb      	ldrb	r3, [r7, #14]
 801224a:	2b80      	cmp	r3, #128	; 0x80
 801224c:	d008      	beq.n	8012260 <USBD_StdEPReq+0xb0>
 801224e:	683b      	ldr	r3, [r7, #0]
 8012250:	88db      	ldrh	r3, [r3, #6]
 8012252:	2b00      	cmp	r3, #0
 8012254:	d104      	bne.n	8012260 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8012256:	7bbb      	ldrb	r3, [r7, #14]
 8012258:	4619      	mov	r1, r3
 801225a:	6878      	ldr	r0, [r7, #4]
 801225c:	f003 fbdd 	bl	8015a1a <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8012260:	6878      	ldr	r0, [r7, #4]
 8012262:	f000 fccf 	bl	8012c04 <USBD_CtlSendStatus>

        break;
 8012266:	e004      	b.n	8012272 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8012268:	6839      	ldr	r1, [r7, #0]
 801226a:	6878      	ldr	r0, [r7, #4]
 801226c:	f000 fc1c 	bl	8012aa8 <USBD_CtlError>
        break;
 8012270:	bf00      	nop
      }
      break;
 8012272:	e0e7      	b.n	8012444 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801227a:	2b02      	cmp	r3, #2
 801227c:	d002      	beq.n	8012284 <USBD_StdEPReq+0xd4>
 801227e:	2b03      	cmp	r3, #3
 8012280:	d015      	beq.n	80122ae <USBD_StdEPReq+0xfe>
 8012282:	e02d      	b.n	80122e0 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012284:	7bbb      	ldrb	r3, [r7, #14]
 8012286:	2b00      	cmp	r3, #0
 8012288:	d00c      	beq.n	80122a4 <USBD_StdEPReq+0xf4>
 801228a:	7bbb      	ldrb	r3, [r7, #14]
 801228c:	2b80      	cmp	r3, #128	; 0x80
 801228e:	d009      	beq.n	80122a4 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8012290:	7bbb      	ldrb	r3, [r7, #14]
 8012292:	4619      	mov	r1, r3
 8012294:	6878      	ldr	r0, [r7, #4]
 8012296:	f003 fbc0 	bl	8015a1a <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801229a:	2180      	movs	r1, #128	; 0x80
 801229c:	6878      	ldr	r0, [r7, #4]
 801229e:	f003 fbbc 	bl	8015a1a <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80122a2:	e023      	b.n	80122ec <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 80122a4:	6839      	ldr	r1, [r7, #0]
 80122a6:	6878      	ldr	r0, [r7, #4]
 80122a8:	f000 fbfe 	bl	8012aa8 <USBD_CtlError>
        break;
 80122ac:	e01e      	b.n	80122ec <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80122ae:	683b      	ldr	r3, [r7, #0]
 80122b0:	885b      	ldrh	r3, [r3, #2]
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	d119      	bne.n	80122ea <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80122b6:	7bbb      	ldrb	r3, [r7, #14]
 80122b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d004      	beq.n	80122ca <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80122c0:	7bbb      	ldrb	r3, [r7, #14]
 80122c2:	4619      	mov	r1, r3
 80122c4:	6878      	ldr	r0, [r7, #4]
 80122c6:	f003 fbc7 	bl	8015a58 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80122ca:	6878      	ldr	r0, [r7, #4]
 80122cc:	f000 fc9a 	bl	8012c04 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80122d6:	689b      	ldr	r3, [r3, #8]
 80122d8:	6839      	ldr	r1, [r7, #0]
 80122da:	6878      	ldr	r0, [r7, #4]
 80122dc:	4798      	blx	r3
        }
        break;
 80122de:	e004      	b.n	80122ea <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 80122e0:	6839      	ldr	r1, [r7, #0]
 80122e2:	6878      	ldr	r0, [r7, #4]
 80122e4:	f000 fbe0 	bl	8012aa8 <USBD_CtlError>
        break;
 80122e8:	e000      	b.n	80122ec <USBD_StdEPReq+0x13c>
        break;
 80122ea:	bf00      	nop
      }
      break;
 80122ec:	e0aa      	b.n	8012444 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80122f4:	2b02      	cmp	r3, #2
 80122f6:	d002      	beq.n	80122fe <USBD_StdEPReq+0x14e>
 80122f8:	2b03      	cmp	r3, #3
 80122fa:	d032      	beq.n	8012362 <USBD_StdEPReq+0x1b2>
 80122fc:	e097      	b.n	801242e <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80122fe:	7bbb      	ldrb	r3, [r7, #14]
 8012300:	2b00      	cmp	r3, #0
 8012302:	d007      	beq.n	8012314 <USBD_StdEPReq+0x164>
 8012304:	7bbb      	ldrb	r3, [r7, #14]
 8012306:	2b80      	cmp	r3, #128	; 0x80
 8012308:	d004      	beq.n	8012314 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 801230a:	6839      	ldr	r1, [r7, #0]
 801230c:	6878      	ldr	r0, [r7, #4]
 801230e:	f000 fbcb 	bl	8012aa8 <USBD_CtlError>
          break;
 8012312:	e091      	b.n	8012438 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012314:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012318:	2b00      	cmp	r3, #0
 801231a:	da0b      	bge.n	8012334 <USBD_StdEPReq+0x184>
 801231c:	7bbb      	ldrb	r3, [r7, #14]
 801231e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012322:	4613      	mov	r3, r2
 8012324:	009b      	lsls	r3, r3, #2
 8012326:	4413      	add	r3, r2
 8012328:	009b      	lsls	r3, r3, #2
 801232a:	3310      	adds	r3, #16
 801232c:	687a      	ldr	r2, [r7, #4]
 801232e:	4413      	add	r3, r2
 8012330:	3304      	adds	r3, #4
 8012332:	e00b      	b.n	801234c <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8012334:	7bbb      	ldrb	r3, [r7, #14]
 8012336:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801233a:	4613      	mov	r3, r2
 801233c:	009b      	lsls	r3, r3, #2
 801233e:	4413      	add	r3, r2
 8012340:	009b      	lsls	r3, r3, #2
 8012342:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8012346:	687a      	ldr	r2, [r7, #4]
 8012348:	4413      	add	r3, r2
 801234a:	3304      	adds	r3, #4
 801234c:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 801234e:	68bb      	ldr	r3, [r7, #8]
 8012350:	2200      	movs	r2, #0
 8012352:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8012354:	68bb      	ldr	r3, [r7, #8]
 8012356:	2202      	movs	r2, #2
 8012358:	4619      	mov	r1, r3
 801235a:	6878      	ldr	r0, [r7, #4]
 801235c:	f000 fc15 	bl	8012b8a <USBD_CtlSendData>
        break;
 8012360:	e06a      	b.n	8012438 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8012362:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012366:	2b00      	cmp	r3, #0
 8012368:	da11      	bge.n	801238e <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801236a:	7bbb      	ldrb	r3, [r7, #14]
 801236c:	f003 020f 	and.w	r2, r3, #15
 8012370:	6879      	ldr	r1, [r7, #4]
 8012372:	4613      	mov	r3, r2
 8012374:	009b      	lsls	r3, r3, #2
 8012376:	4413      	add	r3, r2
 8012378:	009b      	lsls	r3, r3, #2
 801237a:	440b      	add	r3, r1
 801237c:	3324      	adds	r3, #36	; 0x24
 801237e:	881b      	ldrh	r3, [r3, #0]
 8012380:	2b00      	cmp	r3, #0
 8012382:	d117      	bne.n	80123b4 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8012384:	6839      	ldr	r1, [r7, #0]
 8012386:	6878      	ldr	r0, [r7, #4]
 8012388:	f000 fb8e 	bl	8012aa8 <USBD_CtlError>
            break;
 801238c:	e054      	b.n	8012438 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801238e:	7bbb      	ldrb	r3, [r7, #14]
 8012390:	f003 020f 	and.w	r2, r3, #15
 8012394:	6879      	ldr	r1, [r7, #4]
 8012396:	4613      	mov	r3, r2
 8012398:	009b      	lsls	r3, r3, #2
 801239a:	4413      	add	r3, r2
 801239c:	009b      	lsls	r3, r3, #2
 801239e:	440b      	add	r3, r1
 80123a0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80123a4:	881b      	ldrh	r3, [r3, #0]
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d104      	bne.n	80123b4 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80123aa:	6839      	ldr	r1, [r7, #0]
 80123ac:	6878      	ldr	r0, [r7, #4]
 80123ae:	f000 fb7b 	bl	8012aa8 <USBD_CtlError>
            break;
 80123b2:	e041      	b.n	8012438 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80123b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	da0b      	bge.n	80123d4 <USBD_StdEPReq+0x224>
 80123bc:	7bbb      	ldrb	r3, [r7, #14]
 80123be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80123c2:	4613      	mov	r3, r2
 80123c4:	009b      	lsls	r3, r3, #2
 80123c6:	4413      	add	r3, r2
 80123c8:	009b      	lsls	r3, r3, #2
 80123ca:	3310      	adds	r3, #16
 80123cc:	687a      	ldr	r2, [r7, #4]
 80123ce:	4413      	add	r3, r2
 80123d0:	3304      	adds	r3, #4
 80123d2:	e00b      	b.n	80123ec <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80123d4:	7bbb      	ldrb	r3, [r7, #14]
 80123d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80123da:	4613      	mov	r3, r2
 80123dc:	009b      	lsls	r3, r3, #2
 80123de:	4413      	add	r3, r2
 80123e0:	009b      	lsls	r3, r3, #2
 80123e2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80123e6:	687a      	ldr	r2, [r7, #4]
 80123e8:	4413      	add	r3, r2
 80123ea:	3304      	adds	r3, #4
 80123ec:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80123ee:	7bbb      	ldrb	r3, [r7, #14]
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d002      	beq.n	80123fa <USBD_StdEPReq+0x24a>
 80123f4:	7bbb      	ldrb	r3, [r7, #14]
 80123f6:	2b80      	cmp	r3, #128	; 0x80
 80123f8:	d103      	bne.n	8012402 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 80123fa:	68bb      	ldr	r3, [r7, #8]
 80123fc:	2200      	movs	r2, #0
 80123fe:	601a      	str	r2, [r3, #0]
 8012400:	e00e      	b.n	8012420 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8012402:	7bbb      	ldrb	r3, [r7, #14]
 8012404:	4619      	mov	r1, r3
 8012406:	6878      	ldr	r0, [r7, #4]
 8012408:	f003 fb45 	bl	8015a96 <USBD_LL_IsStallEP>
 801240c:	4603      	mov	r3, r0
 801240e:	2b00      	cmp	r3, #0
 8012410:	d003      	beq.n	801241a <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8012412:	68bb      	ldr	r3, [r7, #8]
 8012414:	2201      	movs	r2, #1
 8012416:	601a      	str	r2, [r3, #0]
 8012418:	e002      	b.n	8012420 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 801241a:	68bb      	ldr	r3, [r7, #8]
 801241c:	2200      	movs	r2, #0
 801241e:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8012420:	68bb      	ldr	r3, [r7, #8]
 8012422:	2202      	movs	r2, #2
 8012424:	4619      	mov	r1, r3
 8012426:	6878      	ldr	r0, [r7, #4]
 8012428:	f000 fbaf 	bl	8012b8a <USBD_CtlSendData>
          break;
 801242c:	e004      	b.n	8012438 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 801242e:	6839      	ldr	r1, [r7, #0]
 8012430:	6878      	ldr	r0, [r7, #4]
 8012432:	f000 fb39 	bl	8012aa8 <USBD_CtlError>
        break;
 8012436:	bf00      	nop
      }
      break;
 8012438:	e004      	b.n	8012444 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 801243a:	6839      	ldr	r1, [r7, #0]
 801243c:	6878      	ldr	r0, [r7, #4]
 801243e:	f000 fb33 	bl	8012aa8 <USBD_CtlError>
      break;
 8012442:	bf00      	nop
    }
    break;
 8012444:	e004      	b.n	8012450 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8012446:	6839      	ldr	r1, [r7, #0]
 8012448:	6878      	ldr	r0, [r7, #4]
 801244a:	f000 fb2d 	bl	8012aa8 <USBD_CtlError>
    break;
 801244e:	bf00      	nop
  }

  return ret;
 8012450:	7bfb      	ldrb	r3, [r7, #15]
}
 8012452:	4618      	mov	r0, r3
 8012454:	3710      	adds	r7, #16
 8012456:	46bd      	mov	sp, r7
 8012458:	bd80      	pop	{r7, pc}
	...

0801245c <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801245c:	b580      	push	{r7, lr}
 801245e:	b084      	sub	sp, #16
 8012460:	af00      	add	r7, sp, #0
 8012462:	6078      	str	r0, [r7, #4]
 8012464:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8012466:	2300      	movs	r3, #0
 8012468:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801246a:	2300      	movs	r3, #0
 801246c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801246e:	2300      	movs	r3, #0
 8012470:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8012472:	683b      	ldr	r3, [r7, #0]
 8012474:	885b      	ldrh	r3, [r3, #2]
 8012476:	0a1b      	lsrs	r3, r3, #8
 8012478:	b29b      	uxth	r3, r3
 801247a:	3b01      	subs	r3, #1
 801247c:	2b06      	cmp	r3, #6
 801247e:	f200 8128 	bhi.w	80126d2 <USBD_GetDescriptor+0x276>
 8012482:	a201      	add	r2, pc, #4	; (adr r2, 8012488 <USBD_GetDescriptor+0x2c>)
 8012484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012488:	080124a5 	.word	0x080124a5
 801248c:	080124bd 	.word	0x080124bd
 8012490:	080124fd 	.word	0x080124fd
 8012494:	080126d3 	.word	0x080126d3
 8012498:	080126d3 	.word	0x080126d3
 801249c:	08012673 	.word	0x08012673
 80124a0:	0801269f 	.word	0x0801269f
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80124aa:	681b      	ldr	r3, [r3, #0]
 80124ac:	687a      	ldr	r2, [r7, #4]
 80124ae:	7c12      	ldrb	r2, [r2, #16]
 80124b0:	f107 0108 	add.w	r1, r7, #8
 80124b4:	4610      	mov	r0, r2
 80124b6:	4798      	blx	r3
 80124b8:	60f8      	str	r0, [r7, #12]
    break;
 80124ba:	e112      	b.n	80126e2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	7c1b      	ldrb	r3, [r3, #16]
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	d10d      	bne.n	80124e0 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80124ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80124cc:	f107 0208 	add.w	r2, r7, #8
 80124d0:	4610      	mov	r0, r2
 80124d2:	4798      	blx	r3
 80124d4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80124d6:	68fb      	ldr	r3, [r7, #12]
 80124d8:	3301      	adds	r3, #1
 80124da:	2202      	movs	r2, #2
 80124dc:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80124de:	e100      	b.n	80126e2 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80124e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124e8:	f107 0208 	add.w	r2, r7, #8
 80124ec:	4610      	mov	r0, r2
 80124ee:	4798      	blx	r3
 80124f0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80124f2:	68fb      	ldr	r3, [r7, #12]
 80124f4:	3301      	adds	r3, #1
 80124f6:	2202      	movs	r2, #2
 80124f8:	701a      	strb	r2, [r3, #0]
    break;
 80124fa:	e0f2      	b.n	80126e2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80124fc:	683b      	ldr	r3, [r7, #0]
 80124fe:	885b      	ldrh	r3, [r3, #2]
 8012500:	b2db      	uxtb	r3, r3
 8012502:	2b05      	cmp	r3, #5
 8012504:	f200 80ac 	bhi.w	8012660 <USBD_GetDescriptor+0x204>
 8012508:	a201      	add	r2, pc, #4	; (adr r2, 8012510 <USBD_GetDescriptor+0xb4>)
 801250a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801250e:	bf00      	nop
 8012510:	08012529 	.word	0x08012529
 8012514:	0801255d 	.word	0x0801255d
 8012518:	08012591 	.word	0x08012591
 801251c:	080125c5 	.word	0x080125c5
 8012520:	080125f9 	.word	0x080125f9
 8012524:	0801262d 	.word	0x0801262d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801252e:	685b      	ldr	r3, [r3, #4]
 8012530:	2b00      	cmp	r3, #0
 8012532:	d00b      	beq.n	801254c <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801253a:	685b      	ldr	r3, [r3, #4]
 801253c:	687a      	ldr	r2, [r7, #4]
 801253e:	7c12      	ldrb	r2, [r2, #16]
 8012540:	f107 0108 	add.w	r1, r7, #8
 8012544:	4610      	mov	r0, r2
 8012546:	4798      	blx	r3
 8012548:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801254a:	e091      	b.n	8012670 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 801254c:	6839      	ldr	r1, [r7, #0]
 801254e:	6878      	ldr	r0, [r7, #4]
 8012550:	f000 faaa 	bl	8012aa8 <USBD_CtlError>
        err++;
 8012554:	7afb      	ldrb	r3, [r7, #11]
 8012556:	3301      	adds	r3, #1
 8012558:	72fb      	strb	r3, [r7, #11]
      break;
 801255a:	e089      	b.n	8012670 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012562:	689b      	ldr	r3, [r3, #8]
 8012564:	2b00      	cmp	r3, #0
 8012566:	d00b      	beq.n	8012580 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801256e:	689b      	ldr	r3, [r3, #8]
 8012570:	687a      	ldr	r2, [r7, #4]
 8012572:	7c12      	ldrb	r2, [r2, #16]
 8012574:	f107 0108 	add.w	r1, r7, #8
 8012578:	4610      	mov	r0, r2
 801257a:	4798      	blx	r3
 801257c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801257e:	e077      	b.n	8012670 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8012580:	6839      	ldr	r1, [r7, #0]
 8012582:	6878      	ldr	r0, [r7, #4]
 8012584:	f000 fa90 	bl	8012aa8 <USBD_CtlError>
        err++;
 8012588:	7afb      	ldrb	r3, [r7, #11]
 801258a:	3301      	adds	r3, #1
 801258c:	72fb      	strb	r3, [r7, #11]
      break;
 801258e:	e06f      	b.n	8012670 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012596:	68db      	ldr	r3, [r3, #12]
 8012598:	2b00      	cmp	r3, #0
 801259a:	d00b      	beq.n	80125b4 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80125a2:	68db      	ldr	r3, [r3, #12]
 80125a4:	687a      	ldr	r2, [r7, #4]
 80125a6:	7c12      	ldrb	r2, [r2, #16]
 80125a8:	f107 0108 	add.w	r1, r7, #8
 80125ac:	4610      	mov	r0, r2
 80125ae:	4798      	blx	r3
 80125b0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80125b2:	e05d      	b.n	8012670 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80125b4:	6839      	ldr	r1, [r7, #0]
 80125b6:	6878      	ldr	r0, [r7, #4]
 80125b8:	f000 fa76 	bl	8012aa8 <USBD_CtlError>
        err++;
 80125bc:	7afb      	ldrb	r3, [r7, #11]
 80125be:	3301      	adds	r3, #1
 80125c0:	72fb      	strb	r3, [r7, #11]
      break;
 80125c2:	e055      	b.n	8012670 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80125ca:	691b      	ldr	r3, [r3, #16]
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d00b      	beq.n	80125e8 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80125d6:	691b      	ldr	r3, [r3, #16]
 80125d8:	687a      	ldr	r2, [r7, #4]
 80125da:	7c12      	ldrb	r2, [r2, #16]
 80125dc:	f107 0108 	add.w	r1, r7, #8
 80125e0:	4610      	mov	r0, r2
 80125e2:	4798      	blx	r3
 80125e4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80125e6:	e043      	b.n	8012670 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80125e8:	6839      	ldr	r1, [r7, #0]
 80125ea:	6878      	ldr	r0, [r7, #4]
 80125ec:	f000 fa5c 	bl	8012aa8 <USBD_CtlError>
        err++;
 80125f0:	7afb      	ldrb	r3, [r7, #11]
 80125f2:	3301      	adds	r3, #1
 80125f4:	72fb      	strb	r3, [r7, #11]
      break;
 80125f6:	e03b      	b.n	8012670 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80125fe:	695b      	ldr	r3, [r3, #20]
 8012600:	2b00      	cmp	r3, #0
 8012602:	d00b      	beq.n	801261c <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801260a:	695b      	ldr	r3, [r3, #20]
 801260c:	687a      	ldr	r2, [r7, #4]
 801260e:	7c12      	ldrb	r2, [r2, #16]
 8012610:	f107 0108 	add.w	r1, r7, #8
 8012614:	4610      	mov	r0, r2
 8012616:	4798      	blx	r3
 8012618:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801261a:	e029      	b.n	8012670 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 801261c:	6839      	ldr	r1, [r7, #0]
 801261e:	6878      	ldr	r0, [r7, #4]
 8012620:	f000 fa42 	bl	8012aa8 <USBD_CtlError>
        err++;
 8012624:	7afb      	ldrb	r3, [r7, #11]
 8012626:	3301      	adds	r3, #1
 8012628:	72fb      	strb	r3, [r7, #11]
      break;
 801262a:	e021      	b.n	8012670 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012632:	699b      	ldr	r3, [r3, #24]
 8012634:	2b00      	cmp	r3, #0
 8012636:	d00b      	beq.n	8012650 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801263e:	699b      	ldr	r3, [r3, #24]
 8012640:	687a      	ldr	r2, [r7, #4]
 8012642:	7c12      	ldrb	r2, [r2, #16]
 8012644:	f107 0108 	add.w	r1, r7, #8
 8012648:	4610      	mov	r0, r2
 801264a:	4798      	blx	r3
 801264c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801264e:	e00f      	b.n	8012670 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8012650:	6839      	ldr	r1, [r7, #0]
 8012652:	6878      	ldr	r0, [r7, #4]
 8012654:	f000 fa28 	bl	8012aa8 <USBD_CtlError>
        err++;
 8012658:	7afb      	ldrb	r3, [r7, #11]
 801265a:	3301      	adds	r3, #1
 801265c:	72fb      	strb	r3, [r7, #11]
      break;
 801265e:	e007      	b.n	8012670 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8012660:	6839      	ldr	r1, [r7, #0]
 8012662:	6878      	ldr	r0, [r7, #4]
 8012664:	f000 fa20 	bl	8012aa8 <USBD_CtlError>
      err++;
 8012668:	7afb      	ldrb	r3, [r7, #11]
 801266a:	3301      	adds	r3, #1
 801266c:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 801266e:	bf00      	nop
    }
    break;
 8012670:	e037      	b.n	80126e2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	7c1b      	ldrb	r3, [r3, #16]
 8012676:	2b00      	cmp	r3, #0
 8012678:	d109      	bne.n	801268e <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012682:	f107 0208 	add.w	r2, r7, #8
 8012686:	4610      	mov	r0, r2
 8012688:	4798      	blx	r3
 801268a:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 801268c:	e029      	b.n	80126e2 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 801268e:	6839      	ldr	r1, [r7, #0]
 8012690:	6878      	ldr	r0, [r7, #4]
 8012692:	f000 fa09 	bl	8012aa8 <USBD_CtlError>
      err++;
 8012696:	7afb      	ldrb	r3, [r7, #11]
 8012698:	3301      	adds	r3, #1
 801269a:	72fb      	strb	r3, [r7, #11]
    break;
 801269c:	e021      	b.n	80126e2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	7c1b      	ldrb	r3, [r3, #16]
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d10d      	bne.n	80126c2 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80126ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80126ae:	f107 0208 	add.w	r2, r7, #8
 80126b2:	4610      	mov	r0, r2
 80126b4:	4798      	blx	r3
 80126b6:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80126b8:	68fb      	ldr	r3, [r7, #12]
 80126ba:	3301      	adds	r3, #1
 80126bc:	2207      	movs	r2, #7
 80126be:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80126c0:	e00f      	b.n	80126e2 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80126c2:	6839      	ldr	r1, [r7, #0]
 80126c4:	6878      	ldr	r0, [r7, #4]
 80126c6:	f000 f9ef 	bl	8012aa8 <USBD_CtlError>
      err++;
 80126ca:	7afb      	ldrb	r3, [r7, #11]
 80126cc:	3301      	adds	r3, #1
 80126ce:	72fb      	strb	r3, [r7, #11]
    break;
 80126d0:	e007      	b.n	80126e2 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 80126d2:	6839      	ldr	r1, [r7, #0]
 80126d4:	6878      	ldr	r0, [r7, #4]
 80126d6:	f000 f9e7 	bl	8012aa8 <USBD_CtlError>
    err++;
 80126da:	7afb      	ldrb	r3, [r7, #11]
 80126dc:	3301      	adds	r3, #1
 80126de:	72fb      	strb	r3, [r7, #11]
    break;
 80126e0:	bf00      	nop
  }

  if (err != 0U)
 80126e2:	7afb      	ldrb	r3, [r7, #11]
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d11e      	bne.n	8012726 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 80126e8:	683b      	ldr	r3, [r7, #0]
 80126ea:	88db      	ldrh	r3, [r3, #6]
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d016      	beq.n	801271e <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 80126f0:	893b      	ldrh	r3, [r7, #8]
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	d00e      	beq.n	8012714 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 80126f6:	683b      	ldr	r3, [r7, #0]
 80126f8:	88da      	ldrh	r2, [r3, #6]
 80126fa:	893b      	ldrh	r3, [r7, #8]
 80126fc:	4293      	cmp	r3, r2
 80126fe:	bf28      	it	cs
 8012700:	4613      	movcs	r3, r2
 8012702:	b29b      	uxth	r3, r3
 8012704:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8012706:	893b      	ldrh	r3, [r7, #8]
 8012708:	461a      	mov	r2, r3
 801270a:	68f9      	ldr	r1, [r7, #12]
 801270c:	6878      	ldr	r0, [r7, #4]
 801270e:	f000 fa3c 	bl	8012b8a <USBD_CtlSendData>
 8012712:	e009      	b.n	8012728 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8012714:	6839      	ldr	r1, [r7, #0]
 8012716:	6878      	ldr	r0, [r7, #4]
 8012718:	f000 f9c6 	bl	8012aa8 <USBD_CtlError>
 801271c:	e004      	b.n	8012728 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 801271e:	6878      	ldr	r0, [r7, #4]
 8012720:	f000 fa70 	bl	8012c04 <USBD_CtlSendStatus>
 8012724:	e000      	b.n	8012728 <USBD_GetDescriptor+0x2cc>
    return;
 8012726:	bf00      	nop
    }
  }
}
 8012728:	3710      	adds	r7, #16
 801272a:	46bd      	mov	sp, r7
 801272c:	bd80      	pop	{r7, pc}
 801272e:	bf00      	nop

08012730 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012730:	b580      	push	{r7, lr}
 8012732:	b084      	sub	sp, #16
 8012734:	af00      	add	r7, sp, #0
 8012736:	6078      	str	r0, [r7, #4]
 8012738:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801273a:	683b      	ldr	r3, [r7, #0]
 801273c:	889b      	ldrh	r3, [r3, #4]
 801273e:	2b00      	cmp	r3, #0
 8012740:	d130      	bne.n	80127a4 <USBD_SetAddress+0x74>
 8012742:	683b      	ldr	r3, [r7, #0]
 8012744:	88db      	ldrh	r3, [r3, #6]
 8012746:	2b00      	cmp	r3, #0
 8012748:	d12c      	bne.n	80127a4 <USBD_SetAddress+0x74>
 801274a:	683b      	ldr	r3, [r7, #0]
 801274c:	885b      	ldrh	r3, [r3, #2]
 801274e:	2b7f      	cmp	r3, #127	; 0x7f
 8012750:	d828      	bhi.n	80127a4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8012752:	683b      	ldr	r3, [r7, #0]
 8012754:	885b      	ldrh	r3, [r3, #2]
 8012756:	b2db      	uxtb	r3, r3
 8012758:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801275c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012764:	2b03      	cmp	r3, #3
 8012766:	d104      	bne.n	8012772 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8012768:	6839      	ldr	r1, [r7, #0]
 801276a:	6878      	ldr	r0, [r7, #4]
 801276c:	f000 f99c 	bl	8012aa8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012770:	e01c      	b.n	80127ac <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	7bfa      	ldrb	r2, [r7, #15]
 8012776:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801277a:	7bfb      	ldrb	r3, [r7, #15]
 801277c:	4619      	mov	r1, r3
 801277e:	6878      	ldr	r0, [r7, #4]
 8012780:	f003 f9b5 	bl	8015aee <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8012784:	6878      	ldr	r0, [r7, #4]
 8012786:	f000 fa3d 	bl	8012c04 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801278a:	7bfb      	ldrb	r3, [r7, #15]
 801278c:	2b00      	cmp	r3, #0
 801278e:	d004      	beq.n	801279a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	2202      	movs	r2, #2
 8012794:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012798:	e008      	b.n	80127ac <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	2201      	movs	r2, #1
 801279e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80127a2:	e003      	b.n	80127ac <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80127a4:	6839      	ldr	r1, [r7, #0]
 80127a6:	6878      	ldr	r0, [r7, #4]
 80127a8:	f000 f97e 	bl	8012aa8 <USBD_CtlError>
  }
}
 80127ac:	bf00      	nop
 80127ae:	3710      	adds	r7, #16
 80127b0:	46bd      	mov	sp, r7
 80127b2:	bd80      	pop	{r7, pc}

080127b4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80127b4:	b580      	push	{r7, lr}
 80127b6:	b084      	sub	sp, #16
 80127b8:	af00      	add	r7, sp, #0
 80127ba:	6078      	str	r0, [r7, #4]
 80127bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80127be:	2300      	movs	r3, #0
 80127c0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80127c2:	683b      	ldr	r3, [r7, #0]
 80127c4:	885b      	ldrh	r3, [r3, #2]
 80127c6:	b2da      	uxtb	r2, r3
 80127c8:	4b4b      	ldr	r3, [pc, #300]	; (80128f8 <USBD_SetConfig+0x144>)
 80127ca:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80127cc:	4b4a      	ldr	r3, [pc, #296]	; (80128f8 <USBD_SetConfig+0x144>)
 80127ce:	781b      	ldrb	r3, [r3, #0]
 80127d0:	2b01      	cmp	r3, #1
 80127d2:	d905      	bls.n	80127e0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80127d4:	6839      	ldr	r1, [r7, #0]
 80127d6:	6878      	ldr	r0, [r7, #4]
 80127d8:	f000 f966 	bl	8012aa8 <USBD_CtlError>
    return USBD_FAIL;
 80127dc:	2303      	movs	r3, #3
 80127de:	e087      	b.n	80128f0 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80127e6:	2b02      	cmp	r3, #2
 80127e8:	d002      	beq.n	80127f0 <USBD_SetConfig+0x3c>
 80127ea:	2b03      	cmp	r3, #3
 80127ec:	d025      	beq.n	801283a <USBD_SetConfig+0x86>
 80127ee:	e071      	b.n	80128d4 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 80127f0:	4b41      	ldr	r3, [pc, #260]	; (80128f8 <USBD_SetConfig+0x144>)
 80127f2:	781b      	ldrb	r3, [r3, #0]
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	d01c      	beq.n	8012832 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 80127f8:	4b3f      	ldr	r3, [pc, #252]	; (80128f8 <USBD_SetConfig+0x144>)
 80127fa:	781b      	ldrb	r3, [r3, #0]
 80127fc:	461a      	mov	r2, r3
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8012802:	4b3d      	ldr	r3, [pc, #244]	; (80128f8 <USBD_SetConfig+0x144>)
 8012804:	781b      	ldrb	r3, [r3, #0]
 8012806:	4619      	mov	r1, r3
 8012808:	6878      	ldr	r0, [r7, #4]
 801280a:	f7ff f9a8 	bl	8011b5e <USBD_SetClassConfig>
 801280e:	4603      	mov	r3, r0
 8012810:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8012812:	7bfb      	ldrb	r3, [r7, #15]
 8012814:	2b00      	cmp	r3, #0
 8012816:	d004      	beq.n	8012822 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8012818:	6839      	ldr	r1, [r7, #0]
 801281a:	6878      	ldr	r0, [r7, #4]
 801281c:	f000 f944 	bl	8012aa8 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8012820:	e065      	b.n	80128ee <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8012822:	6878      	ldr	r0, [r7, #4]
 8012824:	f000 f9ee 	bl	8012c04 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	2203      	movs	r2, #3
 801282c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8012830:	e05d      	b.n	80128ee <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8012832:	6878      	ldr	r0, [r7, #4]
 8012834:	f000 f9e6 	bl	8012c04 <USBD_CtlSendStatus>
    break;
 8012838:	e059      	b.n	80128ee <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 801283a:	4b2f      	ldr	r3, [pc, #188]	; (80128f8 <USBD_SetConfig+0x144>)
 801283c:	781b      	ldrb	r3, [r3, #0]
 801283e:	2b00      	cmp	r3, #0
 8012840:	d112      	bne.n	8012868 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	2202      	movs	r2, #2
 8012846:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 801284a:	4b2b      	ldr	r3, [pc, #172]	; (80128f8 <USBD_SetConfig+0x144>)
 801284c:	781b      	ldrb	r3, [r3, #0]
 801284e:	461a      	mov	r2, r3
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012854:	4b28      	ldr	r3, [pc, #160]	; (80128f8 <USBD_SetConfig+0x144>)
 8012856:	781b      	ldrb	r3, [r3, #0]
 8012858:	4619      	mov	r1, r3
 801285a:	6878      	ldr	r0, [r7, #4]
 801285c:	f7ff f99b 	bl	8011b96 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8012860:	6878      	ldr	r0, [r7, #4]
 8012862:	f000 f9cf 	bl	8012c04 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8012866:	e042      	b.n	80128ee <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8012868:	4b23      	ldr	r3, [pc, #140]	; (80128f8 <USBD_SetConfig+0x144>)
 801286a:	781b      	ldrb	r3, [r3, #0]
 801286c:	461a      	mov	r2, r3
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	685b      	ldr	r3, [r3, #4]
 8012872:	429a      	cmp	r2, r3
 8012874:	d02a      	beq.n	80128cc <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	685b      	ldr	r3, [r3, #4]
 801287a:	b2db      	uxtb	r3, r3
 801287c:	4619      	mov	r1, r3
 801287e:	6878      	ldr	r0, [r7, #4]
 8012880:	f7ff f989 	bl	8011b96 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8012884:	4b1c      	ldr	r3, [pc, #112]	; (80128f8 <USBD_SetConfig+0x144>)
 8012886:	781b      	ldrb	r3, [r3, #0]
 8012888:	461a      	mov	r2, r3
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 801288e:	4b1a      	ldr	r3, [pc, #104]	; (80128f8 <USBD_SetConfig+0x144>)
 8012890:	781b      	ldrb	r3, [r3, #0]
 8012892:	4619      	mov	r1, r3
 8012894:	6878      	ldr	r0, [r7, #4]
 8012896:	f7ff f962 	bl	8011b5e <USBD_SetClassConfig>
 801289a:	4603      	mov	r3, r0
 801289c:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 801289e:	7bfb      	ldrb	r3, [r7, #15]
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d00f      	beq.n	80128c4 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 80128a4:	6839      	ldr	r1, [r7, #0]
 80128a6:	6878      	ldr	r0, [r7, #4]
 80128a8:	f000 f8fe 	bl	8012aa8 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	685b      	ldr	r3, [r3, #4]
 80128b0:	b2db      	uxtb	r3, r3
 80128b2:	4619      	mov	r1, r3
 80128b4:	6878      	ldr	r0, [r7, #4]
 80128b6:	f7ff f96e 	bl	8011b96 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	2202      	movs	r2, #2
 80128be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80128c2:	e014      	b.n	80128ee <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80128c4:	6878      	ldr	r0, [r7, #4]
 80128c6:	f000 f99d 	bl	8012c04 <USBD_CtlSendStatus>
    break;
 80128ca:	e010      	b.n	80128ee <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80128cc:	6878      	ldr	r0, [r7, #4]
 80128ce:	f000 f999 	bl	8012c04 <USBD_CtlSendStatus>
    break;
 80128d2:	e00c      	b.n	80128ee <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 80128d4:	6839      	ldr	r1, [r7, #0]
 80128d6:	6878      	ldr	r0, [r7, #4]
 80128d8:	f000 f8e6 	bl	8012aa8 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80128dc:	4b06      	ldr	r3, [pc, #24]	; (80128f8 <USBD_SetConfig+0x144>)
 80128de:	781b      	ldrb	r3, [r3, #0]
 80128e0:	4619      	mov	r1, r3
 80128e2:	6878      	ldr	r0, [r7, #4]
 80128e4:	f7ff f957 	bl	8011b96 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80128e8:	2303      	movs	r3, #3
 80128ea:	73fb      	strb	r3, [r7, #15]
    break;
 80128ec:	bf00      	nop
  }

  return ret;
 80128ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80128f0:	4618      	mov	r0, r3
 80128f2:	3710      	adds	r7, #16
 80128f4:	46bd      	mov	sp, r7
 80128f6:	bd80      	pop	{r7, pc}
 80128f8:	24040218 	.word	0x24040218

080128fc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80128fc:	b580      	push	{r7, lr}
 80128fe:	b082      	sub	sp, #8
 8012900:	af00      	add	r7, sp, #0
 8012902:	6078      	str	r0, [r7, #4]
 8012904:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8012906:	683b      	ldr	r3, [r7, #0]
 8012908:	88db      	ldrh	r3, [r3, #6]
 801290a:	2b01      	cmp	r3, #1
 801290c:	d004      	beq.n	8012918 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801290e:	6839      	ldr	r1, [r7, #0]
 8012910:	6878      	ldr	r0, [r7, #4]
 8012912:	f000 f8c9 	bl	8012aa8 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8012916:	e021      	b.n	801295c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801291e:	2b01      	cmp	r3, #1
 8012920:	db17      	blt.n	8012952 <USBD_GetConfig+0x56>
 8012922:	2b02      	cmp	r3, #2
 8012924:	dd02      	ble.n	801292c <USBD_GetConfig+0x30>
 8012926:	2b03      	cmp	r3, #3
 8012928:	d00b      	beq.n	8012942 <USBD_GetConfig+0x46>
 801292a:	e012      	b.n	8012952 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	2200      	movs	r2, #0
 8012930:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	3308      	adds	r3, #8
 8012936:	2201      	movs	r2, #1
 8012938:	4619      	mov	r1, r3
 801293a:	6878      	ldr	r0, [r7, #4]
 801293c:	f000 f925 	bl	8012b8a <USBD_CtlSendData>
      break;
 8012940:	e00c      	b.n	801295c <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	3304      	adds	r3, #4
 8012946:	2201      	movs	r2, #1
 8012948:	4619      	mov	r1, r3
 801294a:	6878      	ldr	r0, [r7, #4]
 801294c:	f000 f91d 	bl	8012b8a <USBD_CtlSendData>
      break;
 8012950:	e004      	b.n	801295c <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8012952:	6839      	ldr	r1, [r7, #0]
 8012954:	6878      	ldr	r0, [r7, #4]
 8012956:	f000 f8a7 	bl	8012aa8 <USBD_CtlError>
      break;
 801295a:	bf00      	nop
}
 801295c:	bf00      	nop
 801295e:	3708      	adds	r7, #8
 8012960:	46bd      	mov	sp, r7
 8012962:	bd80      	pop	{r7, pc}

08012964 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012964:	b580      	push	{r7, lr}
 8012966:	b082      	sub	sp, #8
 8012968:	af00      	add	r7, sp, #0
 801296a:	6078      	str	r0, [r7, #4]
 801296c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012974:	3b01      	subs	r3, #1
 8012976:	2b02      	cmp	r3, #2
 8012978:	d81e      	bhi.n	80129b8 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 801297a:	683b      	ldr	r3, [r7, #0]
 801297c:	88db      	ldrh	r3, [r3, #6]
 801297e:	2b02      	cmp	r3, #2
 8012980:	d004      	beq.n	801298c <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8012982:	6839      	ldr	r1, [r7, #0]
 8012984:	6878      	ldr	r0, [r7, #4]
 8012986:	f000 f88f 	bl	8012aa8 <USBD_CtlError>
      break;
 801298a:	e01a      	b.n	80129c2 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	2201      	movs	r2, #1
 8012990:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8012998:	2b00      	cmp	r3, #0
 801299a:	d005      	beq.n	80129a8 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	68db      	ldr	r3, [r3, #12]
 80129a0:	f043 0202 	orr.w	r2, r3, #2
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	330c      	adds	r3, #12
 80129ac:	2202      	movs	r2, #2
 80129ae:	4619      	mov	r1, r3
 80129b0:	6878      	ldr	r0, [r7, #4]
 80129b2:	f000 f8ea 	bl	8012b8a <USBD_CtlSendData>
    break;
 80129b6:	e004      	b.n	80129c2 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80129b8:	6839      	ldr	r1, [r7, #0]
 80129ba:	6878      	ldr	r0, [r7, #4]
 80129bc:	f000 f874 	bl	8012aa8 <USBD_CtlError>
    break;
 80129c0:	bf00      	nop
  }
}
 80129c2:	bf00      	nop
 80129c4:	3708      	adds	r7, #8
 80129c6:	46bd      	mov	sp, r7
 80129c8:	bd80      	pop	{r7, pc}

080129ca <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80129ca:	b580      	push	{r7, lr}
 80129cc:	b082      	sub	sp, #8
 80129ce:	af00      	add	r7, sp, #0
 80129d0:	6078      	str	r0, [r7, #4]
 80129d2:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80129d4:	683b      	ldr	r3, [r7, #0]
 80129d6:	885b      	ldrh	r3, [r3, #2]
 80129d8:	2b01      	cmp	r3, #1
 80129da:	d106      	bne.n	80129ea <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	2201      	movs	r2, #1
 80129e0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80129e4:	6878      	ldr	r0, [r7, #4]
 80129e6:	f000 f90d 	bl	8012c04 <USBD_CtlSendStatus>
  }
}
 80129ea:	bf00      	nop
 80129ec:	3708      	adds	r7, #8
 80129ee:	46bd      	mov	sp, r7
 80129f0:	bd80      	pop	{r7, pc}

080129f2 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80129f2:	b580      	push	{r7, lr}
 80129f4:	b082      	sub	sp, #8
 80129f6:	af00      	add	r7, sp, #0
 80129f8:	6078      	str	r0, [r7, #4]
 80129fa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012a02:	3b01      	subs	r3, #1
 8012a04:	2b02      	cmp	r3, #2
 8012a06:	d80b      	bhi.n	8012a20 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012a08:	683b      	ldr	r3, [r7, #0]
 8012a0a:	885b      	ldrh	r3, [r3, #2]
 8012a0c:	2b01      	cmp	r3, #1
 8012a0e:	d10c      	bne.n	8012a2a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	2200      	movs	r2, #0
 8012a14:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8012a18:	6878      	ldr	r0, [r7, #4]
 8012a1a:	f000 f8f3 	bl	8012c04 <USBD_CtlSendStatus>
      }
      break;
 8012a1e:	e004      	b.n	8012a2a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8012a20:	6839      	ldr	r1, [r7, #0]
 8012a22:	6878      	ldr	r0, [r7, #4]
 8012a24:	f000 f840 	bl	8012aa8 <USBD_CtlError>
      break;
 8012a28:	e000      	b.n	8012a2c <USBD_ClrFeature+0x3a>
      break;
 8012a2a:	bf00      	nop
  }
}
 8012a2c:	bf00      	nop
 8012a2e:	3708      	adds	r7, #8
 8012a30:	46bd      	mov	sp, r7
 8012a32:	bd80      	pop	{r7, pc}

08012a34 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8012a34:	b580      	push	{r7, lr}
 8012a36:	b084      	sub	sp, #16
 8012a38:	af00      	add	r7, sp, #0
 8012a3a:	6078      	str	r0, [r7, #4]
 8012a3c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8012a3e:	683b      	ldr	r3, [r7, #0]
 8012a40:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8012a42:	68fb      	ldr	r3, [r7, #12]
 8012a44:	781a      	ldrb	r2, [r3, #0]
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8012a4a:	68fb      	ldr	r3, [r7, #12]
 8012a4c:	3301      	adds	r3, #1
 8012a4e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8012a50:	68fb      	ldr	r3, [r7, #12]
 8012a52:	781a      	ldrb	r2, [r3, #0]
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8012a58:	68fb      	ldr	r3, [r7, #12]
 8012a5a:	3301      	adds	r3, #1
 8012a5c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8012a5e:	68f8      	ldr	r0, [r7, #12]
 8012a60:	f7ff fad4 	bl	801200c <SWAPBYTE>
 8012a64:	4603      	mov	r3, r0
 8012a66:	461a      	mov	r2, r3
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8012a6c:	68fb      	ldr	r3, [r7, #12]
 8012a6e:	3301      	adds	r3, #1
 8012a70:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012a72:	68fb      	ldr	r3, [r7, #12]
 8012a74:	3301      	adds	r3, #1
 8012a76:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8012a78:	68f8      	ldr	r0, [r7, #12]
 8012a7a:	f7ff fac7 	bl	801200c <SWAPBYTE>
 8012a7e:	4603      	mov	r3, r0
 8012a80:	461a      	mov	r2, r3
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8012a86:	68fb      	ldr	r3, [r7, #12]
 8012a88:	3301      	adds	r3, #1
 8012a8a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012a8c:	68fb      	ldr	r3, [r7, #12]
 8012a8e:	3301      	adds	r3, #1
 8012a90:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8012a92:	68f8      	ldr	r0, [r7, #12]
 8012a94:	f7ff faba 	bl	801200c <SWAPBYTE>
 8012a98:	4603      	mov	r3, r0
 8012a9a:	461a      	mov	r2, r3
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	80da      	strh	r2, [r3, #6]
}
 8012aa0:	bf00      	nop
 8012aa2:	3710      	adds	r7, #16
 8012aa4:	46bd      	mov	sp, r7
 8012aa6:	bd80      	pop	{r7, pc}

08012aa8 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012aa8:	b580      	push	{r7, lr}
 8012aaa:	b082      	sub	sp, #8
 8012aac:	af00      	add	r7, sp, #0
 8012aae:	6078      	str	r0, [r7, #4]
 8012ab0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8012ab2:	2180      	movs	r1, #128	; 0x80
 8012ab4:	6878      	ldr	r0, [r7, #4]
 8012ab6:	f002 ffb0 	bl	8015a1a <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8012aba:	2100      	movs	r1, #0
 8012abc:	6878      	ldr	r0, [r7, #4]
 8012abe:	f002 ffac 	bl	8015a1a <USBD_LL_StallEP>
}
 8012ac2:	bf00      	nop
 8012ac4:	3708      	adds	r7, #8
 8012ac6:	46bd      	mov	sp, r7
 8012ac8:	bd80      	pop	{r7, pc}

08012aca <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8012aca:	b580      	push	{r7, lr}
 8012acc:	b086      	sub	sp, #24
 8012ace:	af00      	add	r7, sp, #0
 8012ad0:	60f8      	str	r0, [r7, #12]
 8012ad2:	60b9      	str	r1, [r7, #8]
 8012ad4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8012ad6:	2300      	movs	r3, #0
 8012ad8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8012ada:	68fb      	ldr	r3, [r7, #12]
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d036      	beq.n	8012b4e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8012ae0:	68fb      	ldr	r3, [r7, #12]
 8012ae2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8012ae4:	6938      	ldr	r0, [r7, #16]
 8012ae6:	f000 f836 	bl	8012b56 <USBD_GetLen>
 8012aea:	4603      	mov	r3, r0
 8012aec:	3301      	adds	r3, #1
 8012aee:	b29b      	uxth	r3, r3
 8012af0:	005b      	lsls	r3, r3, #1
 8012af2:	b29a      	uxth	r2, r3
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8012af8:	7dfb      	ldrb	r3, [r7, #23]
 8012afa:	68ba      	ldr	r2, [r7, #8]
 8012afc:	4413      	add	r3, r2
 8012afe:	687a      	ldr	r2, [r7, #4]
 8012b00:	7812      	ldrb	r2, [r2, #0]
 8012b02:	701a      	strb	r2, [r3, #0]
  idx++;
 8012b04:	7dfb      	ldrb	r3, [r7, #23]
 8012b06:	3301      	adds	r3, #1
 8012b08:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8012b0a:	7dfb      	ldrb	r3, [r7, #23]
 8012b0c:	68ba      	ldr	r2, [r7, #8]
 8012b0e:	4413      	add	r3, r2
 8012b10:	2203      	movs	r2, #3
 8012b12:	701a      	strb	r2, [r3, #0]
  idx++;
 8012b14:	7dfb      	ldrb	r3, [r7, #23]
 8012b16:	3301      	adds	r3, #1
 8012b18:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8012b1a:	e013      	b.n	8012b44 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8012b1c:	7dfb      	ldrb	r3, [r7, #23]
 8012b1e:	68ba      	ldr	r2, [r7, #8]
 8012b20:	4413      	add	r3, r2
 8012b22:	693a      	ldr	r2, [r7, #16]
 8012b24:	7812      	ldrb	r2, [r2, #0]
 8012b26:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8012b28:	693b      	ldr	r3, [r7, #16]
 8012b2a:	3301      	adds	r3, #1
 8012b2c:	613b      	str	r3, [r7, #16]
    idx++;
 8012b2e:	7dfb      	ldrb	r3, [r7, #23]
 8012b30:	3301      	adds	r3, #1
 8012b32:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8012b34:	7dfb      	ldrb	r3, [r7, #23]
 8012b36:	68ba      	ldr	r2, [r7, #8]
 8012b38:	4413      	add	r3, r2
 8012b3a:	2200      	movs	r2, #0
 8012b3c:	701a      	strb	r2, [r3, #0]
    idx++;
 8012b3e:	7dfb      	ldrb	r3, [r7, #23]
 8012b40:	3301      	adds	r3, #1
 8012b42:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8012b44:	693b      	ldr	r3, [r7, #16]
 8012b46:	781b      	ldrb	r3, [r3, #0]
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	d1e7      	bne.n	8012b1c <USBD_GetString+0x52>
 8012b4c:	e000      	b.n	8012b50 <USBD_GetString+0x86>
    return;
 8012b4e:	bf00      	nop
  }
}
 8012b50:	3718      	adds	r7, #24
 8012b52:	46bd      	mov	sp, r7
 8012b54:	bd80      	pop	{r7, pc}

08012b56 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8012b56:	b480      	push	{r7}
 8012b58:	b085      	sub	sp, #20
 8012b5a:	af00      	add	r7, sp, #0
 8012b5c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8012b5e:	2300      	movs	r3, #0
 8012b60:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8012b66:	e005      	b.n	8012b74 <USBD_GetLen+0x1e>
  {
    len++;
 8012b68:	7bfb      	ldrb	r3, [r7, #15]
 8012b6a:	3301      	adds	r3, #1
 8012b6c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8012b6e:	68bb      	ldr	r3, [r7, #8]
 8012b70:	3301      	adds	r3, #1
 8012b72:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8012b74:	68bb      	ldr	r3, [r7, #8]
 8012b76:	781b      	ldrb	r3, [r3, #0]
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	d1f5      	bne.n	8012b68 <USBD_GetLen+0x12>
  }

  return len;
 8012b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b7e:	4618      	mov	r0, r3
 8012b80:	3714      	adds	r7, #20
 8012b82:	46bd      	mov	sp, r7
 8012b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b88:	4770      	bx	lr

08012b8a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8012b8a:	b580      	push	{r7, lr}
 8012b8c:	b084      	sub	sp, #16
 8012b8e:	af00      	add	r7, sp, #0
 8012b90:	60f8      	str	r0, [r7, #12]
 8012b92:	60b9      	str	r1, [r7, #8]
 8012b94:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8012b96:	68fb      	ldr	r3, [r7, #12]
 8012b98:	2202      	movs	r2, #2
 8012b9a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8012b9e:	68fb      	ldr	r3, [r7, #12]
 8012ba0:	687a      	ldr	r2, [r7, #4]
 8012ba2:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8012ba4:	68fb      	ldr	r3, [r7, #12]
 8012ba6:	687a      	ldr	r2, [r7, #4]
 8012ba8:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	68ba      	ldr	r2, [r7, #8]
 8012bae:	2100      	movs	r1, #0
 8012bb0:	68f8      	ldr	r0, [r7, #12]
 8012bb2:	f002 ffbb 	bl	8015b2c <USBD_LL_Transmit>

  return USBD_OK;
 8012bb6:	2300      	movs	r3, #0
}
 8012bb8:	4618      	mov	r0, r3
 8012bba:	3710      	adds	r7, #16
 8012bbc:	46bd      	mov	sp, r7
 8012bbe:	bd80      	pop	{r7, pc}

08012bc0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8012bc0:	b580      	push	{r7, lr}
 8012bc2:	b084      	sub	sp, #16
 8012bc4:	af00      	add	r7, sp, #0
 8012bc6:	60f8      	str	r0, [r7, #12]
 8012bc8:	60b9      	str	r1, [r7, #8]
 8012bca:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	68ba      	ldr	r2, [r7, #8]
 8012bd0:	2100      	movs	r1, #0
 8012bd2:	68f8      	ldr	r0, [r7, #12]
 8012bd4:	f002 ffaa 	bl	8015b2c <USBD_LL_Transmit>

  return USBD_OK;
 8012bd8:	2300      	movs	r3, #0
}
 8012bda:	4618      	mov	r0, r3
 8012bdc:	3710      	adds	r7, #16
 8012bde:	46bd      	mov	sp, r7
 8012be0:	bd80      	pop	{r7, pc}

08012be2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8012be2:	b580      	push	{r7, lr}
 8012be4:	b084      	sub	sp, #16
 8012be6:	af00      	add	r7, sp, #0
 8012be8:	60f8      	str	r0, [r7, #12]
 8012bea:	60b9      	str	r1, [r7, #8]
 8012bec:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	68ba      	ldr	r2, [r7, #8]
 8012bf2:	2100      	movs	r1, #0
 8012bf4:	68f8      	ldr	r0, [r7, #12]
 8012bf6:	f002 ffba 	bl	8015b6e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012bfa:	2300      	movs	r3, #0
}
 8012bfc:	4618      	mov	r0, r3
 8012bfe:	3710      	adds	r7, #16
 8012c00:	46bd      	mov	sp, r7
 8012c02:	bd80      	pop	{r7, pc}

08012c04 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8012c04:	b580      	push	{r7, lr}
 8012c06:	b082      	sub	sp, #8
 8012c08:	af00      	add	r7, sp, #0
 8012c0a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	2204      	movs	r2, #4
 8012c10:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8012c14:	2300      	movs	r3, #0
 8012c16:	2200      	movs	r2, #0
 8012c18:	2100      	movs	r1, #0
 8012c1a:	6878      	ldr	r0, [r7, #4]
 8012c1c:	f002 ff86 	bl	8015b2c <USBD_LL_Transmit>

  return USBD_OK;
 8012c20:	2300      	movs	r3, #0
}
 8012c22:	4618      	mov	r0, r3
 8012c24:	3708      	adds	r7, #8
 8012c26:	46bd      	mov	sp, r7
 8012c28:	bd80      	pop	{r7, pc}

08012c2a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8012c2a:	b580      	push	{r7, lr}
 8012c2c:	b082      	sub	sp, #8
 8012c2e:	af00      	add	r7, sp, #0
 8012c30:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	2205      	movs	r2, #5
 8012c36:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012c3a:	2300      	movs	r3, #0
 8012c3c:	2200      	movs	r2, #0
 8012c3e:	2100      	movs	r1, #0
 8012c40:	6878      	ldr	r0, [r7, #4]
 8012c42:	f002 ff94 	bl	8015b6e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012c46:	2300      	movs	r3, #0
}
 8012c48:	4618      	mov	r0, r3
 8012c4a:	3708      	adds	r7, #8
 8012c4c:	46bd      	mov	sp, r7
 8012c4e:	bd80      	pop	{r7, pc}

08012c50 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8012c50:	b580      	push	{r7, lr}
 8012c52:	b084      	sub	sp, #16
 8012c54:	af00      	add	r7, sp, #0
 8012c56:	4603      	mov	r3, r0
 8012c58:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8012c5a:	79fb      	ldrb	r3, [r7, #7]
 8012c5c:	4a08      	ldr	r2, [pc, #32]	; (8012c80 <disk_status+0x30>)
 8012c5e:	009b      	lsls	r3, r3, #2
 8012c60:	4413      	add	r3, r2
 8012c62:	685b      	ldr	r3, [r3, #4]
 8012c64:	685b      	ldr	r3, [r3, #4]
 8012c66:	79fa      	ldrb	r2, [r7, #7]
 8012c68:	4905      	ldr	r1, [pc, #20]	; (8012c80 <disk_status+0x30>)
 8012c6a:	440a      	add	r2, r1
 8012c6c:	7a12      	ldrb	r2, [r2, #8]
 8012c6e:	4610      	mov	r0, r2
 8012c70:	4798      	blx	r3
 8012c72:	4603      	mov	r3, r0
 8012c74:	73fb      	strb	r3, [r7, #15]
  return stat;
 8012c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8012c78:	4618      	mov	r0, r3
 8012c7a:	3710      	adds	r7, #16
 8012c7c:	46bd      	mov	sp, r7
 8012c7e:	bd80      	pop	{r7, pc}
 8012c80:	24040244 	.word	0x24040244

08012c84 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8012c84:	b580      	push	{r7, lr}
 8012c86:	b084      	sub	sp, #16
 8012c88:	af00      	add	r7, sp, #0
 8012c8a:	4603      	mov	r3, r0
 8012c8c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8012c8e:	2300      	movs	r3, #0
 8012c90:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8012c92:	79fb      	ldrb	r3, [r7, #7]
 8012c94:	4a0d      	ldr	r2, [pc, #52]	; (8012ccc <disk_initialize+0x48>)
 8012c96:	5cd3      	ldrb	r3, [r2, r3]
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	d111      	bne.n	8012cc0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8012c9c:	79fb      	ldrb	r3, [r7, #7]
 8012c9e:	4a0b      	ldr	r2, [pc, #44]	; (8012ccc <disk_initialize+0x48>)
 8012ca0:	2101      	movs	r1, #1
 8012ca2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8012ca4:	79fb      	ldrb	r3, [r7, #7]
 8012ca6:	4a09      	ldr	r2, [pc, #36]	; (8012ccc <disk_initialize+0x48>)
 8012ca8:	009b      	lsls	r3, r3, #2
 8012caa:	4413      	add	r3, r2
 8012cac:	685b      	ldr	r3, [r3, #4]
 8012cae:	681b      	ldr	r3, [r3, #0]
 8012cb0:	79fa      	ldrb	r2, [r7, #7]
 8012cb2:	4906      	ldr	r1, [pc, #24]	; (8012ccc <disk_initialize+0x48>)
 8012cb4:	440a      	add	r2, r1
 8012cb6:	7a12      	ldrb	r2, [r2, #8]
 8012cb8:	4610      	mov	r0, r2
 8012cba:	4798      	blx	r3
 8012cbc:	4603      	mov	r3, r0
 8012cbe:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8012cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8012cc2:	4618      	mov	r0, r3
 8012cc4:	3710      	adds	r7, #16
 8012cc6:	46bd      	mov	sp, r7
 8012cc8:	bd80      	pop	{r7, pc}
 8012cca:	bf00      	nop
 8012ccc:	24040244 	.word	0x24040244

08012cd0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8012cd0:	b590      	push	{r4, r7, lr}
 8012cd2:	b087      	sub	sp, #28
 8012cd4:	af00      	add	r7, sp, #0
 8012cd6:	60b9      	str	r1, [r7, #8]
 8012cd8:	607a      	str	r2, [r7, #4]
 8012cda:	603b      	str	r3, [r7, #0]
 8012cdc:	4603      	mov	r3, r0
 8012cde:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8012ce0:	7bfb      	ldrb	r3, [r7, #15]
 8012ce2:	4a0a      	ldr	r2, [pc, #40]	; (8012d0c <disk_read+0x3c>)
 8012ce4:	009b      	lsls	r3, r3, #2
 8012ce6:	4413      	add	r3, r2
 8012ce8:	685b      	ldr	r3, [r3, #4]
 8012cea:	689c      	ldr	r4, [r3, #8]
 8012cec:	7bfb      	ldrb	r3, [r7, #15]
 8012cee:	4a07      	ldr	r2, [pc, #28]	; (8012d0c <disk_read+0x3c>)
 8012cf0:	4413      	add	r3, r2
 8012cf2:	7a18      	ldrb	r0, [r3, #8]
 8012cf4:	683b      	ldr	r3, [r7, #0]
 8012cf6:	687a      	ldr	r2, [r7, #4]
 8012cf8:	68b9      	ldr	r1, [r7, #8]
 8012cfa:	47a0      	blx	r4
 8012cfc:	4603      	mov	r3, r0
 8012cfe:	75fb      	strb	r3, [r7, #23]
  return res;
 8012d00:	7dfb      	ldrb	r3, [r7, #23]
}
 8012d02:	4618      	mov	r0, r3
 8012d04:	371c      	adds	r7, #28
 8012d06:	46bd      	mov	sp, r7
 8012d08:	bd90      	pop	{r4, r7, pc}
 8012d0a:	bf00      	nop
 8012d0c:	24040244 	.word	0x24040244

08012d10 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8012d10:	b590      	push	{r4, r7, lr}
 8012d12:	b087      	sub	sp, #28
 8012d14:	af00      	add	r7, sp, #0
 8012d16:	60b9      	str	r1, [r7, #8]
 8012d18:	607a      	str	r2, [r7, #4]
 8012d1a:	603b      	str	r3, [r7, #0]
 8012d1c:	4603      	mov	r3, r0
 8012d1e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8012d20:	7bfb      	ldrb	r3, [r7, #15]
 8012d22:	4a0a      	ldr	r2, [pc, #40]	; (8012d4c <disk_write+0x3c>)
 8012d24:	009b      	lsls	r3, r3, #2
 8012d26:	4413      	add	r3, r2
 8012d28:	685b      	ldr	r3, [r3, #4]
 8012d2a:	68dc      	ldr	r4, [r3, #12]
 8012d2c:	7bfb      	ldrb	r3, [r7, #15]
 8012d2e:	4a07      	ldr	r2, [pc, #28]	; (8012d4c <disk_write+0x3c>)
 8012d30:	4413      	add	r3, r2
 8012d32:	7a18      	ldrb	r0, [r3, #8]
 8012d34:	683b      	ldr	r3, [r7, #0]
 8012d36:	687a      	ldr	r2, [r7, #4]
 8012d38:	68b9      	ldr	r1, [r7, #8]
 8012d3a:	47a0      	blx	r4
 8012d3c:	4603      	mov	r3, r0
 8012d3e:	75fb      	strb	r3, [r7, #23]
  return res;
 8012d40:	7dfb      	ldrb	r3, [r7, #23]
}
 8012d42:	4618      	mov	r0, r3
 8012d44:	371c      	adds	r7, #28
 8012d46:	46bd      	mov	sp, r7
 8012d48:	bd90      	pop	{r4, r7, pc}
 8012d4a:	bf00      	nop
 8012d4c:	24040244 	.word	0x24040244

08012d50 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8012d50:	b580      	push	{r7, lr}
 8012d52:	b084      	sub	sp, #16
 8012d54:	af00      	add	r7, sp, #0
 8012d56:	4603      	mov	r3, r0
 8012d58:	603a      	str	r2, [r7, #0]
 8012d5a:	71fb      	strb	r3, [r7, #7]
 8012d5c:	460b      	mov	r3, r1
 8012d5e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8012d60:	79fb      	ldrb	r3, [r7, #7]
 8012d62:	4a09      	ldr	r2, [pc, #36]	; (8012d88 <disk_ioctl+0x38>)
 8012d64:	009b      	lsls	r3, r3, #2
 8012d66:	4413      	add	r3, r2
 8012d68:	685b      	ldr	r3, [r3, #4]
 8012d6a:	691b      	ldr	r3, [r3, #16]
 8012d6c:	79fa      	ldrb	r2, [r7, #7]
 8012d6e:	4906      	ldr	r1, [pc, #24]	; (8012d88 <disk_ioctl+0x38>)
 8012d70:	440a      	add	r2, r1
 8012d72:	7a10      	ldrb	r0, [r2, #8]
 8012d74:	79b9      	ldrb	r1, [r7, #6]
 8012d76:	683a      	ldr	r2, [r7, #0]
 8012d78:	4798      	blx	r3
 8012d7a:	4603      	mov	r3, r0
 8012d7c:	73fb      	strb	r3, [r7, #15]
  return res;
 8012d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012d80:	4618      	mov	r0, r3
 8012d82:	3710      	adds	r7, #16
 8012d84:	46bd      	mov	sp, r7
 8012d86:	bd80      	pop	{r7, pc}
 8012d88:	24040244 	.word	0x24040244

08012d8c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8012d8c:	b480      	push	{r7}
 8012d8e:	b085      	sub	sp, #20
 8012d90:	af00      	add	r7, sp, #0
 8012d92:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	3301      	adds	r3, #1
 8012d98:	781b      	ldrb	r3, [r3, #0]
 8012d9a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8012d9c:	89fb      	ldrh	r3, [r7, #14]
 8012d9e:	021b      	lsls	r3, r3, #8
 8012da0:	b21a      	sxth	r2, r3
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	781b      	ldrb	r3, [r3, #0]
 8012da6:	b21b      	sxth	r3, r3
 8012da8:	4313      	orrs	r3, r2
 8012daa:	b21b      	sxth	r3, r3
 8012dac:	81fb      	strh	r3, [r7, #14]
	return rv;
 8012dae:	89fb      	ldrh	r3, [r7, #14]
}
 8012db0:	4618      	mov	r0, r3
 8012db2:	3714      	adds	r7, #20
 8012db4:	46bd      	mov	sp, r7
 8012db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dba:	4770      	bx	lr

08012dbc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8012dbc:	b480      	push	{r7}
 8012dbe:	b085      	sub	sp, #20
 8012dc0:	af00      	add	r7, sp, #0
 8012dc2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	3303      	adds	r3, #3
 8012dc8:	781b      	ldrb	r3, [r3, #0]
 8012dca:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8012dcc:	68fb      	ldr	r3, [r7, #12]
 8012dce:	021b      	lsls	r3, r3, #8
 8012dd0:	687a      	ldr	r2, [r7, #4]
 8012dd2:	3202      	adds	r2, #2
 8012dd4:	7812      	ldrb	r2, [r2, #0]
 8012dd6:	4313      	orrs	r3, r2
 8012dd8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8012dda:	68fb      	ldr	r3, [r7, #12]
 8012ddc:	021b      	lsls	r3, r3, #8
 8012dde:	687a      	ldr	r2, [r7, #4]
 8012de0:	3201      	adds	r2, #1
 8012de2:	7812      	ldrb	r2, [r2, #0]
 8012de4:	4313      	orrs	r3, r2
 8012de6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8012de8:	68fb      	ldr	r3, [r7, #12]
 8012dea:	021b      	lsls	r3, r3, #8
 8012dec:	687a      	ldr	r2, [r7, #4]
 8012dee:	7812      	ldrb	r2, [r2, #0]
 8012df0:	4313      	orrs	r3, r2
 8012df2:	60fb      	str	r3, [r7, #12]
	return rv;
 8012df4:	68fb      	ldr	r3, [r7, #12]
}
 8012df6:	4618      	mov	r0, r3
 8012df8:	3714      	adds	r7, #20
 8012dfa:	46bd      	mov	sp, r7
 8012dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e00:	4770      	bx	lr

08012e02 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8012e02:	b480      	push	{r7}
 8012e04:	b083      	sub	sp, #12
 8012e06:	af00      	add	r7, sp, #0
 8012e08:	6078      	str	r0, [r7, #4]
 8012e0a:	460b      	mov	r3, r1
 8012e0c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	1c5a      	adds	r2, r3, #1
 8012e12:	607a      	str	r2, [r7, #4]
 8012e14:	887a      	ldrh	r2, [r7, #2]
 8012e16:	b2d2      	uxtb	r2, r2
 8012e18:	701a      	strb	r2, [r3, #0]
 8012e1a:	887b      	ldrh	r3, [r7, #2]
 8012e1c:	0a1b      	lsrs	r3, r3, #8
 8012e1e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	1c5a      	adds	r2, r3, #1
 8012e24:	607a      	str	r2, [r7, #4]
 8012e26:	887a      	ldrh	r2, [r7, #2]
 8012e28:	b2d2      	uxtb	r2, r2
 8012e2a:	701a      	strb	r2, [r3, #0]
}
 8012e2c:	bf00      	nop
 8012e2e:	370c      	adds	r7, #12
 8012e30:	46bd      	mov	sp, r7
 8012e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e36:	4770      	bx	lr

08012e38 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8012e38:	b480      	push	{r7}
 8012e3a:	b083      	sub	sp, #12
 8012e3c:	af00      	add	r7, sp, #0
 8012e3e:	6078      	str	r0, [r7, #4]
 8012e40:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	1c5a      	adds	r2, r3, #1
 8012e46:	607a      	str	r2, [r7, #4]
 8012e48:	683a      	ldr	r2, [r7, #0]
 8012e4a:	b2d2      	uxtb	r2, r2
 8012e4c:	701a      	strb	r2, [r3, #0]
 8012e4e:	683b      	ldr	r3, [r7, #0]
 8012e50:	0a1b      	lsrs	r3, r3, #8
 8012e52:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	1c5a      	adds	r2, r3, #1
 8012e58:	607a      	str	r2, [r7, #4]
 8012e5a:	683a      	ldr	r2, [r7, #0]
 8012e5c:	b2d2      	uxtb	r2, r2
 8012e5e:	701a      	strb	r2, [r3, #0]
 8012e60:	683b      	ldr	r3, [r7, #0]
 8012e62:	0a1b      	lsrs	r3, r3, #8
 8012e64:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	1c5a      	adds	r2, r3, #1
 8012e6a:	607a      	str	r2, [r7, #4]
 8012e6c:	683a      	ldr	r2, [r7, #0]
 8012e6e:	b2d2      	uxtb	r2, r2
 8012e70:	701a      	strb	r2, [r3, #0]
 8012e72:	683b      	ldr	r3, [r7, #0]
 8012e74:	0a1b      	lsrs	r3, r3, #8
 8012e76:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	1c5a      	adds	r2, r3, #1
 8012e7c:	607a      	str	r2, [r7, #4]
 8012e7e:	683a      	ldr	r2, [r7, #0]
 8012e80:	b2d2      	uxtb	r2, r2
 8012e82:	701a      	strb	r2, [r3, #0]
}
 8012e84:	bf00      	nop
 8012e86:	370c      	adds	r7, #12
 8012e88:	46bd      	mov	sp, r7
 8012e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e8e:	4770      	bx	lr

08012e90 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8012e90:	b480      	push	{r7}
 8012e92:	b087      	sub	sp, #28
 8012e94:	af00      	add	r7, sp, #0
 8012e96:	60f8      	str	r0, [r7, #12]
 8012e98:	60b9      	str	r1, [r7, #8]
 8012e9a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8012e9c:	68fb      	ldr	r3, [r7, #12]
 8012e9e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8012ea0:	68bb      	ldr	r3, [r7, #8]
 8012ea2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	d00d      	beq.n	8012ec6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8012eaa:	693a      	ldr	r2, [r7, #16]
 8012eac:	1c53      	adds	r3, r2, #1
 8012eae:	613b      	str	r3, [r7, #16]
 8012eb0:	697b      	ldr	r3, [r7, #20]
 8012eb2:	1c59      	adds	r1, r3, #1
 8012eb4:	6179      	str	r1, [r7, #20]
 8012eb6:	7812      	ldrb	r2, [r2, #0]
 8012eb8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	3b01      	subs	r3, #1
 8012ebe:	607b      	str	r3, [r7, #4]
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	d1f1      	bne.n	8012eaa <mem_cpy+0x1a>
	}
}
 8012ec6:	bf00      	nop
 8012ec8:	371c      	adds	r7, #28
 8012eca:	46bd      	mov	sp, r7
 8012ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ed0:	4770      	bx	lr

08012ed2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8012ed2:	b480      	push	{r7}
 8012ed4:	b087      	sub	sp, #28
 8012ed6:	af00      	add	r7, sp, #0
 8012ed8:	60f8      	str	r0, [r7, #12]
 8012eda:	60b9      	str	r1, [r7, #8]
 8012edc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8012ede:	68fb      	ldr	r3, [r7, #12]
 8012ee0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8012ee2:	697b      	ldr	r3, [r7, #20]
 8012ee4:	1c5a      	adds	r2, r3, #1
 8012ee6:	617a      	str	r2, [r7, #20]
 8012ee8:	68ba      	ldr	r2, [r7, #8]
 8012eea:	b2d2      	uxtb	r2, r2
 8012eec:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	3b01      	subs	r3, #1
 8012ef2:	607b      	str	r3, [r7, #4]
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	d1f3      	bne.n	8012ee2 <mem_set+0x10>
}
 8012efa:	bf00      	nop
 8012efc:	371c      	adds	r7, #28
 8012efe:	46bd      	mov	sp, r7
 8012f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f04:	4770      	bx	lr

08012f06 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8012f06:	b480      	push	{r7}
 8012f08:	b089      	sub	sp, #36	; 0x24
 8012f0a:	af00      	add	r7, sp, #0
 8012f0c:	60f8      	str	r0, [r7, #12]
 8012f0e:	60b9      	str	r1, [r7, #8]
 8012f10:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8012f12:	68fb      	ldr	r3, [r7, #12]
 8012f14:	61fb      	str	r3, [r7, #28]
 8012f16:	68bb      	ldr	r3, [r7, #8]
 8012f18:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8012f1a:	2300      	movs	r3, #0
 8012f1c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8012f1e:	69fb      	ldr	r3, [r7, #28]
 8012f20:	1c5a      	adds	r2, r3, #1
 8012f22:	61fa      	str	r2, [r7, #28]
 8012f24:	781b      	ldrb	r3, [r3, #0]
 8012f26:	4619      	mov	r1, r3
 8012f28:	69bb      	ldr	r3, [r7, #24]
 8012f2a:	1c5a      	adds	r2, r3, #1
 8012f2c:	61ba      	str	r2, [r7, #24]
 8012f2e:	781b      	ldrb	r3, [r3, #0]
 8012f30:	1acb      	subs	r3, r1, r3
 8012f32:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	3b01      	subs	r3, #1
 8012f38:	607b      	str	r3, [r7, #4]
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d002      	beq.n	8012f46 <mem_cmp+0x40>
 8012f40:	697b      	ldr	r3, [r7, #20]
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	d0eb      	beq.n	8012f1e <mem_cmp+0x18>

	return r;
 8012f46:	697b      	ldr	r3, [r7, #20]
}
 8012f48:	4618      	mov	r0, r3
 8012f4a:	3724      	adds	r7, #36	; 0x24
 8012f4c:	46bd      	mov	sp, r7
 8012f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f52:	4770      	bx	lr

08012f54 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8012f54:	b480      	push	{r7}
 8012f56:	b083      	sub	sp, #12
 8012f58:	af00      	add	r7, sp, #0
 8012f5a:	6078      	str	r0, [r7, #4]
 8012f5c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8012f5e:	e002      	b.n	8012f66 <chk_chr+0x12>
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	3301      	adds	r3, #1
 8012f64:	607b      	str	r3, [r7, #4]
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	781b      	ldrb	r3, [r3, #0]
 8012f6a:	2b00      	cmp	r3, #0
 8012f6c:	d005      	beq.n	8012f7a <chk_chr+0x26>
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	781b      	ldrb	r3, [r3, #0]
 8012f72:	461a      	mov	r2, r3
 8012f74:	683b      	ldr	r3, [r7, #0]
 8012f76:	4293      	cmp	r3, r2
 8012f78:	d1f2      	bne.n	8012f60 <chk_chr+0xc>
	return *str;
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	781b      	ldrb	r3, [r3, #0]
}
 8012f7e:	4618      	mov	r0, r3
 8012f80:	370c      	adds	r7, #12
 8012f82:	46bd      	mov	sp, r7
 8012f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f88:	4770      	bx	lr
	...

08012f8c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8012f8c:	b480      	push	{r7}
 8012f8e:	b085      	sub	sp, #20
 8012f90:	af00      	add	r7, sp, #0
 8012f92:	6078      	str	r0, [r7, #4]
 8012f94:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8012f96:	2300      	movs	r3, #0
 8012f98:	60bb      	str	r3, [r7, #8]
 8012f9a:	68bb      	ldr	r3, [r7, #8]
 8012f9c:	60fb      	str	r3, [r7, #12]
 8012f9e:	e029      	b.n	8012ff4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8012fa0:	4a27      	ldr	r2, [pc, #156]	; (8013040 <chk_lock+0xb4>)
 8012fa2:	68fb      	ldr	r3, [r7, #12]
 8012fa4:	011b      	lsls	r3, r3, #4
 8012fa6:	4413      	add	r3, r2
 8012fa8:	681b      	ldr	r3, [r3, #0]
 8012faa:	2b00      	cmp	r3, #0
 8012fac:	d01d      	beq.n	8012fea <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8012fae:	4a24      	ldr	r2, [pc, #144]	; (8013040 <chk_lock+0xb4>)
 8012fb0:	68fb      	ldr	r3, [r7, #12]
 8012fb2:	011b      	lsls	r3, r3, #4
 8012fb4:	4413      	add	r3, r2
 8012fb6:	681a      	ldr	r2, [r3, #0]
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	681b      	ldr	r3, [r3, #0]
 8012fbc:	429a      	cmp	r2, r3
 8012fbe:	d116      	bne.n	8012fee <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8012fc0:	4a1f      	ldr	r2, [pc, #124]	; (8013040 <chk_lock+0xb4>)
 8012fc2:	68fb      	ldr	r3, [r7, #12]
 8012fc4:	011b      	lsls	r3, r3, #4
 8012fc6:	4413      	add	r3, r2
 8012fc8:	3304      	adds	r3, #4
 8012fca:	681a      	ldr	r2, [r3, #0]
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8012fd0:	429a      	cmp	r2, r3
 8012fd2:	d10c      	bne.n	8012fee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8012fd4:	4a1a      	ldr	r2, [pc, #104]	; (8013040 <chk_lock+0xb4>)
 8012fd6:	68fb      	ldr	r3, [r7, #12]
 8012fd8:	011b      	lsls	r3, r3, #4
 8012fda:	4413      	add	r3, r2
 8012fdc:	3308      	adds	r3, #8
 8012fde:	681a      	ldr	r2, [r3, #0]
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8012fe4:	429a      	cmp	r2, r3
 8012fe6:	d102      	bne.n	8012fee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8012fe8:	e007      	b.n	8012ffa <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8012fea:	2301      	movs	r3, #1
 8012fec:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8012fee:	68fb      	ldr	r3, [r7, #12]
 8012ff0:	3301      	adds	r3, #1
 8012ff2:	60fb      	str	r3, [r7, #12]
 8012ff4:	68fb      	ldr	r3, [r7, #12]
 8012ff6:	2b01      	cmp	r3, #1
 8012ff8:	d9d2      	bls.n	8012fa0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8012ffa:	68fb      	ldr	r3, [r7, #12]
 8012ffc:	2b02      	cmp	r3, #2
 8012ffe:	d109      	bne.n	8013014 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8013000:	68bb      	ldr	r3, [r7, #8]
 8013002:	2b00      	cmp	r3, #0
 8013004:	d102      	bne.n	801300c <chk_lock+0x80>
 8013006:	683b      	ldr	r3, [r7, #0]
 8013008:	2b02      	cmp	r3, #2
 801300a:	d101      	bne.n	8013010 <chk_lock+0x84>
 801300c:	2300      	movs	r3, #0
 801300e:	e010      	b.n	8013032 <chk_lock+0xa6>
 8013010:	2312      	movs	r3, #18
 8013012:	e00e      	b.n	8013032 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8013014:	683b      	ldr	r3, [r7, #0]
 8013016:	2b00      	cmp	r3, #0
 8013018:	d108      	bne.n	801302c <chk_lock+0xa0>
 801301a:	4a09      	ldr	r2, [pc, #36]	; (8013040 <chk_lock+0xb4>)
 801301c:	68fb      	ldr	r3, [r7, #12]
 801301e:	011b      	lsls	r3, r3, #4
 8013020:	4413      	add	r3, r2
 8013022:	330c      	adds	r3, #12
 8013024:	881b      	ldrh	r3, [r3, #0]
 8013026:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801302a:	d101      	bne.n	8013030 <chk_lock+0xa4>
 801302c:	2310      	movs	r3, #16
 801302e:	e000      	b.n	8013032 <chk_lock+0xa6>
 8013030:	2300      	movs	r3, #0
}
 8013032:	4618      	mov	r0, r3
 8013034:	3714      	adds	r7, #20
 8013036:	46bd      	mov	sp, r7
 8013038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801303c:	4770      	bx	lr
 801303e:	bf00      	nop
 8013040:	24040224 	.word	0x24040224

08013044 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8013044:	b480      	push	{r7}
 8013046:	b083      	sub	sp, #12
 8013048:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801304a:	2300      	movs	r3, #0
 801304c:	607b      	str	r3, [r7, #4]
 801304e:	e002      	b.n	8013056 <enq_lock+0x12>
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	3301      	adds	r3, #1
 8013054:	607b      	str	r3, [r7, #4]
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	2b01      	cmp	r3, #1
 801305a:	d806      	bhi.n	801306a <enq_lock+0x26>
 801305c:	4a09      	ldr	r2, [pc, #36]	; (8013084 <enq_lock+0x40>)
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	011b      	lsls	r3, r3, #4
 8013062:	4413      	add	r3, r2
 8013064:	681b      	ldr	r3, [r3, #0]
 8013066:	2b00      	cmp	r3, #0
 8013068:	d1f2      	bne.n	8013050 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	2b02      	cmp	r3, #2
 801306e:	bf14      	ite	ne
 8013070:	2301      	movne	r3, #1
 8013072:	2300      	moveq	r3, #0
 8013074:	b2db      	uxtb	r3, r3
}
 8013076:	4618      	mov	r0, r3
 8013078:	370c      	adds	r7, #12
 801307a:	46bd      	mov	sp, r7
 801307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013080:	4770      	bx	lr
 8013082:	bf00      	nop
 8013084:	24040224 	.word	0x24040224

08013088 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8013088:	b480      	push	{r7}
 801308a:	b085      	sub	sp, #20
 801308c:	af00      	add	r7, sp, #0
 801308e:	6078      	str	r0, [r7, #4]
 8013090:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8013092:	2300      	movs	r3, #0
 8013094:	60fb      	str	r3, [r7, #12]
 8013096:	e01f      	b.n	80130d8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8013098:	4a41      	ldr	r2, [pc, #260]	; (80131a0 <inc_lock+0x118>)
 801309a:	68fb      	ldr	r3, [r7, #12]
 801309c:	011b      	lsls	r3, r3, #4
 801309e:	4413      	add	r3, r2
 80130a0:	681a      	ldr	r2, [r3, #0]
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	681b      	ldr	r3, [r3, #0]
 80130a6:	429a      	cmp	r2, r3
 80130a8:	d113      	bne.n	80130d2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80130aa:	4a3d      	ldr	r2, [pc, #244]	; (80131a0 <inc_lock+0x118>)
 80130ac:	68fb      	ldr	r3, [r7, #12]
 80130ae:	011b      	lsls	r3, r3, #4
 80130b0:	4413      	add	r3, r2
 80130b2:	3304      	adds	r3, #4
 80130b4:	681a      	ldr	r2, [r3, #0]
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80130ba:	429a      	cmp	r2, r3
 80130bc:	d109      	bne.n	80130d2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80130be:	4a38      	ldr	r2, [pc, #224]	; (80131a0 <inc_lock+0x118>)
 80130c0:	68fb      	ldr	r3, [r7, #12]
 80130c2:	011b      	lsls	r3, r3, #4
 80130c4:	4413      	add	r3, r2
 80130c6:	3308      	adds	r3, #8
 80130c8:	681a      	ldr	r2, [r3, #0]
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80130ce:	429a      	cmp	r2, r3
 80130d0:	d006      	beq.n	80130e0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80130d2:	68fb      	ldr	r3, [r7, #12]
 80130d4:	3301      	adds	r3, #1
 80130d6:	60fb      	str	r3, [r7, #12]
 80130d8:	68fb      	ldr	r3, [r7, #12]
 80130da:	2b01      	cmp	r3, #1
 80130dc:	d9dc      	bls.n	8013098 <inc_lock+0x10>
 80130de:	e000      	b.n	80130e2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80130e0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80130e2:	68fb      	ldr	r3, [r7, #12]
 80130e4:	2b02      	cmp	r3, #2
 80130e6:	d132      	bne.n	801314e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80130e8:	2300      	movs	r3, #0
 80130ea:	60fb      	str	r3, [r7, #12]
 80130ec:	e002      	b.n	80130f4 <inc_lock+0x6c>
 80130ee:	68fb      	ldr	r3, [r7, #12]
 80130f0:	3301      	adds	r3, #1
 80130f2:	60fb      	str	r3, [r7, #12]
 80130f4:	68fb      	ldr	r3, [r7, #12]
 80130f6:	2b01      	cmp	r3, #1
 80130f8:	d806      	bhi.n	8013108 <inc_lock+0x80>
 80130fa:	4a29      	ldr	r2, [pc, #164]	; (80131a0 <inc_lock+0x118>)
 80130fc:	68fb      	ldr	r3, [r7, #12]
 80130fe:	011b      	lsls	r3, r3, #4
 8013100:	4413      	add	r3, r2
 8013102:	681b      	ldr	r3, [r3, #0]
 8013104:	2b00      	cmp	r3, #0
 8013106:	d1f2      	bne.n	80130ee <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8013108:	68fb      	ldr	r3, [r7, #12]
 801310a:	2b02      	cmp	r3, #2
 801310c:	d101      	bne.n	8013112 <inc_lock+0x8a>
 801310e:	2300      	movs	r3, #0
 8013110:	e040      	b.n	8013194 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	681a      	ldr	r2, [r3, #0]
 8013116:	4922      	ldr	r1, [pc, #136]	; (80131a0 <inc_lock+0x118>)
 8013118:	68fb      	ldr	r3, [r7, #12]
 801311a:	011b      	lsls	r3, r3, #4
 801311c:	440b      	add	r3, r1
 801311e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	689a      	ldr	r2, [r3, #8]
 8013124:	491e      	ldr	r1, [pc, #120]	; (80131a0 <inc_lock+0x118>)
 8013126:	68fb      	ldr	r3, [r7, #12]
 8013128:	011b      	lsls	r3, r3, #4
 801312a:	440b      	add	r3, r1
 801312c:	3304      	adds	r3, #4
 801312e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	695a      	ldr	r2, [r3, #20]
 8013134:	491a      	ldr	r1, [pc, #104]	; (80131a0 <inc_lock+0x118>)
 8013136:	68fb      	ldr	r3, [r7, #12]
 8013138:	011b      	lsls	r3, r3, #4
 801313a:	440b      	add	r3, r1
 801313c:	3308      	adds	r3, #8
 801313e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8013140:	4a17      	ldr	r2, [pc, #92]	; (80131a0 <inc_lock+0x118>)
 8013142:	68fb      	ldr	r3, [r7, #12]
 8013144:	011b      	lsls	r3, r3, #4
 8013146:	4413      	add	r3, r2
 8013148:	330c      	adds	r3, #12
 801314a:	2200      	movs	r2, #0
 801314c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801314e:	683b      	ldr	r3, [r7, #0]
 8013150:	2b00      	cmp	r3, #0
 8013152:	d009      	beq.n	8013168 <inc_lock+0xe0>
 8013154:	4a12      	ldr	r2, [pc, #72]	; (80131a0 <inc_lock+0x118>)
 8013156:	68fb      	ldr	r3, [r7, #12]
 8013158:	011b      	lsls	r3, r3, #4
 801315a:	4413      	add	r3, r2
 801315c:	330c      	adds	r3, #12
 801315e:	881b      	ldrh	r3, [r3, #0]
 8013160:	2b00      	cmp	r3, #0
 8013162:	d001      	beq.n	8013168 <inc_lock+0xe0>
 8013164:	2300      	movs	r3, #0
 8013166:	e015      	b.n	8013194 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8013168:	683b      	ldr	r3, [r7, #0]
 801316a:	2b00      	cmp	r3, #0
 801316c:	d108      	bne.n	8013180 <inc_lock+0xf8>
 801316e:	4a0c      	ldr	r2, [pc, #48]	; (80131a0 <inc_lock+0x118>)
 8013170:	68fb      	ldr	r3, [r7, #12]
 8013172:	011b      	lsls	r3, r3, #4
 8013174:	4413      	add	r3, r2
 8013176:	330c      	adds	r3, #12
 8013178:	881b      	ldrh	r3, [r3, #0]
 801317a:	3301      	adds	r3, #1
 801317c:	b29a      	uxth	r2, r3
 801317e:	e001      	b.n	8013184 <inc_lock+0xfc>
 8013180:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013184:	4906      	ldr	r1, [pc, #24]	; (80131a0 <inc_lock+0x118>)
 8013186:	68fb      	ldr	r3, [r7, #12]
 8013188:	011b      	lsls	r3, r3, #4
 801318a:	440b      	add	r3, r1
 801318c:	330c      	adds	r3, #12
 801318e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8013190:	68fb      	ldr	r3, [r7, #12]
 8013192:	3301      	adds	r3, #1
}
 8013194:	4618      	mov	r0, r3
 8013196:	3714      	adds	r7, #20
 8013198:	46bd      	mov	sp, r7
 801319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801319e:	4770      	bx	lr
 80131a0:	24040224 	.word	0x24040224

080131a4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80131a4:	b480      	push	{r7}
 80131a6:	b085      	sub	sp, #20
 80131a8:	af00      	add	r7, sp, #0
 80131aa:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	3b01      	subs	r3, #1
 80131b0:	607b      	str	r3, [r7, #4]
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	2b01      	cmp	r3, #1
 80131b6:	d825      	bhi.n	8013204 <dec_lock+0x60>
		n = Files[i].ctr;
 80131b8:	4a17      	ldr	r2, [pc, #92]	; (8013218 <dec_lock+0x74>)
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	011b      	lsls	r3, r3, #4
 80131be:	4413      	add	r3, r2
 80131c0:	330c      	adds	r3, #12
 80131c2:	881b      	ldrh	r3, [r3, #0]
 80131c4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80131c6:	89fb      	ldrh	r3, [r7, #14]
 80131c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80131cc:	d101      	bne.n	80131d2 <dec_lock+0x2e>
 80131ce:	2300      	movs	r3, #0
 80131d0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80131d2:	89fb      	ldrh	r3, [r7, #14]
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d002      	beq.n	80131de <dec_lock+0x3a>
 80131d8:	89fb      	ldrh	r3, [r7, #14]
 80131da:	3b01      	subs	r3, #1
 80131dc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80131de:	4a0e      	ldr	r2, [pc, #56]	; (8013218 <dec_lock+0x74>)
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	011b      	lsls	r3, r3, #4
 80131e4:	4413      	add	r3, r2
 80131e6:	330c      	adds	r3, #12
 80131e8:	89fa      	ldrh	r2, [r7, #14]
 80131ea:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80131ec:	89fb      	ldrh	r3, [r7, #14]
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	d105      	bne.n	80131fe <dec_lock+0x5a>
 80131f2:	4a09      	ldr	r2, [pc, #36]	; (8013218 <dec_lock+0x74>)
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	011b      	lsls	r3, r3, #4
 80131f8:	4413      	add	r3, r2
 80131fa:	2200      	movs	r2, #0
 80131fc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80131fe:	2300      	movs	r3, #0
 8013200:	737b      	strb	r3, [r7, #13]
 8013202:	e001      	b.n	8013208 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8013204:	2302      	movs	r3, #2
 8013206:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8013208:	7b7b      	ldrb	r3, [r7, #13]
}
 801320a:	4618      	mov	r0, r3
 801320c:	3714      	adds	r7, #20
 801320e:	46bd      	mov	sp, r7
 8013210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013214:	4770      	bx	lr
 8013216:	bf00      	nop
 8013218:	24040224 	.word	0x24040224

0801321c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 801321c:	b480      	push	{r7}
 801321e:	b085      	sub	sp, #20
 8013220:	af00      	add	r7, sp, #0
 8013222:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8013224:	2300      	movs	r3, #0
 8013226:	60fb      	str	r3, [r7, #12]
 8013228:	e010      	b.n	801324c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801322a:	4a0d      	ldr	r2, [pc, #52]	; (8013260 <clear_lock+0x44>)
 801322c:	68fb      	ldr	r3, [r7, #12]
 801322e:	011b      	lsls	r3, r3, #4
 8013230:	4413      	add	r3, r2
 8013232:	681b      	ldr	r3, [r3, #0]
 8013234:	687a      	ldr	r2, [r7, #4]
 8013236:	429a      	cmp	r2, r3
 8013238:	d105      	bne.n	8013246 <clear_lock+0x2a>
 801323a:	4a09      	ldr	r2, [pc, #36]	; (8013260 <clear_lock+0x44>)
 801323c:	68fb      	ldr	r3, [r7, #12]
 801323e:	011b      	lsls	r3, r3, #4
 8013240:	4413      	add	r3, r2
 8013242:	2200      	movs	r2, #0
 8013244:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8013246:	68fb      	ldr	r3, [r7, #12]
 8013248:	3301      	adds	r3, #1
 801324a:	60fb      	str	r3, [r7, #12]
 801324c:	68fb      	ldr	r3, [r7, #12]
 801324e:	2b01      	cmp	r3, #1
 8013250:	d9eb      	bls.n	801322a <clear_lock+0xe>
	}
}
 8013252:	bf00      	nop
 8013254:	3714      	adds	r7, #20
 8013256:	46bd      	mov	sp, r7
 8013258:	f85d 7b04 	ldr.w	r7, [sp], #4
 801325c:	4770      	bx	lr
 801325e:	bf00      	nop
 8013260:	24040224 	.word	0x24040224

08013264 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8013264:	b580      	push	{r7, lr}
 8013266:	b086      	sub	sp, #24
 8013268:	af00      	add	r7, sp, #0
 801326a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 801326c:	2300      	movs	r3, #0
 801326e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	78db      	ldrb	r3, [r3, #3]
 8013274:	2b00      	cmp	r3, #0
 8013276:	d034      	beq.n	80132e2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801327c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	7858      	ldrb	r0, [r3, #1]
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013288:	2301      	movs	r3, #1
 801328a:	697a      	ldr	r2, [r7, #20]
 801328c:	f7ff fd40 	bl	8012d10 <disk_write>
 8013290:	4603      	mov	r3, r0
 8013292:	2b00      	cmp	r3, #0
 8013294:	d002      	beq.n	801329c <sync_window+0x38>
			res = FR_DISK_ERR;
 8013296:	2301      	movs	r3, #1
 8013298:	73fb      	strb	r3, [r7, #15]
 801329a:	e022      	b.n	80132e2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	2200      	movs	r2, #0
 80132a0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	6a1b      	ldr	r3, [r3, #32]
 80132a6:	697a      	ldr	r2, [r7, #20]
 80132a8:	1ad2      	subs	r2, r2, r3
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	699b      	ldr	r3, [r3, #24]
 80132ae:	429a      	cmp	r2, r3
 80132b0:	d217      	bcs.n	80132e2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	789b      	ldrb	r3, [r3, #2]
 80132b6:	613b      	str	r3, [r7, #16]
 80132b8:	e010      	b.n	80132dc <sync_window+0x78>
					wsect += fs->fsize;
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	699b      	ldr	r3, [r3, #24]
 80132be:	697a      	ldr	r2, [r7, #20]
 80132c0:	4413      	add	r3, r2
 80132c2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	7858      	ldrb	r0, [r3, #1]
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80132ce:	2301      	movs	r3, #1
 80132d0:	697a      	ldr	r2, [r7, #20]
 80132d2:	f7ff fd1d 	bl	8012d10 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80132d6:	693b      	ldr	r3, [r7, #16]
 80132d8:	3b01      	subs	r3, #1
 80132da:	613b      	str	r3, [r7, #16]
 80132dc:	693b      	ldr	r3, [r7, #16]
 80132de:	2b01      	cmp	r3, #1
 80132e0:	d8eb      	bhi.n	80132ba <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80132e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80132e4:	4618      	mov	r0, r3
 80132e6:	3718      	adds	r7, #24
 80132e8:	46bd      	mov	sp, r7
 80132ea:	bd80      	pop	{r7, pc}

080132ec <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80132ec:	b580      	push	{r7, lr}
 80132ee:	b084      	sub	sp, #16
 80132f0:	af00      	add	r7, sp, #0
 80132f2:	6078      	str	r0, [r7, #4]
 80132f4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80132f6:	2300      	movs	r3, #0
 80132f8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80132fe:	683a      	ldr	r2, [r7, #0]
 8013300:	429a      	cmp	r2, r3
 8013302:	d01b      	beq.n	801333c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8013304:	6878      	ldr	r0, [r7, #4]
 8013306:	f7ff ffad 	bl	8013264 <sync_window>
 801330a:	4603      	mov	r3, r0
 801330c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801330e:	7bfb      	ldrb	r3, [r7, #15]
 8013310:	2b00      	cmp	r3, #0
 8013312:	d113      	bne.n	801333c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	7858      	ldrb	r0, [r3, #1]
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801331e:	2301      	movs	r3, #1
 8013320:	683a      	ldr	r2, [r7, #0]
 8013322:	f7ff fcd5 	bl	8012cd0 <disk_read>
 8013326:	4603      	mov	r3, r0
 8013328:	2b00      	cmp	r3, #0
 801332a:	d004      	beq.n	8013336 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 801332c:	f04f 33ff 	mov.w	r3, #4294967295
 8013330:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8013332:	2301      	movs	r3, #1
 8013334:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	683a      	ldr	r2, [r7, #0]
 801333a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 801333c:	7bfb      	ldrb	r3, [r7, #15]
}
 801333e:	4618      	mov	r0, r3
 8013340:	3710      	adds	r7, #16
 8013342:	46bd      	mov	sp, r7
 8013344:	bd80      	pop	{r7, pc}
	...

08013348 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8013348:	b580      	push	{r7, lr}
 801334a:	b084      	sub	sp, #16
 801334c:	af00      	add	r7, sp, #0
 801334e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8013350:	6878      	ldr	r0, [r7, #4]
 8013352:	f7ff ff87 	bl	8013264 <sync_window>
 8013356:	4603      	mov	r3, r0
 8013358:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801335a:	7bfb      	ldrb	r3, [r7, #15]
 801335c:	2b00      	cmp	r3, #0
 801335e:	d158      	bne.n	8013412 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	781b      	ldrb	r3, [r3, #0]
 8013364:	2b03      	cmp	r3, #3
 8013366:	d148      	bne.n	80133fa <sync_fs+0xb2>
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	791b      	ldrb	r3, [r3, #4]
 801336c:	2b01      	cmp	r3, #1
 801336e:	d144      	bne.n	80133fa <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	3330      	adds	r3, #48	; 0x30
 8013374:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013378:	2100      	movs	r1, #0
 801337a:	4618      	mov	r0, r3
 801337c:	f7ff fda9 	bl	8012ed2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	3330      	adds	r3, #48	; 0x30
 8013384:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013388:	f64a 2155 	movw	r1, #43605	; 0xaa55
 801338c:	4618      	mov	r0, r3
 801338e:	f7ff fd38 	bl	8012e02 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	3330      	adds	r3, #48	; 0x30
 8013396:	4921      	ldr	r1, [pc, #132]	; (801341c <sync_fs+0xd4>)
 8013398:	4618      	mov	r0, r3
 801339a:	f7ff fd4d 	bl	8012e38 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	3330      	adds	r3, #48	; 0x30
 80133a2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80133a6:	491e      	ldr	r1, [pc, #120]	; (8013420 <sync_fs+0xd8>)
 80133a8:	4618      	mov	r0, r3
 80133aa:	f7ff fd45 	bl	8012e38 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	3330      	adds	r3, #48	; 0x30
 80133b2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	691b      	ldr	r3, [r3, #16]
 80133ba:	4619      	mov	r1, r3
 80133bc:	4610      	mov	r0, r2
 80133be:	f7ff fd3b 	bl	8012e38 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	3330      	adds	r3, #48	; 0x30
 80133c6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	68db      	ldr	r3, [r3, #12]
 80133ce:	4619      	mov	r1, r3
 80133d0:	4610      	mov	r0, r2
 80133d2:	f7ff fd31 	bl	8012e38 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	69db      	ldr	r3, [r3, #28]
 80133da:	1c5a      	adds	r2, r3, #1
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	7858      	ldrb	r0, [r3, #1]
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80133ee:	2301      	movs	r3, #1
 80133f0:	f7ff fc8e 	bl	8012d10 <disk_write>
			fs->fsi_flag = 0;
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	2200      	movs	r2, #0
 80133f8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	785b      	ldrb	r3, [r3, #1]
 80133fe:	2200      	movs	r2, #0
 8013400:	2100      	movs	r1, #0
 8013402:	4618      	mov	r0, r3
 8013404:	f7ff fca4 	bl	8012d50 <disk_ioctl>
 8013408:	4603      	mov	r3, r0
 801340a:	2b00      	cmp	r3, #0
 801340c:	d001      	beq.n	8013412 <sync_fs+0xca>
 801340e:	2301      	movs	r3, #1
 8013410:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8013412:	7bfb      	ldrb	r3, [r7, #15]
}
 8013414:	4618      	mov	r0, r3
 8013416:	3710      	adds	r7, #16
 8013418:	46bd      	mov	sp, r7
 801341a:	bd80      	pop	{r7, pc}
 801341c:	41615252 	.word	0x41615252
 8013420:	61417272 	.word	0x61417272

08013424 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8013424:	b480      	push	{r7}
 8013426:	b083      	sub	sp, #12
 8013428:	af00      	add	r7, sp, #0
 801342a:	6078      	str	r0, [r7, #4]
 801342c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801342e:	683b      	ldr	r3, [r7, #0]
 8013430:	3b02      	subs	r3, #2
 8013432:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	695b      	ldr	r3, [r3, #20]
 8013438:	3b02      	subs	r3, #2
 801343a:	683a      	ldr	r2, [r7, #0]
 801343c:	429a      	cmp	r2, r3
 801343e:	d301      	bcc.n	8013444 <clust2sect+0x20>
 8013440:	2300      	movs	r3, #0
 8013442:	e008      	b.n	8013456 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	895b      	ldrh	r3, [r3, #10]
 8013448:	461a      	mov	r2, r3
 801344a:	683b      	ldr	r3, [r7, #0]
 801344c:	fb03 f202 	mul.w	r2, r3, r2
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013454:	4413      	add	r3, r2
}
 8013456:	4618      	mov	r0, r3
 8013458:	370c      	adds	r7, #12
 801345a:	46bd      	mov	sp, r7
 801345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013460:	4770      	bx	lr

08013462 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8013462:	b580      	push	{r7, lr}
 8013464:	b086      	sub	sp, #24
 8013466:	af00      	add	r7, sp, #0
 8013468:	6078      	str	r0, [r7, #4]
 801346a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	681b      	ldr	r3, [r3, #0]
 8013470:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8013472:	683b      	ldr	r3, [r7, #0]
 8013474:	2b01      	cmp	r3, #1
 8013476:	d904      	bls.n	8013482 <get_fat+0x20>
 8013478:	693b      	ldr	r3, [r7, #16]
 801347a:	695b      	ldr	r3, [r3, #20]
 801347c:	683a      	ldr	r2, [r7, #0]
 801347e:	429a      	cmp	r2, r3
 8013480:	d302      	bcc.n	8013488 <get_fat+0x26>
		val = 1;	/* Internal error */
 8013482:	2301      	movs	r3, #1
 8013484:	617b      	str	r3, [r7, #20]
 8013486:	e08c      	b.n	80135a2 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8013488:	f04f 33ff 	mov.w	r3, #4294967295
 801348c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801348e:	693b      	ldr	r3, [r7, #16]
 8013490:	781b      	ldrb	r3, [r3, #0]
 8013492:	2b02      	cmp	r3, #2
 8013494:	d045      	beq.n	8013522 <get_fat+0xc0>
 8013496:	2b03      	cmp	r3, #3
 8013498:	d05d      	beq.n	8013556 <get_fat+0xf4>
 801349a:	2b01      	cmp	r3, #1
 801349c:	d177      	bne.n	801358e <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 801349e:	683b      	ldr	r3, [r7, #0]
 80134a0:	60fb      	str	r3, [r7, #12]
 80134a2:	68fb      	ldr	r3, [r7, #12]
 80134a4:	085b      	lsrs	r3, r3, #1
 80134a6:	68fa      	ldr	r2, [r7, #12]
 80134a8:	4413      	add	r3, r2
 80134aa:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80134ac:	693b      	ldr	r3, [r7, #16]
 80134ae:	6a1a      	ldr	r2, [r3, #32]
 80134b0:	68fb      	ldr	r3, [r7, #12]
 80134b2:	0a5b      	lsrs	r3, r3, #9
 80134b4:	4413      	add	r3, r2
 80134b6:	4619      	mov	r1, r3
 80134b8:	6938      	ldr	r0, [r7, #16]
 80134ba:	f7ff ff17 	bl	80132ec <move_window>
 80134be:	4603      	mov	r3, r0
 80134c0:	2b00      	cmp	r3, #0
 80134c2:	d167      	bne.n	8013594 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 80134c4:	68fb      	ldr	r3, [r7, #12]
 80134c6:	1c5a      	adds	r2, r3, #1
 80134c8:	60fa      	str	r2, [r7, #12]
 80134ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80134ce:	693a      	ldr	r2, [r7, #16]
 80134d0:	4413      	add	r3, r2
 80134d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80134d6:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80134d8:	693b      	ldr	r3, [r7, #16]
 80134da:	6a1a      	ldr	r2, [r3, #32]
 80134dc:	68fb      	ldr	r3, [r7, #12]
 80134de:	0a5b      	lsrs	r3, r3, #9
 80134e0:	4413      	add	r3, r2
 80134e2:	4619      	mov	r1, r3
 80134e4:	6938      	ldr	r0, [r7, #16]
 80134e6:	f7ff ff01 	bl	80132ec <move_window>
 80134ea:	4603      	mov	r3, r0
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d153      	bne.n	8013598 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 80134f0:	68fb      	ldr	r3, [r7, #12]
 80134f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80134f6:	693a      	ldr	r2, [r7, #16]
 80134f8:	4413      	add	r3, r2
 80134fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80134fe:	021b      	lsls	r3, r3, #8
 8013500:	461a      	mov	r2, r3
 8013502:	68bb      	ldr	r3, [r7, #8]
 8013504:	4313      	orrs	r3, r2
 8013506:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8013508:	683b      	ldr	r3, [r7, #0]
 801350a:	f003 0301 	and.w	r3, r3, #1
 801350e:	2b00      	cmp	r3, #0
 8013510:	d002      	beq.n	8013518 <get_fat+0xb6>
 8013512:	68bb      	ldr	r3, [r7, #8]
 8013514:	091b      	lsrs	r3, r3, #4
 8013516:	e002      	b.n	801351e <get_fat+0xbc>
 8013518:	68bb      	ldr	r3, [r7, #8]
 801351a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801351e:	617b      	str	r3, [r7, #20]
			break;
 8013520:	e03f      	b.n	80135a2 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8013522:	693b      	ldr	r3, [r7, #16]
 8013524:	6a1a      	ldr	r2, [r3, #32]
 8013526:	683b      	ldr	r3, [r7, #0]
 8013528:	0a1b      	lsrs	r3, r3, #8
 801352a:	4413      	add	r3, r2
 801352c:	4619      	mov	r1, r3
 801352e:	6938      	ldr	r0, [r7, #16]
 8013530:	f7ff fedc 	bl	80132ec <move_window>
 8013534:	4603      	mov	r3, r0
 8013536:	2b00      	cmp	r3, #0
 8013538:	d130      	bne.n	801359c <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801353a:	693b      	ldr	r3, [r7, #16]
 801353c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013540:	683b      	ldr	r3, [r7, #0]
 8013542:	005b      	lsls	r3, r3, #1
 8013544:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8013548:	4413      	add	r3, r2
 801354a:	4618      	mov	r0, r3
 801354c:	f7ff fc1e 	bl	8012d8c <ld_word>
 8013550:	4603      	mov	r3, r0
 8013552:	617b      	str	r3, [r7, #20]
			break;
 8013554:	e025      	b.n	80135a2 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8013556:	693b      	ldr	r3, [r7, #16]
 8013558:	6a1a      	ldr	r2, [r3, #32]
 801355a:	683b      	ldr	r3, [r7, #0]
 801355c:	09db      	lsrs	r3, r3, #7
 801355e:	4413      	add	r3, r2
 8013560:	4619      	mov	r1, r3
 8013562:	6938      	ldr	r0, [r7, #16]
 8013564:	f7ff fec2 	bl	80132ec <move_window>
 8013568:	4603      	mov	r3, r0
 801356a:	2b00      	cmp	r3, #0
 801356c:	d118      	bne.n	80135a0 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801356e:	693b      	ldr	r3, [r7, #16]
 8013570:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013574:	683b      	ldr	r3, [r7, #0]
 8013576:	009b      	lsls	r3, r3, #2
 8013578:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 801357c:	4413      	add	r3, r2
 801357e:	4618      	mov	r0, r3
 8013580:	f7ff fc1c 	bl	8012dbc <ld_dword>
 8013584:	4603      	mov	r3, r0
 8013586:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 801358a:	617b      	str	r3, [r7, #20]
			break;
 801358c:	e009      	b.n	80135a2 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801358e:	2301      	movs	r3, #1
 8013590:	617b      	str	r3, [r7, #20]
 8013592:	e006      	b.n	80135a2 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013594:	bf00      	nop
 8013596:	e004      	b.n	80135a2 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013598:	bf00      	nop
 801359a:	e002      	b.n	80135a2 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801359c:	bf00      	nop
 801359e:	e000      	b.n	80135a2 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80135a0:	bf00      	nop
		}
	}

	return val;
 80135a2:	697b      	ldr	r3, [r7, #20]
}
 80135a4:	4618      	mov	r0, r3
 80135a6:	3718      	adds	r7, #24
 80135a8:	46bd      	mov	sp, r7
 80135aa:	bd80      	pop	{r7, pc}

080135ac <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80135ac:	b590      	push	{r4, r7, lr}
 80135ae:	b089      	sub	sp, #36	; 0x24
 80135b0:	af00      	add	r7, sp, #0
 80135b2:	60f8      	str	r0, [r7, #12]
 80135b4:	60b9      	str	r1, [r7, #8]
 80135b6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80135b8:	2302      	movs	r3, #2
 80135ba:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80135bc:	68bb      	ldr	r3, [r7, #8]
 80135be:	2b01      	cmp	r3, #1
 80135c0:	f240 80d6 	bls.w	8013770 <put_fat+0x1c4>
 80135c4:	68fb      	ldr	r3, [r7, #12]
 80135c6:	695b      	ldr	r3, [r3, #20]
 80135c8:	68ba      	ldr	r2, [r7, #8]
 80135ca:	429a      	cmp	r2, r3
 80135cc:	f080 80d0 	bcs.w	8013770 <put_fat+0x1c4>
		switch (fs->fs_type) {
 80135d0:	68fb      	ldr	r3, [r7, #12]
 80135d2:	781b      	ldrb	r3, [r3, #0]
 80135d4:	2b02      	cmp	r3, #2
 80135d6:	d073      	beq.n	80136c0 <put_fat+0x114>
 80135d8:	2b03      	cmp	r3, #3
 80135da:	f000 8091 	beq.w	8013700 <put_fat+0x154>
 80135de:	2b01      	cmp	r3, #1
 80135e0:	f040 80c6 	bne.w	8013770 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80135e4:	68bb      	ldr	r3, [r7, #8]
 80135e6:	61bb      	str	r3, [r7, #24]
 80135e8:	69bb      	ldr	r3, [r7, #24]
 80135ea:	085b      	lsrs	r3, r3, #1
 80135ec:	69ba      	ldr	r2, [r7, #24]
 80135ee:	4413      	add	r3, r2
 80135f0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80135f2:	68fb      	ldr	r3, [r7, #12]
 80135f4:	6a1a      	ldr	r2, [r3, #32]
 80135f6:	69bb      	ldr	r3, [r7, #24]
 80135f8:	0a5b      	lsrs	r3, r3, #9
 80135fa:	4413      	add	r3, r2
 80135fc:	4619      	mov	r1, r3
 80135fe:	68f8      	ldr	r0, [r7, #12]
 8013600:	f7ff fe74 	bl	80132ec <move_window>
 8013604:	4603      	mov	r3, r0
 8013606:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013608:	7ffb      	ldrb	r3, [r7, #31]
 801360a:	2b00      	cmp	r3, #0
 801360c:	f040 80a9 	bne.w	8013762 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8013610:	68fb      	ldr	r3, [r7, #12]
 8013612:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013616:	69bb      	ldr	r3, [r7, #24]
 8013618:	1c59      	adds	r1, r3, #1
 801361a:	61b9      	str	r1, [r7, #24]
 801361c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013620:	4413      	add	r3, r2
 8013622:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8013624:	68bb      	ldr	r3, [r7, #8]
 8013626:	f003 0301 	and.w	r3, r3, #1
 801362a:	2b00      	cmp	r3, #0
 801362c:	d00d      	beq.n	801364a <put_fat+0x9e>
 801362e:	697b      	ldr	r3, [r7, #20]
 8013630:	781b      	ldrb	r3, [r3, #0]
 8013632:	b25b      	sxtb	r3, r3
 8013634:	f003 030f 	and.w	r3, r3, #15
 8013638:	b25a      	sxtb	r2, r3
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	b2db      	uxtb	r3, r3
 801363e:	011b      	lsls	r3, r3, #4
 8013640:	b25b      	sxtb	r3, r3
 8013642:	4313      	orrs	r3, r2
 8013644:	b25b      	sxtb	r3, r3
 8013646:	b2db      	uxtb	r3, r3
 8013648:	e001      	b.n	801364e <put_fat+0xa2>
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	b2db      	uxtb	r3, r3
 801364e:	697a      	ldr	r2, [r7, #20]
 8013650:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8013652:	68fb      	ldr	r3, [r7, #12]
 8013654:	2201      	movs	r2, #1
 8013656:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8013658:	68fb      	ldr	r3, [r7, #12]
 801365a:	6a1a      	ldr	r2, [r3, #32]
 801365c:	69bb      	ldr	r3, [r7, #24]
 801365e:	0a5b      	lsrs	r3, r3, #9
 8013660:	4413      	add	r3, r2
 8013662:	4619      	mov	r1, r3
 8013664:	68f8      	ldr	r0, [r7, #12]
 8013666:	f7ff fe41 	bl	80132ec <move_window>
 801366a:	4603      	mov	r3, r0
 801366c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801366e:	7ffb      	ldrb	r3, [r7, #31]
 8013670:	2b00      	cmp	r3, #0
 8013672:	d178      	bne.n	8013766 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8013674:	68fb      	ldr	r3, [r7, #12]
 8013676:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801367a:	69bb      	ldr	r3, [r7, #24]
 801367c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013680:	4413      	add	r3, r2
 8013682:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8013684:	68bb      	ldr	r3, [r7, #8]
 8013686:	f003 0301 	and.w	r3, r3, #1
 801368a:	2b00      	cmp	r3, #0
 801368c:	d003      	beq.n	8013696 <put_fat+0xea>
 801368e:	687b      	ldr	r3, [r7, #4]
 8013690:	091b      	lsrs	r3, r3, #4
 8013692:	b2db      	uxtb	r3, r3
 8013694:	e00e      	b.n	80136b4 <put_fat+0x108>
 8013696:	697b      	ldr	r3, [r7, #20]
 8013698:	781b      	ldrb	r3, [r3, #0]
 801369a:	b25b      	sxtb	r3, r3
 801369c:	f023 030f 	bic.w	r3, r3, #15
 80136a0:	b25a      	sxtb	r2, r3
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	0a1b      	lsrs	r3, r3, #8
 80136a6:	b25b      	sxtb	r3, r3
 80136a8:	f003 030f 	and.w	r3, r3, #15
 80136ac:	b25b      	sxtb	r3, r3
 80136ae:	4313      	orrs	r3, r2
 80136b0:	b25b      	sxtb	r3, r3
 80136b2:	b2db      	uxtb	r3, r3
 80136b4:	697a      	ldr	r2, [r7, #20]
 80136b6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80136b8:	68fb      	ldr	r3, [r7, #12]
 80136ba:	2201      	movs	r2, #1
 80136bc:	70da      	strb	r2, [r3, #3]
			break;
 80136be:	e057      	b.n	8013770 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80136c0:	68fb      	ldr	r3, [r7, #12]
 80136c2:	6a1a      	ldr	r2, [r3, #32]
 80136c4:	68bb      	ldr	r3, [r7, #8]
 80136c6:	0a1b      	lsrs	r3, r3, #8
 80136c8:	4413      	add	r3, r2
 80136ca:	4619      	mov	r1, r3
 80136cc:	68f8      	ldr	r0, [r7, #12]
 80136ce:	f7ff fe0d 	bl	80132ec <move_window>
 80136d2:	4603      	mov	r3, r0
 80136d4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80136d6:	7ffb      	ldrb	r3, [r7, #31]
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d146      	bne.n	801376a <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80136dc:	68fb      	ldr	r3, [r7, #12]
 80136de:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80136e2:	68bb      	ldr	r3, [r7, #8]
 80136e4:	005b      	lsls	r3, r3, #1
 80136e6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80136ea:	4413      	add	r3, r2
 80136ec:	687a      	ldr	r2, [r7, #4]
 80136ee:	b292      	uxth	r2, r2
 80136f0:	4611      	mov	r1, r2
 80136f2:	4618      	mov	r0, r3
 80136f4:	f7ff fb85 	bl	8012e02 <st_word>
			fs->wflag = 1;
 80136f8:	68fb      	ldr	r3, [r7, #12]
 80136fa:	2201      	movs	r2, #1
 80136fc:	70da      	strb	r2, [r3, #3]
			break;
 80136fe:	e037      	b.n	8013770 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8013700:	68fb      	ldr	r3, [r7, #12]
 8013702:	6a1a      	ldr	r2, [r3, #32]
 8013704:	68bb      	ldr	r3, [r7, #8]
 8013706:	09db      	lsrs	r3, r3, #7
 8013708:	4413      	add	r3, r2
 801370a:	4619      	mov	r1, r3
 801370c:	68f8      	ldr	r0, [r7, #12]
 801370e:	f7ff fded 	bl	80132ec <move_window>
 8013712:	4603      	mov	r3, r0
 8013714:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013716:	7ffb      	ldrb	r3, [r7, #31]
 8013718:	2b00      	cmp	r3, #0
 801371a:	d128      	bne.n	801376e <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8013722:	68fb      	ldr	r3, [r7, #12]
 8013724:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013728:	68bb      	ldr	r3, [r7, #8]
 801372a:	009b      	lsls	r3, r3, #2
 801372c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8013730:	4413      	add	r3, r2
 8013732:	4618      	mov	r0, r3
 8013734:	f7ff fb42 	bl	8012dbc <ld_dword>
 8013738:	4603      	mov	r3, r0
 801373a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801373e:	4323      	orrs	r3, r4
 8013740:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8013742:	68fb      	ldr	r3, [r7, #12]
 8013744:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013748:	68bb      	ldr	r3, [r7, #8]
 801374a:	009b      	lsls	r3, r3, #2
 801374c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8013750:	4413      	add	r3, r2
 8013752:	6879      	ldr	r1, [r7, #4]
 8013754:	4618      	mov	r0, r3
 8013756:	f7ff fb6f 	bl	8012e38 <st_dword>
			fs->wflag = 1;
 801375a:	68fb      	ldr	r3, [r7, #12]
 801375c:	2201      	movs	r2, #1
 801375e:	70da      	strb	r2, [r3, #3]
			break;
 8013760:	e006      	b.n	8013770 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8013762:	bf00      	nop
 8013764:	e004      	b.n	8013770 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8013766:	bf00      	nop
 8013768:	e002      	b.n	8013770 <put_fat+0x1c4>
			if (res != FR_OK) break;
 801376a:	bf00      	nop
 801376c:	e000      	b.n	8013770 <put_fat+0x1c4>
			if (res != FR_OK) break;
 801376e:	bf00      	nop
		}
	}
	return res;
 8013770:	7ffb      	ldrb	r3, [r7, #31]
}
 8013772:	4618      	mov	r0, r3
 8013774:	3724      	adds	r7, #36	; 0x24
 8013776:	46bd      	mov	sp, r7
 8013778:	bd90      	pop	{r4, r7, pc}

0801377a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801377a:	b580      	push	{r7, lr}
 801377c:	b088      	sub	sp, #32
 801377e:	af00      	add	r7, sp, #0
 8013780:	60f8      	str	r0, [r7, #12]
 8013782:	60b9      	str	r1, [r7, #8]
 8013784:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8013786:	2300      	movs	r3, #0
 8013788:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801378a:	68fb      	ldr	r3, [r7, #12]
 801378c:	681b      	ldr	r3, [r3, #0]
 801378e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8013790:	68bb      	ldr	r3, [r7, #8]
 8013792:	2b01      	cmp	r3, #1
 8013794:	d904      	bls.n	80137a0 <remove_chain+0x26>
 8013796:	69bb      	ldr	r3, [r7, #24]
 8013798:	695b      	ldr	r3, [r3, #20]
 801379a:	68ba      	ldr	r2, [r7, #8]
 801379c:	429a      	cmp	r2, r3
 801379e:	d301      	bcc.n	80137a4 <remove_chain+0x2a>
 80137a0:	2302      	movs	r3, #2
 80137a2:	e04b      	b.n	801383c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	d00c      	beq.n	80137c4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80137aa:	f04f 32ff 	mov.w	r2, #4294967295
 80137ae:	6879      	ldr	r1, [r7, #4]
 80137b0:	69b8      	ldr	r0, [r7, #24]
 80137b2:	f7ff fefb 	bl	80135ac <put_fat>
 80137b6:	4603      	mov	r3, r0
 80137b8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80137ba:	7ffb      	ldrb	r3, [r7, #31]
 80137bc:	2b00      	cmp	r3, #0
 80137be:	d001      	beq.n	80137c4 <remove_chain+0x4a>
 80137c0:	7ffb      	ldrb	r3, [r7, #31]
 80137c2:	e03b      	b.n	801383c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80137c4:	68b9      	ldr	r1, [r7, #8]
 80137c6:	68f8      	ldr	r0, [r7, #12]
 80137c8:	f7ff fe4b 	bl	8013462 <get_fat>
 80137cc:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80137ce:	697b      	ldr	r3, [r7, #20]
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	d031      	beq.n	8013838 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80137d4:	697b      	ldr	r3, [r7, #20]
 80137d6:	2b01      	cmp	r3, #1
 80137d8:	d101      	bne.n	80137de <remove_chain+0x64>
 80137da:	2302      	movs	r3, #2
 80137dc:	e02e      	b.n	801383c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80137de:	697b      	ldr	r3, [r7, #20]
 80137e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80137e4:	d101      	bne.n	80137ea <remove_chain+0x70>
 80137e6:	2301      	movs	r3, #1
 80137e8:	e028      	b.n	801383c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80137ea:	2200      	movs	r2, #0
 80137ec:	68b9      	ldr	r1, [r7, #8]
 80137ee:	69b8      	ldr	r0, [r7, #24]
 80137f0:	f7ff fedc 	bl	80135ac <put_fat>
 80137f4:	4603      	mov	r3, r0
 80137f6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80137f8:	7ffb      	ldrb	r3, [r7, #31]
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	d001      	beq.n	8013802 <remove_chain+0x88>
 80137fe:	7ffb      	ldrb	r3, [r7, #31]
 8013800:	e01c      	b.n	801383c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8013802:	69bb      	ldr	r3, [r7, #24]
 8013804:	691a      	ldr	r2, [r3, #16]
 8013806:	69bb      	ldr	r3, [r7, #24]
 8013808:	695b      	ldr	r3, [r3, #20]
 801380a:	3b02      	subs	r3, #2
 801380c:	429a      	cmp	r2, r3
 801380e:	d20b      	bcs.n	8013828 <remove_chain+0xae>
			fs->free_clst++;
 8013810:	69bb      	ldr	r3, [r7, #24]
 8013812:	691b      	ldr	r3, [r3, #16]
 8013814:	1c5a      	adds	r2, r3, #1
 8013816:	69bb      	ldr	r3, [r7, #24]
 8013818:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 801381a:	69bb      	ldr	r3, [r7, #24]
 801381c:	791b      	ldrb	r3, [r3, #4]
 801381e:	f043 0301 	orr.w	r3, r3, #1
 8013822:	b2da      	uxtb	r2, r3
 8013824:	69bb      	ldr	r3, [r7, #24]
 8013826:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8013828:	697b      	ldr	r3, [r7, #20]
 801382a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801382c:	69bb      	ldr	r3, [r7, #24]
 801382e:	695b      	ldr	r3, [r3, #20]
 8013830:	68ba      	ldr	r2, [r7, #8]
 8013832:	429a      	cmp	r2, r3
 8013834:	d3c6      	bcc.n	80137c4 <remove_chain+0x4a>
 8013836:	e000      	b.n	801383a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8013838:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801383a:	2300      	movs	r3, #0
}
 801383c:	4618      	mov	r0, r3
 801383e:	3720      	adds	r7, #32
 8013840:	46bd      	mov	sp, r7
 8013842:	bd80      	pop	{r7, pc}

08013844 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8013844:	b580      	push	{r7, lr}
 8013846:	b088      	sub	sp, #32
 8013848:	af00      	add	r7, sp, #0
 801384a:	6078      	str	r0, [r7, #4]
 801384c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	681b      	ldr	r3, [r3, #0]
 8013852:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8013854:	683b      	ldr	r3, [r7, #0]
 8013856:	2b00      	cmp	r3, #0
 8013858:	d10d      	bne.n	8013876 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801385a:	693b      	ldr	r3, [r7, #16]
 801385c:	68db      	ldr	r3, [r3, #12]
 801385e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8013860:	69bb      	ldr	r3, [r7, #24]
 8013862:	2b00      	cmp	r3, #0
 8013864:	d004      	beq.n	8013870 <create_chain+0x2c>
 8013866:	693b      	ldr	r3, [r7, #16]
 8013868:	695b      	ldr	r3, [r3, #20]
 801386a:	69ba      	ldr	r2, [r7, #24]
 801386c:	429a      	cmp	r2, r3
 801386e:	d31b      	bcc.n	80138a8 <create_chain+0x64>
 8013870:	2301      	movs	r3, #1
 8013872:	61bb      	str	r3, [r7, #24]
 8013874:	e018      	b.n	80138a8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8013876:	6839      	ldr	r1, [r7, #0]
 8013878:	6878      	ldr	r0, [r7, #4]
 801387a:	f7ff fdf2 	bl	8013462 <get_fat>
 801387e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8013880:	68fb      	ldr	r3, [r7, #12]
 8013882:	2b01      	cmp	r3, #1
 8013884:	d801      	bhi.n	801388a <create_chain+0x46>
 8013886:	2301      	movs	r3, #1
 8013888:	e070      	b.n	801396c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801388a:	68fb      	ldr	r3, [r7, #12]
 801388c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013890:	d101      	bne.n	8013896 <create_chain+0x52>
 8013892:	68fb      	ldr	r3, [r7, #12]
 8013894:	e06a      	b.n	801396c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8013896:	693b      	ldr	r3, [r7, #16]
 8013898:	695b      	ldr	r3, [r3, #20]
 801389a:	68fa      	ldr	r2, [r7, #12]
 801389c:	429a      	cmp	r2, r3
 801389e:	d201      	bcs.n	80138a4 <create_chain+0x60>
 80138a0:	68fb      	ldr	r3, [r7, #12]
 80138a2:	e063      	b.n	801396c <create_chain+0x128>
		scl = clst;
 80138a4:	683b      	ldr	r3, [r7, #0]
 80138a6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80138a8:	69bb      	ldr	r3, [r7, #24]
 80138aa:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80138ac:	69fb      	ldr	r3, [r7, #28]
 80138ae:	3301      	adds	r3, #1
 80138b0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80138b2:	693b      	ldr	r3, [r7, #16]
 80138b4:	695b      	ldr	r3, [r3, #20]
 80138b6:	69fa      	ldr	r2, [r7, #28]
 80138b8:	429a      	cmp	r2, r3
 80138ba:	d307      	bcc.n	80138cc <create_chain+0x88>
				ncl = 2;
 80138bc:	2302      	movs	r3, #2
 80138be:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80138c0:	69fa      	ldr	r2, [r7, #28]
 80138c2:	69bb      	ldr	r3, [r7, #24]
 80138c4:	429a      	cmp	r2, r3
 80138c6:	d901      	bls.n	80138cc <create_chain+0x88>
 80138c8:	2300      	movs	r3, #0
 80138ca:	e04f      	b.n	801396c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80138cc:	69f9      	ldr	r1, [r7, #28]
 80138ce:	6878      	ldr	r0, [r7, #4]
 80138d0:	f7ff fdc7 	bl	8013462 <get_fat>
 80138d4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80138d6:	68fb      	ldr	r3, [r7, #12]
 80138d8:	2b00      	cmp	r3, #0
 80138da:	d00e      	beq.n	80138fa <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80138dc:	68fb      	ldr	r3, [r7, #12]
 80138de:	2b01      	cmp	r3, #1
 80138e0:	d003      	beq.n	80138ea <create_chain+0xa6>
 80138e2:	68fb      	ldr	r3, [r7, #12]
 80138e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80138e8:	d101      	bne.n	80138ee <create_chain+0xaa>
 80138ea:	68fb      	ldr	r3, [r7, #12]
 80138ec:	e03e      	b.n	801396c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80138ee:	69fa      	ldr	r2, [r7, #28]
 80138f0:	69bb      	ldr	r3, [r7, #24]
 80138f2:	429a      	cmp	r2, r3
 80138f4:	d1da      	bne.n	80138ac <create_chain+0x68>
 80138f6:	2300      	movs	r3, #0
 80138f8:	e038      	b.n	801396c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80138fa:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80138fc:	f04f 32ff 	mov.w	r2, #4294967295
 8013900:	69f9      	ldr	r1, [r7, #28]
 8013902:	6938      	ldr	r0, [r7, #16]
 8013904:	f7ff fe52 	bl	80135ac <put_fat>
 8013908:	4603      	mov	r3, r0
 801390a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801390c:	7dfb      	ldrb	r3, [r7, #23]
 801390e:	2b00      	cmp	r3, #0
 8013910:	d109      	bne.n	8013926 <create_chain+0xe2>
 8013912:	683b      	ldr	r3, [r7, #0]
 8013914:	2b00      	cmp	r3, #0
 8013916:	d006      	beq.n	8013926 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8013918:	69fa      	ldr	r2, [r7, #28]
 801391a:	6839      	ldr	r1, [r7, #0]
 801391c:	6938      	ldr	r0, [r7, #16]
 801391e:	f7ff fe45 	bl	80135ac <put_fat>
 8013922:	4603      	mov	r3, r0
 8013924:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8013926:	7dfb      	ldrb	r3, [r7, #23]
 8013928:	2b00      	cmp	r3, #0
 801392a:	d116      	bne.n	801395a <create_chain+0x116>
		fs->last_clst = ncl;
 801392c:	693b      	ldr	r3, [r7, #16]
 801392e:	69fa      	ldr	r2, [r7, #28]
 8013930:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8013932:	693b      	ldr	r3, [r7, #16]
 8013934:	691a      	ldr	r2, [r3, #16]
 8013936:	693b      	ldr	r3, [r7, #16]
 8013938:	695b      	ldr	r3, [r3, #20]
 801393a:	3b02      	subs	r3, #2
 801393c:	429a      	cmp	r2, r3
 801393e:	d804      	bhi.n	801394a <create_chain+0x106>
 8013940:	693b      	ldr	r3, [r7, #16]
 8013942:	691b      	ldr	r3, [r3, #16]
 8013944:	1e5a      	subs	r2, r3, #1
 8013946:	693b      	ldr	r3, [r7, #16]
 8013948:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 801394a:	693b      	ldr	r3, [r7, #16]
 801394c:	791b      	ldrb	r3, [r3, #4]
 801394e:	f043 0301 	orr.w	r3, r3, #1
 8013952:	b2da      	uxtb	r2, r3
 8013954:	693b      	ldr	r3, [r7, #16]
 8013956:	711a      	strb	r2, [r3, #4]
 8013958:	e007      	b.n	801396a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801395a:	7dfb      	ldrb	r3, [r7, #23]
 801395c:	2b01      	cmp	r3, #1
 801395e:	d102      	bne.n	8013966 <create_chain+0x122>
 8013960:	f04f 33ff 	mov.w	r3, #4294967295
 8013964:	e000      	b.n	8013968 <create_chain+0x124>
 8013966:	2301      	movs	r3, #1
 8013968:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801396a:	69fb      	ldr	r3, [r7, #28]
}
 801396c:	4618      	mov	r0, r3
 801396e:	3720      	adds	r7, #32
 8013970:	46bd      	mov	sp, r7
 8013972:	bd80      	pop	{r7, pc}

08013974 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8013974:	b480      	push	{r7}
 8013976:	b087      	sub	sp, #28
 8013978:	af00      	add	r7, sp, #0
 801397a:	6078      	str	r0, [r7, #4]
 801397c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	681b      	ldr	r3, [r3, #0]
 8013982:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013988:	3304      	adds	r3, #4
 801398a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801398c:	683b      	ldr	r3, [r7, #0]
 801398e:	0a5b      	lsrs	r3, r3, #9
 8013990:	68fa      	ldr	r2, [r7, #12]
 8013992:	8952      	ldrh	r2, [r2, #10]
 8013994:	fbb3 f3f2 	udiv	r3, r3, r2
 8013998:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801399a:	693b      	ldr	r3, [r7, #16]
 801399c:	1d1a      	adds	r2, r3, #4
 801399e:	613a      	str	r2, [r7, #16]
 80139a0:	681b      	ldr	r3, [r3, #0]
 80139a2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80139a4:	68bb      	ldr	r3, [r7, #8]
 80139a6:	2b00      	cmp	r3, #0
 80139a8:	d101      	bne.n	80139ae <clmt_clust+0x3a>
 80139aa:	2300      	movs	r3, #0
 80139ac:	e010      	b.n	80139d0 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80139ae:	697a      	ldr	r2, [r7, #20]
 80139b0:	68bb      	ldr	r3, [r7, #8]
 80139b2:	429a      	cmp	r2, r3
 80139b4:	d307      	bcc.n	80139c6 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80139b6:	697a      	ldr	r2, [r7, #20]
 80139b8:	68bb      	ldr	r3, [r7, #8]
 80139ba:	1ad3      	subs	r3, r2, r3
 80139bc:	617b      	str	r3, [r7, #20]
 80139be:	693b      	ldr	r3, [r7, #16]
 80139c0:	3304      	adds	r3, #4
 80139c2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80139c4:	e7e9      	b.n	801399a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80139c6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80139c8:	693b      	ldr	r3, [r7, #16]
 80139ca:	681a      	ldr	r2, [r3, #0]
 80139cc:	697b      	ldr	r3, [r7, #20]
 80139ce:	4413      	add	r3, r2
}
 80139d0:	4618      	mov	r0, r3
 80139d2:	371c      	adds	r7, #28
 80139d4:	46bd      	mov	sp, r7
 80139d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139da:	4770      	bx	lr

080139dc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80139dc:	b580      	push	{r7, lr}
 80139de:	b086      	sub	sp, #24
 80139e0:	af00      	add	r7, sp, #0
 80139e2:	6078      	str	r0, [r7, #4]
 80139e4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	681b      	ldr	r3, [r3, #0]
 80139ea:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80139ec:	683b      	ldr	r3, [r7, #0]
 80139ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80139f2:	d204      	bcs.n	80139fe <dir_sdi+0x22>
 80139f4:	683b      	ldr	r3, [r7, #0]
 80139f6:	f003 031f 	and.w	r3, r3, #31
 80139fa:	2b00      	cmp	r3, #0
 80139fc:	d001      	beq.n	8013a02 <dir_sdi+0x26>
		return FR_INT_ERR;
 80139fe:	2302      	movs	r3, #2
 8013a00:	e063      	b.n	8013aca <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	683a      	ldr	r2, [r7, #0]
 8013a06:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	689b      	ldr	r3, [r3, #8]
 8013a0c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8013a0e:	697b      	ldr	r3, [r7, #20]
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d106      	bne.n	8013a22 <dir_sdi+0x46>
 8013a14:	693b      	ldr	r3, [r7, #16]
 8013a16:	781b      	ldrb	r3, [r3, #0]
 8013a18:	2b02      	cmp	r3, #2
 8013a1a:	d902      	bls.n	8013a22 <dir_sdi+0x46>
		clst = fs->dirbase;
 8013a1c:	693b      	ldr	r3, [r7, #16]
 8013a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a20:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8013a22:	697b      	ldr	r3, [r7, #20]
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	d10c      	bne.n	8013a42 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8013a28:	683b      	ldr	r3, [r7, #0]
 8013a2a:	095b      	lsrs	r3, r3, #5
 8013a2c:	693a      	ldr	r2, [r7, #16]
 8013a2e:	8912      	ldrh	r2, [r2, #8]
 8013a30:	4293      	cmp	r3, r2
 8013a32:	d301      	bcc.n	8013a38 <dir_sdi+0x5c>
 8013a34:	2302      	movs	r3, #2
 8013a36:	e048      	b.n	8013aca <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8013a38:	693b      	ldr	r3, [r7, #16]
 8013a3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	61da      	str	r2, [r3, #28]
 8013a40:	e029      	b.n	8013a96 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8013a42:	693b      	ldr	r3, [r7, #16]
 8013a44:	895b      	ldrh	r3, [r3, #10]
 8013a46:	025b      	lsls	r3, r3, #9
 8013a48:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8013a4a:	e019      	b.n	8013a80 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	6979      	ldr	r1, [r7, #20]
 8013a50:	4618      	mov	r0, r3
 8013a52:	f7ff fd06 	bl	8013462 <get_fat>
 8013a56:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8013a58:	697b      	ldr	r3, [r7, #20]
 8013a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a5e:	d101      	bne.n	8013a64 <dir_sdi+0x88>
 8013a60:	2301      	movs	r3, #1
 8013a62:	e032      	b.n	8013aca <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8013a64:	697b      	ldr	r3, [r7, #20]
 8013a66:	2b01      	cmp	r3, #1
 8013a68:	d904      	bls.n	8013a74 <dir_sdi+0x98>
 8013a6a:	693b      	ldr	r3, [r7, #16]
 8013a6c:	695b      	ldr	r3, [r3, #20]
 8013a6e:	697a      	ldr	r2, [r7, #20]
 8013a70:	429a      	cmp	r2, r3
 8013a72:	d301      	bcc.n	8013a78 <dir_sdi+0x9c>
 8013a74:	2302      	movs	r3, #2
 8013a76:	e028      	b.n	8013aca <dir_sdi+0xee>
			ofs -= csz;
 8013a78:	683a      	ldr	r2, [r7, #0]
 8013a7a:	68fb      	ldr	r3, [r7, #12]
 8013a7c:	1ad3      	subs	r3, r2, r3
 8013a7e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8013a80:	683a      	ldr	r2, [r7, #0]
 8013a82:	68fb      	ldr	r3, [r7, #12]
 8013a84:	429a      	cmp	r2, r3
 8013a86:	d2e1      	bcs.n	8013a4c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8013a88:	6979      	ldr	r1, [r7, #20]
 8013a8a:	6938      	ldr	r0, [r7, #16]
 8013a8c:	f7ff fcca 	bl	8013424 <clust2sect>
 8013a90:	4602      	mov	r2, r0
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	697a      	ldr	r2, [r7, #20]
 8013a9a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	69db      	ldr	r3, [r3, #28]
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	d101      	bne.n	8013aa8 <dir_sdi+0xcc>
 8013aa4:	2302      	movs	r3, #2
 8013aa6:	e010      	b.n	8013aca <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	69da      	ldr	r2, [r3, #28]
 8013aac:	683b      	ldr	r3, [r7, #0]
 8013aae:	0a5b      	lsrs	r3, r3, #9
 8013ab0:	441a      	add	r2, r3
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8013ab6:	693b      	ldr	r3, [r7, #16]
 8013ab8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013abc:	683b      	ldr	r3, [r7, #0]
 8013abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013ac2:	441a      	add	r2, r3
 8013ac4:	687b      	ldr	r3, [r7, #4]
 8013ac6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8013ac8:	2300      	movs	r3, #0
}
 8013aca:	4618      	mov	r0, r3
 8013acc:	3718      	adds	r7, #24
 8013ace:	46bd      	mov	sp, r7
 8013ad0:	bd80      	pop	{r7, pc}

08013ad2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8013ad2:	b580      	push	{r7, lr}
 8013ad4:	b086      	sub	sp, #24
 8013ad6:	af00      	add	r7, sp, #0
 8013ad8:	6078      	str	r0, [r7, #4]
 8013ada:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	681b      	ldr	r3, [r3, #0]
 8013ae0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	695b      	ldr	r3, [r3, #20]
 8013ae6:	3320      	adds	r3, #32
 8013ae8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	69db      	ldr	r3, [r3, #28]
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	d003      	beq.n	8013afa <dir_next+0x28>
 8013af2:	68bb      	ldr	r3, [r7, #8]
 8013af4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013af8:	d301      	bcc.n	8013afe <dir_next+0x2c>
 8013afa:	2304      	movs	r3, #4
 8013afc:	e0aa      	b.n	8013c54 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8013afe:	68bb      	ldr	r3, [r7, #8]
 8013b00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	f040 8098 	bne.w	8013c3a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	69db      	ldr	r3, [r3, #28]
 8013b0e:	1c5a      	adds	r2, r3, #1
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	699b      	ldr	r3, [r3, #24]
 8013b18:	2b00      	cmp	r3, #0
 8013b1a:	d10b      	bne.n	8013b34 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8013b1c:	68bb      	ldr	r3, [r7, #8]
 8013b1e:	095b      	lsrs	r3, r3, #5
 8013b20:	68fa      	ldr	r2, [r7, #12]
 8013b22:	8912      	ldrh	r2, [r2, #8]
 8013b24:	4293      	cmp	r3, r2
 8013b26:	f0c0 8088 	bcc.w	8013c3a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	2200      	movs	r2, #0
 8013b2e:	61da      	str	r2, [r3, #28]
 8013b30:	2304      	movs	r3, #4
 8013b32:	e08f      	b.n	8013c54 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8013b34:	68bb      	ldr	r3, [r7, #8]
 8013b36:	0a5b      	lsrs	r3, r3, #9
 8013b38:	68fa      	ldr	r2, [r7, #12]
 8013b3a:	8952      	ldrh	r2, [r2, #10]
 8013b3c:	3a01      	subs	r2, #1
 8013b3e:	4013      	ands	r3, r2
 8013b40:	2b00      	cmp	r3, #0
 8013b42:	d17a      	bne.n	8013c3a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8013b44:	687a      	ldr	r2, [r7, #4]
 8013b46:	687b      	ldr	r3, [r7, #4]
 8013b48:	699b      	ldr	r3, [r3, #24]
 8013b4a:	4619      	mov	r1, r3
 8013b4c:	4610      	mov	r0, r2
 8013b4e:	f7ff fc88 	bl	8013462 <get_fat>
 8013b52:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8013b54:	697b      	ldr	r3, [r7, #20]
 8013b56:	2b01      	cmp	r3, #1
 8013b58:	d801      	bhi.n	8013b5e <dir_next+0x8c>
 8013b5a:	2302      	movs	r3, #2
 8013b5c:	e07a      	b.n	8013c54 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8013b5e:	697b      	ldr	r3, [r7, #20]
 8013b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b64:	d101      	bne.n	8013b6a <dir_next+0x98>
 8013b66:	2301      	movs	r3, #1
 8013b68:	e074      	b.n	8013c54 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8013b6a:	68fb      	ldr	r3, [r7, #12]
 8013b6c:	695b      	ldr	r3, [r3, #20]
 8013b6e:	697a      	ldr	r2, [r7, #20]
 8013b70:	429a      	cmp	r2, r3
 8013b72:	d358      	bcc.n	8013c26 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8013b74:	683b      	ldr	r3, [r7, #0]
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	d104      	bne.n	8013b84 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	2200      	movs	r2, #0
 8013b7e:	61da      	str	r2, [r3, #28]
 8013b80:	2304      	movs	r3, #4
 8013b82:	e067      	b.n	8013c54 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8013b84:	687a      	ldr	r2, [r7, #4]
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	699b      	ldr	r3, [r3, #24]
 8013b8a:	4619      	mov	r1, r3
 8013b8c:	4610      	mov	r0, r2
 8013b8e:	f7ff fe59 	bl	8013844 <create_chain>
 8013b92:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8013b94:	697b      	ldr	r3, [r7, #20]
 8013b96:	2b00      	cmp	r3, #0
 8013b98:	d101      	bne.n	8013b9e <dir_next+0xcc>
 8013b9a:	2307      	movs	r3, #7
 8013b9c:	e05a      	b.n	8013c54 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8013b9e:	697b      	ldr	r3, [r7, #20]
 8013ba0:	2b01      	cmp	r3, #1
 8013ba2:	d101      	bne.n	8013ba8 <dir_next+0xd6>
 8013ba4:	2302      	movs	r3, #2
 8013ba6:	e055      	b.n	8013c54 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8013ba8:	697b      	ldr	r3, [r7, #20]
 8013baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013bae:	d101      	bne.n	8013bb4 <dir_next+0xe2>
 8013bb0:	2301      	movs	r3, #1
 8013bb2:	e04f      	b.n	8013c54 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8013bb4:	68f8      	ldr	r0, [r7, #12]
 8013bb6:	f7ff fb55 	bl	8013264 <sync_window>
 8013bba:	4603      	mov	r3, r0
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	d001      	beq.n	8013bc4 <dir_next+0xf2>
 8013bc0:	2301      	movs	r3, #1
 8013bc2:	e047      	b.n	8013c54 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8013bc4:	68fb      	ldr	r3, [r7, #12]
 8013bc6:	3330      	adds	r3, #48	; 0x30
 8013bc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013bcc:	2100      	movs	r1, #0
 8013bce:	4618      	mov	r0, r3
 8013bd0:	f7ff f97f 	bl	8012ed2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8013bd4:	2300      	movs	r3, #0
 8013bd6:	613b      	str	r3, [r7, #16]
 8013bd8:	6979      	ldr	r1, [r7, #20]
 8013bda:	68f8      	ldr	r0, [r7, #12]
 8013bdc:	f7ff fc22 	bl	8013424 <clust2sect>
 8013be0:	4602      	mov	r2, r0
 8013be2:	68fb      	ldr	r3, [r7, #12]
 8013be4:	62da      	str	r2, [r3, #44]	; 0x2c
 8013be6:	e012      	b.n	8013c0e <dir_next+0x13c>
						fs->wflag = 1;
 8013be8:	68fb      	ldr	r3, [r7, #12]
 8013bea:	2201      	movs	r2, #1
 8013bec:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8013bee:	68f8      	ldr	r0, [r7, #12]
 8013bf0:	f7ff fb38 	bl	8013264 <sync_window>
 8013bf4:	4603      	mov	r3, r0
 8013bf6:	2b00      	cmp	r3, #0
 8013bf8:	d001      	beq.n	8013bfe <dir_next+0x12c>
 8013bfa:	2301      	movs	r3, #1
 8013bfc:	e02a      	b.n	8013c54 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8013bfe:	693b      	ldr	r3, [r7, #16]
 8013c00:	3301      	adds	r3, #1
 8013c02:	613b      	str	r3, [r7, #16]
 8013c04:	68fb      	ldr	r3, [r7, #12]
 8013c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c08:	1c5a      	adds	r2, r3, #1
 8013c0a:	68fb      	ldr	r3, [r7, #12]
 8013c0c:	62da      	str	r2, [r3, #44]	; 0x2c
 8013c0e:	68fb      	ldr	r3, [r7, #12]
 8013c10:	895b      	ldrh	r3, [r3, #10]
 8013c12:	461a      	mov	r2, r3
 8013c14:	693b      	ldr	r3, [r7, #16]
 8013c16:	4293      	cmp	r3, r2
 8013c18:	d3e6      	bcc.n	8013be8 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8013c1a:	68fb      	ldr	r3, [r7, #12]
 8013c1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013c1e:	693b      	ldr	r3, [r7, #16]
 8013c20:	1ad2      	subs	r2, r2, r3
 8013c22:	68fb      	ldr	r3, [r7, #12]
 8013c24:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	697a      	ldr	r2, [r7, #20]
 8013c2a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8013c2c:	6979      	ldr	r1, [r7, #20]
 8013c2e:	68f8      	ldr	r0, [r7, #12]
 8013c30:	f7ff fbf8 	bl	8013424 <clust2sect>
 8013c34:	4602      	mov	r2, r0
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	68ba      	ldr	r2, [r7, #8]
 8013c3e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8013c40:	68fb      	ldr	r3, [r7, #12]
 8013c42:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013c46:	68bb      	ldr	r3, [r7, #8]
 8013c48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013c4c:	441a      	add	r2, r3
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8013c52:	2300      	movs	r3, #0
}
 8013c54:	4618      	mov	r0, r3
 8013c56:	3718      	adds	r7, #24
 8013c58:	46bd      	mov	sp, r7
 8013c5a:	bd80      	pop	{r7, pc}

08013c5c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8013c5c:	b580      	push	{r7, lr}
 8013c5e:	b086      	sub	sp, #24
 8013c60:	af00      	add	r7, sp, #0
 8013c62:	6078      	str	r0, [r7, #4]
 8013c64:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	681b      	ldr	r3, [r3, #0]
 8013c6a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8013c6c:	2100      	movs	r1, #0
 8013c6e:	6878      	ldr	r0, [r7, #4]
 8013c70:	f7ff feb4 	bl	80139dc <dir_sdi>
 8013c74:	4603      	mov	r3, r0
 8013c76:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013c78:	7dfb      	ldrb	r3, [r7, #23]
 8013c7a:	2b00      	cmp	r3, #0
 8013c7c:	d12b      	bne.n	8013cd6 <dir_alloc+0x7a>
		n = 0;
 8013c7e:	2300      	movs	r3, #0
 8013c80:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	69db      	ldr	r3, [r3, #28]
 8013c86:	4619      	mov	r1, r3
 8013c88:	68f8      	ldr	r0, [r7, #12]
 8013c8a:	f7ff fb2f 	bl	80132ec <move_window>
 8013c8e:	4603      	mov	r3, r0
 8013c90:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8013c92:	7dfb      	ldrb	r3, [r7, #23]
 8013c94:	2b00      	cmp	r3, #0
 8013c96:	d11d      	bne.n	8013cd4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	6a1b      	ldr	r3, [r3, #32]
 8013c9c:	781b      	ldrb	r3, [r3, #0]
 8013c9e:	2be5      	cmp	r3, #229	; 0xe5
 8013ca0:	d004      	beq.n	8013cac <dir_alloc+0x50>
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	6a1b      	ldr	r3, [r3, #32]
 8013ca6:	781b      	ldrb	r3, [r3, #0]
 8013ca8:	2b00      	cmp	r3, #0
 8013caa:	d107      	bne.n	8013cbc <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8013cac:	693b      	ldr	r3, [r7, #16]
 8013cae:	3301      	adds	r3, #1
 8013cb0:	613b      	str	r3, [r7, #16]
 8013cb2:	693a      	ldr	r2, [r7, #16]
 8013cb4:	683b      	ldr	r3, [r7, #0]
 8013cb6:	429a      	cmp	r2, r3
 8013cb8:	d102      	bne.n	8013cc0 <dir_alloc+0x64>
 8013cba:	e00c      	b.n	8013cd6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8013cbc:	2300      	movs	r3, #0
 8013cbe:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8013cc0:	2101      	movs	r1, #1
 8013cc2:	6878      	ldr	r0, [r7, #4]
 8013cc4:	f7ff ff05 	bl	8013ad2 <dir_next>
 8013cc8:	4603      	mov	r3, r0
 8013cca:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8013ccc:	7dfb      	ldrb	r3, [r7, #23]
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	d0d7      	beq.n	8013c82 <dir_alloc+0x26>
 8013cd2:	e000      	b.n	8013cd6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8013cd4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8013cd6:	7dfb      	ldrb	r3, [r7, #23]
 8013cd8:	2b04      	cmp	r3, #4
 8013cda:	d101      	bne.n	8013ce0 <dir_alloc+0x84>
 8013cdc:	2307      	movs	r3, #7
 8013cde:	75fb      	strb	r3, [r7, #23]
	return res;
 8013ce0:	7dfb      	ldrb	r3, [r7, #23]
}
 8013ce2:	4618      	mov	r0, r3
 8013ce4:	3718      	adds	r7, #24
 8013ce6:	46bd      	mov	sp, r7
 8013ce8:	bd80      	pop	{r7, pc}

08013cea <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8013cea:	b580      	push	{r7, lr}
 8013cec:	b084      	sub	sp, #16
 8013cee:	af00      	add	r7, sp, #0
 8013cf0:	6078      	str	r0, [r7, #4]
 8013cf2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8013cf4:	683b      	ldr	r3, [r7, #0]
 8013cf6:	331a      	adds	r3, #26
 8013cf8:	4618      	mov	r0, r3
 8013cfa:	f7ff f847 	bl	8012d8c <ld_word>
 8013cfe:	4603      	mov	r3, r0
 8013d00:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	781b      	ldrb	r3, [r3, #0]
 8013d06:	2b03      	cmp	r3, #3
 8013d08:	d109      	bne.n	8013d1e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8013d0a:	683b      	ldr	r3, [r7, #0]
 8013d0c:	3314      	adds	r3, #20
 8013d0e:	4618      	mov	r0, r3
 8013d10:	f7ff f83c 	bl	8012d8c <ld_word>
 8013d14:	4603      	mov	r3, r0
 8013d16:	041b      	lsls	r3, r3, #16
 8013d18:	68fa      	ldr	r2, [r7, #12]
 8013d1a:	4313      	orrs	r3, r2
 8013d1c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8013d1e:	68fb      	ldr	r3, [r7, #12]
}
 8013d20:	4618      	mov	r0, r3
 8013d22:	3710      	adds	r7, #16
 8013d24:	46bd      	mov	sp, r7
 8013d26:	bd80      	pop	{r7, pc}

08013d28 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8013d28:	b580      	push	{r7, lr}
 8013d2a:	b084      	sub	sp, #16
 8013d2c:	af00      	add	r7, sp, #0
 8013d2e:	60f8      	str	r0, [r7, #12]
 8013d30:	60b9      	str	r1, [r7, #8]
 8013d32:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8013d34:	68bb      	ldr	r3, [r7, #8]
 8013d36:	331a      	adds	r3, #26
 8013d38:	687a      	ldr	r2, [r7, #4]
 8013d3a:	b292      	uxth	r2, r2
 8013d3c:	4611      	mov	r1, r2
 8013d3e:	4618      	mov	r0, r3
 8013d40:	f7ff f85f 	bl	8012e02 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8013d44:	68fb      	ldr	r3, [r7, #12]
 8013d46:	781b      	ldrb	r3, [r3, #0]
 8013d48:	2b03      	cmp	r3, #3
 8013d4a:	d109      	bne.n	8013d60 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8013d4c:	68bb      	ldr	r3, [r7, #8]
 8013d4e:	f103 0214 	add.w	r2, r3, #20
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	0c1b      	lsrs	r3, r3, #16
 8013d56:	b29b      	uxth	r3, r3
 8013d58:	4619      	mov	r1, r3
 8013d5a:	4610      	mov	r0, r2
 8013d5c:	f7ff f851 	bl	8012e02 <st_word>
	}
}
 8013d60:	bf00      	nop
 8013d62:	3710      	adds	r7, #16
 8013d64:	46bd      	mov	sp, r7
 8013d66:	bd80      	pop	{r7, pc}

08013d68 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8013d68:	b580      	push	{r7, lr}
 8013d6a:	b086      	sub	sp, #24
 8013d6c:	af00      	add	r7, sp, #0
 8013d6e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	681b      	ldr	r3, [r3, #0]
 8013d74:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8013d76:	2100      	movs	r1, #0
 8013d78:	6878      	ldr	r0, [r7, #4]
 8013d7a:	f7ff fe2f 	bl	80139dc <dir_sdi>
 8013d7e:	4603      	mov	r3, r0
 8013d80:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8013d82:	7dfb      	ldrb	r3, [r7, #23]
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	d001      	beq.n	8013d8c <dir_find+0x24>
 8013d88:	7dfb      	ldrb	r3, [r7, #23]
 8013d8a:	e03e      	b.n	8013e0a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	69db      	ldr	r3, [r3, #28]
 8013d90:	4619      	mov	r1, r3
 8013d92:	6938      	ldr	r0, [r7, #16]
 8013d94:	f7ff faaa 	bl	80132ec <move_window>
 8013d98:	4603      	mov	r3, r0
 8013d9a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8013d9c:	7dfb      	ldrb	r3, [r7, #23]
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	d12f      	bne.n	8013e02 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	6a1b      	ldr	r3, [r3, #32]
 8013da6:	781b      	ldrb	r3, [r3, #0]
 8013da8:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8013daa:	7bfb      	ldrb	r3, [r7, #15]
 8013dac:	2b00      	cmp	r3, #0
 8013dae:	d102      	bne.n	8013db6 <dir_find+0x4e>
 8013db0:	2304      	movs	r3, #4
 8013db2:	75fb      	strb	r3, [r7, #23]
 8013db4:	e028      	b.n	8013e08 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	6a1b      	ldr	r3, [r3, #32]
 8013dba:	330b      	adds	r3, #11
 8013dbc:	781b      	ldrb	r3, [r3, #0]
 8013dbe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013dc2:	b2da      	uxtb	r2, r3
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	6a1b      	ldr	r3, [r3, #32]
 8013dcc:	330b      	adds	r3, #11
 8013dce:	781b      	ldrb	r3, [r3, #0]
 8013dd0:	f003 0308 	and.w	r3, r3, #8
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	d10a      	bne.n	8013dee <dir_find+0x86>
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	6a18      	ldr	r0, [r3, #32]
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	3324      	adds	r3, #36	; 0x24
 8013de0:	220b      	movs	r2, #11
 8013de2:	4619      	mov	r1, r3
 8013de4:	f7ff f88f 	bl	8012f06 <mem_cmp>
 8013de8:	4603      	mov	r3, r0
 8013dea:	2b00      	cmp	r3, #0
 8013dec:	d00b      	beq.n	8013e06 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8013dee:	2100      	movs	r1, #0
 8013df0:	6878      	ldr	r0, [r7, #4]
 8013df2:	f7ff fe6e 	bl	8013ad2 <dir_next>
 8013df6:	4603      	mov	r3, r0
 8013df8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8013dfa:	7dfb      	ldrb	r3, [r7, #23]
 8013dfc:	2b00      	cmp	r3, #0
 8013dfe:	d0c5      	beq.n	8013d8c <dir_find+0x24>
 8013e00:	e002      	b.n	8013e08 <dir_find+0xa0>
		if (res != FR_OK) break;
 8013e02:	bf00      	nop
 8013e04:	e000      	b.n	8013e08 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8013e06:	bf00      	nop

	return res;
 8013e08:	7dfb      	ldrb	r3, [r7, #23]
}
 8013e0a:	4618      	mov	r0, r3
 8013e0c:	3718      	adds	r7, #24
 8013e0e:	46bd      	mov	sp, r7
 8013e10:	bd80      	pop	{r7, pc}

08013e12 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8013e12:	b580      	push	{r7, lr}
 8013e14:	b084      	sub	sp, #16
 8013e16:	af00      	add	r7, sp, #0
 8013e18:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	681b      	ldr	r3, [r3, #0]
 8013e1e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8013e20:	2101      	movs	r1, #1
 8013e22:	6878      	ldr	r0, [r7, #4]
 8013e24:	f7ff ff1a 	bl	8013c5c <dir_alloc>
 8013e28:	4603      	mov	r3, r0
 8013e2a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8013e2c:	7bfb      	ldrb	r3, [r7, #15]
 8013e2e:	2b00      	cmp	r3, #0
 8013e30:	d11c      	bne.n	8013e6c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	69db      	ldr	r3, [r3, #28]
 8013e36:	4619      	mov	r1, r3
 8013e38:	68b8      	ldr	r0, [r7, #8]
 8013e3a:	f7ff fa57 	bl	80132ec <move_window>
 8013e3e:	4603      	mov	r3, r0
 8013e40:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8013e42:	7bfb      	ldrb	r3, [r7, #15]
 8013e44:	2b00      	cmp	r3, #0
 8013e46:	d111      	bne.n	8013e6c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	6a1b      	ldr	r3, [r3, #32]
 8013e4c:	2220      	movs	r2, #32
 8013e4e:	2100      	movs	r1, #0
 8013e50:	4618      	mov	r0, r3
 8013e52:	f7ff f83e 	bl	8012ed2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	6a18      	ldr	r0, [r3, #32]
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	3324      	adds	r3, #36	; 0x24
 8013e5e:	220b      	movs	r2, #11
 8013e60:	4619      	mov	r1, r3
 8013e62:	f7ff f815 	bl	8012e90 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8013e66:	68bb      	ldr	r3, [r7, #8]
 8013e68:	2201      	movs	r2, #1
 8013e6a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8013e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8013e6e:	4618      	mov	r0, r3
 8013e70:	3710      	adds	r7, #16
 8013e72:	46bd      	mov	sp, r7
 8013e74:	bd80      	pop	{r7, pc}
	...

08013e78 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8013e78:	b580      	push	{r7, lr}
 8013e7a:	b088      	sub	sp, #32
 8013e7c:	af00      	add	r7, sp, #0
 8013e7e:	6078      	str	r0, [r7, #4]
 8013e80:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8013e82:	683b      	ldr	r3, [r7, #0]
 8013e84:	681b      	ldr	r3, [r3, #0]
 8013e86:	60fb      	str	r3, [r7, #12]
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	3324      	adds	r3, #36	; 0x24
 8013e8c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8013e8e:	220b      	movs	r2, #11
 8013e90:	2120      	movs	r1, #32
 8013e92:	68b8      	ldr	r0, [r7, #8]
 8013e94:	f7ff f81d 	bl	8012ed2 <mem_set>
	si = i = 0; ni = 8;
 8013e98:	2300      	movs	r3, #0
 8013e9a:	613b      	str	r3, [r7, #16]
 8013e9c:	693b      	ldr	r3, [r7, #16]
 8013e9e:	617b      	str	r3, [r7, #20]
 8013ea0:	2308      	movs	r3, #8
 8013ea2:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8013ea4:	697b      	ldr	r3, [r7, #20]
 8013ea6:	1c5a      	adds	r2, r3, #1
 8013ea8:	617a      	str	r2, [r7, #20]
 8013eaa:	68fa      	ldr	r2, [r7, #12]
 8013eac:	4413      	add	r3, r2
 8013eae:	781b      	ldrb	r3, [r3, #0]
 8013eb0:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8013eb2:	7ffb      	ldrb	r3, [r7, #31]
 8013eb4:	2b20      	cmp	r3, #32
 8013eb6:	d94e      	bls.n	8013f56 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8013eb8:	7ffb      	ldrb	r3, [r7, #31]
 8013eba:	2b2f      	cmp	r3, #47	; 0x2f
 8013ebc:	d006      	beq.n	8013ecc <create_name+0x54>
 8013ebe:	7ffb      	ldrb	r3, [r7, #31]
 8013ec0:	2b5c      	cmp	r3, #92	; 0x5c
 8013ec2:	d110      	bne.n	8013ee6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8013ec4:	e002      	b.n	8013ecc <create_name+0x54>
 8013ec6:	697b      	ldr	r3, [r7, #20]
 8013ec8:	3301      	adds	r3, #1
 8013eca:	617b      	str	r3, [r7, #20]
 8013ecc:	68fa      	ldr	r2, [r7, #12]
 8013ece:	697b      	ldr	r3, [r7, #20]
 8013ed0:	4413      	add	r3, r2
 8013ed2:	781b      	ldrb	r3, [r3, #0]
 8013ed4:	2b2f      	cmp	r3, #47	; 0x2f
 8013ed6:	d0f6      	beq.n	8013ec6 <create_name+0x4e>
 8013ed8:	68fa      	ldr	r2, [r7, #12]
 8013eda:	697b      	ldr	r3, [r7, #20]
 8013edc:	4413      	add	r3, r2
 8013ede:	781b      	ldrb	r3, [r3, #0]
 8013ee0:	2b5c      	cmp	r3, #92	; 0x5c
 8013ee2:	d0f0      	beq.n	8013ec6 <create_name+0x4e>
			break;
 8013ee4:	e038      	b.n	8013f58 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8013ee6:	7ffb      	ldrb	r3, [r7, #31]
 8013ee8:	2b2e      	cmp	r3, #46	; 0x2e
 8013eea:	d003      	beq.n	8013ef4 <create_name+0x7c>
 8013eec:	693a      	ldr	r2, [r7, #16]
 8013eee:	69bb      	ldr	r3, [r7, #24]
 8013ef0:	429a      	cmp	r2, r3
 8013ef2:	d30c      	bcc.n	8013f0e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8013ef4:	69bb      	ldr	r3, [r7, #24]
 8013ef6:	2b0b      	cmp	r3, #11
 8013ef8:	d002      	beq.n	8013f00 <create_name+0x88>
 8013efa:	7ffb      	ldrb	r3, [r7, #31]
 8013efc:	2b2e      	cmp	r3, #46	; 0x2e
 8013efe:	d001      	beq.n	8013f04 <create_name+0x8c>
 8013f00:	2306      	movs	r3, #6
 8013f02:	e044      	b.n	8013f8e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8013f04:	2308      	movs	r3, #8
 8013f06:	613b      	str	r3, [r7, #16]
 8013f08:	230b      	movs	r3, #11
 8013f0a:	61bb      	str	r3, [r7, #24]
			continue;
 8013f0c:	e022      	b.n	8013f54 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8013f0e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8013f12:	2b00      	cmp	r3, #0
 8013f14:	da04      	bge.n	8013f20 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8013f16:	7ffb      	ldrb	r3, [r7, #31]
 8013f18:	3b80      	subs	r3, #128	; 0x80
 8013f1a:	4a1f      	ldr	r2, [pc, #124]	; (8013f98 <create_name+0x120>)
 8013f1c:	5cd3      	ldrb	r3, [r2, r3]
 8013f1e:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8013f20:	7ffb      	ldrb	r3, [r7, #31]
 8013f22:	4619      	mov	r1, r3
 8013f24:	481d      	ldr	r0, [pc, #116]	; (8013f9c <create_name+0x124>)
 8013f26:	f7ff f815 	bl	8012f54 <chk_chr>
 8013f2a:	4603      	mov	r3, r0
 8013f2c:	2b00      	cmp	r3, #0
 8013f2e:	d001      	beq.n	8013f34 <create_name+0xbc>
 8013f30:	2306      	movs	r3, #6
 8013f32:	e02c      	b.n	8013f8e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8013f34:	7ffb      	ldrb	r3, [r7, #31]
 8013f36:	2b60      	cmp	r3, #96	; 0x60
 8013f38:	d905      	bls.n	8013f46 <create_name+0xce>
 8013f3a:	7ffb      	ldrb	r3, [r7, #31]
 8013f3c:	2b7a      	cmp	r3, #122	; 0x7a
 8013f3e:	d802      	bhi.n	8013f46 <create_name+0xce>
 8013f40:	7ffb      	ldrb	r3, [r7, #31]
 8013f42:	3b20      	subs	r3, #32
 8013f44:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8013f46:	693b      	ldr	r3, [r7, #16]
 8013f48:	1c5a      	adds	r2, r3, #1
 8013f4a:	613a      	str	r2, [r7, #16]
 8013f4c:	68ba      	ldr	r2, [r7, #8]
 8013f4e:	4413      	add	r3, r2
 8013f50:	7ffa      	ldrb	r2, [r7, #31]
 8013f52:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8013f54:	e7a6      	b.n	8013ea4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8013f56:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8013f58:	68fa      	ldr	r2, [r7, #12]
 8013f5a:	697b      	ldr	r3, [r7, #20]
 8013f5c:	441a      	add	r2, r3
 8013f5e:	683b      	ldr	r3, [r7, #0]
 8013f60:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8013f62:	693b      	ldr	r3, [r7, #16]
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	d101      	bne.n	8013f6c <create_name+0xf4>
 8013f68:	2306      	movs	r3, #6
 8013f6a:	e010      	b.n	8013f8e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8013f6c:	68bb      	ldr	r3, [r7, #8]
 8013f6e:	781b      	ldrb	r3, [r3, #0]
 8013f70:	2be5      	cmp	r3, #229	; 0xe5
 8013f72:	d102      	bne.n	8013f7a <create_name+0x102>
 8013f74:	68bb      	ldr	r3, [r7, #8]
 8013f76:	2205      	movs	r2, #5
 8013f78:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8013f7a:	7ffb      	ldrb	r3, [r7, #31]
 8013f7c:	2b20      	cmp	r3, #32
 8013f7e:	d801      	bhi.n	8013f84 <create_name+0x10c>
 8013f80:	2204      	movs	r2, #4
 8013f82:	e000      	b.n	8013f86 <create_name+0x10e>
 8013f84:	2200      	movs	r2, #0
 8013f86:	68bb      	ldr	r3, [r7, #8]
 8013f88:	330b      	adds	r3, #11
 8013f8a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8013f8c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8013f8e:	4618      	mov	r0, r3
 8013f90:	3720      	adds	r7, #32
 8013f92:	46bd      	mov	sp, r7
 8013f94:	bd80      	pop	{r7, pc}
 8013f96:	bf00      	nop
 8013f98:	0801721c 	.word	0x0801721c
 8013f9c:	08017140 	.word	0x08017140

08013fa0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8013fa0:	b580      	push	{r7, lr}
 8013fa2:	b086      	sub	sp, #24
 8013fa4:	af00      	add	r7, sp, #0
 8013fa6:	6078      	str	r0, [r7, #4]
 8013fa8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8013fae:	693b      	ldr	r3, [r7, #16]
 8013fb0:	681b      	ldr	r3, [r3, #0]
 8013fb2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8013fb4:	e002      	b.n	8013fbc <follow_path+0x1c>
 8013fb6:	683b      	ldr	r3, [r7, #0]
 8013fb8:	3301      	adds	r3, #1
 8013fba:	603b      	str	r3, [r7, #0]
 8013fbc:	683b      	ldr	r3, [r7, #0]
 8013fbe:	781b      	ldrb	r3, [r3, #0]
 8013fc0:	2b2f      	cmp	r3, #47	; 0x2f
 8013fc2:	d0f8      	beq.n	8013fb6 <follow_path+0x16>
 8013fc4:	683b      	ldr	r3, [r7, #0]
 8013fc6:	781b      	ldrb	r3, [r3, #0]
 8013fc8:	2b5c      	cmp	r3, #92	; 0x5c
 8013fca:	d0f4      	beq.n	8013fb6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8013fcc:	693b      	ldr	r3, [r7, #16]
 8013fce:	2200      	movs	r2, #0
 8013fd0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8013fd2:	683b      	ldr	r3, [r7, #0]
 8013fd4:	781b      	ldrb	r3, [r3, #0]
 8013fd6:	2b1f      	cmp	r3, #31
 8013fd8:	d80a      	bhi.n	8013ff0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	2280      	movs	r2, #128	; 0x80
 8013fde:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8013fe2:	2100      	movs	r1, #0
 8013fe4:	6878      	ldr	r0, [r7, #4]
 8013fe6:	f7ff fcf9 	bl	80139dc <dir_sdi>
 8013fea:	4603      	mov	r3, r0
 8013fec:	75fb      	strb	r3, [r7, #23]
 8013fee:	e043      	b.n	8014078 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8013ff0:	463b      	mov	r3, r7
 8013ff2:	4619      	mov	r1, r3
 8013ff4:	6878      	ldr	r0, [r7, #4]
 8013ff6:	f7ff ff3f 	bl	8013e78 <create_name>
 8013ffa:	4603      	mov	r3, r0
 8013ffc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8013ffe:	7dfb      	ldrb	r3, [r7, #23]
 8014000:	2b00      	cmp	r3, #0
 8014002:	d134      	bne.n	801406e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8014004:	6878      	ldr	r0, [r7, #4]
 8014006:	f7ff feaf 	bl	8013d68 <dir_find>
 801400a:	4603      	mov	r3, r0
 801400c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8014014:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8014016:	7dfb      	ldrb	r3, [r7, #23]
 8014018:	2b00      	cmp	r3, #0
 801401a:	d00a      	beq.n	8014032 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801401c:	7dfb      	ldrb	r3, [r7, #23]
 801401e:	2b04      	cmp	r3, #4
 8014020:	d127      	bne.n	8014072 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8014022:	7afb      	ldrb	r3, [r7, #11]
 8014024:	f003 0304 	and.w	r3, r3, #4
 8014028:	2b00      	cmp	r3, #0
 801402a:	d122      	bne.n	8014072 <follow_path+0xd2>
 801402c:	2305      	movs	r3, #5
 801402e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8014030:	e01f      	b.n	8014072 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8014032:	7afb      	ldrb	r3, [r7, #11]
 8014034:	f003 0304 	and.w	r3, r3, #4
 8014038:	2b00      	cmp	r3, #0
 801403a:	d11c      	bne.n	8014076 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801403c:	693b      	ldr	r3, [r7, #16]
 801403e:	799b      	ldrb	r3, [r3, #6]
 8014040:	f003 0310 	and.w	r3, r3, #16
 8014044:	2b00      	cmp	r3, #0
 8014046:	d102      	bne.n	801404e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8014048:	2305      	movs	r3, #5
 801404a:	75fb      	strb	r3, [r7, #23]
 801404c:	e014      	b.n	8014078 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801404e:	68fb      	ldr	r3, [r7, #12]
 8014050:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	695b      	ldr	r3, [r3, #20]
 8014058:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801405c:	4413      	add	r3, r2
 801405e:	4619      	mov	r1, r3
 8014060:	68f8      	ldr	r0, [r7, #12]
 8014062:	f7ff fe42 	bl	8013cea <ld_clust>
 8014066:	4602      	mov	r2, r0
 8014068:	693b      	ldr	r3, [r7, #16]
 801406a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801406c:	e7c0      	b.n	8013ff0 <follow_path+0x50>
			if (res != FR_OK) break;
 801406e:	bf00      	nop
 8014070:	e002      	b.n	8014078 <follow_path+0xd8>
				break;
 8014072:	bf00      	nop
 8014074:	e000      	b.n	8014078 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8014076:	bf00      	nop
			}
		}
	}

	return res;
 8014078:	7dfb      	ldrb	r3, [r7, #23]
}
 801407a:	4618      	mov	r0, r3
 801407c:	3718      	adds	r7, #24
 801407e:	46bd      	mov	sp, r7
 8014080:	bd80      	pop	{r7, pc}

08014082 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8014082:	b480      	push	{r7}
 8014084:	b087      	sub	sp, #28
 8014086:	af00      	add	r7, sp, #0
 8014088:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801408a:	f04f 33ff 	mov.w	r3, #4294967295
 801408e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	681b      	ldr	r3, [r3, #0]
 8014094:	2b00      	cmp	r3, #0
 8014096:	d031      	beq.n	80140fc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8014098:	687b      	ldr	r3, [r7, #4]
 801409a:	681b      	ldr	r3, [r3, #0]
 801409c:	617b      	str	r3, [r7, #20]
 801409e:	e002      	b.n	80140a6 <get_ldnumber+0x24>
 80140a0:	697b      	ldr	r3, [r7, #20]
 80140a2:	3301      	adds	r3, #1
 80140a4:	617b      	str	r3, [r7, #20]
 80140a6:	697b      	ldr	r3, [r7, #20]
 80140a8:	781b      	ldrb	r3, [r3, #0]
 80140aa:	2b20      	cmp	r3, #32
 80140ac:	d903      	bls.n	80140b6 <get_ldnumber+0x34>
 80140ae:	697b      	ldr	r3, [r7, #20]
 80140b0:	781b      	ldrb	r3, [r3, #0]
 80140b2:	2b3a      	cmp	r3, #58	; 0x3a
 80140b4:	d1f4      	bne.n	80140a0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80140b6:	697b      	ldr	r3, [r7, #20]
 80140b8:	781b      	ldrb	r3, [r3, #0]
 80140ba:	2b3a      	cmp	r3, #58	; 0x3a
 80140bc:	d11c      	bne.n	80140f8 <get_ldnumber+0x76>
			tp = *path;
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	681b      	ldr	r3, [r3, #0]
 80140c2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80140c4:	68fb      	ldr	r3, [r7, #12]
 80140c6:	1c5a      	adds	r2, r3, #1
 80140c8:	60fa      	str	r2, [r7, #12]
 80140ca:	781b      	ldrb	r3, [r3, #0]
 80140cc:	3b30      	subs	r3, #48	; 0x30
 80140ce:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80140d0:	68bb      	ldr	r3, [r7, #8]
 80140d2:	2b09      	cmp	r3, #9
 80140d4:	d80e      	bhi.n	80140f4 <get_ldnumber+0x72>
 80140d6:	68fa      	ldr	r2, [r7, #12]
 80140d8:	697b      	ldr	r3, [r7, #20]
 80140da:	429a      	cmp	r2, r3
 80140dc:	d10a      	bne.n	80140f4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80140de:	68bb      	ldr	r3, [r7, #8]
 80140e0:	2b00      	cmp	r3, #0
 80140e2:	d107      	bne.n	80140f4 <get_ldnumber+0x72>
					vol = (int)i;
 80140e4:	68bb      	ldr	r3, [r7, #8]
 80140e6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80140e8:	697b      	ldr	r3, [r7, #20]
 80140ea:	3301      	adds	r3, #1
 80140ec:	617b      	str	r3, [r7, #20]
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	697a      	ldr	r2, [r7, #20]
 80140f2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80140f4:	693b      	ldr	r3, [r7, #16]
 80140f6:	e002      	b.n	80140fe <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80140f8:	2300      	movs	r3, #0
 80140fa:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80140fc:	693b      	ldr	r3, [r7, #16]
}
 80140fe:	4618      	mov	r0, r3
 8014100:	371c      	adds	r7, #28
 8014102:	46bd      	mov	sp, r7
 8014104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014108:	4770      	bx	lr
	...

0801410c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801410c:	b580      	push	{r7, lr}
 801410e:	b082      	sub	sp, #8
 8014110:	af00      	add	r7, sp, #0
 8014112:	6078      	str	r0, [r7, #4]
 8014114:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	2200      	movs	r2, #0
 801411a:	70da      	strb	r2, [r3, #3]
 801411c:	687b      	ldr	r3, [r7, #4]
 801411e:	f04f 32ff 	mov.w	r2, #4294967295
 8014122:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8014124:	6839      	ldr	r1, [r7, #0]
 8014126:	6878      	ldr	r0, [r7, #4]
 8014128:	f7ff f8e0 	bl	80132ec <move_window>
 801412c:	4603      	mov	r3, r0
 801412e:	2b00      	cmp	r3, #0
 8014130:	d001      	beq.n	8014136 <check_fs+0x2a>
 8014132:	2304      	movs	r3, #4
 8014134:	e038      	b.n	80141a8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	3330      	adds	r3, #48	; 0x30
 801413a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801413e:	4618      	mov	r0, r3
 8014140:	f7fe fe24 	bl	8012d8c <ld_word>
 8014144:	4603      	mov	r3, r0
 8014146:	461a      	mov	r2, r3
 8014148:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801414c:	429a      	cmp	r2, r3
 801414e:	d001      	beq.n	8014154 <check_fs+0x48>
 8014150:	2303      	movs	r3, #3
 8014152:	e029      	b.n	80141a8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801415a:	2be9      	cmp	r3, #233	; 0xe9
 801415c:	d009      	beq.n	8014172 <check_fs+0x66>
 801415e:	687b      	ldr	r3, [r7, #4]
 8014160:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014164:	2beb      	cmp	r3, #235	; 0xeb
 8014166:	d11e      	bne.n	80141a6 <check_fs+0x9a>
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801416e:	2b90      	cmp	r3, #144	; 0x90
 8014170:	d119      	bne.n	80141a6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	3330      	adds	r3, #48	; 0x30
 8014176:	3336      	adds	r3, #54	; 0x36
 8014178:	4618      	mov	r0, r3
 801417a:	f7fe fe1f 	bl	8012dbc <ld_dword>
 801417e:	4603      	mov	r3, r0
 8014180:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8014184:	4a0a      	ldr	r2, [pc, #40]	; (80141b0 <check_fs+0xa4>)
 8014186:	4293      	cmp	r3, r2
 8014188:	d101      	bne.n	801418e <check_fs+0x82>
 801418a:	2300      	movs	r3, #0
 801418c:	e00c      	b.n	80141a8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	3330      	adds	r3, #48	; 0x30
 8014192:	3352      	adds	r3, #82	; 0x52
 8014194:	4618      	mov	r0, r3
 8014196:	f7fe fe11 	bl	8012dbc <ld_dword>
 801419a:	4602      	mov	r2, r0
 801419c:	4b05      	ldr	r3, [pc, #20]	; (80141b4 <check_fs+0xa8>)
 801419e:	429a      	cmp	r2, r3
 80141a0:	d101      	bne.n	80141a6 <check_fs+0x9a>
 80141a2:	2300      	movs	r3, #0
 80141a4:	e000      	b.n	80141a8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80141a6:	2302      	movs	r3, #2
}
 80141a8:	4618      	mov	r0, r3
 80141aa:	3708      	adds	r7, #8
 80141ac:	46bd      	mov	sp, r7
 80141ae:	bd80      	pop	{r7, pc}
 80141b0:	00544146 	.word	0x00544146
 80141b4:	33544146 	.word	0x33544146

080141b8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80141b8:	b580      	push	{r7, lr}
 80141ba:	b096      	sub	sp, #88	; 0x58
 80141bc:	af00      	add	r7, sp, #0
 80141be:	60f8      	str	r0, [r7, #12]
 80141c0:	60b9      	str	r1, [r7, #8]
 80141c2:	4613      	mov	r3, r2
 80141c4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80141c6:	68bb      	ldr	r3, [r7, #8]
 80141c8:	2200      	movs	r2, #0
 80141ca:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80141cc:	68f8      	ldr	r0, [r7, #12]
 80141ce:	f7ff ff58 	bl	8014082 <get_ldnumber>
 80141d2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80141d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80141d6:	2b00      	cmp	r3, #0
 80141d8:	da01      	bge.n	80141de <find_volume+0x26>
 80141da:	230b      	movs	r3, #11
 80141dc:	e22e      	b.n	801463c <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80141de:	4aa8      	ldr	r2, [pc, #672]	; (8014480 <find_volume+0x2c8>)
 80141e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80141e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80141e6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80141e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	d101      	bne.n	80141f2 <find_volume+0x3a>
 80141ee:	230c      	movs	r3, #12
 80141f0:	e224      	b.n	801463c <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80141f2:	68bb      	ldr	r3, [r7, #8]
 80141f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80141f6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80141f8:	79fb      	ldrb	r3, [r7, #7]
 80141fa:	f023 0301 	bic.w	r3, r3, #1
 80141fe:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8014200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014202:	781b      	ldrb	r3, [r3, #0]
 8014204:	2b00      	cmp	r3, #0
 8014206:	d01a      	beq.n	801423e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8014208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801420a:	785b      	ldrb	r3, [r3, #1]
 801420c:	4618      	mov	r0, r3
 801420e:	f7fe fd1f 	bl	8012c50 <disk_status>
 8014212:	4603      	mov	r3, r0
 8014214:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8014218:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801421c:	f003 0301 	and.w	r3, r3, #1
 8014220:	2b00      	cmp	r3, #0
 8014222:	d10c      	bne.n	801423e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8014224:	79fb      	ldrb	r3, [r7, #7]
 8014226:	2b00      	cmp	r3, #0
 8014228:	d007      	beq.n	801423a <find_volume+0x82>
 801422a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801422e:	f003 0304 	and.w	r3, r3, #4
 8014232:	2b00      	cmp	r3, #0
 8014234:	d001      	beq.n	801423a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8014236:	230a      	movs	r3, #10
 8014238:	e200      	b.n	801463c <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 801423a:	2300      	movs	r3, #0
 801423c:	e1fe      	b.n	801463c <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801423e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014240:	2200      	movs	r2, #0
 8014242:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8014244:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014246:	b2da      	uxtb	r2, r3
 8014248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801424a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801424c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801424e:	785b      	ldrb	r3, [r3, #1]
 8014250:	4618      	mov	r0, r3
 8014252:	f7fe fd17 	bl	8012c84 <disk_initialize>
 8014256:	4603      	mov	r3, r0
 8014258:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801425c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014260:	f003 0301 	and.w	r3, r3, #1
 8014264:	2b00      	cmp	r3, #0
 8014266:	d001      	beq.n	801426c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8014268:	2303      	movs	r3, #3
 801426a:	e1e7      	b.n	801463c <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801426c:	79fb      	ldrb	r3, [r7, #7]
 801426e:	2b00      	cmp	r3, #0
 8014270:	d007      	beq.n	8014282 <find_volume+0xca>
 8014272:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014276:	f003 0304 	and.w	r3, r3, #4
 801427a:	2b00      	cmp	r3, #0
 801427c:	d001      	beq.n	8014282 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801427e:	230a      	movs	r3, #10
 8014280:	e1dc      	b.n	801463c <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8014282:	2300      	movs	r3, #0
 8014284:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8014286:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014288:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801428a:	f7ff ff3f 	bl	801410c <check_fs>
 801428e:	4603      	mov	r3, r0
 8014290:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8014294:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014298:	2b02      	cmp	r3, #2
 801429a:	d14b      	bne.n	8014334 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801429c:	2300      	movs	r3, #0
 801429e:	643b      	str	r3, [r7, #64]	; 0x40
 80142a0:	e01f      	b.n	80142e2 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80142a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142a4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80142a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80142aa:	011b      	lsls	r3, r3, #4
 80142ac:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80142b0:	4413      	add	r3, r2
 80142b2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80142b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142b6:	3304      	adds	r3, #4
 80142b8:	781b      	ldrb	r3, [r3, #0]
 80142ba:	2b00      	cmp	r3, #0
 80142bc:	d006      	beq.n	80142cc <find_volume+0x114>
 80142be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142c0:	3308      	adds	r3, #8
 80142c2:	4618      	mov	r0, r3
 80142c4:	f7fe fd7a 	bl	8012dbc <ld_dword>
 80142c8:	4602      	mov	r2, r0
 80142ca:	e000      	b.n	80142ce <find_volume+0x116>
 80142cc:	2200      	movs	r2, #0
 80142ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80142d0:	009b      	lsls	r3, r3, #2
 80142d2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80142d6:	440b      	add	r3, r1
 80142d8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80142dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80142de:	3301      	adds	r3, #1
 80142e0:	643b      	str	r3, [r7, #64]	; 0x40
 80142e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80142e4:	2b03      	cmp	r3, #3
 80142e6:	d9dc      	bls.n	80142a2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80142e8:	2300      	movs	r3, #0
 80142ea:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80142ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80142ee:	2b00      	cmp	r3, #0
 80142f0:	d002      	beq.n	80142f8 <find_volume+0x140>
 80142f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80142f4:	3b01      	subs	r3, #1
 80142f6:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80142f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80142fa:	009b      	lsls	r3, r3, #2
 80142fc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8014300:	4413      	add	r3, r2
 8014302:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8014306:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8014308:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801430a:	2b00      	cmp	r3, #0
 801430c:	d005      	beq.n	801431a <find_volume+0x162>
 801430e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014310:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014312:	f7ff fefb 	bl	801410c <check_fs>
 8014316:	4603      	mov	r3, r0
 8014318:	e000      	b.n	801431c <find_volume+0x164>
 801431a:	2303      	movs	r3, #3
 801431c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8014320:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014324:	2b01      	cmp	r3, #1
 8014326:	d905      	bls.n	8014334 <find_volume+0x17c>
 8014328:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801432a:	3301      	adds	r3, #1
 801432c:	643b      	str	r3, [r7, #64]	; 0x40
 801432e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014330:	2b03      	cmp	r3, #3
 8014332:	d9e1      	bls.n	80142f8 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8014334:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014338:	2b04      	cmp	r3, #4
 801433a:	d101      	bne.n	8014340 <find_volume+0x188>
 801433c:	2301      	movs	r3, #1
 801433e:	e17d      	b.n	801463c <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8014340:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014344:	2b01      	cmp	r3, #1
 8014346:	d901      	bls.n	801434c <find_volume+0x194>
 8014348:	230d      	movs	r3, #13
 801434a:	e177      	b.n	801463c <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801434c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801434e:	3330      	adds	r3, #48	; 0x30
 8014350:	330b      	adds	r3, #11
 8014352:	4618      	mov	r0, r3
 8014354:	f7fe fd1a 	bl	8012d8c <ld_word>
 8014358:	4603      	mov	r3, r0
 801435a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801435e:	d001      	beq.n	8014364 <find_volume+0x1ac>
 8014360:	230d      	movs	r3, #13
 8014362:	e16b      	b.n	801463c <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8014364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014366:	3330      	adds	r3, #48	; 0x30
 8014368:	3316      	adds	r3, #22
 801436a:	4618      	mov	r0, r3
 801436c:	f7fe fd0e 	bl	8012d8c <ld_word>
 8014370:	4603      	mov	r3, r0
 8014372:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8014374:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014376:	2b00      	cmp	r3, #0
 8014378:	d106      	bne.n	8014388 <find_volume+0x1d0>
 801437a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801437c:	3330      	adds	r3, #48	; 0x30
 801437e:	3324      	adds	r3, #36	; 0x24
 8014380:	4618      	mov	r0, r3
 8014382:	f7fe fd1b 	bl	8012dbc <ld_dword>
 8014386:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8014388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801438a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801438c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801438e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014390:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8014394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014396:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8014398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801439a:	789b      	ldrb	r3, [r3, #2]
 801439c:	2b01      	cmp	r3, #1
 801439e:	d005      	beq.n	80143ac <find_volume+0x1f4>
 80143a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143a2:	789b      	ldrb	r3, [r3, #2]
 80143a4:	2b02      	cmp	r3, #2
 80143a6:	d001      	beq.n	80143ac <find_volume+0x1f4>
 80143a8:	230d      	movs	r3, #13
 80143aa:	e147      	b.n	801463c <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80143ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143ae:	789b      	ldrb	r3, [r3, #2]
 80143b0:	461a      	mov	r2, r3
 80143b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80143b4:	fb02 f303 	mul.w	r3, r2, r3
 80143b8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80143ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80143c0:	b29a      	uxth	r2, r3
 80143c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143c4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80143c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143c8:	895b      	ldrh	r3, [r3, #10]
 80143ca:	2b00      	cmp	r3, #0
 80143cc:	d008      	beq.n	80143e0 <find_volume+0x228>
 80143ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143d0:	895b      	ldrh	r3, [r3, #10]
 80143d2:	461a      	mov	r2, r3
 80143d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143d6:	895b      	ldrh	r3, [r3, #10]
 80143d8:	3b01      	subs	r3, #1
 80143da:	4013      	ands	r3, r2
 80143dc:	2b00      	cmp	r3, #0
 80143de:	d001      	beq.n	80143e4 <find_volume+0x22c>
 80143e0:	230d      	movs	r3, #13
 80143e2:	e12b      	b.n	801463c <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80143e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143e6:	3330      	adds	r3, #48	; 0x30
 80143e8:	3311      	adds	r3, #17
 80143ea:	4618      	mov	r0, r3
 80143ec:	f7fe fcce 	bl	8012d8c <ld_word>
 80143f0:	4603      	mov	r3, r0
 80143f2:	461a      	mov	r2, r3
 80143f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143f6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80143f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143fa:	891b      	ldrh	r3, [r3, #8]
 80143fc:	f003 030f 	and.w	r3, r3, #15
 8014400:	b29b      	uxth	r3, r3
 8014402:	2b00      	cmp	r3, #0
 8014404:	d001      	beq.n	801440a <find_volume+0x252>
 8014406:	230d      	movs	r3, #13
 8014408:	e118      	b.n	801463c <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801440a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801440c:	3330      	adds	r3, #48	; 0x30
 801440e:	3313      	adds	r3, #19
 8014410:	4618      	mov	r0, r3
 8014412:	f7fe fcbb 	bl	8012d8c <ld_word>
 8014416:	4603      	mov	r3, r0
 8014418:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801441a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801441c:	2b00      	cmp	r3, #0
 801441e:	d106      	bne.n	801442e <find_volume+0x276>
 8014420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014422:	3330      	adds	r3, #48	; 0x30
 8014424:	3320      	adds	r3, #32
 8014426:	4618      	mov	r0, r3
 8014428:	f7fe fcc8 	bl	8012dbc <ld_dword>
 801442c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801442e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014430:	3330      	adds	r3, #48	; 0x30
 8014432:	330e      	adds	r3, #14
 8014434:	4618      	mov	r0, r3
 8014436:	f7fe fca9 	bl	8012d8c <ld_word>
 801443a:	4603      	mov	r3, r0
 801443c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801443e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014440:	2b00      	cmp	r3, #0
 8014442:	d101      	bne.n	8014448 <find_volume+0x290>
 8014444:	230d      	movs	r3, #13
 8014446:	e0f9      	b.n	801463c <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8014448:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801444a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801444c:	4413      	add	r3, r2
 801444e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014450:	8912      	ldrh	r2, [r2, #8]
 8014452:	0912      	lsrs	r2, r2, #4
 8014454:	b292      	uxth	r2, r2
 8014456:	4413      	add	r3, r2
 8014458:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801445a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801445c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801445e:	429a      	cmp	r2, r3
 8014460:	d201      	bcs.n	8014466 <find_volume+0x2ae>
 8014462:	230d      	movs	r3, #13
 8014464:	e0ea      	b.n	801463c <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8014466:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801446a:	1ad3      	subs	r3, r2, r3
 801446c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801446e:	8952      	ldrh	r2, [r2, #10]
 8014470:	fbb3 f3f2 	udiv	r3, r3, r2
 8014474:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8014476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014478:	2b00      	cmp	r3, #0
 801447a:	d103      	bne.n	8014484 <find_volume+0x2cc>
 801447c:	230d      	movs	r3, #13
 801447e:	e0dd      	b.n	801463c <find_volume+0x484>
 8014480:	2404021c 	.word	0x2404021c
		fmt = FS_FAT32;
 8014484:	2303      	movs	r3, #3
 8014486:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801448a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801448c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8014490:	4293      	cmp	r3, r2
 8014492:	d802      	bhi.n	801449a <find_volume+0x2e2>
 8014494:	2302      	movs	r3, #2
 8014496:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801449a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801449c:	f640 72f5 	movw	r2, #4085	; 0xff5
 80144a0:	4293      	cmp	r3, r2
 80144a2:	d802      	bhi.n	80144aa <find_volume+0x2f2>
 80144a4:	2301      	movs	r3, #1
 80144a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80144aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144ac:	1c9a      	adds	r2, r3, #2
 80144ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144b0:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80144b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144b4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80144b6:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80144b8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80144ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80144bc:	441a      	add	r2, r3
 80144be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144c0:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80144c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80144c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144c6:	441a      	add	r2, r3
 80144c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144ca:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 80144cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80144d0:	2b03      	cmp	r3, #3
 80144d2:	d11e      	bne.n	8014512 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80144d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144d6:	3330      	adds	r3, #48	; 0x30
 80144d8:	332a      	adds	r3, #42	; 0x2a
 80144da:	4618      	mov	r0, r3
 80144dc:	f7fe fc56 	bl	8012d8c <ld_word>
 80144e0:	4603      	mov	r3, r0
 80144e2:	2b00      	cmp	r3, #0
 80144e4:	d001      	beq.n	80144ea <find_volume+0x332>
 80144e6:	230d      	movs	r3, #13
 80144e8:	e0a8      	b.n	801463c <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80144ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144ec:	891b      	ldrh	r3, [r3, #8]
 80144ee:	2b00      	cmp	r3, #0
 80144f0:	d001      	beq.n	80144f6 <find_volume+0x33e>
 80144f2:	230d      	movs	r3, #13
 80144f4:	e0a2      	b.n	801463c <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80144f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144f8:	3330      	adds	r3, #48	; 0x30
 80144fa:	332c      	adds	r3, #44	; 0x2c
 80144fc:	4618      	mov	r0, r3
 80144fe:	f7fe fc5d 	bl	8012dbc <ld_dword>
 8014502:	4602      	mov	r2, r0
 8014504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014506:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8014508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801450a:	695b      	ldr	r3, [r3, #20]
 801450c:	009b      	lsls	r3, r3, #2
 801450e:	647b      	str	r3, [r7, #68]	; 0x44
 8014510:	e01f      	b.n	8014552 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8014512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014514:	891b      	ldrh	r3, [r3, #8]
 8014516:	2b00      	cmp	r3, #0
 8014518:	d101      	bne.n	801451e <find_volume+0x366>
 801451a:	230d      	movs	r3, #13
 801451c:	e08e      	b.n	801463c <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801451e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014520:	6a1a      	ldr	r2, [r3, #32]
 8014522:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014524:	441a      	add	r2, r3
 8014526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014528:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801452a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801452e:	2b02      	cmp	r3, #2
 8014530:	d103      	bne.n	801453a <find_volume+0x382>
 8014532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014534:	695b      	ldr	r3, [r3, #20]
 8014536:	005b      	lsls	r3, r3, #1
 8014538:	e00a      	b.n	8014550 <find_volume+0x398>
 801453a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801453c:	695a      	ldr	r2, [r3, #20]
 801453e:	4613      	mov	r3, r2
 8014540:	005b      	lsls	r3, r3, #1
 8014542:	4413      	add	r3, r2
 8014544:	085a      	lsrs	r2, r3, #1
 8014546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014548:	695b      	ldr	r3, [r3, #20]
 801454a:	f003 0301 	and.w	r3, r3, #1
 801454e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8014550:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8014552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014554:	699a      	ldr	r2, [r3, #24]
 8014556:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014558:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 801455c:	0a5b      	lsrs	r3, r3, #9
 801455e:	429a      	cmp	r2, r3
 8014560:	d201      	bcs.n	8014566 <find_volume+0x3ae>
 8014562:	230d      	movs	r3, #13
 8014564:	e06a      	b.n	801463c <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8014566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014568:	f04f 32ff 	mov.w	r2, #4294967295
 801456c:	611a      	str	r2, [r3, #16]
 801456e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014570:	691a      	ldr	r2, [r3, #16]
 8014572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014574:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8014576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014578:	2280      	movs	r2, #128	; 0x80
 801457a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801457c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014580:	2b03      	cmp	r3, #3
 8014582:	d149      	bne.n	8014618 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8014584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014586:	3330      	adds	r3, #48	; 0x30
 8014588:	3330      	adds	r3, #48	; 0x30
 801458a:	4618      	mov	r0, r3
 801458c:	f7fe fbfe 	bl	8012d8c <ld_word>
 8014590:	4603      	mov	r3, r0
 8014592:	2b01      	cmp	r3, #1
 8014594:	d140      	bne.n	8014618 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8014596:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014598:	3301      	adds	r3, #1
 801459a:	4619      	mov	r1, r3
 801459c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801459e:	f7fe fea5 	bl	80132ec <move_window>
 80145a2:	4603      	mov	r3, r0
 80145a4:	2b00      	cmp	r3, #0
 80145a6:	d137      	bne.n	8014618 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 80145a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145aa:	2200      	movs	r2, #0
 80145ac:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80145ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145b0:	3330      	adds	r3, #48	; 0x30
 80145b2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80145b6:	4618      	mov	r0, r3
 80145b8:	f7fe fbe8 	bl	8012d8c <ld_word>
 80145bc:	4603      	mov	r3, r0
 80145be:	461a      	mov	r2, r3
 80145c0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80145c4:	429a      	cmp	r2, r3
 80145c6:	d127      	bne.n	8014618 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80145c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145ca:	3330      	adds	r3, #48	; 0x30
 80145cc:	4618      	mov	r0, r3
 80145ce:	f7fe fbf5 	bl	8012dbc <ld_dword>
 80145d2:	4602      	mov	r2, r0
 80145d4:	4b1b      	ldr	r3, [pc, #108]	; (8014644 <find_volume+0x48c>)
 80145d6:	429a      	cmp	r2, r3
 80145d8:	d11e      	bne.n	8014618 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80145da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145dc:	3330      	adds	r3, #48	; 0x30
 80145de:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80145e2:	4618      	mov	r0, r3
 80145e4:	f7fe fbea 	bl	8012dbc <ld_dword>
 80145e8:	4602      	mov	r2, r0
 80145ea:	4b17      	ldr	r3, [pc, #92]	; (8014648 <find_volume+0x490>)
 80145ec:	429a      	cmp	r2, r3
 80145ee:	d113      	bne.n	8014618 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80145f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145f2:	3330      	adds	r3, #48	; 0x30
 80145f4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80145f8:	4618      	mov	r0, r3
 80145fa:	f7fe fbdf 	bl	8012dbc <ld_dword>
 80145fe:	4602      	mov	r2, r0
 8014600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014602:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8014604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014606:	3330      	adds	r3, #48	; 0x30
 8014608:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 801460c:	4618      	mov	r0, r3
 801460e:	f7fe fbd5 	bl	8012dbc <ld_dword>
 8014612:	4602      	mov	r2, r0
 8014614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014616:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8014618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801461a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 801461e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8014620:	4b0a      	ldr	r3, [pc, #40]	; (801464c <find_volume+0x494>)
 8014622:	881b      	ldrh	r3, [r3, #0]
 8014624:	3301      	adds	r3, #1
 8014626:	b29a      	uxth	r2, r3
 8014628:	4b08      	ldr	r3, [pc, #32]	; (801464c <find_volume+0x494>)
 801462a:	801a      	strh	r2, [r3, #0]
 801462c:	4b07      	ldr	r3, [pc, #28]	; (801464c <find_volume+0x494>)
 801462e:	881a      	ldrh	r2, [r3, #0]
 8014630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014632:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8014634:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014636:	f7fe fdf1 	bl	801321c <clear_lock>
#endif
	return FR_OK;
 801463a:	2300      	movs	r3, #0
}
 801463c:	4618      	mov	r0, r3
 801463e:	3758      	adds	r7, #88	; 0x58
 8014640:	46bd      	mov	sp, r7
 8014642:	bd80      	pop	{r7, pc}
 8014644:	41615252 	.word	0x41615252
 8014648:	61417272 	.word	0x61417272
 801464c:	24040220 	.word	0x24040220

08014650 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8014650:	b580      	push	{r7, lr}
 8014652:	b084      	sub	sp, #16
 8014654:	af00      	add	r7, sp, #0
 8014656:	6078      	str	r0, [r7, #4]
 8014658:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801465a:	2309      	movs	r3, #9
 801465c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	2b00      	cmp	r3, #0
 8014662:	d01c      	beq.n	801469e <validate+0x4e>
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	681b      	ldr	r3, [r3, #0]
 8014668:	2b00      	cmp	r3, #0
 801466a:	d018      	beq.n	801469e <validate+0x4e>
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	681b      	ldr	r3, [r3, #0]
 8014670:	781b      	ldrb	r3, [r3, #0]
 8014672:	2b00      	cmp	r3, #0
 8014674:	d013      	beq.n	801469e <validate+0x4e>
 8014676:	687b      	ldr	r3, [r7, #4]
 8014678:	889a      	ldrh	r2, [r3, #4]
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	681b      	ldr	r3, [r3, #0]
 801467e:	88db      	ldrh	r3, [r3, #6]
 8014680:	429a      	cmp	r2, r3
 8014682:	d10c      	bne.n	801469e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8014684:	687b      	ldr	r3, [r7, #4]
 8014686:	681b      	ldr	r3, [r3, #0]
 8014688:	785b      	ldrb	r3, [r3, #1]
 801468a:	4618      	mov	r0, r3
 801468c:	f7fe fae0 	bl	8012c50 <disk_status>
 8014690:	4603      	mov	r3, r0
 8014692:	f003 0301 	and.w	r3, r3, #1
 8014696:	2b00      	cmp	r3, #0
 8014698:	d101      	bne.n	801469e <validate+0x4e>
			res = FR_OK;
 801469a:	2300      	movs	r3, #0
 801469c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801469e:	7bfb      	ldrb	r3, [r7, #15]
 80146a0:	2b00      	cmp	r3, #0
 80146a2:	d102      	bne.n	80146aa <validate+0x5a>
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	681b      	ldr	r3, [r3, #0]
 80146a8:	e000      	b.n	80146ac <validate+0x5c>
 80146aa:	2300      	movs	r3, #0
 80146ac:	683a      	ldr	r2, [r7, #0]
 80146ae:	6013      	str	r3, [r2, #0]
	return res;
 80146b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80146b2:	4618      	mov	r0, r3
 80146b4:	3710      	adds	r7, #16
 80146b6:	46bd      	mov	sp, r7
 80146b8:	bd80      	pop	{r7, pc}
	...

080146bc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80146bc:	b580      	push	{r7, lr}
 80146be:	b088      	sub	sp, #32
 80146c0:	af00      	add	r7, sp, #0
 80146c2:	60f8      	str	r0, [r7, #12]
 80146c4:	60b9      	str	r1, [r7, #8]
 80146c6:	4613      	mov	r3, r2
 80146c8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80146ca:	68bb      	ldr	r3, [r7, #8]
 80146cc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80146ce:	f107 0310 	add.w	r3, r7, #16
 80146d2:	4618      	mov	r0, r3
 80146d4:	f7ff fcd5 	bl	8014082 <get_ldnumber>
 80146d8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80146da:	69fb      	ldr	r3, [r7, #28]
 80146dc:	2b00      	cmp	r3, #0
 80146de:	da01      	bge.n	80146e4 <f_mount+0x28>
 80146e0:	230b      	movs	r3, #11
 80146e2:	e02b      	b.n	801473c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80146e4:	4a17      	ldr	r2, [pc, #92]	; (8014744 <f_mount+0x88>)
 80146e6:	69fb      	ldr	r3, [r7, #28]
 80146e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80146ec:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80146ee:	69bb      	ldr	r3, [r7, #24]
 80146f0:	2b00      	cmp	r3, #0
 80146f2:	d005      	beq.n	8014700 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80146f4:	69b8      	ldr	r0, [r7, #24]
 80146f6:	f7fe fd91 	bl	801321c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80146fa:	69bb      	ldr	r3, [r7, #24]
 80146fc:	2200      	movs	r2, #0
 80146fe:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8014700:	68fb      	ldr	r3, [r7, #12]
 8014702:	2b00      	cmp	r3, #0
 8014704:	d002      	beq.n	801470c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8014706:	68fb      	ldr	r3, [r7, #12]
 8014708:	2200      	movs	r2, #0
 801470a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801470c:	68fa      	ldr	r2, [r7, #12]
 801470e:	490d      	ldr	r1, [pc, #52]	; (8014744 <f_mount+0x88>)
 8014710:	69fb      	ldr	r3, [r7, #28]
 8014712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8014716:	68fb      	ldr	r3, [r7, #12]
 8014718:	2b00      	cmp	r3, #0
 801471a:	d002      	beq.n	8014722 <f_mount+0x66>
 801471c:	79fb      	ldrb	r3, [r7, #7]
 801471e:	2b01      	cmp	r3, #1
 8014720:	d001      	beq.n	8014726 <f_mount+0x6a>
 8014722:	2300      	movs	r3, #0
 8014724:	e00a      	b.n	801473c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8014726:	f107 010c 	add.w	r1, r7, #12
 801472a:	f107 0308 	add.w	r3, r7, #8
 801472e:	2200      	movs	r2, #0
 8014730:	4618      	mov	r0, r3
 8014732:	f7ff fd41 	bl	80141b8 <find_volume>
 8014736:	4603      	mov	r3, r0
 8014738:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801473a:	7dfb      	ldrb	r3, [r7, #23]
}
 801473c:	4618      	mov	r0, r3
 801473e:	3720      	adds	r7, #32
 8014740:	46bd      	mov	sp, r7
 8014742:	bd80      	pop	{r7, pc}
 8014744:	2404021c 	.word	0x2404021c

08014748 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8014748:	b580      	push	{r7, lr}
 801474a:	b098      	sub	sp, #96	; 0x60
 801474c:	af00      	add	r7, sp, #0
 801474e:	60f8      	str	r0, [r7, #12]
 8014750:	60b9      	str	r1, [r7, #8]
 8014752:	4613      	mov	r3, r2
 8014754:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8014756:	68fb      	ldr	r3, [r7, #12]
 8014758:	2b00      	cmp	r3, #0
 801475a:	d101      	bne.n	8014760 <f_open+0x18>
 801475c:	2309      	movs	r3, #9
 801475e:	e1ad      	b.n	8014abc <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8014760:	79fb      	ldrb	r3, [r7, #7]
 8014762:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014766:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8014768:	79fa      	ldrb	r2, [r7, #7]
 801476a:	f107 0110 	add.w	r1, r7, #16
 801476e:	f107 0308 	add.w	r3, r7, #8
 8014772:	4618      	mov	r0, r3
 8014774:	f7ff fd20 	bl	80141b8 <find_volume>
 8014778:	4603      	mov	r3, r0
 801477a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 801477e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014782:	2b00      	cmp	r3, #0
 8014784:	f040 8191 	bne.w	8014aaa <f_open+0x362>
		dj.obj.fs = fs;
 8014788:	693b      	ldr	r3, [r7, #16]
 801478a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801478c:	68ba      	ldr	r2, [r7, #8]
 801478e:	f107 0314 	add.w	r3, r7, #20
 8014792:	4611      	mov	r1, r2
 8014794:	4618      	mov	r0, r3
 8014796:	f7ff fc03 	bl	8013fa0 <follow_path>
 801479a:	4603      	mov	r3, r0
 801479c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80147a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80147a4:	2b00      	cmp	r3, #0
 80147a6:	d11a      	bne.n	80147de <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80147a8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80147ac:	b25b      	sxtb	r3, r3
 80147ae:	2b00      	cmp	r3, #0
 80147b0:	da03      	bge.n	80147ba <f_open+0x72>
				res = FR_INVALID_NAME;
 80147b2:	2306      	movs	r3, #6
 80147b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80147b8:	e011      	b.n	80147de <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80147ba:	79fb      	ldrb	r3, [r7, #7]
 80147bc:	f023 0301 	bic.w	r3, r3, #1
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	bf14      	ite	ne
 80147c4:	2301      	movne	r3, #1
 80147c6:	2300      	moveq	r3, #0
 80147c8:	b2db      	uxtb	r3, r3
 80147ca:	461a      	mov	r2, r3
 80147cc:	f107 0314 	add.w	r3, r7, #20
 80147d0:	4611      	mov	r1, r2
 80147d2:	4618      	mov	r0, r3
 80147d4:	f7fe fbda 	bl	8012f8c <chk_lock>
 80147d8:	4603      	mov	r3, r0
 80147da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80147de:	79fb      	ldrb	r3, [r7, #7]
 80147e0:	f003 031c 	and.w	r3, r3, #28
 80147e4:	2b00      	cmp	r3, #0
 80147e6:	d07f      	beq.n	80148e8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80147e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	d017      	beq.n	8014820 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80147f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80147f4:	2b04      	cmp	r3, #4
 80147f6:	d10e      	bne.n	8014816 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80147f8:	f7fe fc24 	bl	8013044 <enq_lock>
 80147fc:	4603      	mov	r3, r0
 80147fe:	2b00      	cmp	r3, #0
 8014800:	d006      	beq.n	8014810 <f_open+0xc8>
 8014802:	f107 0314 	add.w	r3, r7, #20
 8014806:	4618      	mov	r0, r3
 8014808:	f7ff fb03 	bl	8013e12 <dir_register>
 801480c:	4603      	mov	r3, r0
 801480e:	e000      	b.n	8014812 <f_open+0xca>
 8014810:	2312      	movs	r3, #18
 8014812:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8014816:	79fb      	ldrb	r3, [r7, #7]
 8014818:	f043 0308 	orr.w	r3, r3, #8
 801481c:	71fb      	strb	r3, [r7, #7]
 801481e:	e010      	b.n	8014842 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8014820:	7ebb      	ldrb	r3, [r7, #26]
 8014822:	f003 0311 	and.w	r3, r3, #17
 8014826:	2b00      	cmp	r3, #0
 8014828:	d003      	beq.n	8014832 <f_open+0xea>
					res = FR_DENIED;
 801482a:	2307      	movs	r3, #7
 801482c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8014830:	e007      	b.n	8014842 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8014832:	79fb      	ldrb	r3, [r7, #7]
 8014834:	f003 0304 	and.w	r3, r3, #4
 8014838:	2b00      	cmp	r3, #0
 801483a:	d002      	beq.n	8014842 <f_open+0xfa>
 801483c:	2308      	movs	r3, #8
 801483e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8014842:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014846:	2b00      	cmp	r3, #0
 8014848:	d168      	bne.n	801491c <f_open+0x1d4>
 801484a:	79fb      	ldrb	r3, [r7, #7]
 801484c:	f003 0308 	and.w	r3, r3, #8
 8014850:	2b00      	cmp	r3, #0
 8014852:	d063      	beq.n	801491c <f_open+0x1d4>
				dw = GET_FATTIME();
 8014854:	f7fb f8fe 	bl	800fa54 <get_fattime>
 8014858:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801485a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801485c:	330e      	adds	r3, #14
 801485e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014860:	4618      	mov	r0, r3
 8014862:	f7fe fae9 	bl	8012e38 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8014866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014868:	3316      	adds	r3, #22
 801486a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801486c:	4618      	mov	r0, r3
 801486e:	f7fe fae3 	bl	8012e38 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8014872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014874:	330b      	adds	r3, #11
 8014876:	2220      	movs	r2, #32
 8014878:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801487a:	693b      	ldr	r3, [r7, #16]
 801487c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801487e:	4611      	mov	r1, r2
 8014880:	4618      	mov	r0, r3
 8014882:	f7ff fa32 	bl	8013cea <ld_clust>
 8014886:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8014888:	693b      	ldr	r3, [r7, #16]
 801488a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801488c:	2200      	movs	r2, #0
 801488e:	4618      	mov	r0, r3
 8014890:	f7ff fa4a 	bl	8013d28 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8014894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014896:	331c      	adds	r3, #28
 8014898:	2100      	movs	r1, #0
 801489a:	4618      	mov	r0, r3
 801489c:	f7fe facc 	bl	8012e38 <st_dword>
					fs->wflag = 1;
 80148a0:	693b      	ldr	r3, [r7, #16]
 80148a2:	2201      	movs	r2, #1
 80148a4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80148a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80148a8:	2b00      	cmp	r3, #0
 80148aa:	d037      	beq.n	801491c <f_open+0x1d4>
						dw = fs->winsect;
 80148ac:	693b      	ldr	r3, [r7, #16]
 80148ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80148b0:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80148b2:	f107 0314 	add.w	r3, r7, #20
 80148b6:	2200      	movs	r2, #0
 80148b8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80148ba:	4618      	mov	r0, r3
 80148bc:	f7fe ff5d 	bl	801377a <remove_chain>
 80148c0:	4603      	mov	r3, r0
 80148c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80148c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80148ca:	2b00      	cmp	r3, #0
 80148cc:	d126      	bne.n	801491c <f_open+0x1d4>
							res = move_window(fs, dw);
 80148ce:	693b      	ldr	r3, [r7, #16]
 80148d0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80148d2:	4618      	mov	r0, r3
 80148d4:	f7fe fd0a 	bl	80132ec <move_window>
 80148d8:	4603      	mov	r3, r0
 80148da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80148de:	693b      	ldr	r3, [r7, #16]
 80148e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80148e2:	3a01      	subs	r2, #1
 80148e4:	60da      	str	r2, [r3, #12]
 80148e6:	e019      	b.n	801491c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80148e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80148ec:	2b00      	cmp	r3, #0
 80148ee:	d115      	bne.n	801491c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80148f0:	7ebb      	ldrb	r3, [r7, #26]
 80148f2:	f003 0310 	and.w	r3, r3, #16
 80148f6:	2b00      	cmp	r3, #0
 80148f8:	d003      	beq.n	8014902 <f_open+0x1ba>
					res = FR_NO_FILE;
 80148fa:	2304      	movs	r3, #4
 80148fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8014900:	e00c      	b.n	801491c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8014902:	79fb      	ldrb	r3, [r7, #7]
 8014904:	f003 0302 	and.w	r3, r3, #2
 8014908:	2b00      	cmp	r3, #0
 801490a:	d007      	beq.n	801491c <f_open+0x1d4>
 801490c:	7ebb      	ldrb	r3, [r7, #26]
 801490e:	f003 0301 	and.w	r3, r3, #1
 8014912:	2b00      	cmp	r3, #0
 8014914:	d002      	beq.n	801491c <f_open+0x1d4>
						res = FR_DENIED;
 8014916:	2307      	movs	r3, #7
 8014918:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 801491c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014920:	2b00      	cmp	r3, #0
 8014922:	d128      	bne.n	8014976 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8014924:	79fb      	ldrb	r3, [r7, #7]
 8014926:	f003 0308 	and.w	r3, r3, #8
 801492a:	2b00      	cmp	r3, #0
 801492c:	d003      	beq.n	8014936 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 801492e:	79fb      	ldrb	r3, [r7, #7]
 8014930:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014934:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8014936:	693b      	ldr	r3, [r7, #16]
 8014938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801493a:	68fb      	ldr	r3, [r7, #12]
 801493c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 801493e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014940:	68fb      	ldr	r3, [r7, #12]
 8014942:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8014944:	79fb      	ldrb	r3, [r7, #7]
 8014946:	f023 0301 	bic.w	r3, r3, #1
 801494a:	2b00      	cmp	r3, #0
 801494c:	bf14      	ite	ne
 801494e:	2301      	movne	r3, #1
 8014950:	2300      	moveq	r3, #0
 8014952:	b2db      	uxtb	r3, r3
 8014954:	461a      	mov	r2, r3
 8014956:	f107 0314 	add.w	r3, r7, #20
 801495a:	4611      	mov	r1, r2
 801495c:	4618      	mov	r0, r3
 801495e:	f7fe fb93 	bl	8013088 <inc_lock>
 8014962:	4602      	mov	r2, r0
 8014964:	68fb      	ldr	r3, [r7, #12]
 8014966:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8014968:	68fb      	ldr	r3, [r7, #12]
 801496a:	691b      	ldr	r3, [r3, #16]
 801496c:	2b00      	cmp	r3, #0
 801496e:	d102      	bne.n	8014976 <f_open+0x22e>
 8014970:	2302      	movs	r3, #2
 8014972:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8014976:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801497a:	2b00      	cmp	r3, #0
 801497c:	f040 8095 	bne.w	8014aaa <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8014980:	693b      	ldr	r3, [r7, #16]
 8014982:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014984:	4611      	mov	r1, r2
 8014986:	4618      	mov	r0, r3
 8014988:	f7ff f9af 	bl	8013cea <ld_clust>
 801498c:	4602      	mov	r2, r0
 801498e:	68fb      	ldr	r3, [r7, #12]
 8014990:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8014992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014994:	331c      	adds	r3, #28
 8014996:	4618      	mov	r0, r3
 8014998:	f7fe fa10 	bl	8012dbc <ld_dword>
 801499c:	4602      	mov	r2, r0
 801499e:	68fb      	ldr	r3, [r7, #12]
 80149a0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80149a2:	68fb      	ldr	r3, [r7, #12]
 80149a4:	2200      	movs	r2, #0
 80149a6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80149a8:	693a      	ldr	r2, [r7, #16]
 80149aa:	68fb      	ldr	r3, [r7, #12]
 80149ac:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80149ae:	693b      	ldr	r3, [r7, #16]
 80149b0:	88da      	ldrh	r2, [r3, #6]
 80149b2:	68fb      	ldr	r3, [r7, #12]
 80149b4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80149b6:	68fb      	ldr	r3, [r7, #12]
 80149b8:	79fa      	ldrb	r2, [r7, #7]
 80149ba:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80149bc:	68fb      	ldr	r3, [r7, #12]
 80149be:	2200      	movs	r2, #0
 80149c0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80149c2:	68fb      	ldr	r3, [r7, #12]
 80149c4:	2200      	movs	r2, #0
 80149c6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80149c8:	68fb      	ldr	r3, [r7, #12]
 80149ca:	2200      	movs	r2, #0
 80149cc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80149ce:	68fb      	ldr	r3, [r7, #12]
 80149d0:	3330      	adds	r3, #48	; 0x30
 80149d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80149d6:	2100      	movs	r1, #0
 80149d8:	4618      	mov	r0, r3
 80149da:	f7fe fa7a 	bl	8012ed2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80149de:	79fb      	ldrb	r3, [r7, #7]
 80149e0:	f003 0320 	and.w	r3, r3, #32
 80149e4:	2b00      	cmp	r3, #0
 80149e6:	d060      	beq.n	8014aaa <f_open+0x362>
 80149e8:	68fb      	ldr	r3, [r7, #12]
 80149ea:	68db      	ldr	r3, [r3, #12]
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	d05c      	beq.n	8014aaa <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80149f0:	68fb      	ldr	r3, [r7, #12]
 80149f2:	68da      	ldr	r2, [r3, #12]
 80149f4:	68fb      	ldr	r3, [r7, #12]
 80149f6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80149f8:	693b      	ldr	r3, [r7, #16]
 80149fa:	895b      	ldrh	r3, [r3, #10]
 80149fc:	025b      	lsls	r3, r3, #9
 80149fe:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8014a00:	68fb      	ldr	r3, [r7, #12]
 8014a02:	689b      	ldr	r3, [r3, #8]
 8014a04:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014a06:	68fb      	ldr	r3, [r7, #12]
 8014a08:	68db      	ldr	r3, [r3, #12]
 8014a0a:	657b      	str	r3, [r7, #84]	; 0x54
 8014a0c:	e016      	b.n	8014a3c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8014a0e:	68fb      	ldr	r3, [r7, #12]
 8014a10:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014a12:	4618      	mov	r0, r3
 8014a14:	f7fe fd25 	bl	8013462 <get_fat>
 8014a18:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8014a1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014a1c:	2b01      	cmp	r3, #1
 8014a1e:	d802      	bhi.n	8014a26 <f_open+0x2de>
 8014a20:	2302      	movs	r3, #2
 8014a22:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8014a26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014a2c:	d102      	bne.n	8014a34 <f_open+0x2ec>
 8014a2e:	2301      	movs	r3, #1
 8014a30:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014a34:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014a36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014a38:	1ad3      	subs	r3, r2, r3
 8014a3a:	657b      	str	r3, [r7, #84]	; 0x54
 8014a3c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014a40:	2b00      	cmp	r3, #0
 8014a42:	d103      	bne.n	8014a4c <f_open+0x304>
 8014a44:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014a46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014a48:	429a      	cmp	r2, r3
 8014a4a:	d8e0      	bhi.n	8014a0e <f_open+0x2c6>
				}
				fp->clust = clst;
 8014a4c:	68fb      	ldr	r3, [r7, #12]
 8014a4e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014a50:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8014a52:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014a56:	2b00      	cmp	r3, #0
 8014a58:	d127      	bne.n	8014aaa <f_open+0x362>
 8014a5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014a5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014a60:	2b00      	cmp	r3, #0
 8014a62:	d022      	beq.n	8014aaa <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8014a64:	693b      	ldr	r3, [r7, #16]
 8014a66:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014a68:	4618      	mov	r0, r3
 8014a6a:	f7fe fcdb 	bl	8013424 <clust2sect>
 8014a6e:	6478      	str	r0, [r7, #68]	; 0x44
 8014a70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014a72:	2b00      	cmp	r3, #0
 8014a74:	d103      	bne.n	8014a7e <f_open+0x336>
						res = FR_INT_ERR;
 8014a76:	2302      	movs	r3, #2
 8014a78:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8014a7c:	e015      	b.n	8014aaa <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8014a7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014a80:	0a5a      	lsrs	r2, r3, #9
 8014a82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014a84:	441a      	add	r2, r3
 8014a86:	68fb      	ldr	r3, [r7, #12]
 8014a88:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8014a8a:	693b      	ldr	r3, [r7, #16]
 8014a8c:	7858      	ldrb	r0, [r3, #1]
 8014a8e:	68fb      	ldr	r3, [r7, #12]
 8014a90:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014a94:	68fb      	ldr	r3, [r7, #12]
 8014a96:	6a1a      	ldr	r2, [r3, #32]
 8014a98:	2301      	movs	r3, #1
 8014a9a:	f7fe f919 	bl	8012cd0 <disk_read>
 8014a9e:	4603      	mov	r3, r0
 8014aa0:	2b00      	cmp	r3, #0
 8014aa2:	d002      	beq.n	8014aaa <f_open+0x362>
 8014aa4:	2301      	movs	r3, #1
 8014aa6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8014aaa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014aae:	2b00      	cmp	r3, #0
 8014ab0:	d002      	beq.n	8014ab8 <f_open+0x370>
 8014ab2:	68fb      	ldr	r3, [r7, #12]
 8014ab4:	2200      	movs	r2, #0
 8014ab6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8014ab8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8014abc:	4618      	mov	r0, r3
 8014abe:	3760      	adds	r7, #96	; 0x60
 8014ac0:	46bd      	mov	sp, r7
 8014ac2:	bd80      	pop	{r7, pc}

08014ac4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8014ac4:	b580      	push	{r7, lr}
 8014ac6:	b08e      	sub	sp, #56	; 0x38
 8014ac8:	af00      	add	r7, sp, #0
 8014aca:	60f8      	str	r0, [r7, #12]
 8014acc:	60b9      	str	r1, [r7, #8]
 8014ace:	607a      	str	r2, [r7, #4]
 8014ad0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8014ad2:	68bb      	ldr	r3, [r7, #8]
 8014ad4:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8014ad6:	683b      	ldr	r3, [r7, #0]
 8014ad8:	2200      	movs	r2, #0
 8014ada:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8014adc:	68fb      	ldr	r3, [r7, #12]
 8014ade:	f107 0214 	add.w	r2, r7, #20
 8014ae2:	4611      	mov	r1, r2
 8014ae4:	4618      	mov	r0, r3
 8014ae6:	f7ff fdb3 	bl	8014650 <validate>
 8014aea:	4603      	mov	r3, r0
 8014aec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8014af0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014af4:	2b00      	cmp	r3, #0
 8014af6:	d107      	bne.n	8014b08 <f_read+0x44>
 8014af8:	68fb      	ldr	r3, [r7, #12]
 8014afa:	7d5b      	ldrb	r3, [r3, #21]
 8014afc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8014b00:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014b04:	2b00      	cmp	r3, #0
 8014b06:	d002      	beq.n	8014b0e <f_read+0x4a>
 8014b08:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014b0c:	e115      	b.n	8014d3a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8014b0e:	68fb      	ldr	r3, [r7, #12]
 8014b10:	7d1b      	ldrb	r3, [r3, #20]
 8014b12:	f003 0301 	and.w	r3, r3, #1
 8014b16:	2b00      	cmp	r3, #0
 8014b18:	d101      	bne.n	8014b1e <f_read+0x5a>
 8014b1a:	2307      	movs	r3, #7
 8014b1c:	e10d      	b.n	8014d3a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8014b1e:	68fb      	ldr	r3, [r7, #12]
 8014b20:	68da      	ldr	r2, [r3, #12]
 8014b22:	68fb      	ldr	r3, [r7, #12]
 8014b24:	699b      	ldr	r3, [r3, #24]
 8014b26:	1ad3      	subs	r3, r2, r3
 8014b28:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8014b2a:	687a      	ldr	r2, [r7, #4]
 8014b2c:	6a3b      	ldr	r3, [r7, #32]
 8014b2e:	429a      	cmp	r2, r3
 8014b30:	f240 80fe 	bls.w	8014d30 <f_read+0x26c>
 8014b34:	6a3b      	ldr	r3, [r7, #32]
 8014b36:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8014b38:	e0fa      	b.n	8014d30 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8014b3a:	68fb      	ldr	r3, [r7, #12]
 8014b3c:	699b      	ldr	r3, [r3, #24]
 8014b3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014b42:	2b00      	cmp	r3, #0
 8014b44:	f040 80c6 	bne.w	8014cd4 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8014b48:	68fb      	ldr	r3, [r7, #12]
 8014b4a:	699b      	ldr	r3, [r3, #24]
 8014b4c:	0a5b      	lsrs	r3, r3, #9
 8014b4e:	697a      	ldr	r2, [r7, #20]
 8014b50:	8952      	ldrh	r2, [r2, #10]
 8014b52:	3a01      	subs	r2, #1
 8014b54:	4013      	ands	r3, r2
 8014b56:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8014b58:	69fb      	ldr	r3, [r7, #28]
 8014b5a:	2b00      	cmp	r3, #0
 8014b5c:	d12f      	bne.n	8014bbe <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8014b5e:	68fb      	ldr	r3, [r7, #12]
 8014b60:	699b      	ldr	r3, [r3, #24]
 8014b62:	2b00      	cmp	r3, #0
 8014b64:	d103      	bne.n	8014b6e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8014b66:	68fb      	ldr	r3, [r7, #12]
 8014b68:	689b      	ldr	r3, [r3, #8]
 8014b6a:	633b      	str	r3, [r7, #48]	; 0x30
 8014b6c:	e013      	b.n	8014b96 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8014b6e:	68fb      	ldr	r3, [r7, #12]
 8014b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b72:	2b00      	cmp	r3, #0
 8014b74:	d007      	beq.n	8014b86 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8014b76:	68fb      	ldr	r3, [r7, #12]
 8014b78:	699b      	ldr	r3, [r3, #24]
 8014b7a:	4619      	mov	r1, r3
 8014b7c:	68f8      	ldr	r0, [r7, #12]
 8014b7e:	f7fe fef9 	bl	8013974 <clmt_clust>
 8014b82:	6338      	str	r0, [r7, #48]	; 0x30
 8014b84:	e007      	b.n	8014b96 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8014b86:	68fa      	ldr	r2, [r7, #12]
 8014b88:	68fb      	ldr	r3, [r7, #12]
 8014b8a:	69db      	ldr	r3, [r3, #28]
 8014b8c:	4619      	mov	r1, r3
 8014b8e:	4610      	mov	r0, r2
 8014b90:	f7fe fc67 	bl	8013462 <get_fat>
 8014b94:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8014b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b98:	2b01      	cmp	r3, #1
 8014b9a:	d804      	bhi.n	8014ba6 <f_read+0xe2>
 8014b9c:	68fb      	ldr	r3, [r7, #12]
 8014b9e:	2202      	movs	r2, #2
 8014ba0:	755a      	strb	r2, [r3, #21]
 8014ba2:	2302      	movs	r3, #2
 8014ba4:	e0c9      	b.n	8014d3a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014bac:	d104      	bne.n	8014bb8 <f_read+0xf4>
 8014bae:	68fb      	ldr	r3, [r7, #12]
 8014bb0:	2201      	movs	r2, #1
 8014bb2:	755a      	strb	r2, [r3, #21]
 8014bb4:	2301      	movs	r3, #1
 8014bb6:	e0c0      	b.n	8014d3a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8014bb8:	68fb      	ldr	r3, [r7, #12]
 8014bba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014bbc:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8014bbe:	697a      	ldr	r2, [r7, #20]
 8014bc0:	68fb      	ldr	r3, [r7, #12]
 8014bc2:	69db      	ldr	r3, [r3, #28]
 8014bc4:	4619      	mov	r1, r3
 8014bc6:	4610      	mov	r0, r2
 8014bc8:	f7fe fc2c 	bl	8013424 <clust2sect>
 8014bcc:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8014bce:	69bb      	ldr	r3, [r7, #24]
 8014bd0:	2b00      	cmp	r3, #0
 8014bd2:	d104      	bne.n	8014bde <f_read+0x11a>
 8014bd4:	68fb      	ldr	r3, [r7, #12]
 8014bd6:	2202      	movs	r2, #2
 8014bd8:	755a      	strb	r2, [r3, #21]
 8014bda:	2302      	movs	r3, #2
 8014bdc:	e0ad      	b.n	8014d3a <f_read+0x276>
			sect += csect;
 8014bde:	69ba      	ldr	r2, [r7, #24]
 8014be0:	69fb      	ldr	r3, [r7, #28]
 8014be2:	4413      	add	r3, r2
 8014be4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8014be6:	687b      	ldr	r3, [r7, #4]
 8014be8:	0a5b      	lsrs	r3, r3, #9
 8014bea:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8014bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bee:	2b00      	cmp	r3, #0
 8014bf0:	d039      	beq.n	8014c66 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8014bf2:	69fa      	ldr	r2, [r7, #28]
 8014bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bf6:	4413      	add	r3, r2
 8014bf8:	697a      	ldr	r2, [r7, #20]
 8014bfa:	8952      	ldrh	r2, [r2, #10]
 8014bfc:	4293      	cmp	r3, r2
 8014bfe:	d905      	bls.n	8014c0c <f_read+0x148>
					cc = fs->csize - csect;
 8014c00:	697b      	ldr	r3, [r7, #20]
 8014c02:	895b      	ldrh	r3, [r3, #10]
 8014c04:	461a      	mov	r2, r3
 8014c06:	69fb      	ldr	r3, [r7, #28]
 8014c08:	1ad3      	subs	r3, r2, r3
 8014c0a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014c0c:	697b      	ldr	r3, [r7, #20]
 8014c0e:	7858      	ldrb	r0, [r3, #1]
 8014c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c12:	69ba      	ldr	r2, [r7, #24]
 8014c14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014c16:	f7fe f85b 	bl	8012cd0 <disk_read>
 8014c1a:	4603      	mov	r3, r0
 8014c1c:	2b00      	cmp	r3, #0
 8014c1e:	d004      	beq.n	8014c2a <f_read+0x166>
 8014c20:	68fb      	ldr	r3, [r7, #12]
 8014c22:	2201      	movs	r2, #1
 8014c24:	755a      	strb	r2, [r3, #21]
 8014c26:	2301      	movs	r3, #1
 8014c28:	e087      	b.n	8014d3a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8014c2a:	68fb      	ldr	r3, [r7, #12]
 8014c2c:	7d1b      	ldrb	r3, [r3, #20]
 8014c2e:	b25b      	sxtb	r3, r3
 8014c30:	2b00      	cmp	r3, #0
 8014c32:	da14      	bge.n	8014c5e <f_read+0x19a>
 8014c34:	68fb      	ldr	r3, [r7, #12]
 8014c36:	6a1a      	ldr	r2, [r3, #32]
 8014c38:	69bb      	ldr	r3, [r7, #24]
 8014c3a:	1ad3      	subs	r3, r2, r3
 8014c3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014c3e:	429a      	cmp	r2, r3
 8014c40:	d90d      	bls.n	8014c5e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8014c42:	68fb      	ldr	r3, [r7, #12]
 8014c44:	6a1a      	ldr	r2, [r3, #32]
 8014c46:	69bb      	ldr	r3, [r7, #24]
 8014c48:	1ad3      	subs	r3, r2, r3
 8014c4a:	025b      	lsls	r3, r3, #9
 8014c4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014c4e:	18d0      	adds	r0, r2, r3
 8014c50:	68fb      	ldr	r3, [r7, #12]
 8014c52:	3330      	adds	r3, #48	; 0x30
 8014c54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014c58:	4619      	mov	r1, r3
 8014c5a:	f7fe f919 	bl	8012e90 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8014c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c60:	025b      	lsls	r3, r3, #9
 8014c62:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8014c64:	e050      	b.n	8014d08 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8014c66:	68fb      	ldr	r3, [r7, #12]
 8014c68:	6a1b      	ldr	r3, [r3, #32]
 8014c6a:	69ba      	ldr	r2, [r7, #24]
 8014c6c:	429a      	cmp	r2, r3
 8014c6e:	d02e      	beq.n	8014cce <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8014c70:	68fb      	ldr	r3, [r7, #12]
 8014c72:	7d1b      	ldrb	r3, [r3, #20]
 8014c74:	b25b      	sxtb	r3, r3
 8014c76:	2b00      	cmp	r3, #0
 8014c78:	da18      	bge.n	8014cac <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014c7a:	697b      	ldr	r3, [r7, #20]
 8014c7c:	7858      	ldrb	r0, [r3, #1]
 8014c7e:	68fb      	ldr	r3, [r7, #12]
 8014c80:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014c84:	68fb      	ldr	r3, [r7, #12]
 8014c86:	6a1a      	ldr	r2, [r3, #32]
 8014c88:	2301      	movs	r3, #1
 8014c8a:	f7fe f841 	bl	8012d10 <disk_write>
 8014c8e:	4603      	mov	r3, r0
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	d004      	beq.n	8014c9e <f_read+0x1da>
 8014c94:	68fb      	ldr	r3, [r7, #12]
 8014c96:	2201      	movs	r2, #1
 8014c98:	755a      	strb	r2, [r3, #21]
 8014c9a:	2301      	movs	r3, #1
 8014c9c:	e04d      	b.n	8014d3a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8014c9e:	68fb      	ldr	r3, [r7, #12]
 8014ca0:	7d1b      	ldrb	r3, [r3, #20]
 8014ca2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014ca6:	b2da      	uxtb	r2, r3
 8014ca8:	68fb      	ldr	r3, [r7, #12]
 8014caa:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8014cac:	697b      	ldr	r3, [r7, #20]
 8014cae:	7858      	ldrb	r0, [r3, #1]
 8014cb0:	68fb      	ldr	r3, [r7, #12]
 8014cb2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014cb6:	2301      	movs	r3, #1
 8014cb8:	69ba      	ldr	r2, [r7, #24]
 8014cba:	f7fe f809 	bl	8012cd0 <disk_read>
 8014cbe:	4603      	mov	r3, r0
 8014cc0:	2b00      	cmp	r3, #0
 8014cc2:	d004      	beq.n	8014cce <f_read+0x20a>
 8014cc4:	68fb      	ldr	r3, [r7, #12]
 8014cc6:	2201      	movs	r2, #1
 8014cc8:	755a      	strb	r2, [r3, #21]
 8014cca:	2301      	movs	r3, #1
 8014ccc:	e035      	b.n	8014d3a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8014cce:	68fb      	ldr	r3, [r7, #12]
 8014cd0:	69ba      	ldr	r2, [r7, #24]
 8014cd2:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8014cd4:	68fb      	ldr	r3, [r7, #12]
 8014cd6:	699b      	ldr	r3, [r3, #24]
 8014cd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014cdc:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8014ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8014ce2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014ce4:	687b      	ldr	r3, [r7, #4]
 8014ce6:	429a      	cmp	r2, r3
 8014ce8:	d901      	bls.n	8014cee <f_read+0x22a>
 8014cea:	687b      	ldr	r3, [r7, #4]
 8014cec:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8014cee:	68fb      	ldr	r3, [r7, #12]
 8014cf0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8014cf4:	68fb      	ldr	r3, [r7, #12]
 8014cf6:	699b      	ldr	r3, [r3, #24]
 8014cf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014cfc:	4413      	add	r3, r2
 8014cfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014d00:	4619      	mov	r1, r3
 8014d02:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014d04:	f7fe f8c4 	bl	8012e90 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8014d08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d0c:	4413      	add	r3, r2
 8014d0e:	627b      	str	r3, [r7, #36]	; 0x24
 8014d10:	68fb      	ldr	r3, [r7, #12]
 8014d12:	699a      	ldr	r2, [r3, #24]
 8014d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d16:	441a      	add	r2, r3
 8014d18:	68fb      	ldr	r3, [r7, #12]
 8014d1a:	619a      	str	r2, [r3, #24]
 8014d1c:	683b      	ldr	r3, [r7, #0]
 8014d1e:	681a      	ldr	r2, [r3, #0]
 8014d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d22:	441a      	add	r2, r3
 8014d24:	683b      	ldr	r3, [r7, #0]
 8014d26:	601a      	str	r2, [r3, #0]
 8014d28:	687a      	ldr	r2, [r7, #4]
 8014d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d2c:	1ad3      	subs	r3, r2, r3
 8014d2e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8014d30:	687b      	ldr	r3, [r7, #4]
 8014d32:	2b00      	cmp	r3, #0
 8014d34:	f47f af01 	bne.w	8014b3a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8014d38:	2300      	movs	r3, #0
}
 8014d3a:	4618      	mov	r0, r3
 8014d3c:	3738      	adds	r7, #56	; 0x38
 8014d3e:	46bd      	mov	sp, r7
 8014d40:	bd80      	pop	{r7, pc}

08014d42 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8014d42:	b580      	push	{r7, lr}
 8014d44:	b08c      	sub	sp, #48	; 0x30
 8014d46:	af00      	add	r7, sp, #0
 8014d48:	60f8      	str	r0, [r7, #12]
 8014d4a:	60b9      	str	r1, [r7, #8]
 8014d4c:	607a      	str	r2, [r7, #4]
 8014d4e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8014d50:	68bb      	ldr	r3, [r7, #8]
 8014d52:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8014d54:	683b      	ldr	r3, [r7, #0]
 8014d56:	2200      	movs	r2, #0
 8014d58:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8014d5a:	68fb      	ldr	r3, [r7, #12]
 8014d5c:	f107 0210 	add.w	r2, r7, #16
 8014d60:	4611      	mov	r1, r2
 8014d62:	4618      	mov	r0, r3
 8014d64:	f7ff fc74 	bl	8014650 <validate>
 8014d68:	4603      	mov	r3, r0
 8014d6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8014d6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014d72:	2b00      	cmp	r3, #0
 8014d74:	d107      	bne.n	8014d86 <f_write+0x44>
 8014d76:	68fb      	ldr	r3, [r7, #12]
 8014d78:	7d5b      	ldrb	r3, [r3, #21]
 8014d7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8014d7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014d82:	2b00      	cmp	r3, #0
 8014d84:	d002      	beq.n	8014d8c <f_write+0x4a>
 8014d86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014d8a:	e14b      	b.n	8015024 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8014d8c:	68fb      	ldr	r3, [r7, #12]
 8014d8e:	7d1b      	ldrb	r3, [r3, #20]
 8014d90:	f003 0302 	and.w	r3, r3, #2
 8014d94:	2b00      	cmp	r3, #0
 8014d96:	d101      	bne.n	8014d9c <f_write+0x5a>
 8014d98:	2307      	movs	r3, #7
 8014d9a:	e143      	b.n	8015024 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8014d9c:	68fb      	ldr	r3, [r7, #12]
 8014d9e:	699a      	ldr	r2, [r3, #24]
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	441a      	add	r2, r3
 8014da4:	68fb      	ldr	r3, [r7, #12]
 8014da6:	699b      	ldr	r3, [r3, #24]
 8014da8:	429a      	cmp	r2, r3
 8014daa:	f080 812d 	bcs.w	8015008 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8014dae:	68fb      	ldr	r3, [r7, #12]
 8014db0:	699b      	ldr	r3, [r3, #24]
 8014db2:	43db      	mvns	r3, r3
 8014db4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8014db6:	e127      	b.n	8015008 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8014db8:	68fb      	ldr	r3, [r7, #12]
 8014dba:	699b      	ldr	r3, [r3, #24]
 8014dbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	f040 80e3 	bne.w	8014f8c <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8014dc6:	68fb      	ldr	r3, [r7, #12]
 8014dc8:	699b      	ldr	r3, [r3, #24]
 8014dca:	0a5b      	lsrs	r3, r3, #9
 8014dcc:	693a      	ldr	r2, [r7, #16]
 8014dce:	8952      	ldrh	r2, [r2, #10]
 8014dd0:	3a01      	subs	r2, #1
 8014dd2:	4013      	ands	r3, r2
 8014dd4:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8014dd6:	69bb      	ldr	r3, [r7, #24]
 8014dd8:	2b00      	cmp	r3, #0
 8014dda:	d143      	bne.n	8014e64 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8014ddc:	68fb      	ldr	r3, [r7, #12]
 8014dde:	699b      	ldr	r3, [r3, #24]
 8014de0:	2b00      	cmp	r3, #0
 8014de2:	d10c      	bne.n	8014dfe <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8014de4:	68fb      	ldr	r3, [r7, #12]
 8014de6:	689b      	ldr	r3, [r3, #8]
 8014de8:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8014dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014dec:	2b00      	cmp	r3, #0
 8014dee:	d11a      	bne.n	8014e26 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8014df0:	68fb      	ldr	r3, [r7, #12]
 8014df2:	2100      	movs	r1, #0
 8014df4:	4618      	mov	r0, r3
 8014df6:	f7fe fd25 	bl	8013844 <create_chain>
 8014dfa:	62b8      	str	r0, [r7, #40]	; 0x28
 8014dfc:	e013      	b.n	8014e26 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8014dfe:	68fb      	ldr	r3, [r7, #12]
 8014e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e02:	2b00      	cmp	r3, #0
 8014e04:	d007      	beq.n	8014e16 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8014e06:	68fb      	ldr	r3, [r7, #12]
 8014e08:	699b      	ldr	r3, [r3, #24]
 8014e0a:	4619      	mov	r1, r3
 8014e0c:	68f8      	ldr	r0, [r7, #12]
 8014e0e:	f7fe fdb1 	bl	8013974 <clmt_clust>
 8014e12:	62b8      	str	r0, [r7, #40]	; 0x28
 8014e14:	e007      	b.n	8014e26 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8014e16:	68fa      	ldr	r2, [r7, #12]
 8014e18:	68fb      	ldr	r3, [r7, #12]
 8014e1a:	69db      	ldr	r3, [r3, #28]
 8014e1c:	4619      	mov	r1, r3
 8014e1e:	4610      	mov	r0, r2
 8014e20:	f7fe fd10 	bl	8013844 <create_chain>
 8014e24:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8014e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e28:	2b00      	cmp	r3, #0
 8014e2a:	f000 80f2 	beq.w	8015012 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8014e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e30:	2b01      	cmp	r3, #1
 8014e32:	d104      	bne.n	8014e3e <f_write+0xfc>
 8014e34:	68fb      	ldr	r3, [r7, #12]
 8014e36:	2202      	movs	r2, #2
 8014e38:	755a      	strb	r2, [r3, #21]
 8014e3a:	2302      	movs	r3, #2
 8014e3c:	e0f2      	b.n	8015024 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e44:	d104      	bne.n	8014e50 <f_write+0x10e>
 8014e46:	68fb      	ldr	r3, [r7, #12]
 8014e48:	2201      	movs	r2, #1
 8014e4a:	755a      	strb	r2, [r3, #21]
 8014e4c:	2301      	movs	r3, #1
 8014e4e:	e0e9      	b.n	8015024 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8014e50:	68fb      	ldr	r3, [r7, #12]
 8014e52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014e54:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8014e56:	68fb      	ldr	r3, [r7, #12]
 8014e58:	689b      	ldr	r3, [r3, #8]
 8014e5a:	2b00      	cmp	r3, #0
 8014e5c:	d102      	bne.n	8014e64 <f_write+0x122>
 8014e5e:	68fb      	ldr	r3, [r7, #12]
 8014e60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014e62:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8014e64:	68fb      	ldr	r3, [r7, #12]
 8014e66:	7d1b      	ldrb	r3, [r3, #20]
 8014e68:	b25b      	sxtb	r3, r3
 8014e6a:	2b00      	cmp	r3, #0
 8014e6c:	da18      	bge.n	8014ea0 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014e6e:	693b      	ldr	r3, [r7, #16]
 8014e70:	7858      	ldrb	r0, [r3, #1]
 8014e72:	68fb      	ldr	r3, [r7, #12]
 8014e74:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014e78:	68fb      	ldr	r3, [r7, #12]
 8014e7a:	6a1a      	ldr	r2, [r3, #32]
 8014e7c:	2301      	movs	r3, #1
 8014e7e:	f7fd ff47 	bl	8012d10 <disk_write>
 8014e82:	4603      	mov	r3, r0
 8014e84:	2b00      	cmp	r3, #0
 8014e86:	d004      	beq.n	8014e92 <f_write+0x150>
 8014e88:	68fb      	ldr	r3, [r7, #12]
 8014e8a:	2201      	movs	r2, #1
 8014e8c:	755a      	strb	r2, [r3, #21]
 8014e8e:	2301      	movs	r3, #1
 8014e90:	e0c8      	b.n	8015024 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8014e92:	68fb      	ldr	r3, [r7, #12]
 8014e94:	7d1b      	ldrb	r3, [r3, #20]
 8014e96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014e9a:	b2da      	uxtb	r2, r3
 8014e9c:	68fb      	ldr	r3, [r7, #12]
 8014e9e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8014ea0:	693a      	ldr	r2, [r7, #16]
 8014ea2:	68fb      	ldr	r3, [r7, #12]
 8014ea4:	69db      	ldr	r3, [r3, #28]
 8014ea6:	4619      	mov	r1, r3
 8014ea8:	4610      	mov	r0, r2
 8014eaa:	f7fe fabb 	bl	8013424 <clust2sect>
 8014eae:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8014eb0:	697b      	ldr	r3, [r7, #20]
 8014eb2:	2b00      	cmp	r3, #0
 8014eb4:	d104      	bne.n	8014ec0 <f_write+0x17e>
 8014eb6:	68fb      	ldr	r3, [r7, #12]
 8014eb8:	2202      	movs	r2, #2
 8014eba:	755a      	strb	r2, [r3, #21]
 8014ebc:	2302      	movs	r3, #2
 8014ebe:	e0b1      	b.n	8015024 <f_write+0x2e2>
			sect += csect;
 8014ec0:	697a      	ldr	r2, [r7, #20]
 8014ec2:	69bb      	ldr	r3, [r7, #24]
 8014ec4:	4413      	add	r3, r2
 8014ec6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8014ec8:	687b      	ldr	r3, [r7, #4]
 8014eca:	0a5b      	lsrs	r3, r3, #9
 8014ecc:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8014ece:	6a3b      	ldr	r3, [r7, #32]
 8014ed0:	2b00      	cmp	r3, #0
 8014ed2:	d03c      	beq.n	8014f4e <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8014ed4:	69ba      	ldr	r2, [r7, #24]
 8014ed6:	6a3b      	ldr	r3, [r7, #32]
 8014ed8:	4413      	add	r3, r2
 8014eda:	693a      	ldr	r2, [r7, #16]
 8014edc:	8952      	ldrh	r2, [r2, #10]
 8014ede:	4293      	cmp	r3, r2
 8014ee0:	d905      	bls.n	8014eee <f_write+0x1ac>
					cc = fs->csize - csect;
 8014ee2:	693b      	ldr	r3, [r7, #16]
 8014ee4:	895b      	ldrh	r3, [r3, #10]
 8014ee6:	461a      	mov	r2, r3
 8014ee8:	69bb      	ldr	r3, [r7, #24]
 8014eea:	1ad3      	subs	r3, r2, r3
 8014eec:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014eee:	693b      	ldr	r3, [r7, #16]
 8014ef0:	7858      	ldrb	r0, [r3, #1]
 8014ef2:	6a3b      	ldr	r3, [r7, #32]
 8014ef4:	697a      	ldr	r2, [r7, #20]
 8014ef6:	69f9      	ldr	r1, [r7, #28]
 8014ef8:	f7fd ff0a 	bl	8012d10 <disk_write>
 8014efc:	4603      	mov	r3, r0
 8014efe:	2b00      	cmp	r3, #0
 8014f00:	d004      	beq.n	8014f0c <f_write+0x1ca>
 8014f02:	68fb      	ldr	r3, [r7, #12]
 8014f04:	2201      	movs	r2, #1
 8014f06:	755a      	strb	r2, [r3, #21]
 8014f08:	2301      	movs	r3, #1
 8014f0a:	e08b      	b.n	8015024 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8014f0c:	68fb      	ldr	r3, [r7, #12]
 8014f0e:	6a1a      	ldr	r2, [r3, #32]
 8014f10:	697b      	ldr	r3, [r7, #20]
 8014f12:	1ad3      	subs	r3, r2, r3
 8014f14:	6a3a      	ldr	r2, [r7, #32]
 8014f16:	429a      	cmp	r2, r3
 8014f18:	d915      	bls.n	8014f46 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8014f1a:	68fb      	ldr	r3, [r7, #12]
 8014f1c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8014f20:	68fb      	ldr	r3, [r7, #12]
 8014f22:	6a1a      	ldr	r2, [r3, #32]
 8014f24:	697b      	ldr	r3, [r7, #20]
 8014f26:	1ad3      	subs	r3, r2, r3
 8014f28:	025b      	lsls	r3, r3, #9
 8014f2a:	69fa      	ldr	r2, [r7, #28]
 8014f2c:	4413      	add	r3, r2
 8014f2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014f32:	4619      	mov	r1, r3
 8014f34:	f7fd ffac 	bl	8012e90 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8014f38:	68fb      	ldr	r3, [r7, #12]
 8014f3a:	7d1b      	ldrb	r3, [r3, #20]
 8014f3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014f40:	b2da      	uxtb	r2, r3
 8014f42:	68fb      	ldr	r3, [r7, #12]
 8014f44:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8014f46:	6a3b      	ldr	r3, [r7, #32]
 8014f48:	025b      	lsls	r3, r3, #9
 8014f4a:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8014f4c:	e03f      	b.n	8014fce <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8014f4e:	68fb      	ldr	r3, [r7, #12]
 8014f50:	6a1b      	ldr	r3, [r3, #32]
 8014f52:	697a      	ldr	r2, [r7, #20]
 8014f54:	429a      	cmp	r2, r3
 8014f56:	d016      	beq.n	8014f86 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8014f58:	68fb      	ldr	r3, [r7, #12]
 8014f5a:	699a      	ldr	r2, [r3, #24]
 8014f5c:	68fb      	ldr	r3, [r7, #12]
 8014f5e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8014f60:	429a      	cmp	r2, r3
 8014f62:	d210      	bcs.n	8014f86 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8014f64:	693b      	ldr	r3, [r7, #16]
 8014f66:	7858      	ldrb	r0, [r3, #1]
 8014f68:	68fb      	ldr	r3, [r7, #12]
 8014f6a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014f6e:	2301      	movs	r3, #1
 8014f70:	697a      	ldr	r2, [r7, #20]
 8014f72:	f7fd fead 	bl	8012cd0 <disk_read>
 8014f76:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8014f78:	2b00      	cmp	r3, #0
 8014f7a:	d004      	beq.n	8014f86 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8014f7c:	68fb      	ldr	r3, [r7, #12]
 8014f7e:	2201      	movs	r2, #1
 8014f80:	755a      	strb	r2, [r3, #21]
 8014f82:	2301      	movs	r3, #1
 8014f84:	e04e      	b.n	8015024 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8014f86:	68fb      	ldr	r3, [r7, #12]
 8014f88:	697a      	ldr	r2, [r7, #20]
 8014f8a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8014f8c:	68fb      	ldr	r3, [r7, #12]
 8014f8e:	699b      	ldr	r3, [r3, #24]
 8014f90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014f94:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8014f98:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8014f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014f9c:	687b      	ldr	r3, [r7, #4]
 8014f9e:	429a      	cmp	r2, r3
 8014fa0:	d901      	bls.n	8014fa6 <f_write+0x264>
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8014fa6:	68fb      	ldr	r3, [r7, #12]
 8014fa8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8014fac:	68fb      	ldr	r3, [r7, #12]
 8014fae:	699b      	ldr	r3, [r3, #24]
 8014fb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014fb4:	4413      	add	r3, r2
 8014fb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014fb8:	69f9      	ldr	r1, [r7, #28]
 8014fba:	4618      	mov	r0, r3
 8014fbc:	f7fd ff68 	bl	8012e90 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8014fc0:	68fb      	ldr	r3, [r7, #12]
 8014fc2:	7d1b      	ldrb	r3, [r3, #20]
 8014fc4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8014fc8:	b2da      	uxtb	r2, r3
 8014fca:	68fb      	ldr	r3, [r7, #12]
 8014fcc:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8014fce:	69fa      	ldr	r2, [r7, #28]
 8014fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fd2:	4413      	add	r3, r2
 8014fd4:	61fb      	str	r3, [r7, #28]
 8014fd6:	68fb      	ldr	r3, [r7, #12]
 8014fd8:	699a      	ldr	r2, [r3, #24]
 8014fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fdc:	441a      	add	r2, r3
 8014fde:	68fb      	ldr	r3, [r7, #12]
 8014fe0:	619a      	str	r2, [r3, #24]
 8014fe2:	68fb      	ldr	r3, [r7, #12]
 8014fe4:	68da      	ldr	r2, [r3, #12]
 8014fe6:	68fb      	ldr	r3, [r7, #12]
 8014fe8:	699b      	ldr	r3, [r3, #24]
 8014fea:	429a      	cmp	r2, r3
 8014fec:	bf38      	it	cc
 8014fee:	461a      	movcc	r2, r3
 8014ff0:	68fb      	ldr	r3, [r7, #12]
 8014ff2:	60da      	str	r2, [r3, #12]
 8014ff4:	683b      	ldr	r3, [r7, #0]
 8014ff6:	681a      	ldr	r2, [r3, #0]
 8014ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ffa:	441a      	add	r2, r3
 8014ffc:	683b      	ldr	r3, [r7, #0]
 8014ffe:	601a      	str	r2, [r3, #0]
 8015000:	687a      	ldr	r2, [r7, #4]
 8015002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015004:	1ad3      	subs	r3, r2, r3
 8015006:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8015008:	687b      	ldr	r3, [r7, #4]
 801500a:	2b00      	cmp	r3, #0
 801500c:	f47f aed4 	bne.w	8014db8 <f_write+0x76>
 8015010:	e000      	b.n	8015014 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8015012:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8015014:	68fb      	ldr	r3, [r7, #12]
 8015016:	7d1b      	ldrb	r3, [r3, #20]
 8015018:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801501c:	b2da      	uxtb	r2, r3
 801501e:	68fb      	ldr	r3, [r7, #12]
 8015020:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8015022:	2300      	movs	r3, #0
}
 8015024:	4618      	mov	r0, r3
 8015026:	3730      	adds	r7, #48	; 0x30
 8015028:	46bd      	mov	sp, r7
 801502a:	bd80      	pop	{r7, pc}

0801502c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801502c:	b580      	push	{r7, lr}
 801502e:	b086      	sub	sp, #24
 8015030:	af00      	add	r7, sp, #0
 8015032:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	f107 0208 	add.w	r2, r7, #8
 801503a:	4611      	mov	r1, r2
 801503c:	4618      	mov	r0, r3
 801503e:	f7ff fb07 	bl	8014650 <validate>
 8015042:	4603      	mov	r3, r0
 8015044:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8015046:	7dfb      	ldrb	r3, [r7, #23]
 8015048:	2b00      	cmp	r3, #0
 801504a:	d168      	bne.n	801511e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	7d1b      	ldrb	r3, [r3, #20]
 8015050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015054:	2b00      	cmp	r3, #0
 8015056:	d062      	beq.n	801511e <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	7d1b      	ldrb	r3, [r3, #20]
 801505c:	b25b      	sxtb	r3, r3
 801505e:	2b00      	cmp	r3, #0
 8015060:	da15      	bge.n	801508e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8015062:	68bb      	ldr	r3, [r7, #8]
 8015064:	7858      	ldrb	r0, [r3, #1]
 8015066:	687b      	ldr	r3, [r7, #4]
 8015068:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801506c:	687b      	ldr	r3, [r7, #4]
 801506e:	6a1a      	ldr	r2, [r3, #32]
 8015070:	2301      	movs	r3, #1
 8015072:	f7fd fe4d 	bl	8012d10 <disk_write>
 8015076:	4603      	mov	r3, r0
 8015078:	2b00      	cmp	r3, #0
 801507a:	d001      	beq.n	8015080 <f_sync+0x54>
 801507c:	2301      	movs	r3, #1
 801507e:	e04f      	b.n	8015120 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8015080:	687b      	ldr	r3, [r7, #4]
 8015082:	7d1b      	ldrb	r3, [r3, #20]
 8015084:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015088:	b2da      	uxtb	r2, r3
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801508e:	f7fa fce1 	bl	800fa54 <get_fattime>
 8015092:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8015094:	68ba      	ldr	r2, [r7, #8]
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801509a:	4619      	mov	r1, r3
 801509c:	4610      	mov	r0, r2
 801509e:	f7fe f925 	bl	80132ec <move_window>
 80150a2:	4603      	mov	r3, r0
 80150a4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80150a6:	7dfb      	ldrb	r3, [r7, #23]
 80150a8:	2b00      	cmp	r3, #0
 80150aa:	d138      	bne.n	801511e <f_sync+0xf2>
					dir = fp->dir_ptr;
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80150b0:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80150b2:	68fb      	ldr	r3, [r7, #12]
 80150b4:	330b      	adds	r3, #11
 80150b6:	781a      	ldrb	r2, [r3, #0]
 80150b8:	68fb      	ldr	r3, [r7, #12]
 80150ba:	330b      	adds	r3, #11
 80150bc:	f042 0220 	orr.w	r2, r2, #32
 80150c0:	b2d2      	uxtb	r2, r2
 80150c2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	6818      	ldr	r0, [r3, #0]
 80150c8:	687b      	ldr	r3, [r7, #4]
 80150ca:	689b      	ldr	r3, [r3, #8]
 80150cc:	461a      	mov	r2, r3
 80150ce:	68f9      	ldr	r1, [r7, #12]
 80150d0:	f7fe fe2a 	bl	8013d28 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80150d4:	68fb      	ldr	r3, [r7, #12]
 80150d6:	f103 021c 	add.w	r2, r3, #28
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	68db      	ldr	r3, [r3, #12]
 80150de:	4619      	mov	r1, r3
 80150e0:	4610      	mov	r0, r2
 80150e2:	f7fd fea9 	bl	8012e38 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80150e6:	68fb      	ldr	r3, [r7, #12]
 80150e8:	3316      	adds	r3, #22
 80150ea:	6939      	ldr	r1, [r7, #16]
 80150ec:	4618      	mov	r0, r3
 80150ee:	f7fd fea3 	bl	8012e38 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80150f2:	68fb      	ldr	r3, [r7, #12]
 80150f4:	3312      	adds	r3, #18
 80150f6:	2100      	movs	r1, #0
 80150f8:	4618      	mov	r0, r3
 80150fa:	f7fd fe82 	bl	8012e02 <st_word>
					fs->wflag = 1;
 80150fe:	68bb      	ldr	r3, [r7, #8]
 8015100:	2201      	movs	r2, #1
 8015102:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8015104:	68bb      	ldr	r3, [r7, #8]
 8015106:	4618      	mov	r0, r3
 8015108:	f7fe f91e 	bl	8013348 <sync_fs>
 801510c:	4603      	mov	r3, r0
 801510e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8015110:	687b      	ldr	r3, [r7, #4]
 8015112:	7d1b      	ldrb	r3, [r3, #20]
 8015114:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015118:	b2da      	uxtb	r2, r3
 801511a:	687b      	ldr	r3, [r7, #4]
 801511c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801511e:	7dfb      	ldrb	r3, [r7, #23]
}
 8015120:	4618      	mov	r0, r3
 8015122:	3718      	adds	r7, #24
 8015124:	46bd      	mov	sp, r7
 8015126:	bd80      	pop	{r7, pc}

08015128 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8015128:	b580      	push	{r7, lr}
 801512a:	b084      	sub	sp, #16
 801512c:	af00      	add	r7, sp, #0
 801512e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8015130:	6878      	ldr	r0, [r7, #4]
 8015132:	f7ff ff7b 	bl	801502c <f_sync>
 8015136:	4603      	mov	r3, r0
 8015138:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801513a:	7bfb      	ldrb	r3, [r7, #15]
 801513c:	2b00      	cmp	r3, #0
 801513e:	d118      	bne.n	8015172 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8015140:	687b      	ldr	r3, [r7, #4]
 8015142:	f107 0208 	add.w	r2, r7, #8
 8015146:	4611      	mov	r1, r2
 8015148:	4618      	mov	r0, r3
 801514a:	f7ff fa81 	bl	8014650 <validate>
 801514e:	4603      	mov	r3, r0
 8015150:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8015152:	7bfb      	ldrb	r3, [r7, #15]
 8015154:	2b00      	cmp	r3, #0
 8015156:	d10c      	bne.n	8015172 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	691b      	ldr	r3, [r3, #16]
 801515c:	4618      	mov	r0, r3
 801515e:	f7fe f821 	bl	80131a4 <dec_lock>
 8015162:	4603      	mov	r3, r0
 8015164:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8015166:	7bfb      	ldrb	r3, [r7, #15]
 8015168:	2b00      	cmp	r3, #0
 801516a:	d102      	bne.n	8015172 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801516c:	687b      	ldr	r3, [r7, #4]
 801516e:	2200      	movs	r2, #0
 8015170:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8015172:	7bfb      	ldrb	r3, [r7, #15]
}
 8015174:	4618      	mov	r0, r3
 8015176:	3710      	adds	r7, #16
 8015178:	46bd      	mov	sp, r7
 801517a:	bd80      	pop	{r7, pc}

0801517c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801517c:	b480      	push	{r7}
 801517e:	b087      	sub	sp, #28
 8015180:	af00      	add	r7, sp, #0
 8015182:	60f8      	str	r0, [r7, #12]
 8015184:	60b9      	str	r1, [r7, #8]
 8015186:	4613      	mov	r3, r2
 8015188:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801518a:	2301      	movs	r3, #1
 801518c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801518e:	2300      	movs	r3, #0
 8015190:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8015192:	4b1f      	ldr	r3, [pc, #124]	; (8015210 <FATFS_LinkDriverEx+0x94>)
 8015194:	7a5b      	ldrb	r3, [r3, #9]
 8015196:	b2db      	uxtb	r3, r3
 8015198:	2b00      	cmp	r3, #0
 801519a:	d131      	bne.n	8015200 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801519c:	4b1c      	ldr	r3, [pc, #112]	; (8015210 <FATFS_LinkDriverEx+0x94>)
 801519e:	7a5b      	ldrb	r3, [r3, #9]
 80151a0:	b2db      	uxtb	r3, r3
 80151a2:	461a      	mov	r2, r3
 80151a4:	4b1a      	ldr	r3, [pc, #104]	; (8015210 <FATFS_LinkDriverEx+0x94>)
 80151a6:	2100      	movs	r1, #0
 80151a8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80151aa:	4b19      	ldr	r3, [pc, #100]	; (8015210 <FATFS_LinkDriverEx+0x94>)
 80151ac:	7a5b      	ldrb	r3, [r3, #9]
 80151ae:	b2db      	uxtb	r3, r3
 80151b0:	4a17      	ldr	r2, [pc, #92]	; (8015210 <FATFS_LinkDriverEx+0x94>)
 80151b2:	009b      	lsls	r3, r3, #2
 80151b4:	4413      	add	r3, r2
 80151b6:	68fa      	ldr	r2, [r7, #12]
 80151b8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80151ba:	4b15      	ldr	r3, [pc, #84]	; (8015210 <FATFS_LinkDriverEx+0x94>)
 80151bc:	7a5b      	ldrb	r3, [r3, #9]
 80151be:	b2db      	uxtb	r3, r3
 80151c0:	461a      	mov	r2, r3
 80151c2:	4b13      	ldr	r3, [pc, #76]	; (8015210 <FATFS_LinkDriverEx+0x94>)
 80151c4:	4413      	add	r3, r2
 80151c6:	79fa      	ldrb	r2, [r7, #7]
 80151c8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80151ca:	4b11      	ldr	r3, [pc, #68]	; (8015210 <FATFS_LinkDriverEx+0x94>)
 80151cc:	7a5b      	ldrb	r3, [r3, #9]
 80151ce:	b2db      	uxtb	r3, r3
 80151d0:	1c5a      	adds	r2, r3, #1
 80151d2:	b2d1      	uxtb	r1, r2
 80151d4:	4a0e      	ldr	r2, [pc, #56]	; (8015210 <FATFS_LinkDriverEx+0x94>)
 80151d6:	7251      	strb	r1, [r2, #9]
 80151d8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80151da:	7dbb      	ldrb	r3, [r7, #22]
 80151dc:	3330      	adds	r3, #48	; 0x30
 80151de:	b2da      	uxtb	r2, r3
 80151e0:	68bb      	ldr	r3, [r7, #8]
 80151e2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80151e4:	68bb      	ldr	r3, [r7, #8]
 80151e6:	3301      	adds	r3, #1
 80151e8:	223a      	movs	r2, #58	; 0x3a
 80151ea:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80151ec:	68bb      	ldr	r3, [r7, #8]
 80151ee:	3302      	adds	r3, #2
 80151f0:	222f      	movs	r2, #47	; 0x2f
 80151f2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80151f4:	68bb      	ldr	r3, [r7, #8]
 80151f6:	3303      	adds	r3, #3
 80151f8:	2200      	movs	r2, #0
 80151fa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80151fc:	2300      	movs	r3, #0
 80151fe:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8015200:	7dfb      	ldrb	r3, [r7, #23]
}
 8015202:	4618      	mov	r0, r3
 8015204:	371c      	adds	r7, #28
 8015206:	46bd      	mov	sp, r7
 8015208:	f85d 7b04 	ldr.w	r7, [sp], #4
 801520c:	4770      	bx	lr
 801520e:	bf00      	nop
 8015210:	24040244 	.word	0x24040244

08015214 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8015214:	b580      	push	{r7, lr}
 8015216:	b082      	sub	sp, #8
 8015218:	af00      	add	r7, sp, #0
 801521a:	6078      	str	r0, [r7, #4]
 801521c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801521e:	2200      	movs	r2, #0
 8015220:	6839      	ldr	r1, [r7, #0]
 8015222:	6878      	ldr	r0, [r7, #4]
 8015224:	f7ff ffaa 	bl	801517c <FATFS_LinkDriverEx>
 8015228:	4603      	mov	r3, r0
}
 801522a:	4618      	mov	r0, r3
 801522c:	3708      	adds	r7, #8
 801522e:	46bd      	mov	sp, r7
 8015230:	bd80      	pop	{r7, pc}
	...

08015234 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8015234:	b580      	push	{r7, lr}
 8015236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8015238:	2200      	movs	r2, #0
 801523a:	4913      	ldr	r1, [pc, #76]	; (8015288 <MX_USB_DEVICE_Init+0x54>)
 801523c:	4813      	ldr	r0, [pc, #76]	; (801528c <MX_USB_DEVICE_Init+0x58>)
 801523e:	f7fc fc20 	bl	8011a82 <USBD_Init>
 8015242:	4603      	mov	r3, r0
 8015244:	2b00      	cmp	r3, #0
 8015246:	d001      	beq.n	801524c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8015248:	f7ec f9e0 	bl	800160c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 801524c:	4910      	ldr	r1, [pc, #64]	; (8015290 <MX_USB_DEVICE_Init+0x5c>)
 801524e:	480f      	ldr	r0, [pc, #60]	; (801528c <MX_USB_DEVICE_Init+0x58>)
 8015250:	f7fc fc4d 	bl	8011aee <USBD_RegisterClass>
 8015254:	4603      	mov	r3, r0
 8015256:	2b00      	cmp	r3, #0
 8015258:	d001      	beq.n	801525e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801525a:	f7ec f9d7 	bl	800160c <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 801525e:	490d      	ldr	r1, [pc, #52]	; (8015294 <MX_USB_DEVICE_Init+0x60>)
 8015260:	480a      	ldr	r0, [pc, #40]	; (801528c <MX_USB_DEVICE_Init+0x58>)
 8015262:	f7fa fff7 	bl	8010254 <USBD_MSC_RegisterStorage>
 8015266:	4603      	mov	r3, r0
 8015268:	2b00      	cmp	r3, #0
 801526a:	d001      	beq.n	8015270 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801526c:	f7ec f9ce 	bl	800160c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8015270:	4806      	ldr	r0, [pc, #24]	; (801528c <MX_USB_DEVICE_Init+0x58>)
 8015272:	f7fc fc5d 	bl	8011b30 <USBD_Start>
 8015276:	4603      	mov	r3, r0
 8015278:	2b00      	cmp	r3, #0
 801527a:	d001      	beq.n	8015280 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801527c:	f7ec f9c6 	bl	800160c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8015280:	f7f1 fe10 	bl	8006ea4 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8015284:	bf00      	nop
 8015286:	bd80      	pop	{r7, pc}
 8015288:	240000f8 	.word	0x240000f8
 801528c:	24041268 	.word	0x24041268
 8015290:	24000010 	.word	0x24000010
 8015294:	24000148 	.word	0x24000148

08015298 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015298:	b480      	push	{r7}
 801529a:	b083      	sub	sp, #12
 801529c:	af00      	add	r7, sp, #0
 801529e:	4603      	mov	r3, r0
 80152a0:	6039      	str	r1, [r7, #0]
 80152a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80152a4:	683b      	ldr	r3, [r7, #0]
 80152a6:	2212      	movs	r2, #18
 80152a8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80152aa:	4b03      	ldr	r3, [pc, #12]	; (80152b8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80152ac:	4618      	mov	r0, r3
 80152ae:	370c      	adds	r7, #12
 80152b0:	46bd      	mov	sp, r7
 80152b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152b6:	4770      	bx	lr
 80152b8:	24000114 	.word	0x24000114

080152bc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80152bc:	b480      	push	{r7}
 80152be:	b083      	sub	sp, #12
 80152c0:	af00      	add	r7, sp, #0
 80152c2:	4603      	mov	r3, r0
 80152c4:	6039      	str	r1, [r7, #0]
 80152c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80152c8:	683b      	ldr	r3, [r7, #0]
 80152ca:	2204      	movs	r2, #4
 80152cc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80152ce:	4b03      	ldr	r3, [pc, #12]	; (80152dc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80152d0:	4618      	mov	r0, r3
 80152d2:	370c      	adds	r7, #12
 80152d4:	46bd      	mov	sp, r7
 80152d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152da:	4770      	bx	lr
 80152dc:	24000128 	.word	0x24000128

080152e0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80152e0:	b580      	push	{r7, lr}
 80152e2:	b082      	sub	sp, #8
 80152e4:	af00      	add	r7, sp, #0
 80152e6:	4603      	mov	r3, r0
 80152e8:	6039      	str	r1, [r7, #0]
 80152ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80152ec:	79fb      	ldrb	r3, [r7, #7]
 80152ee:	2b00      	cmp	r3, #0
 80152f0:	d105      	bne.n	80152fe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80152f2:	683a      	ldr	r2, [r7, #0]
 80152f4:	4907      	ldr	r1, [pc, #28]	; (8015314 <USBD_FS_ProductStrDescriptor+0x34>)
 80152f6:	4808      	ldr	r0, [pc, #32]	; (8015318 <USBD_FS_ProductStrDescriptor+0x38>)
 80152f8:	f7fd fbe7 	bl	8012aca <USBD_GetString>
 80152fc:	e004      	b.n	8015308 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80152fe:	683a      	ldr	r2, [r7, #0]
 8015300:	4904      	ldr	r1, [pc, #16]	; (8015314 <USBD_FS_ProductStrDescriptor+0x34>)
 8015302:	4805      	ldr	r0, [pc, #20]	; (8015318 <USBD_FS_ProductStrDescriptor+0x38>)
 8015304:	f7fd fbe1 	bl	8012aca <USBD_GetString>
  }
  return USBD_StrDesc;
 8015308:	4b02      	ldr	r3, [pc, #8]	; (8015314 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801530a:	4618      	mov	r0, r3
 801530c:	3708      	adds	r7, #8
 801530e:	46bd      	mov	sp, r7
 8015310:	bd80      	pop	{r7, pc}
 8015312:	bf00      	nop
 8015314:	24041538 	.word	0x24041538
 8015318:	08017184 	.word	0x08017184

0801531c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801531c:	b580      	push	{r7, lr}
 801531e:	b082      	sub	sp, #8
 8015320:	af00      	add	r7, sp, #0
 8015322:	4603      	mov	r3, r0
 8015324:	6039      	str	r1, [r7, #0]
 8015326:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8015328:	683a      	ldr	r2, [r7, #0]
 801532a:	4904      	ldr	r1, [pc, #16]	; (801533c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801532c:	4804      	ldr	r0, [pc, #16]	; (8015340 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801532e:	f7fd fbcc 	bl	8012aca <USBD_GetString>
  return USBD_StrDesc;
 8015332:	4b02      	ldr	r3, [pc, #8]	; (801533c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8015334:	4618      	mov	r0, r3
 8015336:	3708      	adds	r7, #8
 8015338:	46bd      	mov	sp, r7
 801533a:	bd80      	pop	{r7, pc}
 801533c:	24041538 	.word	0x24041538
 8015340:	08017198 	.word	0x08017198

08015344 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015344:	b580      	push	{r7, lr}
 8015346:	b082      	sub	sp, #8
 8015348:	af00      	add	r7, sp, #0
 801534a:	4603      	mov	r3, r0
 801534c:	6039      	str	r1, [r7, #0]
 801534e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8015350:	683b      	ldr	r3, [r7, #0]
 8015352:	221a      	movs	r2, #26
 8015354:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8015356:	f000 f843 	bl	80153e0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801535a:	4b02      	ldr	r3, [pc, #8]	; (8015364 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801535c:	4618      	mov	r0, r3
 801535e:	3708      	adds	r7, #8
 8015360:	46bd      	mov	sp, r7
 8015362:	bd80      	pop	{r7, pc}
 8015364:	2400012c 	.word	0x2400012c

08015368 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015368:	b580      	push	{r7, lr}
 801536a:	b082      	sub	sp, #8
 801536c:	af00      	add	r7, sp, #0
 801536e:	4603      	mov	r3, r0
 8015370:	6039      	str	r1, [r7, #0]
 8015372:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8015374:	79fb      	ldrb	r3, [r7, #7]
 8015376:	2b00      	cmp	r3, #0
 8015378:	d105      	bne.n	8015386 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801537a:	683a      	ldr	r2, [r7, #0]
 801537c:	4907      	ldr	r1, [pc, #28]	; (801539c <USBD_FS_ConfigStrDescriptor+0x34>)
 801537e:	4808      	ldr	r0, [pc, #32]	; (80153a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8015380:	f7fd fba3 	bl	8012aca <USBD_GetString>
 8015384:	e004      	b.n	8015390 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8015386:	683a      	ldr	r2, [r7, #0]
 8015388:	4904      	ldr	r1, [pc, #16]	; (801539c <USBD_FS_ConfigStrDescriptor+0x34>)
 801538a:	4805      	ldr	r0, [pc, #20]	; (80153a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 801538c:	f7fd fb9d 	bl	8012aca <USBD_GetString>
  }
  return USBD_StrDesc;
 8015390:	4b02      	ldr	r3, [pc, #8]	; (801539c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8015392:	4618      	mov	r0, r3
 8015394:	3708      	adds	r7, #8
 8015396:	46bd      	mov	sp, r7
 8015398:	bd80      	pop	{r7, pc}
 801539a:	bf00      	nop
 801539c:	24041538 	.word	0x24041538
 80153a0:	080171ac 	.word	0x080171ac

080153a4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80153a4:	b580      	push	{r7, lr}
 80153a6:	b082      	sub	sp, #8
 80153a8:	af00      	add	r7, sp, #0
 80153aa:	4603      	mov	r3, r0
 80153ac:	6039      	str	r1, [r7, #0]
 80153ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80153b0:	79fb      	ldrb	r3, [r7, #7]
 80153b2:	2b00      	cmp	r3, #0
 80153b4:	d105      	bne.n	80153c2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80153b6:	683a      	ldr	r2, [r7, #0]
 80153b8:	4907      	ldr	r1, [pc, #28]	; (80153d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80153ba:	4808      	ldr	r0, [pc, #32]	; (80153dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80153bc:	f7fd fb85 	bl	8012aca <USBD_GetString>
 80153c0:	e004      	b.n	80153cc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80153c2:	683a      	ldr	r2, [r7, #0]
 80153c4:	4904      	ldr	r1, [pc, #16]	; (80153d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80153c6:	4805      	ldr	r0, [pc, #20]	; (80153dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80153c8:	f7fd fb7f 	bl	8012aca <USBD_GetString>
  }
  return USBD_StrDesc;
 80153cc:	4b02      	ldr	r3, [pc, #8]	; (80153d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80153ce:	4618      	mov	r0, r3
 80153d0:	3708      	adds	r7, #8
 80153d2:	46bd      	mov	sp, r7
 80153d4:	bd80      	pop	{r7, pc}
 80153d6:	bf00      	nop
 80153d8:	24041538 	.word	0x24041538
 80153dc:	080171b8 	.word	0x080171b8

080153e0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80153e0:	b580      	push	{r7, lr}
 80153e2:	b084      	sub	sp, #16
 80153e4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80153e6:	4b0f      	ldr	r3, [pc, #60]	; (8015424 <Get_SerialNum+0x44>)
 80153e8:	681b      	ldr	r3, [r3, #0]
 80153ea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80153ec:	4b0e      	ldr	r3, [pc, #56]	; (8015428 <Get_SerialNum+0x48>)
 80153ee:	681b      	ldr	r3, [r3, #0]
 80153f0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80153f2:	4b0e      	ldr	r3, [pc, #56]	; (801542c <Get_SerialNum+0x4c>)
 80153f4:	681b      	ldr	r3, [r3, #0]
 80153f6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80153f8:	68fa      	ldr	r2, [r7, #12]
 80153fa:	687b      	ldr	r3, [r7, #4]
 80153fc:	4413      	add	r3, r2
 80153fe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8015400:	68fb      	ldr	r3, [r7, #12]
 8015402:	2b00      	cmp	r3, #0
 8015404:	d009      	beq.n	801541a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8015406:	2208      	movs	r2, #8
 8015408:	4909      	ldr	r1, [pc, #36]	; (8015430 <Get_SerialNum+0x50>)
 801540a:	68f8      	ldr	r0, [r7, #12]
 801540c:	f000 f814 	bl	8015438 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8015410:	2204      	movs	r2, #4
 8015412:	4908      	ldr	r1, [pc, #32]	; (8015434 <Get_SerialNum+0x54>)
 8015414:	68b8      	ldr	r0, [r7, #8]
 8015416:	f000 f80f 	bl	8015438 <IntToUnicode>
  }
}
 801541a:	bf00      	nop
 801541c:	3710      	adds	r7, #16
 801541e:	46bd      	mov	sp, r7
 8015420:	bd80      	pop	{r7, pc}
 8015422:	bf00      	nop
 8015424:	1ff1e800 	.word	0x1ff1e800
 8015428:	1ff1e804 	.word	0x1ff1e804
 801542c:	1ff1e808 	.word	0x1ff1e808
 8015430:	2400012e 	.word	0x2400012e
 8015434:	2400013e 	.word	0x2400013e

08015438 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8015438:	b480      	push	{r7}
 801543a:	b087      	sub	sp, #28
 801543c:	af00      	add	r7, sp, #0
 801543e:	60f8      	str	r0, [r7, #12]
 8015440:	60b9      	str	r1, [r7, #8]
 8015442:	4613      	mov	r3, r2
 8015444:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8015446:	2300      	movs	r3, #0
 8015448:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801544a:	2300      	movs	r3, #0
 801544c:	75fb      	strb	r3, [r7, #23]
 801544e:	e027      	b.n	80154a0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8015450:	68fb      	ldr	r3, [r7, #12]
 8015452:	0f1b      	lsrs	r3, r3, #28
 8015454:	2b09      	cmp	r3, #9
 8015456:	d80b      	bhi.n	8015470 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8015458:	68fb      	ldr	r3, [r7, #12]
 801545a:	0f1b      	lsrs	r3, r3, #28
 801545c:	b2da      	uxtb	r2, r3
 801545e:	7dfb      	ldrb	r3, [r7, #23]
 8015460:	005b      	lsls	r3, r3, #1
 8015462:	4619      	mov	r1, r3
 8015464:	68bb      	ldr	r3, [r7, #8]
 8015466:	440b      	add	r3, r1
 8015468:	3230      	adds	r2, #48	; 0x30
 801546a:	b2d2      	uxtb	r2, r2
 801546c:	701a      	strb	r2, [r3, #0]
 801546e:	e00a      	b.n	8015486 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8015470:	68fb      	ldr	r3, [r7, #12]
 8015472:	0f1b      	lsrs	r3, r3, #28
 8015474:	b2da      	uxtb	r2, r3
 8015476:	7dfb      	ldrb	r3, [r7, #23]
 8015478:	005b      	lsls	r3, r3, #1
 801547a:	4619      	mov	r1, r3
 801547c:	68bb      	ldr	r3, [r7, #8]
 801547e:	440b      	add	r3, r1
 8015480:	3237      	adds	r2, #55	; 0x37
 8015482:	b2d2      	uxtb	r2, r2
 8015484:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8015486:	68fb      	ldr	r3, [r7, #12]
 8015488:	011b      	lsls	r3, r3, #4
 801548a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801548c:	7dfb      	ldrb	r3, [r7, #23]
 801548e:	005b      	lsls	r3, r3, #1
 8015490:	3301      	adds	r3, #1
 8015492:	68ba      	ldr	r2, [r7, #8]
 8015494:	4413      	add	r3, r2
 8015496:	2200      	movs	r2, #0
 8015498:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801549a:	7dfb      	ldrb	r3, [r7, #23]
 801549c:	3301      	adds	r3, #1
 801549e:	75fb      	strb	r3, [r7, #23]
 80154a0:	7dfa      	ldrb	r2, [r7, #23]
 80154a2:	79fb      	ldrb	r3, [r7, #7]
 80154a4:	429a      	cmp	r2, r3
 80154a6:	d3d3      	bcc.n	8015450 <IntToUnicode+0x18>
  }
}
 80154a8:	bf00      	nop
 80154aa:	371c      	adds	r7, #28
 80154ac:	46bd      	mov	sp, r7
 80154ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154b2:	4770      	bx	lr

080154b4 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 80154b4:	b480      	push	{r7}
 80154b6:	b083      	sub	sp, #12
 80154b8:	af00      	add	r7, sp, #0
 80154ba:	4603      	mov	r3, r0
 80154bc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 80154be:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 80154c0:	4618      	mov	r0, r3
 80154c2:	370c      	adds	r7, #12
 80154c4:	46bd      	mov	sp, r7
 80154c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154ca:	4770      	bx	lr

080154cc <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 80154cc:	b580      	push	{r7, lr}
 80154ce:	b08e      	sub	sp, #56	; 0x38
 80154d0:	af00      	add	r7, sp, #0
 80154d2:	4603      	mov	r3, r0
 80154d4:	60b9      	str	r1, [r7, #8]
 80154d6:	607a      	str	r2, [r7, #4]
 80154d8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
	HAL_SD_CardInfoTypeDef info;
	  int8_t ret = -1;
 80154da:	23ff      	movs	r3, #255	; 0xff
 80154dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	  HAL_SD_GetCardInfo(&hsd1, &info);
 80154e0:	f107 0310 	add.w	r3, r7, #16
 80154e4:	4619      	mov	r1, r3
 80154e6:	480a      	ldr	r0, [pc, #40]	; (8015510 <STORAGE_GetCapacity_FS+0x44>)
 80154e8:	f7f6 f838 	bl	800b55c <HAL_SD_GetCardInfo>

	  *block_num =  info.LogBlockNbr  - 1;
 80154ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154ee:	1e5a      	subs	r2, r3, #1
 80154f0:	68bb      	ldr	r3, [r7, #8]
 80154f2:	601a      	str	r2, [r3, #0]
	  *block_size = info.LogBlockSize;
 80154f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80154f6:	b29a      	uxth	r2, r3
 80154f8:	687b      	ldr	r3, [r7, #4]
 80154fa:	801a      	strh	r2, [r3, #0]
	  ret = 0;
 80154fc:	2300      	movs	r3, #0
 80154fe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  return ret;
 8015502:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
  /* USER CODE END 3 */
}
 8015506:	4618      	mov	r0, r3
 8015508:	3738      	adds	r7, #56	; 0x38
 801550a:	46bd      	mov	sp, r7
 801550c:	bd80      	pop	{r7, pc}
 801550e:	bf00      	nop
 8015510:	2404058c 	.word	0x2404058c

08015514 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8015514:	b480      	push	{r7}
 8015516:	b083      	sub	sp, #12
 8015518:	af00      	add	r7, sp, #0
 801551a:	4603      	mov	r3, r0
 801551c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801551e:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8015520:	4618      	mov	r0, r3
 8015522:	370c      	adds	r7, #12
 8015524:	46bd      	mov	sp, r7
 8015526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801552a:	4770      	bx	lr

0801552c <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 801552c:	b480      	push	{r7}
 801552e:	b083      	sub	sp, #12
 8015530:	af00      	add	r7, sp, #0
 8015532:	4603      	mov	r3, r0
 8015534:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8015536:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8015538:	4618      	mov	r0, r3
 801553a:	370c      	adds	r7, #12
 801553c:	46bd      	mov	sp, r7
 801553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015542:	4770      	bx	lr

08015544 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8015544:	b580      	push	{r7, lr}
 8015546:	b088      	sub	sp, #32
 8015548:	af02      	add	r7, sp, #8
 801554a:	60b9      	str	r1, [r7, #8]
 801554c:	607a      	str	r2, [r7, #4]
 801554e:	461a      	mov	r2, r3
 8015550:	4603      	mov	r3, r0
 8015552:	73fb      	strb	r3, [r7, #15]
 8015554:	4613      	mov	r3, r2
 8015556:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	int8_t ret = -1;
 8015558:	23ff      	movs	r3, #255	; 0xff
 801555a:	75fb      	strb	r3, [r7, #23]

	HAL_SD_ReadBlocks(&hsd1, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 801555c:	89ba      	ldrh	r2, [r7, #12]
 801555e:	f04f 33ff 	mov.w	r3, #4294967295
 8015562:	9300      	str	r3, [sp, #0]
 8015564:	4613      	mov	r3, r2
 8015566:	687a      	ldr	r2, [r7, #4]
 8015568:	68b9      	ldr	r1, [r7, #8]
 801556a:	4809      	ldr	r0, [pc, #36]	; (8015590 <STORAGE_Read_FS+0x4c>)
 801556c:	f7f4 ff68 	bl	800a440 <HAL_SD_ReadBlocks>

	/* Wait until SD card is ready to use for new operation */
	while (HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER){}
 8015570:	bf00      	nop
 8015572:	4807      	ldr	r0, [pc, #28]	; (8015590 <STORAGE_Read_FS+0x4c>)
 8015574:	f7f6 f8c8 	bl	800b708 <HAL_SD_GetCardState>
 8015578:	4603      	mov	r3, r0
 801557a:	2b04      	cmp	r3, #4
 801557c:	d1f9      	bne.n	8015572 <STORAGE_Read_FS+0x2e>
	ret = 0;
 801557e:	2300      	movs	r3, #0
 8015580:	75fb      	strb	r3, [r7, #23]
	return ret;
 8015582:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 6 */
}
 8015586:	4618      	mov	r0, r3
 8015588:	3718      	adds	r7, #24
 801558a:	46bd      	mov	sp, r7
 801558c:	bd80      	pop	{r7, pc}
 801558e:	bf00      	nop
 8015590:	2404058c 	.word	0x2404058c

08015594 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8015594:	b580      	push	{r7, lr}
 8015596:	b088      	sub	sp, #32
 8015598:	af02      	add	r7, sp, #8
 801559a:	60b9      	str	r1, [r7, #8]
 801559c:	607a      	str	r2, [r7, #4]
 801559e:	461a      	mov	r2, r3
 80155a0:	4603      	mov	r3, r0
 80155a2:	73fb      	strb	r3, [r7, #15]
 80155a4:	4613      	mov	r3, r2
 80155a6:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	int8_t ret = -1;
 80155a8:	23ff      	movs	r3, #255	; 0xff
 80155aa:	75fb      	strb	r3, [r7, #23]

	HAL_SD_WriteBlocks(&hsd1, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 80155ac:	89ba      	ldrh	r2, [r7, #12]
 80155ae:	f04f 33ff 	mov.w	r3, #4294967295
 80155b2:	9300      	str	r3, [sp, #0]
 80155b4:	4613      	mov	r3, r2
 80155b6:	687a      	ldr	r2, [r7, #4]
 80155b8:	68b9      	ldr	r1, [r7, #8]
 80155ba:	4809      	ldr	r0, [pc, #36]	; (80155e0 <STORAGE_Write_FS+0x4c>)
 80155bc:	f7f5 f8ca 	bl	800a754 <HAL_SD_WriteBlocks>


	/* Wait until SD card is ready to use for new operation */
	while (HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER){}
 80155c0:	bf00      	nop
 80155c2:	4807      	ldr	r0, [pc, #28]	; (80155e0 <STORAGE_Write_FS+0x4c>)
 80155c4:	f7f6 f8a0 	bl	800b708 <HAL_SD_GetCardState>
 80155c8:	4603      	mov	r3, r0
 80155ca:	2b04      	cmp	r3, #4
 80155cc:	d1f9      	bne.n	80155c2 <STORAGE_Write_FS+0x2e>
	ret = 0;
 80155ce:	2300      	movs	r3, #0
 80155d0:	75fb      	strb	r3, [r7, #23]
	return ret;
 80155d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 7 */
}
 80155d6:	4618      	mov	r0, r3
 80155d8:	3718      	adds	r7, #24
 80155da:	46bd      	mov	sp, r7
 80155dc:	bd80      	pop	{r7, pc}
 80155de:	bf00      	nop
 80155e0:	2404058c 	.word	0x2404058c

080155e4 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 80155e4:	b480      	push	{r7}
 80155e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 80155e8:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80155ea:	4618      	mov	r0, r3
 80155ec:	46bd      	mov	sp, r7
 80155ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155f2:	4770      	bx	lr

080155f4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80155f4:	b580      	push	{r7, lr}
 80155f6:	b08a      	sub	sp, #40	; 0x28
 80155f8:	af00      	add	r7, sp, #0
 80155fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80155fc:	f107 0314 	add.w	r3, r7, #20
 8015600:	2200      	movs	r2, #0
 8015602:	601a      	str	r2, [r3, #0]
 8015604:	605a      	str	r2, [r3, #4]
 8015606:	609a      	str	r2, [r3, #8]
 8015608:	60da      	str	r2, [r3, #12]
 801560a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 801560c:	687b      	ldr	r3, [r7, #4]
 801560e:	681b      	ldr	r3, [r3, #0]
 8015610:	4a1e      	ldr	r2, [pc, #120]	; (801568c <HAL_PCD_MspInit+0x98>)
 8015612:	4293      	cmp	r3, r2
 8015614:	d136      	bne.n	8015684 <HAL_PCD_MspInit+0x90>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015616:	4b1e      	ldr	r3, [pc, #120]	; (8015690 <HAL_PCD_MspInit+0x9c>)
 8015618:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801561c:	4a1c      	ldr	r2, [pc, #112]	; (8015690 <HAL_PCD_MspInit+0x9c>)
 801561e:	f043 0301 	orr.w	r3, r3, #1
 8015622:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8015626:	4b1a      	ldr	r3, [pc, #104]	; (8015690 <HAL_PCD_MspInit+0x9c>)
 8015628:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801562c:	f003 0301 	and.w	r3, r3, #1
 8015630:	613b      	str	r3, [r7, #16]
 8015632:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8015634:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8015638:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801563a:	2302      	movs	r3, #2
 801563c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801563e:	2300      	movs	r3, #0
 8015640:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015642:	2300      	movs	r3, #0
 8015644:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8015646:	230a      	movs	r3, #10
 8015648:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801564a:	f107 0314 	add.w	r3, r7, #20
 801564e:	4619      	mov	r1, r3
 8015650:	4810      	ldr	r0, [pc, #64]	; (8015694 <HAL_PCD_MspInit+0xa0>)
 8015652:	f7ef ffb5 	bl	80055c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8015656:	4b0e      	ldr	r3, [pc, #56]	; (8015690 <HAL_PCD_MspInit+0x9c>)
 8015658:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801565c:	4a0c      	ldr	r2, [pc, #48]	; (8015690 <HAL_PCD_MspInit+0x9c>)
 801565e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8015662:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8015666:	4b0a      	ldr	r3, [pc, #40]	; (8015690 <HAL_PCD_MspInit+0x9c>)
 8015668:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801566c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8015670:	60fb      	str	r3, [r7, #12]
 8015672:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8015674:	2200      	movs	r2, #0
 8015676:	2100      	movs	r1, #0
 8015678:	2065      	movs	r0, #101	; 0x65
 801567a:	f7ec fd58 	bl	800212e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801567e:	2065      	movs	r0, #101	; 0x65
 8015680:	f7ec fd6f 	bl	8002162 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8015684:	bf00      	nop
 8015686:	3728      	adds	r7, #40	; 0x28
 8015688:	46bd      	mov	sp, r7
 801568a:	bd80      	pop	{r7, pc}
 801568c:	40080000 	.word	0x40080000
 8015690:	58024400 	.word	0x58024400
 8015694:	58020000 	.word	0x58020000

08015698 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015698:	b580      	push	{r7, lr}
 801569a:	b082      	sub	sp, #8
 801569c:	af00      	add	r7, sp, #0
 801569e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80156a0:	687b      	ldr	r3, [r7, #4]
 80156a2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80156ac:	4619      	mov	r1, r3
 80156ae:	4610      	mov	r0, r2
 80156b0:	f7fc fa89 	bl	8011bc6 <USBD_LL_SetupStage>
}
 80156b4:	bf00      	nop
 80156b6:	3708      	adds	r7, #8
 80156b8:	46bd      	mov	sp, r7
 80156ba:	bd80      	pop	{r7, pc}

080156bc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80156bc:	b580      	push	{r7, lr}
 80156be:	b082      	sub	sp, #8
 80156c0:	af00      	add	r7, sp, #0
 80156c2:	6078      	str	r0, [r7, #4]
 80156c4:	460b      	mov	r3, r1
 80156c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80156ce:	78fa      	ldrb	r2, [r7, #3]
 80156d0:	6879      	ldr	r1, [r7, #4]
 80156d2:	4613      	mov	r3, r2
 80156d4:	00db      	lsls	r3, r3, #3
 80156d6:	1a9b      	subs	r3, r3, r2
 80156d8:	009b      	lsls	r3, r3, #2
 80156da:	440b      	add	r3, r1
 80156dc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80156e0:	681a      	ldr	r2, [r3, #0]
 80156e2:	78fb      	ldrb	r3, [r7, #3]
 80156e4:	4619      	mov	r1, r3
 80156e6:	f7fc fac1 	bl	8011c6c <USBD_LL_DataOutStage>
}
 80156ea:	bf00      	nop
 80156ec:	3708      	adds	r7, #8
 80156ee:	46bd      	mov	sp, r7
 80156f0:	bd80      	pop	{r7, pc}

080156f2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80156f2:	b580      	push	{r7, lr}
 80156f4:	b082      	sub	sp, #8
 80156f6:	af00      	add	r7, sp, #0
 80156f8:	6078      	str	r0, [r7, #4]
 80156fa:	460b      	mov	r3, r1
 80156fc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8015704:	78fa      	ldrb	r2, [r7, #3]
 8015706:	6879      	ldr	r1, [r7, #4]
 8015708:	4613      	mov	r3, r2
 801570a:	00db      	lsls	r3, r3, #3
 801570c:	1a9b      	subs	r3, r3, r2
 801570e:	009b      	lsls	r3, r3, #2
 8015710:	440b      	add	r3, r1
 8015712:	3348      	adds	r3, #72	; 0x48
 8015714:	681a      	ldr	r2, [r3, #0]
 8015716:	78fb      	ldrb	r3, [r7, #3]
 8015718:	4619      	mov	r1, r3
 801571a:	f7fc fb0a 	bl	8011d32 <USBD_LL_DataInStage>
}
 801571e:	bf00      	nop
 8015720:	3708      	adds	r7, #8
 8015722:	46bd      	mov	sp, r7
 8015724:	bd80      	pop	{r7, pc}

08015726 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015726:	b580      	push	{r7, lr}
 8015728:	b082      	sub	sp, #8
 801572a:	af00      	add	r7, sp, #0
 801572c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801572e:	687b      	ldr	r3, [r7, #4]
 8015730:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015734:	4618      	mov	r0, r3
 8015736:	f7fc fc0e 	bl	8011f56 <USBD_LL_SOF>
}
 801573a:	bf00      	nop
 801573c:	3708      	adds	r7, #8
 801573e:	46bd      	mov	sp, r7
 8015740:	bd80      	pop	{r7, pc}

08015742 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015742:	b580      	push	{r7, lr}
 8015744:	b084      	sub	sp, #16
 8015746:	af00      	add	r7, sp, #0
 8015748:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801574a:	2301      	movs	r3, #1
 801574c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801574e:	687b      	ldr	r3, [r7, #4]
 8015750:	68db      	ldr	r3, [r3, #12]
 8015752:	2b00      	cmp	r3, #0
 8015754:	d102      	bne.n	801575c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8015756:	2300      	movs	r3, #0
 8015758:	73fb      	strb	r3, [r7, #15]
 801575a:	e008      	b.n	801576e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801575c:	687b      	ldr	r3, [r7, #4]
 801575e:	68db      	ldr	r3, [r3, #12]
 8015760:	2b02      	cmp	r3, #2
 8015762:	d102      	bne.n	801576a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8015764:	2301      	movs	r3, #1
 8015766:	73fb      	strb	r3, [r7, #15]
 8015768:	e001      	b.n	801576e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801576a:	f7eb ff4f 	bl	800160c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801576e:	687b      	ldr	r3, [r7, #4]
 8015770:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015774:	7bfa      	ldrb	r2, [r7, #15]
 8015776:	4611      	mov	r1, r2
 8015778:	4618      	mov	r0, r3
 801577a:	f7fc fbb1 	bl	8011ee0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801577e:	687b      	ldr	r3, [r7, #4]
 8015780:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015784:	4618      	mov	r0, r3
 8015786:	f7fc fb6a 	bl	8011e5e <USBD_LL_Reset>
}
 801578a:	bf00      	nop
 801578c:	3710      	adds	r7, #16
 801578e:	46bd      	mov	sp, r7
 8015790:	bd80      	pop	{r7, pc}
	...

08015794 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015794:	b580      	push	{r7, lr}
 8015796:	b082      	sub	sp, #8
 8015798:	af00      	add	r7, sp, #0
 801579a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801579c:	687b      	ldr	r3, [r7, #4]
 801579e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80157a2:	4618      	mov	r0, r3
 80157a4:	f7fc fbac 	bl	8011f00 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80157a8:	687b      	ldr	r3, [r7, #4]
 80157aa:	681b      	ldr	r3, [r3, #0]
 80157ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80157b0:	681b      	ldr	r3, [r3, #0]
 80157b2:	687a      	ldr	r2, [r7, #4]
 80157b4:	6812      	ldr	r2, [r2, #0]
 80157b6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80157ba:	f043 0301 	orr.w	r3, r3, #1
 80157be:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	6a1b      	ldr	r3, [r3, #32]
 80157c4:	2b00      	cmp	r3, #0
 80157c6:	d005      	beq.n	80157d4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80157c8:	4b04      	ldr	r3, [pc, #16]	; (80157dc <HAL_PCD_SuspendCallback+0x48>)
 80157ca:	691b      	ldr	r3, [r3, #16]
 80157cc:	4a03      	ldr	r2, [pc, #12]	; (80157dc <HAL_PCD_SuspendCallback+0x48>)
 80157ce:	f043 0306 	orr.w	r3, r3, #6
 80157d2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80157d4:	bf00      	nop
 80157d6:	3708      	adds	r7, #8
 80157d8:	46bd      	mov	sp, r7
 80157da:	bd80      	pop	{r7, pc}
 80157dc:	e000ed00 	.word	0xe000ed00

080157e0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80157e0:	b580      	push	{r7, lr}
 80157e2:	b082      	sub	sp, #8
 80157e4:	af00      	add	r7, sp, #0
 80157e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80157e8:	687b      	ldr	r3, [r7, #4]
 80157ea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80157ee:	4618      	mov	r0, r3
 80157f0:	f7fc fb9b 	bl	8011f2a <USBD_LL_Resume>
}
 80157f4:	bf00      	nop
 80157f6:	3708      	adds	r7, #8
 80157f8:	46bd      	mov	sp, r7
 80157fa:	bd80      	pop	{r7, pc}

080157fc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80157fc:	b580      	push	{r7, lr}
 80157fe:	b082      	sub	sp, #8
 8015800:	af00      	add	r7, sp, #0
 8015802:	6078      	str	r0, [r7, #4]
 8015804:	460b      	mov	r3, r1
 8015806:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015808:	687b      	ldr	r3, [r7, #4]
 801580a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801580e:	78fa      	ldrb	r2, [r7, #3]
 8015810:	4611      	mov	r1, r2
 8015812:	4618      	mov	r0, r3
 8015814:	f7fc fbc6 	bl	8011fa4 <USBD_LL_IsoOUTIncomplete>
}
 8015818:	bf00      	nop
 801581a:	3708      	adds	r7, #8
 801581c:	46bd      	mov	sp, r7
 801581e:	bd80      	pop	{r7, pc}

08015820 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015820:	b580      	push	{r7, lr}
 8015822:	b082      	sub	sp, #8
 8015824:	af00      	add	r7, sp, #0
 8015826:	6078      	str	r0, [r7, #4]
 8015828:	460b      	mov	r3, r1
 801582a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801582c:	687b      	ldr	r3, [r7, #4]
 801582e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015832:	78fa      	ldrb	r2, [r7, #3]
 8015834:	4611      	mov	r1, r2
 8015836:	4618      	mov	r0, r3
 8015838:	f7fc fba7 	bl	8011f8a <USBD_LL_IsoINIncomplete>
}
 801583c:	bf00      	nop
 801583e:	3708      	adds	r7, #8
 8015840:	46bd      	mov	sp, r7
 8015842:	bd80      	pop	{r7, pc}

08015844 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015844:	b580      	push	{r7, lr}
 8015846:	b082      	sub	sp, #8
 8015848:	af00      	add	r7, sp, #0
 801584a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801584c:	687b      	ldr	r3, [r7, #4]
 801584e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015852:	4618      	mov	r0, r3
 8015854:	f7fc fbb3 	bl	8011fbe <USBD_LL_DevConnected>
}
 8015858:	bf00      	nop
 801585a:	3708      	adds	r7, #8
 801585c:	46bd      	mov	sp, r7
 801585e:	bd80      	pop	{r7, pc}

08015860 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015860:	b580      	push	{r7, lr}
 8015862:	b082      	sub	sp, #8
 8015864:	af00      	add	r7, sp, #0
 8015866:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8015868:	687b      	ldr	r3, [r7, #4]
 801586a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801586e:	4618      	mov	r0, r3
 8015870:	f7fc fbb0 	bl	8011fd4 <USBD_LL_DevDisconnected>
}
 8015874:	bf00      	nop
 8015876:	3708      	adds	r7, #8
 8015878:	46bd      	mov	sp, r7
 801587a:	bd80      	pop	{r7, pc}

0801587c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801587c:	b580      	push	{r7, lr}
 801587e:	b082      	sub	sp, #8
 8015880:	af00      	add	r7, sp, #0
 8015882:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	781b      	ldrb	r3, [r3, #0]
 8015888:	2b00      	cmp	r3, #0
 801588a:	d13e      	bne.n	801590a <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801588c:	4a21      	ldr	r2, [pc, #132]	; (8015914 <USBD_LL_Init+0x98>)
 801588e:	687b      	ldr	r3, [r7, #4]
 8015890:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8015894:	687b      	ldr	r3, [r7, #4]
 8015896:	4a1f      	ldr	r2, [pc, #124]	; (8015914 <USBD_LL_Init+0x98>)
 8015898:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801589c:	4b1d      	ldr	r3, [pc, #116]	; (8015914 <USBD_LL_Init+0x98>)
 801589e:	4a1e      	ldr	r2, [pc, #120]	; (8015918 <USBD_LL_Init+0x9c>)
 80158a0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80158a2:	4b1c      	ldr	r3, [pc, #112]	; (8015914 <USBD_LL_Init+0x98>)
 80158a4:	2209      	movs	r2, #9
 80158a6:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80158a8:	4b1a      	ldr	r3, [pc, #104]	; (8015914 <USBD_LL_Init+0x98>)
 80158aa:	2202      	movs	r2, #2
 80158ac:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80158ae:	4b19      	ldr	r3, [pc, #100]	; (8015914 <USBD_LL_Init+0x98>)
 80158b0:	2200      	movs	r2, #0
 80158b2:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80158b4:	4b17      	ldr	r3, [pc, #92]	; (8015914 <USBD_LL_Init+0x98>)
 80158b6:	2202      	movs	r2, #2
 80158b8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80158ba:	4b16      	ldr	r3, [pc, #88]	; (8015914 <USBD_LL_Init+0x98>)
 80158bc:	2200      	movs	r2, #0
 80158be:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80158c0:	4b14      	ldr	r3, [pc, #80]	; (8015914 <USBD_LL_Init+0x98>)
 80158c2:	2200      	movs	r2, #0
 80158c4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80158c6:	4b13      	ldr	r3, [pc, #76]	; (8015914 <USBD_LL_Init+0x98>)
 80158c8:	2200      	movs	r2, #0
 80158ca:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80158cc:	4b11      	ldr	r3, [pc, #68]	; (8015914 <USBD_LL_Init+0x98>)
 80158ce:	2200      	movs	r2, #0
 80158d0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80158d2:	4b10      	ldr	r3, [pc, #64]	; (8015914 <USBD_LL_Init+0x98>)
 80158d4:	2200      	movs	r2, #0
 80158d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80158d8:	4b0e      	ldr	r3, [pc, #56]	; (8015914 <USBD_LL_Init+0x98>)
 80158da:	2200      	movs	r2, #0
 80158dc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80158de:	480d      	ldr	r0, [pc, #52]	; (8015914 <USBD_LL_Init+0x98>)
 80158e0:	f7f0 f88e 	bl	8005a00 <HAL_PCD_Init>
 80158e4:	4603      	mov	r3, r0
 80158e6:	2b00      	cmp	r3, #0
 80158e8:	d001      	beq.n	80158ee <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 80158ea:	f7eb fe8f 	bl	800160c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80158ee:	2180      	movs	r1, #128	; 0x80
 80158f0:	4808      	ldr	r0, [pc, #32]	; (8015914 <USBD_LL_Init+0x98>)
 80158f2:	f7f1 fa4c 	bl	8006d8e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80158f6:	2240      	movs	r2, #64	; 0x40
 80158f8:	2100      	movs	r1, #0
 80158fa:	4806      	ldr	r0, [pc, #24]	; (8015914 <USBD_LL_Init+0x98>)
 80158fc:	f7f1 fa00 	bl	8006d00 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8015900:	2280      	movs	r2, #128	; 0x80
 8015902:	2101      	movs	r1, #1
 8015904:	4803      	ldr	r0, [pc, #12]	; (8015914 <USBD_LL_Init+0x98>)
 8015906:	f7f1 f9fb 	bl	8006d00 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801590a:	2300      	movs	r3, #0
}
 801590c:	4618      	mov	r0, r3
 801590e:	3708      	adds	r7, #8
 8015910:	46bd      	mov	sp, r7
 8015912:	bd80      	pop	{r7, pc}
 8015914:	24041738 	.word	0x24041738
 8015918:	40080000 	.word	0x40080000

0801591c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801591c:	b580      	push	{r7, lr}
 801591e:	b084      	sub	sp, #16
 8015920:	af00      	add	r7, sp, #0
 8015922:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015924:	2300      	movs	r3, #0
 8015926:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015928:	2300      	movs	r3, #0
 801592a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801592c:	687b      	ldr	r3, [r7, #4]
 801592e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015932:	4618      	mov	r0, r3
 8015934:	f7f0 f988 	bl	8005c48 <HAL_PCD_Start>
 8015938:	4603      	mov	r3, r0
 801593a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801593c:	7bfb      	ldrb	r3, [r7, #15]
 801593e:	4618      	mov	r0, r3
 8015940:	f000 f94a 	bl	8015bd8 <USBD_Get_USB_Status>
 8015944:	4603      	mov	r3, r0
 8015946:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015948:	7bbb      	ldrb	r3, [r7, #14]
}
 801594a:	4618      	mov	r0, r3
 801594c:	3710      	adds	r7, #16
 801594e:	46bd      	mov	sp, r7
 8015950:	bd80      	pop	{r7, pc}

08015952 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8015952:	b580      	push	{r7, lr}
 8015954:	b084      	sub	sp, #16
 8015956:	af00      	add	r7, sp, #0
 8015958:	6078      	str	r0, [r7, #4]
 801595a:	4608      	mov	r0, r1
 801595c:	4611      	mov	r1, r2
 801595e:	461a      	mov	r2, r3
 8015960:	4603      	mov	r3, r0
 8015962:	70fb      	strb	r3, [r7, #3]
 8015964:	460b      	mov	r3, r1
 8015966:	70bb      	strb	r3, [r7, #2]
 8015968:	4613      	mov	r3, r2
 801596a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801596c:	2300      	movs	r3, #0
 801596e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015970:	2300      	movs	r3, #0
 8015972:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8015974:	687b      	ldr	r3, [r7, #4]
 8015976:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801597a:	78bb      	ldrb	r3, [r7, #2]
 801597c:	883a      	ldrh	r2, [r7, #0]
 801597e:	78f9      	ldrb	r1, [r7, #3]
 8015980:	f7f0 fd99 	bl	80064b6 <HAL_PCD_EP_Open>
 8015984:	4603      	mov	r3, r0
 8015986:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015988:	7bfb      	ldrb	r3, [r7, #15]
 801598a:	4618      	mov	r0, r3
 801598c:	f000 f924 	bl	8015bd8 <USBD_Get_USB_Status>
 8015990:	4603      	mov	r3, r0
 8015992:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015994:	7bbb      	ldrb	r3, [r7, #14]
}
 8015996:	4618      	mov	r0, r3
 8015998:	3710      	adds	r7, #16
 801599a:	46bd      	mov	sp, r7
 801599c:	bd80      	pop	{r7, pc}

0801599e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801599e:	b580      	push	{r7, lr}
 80159a0:	b084      	sub	sp, #16
 80159a2:	af00      	add	r7, sp, #0
 80159a4:	6078      	str	r0, [r7, #4]
 80159a6:	460b      	mov	r3, r1
 80159a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80159aa:	2300      	movs	r3, #0
 80159ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80159ae:	2300      	movs	r3, #0
 80159b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80159b2:	687b      	ldr	r3, [r7, #4]
 80159b4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80159b8:	78fa      	ldrb	r2, [r7, #3]
 80159ba:	4611      	mov	r1, r2
 80159bc:	4618      	mov	r0, r3
 80159be:	f7f0 fde2 	bl	8006586 <HAL_PCD_EP_Close>
 80159c2:	4603      	mov	r3, r0
 80159c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80159c6:	7bfb      	ldrb	r3, [r7, #15]
 80159c8:	4618      	mov	r0, r3
 80159ca:	f000 f905 	bl	8015bd8 <USBD_Get_USB_Status>
 80159ce:	4603      	mov	r3, r0
 80159d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80159d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80159d4:	4618      	mov	r0, r3
 80159d6:	3710      	adds	r7, #16
 80159d8:	46bd      	mov	sp, r7
 80159da:	bd80      	pop	{r7, pc}

080159dc <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80159dc:	b580      	push	{r7, lr}
 80159de:	b084      	sub	sp, #16
 80159e0:	af00      	add	r7, sp, #0
 80159e2:	6078      	str	r0, [r7, #4]
 80159e4:	460b      	mov	r3, r1
 80159e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80159e8:	2300      	movs	r3, #0
 80159ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80159ec:	2300      	movs	r3, #0
 80159ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 80159f0:	687b      	ldr	r3, [r7, #4]
 80159f2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80159f6:	78fa      	ldrb	r2, [r7, #3]
 80159f8:	4611      	mov	r1, r2
 80159fa:	4618      	mov	r0, r3
 80159fc:	f7f0 ff74 	bl	80068e8 <HAL_PCD_EP_Flush>
 8015a00:	4603      	mov	r3, r0
 8015a02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015a04:	7bfb      	ldrb	r3, [r7, #15]
 8015a06:	4618      	mov	r0, r3
 8015a08:	f000 f8e6 	bl	8015bd8 <USBD_Get_USB_Status>
 8015a0c:	4603      	mov	r3, r0
 8015a0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015a10:	7bbb      	ldrb	r3, [r7, #14]
}
 8015a12:	4618      	mov	r0, r3
 8015a14:	3710      	adds	r7, #16
 8015a16:	46bd      	mov	sp, r7
 8015a18:	bd80      	pop	{r7, pc}

08015a1a <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015a1a:	b580      	push	{r7, lr}
 8015a1c:	b084      	sub	sp, #16
 8015a1e:	af00      	add	r7, sp, #0
 8015a20:	6078      	str	r0, [r7, #4]
 8015a22:	460b      	mov	r3, r1
 8015a24:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015a26:	2300      	movs	r3, #0
 8015a28:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015a2a:	2300      	movs	r3, #0
 8015a2c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8015a2e:	687b      	ldr	r3, [r7, #4]
 8015a30:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015a34:	78fa      	ldrb	r2, [r7, #3]
 8015a36:	4611      	mov	r1, r2
 8015a38:	4618      	mov	r0, r3
 8015a3a:	f7f0 fe9b 	bl	8006774 <HAL_PCD_EP_SetStall>
 8015a3e:	4603      	mov	r3, r0
 8015a40:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015a42:	7bfb      	ldrb	r3, [r7, #15]
 8015a44:	4618      	mov	r0, r3
 8015a46:	f000 f8c7 	bl	8015bd8 <USBD_Get_USB_Status>
 8015a4a:	4603      	mov	r3, r0
 8015a4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015a4e:	7bbb      	ldrb	r3, [r7, #14]
}
 8015a50:	4618      	mov	r0, r3
 8015a52:	3710      	adds	r7, #16
 8015a54:	46bd      	mov	sp, r7
 8015a56:	bd80      	pop	{r7, pc}

08015a58 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015a58:	b580      	push	{r7, lr}
 8015a5a:	b084      	sub	sp, #16
 8015a5c:	af00      	add	r7, sp, #0
 8015a5e:	6078      	str	r0, [r7, #4]
 8015a60:	460b      	mov	r3, r1
 8015a62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015a64:	2300      	movs	r3, #0
 8015a66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015a68:	2300      	movs	r3, #0
 8015a6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015a72:	78fa      	ldrb	r2, [r7, #3]
 8015a74:	4611      	mov	r1, r2
 8015a76:	4618      	mov	r0, r3
 8015a78:	f7f0 fee0 	bl	800683c <HAL_PCD_EP_ClrStall>
 8015a7c:	4603      	mov	r3, r0
 8015a7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015a80:	7bfb      	ldrb	r3, [r7, #15]
 8015a82:	4618      	mov	r0, r3
 8015a84:	f000 f8a8 	bl	8015bd8 <USBD_Get_USB_Status>
 8015a88:	4603      	mov	r3, r0
 8015a8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015a8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8015a8e:	4618      	mov	r0, r3
 8015a90:	3710      	adds	r7, #16
 8015a92:	46bd      	mov	sp, r7
 8015a94:	bd80      	pop	{r7, pc}

08015a96 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015a96:	b480      	push	{r7}
 8015a98:	b085      	sub	sp, #20
 8015a9a:	af00      	add	r7, sp, #0
 8015a9c:	6078      	str	r0, [r7, #4]
 8015a9e:	460b      	mov	r3, r1
 8015aa0:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8015aa2:	687b      	ldr	r3, [r7, #4]
 8015aa4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015aa8:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8015aaa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015aae:	2b00      	cmp	r3, #0
 8015ab0:	da0b      	bge.n	8015aca <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8015ab2:	78fb      	ldrb	r3, [r7, #3]
 8015ab4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015ab8:	68f9      	ldr	r1, [r7, #12]
 8015aba:	4613      	mov	r3, r2
 8015abc:	00db      	lsls	r3, r3, #3
 8015abe:	1a9b      	subs	r3, r3, r2
 8015ac0:	009b      	lsls	r3, r3, #2
 8015ac2:	440b      	add	r3, r1
 8015ac4:	333e      	adds	r3, #62	; 0x3e
 8015ac6:	781b      	ldrb	r3, [r3, #0]
 8015ac8:	e00b      	b.n	8015ae2 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8015aca:	78fb      	ldrb	r3, [r7, #3]
 8015acc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015ad0:	68f9      	ldr	r1, [r7, #12]
 8015ad2:	4613      	mov	r3, r2
 8015ad4:	00db      	lsls	r3, r3, #3
 8015ad6:	1a9b      	subs	r3, r3, r2
 8015ad8:	009b      	lsls	r3, r3, #2
 8015ada:	440b      	add	r3, r1
 8015adc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8015ae0:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015ae2:	4618      	mov	r0, r3
 8015ae4:	3714      	adds	r7, #20
 8015ae6:	46bd      	mov	sp, r7
 8015ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015aec:	4770      	bx	lr

08015aee <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015aee:	b580      	push	{r7, lr}
 8015af0:	b084      	sub	sp, #16
 8015af2:	af00      	add	r7, sp, #0
 8015af4:	6078      	str	r0, [r7, #4]
 8015af6:	460b      	mov	r3, r1
 8015af8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015afa:	2300      	movs	r3, #0
 8015afc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015afe:	2300      	movs	r3, #0
 8015b00:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8015b02:	687b      	ldr	r3, [r7, #4]
 8015b04:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015b08:	78fa      	ldrb	r2, [r7, #3]
 8015b0a:	4611      	mov	r1, r2
 8015b0c:	4618      	mov	r0, r3
 8015b0e:	f7f0 fcad 	bl	800646c <HAL_PCD_SetAddress>
 8015b12:	4603      	mov	r3, r0
 8015b14:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015b16:	7bfb      	ldrb	r3, [r7, #15]
 8015b18:	4618      	mov	r0, r3
 8015b1a:	f000 f85d 	bl	8015bd8 <USBD_Get_USB_Status>
 8015b1e:	4603      	mov	r3, r0
 8015b20:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015b22:	7bbb      	ldrb	r3, [r7, #14]
}
 8015b24:	4618      	mov	r0, r3
 8015b26:	3710      	adds	r7, #16
 8015b28:	46bd      	mov	sp, r7
 8015b2a:	bd80      	pop	{r7, pc}

08015b2c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015b2c:	b580      	push	{r7, lr}
 8015b2e:	b086      	sub	sp, #24
 8015b30:	af00      	add	r7, sp, #0
 8015b32:	60f8      	str	r0, [r7, #12]
 8015b34:	607a      	str	r2, [r7, #4]
 8015b36:	603b      	str	r3, [r7, #0]
 8015b38:	460b      	mov	r3, r1
 8015b3a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015b3c:	2300      	movs	r3, #0
 8015b3e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015b40:	2300      	movs	r3, #0
 8015b42:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8015b44:	68fb      	ldr	r3, [r7, #12]
 8015b46:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015b4a:	7af9      	ldrb	r1, [r7, #11]
 8015b4c:	683b      	ldr	r3, [r7, #0]
 8015b4e:	687a      	ldr	r2, [r7, #4]
 8015b50:	f7f0 fdc6 	bl	80066e0 <HAL_PCD_EP_Transmit>
 8015b54:	4603      	mov	r3, r0
 8015b56:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015b58:	7dfb      	ldrb	r3, [r7, #23]
 8015b5a:	4618      	mov	r0, r3
 8015b5c:	f000 f83c 	bl	8015bd8 <USBD_Get_USB_Status>
 8015b60:	4603      	mov	r3, r0
 8015b62:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015b64:	7dbb      	ldrb	r3, [r7, #22]
}
 8015b66:	4618      	mov	r0, r3
 8015b68:	3718      	adds	r7, #24
 8015b6a:	46bd      	mov	sp, r7
 8015b6c:	bd80      	pop	{r7, pc}

08015b6e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015b6e:	b580      	push	{r7, lr}
 8015b70:	b086      	sub	sp, #24
 8015b72:	af00      	add	r7, sp, #0
 8015b74:	60f8      	str	r0, [r7, #12]
 8015b76:	607a      	str	r2, [r7, #4]
 8015b78:	603b      	str	r3, [r7, #0]
 8015b7a:	460b      	mov	r3, r1
 8015b7c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015b7e:	2300      	movs	r3, #0
 8015b80:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015b82:	2300      	movs	r3, #0
 8015b84:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8015b86:	68fb      	ldr	r3, [r7, #12]
 8015b88:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015b8c:	7af9      	ldrb	r1, [r7, #11]
 8015b8e:	683b      	ldr	r3, [r7, #0]
 8015b90:	687a      	ldr	r2, [r7, #4]
 8015b92:	f7f0 fd42 	bl	800661a <HAL_PCD_EP_Receive>
 8015b96:	4603      	mov	r3, r0
 8015b98:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015b9a:	7dfb      	ldrb	r3, [r7, #23]
 8015b9c:	4618      	mov	r0, r3
 8015b9e:	f000 f81b 	bl	8015bd8 <USBD_Get_USB_Status>
 8015ba2:	4603      	mov	r3, r0
 8015ba4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015ba6:	7dbb      	ldrb	r3, [r7, #22]
}
 8015ba8:	4618      	mov	r0, r3
 8015baa:	3718      	adds	r7, #24
 8015bac:	46bd      	mov	sp, r7
 8015bae:	bd80      	pop	{r7, pc}

08015bb0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015bb0:	b580      	push	{r7, lr}
 8015bb2:	b082      	sub	sp, #8
 8015bb4:	af00      	add	r7, sp, #0
 8015bb6:	6078      	str	r0, [r7, #4]
 8015bb8:	460b      	mov	r3, r1
 8015bba:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8015bbc:	687b      	ldr	r3, [r7, #4]
 8015bbe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015bc2:	78fa      	ldrb	r2, [r7, #3]
 8015bc4:	4611      	mov	r1, r2
 8015bc6:	4618      	mov	r0, r3
 8015bc8:	f7f0 fd72 	bl	80066b0 <HAL_PCD_EP_GetRxCount>
 8015bcc:	4603      	mov	r3, r0
}
 8015bce:	4618      	mov	r0, r3
 8015bd0:	3708      	adds	r7, #8
 8015bd2:	46bd      	mov	sp, r7
 8015bd4:	bd80      	pop	{r7, pc}
	...

08015bd8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015bd8:	b480      	push	{r7}
 8015bda:	b085      	sub	sp, #20
 8015bdc:	af00      	add	r7, sp, #0
 8015bde:	4603      	mov	r3, r0
 8015be0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015be2:	2300      	movs	r3, #0
 8015be4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8015be6:	79fb      	ldrb	r3, [r7, #7]
 8015be8:	2b03      	cmp	r3, #3
 8015bea:	d817      	bhi.n	8015c1c <USBD_Get_USB_Status+0x44>
 8015bec:	a201      	add	r2, pc, #4	; (adr r2, 8015bf4 <USBD_Get_USB_Status+0x1c>)
 8015bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015bf2:	bf00      	nop
 8015bf4:	08015c05 	.word	0x08015c05
 8015bf8:	08015c0b 	.word	0x08015c0b
 8015bfc:	08015c11 	.word	0x08015c11
 8015c00:	08015c17 	.word	0x08015c17
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8015c04:	2300      	movs	r3, #0
 8015c06:	73fb      	strb	r3, [r7, #15]
    break;
 8015c08:	e00b      	b.n	8015c22 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015c0a:	2303      	movs	r3, #3
 8015c0c:	73fb      	strb	r3, [r7, #15]
    break;
 8015c0e:	e008      	b.n	8015c22 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015c10:	2301      	movs	r3, #1
 8015c12:	73fb      	strb	r3, [r7, #15]
    break;
 8015c14:	e005      	b.n	8015c22 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015c16:	2303      	movs	r3, #3
 8015c18:	73fb      	strb	r3, [r7, #15]
    break;
 8015c1a:	e002      	b.n	8015c22 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8015c1c:	2303      	movs	r3, #3
 8015c1e:	73fb      	strb	r3, [r7, #15]
    break;
 8015c20:	bf00      	nop
  }
  return usb_status;
 8015c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8015c24:	4618      	mov	r0, r3
 8015c26:	3714      	adds	r7, #20
 8015c28:	46bd      	mov	sp, r7
 8015c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c2e:	4770      	bx	lr

08015c30 <__errno>:
 8015c30:	4b01      	ldr	r3, [pc, #4]	; (8015c38 <__errno+0x8>)
 8015c32:	6818      	ldr	r0, [r3, #0]
 8015c34:	4770      	bx	lr
 8015c36:	bf00      	nop
 8015c38:	24000168 	.word	0x24000168

08015c3c <__libc_init_array>:
 8015c3c:	b570      	push	{r4, r5, r6, lr}
 8015c3e:	4e0d      	ldr	r6, [pc, #52]	; (8015c74 <__libc_init_array+0x38>)
 8015c40:	4c0d      	ldr	r4, [pc, #52]	; (8015c78 <__libc_init_array+0x3c>)
 8015c42:	1ba4      	subs	r4, r4, r6
 8015c44:	10a4      	asrs	r4, r4, #2
 8015c46:	2500      	movs	r5, #0
 8015c48:	42a5      	cmp	r5, r4
 8015c4a:	d109      	bne.n	8015c60 <__libc_init_array+0x24>
 8015c4c:	4e0b      	ldr	r6, [pc, #44]	; (8015c7c <__libc_init_array+0x40>)
 8015c4e:	4c0c      	ldr	r4, [pc, #48]	; (8015c80 <__libc_init_array+0x44>)
 8015c50:	f001 f972 	bl	8016f38 <_init>
 8015c54:	1ba4      	subs	r4, r4, r6
 8015c56:	10a4      	asrs	r4, r4, #2
 8015c58:	2500      	movs	r5, #0
 8015c5a:	42a5      	cmp	r5, r4
 8015c5c:	d105      	bne.n	8015c6a <__libc_init_array+0x2e>
 8015c5e:	bd70      	pop	{r4, r5, r6, pc}
 8015c60:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015c64:	4798      	blx	r3
 8015c66:	3501      	adds	r5, #1
 8015c68:	e7ee      	b.n	8015c48 <__libc_init_array+0xc>
 8015c6a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015c6e:	4798      	blx	r3
 8015c70:	3501      	adds	r5, #1
 8015c72:	e7f2      	b.n	8015c5a <__libc_init_array+0x1e>
 8015c74:	08017360 	.word	0x08017360
 8015c78:	08017360 	.word	0x08017360
 8015c7c:	08017360 	.word	0x08017360
 8015c80:	08017364 	.word	0x08017364

08015c84 <malloc>:
 8015c84:	4b02      	ldr	r3, [pc, #8]	; (8015c90 <malloc+0xc>)
 8015c86:	4601      	mov	r1, r0
 8015c88:	6818      	ldr	r0, [r3, #0]
 8015c8a:	f000 b86d 	b.w	8015d68 <_malloc_r>
 8015c8e:	bf00      	nop
 8015c90:	24000168 	.word	0x24000168

08015c94 <free>:
 8015c94:	4b02      	ldr	r3, [pc, #8]	; (8015ca0 <free+0xc>)
 8015c96:	4601      	mov	r1, r0
 8015c98:	6818      	ldr	r0, [r3, #0]
 8015c9a:	f000 b817 	b.w	8015ccc <_free_r>
 8015c9e:	bf00      	nop
 8015ca0:	24000168 	.word	0x24000168

08015ca4 <memcpy>:
 8015ca4:	b510      	push	{r4, lr}
 8015ca6:	1e43      	subs	r3, r0, #1
 8015ca8:	440a      	add	r2, r1
 8015caa:	4291      	cmp	r1, r2
 8015cac:	d100      	bne.n	8015cb0 <memcpy+0xc>
 8015cae:	bd10      	pop	{r4, pc}
 8015cb0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015cb4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015cb8:	e7f7      	b.n	8015caa <memcpy+0x6>

08015cba <memset>:
 8015cba:	4402      	add	r2, r0
 8015cbc:	4603      	mov	r3, r0
 8015cbe:	4293      	cmp	r3, r2
 8015cc0:	d100      	bne.n	8015cc4 <memset+0xa>
 8015cc2:	4770      	bx	lr
 8015cc4:	f803 1b01 	strb.w	r1, [r3], #1
 8015cc8:	e7f9      	b.n	8015cbe <memset+0x4>
	...

08015ccc <_free_r>:
 8015ccc:	b538      	push	{r3, r4, r5, lr}
 8015cce:	4605      	mov	r5, r0
 8015cd0:	2900      	cmp	r1, #0
 8015cd2:	d045      	beq.n	8015d60 <_free_r+0x94>
 8015cd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015cd8:	1f0c      	subs	r4, r1, #4
 8015cda:	2b00      	cmp	r3, #0
 8015cdc:	bfb8      	it	lt
 8015cde:	18e4      	addlt	r4, r4, r3
 8015ce0:	f000 fc1a 	bl	8016518 <__malloc_lock>
 8015ce4:	4a1f      	ldr	r2, [pc, #124]	; (8015d64 <_free_r+0x98>)
 8015ce6:	6813      	ldr	r3, [r2, #0]
 8015ce8:	4610      	mov	r0, r2
 8015cea:	b933      	cbnz	r3, 8015cfa <_free_r+0x2e>
 8015cec:	6063      	str	r3, [r4, #4]
 8015cee:	6014      	str	r4, [r2, #0]
 8015cf0:	4628      	mov	r0, r5
 8015cf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015cf6:	f000 bc10 	b.w	801651a <__malloc_unlock>
 8015cfa:	42a3      	cmp	r3, r4
 8015cfc:	d90c      	bls.n	8015d18 <_free_r+0x4c>
 8015cfe:	6821      	ldr	r1, [r4, #0]
 8015d00:	1862      	adds	r2, r4, r1
 8015d02:	4293      	cmp	r3, r2
 8015d04:	bf04      	itt	eq
 8015d06:	681a      	ldreq	r2, [r3, #0]
 8015d08:	685b      	ldreq	r3, [r3, #4]
 8015d0a:	6063      	str	r3, [r4, #4]
 8015d0c:	bf04      	itt	eq
 8015d0e:	1852      	addeq	r2, r2, r1
 8015d10:	6022      	streq	r2, [r4, #0]
 8015d12:	6004      	str	r4, [r0, #0]
 8015d14:	e7ec      	b.n	8015cf0 <_free_r+0x24>
 8015d16:	4613      	mov	r3, r2
 8015d18:	685a      	ldr	r2, [r3, #4]
 8015d1a:	b10a      	cbz	r2, 8015d20 <_free_r+0x54>
 8015d1c:	42a2      	cmp	r2, r4
 8015d1e:	d9fa      	bls.n	8015d16 <_free_r+0x4a>
 8015d20:	6819      	ldr	r1, [r3, #0]
 8015d22:	1858      	adds	r0, r3, r1
 8015d24:	42a0      	cmp	r0, r4
 8015d26:	d10b      	bne.n	8015d40 <_free_r+0x74>
 8015d28:	6820      	ldr	r0, [r4, #0]
 8015d2a:	4401      	add	r1, r0
 8015d2c:	1858      	adds	r0, r3, r1
 8015d2e:	4282      	cmp	r2, r0
 8015d30:	6019      	str	r1, [r3, #0]
 8015d32:	d1dd      	bne.n	8015cf0 <_free_r+0x24>
 8015d34:	6810      	ldr	r0, [r2, #0]
 8015d36:	6852      	ldr	r2, [r2, #4]
 8015d38:	605a      	str	r2, [r3, #4]
 8015d3a:	4401      	add	r1, r0
 8015d3c:	6019      	str	r1, [r3, #0]
 8015d3e:	e7d7      	b.n	8015cf0 <_free_r+0x24>
 8015d40:	d902      	bls.n	8015d48 <_free_r+0x7c>
 8015d42:	230c      	movs	r3, #12
 8015d44:	602b      	str	r3, [r5, #0]
 8015d46:	e7d3      	b.n	8015cf0 <_free_r+0x24>
 8015d48:	6820      	ldr	r0, [r4, #0]
 8015d4a:	1821      	adds	r1, r4, r0
 8015d4c:	428a      	cmp	r2, r1
 8015d4e:	bf04      	itt	eq
 8015d50:	6811      	ldreq	r1, [r2, #0]
 8015d52:	6852      	ldreq	r2, [r2, #4]
 8015d54:	6062      	str	r2, [r4, #4]
 8015d56:	bf04      	itt	eq
 8015d58:	1809      	addeq	r1, r1, r0
 8015d5a:	6021      	streq	r1, [r4, #0]
 8015d5c:	605c      	str	r4, [r3, #4]
 8015d5e:	e7c7      	b.n	8015cf0 <_free_r+0x24>
 8015d60:	bd38      	pop	{r3, r4, r5, pc}
 8015d62:	bf00      	nop
 8015d64:	24040250 	.word	0x24040250

08015d68 <_malloc_r>:
 8015d68:	b570      	push	{r4, r5, r6, lr}
 8015d6a:	1ccd      	adds	r5, r1, #3
 8015d6c:	f025 0503 	bic.w	r5, r5, #3
 8015d70:	3508      	adds	r5, #8
 8015d72:	2d0c      	cmp	r5, #12
 8015d74:	bf38      	it	cc
 8015d76:	250c      	movcc	r5, #12
 8015d78:	2d00      	cmp	r5, #0
 8015d7a:	4606      	mov	r6, r0
 8015d7c:	db01      	blt.n	8015d82 <_malloc_r+0x1a>
 8015d7e:	42a9      	cmp	r1, r5
 8015d80:	d903      	bls.n	8015d8a <_malloc_r+0x22>
 8015d82:	230c      	movs	r3, #12
 8015d84:	6033      	str	r3, [r6, #0]
 8015d86:	2000      	movs	r0, #0
 8015d88:	bd70      	pop	{r4, r5, r6, pc}
 8015d8a:	f000 fbc5 	bl	8016518 <__malloc_lock>
 8015d8e:	4a21      	ldr	r2, [pc, #132]	; (8015e14 <_malloc_r+0xac>)
 8015d90:	6814      	ldr	r4, [r2, #0]
 8015d92:	4621      	mov	r1, r4
 8015d94:	b991      	cbnz	r1, 8015dbc <_malloc_r+0x54>
 8015d96:	4c20      	ldr	r4, [pc, #128]	; (8015e18 <_malloc_r+0xb0>)
 8015d98:	6823      	ldr	r3, [r4, #0]
 8015d9a:	b91b      	cbnz	r3, 8015da4 <_malloc_r+0x3c>
 8015d9c:	4630      	mov	r0, r6
 8015d9e:	f000 f8b9 	bl	8015f14 <_sbrk_r>
 8015da2:	6020      	str	r0, [r4, #0]
 8015da4:	4629      	mov	r1, r5
 8015da6:	4630      	mov	r0, r6
 8015da8:	f000 f8b4 	bl	8015f14 <_sbrk_r>
 8015dac:	1c43      	adds	r3, r0, #1
 8015dae:	d124      	bne.n	8015dfa <_malloc_r+0x92>
 8015db0:	230c      	movs	r3, #12
 8015db2:	6033      	str	r3, [r6, #0]
 8015db4:	4630      	mov	r0, r6
 8015db6:	f000 fbb0 	bl	801651a <__malloc_unlock>
 8015dba:	e7e4      	b.n	8015d86 <_malloc_r+0x1e>
 8015dbc:	680b      	ldr	r3, [r1, #0]
 8015dbe:	1b5b      	subs	r3, r3, r5
 8015dc0:	d418      	bmi.n	8015df4 <_malloc_r+0x8c>
 8015dc2:	2b0b      	cmp	r3, #11
 8015dc4:	d90f      	bls.n	8015de6 <_malloc_r+0x7e>
 8015dc6:	600b      	str	r3, [r1, #0]
 8015dc8:	50cd      	str	r5, [r1, r3]
 8015dca:	18cc      	adds	r4, r1, r3
 8015dcc:	4630      	mov	r0, r6
 8015dce:	f000 fba4 	bl	801651a <__malloc_unlock>
 8015dd2:	f104 000b 	add.w	r0, r4, #11
 8015dd6:	1d23      	adds	r3, r4, #4
 8015dd8:	f020 0007 	bic.w	r0, r0, #7
 8015ddc:	1ac3      	subs	r3, r0, r3
 8015dde:	d0d3      	beq.n	8015d88 <_malloc_r+0x20>
 8015de0:	425a      	negs	r2, r3
 8015de2:	50e2      	str	r2, [r4, r3]
 8015de4:	e7d0      	b.n	8015d88 <_malloc_r+0x20>
 8015de6:	428c      	cmp	r4, r1
 8015de8:	684b      	ldr	r3, [r1, #4]
 8015dea:	bf16      	itet	ne
 8015dec:	6063      	strne	r3, [r4, #4]
 8015dee:	6013      	streq	r3, [r2, #0]
 8015df0:	460c      	movne	r4, r1
 8015df2:	e7eb      	b.n	8015dcc <_malloc_r+0x64>
 8015df4:	460c      	mov	r4, r1
 8015df6:	6849      	ldr	r1, [r1, #4]
 8015df8:	e7cc      	b.n	8015d94 <_malloc_r+0x2c>
 8015dfa:	1cc4      	adds	r4, r0, #3
 8015dfc:	f024 0403 	bic.w	r4, r4, #3
 8015e00:	42a0      	cmp	r0, r4
 8015e02:	d005      	beq.n	8015e10 <_malloc_r+0xa8>
 8015e04:	1a21      	subs	r1, r4, r0
 8015e06:	4630      	mov	r0, r6
 8015e08:	f000 f884 	bl	8015f14 <_sbrk_r>
 8015e0c:	3001      	adds	r0, #1
 8015e0e:	d0cf      	beq.n	8015db0 <_malloc_r+0x48>
 8015e10:	6025      	str	r5, [r4, #0]
 8015e12:	e7db      	b.n	8015dcc <_malloc_r+0x64>
 8015e14:	24040250 	.word	0x24040250
 8015e18:	24040254 	.word	0x24040254

08015e1c <iprintf>:
 8015e1c:	b40f      	push	{r0, r1, r2, r3}
 8015e1e:	4b0a      	ldr	r3, [pc, #40]	; (8015e48 <iprintf+0x2c>)
 8015e20:	b513      	push	{r0, r1, r4, lr}
 8015e22:	681c      	ldr	r4, [r3, #0]
 8015e24:	b124      	cbz	r4, 8015e30 <iprintf+0x14>
 8015e26:	69a3      	ldr	r3, [r4, #24]
 8015e28:	b913      	cbnz	r3, 8015e30 <iprintf+0x14>
 8015e2a:	4620      	mov	r0, r4
 8015e2c:	f000 fa86 	bl	801633c <__sinit>
 8015e30:	ab05      	add	r3, sp, #20
 8015e32:	9a04      	ldr	r2, [sp, #16]
 8015e34:	68a1      	ldr	r1, [r4, #8]
 8015e36:	9301      	str	r3, [sp, #4]
 8015e38:	4620      	mov	r0, r4
 8015e3a:	f000 fceb 	bl	8016814 <_vfiprintf_r>
 8015e3e:	b002      	add	sp, #8
 8015e40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015e44:	b004      	add	sp, #16
 8015e46:	4770      	bx	lr
 8015e48:	24000168 	.word	0x24000168

08015e4c <_puts_r>:
 8015e4c:	b570      	push	{r4, r5, r6, lr}
 8015e4e:	460e      	mov	r6, r1
 8015e50:	4605      	mov	r5, r0
 8015e52:	b118      	cbz	r0, 8015e5c <_puts_r+0x10>
 8015e54:	6983      	ldr	r3, [r0, #24]
 8015e56:	b90b      	cbnz	r3, 8015e5c <_puts_r+0x10>
 8015e58:	f000 fa70 	bl	801633c <__sinit>
 8015e5c:	69ab      	ldr	r3, [r5, #24]
 8015e5e:	68ac      	ldr	r4, [r5, #8]
 8015e60:	b913      	cbnz	r3, 8015e68 <_puts_r+0x1c>
 8015e62:	4628      	mov	r0, r5
 8015e64:	f000 fa6a 	bl	801633c <__sinit>
 8015e68:	4b23      	ldr	r3, [pc, #140]	; (8015ef8 <_puts_r+0xac>)
 8015e6a:	429c      	cmp	r4, r3
 8015e6c:	d117      	bne.n	8015e9e <_puts_r+0x52>
 8015e6e:	686c      	ldr	r4, [r5, #4]
 8015e70:	89a3      	ldrh	r3, [r4, #12]
 8015e72:	071b      	lsls	r3, r3, #28
 8015e74:	d51d      	bpl.n	8015eb2 <_puts_r+0x66>
 8015e76:	6923      	ldr	r3, [r4, #16]
 8015e78:	b1db      	cbz	r3, 8015eb2 <_puts_r+0x66>
 8015e7a:	3e01      	subs	r6, #1
 8015e7c:	68a3      	ldr	r3, [r4, #8]
 8015e7e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8015e82:	3b01      	subs	r3, #1
 8015e84:	60a3      	str	r3, [r4, #8]
 8015e86:	b9e9      	cbnz	r1, 8015ec4 <_puts_r+0x78>
 8015e88:	2b00      	cmp	r3, #0
 8015e8a:	da2e      	bge.n	8015eea <_puts_r+0x9e>
 8015e8c:	4622      	mov	r2, r4
 8015e8e:	210a      	movs	r1, #10
 8015e90:	4628      	mov	r0, r5
 8015e92:	f000 f8a3 	bl	8015fdc <__swbuf_r>
 8015e96:	3001      	adds	r0, #1
 8015e98:	d011      	beq.n	8015ebe <_puts_r+0x72>
 8015e9a:	200a      	movs	r0, #10
 8015e9c:	e011      	b.n	8015ec2 <_puts_r+0x76>
 8015e9e:	4b17      	ldr	r3, [pc, #92]	; (8015efc <_puts_r+0xb0>)
 8015ea0:	429c      	cmp	r4, r3
 8015ea2:	d101      	bne.n	8015ea8 <_puts_r+0x5c>
 8015ea4:	68ac      	ldr	r4, [r5, #8]
 8015ea6:	e7e3      	b.n	8015e70 <_puts_r+0x24>
 8015ea8:	4b15      	ldr	r3, [pc, #84]	; (8015f00 <_puts_r+0xb4>)
 8015eaa:	429c      	cmp	r4, r3
 8015eac:	bf08      	it	eq
 8015eae:	68ec      	ldreq	r4, [r5, #12]
 8015eb0:	e7de      	b.n	8015e70 <_puts_r+0x24>
 8015eb2:	4621      	mov	r1, r4
 8015eb4:	4628      	mov	r0, r5
 8015eb6:	f000 f8e3 	bl	8016080 <__swsetup_r>
 8015eba:	2800      	cmp	r0, #0
 8015ebc:	d0dd      	beq.n	8015e7a <_puts_r+0x2e>
 8015ebe:	f04f 30ff 	mov.w	r0, #4294967295
 8015ec2:	bd70      	pop	{r4, r5, r6, pc}
 8015ec4:	2b00      	cmp	r3, #0
 8015ec6:	da04      	bge.n	8015ed2 <_puts_r+0x86>
 8015ec8:	69a2      	ldr	r2, [r4, #24]
 8015eca:	429a      	cmp	r2, r3
 8015ecc:	dc06      	bgt.n	8015edc <_puts_r+0x90>
 8015ece:	290a      	cmp	r1, #10
 8015ed0:	d004      	beq.n	8015edc <_puts_r+0x90>
 8015ed2:	6823      	ldr	r3, [r4, #0]
 8015ed4:	1c5a      	adds	r2, r3, #1
 8015ed6:	6022      	str	r2, [r4, #0]
 8015ed8:	7019      	strb	r1, [r3, #0]
 8015eda:	e7cf      	b.n	8015e7c <_puts_r+0x30>
 8015edc:	4622      	mov	r2, r4
 8015ede:	4628      	mov	r0, r5
 8015ee0:	f000 f87c 	bl	8015fdc <__swbuf_r>
 8015ee4:	3001      	adds	r0, #1
 8015ee6:	d1c9      	bne.n	8015e7c <_puts_r+0x30>
 8015ee8:	e7e9      	b.n	8015ebe <_puts_r+0x72>
 8015eea:	6823      	ldr	r3, [r4, #0]
 8015eec:	200a      	movs	r0, #10
 8015eee:	1c5a      	adds	r2, r3, #1
 8015ef0:	6022      	str	r2, [r4, #0]
 8015ef2:	7018      	strb	r0, [r3, #0]
 8015ef4:	e7e5      	b.n	8015ec2 <_puts_r+0x76>
 8015ef6:	bf00      	nop
 8015ef8:	080172e4 	.word	0x080172e4
 8015efc:	08017304 	.word	0x08017304
 8015f00:	080172c4 	.word	0x080172c4

08015f04 <puts>:
 8015f04:	4b02      	ldr	r3, [pc, #8]	; (8015f10 <puts+0xc>)
 8015f06:	4601      	mov	r1, r0
 8015f08:	6818      	ldr	r0, [r3, #0]
 8015f0a:	f7ff bf9f 	b.w	8015e4c <_puts_r>
 8015f0e:	bf00      	nop
 8015f10:	24000168 	.word	0x24000168

08015f14 <_sbrk_r>:
 8015f14:	b538      	push	{r3, r4, r5, lr}
 8015f16:	4c06      	ldr	r4, [pc, #24]	; (8015f30 <_sbrk_r+0x1c>)
 8015f18:	2300      	movs	r3, #0
 8015f1a:	4605      	mov	r5, r0
 8015f1c:	4608      	mov	r0, r1
 8015f1e:	6023      	str	r3, [r4, #0]
 8015f20:	f7eb fe7e 	bl	8001c20 <_sbrk>
 8015f24:	1c43      	adds	r3, r0, #1
 8015f26:	d102      	bne.n	8015f2e <_sbrk_r+0x1a>
 8015f28:	6823      	ldr	r3, [r4, #0]
 8015f2a:	b103      	cbz	r3, 8015f2e <_sbrk_r+0x1a>
 8015f2c:	602b      	str	r3, [r5, #0]
 8015f2e:	bd38      	pop	{r3, r4, r5, pc}
 8015f30:	24041b40 	.word	0x24041b40

08015f34 <sniprintf>:
 8015f34:	b40c      	push	{r2, r3}
 8015f36:	b530      	push	{r4, r5, lr}
 8015f38:	4b17      	ldr	r3, [pc, #92]	; (8015f98 <sniprintf+0x64>)
 8015f3a:	1e0c      	subs	r4, r1, #0
 8015f3c:	b09d      	sub	sp, #116	; 0x74
 8015f3e:	681d      	ldr	r5, [r3, #0]
 8015f40:	da08      	bge.n	8015f54 <sniprintf+0x20>
 8015f42:	238b      	movs	r3, #139	; 0x8b
 8015f44:	602b      	str	r3, [r5, #0]
 8015f46:	f04f 30ff 	mov.w	r0, #4294967295
 8015f4a:	b01d      	add	sp, #116	; 0x74
 8015f4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015f50:	b002      	add	sp, #8
 8015f52:	4770      	bx	lr
 8015f54:	f44f 7302 	mov.w	r3, #520	; 0x208
 8015f58:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015f5c:	bf14      	ite	ne
 8015f5e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8015f62:	4623      	moveq	r3, r4
 8015f64:	9304      	str	r3, [sp, #16]
 8015f66:	9307      	str	r3, [sp, #28]
 8015f68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015f6c:	9002      	str	r0, [sp, #8]
 8015f6e:	9006      	str	r0, [sp, #24]
 8015f70:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015f74:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8015f76:	ab21      	add	r3, sp, #132	; 0x84
 8015f78:	a902      	add	r1, sp, #8
 8015f7a:	4628      	mov	r0, r5
 8015f7c:	9301      	str	r3, [sp, #4]
 8015f7e:	f000 fb27 	bl	80165d0 <_svfiprintf_r>
 8015f82:	1c43      	adds	r3, r0, #1
 8015f84:	bfbc      	itt	lt
 8015f86:	238b      	movlt	r3, #139	; 0x8b
 8015f88:	602b      	strlt	r3, [r5, #0]
 8015f8a:	2c00      	cmp	r4, #0
 8015f8c:	d0dd      	beq.n	8015f4a <sniprintf+0x16>
 8015f8e:	9b02      	ldr	r3, [sp, #8]
 8015f90:	2200      	movs	r2, #0
 8015f92:	701a      	strb	r2, [r3, #0]
 8015f94:	e7d9      	b.n	8015f4a <sniprintf+0x16>
 8015f96:	bf00      	nop
 8015f98:	24000168 	.word	0x24000168

08015f9c <siprintf>:
 8015f9c:	b40e      	push	{r1, r2, r3}
 8015f9e:	b500      	push	{lr}
 8015fa0:	b09c      	sub	sp, #112	; 0x70
 8015fa2:	ab1d      	add	r3, sp, #116	; 0x74
 8015fa4:	9002      	str	r0, [sp, #8]
 8015fa6:	9006      	str	r0, [sp, #24]
 8015fa8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015fac:	4809      	ldr	r0, [pc, #36]	; (8015fd4 <siprintf+0x38>)
 8015fae:	9107      	str	r1, [sp, #28]
 8015fb0:	9104      	str	r1, [sp, #16]
 8015fb2:	4909      	ldr	r1, [pc, #36]	; (8015fd8 <siprintf+0x3c>)
 8015fb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8015fb8:	9105      	str	r1, [sp, #20]
 8015fba:	6800      	ldr	r0, [r0, #0]
 8015fbc:	9301      	str	r3, [sp, #4]
 8015fbe:	a902      	add	r1, sp, #8
 8015fc0:	f000 fb06 	bl	80165d0 <_svfiprintf_r>
 8015fc4:	9b02      	ldr	r3, [sp, #8]
 8015fc6:	2200      	movs	r2, #0
 8015fc8:	701a      	strb	r2, [r3, #0]
 8015fca:	b01c      	add	sp, #112	; 0x70
 8015fcc:	f85d eb04 	ldr.w	lr, [sp], #4
 8015fd0:	b003      	add	sp, #12
 8015fd2:	4770      	bx	lr
 8015fd4:	24000168 	.word	0x24000168
 8015fd8:	ffff0208 	.word	0xffff0208

08015fdc <__swbuf_r>:
 8015fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015fde:	460e      	mov	r6, r1
 8015fe0:	4614      	mov	r4, r2
 8015fe2:	4605      	mov	r5, r0
 8015fe4:	b118      	cbz	r0, 8015fee <__swbuf_r+0x12>
 8015fe6:	6983      	ldr	r3, [r0, #24]
 8015fe8:	b90b      	cbnz	r3, 8015fee <__swbuf_r+0x12>
 8015fea:	f000 f9a7 	bl	801633c <__sinit>
 8015fee:	4b21      	ldr	r3, [pc, #132]	; (8016074 <__swbuf_r+0x98>)
 8015ff0:	429c      	cmp	r4, r3
 8015ff2:	d12a      	bne.n	801604a <__swbuf_r+0x6e>
 8015ff4:	686c      	ldr	r4, [r5, #4]
 8015ff6:	69a3      	ldr	r3, [r4, #24]
 8015ff8:	60a3      	str	r3, [r4, #8]
 8015ffa:	89a3      	ldrh	r3, [r4, #12]
 8015ffc:	071a      	lsls	r2, r3, #28
 8015ffe:	d52e      	bpl.n	801605e <__swbuf_r+0x82>
 8016000:	6923      	ldr	r3, [r4, #16]
 8016002:	b363      	cbz	r3, 801605e <__swbuf_r+0x82>
 8016004:	6923      	ldr	r3, [r4, #16]
 8016006:	6820      	ldr	r0, [r4, #0]
 8016008:	1ac0      	subs	r0, r0, r3
 801600a:	6963      	ldr	r3, [r4, #20]
 801600c:	b2f6      	uxtb	r6, r6
 801600e:	4283      	cmp	r3, r0
 8016010:	4637      	mov	r7, r6
 8016012:	dc04      	bgt.n	801601e <__swbuf_r+0x42>
 8016014:	4621      	mov	r1, r4
 8016016:	4628      	mov	r0, r5
 8016018:	f000 f926 	bl	8016268 <_fflush_r>
 801601c:	bb28      	cbnz	r0, 801606a <__swbuf_r+0x8e>
 801601e:	68a3      	ldr	r3, [r4, #8]
 8016020:	3b01      	subs	r3, #1
 8016022:	60a3      	str	r3, [r4, #8]
 8016024:	6823      	ldr	r3, [r4, #0]
 8016026:	1c5a      	adds	r2, r3, #1
 8016028:	6022      	str	r2, [r4, #0]
 801602a:	701e      	strb	r6, [r3, #0]
 801602c:	6963      	ldr	r3, [r4, #20]
 801602e:	3001      	adds	r0, #1
 8016030:	4283      	cmp	r3, r0
 8016032:	d004      	beq.n	801603e <__swbuf_r+0x62>
 8016034:	89a3      	ldrh	r3, [r4, #12]
 8016036:	07db      	lsls	r3, r3, #31
 8016038:	d519      	bpl.n	801606e <__swbuf_r+0x92>
 801603a:	2e0a      	cmp	r6, #10
 801603c:	d117      	bne.n	801606e <__swbuf_r+0x92>
 801603e:	4621      	mov	r1, r4
 8016040:	4628      	mov	r0, r5
 8016042:	f000 f911 	bl	8016268 <_fflush_r>
 8016046:	b190      	cbz	r0, 801606e <__swbuf_r+0x92>
 8016048:	e00f      	b.n	801606a <__swbuf_r+0x8e>
 801604a:	4b0b      	ldr	r3, [pc, #44]	; (8016078 <__swbuf_r+0x9c>)
 801604c:	429c      	cmp	r4, r3
 801604e:	d101      	bne.n	8016054 <__swbuf_r+0x78>
 8016050:	68ac      	ldr	r4, [r5, #8]
 8016052:	e7d0      	b.n	8015ff6 <__swbuf_r+0x1a>
 8016054:	4b09      	ldr	r3, [pc, #36]	; (801607c <__swbuf_r+0xa0>)
 8016056:	429c      	cmp	r4, r3
 8016058:	bf08      	it	eq
 801605a:	68ec      	ldreq	r4, [r5, #12]
 801605c:	e7cb      	b.n	8015ff6 <__swbuf_r+0x1a>
 801605e:	4621      	mov	r1, r4
 8016060:	4628      	mov	r0, r5
 8016062:	f000 f80d 	bl	8016080 <__swsetup_r>
 8016066:	2800      	cmp	r0, #0
 8016068:	d0cc      	beq.n	8016004 <__swbuf_r+0x28>
 801606a:	f04f 37ff 	mov.w	r7, #4294967295
 801606e:	4638      	mov	r0, r7
 8016070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016072:	bf00      	nop
 8016074:	080172e4 	.word	0x080172e4
 8016078:	08017304 	.word	0x08017304
 801607c:	080172c4 	.word	0x080172c4

08016080 <__swsetup_r>:
 8016080:	4b32      	ldr	r3, [pc, #200]	; (801614c <__swsetup_r+0xcc>)
 8016082:	b570      	push	{r4, r5, r6, lr}
 8016084:	681d      	ldr	r5, [r3, #0]
 8016086:	4606      	mov	r6, r0
 8016088:	460c      	mov	r4, r1
 801608a:	b125      	cbz	r5, 8016096 <__swsetup_r+0x16>
 801608c:	69ab      	ldr	r3, [r5, #24]
 801608e:	b913      	cbnz	r3, 8016096 <__swsetup_r+0x16>
 8016090:	4628      	mov	r0, r5
 8016092:	f000 f953 	bl	801633c <__sinit>
 8016096:	4b2e      	ldr	r3, [pc, #184]	; (8016150 <__swsetup_r+0xd0>)
 8016098:	429c      	cmp	r4, r3
 801609a:	d10f      	bne.n	80160bc <__swsetup_r+0x3c>
 801609c:	686c      	ldr	r4, [r5, #4]
 801609e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80160a2:	b29a      	uxth	r2, r3
 80160a4:	0715      	lsls	r5, r2, #28
 80160a6:	d42c      	bmi.n	8016102 <__swsetup_r+0x82>
 80160a8:	06d0      	lsls	r0, r2, #27
 80160aa:	d411      	bmi.n	80160d0 <__swsetup_r+0x50>
 80160ac:	2209      	movs	r2, #9
 80160ae:	6032      	str	r2, [r6, #0]
 80160b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80160b4:	81a3      	strh	r3, [r4, #12]
 80160b6:	f04f 30ff 	mov.w	r0, #4294967295
 80160ba:	e03e      	b.n	801613a <__swsetup_r+0xba>
 80160bc:	4b25      	ldr	r3, [pc, #148]	; (8016154 <__swsetup_r+0xd4>)
 80160be:	429c      	cmp	r4, r3
 80160c0:	d101      	bne.n	80160c6 <__swsetup_r+0x46>
 80160c2:	68ac      	ldr	r4, [r5, #8]
 80160c4:	e7eb      	b.n	801609e <__swsetup_r+0x1e>
 80160c6:	4b24      	ldr	r3, [pc, #144]	; (8016158 <__swsetup_r+0xd8>)
 80160c8:	429c      	cmp	r4, r3
 80160ca:	bf08      	it	eq
 80160cc:	68ec      	ldreq	r4, [r5, #12]
 80160ce:	e7e6      	b.n	801609e <__swsetup_r+0x1e>
 80160d0:	0751      	lsls	r1, r2, #29
 80160d2:	d512      	bpl.n	80160fa <__swsetup_r+0x7a>
 80160d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80160d6:	b141      	cbz	r1, 80160ea <__swsetup_r+0x6a>
 80160d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80160dc:	4299      	cmp	r1, r3
 80160de:	d002      	beq.n	80160e6 <__swsetup_r+0x66>
 80160e0:	4630      	mov	r0, r6
 80160e2:	f7ff fdf3 	bl	8015ccc <_free_r>
 80160e6:	2300      	movs	r3, #0
 80160e8:	6363      	str	r3, [r4, #52]	; 0x34
 80160ea:	89a3      	ldrh	r3, [r4, #12]
 80160ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80160f0:	81a3      	strh	r3, [r4, #12]
 80160f2:	2300      	movs	r3, #0
 80160f4:	6063      	str	r3, [r4, #4]
 80160f6:	6923      	ldr	r3, [r4, #16]
 80160f8:	6023      	str	r3, [r4, #0]
 80160fa:	89a3      	ldrh	r3, [r4, #12]
 80160fc:	f043 0308 	orr.w	r3, r3, #8
 8016100:	81a3      	strh	r3, [r4, #12]
 8016102:	6923      	ldr	r3, [r4, #16]
 8016104:	b94b      	cbnz	r3, 801611a <__swsetup_r+0x9a>
 8016106:	89a3      	ldrh	r3, [r4, #12]
 8016108:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801610c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016110:	d003      	beq.n	801611a <__swsetup_r+0x9a>
 8016112:	4621      	mov	r1, r4
 8016114:	4630      	mov	r0, r6
 8016116:	f000 f9bf 	bl	8016498 <__smakebuf_r>
 801611a:	89a2      	ldrh	r2, [r4, #12]
 801611c:	f012 0301 	ands.w	r3, r2, #1
 8016120:	d00c      	beq.n	801613c <__swsetup_r+0xbc>
 8016122:	2300      	movs	r3, #0
 8016124:	60a3      	str	r3, [r4, #8]
 8016126:	6963      	ldr	r3, [r4, #20]
 8016128:	425b      	negs	r3, r3
 801612a:	61a3      	str	r3, [r4, #24]
 801612c:	6923      	ldr	r3, [r4, #16]
 801612e:	b953      	cbnz	r3, 8016146 <__swsetup_r+0xc6>
 8016130:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016134:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8016138:	d1ba      	bne.n	80160b0 <__swsetup_r+0x30>
 801613a:	bd70      	pop	{r4, r5, r6, pc}
 801613c:	0792      	lsls	r2, r2, #30
 801613e:	bf58      	it	pl
 8016140:	6963      	ldrpl	r3, [r4, #20]
 8016142:	60a3      	str	r3, [r4, #8]
 8016144:	e7f2      	b.n	801612c <__swsetup_r+0xac>
 8016146:	2000      	movs	r0, #0
 8016148:	e7f7      	b.n	801613a <__swsetup_r+0xba>
 801614a:	bf00      	nop
 801614c:	24000168 	.word	0x24000168
 8016150:	080172e4 	.word	0x080172e4
 8016154:	08017304 	.word	0x08017304
 8016158:	080172c4 	.word	0x080172c4

0801615c <__sflush_r>:
 801615c:	898a      	ldrh	r2, [r1, #12]
 801615e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016162:	4605      	mov	r5, r0
 8016164:	0710      	lsls	r0, r2, #28
 8016166:	460c      	mov	r4, r1
 8016168:	d458      	bmi.n	801621c <__sflush_r+0xc0>
 801616a:	684b      	ldr	r3, [r1, #4]
 801616c:	2b00      	cmp	r3, #0
 801616e:	dc05      	bgt.n	801617c <__sflush_r+0x20>
 8016170:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016172:	2b00      	cmp	r3, #0
 8016174:	dc02      	bgt.n	801617c <__sflush_r+0x20>
 8016176:	2000      	movs	r0, #0
 8016178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801617c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801617e:	2e00      	cmp	r6, #0
 8016180:	d0f9      	beq.n	8016176 <__sflush_r+0x1a>
 8016182:	2300      	movs	r3, #0
 8016184:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016188:	682f      	ldr	r7, [r5, #0]
 801618a:	6a21      	ldr	r1, [r4, #32]
 801618c:	602b      	str	r3, [r5, #0]
 801618e:	d032      	beq.n	80161f6 <__sflush_r+0x9a>
 8016190:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016192:	89a3      	ldrh	r3, [r4, #12]
 8016194:	075a      	lsls	r2, r3, #29
 8016196:	d505      	bpl.n	80161a4 <__sflush_r+0x48>
 8016198:	6863      	ldr	r3, [r4, #4]
 801619a:	1ac0      	subs	r0, r0, r3
 801619c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801619e:	b10b      	cbz	r3, 80161a4 <__sflush_r+0x48>
 80161a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80161a2:	1ac0      	subs	r0, r0, r3
 80161a4:	2300      	movs	r3, #0
 80161a6:	4602      	mov	r2, r0
 80161a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80161aa:	6a21      	ldr	r1, [r4, #32]
 80161ac:	4628      	mov	r0, r5
 80161ae:	47b0      	blx	r6
 80161b0:	1c43      	adds	r3, r0, #1
 80161b2:	89a3      	ldrh	r3, [r4, #12]
 80161b4:	d106      	bne.n	80161c4 <__sflush_r+0x68>
 80161b6:	6829      	ldr	r1, [r5, #0]
 80161b8:	291d      	cmp	r1, #29
 80161ba:	d848      	bhi.n	801624e <__sflush_r+0xf2>
 80161bc:	4a29      	ldr	r2, [pc, #164]	; (8016264 <__sflush_r+0x108>)
 80161be:	40ca      	lsrs	r2, r1
 80161c0:	07d6      	lsls	r6, r2, #31
 80161c2:	d544      	bpl.n	801624e <__sflush_r+0xf2>
 80161c4:	2200      	movs	r2, #0
 80161c6:	6062      	str	r2, [r4, #4]
 80161c8:	04d9      	lsls	r1, r3, #19
 80161ca:	6922      	ldr	r2, [r4, #16]
 80161cc:	6022      	str	r2, [r4, #0]
 80161ce:	d504      	bpl.n	80161da <__sflush_r+0x7e>
 80161d0:	1c42      	adds	r2, r0, #1
 80161d2:	d101      	bne.n	80161d8 <__sflush_r+0x7c>
 80161d4:	682b      	ldr	r3, [r5, #0]
 80161d6:	b903      	cbnz	r3, 80161da <__sflush_r+0x7e>
 80161d8:	6560      	str	r0, [r4, #84]	; 0x54
 80161da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80161dc:	602f      	str	r7, [r5, #0]
 80161de:	2900      	cmp	r1, #0
 80161e0:	d0c9      	beq.n	8016176 <__sflush_r+0x1a>
 80161e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80161e6:	4299      	cmp	r1, r3
 80161e8:	d002      	beq.n	80161f0 <__sflush_r+0x94>
 80161ea:	4628      	mov	r0, r5
 80161ec:	f7ff fd6e 	bl	8015ccc <_free_r>
 80161f0:	2000      	movs	r0, #0
 80161f2:	6360      	str	r0, [r4, #52]	; 0x34
 80161f4:	e7c0      	b.n	8016178 <__sflush_r+0x1c>
 80161f6:	2301      	movs	r3, #1
 80161f8:	4628      	mov	r0, r5
 80161fa:	47b0      	blx	r6
 80161fc:	1c41      	adds	r1, r0, #1
 80161fe:	d1c8      	bne.n	8016192 <__sflush_r+0x36>
 8016200:	682b      	ldr	r3, [r5, #0]
 8016202:	2b00      	cmp	r3, #0
 8016204:	d0c5      	beq.n	8016192 <__sflush_r+0x36>
 8016206:	2b1d      	cmp	r3, #29
 8016208:	d001      	beq.n	801620e <__sflush_r+0xb2>
 801620a:	2b16      	cmp	r3, #22
 801620c:	d101      	bne.n	8016212 <__sflush_r+0xb6>
 801620e:	602f      	str	r7, [r5, #0]
 8016210:	e7b1      	b.n	8016176 <__sflush_r+0x1a>
 8016212:	89a3      	ldrh	r3, [r4, #12]
 8016214:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016218:	81a3      	strh	r3, [r4, #12]
 801621a:	e7ad      	b.n	8016178 <__sflush_r+0x1c>
 801621c:	690f      	ldr	r7, [r1, #16]
 801621e:	2f00      	cmp	r7, #0
 8016220:	d0a9      	beq.n	8016176 <__sflush_r+0x1a>
 8016222:	0793      	lsls	r3, r2, #30
 8016224:	680e      	ldr	r6, [r1, #0]
 8016226:	bf08      	it	eq
 8016228:	694b      	ldreq	r3, [r1, #20]
 801622a:	600f      	str	r7, [r1, #0]
 801622c:	bf18      	it	ne
 801622e:	2300      	movne	r3, #0
 8016230:	eba6 0807 	sub.w	r8, r6, r7
 8016234:	608b      	str	r3, [r1, #8]
 8016236:	f1b8 0f00 	cmp.w	r8, #0
 801623a:	dd9c      	ble.n	8016176 <__sflush_r+0x1a>
 801623c:	4643      	mov	r3, r8
 801623e:	463a      	mov	r2, r7
 8016240:	6a21      	ldr	r1, [r4, #32]
 8016242:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016244:	4628      	mov	r0, r5
 8016246:	47b0      	blx	r6
 8016248:	2800      	cmp	r0, #0
 801624a:	dc06      	bgt.n	801625a <__sflush_r+0xfe>
 801624c:	89a3      	ldrh	r3, [r4, #12]
 801624e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016252:	81a3      	strh	r3, [r4, #12]
 8016254:	f04f 30ff 	mov.w	r0, #4294967295
 8016258:	e78e      	b.n	8016178 <__sflush_r+0x1c>
 801625a:	4407      	add	r7, r0
 801625c:	eba8 0800 	sub.w	r8, r8, r0
 8016260:	e7e9      	b.n	8016236 <__sflush_r+0xda>
 8016262:	bf00      	nop
 8016264:	20400001 	.word	0x20400001

08016268 <_fflush_r>:
 8016268:	b538      	push	{r3, r4, r5, lr}
 801626a:	690b      	ldr	r3, [r1, #16]
 801626c:	4605      	mov	r5, r0
 801626e:	460c      	mov	r4, r1
 8016270:	b1db      	cbz	r3, 80162aa <_fflush_r+0x42>
 8016272:	b118      	cbz	r0, 801627c <_fflush_r+0x14>
 8016274:	6983      	ldr	r3, [r0, #24]
 8016276:	b90b      	cbnz	r3, 801627c <_fflush_r+0x14>
 8016278:	f000 f860 	bl	801633c <__sinit>
 801627c:	4b0c      	ldr	r3, [pc, #48]	; (80162b0 <_fflush_r+0x48>)
 801627e:	429c      	cmp	r4, r3
 8016280:	d109      	bne.n	8016296 <_fflush_r+0x2e>
 8016282:	686c      	ldr	r4, [r5, #4]
 8016284:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016288:	b17b      	cbz	r3, 80162aa <_fflush_r+0x42>
 801628a:	4621      	mov	r1, r4
 801628c:	4628      	mov	r0, r5
 801628e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016292:	f7ff bf63 	b.w	801615c <__sflush_r>
 8016296:	4b07      	ldr	r3, [pc, #28]	; (80162b4 <_fflush_r+0x4c>)
 8016298:	429c      	cmp	r4, r3
 801629a:	d101      	bne.n	80162a0 <_fflush_r+0x38>
 801629c:	68ac      	ldr	r4, [r5, #8]
 801629e:	e7f1      	b.n	8016284 <_fflush_r+0x1c>
 80162a0:	4b05      	ldr	r3, [pc, #20]	; (80162b8 <_fflush_r+0x50>)
 80162a2:	429c      	cmp	r4, r3
 80162a4:	bf08      	it	eq
 80162a6:	68ec      	ldreq	r4, [r5, #12]
 80162a8:	e7ec      	b.n	8016284 <_fflush_r+0x1c>
 80162aa:	2000      	movs	r0, #0
 80162ac:	bd38      	pop	{r3, r4, r5, pc}
 80162ae:	bf00      	nop
 80162b0:	080172e4 	.word	0x080172e4
 80162b4:	08017304 	.word	0x08017304
 80162b8:	080172c4 	.word	0x080172c4

080162bc <std>:
 80162bc:	2300      	movs	r3, #0
 80162be:	b510      	push	{r4, lr}
 80162c0:	4604      	mov	r4, r0
 80162c2:	e9c0 3300 	strd	r3, r3, [r0]
 80162c6:	6083      	str	r3, [r0, #8]
 80162c8:	8181      	strh	r1, [r0, #12]
 80162ca:	6643      	str	r3, [r0, #100]	; 0x64
 80162cc:	81c2      	strh	r2, [r0, #14]
 80162ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80162d2:	6183      	str	r3, [r0, #24]
 80162d4:	4619      	mov	r1, r3
 80162d6:	2208      	movs	r2, #8
 80162d8:	305c      	adds	r0, #92	; 0x5c
 80162da:	f7ff fcee 	bl	8015cba <memset>
 80162de:	4b05      	ldr	r3, [pc, #20]	; (80162f4 <std+0x38>)
 80162e0:	6263      	str	r3, [r4, #36]	; 0x24
 80162e2:	4b05      	ldr	r3, [pc, #20]	; (80162f8 <std+0x3c>)
 80162e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80162e6:	4b05      	ldr	r3, [pc, #20]	; (80162fc <std+0x40>)
 80162e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80162ea:	4b05      	ldr	r3, [pc, #20]	; (8016300 <std+0x44>)
 80162ec:	6224      	str	r4, [r4, #32]
 80162ee:	6323      	str	r3, [r4, #48]	; 0x30
 80162f0:	bd10      	pop	{r4, pc}
 80162f2:	bf00      	nop
 80162f4:	08016d51 	.word	0x08016d51
 80162f8:	08016d73 	.word	0x08016d73
 80162fc:	08016dab 	.word	0x08016dab
 8016300:	08016dcf 	.word	0x08016dcf

08016304 <_cleanup_r>:
 8016304:	4901      	ldr	r1, [pc, #4]	; (801630c <_cleanup_r+0x8>)
 8016306:	f000 b885 	b.w	8016414 <_fwalk_reent>
 801630a:	bf00      	nop
 801630c:	08016269 	.word	0x08016269

08016310 <__sfmoreglue>:
 8016310:	b570      	push	{r4, r5, r6, lr}
 8016312:	1e4a      	subs	r2, r1, #1
 8016314:	2568      	movs	r5, #104	; 0x68
 8016316:	4355      	muls	r5, r2
 8016318:	460e      	mov	r6, r1
 801631a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801631e:	f7ff fd23 	bl	8015d68 <_malloc_r>
 8016322:	4604      	mov	r4, r0
 8016324:	b140      	cbz	r0, 8016338 <__sfmoreglue+0x28>
 8016326:	2100      	movs	r1, #0
 8016328:	e9c0 1600 	strd	r1, r6, [r0]
 801632c:	300c      	adds	r0, #12
 801632e:	60a0      	str	r0, [r4, #8]
 8016330:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016334:	f7ff fcc1 	bl	8015cba <memset>
 8016338:	4620      	mov	r0, r4
 801633a:	bd70      	pop	{r4, r5, r6, pc}

0801633c <__sinit>:
 801633c:	6983      	ldr	r3, [r0, #24]
 801633e:	b510      	push	{r4, lr}
 8016340:	4604      	mov	r4, r0
 8016342:	bb33      	cbnz	r3, 8016392 <__sinit+0x56>
 8016344:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8016348:	6503      	str	r3, [r0, #80]	; 0x50
 801634a:	4b12      	ldr	r3, [pc, #72]	; (8016394 <__sinit+0x58>)
 801634c:	4a12      	ldr	r2, [pc, #72]	; (8016398 <__sinit+0x5c>)
 801634e:	681b      	ldr	r3, [r3, #0]
 8016350:	6282      	str	r2, [r0, #40]	; 0x28
 8016352:	4298      	cmp	r0, r3
 8016354:	bf04      	itt	eq
 8016356:	2301      	moveq	r3, #1
 8016358:	6183      	streq	r3, [r0, #24]
 801635a:	f000 f81f 	bl	801639c <__sfp>
 801635e:	6060      	str	r0, [r4, #4]
 8016360:	4620      	mov	r0, r4
 8016362:	f000 f81b 	bl	801639c <__sfp>
 8016366:	60a0      	str	r0, [r4, #8]
 8016368:	4620      	mov	r0, r4
 801636a:	f000 f817 	bl	801639c <__sfp>
 801636e:	2200      	movs	r2, #0
 8016370:	60e0      	str	r0, [r4, #12]
 8016372:	2104      	movs	r1, #4
 8016374:	6860      	ldr	r0, [r4, #4]
 8016376:	f7ff ffa1 	bl	80162bc <std>
 801637a:	2201      	movs	r2, #1
 801637c:	2109      	movs	r1, #9
 801637e:	68a0      	ldr	r0, [r4, #8]
 8016380:	f7ff ff9c 	bl	80162bc <std>
 8016384:	2202      	movs	r2, #2
 8016386:	2112      	movs	r1, #18
 8016388:	68e0      	ldr	r0, [r4, #12]
 801638a:	f7ff ff97 	bl	80162bc <std>
 801638e:	2301      	movs	r3, #1
 8016390:	61a3      	str	r3, [r4, #24]
 8016392:	bd10      	pop	{r4, pc}
 8016394:	080172c0 	.word	0x080172c0
 8016398:	08016305 	.word	0x08016305

0801639c <__sfp>:
 801639c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801639e:	4b1b      	ldr	r3, [pc, #108]	; (801640c <__sfp+0x70>)
 80163a0:	681e      	ldr	r6, [r3, #0]
 80163a2:	69b3      	ldr	r3, [r6, #24]
 80163a4:	4607      	mov	r7, r0
 80163a6:	b913      	cbnz	r3, 80163ae <__sfp+0x12>
 80163a8:	4630      	mov	r0, r6
 80163aa:	f7ff ffc7 	bl	801633c <__sinit>
 80163ae:	3648      	adds	r6, #72	; 0x48
 80163b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80163b4:	3b01      	subs	r3, #1
 80163b6:	d503      	bpl.n	80163c0 <__sfp+0x24>
 80163b8:	6833      	ldr	r3, [r6, #0]
 80163ba:	b133      	cbz	r3, 80163ca <__sfp+0x2e>
 80163bc:	6836      	ldr	r6, [r6, #0]
 80163be:	e7f7      	b.n	80163b0 <__sfp+0x14>
 80163c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80163c4:	b16d      	cbz	r5, 80163e2 <__sfp+0x46>
 80163c6:	3468      	adds	r4, #104	; 0x68
 80163c8:	e7f4      	b.n	80163b4 <__sfp+0x18>
 80163ca:	2104      	movs	r1, #4
 80163cc:	4638      	mov	r0, r7
 80163ce:	f7ff ff9f 	bl	8016310 <__sfmoreglue>
 80163d2:	6030      	str	r0, [r6, #0]
 80163d4:	2800      	cmp	r0, #0
 80163d6:	d1f1      	bne.n	80163bc <__sfp+0x20>
 80163d8:	230c      	movs	r3, #12
 80163da:	603b      	str	r3, [r7, #0]
 80163dc:	4604      	mov	r4, r0
 80163de:	4620      	mov	r0, r4
 80163e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80163e2:	4b0b      	ldr	r3, [pc, #44]	; (8016410 <__sfp+0x74>)
 80163e4:	6665      	str	r5, [r4, #100]	; 0x64
 80163e6:	e9c4 5500 	strd	r5, r5, [r4]
 80163ea:	60a5      	str	r5, [r4, #8]
 80163ec:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80163f0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80163f4:	2208      	movs	r2, #8
 80163f6:	4629      	mov	r1, r5
 80163f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80163fc:	f7ff fc5d 	bl	8015cba <memset>
 8016400:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016404:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8016408:	e7e9      	b.n	80163de <__sfp+0x42>
 801640a:	bf00      	nop
 801640c:	080172c0 	.word	0x080172c0
 8016410:	ffff0001 	.word	0xffff0001

08016414 <_fwalk_reent>:
 8016414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016418:	4680      	mov	r8, r0
 801641a:	4689      	mov	r9, r1
 801641c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016420:	2600      	movs	r6, #0
 8016422:	b914      	cbnz	r4, 801642a <_fwalk_reent+0x16>
 8016424:	4630      	mov	r0, r6
 8016426:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801642a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801642e:	3f01      	subs	r7, #1
 8016430:	d501      	bpl.n	8016436 <_fwalk_reent+0x22>
 8016432:	6824      	ldr	r4, [r4, #0]
 8016434:	e7f5      	b.n	8016422 <_fwalk_reent+0xe>
 8016436:	89ab      	ldrh	r3, [r5, #12]
 8016438:	2b01      	cmp	r3, #1
 801643a:	d907      	bls.n	801644c <_fwalk_reent+0x38>
 801643c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016440:	3301      	adds	r3, #1
 8016442:	d003      	beq.n	801644c <_fwalk_reent+0x38>
 8016444:	4629      	mov	r1, r5
 8016446:	4640      	mov	r0, r8
 8016448:	47c8      	blx	r9
 801644a:	4306      	orrs	r6, r0
 801644c:	3568      	adds	r5, #104	; 0x68
 801644e:	e7ee      	b.n	801642e <_fwalk_reent+0x1a>

08016450 <__swhatbuf_r>:
 8016450:	b570      	push	{r4, r5, r6, lr}
 8016452:	460e      	mov	r6, r1
 8016454:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016458:	2900      	cmp	r1, #0
 801645a:	b096      	sub	sp, #88	; 0x58
 801645c:	4614      	mov	r4, r2
 801645e:	461d      	mov	r5, r3
 8016460:	da07      	bge.n	8016472 <__swhatbuf_r+0x22>
 8016462:	2300      	movs	r3, #0
 8016464:	602b      	str	r3, [r5, #0]
 8016466:	89b3      	ldrh	r3, [r6, #12]
 8016468:	061a      	lsls	r2, r3, #24
 801646a:	d410      	bmi.n	801648e <__swhatbuf_r+0x3e>
 801646c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016470:	e00e      	b.n	8016490 <__swhatbuf_r+0x40>
 8016472:	466a      	mov	r2, sp
 8016474:	f000 fcd2 	bl	8016e1c <_fstat_r>
 8016478:	2800      	cmp	r0, #0
 801647a:	dbf2      	blt.n	8016462 <__swhatbuf_r+0x12>
 801647c:	9a01      	ldr	r2, [sp, #4]
 801647e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016482:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016486:	425a      	negs	r2, r3
 8016488:	415a      	adcs	r2, r3
 801648a:	602a      	str	r2, [r5, #0]
 801648c:	e7ee      	b.n	801646c <__swhatbuf_r+0x1c>
 801648e:	2340      	movs	r3, #64	; 0x40
 8016490:	2000      	movs	r0, #0
 8016492:	6023      	str	r3, [r4, #0]
 8016494:	b016      	add	sp, #88	; 0x58
 8016496:	bd70      	pop	{r4, r5, r6, pc}

08016498 <__smakebuf_r>:
 8016498:	898b      	ldrh	r3, [r1, #12]
 801649a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801649c:	079d      	lsls	r5, r3, #30
 801649e:	4606      	mov	r6, r0
 80164a0:	460c      	mov	r4, r1
 80164a2:	d507      	bpl.n	80164b4 <__smakebuf_r+0x1c>
 80164a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80164a8:	6023      	str	r3, [r4, #0]
 80164aa:	6123      	str	r3, [r4, #16]
 80164ac:	2301      	movs	r3, #1
 80164ae:	6163      	str	r3, [r4, #20]
 80164b0:	b002      	add	sp, #8
 80164b2:	bd70      	pop	{r4, r5, r6, pc}
 80164b4:	ab01      	add	r3, sp, #4
 80164b6:	466a      	mov	r2, sp
 80164b8:	f7ff ffca 	bl	8016450 <__swhatbuf_r>
 80164bc:	9900      	ldr	r1, [sp, #0]
 80164be:	4605      	mov	r5, r0
 80164c0:	4630      	mov	r0, r6
 80164c2:	f7ff fc51 	bl	8015d68 <_malloc_r>
 80164c6:	b948      	cbnz	r0, 80164dc <__smakebuf_r+0x44>
 80164c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80164cc:	059a      	lsls	r2, r3, #22
 80164ce:	d4ef      	bmi.n	80164b0 <__smakebuf_r+0x18>
 80164d0:	f023 0303 	bic.w	r3, r3, #3
 80164d4:	f043 0302 	orr.w	r3, r3, #2
 80164d8:	81a3      	strh	r3, [r4, #12]
 80164da:	e7e3      	b.n	80164a4 <__smakebuf_r+0xc>
 80164dc:	4b0d      	ldr	r3, [pc, #52]	; (8016514 <__smakebuf_r+0x7c>)
 80164de:	62b3      	str	r3, [r6, #40]	; 0x28
 80164e0:	89a3      	ldrh	r3, [r4, #12]
 80164e2:	6020      	str	r0, [r4, #0]
 80164e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80164e8:	81a3      	strh	r3, [r4, #12]
 80164ea:	9b00      	ldr	r3, [sp, #0]
 80164ec:	6163      	str	r3, [r4, #20]
 80164ee:	9b01      	ldr	r3, [sp, #4]
 80164f0:	6120      	str	r0, [r4, #16]
 80164f2:	b15b      	cbz	r3, 801650c <__smakebuf_r+0x74>
 80164f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80164f8:	4630      	mov	r0, r6
 80164fa:	f000 fca1 	bl	8016e40 <_isatty_r>
 80164fe:	b128      	cbz	r0, 801650c <__smakebuf_r+0x74>
 8016500:	89a3      	ldrh	r3, [r4, #12]
 8016502:	f023 0303 	bic.w	r3, r3, #3
 8016506:	f043 0301 	orr.w	r3, r3, #1
 801650a:	81a3      	strh	r3, [r4, #12]
 801650c:	89a3      	ldrh	r3, [r4, #12]
 801650e:	431d      	orrs	r5, r3
 8016510:	81a5      	strh	r5, [r4, #12]
 8016512:	e7cd      	b.n	80164b0 <__smakebuf_r+0x18>
 8016514:	08016305 	.word	0x08016305

08016518 <__malloc_lock>:
 8016518:	4770      	bx	lr

0801651a <__malloc_unlock>:
 801651a:	4770      	bx	lr

0801651c <__ssputs_r>:
 801651c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016520:	688e      	ldr	r6, [r1, #8]
 8016522:	429e      	cmp	r6, r3
 8016524:	4682      	mov	sl, r0
 8016526:	460c      	mov	r4, r1
 8016528:	4690      	mov	r8, r2
 801652a:	4699      	mov	r9, r3
 801652c:	d837      	bhi.n	801659e <__ssputs_r+0x82>
 801652e:	898a      	ldrh	r2, [r1, #12]
 8016530:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016534:	d031      	beq.n	801659a <__ssputs_r+0x7e>
 8016536:	6825      	ldr	r5, [r4, #0]
 8016538:	6909      	ldr	r1, [r1, #16]
 801653a:	1a6f      	subs	r7, r5, r1
 801653c:	6965      	ldr	r5, [r4, #20]
 801653e:	2302      	movs	r3, #2
 8016540:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016544:	fb95 f5f3 	sdiv	r5, r5, r3
 8016548:	f109 0301 	add.w	r3, r9, #1
 801654c:	443b      	add	r3, r7
 801654e:	429d      	cmp	r5, r3
 8016550:	bf38      	it	cc
 8016552:	461d      	movcc	r5, r3
 8016554:	0553      	lsls	r3, r2, #21
 8016556:	d530      	bpl.n	80165ba <__ssputs_r+0x9e>
 8016558:	4629      	mov	r1, r5
 801655a:	f7ff fc05 	bl	8015d68 <_malloc_r>
 801655e:	4606      	mov	r6, r0
 8016560:	b950      	cbnz	r0, 8016578 <__ssputs_r+0x5c>
 8016562:	230c      	movs	r3, #12
 8016564:	f8ca 3000 	str.w	r3, [sl]
 8016568:	89a3      	ldrh	r3, [r4, #12]
 801656a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801656e:	81a3      	strh	r3, [r4, #12]
 8016570:	f04f 30ff 	mov.w	r0, #4294967295
 8016574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016578:	463a      	mov	r2, r7
 801657a:	6921      	ldr	r1, [r4, #16]
 801657c:	f7ff fb92 	bl	8015ca4 <memcpy>
 8016580:	89a3      	ldrh	r3, [r4, #12]
 8016582:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016586:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801658a:	81a3      	strh	r3, [r4, #12]
 801658c:	6126      	str	r6, [r4, #16]
 801658e:	6165      	str	r5, [r4, #20]
 8016590:	443e      	add	r6, r7
 8016592:	1bed      	subs	r5, r5, r7
 8016594:	6026      	str	r6, [r4, #0]
 8016596:	60a5      	str	r5, [r4, #8]
 8016598:	464e      	mov	r6, r9
 801659a:	454e      	cmp	r6, r9
 801659c:	d900      	bls.n	80165a0 <__ssputs_r+0x84>
 801659e:	464e      	mov	r6, r9
 80165a0:	4632      	mov	r2, r6
 80165a2:	4641      	mov	r1, r8
 80165a4:	6820      	ldr	r0, [r4, #0]
 80165a6:	f000 fc6d 	bl	8016e84 <memmove>
 80165aa:	68a3      	ldr	r3, [r4, #8]
 80165ac:	1b9b      	subs	r3, r3, r6
 80165ae:	60a3      	str	r3, [r4, #8]
 80165b0:	6823      	ldr	r3, [r4, #0]
 80165b2:	441e      	add	r6, r3
 80165b4:	6026      	str	r6, [r4, #0]
 80165b6:	2000      	movs	r0, #0
 80165b8:	e7dc      	b.n	8016574 <__ssputs_r+0x58>
 80165ba:	462a      	mov	r2, r5
 80165bc:	f000 fc7b 	bl	8016eb6 <_realloc_r>
 80165c0:	4606      	mov	r6, r0
 80165c2:	2800      	cmp	r0, #0
 80165c4:	d1e2      	bne.n	801658c <__ssputs_r+0x70>
 80165c6:	6921      	ldr	r1, [r4, #16]
 80165c8:	4650      	mov	r0, sl
 80165ca:	f7ff fb7f 	bl	8015ccc <_free_r>
 80165ce:	e7c8      	b.n	8016562 <__ssputs_r+0x46>

080165d0 <_svfiprintf_r>:
 80165d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165d4:	461d      	mov	r5, r3
 80165d6:	898b      	ldrh	r3, [r1, #12]
 80165d8:	061f      	lsls	r7, r3, #24
 80165da:	b09d      	sub	sp, #116	; 0x74
 80165dc:	4680      	mov	r8, r0
 80165de:	460c      	mov	r4, r1
 80165e0:	4616      	mov	r6, r2
 80165e2:	d50f      	bpl.n	8016604 <_svfiprintf_r+0x34>
 80165e4:	690b      	ldr	r3, [r1, #16]
 80165e6:	b96b      	cbnz	r3, 8016604 <_svfiprintf_r+0x34>
 80165e8:	2140      	movs	r1, #64	; 0x40
 80165ea:	f7ff fbbd 	bl	8015d68 <_malloc_r>
 80165ee:	6020      	str	r0, [r4, #0]
 80165f0:	6120      	str	r0, [r4, #16]
 80165f2:	b928      	cbnz	r0, 8016600 <_svfiprintf_r+0x30>
 80165f4:	230c      	movs	r3, #12
 80165f6:	f8c8 3000 	str.w	r3, [r8]
 80165fa:	f04f 30ff 	mov.w	r0, #4294967295
 80165fe:	e0c8      	b.n	8016792 <_svfiprintf_r+0x1c2>
 8016600:	2340      	movs	r3, #64	; 0x40
 8016602:	6163      	str	r3, [r4, #20]
 8016604:	2300      	movs	r3, #0
 8016606:	9309      	str	r3, [sp, #36]	; 0x24
 8016608:	2320      	movs	r3, #32
 801660a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801660e:	2330      	movs	r3, #48	; 0x30
 8016610:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016614:	9503      	str	r5, [sp, #12]
 8016616:	f04f 0b01 	mov.w	fp, #1
 801661a:	4637      	mov	r7, r6
 801661c:	463d      	mov	r5, r7
 801661e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8016622:	b10b      	cbz	r3, 8016628 <_svfiprintf_r+0x58>
 8016624:	2b25      	cmp	r3, #37	; 0x25
 8016626:	d13e      	bne.n	80166a6 <_svfiprintf_r+0xd6>
 8016628:	ebb7 0a06 	subs.w	sl, r7, r6
 801662c:	d00b      	beq.n	8016646 <_svfiprintf_r+0x76>
 801662e:	4653      	mov	r3, sl
 8016630:	4632      	mov	r2, r6
 8016632:	4621      	mov	r1, r4
 8016634:	4640      	mov	r0, r8
 8016636:	f7ff ff71 	bl	801651c <__ssputs_r>
 801663a:	3001      	adds	r0, #1
 801663c:	f000 80a4 	beq.w	8016788 <_svfiprintf_r+0x1b8>
 8016640:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016642:	4453      	add	r3, sl
 8016644:	9309      	str	r3, [sp, #36]	; 0x24
 8016646:	783b      	ldrb	r3, [r7, #0]
 8016648:	2b00      	cmp	r3, #0
 801664a:	f000 809d 	beq.w	8016788 <_svfiprintf_r+0x1b8>
 801664e:	2300      	movs	r3, #0
 8016650:	f04f 32ff 	mov.w	r2, #4294967295
 8016654:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016658:	9304      	str	r3, [sp, #16]
 801665a:	9307      	str	r3, [sp, #28]
 801665c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016660:	931a      	str	r3, [sp, #104]	; 0x68
 8016662:	462f      	mov	r7, r5
 8016664:	2205      	movs	r2, #5
 8016666:	f817 1b01 	ldrb.w	r1, [r7], #1
 801666a:	4850      	ldr	r0, [pc, #320]	; (80167ac <_svfiprintf_r+0x1dc>)
 801666c:	f7e9 fe40 	bl	80002f0 <memchr>
 8016670:	9b04      	ldr	r3, [sp, #16]
 8016672:	b9d0      	cbnz	r0, 80166aa <_svfiprintf_r+0xda>
 8016674:	06d9      	lsls	r1, r3, #27
 8016676:	bf44      	itt	mi
 8016678:	2220      	movmi	r2, #32
 801667a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801667e:	071a      	lsls	r2, r3, #28
 8016680:	bf44      	itt	mi
 8016682:	222b      	movmi	r2, #43	; 0x2b
 8016684:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016688:	782a      	ldrb	r2, [r5, #0]
 801668a:	2a2a      	cmp	r2, #42	; 0x2a
 801668c:	d015      	beq.n	80166ba <_svfiprintf_r+0xea>
 801668e:	9a07      	ldr	r2, [sp, #28]
 8016690:	462f      	mov	r7, r5
 8016692:	2000      	movs	r0, #0
 8016694:	250a      	movs	r5, #10
 8016696:	4639      	mov	r1, r7
 8016698:	f811 3b01 	ldrb.w	r3, [r1], #1
 801669c:	3b30      	subs	r3, #48	; 0x30
 801669e:	2b09      	cmp	r3, #9
 80166a0:	d94d      	bls.n	801673e <_svfiprintf_r+0x16e>
 80166a2:	b1b8      	cbz	r0, 80166d4 <_svfiprintf_r+0x104>
 80166a4:	e00f      	b.n	80166c6 <_svfiprintf_r+0xf6>
 80166a6:	462f      	mov	r7, r5
 80166a8:	e7b8      	b.n	801661c <_svfiprintf_r+0x4c>
 80166aa:	4a40      	ldr	r2, [pc, #256]	; (80167ac <_svfiprintf_r+0x1dc>)
 80166ac:	1a80      	subs	r0, r0, r2
 80166ae:	fa0b f000 	lsl.w	r0, fp, r0
 80166b2:	4318      	orrs	r0, r3
 80166b4:	9004      	str	r0, [sp, #16]
 80166b6:	463d      	mov	r5, r7
 80166b8:	e7d3      	b.n	8016662 <_svfiprintf_r+0x92>
 80166ba:	9a03      	ldr	r2, [sp, #12]
 80166bc:	1d11      	adds	r1, r2, #4
 80166be:	6812      	ldr	r2, [r2, #0]
 80166c0:	9103      	str	r1, [sp, #12]
 80166c2:	2a00      	cmp	r2, #0
 80166c4:	db01      	blt.n	80166ca <_svfiprintf_r+0xfa>
 80166c6:	9207      	str	r2, [sp, #28]
 80166c8:	e004      	b.n	80166d4 <_svfiprintf_r+0x104>
 80166ca:	4252      	negs	r2, r2
 80166cc:	f043 0302 	orr.w	r3, r3, #2
 80166d0:	9207      	str	r2, [sp, #28]
 80166d2:	9304      	str	r3, [sp, #16]
 80166d4:	783b      	ldrb	r3, [r7, #0]
 80166d6:	2b2e      	cmp	r3, #46	; 0x2e
 80166d8:	d10c      	bne.n	80166f4 <_svfiprintf_r+0x124>
 80166da:	787b      	ldrb	r3, [r7, #1]
 80166dc:	2b2a      	cmp	r3, #42	; 0x2a
 80166de:	d133      	bne.n	8016748 <_svfiprintf_r+0x178>
 80166e0:	9b03      	ldr	r3, [sp, #12]
 80166e2:	1d1a      	adds	r2, r3, #4
 80166e4:	681b      	ldr	r3, [r3, #0]
 80166e6:	9203      	str	r2, [sp, #12]
 80166e8:	2b00      	cmp	r3, #0
 80166ea:	bfb8      	it	lt
 80166ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80166f0:	3702      	adds	r7, #2
 80166f2:	9305      	str	r3, [sp, #20]
 80166f4:	4d2e      	ldr	r5, [pc, #184]	; (80167b0 <_svfiprintf_r+0x1e0>)
 80166f6:	7839      	ldrb	r1, [r7, #0]
 80166f8:	2203      	movs	r2, #3
 80166fa:	4628      	mov	r0, r5
 80166fc:	f7e9 fdf8 	bl	80002f0 <memchr>
 8016700:	b138      	cbz	r0, 8016712 <_svfiprintf_r+0x142>
 8016702:	2340      	movs	r3, #64	; 0x40
 8016704:	1b40      	subs	r0, r0, r5
 8016706:	fa03 f000 	lsl.w	r0, r3, r0
 801670a:	9b04      	ldr	r3, [sp, #16]
 801670c:	4303      	orrs	r3, r0
 801670e:	3701      	adds	r7, #1
 8016710:	9304      	str	r3, [sp, #16]
 8016712:	7839      	ldrb	r1, [r7, #0]
 8016714:	4827      	ldr	r0, [pc, #156]	; (80167b4 <_svfiprintf_r+0x1e4>)
 8016716:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801671a:	2206      	movs	r2, #6
 801671c:	1c7e      	adds	r6, r7, #1
 801671e:	f7e9 fde7 	bl	80002f0 <memchr>
 8016722:	2800      	cmp	r0, #0
 8016724:	d038      	beq.n	8016798 <_svfiprintf_r+0x1c8>
 8016726:	4b24      	ldr	r3, [pc, #144]	; (80167b8 <_svfiprintf_r+0x1e8>)
 8016728:	bb13      	cbnz	r3, 8016770 <_svfiprintf_r+0x1a0>
 801672a:	9b03      	ldr	r3, [sp, #12]
 801672c:	3307      	adds	r3, #7
 801672e:	f023 0307 	bic.w	r3, r3, #7
 8016732:	3308      	adds	r3, #8
 8016734:	9303      	str	r3, [sp, #12]
 8016736:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016738:	444b      	add	r3, r9
 801673a:	9309      	str	r3, [sp, #36]	; 0x24
 801673c:	e76d      	b.n	801661a <_svfiprintf_r+0x4a>
 801673e:	fb05 3202 	mla	r2, r5, r2, r3
 8016742:	2001      	movs	r0, #1
 8016744:	460f      	mov	r7, r1
 8016746:	e7a6      	b.n	8016696 <_svfiprintf_r+0xc6>
 8016748:	2300      	movs	r3, #0
 801674a:	3701      	adds	r7, #1
 801674c:	9305      	str	r3, [sp, #20]
 801674e:	4619      	mov	r1, r3
 8016750:	250a      	movs	r5, #10
 8016752:	4638      	mov	r0, r7
 8016754:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016758:	3a30      	subs	r2, #48	; 0x30
 801675a:	2a09      	cmp	r2, #9
 801675c:	d903      	bls.n	8016766 <_svfiprintf_r+0x196>
 801675e:	2b00      	cmp	r3, #0
 8016760:	d0c8      	beq.n	80166f4 <_svfiprintf_r+0x124>
 8016762:	9105      	str	r1, [sp, #20]
 8016764:	e7c6      	b.n	80166f4 <_svfiprintf_r+0x124>
 8016766:	fb05 2101 	mla	r1, r5, r1, r2
 801676a:	2301      	movs	r3, #1
 801676c:	4607      	mov	r7, r0
 801676e:	e7f0      	b.n	8016752 <_svfiprintf_r+0x182>
 8016770:	ab03      	add	r3, sp, #12
 8016772:	9300      	str	r3, [sp, #0]
 8016774:	4622      	mov	r2, r4
 8016776:	4b11      	ldr	r3, [pc, #68]	; (80167bc <_svfiprintf_r+0x1ec>)
 8016778:	a904      	add	r1, sp, #16
 801677a:	4640      	mov	r0, r8
 801677c:	f3af 8000 	nop.w
 8016780:	f1b0 3fff 	cmp.w	r0, #4294967295
 8016784:	4681      	mov	r9, r0
 8016786:	d1d6      	bne.n	8016736 <_svfiprintf_r+0x166>
 8016788:	89a3      	ldrh	r3, [r4, #12]
 801678a:	065b      	lsls	r3, r3, #25
 801678c:	f53f af35 	bmi.w	80165fa <_svfiprintf_r+0x2a>
 8016790:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016792:	b01d      	add	sp, #116	; 0x74
 8016794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016798:	ab03      	add	r3, sp, #12
 801679a:	9300      	str	r3, [sp, #0]
 801679c:	4622      	mov	r2, r4
 801679e:	4b07      	ldr	r3, [pc, #28]	; (80167bc <_svfiprintf_r+0x1ec>)
 80167a0:	a904      	add	r1, sp, #16
 80167a2:	4640      	mov	r0, r8
 80167a4:	f000 f9c2 	bl	8016b2c <_printf_i>
 80167a8:	e7ea      	b.n	8016780 <_svfiprintf_r+0x1b0>
 80167aa:	bf00      	nop
 80167ac:	08017324 	.word	0x08017324
 80167b0:	0801732a 	.word	0x0801732a
 80167b4:	0801732e 	.word	0x0801732e
 80167b8:	00000000 	.word	0x00000000
 80167bc:	0801651d 	.word	0x0801651d

080167c0 <__sfputc_r>:
 80167c0:	6893      	ldr	r3, [r2, #8]
 80167c2:	3b01      	subs	r3, #1
 80167c4:	2b00      	cmp	r3, #0
 80167c6:	b410      	push	{r4}
 80167c8:	6093      	str	r3, [r2, #8]
 80167ca:	da08      	bge.n	80167de <__sfputc_r+0x1e>
 80167cc:	6994      	ldr	r4, [r2, #24]
 80167ce:	42a3      	cmp	r3, r4
 80167d0:	db01      	blt.n	80167d6 <__sfputc_r+0x16>
 80167d2:	290a      	cmp	r1, #10
 80167d4:	d103      	bne.n	80167de <__sfputc_r+0x1e>
 80167d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80167da:	f7ff bbff 	b.w	8015fdc <__swbuf_r>
 80167de:	6813      	ldr	r3, [r2, #0]
 80167e0:	1c58      	adds	r0, r3, #1
 80167e2:	6010      	str	r0, [r2, #0]
 80167e4:	7019      	strb	r1, [r3, #0]
 80167e6:	4608      	mov	r0, r1
 80167e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80167ec:	4770      	bx	lr

080167ee <__sfputs_r>:
 80167ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80167f0:	4606      	mov	r6, r0
 80167f2:	460f      	mov	r7, r1
 80167f4:	4614      	mov	r4, r2
 80167f6:	18d5      	adds	r5, r2, r3
 80167f8:	42ac      	cmp	r4, r5
 80167fa:	d101      	bne.n	8016800 <__sfputs_r+0x12>
 80167fc:	2000      	movs	r0, #0
 80167fe:	e007      	b.n	8016810 <__sfputs_r+0x22>
 8016800:	463a      	mov	r2, r7
 8016802:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016806:	4630      	mov	r0, r6
 8016808:	f7ff ffda 	bl	80167c0 <__sfputc_r>
 801680c:	1c43      	adds	r3, r0, #1
 801680e:	d1f3      	bne.n	80167f8 <__sfputs_r+0xa>
 8016810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016814 <_vfiprintf_r>:
 8016814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016818:	460c      	mov	r4, r1
 801681a:	b09d      	sub	sp, #116	; 0x74
 801681c:	4617      	mov	r7, r2
 801681e:	461d      	mov	r5, r3
 8016820:	4606      	mov	r6, r0
 8016822:	b118      	cbz	r0, 801682c <_vfiprintf_r+0x18>
 8016824:	6983      	ldr	r3, [r0, #24]
 8016826:	b90b      	cbnz	r3, 801682c <_vfiprintf_r+0x18>
 8016828:	f7ff fd88 	bl	801633c <__sinit>
 801682c:	4b7c      	ldr	r3, [pc, #496]	; (8016a20 <_vfiprintf_r+0x20c>)
 801682e:	429c      	cmp	r4, r3
 8016830:	d158      	bne.n	80168e4 <_vfiprintf_r+0xd0>
 8016832:	6874      	ldr	r4, [r6, #4]
 8016834:	89a3      	ldrh	r3, [r4, #12]
 8016836:	0718      	lsls	r0, r3, #28
 8016838:	d55e      	bpl.n	80168f8 <_vfiprintf_r+0xe4>
 801683a:	6923      	ldr	r3, [r4, #16]
 801683c:	2b00      	cmp	r3, #0
 801683e:	d05b      	beq.n	80168f8 <_vfiprintf_r+0xe4>
 8016840:	2300      	movs	r3, #0
 8016842:	9309      	str	r3, [sp, #36]	; 0x24
 8016844:	2320      	movs	r3, #32
 8016846:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801684a:	2330      	movs	r3, #48	; 0x30
 801684c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016850:	9503      	str	r5, [sp, #12]
 8016852:	f04f 0b01 	mov.w	fp, #1
 8016856:	46b8      	mov	r8, r7
 8016858:	4645      	mov	r5, r8
 801685a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801685e:	b10b      	cbz	r3, 8016864 <_vfiprintf_r+0x50>
 8016860:	2b25      	cmp	r3, #37	; 0x25
 8016862:	d154      	bne.n	801690e <_vfiprintf_r+0xfa>
 8016864:	ebb8 0a07 	subs.w	sl, r8, r7
 8016868:	d00b      	beq.n	8016882 <_vfiprintf_r+0x6e>
 801686a:	4653      	mov	r3, sl
 801686c:	463a      	mov	r2, r7
 801686e:	4621      	mov	r1, r4
 8016870:	4630      	mov	r0, r6
 8016872:	f7ff ffbc 	bl	80167ee <__sfputs_r>
 8016876:	3001      	adds	r0, #1
 8016878:	f000 80c2 	beq.w	8016a00 <_vfiprintf_r+0x1ec>
 801687c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801687e:	4453      	add	r3, sl
 8016880:	9309      	str	r3, [sp, #36]	; 0x24
 8016882:	f898 3000 	ldrb.w	r3, [r8]
 8016886:	2b00      	cmp	r3, #0
 8016888:	f000 80ba 	beq.w	8016a00 <_vfiprintf_r+0x1ec>
 801688c:	2300      	movs	r3, #0
 801688e:	f04f 32ff 	mov.w	r2, #4294967295
 8016892:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016896:	9304      	str	r3, [sp, #16]
 8016898:	9307      	str	r3, [sp, #28]
 801689a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801689e:	931a      	str	r3, [sp, #104]	; 0x68
 80168a0:	46a8      	mov	r8, r5
 80168a2:	2205      	movs	r2, #5
 80168a4:	f818 1b01 	ldrb.w	r1, [r8], #1
 80168a8:	485e      	ldr	r0, [pc, #376]	; (8016a24 <_vfiprintf_r+0x210>)
 80168aa:	f7e9 fd21 	bl	80002f0 <memchr>
 80168ae:	9b04      	ldr	r3, [sp, #16]
 80168b0:	bb78      	cbnz	r0, 8016912 <_vfiprintf_r+0xfe>
 80168b2:	06d9      	lsls	r1, r3, #27
 80168b4:	bf44      	itt	mi
 80168b6:	2220      	movmi	r2, #32
 80168b8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80168bc:	071a      	lsls	r2, r3, #28
 80168be:	bf44      	itt	mi
 80168c0:	222b      	movmi	r2, #43	; 0x2b
 80168c2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80168c6:	782a      	ldrb	r2, [r5, #0]
 80168c8:	2a2a      	cmp	r2, #42	; 0x2a
 80168ca:	d02a      	beq.n	8016922 <_vfiprintf_r+0x10e>
 80168cc:	9a07      	ldr	r2, [sp, #28]
 80168ce:	46a8      	mov	r8, r5
 80168d0:	2000      	movs	r0, #0
 80168d2:	250a      	movs	r5, #10
 80168d4:	4641      	mov	r1, r8
 80168d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80168da:	3b30      	subs	r3, #48	; 0x30
 80168dc:	2b09      	cmp	r3, #9
 80168de:	d969      	bls.n	80169b4 <_vfiprintf_r+0x1a0>
 80168e0:	b360      	cbz	r0, 801693c <_vfiprintf_r+0x128>
 80168e2:	e024      	b.n	801692e <_vfiprintf_r+0x11a>
 80168e4:	4b50      	ldr	r3, [pc, #320]	; (8016a28 <_vfiprintf_r+0x214>)
 80168e6:	429c      	cmp	r4, r3
 80168e8:	d101      	bne.n	80168ee <_vfiprintf_r+0xda>
 80168ea:	68b4      	ldr	r4, [r6, #8]
 80168ec:	e7a2      	b.n	8016834 <_vfiprintf_r+0x20>
 80168ee:	4b4f      	ldr	r3, [pc, #316]	; (8016a2c <_vfiprintf_r+0x218>)
 80168f0:	429c      	cmp	r4, r3
 80168f2:	bf08      	it	eq
 80168f4:	68f4      	ldreq	r4, [r6, #12]
 80168f6:	e79d      	b.n	8016834 <_vfiprintf_r+0x20>
 80168f8:	4621      	mov	r1, r4
 80168fa:	4630      	mov	r0, r6
 80168fc:	f7ff fbc0 	bl	8016080 <__swsetup_r>
 8016900:	2800      	cmp	r0, #0
 8016902:	d09d      	beq.n	8016840 <_vfiprintf_r+0x2c>
 8016904:	f04f 30ff 	mov.w	r0, #4294967295
 8016908:	b01d      	add	sp, #116	; 0x74
 801690a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801690e:	46a8      	mov	r8, r5
 8016910:	e7a2      	b.n	8016858 <_vfiprintf_r+0x44>
 8016912:	4a44      	ldr	r2, [pc, #272]	; (8016a24 <_vfiprintf_r+0x210>)
 8016914:	1a80      	subs	r0, r0, r2
 8016916:	fa0b f000 	lsl.w	r0, fp, r0
 801691a:	4318      	orrs	r0, r3
 801691c:	9004      	str	r0, [sp, #16]
 801691e:	4645      	mov	r5, r8
 8016920:	e7be      	b.n	80168a0 <_vfiprintf_r+0x8c>
 8016922:	9a03      	ldr	r2, [sp, #12]
 8016924:	1d11      	adds	r1, r2, #4
 8016926:	6812      	ldr	r2, [r2, #0]
 8016928:	9103      	str	r1, [sp, #12]
 801692a:	2a00      	cmp	r2, #0
 801692c:	db01      	blt.n	8016932 <_vfiprintf_r+0x11e>
 801692e:	9207      	str	r2, [sp, #28]
 8016930:	e004      	b.n	801693c <_vfiprintf_r+0x128>
 8016932:	4252      	negs	r2, r2
 8016934:	f043 0302 	orr.w	r3, r3, #2
 8016938:	9207      	str	r2, [sp, #28]
 801693a:	9304      	str	r3, [sp, #16]
 801693c:	f898 3000 	ldrb.w	r3, [r8]
 8016940:	2b2e      	cmp	r3, #46	; 0x2e
 8016942:	d10e      	bne.n	8016962 <_vfiprintf_r+0x14e>
 8016944:	f898 3001 	ldrb.w	r3, [r8, #1]
 8016948:	2b2a      	cmp	r3, #42	; 0x2a
 801694a:	d138      	bne.n	80169be <_vfiprintf_r+0x1aa>
 801694c:	9b03      	ldr	r3, [sp, #12]
 801694e:	1d1a      	adds	r2, r3, #4
 8016950:	681b      	ldr	r3, [r3, #0]
 8016952:	9203      	str	r2, [sp, #12]
 8016954:	2b00      	cmp	r3, #0
 8016956:	bfb8      	it	lt
 8016958:	f04f 33ff 	movlt.w	r3, #4294967295
 801695c:	f108 0802 	add.w	r8, r8, #2
 8016960:	9305      	str	r3, [sp, #20]
 8016962:	4d33      	ldr	r5, [pc, #204]	; (8016a30 <_vfiprintf_r+0x21c>)
 8016964:	f898 1000 	ldrb.w	r1, [r8]
 8016968:	2203      	movs	r2, #3
 801696a:	4628      	mov	r0, r5
 801696c:	f7e9 fcc0 	bl	80002f0 <memchr>
 8016970:	b140      	cbz	r0, 8016984 <_vfiprintf_r+0x170>
 8016972:	2340      	movs	r3, #64	; 0x40
 8016974:	1b40      	subs	r0, r0, r5
 8016976:	fa03 f000 	lsl.w	r0, r3, r0
 801697a:	9b04      	ldr	r3, [sp, #16]
 801697c:	4303      	orrs	r3, r0
 801697e:	f108 0801 	add.w	r8, r8, #1
 8016982:	9304      	str	r3, [sp, #16]
 8016984:	f898 1000 	ldrb.w	r1, [r8]
 8016988:	482a      	ldr	r0, [pc, #168]	; (8016a34 <_vfiprintf_r+0x220>)
 801698a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801698e:	2206      	movs	r2, #6
 8016990:	f108 0701 	add.w	r7, r8, #1
 8016994:	f7e9 fcac 	bl	80002f0 <memchr>
 8016998:	2800      	cmp	r0, #0
 801699a:	d037      	beq.n	8016a0c <_vfiprintf_r+0x1f8>
 801699c:	4b26      	ldr	r3, [pc, #152]	; (8016a38 <_vfiprintf_r+0x224>)
 801699e:	bb1b      	cbnz	r3, 80169e8 <_vfiprintf_r+0x1d4>
 80169a0:	9b03      	ldr	r3, [sp, #12]
 80169a2:	3307      	adds	r3, #7
 80169a4:	f023 0307 	bic.w	r3, r3, #7
 80169a8:	3308      	adds	r3, #8
 80169aa:	9303      	str	r3, [sp, #12]
 80169ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80169ae:	444b      	add	r3, r9
 80169b0:	9309      	str	r3, [sp, #36]	; 0x24
 80169b2:	e750      	b.n	8016856 <_vfiprintf_r+0x42>
 80169b4:	fb05 3202 	mla	r2, r5, r2, r3
 80169b8:	2001      	movs	r0, #1
 80169ba:	4688      	mov	r8, r1
 80169bc:	e78a      	b.n	80168d4 <_vfiprintf_r+0xc0>
 80169be:	2300      	movs	r3, #0
 80169c0:	f108 0801 	add.w	r8, r8, #1
 80169c4:	9305      	str	r3, [sp, #20]
 80169c6:	4619      	mov	r1, r3
 80169c8:	250a      	movs	r5, #10
 80169ca:	4640      	mov	r0, r8
 80169cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80169d0:	3a30      	subs	r2, #48	; 0x30
 80169d2:	2a09      	cmp	r2, #9
 80169d4:	d903      	bls.n	80169de <_vfiprintf_r+0x1ca>
 80169d6:	2b00      	cmp	r3, #0
 80169d8:	d0c3      	beq.n	8016962 <_vfiprintf_r+0x14e>
 80169da:	9105      	str	r1, [sp, #20]
 80169dc:	e7c1      	b.n	8016962 <_vfiprintf_r+0x14e>
 80169de:	fb05 2101 	mla	r1, r5, r1, r2
 80169e2:	2301      	movs	r3, #1
 80169e4:	4680      	mov	r8, r0
 80169e6:	e7f0      	b.n	80169ca <_vfiprintf_r+0x1b6>
 80169e8:	ab03      	add	r3, sp, #12
 80169ea:	9300      	str	r3, [sp, #0]
 80169ec:	4622      	mov	r2, r4
 80169ee:	4b13      	ldr	r3, [pc, #76]	; (8016a3c <_vfiprintf_r+0x228>)
 80169f0:	a904      	add	r1, sp, #16
 80169f2:	4630      	mov	r0, r6
 80169f4:	f3af 8000 	nop.w
 80169f8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80169fc:	4681      	mov	r9, r0
 80169fe:	d1d5      	bne.n	80169ac <_vfiprintf_r+0x198>
 8016a00:	89a3      	ldrh	r3, [r4, #12]
 8016a02:	065b      	lsls	r3, r3, #25
 8016a04:	f53f af7e 	bmi.w	8016904 <_vfiprintf_r+0xf0>
 8016a08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016a0a:	e77d      	b.n	8016908 <_vfiprintf_r+0xf4>
 8016a0c:	ab03      	add	r3, sp, #12
 8016a0e:	9300      	str	r3, [sp, #0]
 8016a10:	4622      	mov	r2, r4
 8016a12:	4b0a      	ldr	r3, [pc, #40]	; (8016a3c <_vfiprintf_r+0x228>)
 8016a14:	a904      	add	r1, sp, #16
 8016a16:	4630      	mov	r0, r6
 8016a18:	f000 f888 	bl	8016b2c <_printf_i>
 8016a1c:	e7ec      	b.n	80169f8 <_vfiprintf_r+0x1e4>
 8016a1e:	bf00      	nop
 8016a20:	080172e4 	.word	0x080172e4
 8016a24:	08017324 	.word	0x08017324
 8016a28:	08017304 	.word	0x08017304
 8016a2c:	080172c4 	.word	0x080172c4
 8016a30:	0801732a 	.word	0x0801732a
 8016a34:	0801732e 	.word	0x0801732e
 8016a38:	00000000 	.word	0x00000000
 8016a3c:	080167ef 	.word	0x080167ef

08016a40 <_printf_common>:
 8016a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016a44:	4691      	mov	r9, r2
 8016a46:	461f      	mov	r7, r3
 8016a48:	688a      	ldr	r2, [r1, #8]
 8016a4a:	690b      	ldr	r3, [r1, #16]
 8016a4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016a50:	4293      	cmp	r3, r2
 8016a52:	bfb8      	it	lt
 8016a54:	4613      	movlt	r3, r2
 8016a56:	f8c9 3000 	str.w	r3, [r9]
 8016a5a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016a5e:	4606      	mov	r6, r0
 8016a60:	460c      	mov	r4, r1
 8016a62:	b112      	cbz	r2, 8016a6a <_printf_common+0x2a>
 8016a64:	3301      	adds	r3, #1
 8016a66:	f8c9 3000 	str.w	r3, [r9]
 8016a6a:	6823      	ldr	r3, [r4, #0]
 8016a6c:	0699      	lsls	r1, r3, #26
 8016a6e:	bf42      	ittt	mi
 8016a70:	f8d9 3000 	ldrmi.w	r3, [r9]
 8016a74:	3302      	addmi	r3, #2
 8016a76:	f8c9 3000 	strmi.w	r3, [r9]
 8016a7a:	6825      	ldr	r5, [r4, #0]
 8016a7c:	f015 0506 	ands.w	r5, r5, #6
 8016a80:	d107      	bne.n	8016a92 <_printf_common+0x52>
 8016a82:	f104 0a19 	add.w	sl, r4, #25
 8016a86:	68e3      	ldr	r3, [r4, #12]
 8016a88:	f8d9 2000 	ldr.w	r2, [r9]
 8016a8c:	1a9b      	subs	r3, r3, r2
 8016a8e:	42ab      	cmp	r3, r5
 8016a90:	dc28      	bgt.n	8016ae4 <_printf_common+0xa4>
 8016a92:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8016a96:	6822      	ldr	r2, [r4, #0]
 8016a98:	3300      	adds	r3, #0
 8016a9a:	bf18      	it	ne
 8016a9c:	2301      	movne	r3, #1
 8016a9e:	0692      	lsls	r2, r2, #26
 8016aa0:	d42d      	bmi.n	8016afe <_printf_common+0xbe>
 8016aa2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016aa6:	4639      	mov	r1, r7
 8016aa8:	4630      	mov	r0, r6
 8016aaa:	47c0      	blx	r8
 8016aac:	3001      	adds	r0, #1
 8016aae:	d020      	beq.n	8016af2 <_printf_common+0xb2>
 8016ab0:	6823      	ldr	r3, [r4, #0]
 8016ab2:	68e5      	ldr	r5, [r4, #12]
 8016ab4:	f8d9 2000 	ldr.w	r2, [r9]
 8016ab8:	f003 0306 	and.w	r3, r3, #6
 8016abc:	2b04      	cmp	r3, #4
 8016abe:	bf08      	it	eq
 8016ac0:	1aad      	subeq	r5, r5, r2
 8016ac2:	68a3      	ldr	r3, [r4, #8]
 8016ac4:	6922      	ldr	r2, [r4, #16]
 8016ac6:	bf0c      	ite	eq
 8016ac8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016acc:	2500      	movne	r5, #0
 8016ace:	4293      	cmp	r3, r2
 8016ad0:	bfc4      	itt	gt
 8016ad2:	1a9b      	subgt	r3, r3, r2
 8016ad4:	18ed      	addgt	r5, r5, r3
 8016ad6:	f04f 0900 	mov.w	r9, #0
 8016ada:	341a      	adds	r4, #26
 8016adc:	454d      	cmp	r5, r9
 8016ade:	d11a      	bne.n	8016b16 <_printf_common+0xd6>
 8016ae0:	2000      	movs	r0, #0
 8016ae2:	e008      	b.n	8016af6 <_printf_common+0xb6>
 8016ae4:	2301      	movs	r3, #1
 8016ae6:	4652      	mov	r2, sl
 8016ae8:	4639      	mov	r1, r7
 8016aea:	4630      	mov	r0, r6
 8016aec:	47c0      	blx	r8
 8016aee:	3001      	adds	r0, #1
 8016af0:	d103      	bne.n	8016afa <_printf_common+0xba>
 8016af2:	f04f 30ff 	mov.w	r0, #4294967295
 8016af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016afa:	3501      	adds	r5, #1
 8016afc:	e7c3      	b.n	8016a86 <_printf_common+0x46>
 8016afe:	18e1      	adds	r1, r4, r3
 8016b00:	1c5a      	adds	r2, r3, #1
 8016b02:	2030      	movs	r0, #48	; 0x30
 8016b04:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016b08:	4422      	add	r2, r4
 8016b0a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016b0e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016b12:	3302      	adds	r3, #2
 8016b14:	e7c5      	b.n	8016aa2 <_printf_common+0x62>
 8016b16:	2301      	movs	r3, #1
 8016b18:	4622      	mov	r2, r4
 8016b1a:	4639      	mov	r1, r7
 8016b1c:	4630      	mov	r0, r6
 8016b1e:	47c0      	blx	r8
 8016b20:	3001      	adds	r0, #1
 8016b22:	d0e6      	beq.n	8016af2 <_printf_common+0xb2>
 8016b24:	f109 0901 	add.w	r9, r9, #1
 8016b28:	e7d8      	b.n	8016adc <_printf_common+0x9c>
	...

08016b2c <_printf_i>:
 8016b2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016b30:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8016b34:	460c      	mov	r4, r1
 8016b36:	7e09      	ldrb	r1, [r1, #24]
 8016b38:	b085      	sub	sp, #20
 8016b3a:	296e      	cmp	r1, #110	; 0x6e
 8016b3c:	4617      	mov	r7, r2
 8016b3e:	4606      	mov	r6, r0
 8016b40:	4698      	mov	r8, r3
 8016b42:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016b44:	f000 80b3 	beq.w	8016cae <_printf_i+0x182>
 8016b48:	d822      	bhi.n	8016b90 <_printf_i+0x64>
 8016b4a:	2963      	cmp	r1, #99	; 0x63
 8016b4c:	d036      	beq.n	8016bbc <_printf_i+0x90>
 8016b4e:	d80a      	bhi.n	8016b66 <_printf_i+0x3a>
 8016b50:	2900      	cmp	r1, #0
 8016b52:	f000 80b9 	beq.w	8016cc8 <_printf_i+0x19c>
 8016b56:	2958      	cmp	r1, #88	; 0x58
 8016b58:	f000 8083 	beq.w	8016c62 <_printf_i+0x136>
 8016b5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016b60:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8016b64:	e032      	b.n	8016bcc <_printf_i+0xa0>
 8016b66:	2964      	cmp	r1, #100	; 0x64
 8016b68:	d001      	beq.n	8016b6e <_printf_i+0x42>
 8016b6a:	2969      	cmp	r1, #105	; 0x69
 8016b6c:	d1f6      	bne.n	8016b5c <_printf_i+0x30>
 8016b6e:	6820      	ldr	r0, [r4, #0]
 8016b70:	6813      	ldr	r3, [r2, #0]
 8016b72:	0605      	lsls	r5, r0, #24
 8016b74:	f103 0104 	add.w	r1, r3, #4
 8016b78:	d52a      	bpl.n	8016bd0 <_printf_i+0xa4>
 8016b7a:	681b      	ldr	r3, [r3, #0]
 8016b7c:	6011      	str	r1, [r2, #0]
 8016b7e:	2b00      	cmp	r3, #0
 8016b80:	da03      	bge.n	8016b8a <_printf_i+0x5e>
 8016b82:	222d      	movs	r2, #45	; 0x2d
 8016b84:	425b      	negs	r3, r3
 8016b86:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8016b8a:	486f      	ldr	r0, [pc, #444]	; (8016d48 <_printf_i+0x21c>)
 8016b8c:	220a      	movs	r2, #10
 8016b8e:	e039      	b.n	8016c04 <_printf_i+0xd8>
 8016b90:	2973      	cmp	r1, #115	; 0x73
 8016b92:	f000 809d 	beq.w	8016cd0 <_printf_i+0x1a4>
 8016b96:	d808      	bhi.n	8016baa <_printf_i+0x7e>
 8016b98:	296f      	cmp	r1, #111	; 0x6f
 8016b9a:	d020      	beq.n	8016bde <_printf_i+0xb2>
 8016b9c:	2970      	cmp	r1, #112	; 0x70
 8016b9e:	d1dd      	bne.n	8016b5c <_printf_i+0x30>
 8016ba0:	6823      	ldr	r3, [r4, #0]
 8016ba2:	f043 0320 	orr.w	r3, r3, #32
 8016ba6:	6023      	str	r3, [r4, #0]
 8016ba8:	e003      	b.n	8016bb2 <_printf_i+0x86>
 8016baa:	2975      	cmp	r1, #117	; 0x75
 8016bac:	d017      	beq.n	8016bde <_printf_i+0xb2>
 8016bae:	2978      	cmp	r1, #120	; 0x78
 8016bb0:	d1d4      	bne.n	8016b5c <_printf_i+0x30>
 8016bb2:	2378      	movs	r3, #120	; 0x78
 8016bb4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016bb8:	4864      	ldr	r0, [pc, #400]	; (8016d4c <_printf_i+0x220>)
 8016bba:	e055      	b.n	8016c68 <_printf_i+0x13c>
 8016bbc:	6813      	ldr	r3, [r2, #0]
 8016bbe:	1d19      	adds	r1, r3, #4
 8016bc0:	681b      	ldr	r3, [r3, #0]
 8016bc2:	6011      	str	r1, [r2, #0]
 8016bc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016bc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016bcc:	2301      	movs	r3, #1
 8016bce:	e08c      	b.n	8016cea <_printf_i+0x1be>
 8016bd0:	681b      	ldr	r3, [r3, #0]
 8016bd2:	6011      	str	r1, [r2, #0]
 8016bd4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8016bd8:	bf18      	it	ne
 8016bda:	b21b      	sxthne	r3, r3
 8016bdc:	e7cf      	b.n	8016b7e <_printf_i+0x52>
 8016bde:	6813      	ldr	r3, [r2, #0]
 8016be0:	6825      	ldr	r5, [r4, #0]
 8016be2:	1d18      	adds	r0, r3, #4
 8016be4:	6010      	str	r0, [r2, #0]
 8016be6:	0628      	lsls	r0, r5, #24
 8016be8:	d501      	bpl.n	8016bee <_printf_i+0xc2>
 8016bea:	681b      	ldr	r3, [r3, #0]
 8016bec:	e002      	b.n	8016bf4 <_printf_i+0xc8>
 8016bee:	0668      	lsls	r0, r5, #25
 8016bf0:	d5fb      	bpl.n	8016bea <_printf_i+0xbe>
 8016bf2:	881b      	ldrh	r3, [r3, #0]
 8016bf4:	4854      	ldr	r0, [pc, #336]	; (8016d48 <_printf_i+0x21c>)
 8016bf6:	296f      	cmp	r1, #111	; 0x6f
 8016bf8:	bf14      	ite	ne
 8016bfa:	220a      	movne	r2, #10
 8016bfc:	2208      	moveq	r2, #8
 8016bfe:	2100      	movs	r1, #0
 8016c00:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016c04:	6865      	ldr	r5, [r4, #4]
 8016c06:	60a5      	str	r5, [r4, #8]
 8016c08:	2d00      	cmp	r5, #0
 8016c0a:	f2c0 8095 	blt.w	8016d38 <_printf_i+0x20c>
 8016c0e:	6821      	ldr	r1, [r4, #0]
 8016c10:	f021 0104 	bic.w	r1, r1, #4
 8016c14:	6021      	str	r1, [r4, #0]
 8016c16:	2b00      	cmp	r3, #0
 8016c18:	d13d      	bne.n	8016c96 <_printf_i+0x16a>
 8016c1a:	2d00      	cmp	r5, #0
 8016c1c:	f040 808e 	bne.w	8016d3c <_printf_i+0x210>
 8016c20:	4665      	mov	r5, ip
 8016c22:	2a08      	cmp	r2, #8
 8016c24:	d10b      	bne.n	8016c3e <_printf_i+0x112>
 8016c26:	6823      	ldr	r3, [r4, #0]
 8016c28:	07db      	lsls	r3, r3, #31
 8016c2a:	d508      	bpl.n	8016c3e <_printf_i+0x112>
 8016c2c:	6923      	ldr	r3, [r4, #16]
 8016c2e:	6862      	ldr	r2, [r4, #4]
 8016c30:	429a      	cmp	r2, r3
 8016c32:	bfde      	ittt	le
 8016c34:	2330      	movle	r3, #48	; 0x30
 8016c36:	f805 3c01 	strble.w	r3, [r5, #-1]
 8016c3a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8016c3e:	ebac 0305 	sub.w	r3, ip, r5
 8016c42:	6123      	str	r3, [r4, #16]
 8016c44:	f8cd 8000 	str.w	r8, [sp]
 8016c48:	463b      	mov	r3, r7
 8016c4a:	aa03      	add	r2, sp, #12
 8016c4c:	4621      	mov	r1, r4
 8016c4e:	4630      	mov	r0, r6
 8016c50:	f7ff fef6 	bl	8016a40 <_printf_common>
 8016c54:	3001      	adds	r0, #1
 8016c56:	d14d      	bne.n	8016cf4 <_printf_i+0x1c8>
 8016c58:	f04f 30ff 	mov.w	r0, #4294967295
 8016c5c:	b005      	add	sp, #20
 8016c5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016c62:	4839      	ldr	r0, [pc, #228]	; (8016d48 <_printf_i+0x21c>)
 8016c64:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8016c68:	6813      	ldr	r3, [r2, #0]
 8016c6a:	6821      	ldr	r1, [r4, #0]
 8016c6c:	1d1d      	adds	r5, r3, #4
 8016c6e:	681b      	ldr	r3, [r3, #0]
 8016c70:	6015      	str	r5, [r2, #0]
 8016c72:	060a      	lsls	r2, r1, #24
 8016c74:	d50b      	bpl.n	8016c8e <_printf_i+0x162>
 8016c76:	07ca      	lsls	r2, r1, #31
 8016c78:	bf44      	itt	mi
 8016c7a:	f041 0120 	orrmi.w	r1, r1, #32
 8016c7e:	6021      	strmi	r1, [r4, #0]
 8016c80:	b91b      	cbnz	r3, 8016c8a <_printf_i+0x15e>
 8016c82:	6822      	ldr	r2, [r4, #0]
 8016c84:	f022 0220 	bic.w	r2, r2, #32
 8016c88:	6022      	str	r2, [r4, #0]
 8016c8a:	2210      	movs	r2, #16
 8016c8c:	e7b7      	b.n	8016bfe <_printf_i+0xd2>
 8016c8e:	064d      	lsls	r5, r1, #25
 8016c90:	bf48      	it	mi
 8016c92:	b29b      	uxthmi	r3, r3
 8016c94:	e7ef      	b.n	8016c76 <_printf_i+0x14a>
 8016c96:	4665      	mov	r5, ip
 8016c98:	fbb3 f1f2 	udiv	r1, r3, r2
 8016c9c:	fb02 3311 	mls	r3, r2, r1, r3
 8016ca0:	5cc3      	ldrb	r3, [r0, r3]
 8016ca2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8016ca6:	460b      	mov	r3, r1
 8016ca8:	2900      	cmp	r1, #0
 8016caa:	d1f5      	bne.n	8016c98 <_printf_i+0x16c>
 8016cac:	e7b9      	b.n	8016c22 <_printf_i+0xf6>
 8016cae:	6813      	ldr	r3, [r2, #0]
 8016cb0:	6825      	ldr	r5, [r4, #0]
 8016cb2:	6961      	ldr	r1, [r4, #20]
 8016cb4:	1d18      	adds	r0, r3, #4
 8016cb6:	6010      	str	r0, [r2, #0]
 8016cb8:	0628      	lsls	r0, r5, #24
 8016cba:	681b      	ldr	r3, [r3, #0]
 8016cbc:	d501      	bpl.n	8016cc2 <_printf_i+0x196>
 8016cbe:	6019      	str	r1, [r3, #0]
 8016cc0:	e002      	b.n	8016cc8 <_printf_i+0x19c>
 8016cc2:	066a      	lsls	r2, r5, #25
 8016cc4:	d5fb      	bpl.n	8016cbe <_printf_i+0x192>
 8016cc6:	8019      	strh	r1, [r3, #0]
 8016cc8:	2300      	movs	r3, #0
 8016cca:	6123      	str	r3, [r4, #16]
 8016ccc:	4665      	mov	r5, ip
 8016cce:	e7b9      	b.n	8016c44 <_printf_i+0x118>
 8016cd0:	6813      	ldr	r3, [r2, #0]
 8016cd2:	1d19      	adds	r1, r3, #4
 8016cd4:	6011      	str	r1, [r2, #0]
 8016cd6:	681d      	ldr	r5, [r3, #0]
 8016cd8:	6862      	ldr	r2, [r4, #4]
 8016cda:	2100      	movs	r1, #0
 8016cdc:	4628      	mov	r0, r5
 8016cde:	f7e9 fb07 	bl	80002f0 <memchr>
 8016ce2:	b108      	cbz	r0, 8016ce8 <_printf_i+0x1bc>
 8016ce4:	1b40      	subs	r0, r0, r5
 8016ce6:	6060      	str	r0, [r4, #4]
 8016ce8:	6863      	ldr	r3, [r4, #4]
 8016cea:	6123      	str	r3, [r4, #16]
 8016cec:	2300      	movs	r3, #0
 8016cee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016cf2:	e7a7      	b.n	8016c44 <_printf_i+0x118>
 8016cf4:	6923      	ldr	r3, [r4, #16]
 8016cf6:	462a      	mov	r2, r5
 8016cf8:	4639      	mov	r1, r7
 8016cfa:	4630      	mov	r0, r6
 8016cfc:	47c0      	blx	r8
 8016cfe:	3001      	adds	r0, #1
 8016d00:	d0aa      	beq.n	8016c58 <_printf_i+0x12c>
 8016d02:	6823      	ldr	r3, [r4, #0]
 8016d04:	079b      	lsls	r3, r3, #30
 8016d06:	d413      	bmi.n	8016d30 <_printf_i+0x204>
 8016d08:	68e0      	ldr	r0, [r4, #12]
 8016d0a:	9b03      	ldr	r3, [sp, #12]
 8016d0c:	4298      	cmp	r0, r3
 8016d0e:	bfb8      	it	lt
 8016d10:	4618      	movlt	r0, r3
 8016d12:	e7a3      	b.n	8016c5c <_printf_i+0x130>
 8016d14:	2301      	movs	r3, #1
 8016d16:	464a      	mov	r2, r9
 8016d18:	4639      	mov	r1, r7
 8016d1a:	4630      	mov	r0, r6
 8016d1c:	47c0      	blx	r8
 8016d1e:	3001      	adds	r0, #1
 8016d20:	d09a      	beq.n	8016c58 <_printf_i+0x12c>
 8016d22:	3501      	adds	r5, #1
 8016d24:	68e3      	ldr	r3, [r4, #12]
 8016d26:	9a03      	ldr	r2, [sp, #12]
 8016d28:	1a9b      	subs	r3, r3, r2
 8016d2a:	42ab      	cmp	r3, r5
 8016d2c:	dcf2      	bgt.n	8016d14 <_printf_i+0x1e8>
 8016d2e:	e7eb      	b.n	8016d08 <_printf_i+0x1dc>
 8016d30:	2500      	movs	r5, #0
 8016d32:	f104 0919 	add.w	r9, r4, #25
 8016d36:	e7f5      	b.n	8016d24 <_printf_i+0x1f8>
 8016d38:	2b00      	cmp	r3, #0
 8016d3a:	d1ac      	bne.n	8016c96 <_printf_i+0x16a>
 8016d3c:	7803      	ldrb	r3, [r0, #0]
 8016d3e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016d42:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016d46:	e76c      	b.n	8016c22 <_printf_i+0xf6>
 8016d48:	08017335 	.word	0x08017335
 8016d4c:	08017346 	.word	0x08017346

08016d50 <__sread>:
 8016d50:	b510      	push	{r4, lr}
 8016d52:	460c      	mov	r4, r1
 8016d54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016d58:	f000 f8d4 	bl	8016f04 <_read_r>
 8016d5c:	2800      	cmp	r0, #0
 8016d5e:	bfab      	itete	ge
 8016d60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016d62:	89a3      	ldrhlt	r3, [r4, #12]
 8016d64:	181b      	addge	r3, r3, r0
 8016d66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016d6a:	bfac      	ite	ge
 8016d6c:	6563      	strge	r3, [r4, #84]	; 0x54
 8016d6e:	81a3      	strhlt	r3, [r4, #12]
 8016d70:	bd10      	pop	{r4, pc}

08016d72 <__swrite>:
 8016d72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016d76:	461f      	mov	r7, r3
 8016d78:	898b      	ldrh	r3, [r1, #12]
 8016d7a:	05db      	lsls	r3, r3, #23
 8016d7c:	4605      	mov	r5, r0
 8016d7e:	460c      	mov	r4, r1
 8016d80:	4616      	mov	r6, r2
 8016d82:	d505      	bpl.n	8016d90 <__swrite+0x1e>
 8016d84:	2302      	movs	r3, #2
 8016d86:	2200      	movs	r2, #0
 8016d88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016d8c:	f000 f868 	bl	8016e60 <_lseek_r>
 8016d90:	89a3      	ldrh	r3, [r4, #12]
 8016d92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016d96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016d9a:	81a3      	strh	r3, [r4, #12]
 8016d9c:	4632      	mov	r2, r6
 8016d9e:	463b      	mov	r3, r7
 8016da0:	4628      	mov	r0, r5
 8016da2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016da6:	f000 b817 	b.w	8016dd8 <_write_r>

08016daa <__sseek>:
 8016daa:	b510      	push	{r4, lr}
 8016dac:	460c      	mov	r4, r1
 8016dae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016db2:	f000 f855 	bl	8016e60 <_lseek_r>
 8016db6:	1c43      	adds	r3, r0, #1
 8016db8:	89a3      	ldrh	r3, [r4, #12]
 8016dba:	bf15      	itete	ne
 8016dbc:	6560      	strne	r0, [r4, #84]	; 0x54
 8016dbe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016dc2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016dc6:	81a3      	strheq	r3, [r4, #12]
 8016dc8:	bf18      	it	ne
 8016dca:	81a3      	strhne	r3, [r4, #12]
 8016dcc:	bd10      	pop	{r4, pc}

08016dce <__sclose>:
 8016dce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016dd2:	f000 b813 	b.w	8016dfc <_close_r>
	...

08016dd8 <_write_r>:
 8016dd8:	b538      	push	{r3, r4, r5, lr}
 8016dda:	4c07      	ldr	r4, [pc, #28]	; (8016df8 <_write_r+0x20>)
 8016ddc:	4605      	mov	r5, r0
 8016dde:	4608      	mov	r0, r1
 8016de0:	4611      	mov	r1, r2
 8016de2:	2200      	movs	r2, #0
 8016de4:	6022      	str	r2, [r4, #0]
 8016de6:	461a      	mov	r2, r3
 8016de8:	f7e9 fd4d 	bl	8000886 <_write>
 8016dec:	1c43      	adds	r3, r0, #1
 8016dee:	d102      	bne.n	8016df6 <_write_r+0x1e>
 8016df0:	6823      	ldr	r3, [r4, #0]
 8016df2:	b103      	cbz	r3, 8016df6 <_write_r+0x1e>
 8016df4:	602b      	str	r3, [r5, #0]
 8016df6:	bd38      	pop	{r3, r4, r5, pc}
 8016df8:	24041b40 	.word	0x24041b40

08016dfc <_close_r>:
 8016dfc:	b538      	push	{r3, r4, r5, lr}
 8016dfe:	4c06      	ldr	r4, [pc, #24]	; (8016e18 <_close_r+0x1c>)
 8016e00:	2300      	movs	r3, #0
 8016e02:	4605      	mov	r5, r0
 8016e04:	4608      	mov	r0, r1
 8016e06:	6023      	str	r3, [r4, #0]
 8016e08:	f7ea fed5 	bl	8001bb6 <_close>
 8016e0c:	1c43      	adds	r3, r0, #1
 8016e0e:	d102      	bne.n	8016e16 <_close_r+0x1a>
 8016e10:	6823      	ldr	r3, [r4, #0]
 8016e12:	b103      	cbz	r3, 8016e16 <_close_r+0x1a>
 8016e14:	602b      	str	r3, [r5, #0]
 8016e16:	bd38      	pop	{r3, r4, r5, pc}
 8016e18:	24041b40 	.word	0x24041b40

08016e1c <_fstat_r>:
 8016e1c:	b538      	push	{r3, r4, r5, lr}
 8016e1e:	4c07      	ldr	r4, [pc, #28]	; (8016e3c <_fstat_r+0x20>)
 8016e20:	2300      	movs	r3, #0
 8016e22:	4605      	mov	r5, r0
 8016e24:	4608      	mov	r0, r1
 8016e26:	4611      	mov	r1, r2
 8016e28:	6023      	str	r3, [r4, #0]
 8016e2a:	f7ea fed0 	bl	8001bce <_fstat>
 8016e2e:	1c43      	adds	r3, r0, #1
 8016e30:	d102      	bne.n	8016e38 <_fstat_r+0x1c>
 8016e32:	6823      	ldr	r3, [r4, #0]
 8016e34:	b103      	cbz	r3, 8016e38 <_fstat_r+0x1c>
 8016e36:	602b      	str	r3, [r5, #0]
 8016e38:	bd38      	pop	{r3, r4, r5, pc}
 8016e3a:	bf00      	nop
 8016e3c:	24041b40 	.word	0x24041b40

08016e40 <_isatty_r>:
 8016e40:	b538      	push	{r3, r4, r5, lr}
 8016e42:	4c06      	ldr	r4, [pc, #24]	; (8016e5c <_isatty_r+0x1c>)
 8016e44:	2300      	movs	r3, #0
 8016e46:	4605      	mov	r5, r0
 8016e48:	4608      	mov	r0, r1
 8016e4a:	6023      	str	r3, [r4, #0]
 8016e4c:	f7ea fecf 	bl	8001bee <_isatty>
 8016e50:	1c43      	adds	r3, r0, #1
 8016e52:	d102      	bne.n	8016e5a <_isatty_r+0x1a>
 8016e54:	6823      	ldr	r3, [r4, #0]
 8016e56:	b103      	cbz	r3, 8016e5a <_isatty_r+0x1a>
 8016e58:	602b      	str	r3, [r5, #0]
 8016e5a:	bd38      	pop	{r3, r4, r5, pc}
 8016e5c:	24041b40 	.word	0x24041b40

08016e60 <_lseek_r>:
 8016e60:	b538      	push	{r3, r4, r5, lr}
 8016e62:	4c07      	ldr	r4, [pc, #28]	; (8016e80 <_lseek_r+0x20>)
 8016e64:	4605      	mov	r5, r0
 8016e66:	4608      	mov	r0, r1
 8016e68:	4611      	mov	r1, r2
 8016e6a:	2200      	movs	r2, #0
 8016e6c:	6022      	str	r2, [r4, #0]
 8016e6e:	461a      	mov	r2, r3
 8016e70:	f7ea fec8 	bl	8001c04 <_lseek>
 8016e74:	1c43      	adds	r3, r0, #1
 8016e76:	d102      	bne.n	8016e7e <_lseek_r+0x1e>
 8016e78:	6823      	ldr	r3, [r4, #0]
 8016e7a:	b103      	cbz	r3, 8016e7e <_lseek_r+0x1e>
 8016e7c:	602b      	str	r3, [r5, #0]
 8016e7e:	bd38      	pop	{r3, r4, r5, pc}
 8016e80:	24041b40 	.word	0x24041b40

08016e84 <memmove>:
 8016e84:	4288      	cmp	r0, r1
 8016e86:	b510      	push	{r4, lr}
 8016e88:	eb01 0302 	add.w	r3, r1, r2
 8016e8c:	d807      	bhi.n	8016e9e <memmove+0x1a>
 8016e8e:	1e42      	subs	r2, r0, #1
 8016e90:	4299      	cmp	r1, r3
 8016e92:	d00a      	beq.n	8016eaa <memmove+0x26>
 8016e94:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016e98:	f802 4f01 	strb.w	r4, [r2, #1]!
 8016e9c:	e7f8      	b.n	8016e90 <memmove+0xc>
 8016e9e:	4283      	cmp	r3, r0
 8016ea0:	d9f5      	bls.n	8016e8e <memmove+0xa>
 8016ea2:	1881      	adds	r1, r0, r2
 8016ea4:	1ad2      	subs	r2, r2, r3
 8016ea6:	42d3      	cmn	r3, r2
 8016ea8:	d100      	bne.n	8016eac <memmove+0x28>
 8016eaa:	bd10      	pop	{r4, pc}
 8016eac:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016eb0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8016eb4:	e7f7      	b.n	8016ea6 <memmove+0x22>

08016eb6 <_realloc_r>:
 8016eb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016eb8:	4607      	mov	r7, r0
 8016eba:	4614      	mov	r4, r2
 8016ebc:	460e      	mov	r6, r1
 8016ebe:	b921      	cbnz	r1, 8016eca <_realloc_r+0x14>
 8016ec0:	4611      	mov	r1, r2
 8016ec2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8016ec6:	f7fe bf4f 	b.w	8015d68 <_malloc_r>
 8016eca:	b922      	cbnz	r2, 8016ed6 <_realloc_r+0x20>
 8016ecc:	f7fe fefe 	bl	8015ccc <_free_r>
 8016ed0:	4625      	mov	r5, r4
 8016ed2:	4628      	mov	r0, r5
 8016ed4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016ed6:	f000 f827 	bl	8016f28 <_malloc_usable_size_r>
 8016eda:	42a0      	cmp	r0, r4
 8016edc:	d20f      	bcs.n	8016efe <_realloc_r+0x48>
 8016ede:	4621      	mov	r1, r4
 8016ee0:	4638      	mov	r0, r7
 8016ee2:	f7fe ff41 	bl	8015d68 <_malloc_r>
 8016ee6:	4605      	mov	r5, r0
 8016ee8:	2800      	cmp	r0, #0
 8016eea:	d0f2      	beq.n	8016ed2 <_realloc_r+0x1c>
 8016eec:	4631      	mov	r1, r6
 8016eee:	4622      	mov	r2, r4
 8016ef0:	f7fe fed8 	bl	8015ca4 <memcpy>
 8016ef4:	4631      	mov	r1, r6
 8016ef6:	4638      	mov	r0, r7
 8016ef8:	f7fe fee8 	bl	8015ccc <_free_r>
 8016efc:	e7e9      	b.n	8016ed2 <_realloc_r+0x1c>
 8016efe:	4635      	mov	r5, r6
 8016f00:	e7e7      	b.n	8016ed2 <_realloc_r+0x1c>
	...

08016f04 <_read_r>:
 8016f04:	b538      	push	{r3, r4, r5, lr}
 8016f06:	4c07      	ldr	r4, [pc, #28]	; (8016f24 <_read_r+0x20>)
 8016f08:	4605      	mov	r5, r0
 8016f0a:	4608      	mov	r0, r1
 8016f0c:	4611      	mov	r1, r2
 8016f0e:	2200      	movs	r2, #0
 8016f10:	6022      	str	r2, [r4, #0]
 8016f12:	461a      	mov	r2, r3
 8016f14:	f7ea fe32 	bl	8001b7c <_read>
 8016f18:	1c43      	adds	r3, r0, #1
 8016f1a:	d102      	bne.n	8016f22 <_read_r+0x1e>
 8016f1c:	6823      	ldr	r3, [r4, #0]
 8016f1e:	b103      	cbz	r3, 8016f22 <_read_r+0x1e>
 8016f20:	602b      	str	r3, [r5, #0]
 8016f22:	bd38      	pop	{r3, r4, r5, pc}
 8016f24:	24041b40 	.word	0x24041b40

08016f28 <_malloc_usable_size_r>:
 8016f28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016f2c:	1f18      	subs	r0, r3, #4
 8016f2e:	2b00      	cmp	r3, #0
 8016f30:	bfbc      	itt	lt
 8016f32:	580b      	ldrlt	r3, [r1, r0]
 8016f34:	18c0      	addlt	r0, r0, r3
 8016f36:	4770      	bx	lr

08016f38 <_init>:
 8016f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f3a:	bf00      	nop
 8016f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016f3e:	bc08      	pop	{r3}
 8016f40:	469e      	mov	lr, r3
 8016f42:	4770      	bx	lr

08016f44 <_fini>:
 8016f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f46:	bf00      	nop
 8016f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016f4a:	bc08      	pop	{r3}
 8016f4c:	469e      	mov	lr, r3
 8016f4e:	4770      	bx	lr

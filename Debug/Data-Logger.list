
Data-Logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001943c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000950  080196dc  080196dc  000296dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a02c  0801a02c  000301d8  2**0
                  CONTENTS
  4 .ARM          00000008  0801a02c  0801a02c  0002a02c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a034  0801a034  000301d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a034  0801a034  0002a034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a038  0801a038  0002a038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  24000000  0801a03c  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000022b0  240001d8  0801a214  000301d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  24002488  0801a214  00032488  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00049dfb  00000000  00000000  00030206  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007b2e  00000000  00000000  0007a001  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002420  00000000  00000000  00081b30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002128  00000000  00000000  00083f50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000430f0  00000000  00000000  00086078  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002801d  00000000  00000000  000c9168  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001785ee  00000000  00000000  000f1185  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00269773  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009f58  00000000  00000000  002697f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001d8 	.word	0x240001d8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080196c4 	.word	0x080196c4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001dc 	.word	0x240001dc
 80002dc:	080196c4 	.word	0x080196c4

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <FDCAN_Config>:
#include <myprintf.h>

int FDCAN_Flag = 0;
int CAN_Flag = 0;

void FDCAN_Config(FDCAN_HandleTypeDef *hfdcan){
 8000690:	b580      	push	{r7, lr}
 8000692:	b08c      	sub	sp, #48	; 0x30
 8000694:	af02      	add	r7, sp, #8
 8000696:	6078      	str	r0, [r7, #4]
	FDCAN_FilterTypeDef sFilterConfig;

	  /* Configure Rx filter */
	  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000698:	2300      	movs	r3, #0
 800069a:	60bb      	str	r3, [r7, #8]
	  sFilterConfig.FilterIndex = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	60fb      	str	r3, [r7, #12]
	  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80006a0:	2302      	movs	r3, #2
 80006a2:	613b      	str	r3, [r7, #16]
	  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80006a4:	2301      	movs	r3, #1
 80006a6:	617b      	str	r3, [r7, #20]
	  sFilterConfig.FilterID1 = 0x321;
 80006a8:	f240 3321 	movw	r3, #801	; 0x321
 80006ac:	61bb      	str	r3, [r7, #24]
	  sFilterConfig.FilterID2 = 0x7FF;
 80006ae:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80006b2:	61fb      	str	r3, [r7, #28]
	  if (HAL_FDCAN_ConfigFilter(hfdcan, &sFilterConfig) == HAL_OK)
 80006b4:	f107 0308 	add.w	r3, r7, #8
 80006b8:	4619      	mov	r1, r3
 80006ba:	6878      	ldr	r0, [r7, #4]
 80006bc:	f005 fb66 	bl	8005d8c <HAL_FDCAN_ConfigFilter>
	  }

	  /* Configure global filter:
	     Filter all remote frames with STD and EXT ID
	     Reject non matching frames with STD ID and EXT ID */
	  if (HAL_FDCAN_ConfigGlobalFilter(hfdcan, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
 80006c0:	2300      	movs	r3, #0
 80006c2:	9300      	str	r3, [sp, #0]
 80006c4:	2300      	movs	r3, #0
 80006c6:	2202      	movs	r2, #2
 80006c8:	2102      	movs	r1, #2
 80006ca:	6878      	ldr	r0, [r7, #4]
 80006cc:	f005 fbd4 	bl	8005e78 <HAL_FDCAN_ConfigGlobalFilter>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <FDCAN_Config+0x4a>
	  {
	    Error_Handler();
 80006d6:	f002 fa6d 	bl	8002bb4 <Error_Handler>
	  }
	if (HAL_FDCAN_Start(hfdcan) != HAL_OK)
 80006da:	6878      	ldr	r0, [r7, #4]
 80006dc:	f005 fc1c 	bl	8005f18 <HAL_FDCAN_Start>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <FDCAN_Config+0x5a>
	  {
	    Error_Handler();
 80006e6:	f002 fa65 	bl	8002bb4 <Error_Handler>
	  }
	if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80006ea:	2200      	movs	r2, #0
 80006ec:	2101      	movs	r1, #1
 80006ee:	6878      	ldr	r0, [r7, #4]
 80006f0:	f005 fd9c 	bl	800622c <HAL_FDCAN_ActivateNotification>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <FDCAN_Config+0x6e>
	  {
	    /* Notification Error */
	    Error_Handler();
 80006fa:	f002 fa5b 	bl	8002bb4 <Error_Handler>
	  }
	HAL_FDCAN_EnableTxDelayCompensation(hfdcan);
 80006fe:	6878      	ldr	r0, [r7, #4]
 8000700:	f005 fbe7 	bl	8005ed2 <HAL_FDCAN_EnableTxDelayCompensation>

}
 8000704:	bf00      	nop
 8000706:	3728      	adds	r7, #40	; 0x28
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}

0800070c <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan1, uint32_t RxFifo0ITs)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	6039      	str	r1, [r7, #0]
	if (HAL_FDCAN_GetRxMessage(hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 8000716:	4b31      	ldr	r3, [pc, #196]	; (80007dc <HAL_FDCAN_RxFifo0Callback+0xd0>)
 8000718:	4a31      	ldr	r2, [pc, #196]	; (80007e0 <HAL_FDCAN_RxFifo0Callback+0xd4>)
 800071a:	2140      	movs	r1, #64	; 0x40
 800071c:	6878      	ldr	r0, [r7, #4]
 800071e:	f005 fc27 	bl	8005f70 <HAL_FDCAN_GetRxMessage>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d155      	bne.n	80007d4 <HAL_FDCAN_RxFifo0Callback+0xc8>
			      {
					uint32_t time = HAL_GetTick();
 8000728:	f002 ff2c 	bl	8003584 <HAL_GetTick>
 800072c:	60f8      	str	r0, [r7, #12]
					HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800072e:	2101      	movs	r1, #1
 8000730:	482c      	ldr	r0, [pc, #176]	; (80007e4 <HAL_FDCAN_RxFifo0Callback+0xd8>)
 8000732:	f006 fc66 	bl	8007002 <HAL_GPIO_TogglePin>
					printf("Packet Acquired!\n");
 8000736:	482c      	ldr	r0, [pc, #176]	; (80007e8 <HAL_FDCAN_RxFifo0Callback+0xdc>)
 8000738:	f017 ffaa 	bl	8018690 <puts>
					if(RxHeader.FDFormat == FDCAN_CLASSIC_CAN){
 800073c:	4b28      	ldr	r3, [pc, #160]	; (80007e0 <HAL_FDCAN_RxFifo0Callback+0xd4>)
 800073e:	699b      	ldr	r3, [r3, #24]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d121      	bne.n	8000788 <HAL_FDCAN_RxFifo0Callback+0x7c>
						CanFrame.id = RxHeader.Identifier;
 8000744:	4b26      	ldr	r3, [pc, #152]	; (80007e0 <HAL_FDCAN_RxFifo0Callback+0xd4>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a28      	ldr	r2, [pc, #160]	; (80007ec <HAL_FDCAN_RxFifo0Callback+0xe0>)
 800074a:	6013      	str	r3, [r2, #0]
						CanFrame.length = RxHeader.DataLength;
 800074c:	4b24      	ldr	r3, [pc, #144]	; (80007e0 <HAL_FDCAN_RxFifo0Callback+0xd4>)
 800074e:	68db      	ldr	r3, [r3, #12]
 8000750:	b2da      	uxtb	r2, r3
 8000752:	4b26      	ldr	r3, [pc, #152]	; (80007ec <HAL_FDCAN_RxFifo0Callback+0xe0>)
 8000754:	715a      	strb	r2, [r3, #5]
						CanFrame.time = time;
 8000756:	4a25      	ldr	r2, [pc, #148]	; (80007ec <HAL_FDCAN_RxFifo0Callback+0xe0>)
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	6093      	str	r3, [r2, #8]
						CAN_Flag = 1;
 800075c:	4b24      	ldr	r3, [pc, #144]	; (80007f0 <HAL_FDCAN_RxFifo0Callback+0xe4>)
 800075e:	2201      	movs	r2, #1
 8000760:	601a      	str	r2, [r3, #0]
						memcpy(&CanFrame.data.bytes, RxData, CanFrame.length);
 8000762:	4b22      	ldr	r3, [pc, #136]	; (80007ec <HAL_FDCAN_RxFifo0Callback+0xe0>)
 8000764:	795b      	ldrb	r3, [r3, #5]
 8000766:	461a      	mov	r2, r3
 8000768:	491c      	ldr	r1, [pc, #112]	; (80007dc <HAL_FDCAN_RxFifo0Callback+0xd0>)
 800076a:	4822      	ldr	r0, [pc, #136]	; (80007f4 <HAL_FDCAN_RxFifo0Callback+0xe8>)
 800076c:	f017 fe60 	bl	8018430 <memcpy>
						if(RxHeader.IdType == FDCAN_EXTENDED_ID){
 8000770:	4b1b      	ldr	r3, [pc, #108]	; (80007e0 <HAL_FDCAN_RxFifo0Callback+0xd4>)
 8000772:	685b      	ldr	r3, [r3, #4]
 8000774:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000778:	d103      	bne.n	8000782 <HAL_FDCAN_RxFifo0Callback+0x76>
							CanFrame.extended = 1;
 800077a:	4b1c      	ldr	r3, [pc, #112]	; (80007ec <HAL_FDCAN_RxFifo0Callback+0xe0>)
 800077c:	2201      	movs	r2, #1
 800077e:	711a      	strb	r2, [r3, #4]
 8000780:	e002      	b.n	8000788 <HAL_FDCAN_RxFifo0Callback+0x7c>
						}
						else{
							CanFrame.extended = 0;
 8000782:	4b1a      	ldr	r3, [pc, #104]	; (80007ec <HAL_FDCAN_RxFifo0Callback+0xe0>)
 8000784:	2200      	movs	r2, #0
 8000786:	711a      	strb	r2, [r3, #4]
						}
					}
					if(RxHeader.FDFormat == FDCAN_FD_CAN){
 8000788:	4b15      	ldr	r3, [pc, #84]	; (80007e0 <HAL_FDCAN_RxFifo0Callback+0xd4>)
 800078a:	699b      	ldr	r3, [r3, #24]
 800078c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000790:	d120      	bne.n	80007d4 <HAL_FDCAN_RxFifo0Callback+0xc8>
						CanFDFrame.id = RxHeader.Identifier;
 8000792:	4b13      	ldr	r3, [pc, #76]	; (80007e0 <HAL_FDCAN_RxFifo0Callback+0xd4>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4a18      	ldr	r2, [pc, #96]	; (80007f8 <HAL_FDCAN_RxFifo0Callback+0xec>)
 8000798:	6013      	str	r3, [r2, #0]
						CanFDFrame.length = RxHeader.DataLength;
 800079a:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <HAL_FDCAN_RxFifo0Callback+0xd4>)
 800079c:	68db      	ldr	r3, [r3, #12]
 800079e:	4a16      	ldr	r2, [pc, #88]	; (80007f8 <HAL_FDCAN_RxFifo0Callback+0xec>)
 80007a0:	6093      	str	r3, [r2, #8]
						CanFDFrame.time = time;
 80007a2:	4a15      	ldr	r2, [pc, #84]	; (80007f8 <HAL_FDCAN_RxFifo0Callback+0xec>)
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	60d3      	str	r3, [r2, #12]
						FDCAN_Flag = 1;
 80007a8:	4b14      	ldr	r3, [pc, #80]	; (80007fc <HAL_FDCAN_RxFifo0Callback+0xf0>)
 80007aa:	2201      	movs	r2, #1
 80007ac:	601a      	str	r2, [r3, #0]
						memcpy(&CanFDFrame.data.bytes, RxData, CanFDFrame.length);
 80007ae:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <HAL_FDCAN_RxFifo0Callback+0xec>)
 80007b0:	689b      	ldr	r3, [r3, #8]
 80007b2:	461a      	mov	r2, r3
 80007b4:	4909      	ldr	r1, [pc, #36]	; (80007dc <HAL_FDCAN_RxFifo0Callback+0xd0>)
 80007b6:	4812      	ldr	r0, [pc, #72]	; (8000800 <HAL_FDCAN_RxFifo0Callback+0xf4>)
 80007b8:	f017 fe3a 	bl	8018430 <memcpy>
						if(RxHeader.IdType == FDCAN_EXTENDED_ID){
 80007bc:	4b08      	ldr	r3, [pc, #32]	; (80007e0 <HAL_FDCAN_RxFifo0Callback+0xd4>)
 80007be:	685b      	ldr	r3, [r3, #4]
 80007c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80007c4:	d103      	bne.n	80007ce <HAL_FDCAN_RxFifo0Callback+0xc2>
							CanFDFrame.extended = 1;
 80007c6:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <HAL_FDCAN_RxFifo0Callback+0xec>)
 80007c8:	2201      	movs	r2, #1
 80007ca:	711a      	strb	r2, [r3, #4]
				  			  printf("%c",RxData[i]);
				  	  }
				  	  printf("\n");
				  	*/
			      }
}
 80007cc:	e002      	b.n	80007d4 <HAL_FDCAN_RxFifo0Callback+0xc8>
							CanFDFrame.extended = 0;
 80007ce:	4b0a      	ldr	r3, [pc, #40]	; (80007f8 <HAL_FDCAN_RxFifo0Callback+0xec>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	711a      	strb	r2, [r3, #4]
}
 80007d4:	bf00      	nop
 80007d6:	3710      	adds	r7, #16
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	24000ff8 	.word	0x24000ff8
 80007e0:	24001088 	.word	0x24001088
 80007e4:	58020400 	.word	0x58020400
 80007e8:	080196dc 	.word	0x080196dc
 80007ec:	240010b0 	.word	0x240010b0
 80007f0:	240001f8 	.word	0x240001f8
 80007f4:	240010c0 	.word	0x240010c0
 80007f8:	24001038 	.word	0x24001038
 80007fc:	240001f4 	.word	0x240001f4
 8000800:	24001048 	.word	0x24001048

08000804 <gps_msg_config>:
#include "main.h"
#include <myprintf.h>
#include <stdbool.h>
#include <buffer.h>

int gps_msg_config(UART_HandleTypeDef *huart, const char *nema, int rus1){
 8000804:	b580      	push	{r7, lr}
 8000806:	b09e      	sub	sp, #120	; 0x78
 8000808:	af02      	add	r7, sp, #8
 800080a:	60f8      	str	r0, [r7, #12]
 800080c:	60b9      	str	r1, [r7, #8]
 800080e:	607a      	str	r2, [r7, #4]
	if (strlen(nema) != 3) return 1;
 8000810:	68b8      	ldr	r0, [r7, #8]
 8000812:	f7ff fd65 	bl	80002e0 <strlen>
 8000816:	4603      	mov	r3, r0
 8000818:	2b03      	cmp	r3, #3
 800081a:	d001      	beq.n	8000820 <gps_msg_config+0x1c>
 800081c:	2301      	movs	r3, #1
 800081e:	e052      	b.n	80008c6 <gps_msg_config+0xc2>


	char msg[32];
	snprintf(msg, sizeof(msg)-1,"PUBX,40,%s,0,%i,0,0,0,0", nema, rus1);
 8000820:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	9300      	str	r3, [sp, #0]
 8000828:	68bb      	ldr	r3, [r7, #8]
 800082a:	4a29      	ldr	r2, [pc, #164]	; (80008d0 <gps_msg_config+0xcc>)
 800082c:	211f      	movs	r1, #31
 800082e:	f017 ff47 	bl	80186c0 <sniprintf>

	int checksum_int = 0;
 8000832:	2300      	movs	r3, #0
 8000834:	66fb      	str	r3, [r7, #108]	; 0x6c
	for (int i = 0; msg[i] && i < 32; i++)
 8000836:	2300      	movs	r3, #0
 8000838:	66bb      	str	r3, [r7, #104]	; 0x68
 800083a:	e00b      	b.n	8000854 <gps_msg_config+0x50>
		checksum_int ^= (unsigned char)msg[i];
 800083c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000840:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000842:	4413      	add	r3, r2
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	461a      	mov	r2, r3
 8000848:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800084a:	4053      	eors	r3, r2
 800084c:	66fb      	str	r3, [r7, #108]	; 0x6c
	for (int i = 0; msg[i] && i < 32; i++)
 800084e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000850:	3301      	adds	r3, #1
 8000852:	66bb      	str	r3, [r7, #104]	; 0x68
 8000854:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000858:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800085a:	4413      	add	r3, r2
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d002      	beq.n	8000868 <gps_msg_config+0x64>
 8000862:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000864:	2b1f      	cmp	r3, #31
 8000866:	dde9      	ble.n	800083c <gps_msg_config+0x38>

	char checksum[8];
	snprintf(checksum, sizeof(checksum)-1, "*%.2X", checksum_int);
 8000868:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800086c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800086e:	4a19      	ldr	r2, [pc, #100]	; (80008d4 <gps_msg_config+0xd0>)
 8000870:	2107      	movs	r1, #7
 8000872:	f017 ff25 	bl	80186c0 <sniprintf>

	char messagetosend[42];
	snprintf(messagetosend, sizeof(messagetosend)-1, "$%s%s\r\n", msg, checksum);
 8000876:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800087a:	f107 0014 	add.w	r0, r7, #20
 800087e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000882:	9300      	str	r3, [sp, #0]
 8000884:	4613      	mov	r3, r2
 8000886:	4a14      	ldr	r2, [pc, #80]	; (80008d8 <gps_msg_config+0xd4>)
 8000888:	2129      	movs	r1, #41	; 0x29
 800088a:	f017 ff19 	bl	80186c0 <sniprintf>
	printf("\n\rSending: ");
 800088e:	4813      	ldr	r0, [pc, #76]	; (80008dc <gps_msg_config+0xd8>)
 8000890:	f017 fe8a 	bl	80185a8 <iprintf>
	printf("%s", messagetosend);
 8000894:	f107 0314 	add.w	r3, r7, #20
 8000898:	4619      	mov	r1, r3
 800089a:	4811      	ldr	r0, [pc, #68]	; (80008e0 <gps_msg_config+0xdc>)
 800089c:	f017 fe84 	bl	80185a8 <iprintf>
	if (HAL_UART_Transmit(huart, messagetosend, strlen(messagetosend), 100) != HAL_OK){
 80008a0:	f107 0314 	add.w	r3, r7, #20
 80008a4:	4618      	mov	r0, r3
 80008a6:	f7ff fd1b 	bl	80002e0 <strlen>
 80008aa:	4603      	mov	r3, r0
 80008ac:	b29a      	uxth	r2, r3
 80008ae:	f107 0114 	add.w	r1, r7, #20
 80008b2:	2364      	movs	r3, #100	; 0x64
 80008b4:	68f8      	ldr	r0, [r7, #12]
 80008b6:	f00e f94c 	bl	800eb52 <HAL_UART_Transmit>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <gps_msg_config+0xc0>
		Error_Handler();
 80008c0:	f002 f978 	bl	8002bb4 <Error_Handler>
	}
	return 0;
 80008c4:	2300      	movs	r3, #0
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3770      	adds	r7, #112	; 0x70
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	080196f0 	.word	0x080196f0
 80008d4:	08019708 	.word	0x08019708
 80008d8:	08019710 	.word	0x08019710
 80008dc:	08019718 	.word	0x08019718
 80008e0:	08019724 	.word	0x08019724

080008e4 <gps_rate_config>:

int gps_rate_config(UART_HandleTypeDef *huart, uint16_t measRate, uint16_t navRate, uint16_t timeRef){
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08a      	sub	sp, #40	; 0x28
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	60f8      	str	r0, [r7, #12]
 80008ec:	4608      	mov	r0, r1
 80008ee:	4611      	mov	r1, r2
 80008f0:	461a      	mov	r2, r3
 80008f2:	4603      	mov	r3, r0
 80008f4:	817b      	strh	r3, [r7, #10]
 80008f6:	460b      	mov	r3, r1
 80008f8:	813b      	strh	r3, [r7, #8]
 80008fa:	4613      	mov	r3, r2
 80008fc:	80fb      	strh	r3, [r7, #6]
		uint16_t length = 6;
 80008fe:	2306      	movs	r3, #6
 8000900:	83fb      	strh	r3, [r7, #30]
		uint8_t msg[14];
		msg[0] = 0xb5;
 8000902:	23b5      	movs	r3, #181	; 0xb5
 8000904:	743b      	strb	r3, [r7, #16]
		msg[1] = 0x62;
 8000906:	2362      	movs	r3, #98	; 0x62
 8000908:	747b      	strb	r3, [r7, #17]
		msg[2] = 0x06;
 800090a:	2306      	movs	r3, #6
 800090c:	74bb      	strb	r3, [r7, #18]
		msg[3] = 0x08;
 800090e:	2308      	movs	r3, #8
 8000910:	74fb      	strb	r3, [r7, #19]
		msg[4] = length;
 8000912:	8bfb      	ldrh	r3, [r7, #30]
 8000914:	b2db      	uxtb	r3, r3
 8000916:	753b      	strb	r3, [r7, #20]
		msg[5] = 0;
 8000918:	2300      	movs	r3, #0
 800091a:	757b      	strb	r3, [r7, #21]
		msg[6] = measRate;
 800091c:	897b      	ldrh	r3, [r7, #10]
 800091e:	b2db      	uxtb	r3, r3
 8000920:	75bb      	strb	r3, [r7, #22]
		msg[7] = 0;
 8000922:	2300      	movs	r3, #0
 8000924:	75fb      	strb	r3, [r7, #23]
		msg[8] = navRate;
 8000926:	893b      	ldrh	r3, [r7, #8]
 8000928:	b2db      	uxtb	r3, r3
 800092a:	763b      	strb	r3, [r7, #24]
		msg[9] = 0;
 800092c:	2300      	movs	r3, #0
 800092e:	767b      	strb	r3, [r7, #25]
		msg[10] = timeRef;
 8000930:	88fb      	ldrh	r3, [r7, #6]
 8000932:	b2db      	uxtb	r3, r3
 8000934:	76bb      	strb	r3, [r7, #26]
		msg[11] = 0;
 8000936:	2300      	movs	r3, #0
 8000938:	76fb      	strb	r3, [r7, #27]

		uint8_t CK_A = 0;
 800093a:	2300      	movs	r3, #0
 800093c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		uint8_t CK_B = 0;
 8000940:	2300      	movs	r3, #0
 8000942:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		for(int i=2; i<12; i++){
 8000946:	2302      	movs	r3, #2
 8000948:	623b      	str	r3, [r7, #32]
 800094a:	e013      	b.n	8000974 <gps_rate_config+0x90>
	        CK_A = CK_A + msg[i];
 800094c:	f107 0210 	add.w	r2, r7, #16
 8000950:	6a3b      	ldr	r3, [r7, #32]
 8000952:	4413      	add	r3, r2
 8000954:	781a      	ldrb	r2, [r3, #0]
 8000956:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800095a:	4413      	add	r3, r2
 800095c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	        CK_A &= 0xFF;
	        CK_B = CK_B + CK_A;
 8000960:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000964:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000968:	4413      	add	r3, r2
 800096a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		for(int i=2; i<12; i++){
 800096e:	6a3b      	ldr	r3, [r7, #32]
 8000970:	3301      	adds	r3, #1
 8000972:	623b      	str	r3, [r7, #32]
 8000974:	6a3b      	ldr	r3, [r7, #32]
 8000976:	2b0b      	cmp	r3, #11
 8000978:	dde8      	ble.n	800094c <gps_rate_config+0x68>
	        CK_B &= 0xFF;
	    }
		msg[12] = CK_A;
 800097a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800097e:	773b      	strb	r3, [r7, #28]
		msg[13] = CK_B;
 8000980:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000984:	777b      	strb	r3, [r7, #29]

		if (HAL_UART_Transmit(huart, msg, sizeof(msg), 100) != HAL_OK){
 8000986:	f107 0110 	add.w	r1, r7, #16
 800098a:	2364      	movs	r3, #100	; 0x64
 800098c:	220e      	movs	r2, #14
 800098e:	68f8      	ldr	r0, [r7, #12]
 8000990:	f00e f8df 	bl	800eb52 <HAL_UART_Transmit>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d003      	beq.n	80009a2 <gps_rate_config+0xbe>
				Error_Handler();
 800099a:	f002 f90b 	bl	8002bb4 <Error_Handler>
				return 1;
 800099e:	2301      	movs	r3, #1
 80009a0:	e000      	b.n	80009a4 <gps_rate_config+0xc0>
			}
		return 0;
 80009a2:	2300      	movs	r3, #0
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3728      	adds	r7, #40	; 0x28
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}

080009ac <HAL_UART_RxHalfCpltCallback>:
}

int GPS_flag = 0;

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
	  }
  }*/
  //for(int i=0; i<BUFFLENGTH; i++){
  	  		  //printf("%c", rxBuf[i]);
  	  //}
  GPS_flag = 1;
 80009b4:	4b04      	ldr	r3, [pc, #16]	; (80009c8 <HAL_UART_RxHalfCpltCallback+0x1c>)
 80009b6:	2201      	movs	r2, #1
 80009b8:	601a      	str	r2, [r3, #0]
  //WriteToBuff(rxBuf+70, BUFFLENGTH/2);
  //HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);*/
  //printf("GPS Recieved\n");

}
 80009ba:	bf00      	nop
 80009bc:	370c      	adds	r7, #12
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	240001fc 	.word	0x240001fc

080009cc <NRF24_csn>:
	while(uSecVar--);
}

//1. Chip Select function
void NRF24_csn(int state)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d008      	beq.n	80009ec <NRF24_csn+0x20>
 80009da:	4b0a      	ldr	r3, [pc, #40]	; (8000a04 <NRF24_csn+0x38>)
 80009dc:	6818      	ldr	r0, [r3, #0]
 80009de:	4b0a      	ldr	r3, [pc, #40]	; (8000a08 <NRF24_csn+0x3c>)
 80009e0:	881b      	ldrh	r3, [r3, #0]
 80009e2:	2201      	movs	r2, #1
 80009e4:	4619      	mov	r1, r3
 80009e6:	f006 faf3 	bl	8006fd0 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 80009ea:	e007      	b.n	80009fc <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 80009ec:	4b05      	ldr	r3, [pc, #20]	; (8000a04 <NRF24_csn+0x38>)
 80009ee:	6818      	ldr	r0, [r3, #0]
 80009f0:	4b05      	ldr	r3, [pc, #20]	; (8000a08 <NRF24_csn+0x3c>)
 80009f2:	881b      	ldrh	r3, [r3, #0]
 80009f4:	2200      	movs	r2, #0
 80009f6:	4619      	mov	r1, r3
 80009f8:	f006 faea 	bl	8006fd0 <HAL_GPIO_WritePin>
}
 80009fc:	bf00      	nop
 80009fe:	3708      	adds	r7, #8
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	24000204 	.word	0x24000204
 8000a08:	24000208 	.word	0x24000208

08000a0c <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d008      	beq.n	8000a2c <NRF24_ce+0x20>
 8000a1a:	4b0a      	ldr	r3, [pc, #40]	; (8000a44 <NRF24_ce+0x38>)
 8000a1c:	6818      	ldr	r0, [r3, #0]
 8000a1e:	4b0a      	ldr	r3, [pc, #40]	; (8000a48 <NRF24_ce+0x3c>)
 8000a20:	881b      	ldrh	r3, [r3, #0]
 8000a22:	2201      	movs	r2, #1
 8000a24:	4619      	mov	r1, r3
 8000a26:	f006 fad3 	bl	8006fd0 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8000a2a:	e007      	b.n	8000a3c <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8000a2c:	4b05      	ldr	r3, [pc, #20]	; (8000a44 <NRF24_ce+0x38>)
 8000a2e:	6818      	ldr	r0, [r3, #0]
 8000a30:	4b05      	ldr	r3, [pc, #20]	; (8000a48 <NRF24_ce+0x3c>)
 8000a32:	881b      	ldrh	r3, [r3, #0]
 8000a34:	2200      	movs	r2, #0
 8000a36:	4619      	mov	r1, r3
 8000a38:	f006 faca 	bl	8006fd0 <HAL_GPIO_WritePin>
}
 8000a3c:	bf00      	nop
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	24000204 	.word	0x24000204
 8000a48:	2400020a 	.word	0x2400020a

08000a4c <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 8000a56:	2000      	movs	r0, #0
 8000a58:	f7ff ffb8 	bl	80009cc <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000a5c:	79fb      	ldrb	r3, [r7, #7]
 8000a5e:	f003 031f 	and.w	r3, r3, #31
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000a66:	f107 010c 	add.w	r1, r7, #12
 8000a6a:	2364      	movs	r3, #100	; 0x64
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	480a      	ldr	r0, [pc, #40]	; (8000a98 <NRF24_read_register+0x4c>)
 8000a70:	f00d f866 	bl	800db40 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8000a74:	f107 030c 	add.w	r3, r7, #12
 8000a78:	1c59      	adds	r1, r3, #1
 8000a7a:	2364      	movs	r3, #100	; 0x64
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	4806      	ldr	r0, [pc, #24]	; (8000a98 <NRF24_read_register+0x4c>)
 8000a80:	f00d fa50 	bl	800df24 <HAL_SPI_Receive>
	retData = spiBuf[1];
 8000a84:	7b7b      	ldrb	r3, [r7, #13]
 8000a86:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 8000a88:	2001      	movs	r0, #1
 8000a8a:	f7ff ff9f 	bl	80009cc <NRF24_csn>
	return retData;
 8000a8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	3710      	adds	r7, #16
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	2400020c 	.word	0x2400020c

08000a9c <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	6039      	str	r1, [r7, #0]
 8000aa6:	71fb      	strb	r3, [r7, #7]
 8000aa8:	4613      	mov	r3, r2
 8000aaa:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000aac:	2000      	movs	r0, #0
 8000aae:	f7ff ff8d 	bl	80009cc <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
 8000ab4:	f003 031f 	and.w	r3, r3, #31
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000abc:	f107 010c 	add.w	r1, r7, #12
 8000ac0:	2364      	movs	r3, #100	; 0x64
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	4808      	ldr	r0, [pc, #32]	; (8000ae8 <NRF24_read_registerN+0x4c>)
 8000ac6:	f00d f83b 	bl	800db40 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8000aca:	79bb      	ldrb	r3, [r7, #6]
 8000acc:	b29a      	uxth	r2, r3
 8000ace:	2364      	movs	r3, #100	; 0x64
 8000ad0:	6839      	ldr	r1, [r7, #0]
 8000ad2:	4805      	ldr	r0, [pc, #20]	; (8000ae8 <NRF24_read_registerN+0x4c>)
 8000ad4:	f00d fa26 	bl	800df24 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8000ad8:	2001      	movs	r0, #1
 8000ada:	f7ff ff77 	bl	80009cc <NRF24_csn>
}
 8000ade:	bf00      	nop
 8000ae0:	3710      	adds	r7, #16
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	2400020c 	.word	0x2400020c

08000aec <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	460a      	mov	r2, r1
 8000af6:	71fb      	strb	r3, [r7, #7]
 8000af8:	4613      	mov	r3, r2
 8000afa:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000afc:	2000      	movs	r0, #0
 8000afe:	f7ff ff65 	bl	80009cc <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000b02:	79fb      	ldrb	r3, [r7, #7]
 8000b04:	f043 0320 	orr.w	r3, r3, #32
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8000b0c:	79bb      	ldrb	r3, [r7, #6]
 8000b0e:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8000b10:	f107 010c 	add.w	r1, r7, #12
 8000b14:	2364      	movs	r3, #100	; 0x64
 8000b16:	2202      	movs	r2, #2
 8000b18:	4804      	ldr	r0, [pc, #16]	; (8000b2c <NRF24_write_register+0x40>)
 8000b1a:	f00d f811 	bl	800db40 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000b1e:	2001      	movs	r0, #1
 8000b20:	f7ff ff54 	bl	80009cc <NRF24_csn>
}
 8000b24:	bf00      	nop
 8000b26:	3710      	adds	r7, #16
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	2400020c 	.word	0x2400020c

08000b30 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	4603      	mov	r3, r0
 8000b38:	6039      	str	r1, [r7, #0]
 8000b3a:	71fb      	strb	r3, [r7, #7]
 8000b3c:	4613      	mov	r3, r2
 8000b3e:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000b40:	2000      	movs	r0, #0
 8000b42:	f7ff ff43 	bl	80009cc <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	f043 0320 	orr.w	r3, r3, #32
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000b50:	f107 010c 	add.w	r1, r7, #12
 8000b54:	2364      	movs	r3, #100	; 0x64
 8000b56:	2201      	movs	r2, #1
 8000b58:	4808      	ldr	r0, [pc, #32]	; (8000b7c <NRF24_write_registerN+0x4c>)
 8000b5a:	f00c fff1 	bl	800db40 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8000b5e:	79bb      	ldrb	r3, [r7, #6]
 8000b60:	b29a      	uxth	r2, r3
 8000b62:	2364      	movs	r3, #100	; 0x64
 8000b64:	6839      	ldr	r1, [r7, #0]
 8000b66:	4805      	ldr	r0, [pc, #20]	; (8000b7c <NRF24_write_registerN+0x4c>)
 8000b68:	f00c ffea 	bl	800db40 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000b6c:	2001      	movs	r0, #1
 8000b6e:	f7ff ff2d 	bl	80009cc <NRF24_csn>
}
 8000b72:	bf00      	nop
 8000b74:	3710      	adds	r7, #16
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	2400020c 	.word	0x2400020c

08000b80 <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8000b84:	21ff      	movs	r1, #255	; 0xff
 8000b86:	20e1      	movs	r0, #225	; 0xe1
 8000b88:	f7ff ffb0 	bl	8000aec <NRF24_write_register>
}
 8000b8c:	bf00      	nop
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8000b94:	21ff      	movs	r1, #255	; 0xff
 8000b96:	20e2      	movs	r0, #226	; 0xe2
 8000b98:	f7ff ffa8 	bl	8000aec <NRF24_write_register>
}
 8000b9c:	bf00      	nop
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <NRF24_begin>:
	return statReg;
}

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8000ba0:	b082      	sub	sp, #8
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b084      	sub	sp, #16
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
 8000baa:	61fb      	str	r3, [r7, #28]
 8000bac:	460b      	mov	r3, r1
 8000bae:	807b      	strh	r3, [r7, #2]
 8000bb0:	4613      	mov	r3, r2
 8000bb2:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8000bb4:	4b66      	ldr	r3, [pc, #408]	; (8000d50 <NRF24_begin+0x1b0>)
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f107 031c 	add.w	r3, r7, #28
 8000bbc:	2288      	movs	r2, #136	; 0x88
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	f017 fc36 	bl	8018430 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8000bc4:	4a63      	ldr	r2, [pc, #396]	; (8000d54 <NRF24_begin+0x1b4>)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8000bca:	4a63      	ldr	r2, [pc, #396]	; (8000d58 <NRF24_begin+0x1b8>)
 8000bcc:	887b      	ldrh	r3, [r7, #2]
 8000bce:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8000bd0:	4a62      	ldr	r2, [pc, #392]	; (8000d5c <NRF24_begin+0x1bc>)
 8000bd2:	883b      	ldrh	r3, [r7, #0]
 8000bd4:	8013      	strh	r3, [r2, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 8000bd6:	2001      	movs	r0, #1
 8000bd8:	f7ff fef8 	bl	80009cc <NRF24_csn>
	NRF24_ce(0);
 8000bdc:	2000      	movs	r0, #0
 8000bde:	f7ff ff15 	bl	8000a0c <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8000be2:	2005      	movs	r0, #5
 8000be4:	f002 fcda 	bl	800359c <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8000be8:	2108      	movs	r1, #8
 8000bea:	2000      	movs	r0, #0
 8000bec:	f7ff ff7e 	bl	8000aec <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8000bf0:	213f      	movs	r1, #63	; 0x3f
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	f7ff ff7a 	bl	8000aec <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8000bf8:	2103      	movs	r1, #3
 8000bfa:	2002      	movs	r0, #2
 8000bfc:	f7ff ff76 	bl	8000aec <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8000c00:	2103      	movs	r1, #3
 8000c02:	2003      	movs	r0, #3
 8000c04:	f7ff ff72 	bl	8000aec <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8000c08:	2103      	movs	r1, #3
 8000c0a:	2004      	movs	r0, #4
 8000c0c:	f7ff ff6e 	bl	8000aec <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8000c10:	2102      	movs	r1, #2
 8000c12:	2005      	movs	r0, #5
 8000c14:	f7ff ff6a 	bl	8000aec <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8000c18:	210f      	movs	r1, #15
 8000c1a:	2006      	movs	r0, #6
 8000c1c:	f7ff ff66 	bl	8000aec <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8000c20:	210e      	movs	r1, #14
 8000c22:	2007      	movs	r0, #7
 8000c24:	f7ff ff62 	bl	8000aec <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8000c28:	2100      	movs	r1, #0
 8000c2a:	2008      	movs	r0, #8
 8000c2c:	f7ff ff5e 	bl	8000aec <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8000c30:	2100      	movs	r1, #0
 8000c32:	2009      	movs	r0, #9
 8000c34:	f7ff ff5a 	bl	8000aec <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8000c38:	23e7      	movs	r3, #231	; 0xe7
 8000c3a:	733b      	strb	r3, [r7, #12]
 8000c3c:	23e7      	movs	r3, #231	; 0xe7
 8000c3e:	72fb      	strb	r3, [r7, #11]
 8000c40:	23e7      	movs	r3, #231	; 0xe7
 8000c42:	72bb      	strb	r3, [r7, #10]
 8000c44:	23e7      	movs	r3, #231	; 0xe7
 8000c46:	727b      	strb	r3, [r7, #9]
 8000c48:	23e7      	movs	r3, #231	; 0xe7
 8000c4a:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8000c4c:	f107 0308 	add.w	r3, r7, #8
 8000c50:	2205      	movs	r2, #5
 8000c52:	4619      	mov	r1, r3
 8000c54:	200a      	movs	r0, #10
 8000c56:	f7ff ff6b 	bl	8000b30 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 8000c5a:	23c2      	movs	r3, #194	; 0xc2
 8000c5c:	733b      	strb	r3, [r7, #12]
 8000c5e:	23c2      	movs	r3, #194	; 0xc2
 8000c60:	72fb      	strb	r3, [r7, #11]
 8000c62:	23c2      	movs	r3, #194	; 0xc2
 8000c64:	72bb      	strb	r3, [r7, #10]
 8000c66:	23c2      	movs	r3, #194	; 0xc2
 8000c68:	727b      	strb	r3, [r7, #9]
 8000c6a:	23c2      	movs	r3, #194	; 0xc2
 8000c6c:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8000c6e:	f107 0308 	add.w	r3, r7, #8
 8000c72:	2205      	movs	r2, #5
 8000c74:	4619      	mov	r1, r3
 8000c76:	200b      	movs	r0, #11
 8000c78:	f7ff ff5a 	bl	8000b30 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8000c7c:	21c3      	movs	r1, #195	; 0xc3
 8000c7e:	200c      	movs	r0, #12
 8000c80:	f7ff ff34 	bl	8000aec <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8000c84:	21c4      	movs	r1, #196	; 0xc4
 8000c86:	200d      	movs	r0, #13
 8000c88:	f7ff ff30 	bl	8000aec <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8000c8c:	21c5      	movs	r1, #197	; 0xc5
 8000c8e:	200e      	movs	r0, #14
 8000c90:	f7ff ff2c 	bl	8000aec <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8000c94:	21c6      	movs	r1, #198	; 0xc6
 8000c96:	200f      	movs	r0, #15
 8000c98:	f7ff ff28 	bl	8000aec <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8000c9c:	23e7      	movs	r3, #231	; 0xe7
 8000c9e:	733b      	strb	r3, [r7, #12]
 8000ca0:	23e7      	movs	r3, #231	; 0xe7
 8000ca2:	72fb      	strb	r3, [r7, #11]
 8000ca4:	23e7      	movs	r3, #231	; 0xe7
 8000ca6:	72bb      	strb	r3, [r7, #10]
 8000ca8:	23e7      	movs	r3, #231	; 0xe7
 8000caa:	727b      	strb	r3, [r7, #9]
 8000cac:	23e7      	movs	r3, #231	; 0xe7
 8000cae:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8000cb0:	f107 0308 	add.w	r3, r7, #8
 8000cb4:	2205      	movs	r2, #5
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	2010      	movs	r0, #16
 8000cba:	f7ff ff39 	bl	8000b30 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	2011      	movs	r0, #17
 8000cc2:	f7ff ff13 	bl	8000aec <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	2012      	movs	r0, #18
 8000cca:	f7ff ff0f 	bl	8000aec <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8000cce:	2100      	movs	r1, #0
 8000cd0:	2013      	movs	r0, #19
 8000cd2:	f7ff ff0b 	bl	8000aec <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	2014      	movs	r0, #20
 8000cda:	f7ff ff07 	bl	8000aec <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8000cde:	2100      	movs	r1, #0
 8000ce0:	2015      	movs	r0, #21
 8000ce2:	f7ff ff03 	bl	8000aec <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	2016      	movs	r0, #22
 8000cea:	f7ff feff 	bl	8000aec <NRF24_write_register>
	
	NRF24_ACTIVATE_cmd();
 8000cee:	f000 f99b 	bl	8001028 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	201c      	movs	r0, #28
 8000cf6:	f7ff fef9 	bl	8000aec <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	201d      	movs	r0, #29
 8000cfe:	f7ff fef5 	bl	8000aec <NRF24_write_register>
	printRadioSettings();
 8000d02:	f000 f9ab 	bl	800105c <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8000d06:	210f      	movs	r1, #15
 8000d08:	200f      	movs	r0, #15
 8000d0a:	f000 f859 	bl	8000dc0 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8000d0e:	2003      	movs	r0, #3
 8000d10:	f000 f8cb 	bl	8000eaa <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8000d14:	2001      	movs	r0, #1
 8000d16:	f000 f901 	bl	8000f1c <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8000d1a:	2002      	movs	r0, #2
 8000d1c:	f000 f944 	bl	8000fa8 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8000d20:	f000 f896 	bl	8000e50 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8000d24:	2020      	movs	r0, #32
 8000d26:	f000 f87b 	bl	8000e20 <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 8000d2a:	f000 f974 	bl	8001016 <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8000d2e:	204c      	movs	r0, #76	; 0x4c
 8000d30:	f000 f861 	bl	8000df6 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8000d34:	f7ff ff24 	bl	8000b80 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000d38:	f7ff ff2a 	bl	8000b90 <NRF24_flush_rx>
	
	NRF24_powerDown();
 8000d3c:	f000 f95c 	bl	8000ff8 <NRF24_powerDown>
	
}
 8000d40:	bf00      	nop
 8000d42:	3710      	adds	r7, #16
 8000d44:	46bd      	mov	sp, r7
 8000d46:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000d4a:	b002      	add	sp, #8
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	2400020c 	.word	0x2400020c
 8000d54:	24000204 	.word	0x24000204
 8000d58:	24000208 	.word	0x24000208
 8000d5c:	2400020a 	.word	0x2400020a

08000d60 <NRF24_stopListening>:
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
}
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 8000d64:	2000      	movs	r0, #0
 8000d66:	f7ff fe51 	bl	8000a0c <NRF24_ce>
	NRF24_flush_tx();
 8000d6a:	f7ff ff09 	bl	8000b80 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000d6e:	f7ff ff0f 	bl	8000b90 <NRF24_flush_rx>
}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
	...

08000d78 <NRF24_openWritingPipe>:
	NRF24_getDynamicPayloadSize();
	return rxStatus;
}
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 8000d82:	463b      	mov	r3, r7
 8000d84:	2205      	movs	r2, #5
 8000d86:	4619      	mov	r1, r3
 8000d88:	200a      	movs	r0, #10
 8000d8a:	f7ff fed1 	bl	8000b30 <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 8000d8e:	463b      	mov	r3, r7
 8000d90:	2205      	movs	r2, #5
 8000d92:	4619      	mov	r1, r3
 8000d94:	2010      	movs	r0, #16
 8000d96:	f7ff fecb 	bl	8000b30 <NRF24_write_registerN>
	
	const uint8_t max_payload_size = 32;
 8000d9a:	2320      	movs	r3, #32
 8000d9c:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 8000d9e:	4b07      	ldr	r3, [pc, #28]	; (8000dbc <NRF24_openWritingPipe+0x44>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	7bfa      	ldrb	r2, [r7, #15]
 8000da4:	4293      	cmp	r3, r2
 8000da6:	bf28      	it	cs
 8000da8:	4613      	movcs	r3, r2
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	4619      	mov	r1, r3
 8000dae:	2011      	movs	r0, #17
 8000db0:	f7ff fe9c 	bl	8000aec <NRF24_write_register>
}
 8000db4:	bf00      	nop
 8000db6:	3710      	adds	r7, #16
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	24000200 	.word	0x24000200

08000dc0 <NRF24_setRetries>:
	}
	
}
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	460a      	mov	r2, r1
 8000dca:	71fb      	strb	r3, [r7, #7]
 8000dcc:	4613      	mov	r3, r2
 8000dce:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8000dd0:	79fb      	ldrb	r3, [r7, #7]
 8000dd2:	011b      	lsls	r3, r3, #4
 8000dd4:	b25a      	sxtb	r2, r3
 8000dd6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000dda:	f003 030f 	and.w	r3, r3, #15
 8000dde:	b25b      	sxtb	r3, r3
 8000de0:	4313      	orrs	r3, r2
 8000de2:	b25b      	sxtb	r3, r3
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	4619      	mov	r1, r3
 8000de8:	2004      	movs	r0, #4
 8000dea:	f7ff fe7f 	bl	8000aec <NRF24_write_register>
}
 8000dee:	bf00      	nop
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8000df6:	b580      	push	{r7, lr}
 8000df8:	b084      	sub	sp, #16
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8000e00:	237f      	movs	r3, #127	; 0x7f
 8000e02:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8000e04:	7bfa      	ldrb	r2, [r7, #15]
 8000e06:	79fb      	ldrb	r3, [r7, #7]
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	bf28      	it	cs
 8000e0c:	4613      	movcs	r3, r2
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	4619      	mov	r1, r3
 8000e12:	2005      	movs	r0, #5
 8000e14:	f7ff fe6a 	bl	8000aec <NRF24_write_register>
}
 8000e18:	bf00      	nop
 8000e1a:	3710      	adds	r7, #16
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b085      	sub	sp, #20
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8000e2a:	2320      	movs	r3, #32
 8000e2c:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8000e2e:	7bfa      	ldrb	r2, [r7, #15]
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	4293      	cmp	r3, r2
 8000e34:	bf28      	it	cs
 8000e36:	4613      	movcs	r3, r2
 8000e38:	b2da      	uxtb	r2, r3
 8000e3a:	4b04      	ldr	r3, [pc, #16]	; (8000e4c <NRF24_setPayloadSize+0x2c>)
 8000e3c:	701a      	strb	r2, [r3, #0]
}
 8000e3e:	bf00      	nop
 8000e40:	3714      	adds	r7, #20
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	24000200 	.word	0x24000200

08000e50 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;
	
}
void NRF24_disableDynamicPayloads(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8000e54:	201d      	movs	r0, #29
 8000e56:	f7ff fdf9 	bl	8000a4c <NRF24_read_register>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	f023 0304 	bic.w	r3, r3, #4
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	4619      	mov	r1, r3
 8000e64:	201d      	movs	r0, #29
 8000e66:	f7ff fe41 	bl	8000aec <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	201c      	movs	r0, #28
 8000e6e:	f7ff fe3d 	bl	8000aec <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8000e72:	4b02      	ldr	r3, [pc, #8]	; (8000e7c <NRF24_disableDynamicPayloads+0x2c>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	701a      	strb	r2, [r3, #0]
}
 8000e78:	bf00      	nop
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	24000201 	.word	0x24000201

08000e80 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d004      	beq.n	8000e9a <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8000e90:	213f      	movs	r1, #63	; 0x3f
 8000e92:	2001      	movs	r0, #1
 8000e94:	f7ff fe2a 	bl	8000aec <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8000e98:	e003      	b.n	8000ea2 <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	2001      	movs	r0, #1
 8000e9e:	f7ff fe25 	bl	8000aec <NRF24_write_register>
}
 8000ea2:	bf00      	nop
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b084      	sub	sp, #16
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000eb4:	2006      	movs	r0, #6
 8000eb6:	f7ff fdc9 	bl	8000a4c <NRF24_read_register>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000ebe:	7bfb      	ldrb	r3, [r7, #15]
 8000ec0:	f023 0306 	bic.w	r3, r3, #6
 8000ec4:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8000ec6:	79fb      	ldrb	r3, [r7, #7]
 8000ec8:	2b03      	cmp	r3, #3
 8000eca:	d104      	bne.n	8000ed6 <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000ecc:	7bfb      	ldrb	r3, [r7, #15]
 8000ece:	f043 0306 	orr.w	r3, r3, #6
 8000ed2:	73fb      	strb	r3, [r7, #15]
 8000ed4:	e019      	b.n	8000f0a <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	2b02      	cmp	r3, #2
 8000eda:	d104      	bne.n	8000ee6 <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8000edc:	7bfb      	ldrb	r3, [r7, #15]
 8000ede:	f043 0304 	orr.w	r3, r3, #4
 8000ee2:	73fb      	strb	r3, [r7, #15]
 8000ee4:	e011      	b.n	8000f0a <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d104      	bne.n	8000ef6 <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8000eec:	7bfb      	ldrb	r3, [r7, #15]
 8000eee:	f043 0302 	orr.w	r3, r3, #2
 8000ef2:	73fb      	strb	r3, [r7, #15]
 8000ef4:	e009      	b.n	8000f0a <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d006      	beq.n	8000f0a <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8000efc:	79fb      	ldrb	r3, [r7, #7]
 8000efe:	2b04      	cmp	r3, #4
 8000f00:	d103      	bne.n	8000f0a <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000f02:	7bfb      	ldrb	r3, [r7, #15]
 8000f04:	f043 0306 	orr.w	r3, r3, #6
 8000f08:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8000f0a:	7bfb      	ldrb	r3, [r7, #15]
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	2006      	movs	r0, #6
 8000f10:	f7ff fdec 	bl	8000aec <NRF24_write_register>
}
 8000f14:	bf00      	nop
 8000f16:	3710      	adds	r7, #16
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8000f26:	2300      	movs	r3, #0
 8000f28:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000f2a:	2006      	movs	r0, #6
 8000f2c:	f7ff fd8e 	bl	8000a4c <NRF24_read_register>
 8000f30:	4603      	mov	r3, r0
 8000f32:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8000f34:	4b1b      	ldr	r3, [pc, #108]	; (8000fa4 <NRF24_setDataRate+0x88>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8000f3a:	7bbb      	ldrb	r3, [r7, #14]
 8000f3c:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8000f40:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	d107      	bne.n	8000f58 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8000f48:	4b16      	ldr	r3, [pc, #88]	; (8000fa4 <NRF24_setDataRate+0x88>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8000f4e:	7bbb      	ldrb	r3, [r7, #14]
 8000f50:	f043 0320 	orr.w	r3, r3, #32
 8000f54:	73bb      	strb	r3, [r7, #14]
 8000f56:	e00d      	b.n	8000f74 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d107      	bne.n	8000f6e <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8000f5e:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <NRF24_setDataRate+0x88>)
 8000f60:	2201      	movs	r2, #1
 8000f62:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8000f64:	7bbb      	ldrb	r3, [r7, #14]
 8000f66:	f043 0308 	orr.w	r3, r3, #8
 8000f6a:	73bb      	strb	r3, [r7, #14]
 8000f6c:	e002      	b.n	8000f74 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8000f6e:	4b0d      	ldr	r3, [pc, #52]	; (8000fa4 <NRF24_setDataRate+0x88>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8000f74:	7bbb      	ldrb	r3, [r7, #14]
 8000f76:	4619      	mov	r1, r3
 8000f78:	2006      	movs	r0, #6
 8000f7a:	f7ff fdb7 	bl	8000aec <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8000f7e:	2006      	movs	r0, #6
 8000f80:	f7ff fd64 	bl	8000a4c <NRF24_read_register>
 8000f84:	4603      	mov	r3, r0
 8000f86:	461a      	mov	r2, r3
 8000f88:	7bbb      	ldrb	r3, [r7, #14]
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d102      	bne.n	8000f94 <NRF24_setDataRate+0x78>
  {
    result = true;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	73fb      	strb	r3, [r7, #15]
 8000f92:	e002      	b.n	8000f9a <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8000f94:	4b03      	ldr	r3, [pc, #12]	; (8000fa4 <NRF24_setDataRate+0x88>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8000f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3710      	adds	r7, #16
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	24000202 	.word	0x24000202

08000fa8 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8000fb2:	2000      	movs	r0, #0
 8000fb4:	f7ff fd4a 	bl	8000a4c <NRF24_read_register>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	f023 030c 	bic.w	r3, r3, #12
 8000fbe:	73fb      	strb	r3, [r7, #15]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d00f      	beq.n	8000fe6 <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d104      	bne.n	8000fd6 <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
 8000fce:	f043 0308 	orr.w	r3, r3, #8
 8000fd2:	73fb      	strb	r3, [r7, #15]
 8000fd4:	e007      	b.n	8000fe6 <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8000fd6:	7bfb      	ldrb	r3, [r7, #15]
 8000fd8:	f043 0308 	orr.w	r3, r3, #8
 8000fdc:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8000fde:	7bfb      	ldrb	r3, [r7, #15]
 8000fe0:	f043 0304 	orr.w	r3, r3, #4
 8000fe4:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8000fe6:	7bfb      	ldrb	r3, [r7, #15]
 8000fe8:	4619      	mov	r1, r3
 8000fea:	2000      	movs	r0, #0
 8000fec:	f7ff fd7e 	bl	8000aec <NRF24_write_register>
}
 8000ff0:	bf00      	nop
 8000ff2:	3710      	adds	r7, #16
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8000ffc:	2000      	movs	r0, #0
 8000ffe:	f7ff fd25 	bl	8000a4c <NRF24_read_register>
 8001002:	4603      	mov	r3, r0
 8001004:	f023 0302 	bic.w	r3, r3, #2
 8001008:	b2db      	uxtb	r3, r3
 800100a:	4619      	mov	r1, r3
 800100c:	2000      	movs	r0, #0
 800100e:	f7ff fd6d 	bl	8000aec <NRF24_write_register>
}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}

08001016 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 800101a:	2170      	movs	r1, #112	; 0x70
 800101c:	2007      	movs	r0, #7
 800101e:	f7ff fd65 	bl	8000aec <NRF24_write_register>
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
	...

08001028 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 800102e:	2000      	movs	r0, #0
 8001030:	f7ff fccc 	bl	80009cc <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8001034:	2350      	movs	r3, #80	; 0x50
 8001036:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8001038:	2373      	movs	r3, #115	; 0x73
 800103a:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 800103c:	1d39      	adds	r1, r7, #4
 800103e:	2364      	movs	r3, #100	; 0x64
 8001040:	2202      	movs	r2, #2
 8001042:	4805      	ldr	r0, [pc, #20]	; (8001058 <NRF24_ACTIVATE_cmd+0x30>)
 8001044:	f00c fd7c 	bl	800db40 <HAL_SPI_Transmit>
	NRF24_csn(1);
 8001048:	2001      	movs	r0, #1
 800104a:	f7ff fcbf 	bl	80009cc <NRF24_csn>
}
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	2400020c 	.word	0x2400020c

0800105c <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 800105c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800105e:	b0a1      	sub	sp, #132	; 0x84
 8001060:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8001062:	f107 0308 	add.w	r3, r7, #8
 8001066:	4ab6      	ldr	r2, [pc, #728]	; (8001340 <printRadioSettings+0x2e4>)
 8001068:	461c      	mov	r4, r3
 800106a:	4615      	mov	r5, r2
 800106c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800106e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001070:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001072:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001074:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001076:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001078:	682b      	ldr	r3, [r5, #0]
 800107a:	461a      	mov	r2, r3
 800107c:	8022      	strh	r2, [r4, #0]
 800107e:	3402      	adds	r4, #2
 8001080:	0c1b      	lsrs	r3, r3, #16
 8001082:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001084:	f107 0308 	add.w	r3, r7, #8
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff f929 	bl	80002e0 <strlen>
 800108e:	4603      	mov	r3, r0
 8001090:	b29a      	uxth	r2, r3
 8001092:	f107 0108 	add.w	r1, r7, #8
 8001096:	230a      	movs	r3, #10
 8001098:	48aa      	ldr	r0, [pc, #680]	; (8001344 <printRadioSettings+0x2e8>)
 800109a:	f00d fd5a 	bl	800eb52 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 800109e:	2000      	movs	r0, #0
 80010a0:	f7ff fcd4 	bl	8000a4c <NRF24_read_register>
 80010a4:	4603      	mov	r3, r0
 80010a6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 80010aa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80010ae:	f003 0308 	and.w	r3, r3, #8
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d020      	beq.n	80010f8 <printRadioSettings+0x9c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 80010b6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80010ba:	f003 0304 	and.w	r3, r3, #4
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d00b      	beq.n	80010da <printRadioSettings+0x7e>
 80010c2:	f107 0308 	add.w	r3, r7, #8
 80010c6:	4aa0      	ldr	r2, [pc, #640]	; (8001348 <printRadioSettings+0x2ec>)
 80010c8:	461c      	mov	r4, r3
 80010ca:	4615      	mov	r5, r2
 80010cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80010d8:	e017      	b.n	800110a <printRadioSettings+0xae>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");	
 80010da:	f107 0308 	add.w	r3, r7, #8
 80010de:	4a9b      	ldr	r2, [pc, #620]	; (800134c <printRadioSettings+0x2f0>)
 80010e0:	461c      	mov	r4, r3
 80010e2:	4615      	mov	r5, r2
 80010e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010ec:	c403      	stmia	r4!, {r0, r1}
 80010ee:	8022      	strh	r2, [r4, #0]
 80010f0:	3402      	adds	r4, #2
 80010f2:	0c13      	lsrs	r3, r2, #16
 80010f4:	7023      	strb	r3, [r4, #0]
 80010f6:	e008      	b.n	800110a <printRadioSettings+0xae>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 80010f8:	f107 0308 	add.w	r3, r7, #8
 80010fc:	4a94      	ldr	r2, [pc, #592]	; (8001350 <printRadioSettings+0x2f4>)
 80010fe:	461c      	mov	r4, r3
 8001100:	4615      	mov	r5, r2
 8001102:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001104:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001106:	682b      	ldr	r3, [r5, #0]
 8001108:	6023      	str	r3, [r4, #0]
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800110a:	f107 0308 	add.w	r3, r7, #8
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff f8e6 	bl	80002e0 <strlen>
 8001114:	4603      	mov	r3, r0
 8001116:	b29a      	uxth	r2, r3
 8001118:	f107 0108 	add.w	r1, r7, #8
 800111c:	230a      	movs	r3, #10
 800111e:	4889      	ldr	r0, [pc, #548]	; (8001344 <printRadioSettings+0x2e8>)
 8001120:	f00d fd17 	bl	800eb52 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8001124:	2001      	movs	r0, #1
 8001126:	f7ff fc91 	bl	8000a4c <NRF24_read_register>
 800112a:	4603      	mov	r3, r0
 800112c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001130:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001134:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001138:	2b00      	cmp	r3, #0
 800113a:	bfcc      	ite	gt
 800113c:	2301      	movgt	r3, #1
 800113e:	2300      	movle	r3, #0
 8001140:	b2db      	uxtb	r3, r3
 8001142:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001144:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001148:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800114c:	2b00      	cmp	r3, #0
 800114e:	bfcc      	ite	gt
 8001150:	2301      	movgt	r3, #1
 8001152:	2300      	movle	r3, #0
 8001154:	b2db      	uxtb	r3, r3
 8001156:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001158:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800115c:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001160:	2b00      	cmp	r3, #0
 8001162:	bfcc      	ite	gt
 8001164:	2301      	movgt	r3, #1
 8001166:	2300      	movle	r3, #0
 8001168:	b2db      	uxtb	r3, r3
 800116a:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800116c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001170:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001174:	2b00      	cmp	r3, #0
 8001176:	bfcc      	ite	gt
 8001178:	2301      	movgt	r3, #1
 800117a:	2300      	movle	r3, #0
 800117c:	b2db      	uxtb	r3, r3
 800117e:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001180:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001184:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001188:	2b00      	cmp	r3, #0
 800118a:	bfcc      	ite	gt
 800118c:	2301      	movgt	r3, #1
 800118e:	2300      	movle	r3, #0
 8001190:	b2db      	uxtb	r3, r3
 8001192:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001194:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001198:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800119c:	2b00      	cmp	r3, #0
 800119e:	bfcc      	ite	gt
 80011a0:	2301      	movgt	r3, #1
 80011a2:	2300      	movle	r3, #0
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	f107 0008 	add.w	r0, r7, #8
 80011aa:	9303      	str	r3, [sp, #12]
 80011ac:	9402      	str	r4, [sp, #8]
 80011ae:	9101      	str	r1, [sp, #4]
 80011b0:	9200      	str	r2, [sp, #0]
 80011b2:	4633      	mov	r3, r6
 80011b4:	462a      	mov	r2, r5
 80011b6:	4967      	ldr	r1, [pc, #412]	; (8001354 <printRadioSettings+0x2f8>)
 80011b8:	f017 fab6 	bl	8018728 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80011bc:	f107 0308 	add.w	r3, r7, #8
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff f88d 	bl	80002e0 <strlen>
 80011c6:	4603      	mov	r3, r0
 80011c8:	b29a      	uxth	r2, r3
 80011ca:	f107 0108 	add.w	r1, r7, #8
 80011ce:	230a      	movs	r3, #10
 80011d0:	485c      	ldr	r0, [pc, #368]	; (8001344 <printRadioSettings+0x2e8>)
 80011d2:	f00d fcbe 	bl	800eb52 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 80011d6:	2002      	movs	r0, #2
 80011d8:	f7ff fc38 	bl	8000a4c <NRF24_read_register>
 80011dc:	4603      	mov	r3, r0
 80011de:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80011e2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011e6:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	bfcc      	ite	gt
 80011ee:	2301      	movgt	r3, #1
 80011f0:	2300      	movle	r3, #0
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80011f6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011fa:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80011fe:	2b00      	cmp	r3, #0
 8001200:	bfcc      	ite	gt
 8001202:	2301      	movgt	r3, #1
 8001204:	2300      	movle	r3, #0
 8001206:	b2db      	uxtb	r3, r3
 8001208:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800120a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800120e:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001212:	2b00      	cmp	r3, #0
 8001214:	bfcc      	ite	gt
 8001216:	2301      	movgt	r3, #1
 8001218:	2300      	movle	r3, #0
 800121a:	b2db      	uxtb	r3, r3
 800121c:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800121e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001222:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001226:	2b00      	cmp	r3, #0
 8001228:	bfcc      	ite	gt
 800122a:	2301      	movgt	r3, #1
 800122c:	2300      	movle	r3, #0
 800122e:	b2db      	uxtb	r3, r3
 8001230:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001232:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001236:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800123a:	2b00      	cmp	r3, #0
 800123c:	bfcc      	ite	gt
 800123e:	2301      	movgt	r3, #1
 8001240:	2300      	movle	r3, #0
 8001242:	b2db      	uxtb	r3, r3
 8001244:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001246:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800124a:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800124e:	2b00      	cmp	r3, #0
 8001250:	bfcc      	ite	gt
 8001252:	2301      	movgt	r3, #1
 8001254:	2300      	movle	r3, #0
 8001256:	b2db      	uxtb	r3, r3
 8001258:	f107 0008 	add.w	r0, r7, #8
 800125c:	9303      	str	r3, [sp, #12]
 800125e:	9402      	str	r4, [sp, #8]
 8001260:	9101      	str	r1, [sp, #4]
 8001262:	9200      	str	r2, [sp, #0]
 8001264:	4633      	mov	r3, r6
 8001266:	462a      	mov	r2, r5
 8001268:	493b      	ldr	r1, [pc, #236]	; (8001358 <printRadioSettings+0x2fc>)
 800126a:	f017 fa5d 	bl	8018728 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800126e:	f107 0308 	add.w	r3, r7, #8
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff f834 	bl	80002e0 <strlen>
 8001278:	4603      	mov	r3, r0
 800127a:	b29a      	uxth	r2, r3
 800127c:	f107 0108 	add.w	r1, r7, #8
 8001280:	230a      	movs	r3, #10
 8001282:	4830      	ldr	r0, [pc, #192]	; (8001344 <printRadioSettings+0x2e8>)
 8001284:	f00d fc65 	bl	800eb52 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 8001288:	2003      	movs	r0, #3
 800128a:	f7ff fbdf 	bl	8000a4c <NRF24_read_register>
 800128e:	4603      	mov	r3, r0
 8001290:	f003 0303 	and.w	r3, r3, #3
 8001294:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 8001298:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800129c:	3302      	adds	r3, #2
 800129e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 80012a2:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80012a6:	f107 0308 	add.w	r3, r7, #8
 80012aa:	492c      	ldr	r1, [pc, #176]	; (800135c <printRadioSettings+0x300>)
 80012ac:	4618      	mov	r0, r3
 80012ae:	f017 fa3b 	bl	8018728 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80012b2:	f107 0308 	add.w	r3, r7, #8
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff f812 	bl	80002e0 <strlen>
 80012bc:	4603      	mov	r3, r0
 80012be:	b29a      	uxth	r2, r3
 80012c0:	f107 0108 	add.w	r1, r7, #8
 80012c4:	230a      	movs	r3, #10
 80012c6:	481f      	ldr	r0, [pc, #124]	; (8001344 <printRadioSettings+0x2e8>)
 80012c8:	f00d fc43 	bl	800eb52 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 80012cc:	2005      	movs	r0, #5
 80012ce:	f7ff fbbd 	bl	8000a4c <NRF24_read_register>
 80012d2:	4603      	mov	r3, r0
 80012d4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 80012d8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80012e0:	f107 0308 	add.w	r3, r7, #8
 80012e4:	491e      	ldr	r1, [pc, #120]	; (8001360 <printRadioSettings+0x304>)
 80012e6:	4618      	mov	r0, r3
 80012e8:	f017 fa1e 	bl	8018728 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80012ec:	f107 0308 	add.w	r3, r7, #8
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7fe fff5 	bl	80002e0 <strlen>
 80012f6:	4603      	mov	r3, r0
 80012f8:	b29a      	uxth	r2, r3
 80012fa:	f107 0108 	add.w	r1, r7, #8
 80012fe:	230a      	movs	r3, #10
 8001300:	4810      	ldr	r0, [pc, #64]	; (8001344 <printRadioSettings+0x2e8>)
 8001302:	f00d fc26 	bl	800eb52 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8001306:	2006      	movs	r0, #6
 8001308:	f7ff fba0 	bl	8000a4c <NRF24_read_register>
 800130c:	4603      	mov	r3, r0
 800130e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8001312:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001316:	f003 0308 	and.w	r3, r3, #8
 800131a:	2b00      	cmp	r3, #0
 800131c:	d024      	beq.n	8001368 <printRadioSettings+0x30c>
 800131e:	f107 0308 	add.w	r3, r7, #8
 8001322:	4a10      	ldr	r2, [pc, #64]	; (8001364 <printRadioSettings+0x308>)
 8001324:	461c      	mov	r4, r3
 8001326:	4615      	mov	r5, r2
 8001328:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800132a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800132c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001330:	6020      	str	r0, [r4, #0]
 8001332:	3404      	adds	r4, #4
 8001334:	8021      	strh	r1, [r4, #0]
 8001336:	3402      	adds	r4, #2
 8001338:	0c0b      	lsrs	r3, r1, #16
 800133a:	7023      	strb	r3, [r4, #0]
 800133c:	e023      	b.n	8001386 <printRadioSettings+0x32a>
 800133e:	bf00      	nop
 8001340:	08019730 	.word	0x08019730
 8001344:	24000294 	.word	0x24000294
 8001348:	08019764 	.word	0x08019764
 800134c:	08019780 	.word	0x08019780
 8001350:	0801979c 	.word	0x0801979c
 8001354:	080197b0 	.word	0x080197b0
 8001358:	080197f4 	.word	0x080197f4
 800135c:	08019840 	.word	0x08019840
 8001360:	0801985c 	.word	0x0801985c
 8001364:	08019870 	.word	0x08019870
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8001368:	f107 0308 	add.w	r3, r7, #8
 800136c:	4a29      	ldr	r2, [pc, #164]	; (8001414 <printRadioSettings+0x3b8>)
 800136e:	461c      	mov	r4, r3
 8001370:	4615      	mov	r5, r2
 8001372:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001374:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001376:	e895 0003 	ldmia.w	r5, {r0, r1}
 800137a:	6020      	str	r0, [r4, #0]
 800137c:	3404      	adds	r4, #4
 800137e:	8021      	strh	r1, [r4, #0]
 8001380:	3402      	adds	r4, #2
 8001382:	0c0b      	lsrs	r3, r1, #16
 8001384:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001386:	f107 0308 	add.w	r3, r7, #8
 800138a:	4618      	mov	r0, r3
 800138c:	f7fe ffa8 	bl	80002e0 <strlen>
 8001390:	4603      	mov	r3, r0
 8001392:	b29a      	uxth	r2, r3
 8001394:	f107 0108 	add.w	r1, r7, #8
 8001398:	230a      	movs	r3, #10
 800139a:	481f      	ldr	r0, [pc, #124]	; (8001418 <printRadioSettings+0x3bc>)
 800139c:	f00d fbd9 	bl	800eb52 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 80013a0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013a4:	f003 0306 	and.w	r3, r3, #6
 80013a8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 80013ac:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013b0:	085b      	lsrs	r3, r3, #1
 80013b2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 80013b6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d109      	bne.n	80013d2 <printRadioSettings+0x376>
 80013be:	f107 0308 	add.w	r3, r7, #8
 80013c2:	4a16      	ldr	r2, [pc, #88]	; (800141c <printRadioSettings+0x3c0>)
 80013c4:	461c      	mov	r4, r3
 80013c6:	4615      	mov	r5, r2
 80013c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013cc:	682b      	ldr	r3, [r5, #0]
 80013ce:	6023      	str	r3, [r4, #0]
 80013d0:	e037      	b.n	8001442 <printRadioSettings+0x3e6>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 80013d2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d109      	bne.n	80013ee <printRadioSettings+0x392>
 80013da:	f107 0308 	add.w	r3, r7, #8
 80013de:	4a10      	ldr	r2, [pc, #64]	; (8001420 <printRadioSettings+0x3c4>)
 80013e0:	461c      	mov	r4, r3
 80013e2:	4615      	mov	r5, r2
 80013e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013e8:	682b      	ldr	r3, [r5, #0]
 80013ea:	6023      	str	r3, [r4, #0]
 80013ec:	e029      	b.n	8001442 <printRadioSettings+0x3e6>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 80013ee:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d118      	bne.n	8001428 <printRadioSettings+0x3cc>
 80013f6:	f107 0308 	add.w	r3, r7, #8
 80013fa:	4a0a      	ldr	r2, [pc, #40]	; (8001424 <printRadioSettings+0x3c8>)
 80013fc:	461c      	mov	r4, r3
 80013fe:	4615      	mov	r5, r2
 8001400:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001402:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001404:	682b      	ldr	r3, [r5, #0]
 8001406:	461a      	mov	r2, r3
 8001408:	8022      	strh	r2, [r4, #0]
 800140a:	3402      	adds	r4, #2
 800140c:	0c1b      	lsrs	r3, r3, #16
 800140e:	7023      	strb	r3, [r4, #0]
 8001410:	e017      	b.n	8001442 <printRadioSettings+0x3e6>
 8001412:	bf00      	nop
 8001414:	08019888 	.word	0x08019888
 8001418:	24000294 	.word	0x24000294
 800141c:	080198a0 	.word	0x080198a0
 8001420:	080198b4 	.word	0x080198b4
 8001424:	080198c8 	.word	0x080198c8
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8001428:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800142c:	2b03      	cmp	r3, #3
 800142e:	d108      	bne.n	8001442 <printRadioSettings+0x3e6>
 8001430:	f107 0308 	add.w	r3, r7, #8
 8001434:	4ad7      	ldr	r2, [pc, #860]	; (8001794 <printRadioSettings+0x738>)
 8001436:	461c      	mov	r4, r3
 8001438:	4615      	mov	r5, r2
 800143a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800143c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800143e:	682b      	ldr	r3, [r5, #0]
 8001440:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001442:	f107 0308 	add.w	r3, r7, #8
 8001446:	4618      	mov	r0, r3
 8001448:	f7fe ff4a 	bl	80002e0 <strlen>
 800144c:	4603      	mov	r3, r0
 800144e:	b29a      	uxth	r2, r3
 8001450:	f107 0108 	add.w	r1, r7, #8
 8001454:	230a      	movs	r3, #10
 8001456:	48d0      	ldr	r0, [pc, #832]	; (8001798 <printRadioSettings+0x73c>)
 8001458:	f00d fb7b 	bl	800eb52 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 800145c:	463b      	mov	r3, r7
 800145e:	2205      	movs	r2, #5
 8001460:	4619      	mov	r1, r3
 8001462:	200a      	movs	r0, #10
 8001464:	f7ff fb1a 	bl	8000a9c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001468:	793b      	ldrb	r3, [r7, #4]
 800146a:	461c      	mov	r4, r3
 800146c:	78fb      	ldrb	r3, [r7, #3]
 800146e:	461d      	mov	r5, r3
 8001470:	78bb      	ldrb	r3, [r7, #2]
 8001472:	787a      	ldrb	r2, [r7, #1]
 8001474:	7839      	ldrb	r1, [r7, #0]
 8001476:	f107 0008 	add.w	r0, r7, #8
 800147a:	9102      	str	r1, [sp, #8]
 800147c:	9201      	str	r2, [sp, #4]
 800147e:	9300      	str	r3, [sp, #0]
 8001480:	462b      	mov	r3, r5
 8001482:	4622      	mov	r2, r4
 8001484:	49c5      	ldr	r1, [pc, #788]	; (800179c <printRadioSettings+0x740>)
 8001486:	f017 f94f 	bl	8018728 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800148a:	f107 0308 	add.w	r3, r7, #8
 800148e:	4618      	mov	r0, r3
 8001490:	f7fe ff26 	bl	80002e0 <strlen>
 8001494:	4603      	mov	r3, r0
 8001496:	b29a      	uxth	r2, r3
 8001498:	f107 0108 	add.w	r1, r7, #8
 800149c:	230a      	movs	r3, #10
 800149e:	48be      	ldr	r0, [pc, #760]	; (8001798 <printRadioSettings+0x73c>)
 80014a0:	f00d fb57 	bl	800eb52 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 80014a4:	463b      	mov	r3, r7
 80014a6:	2205      	movs	r2, #5
 80014a8:	4619      	mov	r1, r3
 80014aa:	200b      	movs	r0, #11
 80014ac:	f7ff faf6 	bl	8000a9c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80014b0:	793b      	ldrb	r3, [r7, #4]
 80014b2:	461c      	mov	r4, r3
 80014b4:	78fb      	ldrb	r3, [r7, #3]
 80014b6:	461d      	mov	r5, r3
 80014b8:	78bb      	ldrb	r3, [r7, #2]
 80014ba:	787a      	ldrb	r2, [r7, #1]
 80014bc:	7839      	ldrb	r1, [r7, #0]
 80014be:	f107 0008 	add.w	r0, r7, #8
 80014c2:	9102      	str	r1, [sp, #8]
 80014c4:	9201      	str	r2, [sp, #4]
 80014c6:	9300      	str	r3, [sp, #0]
 80014c8:	462b      	mov	r3, r5
 80014ca:	4622      	mov	r2, r4
 80014cc:	49b4      	ldr	r1, [pc, #720]	; (80017a0 <printRadioSettings+0x744>)
 80014ce:	f017 f92b 	bl	8018728 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014d2:	f107 0308 	add.w	r3, r7, #8
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7fe ff02 	bl	80002e0 <strlen>
 80014dc:	4603      	mov	r3, r0
 80014de:	b29a      	uxth	r2, r3
 80014e0:	f107 0108 	add.w	r1, r7, #8
 80014e4:	230a      	movs	r3, #10
 80014e6:	48ac      	ldr	r0, [pc, #688]	; (8001798 <printRadioSettings+0x73c>)
 80014e8:	f00d fb33 	bl	800eb52 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 80014ec:	463b      	mov	r3, r7
 80014ee:	2201      	movs	r2, #1
 80014f0:	4619      	mov	r1, r3
 80014f2:	200c      	movs	r0, #12
 80014f4:	f7ff fad2 	bl	8000a9c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80014f8:	783b      	ldrb	r3, [r7, #0]
 80014fa:	461a      	mov	r2, r3
 80014fc:	f107 0308 	add.w	r3, r7, #8
 8001500:	49a8      	ldr	r1, [pc, #672]	; (80017a4 <printRadioSettings+0x748>)
 8001502:	4618      	mov	r0, r3
 8001504:	f017 f910 	bl	8018728 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001508:	f107 0308 	add.w	r3, r7, #8
 800150c:	4618      	mov	r0, r3
 800150e:	f7fe fee7 	bl	80002e0 <strlen>
 8001512:	4603      	mov	r3, r0
 8001514:	b29a      	uxth	r2, r3
 8001516:	f107 0108 	add.w	r1, r7, #8
 800151a:	230a      	movs	r3, #10
 800151c:	489e      	ldr	r0, [pc, #632]	; (8001798 <printRadioSettings+0x73c>)
 800151e:	f00d fb18 	bl	800eb52 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 8001522:	463b      	mov	r3, r7
 8001524:	2201      	movs	r2, #1
 8001526:	4619      	mov	r1, r3
 8001528:	200d      	movs	r0, #13
 800152a:	f7ff fab7 	bl	8000a9c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800152e:	783b      	ldrb	r3, [r7, #0]
 8001530:	461a      	mov	r2, r3
 8001532:	f107 0308 	add.w	r3, r7, #8
 8001536:	499c      	ldr	r1, [pc, #624]	; (80017a8 <printRadioSettings+0x74c>)
 8001538:	4618      	mov	r0, r3
 800153a:	f017 f8f5 	bl	8018728 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800153e:	f107 0308 	add.w	r3, r7, #8
 8001542:	4618      	mov	r0, r3
 8001544:	f7fe fecc 	bl	80002e0 <strlen>
 8001548:	4603      	mov	r3, r0
 800154a:	b29a      	uxth	r2, r3
 800154c:	f107 0108 	add.w	r1, r7, #8
 8001550:	230a      	movs	r3, #10
 8001552:	4891      	ldr	r0, [pc, #580]	; (8001798 <printRadioSettings+0x73c>)
 8001554:	f00d fafd 	bl	800eb52 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 8001558:	463b      	mov	r3, r7
 800155a:	2201      	movs	r2, #1
 800155c:	4619      	mov	r1, r3
 800155e:	200e      	movs	r0, #14
 8001560:	f7ff fa9c 	bl	8000a9c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001564:	783b      	ldrb	r3, [r7, #0]
 8001566:	461a      	mov	r2, r3
 8001568:	f107 0308 	add.w	r3, r7, #8
 800156c:	498f      	ldr	r1, [pc, #572]	; (80017ac <printRadioSettings+0x750>)
 800156e:	4618      	mov	r0, r3
 8001570:	f017 f8da 	bl	8018728 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001574:	f107 0308 	add.w	r3, r7, #8
 8001578:	4618      	mov	r0, r3
 800157a:	f7fe feb1 	bl	80002e0 <strlen>
 800157e:	4603      	mov	r3, r0
 8001580:	b29a      	uxth	r2, r3
 8001582:	f107 0108 	add.w	r1, r7, #8
 8001586:	230a      	movs	r3, #10
 8001588:	4883      	ldr	r0, [pc, #524]	; (8001798 <printRadioSettings+0x73c>)
 800158a:	f00d fae2 	bl	800eb52 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 800158e:	463b      	mov	r3, r7
 8001590:	2201      	movs	r2, #1
 8001592:	4619      	mov	r1, r3
 8001594:	200f      	movs	r0, #15
 8001596:	f7ff fa81 	bl	8000a9c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800159a:	783b      	ldrb	r3, [r7, #0]
 800159c:	461a      	mov	r2, r3
 800159e:	f107 0308 	add.w	r3, r7, #8
 80015a2:	4983      	ldr	r1, [pc, #524]	; (80017b0 <printRadioSettings+0x754>)
 80015a4:	4618      	mov	r0, r3
 80015a6:	f017 f8bf 	bl	8018728 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80015aa:	f107 0308 	add.w	r3, r7, #8
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7fe fe96 	bl	80002e0 <strlen>
 80015b4:	4603      	mov	r3, r0
 80015b6:	b29a      	uxth	r2, r3
 80015b8:	f107 0108 	add.w	r1, r7, #8
 80015bc:	230a      	movs	r3, #10
 80015be:	4876      	ldr	r0, [pc, #472]	; (8001798 <printRadioSettings+0x73c>)
 80015c0:	f00d fac7 	bl	800eb52 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 80015c4:	463b      	mov	r3, r7
 80015c6:	2205      	movs	r2, #5
 80015c8:	4619      	mov	r1, r3
 80015ca:	2010      	movs	r0, #16
 80015cc:	f7ff fa66 	bl	8000a9c <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80015d0:	793b      	ldrb	r3, [r7, #4]
 80015d2:	461c      	mov	r4, r3
 80015d4:	78fb      	ldrb	r3, [r7, #3]
 80015d6:	461d      	mov	r5, r3
 80015d8:	78bb      	ldrb	r3, [r7, #2]
 80015da:	787a      	ldrb	r2, [r7, #1]
 80015dc:	7839      	ldrb	r1, [r7, #0]
 80015de:	f107 0008 	add.w	r0, r7, #8
 80015e2:	9102      	str	r1, [sp, #8]
 80015e4:	9201      	str	r2, [sp, #4]
 80015e6:	9300      	str	r3, [sp, #0]
 80015e8:	462b      	mov	r3, r5
 80015ea:	4622      	mov	r2, r4
 80015ec:	4971      	ldr	r1, [pc, #452]	; (80017b4 <printRadioSettings+0x758>)
 80015ee:	f017 f89b 	bl	8018728 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80015f2:	f107 0308 	add.w	r3, r7, #8
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7fe fe72 	bl	80002e0 <strlen>
 80015fc:	4603      	mov	r3, r0
 80015fe:	b29a      	uxth	r2, r3
 8001600:	f107 0108 	add.w	r1, r7, #8
 8001604:	230a      	movs	r3, #10
 8001606:	4864      	ldr	r0, [pc, #400]	; (8001798 <printRadioSettings+0x73c>)
 8001608:	f00d faa3 	bl	800eb52 <HAL_UART_Transmit>
	
	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 800160c:	2011      	movs	r0, #17
 800160e:	f7ff fa1d 	bl	8000a4c <NRF24_read_register>
 8001612:	4603      	mov	r3, r0
 8001614:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001618:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800161c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001620:	f107 0308 	add.w	r3, r7, #8
 8001624:	4964      	ldr	r1, [pc, #400]	; (80017b8 <printRadioSettings+0x75c>)
 8001626:	4618      	mov	r0, r3
 8001628:	f017 f87e 	bl	8018728 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800162c:	f107 0308 	add.w	r3, r7, #8
 8001630:	4618      	mov	r0, r3
 8001632:	f7fe fe55 	bl	80002e0 <strlen>
 8001636:	4603      	mov	r3, r0
 8001638:	b29a      	uxth	r2, r3
 800163a:	f107 0108 	add.w	r1, r7, #8
 800163e:	230a      	movs	r3, #10
 8001640:	4855      	ldr	r0, [pc, #340]	; (8001798 <printRadioSettings+0x73c>)
 8001642:	f00d fa86 	bl	800eb52 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+1);
 8001646:	2012      	movs	r0, #18
 8001648:	f7ff fa00 	bl	8000a4c <NRF24_read_register>
 800164c:	4603      	mov	r3, r0
 800164e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001652:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001656:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800165a:	f107 0308 	add.w	r3, r7, #8
 800165e:	4957      	ldr	r1, [pc, #348]	; (80017bc <printRadioSettings+0x760>)
 8001660:	4618      	mov	r0, r3
 8001662:	f017 f861 	bl	8018728 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001666:	f107 0308 	add.w	r3, r7, #8
 800166a:	4618      	mov	r0, r3
 800166c:	f7fe fe38 	bl	80002e0 <strlen>
 8001670:	4603      	mov	r3, r0
 8001672:	b29a      	uxth	r2, r3
 8001674:	f107 0108 	add.w	r1, r7, #8
 8001678:	230a      	movs	r3, #10
 800167a:	4847      	ldr	r0, [pc, #284]	; (8001798 <printRadioSettings+0x73c>)
 800167c:	f00d fa69 	bl	800eb52 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+2);
 8001680:	2013      	movs	r0, #19
 8001682:	f7ff f9e3 	bl	8000a4c <NRF24_read_register>
 8001686:	4603      	mov	r3, r0
 8001688:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800168c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001690:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001694:	f107 0308 	add.w	r3, r7, #8
 8001698:	4949      	ldr	r1, [pc, #292]	; (80017c0 <printRadioSettings+0x764>)
 800169a:	4618      	mov	r0, r3
 800169c:	f017 f844 	bl	8018728 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016a0:	f107 0308 	add.w	r3, r7, #8
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7fe fe1b 	bl	80002e0 <strlen>
 80016aa:	4603      	mov	r3, r0
 80016ac:	b29a      	uxth	r2, r3
 80016ae:	f107 0108 	add.w	r1, r7, #8
 80016b2:	230a      	movs	r3, #10
 80016b4:	4838      	ldr	r0, [pc, #224]	; (8001798 <printRadioSettings+0x73c>)
 80016b6:	f00d fa4c 	bl	800eb52 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+3);
 80016ba:	2014      	movs	r0, #20
 80016bc:	f7ff f9c6 	bl	8000a4c <NRF24_read_register>
 80016c0:	4603      	mov	r3, r0
 80016c2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80016c6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80016ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016ce:	f107 0308 	add.w	r3, r7, #8
 80016d2:	493c      	ldr	r1, [pc, #240]	; (80017c4 <printRadioSettings+0x768>)
 80016d4:	4618      	mov	r0, r3
 80016d6:	f017 f827 	bl	8018728 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016da:	f107 0308 	add.w	r3, r7, #8
 80016de:	4618      	mov	r0, r3
 80016e0:	f7fe fdfe 	bl	80002e0 <strlen>
 80016e4:	4603      	mov	r3, r0
 80016e6:	b29a      	uxth	r2, r3
 80016e8:	f107 0108 	add.w	r1, r7, #8
 80016ec:	230a      	movs	r3, #10
 80016ee:	482a      	ldr	r0, [pc, #168]	; (8001798 <printRadioSettings+0x73c>)
 80016f0:	f00d fa2f 	bl	800eb52 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+4);
 80016f4:	2015      	movs	r0, #21
 80016f6:	f7ff f9a9 	bl	8000a4c <NRF24_read_register>
 80016fa:	4603      	mov	r3, r0
 80016fc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001700:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001704:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001708:	f107 0308 	add.w	r3, r7, #8
 800170c:	492e      	ldr	r1, [pc, #184]	; (80017c8 <printRadioSettings+0x76c>)
 800170e:	4618      	mov	r0, r3
 8001710:	f017 f80a 	bl	8018728 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001714:	f107 0308 	add.w	r3, r7, #8
 8001718:	4618      	mov	r0, r3
 800171a:	f7fe fde1 	bl	80002e0 <strlen>
 800171e:	4603      	mov	r3, r0
 8001720:	b29a      	uxth	r2, r3
 8001722:	f107 0108 	add.w	r1, r7, #8
 8001726:	230a      	movs	r3, #10
 8001728:	481b      	ldr	r0, [pc, #108]	; (8001798 <printRadioSettings+0x73c>)
 800172a:	f00d fa12 	bl	800eb52 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+5);
 800172e:	2016      	movs	r0, #22
 8001730:	f7ff f98c 	bl	8000a4c <NRF24_read_register>
 8001734:	4603      	mov	r3, r0
 8001736:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800173a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800173e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001742:	f107 0308 	add.w	r3, r7, #8
 8001746:	4921      	ldr	r1, [pc, #132]	; (80017cc <printRadioSettings+0x770>)
 8001748:	4618      	mov	r0, r3
 800174a:	f016 ffed 	bl	8018728 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800174e:	f107 0308 	add.w	r3, r7, #8
 8001752:	4618      	mov	r0, r3
 8001754:	f7fe fdc4 	bl	80002e0 <strlen>
 8001758:	4603      	mov	r3, r0
 800175a:	b29a      	uxth	r2, r3
 800175c:	f107 0108 	add.w	r1, r7, #8
 8001760:	230a      	movs	r3, #10
 8001762:	480d      	ldr	r0, [pc, #52]	; (8001798 <printRadioSettings+0x73c>)
 8001764:	f00d f9f5 	bl	800eb52 <HAL_UART_Transmit>
	
	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 8001768:	201c      	movs	r0, #28
 800176a:	f7ff f96f 	bl	8000a4c <NRF24_read_register>
 800176e:	4603      	mov	r3, r0
 8001770:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001774:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001778:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800177c:	2b00      	cmp	r3, #0
 800177e:	bfcc      	ite	gt
 8001780:	2301      	movgt	r3, #1
 8001782:	2300      	movle	r3, #0
 8001784:	b2db      	uxtb	r3, r3
 8001786:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001788:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800178c:	f003 0302 	and.w	r3, r3, #2
 8001790:	e01e      	b.n	80017d0 <printRadioSettings+0x774>
 8001792:	bf00      	nop
 8001794:	080198dc 	.word	0x080198dc
 8001798:	24000294 	.word	0x24000294
 800179c:	080198f0 	.word	0x080198f0
 80017a0:	08019920 	.word	0x08019920
 80017a4:	08019950 	.word	0x08019950
 80017a8:	08019978 	.word	0x08019978
 80017ac:	080199a0 	.word	0x080199a0
 80017b0:	080199c8 	.word	0x080199c8
 80017b4:	080199f0 	.word	0x080199f0
 80017b8:	08019a1c 	.word	0x08019a1c
 80017bc:	08019a38 	.word	0x08019a38
 80017c0:	08019a54 	.word	0x08019a54
 80017c4:	08019a70 	.word	0x08019a70
 80017c8:	08019a8c 	.word	0x08019a8c
 80017cc:	08019aa8 	.word	0x08019aa8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	bfcc      	ite	gt
 80017d4:	2301      	movgt	r3, #1
 80017d6:	2300      	movle	r3, #0
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80017dc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017e0:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	bfcc      	ite	gt
 80017e8:	2301      	movgt	r3, #1
 80017ea:	2300      	movle	r3, #0
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80017f0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017f4:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	bfcc      	ite	gt
 80017fc:	2301      	movgt	r3, #1
 80017fe:	2300      	movle	r3, #0
 8001800:	b2db      	uxtb	r3, r3
 8001802:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001804:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001808:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800180c:	2b00      	cmp	r3, #0
 800180e:	bfcc      	ite	gt
 8001810:	2301      	movgt	r3, #1
 8001812:	2300      	movle	r3, #0
 8001814:	b2db      	uxtb	r3, r3
 8001816:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001818:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800181c:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001820:	2b00      	cmp	r3, #0
 8001822:	bfcc      	ite	gt
 8001824:	2301      	movgt	r3, #1
 8001826:	2300      	movle	r3, #0
 8001828:	b2db      	uxtb	r3, r3
 800182a:	f107 0008 	add.w	r0, r7, #8
 800182e:	9303      	str	r3, [sp, #12]
 8001830:	9402      	str	r4, [sp, #8]
 8001832:	9101      	str	r1, [sp, #4]
 8001834:	9200      	str	r2, [sp, #0]
 8001836:	4633      	mov	r3, r6
 8001838:	462a      	mov	r2, r5
 800183a:	494a      	ldr	r1, [pc, #296]	; (8001964 <printRadioSettings+0x908>)
 800183c:	f016 ff74 	bl	8018728 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001840:	f107 0308 	add.w	r3, r7, #8
 8001844:	4618      	mov	r0, r3
 8001846:	f7fe fd4b 	bl	80002e0 <strlen>
 800184a:	4603      	mov	r3, r0
 800184c:	b29a      	uxth	r2, r3
 800184e:	f107 0108 	add.w	r1, r7, #8
 8001852:	230a      	movs	r3, #10
 8001854:	4844      	ldr	r0, [pc, #272]	; (8001968 <printRadioSettings+0x90c>)
 8001856:	f00d f97c 	bl	800eb52 <HAL_UART_Transmit>
	
	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 800185a:	201d      	movs	r0, #29
 800185c:	f7ff f8f6 	bl	8000a4c <NRF24_read_register>
 8001860:	4603      	mov	r3, r0
 8001862:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 8001866:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800186a:	f003 0304 	and.w	r3, r3, #4
 800186e:	2b00      	cmp	r3, #0
 8001870:	d00c      	beq.n	800188c <printRadioSettings+0x830>
 8001872:	f107 0308 	add.w	r3, r7, #8
 8001876:	4a3d      	ldr	r2, [pc, #244]	; (800196c <printRadioSettings+0x910>)
 8001878:	461c      	mov	r4, r3
 800187a:	4615      	mov	r5, r2
 800187c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800187e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001880:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001884:	6020      	str	r0, [r4, #0]
 8001886:	3404      	adds	r4, #4
 8001888:	8021      	strh	r1, [r4, #0]
 800188a:	e00e      	b.n	80018aa <printRadioSettings+0x84e>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 800188c:	f107 0308 	add.w	r3, r7, #8
 8001890:	4a37      	ldr	r2, [pc, #220]	; (8001970 <printRadioSettings+0x914>)
 8001892:	461c      	mov	r4, r3
 8001894:	4615      	mov	r5, r2
 8001896:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001898:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800189a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800189e:	6020      	str	r0, [r4, #0]
 80018a0:	3404      	adds	r4, #4
 80018a2:	8021      	strh	r1, [r4, #0]
 80018a4:	3402      	adds	r4, #2
 80018a6:	0c0b      	lsrs	r3, r1, #16
 80018a8:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80018aa:	f107 0308 	add.w	r3, r7, #8
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7fe fd16 	bl	80002e0 <strlen>
 80018b4:	4603      	mov	r3, r0
 80018b6:	b29a      	uxth	r2, r3
 80018b8:	f107 0108 	add.w	r1, r7, #8
 80018bc:	230a      	movs	r3, #10
 80018be:	482a      	ldr	r0, [pc, #168]	; (8001968 <printRadioSettings+0x90c>)
 80018c0:	f00d f947 	bl	800eb52 <HAL_UART_Transmit>
	
	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 80018c4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80018c8:	f003 0302 	and.w	r3, r3, #2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d00b      	beq.n	80018e8 <printRadioSettings+0x88c>
 80018d0:	f107 0308 	add.w	r3, r7, #8
 80018d4:	4a27      	ldr	r2, [pc, #156]	; (8001974 <printRadioSettings+0x918>)
 80018d6:	461c      	mov	r4, r3
 80018d8:	4615      	mov	r5, r2
 80018da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80018e2:	c403      	stmia	r4!, {r0, r1}
 80018e4:	8022      	strh	r2, [r4, #0]
 80018e6:	e00d      	b.n	8001904 <printRadioSettings+0x8a8>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 80018e8:	f107 0308 	add.w	r3, r7, #8
 80018ec:	4a22      	ldr	r2, [pc, #136]	; (8001978 <printRadioSettings+0x91c>)
 80018ee:	461c      	mov	r4, r3
 80018f0:	4615      	mov	r5, r2
 80018f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018f6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80018fa:	c403      	stmia	r4!, {r0, r1}
 80018fc:	8022      	strh	r2, [r4, #0]
 80018fe:	3402      	adds	r4, #2
 8001900:	0c13      	lsrs	r3, r2, #16
 8001902:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001904:	f107 0308 	add.w	r3, r7, #8
 8001908:	4618      	mov	r0, r3
 800190a:	f7fe fce9 	bl	80002e0 <strlen>
 800190e:	4603      	mov	r3, r0
 8001910:	b29a      	uxth	r2, r3
 8001912:	f107 0108 	add.w	r1, r7, #8
 8001916:	230a      	movs	r3, #10
 8001918:	4813      	ldr	r0, [pc, #76]	; (8001968 <printRadioSettings+0x90c>)
 800191a:	f00d f91a 	bl	800eb52 <HAL_UART_Transmit>
	
	
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 800191e:	f107 0308 	add.w	r3, r7, #8
 8001922:	4a16      	ldr	r2, [pc, #88]	; (800197c <printRadioSettings+0x920>)
 8001924:	461c      	mov	r4, r3
 8001926:	4615      	mov	r5, r2
 8001928:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800192a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800192c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800192e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001930:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001932:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001934:	682b      	ldr	r3, [r5, #0]
 8001936:	461a      	mov	r2, r3
 8001938:	8022      	strh	r2, [r4, #0]
 800193a:	3402      	adds	r4, #2
 800193c:	0c1b      	lsrs	r3, r3, #16
 800193e:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001940:	f107 0308 	add.w	r3, r7, #8
 8001944:	4618      	mov	r0, r3
 8001946:	f7fe fccb 	bl	80002e0 <strlen>
 800194a:	4603      	mov	r3, r0
 800194c:	b29a      	uxth	r2, r3
 800194e:	f107 0108 	add.w	r1, r7, #8
 8001952:	230a      	movs	r3, #10
 8001954:	4804      	ldr	r0, [pc, #16]	; (8001968 <printRadioSettings+0x90c>)
 8001956:	f00d f8fc 	bl	800eb52 <HAL_UART_Transmit>
}
 800195a:	bf00      	nop
 800195c:	3774      	adds	r7, #116	; 0x74
 800195e:	46bd      	mov	sp, r7
 8001960:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001962:	bf00      	nop
 8001964:	08019ac4 	.word	0x08019ac4
 8001968:	24000294 	.word	0x24000294
 800196c:	08019b10 	.word	0x08019b10
 8001970:	08019b28 	.word	0x08019b28
 8001974:	08019b40 	.word	0x08019b40
 8001978:	08019b5c 	.word	0x08019b5c
 800197c:	08019730 	.word	0x08019730

08001980 <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 8001980:	b084      	sub	sp, #16
 8001982:	b580      	push	{r7, lr}
 8001984:	af00      	add	r7, sp, #0
 8001986:	f107 0c08 	add.w	ip, r7, #8
 800198a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 800198e:	4b07      	ldr	r3, [pc, #28]	; (80019ac <nrf24_DebugUART_Init+0x2c>)
 8001990:	4618      	mov	r0, r3
 8001992:	f107 0108 	add.w	r1, r7, #8
 8001996:	238c      	movs	r3, #140	; 0x8c
 8001998:	461a      	mov	r2, r3
 800199a:	f016 fd49 	bl	8018430 <memcpy>
}
 800199e:	bf00      	nop
 80019a0:	46bd      	mov	sp, r7
 80019a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80019a6:	b004      	add	sp, #16
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	24000294 	.word	0x24000294

080019b0 <WriteToBuff>:
#include <myprintf.h>


DataBuff DataBuffer = {.Data.DataBuff = 0, .counter = 0};

int WriteToBuff(char Data[], int len){
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
  if(len <= 1 || len >= Bufflength){
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	dd03      	ble.n	80019c8 <WriteToBuff+0x18>
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019c6:	db01      	blt.n	80019cc <WriteToBuff+0x1c>
    return 3; //Dude dont try and break it
 80019c8:	2303      	movs	r3, #3
 80019ca:	e089      	b.n	8001ae0 <WriteToBuff+0x130>
  }

  if(DataBuffer.counter < Bufflength && DataBuffer.counter + len >= Bufflength){
 80019cc:	4b46      	ldr	r3, [pc, #280]	; (8001ae8 <WriteToBuff+0x138>)
 80019ce:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 80019d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019d6:	d238      	bcs.n	8001a4a <WriteToBuff+0x9a>
 80019d8:	4b43      	ldr	r3, [pc, #268]	; (8001ae8 <WriteToBuff+0x138>)
 80019da:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	4413      	add	r3, r2
 80019e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019e6:	d330      	bcc.n	8001a4a <WriteToBuff+0x9a>
    DataBuffer.counter = Bufflength;
 80019e8:	4b3f      	ldr	r3, [pc, #252]	; (8001ae8 <WriteToBuff+0x138>)
 80019ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019ee:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
    memcpy((DataBuffer.Data.DataBuff + DataBuffer.counter), Data, len);
 80019f2:	4b3d      	ldr	r3, [pc, #244]	; (8001ae8 <WriteToBuff+0x138>)
 80019f4:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 80019f8:	4a3b      	ldr	r2, [pc, #236]	; (8001ae8 <WriteToBuff+0x138>)
 80019fa:	4413      	add	r3, r2
 80019fc:	683a      	ldr	r2, [r7, #0]
 80019fe:	6879      	ldr	r1, [r7, #4]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f016 fd15 	bl	8018430 <memcpy>
    DataBuffer.counter += len;
 8001a06:	4b38      	ldr	r3, [pc, #224]	; (8001ae8 <WriteToBuff+0x138>)
 8001a08:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	4413      	add	r3, r2
 8001a10:	4a35      	ldr	r2, [pc, #212]	; (8001ae8 <WriteToBuff+0x138>)
 8001a12:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
    if(f_write(&myFILE, DataBuffer.Data.DataBuff1, sizeof(DataBuffer.Data.DataBuff1), &testByte) == 0){
 8001a16:	4b35      	ldr	r3, [pc, #212]	; (8001aec <WriteToBuff+0x13c>)
 8001a18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a1c:	4932      	ldr	r1, [pc, #200]	; (8001ae8 <WriteToBuff+0x138>)
 8001a1e:	4834      	ldr	r0, [pc, #208]	; (8001af0 <WriteToBuff+0x140>)
 8001a20:	f015 fd55 	bl	80174ce <f_write>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d10d      	bne.n	8001a46 <WriteToBuff+0x96>

      memset(DataBuffer.Data.DataBuff2, 0, sizeof(DataBuffer.Data.DataBuff2)); //Clear next buffer after writing
 8001a2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a2e:	2100      	movs	r1, #0
 8001a30:	4830      	ldr	r0, [pc, #192]	; (8001af4 <WriteToBuff+0x144>)
 8001a32:	f016 fd08 	bl	8018446 <memset>
    	f_sync(&myFILE);
 8001a36:	482e      	ldr	r0, [pc, #184]	; (8001af0 <WriteToBuff+0x140>)
 8001a38:	f015 febe 	bl	80177b8 <f_sync>
      printf("Buffer 1 has been written\n");
 8001a3c:	482e      	ldr	r0, [pc, #184]	; (8001af8 <WriteToBuff+0x148>)
 8001a3e:	f016 fe27 	bl	8018690 <puts>
      return 1; //buffer 1 has been written
 8001a42:	2301      	movs	r3, #1
 8001a44:	e04c      	b.n	8001ae0 <WriteToBuff+0x130>
    }
    return 4; //could not write :(
 8001a46:	2304      	movs	r3, #4
 8001a48:	e04a      	b.n	8001ae0 <WriteToBuff+0x130>
  }

  if(DataBuffer.counter + len >= 2*Bufflength){
 8001a4a:	4b27      	ldr	r3, [pc, #156]	; (8001ae8 <WriteToBuff+0x138>)
 8001a4c:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	4413      	add	r3, r2
 8001a54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a58:	d32f      	bcc.n	8001aba <WriteToBuff+0x10a>
    DataBuffer.counter = 0;
 8001a5a:	4b23      	ldr	r3, [pc, #140]	; (8001ae8 <WriteToBuff+0x138>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
    memcpy((DataBuffer.Data.DataBuff + DataBuffer.counter), Data, len);
 8001a62:	4b21      	ldr	r3, [pc, #132]	; (8001ae8 <WriteToBuff+0x138>)
 8001a64:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8001a68:	4a1f      	ldr	r2, [pc, #124]	; (8001ae8 <WriteToBuff+0x138>)
 8001a6a:	4413      	add	r3, r2
 8001a6c:	683a      	ldr	r2, [r7, #0]
 8001a6e:	6879      	ldr	r1, [r7, #4]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f016 fcdd 	bl	8018430 <memcpy>
    DataBuffer.counter += len;
 8001a76:	4b1c      	ldr	r3, [pc, #112]	; (8001ae8 <WriteToBuff+0x138>)
 8001a78:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	4413      	add	r3, r2
 8001a80:	4a19      	ldr	r2, [pc, #100]	; (8001ae8 <WriteToBuff+0x138>)
 8001a82:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
    if(f_write(&myFILE, DataBuffer.Data.DataBuff2, sizeof(DataBuffer.Data.DataBuff2), &testByte) == 0){
 8001a86:	4b19      	ldr	r3, [pc, #100]	; (8001aec <WriteToBuff+0x13c>)
 8001a88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a8c:	4919      	ldr	r1, [pc, #100]	; (8001af4 <WriteToBuff+0x144>)
 8001a8e:	4818      	ldr	r0, [pc, #96]	; (8001af0 <WriteToBuff+0x140>)
 8001a90:	f015 fd1d 	bl	80174ce <f_write>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d10d      	bne.n	8001ab6 <WriteToBuff+0x106>
      memset(DataBuffer.Data.DataBuff1, 0, sizeof(DataBuffer.Data.DataBuff1)); //Clear next buffer after writing
 8001a9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	4811      	ldr	r0, [pc, #68]	; (8001ae8 <WriteToBuff+0x138>)
 8001aa2:	f016 fcd0 	bl	8018446 <memset>
    	f_sync(&myFILE);
 8001aa6:	4812      	ldr	r0, [pc, #72]	; (8001af0 <WriteToBuff+0x140>)
 8001aa8:	f015 fe86 	bl	80177b8 <f_sync>
      printf("Buffer 2 has been written\n");
 8001aac:	4813      	ldr	r0, [pc, #76]	; (8001afc <WriteToBuff+0x14c>)
 8001aae:	f016 fdef 	bl	8018690 <puts>
      return 2; //buffer 2 has been written
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	e014      	b.n	8001ae0 <WriteToBuff+0x130>
    }
    return 4; //could not write :(
 8001ab6:	2304      	movs	r3, #4
 8001ab8:	e012      	b.n	8001ae0 <WriteToBuff+0x130>
  }
/*if(DataBuffer.counter + len >= 2*Bufflength){
	f_write(&myFILE, DataBuffer.Data.DataBuff, sizeof(DataBuffer.Data.DataBuff), &testByte);
	DataBuffer.counter = 0;
}*/
  memcpy((DataBuffer.Data.DataBuff + DataBuffer.counter), Data, len);
 8001aba:	4b0b      	ldr	r3, [pc, #44]	; (8001ae8 <WriteToBuff+0x138>)
 8001abc:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8001ac0:	4a09      	ldr	r2, [pc, #36]	; (8001ae8 <WriteToBuff+0x138>)
 8001ac2:	4413      	add	r3, r2
 8001ac4:	683a      	ldr	r2, [r7, #0]
 8001ac6:	6879      	ldr	r1, [r7, #4]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f016 fcb1 	bl	8018430 <memcpy>
  DataBuffer.counter += len;
 8001ace:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <WriteToBuff+0x138>)
 8001ad0:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	4a03      	ldr	r2, [pc, #12]	; (8001ae8 <WriteToBuff+0x138>)
 8001ada:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
  return 0; //moved data to buffer
 8001ade:	2300      	movs	r3, #0
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	24000320 	.word	0x24000320
 8001aec:	240010c8 	.word	0x240010c8
 8001af0:	24000b90 	.word	0x24000b90
 8001af4:	24000720 	.word	0x24000720
 8001af8:	08019c74 	.word	0x08019c74
 8001afc:	08019c90 	.word	0x08019c90

08001b00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b02:	f2ad 7df4 	subw	sp, sp, #2036	; 0x7f4
 8001b06:	af22      	add	r7, sp, #136	; 0x88
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b08:	f001 fcb6 	bl	8003478 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b0c:	f000 fbe2 	bl	80022d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b10:	f000 ff42 	bl	8002998 <MX_GPIO_Init>
  MX_DMA_Init();
 8001b14:	f000 ff20 	bl	8002958 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 8001b18:	f000 fe0e 	bl	8002738 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8001b1c:	f010 fb4e 	bl	80121bc <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8001b20:	f015 ff4e 	bl	80179c0 <MX_USB_DEVICE_Init>
  MX_FDCAN1_Init();
 8001b24:	f000 fce0 	bl	80024e8 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8001b28:	f000 fd44 	bl	80025b4 <MX_FDCAN2_Init>
  MX_UART8_Init();
 8001b2c:	f000 fe7c 	bl	8002828 <MX_UART8_Init>
  MX_USART3_UART_Init();
 8001b30:	f000 fec6 	bl	80028c0 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8001b34:	f000 fe22 	bl	800277c <MX_SPI1_Init>
  MX_RTC_Init();
 8001b38:	f000 fda0 	bl	800267c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8001b3c:	2101      	movs	r1, #1
 8001b3e:	488a      	ldr	r0, [pc, #552]	; (8001d68 <main+0x268>)
 8001b40:	f005 fa5f 	bl	8007002 <HAL_GPIO_TogglePin>
  //Telemetry
  NRF24_begin(TELE_CE_GPIO_Port, TELE_CS_Pin, TELE_CE_Pin, hspi1);
 8001b44:	4c89      	ldr	r4, [pc, #548]	; (8001d6c <main+0x26c>)
 8001b46:	4668      	mov	r0, sp
 8001b48:	1d23      	adds	r3, r4, #4
 8001b4a:	2284      	movs	r2, #132	; 0x84
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	f016 fc6f 	bl	8018430 <memcpy>
 8001b52:	6823      	ldr	r3, [r4, #0]
 8001b54:	2201      	movs	r2, #1
 8001b56:	2102      	movs	r1, #2
 8001b58:	4885      	ldr	r0, [pc, #532]	; (8001d70 <main+0x270>)
 8001b5a:	f7ff f821 	bl	8000ba0 <NRF24_begin>
    nrf24_DebugUART_Init(huart3);
 8001b5e:	4c85      	ldr	r4, [pc, #532]	; (8001d74 <main+0x274>)
 8001b60:	4668      	mov	r0, sp
 8001b62:	f104 0310 	add.w	r3, r4, #16
 8001b66:	227c      	movs	r2, #124	; 0x7c
 8001b68:	4619      	mov	r1, r3
 8001b6a:	f016 fc61 	bl	8018430 <memcpy>
 8001b6e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001b72:	f7ff ff05 	bl	8001980 <nrf24_DebugUART_Init>



    // TRANSMIT NO ACK //
    NRF24_stopListening();
 8001b76:	f7ff f8f3 	bl	8000d60 <NRF24_stopListening>
    NRF24_openWritingPipe(TxpipeAddrs);
 8001b7a:	4b7f      	ldr	r3, [pc, #508]	; (8001d78 <main+0x278>)
 8001b7c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001b80:	4618      	mov	r0, r3
 8001b82:	4621      	mov	r1, r4
 8001b84:	f7ff f8f8 	bl	8000d78 <NRF24_openWritingPipe>
    NRF24_setAutoAck(false);
 8001b88:	2000      	movs	r0, #0
 8001b8a:	f7ff f979 	bl	8000e80 <NRF24_setAutoAck>
    NRF24_setChannel(42);
 8001b8e:	202a      	movs	r0, #42	; 0x2a
 8001b90:	f7ff f931 	bl	8000df6 <NRF24_setChannel>
    NRF24_setPayloadSize(32);
 8001b94:	2020      	movs	r0, #32
 8001b96:	f7ff f943 	bl	8000e20 <NRF24_setPayloadSize>

    printRadioSettings();
 8001b9a:	f7ff fa5f 	bl	800105c <printRadioSettings>
  //END Telemetry
  printf("Starting\n");
 8001b9e:	4877      	ldr	r0, [pc, #476]	; (8001d7c <main+0x27c>)
 8001ba0:	f016 fd76 	bl	8018690 <puts>
  FDCAN_Config(&hfdcan1);
 8001ba4:	4876      	ldr	r0, [pc, #472]	; (8001d80 <main+0x280>)
 8001ba6:	f7fe fd73 	bl	8000690 <FDCAN_Config>
  //GPS DMA
  HAL_UART_Receive_DMA(&huart3, (uint8_t *)rxBuf, BUFFLENGTH);
 8001baa:	2246      	movs	r2, #70	; 0x46
 8001bac:	4975      	ldr	r1, [pc, #468]	; (8001d84 <main+0x284>)
 8001bae:	4871      	ldr	r0, [pc, #452]	; (8001d74 <main+0x274>)
 8001bb0:	f00d f866 	bl	800ec80 <HAL_UART_Receive_DMA>
  HAL_Delay(1000);//GPS required this in testing, maybe remove?
 8001bb4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001bb8:	f001 fcf0 	bl	800359c <HAL_Delay>
  //variables required for 10Hz GPS
  uint16_t measRate = 100;
 8001bbc:	2364      	movs	r3, #100	; 0x64
 8001bbe:	f8a7 3756 	strh.w	r3, [r7, #1878]	; 0x756
  uint16_t navRate = 1;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	f8a7 3754 	strh.w	r3, [r7, #1876]	; 0x754
  uint16_t timeRef = 0;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	f8a7 3752 	strh.w	r3, [r7, #1874]	; 0x752
  gps_rate_config(&huart3, measRate, navRate, timeRef);
 8001bce:	f8b7 3752 	ldrh.w	r3, [r7, #1874]	; 0x752
 8001bd2:	f8b7 2754 	ldrh.w	r2, [r7, #1876]	; 0x754
 8001bd6:	f8b7 1756 	ldrh.w	r1, [r7, #1878]	; 0x756
 8001bda:	4866      	ldr	r0, [pc, #408]	; (8001d74 <main+0x274>)
 8001bdc:	f7fe fe82 	bl	80008e4 <gps_rate_config>

  gps_msg_config(&huart3, "DTM", 0);//ERROR
 8001be0:	2200      	movs	r2, #0
 8001be2:	4969      	ldr	r1, [pc, #420]	; (8001d88 <main+0x288>)
 8001be4:	4863      	ldr	r0, [pc, #396]	; (8001d74 <main+0x274>)
 8001be6:	f7fe fe0d 	bl	8000804 <gps_msg_config>
  gps_msg_config(&huart3, "GAQ", 0);
 8001bea:	2200      	movs	r2, #0
 8001bec:	4967      	ldr	r1, [pc, #412]	; (8001d8c <main+0x28c>)
 8001bee:	4861      	ldr	r0, [pc, #388]	; (8001d74 <main+0x274>)
 8001bf0:	f7fe fe08 	bl	8000804 <gps_msg_config>
  gps_msg_config(&huart3, "GBQ", 0);
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	4966      	ldr	r1, [pc, #408]	; (8001d90 <main+0x290>)
 8001bf8:	485e      	ldr	r0, [pc, #376]	; (8001d74 <main+0x274>)
 8001bfa:	f7fe fe03 	bl	8000804 <gps_msg_config>
  gps_msg_config(&huart3, "GBS", 0);//ERROR
 8001bfe:	2200      	movs	r2, #0
 8001c00:	4964      	ldr	r1, [pc, #400]	; (8001d94 <main+0x294>)
 8001c02:	485c      	ldr	r0, [pc, #368]	; (8001d74 <main+0x274>)
 8001c04:	f7fe fdfe 	bl	8000804 <gps_msg_config>
  gps_msg_config(&huart3, "GGA", 0);//ERROR
 8001c08:	2200      	movs	r2, #0
 8001c0a:	4963      	ldr	r1, [pc, #396]	; (8001d98 <main+0x298>)
 8001c0c:	4859      	ldr	r0, [pc, #356]	; (8001d74 <main+0x274>)
 8001c0e:	f7fe fdf9 	bl	8000804 <gps_msg_config>
  gps_msg_config(&huart3, "GLL", 0);//ERROR
 8001c12:	2200      	movs	r2, #0
 8001c14:	4961      	ldr	r1, [pc, #388]	; (8001d9c <main+0x29c>)
 8001c16:	4857      	ldr	r0, [pc, #348]	; (8001d74 <main+0x274>)
 8001c18:	f7fe fdf4 	bl	8000804 <gps_msg_config>
  gps_msg_config(&huart3, "GLQ", 0);
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	4960      	ldr	r1, [pc, #384]	; (8001da0 <main+0x2a0>)
 8001c20:	4854      	ldr	r0, [pc, #336]	; (8001d74 <main+0x274>)
 8001c22:	f7fe fdef 	bl	8000804 <gps_msg_config>
  gps_msg_config(&huart3, "GNQ", 0);
 8001c26:	2200      	movs	r2, #0
 8001c28:	495e      	ldr	r1, [pc, #376]	; (8001da4 <main+0x2a4>)
 8001c2a:	4852      	ldr	r0, [pc, #328]	; (8001d74 <main+0x274>)
 8001c2c:	f7fe fdea 	bl	8000804 <gps_msg_config>
  gps_msg_config(&huart3, "GNS", 0);//ERROR
 8001c30:	2200      	movs	r2, #0
 8001c32:	495d      	ldr	r1, [pc, #372]	; (8001da8 <main+0x2a8>)
 8001c34:	484f      	ldr	r0, [pc, #316]	; (8001d74 <main+0x274>)
 8001c36:	f7fe fde5 	bl	8000804 <gps_msg_config>
  gps_msg_config(&huart3, "GPQ", 0);
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	495b      	ldr	r1, [pc, #364]	; (8001dac <main+0x2ac>)
 8001c3e:	484d      	ldr	r0, [pc, #308]	; (8001d74 <main+0x274>)
 8001c40:	f7fe fde0 	bl	8000804 <gps_msg_config>
  gps_msg_config(&huart3, "GRS", 0);//ERROR
 8001c44:	2200      	movs	r2, #0
 8001c46:	495a      	ldr	r1, [pc, #360]	; (8001db0 <main+0x2b0>)
 8001c48:	484a      	ldr	r0, [pc, #296]	; (8001d74 <main+0x274>)
 8001c4a:	f7fe fddb 	bl	8000804 <gps_msg_config>
  gps_msg_config(&huart3, "GSA", 0);//ERROR
 8001c4e:	2200      	movs	r2, #0
 8001c50:	4958      	ldr	r1, [pc, #352]	; (8001db4 <main+0x2b4>)
 8001c52:	4848      	ldr	r0, [pc, #288]	; (8001d74 <main+0x274>)
 8001c54:	f7fe fdd6 	bl	8000804 <gps_msg_config>
  gps_msg_config(&huart3, "GST", 0);//ERROR
 8001c58:	2200      	movs	r2, #0
 8001c5a:	4957      	ldr	r1, [pc, #348]	; (8001db8 <main+0x2b8>)
 8001c5c:	4845      	ldr	r0, [pc, #276]	; (8001d74 <main+0x274>)
 8001c5e:	f7fe fdd1 	bl	8000804 <gps_msg_config>
  gps_msg_config(&huart3, "GSV", 0);//ERROR
 8001c62:	2200      	movs	r2, #0
 8001c64:	4955      	ldr	r1, [pc, #340]	; (8001dbc <main+0x2bc>)
 8001c66:	4843      	ldr	r0, [pc, #268]	; (8001d74 <main+0x274>)
 8001c68:	f7fe fdcc 	bl	8000804 <gps_msg_config>
  gps_msg_config(&huart3, "RLM", 0);
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	4954      	ldr	r1, [pc, #336]	; (8001dc0 <main+0x2c0>)
 8001c70:	4840      	ldr	r0, [pc, #256]	; (8001d74 <main+0x274>)
 8001c72:	f7fe fdc7 	bl	8000804 <gps_msg_config>
  gps_msg_config(&huart3, "RMC", 1);//ERROR
 8001c76:	2201      	movs	r2, #1
 8001c78:	4952      	ldr	r1, [pc, #328]	; (8001dc4 <main+0x2c4>)
 8001c7a:	483e      	ldr	r0, [pc, #248]	; (8001d74 <main+0x274>)
 8001c7c:	f7fe fdc2 	bl	8000804 <gps_msg_config>
  gps_msg_config(&huart3, "TXT", 0);
 8001c80:	2200      	movs	r2, #0
 8001c82:	4951      	ldr	r1, [pc, #324]	; (8001dc8 <main+0x2c8>)
 8001c84:	483b      	ldr	r0, [pc, #236]	; (8001d74 <main+0x274>)
 8001c86:	f7fe fdbd 	bl	8000804 <gps_msg_config>
  gps_msg_config(&huart3, "VLW", 0);//ERROR
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	494f      	ldr	r1, [pc, #316]	; (8001dcc <main+0x2cc>)
 8001c8e:	4839      	ldr	r0, [pc, #228]	; (8001d74 <main+0x274>)
 8001c90:	f7fe fdb8 	bl	8000804 <gps_msg_config>
  gps_msg_config(&huart3, "VTG", 0);//ERROR
 8001c94:	2200      	movs	r2, #0
 8001c96:	494e      	ldr	r1, [pc, #312]	; (8001dd0 <main+0x2d0>)
 8001c98:	4836      	ldr	r0, [pc, #216]	; (8001d74 <main+0x274>)
 8001c9a:	f7fe fdb3 	bl	8000804 <gps_msg_config>
  gps_msg_config(&huart3, "ZDA", 0);//ERROR
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	494c      	ldr	r1, [pc, #304]	; (8001dd4 <main+0x2d4>)
 8001ca2:	4834      	ldr	r0, [pc, #208]	; (8001d74 <main+0x274>)
 8001ca4:	f7fe fdae 	bl	8000804 <gps_msg_config>

  if(f_mount(&myFATAFS, SDPath, 1) == FR_OK){
 8001ca8:	2201      	movs	r2, #1
 8001caa:	494b      	ldr	r1, [pc, #300]	; (8001dd8 <main+0x2d8>)
 8001cac:	484b      	ldr	r0, [pc, #300]	; (8001ddc <main+0x2dc>)
 8001cae:	f015 f8cb 	bl	8016e48 <f_mount>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	f040 80b3 	bne.w	8001e20 <main+0x320>
  	  //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
  	  char myPath[] = "test.csv\0";
 8001cba:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001cbe:	4a48      	ldr	r2, [pc, #288]	; (8001de0 <main+0x2e0>)
 8001cc0:	ca07      	ldmia	r2, {r0, r1, r2}
 8001cc2:	c303      	stmia	r3!, {r0, r1}
 8001cc4:	801a      	strh	r2, [r3, #0]
      char ConfigPath[] ="Config.csv\0";
 8001cc6:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8001cca:	4a46      	ldr	r2, [pc, #280]	; (8001de4 <main+0x2e4>)
 8001ccc:	ca07      	ldmia	r2, {r0, r1, r2}
 8001cce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      char ConfigParams[1000];

      //Tries to open config File
      if(f_open(&Config, ConfigPath, FA_READ) == FR_NO_FILE){
 8001cd2:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4843      	ldr	r0, [pc, #268]	; (8001de8 <main+0x2e8>)
 8001cdc:	f015 f8fa 	bl	8016ed4 <f_open>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b04      	cmp	r3, #4
 8001ce4:	f040 8088 	bne.w	8001df8 <main+0x2f8>
        //If file doesnt exist creates a file using hard coded defualts and passes those to internal config array
        f_open(&Config, ConfigPath, FA_WRITE | FA_CREATE_ALWAYS);
 8001ce8:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8001cec:	220a      	movs	r2, #10
 8001cee:	4619      	mov	r1, r3
 8001cf0:	483d      	ldr	r0, [pc, #244]	; (8001de8 <main+0x2e8>)
 8001cf2:	f015 f8ef 	bl	8016ed4 <f_open>

        sprintf(ConfigParams, "ID,Device,Bytes,Rate(HZ),Type,Description\n");
 8001cf6:	1d3b      	adds	r3, r7, #4
 8001cf8:	4a3c      	ldr	r2, [pc, #240]	; (8001dec <main+0x2ec>)
 8001cfa:	461c      	mov	r4, r3
 8001cfc:	4615      	mov	r5, r2
 8001cfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d06:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001d0a:	c403      	stmia	r4!, {r0, r1}
 8001d0c:	8022      	strh	r2, [r4, #0]
 8001d0e:	3402      	adds	r4, #2
 8001d10:	0c13      	lsrs	r3, r2, #16
 8001d12:	7023      	strb	r3, [r4, #0]
        sprintf(ConfigParams + strlen(ConfigParams),"0x50,Datalogger,8,0.20,uint32_t,HIGH:FileNO LOW:millis,\n");
 8001d14:	1d3b      	adds	r3, r7, #4
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7fe fae2 	bl	80002e0 <strlen>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	1d3b      	adds	r3, r7, #4
 8001d20:	4413      	add	r3, r2
 8001d22:	4a33      	ldr	r2, [pc, #204]	; (8001df0 <main+0x2f0>)
 8001d24:	4614      	mov	r4, r2
 8001d26:	469c      	mov	ip, r3
 8001d28:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001d2c:	4665      	mov	r5, ip
 8001d2e:	4626      	mov	r6, r4
 8001d30:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001d32:	6028      	str	r0, [r5, #0]
 8001d34:	6069      	str	r1, [r5, #4]
 8001d36:	60aa      	str	r2, [r5, #8]
 8001d38:	60eb      	str	r3, [r5, #12]
 8001d3a:	3410      	adds	r4, #16
 8001d3c:	f10c 0c10 	add.w	ip, ip, #16
 8001d40:	4574      	cmp	r4, lr
 8001d42:	d1f3      	bne.n	8001d2c <main+0x22c>
 8001d44:	4662      	mov	r2, ip
 8001d46:	4623      	mov	r3, r4
 8001d48:	cb03      	ldmia	r3!, {r0, r1}
 8001d4a:	6010      	str	r0, [r2, #0]
 8001d4c:	6051      	str	r1, [r2, #4]
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	7213      	strb	r3, [r2, #8]

        f_write(&Config, ConfigParams, strlen(ConfigParams), &ConfByteW);
 8001d52:	1d3b      	adds	r3, r7, #4
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7fe fac3 	bl	80002e0 <strlen>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	1d39      	adds	r1, r7, #4
 8001d5e:	4b25      	ldr	r3, [pc, #148]	; (8001df4 <main+0x2f4>)
 8001d60:	4821      	ldr	r0, [pc, #132]	; (8001de8 <main+0x2e8>)
 8001d62:	f015 fbb4 	bl	80174ce <f_write>
 8001d66:	e051      	b.n	8001e0c <main+0x30c>
 8001d68:	58020400 	.word	0x58020400
 8001d6c:	24001618 	.word	0x24001618
 8001d70:	58020000 	.word	0x58020000
 8001d74:	240013bc 	.word	0x240013bc
 8001d78:	24000000 	.word	0x24000000
 8001d7c:	08019cac 	.word	0x08019cac
 8001d80:	240014ec 	.word	0x240014ec
 8001d84:	240012fc 	.word	0x240012fc
 8001d88:	08019cb8 	.word	0x08019cb8
 8001d8c:	08019cbc 	.word	0x08019cbc
 8001d90:	08019cc0 	.word	0x08019cc0
 8001d94:	08019cc4 	.word	0x08019cc4
 8001d98:	08019cc8 	.word	0x08019cc8
 8001d9c:	08019ccc 	.word	0x08019ccc
 8001da0:	08019cd0 	.word	0x08019cd0
 8001da4:	08019cd4 	.word	0x08019cd4
 8001da8:	08019cd8 	.word	0x08019cd8
 8001dac:	08019cdc 	.word	0x08019cdc
 8001db0:	08019ce0 	.word	0x08019ce0
 8001db4:	08019ce4 	.word	0x08019ce4
 8001db8:	08019ce8 	.word	0x08019ce8
 8001dbc:	08019cec 	.word	0x08019cec
 8001dc0:	08019cf0 	.word	0x08019cf0
 8001dc4:	08019cf4 	.word	0x08019cf4
 8001dc8:	08019cf8 	.word	0x08019cf8
 8001dcc:	08019cfc 	.word	0x08019cfc
 8001dd0:	08019d00 	.word	0x08019d00
 8001dd4:	08019d04 	.word	0x08019d04
 8001dd8:	24001748 	.word	0x24001748
 8001ddc:	24000dc8 	.word	0x24000dc8
 8001de0:	08019d90 	.word	0x08019d90
 8001de4:	08019d9c 	.word	0x08019d9c
 8001de8:	240010cc 	.word	0x240010cc
 8001dec:	08019d08 	.word	0x08019d08
 8001df0:	08019d34 	.word	0x08019d34
 8001df4:	24000dc4 	.word	0x24000dc4
      }else{
        //If file does exist reads in config parameters to internal config array
        f_read(&Config, ConfigParams, strlen(ConfigParams), &ConfByteR);
 8001df8:	1d3b      	adds	r3, r7, #4
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7fe fa70 	bl	80002e0 <strlen>
 8001e00:	4602      	mov	r2, r0
 8001e02:	1d39      	adds	r1, r7, #4
 8001e04:	4b98      	ldr	r3, [pc, #608]	; (8002068 <main+0x568>)
 8001e06:	4899      	ldr	r0, [pc, #612]	; (800206c <main+0x56c>)
 8001e08:	f015 fa22 	bl	8017250 <f_read>
      }
      f_close(&Config);
 8001e0c:	4897      	ldr	r0, [pc, #604]	; (800206c <main+0x56c>)
 8001e0e:	f015 fd51 	bl	80178b4 <f_close>
  	  f_open(&myFILE, myPath, FA_WRITE | FA_CREATE_ALWAYS);
 8001e12:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001e16:	220a      	movs	r2, #10
 8001e18:	4619      	mov	r1, r3
 8001e1a:	4895      	ldr	r0, [pc, #596]	; (8002070 <main+0x570>)
 8001e1c:	f015 f85a 	bl	8016ed4 <f_open>

  extern int GPS_flag;
  extern int FDCAN_Flag;
  extern int CAN_Flag;

  sTime.SecondFraction = 999;
 8001e20:	4b94      	ldr	r3, [pc, #592]	; (8002074 <main+0x574>)
 8001e22:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e26:	609a      	str	r2, [r3, #8]
  uint32_t LocalTime = HAL_GetTick();
 8001e28:	f001 fbac 	bl	8003584 <HAL_GetTick>
 8001e2c:	f8c7 074c 	str.w	r0, [r7, #1868]	; 0x74c
  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001e30:	2200      	movs	r2, #0
 8001e32:	4990      	ldr	r1, [pc, #576]	; (8002074 <main+0x574>)
 8001e34:	4890      	ldr	r0, [pc, #576]	; (8002078 <main+0x578>)
 8001e36:	f009 fc07 	bl	800b648 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	498f      	ldr	r1, [pc, #572]	; (800207c <main+0x57c>)
 8001e3e:	488e      	ldr	r0, [pc, #568]	; (8002078 <main+0x578>)
 8001e40:	f009 fce6 	bl	800b810 <HAL_RTC_GetDate>

  sTime.SubSeconds -= LocalTime % 1000;
 8001e44:	4b8b      	ldr	r3, [pc, #556]	; (8002074 <main+0x574>)
 8001e46:	6859      	ldr	r1, [r3, #4]
 8001e48:	f8d7 274c 	ldr.w	r2, [r7, #1868]	; 0x74c
 8001e4c:	4b8c      	ldr	r3, [pc, #560]	; (8002080 <main+0x580>)
 8001e4e:	fba3 0302 	umull	r0, r3, r3, r2
 8001e52:	099b      	lsrs	r3, r3, #6
 8001e54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e58:	fb00 f303 	mul.w	r3, r0, r3
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	1acb      	subs	r3, r1, r3
 8001e60:	4a84      	ldr	r2, [pc, #528]	; (8002074 <main+0x574>)
 8001e62:	6053      	str	r3, [r2, #4]
  LocalTime = LocalTime/1000;
 8001e64:	f8d7 374c 	ldr.w	r3, [r7, #1868]	; 0x74c
 8001e68:	4a85      	ldr	r2, [pc, #532]	; (8002080 <main+0x580>)
 8001e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e6e:	099b      	lsrs	r3, r3, #6
 8001e70:	f8c7 374c 	str.w	r3, [r7, #1868]	; 0x74c
  sTime.Seconds -= LocalTime % 60;
 8001e74:	4b7f      	ldr	r3, [pc, #508]	; (8002074 <main+0x574>)
 8001e76:	7898      	ldrb	r0, [r3, #2]
 8001e78:	f8d7 174c 	ldr.w	r1, [r7, #1868]	; 0x74c
 8001e7c:	4b81      	ldr	r3, [pc, #516]	; (8002084 <main+0x584>)
 8001e7e:	fba3 2301 	umull	r2, r3, r3, r1
 8001e82:	095a      	lsrs	r2, r3, #5
 8001e84:	4613      	mov	r3, r2
 8001e86:	011b      	lsls	r3, r3, #4
 8001e88:	1a9b      	subs	r3, r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	1aca      	subs	r2, r1, r3
 8001e8e:	b2d3      	uxtb	r3, r2
 8001e90:	1ac3      	subs	r3, r0, r3
 8001e92:	b2da      	uxtb	r2, r3
 8001e94:	4b77      	ldr	r3, [pc, #476]	; (8002074 <main+0x574>)
 8001e96:	709a      	strb	r2, [r3, #2]
  LocalTime = LocalTime/60;
 8001e98:	f8d7 374c 	ldr.w	r3, [r7, #1868]	; 0x74c
 8001e9c:	4a79      	ldr	r2, [pc, #484]	; (8002084 <main+0x584>)
 8001e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea2:	095b      	lsrs	r3, r3, #5
 8001ea4:	f8c7 374c 	str.w	r3, [r7, #1868]	; 0x74c
  sTime.Minutes -= LocalTime % 60;
 8001ea8:	4b72      	ldr	r3, [pc, #456]	; (8002074 <main+0x574>)
 8001eaa:	7858      	ldrb	r0, [r3, #1]
 8001eac:	f8d7 174c 	ldr.w	r1, [r7, #1868]	; 0x74c
 8001eb0:	4b74      	ldr	r3, [pc, #464]	; (8002084 <main+0x584>)
 8001eb2:	fba3 2301 	umull	r2, r3, r3, r1
 8001eb6:	095a      	lsrs	r2, r3, #5
 8001eb8:	4613      	mov	r3, r2
 8001eba:	011b      	lsls	r3, r3, #4
 8001ebc:	1a9b      	subs	r3, r3, r2
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	1aca      	subs	r2, r1, r3
 8001ec2:	b2d3      	uxtb	r3, r2
 8001ec4:	1ac3      	subs	r3, r0, r3
 8001ec6:	b2da      	uxtb	r2, r3
 8001ec8:	4b6a      	ldr	r3, [pc, #424]	; (8002074 <main+0x574>)
 8001eca:	705a      	strb	r2, [r3, #1]
  LocalTime = LocalTime/60;
 8001ecc:	f8d7 374c 	ldr.w	r3, [r7, #1868]	; 0x74c
 8001ed0:	4a6c      	ldr	r2, [pc, #432]	; (8002084 <main+0x584>)
 8001ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed6:	095b      	lsrs	r3, r3, #5
 8001ed8:	f8c7 374c 	str.w	r3, [r7, #1868]	; 0x74c
  sTime.Hours -= LocalTime % 60;
 8001edc:	4b65      	ldr	r3, [pc, #404]	; (8002074 <main+0x574>)
 8001ede:	7818      	ldrb	r0, [r3, #0]
 8001ee0:	f8d7 174c 	ldr.w	r1, [r7, #1868]	; 0x74c
 8001ee4:	4b67      	ldr	r3, [pc, #412]	; (8002084 <main+0x584>)
 8001ee6:	fba3 2301 	umull	r2, r3, r3, r1
 8001eea:	095a      	lsrs	r2, r3, #5
 8001eec:	4613      	mov	r3, r2
 8001eee:	011b      	lsls	r3, r3, #4
 8001ef0:	1a9b      	subs	r3, r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	1aca      	subs	r2, r1, r3
 8001ef6:	b2d3      	uxtb	r3, r2
 8001ef8:	1ac3      	subs	r3, r0, r3
 8001efa:	b2da      	uxtb	r2, r3
 8001efc:	4b5d      	ldr	r3, [pc, #372]	; (8002074 <main+0x574>)
 8001efe:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char CanWrite[400];
  int CW = 0;
 8001f00:	2300      	movs	r3, #0
 8001f02:	f8c7 3764 	str.w	r3, [r7, #1892]	; 0x764
  char CanFDWrite[400];
  int CFDW = 0;
 8001f06:	2300      	movs	r3, #0
 8001f08:	f8c7 3760 	str.w	r3, [r7, #1888]	; 0x760

  while (end_flag){
 8001f0c:	e1bb      	b.n	8002286 <main+0x786>

	  if(GPS_flag){
 8001f0e:	4b5e      	ldr	r3, [pc, #376]	; (8002088 <main+0x588>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d006      	beq.n	8001f24 <main+0x424>
		  WriteToBuff(rxBuf, sizeof(rxBuf));
 8001f16:	2146      	movs	r1, #70	; 0x46
 8001f18:	485c      	ldr	r0, [pc, #368]	; (800208c <main+0x58c>)
 8001f1a:	f7ff fd49 	bl	80019b0 <WriteToBuff>
		  GPS_flag=0;
 8001f1e:	4b5a      	ldr	r3, [pc, #360]	; (8002088 <main+0x588>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
	  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);


	  printf("Date:%u Month:%u Year:%u\n", sDate.Date, sDate.Month, sDate.Year);
	  printf("Hours:%u Minutes:%u Seconds:%u\n", sTime.Hours, sTime.Minutes, sTime.Seconds);*/
	  if(FDCAN_Flag){
 8001f24:	4b5a      	ldr	r3, [pc, #360]	; (8002090 <main+0x590>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	f000 80e1 	beq.w	80020f0 <main+0x5f0>

		  RTC_TimeTypeDef lTime = sTime;
 8001f2e:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8001f32:	4a50      	ldr	r2, [pc, #320]	; (8002074 <main+0x574>)
 8001f34:	461c      	mov	r4, r3
 8001f36:	4615      	mov	r5, r2
 8001f38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f3c:	682b      	ldr	r3, [r5, #0]
 8001f3e:	6023      	str	r3, [r4, #0]
		  LocalTime = CanFDFrame.time;
 8001f40:	4b54      	ldr	r3, [pc, #336]	; (8002094 <main+0x594>)
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	f8c7 374c 	str.w	r3, [r7, #1868]	; 0x74c
		  lTime.SubSeconds += LocalTime % 1000;
 8001f48:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8001f4c:	6859      	ldr	r1, [r3, #4]
 8001f4e:	f8d7 274c 	ldr.w	r2, [r7, #1868]	; 0x74c
 8001f52:	4b4b      	ldr	r3, [pc, #300]	; (8002080 <main+0x580>)
 8001f54:	fba3 0302 	umull	r0, r3, r3, r2
 8001f58:	099b      	lsrs	r3, r3, #6
 8001f5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f5e:	fb00 f303 	mul.w	r3, r0, r3
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	18ca      	adds	r2, r1, r3
 8001f66:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8001f6a:	605a      	str	r2, [r3, #4]
		  LocalTime = LocalTime/1000;
 8001f6c:	f8d7 374c 	ldr.w	r3, [r7, #1868]	; 0x74c
 8001f70:	4a43      	ldr	r2, [pc, #268]	; (8002080 <main+0x580>)
 8001f72:	fba2 2303 	umull	r2, r3, r2, r3
 8001f76:	099b      	lsrs	r3, r3, #6
 8001f78:	f8c7 374c 	str.w	r3, [r7, #1868]	; 0x74c
		  lTime.Seconds += LocalTime % 60;
 8001f7c:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8001f80:	7898      	ldrb	r0, [r3, #2]
 8001f82:	f8d7 174c 	ldr.w	r1, [r7, #1868]	; 0x74c
 8001f86:	4b3f      	ldr	r3, [pc, #252]	; (8002084 <main+0x584>)
 8001f88:	fba3 2301 	umull	r2, r3, r3, r1
 8001f8c:	095a      	lsrs	r2, r3, #5
 8001f8e:	4613      	mov	r3, r2
 8001f90:	011b      	lsls	r3, r3, #4
 8001f92:	1a9b      	subs	r3, r3, r2
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	1aca      	subs	r2, r1, r3
 8001f98:	b2d3      	uxtb	r3, r2
 8001f9a:	4403      	add	r3, r0
 8001f9c:	b2da      	uxtb	r2, r3
 8001f9e:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8001fa2:	709a      	strb	r2, [r3, #2]
		  LocalTime = LocalTime/60;
 8001fa4:	f8d7 374c 	ldr.w	r3, [r7, #1868]	; 0x74c
 8001fa8:	4a36      	ldr	r2, [pc, #216]	; (8002084 <main+0x584>)
 8001faa:	fba2 2303 	umull	r2, r3, r2, r3
 8001fae:	095b      	lsrs	r3, r3, #5
 8001fb0:	f8c7 374c 	str.w	r3, [r7, #1868]	; 0x74c
		  lTime.Minutes += LocalTime % 60;
 8001fb4:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8001fb8:	7858      	ldrb	r0, [r3, #1]
 8001fba:	f8d7 174c 	ldr.w	r1, [r7, #1868]	; 0x74c
 8001fbe:	4b31      	ldr	r3, [pc, #196]	; (8002084 <main+0x584>)
 8001fc0:	fba3 2301 	umull	r2, r3, r3, r1
 8001fc4:	095a      	lsrs	r2, r3, #5
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	011b      	lsls	r3, r3, #4
 8001fca:	1a9b      	subs	r3, r3, r2
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	1aca      	subs	r2, r1, r3
 8001fd0:	b2d3      	uxtb	r3, r2
 8001fd2:	4403      	add	r3, r0
 8001fd4:	b2da      	uxtb	r2, r3
 8001fd6:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8001fda:	705a      	strb	r2, [r3, #1]
		  LocalTime = LocalTime/60;
 8001fdc:	f8d7 374c 	ldr.w	r3, [r7, #1868]	; 0x74c
 8001fe0:	4a28      	ldr	r2, [pc, #160]	; (8002084 <main+0x584>)
 8001fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe6:	095b      	lsrs	r3, r3, #5
 8001fe8:	f8c7 374c 	str.w	r3, [r7, #1868]	; 0x74c
		  lTime.Hours += LocalTime % 60;
 8001fec:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8001ff0:	7818      	ldrb	r0, [r3, #0]
 8001ff2:	f8d7 174c 	ldr.w	r1, [r7, #1868]	; 0x74c
 8001ff6:	4b23      	ldr	r3, [pc, #140]	; (8002084 <main+0x584>)
 8001ff8:	fba3 2301 	umull	r2, r3, r3, r1
 8001ffc:	095a      	lsrs	r2, r3, #5
 8001ffe:	4613      	mov	r3, r2
 8002000:	011b      	lsls	r3, r3, #4
 8002002:	1a9b      	subs	r3, r3, r2
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	1aca      	subs	r2, r1, r3
 8002008:	b2d3      	uxtb	r3, r2
 800200a:	4403      	add	r3, r0
 800200c:	b2da      	uxtb	r2, r3
 800200e:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8002012:	701a      	strb	r2, [r3, #0]

		  //date/time, CANID, Data
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,%u,",
				  sDate.Date,sDate.Month,sDate.Year, sTime.Hours,sTime.Minutes,sTime.Seconds,sTime.SubSeconds,
 8002014:	4b19      	ldr	r3, [pc, #100]	; (800207c <main+0x57c>)
 8002016:	789b      	ldrb	r3, [r3, #2]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,%u,",
 8002018:	469c      	mov	ip, r3
				  sDate.Date,sDate.Month,sDate.Year, sTime.Hours,sTime.Minutes,sTime.Seconds,sTime.SubSeconds,
 800201a:	4b18      	ldr	r3, [pc, #96]	; (800207c <main+0x57c>)
 800201c:	785b      	ldrb	r3, [r3, #1]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,%u,",
 800201e:	469e      	mov	lr, r3
				  sDate.Date,sDate.Month,sDate.Year, sTime.Hours,sTime.Minutes,sTime.Seconds,sTime.SubSeconds,
 8002020:	4b16      	ldr	r3, [pc, #88]	; (800207c <main+0x57c>)
 8002022:	78db      	ldrb	r3, [r3, #3]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,%u,",
 8002024:	4619      	mov	r1, r3
				  sDate.Date,sDate.Month,sDate.Year, sTime.Hours,sTime.Minutes,sTime.Seconds,sTime.SubSeconds,
 8002026:	4b13      	ldr	r3, [pc, #76]	; (8002074 <main+0x574>)
 8002028:	781b      	ldrb	r3, [r3, #0]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,%u,",
 800202a:	461c      	mov	r4, r3
				  sDate.Date,sDate.Month,sDate.Year, sTime.Hours,sTime.Minutes,sTime.Seconds,sTime.SubSeconds,
 800202c:	4b11      	ldr	r3, [pc, #68]	; (8002074 <main+0x574>)
 800202e:	785b      	ldrb	r3, [r3, #1]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,%u,",
 8002030:	461d      	mov	r5, r3
				  sDate.Date,sDate.Month,sDate.Year, sTime.Hours,sTime.Minutes,sTime.Seconds,sTime.SubSeconds,
 8002032:	4b10      	ldr	r3, [pc, #64]	; (8002074 <main+0x574>)
 8002034:	789b      	ldrb	r3, [r3, #2]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,%u,",
 8002036:	461e      	mov	r6, r3
 8002038:	4b0e      	ldr	r3, [pc, #56]	; (8002074 <main+0x574>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	4a15      	ldr	r2, [pc, #84]	; (8002094 <main+0x594>)
 800203e:	6812      	ldr	r2, [r2, #0]
 8002040:	f207 402c 	addw	r0, r7, #1068	; 0x42c
 8002044:	9205      	str	r2, [sp, #20]
 8002046:	9304      	str	r3, [sp, #16]
 8002048:	9603      	str	r6, [sp, #12]
 800204a:	9502      	str	r5, [sp, #8]
 800204c:	9401      	str	r4, [sp, #4]
 800204e:	9100      	str	r1, [sp, #0]
 8002050:	4673      	mov	r3, lr
 8002052:	4662      	mov	r2, ip
 8002054:	4910      	ldr	r1, [pc, #64]	; (8002098 <main+0x598>)
 8002056:	f016 fb67 	bl	8018728 <siprintf>
 800205a:	f8c7 0760 	str.w	r0, [r7, #1888]	; 0x760
				  CanFDFrame.id);
		  for(int i = 0; i < CanFDFrame.length; i++){
 800205e:	2300      	movs	r3, #0
 8002060:	f8c7 375c 	str.w	r3, [r7, #1884]	; 0x75c
 8002064:	e034      	b.n	80020d0 <main+0x5d0>
 8002066:	bf00      	nop
 8002068:	24000dc0 	.word	0x24000dc0
 800206c:	240010cc 	.word	0x240010cc
 8002070:	24000b90 	.word	0x24000b90
 8002074:	24000b24 	.word	0x24000b24
 8002078:	240014c8 	.word	0x240014c8
 800207c:	24000b38 	.word	0x24000b38
 8002080:	10624dd3 	.word	0x10624dd3
 8002084:	88888889 	.word	0x88888889
 8002088:	240001fc 	.word	0x240001fc
 800208c:	240012fc 	.word	0x240012fc
 8002090:	240001f4 	.word	0x240001f4
 8002094:	24001038 	.word	0x24001038
 8002098:	08019d70 	.word	0x08019d70
			  CFDW += sprintf(CanFDWrite + CFDW, "%x", CanFDFrame.data.bytes[i]);
 800209c:	f8d7 3760 	ldr.w	r3, [r7, #1888]	; 0x760
 80020a0:	f207 422c 	addw	r2, r7, #1068	; 0x42c
 80020a4:	18d0      	adds	r0, r2, r3
 80020a6:	4a7f      	ldr	r2, [pc, #508]	; (80022a4 <main+0x7a4>)
 80020a8:	f8d7 375c 	ldr.w	r3, [r7, #1884]	; 0x75c
 80020ac:	4413      	add	r3, r2
 80020ae:	3310      	adds	r3, #16
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	461a      	mov	r2, r3
 80020b4:	497c      	ldr	r1, [pc, #496]	; (80022a8 <main+0x7a8>)
 80020b6:	f016 fb37 	bl	8018728 <siprintf>
 80020ba:	4602      	mov	r2, r0
 80020bc:	f8d7 3760 	ldr.w	r3, [r7, #1888]	; 0x760
 80020c0:	4413      	add	r3, r2
 80020c2:	f8c7 3760 	str.w	r3, [r7, #1888]	; 0x760
		  for(int i = 0; i < CanFDFrame.length; i++){
 80020c6:	f8d7 375c 	ldr.w	r3, [r7, #1884]	; 0x75c
 80020ca:	3301      	adds	r3, #1
 80020cc:	f8c7 375c 	str.w	r3, [r7, #1884]	; 0x75c
 80020d0:	4b74      	ldr	r3, [pc, #464]	; (80022a4 <main+0x7a4>)
 80020d2:	689a      	ldr	r2, [r3, #8]
 80020d4:	f8d7 375c 	ldr.w	r3, [r7, #1884]	; 0x75c
 80020d8:	429a      	cmp	r2, r3
 80020da:	d8df      	bhi.n	800209c <main+0x59c>
		  }
		  WriteToBuff(CanFDWrite, CFDW);
 80020dc:	f207 432c 	addw	r3, r7, #1068	; 0x42c
 80020e0:	f8d7 1760 	ldr.w	r1, [r7, #1888]	; 0x760
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7ff fc63 	bl	80019b0 <WriteToBuff>

		  FDCAN_Flag = 0;
 80020ea:	4b70      	ldr	r3, [pc, #448]	; (80022ac <main+0x7ac>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]
	  }
	  if(CAN_Flag){
 80020f0:	4b6f      	ldr	r3, [pc, #444]	; (80022b0 <main+0x7b0>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	f000 80c6 	beq.w	8002286 <main+0x786>

		  RTC_TimeTypeDef lTime = sTime;
 80020fa:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 80020fe:	4a6d      	ldr	r2, [pc, #436]	; (80022b4 <main+0x7b4>)
 8002100:	461c      	mov	r4, r3
 8002102:	4615      	mov	r5, r2
 8002104:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002106:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002108:	682b      	ldr	r3, [r5, #0]
 800210a:	6023      	str	r3, [r4, #0]
		  LocalTime = CanFrame.time;
 800210c:	4b6a      	ldr	r3, [pc, #424]	; (80022b8 <main+0x7b8>)
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f8c7 374c 	str.w	r3, [r7, #1868]	; 0x74c
		  lTime.SubSeconds += LocalTime % 1000;
 8002114:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 8002118:	6859      	ldr	r1, [r3, #4]
 800211a:	f8d7 274c 	ldr.w	r2, [r7, #1868]	; 0x74c
 800211e:	4b67      	ldr	r3, [pc, #412]	; (80022bc <main+0x7bc>)
 8002120:	fba3 0302 	umull	r0, r3, r3, r2
 8002124:	099b      	lsrs	r3, r3, #6
 8002126:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800212a:	fb00 f303 	mul.w	r3, r0, r3
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	18ca      	adds	r2, r1, r3
 8002132:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 8002136:	605a      	str	r2, [r3, #4]
		  LocalTime = LocalTime/1000;
 8002138:	f8d7 374c 	ldr.w	r3, [r7, #1868]	; 0x74c
 800213c:	4a5f      	ldr	r2, [pc, #380]	; (80022bc <main+0x7bc>)
 800213e:	fba2 2303 	umull	r2, r3, r2, r3
 8002142:	099b      	lsrs	r3, r3, #6
 8002144:	f8c7 374c 	str.w	r3, [r7, #1868]	; 0x74c
		  lTime.Seconds += LocalTime % 60;
 8002148:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 800214c:	7898      	ldrb	r0, [r3, #2]
 800214e:	f8d7 174c 	ldr.w	r1, [r7, #1868]	; 0x74c
 8002152:	4b5b      	ldr	r3, [pc, #364]	; (80022c0 <main+0x7c0>)
 8002154:	fba3 2301 	umull	r2, r3, r3, r1
 8002158:	095a      	lsrs	r2, r3, #5
 800215a:	4613      	mov	r3, r2
 800215c:	011b      	lsls	r3, r3, #4
 800215e:	1a9b      	subs	r3, r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	1aca      	subs	r2, r1, r3
 8002164:	b2d3      	uxtb	r3, r2
 8002166:	4403      	add	r3, r0
 8002168:	b2da      	uxtb	r2, r3
 800216a:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 800216e:	709a      	strb	r2, [r3, #2]
		  LocalTime = LocalTime/60;
 8002170:	f8d7 374c 	ldr.w	r3, [r7, #1868]	; 0x74c
 8002174:	4a52      	ldr	r2, [pc, #328]	; (80022c0 <main+0x7c0>)
 8002176:	fba2 2303 	umull	r2, r3, r2, r3
 800217a:	095b      	lsrs	r3, r3, #5
 800217c:	f8c7 374c 	str.w	r3, [r7, #1868]	; 0x74c
		  lTime.Minutes += LocalTime % 60;
 8002180:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 8002184:	7858      	ldrb	r0, [r3, #1]
 8002186:	f8d7 174c 	ldr.w	r1, [r7, #1868]	; 0x74c
 800218a:	4b4d      	ldr	r3, [pc, #308]	; (80022c0 <main+0x7c0>)
 800218c:	fba3 2301 	umull	r2, r3, r3, r1
 8002190:	095a      	lsrs	r2, r3, #5
 8002192:	4613      	mov	r3, r2
 8002194:	011b      	lsls	r3, r3, #4
 8002196:	1a9b      	subs	r3, r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	1aca      	subs	r2, r1, r3
 800219c:	b2d3      	uxtb	r3, r2
 800219e:	4403      	add	r3, r0
 80021a0:	b2da      	uxtb	r2, r3
 80021a2:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 80021a6:	705a      	strb	r2, [r3, #1]
		  LocalTime = LocalTime/60;
 80021a8:	f8d7 374c 	ldr.w	r3, [r7, #1868]	; 0x74c
 80021ac:	4a44      	ldr	r2, [pc, #272]	; (80022c0 <main+0x7c0>)
 80021ae:	fba2 2303 	umull	r2, r3, r2, r3
 80021b2:	095b      	lsrs	r3, r3, #5
 80021b4:	f8c7 374c 	str.w	r3, [r7, #1868]	; 0x74c
		  lTime.Hours += LocalTime % 60;
 80021b8:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 80021bc:	7818      	ldrb	r0, [r3, #0]
 80021be:	f8d7 174c 	ldr.w	r1, [r7, #1868]	; 0x74c
 80021c2:	4b3f      	ldr	r3, [pc, #252]	; (80022c0 <main+0x7c0>)
 80021c4:	fba3 2301 	umull	r2, r3, r3, r1
 80021c8:	095a      	lsrs	r2, r3, #5
 80021ca:	4613      	mov	r3, r2
 80021cc:	011b      	lsls	r3, r3, #4
 80021ce:	1a9b      	subs	r3, r3, r2
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	1aca      	subs	r2, r1, r3
 80021d4:	b2d3      	uxtb	r3, r2
 80021d6:	4403      	add	r3, r0
 80021d8:	b2da      	uxtb	r2, r3
 80021da:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 80021de:	701a      	strb	r2, [r3, #0]

		  //date/time, CANID, Data
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,%u,",
				  sDate.Date,sDate.Month,sDate.Year, sTime.Hours,sTime.Minutes,sTime.Seconds,sTime.SubSeconds,
 80021e0:	4b38      	ldr	r3, [pc, #224]	; (80022c4 <main+0x7c4>)
 80021e2:	789b      	ldrb	r3, [r3, #2]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,%u,",
 80021e4:	469c      	mov	ip, r3
				  sDate.Date,sDate.Month,sDate.Year, sTime.Hours,sTime.Minutes,sTime.Seconds,sTime.SubSeconds,
 80021e6:	4b37      	ldr	r3, [pc, #220]	; (80022c4 <main+0x7c4>)
 80021e8:	785b      	ldrb	r3, [r3, #1]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,%u,",
 80021ea:	469e      	mov	lr, r3
				  sDate.Date,sDate.Month,sDate.Year, sTime.Hours,sTime.Minutes,sTime.Seconds,sTime.SubSeconds,
 80021ec:	4b35      	ldr	r3, [pc, #212]	; (80022c4 <main+0x7c4>)
 80021ee:	78db      	ldrb	r3, [r3, #3]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,%u,",
 80021f0:	4619      	mov	r1, r3
				  sDate.Date,sDate.Month,sDate.Year, sTime.Hours,sTime.Minutes,sTime.Seconds,sTime.SubSeconds,
 80021f2:	4b30      	ldr	r3, [pc, #192]	; (80022b4 <main+0x7b4>)
 80021f4:	781b      	ldrb	r3, [r3, #0]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,%u,",
 80021f6:	461c      	mov	r4, r3
				  sDate.Date,sDate.Month,sDate.Year, sTime.Hours,sTime.Minutes,sTime.Seconds,sTime.SubSeconds,
 80021f8:	4b2e      	ldr	r3, [pc, #184]	; (80022b4 <main+0x7b4>)
 80021fa:	785b      	ldrb	r3, [r3, #1]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,%u,",
 80021fc:	461d      	mov	r5, r3
				  sDate.Date,sDate.Month,sDate.Year, sTime.Hours,sTime.Minutes,sTime.Seconds,sTime.SubSeconds,
 80021fe:	4b2d      	ldr	r3, [pc, #180]	; (80022b4 <main+0x7b4>)
 8002200:	789b      	ldrb	r3, [r3, #2]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,%u,",
 8002202:	461e      	mov	r6, r3
 8002204:	4b2b      	ldr	r3, [pc, #172]	; (80022b4 <main+0x7b4>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	4a2b      	ldr	r2, [pc, #172]	; (80022b8 <main+0x7b8>)
 800220a:	6812      	ldr	r2, [r2, #0]
 800220c:	f207 50bc 	addw	r0, r7, #1468	; 0x5bc
 8002210:	9205      	str	r2, [sp, #20]
 8002212:	9304      	str	r3, [sp, #16]
 8002214:	9603      	str	r6, [sp, #12]
 8002216:	9502      	str	r5, [sp, #8]
 8002218:	9401      	str	r4, [sp, #4]
 800221a:	9100      	str	r1, [sp, #0]
 800221c:	4673      	mov	r3, lr
 800221e:	4662      	mov	r2, ip
 8002220:	4929      	ldr	r1, [pc, #164]	; (80022c8 <main+0x7c8>)
 8002222:	f016 fa81 	bl	8018728 <siprintf>
 8002226:	f8c7 0764 	str.w	r0, [r7, #1892]	; 0x764
				  CanFrame.id);
		  for(int i = 0; i < CanFDFrame.length; i++){
 800222a:	2300      	movs	r3, #0
 800222c:	f8c7 3758 	str.w	r3, [r7, #1880]	; 0x758
 8002230:	e019      	b.n	8002266 <main+0x766>
			  CW += sprintf(CanWrite + CW, "%x", CanFrame.data.bytes[i]);
 8002232:	f8d7 3764 	ldr.w	r3, [r7, #1892]	; 0x764
 8002236:	f207 52bc 	addw	r2, r7, #1468	; 0x5bc
 800223a:	18d0      	adds	r0, r2, r3
 800223c:	4a1e      	ldr	r2, [pc, #120]	; (80022b8 <main+0x7b8>)
 800223e:	f8d7 3758 	ldr.w	r3, [r7, #1880]	; 0x758
 8002242:	4413      	add	r3, r2
 8002244:	3310      	adds	r3, #16
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	461a      	mov	r2, r3
 800224a:	4917      	ldr	r1, [pc, #92]	; (80022a8 <main+0x7a8>)
 800224c:	f016 fa6c 	bl	8018728 <siprintf>
 8002250:	4602      	mov	r2, r0
 8002252:	f8d7 3764 	ldr.w	r3, [r7, #1892]	; 0x764
 8002256:	4413      	add	r3, r2
 8002258:	f8c7 3764 	str.w	r3, [r7, #1892]	; 0x764
		  for(int i = 0; i < CanFDFrame.length; i++){
 800225c:	f8d7 3758 	ldr.w	r3, [r7, #1880]	; 0x758
 8002260:	3301      	adds	r3, #1
 8002262:	f8c7 3758 	str.w	r3, [r7, #1880]	; 0x758
 8002266:	4b0f      	ldr	r3, [pc, #60]	; (80022a4 <main+0x7a4>)
 8002268:	689a      	ldr	r2, [r3, #8]
 800226a:	f8d7 3758 	ldr.w	r3, [r7, #1880]	; 0x758
 800226e:	429a      	cmp	r2, r3
 8002270:	d8df      	bhi.n	8002232 <main+0x732>
		  }
		  WriteToBuff(CanWrite, CW);
 8002272:	f207 53bc 	addw	r3, r7, #1468	; 0x5bc
 8002276:	f8d7 1764 	ldr.w	r1, [r7, #1892]	; 0x764
 800227a:	4618      	mov	r0, r3
 800227c:	f7ff fb98 	bl	80019b0 <WriteToBuff>
		  CAN_Flag = 0;
 8002280:	4b0b      	ldr	r3, [pc, #44]	; (80022b0 <main+0x7b0>)
 8002282:	2200      	movs	r2, #0
 8002284:	601a      	str	r2, [r3, #0]
  while (end_flag){
 8002286:	4b11      	ldr	r3, [pc, #68]	; (80022cc <main+0x7cc>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2b00      	cmp	r3, #0
 800228c:	f47f ae3f 	bne.w	8001f0e <main+0x40e>
    /* USER CODE BEGIN 3 */
}

    //f_write(&myFILE, close_msg, strlen(close_msg), &testByte);
    //f_close(&myFILE);
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8002290:	2101      	movs	r1, #1
 8002292:	480f      	ldr	r0, [pc, #60]	; (80022d0 <main+0x7d0>)
 8002294:	f004 feb5 	bl	8007002 <HAL_GPIO_TogglePin>
 8002298:	2300      	movs	r3, #0
    //printf("File closed\n");

  /* USER CODE END 3 */
}
 800229a:	4618      	mov	r0, r3
 800229c:	f207 776c 	addw	r7, r7, #1900	; 0x76c
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022a4:	24001038 	.word	0x24001038
 80022a8:	08019d8c 	.word	0x08019d8c
 80022ac:	240001f4 	.word	0x240001f4
 80022b0:	240001f8 	.word	0x240001f8
 80022b4:	24000b24 	.word	0x24000b24
 80022b8:	240010b0 	.word	0x240010b0
 80022bc:	10624dd3 	.word	0x10624dd3
 80022c0:	88888889 	.word	0x88888889
 80022c4:	24000b38 	.word	0x24000b38
 80022c8:	08019d70 	.word	0x08019d70
 80022cc:	24000008 	.word	0x24000008
 80022d0:	58020400 	.word	0x58020400

080022d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b0cc      	sub	sp, #304	; 0x130
 80022d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022da:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80022de:	224c      	movs	r2, #76	; 0x4c
 80022e0:	2100      	movs	r1, #0
 80022e2:	4618      	mov	r0, r3
 80022e4:	f016 f8af 	bl	8018446 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022e8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80022ec:	2220      	movs	r2, #32
 80022ee:	2100      	movs	r1, #0
 80022f0:	4618      	mov	r0, r3
 80022f2:	f016 f8a8 	bl	8018446 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022f6:	f107 0308 	add.w	r3, r7, #8
 80022fa:	4618      	mov	r0, r3
 80022fc:	23bc      	movs	r3, #188	; 0xbc
 80022fe:	461a      	mov	r2, r3
 8002300:	2100      	movs	r1, #0
 8002302:	f016 f8a0 	bl	8018446 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002306:	2002      	movs	r0, #2
 8002308:	f006 f976 	bl	80085f8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800230c:	1d3b      	adds	r3, r7, #4
 800230e:	2200      	movs	r2, #0
 8002310:	601a      	str	r2, [r3, #0]
 8002312:	4b71      	ldr	r3, [pc, #452]	; (80024d8 <SystemClock_Config+0x204>)
 8002314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002316:	4a70      	ldr	r2, [pc, #448]	; (80024d8 <SystemClock_Config+0x204>)
 8002318:	f023 0301 	bic.w	r3, r3, #1
 800231c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800231e:	4b6e      	ldr	r3, [pc, #440]	; (80024d8 <SystemClock_Config+0x204>)
 8002320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002322:	f003 0201 	and.w	r2, r3, #1
 8002326:	1d3b      	adds	r3, r7, #4
 8002328:	601a      	str	r2, [r3, #0]
 800232a:	4b6c      	ldr	r3, [pc, #432]	; (80024dc <SystemClock_Config+0x208>)
 800232c:	699b      	ldr	r3, [r3, #24]
 800232e:	4a6b      	ldr	r2, [pc, #428]	; (80024dc <SystemClock_Config+0x208>)
 8002330:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002334:	6193      	str	r3, [r2, #24]
 8002336:	4b69      	ldr	r3, [pc, #420]	; (80024dc <SystemClock_Config+0x208>)
 8002338:	699b      	ldr	r3, [r3, #24]
 800233a:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800233e:	1d3b      	adds	r3, r7, #4
 8002340:	601a      	str	r2, [r3, #0]
 8002342:	1d3b      	adds	r3, r7, #4
 8002344:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002346:	bf00      	nop
 8002348:	4b64      	ldr	r3, [pc, #400]	; (80024dc <SystemClock_Config+0x208>)
 800234a:	699b      	ldr	r3, [r3, #24]
 800234c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002350:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002354:	d1f8      	bne.n	8002348 <SystemClock_Config+0x74>
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002356:	f006 f8b5 	bl	80084c4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_HIGH);
 800235a:	f001 f941 	bl	80035e0 <HAL_GetREVID>
 800235e:	4b60      	ldr	r3, [pc, #384]	; (80024e0 <SystemClock_Config+0x20c>)
 8002360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002362:	4a5f      	ldr	r2, [pc, #380]	; (80024e0 <SystemClock_Config+0x20c>)
 8002364:	f043 0318 	orr.w	r3, r3, #24
 8002368:	6713      	str	r3, [r2, #112]	; 0x70
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800236a:	4b5d      	ldr	r3, [pc, #372]	; (80024e0 <SystemClock_Config+0x20c>)
 800236c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800236e:	f023 0303 	bic.w	r3, r3, #3
 8002372:	4a5b      	ldr	r2, [pc, #364]	; (80024e0 <SystemClock_Config+0x20c>)
 8002374:	f043 0302 	orr.w	r3, r3, #2
 8002378:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE
 800237a:	2325      	movs	r3, #37	; 0x25
 800237c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002380:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002384:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002388:	2301      	movs	r3, #1
 800238a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800238e:	2301      	movs	r3, #1
 8002390:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002394:	2302      	movs	r3, #2
 8002396:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800239a:	2302      	movs	r3, #2
 800239c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80023a0:	2302      	movs	r3, #2
 80023a2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 64;
 80023a6:	2340      	movs	r3, #64	; 0x40
 80023a8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 80023ac:	2302      	movs	r3, #2
 80023ae:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 10;
 80023b2:	230a      	movs	r3, #10
 80023b4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80023b8:	2302      	movs	r3, #2
 80023ba:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80023be:	230c      	movs	r3, #12
 80023c0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80023c4:	2300      	movs	r3, #0
 80023c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80023ca:	2300      	movs	r3, #0
 80023cc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023d0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80023d4:	4618      	mov	r0, r3
 80023d6:	f006 f99d 	bl	8008714 <HAL_RCC_OscConfig>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <SystemClock_Config+0x110>
  {
    Error_Handler();
 80023e0:	f000 fbe8 	bl	8002bb4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023e4:	233f      	movs	r3, #63	; 0x3f
 80023e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023ea:	2303      	movs	r3, #3
 80023ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80023f0:	2300      	movs	r3, #0
 80023f2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80023f6:	2308      	movs	r3, #8
 80023f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80023fc:	2340      	movs	r3, #64	; 0x40
 80023fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002402:	2340      	movs	r3, #64	; 0x40
 8002404:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002408:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800240c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002410:	2340      	movs	r3, #64	; 0x40
 8002412:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002416:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800241a:	2102      	movs	r1, #2
 800241c:	4618      	mov	r0, r3
 800241e:	f006 fd89 	bl	8008f34 <HAL_RCC_ClockConfig>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <SystemClock_Config+0x158>
  {
    Error_Handler();
 8002428:	f000 fbc4 	bl	8002bb4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART3
 800242c:	f107 0308 	add.w	r3, r7, #8
 8002430:	4a2c      	ldr	r2, [pc, #176]	; (80024e4 <SystemClock_Config+0x210>)
 8002432:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_FDCAN|RCC_PERIPHCLK_UART8
                              |RCC_PERIPHCLK_SPI1|RCC_PERIPHCLK_SDMMC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8002434:	f107 0308 	add.w	r3, r7, #8
 8002438:	2202      	movs	r2, #2
 800243a:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 800243c:	f107 0308 	add.w	r3, r7, #8
 8002440:	220c      	movs	r2, #12
 8002442:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 3;
 8002444:	f107 0308 	add.w	r3, r7, #8
 8002448:	2203      	movs	r2, #3
 800244a:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800244c:	f107 0308 	add.w	r3, r7, #8
 8002450:	2202      	movs	r2, #2
 8002452:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 3;
 8002454:	f107 0308 	add.w	r3, r7, #8
 8002458:	2203      	movs	r2, #3
 800245a:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800245c:	f107 0308 	add.w	r3, r7, #8
 8002460:	22c0      	movs	r2, #192	; 0xc0
 8002462:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8002464:	f107 0308 	add.w	r3, r7, #8
 8002468:	2220      	movs	r2, #32
 800246a:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800246c:	f107 0308 	add.w	r3, r7, #8
 8002470:	2200      	movs	r2, #0
 8002472:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8002474:	f107 0308 	add.w	r3, r7, #8
 8002478:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800247c:	64da      	str	r2, [r3, #76]	; 0x4c
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 800247e:	f107 0308 	add.w	r3, r7, #8
 8002482:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002486:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8002488:	f107 0308 	add.w	r3, r7, #8
 800248c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002490:	66da      	str	r2, [r3, #108]	; 0x6c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002492:	f107 0308 	add.w	r3, r7, #8
 8002496:	2200      	movs	r2, #0
 8002498:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800249a:	f107 0308 	add.w	r3, r7, #8
 800249e:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80024a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80024a6:	f107 0308 	add.w	r3, r7, #8
 80024aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024ae:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024b2:	f107 0308 	add.w	r3, r7, #8
 80024b6:	4618      	mov	r0, r3
 80024b8:	f007 f8ec 	bl	8009694 <HAL_RCCEx_PeriphCLKConfig>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <SystemClock_Config+0x1f2>
  {
    Error_Handler();
 80024c2:	f000 fb77 	bl	8002bb4 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80024c6:	f006 feeb 	bl	80092a0 <HAL_RCC_EnableCSS>
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 80024ca:	f006 f8cf 	bl	800866c <HAL_PWREx_EnableUSBVoltageDetector>
}
 80024ce:	bf00      	nop
 80024d0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	58000400 	.word	0x58000400
 80024dc:	58024800 	.word	0x58024800
 80024e0:	58024400 	.word	0x58024400
 80024e4:	00459002 	.word	0x00459002

080024e8 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80024ec:	4b2f      	ldr	r3, [pc, #188]	; (80025ac <MX_FDCAN1_Init+0xc4>)
 80024ee:	4a30      	ldr	r2, [pc, #192]	; (80025b0 <MX_FDCAN1_Init+0xc8>)
 80024f0:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 80024f2:	4b2e      	ldr	r3, [pc, #184]	; (80025ac <MX_FDCAN1_Init+0xc4>)
 80024f4:	f44f 7240 	mov.w	r2, #768	; 0x300
 80024f8:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80024fa:	4b2c      	ldr	r3, [pc, #176]	; (80025ac <MX_FDCAN1_Init+0xc4>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8002500:	4b2a      	ldr	r3, [pc, #168]	; (80025ac <MX_FDCAN1_Init+0xc4>)
 8002502:	2200      	movs	r2, #0
 8002504:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8002506:	4b29      	ldr	r3, [pc, #164]	; (80025ac <MX_FDCAN1_Init+0xc4>)
 8002508:	2200      	movs	r2, #0
 800250a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800250c:	4b27      	ldr	r3, [pc, #156]	; (80025ac <MX_FDCAN1_Init+0xc4>)
 800250e:	2200      	movs	r2, #0
 8002510:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8002512:	4b26      	ldr	r3, [pc, #152]	; (80025ac <MX_FDCAN1_Init+0xc4>)
 8002514:	2201      	movs	r2, #1
 8002516:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 23;
 8002518:	4b24      	ldr	r3, [pc, #144]	; (80025ac <MX_FDCAN1_Init+0xc4>)
 800251a:	2217      	movs	r2, #23
 800251c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 56;
 800251e:	4b23      	ldr	r3, [pc, #140]	; (80025ac <MX_FDCAN1_Init+0xc4>)
 8002520:	2238      	movs	r2, #56	; 0x38
 8002522:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 23;
 8002524:	4b21      	ldr	r3, [pc, #132]	; (80025ac <MX_FDCAN1_Init+0xc4>)
 8002526:	2217      	movs	r2, #23
 8002528:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800252a:	4b20      	ldr	r3, [pc, #128]	; (80025ac <MX_FDCAN1_Init+0xc4>)
 800252c:	2201      	movs	r2, #1
 800252e:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 5;
 8002530:	4b1e      	ldr	r3, [pc, #120]	; (80025ac <MX_FDCAN1_Init+0xc4>)
 8002532:	2205      	movs	r2, #5
 8002534:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 10;
 8002536:	4b1d      	ldr	r3, [pc, #116]	; (80025ac <MX_FDCAN1_Init+0xc4>)
 8002538:	220a      	movs	r2, #10
 800253a:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 5;
 800253c:	4b1b      	ldr	r3, [pc, #108]	; (80025ac <MX_FDCAN1_Init+0xc4>)
 800253e:	2205      	movs	r2, #5
 8002540:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8002542:	4b1a      	ldr	r3, [pc, #104]	; (80025ac <MX_FDCAN1_Init+0xc4>)
 8002544:	2200      	movs	r2, #0
 8002546:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 2;
 8002548:	4b18      	ldr	r3, [pc, #96]	; (80025ac <MX_FDCAN1_Init+0xc4>)
 800254a:	2202      	movs	r2, #2
 800254c:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 2;
 800254e:	4b17      	ldr	r3, [pc, #92]	; (80025ac <MX_FDCAN1_Init+0xc4>)
 8002550:	2202      	movs	r2, #2
 8002552:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 64;
 8002554:	4b15      	ldr	r3, [pc, #84]	; (80025ac <MX_FDCAN1_Init+0xc4>)
 8002556:	2240      	movs	r2, #64	; 0x40
 8002558:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_64;
 800255a:	4b14      	ldr	r3, [pc, #80]	; (80025ac <MX_FDCAN1_Init+0xc4>)
 800255c:	2212      	movs	r2, #18
 800255e:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8002560:	4b12      	ldr	r3, [pc, #72]	; (80025ac <MX_FDCAN1_Init+0xc4>)
 8002562:	2200      	movs	r2, #0
 8002564:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8002566:	4b11      	ldr	r3, [pc, #68]	; (80025ac <MX_FDCAN1_Init+0xc4>)
 8002568:	2204      	movs	r2, #4
 800256a:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 800256c:	4b0f      	ldr	r3, [pc, #60]	; (80025ac <MX_FDCAN1_Init+0xc4>)
 800256e:	2200      	movs	r2, #0
 8002570:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8002572:	4b0e      	ldr	r3, [pc, #56]	; (80025ac <MX_FDCAN1_Init+0xc4>)
 8002574:	2204      	movs	r2, #4
 8002576:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8002578:	4b0c      	ldr	r3, [pc, #48]	; (80025ac <MX_FDCAN1_Init+0xc4>)
 800257a:	2200      	movs	r2, #0
 800257c:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 800257e:	4b0b      	ldr	r3, [pc, #44]	; (80025ac <MX_FDCAN1_Init+0xc4>)
 8002580:	2200      	movs	r2, #0
 8002582:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8002584:	4b09      	ldr	r3, [pc, #36]	; (80025ac <MX_FDCAN1_Init+0xc4>)
 8002586:	2200      	movs	r2, #0
 8002588:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800258a:	4b08      	ldr	r3, [pc, #32]	; (80025ac <MX_FDCAN1_Init+0xc4>)
 800258c:	2200      	movs	r2, #0
 800258e:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8002590:	4b06      	ldr	r3, [pc, #24]	; (80025ac <MX_FDCAN1_Init+0xc4>)
 8002592:	2204      	movs	r2, #4
 8002594:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8002596:	4805      	ldr	r0, [pc, #20]	; (80025ac <MX_FDCAN1_Init+0xc4>)
 8002598:	f003 fa16 	bl	80059c8 <HAL_FDCAN_Init>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 80025a2:	f000 fb07 	bl	8002bb4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80025a6:	bf00      	nop
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	240014ec 	.word	0x240014ec
 80025b0:	4000a000 	.word	0x4000a000

080025b4 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80025b8:	4b2e      	ldr	r3, [pc, #184]	; (8002674 <MX_FDCAN2_Init+0xc0>)
 80025ba:	4a2f      	ldr	r2, [pc, #188]	; (8002678 <MX_FDCAN2_Init+0xc4>)
 80025bc:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80025be:	4b2d      	ldr	r3, [pc, #180]	; (8002674 <MX_FDCAN2_Init+0xc0>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80025c4:	4b2b      	ldr	r3, [pc, #172]	; (8002674 <MX_FDCAN2_Init+0xc0>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 80025ca:	4b2a      	ldr	r3, [pc, #168]	; (8002674 <MX_FDCAN2_Init+0xc0>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 80025d0:	4b28      	ldr	r3, [pc, #160]	; (8002674 <MX_FDCAN2_Init+0xc0>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 80025d6:	4b27      	ldr	r3, [pc, #156]	; (8002674 <MX_FDCAN2_Init+0xc0>)
 80025d8:	2200      	movs	r2, #0
 80025da:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 80025dc:	4b25      	ldr	r3, [pc, #148]	; (8002674 <MX_FDCAN2_Init+0xc0>)
 80025de:	2201      	movs	r2, #1
 80025e0:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 80025e2:	4b24      	ldr	r3, [pc, #144]	; (8002674 <MX_FDCAN2_Init+0xc0>)
 80025e4:	2201      	movs	r2, #1
 80025e6:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 80025e8:	4b22      	ldr	r3, [pc, #136]	; (8002674 <MX_FDCAN2_Init+0xc0>)
 80025ea:	2202      	movs	r2, #2
 80025ec:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 80025ee:	4b21      	ldr	r3, [pc, #132]	; (8002674 <MX_FDCAN2_Init+0xc0>)
 80025f0:	2202      	movs	r2, #2
 80025f2:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 80025f4:	4b1f      	ldr	r3, [pc, #124]	; (8002674 <MX_FDCAN2_Init+0xc0>)
 80025f6:	2201      	movs	r2, #1
 80025f8:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 80025fa:	4b1e      	ldr	r3, [pc, #120]	; (8002674 <MX_FDCAN2_Init+0xc0>)
 80025fc:	2201      	movs	r2, #1
 80025fe:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8002600:	4b1c      	ldr	r3, [pc, #112]	; (8002674 <MX_FDCAN2_Init+0xc0>)
 8002602:	2201      	movs	r2, #1
 8002604:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8002606:	4b1b      	ldr	r3, [pc, #108]	; (8002674 <MX_FDCAN2_Init+0xc0>)
 8002608:	2201      	movs	r2, #1
 800260a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 800260c:	4b19      	ldr	r3, [pc, #100]	; (8002674 <MX_FDCAN2_Init+0xc0>)
 800260e:	2200      	movs	r2, #0
 8002610:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8002612:	4b18      	ldr	r3, [pc, #96]	; (8002674 <MX_FDCAN2_Init+0xc0>)
 8002614:	2200      	movs	r2, #0
 8002616:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8002618:	4b16      	ldr	r3, [pc, #88]	; (8002674 <MX_FDCAN2_Init+0xc0>)
 800261a:	2200      	movs	r2, #0
 800261c:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 800261e:	4b15      	ldr	r3, [pc, #84]	; (8002674 <MX_FDCAN2_Init+0xc0>)
 8002620:	2200      	movs	r2, #0
 8002622:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8002624:	4b13      	ldr	r3, [pc, #76]	; (8002674 <MX_FDCAN2_Init+0xc0>)
 8002626:	2204      	movs	r2, #4
 8002628:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 800262a:	4b12      	ldr	r3, [pc, #72]	; (8002674 <MX_FDCAN2_Init+0xc0>)
 800262c:	2200      	movs	r2, #0
 800262e:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8002630:	4b10      	ldr	r3, [pc, #64]	; (8002674 <MX_FDCAN2_Init+0xc0>)
 8002632:	2204      	movs	r2, #4
 8002634:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8002636:	4b0f      	ldr	r3, [pc, #60]	; (8002674 <MX_FDCAN2_Init+0xc0>)
 8002638:	2200      	movs	r2, #0
 800263a:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 800263c:	4b0d      	ldr	r3, [pc, #52]	; (8002674 <MX_FDCAN2_Init+0xc0>)
 800263e:	2204      	movs	r2, #4
 8002640:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8002642:	4b0c      	ldr	r3, [pc, #48]	; (8002674 <MX_FDCAN2_Init+0xc0>)
 8002644:	2200      	movs	r2, #0
 8002646:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8002648:	4b0a      	ldr	r3, [pc, #40]	; (8002674 <MX_FDCAN2_Init+0xc0>)
 800264a:	2200      	movs	r2, #0
 800264c:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 800264e:	4b09      	ldr	r3, [pc, #36]	; (8002674 <MX_FDCAN2_Init+0xc0>)
 8002650:	2200      	movs	r2, #0
 8002652:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8002654:	4b07      	ldr	r3, [pc, #28]	; (8002674 <MX_FDCAN2_Init+0xc0>)
 8002656:	2200      	movs	r2, #0
 8002658:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800265a:	4b06      	ldr	r3, [pc, #24]	; (8002674 <MX_FDCAN2_Init+0xc0>)
 800265c:	2204      	movs	r2, #4
 800265e:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8002660:	4804      	ldr	r0, [pc, #16]	; (8002674 <MX_FDCAN2_Init+0xc0>)
 8002662:	f003 f9b1 	bl	80059c8 <HAL_FDCAN_Init>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d001      	beq.n	8002670 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 800266c:	f000 faa2 	bl	8002bb4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8002670:	bf00      	nop
 8002672:	bd80      	pop	{r7, pc}
 8002674:	240016a0 	.word	0x240016a0
 8002678:	4000a400 	.word	0x4000a400

0800267c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b086      	sub	sp, #24
 8002680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002682:	1d3b      	adds	r3, r7, #4
 8002684:	2200      	movs	r2, #0
 8002686:	601a      	str	r2, [r3, #0]
 8002688:	605a      	str	r2, [r3, #4]
 800268a:	609a      	str	r2, [r3, #8]
 800268c:	60da      	str	r2, [r3, #12]
 800268e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002690:	2300      	movs	r3, #0
 8002692:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002694:	4b26      	ldr	r3, [pc, #152]	; (8002730 <MX_RTC_Init+0xb4>)
 8002696:	4a27      	ldr	r2, [pc, #156]	; (8002734 <MX_RTC_Init+0xb8>)
 8002698:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800269a:	4b25      	ldr	r3, [pc, #148]	; (8002730 <MX_RTC_Init+0xb4>)
 800269c:	2200      	movs	r2, #0
 800269e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 1;
 80026a0:	4b23      	ldr	r3, [pc, #140]	; (8002730 <MX_RTC_Init+0xb4>)
 80026a2:	2201      	movs	r2, #1
 80026a4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 16388;
 80026a6:	4b22      	ldr	r3, [pc, #136]	; (8002730 <MX_RTC_Init+0xb4>)
 80026a8:	f244 0204 	movw	r2, #16388	; 0x4004
 80026ac:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80026ae:	4b20      	ldr	r3, [pc, #128]	; (8002730 <MX_RTC_Init+0xb4>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80026b4:	4b1e      	ldr	r3, [pc, #120]	; (8002730 <MX_RTC_Init+0xb4>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80026ba:	4b1d      	ldr	r3, [pc, #116]	; (8002730 <MX_RTC_Init+0xb4>)
 80026bc:	2200      	movs	r2, #0
 80026be:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80026c0:	4b1b      	ldr	r3, [pc, #108]	; (8002730 <MX_RTC_Init+0xb4>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80026c6:	481a      	ldr	r0, [pc, #104]	; (8002730 <MX_RTC_Init+0xb4>)
 80026c8:	f008 fea8 	bl	800b41c <HAL_RTC_Init>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80026d2:	f000 fa6f 	bl	8002bb4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 80026d6:	2300      	movs	r3, #0
 80026d8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 80026da:	2300      	movs	r3, #0
 80026dc:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 80026de:	2300      	movs	r3, #0
 80026e0:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80026e2:	2300      	movs	r3, #0
 80026e4:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80026e6:	2300      	movs	r3, #0
 80026e8:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80026ea:	1d3b      	adds	r3, r7, #4
 80026ec:	2200      	movs	r2, #0
 80026ee:	4619      	mov	r1, r3
 80026f0:	480f      	ldr	r0, [pc, #60]	; (8002730 <MX_RTC_Init+0xb4>)
 80026f2:	f008 ff0b 	bl	800b50c <HAL_RTC_SetTime>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 80026fc:	f000 fa5a 	bl	8002bb4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002700:	2301      	movs	r3, #1
 8002702:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002704:	2301      	movs	r3, #1
 8002706:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8002708:	2301      	movs	r3, #1
 800270a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 800270c:	2300      	movs	r3, #0
 800270e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8002710:	463b      	mov	r3, r7
 8002712:	2200      	movs	r2, #0
 8002714:	4619      	mov	r1, r3
 8002716:	4806      	ldr	r0, [pc, #24]	; (8002730 <MX_RTC_Init+0xb4>)
 8002718:	f008 fff2 	bl	800b700 <HAL_RTC_SetDate>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 8002722:	f000 fa47 	bl	8002bb4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002726:	bf00      	nop
 8002728:	3718      	adds	r7, #24
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	240014c8 	.word	0x240014c8
 8002734:	58004000 	.word	0x58004000

08002738 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800273c:	4b0d      	ldr	r3, [pc, #52]	; (8002774 <MX_SDMMC1_SD_Init+0x3c>)
 800273e:	4a0e      	ldr	r2, [pc, #56]	; (8002778 <MX_SDMMC1_SD_Init+0x40>)
 8002740:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8002742:	4b0c      	ldr	r3, [pc, #48]	; (8002774 <MX_SDMMC1_SD_Init+0x3c>)
 8002744:	2200      	movs	r2, #0
 8002746:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002748:	4b0a      	ldr	r3, [pc, #40]	; (8002774 <MX_SDMMC1_SD_Init+0x3c>)
 800274a:	2200      	movs	r2, #0
 800274c:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800274e:	4b09      	ldr	r3, [pc, #36]	; (8002774 <MX_SDMMC1_SD_Init+0x3c>)
 8002750:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002754:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 8002756:	4b07      	ldr	r3, [pc, #28]	; (8002774 <MX_SDMMC1_SD_Init+0x3c>)
 8002758:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800275c:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 800275e:	4b05      	ldr	r3, [pc, #20]	; (8002774 <MX_SDMMC1_SD_Init+0x3c>)
 8002760:	2200      	movs	r2, #0
 8002762:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 8002764:	4b03      	ldr	r3, [pc, #12]	; (8002774 <MX_SDMMC1_SD_Init+0x3c>)
 8002766:	2201      	movs	r2, #1
 8002768:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800276a:	bf00      	nop
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr
 8002774:	24001448 	.word	0x24001448
 8002778:	52007000 	.word	0x52007000

0800277c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002780:	4b27      	ldr	r3, [pc, #156]	; (8002820 <MX_SPI1_Init+0xa4>)
 8002782:	4a28      	ldr	r2, [pc, #160]	; (8002824 <MX_SPI1_Init+0xa8>)
 8002784:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002786:	4b26      	ldr	r3, [pc, #152]	; (8002820 <MX_SPI1_Init+0xa4>)
 8002788:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800278c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800278e:	4b24      	ldr	r3, [pc, #144]	; (8002820 <MX_SPI1_Init+0xa4>)
 8002790:	2200      	movs	r2, #0
 8002792:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002794:	4b22      	ldr	r3, [pc, #136]	; (8002820 <MX_SPI1_Init+0xa4>)
 8002796:	2207      	movs	r2, #7
 8002798:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800279a:	4b21      	ldr	r3, [pc, #132]	; (8002820 <MX_SPI1_Init+0xa4>)
 800279c:	2200      	movs	r2, #0
 800279e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80027a0:	4b1f      	ldr	r3, [pc, #124]	; (8002820 <MX_SPI1_Init+0xa4>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80027a6:	4b1e      	ldr	r3, [pc, #120]	; (8002820 <MX_SPI1_Init+0xa4>)
 80027a8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80027ac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80027ae:	4b1c      	ldr	r3, [pc, #112]	; (8002820 <MX_SPI1_Init+0xa4>)
 80027b0:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80027b4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80027b6:	4b1a      	ldr	r3, [pc, #104]	; (8002820 <MX_SPI1_Init+0xa4>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80027bc:	4b18      	ldr	r3, [pc, #96]	; (8002820 <MX_SPI1_Init+0xa4>)
 80027be:	2200      	movs	r2, #0
 80027c0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027c2:	4b17      	ldr	r3, [pc, #92]	; (8002820 <MX_SPI1_Init+0xa4>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80027c8:	4b15      	ldr	r3, [pc, #84]	; (8002820 <MX_SPI1_Init+0xa4>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80027ce:	4b14      	ldr	r3, [pc, #80]	; (8002820 <MX_SPI1_Init+0xa4>)
 80027d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80027d4:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80027d6:	4b12      	ldr	r3, [pc, #72]	; (8002820 <MX_SPI1_Init+0xa4>)
 80027d8:	2200      	movs	r2, #0
 80027da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80027dc:	4b10      	ldr	r3, [pc, #64]	; (8002820 <MX_SPI1_Init+0xa4>)
 80027de:	2200      	movs	r2, #0
 80027e0:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80027e2:	4b0f      	ldr	r3, [pc, #60]	; (8002820 <MX_SPI1_Init+0xa4>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80027e8:	4b0d      	ldr	r3, [pc, #52]	; (8002820 <MX_SPI1_Init+0xa4>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80027ee:	4b0c      	ldr	r3, [pc, #48]	; (8002820 <MX_SPI1_Init+0xa4>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80027f4:	4b0a      	ldr	r3, [pc, #40]	; (8002820 <MX_SPI1_Init+0xa4>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80027fa:	4b09      	ldr	r3, [pc, #36]	; (8002820 <MX_SPI1_Init+0xa4>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002800:	4b07      	ldr	r3, [pc, #28]	; (8002820 <MX_SPI1_Init+0xa4>)
 8002802:	2200      	movs	r2, #0
 8002804:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002806:	4b06      	ldr	r3, [pc, #24]	; (8002820 <MX_SPI1_Init+0xa4>)
 8002808:	2200      	movs	r2, #0
 800280a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800280c:	4804      	ldr	r0, [pc, #16]	; (8002820 <MX_SPI1_Init+0xa4>)
 800280e:	f00b f89f 	bl	800d950 <HAL_SPI_Init>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8002818:	f000 f9cc 	bl	8002bb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800281c:	bf00      	nop
 800281e:	bd80      	pop	{r7, pc}
 8002820:	24001618 	.word	0x24001618
 8002824:	40013000 	.word	0x40013000

08002828 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 800282c:	4b22      	ldr	r3, [pc, #136]	; (80028b8 <MX_UART8_Init+0x90>)
 800282e:	4a23      	ldr	r2, [pc, #140]	; (80028bc <MX_UART8_Init+0x94>)
 8002830:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8002832:	4b21      	ldr	r3, [pc, #132]	; (80028b8 <MX_UART8_Init+0x90>)
 8002834:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002838:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800283a:	4b1f      	ldr	r3, [pc, #124]	; (80028b8 <MX_UART8_Init+0x90>)
 800283c:	2200      	movs	r2, #0
 800283e:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8002840:	4b1d      	ldr	r3, [pc, #116]	; (80028b8 <MX_UART8_Init+0x90>)
 8002842:	2200      	movs	r2, #0
 8002844:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8002846:	4b1c      	ldr	r3, [pc, #112]	; (80028b8 <MX_UART8_Init+0x90>)
 8002848:	2200      	movs	r2, #0
 800284a:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 800284c:	4b1a      	ldr	r3, [pc, #104]	; (80028b8 <MX_UART8_Init+0x90>)
 800284e:	220c      	movs	r2, #12
 8002850:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002852:	4b19      	ldr	r3, [pc, #100]	; (80028b8 <MX_UART8_Init+0x90>)
 8002854:	2200      	movs	r2, #0
 8002856:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8002858:	4b17      	ldr	r3, [pc, #92]	; (80028b8 <MX_UART8_Init+0x90>)
 800285a:	2200      	movs	r2, #0
 800285c:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800285e:	4b16      	ldr	r3, [pc, #88]	; (80028b8 <MX_UART8_Init+0x90>)
 8002860:	2200      	movs	r2, #0
 8002862:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002864:	4b14      	ldr	r3, [pc, #80]	; (80028b8 <MX_UART8_Init+0x90>)
 8002866:	2200      	movs	r2, #0
 8002868:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800286a:	4b13      	ldr	r3, [pc, #76]	; (80028b8 <MX_UART8_Init+0x90>)
 800286c:	2200      	movs	r2, #0
 800286e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8002870:	4811      	ldr	r0, [pc, #68]	; (80028b8 <MX_UART8_Init+0x90>)
 8002872:	f00c f91e 	bl	800eab2 <HAL_UART_Init>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 800287c:	f000 f99a 	bl	8002bb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002880:	2100      	movs	r1, #0
 8002882:	480d      	ldr	r0, [pc, #52]	; (80028b8 <MX_UART8_Init+0x90>)
 8002884:	f00d faae 	bl	800fde4 <HAL_UARTEx_SetTxFifoThreshold>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 800288e:	f000 f991 	bl	8002bb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002892:	2100      	movs	r1, #0
 8002894:	4808      	ldr	r0, [pc, #32]	; (80028b8 <MX_UART8_Init+0x90>)
 8002896:	f00d fae3 	bl	800fe60 <HAL_UARTEx_SetRxFifoThreshold>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 80028a0:	f000 f988 	bl	8002bb4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 80028a4:	4804      	ldr	r0, [pc, #16]	; (80028b8 <MX_UART8_Init+0x90>)
 80028a6:	f00d fa64 	bl	800fd72 <HAL_UARTEx_DisableFifoMode>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d001      	beq.n	80028b4 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 80028b0:	f000 f980 	bl	8002bb4 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 80028b4:	bf00      	nop
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	2400158c 	.word	0x2400158c
 80028bc:	40007c00 	.word	0x40007c00

080028c0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80028c4:	4b22      	ldr	r3, [pc, #136]	; (8002950 <MX_USART3_UART_Init+0x90>)
 80028c6:	4a23      	ldr	r2, [pc, #140]	; (8002954 <MX_USART3_UART_Init+0x94>)
 80028c8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 80028ca:	4b21      	ldr	r3, [pc, #132]	; (8002950 <MX_USART3_UART_Init+0x90>)
 80028cc:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80028d0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80028d2:	4b1f      	ldr	r3, [pc, #124]	; (8002950 <MX_USART3_UART_Init+0x90>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80028d8:	4b1d      	ldr	r3, [pc, #116]	; (8002950 <MX_USART3_UART_Init+0x90>)
 80028da:	2200      	movs	r2, #0
 80028dc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80028de:	4b1c      	ldr	r3, [pc, #112]	; (8002950 <MX_USART3_UART_Init+0x90>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80028e4:	4b1a      	ldr	r3, [pc, #104]	; (8002950 <MX_USART3_UART_Init+0x90>)
 80028e6:	220c      	movs	r2, #12
 80028e8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028ea:	4b19      	ldr	r3, [pc, #100]	; (8002950 <MX_USART3_UART_Init+0x90>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80028f0:	4b17      	ldr	r3, [pc, #92]	; (8002950 <MX_USART3_UART_Init+0x90>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028f6:	4b16      	ldr	r3, [pc, #88]	; (8002950 <MX_USART3_UART_Init+0x90>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80028fc:	4b14      	ldr	r3, [pc, #80]	; (8002950 <MX_USART3_UART_Init+0x90>)
 80028fe:	2200      	movs	r2, #0
 8002900:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002902:	4b13      	ldr	r3, [pc, #76]	; (8002950 <MX_USART3_UART_Init+0x90>)
 8002904:	2200      	movs	r2, #0
 8002906:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002908:	4811      	ldr	r0, [pc, #68]	; (8002950 <MX_USART3_UART_Init+0x90>)
 800290a:	f00c f8d2 	bl	800eab2 <HAL_UART_Init>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d001      	beq.n	8002918 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002914:	f000 f94e 	bl	8002bb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002918:	2100      	movs	r1, #0
 800291a:	480d      	ldr	r0, [pc, #52]	; (8002950 <MX_USART3_UART_Init+0x90>)
 800291c:	f00d fa62 	bl	800fde4 <HAL_UARTEx_SetTxFifoThreshold>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002926:	f000 f945 	bl	8002bb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800292a:	2100      	movs	r1, #0
 800292c:	4808      	ldr	r0, [pc, #32]	; (8002950 <MX_USART3_UART_Init+0x90>)
 800292e:	f00d fa97 	bl	800fe60 <HAL_UARTEx_SetRxFifoThreshold>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d001      	beq.n	800293c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002938:	f000 f93c 	bl	8002bb4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800293c:	4804      	ldr	r0, [pc, #16]	; (8002950 <MX_USART3_UART_Init+0x90>)
 800293e:	f00d fa18 	bl	800fd72 <HAL_UARTEx_DisableFifoMode>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d001      	beq.n	800294c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002948:	f000 f934 	bl	8002bb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800294c:	bf00      	nop
 800294e:	bd80      	pop	{r7, pc}
 8002950:	240013bc 	.word	0x240013bc
 8002954:	40004800 	.word	0x40004800

08002958 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800295e:	4b0d      	ldr	r3, [pc, #52]	; (8002994 <MX_DMA_Init+0x3c>)
 8002960:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002964:	4a0b      	ldr	r2, [pc, #44]	; (8002994 <MX_DMA_Init+0x3c>)
 8002966:	f043 0301 	orr.w	r3, r3, #1
 800296a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800296e:	4b09      	ldr	r3, [pc, #36]	; (8002994 <MX_DMA_Init+0x3c>)
 8002970:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002974:	f003 0301 	and.w	r3, r3, #1
 8002978:	607b      	str	r3, [r7, #4]
 800297a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 1, 0);
 800297c:	2200      	movs	r2, #0
 800297e:	2101      	movs	r1, #1
 8002980:	200b      	movs	r0, #11
 8002982:	f000 ff14 	bl	80037ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002986:	200b      	movs	r0, #11
 8002988:	f000 ff2b 	bl	80037e2 <HAL_NVIC_EnableIRQ>

}
 800298c:	bf00      	nop
 800298e:	3708      	adds	r7, #8
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	58024400 	.word	0x58024400

08002998 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b08c      	sub	sp, #48	; 0x30
 800299c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800299e:	f107 031c 	add.w	r3, r7, #28
 80029a2:	2200      	movs	r2, #0
 80029a4:	601a      	str	r2, [r3, #0]
 80029a6:	605a      	str	r2, [r3, #4]
 80029a8:	609a      	str	r2, [r3, #8]
 80029aa:	60da      	str	r2, [r3, #12]
 80029ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80029ae:	4b6d      	ldr	r3, [pc, #436]	; (8002b64 <MX_GPIO_Init+0x1cc>)
 80029b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029b4:	4a6b      	ldr	r2, [pc, #428]	; (8002b64 <MX_GPIO_Init+0x1cc>)
 80029b6:	f043 0310 	orr.w	r3, r3, #16
 80029ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029be:	4b69      	ldr	r3, [pc, #420]	; (8002b64 <MX_GPIO_Init+0x1cc>)
 80029c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029c4:	f003 0310 	and.w	r3, r3, #16
 80029c8:	61bb      	str	r3, [r7, #24]
 80029ca:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029cc:	4b65      	ldr	r3, [pc, #404]	; (8002b64 <MX_GPIO_Init+0x1cc>)
 80029ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029d2:	4a64      	ldr	r2, [pc, #400]	; (8002b64 <MX_GPIO_Init+0x1cc>)
 80029d4:	f043 0304 	orr.w	r3, r3, #4
 80029d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029dc:	4b61      	ldr	r3, [pc, #388]	; (8002b64 <MX_GPIO_Init+0x1cc>)
 80029de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029e2:	f003 0304 	and.w	r3, r3, #4
 80029e6:	617b      	str	r3, [r7, #20]
 80029e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80029ea:	4b5e      	ldr	r3, [pc, #376]	; (8002b64 <MX_GPIO_Init+0x1cc>)
 80029ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029f0:	4a5c      	ldr	r2, [pc, #368]	; (8002b64 <MX_GPIO_Init+0x1cc>)
 80029f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029fa:	4b5a      	ldr	r3, [pc, #360]	; (8002b64 <MX_GPIO_Init+0x1cc>)
 80029fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a04:	613b      	str	r3, [r7, #16]
 8002a06:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a08:	4b56      	ldr	r3, [pc, #344]	; (8002b64 <MX_GPIO_Init+0x1cc>)
 8002a0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a0e:	4a55      	ldr	r2, [pc, #340]	; (8002b64 <MX_GPIO_Init+0x1cc>)
 8002a10:	f043 0301 	orr.w	r3, r3, #1
 8002a14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a18:	4b52      	ldr	r3, [pc, #328]	; (8002b64 <MX_GPIO_Init+0x1cc>)
 8002a1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	60fb      	str	r3, [r7, #12]
 8002a24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a26:	4b4f      	ldr	r3, [pc, #316]	; (8002b64 <MX_GPIO_Init+0x1cc>)
 8002a28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a2c:	4a4d      	ldr	r2, [pc, #308]	; (8002b64 <MX_GPIO_Init+0x1cc>)
 8002a2e:	f043 0302 	orr.w	r3, r3, #2
 8002a32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a36:	4b4b      	ldr	r3, [pc, #300]	; (8002b64 <MX_GPIO_Init+0x1cc>)
 8002a38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a3c:	f003 0302 	and.w	r3, r3, #2
 8002a40:	60bb      	str	r3, [r7, #8]
 8002a42:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a44:	4b47      	ldr	r3, [pc, #284]	; (8002b64 <MX_GPIO_Init+0x1cc>)
 8002a46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a4a:	4a46      	ldr	r2, [pc, #280]	; (8002b64 <MX_GPIO_Init+0x1cc>)
 8002a4c:	f043 0308 	orr.w	r3, r3, #8
 8002a50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a54:	4b43      	ldr	r3, [pc, #268]	; (8002b64 <MX_GPIO_Init+0x1cc>)
 8002a56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a5a:	f003 0308 	and.w	r3, r3, #8
 8002a5e:	607b      	str	r3, [r7, #4]
 8002a60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RS_485_TX_EN_Pin|RS_485_RX_EN_Pin, GPIO_PIN_RESET);
 8002a62:	2200      	movs	r2, #0
 8002a64:	210c      	movs	r1, #12
 8002a66:	4840      	ldr	r0, [pc, #256]	; (8002b68 <MX_GPIO_Init+0x1d0>)
 8002a68:	f004 fab2 	bl	8006fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TELE_CE_Pin|TELE_CS_Pin, GPIO_PIN_RESET);
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	2103      	movs	r1, #3
 8002a70:	483e      	ldr	r0, [pc, #248]	; (8002b6c <MX_GPIO_Init+0x1d4>)
 8002a72:	f004 faad 	bl	8006fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002a76:	2200      	movs	r2, #0
 8002a78:	2101      	movs	r1, #1
 8002a7a:	483d      	ldr	r0, [pc, #244]	; (8002b70 <MX_GPIO_Init+0x1d8>)
 8002a7c:	f004 faa8 	bl	8006fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPS_RST_GPIO_Port, GPS_RST_Pin, GPIO_PIN_SET);
 8002a80:	2201      	movs	r2, #1
 8002a82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a86:	483b      	ldr	r0, [pc, #236]	; (8002b74 <MX_GPIO_Init+0x1dc>)
 8002a88:	f004 faa2 	bl	8006fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RS_485_TX_EN_Pin RS_485_RX_EN_Pin */
  GPIO_InitStruct.Pin = RS_485_TX_EN_Pin|RS_485_RX_EN_Pin;
 8002a8c:	230c      	movs	r3, #12
 8002a8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a90:	2301      	movs	r3, #1
 8002a92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a94:	2300      	movs	r3, #0
 8002a96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a9c:	f107 031c 	add.w	r3, r7, #28
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	4831      	ldr	r0, [pc, #196]	; (8002b68 <MX_GPIO_Init+0x1d0>)
 8002aa4:	f004 f8cc 	bl	8006c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : TELE_CE_Pin TELE_CS_Pin */
  GPIO_InitStruct.Pin = TELE_CE_Pin|TELE_CS_Pin;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aac:	2301      	movs	r3, #1
 8002aae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ab8:	f107 031c 	add.w	r3, r7, #28
 8002abc:	4619      	mov	r1, r3
 8002abe:	482b      	ldr	r0, [pc, #172]	; (8002b6c <MX_GPIO_Init+0x1d4>)
 8002ac0:	f004 f8be 	bl	8006c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : TELE_IRQ_Pin */
  GPIO_InitStruct.Pin = TELE_IRQ_Pin;
 8002ac4:	2304      	movs	r3, #4
 8002ac6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002ac8:	4b2b      	ldr	r3, [pc, #172]	; (8002b78 <MX_GPIO_Init+0x1e0>)
 8002aca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002acc:	2300      	movs	r3, #0
 8002ace:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TELE_IRQ_GPIO_Port, &GPIO_InitStruct);
 8002ad0:	f107 031c 	add.w	r3, r7, #28
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	4825      	ldr	r0, [pc, #148]	; (8002b6c <MX_GPIO_Init+0x1d4>)
 8002ad8:	f004 f8b2 	bl	8006c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002adc:	2301      	movs	r3, #1
 8002ade:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002aec:	f107 031c 	add.w	r3, r7, #28
 8002af0:	4619      	mov	r1, r3
 8002af2:	481f      	ldr	r0, [pc, #124]	; (8002b70 <MX_GPIO_Init+0x1d8>)
 8002af4:	f004 f8a4 	bl	8006c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_INT_Pin */
  GPIO_InitStruct.Pin = BTN_INT_Pin;
 8002af8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002afc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002afe:	4b1e      	ldr	r3, [pc, #120]	; (8002b78 <MX_GPIO_Init+0x1e0>)
 8002b00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b02:	2300      	movs	r3, #0
 8002b04:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BTN_INT_GPIO_Port, &GPIO_InitStruct);
 8002b06:	f107 031c 	add.w	r3, r7, #28
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	4816      	ldr	r0, [pc, #88]	; (8002b68 <MX_GPIO_Init+0x1d0>)
 8002b0e:	f004 f897 	bl	8006c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPS_RST_Pin */
  GPIO_InitStruct.Pin = GPS_RST_Pin;
 8002b12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b20:	2300      	movs	r3, #0
 8002b22:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPS_RST_GPIO_Port, &GPIO_InitStruct);
 8002b24:	f107 031c 	add.w	r3, r7, #28
 8002b28:	4619      	mov	r1, r3
 8002b2a:	4812      	ldr	r0, [pc, #72]	; (8002b74 <MX_GPIO_Init+0x1dc>)
 8002b2c:	f004 f888 	bl	8006c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : CARD_DET_Pin */
  GPIO_InitStruct.Pin = CARD_DET_Pin;
 8002b30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b36:	2300      	movs	r3, #0
 8002b38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CARD_DET_GPIO_Port, &GPIO_InitStruct);
 8002b3e:	f107 031c 	add.w	r3, r7, #28
 8002b42:	4619      	mov	r1, r3
 8002b44:	4809      	ldr	r0, [pc, #36]	; (8002b6c <MX_GPIO_Init+0x1d4>)
 8002b46:	f004 f87b 	bl	8006c40 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	2100      	movs	r1, #0
 8002b4e:	2017      	movs	r0, #23
 8002b50:	f000 fe2d 	bl	80037ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002b54:	2017      	movs	r0, #23
 8002b56:	f000 fe44 	bl	80037e2 <HAL_NVIC_EnableIRQ>

}
 8002b5a:	bf00      	nop
 8002b5c:	3730      	adds	r7, #48	; 0x30
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	58024400 	.word	0x58024400
 8002b68:	58021000 	.word	0x58021000
 8002b6c:	58020000 	.word	0x58020000
 8002b70:	58020400 	.word	0x58020400
 8002b74:	58020c00 	.word	0x58020c00
 8002b78:	11110000 	.word	0x11110000

08002b7c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	4603      	mov	r3, r0
 8002b84:	80fb      	strh	r3, [r7, #6]

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */

  end_flag = 0;
 8002b86:	4b04      	ldr	r3, [pc, #16]	; (8002b98 <HAL_GPIO_EXTI_Callback+0x1c>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	601a      	str	r2, [r3, #0]

}
 8002b8c:	bf00      	nop
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr
 8002b98:	24000008 	.word	0x24000008

08002b9c <HAL_PWR_PVDCallback>:
void HAL_PWR_PVDCallback (void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback can be implemented in the user file
  */
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
	end_flag = 0;
 8002ba0:	4b03      	ldr	r3, [pc, #12]	; (8002bb0 <HAL_PWR_PVDCallback+0x14>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	601a      	str	r2, [r3, #0]
}
 8002ba6:	bf00      	nop
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr
 8002bb0:	24000008 	.word	0x24000008

08002bb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002bb8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("Error Handler\n");
 8002bba:	4802      	ldr	r0, [pc, #8]	; (8002bc4 <Error_Handler+0x10>)
 8002bbc:	f015 fd68 	bl	8018690 <puts>
 8002bc0:	e7fb      	b.n	8002bba <Error_Handler+0x6>
 8002bc2:	bf00      	nop
 8002bc4:	08019da8 	.word	0x08019da8

08002bc8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002bd0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002bd4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8002bd8:	f003 0301 	and.w	r3, r3, #1
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d013      	beq.n	8002c08 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002be0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002be4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8002be8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d00b      	beq.n	8002c08 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002bf0:	e000      	b.n	8002bf4 <ITM_SendChar+0x2c>
    {
      __NOP();
 8002bf2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002bf4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d0f9      	beq.n	8002bf2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8002bfe:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	b2d2      	uxtb	r2, r2
 8002c06:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8002c08:	687b      	ldr	r3, [r7, #4]
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr

08002c16 <_write>:

#include <myprintf.h>
#include "main.h"

int _write(int file, char *ptr, int len)
{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b086      	sub	sp, #24
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	60f8      	str	r0, [r7, #12]
 8002c1e:	60b9      	str	r1, [r7, #8]
 8002c20:	607a      	str	r2, [r7, #4]
  int i=0;
 8002c22:	2300      	movs	r3, #0
 8002c24:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8002c26:	2300      	movs	r3, #0
 8002c28:	617b      	str	r3, [r7, #20]
 8002c2a:	e009      	b.n	8002c40 <_write+0x2a>
    ITM_SendChar((*ptr++));
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	1c5a      	adds	r2, r3, #1
 8002c30:	60ba      	str	r2, [r7, #8]
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7ff ffc7 	bl	8002bc8 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	617b      	str	r3, [r7, #20]
 8002c40:	697a      	ldr	r2, [r7, #20]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	dbf1      	blt.n	8002c2c <_write+0x16>
  return len;
 8002c48:	687b      	ldr	r3, [r7, #4]
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3718      	adds	r7, #24
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
	...

08002c54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 8002c5a:	f107 0308 	add.w	r3, r7, #8
 8002c5e:	2200      	movs	r2, #0
 8002c60:	601a      	str	r2, [r3, #0]
 8002c62:	605a      	str	r2, [r3, #4]

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c64:	4b13      	ldr	r3, [pc, #76]	; (8002cb4 <HAL_MspInit+0x60>)
 8002c66:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002c6a:	4a12      	ldr	r2, [pc, #72]	; (8002cb4 <HAL_MspInit+0x60>)
 8002c6c:	f043 0302 	orr.w	r3, r3, #2
 8002c70:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002c74:	4b0f      	ldr	r3, [pc, #60]	; (8002cb4 <HAL_MspInit+0x60>)
 8002c76:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	607b      	str	r3, [r7, #4]
 8002c80:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_AVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_AVD_IRQn, 0, 0);
 8002c82:	2200      	movs	r2, #0
 8002c84:	2100      	movs	r1, #0
 8002c86:	2001      	movs	r0, #1
 8002c88:	f000 fd91 	bl	80037ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_AVD_IRQn);
 8002c8c:	2001      	movs	r0, #1
 8002c8e:	f000 fda8 	bl	80037e2 <HAL_NVIC_EnableIRQ>

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_6;
 8002c92:	23c0      	movs	r3, #192	; 0xc0
 8002c94:	60bb      	str	r3, [r7, #8]
  sConfigPVD.Mode = PWR_PVD_MODE_IT_RISING;
 8002c96:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8002c9a:	60fb      	str	r3, [r7, #12]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8002c9c:	f107 0308 	add.w	r3, r7, #8
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f005 fc1f 	bl	80084e4 <HAL_PWR_ConfigPVD>
  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 8002ca6:	f005 fc97 	bl	80085d8 <HAL_PWR_EnablePVD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002caa:	bf00      	nop
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	58024400 	.word	0x58024400

08002cb8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b08c      	sub	sp, #48	; 0x30
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cc0:	f107 031c 	add.w	r3, r7, #28
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	601a      	str	r2, [r3, #0]
 8002cc8:	605a      	str	r2, [r3, #4]
 8002cca:	609a      	str	r2, [r3, #8]
 8002ccc:	60da      	str	r2, [r3, #12]
 8002cce:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a48      	ldr	r2, [pc, #288]	; (8002df8 <HAL_FDCAN_MspInit+0x140>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d14e      	bne.n	8002d78 <HAL_FDCAN_MspInit+0xc0>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002cda:	4b48      	ldr	r3, [pc, #288]	; (8002dfc <HAL_FDCAN_MspInit+0x144>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	3301      	adds	r3, #1
 8002ce0:	4a46      	ldr	r2, [pc, #280]	; (8002dfc <HAL_FDCAN_MspInit+0x144>)
 8002ce2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002ce4:	4b45      	ldr	r3, [pc, #276]	; (8002dfc <HAL_FDCAN_MspInit+0x144>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d10e      	bne.n	8002d0a <HAL_FDCAN_MspInit+0x52>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002cec:	4b44      	ldr	r3, [pc, #272]	; (8002e00 <HAL_FDCAN_MspInit+0x148>)
 8002cee:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002cf2:	4a43      	ldr	r2, [pc, #268]	; (8002e00 <HAL_FDCAN_MspInit+0x148>)
 8002cf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cf8:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002cfc:	4b40      	ldr	r3, [pc, #256]	; (8002e00 <HAL_FDCAN_MspInit+0x148>)
 8002cfe:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d06:	61bb      	str	r3, [r7, #24]
 8002d08:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d0a:	4b3d      	ldr	r3, [pc, #244]	; (8002e00 <HAL_FDCAN_MspInit+0x148>)
 8002d0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d10:	4a3b      	ldr	r2, [pc, #236]	; (8002e00 <HAL_FDCAN_MspInit+0x148>)
 8002d12:	f043 0302 	orr.w	r3, r3, #2
 8002d16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d1a:	4b39      	ldr	r3, [pc, #228]	; (8002e00 <HAL_FDCAN_MspInit+0x148>)
 8002d1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d20:	f003 0302 	and.w	r3, r3, #2
 8002d24:	617b      	str	r3, [r7, #20]
 8002d26:	697b      	ldr	r3, [r7, #20]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002d28:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002d2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d2e:	2302      	movs	r3, #2
 8002d30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d32:	2300      	movs	r3, #0
 8002d34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d36:	2303      	movs	r3, #3
 8002d38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002d3a:	2309      	movs	r3, #9
 8002d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d3e:	f107 031c 	add.w	r3, r7, #28
 8002d42:	4619      	mov	r1, r3
 8002d44:	482f      	ldr	r0, [pc, #188]	; (8002e04 <HAL_FDCAN_MspInit+0x14c>)
 8002d46:	f003 ff7b 	bl	8006c40 <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_PMCR_I2C_PB8_FMP);
 8002d4a:	2040      	movs	r0, #64	; 0x40
 8002d4c:	f004 f98e 	bl	800706c <HAL_I2CEx_EnableFastModePlus>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_PMCR_I2C_PB9_FMP);
 8002d50:	2080      	movs	r0, #128	; 0x80
 8002d52:	f004 f98b 	bl	800706c <HAL_I2CEx_EnableFastModePlus>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8002d56:	2200      	movs	r2, #0
 8002d58:	2100      	movs	r1, #0
 8002d5a:	2013      	movs	r0, #19
 8002d5c:	f000 fd27 	bl	80037ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8002d60:	2013      	movs	r0, #19
 8002d62:	f000 fd3e 	bl	80037e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8002d66:	2200      	movs	r2, #0
 8002d68:	2100      	movs	r1, #0
 8002d6a:	2015      	movs	r0, #21
 8002d6c:	f000 fd1f 	bl	80037ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8002d70:	2015      	movs	r0, #21
 8002d72:	f000 fd36 	bl	80037e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8002d76:	e03b      	b.n	8002df0 <HAL_FDCAN_MspInit+0x138>
  else if(hfdcan->Instance==FDCAN2)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a22      	ldr	r2, [pc, #136]	; (8002e08 <HAL_FDCAN_MspInit+0x150>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d136      	bne.n	8002df0 <HAL_FDCAN_MspInit+0x138>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002d82:	4b1e      	ldr	r3, [pc, #120]	; (8002dfc <HAL_FDCAN_MspInit+0x144>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	3301      	adds	r3, #1
 8002d88:	4a1c      	ldr	r2, [pc, #112]	; (8002dfc <HAL_FDCAN_MspInit+0x144>)
 8002d8a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002d8c:	4b1b      	ldr	r3, [pc, #108]	; (8002dfc <HAL_FDCAN_MspInit+0x144>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d10e      	bne.n	8002db2 <HAL_FDCAN_MspInit+0xfa>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002d94:	4b1a      	ldr	r3, [pc, #104]	; (8002e00 <HAL_FDCAN_MspInit+0x148>)
 8002d96:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002d9a:	4a19      	ldr	r2, [pc, #100]	; (8002e00 <HAL_FDCAN_MspInit+0x148>)
 8002d9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002da0:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002da4:	4b16      	ldr	r3, [pc, #88]	; (8002e00 <HAL_FDCAN_MspInit+0x148>)
 8002da6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dae:	613b      	str	r3, [r7, #16]
 8002db0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002db2:	4b13      	ldr	r3, [pc, #76]	; (8002e00 <HAL_FDCAN_MspInit+0x148>)
 8002db4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002db8:	4a11      	ldr	r2, [pc, #68]	; (8002e00 <HAL_FDCAN_MspInit+0x148>)
 8002dba:	f043 0302 	orr.w	r3, r3, #2
 8002dbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002dc2:	4b0f      	ldr	r3, [pc, #60]	; (8002e00 <HAL_FDCAN_MspInit+0x148>)
 8002dc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dc8:	f003 0302 	and.w	r3, r3, #2
 8002dcc:	60fb      	str	r3, [r7, #12]
 8002dce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002dd0:	2360      	movs	r3, #96	; 0x60
 8002dd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dd4:	2302      	movs	r3, #2
 8002dd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8002de0:	2309      	movs	r3, #9
 8002de2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002de4:	f107 031c 	add.w	r3, r7, #28
 8002de8:	4619      	mov	r1, r3
 8002dea:	4806      	ldr	r0, [pc, #24]	; (8002e04 <HAL_FDCAN_MspInit+0x14c>)
 8002dec:	f003 ff28 	bl	8006c40 <HAL_GPIO_Init>
}
 8002df0:	bf00      	nop
 8002df2:	3730      	adds	r7, #48	; 0x30
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	4000a000 	.word	0x4000a000
 8002dfc:	24000b3c 	.word	0x24000b3c
 8002e00:	58024400 	.word	0x58024400
 8002e04:	58020400 	.word	0x58020400
 8002e08:	4000a400 	.word	0x4000a400

08002e0c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a07      	ldr	r2, [pc, #28]	; (8002e38 <HAL_RTC_MspInit+0x2c>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d105      	bne.n	8002e2a <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002e1e:	4b07      	ldr	r3, [pc, #28]	; (8002e3c <HAL_RTC_MspInit+0x30>)
 8002e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e22:	4a06      	ldr	r2, [pc, #24]	; (8002e3c <HAL_RTC_MspInit+0x30>)
 8002e24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e28:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002e2a:	bf00      	nop
 8002e2c:	370c      	adds	r7, #12
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	58004000 	.word	0x58004000
 8002e3c:	58024400 	.word	0x58024400

08002e40 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b08a      	sub	sp, #40	; 0x28
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e48:	f107 0314 	add.w	r3, r7, #20
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	601a      	str	r2, [r3, #0]
 8002e50:	605a      	str	r2, [r3, #4]
 8002e52:	609a      	str	r2, [r3, #8]
 8002e54:	60da      	str	r2, [r3, #12]
 8002e56:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a2e      	ldr	r2, [pc, #184]	; (8002f18 <HAL_SD_MspInit+0xd8>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d155      	bne.n	8002f0e <HAL_SD_MspInit+0xce>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002e62:	4b2e      	ldr	r3, [pc, #184]	; (8002f1c <HAL_SD_MspInit+0xdc>)
 8002e64:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002e68:	4a2c      	ldr	r2, [pc, #176]	; (8002f1c <HAL_SD_MspInit+0xdc>)
 8002e6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e6e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8002e72:	4b2a      	ldr	r3, [pc, #168]	; (8002f1c <HAL_SD_MspInit+0xdc>)
 8002e74:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002e78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e7c:	613b      	str	r3, [r7, #16]
 8002e7e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e80:	4b26      	ldr	r3, [pc, #152]	; (8002f1c <HAL_SD_MspInit+0xdc>)
 8002e82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e86:	4a25      	ldr	r2, [pc, #148]	; (8002f1c <HAL_SD_MspInit+0xdc>)
 8002e88:	f043 0304 	orr.w	r3, r3, #4
 8002e8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e90:	4b22      	ldr	r3, [pc, #136]	; (8002f1c <HAL_SD_MspInit+0xdc>)
 8002e92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e96:	f003 0304 	and.w	r3, r3, #4
 8002e9a:	60fb      	str	r3, [r7, #12]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e9e:	4b1f      	ldr	r3, [pc, #124]	; (8002f1c <HAL_SD_MspInit+0xdc>)
 8002ea0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ea4:	4a1d      	ldr	r2, [pc, #116]	; (8002f1c <HAL_SD_MspInit+0xdc>)
 8002ea6:	f043 0308 	orr.w	r3, r3, #8
 8002eaa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002eae:	4b1b      	ldr	r3, [pc, #108]	; (8002f1c <HAL_SD_MspInit+0xdc>)
 8002eb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002eb4:	f003 0308 	and.w	r3, r3, #8
 8002eb8:	60bb      	str	r3, [r7, #8]
 8002eba:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002ebc:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002ec0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8002ece:	230c      	movs	r3, #12
 8002ed0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ed2:	f107 0314 	add.w	r3, r7, #20
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	4811      	ldr	r0, [pc, #68]	; (8002f20 <HAL_SD_MspInit+0xe0>)
 8002eda:	f003 feb1 	bl	8006c40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002ede:	2304      	movs	r3, #4
 8002ee0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ee2:	2302      	movs	r3, #2
 8002ee4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eea:	2303      	movs	r3, #3
 8002eec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8002eee:	230c      	movs	r3, #12
 8002ef0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ef2:	f107 0314 	add.w	r3, r7, #20
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	480a      	ldr	r0, [pc, #40]	; (8002f24 <HAL_SD_MspInit+0xe4>)
 8002efa:	f003 fea1 	bl	8006c40 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8002efe:	2200      	movs	r2, #0
 8002f00:	2100      	movs	r1, #0
 8002f02:	2031      	movs	r0, #49	; 0x31
 8002f04:	f000 fc53 	bl	80037ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8002f08:	2031      	movs	r0, #49	; 0x31
 8002f0a:	f000 fc6a 	bl	80037e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002f0e:	bf00      	nop
 8002f10:	3728      	adds	r7, #40	; 0x28
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	52007000 	.word	0x52007000
 8002f1c:	58024400 	.word	0x58024400
 8002f20:	58020800 	.word	0x58020800
 8002f24:	58020c00 	.word	0x58020c00

08002f28 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b08a      	sub	sp, #40	; 0x28
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f30:	f107 0314 	add.w	r3, r7, #20
 8002f34:	2200      	movs	r2, #0
 8002f36:	601a      	str	r2, [r3, #0]
 8002f38:	605a      	str	r2, [r3, #4]
 8002f3a:	609a      	str	r2, [r3, #8]
 8002f3c:	60da      	str	r2, [r3, #12]
 8002f3e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a1a      	ldr	r2, [pc, #104]	; (8002fb0 <HAL_SPI_MspInit+0x88>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d12d      	bne.n	8002fa6 <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002f4a:	4b1a      	ldr	r3, [pc, #104]	; (8002fb4 <HAL_SPI_MspInit+0x8c>)
 8002f4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f50:	4a18      	ldr	r2, [pc, #96]	; (8002fb4 <HAL_SPI_MspInit+0x8c>)
 8002f52:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f56:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002f5a:	4b16      	ldr	r3, [pc, #88]	; (8002fb4 <HAL_SPI_MspInit+0x8c>)
 8002f5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f64:	613b      	str	r3, [r7, #16]
 8002f66:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f68:	4b12      	ldr	r3, [pc, #72]	; (8002fb4 <HAL_SPI_MspInit+0x8c>)
 8002f6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f6e:	4a11      	ldr	r2, [pc, #68]	; (8002fb4 <HAL_SPI_MspInit+0x8c>)
 8002f70:	f043 0301 	orr.w	r3, r3, #1
 8002f74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f78:	4b0e      	ldr	r3, [pc, #56]	; (8002fb4 <HAL_SPI_MspInit+0x8c>)
 8002f7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	60fb      	str	r3, [r7, #12]
 8002f84:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002f86:	23e0      	movs	r3, #224	; 0xe0
 8002f88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f92:	2303      	movs	r3, #3
 8002f94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002f96:	2305      	movs	r3, #5
 8002f98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f9a:	f107 0314 	add.w	r3, r7, #20
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	4805      	ldr	r0, [pc, #20]	; (8002fb8 <HAL_SPI_MspInit+0x90>)
 8002fa2:	f003 fe4d 	bl	8006c40 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002fa6:	bf00      	nop
 8002fa8:	3728      	adds	r7, #40	; 0x28
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	40013000 	.word	0x40013000
 8002fb4:	58024400 	.word	0x58024400
 8002fb8:	58020000 	.word	0x58020000

08002fbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b08c      	sub	sp, #48	; 0x30
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fc4:	f107 031c 	add.w	r3, r7, #28
 8002fc8:	2200      	movs	r2, #0
 8002fca:	601a      	str	r2, [r3, #0]
 8002fcc:	605a      	str	r2, [r3, #4]
 8002fce:	609a      	str	r2, [r3, #8]
 8002fd0:	60da      	str	r2, [r3, #12]
 8002fd2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a4b      	ldr	r2, [pc, #300]	; (8003108 <HAL_UART_MspInit+0x14c>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d12e      	bne.n	800303c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8002fde:	4b4b      	ldr	r3, [pc, #300]	; (800310c <HAL_UART_MspInit+0x150>)
 8002fe0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002fe4:	4a49      	ldr	r2, [pc, #292]	; (800310c <HAL_UART_MspInit+0x150>)
 8002fe6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002fea:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002fee:	4b47      	ldr	r3, [pc, #284]	; (800310c <HAL_UART_MspInit+0x150>)
 8002ff0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ff4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002ff8:	61bb      	str	r3, [r7, #24]
 8002ffa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ffc:	4b43      	ldr	r3, [pc, #268]	; (800310c <HAL_UART_MspInit+0x150>)
 8002ffe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003002:	4a42      	ldr	r2, [pc, #264]	; (800310c <HAL_UART_MspInit+0x150>)
 8003004:	f043 0310 	orr.w	r3, r3, #16
 8003008:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800300c:	4b3f      	ldr	r3, [pc, #252]	; (800310c <HAL_UART_MspInit+0x150>)
 800300e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003012:	f003 0310 	and.w	r3, r3, #16
 8003016:	617b      	str	r3, [r7, #20]
 8003018:	697b      	ldr	r3, [r7, #20]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800301a:	2303      	movs	r3, #3
 800301c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800301e:	2302      	movs	r3, #2
 8003020:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003022:	2300      	movs	r3, #0
 8003024:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003026:	2300      	movs	r3, #0
 8003028:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800302a:	2308      	movs	r3, #8
 800302c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800302e:	f107 031c 	add.w	r3, r7, #28
 8003032:	4619      	mov	r1, r3
 8003034:	4836      	ldr	r0, [pc, #216]	; (8003110 <HAL_UART_MspInit+0x154>)
 8003036:	f003 fe03 	bl	8006c40 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800303a:	e061      	b.n	8003100 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART3)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a34      	ldr	r2, [pc, #208]	; (8003114 <HAL_UART_MspInit+0x158>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d15c      	bne.n	8003100 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003046:	4b31      	ldr	r3, [pc, #196]	; (800310c <HAL_UART_MspInit+0x150>)
 8003048:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800304c:	4a2f      	ldr	r2, [pc, #188]	; (800310c <HAL_UART_MspInit+0x150>)
 800304e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003052:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003056:	4b2d      	ldr	r3, [pc, #180]	; (800310c <HAL_UART_MspInit+0x150>)
 8003058:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800305c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003060:	613b      	str	r3, [r7, #16]
 8003062:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003064:	4b29      	ldr	r3, [pc, #164]	; (800310c <HAL_UART_MspInit+0x150>)
 8003066:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800306a:	4a28      	ldr	r2, [pc, #160]	; (800310c <HAL_UART_MspInit+0x150>)
 800306c:	f043 0308 	orr.w	r3, r3, #8
 8003070:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003074:	4b25      	ldr	r3, [pc, #148]	; (800310c <HAL_UART_MspInit+0x150>)
 8003076:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800307a:	f003 0308 	and.w	r3, r3, #8
 800307e:	60fb      	str	r3, [r7, #12]
 8003080:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003082:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003086:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003088:	2302      	movs	r3, #2
 800308a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800308c:	2300      	movs	r3, #0
 800308e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003090:	2300      	movs	r3, #0
 8003092:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003094:	2307      	movs	r3, #7
 8003096:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003098:	f107 031c 	add.w	r3, r7, #28
 800309c:	4619      	mov	r1, r3
 800309e:	481e      	ldr	r0, [pc, #120]	; (8003118 <HAL_UART_MspInit+0x15c>)
 80030a0:	f003 fdce 	bl	8006c40 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream0;
 80030a4:	4b1d      	ldr	r3, [pc, #116]	; (800311c <HAL_UART_MspInit+0x160>)
 80030a6:	4a1e      	ldr	r2, [pc, #120]	; (8003120 <HAL_UART_MspInit+0x164>)
 80030a8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80030aa:	4b1c      	ldr	r3, [pc, #112]	; (800311c <HAL_UART_MspInit+0x160>)
 80030ac:	222d      	movs	r2, #45	; 0x2d
 80030ae:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80030b0:	4b1a      	ldr	r3, [pc, #104]	; (800311c <HAL_UART_MspInit+0x160>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030b6:	4b19      	ldr	r3, [pc, #100]	; (800311c <HAL_UART_MspInit+0x160>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80030bc:	4b17      	ldr	r3, [pc, #92]	; (800311c <HAL_UART_MspInit+0x160>)
 80030be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030c2:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030c4:	4b15      	ldr	r3, [pc, #84]	; (800311c <HAL_UART_MspInit+0x160>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030ca:	4b14      	ldr	r3, [pc, #80]	; (800311c <HAL_UART_MspInit+0x160>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80030d0:	4b12      	ldr	r3, [pc, #72]	; (800311c <HAL_UART_MspInit+0x160>)
 80030d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030d6:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80030d8:	4b10      	ldr	r3, [pc, #64]	; (800311c <HAL_UART_MspInit+0x160>)
 80030da:	2200      	movs	r2, #0
 80030dc:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030de:	4b0f      	ldr	r3, [pc, #60]	; (800311c <HAL_UART_MspInit+0x160>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80030e4:	480d      	ldr	r0, [pc, #52]	; (800311c <HAL_UART_MspInit+0x160>)
 80030e6:	f000 fb97 	bl	8003818 <HAL_DMA_Init>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d001      	beq.n	80030f4 <HAL_UART_MspInit+0x138>
      Error_Handler();
 80030f0:	f7ff fd60 	bl	8002bb4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4a09      	ldr	r2, [pc, #36]	; (800311c <HAL_UART_MspInit+0x160>)
 80030f8:	679a      	str	r2, [r3, #120]	; 0x78
 80030fa:	4a08      	ldr	r2, [pc, #32]	; (800311c <HAL_UART_MspInit+0x160>)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003100:	bf00      	nop
 8003102:	3730      	adds	r7, #48	; 0x30
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	40007c00 	.word	0x40007c00
 800310c:	58024400 	.word	0x58024400
 8003110:	58021000 	.word	0x58021000
 8003114:	40004800 	.word	0x40004800
 8003118:	58020c00 	.word	0x58020c00
 800311c:	24001344 	.word	0x24001344
 8003120:	40020010 	.word	0x40020010

08003124 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8003128:	f006 fa98 	bl	800965c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800312c:	e7fe      	b.n	800312c <NMI_Handler+0x8>

0800312e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800312e:	b480      	push	{r7}
 8003130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003132:	e7fe      	b.n	8003132 <HardFault_Handler+0x4>

08003134 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003134:	b480      	push	{r7}
 8003136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003138:	e7fe      	b.n	8003138 <MemManage_Handler+0x4>

0800313a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800313a:	b480      	push	{r7}
 800313c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800313e:	e7fe      	b.n	800313e <BusFault_Handler+0x4>

08003140 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003140:	b480      	push	{r7}
 8003142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003144:	e7fe      	b.n	8003144 <UsageFault_Handler+0x4>

08003146 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003146:	b480      	push	{r7}
 8003148:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800314a:	bf00      	nop
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr

08003154 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003158:	bf00      	nop
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr

08003162 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003162:	b480      	push	{r7}
 8003164:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003166:	bf00      	nop
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003174:	f000 f9f2 	bl	800355c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003178:	bf00      	nop
 800317a:	bd80      	pop	{r7, pc}

0800317c <PVD_AVD_IRQHandler>:

/**
  * @brief This function handles PVD and AVD interrupts through EXTI line 16.
  */
void PVD_AVD_IRQHandler(void)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_AVD_IRQn 0 */

  /* USER CODE END PVD_AVD_IRQn 0 */
  HAL_PWREx_PVD_AVD_IRQHandler();
 8003180:	f005 fa84 	bl	800868c <HAL_PWREx_PVD_AVD_IRQHandler>
  /* USER CODE BEGIN PVD_AVD_IRQn 1 */

  /* USER CODE END PVD_AVD_IRQn 1 */
}
 8003184:	bf00      	nop
 8003186:	bd80      	pop	{r7, pc}

08003188 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800318c:	4802      	ldr	r0, [pc, #8]	; (8003198 <DMA1_Stream0_IRQHandler+0x10>)
 800318e:	f001 f909 	bl	80043a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003192:	bf00      	nop
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	24001344 	.word	0x24001344

0800319c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80031a0:	4802      	ldr	r0, [pc, #8]	; (80031ac <FDCAN1_IT0_IRQHandler+0x10>)
 80031a2:	f003 f8bd 	bl	8006320 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80031a6:	bf00      	nop
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	240014ec 	.word	0x240014ec

080031b0 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80031b4:	4802      	ldr	r0, [pc, #8]	; (80031c0 <FDCAN1_IT1_IRQHandler+0x10>)
 80031b6:	f003 f8b3 	bl	8006320 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 80031ba:	bf00      	nop
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	240014ec 	.word	0x240014ec

080031c4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80031c8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80031cc:	f003 ff34 	bl	8007038 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80031d0:	bf00      	nop
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80031d8:	4802      	ldr	r0, [pc, #8]	; (80031e4 <SDMMC1_IRQHandler+0x10>)
 80031da:	f009 f9c1 	bl	800c560 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80031de:	bf00      	nop
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	24001448 	.word	0x24001448

080031e8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80031ec:	4802      	ldr	r0, [pc, #8]	; (80031f8 <OTG_FS_IRQHandler+0x10>)
 80031ee:	f004 f8b8 	bl	8007362 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80031f2:	bf00      	nop
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	2400207c 	.word	0x2400207c

080031fc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b086      	sub	sp, #24
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003208:	2300      	movs	r3, #0
 800320a:	617b      	str	r3, [r7, #20]
 800320c:	e00a      	b.n	8003224 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800320e:	f3af 8000 	nop.w
 8003212:	4601      	mov	r1, r0
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	1c5a      	adds	r2, r3, #1
 8003218:	60ba      	str	r2, [r7, #8]
 800321a:	b2ca      	uxtb	r2, r1
 800321c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	3301      	adds	r3, #1
 8003222:	617b      	str	r3, [r7, #20]
 8003224:	697a      	ldr	r2, [r7, #20]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	429a      	cmp	r2, r3
 800322a:	dbf0      	blt.n	800320e <_read+0x12>
	}

return len;
 800322c:	687b      	ldr	r3, [r7, #4]
}
 800322e:	4618      	mov	r0, r3
 8003230:	3718      	adds	r7, #24
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}

08003236 <_close>:
	}
	return len;
}

int _close(int file)
{
 8003236:	b480      	push	{r7}
 8003238:	b083      	sub	sp, #12
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
	return -1;
 800323e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003242:	4618      	mov	r0, r3
 8003244:	370c      	adds	r7, #12
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr

0800324e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800324e:	b480      	push	{r7}
 8003250:	b083      	sub	sp, #12
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
 8003256:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800325e:	605a      	str	r2, [r3, #4]
	return 0;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	370c      	adds	r7, #12
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr

0800326e <_isatty>:

int _isatty(int file)
{
 800326e:	b480      	push	{r7}
 8003270:	b083      	sub	sp, #12
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
	return 1;
 8003276:	2301      	movs	r3, #1
}
 8003278:	4618      	mov	r0, r3
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003284:	b480      	push	{r7}
 8003286:	b085      	sub	sp, #20
 8003288:	af00      	add	r7, sp, #0
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	607a      	str	r2, [r7, #4]
	return 0;
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	3714      	adds	r7, #20
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
	...

080032a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b086      	sub	sp, #24
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80032a8:	4a14      	ldr	r2, [pc, #80]	; (80032fc <_sbrk+0x5c>)
 80032aa:	4b15      	ldr	r3, [pc, #84]	; (8003300 <_sbrk+0x60>)
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80032b4:	4b13      	ldr	r3, [pc, #76]	; (8003304 <_sbrk+0x64>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d102      	bne.n	80032c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80032bc:	4b11      	ldr	r3, [pc, #68]	; (8003304 <_sbrk+0x64>)
 80032be:	4a12      	ldr	r2, [pc, #72]	; (8003308 <_sbrk+0x68>)
 80032c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80032c2:	4b10      	ldr	r3, [pc, #64]	; (8003304 <_sbrk+0x64>)
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4413      	add	r3, r2
 80032ca:	693a      	ldr	r2, [r7, #16]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d207      	bcs.n	80032e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80032d0:	f015 f874 	bl	80183bc <__errno>
 80032d4:	4602      	mov	r2, r0
 80032d6:	230c      	movs	r3, #12
 80032d8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80032da:	f04f 33ff 	mov.w	r3, #4294967295
 80032de:	e009      	b.n	80032f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80032e0:	4b08      	ldr	r3, [pc, #32]	; (8003304 <_sbrk+0x64>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80032e6:	4b07      	ldr	r3, [pc, #28]	; (8003304 <_sbrk+0x64>)
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4413      	add	r3, r2
 80032ee:	4a05      	ldr	r2, [pc, #20]	; (8003304 <_sbrk+0x64>)
 80032f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80032f2:	68fb      	ldr	r3, [r7, #12]
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3718      	adds	r7, #24
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	24080000 	.word	0x24080000
 8003300:	00000400 	.word	0x00000400
 8003304:	24000b40 	.word	0x24000b40
 8003308:	24002488 	.word	0x24002488

0800330c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800330c:	b480      	push	{r7}
 800330e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003310:	4b39      	ldr	r3, [pc, #228]	; (80033f8 <SystemInit+0xec>)
 8003312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003316:	4a38      	ldr	r2, [pc, #224]	; (80033f8 <SystemInit+0xec>)
 8003318:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800331c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003320:	4b36      	ldr	r3, [pc, #216]	; (80033fc <SystemInit+0xf0>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 030f 	and.w	r3, r3, #15
 8003328:	2b06      	cmp	r3, #6
 800332a:	d807      	bhi.n	800333c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800332c:	4b33      	ldr	r3, [pc, #204]	; (80033fc <SystemInit+0xf0>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f023 030f 	bic.w	r3, r3, #15
 8003334:	4a31      	ldr	r2, [pc, #196]	; (80033fc <SystemInit+0xf0>)
 8003336:	f043 0307 	orr.w	r3, r3, #7
 800333a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800333c:	4b30      	ldr	r3, [pc, #192]	; (8003400 <SystemInit+0xf4>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a2f      	ldr	r2, [pc, #188]	; (8003400 <SystemInit+0xf4>)
 8003342:	f043 0301 	orr.w	r3, r3, #1
 8003346:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003348:	4b2d      	ldr	r3, [pc, #180]	; (8003400 <SystemInit+0xf4>)
 800334a:	2200      	movs	r2, #0
 800334c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800334e:	4b2c      	ldr	r3, [pc, #176]	; (8003400 <SystemInit+0xf4>)
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	492b      	ldr	r1, [pc, #172]	; (8003400 <SystemInit+0xf4>)
 8003354:	4b2b      	ldr	r3, [pc, #172]	; (8003404 <SystemInit+0xf8>)
 8003356:	4013      	ands	r3, r2
 8003358:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800335a:	4b28      	ldr	r3, [pc, #160]	; (80033fc <SystemInit+0xf0>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 030f 	and.w	r3, r3, #15
 8003362:	2b07      	cmp	r3, #7
 8003364:	d907      	bls.n	8003376 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003366:	4b25      	ldr	r3, [pc, #148]	; (80033fc <SystemInit+0xf0>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f023 030f 	bic.w	r3, r3, #15
 800336e:	4a23      	ldr	r2, [pc, #140]	; (80033fc <SystemInit+0xf0>)
 8003370:	f043 0307 	orr.w	r3, r3, #7
 8003374:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003376:	4b22      	ldr	r3, [pc, #136]	; (8003400 <SystemInit+0xf4>)
 8003378:	2200      	movs	r2, #0
 800337a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800337c:	4b20      	ldr	r3, [pc, #128]	; (8003400 <SystemInit+0xf4>)
 800337e:	2200      	movs	r2, #0
 8003380:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003382:	4b1f      	ldr	r3, [pc, #124]	; (8003400 <SystemInit+0xf4>)
 8003384:	2200      	movs	r2, #0
 8003386:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003388:	4b1d      	ldr	r3, [pc, #116]	; (8003400 <SystemInit+0xf4>)
 800338a:	4a1f      	ldr	r2, [pc, #124]	; (8003408 <SystemInit+0xfc>)
 800338c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800338e:	4b1c      	ldr	r3, [pc, #112]	; (8003400 <SystemInit+0xf4>)
 8003390:	4a1e      	ldr	r2, [pc, #120]	; (800340c <SystemInit+0x100>)
 8003392:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003394:	4b1a      	ldr	r3, [pc, #104]	; (8003400 <SystemInit+0xf4>)
 8003396:	4a1e      	ldr	r2, [pc, #120]	; (8003410 <SystemInit+0x104>)
 8003398:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800339a:	4b19      	ldr	r3, [pc, #100]	; (8003400 <SystemInit+0xf4>)
 800339c:	2200      	movs	r2, #0
 800339e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80033a0:	4b17      	ldr	r3, [pc, #92]	; (8003400 <SystemInit+0xf4>)
 80033a2:	4a1b      	ldr	r2, [pc, #108]	; (8003410 <SystemInit+0x104>)
 80033a4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80033a6:	4b16      	ldr	r3, [pc, #88]	; (8003400 <SystemInit+0xf4>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80033ac:	4b14      	ldr	r3, [pc, #80]	; (8003400 <SystemInit+0xf4>)
 80033ae:	4a18      	ldr	r2, [pc, #96]	; (8003410 <SystemInit+0x104>)
 80033b0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80033b2:	4b13      	ldr	r3, [pc, #76]	; (8003400 <SystemInit+0xf4>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80033b8:	4b11      	ldr	r3, [pc, #68]	; (8003400 <SystemInit+0xf4>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a10      	ldr	r2, [pc, #64]	; (8003400 <SystemInit+0xf4>)
 80033be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033c2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80033c4:	4b0e      	ldr	r3, [pc, #56]	; (8003400 <SystemInit+0xf4>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80033ca:	4b12      	ldr	r3, [pc, #72]	; (8003414 <SystemInit+0x108>)
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	4b12      	ldr	r3, [pc, #72]	; (8003418 <SystemInit+0x10c>)
 80033d0:	4013      	ands	r3, r2
 80033d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033d6:	d202      	bcs.n	80033de <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80033d8:	4b10      	ldr	r3, [pc, #64]	; (800341c <SystemInit+0x110>)
 80033da:	2201      	movs	r2, #1
 80033dc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80033de:	4b10      	ldr	r3, [pc, #64]	; (8003420 <SystemInit+0x114>)
 80033e0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80033e4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80033e6:	4b04      	ldr	r3, [pc, #16]	; (80033f8 <SystemInit+0xec>)
 80033e8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80033ec:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80033ee:	bf00      	nop
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr
 80033f8:	e000ed00 	.word	0xe000ed00
 80033fc:	52002000 	.word	0x52002000
 8003400:	58024400 	.word	0x58024400
 8003404:	eaf6ed7f 	.word	0xeaf6ed7f
 8003408:	02020200 	.word	0x02020200
 800340c:	01ff0000 	.word	0x01ff0000
 8003410:	01010280 	.word	0x01010280
 8003414:	5c001000 	.word	0x5c001000
 8003418:	ffff0000 	.word	0xffff0000
 800341c:	51008108 	.word	0x51008108
 8003420:	52004000 	.word	0x52004000

08003424 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003424:	f8df d034 	ldr.w	sp, [pc, #52]	; 800345c <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003428:	f7ff ff70 	bl	800330c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800342c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800342e:	e003      	b.n	8003438 <LoopCopyDataInit>

08003430 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003430:	4b0b      	ldr	r3, [pc, #44]	; (8003460 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8003432:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003434:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003436:	3104      	adds	r1, #4

08003438 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003438:	480a      	ldr	r0, [pc, #40]	; (8003464 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 800343a:	4b0b      	ldr	r3, [pc, #44]	; (8003468 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 800343c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800343e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003440:	d3f6      	bcc.n	8003430 <CopyDataInit>
  ldr  r2, =_sbss
 8003442:	4a0a      	ldr	r2, [pc, #40]	; (800346c <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8003444:	e002      	b.n	800344c <LoopFillZerobss>

08003446 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003446:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003448:	f842 3b04 	str.w	r3, [r2], #4

0800344c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800344c:	4b08      	ldr	r3, [pc, #32]	; (8003470 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 800344e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003450:	d3f9      	bcc.n	8003446 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003452:	f014 ffb9 	bl	80183c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003456:	f7fe fb53 	bl	8001b00 <main>
  bx  lr    
 800345a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800345c:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8003460:	0801a03c 	.word	0x0801a03c
  ldr  r0, =_sdata
 8003464:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8003468:	240001d8 	.word	0x240001d8
  ldr  r2, =_sbss
 800346c:	240001d8 	.word	0x240001d8
  ldr  r3, = _ebss
 8003470:	24002488 	.word	0x24002488

08003474 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003474:	e7fe      	b.n	8003474 <ADC3_IRQHandler>
	...

08003478 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800347e:	2003      	movs	r0, #3
 8003480:	f000 f98a 	bl	8003798 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003484:	f005 ff1c 	bl	80092c0 <HAL_RCC_GetSysClockFreq>
 8003488:	4601      	mov	r1, r0
 800348a:	4b15      	ldr	r3, [pc, #84]	; (80034e0 <HAL_Init+0x68>)
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	0a1b      	lsrs	r3, r3, #8
 8003490:	f003 030f 	and.w	r3, r3, #15
 8003494:	4a13      	ldr	r2, [pc, #76]	; (80034e4 <HAL_Init+0x6c>)
 8003496:	5cd3      	ldrb	r3, [r2, r3]
 8003498:	f003 031f 	and.w	r3, r3, #31
 800349c:	fa21 f303 	lsr.w	r3, r1, r3
 80034a0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80034a2:	4b0f      	ldr	r3, [pc, #60]	; (80034e0 <HAL_Init+0x68>)
 80034a4:	699b      	ldr	r3, [r3, #24]
 80034a6:	f003 030f 	and.w	r3, r3, #15
 80034aa:	4a0e      	ldr	r2, [pc, #56]	; (80034e4 <HAL_Init+0x6c>)
 80034ac:	5cd3      	ldrb	r3, [r2, r3]
 80034ae:	f003 031f 	and.w	r3, r3, #31
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	fa22 f303 	lsr.w	r3, r2, r3
 80034b8:	4a0b      	ldr	r2, [pc, #44]	; (80034e8 <HAL_Init+0x70>)
 80034ba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80034bc:	4a0b      	ldr	r2, [pc, #44]	; (80034ec <HAL_Init+0x74>)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80034c2:	2000      	movs	r0, #0
 80034c4:	f000 f814 	bl	80034f0 <HAL_InitTick>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d001      	beq.n	80034d2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e002      	b.n	80034d8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80034d2:	f7ff fbbf 	bl	8002c54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3708      	adds	r7, #8
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	58024400 	.word	0x58024400
 80034e4:	08019e9c 	.word	0x08019e9c
 80034e8:	24000010 	.word	0x24000010
 80034ec:	2400000c 	.word	0x2400000c

080034f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80034f8:	4b15      	ldr	r3, [pc, #84]	; (8003550 <HAL_InitTick+0x60>)
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d101      	bne.n	8003504 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e021      	b.n	8003548 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003504:	4b13      	ldr	r3, [pc, #76]	; (8003554 <HAL_InitTick+0x64>)
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	4b11      	ldr	r3, [pc, #68]	; (8003550 <HAL_InitTick+0x60>)
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	4619      	mov	r1, r3
 800350e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003512:	fbb3 f3f1 	udiv	r3, r3, r1
 8003516:	fbb2 f3f3 	udiv	r3, r2, r3
 800351a:	4618      	mov	r0, r3
 800351c:	f000 f96f 	bl	80037fe <HAL_SYSTICK_Config>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d001      	beq.n	800352a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e00e      	b.n	8003548 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2b0f      	cmp	r3, #15
 800352e:	d80a      	bhi.n	8003546 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003530:	2200      	movs	r2, #0
 8003532:	6879      	ldr	r1, [r7, #4]
 8003534:	f04f 30ff 	mov.w	r0, #4294967295
 8003538:	f000 f939 	bl	80037ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800353c:	4a06      	ldr	r2, [pc, #24]	; (8003558 <HAL_InitTick+0x68>)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003542:	2300      	movs	r3, #0
 8003544:	e000      	b.n	8003548 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
}
 8003548:	4618      	mov	r0, r3
 800354a:	3708      	adds	r7, #8
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}
 8003550:	24000018 	.word	0x24000018
 8003554:	2400000c 	.word	0x2400000c
 8003558:	24000014 	.word	0x24000014

0800355c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800355c:	b480      	push	{r7}
 800355e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003560:	4b06      	ldr	r3, [pc, #24]	; (800357c <HAL_IncTick+0x20>)
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	461a      	mov	r2, r3
 8003566:	4b06      	ldr	r3, [pc, #24]	; (8003580 <HAL_IncTick+0x24>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4413      	add	r3, r2
 800356c:	4a04      	ldr	r2, [pc, #16]	; (8003580 <HAL_IncTick+0x24>)
 800356e:	6013      	str	r3, [r2, #0]
}
 8003570:	bf00      	nop
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	24000018 	.word	0x24000018
 8003580:	24001740 	.word	0x24001740

08003584 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003584:	b480      	push	{r7}
 8003586:	af00      	add	r7, sp, #0
  return uwTick;
 8003588:	4b03      	ldr	r3, [pc, #12]	; (8003598 <HAL_GetTick+0x14>)
 800358a:	681b      	ldr	r3, [r3, #0]
}
 800358c:	4618      	mov	r0, r3
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	24001740 	.word	0x24001740

0800359c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80035a4:	f7ff ffee 	bl	8003584 <HAL_GetTick>
 80035a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b4:	d005      	beq.n	80035c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80035b6:	4b09      	ldr	r3, [pc, #36]	; (80035dc <HAL_Delay+0x40>)
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	461a      	mov	r2, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	4413      	add	r3, r2
 80035c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80035c2:	bf00      	nop
 80035c4:	f7ff ffde 	bl	8003584 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	68fa      	ldr	r2, [r7, #12]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d8f7      	bhi.n	80035c4 <HAL_Delay+0x28>
  {
  }
}
 80035d4:	bf00      	nop
 80035d6:	3710      	adds	r7, #16
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	24000018 	.word	0x24000018

080035e0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80035e0:	b480      	push	{r7}
 80035e2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80035e4:	4b03      	ldr	r3, [pc, #12]	; (80035f4 <HAL_GetREVID+0x14>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	0c1b      	lsrs	r3, r3, #16
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr
 80035f4:	5c001000 	.word	0x5c001000

080035f8 <__NVIC_SetPriorityGrouping>:
{
 80035f8:	b480      	push	{r7}
 80035fa:	b085      	sub	sp, #20
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f003 0307 	and.w	r3, r3, #7
 8003606:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003608:	4b0b      	ldr	r3, [pc, #44]	; (8003638 <__NVIC_SetPriorityGrouping+0x40>)
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800360e:	68ba      	ldr	r2, [r7, #8]
 8003610:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003614:	4013      	ands	r3, r2
 8003616:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003620:	4b06      	ldr	r3, [pc, #24]	; (800363c <__NVIC_SetPriorityGrouping+0x44>)
 8003622:	4313      	orrs	r3, r2
 8003624:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003626:	4a04      	ldr	r2, [pc, #16]	; (8003638 <__NVIC_SetPriorityGrouping+0x40>)
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	60d3      	str	r3, [r2, #12]
}
 800362c:	bf00      	nop
 800362e:	3714      	adds	r7, #20
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr
 8003638:	e000ed00 	.word	0xe000ed00
 800363c:	05fa0000 	.word	0x05fa0000

08003640 <__NVIC_GetPriorityGrouping>:
{
 8003640:	b480      	push	{r7}
 8003642:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003644:	4b04      	ldr	r3, [pc, #16]	; (8003658 <__NVIC_GetPriorityGrouping+0x18>)
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	0a1b      	lsrs	r3, r3, #8
 800364a:	f003 0307 	and.w	r3, r3, #7
}
 800364e:	4618      	mov	r0, r3
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr
 8003658:	e000ed00 	.word	0xe000ed00

0800365c <__NVIC_EnableIRQ>:
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	4603      	mov	r3, r0
 8003664:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003666:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800366a:	2b00      	cmp	r3, #0
 800366c:	db0b      	blt.n	8003686 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800366e:	88fb      	ldrh	r3, [r7, #6]
 8003670:	f003 021f 	and.w	r2, r3, #31
 8003674:	4907      	ldr	r1, [pc, #28]	; (8003694 <__NVIC_EnableIRQ+0x38>)
 8003676:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800367a:	095b      	lsrs	r3, r3, #5
 800367c:	2001      	movs	r0, #1
 800367e:	fa00 f202 	lsl.w	r2, r0, r2
 8003682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003686:	bf00      	nop
 8003688:	370c      	adds	r7, #12
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	e000e100 	.word	0xe000e100

08003698 <__NVIC_SetPriority>:
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	4603      	mov	r3, r0
 80036a0:	6039      	str	r1, [r7, #0]
 80036a2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80036a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	db0a      	blt.n	80036c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	b2da      	uxtb	r2, r3
 80036b0:	490c      	ldr	r1, [pc, #48]	; (80036e4 <__NVIC_SetPriority+0x4c>)
 80036b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036b6:	0112      	lsls	r2, r2, #4
 80036b8:	b2d2      	uxtb	r2, r2
 80036ba:	440b      	add	r3, r1
 80036bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80036c0:	e00a      	b.n	80036d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	b2da      	uxtb	r2, r3
 80036c6:	4908      	ldr	r1, [pc, #32]	; (80036e8 <__NVIC_SetPriority+0x50>)
 80036c8:	88fb      	ldrh	r3, [r7, #6]
 80036ca:	f003 030f 	and.w	r3, r3, #15
 80036ce:	3b04      	subs	r3, #4
 80036d0:	0112      	lsls	r2, r2, #4
 80036d2:	b2d2      	uxtb	r2, r2
 80036d4:	440b      	add	r3, r1
 80036d6:	761a      	strb	r2, [r3, #24]
}
 80036d8:	bf00      	nop
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr
 80036e4:	e000e100 	.word	0xe000e100
 80036e8:	e000ed00 	.word	0xe000ed00

080036ec <NVIC_EncodePriority>:
{
 80036ec:	b480      	push	{r7}
 80036ee:	b089      	sub	sp, #36	; 0x24
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f003 0307 	and.w	r3, r3, #7
 80036fe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	f1c3 0307 	rsb	r3, r3, #7
 8003706:	2b04      	cmp	r3, #4
 8003708:	bf28      	it	cs
 800370a:	2304      	movcs	r3, #4
 800370c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	3304      	adds	r3, #4
 8003712:	2b06      	cmp	r3, #6
 8003714:	d902      	bls.n	800371c <NVIC_EncodePriority+0x30>
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	3b03      	subs	r3, #3
 800371a:	e000      	b.n	800371e <NVIC_EncodePriority+0x32>
 800371c:	2300      	movs	r3, #0
 800371e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003720:	f04f 32ff 	mov.w	r2, #4294967295
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	fa02 f303 	lsl.w	r3, r2, r3
 800372a:	43da      	mvns	r2, r3
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	401a      	ands	r2, r3
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003734:	f04f 31ff 	mov.w	r1, #4294967295
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	fa01 f303 	lsl.w	r3, r1, r3
 800373e:	43d9      	mvns	r1, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003744:	4313      	orrs	r3, r2
}
 8003746:	4618      	mov	r0, r3
 8003748:	3724      	adds	r7, #36	; 0x24
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
	...

08003754 <SysTick_Config>:
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	3b01      	subs	r3, #1
 8003760:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003764:	d301      	bcc.n	800376a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003766:	2301      	movs	r3, #1
 8003768:	e00f      	b.n	800378a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800376a:	4a0a      	ldr	r2, [pc, #40]	; (8003794 <SysTick_Config+0x40>)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	3b01      	subs	r3, #1
 8003770:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003772:	210f      	movs	r1, #15
 8003774:	f04f 30ff 	mov.w	r0, #4294967295
 8003778:	f7ff ff8e 	bl	8003698 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800377c:	4b05      	ldr	r3, [pc, #20]	; (8003794 <SysTick_Config+0x40>)
 800377e:	2200      	movs	r2, #0
 8003780:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003782:	4b04      	ldr	r3, [pc, #16]	; (8003794 <SysTick_Config+0x40>)
 8003784:	2207      	movs	r2, #7
 8003786:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3708      	adds	r7, #8
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	e000e010 	.word	0xe000e010

08003798 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f7ff ff29 	bl	80035f8 <__NVIC_SetPriorityGrouping>
}
 80037a6:	bf00      	nop
 80037a8:	3708      	adds	r7, #8
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}

080037ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037ae:	b580      	push	{r7, lr}
 80037b0:	b086      	sub	sp, #24
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	4603      	mov	r3, r0
 80037b6:	60b9      	str	r1, [r7, #8]
 80037b8:	607a      	str	r2, [r7, #4]
 80037ba:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80037bc:	f7ff ff40 	bl	8003640 <__NVIC_GetPriorityGrouping>
 80037c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	68b9      	ldr	r1, [r7, #8]
 80037c6:	6978      	ldr	r0, [r7, #20]
 80037c8:	f7ff ff90 	bl	80036ec <NVIC_EncodePriority>
 80037cc:	4602      	mov	r2, r0
 80037ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80037d2:	4611      	mov	r1, r2
 80037d4:	4618      	mov	r0, r3
 80037d6:	f7ff ff5f 	bl	8003698 <__NVIC_SetPriority>
}
 80037da:	bf00      	nop
 80037dc:	3718      	adds	r7, #24
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}

080037e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037e2:	b580      	push	{r7, lr}
 80037e4:	b082      	sub	sp, #8
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	4603      	mov	r3, r0
 80037ea:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037f0:	4618      	mov	r0, r3
 80037f2:	f7ff ff33 	bl	800365c <__NVIC_EnableIRQ>
}
 80037f6:	bf00      	nop
 80037f8:	3708      	adds	r7, #8
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}

080037fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037fe:	b580      	push	{r7, lr}
 8003800:	b082      	sub	sp, #8
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f7ff ffa4 	bl	8003754 <SysTick_Config>
 800380c:	4603      	mov	r3, r0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3708      	adds	r7, #8
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
	...

08003818 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b086      	sub	sp, #24
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003820:	f7ff feb0 	bl	8003584 <HAL_GetTick>
 8003824:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d101      	bne.n	8003830 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e316      	b.n	8003e5e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a66      	ldr	r2, [pc, #408]	; (80039d0 <HAL_DMA_Init+0x1b8>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d04a      	beq.n	80038d0 <HAL_DMA_Init+0xb8>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a65      	ldr	r2, [pc, #404]	; (80039d4 <HAL_DMA_Init+0x1bc>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d045      	beq.n	80038d0 <HAL_DMA_Init+0xb8>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a63      	ldr	r2, [pc, #396]	; (80039d8 <HAL_DMA_Init+0x1c0>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d040      	beq.n	80038d0 <HAL_DMA_Init+0xb8>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a62      	ldr	r2, [pc, #392]	; (80039dc <HAL_DMA_Init+0x1c4>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d03b      	beq.n	80038d0 <HAL_DMA_Init+0xb8>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a60      	ldr	r2, [pc, #384]	; (80039e0 <HAL_DMA_Init+0x1c8>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d036      	beq.n	80038d0 <HAL_DMA_Init+0xb8>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a5f      	ldr	r2, [pc, #380]	; (80039e4 <HAL_DMA_Init+0x1cc>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d031      	beq.n	80038d0 <HAL_DMA_Init+0xb8>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a5d      	ldr	r2, [pc, #372]	; (80039e8 <HAL_DMA_Init+0x1d0>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d02c      	beq.n	80038d0 <HAL_DMA_Init+0xb8>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a5c      	ldr	r2, [pc, #368]	; (80039ec <HAL_DMA_Init+0x1d4>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d027      	beq.n	80038d0 <HAL_DMA_Init+0xb8>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a5a      	ldr	r2, [pc, #360]	; (80039f0 <HAL_DMA_Init+0x1d8>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d022      	beq.n	80038d0 <HAL_DMA_Init+0xb8>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a59      	ldr	r2, [pc, #356]	; (80039f4 <HAL_DMA_Init+0x1dc>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d01d      	beq.n	80038d0 <HAL_DMA_Init+0xb8>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a57      	ldr	r2, [pc, #348]	; (80039f8 <HAL_DMA_Init+0x1e0>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d018      	beq.n	80038d0 <HAL_DMA_Init+0xb8>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a56      	ldr	r2, [pc, #344]	; (80039fc <HAL_DMA_Init+0x1e4>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d013      	beq.n	80038d0 <HAL_DMA_Init+0xb8>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a54      	ldr	r2, [pc, #336]	; (8003a00 <HAL_DMA_Init+0x1e8>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d00e      	beq.n	80038d0 <HAL_DMA_Init+0xb8>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a53      	ldr	r2, [pc, #332]	; (8003a04 <HAL_DMA_Init+0x1ec>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d009      	beq.n	80038d0 <HAL_DMA_Init+0xb8>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a51      	ldr	r2, [pc, #324]	; (8003a08 <HAL_DMA_Init+0x1f0>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d004      	beq.n	80038d0 <HAL_DMA_Init+0xb8>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a50      	ldr	r2, [pc, #320]	; (8003a0c <HAL_DMA_Init+0x1f4>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d101      	bne.n	80038d4 <HAL_DMA_Init+0xbc>
 80038d0:	2301      	movs	r3, #1
 80038d2:	e000      	b.n	80038d6 <HAL_DMA_Init+0xbe>
 80038d4:	2300      	movs	r3, #0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	f000 813b 	beq.w	8003b52 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2202      	movs	r2, #2
 80038e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a37      	ldr	r2, [pc, #220]	; (80039d0 <HAL_DMA_Init+0x1b8>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d04a      	beq.n	800398c <HAL_DMA_Init+0x174>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a36      	ldr	r2, [pc, #216]	; (80039d4 <HAL_DMA_Init+0x1bc>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d045      	beq.n	800398c <HAL_DMA_Init+0x174>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a34      	ldr	r2, [pc, #208]	; (80039d8 <HAL_DMA_Init+0x1c0>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d040      	beq.n	800398c <HAL_DMA_Init+0x174>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a33      	ldr	r2, [pc, #204]	; (80039dc <HAL_DMA_Init+0x1c4>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d03b      	beq.n	800398c <HAL_DMA_Init+0x174>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a31      	ldr	r2, [pc, #196]	; (80039e0 <HAL_DMA_Init+0x1c8>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d036      	beq.n	800398c <HAL_DMA_Init+0x174>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a30      	ldr	r2, [pc, #192]	; (80039e4 <HAL_DMA_Init+0x1cc>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d031      	beq.n	800398c <HAL_DMA_Init+0x174>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a2e      	ldr	r2, [pc, #184]	; (80039e8 <HAL_DMA_Init+0x1d0>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d02c      	beq.n	800398c <HAL_DMA_Init+0x174>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a2d      	ldr	r2, [pc, #180]	; (80039ec <HAL_DMA_Init+0x1d4>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d027      	beq.n	800398c <HAL_DMA_Init+0x174>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a2b      	ldr	r2, [pc, #172]	; (80039f0 <HAL_DMA_Init+0x1d8>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d022      	beq.n	800398c <HAL_DMA_Init+0x174>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a2a      	ldr	r2, [pc, #168]	; (80039f4 <HAL_DMA_Init+0x1dc>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d01d      	beq.n	800398c <HAL_DMA_Init+0x174>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a28      	ldr	r2, [pc, #160]	; (80039f8 <HAL_DMA_Init+0x1e0>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d018      	beq.n	800398c <HAL_DMA_Init+0x174>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a27      	ldr	r2, [pc, #156]	; (80039fc <HAL_DMA_Init+0x1e4>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d013      	beq.n	800398c <HAL_DMA_Init+0x174>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a25      	ldr	r2, [pc, #148]	; (8003a00 <HAL_DMA_Init+0x1e8>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d00e      	beq.n	800398c <HAL_DMA_Init+0x174>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a24      	ldr	r2, [pc, #144]	; (8003a04 <HAL_DMA_Init+0x1ec>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d009      	beq.n	800398c <HAL_DMA_Init+0x174>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a22      	ldr	r2, [pc, #136]	; (8003a08 <HAL_DMA_Init+0x1f0>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d004      	beq.n	800398c <HAL_DMA_Init+0x174>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a21      	ldr	r2, [pc, #132]	; (8003a0c <HAL_DMA_Init+0x1f4>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d108      	bne.n	800399e <HAL_DMA_Init+0x186>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f022 0201 	bic.w	r2, r2, #1
 800399a:	601a      	str	r2, [r3, #0]
 800399c:	e007      	b.n	80039ae <HAL_DMA_Init+0x196>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f022 0201 	bic.w	r2, r2, #1
 80039ac:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80039ae:	e02f      	b.n	8003a10 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80039b0:	f7ff fde8 	bl	8003584 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	2b05      	cmp	r3, #5
 80039bc:	d928      	bls.n	8003a10 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2220      	movs	r2, #32
 80039c2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2203      	movs	r2, #3
 80039c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e246      	b.n	8003e5e <HAL_DMA_Init+0x646>
 80039d0:	40020010 	.word	0x40020010
 80039d4:	40020028 	.word	0x40020028
 80039d8:	40020040 	.word	0x40020040
 80039dc:	40020058 	.word	0x40020058
 80039e0:	40020070 	.word	0x40020070
 80039e4:	40020088 	.word	0x40020088
 80039e8:	400200a0 	.word	0x400200a0
 80039ec:	400200b8 	.word	0x400200b8
 80039f0:	40020410 	.word	0x40020410
 80039f4:	40020428 	.word	0x40020428
 80039f8:	40020440 	.word	0x40020440
 80039fc:	40020458 	.word	0x40020458
 8003a00:	40020470 	.word	0x40020470
 8003a04:	40020488 	.word	0x40020488
 8003a08:	400204a0 	.word	0x400204a0
 8003a0c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0301 	and.w	r3, r3, #1
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1c8      	bne.n	80039b0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003a26:	697a      	ldr	r2, [r7, #20]
 8003a28:	4b83      	ldr	r3, [pc, #524]	; (8003c38 <HAL_DMA_Init+0x420>)
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003a36:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	691b      	ldr	r3, [r3, #16]
 8003a3c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a42:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a4e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a1b      	ldr	r3, [r3, #32]
 8003a54:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003a56:	697a      	ldr	r2, [r7, #20]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a60:	2b04      	cmp	r3, #4
 8003a62:	d107      	bne.n	8003a74 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	697a      	ldr	r2, [r7, #20]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003a74:	4b71      	ldr	r3, [pc, #452]	; (8003c3c <HAL_DMA_Init+0x424>)
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	4b71      	ldr	r3, [pc, #452]	; (8003c40 <HAL_DMA_Init+0x428>)
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a80:	d328      	bcc.n	8003ad4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	2b28      	cmp	r3, #40	; 0x28
 8003a88:	d903      	bls.n	8003a92 <HAL_DMA_Init+0x27a>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	2b2e      	cmp	r3, #46	; 0x2e
 8003a90:	d917      	bls.n	8003ac2 <HAL_DMA_Init+0x2aa>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	2b3e      	cmp	r3, #62	; 0x3e
 8003a98:	d903      	bls.n	8003aa2 <HAL_DMA_Init+0x28a>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	2b42      	cmp	r3, #66	; 0x42
 8003aa0:	d90f      	bls.n	8003ac2 <HAL_DMA_Init+0x2aa>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	2b46      	cmp	r3, #70	; 0x46
 8003aa8:	d903      	bls.n	8003ab2 <HAL_DMA_Init+0x29a>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	2b48      	cmp	r3, #72	; 0x48
 8003ab0:	d907      	bls.n	8003ac2 <HAL_DMA_Init+0x2aa>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	2b4e      	cmp	r3, #78	; 0x4e
 8003ab8:	d905      	bls.n	8003ac6 <HAL_DMA_Init+0x2ae>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	2b52      	cmp	r3, #82	; 0x52
 8003ac0:	d801      	bhi.n	8003ac6 <HAL_DMA_Init+0x2ae>
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e000      	b.n	8003ac8 <HAL_DMA_Init+0x2b0>
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d003      	beq.n	8003ad4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ad2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	697a      	ldr	r2, [r7, #20]
 8003ada:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	695b      	ldr	r3, [r3, #20]
 8003ae2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	f023 0307 	bic.w	r3, r3, #7
 8003aea:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af0:	697a      	ldr	r2, [r7, #20]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afa:	2b04      	cmp	r3, #4
 8003afc:	d117      	bne.n	8003b2e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b02:	697a      	ldr	r2, [r7, #20]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d00e      	beq.n	8003b2e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f001 fdcf 	bl	80056b4 <DMA_CheckFifoParam>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d008      	beq.n	8003b2e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2240      	movs	r2, #64	; 0x40
 8003b20:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2201      	movs	r2, #1
 8003b26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e197      	b.n	8003e5e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	697a      	ldr	r2, [r7, #20]
 8003b34:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f001 fd0a 	bl	8005550 <DMA_CalcBaseAndBitshift>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b44:	f003 031f 	and.w	r3, r3, #31
 8003b48:	223f      	movs	r2, #63	; 0x3f
 8003b4a:	409a      	lsls	r2, r3
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	609a      	str	r2, [r3, #8]
 8003b50:	e0cd      	b.n	8003cee <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a3b      	ldr	r2, [pc, #236]	; (8003c44 <HAL_DMA_Init+0x42c>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d022      	beq.n	8003ba2 <HAL_DMA_Init+0x38a>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a39      	ldr	r2, [pc, #228]	; (8003c48 <HAL_DMA_Init+0x430>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d01d      	beq.n	8003ba2 <HAL_DMA_Init+0x38a>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a38      	ldr	r2, [pc, #224]	; (8003c4c <HAL_DMA_Init+0x434>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d018      	beq.n	8003ba2 <HAL_DMA_Init+0x38a>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a36      	ldr	r2, [pc, #216]	; (8003c50 <HAL_DMA_Init+0x438>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d013      	beq.n	8003ba2 <HAL_DMA_Init+0x38a>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a35      	ldr	r2, [pc, #212]	; (8003c54 <HAL_DMA_Init+0x43c>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d00e      	beq.n	8003ba2 <HAL_DMA_Init+0x38a>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a33      	ldr	r2, [pc, #204]	; (8003c58 <HAL_DMA_Init+0x440>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d009      	beq.n	8003ba2 <HAL_DMA_Init+0x38a>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a32      	ldr	r2, [pc, #200]	; (8003c5c <HAL_DMA_Init+0x444>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d004      	beq.n	8003ba2 <HAL_DMA_Init+0x38a>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a30      	ldr	r2, [pc, #192]	; (8003c60 <HAL_DMA_Init+0x448>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d101      	bne.n	8003ba6 <HAL_DMA_Init+0x38e>
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e000      	b.n	8003ba8 <HAL_DMA_Init+0x390>
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	f000 8097 	beq.w	8003cdc <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a24      	ldr	r2, [pc, #144]	; (8003c44 <HAL_DMA_Init+0x42c>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d021      	beq.n	8003bfc <HAL_DMA_Init+0x3e4>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a22      	ldr	r2, [pc, #136]	; (8003c48 <HAL_DMA_Init+0x430>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d01c      	beq.n	8003bfc <HAL_DMA_Init+0x3e4>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a21      	ldr	r2, [pc, #132]	; (8003c4c <HAL_DMA_Init+0x434>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d017      	beq.n	8003bfc <HAL_DMA_Init+0x3e4>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a1f      	ldr	r2, [pc, #124]	; (8003c50 <HAL_DMA_Init+0x438>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d012      	beq.n	8003bfc <HAL_DMA_Init+0x3e4>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a1e      	ldr	r2, [pc, #120]	; (8003c54 <HAL_DMA_Init+0x43c>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d00d      	beq.n	8003bfc <HAL_DMA_Init+0x3e4>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a1c      	ldr	r2, [pc, #112]	; (8003c58 <HAL_DMA_Init+0x440>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d008      	beq.n	8003bfc <HAL_DMA_Init+0x3e4>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a1b      	ldr	r2, [pc, #108]	; (8003c5c <HAL_DMA_Init+0x444>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d003      	beq.n	8003bfc <HAL_DMA_Init+0x3e4>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a19      	ldr	r2, [pc, #100]	; (8003c60 <HAL_DMA_Init+0x448>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2202      	movs	r2, #2
 8003c0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	4b12      	ldr	r3, [pc, #72]	; (8003c64 <HAL_DMA_Init+0x44c>)
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	2b40      	cmp	r3, #64	; 0x40
 8003c24:	d020      	beq.n	8003c68 <HAL_DMA_Init+0x450>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	2b80      	cmp	r3, #128	; 0x80
 8003c2c:	d102      	bne.n	8003c34 <HAL_DMA_Init+0x41c>
 8003c2e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003c32:	e01a      	b.n	8003c6a <HAL_DMA_Init+0x452>
 8003c34:	2300      	movs	r3, #0
 8003c36:	e018      	b.n	8003c6a <HAL_DMA_Init+0x452>
 8003c38:	fe10803f 	.word	0xfe10803f
 8003c3c:	5c001000 	.word	0x5c001000
 8003c40:	ffff0000 	.word	0xffff0000
 8003c44:	58025408 	.word	0x58025408
 8003c48:	5802541c 	.word	0x5802541c
 8003c4c:	58025430 	.word	0x58025430
 8003c50:	58025444 	.word	0x58025444
 8003c54:	58025458 	.word	0x58025458
 8003c58:	5802546c 	.word	0x5802546c
 8003c5c:	58025480 	.word	0x58025480
 8003c60:	58025494 	.word	0x58025494
 8003c64:	fffe000f 	.word	0xfffe000f
 8003c68:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	68d2      	ldr	r2, [r2, #12]
 8003c6e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003c70:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003c78:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	695b      	ldr	r3, [r3, #20]
 8003c7e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003c80:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	699b      	ldr	r3, [r3, #24]
 8003c86:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003c88:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	69db      	ldr	r3, [r3, #28]
 8003c8e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003c90:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a1b      	ldr	r3, [r3, #32]
 8003c96:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003c98:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003c9a:	697a      	ldr	r2, [r7, #20]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	697a      	ldr	r2, [r7, #20]
 8003ca6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	461a      	mov	r2, r3
 8003cae:	4b6e      	ldr	r3, [pc, #440]	; (8003e68 <HAL_DMA_Init+0x650>)
 8003cb0:	4413      	add	r3, r2
 8003cb2:	4a6e      	ldr	r2, [pc, #440]	; (8003e6c <HAL_DMA_Init+0x654>)
 8003cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb8:	091b      	lsrs	r3, r3, #4
 8003cba:	009a      	lsls	r2, r3, #2
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f001 fc45 	bl	8005550 <DMA_CalcBaseAndBitshift>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cce:	f003 031f 	and.w	r3, r3, #31
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	409a      	lsls	r2, r3
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	605a      	str	r2, [r3, #4]
 8003cda:	e008      	b.n	8003cee <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2240      	movs	r2, #64	; 0x40
 8003ce0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2203      	movs	r2, #3
 8003ce6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e0b7      	b.n	8003e5e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a5f      	ldr	r2, [pc, #380]	; (8003e70 <HAL_DMA_Init+0x658>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d072      	beq.n	8003dde <HAL_DMA_Init+0x5c6>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a5d      	ldr	r2, [pc, #372]	; (8003e74 <HAL_DMA_Init+0x65c>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d06d      	beq.n	8003dde <HAL_DMA_Init+0x5c6>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a5c      	ldr	r2, [pc, #368]	; (8003e78 <HAL_DMA_Init+0x660>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d068      	beq.n	8003dde <HAL_DMA_Init+0x5c6>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a5a      	ldr	r2, [pc, #360]	; (8003e7c <HAL_DMA_Init+0x664>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d063      	beq.n	8003dde <HAL_DMA_Init+0x5c6>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a59      	ldr	r2, [pc, #356]	; (8003e80 <HAL_DMA_Init+0x668>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d05e      	beq.n	8003dde <HAL_DMA_Init+0x5c6>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a57      	ldr	r2, [pc, #348]	; (8003e84 <HAL_DMA_Init+0x66c>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d059      	beq.n	8003dde <HAL_DMA_Init+0x5c6>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a56      	ldr	r2, [pc, #344]	; (8003e88 <HAL_DMA_Init+0x670>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d054      	beq.n	8003dde <HAL_DMA_Init+0x5c6>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a54      	ldr	r2, [pc, #336]	; (8003e8c <HAL_DMA_Init+0x674>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d04f      	beq.n	8003dde <HAL_DMA_Init+0x5c6>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a53      	ldr	r2, [pc, #332]	; (8003e90 <HAL_DMA_Init+0x678>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d04a      	beq.n	8003dde <HAL_DMA_Init+0x5c6>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a51      	ldr	r2, [pc, #324]	; (8003e94 <HAL_DMA_Init+0x67c>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d045      	beq.n	8003dde <HAL_DMA_Init+0x5c6>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a50      	ldr	r2, [pc, #320]	; (8003e98 <HAL_DMA_Init+0x680>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d040      	beq.n	8003dde <HAL_DMA_Init+0x5c6>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a4e      	ldr	r2, [pc, #312]	; (8003e9c <HAL_DMA_Init+0x684>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d03b      	beq.n	8003dde <HAL_DMA_Init+0x5c6>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a4d      	ldr	r2, [pc, #308]	; (8003ea0 <HAL_DMA_Init+0x688>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d036      	beq.n	8003dde <HAL_DMA_Init+0x5c6>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a4b      	ldr	r2, [pc, #300]	; (8003ea4 <HAL_DMA_Init+0x68c>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d031      	beq.n	8003dde <HAL_DMA_Init+0x5c6>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a4a      	ldr	r2, [pc, #296]	; (8003ea8 <HAL_DMA_Init+0x690>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d02c      	beq.n	8003dde <HAL_DMA_Init+0x5c6>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a48      	ldr	r2, [pc, #288]	; (8003eac <HAL_DMA_Init+0x694>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d027      	beq.n	8003dde <HAL_DMA_Init+0x5c6>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a47      	ldr	r2, [pc, #284]	; (8003eb0 <HAL_DMA_Init+0x698>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d022      	beq.n	8003dde <HAL_DMA_Init+0x5c6>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a45      	ldr	r2, [pc, #276]	; (8003eb4 <HAL_DMA_Init+0x69c>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d01d      	beq.n	8003dde <HAL_DMA_Init+0x5c6>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a44      	ldr	r2, [pc, #272]	; (8003eb8 <HAL_DMA_Init+0x6a0>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d018      	beq.n	8003dde <HAL_DMA_Init+0x5c6>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a42      	ldr	r2, [pc, #264]	; (8003ebc <HAL_DMA_Init+0x6a4>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d013      	beq.n	8003dde <HAL_DMA_Init+0x5c6>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a41      	ldr	r2, [pc, #260]	; (8003ec0 <HAL_DMA_Init+0x6a8>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d00e      	beq.n	8003dde <HAL_DMA_Init+0x5c6>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a3f      	ldr	r2, [pc, #252]	; (8003ec4 <HAL_DMA_Init+0x6ac>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d009      	beq.n	8003dde <HAL_DMA_Init+0x5c6>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a3e      	ldr	r2, [pc, #248]	; (8003ec8 <HAL_DMA_Init+0x6b0>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d004      	beq.n	8003dde <HAL_DMA_Init+0x5c6>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a3c      	ldr	r2, [pc, #240]	; (8003ecc <HAL_DMA_Init+0x6b4>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d101      	bne.n	8003de2 <HAL_DMA_Init+0x5ca>
 8003dde:	2301      	movs	r3, #1
 8003de0:	e000      	b.n	8003de4 <HAL_DMA_Init+0x5cc>
 8003de2:	2300      	movs	r3, #0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d032      	beq.n	8003e4e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f001 fcdf 	bl	80057ac <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	2b80      	cmp	r3, #128	; 0x80
 8003df4:	d102      	bne.n	8003dfc <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	685a      	ldr	r2, [r3, #4]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e04:	b2d2      	uxtb	r2, r2
 8003e06:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003e10:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d010      	beq.n	8003e3c <HAL_DMA_Init+0x624>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	2b08      	cmp	r3, #8
 8003e20:	d80c      	bhi.n	8003e3c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f001 fd5c 	bl	80058e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003e38:	605a      	str	r2, [r3, #4]
 8003e3a:	e008      	b.n	8003e4e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3718      	adds	r7, #24
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	a7fdabf8 	.word	0xa7fdabf8
 8003e6c:	cccccccd 	.word	0xcccccccd
 8003e70:	40020010 	.word	0x40020010
 8003e74:	40020028 	.word	0x40020028
 8003e78:	40020040 	.word	0x40020040
 8003e7c:	40020058 	.word	0x40020058
 8003e80:	40020070 	.word	0x40020070
 8003e84:	40020088 	.word	0x40020088
 8003e88:	400200a0 	.word	0x400200a0
 8003e8c:	400200b8 	.word	0x400200b8
 8003e90:	40020410 	.word	0x40020410
 8003e94:	40020428 	.word	0x40020428
 8003e98:	40020440 	.word	0x40020440
 8003e9c:	40020458 	.word	0x40020458
 8003ea0:	40020470 	.word	0x40020470
 8003ea4:	40020488 	.word	0x40020488
 8003ea8:	400204a0 	.word	0x400204a0
 8003eac:	400204b8 	.word	0x400204b8
 8003eb0:	58025408 	.word	0x58025408
 8003eb4:	5802541c 	.word	0x5802541c
 8003eb8:	58025430 	.word	0x58025430
 8003ebc:	58025444 	.word	0x58025444
 8003ec0:	58025458 	.word	0x58025458
 8003ec4:	5802546c 	.word	0x5802546c
 8003ec8:	58025480 	.word	0x58025480
 8003ecc:	58025494 	.word	0x58025494

08003ed0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b086      	sub	sp, #24
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	60b9      	str	r1, [r7, #8]
 8003eda:	607a      	str	r2, [r7, #4]
 8003edc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d101      	bne.n	8003eec <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e226      	b.n	800433a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d101      	bne.n	8003efa <HAL_DMA_Start_IT+0x2a>
 8003ef6:	2302      	movs	r3, #2
 8003ef8:	e21f      	b.n	800433a <HAL_DMA_Start_IT+0x46a>
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2201      	movs	r2, #1
 8003efe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	f040 820a 	bne.w	8004324 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2202      	movs	r2, #2
 8003f14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a68      	ldr	r2, [pc, #416]	; (80040c4 <HAL_DMA_Start_IT+0x1f4>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d04a      	beq.n	8003fbe <HAL_DMA_Start_IT+0xee>
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a66      	ldr	r2, [pc, #408]	; (80040c8 <HAL_DMA_Start_IT+0x1f8>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d045      	beq.n	8003fbe <HAL_DMA_Start_IT+0xee>
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a65      	ldr	r2, [pc, #404]	; (80040cc <HAL_DMA_Start_IT+0x1fc>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d040      	beq.n	8003fbe <HAL_DMA_Start_IT+0xee>
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a63      	ldr	r2, [pc, #396]	; (80040d0 <HAL_DMA_Start_IT+0x200>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d03b      	beq.n	8003fbe <HAL_DMA_Start_IT+0xee>
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a62      	ldr	r2, [pc, #392]	; (80040d4 <HAL_DMA_Start_IT+0x204>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d036      	beq.n	8003fbe <HAL_DMA_Start_IT+0xee>
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a60      	ldr	r2, [pc, #384]	; (80040d8 <HAL_DMA_Start_IT+0x208>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d031      	beq.n	8003fbe <HAL_DMA_Start_IT+0xee>
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a5f      	ldr	r2, [pc, #380]	; (80040dc <HAL_DMA_Start_IT+0x20c>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d02c      	beq.n	8003fbe <HAL_DMA_Start_IT+0xee>
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a5d      	ldr	r2, [pc, #372]	; (80040e0 <HAL_DMA_Start_IT+0x210>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d027      	beq.n	8003fbe <HAL_DMA_Start_IT+0xee>
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a5c      	ldr	r2, [pc, #368]	; (80040e4 <HAL_DMA_Start_IT+0x214>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d022      	beq.n	8003fbe <HAL_DMA_Start_IT+0xee>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a5a      	ldr	r2, [pc, #360]	; (80040e8 <HAL_DMA_Start_IT+0x218>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d01d      	beq.n	8003fbe <HAL_DMA_Start_IT+0xee>
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a59      	ldr	r2, [pc, #356]	; (80040ec <HAL_DMA_Start_IT+0x21c>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d018      	beq.n	8003fbe <HAL_DMA_Start_IT+0xee>
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a57      	ldr	r2, [pc, #348]	; (80040f0 <HAL_DMA_Start_IT+0x220>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d013      	beq.n	8003fbe <HAL_DMA_Start_IT+0xee>
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a56      	ldr	r2, [pc, #344]	; (80040f4 <HAL_DMA_Start_IT+0x224>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d00e      	beq.n	8003fbe <HAL_DMA_Start_IT+0xee>
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a54      	ldr	r2, [pc, #336]	; (80040f8 <HAL_DMA_Start_IT+0x228>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d009      	beq.n	8003fbe <HAL_DMA_Start_IT+0xee>
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a53      	ldr	r2, [pc, #332]	; (80040fc <HAL_DMA_Start_IT+0x22c>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d004      	beq.n	8003fbe <HAL_DMA_Start_IT+0xee>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a51      	ldr	r2, [pc, #324]	; (8004100 <HAL_DMA_Start_IT+0x230>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d108      	bne.n	8003fd0 <HAL_DMA_Start_IT+0x100>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f022 0201 	bic.w	r2, r2, #1
 8003fcc:	601a      	str	r2, [r3, #0]
 8003fce:	e007      	b.n	8003fe0 <HAL_DMA_Start_IT+0x110>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f022 0201 	bic.w	r2, r2, #1
 8003fde:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	68b9      	ldr	r1, [r7, #8]
 8003fe6:	68f8      	ldr	r0, [r7, #12]
 8003fe8:	f001 f906 	bl	80051f8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a34      	ldr	r2, [pc, #208]	; (80040c4 <HAL_DMA_Start_IT+0x1f4>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d04a      	beq.n	800408c <HAL_DMA_Start_IT+0x1bc>
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a33      	ldr	r2, [pc, #204]	; (80040c8 <HAL_DMA_Start_IT+0x1f8>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d045      	beq.n	800408c <HAL_DMA_Start_IT+0x1bc>
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a31      	ldr	r2, [pc, #196]	; (80040cc <HAL_DMA_Start_IT+0x1fc>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d040      	beq.n	800408c <HAL_DMA_Start_IT+0x1bc>
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a30      	ldr	r2, [pc, #192]	; (80040d0 <HAL_DMA_Start_IT+0x200>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d03b      	beq.n	800408c <HAL_DMA_Start_IT+0x1bc>
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a2e      	ldr	r2, [pc, #184]	; (80040d4 <HAL_DMA_Start_IT+0x204>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d036      	beq.n	800408c <HAL_DMA_Start_IT+0x1bc>
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a2d      	ldr	r2, [pc, #180]	; (80040d8 <HAL_DMA_Start_IT+0x208>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d031      	beq.n	800408c <HAL_DMA_Start_IT+0x1bc>
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a2b      	ldr	r2, [pc, #172]	; (80040dc <HAL_DMA_Start_IT+0x20c>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d02c      	beq.n	800408c <HAL_DMA_Start_IT+0x1bc>
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a2a      	ldr	r2, [pc, #168]	; (80040e0 <HAL_DMA_Start_IT+0x210>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d027      	beq.n	800408c <HAL_DMA_Start_IT+0x1bc>
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a28      	ldr	r2, [pc, #160]	; (80040e4 <HAL_DMA_Start_IT+0x214>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d022      	beq.n	800408c <HAL_DMA_Start_IT+0x1bc>
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a27      	ldr	r2, [pc, #156]	; (80040e8 <HAL_DMA_Start_IT+0x218>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d01d      	beq.n	800408c <HAL_DMA_Start_IT+0x1bc>
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a25      	ldr	r2, [pc, #148]	; (80040ec <HAL_DMA_Start_IT+0x21c>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d018      	beq.n	800408c <HAL_DMA_Start_IT+0x1bc>
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a24      	ldr	r2, [pc, #144]	; (80040f0 <HAL_DMA_Start_IT+0x220>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d013      	beq.n	800408c <HAL_DMA_Start_IT+0x1bc>
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a22      	ldr	r2, [pc, #136]	; (80040f4 <HAL_DMA_Start_IT+0x224>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d00e      	beq.n	800408c <HAL_DMA_Start_IT+0x1bc>
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a21      	ldr	r2, [pc, #132]	; (80040f8 <HAL_DMA_Start_IT+0x228>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d009      	beq.n	800408c <HAL_DMA_Start_IT+0x1bc>
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a1f      	ldr	r2, [pc, #124]	; (80040fc <HAL_DMA_Start_IT+0x22c>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d004      	beq.n	800408c <HAL_DMA_Start_IT+0x1bc>
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a1e      	ldr	r2, [pc, #120]	; (8004100 <HAL_DMA_Start_IT+0x230>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d101      	bne.n	8004090 <HAL_DMA_Start_IT+0x1c0>
 800408c:	2301      	movs	r3, #1
 800408e:	e000      	b.n	8004092 <HAL_DMA_Start_IT+0x1c2>
 8004090:	2300      	movs	r3, #0
 8004092:	2b00      	cmp	r3, #0
 8004094:	d036      	beq.n	8004104 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f023 021e 	bic.w	r2, r3, #30
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f042 0216 	orr.w	r2, r2, #22
 80040a8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d03e      	beq.n	8004130 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f042 0208 	orr.w	r2, r2, #8
 80040c0:	601a      	str	r2, [r3, #0]
 80040c2:	e035      	b.n	8004130 <HAL_DMA_Start_IT+0x260>
 80040c4:	40020010 	.word	0x40020010
 80040c8:	40020028 	.word	0x40020028
 80040cc:	40020040 	.word	0x40020040
 80040d0:	40020058 	.word	0x40020058
 80040d4:	40020070 	.word	0x40020070
 80040d8:	40020088 	.word	0x40020088
 80040dc:	400200a0 	.word	0x400200a0
 80040e0:	400200b8 	.word	0x400200b8
 80040e4:	40020410 	.word	0x40020410
 80040e8:	40020428 	.word	0x40020428
 80040ec:	40020440 	.word	0x40020440
 80040f0:	40020458 	.word	0x40020458
 80040f4:	40020470 	.word	0x40020470
 80040f8:	40020488 	.word	0x40020488
 80040fc:	400204a0 	.word	0x400204a0
 8004100:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f023 020e 	bic.w	r2, r3, #14
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f042 020a 	orr.w	r2, r2, #10
 8004116:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411c:	2b00      	cmp	r3, #0
 800411e:	d007      	beq.n	8004130 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f042 0204 	orr.w	r2, r2, #4
 800412e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a83      	ldr	r2, [pc, #524]	; (8004344 <HAL_DMA_Start_IT+0x474>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d072      	beq.n	8004220 <HAL_DMA_Start_IT+0x350>
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a82      	ldr	r2, [pc, #520]	; (8004348 <HAL_DMA_Start_IT+0x478>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d06d      	beq.n	8004220 <HAL_DMA_Start_IT+0x350>
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a80      	ldr	r2, [pc, #512]	; (800434c <HAL_DMA_Start_IT+0x47c>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d068      	beq.n	8004220 <HAL_DMA_Start_IT+0x350>
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a7f      	ldr	r2, [pc, #508]	; (8004350 <HAL_DMA_Start_IT+0x480>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d063      	beq.n	8004220 <HAL_DMA_Start_IT+0x350>
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a7d      	ldr	r2, [pc, #500]	; (8004354 <HAL_DMA_Start_IT+0x484>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d05e      	beq.n	8004220 <HAL_DMA_Start_IT+0x350>
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a7c      	ldr	r2, [pc, #496]	; (8004358 <HAL_DMA_Start_IT+0x488>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d059      	beq.n	8004220 <HAL_DMA_Start_IT+0x350>
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a7a      	ldr	r2, [pc, #488]	; (800435c <HAL_DMA_Start_IT+0x48c>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d054      	beq.n	8004220 <HAL_DMA_Start_IT+0x350>
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a79      	ldr	r2, [pc, #484]	; (8004360 <HAL_DMA_Start_IT+0x490>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d04f      	beq.n	8004220 <HAL_DMA_Start_IT+0x350>
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a77      	ldr	r2, [pc, #476]	; (8004364 <HAL_DMA_Start_IT+0x494>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d04a      	beq.n	8004220 <HAL_DMA_Start_IT+0x350>
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a76      	ldr	r2, [pc, #472]	; (8004368 <HAL_DMA_Start_IT+0x498>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d045      	beq.n	8004220 <HAL_DMA_Start_IT+0x350>
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a74      	ldr	r2, [pc, #464]	; (800436c <HAL_DMA_Start_IT+0x49c>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d040      	beq.n	8004220 <HAL_DMA_Start_IT+0x350>
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a73      	ldr	r2, [pc, #460]	; (8004370 <HAL_DMA_Start_IT+0x4a0>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d03b      	beq.n	8004220 <HAL_DMA_Start_IT+0x350>
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a71      	ldr	r2, [pc, #452]	; (8004374 <HAL_DMA_Start_IT+0x4a4>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d036      	beq.n	8004220 <HAL_DMA_Start_IT+0x350>
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a70      	ldr	r2, [pc, #448]	; (8004378 <HAL_DMA_Start_IT+0x4a8>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d031      	beq.n	8004220 <HAL_DMA_Start_IT+0x350>
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a6e      	ldr	r2, [pc, #440]	; (800437c <HAL_DMA_Start_IT+0x4ac>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d02c      	beq.n	8004220 <HAL_DMA_Start_IT+0x350>
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a6d      	ldr	r2, [pc, #436]	; (8004380 <HAL_DMA_Start_IT+0x4b0>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d027      	beq.n	8004220 <HAL_DMA_Start_IT+0x350>
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a6b      	ldr	r2, [pc, #428]	; (8004384 <HAL_DMA_Start_IT+0x4b4>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d022      	beq.n	8004220 <HAL_DMA_Start_IT+0x350>
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a6a      	ldr	r2, [pc, #424]	; (8004388 <HAL_DMA_Start_IT+0x4b8>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d01d      	beq.n	8004220 <HAL_DMA_Start_IT+0x350>
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a68      	ldr	r2, [pc, #416]	; (800438c <HAL_DMA_Start_IT+0x4bc>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d018      	beq.n	8004220 <HAL_DMA_Start_IT+0x350>
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a67      	ldr	r2, [pc, #412]	; (8004390 <HAL_DMA_Start_IT+0x4c0>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d013      	beq.n	8004220 <HAL_DMA_Start_IT+0x350>
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a65      	ldr	r2, [pc, #404]	; (8004394 <HAL_DMA_Start_IT+0x4c4>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d00e      	beq.n	8004220 <HAL_DMA_Start_IT+0x350>
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a64      	ldr	r2, [pc, #400]	; (8004398 <HAL_DMA_Start_IT+0x4c8>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d009      	beq.n	8004220 <HAL_DMA_Start_IT+0x350>
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a62      	ldr	r2, [pc, #392]	; (800439c <HAL_DMA_Start_IT+0x4cc>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d004      	beq.n	8004220 <HAL_DMA_Start_IT+0x350>
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a61      	ldr	r2, [pc, #388]	; (80043a0 <HAL_DMA_Start_IT+0x4d0>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d101      	bne.n	8004224 <HAL_DMA_Start_IT+0x354>
 8004220:	2301      	movs	r3, #1
 8004222:	e000      	b.n	8004226 <HAL_DMA_Start_IT+0x356>
 8004224:	2300      	movs	r3, #0
 8004226:	2b00      	cmp	r3, #0
 8004228:	d01a      	beq.n	8004260 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d007      	beq.n	8004248 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004242:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004246:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800424c:	2b00      	cmp	r3, #0
 800424e:	d007      	beq.n	8004260 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800425a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800425e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a37      	ldr	r2, [pc, #220]	; (8004344 <HAL_DMA_Start_IT+0x474>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d04a      	beq.n	8004300 <HAL_DMA_Start_IT+0x430>
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a36      	ldr	r2, [pc, #216]	; (8004348 <HAL_DMA_Start_IT+0x478>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d045      	beq.n	8004300 <HAL_DMA_Start_IT+0x430>
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a34      	ldr	r2, [pc, #208]	; (800434c <HAL_DMA_Start_IT+0x47c>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d040      	beq.n	8004300 <HAL_DMA_Start_IT+0x430>
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a33      	ldr	r2, [pc, #204]	; (8004350 <HAL_DMA_Start_IT+0x480>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d03b      	beq.n	8004300 <HAL_DMA_Start_IT+0x430>
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a31      	ldr	r2, [pc, #196]	; (8004354 <HAL_DMA_Start_IT+0x484>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d036      	beq.n	8004300 <HAL_DMA_Start_IT+0x430>
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a30      	ldr	r2, [pc, #192]	; (8004358 <HAL_DMA_Start_IT+0x488>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d031      	beq.n	8004300 <HAL_DMA_Start_IT+0x430>
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a2e      	ldr	r2, [pc, #184]	; (800435c <HAL_DMA_Start_IT+0x48c>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d02c      	beq.n	8004300 <HAL_DMA_Start_IT+0x430>
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a2d      	ldr	r2, [pc, #180]	; (8004360 <HAL_DMA_Start_IT+0x490>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d027      	beq.n	8004300 <HAL_DMA_Start_IT+0x430>
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a2b      	ldr	r2, [pc, #172]	; (8004364 <HAL_DMA_Start_IT+0x494>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d022      	beq.n	8004300 <HAL_DMA_Start_IT+0x430>
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a2a      	ldr	r2, [pc, #168]	; (8004368 <HAL_DMA_Start_IT+0x498>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d01d      	beq.n	8004300 <HAL_DMA_Start_IT+0x430>
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a28      	ldr	r2, [pc, #160]	; (800436c <HAL_DMA_Start_IT+0x49c>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d018      	beq.n	8004300 <HAL_DMA_Start_IT+0x430>
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a27      	ldr	r2, [pc, #156]	; (8004370 <HAL_DMA_Start_IT+0x4a0>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d013      	beq.n	8004300 <HAL_DMA_Start_IT+0x430>
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a25      	ldr	r2, [pc, #148]	; (8004374 <HAL_DMA_Start_IT+0x4a4>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d00e      	beq.n	8004300 <HAL_DMA_Start_IT+0x430>
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a24      	ldr	r2, [pc, #144]	; (8004378 <HAL_DMA_Start_IT+0x4a8>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d009      	beq.n	8004300 <HAL_DMA_Start_IT+0x430>
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a22      	ldr	r2, [pc, #136]	; (800437c <HAL_DMA_Start_IT+0x4ac>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d004      	beq.n	8004300 <HAL_DMA_Start_IT+0x430>
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a21      	ldr	r2, [pc, #132]	; (8004380 <HAL_DMA_Start_IT+0x4b0>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d108      	bne.n	8004312 <HAL_DMA_Start_IT+0x442>
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f042 0201 	orr.w	r2, r2, #1
 800430e:	601a      	str	r2, [r3, #0]
 8004310:	e012      	b.n	8004338 <HAL_DMA_Start_IT+0x468>
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f042 0201 	orr.w	r2, r2, #1
 8004320:	601a      	str	r2, [r3, #0]
 8004322:	e009      	b.n	8004338 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004332:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004338:	7dfb      	ldrb	r3, [r7, #23]
}
 800433a:	4618      	mov	r0, r3
 800433c:	3718      	adds	r7, #24
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	40020010 	.word	0x40020010
 8004348:	40020028 	.word	0x40020028
 800434c:	40020040 	.word	0x40020040
 8004350:	40020058 	.word	0x40020058
 8004354:	40020070 	.word	0x40020070
 8004358:	40020088 	.word	0x40020088
 800435c:	400200a0 	.word	0x400200a0
 8004360:	400200b8 	.word	0x400200b8
 8004364:	40020410 	.word	0x40020410
 8004368:	40020428 	.word	0x40020428
 800436c:	40020440 	.word	0x40020440
 8004370:	40020458 	.word	0x40020458
 8004374:	40020470 	.word	0x40020470
 8004378:	40020488 	.word	0x40020488
 800437c:	400204a0 	.word	0x400204a0
 8004380:	400204b8 	.word	0x400204b8
 8004384:	58025408 	.word	0x58025408
 8004388:	5802541c 	.word	0x5802541c
 800438c:	58025430 	.word	0x58025430
 8004390:	58025444 	.word	0x58025444
 8004394:	58025458 	.word	0x58025458
 8004398:	5802546c 	.word	0x5802546c
 800439c:	58025480 	.word	0x58025480
 80043a0:	58025494 	.word	0x58025494

080043a4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b08a      	sub	sp, #40	; 0x28
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80043ac:	2300      	movs	r3, #0
 80043ae:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80043b0:	4b67      	ldr	r3, [pc, #412]	; (8004550 <HAL_DMA_IRQHandler+0x1ac>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a67      	ldr	r2, [pc, #412]	; (8004554 <HAL_DMA_IRQHandler+0x1b0>)
 80043b6:	fba2 2303 	umull	r2, r3, r2, r3
 80043ba:	0a9b      	lsrs	r3, r3, #10
 80043bc:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043c2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043c8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80043ca:	6a3b      	ldr	r3, [r7, #32]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a5f      	ldr	r2, [pc, #380]	; (8004558 <HAL_DMA_IRQHandler+0x1b4>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d04a      	beq.n	8004476 <HAL_DMA_IRQHandler+0xd2>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a5d      	ldr	r2, [pc, #372]	; (800455c <HAL_DMA_IRQHandler+0x1b8>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d045      	beq.n	8004476 <HAL_DMA_IRQHandler+0xd2>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a5c      	ldr	r2, [pc, #368]	; (8004560 <HAL_DMA_IRQHandler+0x1bc>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d040      	beq.n	8004476 <HAL_DMA_IRQHandler+0xd2>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a5a      	ldr	r2, [pc, #360]	; (8004564 <HAL_DMA_IRQHandler+0x1c0>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d03b      	beq.n	8004476 <HAL_DMA_IRQHandler+0xd2>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a59      	ldr	r2, [pc, #356]	; (8004568 <HAL_DMA_IRQHandler+0x1c4>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d036      	beq.n	8004476 <HAL_DMA_IRQHandler+0xd2>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a57      	ldr	r2, [pc, #348]	; (800456c <HAL_DMA_IRQHandler+0x1c8>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d031      	beq.n	8004476 <HAL_DMA_IRQHandler+0xd2>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a56      	ldr	r2, [pc, #344]	; (8004570 <HAL_DMA_IRQHandler+0x1cc>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d02c      	beq.n	8004476 <HAL_DMA_IRQHandler+0xd2>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a54      	ldr	r2, [pc, #336]	; (8004574 <HAL_DMA_IRQHandler+0x1d0>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d027      	beq.n	8004476 <HAL_DMA_IRQHandler+0xd2>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a53      	ldr	r2, [pc, #332]	; (8004578 <HAL_DMA_IRQHandler+0x1d4>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d022      	beq.n	8004476 <HAL_DMA_IRQHandler+0xd2>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a51      	ldr	r2, [pc, #324]	; (800457c <HAL_DMA_IRQHandler+0x1d8>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d01d      	beq.n	8004476 <HAL_DMA_IRQHandler+0xd2>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a50      	ldr	r2, [pc, #320]	; (8004580 <HAL_DMA_IRQHandler+0x1dc>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d018      	beq.n	8004476 <HAL_DMA_IRQHandler+0xd2>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a4e      	ldr	r2, [pc, #312]	; (8004584 <HAL_DMA_IRQHandler+0x1e0>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d013      	beq.n	8004476 <HAL_DMA_IRQHandler+0xd2>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a4d      	ldr	r2, [pc, #308]	; (8004588 <HAL_DMA_IRQHandler+0x1e4>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d00e      	beq.n	8004476 <HAL_DMA_IRQHandler+0xd2>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a4b      	ldr	r2, [pc, #300]	; (800458c <HAL_DMA_IRQHandler+0x1e8>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d009      	beq.n	8004476 <HAL_DMA_IRQHandler+0xd2>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a4a      	ldr	r2, [pc, #296]	; (8004590 <HAL_DMA_IRQHandler+0x1ec>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d004      	beq.n	8004476 <HAL_DMA_IRQHandler+0xd2>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a48      	ldr	r2, [pc, #288]	; (8004594 <HAL_DMA_IRQHandler+0x1f0>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d101      	bne.n	800447a <HAL_DMA_IRQHandler+0xd6>
 8004476:	2301      	movs	r3, #1
 8004478:	e000      	b.n	800447c <HAL_DMA_IRQHandler+0xd8>
 800447a:	2300      	movs	r3, #0
 800447c:	2b00      	cmp	r3, #0
 800447e:	f000 842b 	beq.w	8004cd8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004486:	f003 031f 	and.w	r3, r3, #31
 800448a:	2208      	movs	r2, #8
 800448c:	409a      	lsls	r2, r3
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	4013      	ands	r3, r2
 8004492:	2b00      	cmp	r3, #0
 8004494:	f000 80a2 	beq.w	80045dc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a2e      	ldr	r2, [pc, #184]	; (8004558 <HAL_DMA_IRQHandler+0x1b4>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d04a      	beq.n	8004538 <HAL_DMA_IRQHandler+0x194>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a2d      	ldr	r2, [pc, #180]	; (800455c <HAL_DMA_IRQHandler+0x1b8>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d045      	beq.n	8004538 <HAL_DMA_IRQHandler+0x194>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a2b      	ldr	r2, [pc, #172]	; (8004560 <HAL_DMA_IRQHandler+0x1bc>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d040      	beq.n	8004538 <HAL_DMA_IRQHandler+0x194>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a2a      	ldr	r2, [pc, #168]	; (8004564 <HAL_DMA_IRQHandler+0x1c0>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d03b      	beq.n	8004538 <HAL_DMA_IRQHandler+0x194>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a28      	ldr	r2, [pc, #160]	; (8004568 <HAL_DMA_IRQHandler+0x1c4>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d036      	beq.n	8004538 <HAL_DMA_IRQHandler+0x194>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a27      	ldr	r2, [pc, #156]	; (800456c <HAL_DMA_IRQHandler+0x1c8>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d031      	beq.n	8004538 <HAL_DMA_IRQHandler+0x194>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a25      	ldr	r2, [pc, #148]	; (8004570 <HAL_DMA_IRQHandler+0x1cc>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d02c      	beq.n	8004538 <HAL_DMA_IRQHandler+0x194>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a24      	ldr	r2, [pc, #144]	; (8004574 <HAL_DMA_IRQHandler+0x1d0>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d027      	beq.n	8004538 <HAL_DMA_IRQHandler+0x194>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a22      	ldr	r2, [pc, #136]	; (8004578 <HAL_DMA_IRQHandler+0x1d4>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d022      	beq.n	8004538 <HAL_DMA_IRQHandler+0x194>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a21      	ldr	r2, [pc, #132]	; (800457c <HAL_DMA_IRQHandler+0x1d8>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d01d      	beq.n	8004538 <HAL_DMA_IRQHandler+0x194>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a1f      	ldr	r2, [pc, #124]	; (8004580 <HAL_DMA_IRQHandler+0x1dc>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d018      	beq.n	8004538 <HAL_DMA_IRQHandler+0x194>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a1e      	ldr	r2, [pc, #120]	; (8004584 <HAL_DMA_IRQHandler+0x1e0>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d013      	beq.n	8004538 <HAL_DMA_IRQHandler+0x194>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a1c      	ldr	r2, [pc, #112]	; (8004588 <HAL_DMA_IRQHandler+0x1e4>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d00e      	beq.n	8004538 <HAL_DMA_IRQHandler+0x194>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a1b      	ldr	r2, [pc, #108]	; (800458c <HAL_DMA_IRQHandler+0x1e8>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d009      	beq.n	8004538 <HAL_DMA_IRQHandler+0x194>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a19      	ldr	r2, [pc, #100]	; (8004590 <HAL_DMA_IRQHandler+0x1ec>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d004      	beq.n	8004538 <HAL_DMA_IRQHandler+0x194>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a18      	ldr	r2, [pc, #96]	; (8004594 <HAL_DMA_IRQHandler+0x1f0>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d12f      	bne.n	8004598 <HAL_DMA_IRQHandler+0x1f4>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0304 	and.w	r3, r3, #4
 8004542:	2b00      	cmp	r3, #0
 8004544:	bf14      	ite	ne
 8004546:	2301      	movne	r3, #1
 8004548:	2300      	moveq	r3, #0
 800454a:	b2db      	uxtb	r3, r3
 800454c:	e02e      	b.n	80045ac <HAL_DMA_IRQHandler+0x208>
 800454e:	bf00      	nop
 8004550:	2400000c 	.word	0x2400000c
 8004554:	1b4e81b5 	.word	0x1b4e81b5
 8004558:	40020010 	.word	0x40020010
 800455c:	40020028 	.word	0x40020028
 8004560:	40020040 	.word	0x40020040
 8004564:	40020058 	.word	0x40020058
 8004568:	40020070 	.word	0x40020070
 800456c:	40020088 	.word	0x40020088
 8004570:	400200a0 	.word	0x400200a0
 8004574:	400200b8 	.word	0x400200b8
 8004578:	40020410 	.word	0x40020410
 800457c:	40020428 	.word	0x40020428
 8004580:	40020440 	.word	0x40020440
 8004584:	40020458 	.word	0x40020458
 8004588:	40020470 	.word	0x40020470
 800458c:	40020488 	.word	0x40020488
 8004590:	400204a0 	.word	0x400204a0
 8004594:	400204b8 	.word	0x400204b8
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0308 	and.w	r3, r3, #8
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	bf14      	ite	ne
 80045a6:	2301      	movne	r3, #1
 80045a8:	2300      	moveq	r3, #0
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d015      	beq.n	80045dc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f022 0204 	bic.w	r2, r2, #4
 80045be:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045c4:	f003 031f 	and.w	r3, r3, #31
 80045c8:	2208      	movs	r2, #8
 80045ca:	409a      	lsls	r2, r3
 80045cc:	6a3b      	ldr	r3, [r7, #32]
 80045ce:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045d4:	f043 0201 	orr.w	r2, r3, #1
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045e0:	f003 031f 	and.w	r3, r3, #31
 80045e4:	69ba      	ldr	r2, [r7, #24]
 80045e6:	fa22 f303 	lsr.w	r3, r2, r3
 80045ea:	f003 0301 	and.w	r3, r3, #1
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d06e      	beq.n	80046d0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a69      	ldr	r2, [pc, #420]	; (800479c <HAL_DMA_IRQHandler+0x3f8>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d04a      	beq.n	8004692 <HAL_DMA_IRQHandler+0x2ee>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a67      	ldr	r2, [pc, #412]	; (80047a0 <HAL_DMA_IRQHandler+0x3fc>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d045      	beq.n	8004692 <HAL_DMA_IRQHandler+0x2ee>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a66      	ldr	r2, [pc, #408]	; (80047a4 <HAL_DMA_IRQHandler+0x400>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d040      	beq.n	8004692 <HAL_DMA_IRQHandler+0x2ee>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a64      	ldr	r2, [pc, #400]	; (80047a8 <HAL_DMA_IRQHandler+0x404>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d03b      	beq.n	8004692 <HAL_DMA_IRQHandler+0x2ee>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a63      	ldr	r2, [pc, #396]	; (80047ac <HAL_DMA_IRQHandler+0x408>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d036      	beq.n	8004692 <HAL_DMA_IRQHandler+0x2ee>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a61      	ldr	r2, [pc, #388]	; (80047b0 <HAL_DMA_IRQHandler+0x40c>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d031      	beq.n	8004692 <HAL_DMA_IRQHandler+0x2ee>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a60      	ldr	r2, [pc, #384]	; (80047b4 <HAL_DMA_IRQHandler+0x410>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d02c      	beq.n	8004692 <HAL_DMA_IRQHandler+0x2ee>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a5e      	ldr	r2, [pc, #376]	; (80047b8 <HAL_DMA_IRQHandler+0x414>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d027      	beq.n	8004692 <HAL_DMA_IRQHandler+0x2ee>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a5d      	ldr	r2, [pc, #372]	; (80047bc <HAL_DMA_IRQHandler+0x418>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d022      	beq.n	8004692 <HAL_DMA_IRQHandler+0x2ee>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a5b      	ldr	r2, [pc, #364]	; (80047c0 <HAL_DMA_IRQHandler+0x41c>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d01d      	beq.n	8004692 <HAL_DMA_IRQHandler+0x2ee>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a5a      	ldr	r2, [pc, #360]	; (80047c4 <HAL_DMA_IRQHandler+0x420>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d018      	beq.n	8004692 <HAL_DMA_IRQHandler+0x2ee>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a58      	ldr	r2, [pc, #352]	; (80047c8 <HAL_DMA_IRQHandler+0x424>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d013      	beq.n	8004692 <HAL_DMA_IRQHandler+0x2ee>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a57      	ldr	r2, [pc, #348]	; (80047cc <HAL_DMA_IRQHandler+0x428>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d00e      	beq.n	8004692 <HAL_DMA_IRQHandler+0x2ee>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a55      	ldr	r2, [pc, #340]	; (80047d0 <HAL_DMA_IRQHandler+0x42c>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d009      	beq.n	8004692 <HAL_DMA_IRQHandler+0x2ee>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a54      	ldr	r2, [pc, #336]	; (80047d4 <HAL_DMA_IRQHandler+0x430>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d004      	beq.n	8004692 <HAL_DMA_IRQHandler+0x2ee>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a52      	ldr	r2, [pc, #328]	; (80047d8 <HAL_DMA_IRQHandler+0x434>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d10a      	bne.n	80046a8 <HAL_DMA_IRQHandler+0x304>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	695b      	ldr	r3, [r3, #20]
 8004698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800469c:	2b00      	cmp	r3, #0
 800469e:	bf14      	ite	ne
 80046a0:	2301      	movne	r3, #1
 80046a2:	2300      	moveq	r3, #0
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	e003      	b.n	80046b0 <HAL_DMA_IRQHandler+0x30c>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2300      	movs	r3, #0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d00d      	beq.n	80046d0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046b8:	f003 031f 	and.w	r3, r3, #31
 80046bc:	2201      	movs	r2, #1
 80046be:	409a      	lsls	r2, r3
 80046c0:	6a3b      	ldr	r3, [r7, #32]
 80046c2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046c8:	f043 0202 	orr.w	r2, r3, #2
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046d4:	f003 031f 	and.w	r3, r3, #31
 80046d8:	2204      	movs	r2, #4
 80046da:	409a      	lsls	r2, r3
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	4013      	ands	r3, r2
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	f000 808f 	beq.w	8004804 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a2c      	ldr	r2, [pc, #176]	; (800479c <HAL_DMA_IRQHandler+0x3f8>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d04a      	beq.n	8004786 <HAL_DMA_IRQHandler+0x3e2>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a2a      	ldr	r2, [pc, #168]	; (80047a0 <HAL_DMA_IRQHandler+0x3fc>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d045      	beq.n	8004786 <HAL_DMA_IRQHandler+0x3e2>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a29      	ldr	r2, [pc, #164]	; (80047a4 <HAL_DMA_IRQHandler+0x400>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d040      	beq.n	8004786 <HAL_DMA_IRQHandler+0x3e2>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a27      	ldr	r2, [pc, #156]	; (80047a8 <HAL_DMA_IRQHandler+0x404>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d03b      	beq.n	8004786 <HAL_DMA_IRQHandler+0x3e2>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a26      	ldr	r2, [pc, #152]	; (80047ac <HAL_DMA_IRQHandler+0x408>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d036      	beq.n	8004786 <HAL_DMA_IRQHandler+0x3e2>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a24      	ldr	r2, [pc, #144]	; (80047b0 <HAL_DMA_IRQHandler+0x40c>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d031      	beq.n	8004786 <HAL_DMA_IRQHandler+0x3e2>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a23      	ldr	r2, [pc, #140]	; (80047b4 <HAL_DMA_IRQHandler+0x410>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d02c      	beq.n	8004786 <HAL_DMA_IRQHandler+0x3e2>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a21      	ldr	r2, [pc, #132]	; (80047b8 <HAL_DMA_IRQHandler+0x414>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d027      	beq.n	8004786 <HAL_DMA_IRQHandler+0x3e2>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a20      	ldr	r2, [pc, #128]	; (80047bc <HAL_DMA_IRQHandler+0x418>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d022      	beq.n	8004786 <HAL_DMA_IRQHandler+0x3e2>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a1e      	ldr	r2, [pc, #120]	; (80047c0 <HAL_DMA_IRQHandler+0x41c>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d01d      	beq.n	8004786 <HAL_DMA_IRQHandler+0x3e2>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a1d      	ldr	r2, [pc, #116]	; (80047c4 <HAL_DMA_IRQHandler+0x420>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d018      	beq.n	8004786 <HAL_DMA_IRQHandler+0x3e2>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a1b      	ldr	r2, [pc, #108]	; (80047c8 <HAL_DMA_IRQHandler+0x424>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d013      	beq.n	8004786 <HAL_DMA_IRQHandler+0x3e2>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a1a      	ldr	r2, [pc, #104]	; (80047cc <HAL_DMA_IRQHandler+0x428>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d00e      	beq.n	8004786 <HAL_DMA_IRQHandler+0x3e2>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a18      	ldr	r2, [pc, #96]	; (80047d0 <HAL_DMA_IRQHandler+0x42c>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d009      	beq.n	8004786 <HAL_DMA_IRQHandler+0x3e2>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a17      	ldr	r2, [pc, #92]	; (80047d4 <HAL_DMA_IRQHandler+0x430>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d004      	beq.n	8004786 <HAL_DMA_IRQHandler+0x3e2>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a15      	ldr	r2, [pc, #84]	; (80047d8 <HAL_DMA_IRQHandler+0x434>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d12a      	bne.n	80047dc <HAL_DMA_IRQHandler+0x438>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0302 	and.w	r3, r3, #2
 8004790:	2b00      	cmp	r3, #0
 8004792:	bf14      	ite	ne
 8004794:	2301      	movne	r3, #1
 8004796:	2300      	moveq	r3, #0
 8004798:	b2db      	uxtb	r3, r3
 800479a:	e023      	b.n	80047e4 <HAL_DMA_IRQHandler+0x440>
 800479c:	40020010 	.word	0x40020010
 80047a0:	40020028 	.word	0x40020028
 80047a4:	40020040 	.word	0x40020040
 80047a8:	40020058 	.word	0x40020058
 80047ac:	40020070 	.word	0x40020070
 80047b0:	40020088 	.word	0x40020088
 80047b4:	400200a0 	.word	0x400200a0
 80047b8:	400200b8 	.word	0x400200b8
 80047bc:	40020410 	.word	0x40020410
 80047c0:	40020428 	.word	0x40020428
 80047c4:	40020440 	.word	0x40020440
 80047c8:	40020458 	.word	0x40020458
 80047cc:	40020470 	.word	0x40020470
 80047d0:	40020488 	.word	0x40020488
 80047d4:	400204a0 	.word	0x400204a0
 80047d8:	400204b8 	.word	0x400204b8
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2300      	movs	r3, #0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d00d      	beq.n	8004804 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ec:	f003 031f 	and.w	r3, r3, #31
 80047f0:	2204      	movs	r2, #4
 80047f2:	409a      	lsls	r2, r3
 80047f4:	6a3b      	ldr	r3, [r7, #32]
 80047f6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047fc:	f043 0204 	orr.w	r2, r3, #4
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004808:	f003 031f 	and.w	r3, r3, #31
 800480c:	2210      	movs	r2, #16
 800480e:	409a      	lsls	r2, r3
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	4013      	ands	r3, r2
 8004814:	2b00      	cmp	r3, #0
 8004816:	f000 80a6 	beq.w	8004966 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a85      	ldr	r2, [pc, #532]	; (8004a34 <HAL_DMA_IRQHandler+0x690>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d04a      	beq.n	80048ba <HAL_DMA_IRQHandler+0x516>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a83      	ldr	r2, [pc, #524]	; (8004a38 <HAL_DMA_IRQHandler+0x694>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d045      	beq.n	80048ba <HAL_DMA_IRQHandler+0x516>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a82      	ldr	r2, [pc, #520]	; (8004a3c <HAL_DMA_IRQHandler+0x698>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d040      	beq.n	80048ba <HAL_DMA_IRQHandler+0x516>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a80      	ldr	r2, [pc, #512]	; (8004a40 <HAL_DMA_IRQHandler+0x69c>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d03b      	beq.n	80048ba <HAL_DMA_IRQHandler+0x516>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a7f      	ldr	r2, [pc, #508]	; (8004a44 <HAL_DMA_IRQHandler+0x6a0>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d036      	beq.n	80048ba <HAL_DMA_IRQHandler+0x516>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a7d      	ldr	r2, [pc, #500]	; (8004a48 <HAL_DMA_IRQHandler+0x6a4>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d031      	beq.n	80048ba <HAL_DMA_IRQHandler+0x516>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a7c      	ldr	r2, [pc, #496]	; (8004a4c <HAL_DMA_IRQHandler+0x6a8>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d02c      	beq.n	80048ba <HAL_DMA_IRQHandler+0x516>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a7a      	ldr	r2, [pc, #488]	; (8004a50 <HAL_DMA_IRQHandler+0x6ac>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d027      	beq.n	80048ba <HAL_DMA_IRQHandler+0x516>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a79      	ldr	r2, [pc, #484]	; (8004a54 <HAL_DMA_IRQHandler+0x6b0>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d022      	beq.n	80048ba <HAL_DMA_IRQHandler+0x516>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a77      	ldr	r2, [pc, #476]	; (8004a58 <HAL_DMA_IRQHandler+0x6b4>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d01d      	beq.n	80048ba <HAL_DMA_IRQHandler+0x516>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a76      	ldr	r2, [pc, #472]	; (8004a5c <HAL_DMA_IRQHandler+0x6b8>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d018      	beq.n	80048ba <HAL_DMA_IRQHandler+0x516>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a74      	ldr	r2, [pc, #464]	; (8004a60 <HAL_DMA_IRQHandler+0x6bc>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d013      	beq.n	80048ba <HAL_DMA_IRQHandler+0x516>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a73      	ldr	r2, [pc, #460]	; (8004a64 <HAL_DMA_IRQHandler+0x6c0>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d00e      	beq.n	80048ba <HAL_DMA_IRQHandler+0x516>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a71      	ldr	r2, [pc, #452]	; (8004a68 <HAL_DMA_IRQHandler+0x6c4>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d009      	beq.n	80048ba <HAL_DMA_IRQHandler+0x516>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a70      	ldr	r2, [pc, #448]	; (8004a6c <HAL_DMA_IRQHandler+0x6c8>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d004      	beq.n	80048ba <HAL_DMA_IRQHandler+0x516>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a6e      	ldr	r2, [pc, #440]	; (8004a70 <HAL_DMA_IRQHandler+0x6cc>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d10a      	bne.n	80048d0 <HAL_DMA_IRQHandler+0x52c>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0308 	and.w	r3, r3, #8
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	bf14      	ite	ne
 80048c8:	2301      	movne	r3, #1
 80048ca:	2300      	moveq	r3, #0
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	e009      	b.n	80048e4 <HAL_DMA_IRQHandler+0x540>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0304 	and.w	r3, r3, #4
 80048da:	2b00      	cmp	r3, #0
 80048dc:	bf14      	ite	ne
 80048de:	2301      	movne	r3, #1
 80048e0:	2300      	moveq	r3, #0
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d03e      	beq.n	8004966 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048ec:	f003 031f 	and.w	r3, r3, #31
 80048f0:	2210      	movs	r2, #16
 80048f2:	409a      	lsls	r2, r3
 80048f4:	6a3b      	ldr	r3, [r7, #32]
 80048f6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d018      	beq.n	8004938 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d108      	bne.n	8004926 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004918:	2b00      	cmp	r3, #0
 800491a:	d024      	beq.n	8004966 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	4798      	blx	r3
 8004924:	e01f      	b.n	8004966 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800492a:	2b00      	cmp	r3, #0
 800492c:	d01b      	beq.n	8004966 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	4798      	blx	r3
 8004936:	e016      	b.n	8004966 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004942:	2b00      	cmp	r3, #0
 8004944:	d107      	bne.n	8004956 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f022 0208 	bic.w	r2, r2, #8
 8004954:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495a:	2b00      	cmp	r3, #0
 800495c:	d003      	beq.n	8004966 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800496a:	f003 031f 	and.w	r3, r3, #31
 800496e:	2220      	movs	r2, #32
 8004970:	409a      	lsls	r2, r3
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	4013      	ands	r3, r2
 8004976:	2b00      	cmp	r3, #0
 8004978:	f000 8110 	beq.w	8004b9c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a2c      	ldr	r2, [pc, #176]	; (8004a34 <HAL_DMA_IRQHandler+0x690>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d04a      	beq.n	8004a1c <HAL_DMA_IRQHandler+0x678>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a2b      	ldr	r2, [pc, #172]	; (8004a38 <HAL_DMA_IRQHandler+0x694>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d045      	beq.n	8004a1c <HAL_DMA_IRQHandler+0x678>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a29      	ldr	r2, [pc, #164]	; (8004a3c <HAL_DMA_IRQHandler+0x698>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d040      	beq.n	8004a1c <HAL_DMA_IRQHandler+0x678>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a28      	ldr	r2, [pc, #160]	; (8004a40 <HAL_DMA_IRQHandler+0x69c>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d03b      	beq.n	8004a1c <HAL_DMA_IRQHandler+0x678>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a26      	ldr	r2, [pc, #152]	; (8004a44 <HAL_DMA_IRQHandler+0x6a0>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d036      	beq.n	8004a1c <HAL_DMA_IRQHandler+0x678>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a25      	ldr	r2, [pc, #148]	; (8004a48 <HAL_DMA_IRQHandler+0x6a4>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d031      	beq.n	8004a1c <HAL_DMA_IRQHandler+0x678>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a23      	ldr	r2, [pc, #140]	; (8004a4c <HAL_DMA_IRQHandler+0x6a8>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d02c      	beq.n	8004a1c <HAL_DMA_IRQHandler+0x678>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a22      	ldr	r2, [pc, #136]	; (8004a50 <HAL_DMA_IRQHandler+0x6ac>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d027      	beq.n	8004a1c <HAL_DMA_IRQHandler+0x678>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a20      	ldr	r2, [pc, #128]	; (8004a54 <HAL_DMA_IRQHandler+0x6b0>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d022      	beq.n	8004a1c <HAL_DMA_IRQHandler+0x678>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a1f      	ldr	r2, [pc, #124]	; (8004a58 <HAL_DMA_IRQHandler+0x6b4>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d01d      	beq.n	8004a1c <HAL_DMA_IRQHandler+0x678>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a1d      	ldr	r2, [pc, #116]	; (8004a5c <HAL_DMA_IRQHandler+0x6b8>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d018      	beq.n	8004a1c <HAL_DMA_IRQHandler+0x678>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a1c      	ldr	r2, [pc, #112]	; (8004a60 <HAL_DMA_IRQHandler+0x6bc>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d013      	beq.n	8004a1c <HAL_DMA_IRQHandler+0x678>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a1a      	ldr	r2, [pc, #104]	; (8004a64 <HAL_DMA_IRQHandler+0x6c0>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d00e      	beq.n	8004a1c <HAL_DMA_IRQHandler+0x678>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a19      	ldr	r2, [pc, #100]	; (8004a68 <HAL_DMA_IRQHandler+0x6c4>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d009      	beq.n	8004a1c <HAL_DMA_IRQHandler+0x678>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a17      	ldr	r2, [pc, #92]	; (8004a6c <HAL_DMA_IRQHandler+0x6c8>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d004      	beq.n	8004a1c <HAL_DMA_IRQHandler+0x678>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a16      	ldr	r2, [pc, #88]	; (8004a70 <HAL_DMA_IRQHandler+0x6cc>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d12b      	bne.n	8004a74 <HAL_DMA_IRQHandler+0x6d0>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0310 	and.w	r3, r3, #16
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	bf14      	ite	ne
 8004a2a:	2301      	movne	r3, #1
 8004a2c:	2300      	moveq	r3, #0
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	e02a      	b.n	8004a88 <HAL_DMA_IRQHandler+0x6e4>
 8004a32:	bf00      	nop
 8004a34:	40020010 	.word	0x40020010
 8004a38:	40020028 	.word	0x40020028
 8004a3c:	40020040 	.word	0x40020040
 8004a40:	40020058 	.word	0x40020058
 8004a44:	40020070 	.word	0x40020070
 8004a48:	40020088 	.word	0x40020088
 8004a4c:	400200a0 	.word	0x400200a0
 8004a50:	400200b8 	.word	0x400200b8
 8004a54:	40020410 	.word	0x40020410
 8004a58:	40020428 	.word	0x40020428
 8004a5c:	40020440 	.word	0x40020440
 8004a60:	40020458 	.word	0x40020458
 8004a64:	40020470 	.word	0x40020470
 8004a68:	40020488 	.word	0x40020488
 8004a6c:	400204a0 	.word	0x400204a0
 8004a70:	400204b8 	.word	0x400204b8
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0302 	and.w	r3, r3, #2
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	bf14      	ite	ne
 8004a82:	2301      	movne	r3, #1
 8004a84:	2300      	moveq	r3, #0
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	f000 8087 	beq.w	8004b9c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a92:	f003 031f 	and.w	r3, r3, #31
 8004a96:	2220      	movs	r2, #32
 8004a98:	409a      	lsls	r2, r3
 8004a9a:	6a3b      	ldr	r3, [r7, #32]
 8004a9c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	2b04      	cmp	r3, #4
 8004aa8:	d139      	bne.n	8004b1e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f022 0216 	bic.w	r2, r2, #22
 8004ab8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	695a      	ldr	r2, [r3, #20]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ac8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d103      	bne.n	8004ada <HAL_DMA_IRQHandler+0x736>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d007      	beq.n	8004aea <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f022 0208 	bic.w	r2, r2, #8
 8004ae8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aee:	f003 031f 	and.w	r3, r3, #31
 8004af2:	223f      	movs	r2, #63	; 0x3f
 8004af4:	409a      	lsls	r2, r3
 8004af6:	6a3b      	ldr	r3, [r7, #32]
 8004af8:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2201      	movs	r2, #1
 8004b06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	f000 834a 	beq.w	80051a8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	4798      	blx	r3
          }
          return;
 8004b1c:	e344      	b.n	80051a8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d018      	beq.n	8004b5e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d108      	bne.n	8004b4c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d02c      	beq.n	8004b9c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	4798      	blx	r3
 8004b4a:	e027      	b.n	8004b9c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d023      	beq.n	8004b9c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	4798      	blx	r3
 8004b5c:	e01e      	b.n	8004b9c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d10f      	bne.n	8004b8c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f022 0210 	bic.w	r2, r2, #16
 8004b7a:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d003      	beq.n	8004b9c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	f000 8306 	beq.w	80051b2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004baa:	f003 0301 	and.w	r3, r3, #1
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	f000 8088 	beq.w	8004cc4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2204      	movs	r2, #4
 8004bb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a7a      	ldr	r2, [pc, #488]	; (8004dac <HAL_DMA_IRQHandler+0xa08>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d04a      	beq.n	8004c5c <HAL_DMA_IRQHandler+0x8b8>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a79      	ldr	r2, [pc, #484]	; (8004db0 <HAL_DMA_IRQHandler+0xa0c>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d045      	beq.n	8004c5c <HAL_DMA_IRQHandler+0x8b8>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a77      	ldr	r2, [pc, #476]	; (8004db4 <HAL_DMA_IRQHandler+0xa10>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d040      	beq.n	8004c5c <HAL_DMA_IRQHandler+0x8b8>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a76      	ldr	r2, [pc, #472]	; (8004db8 <HAL_DMA_IRQHandler+0xa14>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d03b      	beq.n	8004c5c <HAL_DMA_IRQHandler+0x8b8>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a74      	ldr	r2, [pc, #464]	; (8004dbc <HAL_DMA_IRQHandler+0xa18>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d036      	beq.n	8004c5c <HAL_DMA_IRQHandler+0x8b8>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a73      	ldr	r2, [pc, #460]	; (8004dc0 <HAL_DMA_IRQHandler+0xa1c>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d031      	beq.n	8004c5c <HAL_DMA_IRQHandler+0x8b8>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a71      	ldr	r2, [pc, #452]	; (8004dc4 <HAL_DMA_IRQHandler+0xa20>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d02c      	beq.n	8004c5c <HAL_DMA_IRQHandler+0x8b8>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a70      	ldr	r2, [pc, #448]	; (8004dc8 <HAL_DMA_IRQHandler+0xa24>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d027      	beq.n	8004c5c <HAL_DMA_IRQHandler+0x8b8>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a6e      	ldr	r2, [pc, #440]	; (8004dcc <HAL_DMA_IRQHandler+0xa28>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d022      	beq.n	8004c5c <HAL_DMA_IRQHandler+0x8b8>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a6d      	ldr	r2, [pc, #436]	; (8004dd0 <HAL_DMA_IRQHandler+0xa2c>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d01d      	beq.n	8004c5c <HAL_DMA_IRQHandler+0x8b8>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a6b      	ldr	r2, [pc, #428]	; (8004dd4 <HAL_DMA_IRQHandler+0xa30>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d018      	beq.n	8004c5c <HAL_DMA_IRQHandler+0x8b8>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a6a      	ldr	r2, [pc, #424]	; (8004dd8 <HAL_DMA_IRQHandler+0xa34>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d013      	beq.n	8004c5c <HAL_DMA_IRQHandler+0x8b8>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a68      	ldr	r2, [pc, #416]	; (8004ddc <HAL_DMA_IRQHandler+0xa38>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d00e      	beq.n	8004c5c <HAL_DMA_IRQHandler+0x8b8>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a67      	ldr	r2, [pc, #412]	; (8004de0 <HAL_DMA_IRQHandler+0xa3c>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d009      	beq.n	8004c5c <HAL_DMA_IRQHandler+0x8b8>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a65      	ldr	r2, [pc, #404]	; (8004de4 <HAL_DMA_IRQHandler+0xa40>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d004      	beq.n	8004c5c <HAL_DMA_IRQHandler+0x8b8>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a64      	ldr	r2, [pc, #400]	; (8004de8 <HAL_DMA_IRQHandler+0xa44>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d108      	bne.n	8004c6e <HAL_DMA_IRQHandler+0x8ca>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f022 0201 	bic.w	r2, r2, #1
 8004c6a:	601a      	str	r2, [r3, #0]
 8004c6c:	e007      	b.n	8004c7e <HAL_DMA_IRQHandler+0x8da>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f022 0201 	bic.w	r2, r2, #1
 8004c7c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	3301      	adds	r3, #1
 8004c82:	60fb      	str	r3, [r7, #12]
 8004c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d307      	bcc.n	8004c9a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0301 	and.w	r3, r3, #1
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d1f2      	bne.n	8004c7e <HAL_DMA_IRQHandler+0x8da>
 8004c98:	e000      	b.n	8004c9c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004c9a:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 0301 	and.w	r3, r3, #1
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d004      	beq.n	8004cbc <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2203      	movs	r2, #3
 8004cb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004cba:	e003      	b.n	8004cc4 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	f000 8272 	beq.w	80051b2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	4798      	blx	r3
 8004cd6:	e26c      	b.n	80051b2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a43      	ldr	r2, [pc, #268]	; (8004dec <HAL_DMA_IRQHandler+0xa48>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d022      	beq.n	8004d28 <HAL_DMA_IRQHandler+0x984>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a42      	ldr	r2, [pc, #264]	; (8004df0 <HAL_DMA_IRQHandler+0xa4c>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d01d      	beq.n	8004d28 <HAL_DMA_IRQHandler+0x984>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a40      	ldr	r2, [pc, #256]	; (8004df4 <HAL_DMA_IRQHandler+0xa50>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d018      	beq.n	8004d28 <HAL_DMA_IRQHandler+0x984>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a3f      	ldr	r2, [pc, #252]	; (8004df8 <HAL_DMA_IRQHandler+0xa54>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d013      	beq.n	8004d28 <HAL_DMA_IRQHandler+0x984>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a3d      	ldr	r2, [pc, #244]	; (8004dfc <HAL_DMA_IRQHandler+0xa58>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d00e      	beq.n	8004d28 <HAL_DMA_IRQHandler+0x984>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a3c      	ldr	r2, [pc, #240]	; (8004e00 <HAL_DMA_IRQHandler+0xa5c>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d009      	beq.n	8004d28 <HAL_DMA_IRQHandler+0x984>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a3a      	ldr	r2, [pc, #232]	; (8004e04 <HAL_DMA_IRQHandler+0xa60>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d004      	beq.n	8004d28 <HAL_DMA_IRQHandler+0x984>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a39      	ldr	r2, [pc, #228]	; (8004e08 <HAL_DMA_IRQHandler+0xa64>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d101      	bne.n	8004d2c <HAL_DMA_IRQHandler+0x988>
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e000      	b.n	8004d2e <HAL_DMA_IRQHandler+0x98a>
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	f000 823f 	beq.w	80051b2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d40:	f003 031f 	and.w	r3, r3, #31
 8004d44:	2204      	movs	r2, #4
 8004d46:	409a      	lsls	r2, r3
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	f000 80cd 	beq.w	8004eec <HAL_DMA_IRQHandler+0xb48>
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	f003 0304 	and.w	r3, r3, #4
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	f000 80c7 	beq.w	8004eec <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d62:	f003 031f 	and.w	r3, r3, #31
 8004d66:	2204      	movs	r2, #4
 8004d68:	409a      	lsls	r2, r3
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d049      	beq.n	8004e0c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d109      	bne.n	8004d96 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	f000 8210 	beq.w	80051ac <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d94:	e20a      	b.n	80051ac <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	f000 8206 	beq.w	80051ac <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004da8:	e200      	b.n	80051ac <HAL_DMA_IRQHandler+0xe08>
 8004daa:	bf00      	nop
 8004dac:	40020010 	.word	0x40020010
 8004db0:	40020028 	.word	0x40020028
 8004db4:	40020040 	.word	0x40020040
 8004db8:	40020058 	.word	0x40020058
 8004dbc:	40020070 	.word	0x40020070
 8004dc0:	40020088 	.word	0x40020088
 8004dc4:	400200a0 	.word	0x400200a0
 8004dc8:	400200b8 	.word	0x400200b8
 8004dcc:	40020410 	.word	0x40020410
 8004dd0:	40020428 	.word	0x40020428
 8004dd4:	40020440 	.word	0x40020440
 8004dd8:	40020458 	.word	0x40020458
 8004ddc:	40020470 	.word	0x40020470
 8004de0:	40020488 	.word	0x40020488
 8004de4:	400204a0 	.word	0x400204a0
 8004de8:	400204b8 	.word	0x400204b8
 8004dec:	58025408 	.word	0x58025408
 8004df0:	5802541c 	.word	0x5802541c
 8004df4:	58025430 	.word	0x58025430
 8004df8:	58025444 	.word	0x58025444
 8004dfc:	58025458 	.word	0x58025458
 8004e00:	5802546c 	.word	0x5802546c
 8004e04:	58025480 	.word	0x58025480
 8004e08:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	f003 0320 	and.w	r3, r3, #32
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d160      	bne.n	8004ed8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a8c      	ldr	r2, [pc, #560]	; (800504c <HAL_DMA_IRQHandler+0xca8>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d04a      	beq.n	8004eb6 <HAL_DMA_IRQHandler+0xb12>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a8a      	ldr	r2, [pc, #552]	; (8005050 <HAL_DMA_IRQHandler+0xcac>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d045      	beq.n	8004eb6 <HAL_DMA_IRQHandler+0xb12>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a89      	ldr	r2, [pc, #548]	; (8005054 <HAL_DMA_IRQHandler+0xcb0>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d040      	beq.n	8004eb6 <HAL_DMA_IRQHandler+0xb12>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a87      	ldr	r2, [pc, #540]	; (8005058 <HAL_DMA_IRQHandler+0xcb4>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d03b      	beq.n	8004eb6 <HAL_DMA_IRQHandler+0xb12>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a86      	ldr	r2, [pc, #536]	; (800505c <HAL_DMA_IRQHandler+0xcb8>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d036      	beq.n	8004eb6 <HAL_DMA_IRQHandler+0xb12>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a84      	ldr	r2, [pc, #528]	; (8005060 <HAL_DMA_IRQHandler+0xcbc>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d031      	beq.n	8004eb6 <HAL_DMA_IRQHandler+0xb12>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a83      	ldr	r2, [pc, #524]	; (8005064 <HAL_DMA_IRQHandler+0xcc0>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d02c      	beq.n	8004eb6 <HAL_DMA_IRQHandler+0xb12>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a81      	ldr	r2, [pc, #516]	; (8005068 <HAL_DMA_IRQHandler+0xcc4>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d027      	beq.n	8004eb6 <HAL_DMA_IRQHandler+0xb12>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a80      	ldr	r2, [pc, #512]	; (800506c <HAL_DMA_IRQHandler+0xcc8>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d022      	beq.n	8004eb6 <HAL_DMA_IRQHandler+0xb12>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a7e      	ldr	r2, [pc, #504]	; (8005070 <HAL_DMA_IRQHandler+0xccc>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d01d      	beq.n	8004eb6 <HAL_DMA_IRQHandler+0xb12>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a7d      	ldr	r2, [pc, #500]	; (8005074 <HAL_DMA_IRQHandler+0xcd0>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d018      	beq.n	8004eb6 <HAL_DMA_IRQHandler+0xb12>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a7b      	ldr	r2, [pc, #492]	; (8005078 <HAL_DMA_IRQHandler+0xcd4>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d013      	beq.n	8004eb6 <HAL_DMA_IRQHandler+0xb12>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a7a      	ldr	r2, [pc, #488]	; (800507c <HAL_DMA_IRQHandler+0xcd8>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d00e      	beq.n	8004eb6 <HAL_DMA_IRQHandler+0xb12>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a78      	ldr	r2, [pc, #480]	; (8005080 <HAL_DMA_IRQHandler+0xcdc>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d009      	beq.n	8004eb6 <HAL_DMA_IRQHandler+0xb12>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a77      	ldr	r2, [pc, #476]	; (8005084 <HAL_DMA_IRQHandler+0xce0>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d004      	beq.n	8004eb6 <HAL_DMA_IRQHandler+0xb12>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a75      	ldr	r2, [pc, #468]	; (8005088 <HAL_DMA_IRQHandler+0xce4>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d108      	bne.n	8004ec8 <HAL_DMA_IRQHandler+0xb24>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f022 0208 	bic.w	r2, r2, #8
 8004ec4:	601a      	str	r2, [r3, #0]
 8004ec6:	e007      	b.n	8004ed8 <HAL_DMA_IRQHandler+0xb34>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f022 0204 	bic.w	r2, r2, #4
 8004ed6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	f000 8165 	beq.w	80051ac <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004eea:	e15f      	b.n	80051ac <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ef0:	f003 031f 	and.w	r3, r3, #31
 8004ef4:	2202      	movs	r2, #2
 8004ef6:	409a      	lsls	r2, r3
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	4013      	ands	r3, r2
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	f000 80c5 	beq.w	800508c <HAL_DMA_IRQHandler+0xce8>
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	f003 0302 	and.w	r3, r3, #2
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	f000 80bf 	beq.w	800508c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f12:	f003 031f 	and.w	r3, r3, #31
 8004f16:	2202      	movs	r2, #2
 8004f18:	409a      	lsls	r2, r3
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d018      	beq.n	8004f5a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d109      	bne.n	8004f46 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	f000 813a 	beq.w	80051b0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f44:	e134      	b.n	80051b0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	f000 8130 	beq.w	80051b0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f58:	e12a      	b.n	80051b0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	f003 0320 	and.w	r3, r3, #32
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d168      	bne.n	8005036 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a38      	ldr	r2, [pc, #224]	; (800504c <HAL_DMA_IRQHandler+0xca8>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d04a      	beq.n	8005004 <HAL_DMA_IRQHandler+0xc60>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a37      	ldr	r2, [pc, #220]	; (8005050 <HAL_DMA_IRQHandler+0xcac>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d045      	beq.n	8005004 <HAL_DMA_IRQHandler+0xc60>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a35      	ldr	r2, [pc, #212]	; (8005054 <HAL_DMA_IRQHandler+0xcb0>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d040      	beq.n	8005004 <HAL_DMA_IRQHandler+0xc60>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a34      	ldr	r2, [pc, #208]	; (8005058 <HAL_DMA_IRQHandler+0xcb4>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d03b      	beq.n	8005004 <HAL_DMA_IRQHandler+0xc60>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a32      	ldr	r2, [pc, #200]	; (800505c <HAL_DMA_IRQHandler+0xcb8>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d036      	beq.n	8005004 <HAL_DMA_IRQHandler+0xc60>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a31      	ldr	r2, [pc, #196]	; (8005060 <HAL_DMA_IRQHandler+0xcbc>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d031      	beq.n	8005004 <HAL_DMA_IRQHandler+0xc60>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a2f      	ldr	r2, [pc, #188]	; (8005064 <HAL_DMA_IRQHandler+0xcc0>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d02c      	beq.n	8005004 <HAL_DMA_IRQHandler+0xc60>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a2e      	ldr	r2, [pc, #184]	; (8005068 <HAL_DMA_IRQHandler+0xcc4>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d027      	beq.n	8005004 <HAL_DMA_IRQHandler+0xc60>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a2c      	ldr	r2, [pc, #176]	; (800506c <HAL_DMA_IRQHandler+0xcc8>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d022      	beq.n	8005004 <HAL_DMA_IRQHandler+0xc60>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a2b      	ldr	r2, [pc, #172]	; (8005070 <HAL_DMA_IRQHandler+0xccc>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d01d      	beq.n	8005004 <HAL_DMA_IRQHandler+0xc60>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a29      	ldr	r2, [pc, #164]	; (8005074 <HAL_DMA_IRQHandler+0xcd0>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d018      	beq.n	8005004 <HAL_DMA_IRQHandler+0xc60>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a28      	ldr	r2, [pc, #160]	; (8005078 <HAL_DMA_IRQHandler+0xcd4>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d013      	beq.n	8005004 <HAL_DMA_IRQHandler+0xc60>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a26      	ldr	r2, [pc, #152]	; (800507c <HAL_DMA_IRQHandler+0xcd8>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d00e      	beq.n	8005004 <HAL_DMA_IRQHandler+0xc60>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a25      	ldr	r2, [pc, #148]	; (8005080 <HAL_DMA_IRQHandler+0xcdc>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d009      	beq.n	8005004 <HAL_DMA_IRQHandler+0xc60>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a23      	ldr	r2, [pc, #140]	; (8005084 <HAL_DMA_IRQHandler+0xce0>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d004      	beq.n	8005004 <HAL_DMA_IRQHandler+0xc60>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a22      	ldr	r2, [pc, #136]	; (8005088 <HAL_DMA_IRQHandler+0xce4>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d108      	bne.n	8005016 <HAL_DMA_IRQHandler+0xc72>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f022 0214 	bic.w	r2, r2, #20
 8005012:	601a      	str	r2, [r3, #0]
 8005014:	e007      	b.n	8005026 <HAL_DMA_IRQHandler+0xc82>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f022 020a 	bic.w	r2, r2, #10
 8005024:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2201      	movs	r2, #1
 8005032:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800503a:	2b00      	cmp	r3, #0
 800503c:	f000 80b8 	beq.w	80051b0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005048:	e0b2      	b.n	80051b0 <HAL_DMA_IRQHandler+0xe0c>
 800504a:	bf00      	nop
 800504c:	40020010 	.word	0x40020010
 8005050:	40020028 	.word	0x40020028
 8005054:	40020040 	.word	0x40020040
 8005058:	40020058 	.word	0x40020058
 800505c:	40020070 	.word	0x40020070
 8005060:	40020088 	.word	0x40020088
 8005064:	400200a0 	.word	0x400200a0
 8005068:	400200b8 	.word	0x400200b8
 800506c:	40020410 	.word	0x40020410
 8005070:	40020428 	.word	0x40020428
 8005074:	40020440 	.word	0x40020440
 8005078:	40020458 	.word	0x40020458
 800507c:	40020470 	.word	0x40020470
 8005080:	40020488 	.word	0x40020488
 8005084:	400204a0 	.word	0x400204a0
 8005088:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005090:	f003 031f 	and.w	r3, r3, #31
 8005094:	2208      	movs	r2, #8
 8005096:	409a      	lsls	r2, r3
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	4013      	ands	r3, r2
 800509c:	2b00      	cmp	r3, #0
 800509e:	f000 8088 	beq.w	80051b2 <HAL_DMA_IRQHandler+0xe0e>
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	f003 0308 	and.w	r3, r3, #8
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	f000 8082 	beq.w	80051b2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a41      	ldr	r2, [pc, #260]	; (80051b8 <HAL_DMA_IRQHandler+0xe14>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d04a      	beq.n	800514e <HAL_DMA_IRQHandler+0xdaa>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a3f      	ldr	r2, [pc, #252]	; (80051bc <HAL_DMA_IRQHandler+0xe18>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d045      	beq.n	800514e <HAL_DMA_IRQHandler+0xdaa>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a3e      	ldr	r2, [pc, #248]	; (80051c0 <HAL_DMA_IRQHandler+0xe1c>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d040      	beq.n	800514e <HAL_DMA_IRQHandler+0xdaa>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a3c      	ldr	r2, [pc, #240]	; (80051c4 <HAL_DMA_IRQHandler+0xe20>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d03b      	beq.n	800514e <HAL_DMA_IRQHandler+0xdaa>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a3b      	ldr	r2, [pc, #236]	; (80051c8 <HAL_DMA_IRQHandler+0xe24>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d036      	beq.n	800514e <HAL_DMA_IRQHandler+0xdaa>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a39      	ldr	r2, [pc, #228]	; (80051cc <HAL_DMA_IRQHandler+0xe28>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d031      	beq.n	800514e <HAL_DMA_IRQHandler+0xdaa>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a38      	ldr	r2, [pc, #224]	; (80051d0 <HAL_DMA_IRQHandler+0xe2c>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d02c      	beq.n	800514e <HAL_DMA_IRQHandler+0xdaa>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a36      	ldr	r2, [pc, #216]	; (80051d4 <HAL_DMA_IRQHandler+0xe30>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d027      	beq.n	800514e <HAL_DMA_IRQHandler+0xdaa>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a35      	ldr	r2, [pc, #212]	; (80051d8 <HAL_DMA_IRQHandler+0xe34>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d022      	beq.n	800514e <HAL_DMA_IRQHandler+0xdaa>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a33      	ldr	r2, [pc, #204]	; (80051dc <HAL_DMA_IRQHandler+0xe38>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d01d      	beq.n	800514e <HAL_DMA_IRQHandler+0xdaa>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a32      	ldr	r2, [pc, #200]	; (80051e0 <HAL_DMA_IRQHandler+0xe3c>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d018      	beq.n	800514e <HAL_DMA_IRQHandler+0xdaa>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a30      	ldr	r2, [pc, #192]	; (80051e4 <HAL_DMA_IRQHandler+0xe40>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d013      	beq.n	800514e <HAL_DMA_IRQHandler+0xdaa>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a2f      	ldr	r2, [pc, #188]	; (80051e8 <HAL_DMA_IRQHandler+0xe44>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d00e      	beq.n	800514e <HAL_DMA_IRQHandler+0xdaa>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a2d      	ldr	r2, [pc, #180]	; (80051ec <HAL_DMA_IRQHandler+0xe48>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d009      	beq.n	800514e <HAL_DMA_IRQHandler+0xdaa>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a2c      	ldr	r2, [pc, #176]	; (80051f0 <HAL_DMA_IRQHandler+0xe4c>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d004      	beq.n	800514e <HAL_DMA_IRQHandler+0xdaa>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a2a      	ldr	r2, [pc, #168]	; (80051f4 <HAL_DMA_IRQHandler+0xe50>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d108      	bne.n	8005160 <HAL_DMA_IRQHandler+0xdbc>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f022 021c 	bic.w	r2, r2, #28
 800515c:	601a      	str	r2, [r3, #0]
 800515e:	e007      	b.n	8005170 <HAL_DMA_IRQHandler+0xdcc>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f022 020e 	bic.w	r2, r2, #14
 800516e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005174:	f003 031f 	and.w	r3, r3, #31
 8005178:	2201      	movs	r2, #1
 800517a:	409a      	lsls	r2, r3
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2201      	movs	r2, #1
 8005192:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800519a:	2b00      	cmp	r3, #0
 800519c:	d009      	beq.n	80051b2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	4798      	blx	r3
 80051a6:	e004      	b.n	80051b2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80051a8:	bf00      	nop
 80051aa:	e002      	b.n	80051b2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80051ac:	bf00      	nop
 80051ae:	e000      	b.n	80051b2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80051b0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80051b2:	3728      	adds	r7, #40	; 0x28
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}
 80051b8:	40020010 	.word	0x40020010
 80051bc:	40020028 	.word	0x40020028
 80051c0:	40020040 	.word	0x40020040
 80051c4:	40020058 	.word	0x40020058
 80051c8:	40020070 	.word	0x40020070
 80051cc:	40020088 	.word	0x40020088
 80051d0:	400200a0 	.word	0x400200a0
 80051d4:	400200b8 	.word	0x400200b8
 80051d8:	40020410 	.word	0x40020410
 80051dc:	40020428 	.word	0x40020428
 80051e0:	40020440 	.word	0x40020440
 80051e4:	40020458 	.word	0x40020458
 80051e8:	40020470 	.word	0x40020470
 80051ec:	40020488 	.word	0x40020488
 80051f0:	400204a0 	.word	0x400204a0
 80051f4:	400204b8 	.word	0x400204b8

080051f8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b087      	sub	sp, #28
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	60b9      	str	r1, [r7, #8]
 8005202:	607a      	str	r2, [r7, #4]
 8005204:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800520a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005210:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a84      	ldr	r2, [pc, #528]	; (8005428 <DMA_SetConfig+0x230>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d072      	beq.n	8005302 <DMA_SetConfig+0x10a>
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a82      	ldr	r2, [pc, #520]	; (800542c <DMA_SetConfig+0x234>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d06d      	beq.n	8005302 <DMA_SetConfig+0x10a>
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a81      	ldr	r2, [pc, #516]	; (8005430 <DMA_SetConfig+0x238>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d068      	beq.n	8005302 <DMA_SetConfig+0x10a>
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a7f      	ldr	r2, [pc, #508]	; (8005434 <DMA_SetConfig+0x23c>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d063      	beq.n	8005302 <DMA_SetConfig+0x10a>
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a7e      	ldr	r2, [pc, #504]	; (8005438 <DMA_SetConfig+0x240>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d05e      	beq.n	8005302 <DMA_SetConfig+0x10a>
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a7c      	ldr	r2, [pc, #496]	; (800543c <DMA_SetConfig+0x244>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d059      	beq.n	8005302 <DMA_SetConfig+0x10a>
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a7b      	ldr	r2, [pc, #492]	; (8005440 <DMA_SetConfig+0x248>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d054      	beq.n	8005302 <DMA_SetConfig+0x10a>
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a79      	ldr	r2, [pc, #484]	; (8005444 <DMA_SetConfig+0x24c>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d04f      	beq.n	8005302 <DMA_SetConfig+0x10a>
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a78      	ldr	r2, [pc, #480]	; (8005448 <DMA_SetConfig+0x250>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d04a      	beq.n	8005302 <DMA_SetConfig+0x10a>
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a76      	ldr	r2, [pc, #472]	; (800544c <DMA_SetConfig+0x254>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d045      	beq.n	8005302 <DMA_SetConfig+0x10a>
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a75      	ldr	r2, [pc, #468]	; (8005450 <DMA_SetConfig+0x258>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d040      	beq.n	8005302 <DMA_SetConfig+0x10a>
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a73      	ldr	r2, [pc, #460]	; (8005454 <DMA_SetConfig+0x25c>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d03b      	beq.n	8005302 <DMA_SetConfig+0x10a>
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a72      	ldr	r2, [pc, #456]	; (8005458 <DMA_SetConfig+0x260>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d036      	beq.n	8005302 <DMA_SetConfig+0x10a>
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a70      	ldr	r2, [pc, #448]	; (800545c <DMA_SetConfig+0x264>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d031      	beq.n	8005302 <DMA_SetConfig+0x10a>
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a6f      	ldr	r2, [pc, #444]	; (8005460 <DMA_SetConfig+0x268>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d02c      	beq.n	8005302 <DMA_SetConfig+0x10a>
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a6d      	ldr	r2, [pc, #436]	; (8005464 <DMA_SetConfig+0x26c>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d027      	beq.n	8005302 <DMA_SetConfig+0x10a>
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a6c      	ldr	r2, [pc, #432]	; (8005468 <DMA_SetConfig+0x270>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d022      	beq.n	8005302 <DMA_SetConfig+0x10a>
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a6a      	ldr	r2, [pc, #424]	; (800546c <DMA_SetConfig+0x274>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d01d      	beq.n	8005302 <DMA_SetConfig+0x10a>
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a69      	ldr	r2, [pc, #420]	; (8005470 <DMA_SetConfig+0x278>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d018      	beq.n	8005302 <DMA_SetConfig+0x10a>
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a67      	ldr	r2, [pc, #412]	; (8005474 <DMA_SetConfig+0x27c>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d013      	beq.n	8005302 <DMA_SetConfig+0x10a>
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a66      	ldr	r2, [pc, #408]	; (8005478 <DMA_SetConfig+0x280>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d00e      	beq.n	8005302 <DMA_SetConfig+0x10a>
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a64      	ldr	r2, [pc, #400]	; (800547c <DMA_SetConfig+0x284>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d009      	beq.n	8005302 <DMA_SetConfig+0x10a>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a63      	ldr	r2, [pc, #396]	; (8005480 <DMA_SetConfig+0x288>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d004      	beq.n	8005302 <DMA_SetConfig+0x10a>
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a61      	ldr	r2, [pc, #388]	; (8005484 <DMA_SetConfig+0x28c>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d101      	bne.n	8005306 <DMA_SetConfig+0x10e>
 8005302:	2301      	movs	r3, #1
 8005304:	e000      	b.n	8005308 <DMA_SetConfig+0x110>
 8005306:	2300      	movs	r3, #0
 8005308:	2b00      	cmp	r3, #0
 800530a:	d00d      	beq.n	8005328 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005310:	68fa      	ldr	r2, [r7, #12]
 8005312:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005314:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800531a:	2b00      	cmp	r3, #0
 800531c:	d004      	beq.n	8005328 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005322:	68fa      	ldr	r2, [r7, #12]
 8005324:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005326:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a3e      	ldr	r2, [pc, #248]	; (8005428 <DMA_SetConfig+0x230>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d04a      	beq.n	80053c8 <DMA_SetConfig+0x1d0>
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a3d      	ldr	r2, [pc, #244]	; (800542c <DMA_SetConfig+0x234>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d045      	beq.n	80053c8 <DMA_SetConfig+0x1d0>
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a3b      	ldr	r2, [pc, #236]	; (8005430 <DMA_SetConfig+0x238>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d040      	beq.n	80053c8 <DMA_SetConfig+0x1d0>
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a3a      	ldr	r2, [pc, #232]	; (8005434 <DMA_SetConfig+0x23c>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d03b      	beq.n	80053c8 <DMA_SetConfig+0x1d0>
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a38      	ldr	r2, [pc, #224]	; (8005438 <DMA_SetConfig+0x240>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d036      	beq.n	80053c8 <DMA_SetConfig+0x1d0>
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a37      	ldr	r2, [pc, #220]	; (800543c <DMA_SetConfig+0x244>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d031      	beq.n	80053c8 <DMA_SetConfig+0x1d0>
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a35      	ldr	r2, [pc, #212]	; (8005440 <DMA_SetConfig+0x248>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d02c      	beq.n	80053c8 <DMA_SetConfig+0x1d0>
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a34      	ldr	r2, [pc, #208]	; (8005444 <DMA_SetConfig+0x24c>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d027      	beq.n	80053c8 <DMA_SetConfig+0x1d0>
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a32      	ldr	r2, [pc, #200]	; (8005448 <DMA_SetConfig+0x250>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d022      	beq.n	80053c8 <DMA_SetConfig+0x1d0>
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a31      	ldr	r2, [pc, #196]	; (800544c <DMA_SetConfig+0x254>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d01d      	beq.n	80053c8 <DMA_SetConfig+0x1d0>
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a2f      	ldr	r2, [pc, #188]	; (8005450 <DMA_SetConfig+0x258>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d018      	beq.n	80053c8 <DMA_SetConfig+0x1d0>
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a2e      	ldr	r2, [pc, #184]	; (8005454 <DMA_SetConfig+0x25c>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d013      	beq.n	80053c8 <DMA_SetConfig+0x1d0>
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a2c      	ldr	r2, [pc, #176]	; (8005458 <DMA_SetConfig+0x260>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d00e      	beq.n	80053c8 <DMA_SetConfig+0x1d0>
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a2b      	ldr	r2, [pc, #172]	; (800545c <DMA_SetConfig+0x264>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d009      	beq.n	80053c8 <DMA_SetConfig+0x1d0>
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a29      	ldr	r2, [pc, #164]	; (8005460 <DMA_SetConfig+0x268>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d004      	beq.n	80053c8 <DMA_SetConfig+0x1d0>
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a28      	ldr	r2, [pc, #160]	; (8005464 <DMA_SetConfig+0x26c>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d101      	bne.n	80053cc <DMA_SetConfig+0x1d4>
 80053c8:	2301      	movs	r3, #1
 80053ca:	e000      	b.n	80053ce <DMA_SetConfig+0x1d6>
 80053cc:	2300      	movs	r3, #0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d05a      	beq.n	8005488 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053d6:	f003 031f 	and.w	r3, r3, #31
 80053da:	223f      	movs	r2, #63	; 0x3f
 80053dc:	409a      	lsls	r2, r3
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80053f0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	683a      	ldr	r2, [r7, #0]
 80053f8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	2b40      	cmp	r3, #64	; 0x40
 8005400:	d108      	bne.n	8005414 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	68ba      	ldr	r2, [r7, #8]
 8005410:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005412:	e087      	b.n	8005524 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68ba      	ldr	r2, [r7, #8]
 800541a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	60da      	str	r2, [r3, #12]
}
 8005424:	e07e      	b.n	8005524 <DMA_SetConfig+0x32c>
 8005426:	bf00      	nop
 8005428:	40020010 	.word	0x40020010
 800542c:	40020028 	.word	0x40020028
 8005430:	40020040 	.word	0x40020040
 8005434:	40020058 	.word	0x40020058
 8005438:	40020070 	.word	0x40020070
 800543c:	40020088 	.word	0x40020088
 8005440:	400200a0 	.word	0x400200a0
 8005444:	400200b8 	.word	0x400200b8
 8005448:	40020410 	.word	0x40020410
 800544c:	40020428 	.word	0x40020428
 8005450:	40020440 	.word	0x40020440
 8005454:	40020458 	.word	0x40020458
 8005458:	40020470 	.word	0x40020470
 800545c:	40020488 	.word	0x40020488
 8005460:	400204a0 	.word	0x400204a0
 8005464:	400204b8 	.word	0x400204b8
 8005468:	58025408 	.word	0x58025408
 800546c:	5802541c 	.word	0x5802541c
 8005470:	58025430 	.word	0x58025430
 8005474:	58025444 	.word	0x58025444
 8005478:	58025458 	.word	0x58025458
 800547c:	5802546c 	.word	0x5802546c
 8005480:	58025480 	.word	0x58025480
 8005484:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a28      	ldr	r2, [pc, #160]	; (8005530 <DMA_SetConfig+0x338>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d022      	beq.n	80054d8 <DMA_SetConfig+0x2e0>
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a27      	ldr	r2, [pc, #156]	; (8005534 <DMA_SetConfig+0x33c>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d01d      	beq.n	80054d8 <DMA_SetConfig+0x2e0>
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a25      	ldr	r2, [pc, #148]	; (8005538 <DMA_SetConfig+0x340>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d018      	beq.n	80054d8 <DMA_SetConfig+0x2e0>
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a24      	ldr	r2, [pc, #144]	; (800553c <DMA_SetConfig+0x344>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d013      	beq.n	80054d8 <DMA_SetConfig+0x2e0>
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a22      	ldr	r2, [pc, #136]	; (8005540 <DMA_SetConfig+0x348>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d00e      	beq.n	80054d8 <DMA_SetConfig+0x2e0>
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a21      	ldr	r2, [pc, #132]	; (8005544 <DMA_SetConfig+0x34c>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d009      	beq.n	80054d8 <DMA_SetConfig+0x2e0>
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a1f      	ldr	r2, [pc, #124]	; (8005548 <DMA_SetConfig+0x350>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d004      	beq.n	80054d8 <DMA_SetConfig+0x2e0>
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a1e      	ldr	r2, [pc, #120]	; (800554c <DMA_SetConfig+0x354>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d101      	bne.n	80054dc <DMA_SetConfig+0x2e4>
 80054d8:	2301      	movs	r3, #1
 80054da:	e000      	b.n	80054de <DMA_SetConfig+0x2e6>
 80054dc:	2300      	movs	r3, #0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d020      	beq.n	8005524 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054e6:	f003 031f 	and.w	r3, r3, #31
 80054ea:	2201      	movs	r2, #1
 80054ec:	409a      	lsls	r2, r3
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	683a      	ldr	r2, [r7, #0]
 80054f8:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	2b40      	cmp	r3, #64	; 0x40
 8005500:	d108      	bne.n	8005514 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	68ba      	ldr	r2, [r7, #8]
 8005510:	60da      	str	r2, [r3, #12]
}
 8005512:	e007      	b.n	8005524 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	68ba      	ldr	r2, [r7, #8]
 800551a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	60da      	str	r2, [r3, #12]
}
 8005524:	bf00      	nop
 8005526:	371c      	adds	r7, #28
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr
 8005530:	58025408 	.word	0x58025408
 8005534:	5802541c 	.word	0x5802541c
 8005538:	58025430 	.word	0x58025430
 800553c:	58025444 	.word	0x58025444
 8005540:	58025458 	.word	0x58025458
 8005544:	5802546c 	.word	0x5802546c
 8005548:	58025480 	.word	0x58025480
 800554c:	58025494 	.word	0x58025494

08005550 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005550:	b480      	push	{r7}
 8005552:	b085      	sub	sp, #20
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a42      	ldr	r2, [pc, #264]	; (8005668 <DMA_CalcBaseAndBitshift+0x118>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d04a      	beq.n	80055f8 <DMA_CalcBaseAndBitshift+0xa8>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a41      	ldr	r2, [pc, #260]	; (800566c <DMA_CalcBaseAndBitshift+0x11c>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d045      	beq.n	80055f8 <DMA_CalcBaseAndBitshift+0xa8>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a3f      	ldr	r2, [pc, #252]	; (8005670 <DMA_CalcBaseAndBitshift+0x120>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d040      	beq.n	80055f8 <DMA_CalcBaseAndBitshift+0xa8>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a3e      	ldr	r2, [pc, #248]	; (8005674 <DMA_CalcBaseAndBitshift+0x124>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d03b      	beq.n	80055f8 <DMA_CalcBaseAndBitshift+0xa8>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a3c      	ldr	r2, [pc, #240]	; (8005678 <DMA_CalcBaseAndBitshift+0x128>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d036      	beq.n	80055f8 <DMA_CalcBaseAndBitshift+0xa8>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a3b      	ldr	r2, [pc, #236]	; (800567c <DMA_CalcBaseAndBitshift+0x12c>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d031      	beq.n	80055f8 <DMA_CalcBaseAndBitshift+0xa8>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a39      	ldr	r2, [pc, #228]	; (8005680 <DMA_CalcBaseAndBitshift+0x130>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d02c      	beq.n	80055f8 <DMA_CalcBaseAndBitshift+0xa8>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a38      	ldr	r2, [pc, #224]	; (8005684 <DMA_CalcBaseAndBitshift+0x134>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d027      	beq.n	80055f8 <DMA_CalcBaseAndBitshift+0xa8>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a36      	ldr	r2, [pc, #216]	; (8005688 <DMA_CalcBaseAndBitshift+0x138>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d022      	beq.n	80055f8 <DMA_CalcBaseAndBitshift+0xa8>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a35      	ldr	r2, [pc, #212]	; (800568c <DMA_CalcBaseAndBitshift+0x13c>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d01d      	beq.n	80055f8 <DMA_CalcBaseAndBitshift+0xa8>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a33      	ldr	r2, [pc, #204]	; (8005690 <DMA_CalcBaseAndBitshift+0x140>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d018      	beq.n	80055f8 <DMA_CalcBaseAndBitshift+0xa8>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a32      	ldr	r2, [pc, #200]	; (8005694 <DMA_CalcBaseAndBitshift+0x144>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d013      	beq.n	80055f8 <DMA_CalcBaseAndBitshift+0xa8>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a30      	ldr	r2, [pc, #192]	; (8005698 <DMA_CalcBaseAndBitshift+0x148>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d00e      	beq.n	80055f8 <DMA_CalcBaseAndBitshift+0xa8>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a2f      	ldr	r2, [pc, #188]	; (800569c <DMA_CalcBaseAndBitshift+0x14c>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d009      	beq.n	80055f8 <DMA_CalcBaseAndBitshift+0xa8>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a2d      	ldr	r2, [pc, #180]	; (80056a0 <DMA_CalcBaseAndBitshift+0x150>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d004      	beq.n	80055f8 <DMA_CalcBaseAndBitshift+0xa8>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a2c      	ldr	r2, [pc, #176]	; (80056a4 <DMA_CalcBaseAndBitshift+0x154>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d101      	bne.n	80055fc <DMA_CalcBaseAndBitshift+0xac>
 80055f8:	2301      	movs	r3, #1
 80055fa:	e000      	b.n	80055fe <DMA_CalcBaseAndBitshift+0xae>
 80055fc:	2300      	movs	r3, #0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d024      	beq.n	800564c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	b2db      	uxtb	r3, r3
 8005608:	3b10      	subs	r3, #16
 800560a:	4a27      	ldr	r2, [pc, #156]	; (80056a8 <DMA_CalcBaseAndBitshift+0x158>)
 800560c:	fba2 2303 	umull	r2, r3, r2, r3
 8005610:	091b      	lsrs	r3, r3, #4
 8005612:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f003 0307 	and.w	r3, r3, #7
 800561a:	4a24      	ldr	r2, [pc, #144]	; (80056ac <DMA_CalcBaseAndBitshift+0x15c>)
 800561c:	5cd3      	ldrb	r3, [r2, r3]
 800561e:	461a      	mov	r2, r3
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2b03      	cmp	r3, #3
 8005628:	d908      	bls.n	800563c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	461a      	mov	r2, r3
 8005630:	4b1f      	ldr	r3, [pc, #124]	; (80056b0 <DMA_CalcBaseAndBitshift+0x160>)
 8005632:	4013      	ands	r3, r2
 8005634:	1d1a      	adds	r2, r3, #4
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	659a      	str	r2, [r3, #88]	; 0x58
 800563a:	e00d      	b.n	8005658 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	461a      	mov	r2, r3
 8005642:	4b1b      	ldr	r3, [pc, #108]	; (80056b0 <DMA_CalcBaseAndBitshift+0x160>)
 8005644:	4013      	ands	r3, r2
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	6593      	str	r3, [r2, #88]	; 0x58
 800564a:	e005      	b.n	8005658 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800565c:	4618      	mov	r0, r3
 800565e:	3714      	adds	r7, #20
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr
 8005668:	40020010 	.word	0x40020010
 800566c:	40020028 	.word	0x40020028
 8005670:	40020040 	.word	0x40020040
 8005674:	40020058 	.word	0x40020058
 8005678:	40020070 	.word	0x40020070
 800567c:	40020088 	.word	0x40020088
 8005680:	400200a0 	.word	0x400200a0
 8005684:	400200b8 	.word	0x400200b8
 8005688:	40020410 	.word	0x40020410
 800568c:	40020428 	.word	0x40020428
 8005690:	40020440 	.word	0x40020440
 8005694:	40020458 	.word	0x40020458
 8005698:	40020470 	.word	0x40020470
 800569c:	40020488 	.word	0x40020488
 80056a0:	400204a0 	.word	0x400204a0
 80056a4:	400204b8 	.word	0x400204b8
 80056a8:	aaaaaaab 	.word	0xaaaaaaab
 80056ac:	08019eac 	.word	0x08019eac
 80056b0:	fffffc00 	.word	0xfffffc00

080056b4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b085      	sub	sp, #20
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056bc:	2300      	movs	r3, #0
 80056be:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	699b      	ldr	r3, [r3, #24]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d120      	bne.n	800570a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056cc:	2b03      	cmp	r3, #3
 80056ce:	d858      	bhi.n	8005782 <DMA_CheckFifoParam+0xce>
 80056d0:	a201      	add	r2, pc, #4	; (adr r2, 80056d8 <DMA_CheckFifoParam+0x24>)
 80056d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056d6:	bf00      	nop
 80056d8:	080056e9 	.word	0x080056e9
 80056dc:	080056fb 	.word	0x080056fb
 80056e0:	080056e9 	.word	0x080056e9
 80056e4:	08005783 	.word	0x08005783
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d048      	beq.n	8005786 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80056f8:	e045      	b.n	8005786 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005702:	d142      	bne.n	800578a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005708:	e03f      	b.n	800578a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	699b      	ldr	r3, [r3, #24]
 800570e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005712:	d123      	bne.n	800575c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005718:	2b03      	cmp	r3, #3
 800571a:	d838      	bhi.n	800578e <DMA_CheckFifoParam+0xda>
 800571c:	a201      	add	r2, pc, #4	; (adr r2, 8005724 <DMA_CheckFifoParam+0x70>)
 800571e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005722:	bf00      	nop
 8005724:	08005735 	.word	0x08005735
 8005728:	0800573b 	.word	0x0800573b
 800572c:	08005735 	.word	0x08005735
 8005730:	0800574d 	.word	0x0800574d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	73fb      	strb	r3, [r7, #15]
        break;
 8005738:	e030      	b.n	800579c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800573e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005742:	2b00      	cmp	r3, #0
 8005744:	d025      	beq.n	8005792 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800574a:	e022      	b.n	8005792 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005750:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005754:	d11f      	bne.n	8005796 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800575a:	e01c      	b.n	8005796 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005760:	2b02      	cmp	r3, #2
 8005762:	d902      	bls.n	800576a <DMA_CheckFifoParam+0xb6>
 8005764:	2b03      	cmp	r3, #3
 8005766:	d003      	beq.n	8005770 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005768:	e018      	b.n	800579c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	73fb      	strb	r3, [r7, #15]
        break;
 800576e:	e015      	b.n	800579c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005774:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005778:	2b00      	cmp	r3, #0
 800577a:	d00e      	beq.n	800579a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	73fb      	strb	r3, [r7, #15]
    break;
 8005780:	e00b      	b.n	800579a <DMA_CheckFifoParam+0xe6>
        break;
 8005782:	bf00      	nop
 8005784:	e00a      	b.n	800579c <DMA_CheckFifoParam+0xe8>
        break;
 8005786:	bf00      	nop
 8005788:	e008      	b.n	800579c <DMA_CheckFifoParam+0xe8>
        break;
 800578a:	bf00      	nop
 800578c:	e006      	b.n	800579c <DMA_CheckFifoParam+0xe8>
        break;
 800578e:	bf00      	nop
 8005790:	e004      	b.n	800579c <DMA_CheckFifoParam+0xe8>
        break;
 8005792:	bf00      	nop
 8005794:	e002      	b.n	800579c <DMA_CheckFifoParam+0xe8>
        break;
 8005796:	bf00      	nop
 8005798:	e000      	b.n	800579c <DMA_CheckFifoParam+0xe8>
    break;
 800579a:	bf00      	nop
    }
  }

  return status;
 800579c:	7bfb      	ldrb	r3, [r7, #15]
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3714      	adds	r7, #20
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr
 80057aa:	bf00      	nop

080057ac <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b085      	sub	sp, #20
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a38      	ldr	r2, [pc, #224]	; (80058a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d022      	beq.n	800580a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a36      	ldr	r2, [pc, #216]	; (80058a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d01d      	beq.n	800580a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a35      	ldr	r2, [pc, #212]	; (80058a8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d018      	beq.n	800580a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a33      	ldr	r2, [pc, #204]	; (80058ac <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d013      	beq.n	800580a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a32      	ldr	r2, [pc, #200]	; (80058b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d00e      	beq.n	800580a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a30      	ldr	r2, [pc, #192]	; (80058b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d009      	beq.n	800580a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a2f      	ldr	r2, [pc, #188]	; (80058b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d004      	beq.n	800580a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a2d      	ldr	r2, [pc, #180]	; (80058bc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d101      	bne.n	800580e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800580a:	2301      	movs	r3, #1
 800580c:	e000      	b.n	8005810 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800580e:	2300      	movs	r3, #0
 8005810:	2b00      	cmp	r3, #0
 8005812:	d01a      	beq.n	800584a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	b2db      	uxtb	r3, r3
 800581a:	3b08      	subs	r3, #8
 800581c:	4a28      	ldr	r2, [pc, #160]	; (80058c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800581e:	fba2 2303 	umull	r2, r3, r2, r3
 8005822:	091b      	lsrs	r3, r3, #4
 8005824:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	4b26      	ldr	r3, [pc, #152]	; (80058c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800582a:	4413      	add	r3, r2
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	461a      	mov	r2, r3
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4a24      	ldr	r2, [pc, #144]	; (80058c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005838:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f003 031f 	and.w	r3, r3, #31
 8005840:	2201      	movs	r2, #1
 8005842:	409a      	lsls	r2, r3
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005848:	e024      	b.n	8005894 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	b2db      	uxtb	r3, r3
 8005850:	3b10      	subs	r3, #16
 8005852:	4a1e      	ldr	r2, [pc, #120]	; (80058cc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005854:	fba2 2303 	umull	r2, r3, r2, r3
 8005858:	091b      	lsrs	r3, r3, #4
 800585a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	4a1c      	ldr	r2, [pc, #112]	; (80058d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d806      	bhi.n	8005872 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	4a1b      	ldr	r2, [pc, #108]	; (80058d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d902      	bls.n	8005872 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	3308      	adds	r3, #8
 8005870:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005872:	68fa      	ldr	r2, [r7, #12]
 8005874:	4b18      	ldr	r3, [pc, #96]	; (80058d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005876:	4413      	add	r3, r2
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	461a      	mov	r2, r3
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4a16      	ldr	r2, [pc, #88]	; (80058dc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005884:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f003 031f 	and.w	r3, r3, #31
 800588c:	2201      	movs	r2, #1
 800588e:	409a      	lsls	r2, r3
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005894:	bf00      	nop
 8005896:	3714      	adds	r7, #20
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr
 80058a0:	58025408 	.word	0x58025408
 80058a4:	5802541c 	.word	0x5802541c
 80058a8:	58025430 	.word	0x58025430
 80058ac:	58025444 	.word	0x58025444
 80058b0:	58025458 	.word	0x58025458
 80058b4:	5802546c 	.word	0x5802546c
 80058b8:	58025480 	.word	0x58025480
 80058bc:	58025494 	.word	0x58025494
 80058c0:	cccccccd 	.word	0xcccccccd
 80058c4:	16009600 	.word	0x16009600
 80058c8:	58025880 	.word	0x58025880
 80058cc:	aaaaaaab 	.word	0xaaaaaaab
 80058d0:	400204b8 	.word	0x400204b8
 80058d4:	4002040f 	.word	0x4002040f
 80058d8:	10008200 	.word	0x10008200
 80058dc:	40020880 	.word	0x40020880

080058e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b085      	sub	sp, #20
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d04a      	beq.n	800598c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2b08      	cmp	r3, #8
 80058fa:	d847      	bhi.n	800598c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a25      	ldr	r2, [pc, #148]	; (8005998 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d022      	beq.n	800594c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a24      	ldr	r2, [pc, #144]	; (800599c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d01d      	beq.n	800594c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a22      	ldr	r2, [pc, #136]	; (80059a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d018      	beq.n	800594c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a21      	ldr	r2, [pc, #132]	; (80059a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d013      	beq.n	800594c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a1f      	ldr	r2, [pc, #124]	; (80059a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d00e      	beq.n	800594c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a1e      	ldr	r2, [pc, #120]	; (80059ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d009      	beq.n	800594c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a1c      	ldr	r2, [pc, #112]	; (80059b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d004      	beq.n	800594c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a1b      	ldr	r2, [pc, #108]	; (80059b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d101      	bne.n	8005950 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800594c:	2301      	movs	r3, #1
 800594e:	e000      	b.n	8005952 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005950:	2300      	movs	r3, #0
 8005952:	2b00      	cmp	r3, #0
 8005954:	d00a      	beq.n	800596c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005956:	68fa      	ldr	r2, [r7, #12]
 8005958:	4b17      	ldr	r3, [pc, #92]	; (80059b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800595a:	4413      	add	r3, r2
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	461a      	mov	r2, r3
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	4a15      	ldr	r2, [pc, #84]	; (80059bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005968:	671a      	str	r2, [r3, #112]	; 0x70
 800596a:	e009      	b.n	8005980 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800596c:	68fa      	ldr	r2, [r7, #12]
 800596e:	4b14      	ldr	r3, [pc, #80]	; (80059c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005970:	4413      	add	r3, r2
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	461a      	mov	r2, r3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a11      	ldr	r2, [pc, #68]	; (80059c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800597e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	3b01      	subs	r3, #1
 8005984:	2201      	movs	r2, #1
 8005986:	409a      	lsls	r2, r3
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800598c:	bf00      	nop
 800598e:	3714      	adds	r7, #20
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr
 8005998:	58025408 	.word	0x58025408
 800599c:	5802541c 	.word	0x5802541c
 80059a0:	58025430 	.word	0x58025430
 80059a4:	58025444 	.word	0x58025444
 80059a8:	58025458 	.word	0x58025458
 80059ac:	5802546c 	.word	0x5802546c
 80059b0:	58025480 	.word	0x58025480
 80059b4:	58025494 	.word	0x58025494
 80059b8:	1600963f 	.word	0x1600963f
 80059bc:	58025940 	.word	0x58025940
 80059c0:	1000823f 	.word	0x1000823f
 80059c4:	40020940 	.word	0x40020940

080059c8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b098      	sub	sp, #96	; 0x60
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80059d0:	4a84      	ldr	r2, [pc, #528]	; (8005be4 <HAL_FDCAN_Init+0x21c>)
 80059d2:	f107 030c 	add.w	r3, r7, #12
 80059d6:	4611      	mov	r1, r2
 80059d8:	224c      	movs	r2, #76	; 0x4c
 80059da:	4618      	mov	r0, r3
 80059dc:	f012 fd28 	bl	8018430 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d101      	bne.n	80059ea <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e1ca      	b.n	8005d80 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a7e      	ldr	r2, [pc, #504]	; (8005be8 <HAL_FDCAN_Init+0x220>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d106      	bne.n	8005a02 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80059fc:	461a      	mov	r2, r3
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005a08:	b2db      	uxtb	r3, r3
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d106      	bne.n	8005a1c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f7fd f94e 	bl	8002cb8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	699a      	ldr	r2, [r3, #24]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f022 0210 	bic.w	r2, r2, #16
 8005a2a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005a2c:	f7fd fdaa 	bl	8003584 <HAL_GetTick>
 8005a30:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005a32:	e014      	b.n	8005a5e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005a34:	f7fd fda6 	bl	8003584 <HAL_GetTick>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a3c:	1ad3      	subs	r3, r2, r3
 8005a3e:	2b0a      	cmp	r3, #10
 8005a40:	d90d      	bls.n	8005a5e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a48:	f043 0201 	orr.w	r2, r3, #1
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2203      	movs	r2, #3
 8005a56:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e190      	b.n	8005d80 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	699b      	ldr	r3, [r3, #24]
 8005a64:	f003 0308 	and.w	r3, r3, #8
 8005a68:	2b08      	cmp	r3, #8
 8005a6a:	d0e3      	beq.n	8005a34 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	699a      	ldr	r2, [r3, #24]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f042 0201 	orr.w	r2, r2, #1
 8005a7a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005a7c:	f7fd fd82 	bl	8003584 <HAL_GetTick>
 8005a80:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005a82:	e014      	b.n	8005aae <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005a84:	f7fd fd7e 	bl	8003584 <HAL_GetTick>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a8c:	1ad3      	subs	r3, r2, r3
 8005a8e:	2b0a      	cmp	r3, #10
 8005a90:	d90d      	bls.n	8005aae <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a98:	f043 0201 	orr.w	r2, r3, #1
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2203      	movs	r2, #3
 8005aa6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e168      	b.n	8005d80 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	699b      	ldr	r3, [r3, #24]
 8005ab4:	f003 0301 	and.w	r3, r3, #1
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d0e3      	beq.n	8005a84 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	699a      	ldr	r2, [r3, #24]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f042 0202 	orr.w	r2, r2, #2
 8005aca:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	7c1b      	ldrb	r3, [r3, #16]
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d108      	bne.n	8005ae6 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	699a      	ldr	r2, [r3, #24]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ae2:	619a      	str	r2, [r3, #24]
 8005ae4:	e007      	b.n	8005af6 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	699a      	ldr	r2, [r3, #24]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005af4:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	7c5b      	ldrb	r3, [r3, #17]
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d108      	bne.n	8005b10 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	699a      	ldr	r2, [r3, #24]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b0c:	619a      	str	r2, [r3, #24]
 8005b0e:	e007      	b.n	8005b20 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	699a      	ldr	r2, [r3, #24]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005b1e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	7c9b      	ldrb	r3, [r3, #18]
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d108      	bne.n	8005b3a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	699a      	ldr	r2, [r3, #24]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005b36:	619a      	str	r2, [r3, #24]
 8005b38:	e007      	b.n	8005b4a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	699a      	ldr	r2, [r3, #24]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005b48:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	699b      	ldr	r3, [r3, #24]
 8005b50:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	689a      	ldr	r2, [r3, #8]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	430a      	orrs	r2, r1
 8005b5e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	699a      	ldr	r2, [r3, #24]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8005b6e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	691a      	ldr	r2, [r3, #16]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f022 0210 	bic.w	r2, r2, #16
 8005b7e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d108      	bne.n	8005b9a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	699a      	ldr	r2, [r3, #24]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f042 0204 	orr.w	r2, r2, #4
 8005b96:	619a      	str	r2, [r3, #24]
 8005b98:	e030      	b.n	8005bfc <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d02c      	beq.n	8005bfc <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	2b02      	cmp	r3, #2
 8005ba8:	d020      	beq.n	8005bec <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	699a      	ldr	r2, [r3, #24]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005bb8:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	691a      	ldr	r2, [r3, #16]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f042 0210 	orr.w	r2, r2, #16
 8005bc8:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	2b03      	cmp	r3, #3
 8005bd0:	d114      	bne.n	8005bfc <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	699a      	ldr	r2, [r3, #24]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f042 0220 	orr.w	r2, r2, #32
 8005be0:	619a      	str	r2, [r3, #24]
 8005be2:	e00b      	b.n	8005bfc <HAL_FDCAN_Init+0x234>
 8005be4:	08019db8 	.word	0x08019db8
 8005be8:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	699a      	ldr	r2, [r3, #24]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f042 0220 	orr.w	r2, r2, #32
 8005bfa:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	699b      	ldr	r3, [r3, #24]
 8005c00:	3b01      	subs	r3, #1
 8005c02:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	69db      	ldr	r3, [r3, #28]
 8005c08:	3b01      	subs	r3, #1
 8005c0a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005c0c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a1b      	ldr	r3, [r3, #32]
 8005c12:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005c14:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	695b      	ldr	r3, [r3, #20]
 8005c1c:	3b01      	subs	r3, #1
 8005c1e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005c24:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005c26:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c30:	d115      	bne.n	8005c5e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c36:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c3c:	3b01      	subs	r3, #1
 8005c3e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005c40:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c46:	3b01      	subs	r3, #1
 8005c48:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8005c4a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c52:	3b01      	subs	r3, #1
 8005c54:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8005c5a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005c5c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d00a      	beq.n	8005c7c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	430a      	orrs	r2, r1
 8005c78:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c84:	4413      	add	r3, r2
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d012      	beq.n	8005cb0 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8005c92:	f023 0107 	bic.w	r1, r3, #7
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005ca0:	4413      	add	r3, r2
 8005ca2:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	430a      	orrs	r2, r1
 8005cac:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d012      	beq.n	8005cde <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005cc0:	f023 0107 	bic.w	r1, r3, #7
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005cce:	4413      	add	r3, r2
 8005cd0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	430a      	orrs	r2, r1
 8005cda:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d013      	beq.n	8005d0e <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005cee:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005cfc:	4413      	add	r3, r2
 8005cfe:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005d02:	011a      	lsls	r2, r3, #4
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	430a      	orrs	r2, r1
 8005d0a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d013      	beq.n	8005d3e <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005d1e:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005d2c:	4413      	add	r3, r2
 8005d2e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005d32:	021a      	lsls	r2, r3, #8
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	430a      	orrs	r2, r1
 8005d3a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a11      	ldr	r2, [pc, #68]	; (8005d88 <HAL_FDCAN_Init+0x3c0>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d107      	bne.n	8005d58 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	689a      	ldr	r2, [r3, #8]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	f022 0203 	bic.w	r2, r2, #3
 8005d56:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f000 fddf 	bl	8006934 <FDCAN_CalcultateRamBlockAddresses>
 8005d76:	4603      	mov	r3, r0
 8005d78:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8005d7c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3760      	adds	r7, #96	; 0x60
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}
 8005d88:	4000a000 	.word	0x4000a000

08005d8c <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b087      	sub	sp, #28
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005d9c:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005d9e:	7bfb      	ldrb	r3, [r7, #15]
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d002      	beq.n	8005daa <HAL_FDCAN_ConfigFilter+0x1e>
 8005da4:	7bfb      	ldrb	r3, [r7, #15]
 8005da6:	2b02      	cmp	r3, #2
 8005da8:	d157      	bne.n	8005e5a <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d12b      	bne.n	8005e0a <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	2b07      	cmp	r3, #7
 8005db8:	d10d      	bne.n	8005dd6 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	691b      	ldr	r3, [r3, #16]
 8005dbe:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	69db      	ldr	r3, [r3, #28]
 8005dc4:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8005dc6:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8005dcc:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8005dce:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 8005dd2:	617b      	str	r3, [r7, #20]
 8005dd4:	e00e      	b.n	8005df4 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005de2:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	691b      	ldr	r3, [r3, #16]
 8005de8:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8005dea:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005df0:	4313      	orrs	r3, r2
 8005df2:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	009b      	lsls	r3, r3, #2
 8005dfe:	4413      	add	r3, r2
 8005e00:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	697a      	ldr	r2, [r7, #20]
 8005e06:	601a      	str	r2, [r3, #0]
 8005e08:	e025      	b.n	8005e56 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	075a      	lsls	r2, r3, #29
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	691b      	ldr	r3, [r3, #16]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	2b07      	cmp	r3, #7
 8005e1e:	d103      	bne.n	8005e28 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	699b      	ldr	r3, [r3, #24]
 8005e24:	613b      	str	r3, [r7, #16]
 8005e26:	e006      	b.n	8005e36 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	079a      	lsls	r2, r3, #30
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	695b      	ldr	r3, [r3, #20]
 8005e32:	4313      	orrs	r3, r2
 8005e34:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	00db      	lsls	r3, r3, #3
 8005e40:	4413      	add	r3, r2
 8005e42:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	697a      	ldr	r2, [r7, #20]
 8005e48:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	3304      	adds	r3, #4
 8005e4e:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	693a      	ldr	r2, [r7, #16]
 8005e54:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8005e56:	2300      	movs	r3, #0
 8005e58:	e008      	b.n	8005e6c <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e60:	f043 0202 	orr.w	r2, r3, #2
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
  }
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	371c      	adds	r7, #28
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b085      	sub	sp, #20
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	607a      	str	r2, [r7, #4]
 8005e84:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d110      	bne.n	8005eb4 <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8005e9a:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8005ea0:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8005ea8:	69ba      	ldr	r2, [r7, #24]
 8005eaa:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8005eac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	e008      	b.n	8005ec6 <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005eba:	f043 0204 	orr.w	r2, r3, #4
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
  }
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3714      	adds	r7, #20
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr

08005ed2 <HAL_FDCAN_EnableTxDelayCompensation>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan)
{
 8005ed2:	b480      	push	{r7}
 8005ed4:	b083      	sub	sp, #12
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d109      	bne.n	8005efa <HAL_FDCAN_EnableTxDelayCompensation+0x28>
  {
    /* Enable transmitter delay compensation */
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	68da      	ldr	r2, [r3, #12]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005ef4:	60da      	str	r2, [r3, #12]

    /* Return function status */
    return HAL_OK;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	e008      	b.n	8005f0c <HAL_FDCAN_EnableTxDelayCompensation+0x3a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f00:	f043 0204 	orr.w	r2, r3, #4
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
  }
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	370c      	adds	r7, #12
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b083      	sub	sp, #12
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d111      	bne.n	8005f50 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2202      	movs	r2, #2
 8005f30:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	699a      	ldr	r2, [r3, #24]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f022 0201 	bic.w	r2, r2, #1
 8005f42:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2200      	movs	r2, #0
 8005f48:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	e008      	b.n	8005f62 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f56:	f043 0204 	orr.w	r2, r3, #4
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8005f60:	2301      	movs	r3, #1
  }
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	370c      	adds	r7, #12
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr
	...

08005f70 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b08b      	sub	sp, #44	; 0x2c
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	60b9      	str	r1, [r7, #8]
 8005f7a:	607a      	str	r2, [r7, #4]
 8005f7c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005f88:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8005f8a:	7efb      	ldrb	r3, [r7, #27]
 8005f8c:	2b02      	cmp	r3, #2
 8005f8e:	f040 813b 	bne.w	8006208 <HAL_FDCAN_GetRxMessage+0x298>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	2b40      	cmp	r3, #64	; 0x40
 8005f96:	d145      	bne.n	8006024 <HAL_FDCAN_GetRxMessage+0xb4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005fa0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d109      	bne.n	8005fbc <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005fae:	f043 0220 	orr.w	r2, r3, #32
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	e12e      	b.n	800621a <HAL_FDCAN_GetRxMessage+0x2aa>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005fc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d109      	bne.n	8005fe0 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005fd2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	e11c      	b.n	800621a <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005fe8:	0e1b      	lsrs	r3, r3, #24
 8005fea:	f003 0301 	and.w	r3, r3, #1
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	d103      	bne.n	8005ffa <HAL_FDCAN_GetRxMessage+0x8a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
            GetIndex = 1U;
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006002:	0a1b      	lsrs	r3, r3, #8
 8006004:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006008:	69fa      	ldr	r2, [r7, #28]
 800600a:	4413      	add	r3, r2
 800600c:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006016:	69f9      	ldr	r1, [r7, #28]
 8006018:	fb01 f303 	mul.w	r3, r1, r3
 800601c:	009b      	lsls	r3, r3, #2
 800601e:	4413      	add	r3, r2
 8006020:	627b      	str	r3, [r7, #36]	; 0x24
 8006022:	e061      	b.n	80060e8 <HAL_FDCAN_GetRxMessage+0x178>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	2b41      	cmp	r3, #65	; 0x41
 8006028:	d145      	bne.n	80060b6 <HAL_FDCAN_GetRxMessage+0x146>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006032:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006036:	2b00      	cmp	r3, #0
 8006038:	d109      	bne.n	800604e <HAL_FDCAN_GetRxMessage+0xde>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006040:	f043 0220 	orr.w	r2, r3, #32
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	e0e5      	b.n	800621a <HAL_FDCAN_GetRxMessage+0x2aa>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006056:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800605a:	2b00      	cmp	r3, #0
 800605c:	d109      	bne.n	8006072 <HAL_FDCAN_GetRxMessage+0x102>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006064:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	e0d3      	b.n	800621a <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800607a:	0e1b      	lsrs	r3, r3, #24
 800607c:	f003 0301 	and.w	r3, r3, #1
 8006080:	2b01      	cmp	r3, #1
 8006082:	d103      	bne.n	800608c <HAL_FDCAN_GetRxMessage+0x11c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
            GetIndex = 1U;
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006094:	0a1b      	lsrs	r3, r3, #8
 8006096:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800609a:	69fa      	ldr	r2, [r7, #28]
 800609c:	4413      	add	r3, r2
 800609e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060a8:	69f9      	ldr	r1, [r7, #28]
 80060aa:	fb01 f303 	mul.w	r3, r1, r3
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	4413      	add	r3, r2
 80060b2:	627b      	str	r3, [r7, #36]	; 0x24
 80060b4:	e018      	b.n	80060e8 <HAL_FDCAN_GetRxMessage+0x178>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060ba:	68ba      	ldr	r2, [r7, #8]
 80060bc:	429a      	cmp	r2, r3
 80060be:	d309      	bcc.n	80060d4 <HAL_FDCAN_GetRxMessage+0x164>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80060c6:	f043 0220 	orr.w	r2, r3, #32
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	e0a2      	b.n	800621a <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060dc:	68b9      	ldr	r1, [r7, #8]
 80060de:	fb01 f303 	mul.w	r3, r1, r3
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	4413      	add	r3, r2
 80060e6:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80060e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d107      	bne.n	800610c <HAL_FDCAN_GetRxMessage+0x19c>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 80060fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	0c9b      	lsrs	r3, r3, #18
 8006102:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	601a      	str	r2, [r3, #0]
 800610a:	e005      	b.n	8006118 <HAL_FDCAN_GetRxMessage+0x1a8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800610c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8006118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8006124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8006130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006132:	3304      	adds	r3, #4
 8006134:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8006136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	b29a      	uxth	r2, r3
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8006140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800614c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8006158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8006164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	0e1b      	lsrs	r3, r3, #24
 800616a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8006172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	0fda      	lsrs	r2, r3, #31
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800617c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617e:	3304      	adds	r3, #4
 8006180:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8006182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006184:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8006186:	2300      	movs	r3, #0
 8006188:	623b      	str	r3, [r7, #32]
 800618a:	e00a      	b.n	80061a2 <HAL_FDCAN_GetRxMessage+0x232>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800618c:	697a      	ldr	r2, [r7, #20]
 800618e:	6a3b      	ldr	r3, [r7, #32]
 8006190:	441a      	add	r2, r3
 8006192:	6839      	ldr	r1, [r7, #0]
 8006194:	6a3b      	ldr	r3, [r7, #32]
 8006196:	440b      	add	r3, r1
 8006198:	7812      	ldrb	r2, [r2, #0]
 800619a:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 800619c:	6a3b      	ldr	r3, [r7, #32]
 800619e:	3301      	adds	r3, #1
 80061a0:	623b      	str	r3, [r7, #32]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	68db      	ldr	r3, [r3, #12]
 80061a6:	0c1b      	lsrs	r3, r3, #16
 80061a8:	4a1f      	ldr	r2, [pc, #124]	; (8006228 <HAL_FDCAN_GetRxMessage+0x2b8>)
 80061aa:	5cd3      	ldrb	r3, [r2, r3]
 80061ac:	461a      	mov	r2, r3
 80061ae:	6a3b      	ldr	r3, [r7, #32]
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d3eb      	bcc.n	800618c <HAL_FDCAN_GetRxMessage+0x21c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	2b40      	cmp	r3, #64	; 0x40
 80061b8:	d105      	bne.n	80061c6 <HAL_FDCAN_GetRxMessage+0x256>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	69fa      	ldr	r2, [r7, #28]
 80061c0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 80061c4:	e01e      	b.n	8006204 <HAL_FDCAN_GetRxMessage+0x294>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	2b41      	cmp	r3, #65	; 0x41
 80061ca:	d105      	bne.n	80061d8 <HAL_FDCAN_GetRxMessage+0x268>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	69fa      	ldr	r2, [r7, #28]
 80061d2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 80061d6:	e015      	b.n	8006204 <HAL_FDCAN_GetRxMessage+0x294>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	2b1f      	cmp	r3, #31
 80061dc:	d808      	bhi.n	80061f0 <HAL_FDCAN_GetRxMessage+0x280>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	2101      	movs	r1, #1
 80061e4:	68ba      	ldr	r2, [r7, #8]
 80061e6:	fa01 f202 	lsl.w	r2, r1, r2
 80061ea:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 80061ee:	e009      	b.n	8006204 <HAL_FDCAN_GetRxMessage+0x294>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	f003 021f 	and.w	r2, r3, #31
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	2101      	movs	r1, #1
 80061fc:	fa01 f202 	lsl.w	r2, r1, r2
 8006200:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8006204:	2300      	movs	r3, #0
 8006206:	e008      	b.n	800621a <HAL_FDCAN_GetRxMessage+0x2aa>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800620e:	f043 0208 	orr.w	r2, r3, #8
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8006218:	2301      	movs	r3, #1
  }
}
 800621a:	4618      	mov	r0, r3
 800621c:	372c      	adds	r7, #44	; 0x2c
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr
 8006226:	bf00      	nop
 8006228:	08019eb4 	.word	0x08019eb4

0800622c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 800622c:	b480      	push	{r7}
 800622e:	b087      	sub	sp, #28
 8006230:	af00      	add	r7, sp, #0
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	60b9      	str	r1, [r7, #8]
 8006236:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800623e:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8006240:	7dfb      	ldrb	r3, [r7, #23]
 8006242:	2b01      	cmp	r3, #1
 8006244:	d002      	beq.n	800624c <HAL_FDCAN_ActivateNotification+0x20>
 8006246:	7dfb      	ldrb	r3, [r7, #23]
 8006248:	2b02      	cmp	r3, #2
 800624a:	d155      	bne.n	80062f8 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	4013      	ands	r3, r2
 8006256:	2b00      	cmp	r3, #0
 8006258:	d108      	bne.n	800626c <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f042 0201 	orr.w	r2, r2, #1
 8006268:	65da      	str	r2, [r3, #92]	; 0x5c
 800626a:	e014      	b.n	8006296 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	4013      	ands	r3, r2
 8006276:	68ba      	ldr	r2, [r7, #8]
 8006278:	429a      	cmp	r2, r3
 800627a:	d108      	bne.n	800628e <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f042 0202 	orr.w	r2, r2, #2
 800628a:	65da      	str	r2, [r3, #92]	; 0x5c
 800628c:	e003      	b.n	8006296 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	2203      	movs	r2, #3
 8006294:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800629c:	2b00      	cmp	r3, #0
 800629e:	d009      	beq.n	80062b4 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occure if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	430a      	orrs	r2, r1
 80062b0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d009      	beq.n	80062d2 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occure if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	430a      	orrs	r2, r1
 80062ce:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80062d8:	68ba      	ldr	r2, [r7, #8]
 80062da:	4b0f      	ldr	r3, [pc, #60]	; (8006318 <HAL_FDCAN_ActivateNotification+0xec>)
 80062dc:	4013      	ands	r3, r2
 80062de:	68fa      	ldr	r2, [r7, #12]
 80062e0:	6812      	ldr	r2, [r2, #0]
 80062e2:	430b      	orrs	r3, r1
 80062e4:	6553      	str	r3, [r2, #84]	; 0x54
 80062e6:	4b0d      	ldr	r3, [pc, #52]	; (800631c <HAL_FDCAN_ActivateNotification+0xf0>)
 80062e8:	695a      	ldr	r2, [r3, #20]
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	0f9b      	lsrs	r3, r3, #30
 80062ee:	490b      	ldr	r1, [pc, #44]	; (800631c <HAL_FDCAN_ActivateNotification+0xf0>)
 80062f0:	4313      	orrs	r3, r2
 80062f2:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 80062f4:	2300      	movs	r3, #0
 80062f6:	e008      	b.n	800630a <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80062fe:	f043 0202 	orr.w	r2, r3, #2
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8006308:	2301      	movs	r3, #1
  }
}
 800630a:	4618      	mov	r0, r3
 800630c:	371c      	adds	r7, #28
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr
 8006316:	bf00      	nop
 8006318:	3fcfffff 	.word	0x3fcfffff
 800631c:	4000a800 	.word	0x4000a800

08006320 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b092      	sub	sp, #72	; 0x48
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8006328:	4b90      	ldr	r3, [pc, #576]	; (800656c <HAL_FDCAN_IRQHandler+0x24c>)
 800632a:	691b      	ldr	r3, [r3, #16]
 800632c:	079b      	lsls	r3, r3, #30
 800632e:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8006330:	4b8e      	ldr	r3, [pc, #568]	; (800656c <HAL_FDCAN_IRQHandler+0x24c>)
 8006332:	695b      	ldr	r3, [r3, #20]
 8006334:	079b      	lsls	r3, r3, #30
 8006336:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006338:	4013      	ands	r3, r2
 800633a:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006342:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006346:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800634e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006350:	4013      	ands	r3, r2
 8006352:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800635a:	f003 030f 	and.w	r3, r3, #15
 800635e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006366:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006368:	4013      	ands	r3, r2
 800636a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006372:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006376:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800637e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006380:	4013      	ands	r3, r2
 8006382:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800638a:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 800638e:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006396:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006398:	4013      	ands	r3, r2
 800639a:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063a2:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 80063a6:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063b0:	4013      	ands	r3, r2
 80063b2:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d011      	beq.n	80063e6 <HAL_FDCAN_IRQHandler+0xc6>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d00a      	beq.n	80063e6 <HAL_FDCAN_IRQHandler+0xc6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80063d8:	651a      	str	r2, [r3, #80]	; 0x50
 80063da:	4b64      	ldr	r3, [pc, #400]	; (800656c <HAL_FDCAN_IRQHandler+0x24c>)
 80063dc:	2200      	movs	r2, #0
 80063de:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f000 fa5a 	bl	800689a <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d01e      	beq.n	8006432 <HAL_FDCAN_IRQHandler+0x112>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d017      	beq.n	8006432 <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800640a:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006414:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006416:	4013      	ands	r3, r2
 8006418:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006422:	651a      	str	r2, [r3, #80]	; 0x50
 8006424:	4b51      	ldr	r3, [pc, #324]	; (800656c <HAL_FDCAN_IRQHandler+0x24c>)
 8006426:	2200      	movs	r2, #0
 8006428:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800642a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f000 fa0b 	bl	8006848 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8006432:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006434:	2b00      	cmp	r3, #0
 8006436:	d00d      	beq.n	8006454 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800643e:	4b4c      	ldr	r3, [pc, #304]	; (8006570 <HAL_FDCAN_IRQHandler+0x250>)
 8006440:	400b      	ands	r3, r1
 8006442:	6513      	str	r3, [r2, #80]	; 0x50
 8006444:	4a49      	ldr	r2, [pc, #292]	; (800656c <HAL_FDCAN_IRQHandler+0x24c>)
 8006446:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006448:	0f9b      	lsrs	r3, r3, #30
 800644a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 800644c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 f9c4 	bl	80067dc <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8006454:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006456:	2b00      	cmp	r3, #0
 8006458:	d00d      	beq.n	8006476 <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006460:	4b43      	ldr	r3, [pc, #268]	; (8006570 <HAL_FDCAN_IRQHandler+0x250>)
 8006462:	400b      	ands	r3, r1
 8006464:	6513      	str	r3, [r2, #80]	; 0x50
 8006466:	4a41      	ldr	r2, [pc, #260]	; (800656c <HAL_FDCAN_IRQHandler+0x24c>)
 8006468:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800646a:	0f9b      	lsrs	r3, r3, #30
 800646c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800646e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 f9be 	bl	80067f2 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8006476:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006478:	2b00      	cmp	r3, #0
 800647a:	d00d      	beq.n	8006498 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006482:	4b3b      	ldr	r3, [pc, #236]	; (8006570 <HAL_FDCAN_IRQHandler+0x250>)
 8006484:	400b      	ands	r3, r1
 8006486:	6513      	str	r3, [r2, #80]	; 0x50
 8006488:	4a38      	ldr	r2, [pc, #224]	; (800656c <HAL_FDCAN_IRQHandler+0x24c>)
 800648a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800648c:	0f9b      	lsrs	r3, r3, #30
 800648e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8006490:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f7fa f93a 	bl	800070c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8006498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800649a:	2b00      	cmp	r3, #0
 800649c:	d00d      	beq.n	80064ba <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80064a4:	4b32      	ldr	r3, [pc, #200]	; (8006570 <HAL_FDCAN_IRQHandler+0x250>)
 80064a6:	400b      	ands	r3, r1
 80064a8:	6513      	str	r3, [r2, #80]	; 0x50
 80064aa:	4a30      	ldr	r2, [pc, #192]	; (800656c <HAL_FDCAN_IRQHandler+0x24c>)
 80064ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ae:	0f9b      	lsrs	r3, r3, #30
 80064b0:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80064b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f000 f9a7 	bl	8006808 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d011      	beq.n	80064ec <HAL_FDCAN_IRQHandler+0x1cc>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d00a      	beq.n	80064ec <HAL_FDCAN_IRQHandler+0x1cc>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064de:	651a      	str	r2, [r3, #80]	; 0x50
 80064e0:	4b22      	ldr	r3, [pc, #136]	; (800656c <HAL_FDCAN_IRQHandler+0x24c>)
 80064e2:	2200      	movs	r2, #0
 80064e4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 f999 	bl	800681e <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d01e      	beq.n	8006538 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006500:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006504:	2b00      	cmp	r3, #0
 8006506:	d017      	beq.n	8006538 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006510:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800651a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800651c:	4013      	ands	r3, r2
 800651e:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006528:	651a      	str	r2, [r3, #80]	; 0x50
 800652a:	4b10      	ldr	r3, [pc, #64]	; (800656c <HAL_FDCAN_IRQHandler+0x24c>)
 800652c:	2200      	movs	r2, #0
 800652e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8006530:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f000 f97d 	bl	8006832 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800653e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006542:	2b00      	cmp	r3, #0
 8006544:	d016      	beq.n	8006574 <HAL_FDCAN_IRQHandler+0x254>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800654c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006550:	2b00      	cmp	r3, #0
 8006552:	d00f      	beq.n	8006574 <HAL_FDCAN_IRQHandler+0x254>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800655c:	651a      	str	r2, [r3, #80]	; 0x50
 800655e:	4b03      	ldr	r3, [pc, #12]	; (800656c <HAL_FDCAN_IRQHandler+0x24c>)
 8006560:	2200      	movs	r2, #0
 8006562:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f000 f97a 	bl	800685e <HAL_FDCAN_RxBufferNewMessageCallback>
 800656a:	e003      	b.n	8006574 <HAL_FDCAN_IRQHandler+0x254>
 800656c:	4000a800 	.word	0x4000a800
 8006570:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800657a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800657e:	2b00      	cmp	r3, #0
 8006580:	d011      	beq.n	80065a6 <HAL_FDCAN_IRQHandler+0x286>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006588:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800658c:	2b00      	cmp	r3, #0
 800658e:	d00a      	beq.n	80065a6 <HAL_FDCAN_IRQHandler+0x286>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006598:	651a      	str	r2, [r3, #80]	; 0x50
 800659a:	4b8d      	ldr	r3, [pc, #564]	; (80067d0 <HAL_FDCAN_IRQHandler+0x4b0>)
 800659c:	2200      	movs	r2, #0
 800659e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f000 f966 	bl	8006872 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d011      	beq.n	80065d8 <HAL_FDCAN_IRQHandler+0x2b8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d00a      	beq.n	80065d8 <HAL_FDCAN_IRQHandler+0x2b8>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80065ca:	651a      	str	r2, [r3, #80]	; 0x50
 80065cc:	4b80      	ldr	r3, [pc, #512]	; (80067d0 <HAL_FDCAN_IRQHandler+0x4b0>)
 80065ce:	2200      	movs	r2, #0
 80065d0:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f000 f957 	bl	8006886 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d016      	beq.n	8006614 <HAL_FDCAN_IRQHandler+0x2f4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d00f      	beq.n	8006614 <HAL_FDCAN_IRQHandler+0x2f4>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80065fc:	651a      	str	r2, [r3, #80]	; 0x50
 80065fe:	4b74      	ldr	r3, [pc, #464]	; (80067d0 <HAL_FDCAN_IRQHandler+0x4b0>)
 8006600:	2200      	movs	r2, #0
 8006602:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800660a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8006614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006616:	2b00      	cmp	r3, #0
 8006618:	d00d      	beq.n	8006636 <HAL_FDCAN_IRQHandler+0x316>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006620:	4b6c      	ldr	r3, [pc, #432]	; (80067d4 <HAL_FDCAN_IRQHandler+0x4b4>)
 8006622:	400b      	ands	r3, r1
 8006624:	6513      	str	r3, [r2, #80]	; 0x50
 8006626:	4a6a      	ldr	r2, [pc, #424]	; (80067d0 <HAL_FDCAN_IRQHandler+0x4b0>)
 8006628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800662a:	0f9b      	lsrs	r3, r3, #30
 800662c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800662e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f000 f946 	bl	80068c2 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8006636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006638:	2b00      	cmp	r3, #0
 800663a:	d011      	beq.n	8006660 <HAL_FDCAN_IRQHandler+0x340>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006642:	4b64      	ldr	r3, [pc, #400]	; (80067d4 <HAL_FDCAN_IRQHandler+0x4b4>)
 8006644:	400b      	ands	r3, r1
 8006646:	6513      	str	r3, [r2, #80]	; 0x50
 8006648:	4a61      	ldr	r2, [pc, #388]	; (80067d0 <HAL_FDCAN_IRQHandler+0x4b0>)
 800664a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800664c:	0f9b      	lsrs	r3, r3, #30
 800664e:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8006656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006658:	431a      	orrs	r2, r3
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a5c      	ldr	r2, [pc, #368]	; (80067d8 <HAL_FDCAN_IRQHandler+0x4b8>)
 8006666:	4293      	cmp	r3, r2
 8006668:	f040 80a6 	bne.w	80067b8 <HAL_FDCAN_IRQHandler+0x498>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	f003 0303 	and.w	r3, r3, #3
 8006676:	2b00      	cmp	r3, #0
 8006678:	f000 809e 	beq.w	80067b8 <HAL_FDCAN_IRQHandler+0x498>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	6a1b      	ldr	r3, [r3, #32]
 8006682:	f003 030f 	and.w	r3, r3, #15
 8006686:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800668e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006690:	4013      	ands	r3, r2
 8006692:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	6a1b      	ldr	r3, [r3, #32]
 800669a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800669e:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a6:	6a3a      	ldr	r2, [r7, #32]
 80066a8:	4013      	ands	r3, r2
 80066aa:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	6a1b      	ldr	r3, [r3, #32]
 80066b2:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80066b6:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066be:	69fa      	ldr	r2, [r7, #28]
 80066c0:	4013      	ands	r3, r2
 80066c2:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	6a1b      	ldr	r3, [r3, #32]
 80066ca:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 80066ce:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d6:	69ba      	ldr	r2, [r7, #24]
 80066d8:	4013      	ands	r3, r2
 80066da:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	6a1b      	ldr	r3, [r3, #32]
 80066e2:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 80066e6:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ee:	697a      	ldr	r2, [r7, #20]
 80066f0:	4013      	ands	r3, r2
 80066f2:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 80066f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d007      	beq.n	800670a <HAL_FDCAN_IRQHandler+0x3ea>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006700:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8006702:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f000 f8e7 	bl	80068d8 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 800670a:	6a3b      	ldr	r3, [r7, #32]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d007      	beq.n	8006720 <HAL_FDCAN_IRQHandler+0x400>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	6a3a      	ldr	r2, [r7, #32]
 8006716:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8006718:	6a39      	ldr	r1, [r7, #32]
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f000 f8e7 	bl	80068ee <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800672a:	2b00      	cmp	r3, #0
 800672c:	d01b      	beq.n	8006766 <HAL_FDCAN_IRQHandler+0x446>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	6a1b      	ldr	r3, [r3, #32]
 8006734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006738:	2b00      	cmp	r3, #0
 800673a:	d014      	beq.n	8006766 <HAL_FDCAN_IRQHandler+0x446>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006742:	0c1b      	lsrs	r3, r3, #16
 8006744:	b29b      	uxth	r3, r3
 8006746:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800674e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006752:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	2240      	movs	r2, #64	; 0x40
 800675a:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 800675c:	68fa      	ldr	r2, [r7, #12]
 800675e:	6939      	ldr	r1, [r7, #16]
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f000 f8cf 	bl	8006904 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8006766:	69fb      	ldr	r3, [r7, #28]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d007      	beq.n	800677c <HAL_FDCAN_IRQHandler+0x45c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	69fa      	ldr	r2, [r7, #28]
 8006772:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8006774:	69f9      	ldr	r1, [r7, #28]
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 f8d0 	bl	800691c <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 800677c:	69bb      	ldr	r3, [r7, #24]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d00b      	beq.n	800679a <HAL_FDCAN_IRQHandler+0x47a>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	69ba      	ldr	r2, [r7, #24]
 8006788:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8006790:	69bb      	ldr	r3, [r7, #24]
 8006792:	431a      	orrs	r2, r3
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d00b      	beq.n	80067b8 <HAL_FDCAN_IRQHandler+0x498>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	697a      	ldr	r2, [r7, #20]
 80067a6:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	431a      	orrs	r2, r3
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d002      	beq.n	80067c8 <HAL_FDCAN_IRQHandler+0x4a8>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f000 f873 	bl	80068ae <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80067c8:	bf00      	nop
 80067ca:	3748      	adds	r7, #72	; 0x48
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}
 80067d0:	4000a800 	.word	0x4000a800
 80067d4:	3fcfffff 	.word	0x3fcfffff
 80067d8:	4000a000 	.word	0x4000a000

080067dc <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 80067dc:	b480      	push	{r7}
 80067de:	b083      	sub	sp, #12
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 80067e6:	bf00      	nop
 80067e8:	370c      	adds	r7, #12
 80067ea:	46bd      	mov	sp, r7
 80067ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f0:	4770      	bx	lr

080067f2 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80067f2:	b480      	push	{r7}
 80067f4:	b083      	sub	sp, #12
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6078      	str	r0, [r7, #4]
 80067fa:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80067fc:	bf00      	nop
 80067fe:	370c      	adds	r7, #12
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr

08006808 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8006808:	b480      	push	{r7}
 800680a:	b083      	sub	sp, #12
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8006812:	bf00      	nop
 8006814:	370c      	adds	r7, #12
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr

0800681e <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800681e:	b480      	push	{r7}
 8006820:	b083      	sub	sp, #12
 8006822:	af00      	add	r7, sp, #0
 8006824:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8006826:	bf00      	nop
 8006828:	370c      	adds	r7, #12
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr

08006832 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8006832:	b480      	push	{r7}
 8006834:	b083      	sub	sp, #12
 8006836:	af00      	add	r7, sp, #0
 8006838:	6078      	str	r0, [r7, #4]
 800683a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800683c:	bf00      	nop
 800683e:	370c      	adds	r7, #12
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr

08006848 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8006852:	bf00      	nop
 8006854:	370c      	adds	r7, #12
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr

0800685e <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800685e:	b480      	push	{r7}
 8006860:	b083      	sub	sp, #12
 8006862:	af00      	add	r7, sp, #0
 8006864:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8006866:	bf00      	nop
 8006868:	370c      	adds	r7, #12
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr

08006872 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006872:	b480      	push	{r7}
 8006874:	b083      	sub	sp, #12
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800687a:	bf00      	nop
 800687c:	370c      	adds	r7, #12
 800687e:	46bd      	mov	sp, r7
 8006880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006884:	4770      	bx	lr

08006886 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006886:	b480      	push	{r7}
 8006888:	b083      	sub	sp, #12
 800688a:	af00      	add	r7, sp, #0
 800688c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800688e:	bf00      	nop
 8006890:	370c      	adds	r7, #12
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr

0800689a <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800689a:	b480      	push	{r7}
 800689c:	b083      	sub	sp, #12
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80068a2:	bf00      	nop
 80068a4:	370c      	adds	r7, #12
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr

080068ae <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80068ae:	b480      	push	{r7}
 80068b0:	b083      	sub	sp, #12
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80068b6:	bf00      	nop
 80068b8:	370c      	adds	r7, #12
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr

080068c2 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80068c2:	b480      	push	{r7}
 80068c4:	b083      	sub	sp, #12
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	6078      	str	r0, [r7, #4]
 80068ca:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80068cc:	bf00      	nop
 80068ce:	370c      	adds	r7, #12
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr

080068d8 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 80068d8:	b480      	push	{r7}
 80068da:	b083      	sub	sp, #12
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 80068e2:	bf00      	nop
 80068e4:	370c      	adds	r7, #12
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr

080068ee <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 80068ee:	b480      	push	{r7}
 80068f0:	b083      	sub	sp, #12
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	6078      	str	r0, [r7, #4]
 80068f6:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 80068f8:	bf00      	nop
 80068fa:	370c      	adds	r7, #12
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr

08006904 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8006904:	b480      	push	{r7}
 8006906:	b085      	sub	sp, #20
 8006908:	af00      	add	r7, sp, #0
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	60b9      	str	r1, [r7, #8]
 800690e:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8006910:	bf00      	nop
 8006912:	3714      	adds	r7, #20
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr

0800691c <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 800691c:	b480      	push	{r7}
 800691e:	b083      	sub	sp, #12
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8006926:	bf00      	nop
 8006928:	370c      	adds	r7, #12
 800692a:	46bd      	mov	sp, r7
 800692c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006930:	4770      	bx	lr
	...

08006934 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8006934:	b480      	push	{r7}
 8006936:	b085      	sub	sp, #20
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006940:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800694a:	4ba7      	ldr	r3, [pc, #668]	; (8006be8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800694c:	4013      	ands	r3, r2
 800694e:	68ba      	ldr	r2, [r7, #8]
 8006950:	0091      	lsls	r1, r2, #2
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	6812      	ldr	r2, [r2, #0]
 8006956:	430b      	orrs	r3, r1
 8006958:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006964:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800696c:	041a      	lsls	r2, r3, #16
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	430a      	orrs	r2, r1
 8006974:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800697c:	68ba      	ldr	r2, [r7, #8]
 800697e:	4413      	add	r3, r2
 8006980:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800698a:	4b97      	ldr	r3, [pc, #604]	; (8006be8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800698c:	4013      	ands	r3, r2
 800698e:	68ba      	ldr	r2, [r7, #8]
 8006990:	0091      	lsls	r1, r2, #2
 8006992:	687a      	ldr	r2, [r7, #4]
 8006994:	6812      	ldr	r2, [r2, #0]
 8006996:	430b      	orrs	r3, r1
 8006998:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069a4:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069ac:	041a      	lsls	r2, r3, #16
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	430a      	orrs	r2, r1
 80069b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069bc:	005b      	lsls	r3, r3, #1
 80069be:	68ba      	ldr	r2, [r7, #8]
 80069c0:	4413      	add	r3, r2
 80069c2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80069cc:	4b86      	ldr	r3, [pc, #536]	; (8006be8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80069ce:	4013      	ands	r3, r2
 80069d0:	68ba      	ldr	r2, [r7, #8]
 80069d2:	0091      	lsls	r1, r2, #2
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	6812      	ldr	r2, [r2, #0]
 80069d8:	430b      	orrs	r3, r1
 80069da:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80069e6:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ee:	041a      	lsls	r2, r3, #16
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	430a      	orrs	r2, r1
 80069f6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006a02:	fb02 f303 	mul.w	r3, r2, r3
 8006a06:	68ba      	ldr	r2, [r7, #8]
 8006a08:	4413      	add	r3, r2
 8006a0a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006a14:	4b74      	ldr	r3, [pc, #464]	; (8006be8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006a16:	4013      	ands	r3, r2
 8006a18:	68ba      	ldr	r2, [r7, #8]
 8006a1a:	0091      	lsls	r1, r2, #2
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	6812      	ldr	r2, [r2, #0]
 8006a20:	430b      	orrs	r3, r1
 8006a22:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006a2e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a36:	041a      	lsls	r2, r3, #16
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	430a      	orrs	r2, r1
 8006a3e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a46:	687a      	ldr	r2, [r7, #4]
 8006a48:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006a4a:	fb02 f303 	mul.w	r3, r2, r3
 8006a4e:	68ba      	ldr	r2, [r7, #8]
 8006a50:	4413      	add	r3, r2
 8006a52:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8006a5c:	4b62      	ldr	r3, [pc, #392]	; (8006be8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006a5e:	4013      	ands	r3, r2
 8006a60:	68ba      	ldr	r2, [r7, #8]
 8006a62:	0091      	lsls	r1, r2, #2
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	6812      	ldr	r2, [r2, #0]
 8006a68:	430b      	orrs	r3, r1
 8006a6a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006a76:	fb02 f303 	mul.w	r3, r2, r3
 8006a7a:	68ba      	ldr	r2, [r7, #8]
 8006a7c:	4413      	add	r3, r2
 8006a7e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8006a88:	4b57      	ldr	r3, [pc, #348]	; (8006be8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006a8a:	4013      	ands	r3, r2
 8006a8c:	68ba      	ldr	r2, [r7, #8]
 8006a8e:	0091      	lsls	r1, r2, #2
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	6812      	ldr	r2, [r2, #0]
 8006a94:	430b      	orrs	r3, r1
 8006a96:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006aa2:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006aaa:	041a      	lsls	r2, r3, #16
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	430a      	orrs	r2, r1
 8006ab2:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006aba:	005b      	lsls	r3, r3, #1
 8006abc:	68ba      	ldr	r2, [r7, #8]
 8006abe:	4413      	add	r3, r2
 8006ac0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8006aca:	4b47      	ldr	r3, [pc, #284]	; (8006be8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006acc:	4013      	ands	r3, r2
 8006ace:	68ba      	ldr	r2, [r7, #8]
 8006ad0:	0091      	lsls	r1, r2, #2
 8006ad2:	687a      	ldr	r2, [r7, #4]
 8006ad4:	6812      	ldr	r2, [r2, #0]
 8006ad6:	430b      	orrs	r3, r1
 8006ad8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006ae4:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006aec:	041a      	lsls	r2, r3, #16
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	430a      	orrs	r2, r1
 8006af4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006b00:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b08:	061a      	lsls	r2, r3, #24
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	430a      	orrs	r2, r1
 8006b10:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b18:	4b34      	ldr	r3, [pc, #208]	; (8006bec <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8006b1a:	4413      	add	r3, r2
 8006b1c:	009a      	lsls	r2, r3, #2
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b2a:	009b      	lsls	r3, r3, #2
 8006b2c:	441a      	add	r2, r3
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b3a:	00db      	lsls	r3, r3, #3
 8006b3c:	441a      	add	r2, r3
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b4a:	6879      	ldr	r1, [r7, #4]
 8006b4c:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8006b4e:	fb01 f303 	mul.w	r3, r1, r3
 8006b52:	009b      	lsls	r3, r3, #2
 8006b54:	441a      	add	r2, r3
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b62:	6879      	ldr	r1, [r7, #4]
 8006b64:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8006b66:	fb01 f303 	mul.w	r3, r1, r3
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	441a      	add	r2, r3
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b7a:	6879      	ldr	r1, [r7, #4]
 8006b7c:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8006b7e:	fb01 f303 	mul.w	r3, r1, r3
 8006b82:	009b      	lsls	r3, r3, #2
 8006b84:	441a      	add	r2, r3
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b96:	00db      	lsls	r3, r3, #3
 8006b98:	441a      	add	r2, r3
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006baa:	6879      	ldr	r1, [r7, #4]
 8006bac:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8006bae:	fb01 f303 	mul.w	r3, r1, r3
 8006bb2:	009b      	lsls	r3, r3, #2
 8006bb4:	441a      	add	r2, r3
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bc6:	6879      	ldr	r1, [r7, #4]
 8006bc8:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8006bca:	fb01 f303 	mul.w	r3, r1, r3
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	441a      	add	r2, r3
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bde:	4a04      	ldr	r2, [pc, #16]	; (8006bf0 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d915      	bls.n	8006c10 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8006be4:	e006      	b.n	8006bf4 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8006be6:	bf00      	nop
 8006be8:	ffff0003 	.word	0xffff0003
 8006bec:	10002b00 	.word	0x10002b00
 8006bf0:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006bfa:	f043 0220 	orr.w	r2, r3, #32
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2203      	movs	r2, #3
 8006c08:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	e010      	b.n	8006c32 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c14:	60fb      	str	r3, [r7, #12]
 8006c16:	e005      	b.n	8006c24 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	3304      	adds	r3, #4
 8006c22:	60fb      	str	r3, [r7, #12]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c2a:	68fa      	ldr	r2, [r7, #12]
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d3f3      	bcc.n	8006c18 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8006c30:	2300      	movs	r3, #0
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3714      	adds	r7, #20
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr
 8006c3e:	bf00      	nop

08006c40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b089      	sub	sp, #36	; 0x24
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006c4e:	4b89      	ldr	r3, [pc, #548]	; (8006e74 <HAL_GPIO_Init+0x234>)
 8006c50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006c52:	e194      	b.n	8006f7e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	2101      	movs	r1, #1
 8006c5a:	69fb      	ldr	r3, [r7, #28]
 8006c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8006c60:	4013      	ands	r3, r2
 8006c62:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	f000 8186 	beq.w	8006f78 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d00b      	beq.n	8006c8c <HAL_GPIO_Init+0x4c>
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	2b02      	cmp	r3, #2
 8006c7a:	d007      	beq.n	8006c8c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006c80:	2b11      	cmp	r3, #17
 8006c82:	d003      	beq.n	8006c8c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	2b12      	cmp	r3, #18
 8006c8a:	d130      	bne.n	8006cee <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	689b      	ldr	r3, [r3, #8]
 8006c90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006c92:	69fb      	ldr	r3, [r7, #28]
 8006c94:	005b      	lsls	r3, r3, #1
 8006c96:	2203      	movs	r2, #3
 8006c98:	fa02 f303 	lsl.w	r3, r2, r3
 8006c9c:	43db      	mvns	r3, r3
 8006c9e:	69ba      	ldr	r2, [r7, #24]
 8006ca0:	4013      	ands	r3, r2
 8006ca2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	68da      	ldr	r2, [r3, #12]
 8006ca8:	69fb      	ldr	r3, [r7, #28]
 8006caa:	005b      	lsls	r3, r3, #1
 8006cac:	fa02 f303 	lsl.w	r3, r2, r3
 8006cb0:	69ba      	ldr	r2, [r7, #24]
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	69ba      	ldr	r2, [r7, #24]
 8006cba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	69fb      	ldr	r3, [r7, #28]
 8006cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8006cca:	43db      	mvns	r3, r3
 8006ccc:	69ba      	ldr	r2, [r7, #24]
 8006cce:	4013      	ands	r3, r2
 8006cd0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	091b      	lsrs	r3, r3, #4
 8006cd8:	f003 0201 	and.w	r2, r3, #1
 8006cdc:	69fb      	ldr	r3, [r7, #28]
 8006cde:	fa02 f303 	lsl.w	r3, r2, r3
 8006ce2:	69ba      	ldr	r2, [r7, #24]
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	69ba      	ldr	r2, [r7, #24]
 8006cec:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	68db      	ldr	r3, [r3, #12]
 8006cf2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006cf4:	69fb      	ldr	r3, [r7, #28]
 8006cf6:	005b      	lsls	r3, r3, #1
 8006cf8:	2203      	movs	r2, #3
 8006cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8006cfe:	43db      	mvns	r3, r3
 8006d00:	69ba      	ldr	r2, [r7, #24]
 8006d02:	4013      	ands	r3, r2
 8006d04:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	689a      	ldr	r2, [r3, #8]
 8006d0a:	69fb      	ldr	r3, [r7, #28]
 8006d0c:	005b      	lsls	r3, r3, #1
 8006d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d12:	69ba      	ldr	r2, [r7, #24]
 8006d14:	4313      	orrs	r3, r2
 8006d16:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	69ba      	ldr	r2, [r7, #24]
 8006d1c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	2b02      	cmp	r3, #2
 8006d24:	d003      	beq.n	8006d2e <HAL_GPIO_Init+0xee>
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	2b12      	cmp	r3, #18
 8006d2c:	d123      	bne.n	8006d76 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006d2e:	69fb      	ldr	r3, [r7, #28]
 8006d30:	08da      	lsrs	r2, r3, #3
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	3208      	adds	r2, #8
 8006d36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006d3c:	69fb      	ldr	r3, [r7, #28]
 8006d3e:	f003 0307 	and.w	r3, r3, #7
 8006d42:	009b      	lsls	r3, r3, #2
 8006d44:	220f      	movs	r2, #15
 8006d46:	fa02 f303 	lsl.w	r3, r2, r3
 8006d4a:	43db      	mvns	r3, r3
 8006d4c:	69ba      	ldr	r2, [r7, #24]
 8006d4e:	4013      	ands	r3, r2
 8006d50:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	691a      	ldr	r2, [r3, #16]
 8006d56:	69fb      	ldr	r3, [r7, #28]
 8006d58:	f003 0307 	and.w	r3, r3, #7
 8006d5c:	009b      	lsls	r3, r3, #2
 8006d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d62:	69ba      	ldr	r2, [r7, #24]
 8006d64:	4313      	orrs	r3, r2
 8006d66:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006d68:	69fb      	ldr	r3, [r7, #28]
 8006d6a:	08da      	lsrs	r2, r3, #3
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	3208      	adds	r2, #8
 8006d70:	69b9      	ldr	r1, [r7, #24]
 8006d72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006d7c:	69fb      	ldr	r3, [r7, #28]
 8006d7e:	005b      	lsls	r3, r3, #1
 8006d80:	2203      	movs	r2, #3
 8006d82:	fa02 f303 	lsl.w	r3, r2, r3
 8006d86:	43db      	mvns	r3, r3
 8006d88:	69ba      	ldr	r2, [r7, #24]
 8006d8a:	4013      	ands	r3, r2
 8006d8c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	f003 0203 	and.w	r2, r3, #3
 8006d96:	69fb      	ldr	r3, [r7, #28]
 8006d98:	005b      	lsls	r3, r3, #1
 8006d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d9e:	69ba      	ldr	r2, [r7, #24]
 8006da0:	4313      	orrs	r3, r2
 8006da2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	69ba      	ldr	r2, [r7, #24]
 8006da8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	f000 80e0 	beq.w	8006f78 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006db8:	4b2f      	ldr	r3, [pc, #188]	; (8006e78 <HAL_GPIO_Init+0x238>)
 8006dba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006dbe:	4a2e      	ldr	r2, [pc, #184]	; (8006e78 <HAL_GPIO_Init+0x238>)
 8006dc0:	f043 0302 	orr.w	r3, r3, #2
 8006dc4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006dc8:	4b2b      	ldr	r3, [pc, #172]	; (8006e78 <HAL_GPIO_Init+0x238>)
 8006dca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006dce:	f003 0302 	and.w	r3, r3, #2
 8006dd2:	60fb      	str	r3, [r7, #12]
 8006dd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006dd6:	4a29      	ldr	r2, [pc, #164]	; (8006e7c <HAL_GPIO_Init+0x23c>)
 8006dd8:	69fb      	ldr	r3, [r7, #28]
 8006dda:	089b      	lsrs	r3, r3, #2
 8006ddc:	3302      	adds	r3, #2
 8006dde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006de4:	69fb      	ldr	r3, [r7, #28]
 8006de6:	f003 0303 	and.w	r3, r3, #3
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	220f      	movs	r2, #15
 8006dee:	fa02 f303 	lsl.w	r3, r2, r3
 8006df2:	43db      	mvns	r3, r3
 8006df4:	69ba      	ldr	r2, [r7, #24]
 8006df6:	4013      	ands	r3, r2
 8006df8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	4a20      	ldr	r2, [pc, #128]	; (8006e80 <HAL_GPIO_Init+0x240>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d052      	beq.n	8006ea8 <HAL_GPIO_Init+0x268>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	4a1f      	ldr	r2, [pc, #124]	; (8006e84 <HAL_GPIO_Init+0x244>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d031      	beq.n	8006e6e <HAL_GPIO_Init+0x22e>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	4a1e      	ldr	r2, [pc, #120]	; (8006e88 <HAL_GPIO_Init+0x248>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d02b      	beq.n	8006e6a <HAL_GPIO_Init+0x22a>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	4a1d      	ldr	r2, [pc, #116]	; (8006e8c <HAL_GPIO_Init+0x24c>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d025      	beq.n	8006e66 <HAL_GPIO_Init+0x226>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	4a1c      	ldr	r2, [pc, #112]	; (8006e90 <HAL_GPIO_Init+0x250>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d01f      	beq.n	8006e62 <HAL_GPIO_Init+0x222>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	4a1b      	ldr	r2, [pc, #108]	; (8006e94 <HAL_GPIO_Init+0x254>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d019      	beq.n	8006e5e <HAL_GPIO_Init+0x21e>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	4a1a      	ldr	r2, [pc, #104]	; (8006e98 <HAL_GPIO_Init+0x258>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d013      	beq.n	8006e5a <HAL_GPIO_Init+0x21a>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	4a19      	ldr	r2, [pc, #100]	; (8006e9c <HAL_GPIO_Init+0x25c>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d00d      	beq.n	8006e56 <HAL_GPIO_Init+0x216>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	4a18      	ldr	r2, [pc, #96]	; (8006ea0 <HAL_GPIO_Init+0x260>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d007      	beq.n	8006e52 <HAL_GPIO_Init+0x212>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	4a17      	ldr	r2, [pc, #92]	; (8006ea4 <HAL_GPIO_Init+0x264>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d101      	bne.n	8006e4e <HAL_GPIO_Init+0x20e>
 8006e4a:	2309      	movs	r3, #9
 8006e4c:	e02d      	b.n	8006eaa <HAL_GPIO_Init+0x26a>
 8006e4e:	230a      	movs	r3, #10
 8006e50:	e02b      	b.n	8006eaa <HAL_GPIO_Init+0x26a>
 8006e52:	2308      	movs	r3, #8
 8006e54:	e029      	b.n	8006eaa <HAL_GPIO_Init+0x26a>
 8006e56:	2307      	movs	r3, #7
 8006e58:	e027      	b.n	8006eaa <HAL_GPIO_Init+0x26a>
 8006e5a:	2306      	movs	r3, #6
 8006e5c:	e025      	b.n	8006eaa <HAL_GPIO_Init+0x26a>
 8006e5e:	2305      	movs	r3, #5
 8006e60:	e023      	b.n	8006eaa <HAL_GPIO_Init+0x26a>
 8006e62:	2304      	movs	r3, #4
 8006e64:	e021      	b.n	8006eaa <HAL_GPIO_Init+0x26a>
 8006e66:	2303      	movs	r3, #3
 8006e68:	e01f      	b.n	8006eaa <HAL_GPIO_Init+0x26a>
 8006e6a:	2302      	movs	r3, #2
 8006e6c:	e01d      	b.n	8006eaa <HAL_GPIO_Init+0x26a>
 8006e6e:	2301      	movs	r3, #1
 8006e70:	e01b      	b.n	8006eaa <HAL_GPIO_Init+0x26a>
 8006e72:	bf00      	nop
 8006e74:	58000080 	.word	0x58000080
 8006e78:	58024400 	.word	0x58024400
 8006e7c:	58000400 	.word	0x58000400
 8006e80:	58020000 	.word	0x58020000
 8006e84:	58020400 	.word	0x58020400
 8006e88:	58020800 	.word	0x58020800
 8006e8c:	58020c00 	.word	0x58020c00
 8006e90:	58021000 	.word	0x58021000
 8006e94:	58021400 	.word	0x58021400
 8006e98:	58021800 	.word	0x58021800
 8006e9c:	58021c00 	.word	0x58021c00
 8006ea0:	58022000 	.word	0x58022000
 8006ea4:	58022400 	.word	0x58022400
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	69fa      	ldr	r2, [r7, #28]
 8006eac:	f002 0203 	and.w	r2, r2, #3
 8006eb0:	0092      	lsls	r2, r2, #2
 8006eb2:	4093      	lsls	r3, r2
 8006eb4:	69ba      	ldr	r2, [r7, #24]
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006eba:	4938      	ldr	r1, [pc, #224]	; (8006f9c <HAL_GPIO_Init+0x35c>)
 8006ebc:	69fb      	ldr	r3, [r7, #28]
 8006ebe:	089b      	lsrs	r3, r3, #2
 8006ec0:	3302      	adds	r3, #2
 8006ec2:	69ba      	ldr	r2, [r7, #24]
 8006ec4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	43db      	mvns	r3, r3
 8006ed2:	69ba      	ldr	r2, [r7, #24]
 8006ed4:	4013      	ands	r3, r2
 8006ed6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d003      	beq.n	8006eec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006ee4:	69ba      	ldr	r2, [r7, #24]
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	69ba      	ldr	r2, [r7, #24]
 8006ef0:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	43db      	mvns	r3, r3
 8006efc:	69ba      	ldr	r2, [r7, #24]
 8006efe:	4013      	ands	r3, r2
 8006f00:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d003      	beq.n	8006f16 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006f0e:	69ba      	ldr	r2, [r7, #24]
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	4313      	orrs	r3, r2
 8006f14:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	69ba      	ldr	r2, [r7, #24]
 8006f1a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006f1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	43db      	mvns	r3, r3
 8006f28:	69ba      	ldr	r2, [r7, #24]
 8006f2a:	4013      	ands	r3, r2
 8006f2c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d003      	beq.n	8006f42 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8006f3a:	69ba      	ldr	r2, [r7, #24]
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006f42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006f46:	69bb      	ldr	r3, [r7, #24]
 8006f48:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006f4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	43db      	mvns	r3, r3
 8006f56:	69ba      	ldr	r2, [r7, #24]
 8006f58:	4013      	ands	r3, r2
 8006f5a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d003      	beq.n	8006f70 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8006f68:	69ba      	ldr	r2, [r7, #24]
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006f70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006f74:	69bb      	ldr	r3, [r7, #24]
 8006f76:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8006f78:	69fb      	ldr	r3, [r7, #28]
 8006f7a:	3301      	adds	r3, #1
 8006f7c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	681a      	ldr	r2, [r3, #0]
 8006f82:	69fb      	ldr	r3, [r7, #28]
 8006f84:	fa22 f303 	lsr.w	r3, r2, r3
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	f47f ae63 	bne.w	8006c54 <HAL_GPIO_Init+0x14>
  }
}
 8006f8e:	bf00      	nop
 8006f90:	3724      	adds	r7, #36	; 0x24
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr
 8006f9a:	bf00      	nop
 8006f9c:	58000400 	.word	0x58000400

08006fa0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b085      	sub	sp, #20
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
 8006fa8:	460b      	mov	r3, r1
 8006faa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	691a      	ldr	r2, [r3, #16]
 8006fb0:	887b      	ldrh	r3, [r7, #2]
 8006fb2:	4013      	ands	r3, r2
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d002      	beq.n	8006fbe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	73fb      	strb	r3, [r7, #15]
 8006fbc:	e001      	b.n	8006fc2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3714      	adds	r7, #20
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fce:	4770      	bx	lr

08006fd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b083      	sub	sp, #12
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	460b      	mov	r3, r1
 8006fda:	807b      	strh	r3, [r7, #2]
 8006fdc:	4613      	mov	r3, r2
 8006fde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006fe0:	787b      	ldrb	r3, [r7, #1]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d003      	beq.n	8006fee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006fe6:	887a      	ldrh	r2, [r7, #2]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006fec:	e003      	b.n	8006ff6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006fee:	887b      	ldrh	r3, [r7, #2]
 8006ff0:	041a      	lsls	r2, r3, #16
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	619a      	str	r2, [r3, #24]
}
 8006ff6:	bf00      	nop
 8006ff8:	370c      	adds	r7, #12
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr

08007002 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007002:	b480      	push	{r7}
 8007004:	b083      	sub	sp, #12
 8007006:	af00      	add	r7, sp, #0
 8007008:	6078      	str	r0, [r7, #4]
 800700a:	460b      	mov	r3, r1
 800700c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	695a      	ldr	r2, [r3, #20]
 8007012:	887b      	ldrh	r3, [r7, #2]
 8007014:	401a      	ands	r2, r3
 8007016:	887b      	ldrh	r3, [r7, #2]
 8007018:	429a      	cmp	r2, r3
 800701a:	d104      	bne.n	8007026 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800701c:	887b      	ldrh	r3, [r7, #2]
 800701e:	041a      	lsls	r2, r3, #16
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8007024:	e002      	b.n	800702c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8007026:	887a      	ldrh	r2, [r7, #2]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	619a      	str	r2, [r3, #24]
}
 800702c:	bf00      	nop
 800702e:	370c      	adds	r7, #12
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr

08007038 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b082      	sub	sp, #8
 800703c:	af00      	add	r7, sp, #0
 800703e:	4603      	mov	r3, r0
 8007040:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8007042:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007046:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800704a:	88fb      	ldrh	r3, [r7, #6]
 800704c:	4013      	ands	r3, r2
 800704e:	2b00      	cmp	r3, #0
 8007050:	d008      	beq.n	8007064 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007052:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007056:	88fb      	ldrh	r3, [r7, #6]
 8007058:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800705c:	88fb      	ldrh	r3, [r7, #6]
 800705e:	4618      	mov	r0, r3
 8007060:	f7fb fd8c 	bl	8002b7c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8007064:	bf00      	nop
 8007066:	3708      	adds	r7, #8
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}

0800706c <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800706c:	b480      	push	{r7}
 800706e:	b085      	sub	sp, #20
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007074:	4b0d      	ldr	r3, [pc, #52]	; (80070ac <HAL_I2CEx_EnableFastModePlus+0x40>)
 8007076:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800707a:	4a0c      	ldr	r2, [pc, #48]	; (80070ac <HAL_I2CEx_EnableFastModePlus+0x40>)
 800707c:	f043 0302 	orr.w	r3, r3, #2
 8007080:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007084:	4b09      	ldr	r3, [pc, #36]	; (80070ac <HAL_I2CEx_EnableFastModePlus+0x40>)
 8007086:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800708a:	f003 0302 	and.w	r3, r3, #2
 800708e:	60fb      	str	r3, [r7, #12]
 8007090:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 8007092:	4b07      	ldr	r3, [pc, #28]	; (80070b0 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8007094:	685a      	ldr	r2, [r3, #4]
 8007096:	4906      	ldr	r1, [pc, #24]	; (80070b0 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	4313      	orrs	r3, r2
 800709c:	604b      	str	r3, [r1, #4]
}
 800709e:	bf00      	nop
 80070a0:	3714      	adds	r7, #20
 80070a2:	46bd      	mov	sp, r7
 80070a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a8:	4770      	bx	lr
 80070aa:	bf00      	nop
 80070ac:	58024400 	.word	0x58024400
 80070b0:	58000400 	.word	0x58000400

080070b4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80070b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070b6:	b08f      	sub	sp, #60	; 0x3c
 80070b8:	af0a      	add	r7, sp, #40	; 0x28
 80070ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d101      	bne.n	80070c6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80070c2:	2301      	movs	r3, #1
 80070c4:	e116      	b.n	80072f4 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80070d2:	b2db      	uxtb	r3, r3
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d106      	bne.n	80070e6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2200      	movs	r2, #0
 80070dc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f010 fe4d 	bl	8017d80 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2203      	movs	r2, #3
 80070ea:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d102      	bne.n	8007100 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2200      	movs	r2, #0
 80070fe:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4618      	mov	r0, r3
 8007106:	f009 fe52 	bl	8010dae <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	603b      	str	r3, [r7, #0]
 8007110:	687e      	ldr	r6, [r7, #4]
 8007112:	466d      	mov	r5, sp
 8007114:	f106 0410 	add.w	r4, r6, #16
 8007118:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800711a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800711c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800711e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007120:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007124:	e885 0003 	stmia.w	r5, {r0, r1}
 8007128:	1d33      	adds	r3, r6, #4
 800712a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800712c:	6838      	ldr	r0, [r7, #0]
 800712e:	f009 fd29 	bl	8010b84 <USB_CoreInit>
 8007132:	4603      	mov	r3, r0
 8007134:	2b00      	cmp	r3, #0
 8007136:	d005      	beq.n	8007144 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2202      	movs	r2, #2
 800713c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8007140:	2301      	movs	r3, #1
 8007142:	e0d7      	b.n	80072f4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	2100      	movs	r1, #0
 800714a:	4618      	mov	r0, r3
 800714c:	f009 fe40 	bl	8010dd0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007150:	2300      	movs	r3, #0
 8007152:	73fb      	strb	r3, [r7, #15]
 8007154:	e04a      	b.n	80071ec <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007156:	7bfa      	ldrb	r2, [r7, #15]
 8007158:	6879      	ldr	r1, [r7, #4]
 800715a:	4613      	mov	r3, r2
 800715c:	00db      	lsls	r3, r3, #3
 800715e:	1a9b      	subs	r3, r3, r2
 8007160:	009b      	lsls	r3, r3, #2
 8007162:	440b      	add	r3, r1
 8007164:	333d      	adds	r3, #61	; 0x3d
 8007166:	2201      	movs	r2, #1
 8007168:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800716a:	7bfa      	ldrb	r2, [r7, #15]
 800716c:	6879      	ldr	r1, [r7, #4]
 800716e:	4613      	mov	r3, r2
 8007170:	00db      	lsls	r3, r3, #3
 8007172:	1a9b      	subs	r3, r3, r2
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	440b      	add	r3, r1
 8007178:	333c      	adds	r3, #60	; 0x3c
 800717a:	7bfa      	ldrb	r2, [r7, #15]
 800717c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800717e:	7bfa      	ldrb	r2, [r7, #15]
 8007180:	7bfb      	ldrb	r3, [r7, #15]
 8007182:	b298      	uxth	r0, r3
 8007184:	6879      	ldr	r1, [r7, #4]
 8007186:	4613      	mov	r3, r2
 8007188:	00db      	lsls	r3, r3, #3
 800718a:	1a9b      	subs	r3, r3, r2
 800718c:	009b      	lsls	r3, r3, #2
 800718e:	440b      	add	r3, r1
 8007190:	3342      	adds	r3, #66	; 0x42
 8007192:	4602      	mov	r2, r0
 8007194:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007196:	7bfa      	ldrb	r2, [r7, #15]
 8007198:	6879      	ldr	r1, [r7, #4]
 800719a:	4613      	mov	r3, r2
 800719c:	00db      	lsls	r3, r3, #3
 800719e:	1a9b      	subs	r3, r3, r2
 80071a0:	009b      	lsls	r3, r3, #2
 80071a2:	440b      	add	r3, r1
 80071a4:	333f      	adds	r3, #63	; 0x3f
 80071a6:	2200      	movs	r2, #0
 80071a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80071aa:	7bfa      	ldrb	r2, [r7, #15]
 80071ac:	6879      	ldr	r1, [r7, #4]
 80071ae:	4613      	mov	r3, r2
 80071b0:	00db      	lsls	r3, r3, #3
 80071b2:	1a9b      	subs	r3, r3, r2
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	440b      	add	r3, r1
 80071b8:	3344      	adds	r3, #68	; 0x44
 80071ba:	2200      	movs	r2, #0
 80071bc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80071be:	7bfa      	ldrb	r2, [r7, #15]
 80071c0:	6879      	ldr	r1, [r7, #4]
 80071c2:	4613      	mov	r3, r2
 80071c4:	00db      	lsls	r3, r3, #3
 80071c6:	1a9b      	subs	r3, r3, r2
 80071c8:	009b      	lsls	r3, r3, #2
 80071ca:	440b      	add	r3, r1
 80071cc:	3348      	adds	r3, #72	; 0x48
 80071ce:	2200      	movs	r2, #0
 80071d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80071d2:	7bfa      	ldrb	r2, [r7, #15]
 80071d4:	6879      	ldr	r1, [r7, #4]
 80071d6:	4613      	mov	r3, r2
 80071d8:	00db      	lsls	r3, r3, #3
 80071da:	1a9b      	subs	r3, r3, r2
 80071dc:	009b      	lsls	r3, r3, #2
 80071de:	440b      	add	r3, r1
 80071e0:	3350      	adds	r3, #80	; 0x50
 80071e2:	2200      	movs	r2, #0
 80071e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80071e6:	7bfb      	ldrb	r3, [r7, #15]
 80071e8:	3301      	adds	r3, #1
 80071ea:	73fb      	strb	r3, [r7, #15]
 80071ec:	7bfa      	ldrb	r2, [r7, #15]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d3af      	bcc.n	8007156 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80071f6:	2300      	movs	r3, #0
 80071f8:	73fb      	strb	r3, [r7, #15]
 80071fa:	e044      	b.n	8007286 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80071fc:	7bfa      	ldrb	r2, [r7, #15]
 80071fe:	6879      	ldr	r1, [r7, #4]
 8007200:	4613      	mov	r3, r2
 8007202:	00db      	lsls	r3, r3, #3
 8007204:	1a9b      	subs	r3, r3, r2
 8007206:	009b      	lsls	r3, r3, #2
 8007208:	440b      	add	r3, r1
 800720a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800720e:	2200      	movs	r2, #0
 8007210:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007212:	7bfa      	ldrb	r2, [r7, #15]
 8007214:	6879      	ldr	r1, [r7, #4]
 8007216:	4613      	mov	r3, r2
 8007218:	00db      	lsls	r3, r3, #3
 800721a:	1a9b      	subs	r3, r3, r2
 800721c:	009b      	lsls	r3, r3, #2
 800721e:	440b      	add	r3, r1
 8007220:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8007224:	7bfa      	ldrb	r2, [r7, #15]
 8007226:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007228:	7bfa      	ldrb	r2, [r7, #15]
 800722a:	6879      	ldr	r1, [r7, #4]
 800722c:	4613      	mov	r3, r2
 800722e:	00db      	lsls	r3, r3, #3
 8007230:	1a9b      	subs	r3, r3, r2
 8007232:	009b      	lsls	r3, r3, #2
 8007234:	440b      	add	r3, r1
 8007236:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800723a:	2200      	movs	r2, #0
 800723c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800723e:	7bfa      	ldrb	r2, [r7, #15]
 8007240:	6879      	ldr	r1, [r7, #4]
 8007242:	4613      	mov	r3, r2
 8007244:	00db      	lsls	r3, r3, #3
 8007246:	1a9b      	subs	r3, r3, r2
 8007248:	009b      	lsls	r3, r3, #2
 800724a:	440b      	add	r3, r1
 800724c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007250:	2200      	movs	r2, #0
 8007252:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007254:	7bfa      	ldrb	r2, [r7, #15]
 8007256:	6879      	ldr	r1, [r7, #4]
 8007258:	4613      	mov	r3, r2
 800725a:	00db      	lsls	r3, r3, #3
 800725c:	1a9b      	subs	r3, r3, r2
 800725e:	009b      	lsls	r3, r3, #2
 8007260:	440b      	add	r3, r1
 8007262:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007266:	2200      	movs	r2, #0
 8007268:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800726a:	7bfa      	ldrb	r2, [r7, #15]
 800726c:	6879      	ldr	r1, [r7, #4]
 800726e:	4613      	mov	r3, r2
 8007270:	00db      	lsls	r3, r3, #3
 8007272:	1a9b      	subs	r3, r3, r2
 8007274:	009b      	lsls	r3, r3, #2
 8007276:	440b      	add	r3, r1
 8007278:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800727c:	2200      	movs	r2, #0
 800727e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007280:	7bfb      	ldrb	r3, [r7, #15]
 8007282:	3301      	adds	r3, #1
 8007284:	73fb      	strb	r3, [r7, #15]
 8007286:	7bfa      	ldrb	r2, [r7, #15]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	429a      	cmp	r2, r3
 800728e:	d3b5      	bcc.n	80071fc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	603b      	str	r3, [r7, #0]
 8007296:	687e      	ldr	r6, [r7, #4]
 8007298:	466d      	mov	r5, sp
 800729a:	f106 0410 	add.w	r4, r6, #16
 800729e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80072a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80072a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80072a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80072a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80072aa:	e885 0003 	stmia.w	r5, {r0, r1}
 80072ae:	1d33      	adds	r3, r6, #4
 80072b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80072b2:	6838      	ldr	r0, [r7, #0]
 80072b4:	f009 fdb6 	bl	8010e24 <USB_DevInit>
 80072b8:	4603      	mov	r3, r0
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d005      	beq.n	80072ca <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2202      	movs	r2, #2
 80072c2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80072c6:	2301      	movs	r3, #1
 80072c8:	e014      	b.n	80072f4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2200      	movs	r2, #0
 80072ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2201      	movs	r2, #1
 80072d6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072de:	2b01      	cmp	r3, #1
 80072e0:	d102      	bne.n	80072e8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f001 f8be 	bl	8008464 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4618      	mov	r0, r3
 80072ee:	f00a fdf5 	bl	8011edc <USB_DevDisconnect>

  return HAL_OK;
 80072f2:	2300      	movs	r3, #0
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3714      	adds	r7, #20
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080072fc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b084      	sub	sp, #16
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007310:	2b01      	cmp	r3, #1
 8007312:	d101      	bne.n	8007318 <HAL_PCD_Start+0x1c>
 8007314:	2302      	movs	r3, #2
 8007316:	e020      	b.n	800735a <HAL_PCD_Start+0x5e>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2201      	movs	r2, #1
 800731c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007324:	2b01      	cmp	r3, #1
 8007326:	d109      	bne.n	800733c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800732c:	2b01      	cmp	r3, #1
 800732e:	d005      	beq.n	800733c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007334:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4618      	mov	r0, r3
 8007342:	f00a fdb3 	bl	8011eac <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4618      	mov	r0, r3
 800734c:	f009 fd1e 	bl	8010d8c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2200      	movs	r2, #0
 8007354:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8007358:	2300      	movs	r3, #0
}
 800735a:	4618      	mov	r0, r3
 800735c:	3710      	adds	r7, #16
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}

08007362 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007362:	b590      	push	{r4, r7, lr}
 8007364:	b08d      	sub	sp, #52	; 0x34
 8007366:	af00      	add	r7, sp, #0
 8007368:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007370:	6a3b      	ldr	r3, [r7, #32]
 8007372:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4618      	mov	r0, r3
 800737a:	f00a fe5a 	bl	8012032 <USB_GetMode>
 800737e:	4603      	mov	r3, r0
 8007380:	2b00      	cmp	r3, #0
 8007382:	f040 83ca 	bne.w	8007b1a <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4618      	mov	r0, r3
 800738c:	f00a fdbe 	bl	8011f0c <USB_ReadInterrupts>
 8007390:	4603      	mov	r3, r0
 8007392:	2b00      	cmp	r3, #0
 8007394:	f000 83c0 	beq.w	8007b18 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4618      	mov	r0, r3
 800739e:	f00a fdb5 	bl	8011f0c <USB_ReadInterrupts>
 80073a2:	4603      	mov	r3, r0
 80073a4:	f003 0302 	and.w	r3, r3, #2
 80073a8:	2b02      	cmp	r3, #2
 80073aa:	d107      	bne.n	80073bc <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	695a      	ldr	r2, [r3, #20]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f002 0202 	and.w	r2, r2, #2
 80073ba:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4618      	mov	r0, r3
 80073c2:	f00a fda3 	bl	8011f0c <USB_ReadInterrupts>
 80073c6:	4603      	mov	r3, r0
 80073c8:	f003 0310 	and.w	r3, r3, #16
 80073cc:	2b10      	cmp	r3, #16
 80073ce:	d161      	bne.n	8007494 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	699a      	ldr	r2, [r3, #24]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f022 0210 	bic.w	r2, r2, #16
 80073de:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80073e0:	6a3b      	ldr	r3, [r7, #32]
 80073e2:	6a1b      	ldr	r3, [r3, #32]
 80073e4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80073e6:	69bb      	ldr	r3, [r7, #24]
 80073e8:	f003 020f 	and.w	r2, r3, #15
 80073ec:	4613      	mov	r3, r2
 80073ee:	00db      	lsls	r3, r3, #3
 80073f0:	1a9b      	subs	r3, r3, r2
 80073f2:	009b      	lsls	r3, r3, #2
 80073f4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80073f8:	687a      	ldr	r2, [r7, #4]
 80073fa:	4413      	add	r3, r2
 80073fc:	3304      	adds	r3, #4
 80073fe:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007400:	69bb      	ldr	r3, [r7, #24]
 8007402:	0c5b      	lsrs	r3, r3, #17
 8007404:	f003 030f 	and.w	r3, r3, #15
 8007408:	2b02      	cmp	r3, #2
 800740a:	d124      	bne.n	8007456 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800740c:	69ba      	ldr	r2, [r7, #24]
 800740e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8007412:	4013      	ands	r3, r2
 8007414:	2b00      	cmp	r3, #0
 8007416:	d035      	beq.n	8007484 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800741c:	69bb      	ldr	r3, [r7, #24]
 800741e:	091b      	lsrs	r3, r3, #4
 8007420:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007422:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007426:	b29b      	uxth	r3, r3
 8007428:	461a      	mov	r2, r3
 800742a:	6a38      	ldr	r0, [r7, #32]
 800742c:	f00a fc1b 	bl	8011c66 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	68da      	ldr	r2, [r3, #12]
 8007434:	69bb      	ldr	r3, [r7, #24]
 8007436:	091b      	lsrs	r3, r3, #4
 8007438:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800743c:	441a      	add	r2, r3
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	699a      	ldr	r2, [r3, #24]
 8007446:	69bb      	ldr	r3, [r7, #24]
 8007448:	091b      	lsrs	r3, r3, #4
 800744a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800744e:	441a      	add	r2, r3
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	619a      	str	r2, [r3, #24]
 8007454:	e016      	b.n	8007484 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8007456:	69bb      	ldr	r3, [r7, #24]
 8007458:	0c5b      	lsrs	r3, r3, #17
 800745a:	f003 030f 	and.w	r3, r3, #15
 800745e:	2b06      	cmp	r3, #6
 8007460:	d110      	bne.n	8007484 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007468:	2208      	movs	r2, #8
 800746a:	4619      	mov	r1, r3
 800746c:	6a38      	ldr	r0, [r7, #32]
 800746e:	f00a fbfa 	bl	8011c66 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	699a      	ldr	r2, [r3, #24]
 8007476:	69bb      	ldr	r3, [r7, #24]
 8007478:	091b      	lsrs	r3, r3, #4
 800747a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800747e:	441a      	add	r2, r3
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	699a      	ldr	r2, [r3, #24]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f042 0210 	orr.w	r2, r2, #16
 8007492:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4618      	mov	r0, r3
 800749a:	f00a fd37 	bl	8011f0c <USB_ReadInterrupts>
 800749e:	4603      	mov	r3, r0
 80074a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80074a4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80074a8:	d16e      	bne.n	8007588 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80074aa:	2300      	movs	r3, #0
 80074ac:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4618      	mov	r0, r3
 80074b4:	f00a fd3d 	bl	8011f32 <USB_ReadDevAllOutEpInterrupt>
 80074b8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80074ba:	e062      	b.n	8007582 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80074bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074be:	f003 0301 	and.w	r3, r3, #1
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d057      	beq.n	8007576 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074cc:	b2d2      	uxtb	r2, r2
 80074ce:	4611      	mov	r1, r2
 80074d0:	4618      	mov	r0, r3
 80074d2:	f00a fd62 	bl	8011f9a <USB_ReadDevOutEPInterrupt>
 80074d6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	f003 0301 	and.w	r3, r3, #1
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d00c      	beq.n	80074fc <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80074e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e4:	015a      	lsls	r2, r3, #5
 80074e6:	69fb      	ldr	r3, [r7, #28]
 80074e8:	4413      	add	r3, r2
 80074ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074ee:	461a      	mov	r2, r3
 80074f0:	2301      	movs	r3, #1
 80074f2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80074f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f000 fe0a 	bl	8008110 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	f003 0308 	and.w	r3, r3, #8
 8007502:	2b00      	cmp	r3, #0
 8007504:	d00c      	beq.n	8007520 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007508:	015a      	lsls	r2, r3, #5
 800750a:	69fb      	ldr	r3, [r7, #28]
 800750c:	4413      	add	r3, r2
 800750e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007512:	461a      	mov	r2, r3
 8007514:	2308      	movs	r3, #8
 8007516:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007518:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f000 ff04 	bl	8008328 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	f003 0310 	and.w	r3, r3, #16
 8007526:	2b00      	cmp	r3, #0
 8007528:	d008      	beq.n	800753c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800752a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752c:	015a      	lsls	r2, r3, #5
 800752e:	69fb      	ldr	r3, [r7, #28]
 8007530:	4413      	add	r3, r2
 8007532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007536:	461a      	mov	r2, r3
 8007538:	2310      	movs	r3, #16
 800753a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	f003 0320 	and.w	r3, r3, #32
 8007542:	2b00      	cmp	r3, #0
 8007544:	d008      	beq.n	8007558 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007548:	015a      	lsls	r2, r3, #5
 800754a:	69fb      	ldr	r3, [r7, #28]
 800754c:	4413      	add	r3, r2
 800754e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007552:	461a      	mov	r2, r3
 8007554:	2320      	movs	r3, #32
 8007556:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800755e:	2b00      	cmp	r3, #0
 8007560:	d009      	beq.n	8007576 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007564:	015a      	lsls	r2, r3, #5
 8007566:	69fb      	ldr	r3, [r7, #28]
 8007568:	4413      	add	r3, r2
 800756a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800756e:	461a      	mov	r2, r3
 8007570:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007574:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8007576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007578:	3301      	adds	r3, #1
 800757a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800757c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800757e:	085b      	lsrs	r3, r3, #1
 8007580:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007584:	2b00      	cmp	r3, #0
 8007586:	d199      	bne.n	80074bc <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4618      	mov	r0, r3
 800758e:	f00a fcbd 	bl	8011f0c <USB_ReadInterrupts>
 8007592:	4603      	mov	r3, r0
 8007594:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007598:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800759c:	f040 80c0 	bne.w	8007720 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4618      	mov	r0, r3
 80075a6:	f00a fcde 	bl	8011f66 <USB_ReadDevAllInEpInterrupt>
 80075aa:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80075ac:	2300      	movs	r3, #0
 80075ae:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80075b0:	e0b2      	b.n	8007718 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80075b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075b4:	f003 0301 	and.w	r3, r3, #1
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	f000 80a7 	beq.w	800770c <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075c4:	b2d2      	uxtb	r2, r2
 80075c6:	4611      	mov	r1, r2
 80075c8:	4618      	mov	r0, r3
 80075ca:	f00a fd04 	bl	8011fd6 <USB_ReadDevInEPInterrupt>
 80075ce:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	f003 0301 	and.w	r3, r3, #1
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d057      	beq.n	800768a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80075da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075dc:	f003 030f 	and.w	r3, r3, #15
 80075e0:	2201      	movs	r2, #1
 80075e2:	fa02 f303 	lsl.w	r3, r2, r3
 80075e6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80075e8:	69fb      	ldr	r3, [r7, #28]
 80075ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	43db      	mvns	r3, r3
 80075f4:	69f9      	ldr	r1, [r7, #28]
 80075f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80075fa:	4013      	ands	r3, r2
 80075fc:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80075fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007600:	015a      	lsls	r2, r3, #5
 8007602:	69fb      	ldr	r3, [r7, #28]
 8007604:	4413      	add	r3, r2
 8007606:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800760a:	461a      	mov	r2, r3
 800760c:	2301      	movs	r3, #1
 800760e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	691b      	ldr	r3, [r3, #16]
 8007614:	2b01      	cmp	r3, #1
 8007616:	d132      	bne.n	800767e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007618:	6879      	ldr	r1, [r7, #4]
 800761a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800761c:	4613      	mov	r3, r2
 800761e:	00db      	lsls	r3, r3, #3
 8007620:	1a9b      	subs	r3, r3, r2
 8007622:	009b      	lsls	r3, r3, #2
 8007624:	440b      	add	r3, r1
 8007626:	3348      	adds	r3, #72	; 0x48
 8007628:	6819      	ldr	r1, [r3, #0]
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800762e:	4613      	mov	r3, r2
 8007630:	00db      	lsls	r3, r3, #3
 8007632:	1a9b      	subs	r3, r3, r2
 8007634:	009b      	lsls	r3, r3, #2
 8007636:	4403      	add	r3, r0
 8007638:	3344      	adds	r3, #68	; 0x44
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4419      	add	r1, r3
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007642:	4613      	mov	r3, r2
 8007644:	00db      	lsls	r3, r3, #3
 8007646:	1a9b      	subs	r3, r3, r2
 8007648:	009b      	lsls	r3, r3, #2
 800764a:	4403      	add	r3, r0
 800764c:	3348      	adds	r3, #72	; 0x48
 800764e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007652:	2b00      	cmp	r3, #0
 8007654:	d113      	bne.n	800767e <HAL_PCD_IRQHandler+0x31c>
 8007656:	6879      	ldr	r1, [r7, #4]
 8007658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800765a:	4613      	mov	r3, r2
 800765c:	00db      	lsls	r3, r3, #3
 800765e:	1a9b      	subs	r3, r3, r2
 8007660:	009b      	lsls	r3, r3, #2
 8007662:	440b      	add	r3, r1
 8007664:	3350      	adds	r3, #80	; 0x50
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d108      	bne.n	800767e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6818      	ldr	r0, [r3, #0]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007676:	461a      	mov	r2, r3
 8007678:	2101      	movs	r1, #1
 800767a:	f00a fd0d 	bl	8012098 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800767e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007680:	b2db      	uxtb	r3, r3
 8007682:	4619      	mov	r1, r3
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f010 fbfa 	bl	8017e7e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	f003 0308 	and.w	r3, r3, #8
 8007690:	2b00      	cmp	r3, #0
 8007692:	d008      	beq.n	80076a6 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007696:	015a      	lsls	r2, r3, #5
 8007698:	69fb      	ldr	r3, [r7, #28]
 800769a:	4413      	add	r3, r2
 800769c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076a0:	461a      	mov	r2, r3
 80076a2:	2308      	movs	r3, #8
 80076a4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	f003 0310 	and.w	r3, r3, #16
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d008      	beq.n	80076c2 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80076b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b2:	015a      	lsls	r2, r3, #5
 80076b4:	69fb      	ldr	r3, [r7, #28]
 80076b6:	4413      	add	r3, r2
 80076b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076bc:	461a      	mov	r2, r3
 80076be:	2310      	movs	r3, #16
 80076c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d008      	beq.n	80076de <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80076cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ce:	015a      	lsls	r2, r3, #5
 80076d0:	69fb      	ldr	r3, [r7, #28]
 80076d2:	4413      	add	r3, r2
 80076d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076d8:	461a      	mov	r2, r3
 80076da:	2340      	movs	r3, #64	; 0x40
 80076dc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	f003 0302 	and.w	r3, r3, #2
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d008      	beq.n	80076fa <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80076e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ea:	015a      	lsls	r2, r3, #5
 80076ec:	69fb      	ldr	r3, [r7, #28]
 80076ee:	4413      	add	r3, r2
 80076f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076f4:	461a      	mov	r2, r3
 80076f6:	2302      	movs	r3, #2
 80076f8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007700:	2b00      	cmp	r3, #0
 8007702:	d003      	beq.n	800770c <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007704:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 fc75 	bl	8007ff6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800770c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800770e:	3301      	adds	r3, #1
 8007710:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007714:	085b      	lsrs	r3, r3, #1
 8007716:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800771a:	2b00      	cmp	r3, #0
 800771c:	f47f af49 	bne.w	80075b2 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4618      	mov	r0, r3
 8007726:	f00a fbf1 	bl	8011f0c <USB_ReadInterrupts>
 800772a:	4603      	mov	r3, r0
 800772c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007730:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007734:	d122      	bne.n	800777c <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007736:	69fb      	ldr	r3, [r7, #28]
 8007738:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	69fa      	ldr	r2, [r7, #28]
 8007740:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007744:	f023 0301 	bic.w	r3, r3, #1
 8007748:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8007750:	2b01      	cmp	r3, #1
 8007752:	d108      	bne.n	8007766 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2200      	movs	r2, #0
 8007758:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800775c:	2100      	movs	r1, #0
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 fea4 	bl	80084ac <HAL_PCDEx_LPM_Callback>
 8007764:	e002      	b.n	800776c <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f010 fc00 	bl	8017f6c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	695a      	ldr	r2, [r3, #20]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800777a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4618      	mov	r0, r3
 8007782:	f00a fbc3 	bl	8011f0c <USB_ReadInterrupts>
 8007786:	4603      	mov	r3, r0
 8007788:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800778c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007790:	d112      	bne.n	80077b8 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007792:	69fb      	ldr	r3, [r7, #28]
 8007794:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007798:	689b      	ldr	r3, [r3, #8]
 800779a:	f003 0301 	and.w	r3, r3, #1
 800779e:	2b01      	cmp	r3, #1
 80077a0:	d102      	bne.n	80077a8 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f010 fbbc 	bl	8017f20 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	695a      	ldr	r2, [r3, #20]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80077b6:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4618      	mov	r0, r3
 80077be:	f00a fba5 	bl	8011f0c <USB_ReadInterrupts>
 80077c2:	4603      	mov	r3, r0
 80077c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80077cc:	d121      	bne.n	8007812 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	695a      	ldr	r2, [r3, #20]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80077dc:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d111      	bne.n	800780c <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2201      	movs	r2, #1
 80077ec:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077f6:	089b      	lsrs	r3, r3, #2
 80077f8:	f003 020f 	and.w	r2, r3, #15
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8007802:	2101      	movs	r1, #1
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f000 fe51 	bl	80084ac <HAL_PCDEx_LPM_Callback>
 800780a:	e002      	b.n	8007812 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f010 fb87 	bl	8017f20 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4618      	mov	r0, r3
 8007818:	f00a fb78 	bl	8011f0c <USB_ReadInterrupts>
 800781c:	4603      	mov	r3, r0
 800781e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007822:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007826:	f040 80c7 	bne.w	80079b8 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800782a:	69fb      	ldr	r3, [r7, #28]
 800782c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	69fa      	ldr	r2, [r7, #28]
 8007834:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007838:	f023 0301 	bic.w	r3, r3, #1
 800783c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	2110      	movs	r1, #16
 8007844:	4618      	mov	r0, r3
 8007846:	f009 fc4b 	bl	80110e0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800784a:	2300      	movs	r3, #0
 800784c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800784e:	e056      	b.n	80078fe <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007852:	015a      	lsls	r2, r3, #5
 8007854:	69fb      	ldr	r3, [r7, #28]
 8007856:	4413      	add	r3, r2
 8007858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800785c:	461a      	mov	r2, r3
 800785e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007862:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007866:	015a      	lsls	r2, r3, #5
 8007868:	69fb      	ldr	r3, [r7, #28]
 800786a:	4413      	add	r3, r2
 800786c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007874:	0151      	lsls	r1, r2, #5
 8007876:	69fa      	ldr	r2, [r7, #28]
 8007878:	440a      	add	r2, r1
 800787a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800787e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007882:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007886:	015a      	lsls	r2, r3, #5
 8007888:	69fb      	ldr	r3, [r7, #28]
 800788a:	4413      	add	r3, r2
 800788c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007894:	0151      	lsls	r1, r2, #5
 8007896:	69fa      	ldr	r2, [r7, #28]
 8007898:	440a      	add	r2, r1
 800789a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800789e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80078a2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80078a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078a6:	015a      	lsls	r2, r3, #5
 80078a8:	69fb      	ldr	r3, [r7, #28]
 80078aa:	4413      	add	r3, r2
 80078ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078b0:	461a      	mov	r2, r3
 80078b2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80078b6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80078b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ba:	015a      	lsls	r2, r3, #5
 80078bc:	69fb      	ldr	r3, [r7, #28]
 80078be:	4413      	add	r3, r2
 80078c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078c8:	0151      	lsls	r1, r2, #5
 80078ca:	69fa      	ldr	r2, [r7, #28]
 80078cc:	440a      	add	r2, r1
 80078ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80078d6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80078d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078da:	015a      	lsls	r2, r3, #5
 80078dc:	69fb      	ldr	r3, [r7, #28]
 80078de:	4413      	add	r3, r2
 80078e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078e8:	0151      	lsls	r1, r2, #5
 80078ea:	69fa      	ldr	r2, [r7, #28]
 80078ec:	440a      	add	r2, r1
 80078ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078f2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80078f6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80078f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078fa:	3301      	adds	r3, #1
 80078fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007904:	429a      	cmp	r2, r3
 8007906:	d3a3      	bcc.n	8007850 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007908:	69fb      	ldr	r3, [r7, #28]
 800790a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800790e:	69db      	ldr	r3, [r3, #28]
 8007910:	69fa      	ldr	r2, [r7, #28]
 8007912:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007916:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800791a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007920:	2b00      	cmp	r3, #0
 8007922:	d016      	beq.n	8007952 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007924:	69fb      	ldr	r3, [r7, #28]
 8007926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800792a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800792e:	69fa      	ldr	r2, [r7, #28]
 8007930:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007934:	f043 030b 	orr.w	r3, r3, #11
 8007938:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800793c:	69fb      	ldr	r3, [r7, #28]
 800793e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007944:	69fa      	ldr	r2, [r7, #28]
 8007946:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800794a:	f043 030b 	orr.w	r3, r3, #11
 800794e:	6453      	str	r3, [r2, #68]	; 0x44
 8007950:	e015      	b.n	800797e <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007952:	69fb      	ldr	r3, [r7, #28]
 8007954:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007958:	695a      	ldr	r2, [r3, #20]
 800795a:	69fb      	ldr	r3, [r7, #28]
 800795c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007960:	4619      	mov	r1, r3
 8007962:	f242 032b 	movw	r3, #8235	; 0x202b
 8007966:	4313      	orrs	r3, r2
 8007968:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800796a:	69fb      	ldr	r3, [r7, #28]
 800796c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007970:	691b      	ldr	r3, [r3, #16]
 8007972:	69fa      	ldr	r2, [r7, #28]
 8007974:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007978:	f043 030b 	orr.w	r3, r3, #11
 800797c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800797e:	69fb      	ldr	r3, [r7, #28]
 8007980:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	69fa      	ldr	r2, [r7, #28]
 8007988:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800798c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007990:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6818      	ldr	r0, [r3, #0]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	691b      	ldr	r3, [r3, #16]
 800799a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80079a2:	461a      	mov	r2, r3
 80079a4:	f00a fb78 	bl	8012098 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	695a      	ldr	r2, [r3, #20]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80079b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4618      	mov	r0, r3
 80079be:	f00a faa5 	bl	8011f0c <USB_ReadInterrupts>
 80079c2:	4603      	mov	r3, r0
 80079c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80079c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079cc:	d124      	bne.n	8007a18 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4618      	mov	r0, r3
 80079d4:	f00a fb3c 	bl	8012050 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4618      	mov	r0, r3
 80079de:	f009 fbe0 	bl	80111a2 <USB_GetDevSpeed>
 80079e2:	4603      	mov	r3, r0
 80079e4:	461a      	mov	r2, r3
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681c      	ldr	r4, [r3, #0]
 80079ee:	f001 fdd9 	bl	80095a4 <HAL_RCC_GetHCLKFreq>
 80079f2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80079f8:	b2db      	uxtb	r3, r3
 80079fa:	461a      	mov	r2, r3
 80079fc:	4620      	mov	r0, r4
 80079fe:	f009 f923 	bl	8010c48 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f010 fa63 	bl	8017ece <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	695a      	ldr	r2, [r3, #20]
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8007a16:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	f00a fa75 	bl	8011f0c <USB_ReadInterrupts>
 8007a22:	4603      	mov	r3, r0
 8007a24:	f003 0308 	and.w	r3, r3, #8
 8007a28:	2b08      	cmp	r3, #8
 8007a2a:	d10a      	bne.n	8007a42 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f010 fa40 	bl	8017eb2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	695a      	ldr	r2, [r3, #20]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f002 0208 	and.w	r2, r2, #8
 8007a40:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4618      	mov	r0, r3
 8007a48:	f00a fa60 	bl	8011f0c <USB_ReadInterrupts>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a56:	d10f      	bne.n	8007a78 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8007a58:	2300      	movs	r3, #0
 8007a5a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a5e:	b2db      	uxtb	r3, r3
 8007a60:	4619      	mov	r1, r3
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f010 faa2 	bl	8017fac <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	695a      	ldr	r2, [r3, #20]
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8007a76:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f00a fa45 	bl	8011f0c <USB_ReadInterrupts>
 8007a82:	4603      	mov	r3, r0
 8007a84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a88:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a8c:	d10f      	bne.n	8007aae <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a94:	b2db      	uxtb	r3, r3
 8007a96:	4619      	mov	r1, r3
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f010 fa75 	bl	8017f88 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	695a      	ldr	r2, [r3, #20]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8007aac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	f00a fa2a 	bl	8011f0c <USB_ReadInterrupts>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007abe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ac2:	d10a      	bne.n	8007ada <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f010 fa83 	bl	8017fd0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	695a      	ldr	r2, [r3, #20]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007ad8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f00a fa14 	bl	8011f0c <USB_ReadInterrupts>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	f003 0304 	and.w	r3, r3, #4
 8007aea:	2b04      	cmp	r3, #4
 8007aec:	d115      	bne.n	8007b1a <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007af6:	69bb      	ldr	r3, [r7, #24]
 8007af8:	f003 0304 	and.w	r3, r3, #4
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d002      	beq.n	8007b06 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f010 fa73 	bl	8017fec <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	6859      	ldr	r1, [r3, #4]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	69ba      	ldr	r2, [r7, #24]
 8007b12:	430a      	orrs	r2, r1
 8007b14:	605a      	str	r2, [r3, #4]
 8007b16:	e000      	b.n	8007b1a <HAL_PCD_IRQHandler+0x7b8>
      return;
 8007b18:	bf00      	nop
    }
  }
}
 8007b1a:	3734      	adds	r7, #52	; 0x34
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd90      	pop	{r4, r7, pc}

08007b20 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b082      	sub	sp, #8
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	460b      	mov	r3, r1
 8007b2a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007b32:	2b01      	cmp	r3, #1
 8007b34:	d101      	bne.n	8007b3a <HAL_PCD_SetAddress+0x1a>
 8007b36:	2302      	movs	r3, #2
 8007b38:	e013      	b.n	8007b62 <HAL_PCD_SetAddress+0x42>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2201      	movs	r2, #1
 8007b3e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	78fa      	ldrb	r2, [r7, #3]
 8007b46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	78fa      	ldrb	r2, [r7, #3]
 8007b50:	4611      	mov	r1, r2
 8007b52:	4618      	mov	r0, r3
 8007b54:	f00a f984 	bl	8011e60 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8007b60:	2300      	movs	r3, #0
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3708      	adds	r7, #8
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}

08007b6a <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8007b6a:	b580      	push	{r7, lr}
 8007b6c:	b084      	sub	sp, #16
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	6078      	str	r0, [r7, #4]
 8007b72:	4608      	mov	r0, r1
 8007b74:	4611      	mov	r1, r2
 8007b76:	461a      	mov	r2, r3
 8007b78:	4603      	mov	r3, r0
 8007b7a:	70fb      	strb	r3, [r7, #3]
 8007b7c:	460b      	mov	r3, r1
 8007b7e:	803b      	strh	r3, [r7, #0]
 8007b80:	4613      	mov	r3, r2
 8007b82:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007b84:	2300      	movs	r3, #0
 8007b86:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007b88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	da0f      	bge.n	8007bb0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007b90:	78fb      	ldrb	r3, [r7, #3]
 8007b92:	f003 020f 	and.w	r2, r3, #15
 8007b96:	4613      	mov	r3, r2
 8007b98:	00db      	lsls	r3, r3, #3
 8007b9a:	1a9b      	subs	r3, r3, r2
 8007b9c:	009b      	lsls	r3, r3, #2
 8007b9e:	3338      	adds	r3, #56	; 0x38
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	4413      	add	r3, r2
 8007ba4:	3304      	adds	r3, #4
 8007ba6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2201      	movs	r2, #1
 8007bac:	705a      	strb	r2, [r3, #1]
 8007bae:	e00f      	b.n	8007bd0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007bb0:	78fb      	ldrb	r3, [r7, #3]
 8007bb2:	f003 020f 	and.w	r2, r3, #15
 8007bb6:	4613      	mov	r3, r2
 8007bb8:	00db      	lsls	r3, r3, #3
 8007bba:	1a9b      	subs	r3, r3, r2
 8007bbc:	009b      	lsls	r3, r3, #2
 8007bbe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007bc2:	687a      	ldr	r2, [r7, #4]
 8007bc4:	4413      	add	r3, r2
 8007bc6:	3304      	adds	r3, #4
 8007bc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007bd0:	78fb      	ldrb	r3, [r7, #3]
 8007bd2:	f003 030f 	and.w	r3, r3, #15
 8007bd6:	b2da      	uxtb	r2, r3
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007bdc:	883a      	ldrh	r2, [r7, #0]
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	78ba      	ldrb	r2, [r7, #2]
 8007be6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	785b      	ldrb	r3, [r3, #1]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d004      	beq.n	8007bfa <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	781b      	ldrb	r3, [r3, #0]
 8007bf4:	b29a      	uxth	r2, r3
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007bfa:	78bb      	ldrb	r3, [r7, #2]
 8007bfc:	2b02      	cmp	r3, #2
 8007bfe:	d102      	bne.n	8007c06 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2200      	movs	r2, #0
 8007c04:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007c0c:	2b01      	cmp	r3, #1
 8007c0e:	d101      	bne.n	8007c14 <HAL_PCD_EP_Open+0xaa>
 8007c10:	2302      	movs	r3, #2
 8007c12:	e00e      	b.n	8007c32 <HAL_PCD_EP_Open+0xc8>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2201      	movs	r2, #1
 8007c18:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	68f9      	ldr	r1, [r7, #12]
 8007c22:	4618      	mov	r0, r3
 8007c24:	f009 fae2 	bl	80111ec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8007c30:	7afb      	ldrb	r3, [r7, #11]
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3710      	adds	r7, #16
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}

08007c3a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007c3a:	b580      	push	{r7, lr}
 8007c3c:	b084      	sub	sp, #16
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	6078      	str	r0, [r7, #4]
 8007c42:	460b      	mov	r3, r1
 8007c44:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007c46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	da0f      	bge.n	8007c6e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007c4e:	78fb      	ldrb	r3, [r7, #3]
 8007c50:	f003 020f 	and.w	r2, r3, #15
 8007c54:	4613      	mov	r3, r2
 8007c56:	00db      	lsls	r3, r3, #3
 8007c58:	1a9b      	subs	r3, r3, r2
 8007c5a:	009b      	lsls	r3, r3, #2
 8007c5c:	3338      	adds	r3, #56	; 0x38
 8007c5e:	687a      	ldr	r2, [r7, #4]
 8007c60:	4413      	add	r3, r2
 8007c62:	3304      	adds	r3, #4
 8007c64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2201      	movs	r2, #1
 8007c6a:	705a      	strb	r2, [r3, #1]
 8007c6c:	e00f      	b.n	8007c8e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007c6e:	78fb      	ldrb	r3, [r7, #3]
 8007c70:	f003 020f 	and.w	r2, r3, #15
 8007c74:	4613      	mov	r3, r2
 8007c76:	00db      	lsls	r3, r3, #3
 8007c78:	1a9b      	subs	r3, r3, r2
 8007c7a:	009b      	lsls	r3, r3, #2
 8007c7c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007c80:	687a      	ldr	r2, [r7, #4]
 8007c82:	4413      	add	r3, r2
 8007c84:	3304      	adds	r3, #4
 8007c86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007c8e:	78fb      	ldrb	r3, [r7, #3]
 8007c90:	f003 030f 	and.w	r3, r3, #15
 8007c94:	b2da      	uxtb	r2, r3
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007ca0:	2b01      	cmp	r3, #1
 8007ca2:	d101      	bne.n	8007ca8 <HAL_PCD_EP_Close+0x6e>
 8007ca4:	2302      	movs	r3, #2
 8007ca6:	e00e      	b.n	8007cc6 <HAL_PCD_EP_Close+0x8c>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2201      	movs	r2, #1
 8007cac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	68f9      	ldr	r1, [r7, #12]
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f009 fb20 	bl	80112fc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8007cc4:	2300      	movs	r3, #0
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3710      	adds	r7, #16
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}

08007cce <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007cce:	b580      	push	{r7, lr}
 8007cd0:	b086      	sub	sp, #24
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	60f8      	str	r0, [r7, #12]
 8007cd6:	607a      	str	r2, [r7, #4]
 8007cd8:	603b      	str	r3, [r7, #0]
 8007cda:	460b      	mov	r3, r1
 8007cdc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007cde:	7afb      	ldrb	r3, [r7, #11]
 8007ce0:	f003 020f 	and.w	r2, r3, #15
 8007ce4:	4613      	mov	r3, r2
 8007ce6:	00db      	lsls	r3, r3, #3
 8007ce8:	1a9b      	subs	r3, r3, r2
 8007cea:	009b      	lsls	r3, r3, #2
 8007cec:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007cf0:	68fa      	ldr	r2, [r7, #12]
 8007cf2:	4413      	add	r3, r2
 8007cf4:	3304      	adds	r3, #4
 8007cf6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	687a      	ldr	r2, [r7, #4]
 8007cfc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	683a      	ldr	r2, [r7, #0]
 8007d02:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8007d04:	697b      	ldr	r3, [r7, #20]
 8007d06:	2200      	movs	r2, #0
 8007d08:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007d10:	7afb      	ldrb	r3, [r7, #11]
 8007d12:	f003 030f 	and.w	r3, r3, #15
 8007d16:	b2da      	uxtb	r2, r3
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	691b      	ldr	r3, [r3, #16]
 8007d20:	2b01      	cmp	r3, #1
 8007d22:	d102      	bne.n	8007d2a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007d24:	687a      	ldr	r2, [r7, #4]
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007d2a:	7afb      	ldrb	r3, [r7, #11]
 8007d2c:	f003 030f 	and.w	r3, r3, #15
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d109      	bne.n	8007d48 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	6818      	ldr	r0, [r3, #0]
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	691b      	ldr	r3, [r3, #16]
 8007d3c:	b2db      	uxtb	r3, r3
 8007d3e:	461a      	mov	r2, r3
 8007d40:	6979      	ldr	r1, [r7, #20]
 8007d42:	f009 fe03 	bl	801194c <USB_EP0StartXfer>
 8007d46:	e008      	b.n	8007d5a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	6818      	ldr	r0, [r3, #0]
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	691b      	ldr	r3, [r3, #16]
 8007d50:	b2db      	uxtb	r3, r3
 8007d52:	461a      	mov	r2, r3
 8007d54:	6979      	ldr	r1, [r7, #20]
 8007d56:	f009 fbad 	bl	80114b4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007d5a:	2300      	movs	r3, #0
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3718      	adds	r7, #24
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}

08007d64 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b083      	sub	sp, #12
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
 8007d6c:	460b      	mov	r3, r1
 8007d6e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007d70:	78fb      	ldrb	r3, [r7, #3]
 8007d72:	f003 020f 	and.w	r2, r3, #15
 8007d76:	6879      	ldr	r1, [r7, #4]
 8007d78:	4613      	mov	r3, r2
 8007d7a:	00db      	lsls	r3, r3, #3
 8007d7c:	1a9b      	subs	r3, r3, r2
 8007d7e:	009b      	lsls	r3, r3, #2
 8007d80:	440b      	add	r3, r1
 8007d82:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8007d86:	681b      	ldr	r3, [r3, #0]
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	370c      	adds	r7, #12
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d92:	4770      	bx	lr

08007d94 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b086      	sub	sp, #24
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	60f8      	str	r0, [r7, #12]
 8007d9c:	607a      	str	r2, [r7, #4]
 8007d9e:	603b      	str	r3, [r7, #0]
 8007da0:	460b      	mov	r3, r1
 8007da2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007da4:	7afb      	ldrb	r3, [r7, #11]
 8007da6:	f003 020f 	and.w	r2, r3, #15
 8007daa:	4613      	mov	r3, r2
 8007dac:	00db      	lsls	r3, r3, #3
 8007dae:	1a9b      	subs	r3, r3, r2
 8007db0:	009b      	lsls	r3, r3, #2
 8007db2:	3338      	adds	r3, #56	; 0x38
 8007db4:	68fa      	ldr	r2, [r7, #12]
 8007db6:	4413      	add	r3, r2
 8007db8:	3304      	adds	r3, #4
 8007dba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	687a      	ldr	r2, [r7, #4]
 8007dc0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	683a      	ldr	r2, [r7, #0]
 8007dc6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	2201      	movs	r2, #1
 8007dd2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007dd4:	7afb      	ldrb	r3, [r7, #11]
 8007dd6:	f003 030f 	and.w	r3, r3, #15
 8007dda:	b2da      	uxtb	r2, r3
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	691b      	ldr	r3, [r3, #16]
 8007de4:	2b01      	cmp	r3, #1
 8007de6:	d102      	bne.n	8007dee <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007de8:	687a      	ldr	r2, [r7, #4]
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007dee:	7afb      	ldrb	r3, [r7, #11]
 8007df0:	f003 030f 	and.w	r3, r3, #15
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d109      	bne.n	8007e0c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	6818      	ldr	r0, [r3, #0]
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	691b      	ldr	r3, [r3, #16]
 8007e00:	b2db      	uxtb	r3, r3
 8007e02:	461a      	mov	r2, r3
 8007e04:	6979      	ldr	r1, [r7, #20]
 8007e06:	f009 fda1 	bl	801194c <USB_EP0StartXfer>
 8007e0a:	e008      	b.n	8007e1e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	6818      	ldr	r0, [r3, #0]
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	691b      	ldr	r3, [r3, #16]
 8007e14:	b2db      	uxtb	r3, r3
 8007e16:	461a      	mov	r2, r3
 8007e18:	6979      	ldr	r1, [r7, #20]
 8007e1a:	f009 fb4b 	bl	80114b4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007e1e:	2300      	movs	r3, #0
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	3718      	adds	r7, #24
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}

08007e28 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b084      	sub	sp, #16
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	460b      	mov	r3, r1
 8007e32:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007e34:	78fb      	ldrb	r3, [r7, #3]
 8007e36:	f003 020f 	and.w	r2, r3, #15
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	429a      	cmp	r2, r3
 8007e40:	d901      	bls.n	8007e46 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007e42:	2301      	movs	r3, #1
 8007e44:	e050      	b.n	8007ee8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007e46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	da0f      	bge.n	8007e6e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007e4e:	78fb      	ldrb	r3, [r7, #3]
 8007e50:	f003 020f 	and.w	r2, r3, #15
 8007e54:	4613      	mov	r3, r2
 8007e56:	00db      	lsls	r3, r3, #3
 8007e58:	1a9b      	subs	r3, r3, r2
 8007e5a:	009b      	lsls	r3, r3, #2
 8007e5c:	3338      	adds	r3, #56	; 0x38
 8007e5e:	687a      	ldr	r2, [r7, #4]
 8007e60:	4413      	add	r3, r2
 8007e62:	3304      	adds	r3, #4
 8007e64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2201      	movs	r2, #1
 8007e6a:	705a      	strb	r2, [r3, #1]
 8007e6c:	e00d      	b.n	8007e8a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007e6e:	78fa      	ldrb	r2, [r7, #3]
 8007e70:	4613      	mov	r3, r2
 8007e72:	00db      	lsls	r3, r3, #3
 8007e74:	1a9b      	subs	r3, r3, r2
 8007e76:	009b      	lsls	r3, r3, #2
 8007e78:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007e7c:	687a      	ldr	r2, [r7, #4]
 8007e7e:	4413      	add	r3, r2
 8007e80:	3304      	adds	r3, #4
 8007e82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	2200      	movs	r2, #0
 8007e88:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2201      	movs	r2, #1
 8007e8e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007e90:	78fb      	ldrb	r3, [r7, #3]
 8007e92:	f003 030f 	and.w	r3, r3, #15
 8007e96:	b2da      	uxtb	r2, r3
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007ea2:	2b01      	cmp	r3, #1
 8007ea4:	d101      	bne.n	8007eaa <HAL_PCD_EP_SetStall+0x82>
 8007ea6:	2302      	movs	r3, #2
 8007ea8:	e01e      	b.n	8007ee8 <HAL_PCD_EP_SetStall+0xc0>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2201      	movs	r2, #1
 8007eae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	68f9      	ldr	r1, [r7, #12]
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f009 fefd 	bl	8011cb8 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007ebe:	78fb      	ldrb	r3, [r7, #3]
 8007ec0:	f003 030f 	and.w	r3, r3, #15
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d10a      	bne.n	8007ede <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6818      	ldr	r0, [r3, #0]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	691b      	ldr	r3, [r3, #16]
 8007ed0:	b2d9      	uxtb	r1, r3
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007ed8:	461a      	mov	r2, r3
 8007eda:	f00a f8dd 	bl	8012098 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007ee6:	2300      	movs	r3, #0
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3710      	adds	r7, #16
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}

08007ef0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b084      	sub	sp, #16
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	460b      	mov	r3, r1
 8007efa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007efc:	78fb      	ldrb	r3, [r7, #3]
 8007efe:	f003 020f 	and.w	r2, r3, #15
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	685b      	ldr	r3, [r3, #4]
 8007f06:	429a      	cmp	r2, r3
 8007f08:	d901      	bls.n	8007f0e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	e042      	b.n	8007f94 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007f0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	da0f      	bge.n	8007f36 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007f16:	78fb      	ldrb	r3, [r7, #3]
 8007f18:	f003 020f 	and.w	r2, r3, #15
 8007f1c:	4613      	mov	r3, r2
 8007f1e:	00db      	lsls	r3, r3, #3
 8007f20:	1a9b      	subs	r3, r3, r2
 8007f22:	009b      	lsls	r3, r3, #2
 8007f24:	3338      	adds	r3, #56	; 0x38
 8007f26:	687a      	ldr	r2, [r7, #4]
 8007f28:	4413      	add	r3, r2
 8007f2a:	3304      	adds	r3, #4
 8007f2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2201      	movs	r2, #1
 8007f32:	705a      	strb	r2, [r3, #1]
 8007f34:	e00f      	b.n	8007f56 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007f36:	78fb      	ldrb	r3, [r7, #3]
 8007f38:	f003 020f 	and.w	r2, r3, #15
 8007f3c:	4613      	mov	r3, r2
 8007f3e:	00db      	lsls	r3, r3, #3
 8007f40:	1a9b      	subs	r3, r3, r2
 8007f42:	009b      	lsls	r3, r3, #2
 8007f44:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007f48:	687a      	ldr	r2, [r7, #4]
 8007f4a:	4413      	add	r3, r2
 8007f4c:	3304      	adds	r3, #4
 8007f4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2200      	movs	r2, #0
 8007f54:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007f5c:	78fb      	ldrb	r3, [r7, #3]
 8007f5e:	f003 030f 	and.w	r3, r3, #15
 8007f62:	b2da      	uxtb	r2, r3
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007f6e:	2b01      	cmp	r3, #1
 8007f70:	d101      	bne.n	8007f76 <HAL_PCD_EP_ClrStall+0x86>
 8007f72:	2302      	movs	r3, #2
 8007f74:	e00e      	b.n	8007f94 <HAL_PCD_EP_ClrStall+0xa4>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2201      	movs	r2, #1
 8007f7a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	68f9      	ldr	r1, [r7, #12]
 8007f84:	4618      	mov	r0, r3
 8007f86:	f009 ff05 	bl	8011d94 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007f92:	2300      	movs	r3, #0
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3710      	adds	r7, #16
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}

08007f9c <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b082      	sub	sp, #8
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	460b      	mov	r3, r1
 8007fa6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007fae:	2b01      	cmp	r3, #1
 8007fb0:	d101      	bne.n	8007fb6 <HAL_PCD_EP_Flush+0x1a>
 8007fb2:	2302      	movs	r3, #2
 8007fb4:	e01b      	b.n	8007fee <HAL_PCD_EP_Flush+0x52>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2201      	movs	r2, #1
 8007fba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 8007fbe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	da09      	bge.n	8007fda <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681a      	ldr	r2, [r3, #0]
 8007fca:	78fb      	ldrb	r3, [r7, #3]
 8007fcc:	f003 030f 	and.w	r3, r3, #15
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	4610      	mov	r0, r2
 8007fd4:	f009 f884 	bl	80110e0 <USB_FlushTxFifo>
 8007fd8:	e004      	b.n	8007fe4 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f009 f8a4 	bl	801112c <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007fec:	2300      	movs	r3, #0
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3708      	adds	r7, #8
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}

08007ff6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007ff6:	b580      	push	{r7, lr}
 8007ff8:	b08a      	sub	sp, #40	; 0x28
 8007ffa:	af02      	add	r7, sp, #8
 8007ffc:	6078      	str	r0, [r7, #4]
 8007ffe:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800800a:	683a      	ldr	r2, [r7, #0]
 800800c:	4613      	mov	r3, r2
 800800e:	00db      	lsls	r3, r3, #3
 8008010:	1a9b      	subs	r3, r3, r2
 8008012:	009b      	lsls	r3, r3, #2
 8008014:	3338      	adds	r3, #56	; 0x38
 8008016:	687a      	ldr	r2, [r7, #4]
 8008018:	4413      	add	r3, r2
 800801a:	3304      	adds	r3, #4
 800801c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	699a      	ldr	r2, [r3, #24]
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	695b      	ldr	r3, [r3, #20]
 8008026:	429a      	cmp	r2, r3
 8008028:	d901      	bls.n	800802e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800802a:	2301      	movs	r3, #1
 800802c:	e06c      	b.n	8008108 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	695a      	ldr	r2, [r3, #20]
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	699b      	ldr	r3, [r3, #24]
 8008036:	1ad3      	subs	r3, r2, r3
 8008038:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	689b      	ldr	r3, [r3, #8]
 800803e:	69fa      	ldr	r2, [r7, #28]
 8008040:	429a      	cmp	r2, r3
 8008042:	d902      	bls.n	800804a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	689b      	ldr	r3, [r3, #8]
 8008048:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800804a:	69fb      	ldr	r3, [r7, #28]
 800804c:	3303      	adds	r3, #3
 800804e:	089b      	lsrs	r3, r3, #2
 8008050:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008052:	e02b      	b.n	80080ac <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	695a      	ldr	r2, [r3, #20]
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	699b      	ldr	r3, [r3, #24]
 800805c:	1ad3      	subs	r3, r2, r3
 800805e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	689b      	ldr	r3, [r3, #8]
 8008064:	69fa      	ldr	r2, [r7, #28]
 8008066:	429a      	cmp	r2, r3
 8008068:	d902      	bls.n	8008070 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	689b      	ldr	r3, [r3, #8]
 800806e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8008070:	69fb      	ldr	r3, [r7, #28]
 8008072:	3303      	adds	r3, #3
 8008074:	089b      	lsrs	r3, r3, #2
 8008076:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	68d9      	ldr	r1, [r3, #12]
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	b2da      	uxtb	r2, r3
 8008080:	69fb      	ldr	r3, [r7, #28]
 8008082:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008088:	b2db      	uxtb	r3, r3
 800808a:	9300      	str	r3, [sp, #0]
 800808c:	4603      	mov	r3, r0
 800808e:	6978      	ldr	r0, [r7, #20]
 8008090:	f009 fdb4 	bl	8011bfc <USB_WritePacket>

    ep->xfer_buff  += len;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	68da      	ldr	r2, [r3, #12]
 8008098:	69fb      	ldr	r3, [r7, #28]
 800809a:	441a      	add	r2, r3
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	699a      	ldr	r2, [r3, #24]
 80080a4:	69fb      	ldr	r3, [r7, #28]
 80080a6:	441a      	add	r2, r3
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	015a      	lsls	r2, r3, #5
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	4413      	add	r3, r2
 80080b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080b8:	699b      	ldr	r3, [r3, #24]
 80080ba:	b29b      	uxth	r3, r3
 80080bc:	69ba      	ldr	r2, [r7, #24]
 80080be:	429a      	cmp	r2, r3
 80080c0:	d809      	bhi.n	80080d6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	699a      	ldr	r2, [r3, #24]
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80080ca:	429a      	cmp	r2, r3
 80080cc:	d203      	bcs.n	80080d6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	695b      	ldr	r3, [r3, #20]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d1be      	bne.n	8008054 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	695a      	ldr	r2, [r3, #20]
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	699b      	ldr	r3, [r3, #24]
 80080de:	429a      	cmp	r2, r3
 80080e0:	d811      	bhi.n	8008106 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	f003 030f 	and.w	r3, r3, #15
 80080e8:	2201      	movs	r2, #1
 80080ea:	fa02 f303 	lsl.w	r3, r2, r3
 80080ee:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	43db      	mvns	r3, r3
 80080fc:	6939      	ldr	r1, [r7, #16]
 80080fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008102:	4013      	ands	r3, r2
 8008104:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8008106:	2300      	movs	r3, #0
}
 8008108:	4618      	mov	r0, r3
 800810a:	3720      	adds	r7, #32
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}

08008110 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b086      	sub	sp, #24
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
 8008118:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	333c      	adds	r3, #60	; 0x3c
 8008128:	3304      	adds	r3, #4
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	015a      	lsls	r2, r3, #5
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	4413      	add	r3, r2
 8008136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800813a:	689b      	ldr	r3, [r3, #8]
 800813c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	691b      	ldr	r3, [r3, #16]
 8008142:	2b01      	cmp	r3, #1
 8008144:	f040 80a0 	bne.w	8008288 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	f003 0308 	and.w	r3, r3, #8
 800814e:	2b00      	cmp	r3, #0
 8008150:	d015      	beq.n	800817e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	4a72      	ldr	r2, [pc, #456]	; (8008320 <PCD_EP_OutXfrComplete_int+0x210>)
 8008156:	4293      	cmp	r3, r2
 8008158:	f240 80dd 	bls.w	8008316 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008162:	2b00      	cmp	r3, #0
 8008164:	f000 80d7 	beq.w	8008316 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	015a      	lsls	r2, r3, #5
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	4413      	add	r3, r2
 8008170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008174:	461a      	mov	r2, r3
 8008176:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800817a:	6093      	str	r3, [r2, #8]
 800817c:	e0cb      	b.n	8008316 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	f003 0320 	and.w	r3, r3, #32
 8008184:	2b00      	cmp	r3, #0
 8008186:	d009      	beq.n	800819c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	015a      	lsls	r2, r3, #5
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	4413      	add	r3, r2
 8008190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008194:	461a      	mov	r2, r3
 8008196:	2320      	movs	r3, #32
 8008198:	6093      	str	r3, [r2, #8]
 800819a:	e0bc      	b.n	8008316 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	f040 80b7 	bne.w	8008316 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	4a5d      	ldr	r2, [pc, #372]	; (8008320 <PCD_EP_OutXfrComplete_int+0x210>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d90f      	bls.n	80081d0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d00a      	beq.n	80081d0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	015a      	lsls	r2, r3, #5
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	4413      	add	r3, r2
 80081c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081c6:	461a      	mov	r2, r3
 80081c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081cc:	6093      	str	r3, [r2, #8]
 80081ce:	e0a2      	b.n	8008316 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80081d0:	6879      	ldr	r1, [r7, #4]
 80081d2:	683a      	ldr	r2, [r7, #0]
 80081d4:	4613      	mov	r3, r2
 80081d6:	00db      	lsls	r3, r3, #3
 80081d8:	1a9b      	subs	r3, r3, r2
 80081da:	009b      	lsls	r3, r3, #2
 80081dc:	440b      	add	r3, r1
 80081de:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80081e2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	0159      	lsls	r1, r3, #5
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	440b      	add	r3, r1
 80081ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081f0:	691b      	ldr	r3, [r3, #16]
 80081f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80081f6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	683a      	ldr	r2, [r7, #0]
 80081fc:	4613      	mov	r3, r2
 80081fe:	00db      	lsls	r3, r3, #3
 8008200:	1a9b      	subs	r3, r3, r2
 8008202:	009b      	lsls	r3, r3, #2
 8008204:	4403      	add	r3, r0
 8008206:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800820a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800820c:	6879      	ldr	r1, [r7, #4]
 800820e:	683a      	ldr	r2, [r7, #0]
 8008210:	4613      	mov	r3, r2
 8008212:	00db      	lsls	r3, r3, #3
 8008214:	1a9b      	subs	r3, r3, r2
 8008216:	009b      	lsls	r3, r3, #2
 8008218:	440b      	add	r3, r1
 800821a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800821e:	6819      	ldr	r1, [r3, #0]
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	683a      	ldr	r2, [r7, #0]
 8008224:	4613      	mov	r3, r2
 8008226:	00db      	lsls	r3, r3, #3
 8008228:	1a9b      	subs	r3, r3, r2
 800822a:	009b      	lsls	r3, r3, #2
 800822c:	4403      	add	r3, r0
 800822e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4419      	add	r1, r3
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	683a      	ldr	r2, [r7, #0]
 800823a:	4613      	mov	r3, r2
 800823c:	00db      	lsls	r3, r3, #3
 800823e:	1a9b      	subs	r3, r3, r2
 8008240:	009b      	lsls	r3, r3, #2
 8008242:	4403      	add	r3, r0
 8008244:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008248:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d114      	bne.n	800827a <PCD_EP_OutXfrComplete_int+0x16a>
 8008250:	6879      	ldr	r1, [r7, #4]
 8008252:	683a      	ldr	r2, [r7, #0]
 8008254:	4613      	mov	r3, r2
 8008256:	00db      	lsls	r3, r3, #3
 8008258:	1a9b      	subs	r3, r3, r2
 800825a:	009b      	lsls	r3, r3, #2
 800825c:	440b      	add	r3, r1
 800825e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d108      	bne.n	800827a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6818      	ldr	r0, [r3, #0]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008272:	461a      	mov	r2, r3
 8008274:	2101      	movs	r1, #1
 8008276:	f009 ff0f 	bl	8012098 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	b2db      	uxtb	r3, r3
 800827e:	4619      	mov	r1, r3
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f00f fde1 	bl	8017e48 <HAL_PCD_DataOutStageCallback>
 8008286:	e046      	b.n	8008316 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	4a26      	ldr	r2, [pc, #152]	; (8008324 <PCD_EP_OutXfrComplete_int+0x214>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d124      	bne.n	80082da <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008296:	2b00      	cmp	r3, #0
 8008298:	d00a      	beq.n	80082b0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	015a      	lsls	r2, r3, #5
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	4413      	add	r3, r2
 80082a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082a6:	461a      	mov	r2, r3
 80082a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082ac:	6093      	str	r3, [r2, #8]
 80082ae:	e032      	b.n	8008316 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	f003 0320 	and.w	r3, r3, #32
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d008      	beq.n	80082cc <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	015a      	lsls	r2, r3, #5
 80082be:	693b      	ldr	r3, [r7, #16]
 80082c0:	4413      	add	r3, r2
 80082c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082c6:	461a      	mov	r2, r3
 80082c8:	2320      	movs	r3, #32
 80082ca:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	b2db      	uxtb	r3, r3
 80082d0:	4619      	mov	r1, r3
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f00f fdb8 	bl	8017e48 <HAL_PCD_DataOutStageCallback>
 80082d8:	e01d      	b.n	8008316 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d114      	bne.n	800830a <PCD_EP_OutXfrComplete_int+0x1fa>
 80082e0:	6879      	ldr	r1, [r7, #4]
 80082e2:	683a      	ldr	r2, [r7, #0]
 80082e4:	4613      	mov	r3, r2
 80082e6:	00db      	lsls	r3, r3, #3
 80082e8:	1a9b      	subs	r3, r3, r2
 80082ea:	009b      	lsls	r3, r3, #2
 80082ec:	440b      	add	r3, r1
 80082ee:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d108      	bne.n	800830a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6818      	ldr	r0, [r3, #0]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008302:	461a      	mov	r2, r3
 8008304:	2100      	movs	r1, #0
 8008306:	f009 fec7 	bl	8012098 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	b2db      	uxtb	r3, r3
 800830e:	4619      	mov	r1, r3
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f00f fd99 	bl	8017e48 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008316:	2300      	movs	r3, #0
}
 8008318:	4618      	mov	r0, r3
 800831a:	3718      	adds	r7, #24
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}
 8008320:	4f54300a 	.word	0x4f54300a
 8008324:	4f54310a 	.word	0x4f54310a

08008328 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b086      	sub	sp, #24
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
 8008330:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008338:	697b      	ldr	r3, [r7, #20]
 800833a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	333c      	adds	r3, #60	; 0x3c
 8008340:	3304      	adds	r3, #4
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	015a      	lsls	r2, r3, #5
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	4413      	add	r3, r2
 800834e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008352:	689b      	ldr	r3, [r3, #8]
 8008354:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	4a15      	ldr	r2, [pc, #84]	; (80083b0 <PCD_EP_OutSetupPacket_int+0x88>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d90e      	bls.n	800837c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008364:	2b00      	cmp	r3, #0
 8008366:	d009      	beq.n	800837c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	015a      	lsls	r2, r3, #5
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	4413      	add	r3, r2
 8008370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008374:	461a      	mov	r2, r3
 8008376:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800837a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f00f fd51 	bl	8017e24 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	4a0a      	ldr	r2, [pc, #40]	; (80083b0 <PCD_EP_OutSetupPacket_int+0x88>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d90c      	bls.n	80083a4 <PCD_EP_OutSetupPacket_int+0x7c>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	691b      	ldr	r3, [r3, #16]
 800838e:	2b01      	cmp	r3, #1
 8008390:	d108      	bne.n	80083a4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6818      	ldr	r0, [r3, #0]
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800839c:	461a      	mov	r2, r3
 800839e:	2101      	movs	r1, #1
 80083a0:	f009 fe7a 	bl	8012098 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80083a4:	2300      	movs	r3, #0
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3718      	adds	r7, #24
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}
 80083ae:	bf00      	nop
 80083b0:	4f54300a 	.word	0x4f54300a

080083b4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b085      	sub	sp, #20
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
 80083bc:	460b      	mov	r3, r1
 80083be:	70fb      	strb	r3, [r7, #3]
 80083c0:	4613      	mov	r3, r2
 80083c2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ca:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80083cc:	78fb      	ldrb	r3, [r7, #3]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d107      	bne.n	80083e2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80083d2:	883b      	ldrh	r3, [r7, #0]
 80083d4:	0419      	lsls	r1, r3, #16
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	68ba      	ldr	r2, [r7, #8]
 80083dc:	430a      	orrs	r2, r1
 80083de:	629a      	str	r2, [r3, #40]	; 0x28
 80083e0:	e028      	b.n	8008434 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083e8:	0c1b      	lsrs	r3, r3, #16
 80083ea:	68ba      	ldr	r2, [r7, #8]
 80083ec:	4413      	add	r3, r2
 80083ee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80083f0:	2300      	movs	r3, #0
 80083f2:	73fb      	strb	r3, [r7, #15]
 80083f4:	e00d      	b.n	8008412 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681a      	ldr	r2, [r3, #0]
 80083fa:	7bfb      	ldrb	r3, [r7, #15]
 80083fc:	3340      	adds	r3, #64	; 0x40
 80083fe:	009b      	lsls	r3, r3, #2
 8008400:	4413      	add	r3, r2
 8008402:	685b      	ldr	r3, [r3, #4]
 8008404:	0c1b      	lsrs	r3, r3, #16
 8008406:	68ba      	ldr	r2, [r7, #8]
 8008408:	4413      	add	r3, r2
 800840a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800840c:	7bfb      	ldrb	r3, [r7, #15]
 800840e:	3301      	adds	r3, #1
 8008410:	73fb      	strb	r3, [r7, #15]
 8008412:	7bfa      	ldrb	r2, [r7, #15]
 8008414:	78fb      	ldrb	r3, [r7, #3]
 8008416:	3b01      	subs	r3, #1
 8008418:	429a      	cmp	r2, r3
 800841a:	d3ec      	bcc.n	80083f6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800841c:	883b      	ldrh	r3, [r7, #0]
 800841e:	0418      	lsls	r0, r3, #16
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6819      	ldr	r1, [r3, #0]
 8008424:	78fb      	ldrb	r3, [r7, #3]
 8008426:	3b01      	subs	r3, #1
 8008428:	68ba      	ldr	r2, [r7, #8]
 800842a:	4302      	orrs	r2, r0
 800842c:	3340      	adds	r3, #64	; 0x40
 800842e:	009b      	lsls	r3, r3, #2
 8008430:	440b      	add	r3, r1
 8008432:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008434:	2300      	movs	r3, #0
}
 8008436:	4618      	mov	r0, r3
 8008438:	3714      	adds	r7, #20
 800843a:	46bd      	mov	sp, r7
 800843c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008440:	4770      	bx	lr

08008442 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8008442:	b480      	push	{r7}
 8008444:	b083      	sub	sp, #12
 8008446:	af00      	add	r7, sp, #0
 8008448:	6078      	str	r0, [r7, #4]
 800844a:	460b      	mov	r3, r1
 800844c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	887a      	ldrh	r2, [r7, #2]
 8008454:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8008456:	2300      	movs	r3, #0
}
 8008458:	4618      	mov	r0, r3
 800845a:	370c      	adds	r7, #12
 800845c:	46bd      	mov	sp, r7
 800845e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008462:	4770      	bx	lr

08008464 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008464:	b480      	push	{r7}
 8008466:	b085      	sub	sp, #20
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2201      	movs	r2, #1
 8008476:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2200      	movs	r2, #0
 800847e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	699b      	ldr	r3, [r3, #24]
 8008486:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008492:	4b05      	ldr	r3, [pc, #20]	; (80084a8 <HAL_PCDEx_ActivateLPM+0x44>)
 8008494:	4313      	orrs	r3, r2
 8008496:	68fa      	ldr	r2, [r7, #12]
 8008498:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800849a:	2300      	movs	r3, #0
}
 800849c:	4618      	mov	r0, r3
 800849e:	3714      	adds	r7, #20
 80084a0:	46bd      	mov	sp, r7
 80084a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a6:	4770      	bx	lr
 80084a8:	10000003 	.word	0x10000003

080084ac <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80084ac:	b480      	push	{r7}
 80084ae:	b083      	sub	sp, #12
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
 80084b4:	460b      	mov	r3, r1
 80084b6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80084b8:	bf00      	nop
 80084ba:	370c      	adds	r7, #12
 80084bc:	46bd      	mov	sp, r7
 80084be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c2:	4770      	bx	lr

080084c4 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 80084c4:	b480      	push	{r7}
 80084c6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 80084c8:	4b05      	ldr	r3, [pc, #20]	; (80084e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4a04      	ldr	r2, [pc, #16]	; (80084e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80084ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80084d2:	6013      	str	r3, [r2, #0]
}
 80084d4:	bf00      	nop
 80084d6:	46bd      	mov	sp, r7
 80084d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084dc:	4770      	bx	lr
 80084de:	bf00      	nop
 80084e0:	58024800 	.word	0x58024800

080084e4 <HAL_PWR_ConfigPVD>:
  *         driver. All combination are allowed: wake up only Cortex-M7, wake up
  *         only Cortex-M4 or wake up Cortex-M7 and Cortex-M4.
  * @retval None.
  */
void HAL_PWR_ConfigPVD (PWR_PVDTypeDef *sConfigPVD)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b083      	sub	sp, #12
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  /* Check the PVD configuration parameter */
  if (sConfigPVD == NULL)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d069      	beq.n	80085c6 <HAL_PWR_ConfigPVD+0xe2>
  /* Check the parameters */
  assert_param (IS_PWR_PVD_LEVEL (sConfigPVD->PVDLevel));
  assert_param (IS_PWR_PVD_MODE (sConfigPVD->Mode));

  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG (PWR->CR1, PWR_CR1_PLS, sConfigPVD->PVDLevel);
 80084f2:	4b38      	ldr	r3, [pc, #224]	; (80085d4 <HAL_PWR_ConfigPVD+0xf0>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	4935      	ldr	r1, [pc, #212]	; (80085d4 <HAL_PWR_ConfigPVD+0xf0>)
 8008500:	4313      	orrs	r3, r2
 8008502:	600b      	str	r3, [r1, #0]

  /* Clear previous config */
#if !defined (DUAL_CORE)
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT ();
 8008504:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008508:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800850c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008510:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008514:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __HAL_PWR_PVD_EXTI_DISABLE_IT ();
 8008518:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800851c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008520:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008524:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008528:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* !defined (DUAL_CORE) */

  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE ();
 800852c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008536:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800853a:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE ();
 800853c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008540:	685b      	ldr	r3, [r3, #4]
 8008542:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008546:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800854a:	6053      	str	r3, [r2, #4]

#if !defined (DUAL_CORE)
  /* Interrupt mode configuration */
  if ((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008554:	2b00      	cmp	r3, #0
 8008556:	d009      	beq.n	800856c <HAL_PWR_ConfigPVD+0x88>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT ();
 8008558:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800855c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008560:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008568:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  }

  /* Event mode configuration */
  if ((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	685b      	ldr	r3, [r3, #4]
 8008570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008574:	2b00      	cmp	r3, #0
 8008576:	d009      	beq.n	800858c <HAL_PWR_ConfigPVD+0xa8>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT ();
 8008578:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800857c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008580:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008588:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  }
#endif /* !defined (DUAL_CORE) */

  /* Rising edge configuration */
  if ((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	f003 0301 	and.w	r3, r3, #1
 8008594:	2b00      	cmp	r3, #0
 8008596:	d007      	beq.n	80085a8 <HAL_PWR_ConfigPVD+0xc4>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE ();
 8008598:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80085a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085a6:	6013      	str	r3, [r2, #0]
  }

  /* Falling edge configuration */
  if ((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	685b      	ldr	r3, [r3, #4]
 80085ac:	f003 0302 	and.w	r3, r3, #2
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d009      	beq.n	80085c8 <HAL_PWR_ConfigPVD+0xe4>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE ();
 80085b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085b8:	685b      	ldr	r3, [r3, #4]
 80085ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80085be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085c2:	6053      	str	r3, [r2, #4]
 80085c4:	e000      	b.n	80085c8 <HAL_PWR_ConfigPVD+0xe4>
    return;
 80085c6:	bf00      	nop
  }
}
 80085c8:	370c      	adds	r7, #12
 80085ca:	46bd      	mov	sp, r7
 80085cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d0:	4770      	bx	lr
 80085d2:	bf00      	nop
 80085d4:	58024800 	.word	0x58024800

080085d8 <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Programmable Voltage Detector (PVD).
  * @retval None.
  */
void HAL_PWR_EnablePVD (void)
{
 80085d8:	b480      	push	{r7}
 80085da:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  SET_BIT (PWR->CR1, PWR_CR1_PVDEN);
 80085dc:	4b05      	ldr	r3, [pc, #20]	; (80085f4 <HAL_PWR_EnablePVD+0x1c>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4a04      	ldr	r2, [pc, #16]	; (80085f4 <HAL_PWR_EnablePVD+0x1c>)
 80085e2:	f043 0310 	orr.w	r3, r3, #16
 80085e6:	6013      	str	r3, [r2, #0]
}
 80085e8:	bf00      	nop
 80085ea:	46bd      	mov	sp, r7
 80085ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f0:	4770      	bx	lr
 80085f2:	bf00      	nop
 80085f4:	58024800 	.word	0x58024800

080085f8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b084      	sub	sp, #16
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008600:	4b19      	ldr	r3, [pc, #100]	; (8008668 <HAL_PWREx_ConfigSupply+0x70>)
 8008602:	68db      	ldr	r3, [r3, #12]
 8008604:	f003 0304 	and.w	r3, r3, #4
 8008608:	2b04      	cmp	r3, #4
 800860a:	d00a      	beq.n	8008622 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800860c:	4b16      	ldr	r3, [pc, #88]	; (8008668 <HAL_PWREx_ConfigSupply+0x70>)
 800860e:	68db      	ldr	r3, [r3, #12]
 8008610:	f003 0307 	and.w	r3, r3, #7
 8008614:	687a      	ldr	r2, [r7, #4]
 8008616:	429a      	cmp	r2, r3
 8008618:	d001      	beq.n	800861e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800861a:	2301      	movs	r3, #1
 800861c:	e01f      	b.n	800865e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800861e:	2300      	movs	r3, #0
 8008620:	e01d      	b.n	800865e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008622:	4b11      	ldr	r3, [pc, #68]	; (8008668 <HAL_PWREx_ConfigSupply+0x70>)
 8008624:	68db      	ldr	r3, [r3, #12]
 8008626:	f023 0207 	bic.w	r2, r3, #7
 800862a:	490f      	ldr	r1, [pc, #60]	; (8008668 <HAL_PWREx_ConfigSupply+0x70>)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	4313      	orrs	r3, r2
 8008630:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008632:	f7fa ffa7 	bl	8003584 <HAL_GetTick>
 8008636:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008638:	e009      	b.n	800864e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800863a:	f7fa ffa3 	bl	8003584 <HAL_GetTick>
 800863e:	4602      	mov	r2, r0
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	1ad3      	subs	r3, r2, r3
 8008644:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008648:	d901      	bls.n	800864e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800864a:	2301      	movs	r3, #1
 800864c:	e007      	b.n	800865e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800864e:	4b06      	ldr	r3, [pc, #24]	; (8008668 <HAL_PWREx_ConfigSupply+0x70>)
 8008650:	685b      	ldr	r3, [r3, #4]
 8008652:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008656:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800865a:	d1ee      	bne.n	800863a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800865c:	2300      	movs	r3, #0
}
 800865e:	4618      	mov	r0, r3
 8008660:	3710      	adds	r7, #16
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}
 8008666:	bf00      	nop
 8008668:	58024800 	.word	0x58024800

0800866c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800866c:	b480      	push	{r7}
 800866e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8008670:	4b05      	ldr	r3, [pc, #20]	; (8008688 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8008672:	68db      	ldr	r3, [r3, #12]
 8008674:	4a04      	ldr	r2, [pc, #16]	; (8008688 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8008676:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800867a:	60d3      	str	r3, [r2, #12]
}
 800867c:	bf00      	nop
 800867e:	46bd      	mov	sp, r7
 8008680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008684:	4770      	bx	lr
 8008686:	bf00      	nop
 8008688:	58024800 	.word	0x58024800

0800868c <HAL_PWREx_PVD_AVD_IRQHandler>:
  * @brief  This function handles the PWR PVD/AVD interrupt request.
  * @note   This API should be called under the PVD_AVD_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_AVD_IRQHandler (void)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	af00      	add	r7, sp, #0
  /* Check if the Programmable Voltage Detector is enabled (PVD) */
  if (READ_BIT (PWR->CR1, PWR_CR1_PVDEN) != 0U)
 8008690:	4b1b      	ldr	r3, [pc, #108]	; (8008700 <HAL_PWREx_PVD_AVD_IRQHandler+0x74>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f003 0310 	and.w	r3, r3, #16
 8008698:	2b00      	cmp	r3, #0
 800869a:	d014      	beq.n	80086c6 <HAL_PWREx_PVD_AVD_IRQHandler+0x3a>
#if defined (DUAL_CORE)
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
#endif /* defined (DUAL_CORE) */
    {
      /* Check PWR D1/CD EXTI flag */
      if (__HAL_PWR_PVD_EXTI_GET_FLAG () != 0U)
 800869c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80086a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086ac:	d10b      	bne.n	80086c6 <HAL_PWREx_PVD_AVD_IRQHandler+0x3a>
      {
        /* PWR PVD interrupt user callback */
        HAL_PWR_PVDCallback ();
 80086ae:	f7fa fa75 	bl	8002b9c <HAL_PWR_PVDCallback>

        /* Clear PWR EXTI D1/CD pending bit */
        __HAL_PWR_PVD_EXTI_CLEAR_FLAG ();
 80086b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80086be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80086c2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }
#endif /* defined (DUAL_CORE) */
  }

  /* Check if the Analog Voltage Detector is enabled (AVD) */
  if (READ_BIT (PWR->CR1, PWR_CR1_AVDEN) != 0U)
 80086c6:	4b0e      	ldr	r3, [pc, #56]	; (8008700 <HAL_PWREx_PVD_AVD_IRQHandler+0x74>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d014      	beq.n	80086fc <HAL_PWREx_PVD_AVD_IRQHandler+0x70>
#if defined (DUAL_CORE)
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
#endif /* defined (DUAL_CORE) */
    {
      /* Check PWR EXTI D1/CD flag */
      if (__HAL_PWR_AVD_EXTI_GET_FLAG () != 0U)
 80086d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80086de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086e2:	d10b      	bne.n	80086fc <HAL_PWREx_PVD_AVD_IRQHandler+0x70>
      {
        /* PWR AVD interrupt user callback */
        HAL_PWREx_AVDCallback ();
 80086e4:	f000 f80e 	bl	8008704 <HAL_PWREx_AVDCallback>

        /* Clear PWR EXTI D1/CD pending bit */
        __HAL_PWR_AVD_EXTI_CLEAR_FLAG ();
 80086e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80086f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80086f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
        __HAL_PWR_AVD_EXTID2_CLEAR_FLAG ();
      }
    }
#endif /* defined (DUAL_CORE) */
  }
}
 80086fc:	bf00      	nop
 80086fe:	bd80      	pop	{r7, pc}
 8008700:	58024800 	.word	0x58024800

08008704 <HAL_PWREx_AVDCallback>:
/**
  * @brief PWR AVD interrupt callback.
  * @retval None.
  */
__weak void HAL_PWREx_AVDCallback (void)
{
 8008704:	b480      	push	{r7}
 8008706:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWR_AVDCallback can be implemented in the user file
  */
}
 8008708:	bf00      	nop
 800870a:	46bd      	mov	sp, r7
 800870c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008710:	4770      	bx	lr
	...

08008714 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b08c      	sub	sp, #48	; 0x30
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d101      	bne.n	8008726 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008722:	2301      	movs	r3, #1
 8008724:	e3ff      	b.n	8008f26 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f003 0301 	and.w	r3, r3, #1
 800872e:	2b00      	cmp	r3, #0
 8008730:	f000 8087 	beq.w	8008842 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008734:	4b99      	ldr	r3, [pc, #612]	; (800899c <HAL_RCC_OscConfig+0x288>)
 8008736:	691b      	ldr	r3, [r3, #16]
 8008738:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800873c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800873e:	4b97      	ldr	r3, [pc, #604]	; (800899c <HAL_RCC_OscConfig+0x288>)
 8008740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008742:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008746:	2b10      	cmp	r3, #16
 8008748:	d007      	beq.n	800875a <HAL_RCC_OscConfig+0x46>
 800874a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800874c:	2b18      	cmp	r3, #24
 800874e:	d110      	bne.n	8008772 <HAL_RCC_OscConfig+0x5e>
 8008750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008752:	f003 0303 	and.w	r3, r3, #3
 8008756:	2b02      	cmp	r3, #2
 8008758:	d10b      	bne.n	8008772 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800875a:	4b90      	ldr	r3, [pc, #576]	; (800899c <HAL_RCC_OscConfig+0x288>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008762:	2b00      	cmp	r3, #0
 8008764:	d06c      	beq.n	8008840 <HAL_RCC_OscConfig+0x12c>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	685b      	ldr	r3, [r3, #4]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d168      	bne.n	8008840 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800876e:	2301      	movs	r3, #1
 8008770:	e3d9      	b.n	8008f26 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	685b      	ldr	r3, [r3, #4]
 8008776:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800877a:	d106      	bne.n	800878a <HAL_RCC_OscConfig+0x76>
 800877c:	4b87      	ldr	r3, [pc, #540]	; (800899c <HAL_RCC_OscConfig+0x288>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a86      	ldr	r2, [pc, #536]	; (800899c <HAL_RCC_OscConfig+0x288>)
 8008782:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008786:	6013      	str	r3, [r2, #0]
 8008788:	e02e      	b.n	80087e8 <HAL_RCC_OscConfig+0xd4>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	685b      	ldr	r3, [r3, #4]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d10c      	bne.n	80087ac <HAL_RCC_OscConfig+0x98>
 8008792:	4b82      	ldr	r3, [pc, #520]	; (800899c <HAL_RCC_OscConfig+0x288>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	4a81      	ldr	r2, [pc, #516]	; (800899c <HAL_RCC_OscConfig+0x288>)
 8008798:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800879c:	6013      	str	r3, [r2, #0]
 800879e:	4b7f      	ldr	r3, [pc, #508]	; (800899c <HAL_RCC_OscConfig+0x288>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4a7e      	ldr	r2, [pc, #504]	; (800899c <HAL_RCC_OscConfig+0x288>)
 80087a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80087a8:	6013      	str	r3, [r2, #0]
 80087aa:	e01d      	b.n	80087e8 <HAL_RCC_OscConfig+0xd4>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	685b      	ldr	r3, [r3, #4]
 80087b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80087b4:	d10c      	bne.n	80087d0 <HAL_RCC_OscConfig+0xbc>
 80087b6:	4b79      	ldr	r3, [pc, #484]	; (800899c <HAL_RCC_OscConfig+0x288>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	4a78      	ldr	r2, [pc, #480]	; (800899c <HAL_RCC_OscConfig+0x288>)
 80087bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80087c0:	6013      	str	r3, [r2, #0]
 80087c2:	4b76      	ldr	r3, [pc, #472]	; (800899c <HAL_RCC_OscConfig+0x288>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4a75      	ldr	r2, [pc, #468]	; (800899c <HAL_RCC_OscConfig+0x288>)
 80087c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80087cc:	6013      	str	r3, [r2, #0]
 80087ce:	e00b      	b.n	80087e8 <HAL_RCC_OscConfig+0xd4>
 80087d0:	4b72      	ldr	r3, [pc, #456]	; (800899c <HAL_RCC_OscConfig+0x288>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4a71      	ldr	r2, [pc, #452]	; (800899c <HAL_RCC_OscConfig+0x288>)
 80087d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80087da:	6013      	str	r3, [r2, #0]
 80087dc:	4b6f      	ldr	r3, [pc, #444]	; (800899c <HAL_RCC_OscConfig+0x288>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a6e      	ldr	r2, [pc, #440]	; (800899c <HAL_RCC_OscConfig+0x288>)
 80087e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80087e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	685b      	ldr	r3, [r3, #4]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d013      	beq.n	8008818 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087f0:	f7fa fec8 	bl	8003584 <HAL_GetTick>
 80087f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80087f6:	e008      	b.n	800880a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80087f8:	f7fa fec4 	bl	8003584 <HAL_GetTick>
 80087fc:	4602      	mov	r2, r0
 80087fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008800:	1ad3      	subs	r3, r2, r3
 8008802:	2b64      	cmp	r3, #100	; 0x64
 8008804:	d901      	bls.n	800880a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008806:	2303      	movs	r3, #3
 8008808:	e38d      	b.n	8008f26 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800880a:	4b64      	ldr	r3, [pc, #400]	; (800899c <HAL_RCC_OscConfig+0x288>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008812:	2b00      	cmp	r3, #0
 8008814:	d0f0      	beq.n	80087f8 <HAL_RCC_OscConfig+0xe4>
 8008816:	e014      	b.n	8008842 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008818:	f7fa feb4 	bl	8003584 <HAL_GetTick>
 800881c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800881e:	e008      	b.n	8008832 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008820:	f7fa feb0 	bl	8003584 <HAL_GetTick>
 8008824:	4602      	mov	r2, r0
 8008826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008828:	1ad3      	subs	r3, r2, r3
 800882a:	2b64      	cmp	r3, #100	; 0x64
 800882c:	d901      	bls.n	8008832 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800882e:	2303      	movs	r3, #3
 8008830:	e379      	b.n	8008f26 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008832:	4b5a      	ldr	r3, [pc, #360]	; (800899c <HAL_RCC_OscConfig+0x288>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800883a:	2b00      	cmp	r3, #0
 800883c:	d1f0      	bne.n	8008820 <HAL_RCC_OscConfig+0x10c>
 800883e:	e000      	b.n	8008842 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008840:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f003 0302 	and.w	r3, r3, #2
 800884a:	2b00      	cmp	r3, #0
 800884c:	f000 80ae 	beq.w	80089ac <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008850:	4b52      	ldr	r3, [pc, #328]	; (800899c <HAL_RCC_OscConfig+0x288>)
 8008852:	691b      	ldr	r3, [r3, #16]
 8008854:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008858:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800885a:	4b50      	ldr	r3, [pc, #320]	; (800899c <HAL_RCC_OscConfig+0x288>)
 800885c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800885e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008860:	6a3b      	ldr	r3, [r7, #32]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d007      	beq.n	8008876 <HAL_RCC_OscConfig+0x162>
 8008866:	6a3b      	ldr	r3, [r7, #32]
 8008868:	2b18      	cmp	r3, #24
 800886a:	d13a      	bne.n	80088e2 <HAL_RCC_OscConfig+0x1ce>
 800886c:	69fb      	ldr	r3, [r7, #28]
 800886e:	f003 0303 	and.w	r3, r3, #3
 8008872:	2b00      	cmp	r3, #0
 8008874:	d135      	bne.n	80088e2 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008876:	4b49      	ldr	r3, [pc, #292]	; (800899c <HAL_RCC_OscConfig+0x288>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f003 0304 	and.w	r3, r3, #4
 800887e:	2b00      	cmp	r3, #0
 8008880:	d005      	beq.n	800888e <HAL_RCC_OscConfig+0x17a>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	68db      	ldr	r3, [r3, #12]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d101      	bne.n	800888e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800888a:	2301      	movs	r3, #1
 800888c:	e34b      	b.n	8008f26 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800888e:	f7fa fea7 	bl	80035e0 <HAL_GetREVID>
 8008892:	4602      	mov	r2, r0
 8008894:	f241 0303 	movw	r3, #4099	; 0x1003
 8008898:	429a      	cmp	r2, r3
 800889a:	d817      	bhi.n	80088cc <HAL_RCC_OscConfig+0x1b8>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	691b      	ldr	r3, [r3, #16]
 80088a0:	2b40      	cmp	r3, #64	; 0x40
 80088a2:	d108      	bne.n	80088b6 <HAL_RCC_OscConfig+0x1a2>
 80088a4:	4b3d      	ldr	r3, [pc, #244]	; (800899c <HAL_RCC_OscConfig+0x288>)
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80088ac:	4a3b      	ldr	r2, [pc, #236]	; (800899c <HAL_RCC_OscConfig+0x288>)
 80088ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088b2:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80088b4:	e07a      	b.n	80089ac <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088b6:	4b39      	ldr	r3, [pc, #228]	; (800899c <HAL_RCC_OscConfig+0x288>)
 80088b8:	685b      	ldr	r3, [r3, #4]
 80088ba:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	691b      	ldr	r3, [r3, #16]
 80088c2:	031b      	lsls	r3, r3, #12
 80088c4:	4935      	ldr	r1, [pc, #212]	; (800899c <HAL_RCC_OscConfig+0x288>)
 80088c6:	4313      	orrs	r3, r2
 80088c8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80088ca:	e06f      	b.n	80089ac <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088cc:	4b33      	ldr	r3, [pc, #204]	; (800899c <HAL_RCC_OscConfig+0x288>)
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	691b      	ldr	r3, [r3, #16]
 80088d8:	061b      	lsls	r3, r3, #24
 80088da:	4930      	ldr	r1, [pc, #192]	; (800899c <HAL_RCC_OscConfig+0x288>)
 80088dc:	4313      	orrs	r3, r2
 80088de:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80088e0:	e064      	b.n	80089ac <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	68db      	ldr	r3, [r3, #12]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d045      	beq.n	8008976 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80088ea:	4b2c      	ldr	r3, [pc, #176]	; (800899c <HAL_RCC_OscConfig+0x288>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f023 0219 	bic.w	r2, r3, #25
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	68db      	ldr	r3, [r3, #12]
 80088f6:	4929      	ldr	r1, [pc, #164]	; (800899c <HAL_RCC_OscConfig+0x288>)
 80088f8:	4313      	orrs	r3, r2
 80088fa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088fc:	f7fa fe42 	bl	8003584 <HAL_GetTick>
 8008900:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008902:	e008      	b.n	8008916 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008904:	f7fa fe3e 	bl	8003584 <HAL_GetTick>
 8008908:	4602      	mov	r2, r0
 800890a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800890c:	1ad3      	subs	r3, r2, r3
 800890e:	2b02      	cmp	r3, #2
 8008910:	d901      	bls.n	8008916 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8008912:	2303      	movs	r3, #3
 8008914:	e307      	b.n	8008f26 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008916:	4b21      	ldr	r3, [pc, #132]	; (800899c <HAL_RCC_OscConfig+0x288>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f003 0304 	and.w	r3, r3, #4
 800891e:	2b00      	cmp	r3, #0
 8008920:	d0f0      	beq.n	8008904 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008922:	f7fa fe5d 	bl	80035e0 <HAL_GetREVID>
 8008926:	4602      	mov	r2, r0
 8008928:	f241 0303 	movw	r3, #4099	; 0x1003
 800892c:	429a      	cmp	r2, r3
 800892e:	d817      	bhi.n	8008960 <HAL_RCC_OscConfig+0x24c>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	691b      	ldr	r3, [r3, #16]
 8008934:	2b40      	cmp	r3, #64	; 0x40
 8008936:	d108      	bne.n	800894a <HAL_RCC_OscConfig+0x236>
 8008938:	4b18      	ldr	r3, [pc, #96]	; (800899c <HAL_RCC_OscConfig+0x288>)
 800893a:	685b      	ldr	r3, [r3, #4]
 800893c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008940:	4a16      	ldr	r2, [pc, #88]	; (800899c <HAL_RCC_OscConfig+0x288>)
 8008942:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008946:	6053      	str	r3, [r2, #4]
 8008948:	e030      	b.n	80089ac <HAL_RCC_OscConfig+0x298>
 800894a:	4b14      	ldr	r3, [pc, #80]	; (800899c <HAL_RCC_OscConfig+0x288>)
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	691b      	ldr	r3, [r3, #16]
 8008956:	031b      	lsls	r3, r3, #12
 8008958:	4910      	ldr	r1, [pc, #64]	; (800899c <HAL_RCC_OscConfig+0x288>)
 800895a:	4313      	orrs	r3, r2
 800895c:	604b      	str	r3, [r1, #4]
 800895e:	e025      	b.n	80089ac <HAL_RCC_OscConfig+0x298>
 8008960:	4b0e      	ldr	r3, [pc, #56]	; (800899c <HAL_RCC_OscConfig+0x288>)
 8008962:	685b      	ldr	r3, [r3, #4]
 8008964:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	691b      	ldr	r3, [r3, #16]
 800896c:	061b      	lsls	r3, r3, #24
 800896e:	490b      	ldr	r1, [pc, #44]	; (800899c <HAL_RCC_OscConfig+0x288>)
 8008970:	4313      	orrs	r3, r2
 8008972:	604b      	str	r3, [r1, #4]
 8008974:	e01a      	b.n	80089ac <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008976:	4b09      	ldr	r3, [pc, #36]	; (800899c <HAL_RCC_OscConfig+0x288>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	4a08      	ldr	r2, [pc, #32]	; (800899c <HAL_RCC_OscConfig+0x288>)
 800897c:	f023 0301 	bic.w	r3, r3, #1
 8008980:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008982:	f7fa fdff 	bl	8003584 <HAL_GetTick>
 8008986:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008988:	e00a      	b.n	80089a0 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800898a:	f7fa fdfb 	bl	8003584 <HAL_GetTick>
 800898e:	4602      	mov	r2, r0
 8008990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008992:	1ad3      	subs	r3, r2, r3
 8008994:	2b02      	cmp	r3, #2
 8008996:	d903      	bls.n	80089a0 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8008998:	2303      	movs	r3, #3
 800899a:	e2c4      	b.n	8008f26 <HAL_RCC_OscConfig+0x812>
 800899c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80089a0:	4ba4      	ldr	r3, [pc, #656]	; (8008c34 <HAL_RCC_OscConfig+0x520>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f003 0304 	and.w	r3, r3, #4
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d1ee      	bne.n	800898a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f003 0310 	and.w	r3, r3, #16
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	f000 80a9 	beq.w	8008b0c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80089ba:	4b9e      	ldr	r3, [pc, #632]	; (8008c34 <HAL_RCC_OscConfig+0x520>)
 80089bc:	691b      	ldr	r3, [r3, #16]
 80089be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80089c2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80089c4:	4b9b      	ldr	r3, [pc, #620]	; (8008c34 <HAL_RCC_OscConfig+0x520>)
 80089c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089c8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80089ca:	69bb      	ldr	r3, [r7, #24]
 80089cc:	2b08      	cmp	r3, #8
 80089ce:	d007      	beq.n	80089e0 <HAL_RCC_OscConfig+0x2cc>
 80089d0:	69bb      	ldr	r3, [r7, #24]
 80089d2:	2b18      	cmp	r3, #24
 80089d4:	d13a      	bne.n	8008a4c <HAL_RCC_OscConfig+0x338>
 80089d6:	697b      	ldr	r3, [r7, #20]
 80089d8:	f003 0303 	and.w	r3, r3, #3
 80089dc:	2b01      	cmp	r3, #1
 80089de:	d135      	bne.n	8008a4c <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80089e0:	4b94      	ldr	r3, [pc, #592]	; (8008c34 <HAL_RCC_OscConfig+0x520>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d005      	beq.n	80089f8 <HAL_RCC_OscConfig+0x2e4>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	69db      	ldr	r3, [r3, #28]
 80089f0:	2b80      	cmp	r3, #128	; 0x80
 80089f2:	d001      	beq.n	80089f8 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80089f4:	2301      	movs	r3, #1
 80089f6:	e296      	b.n	8008f26 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80089f8:	f7fa fdf2 	bl	80035e0 <HAL_GetREVID>
 80089fc:	4602      	mov	r2, r0
 80089fe:	f241 0303 	movw	r3, #4099	; 0x1003
 8008a02:	429a      	cmp	r2, r3
 8008a04:	d817      	bhi.n	8008a36 <HAL_RCC_OscConfig+0x322>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6a1b      	ldr	r3, [r3, #32]
 8008a0a:	2b20      	cmp	r3, #32
 8008a0c:	d108      	bne.n	8008a20 <HAL_RCC_OscConfig+0x30c>
 8008a0e:	4b89      	ldr	r3, [pc, #548]	; (8008c34 <HAL_RCC_OscConfig+0x520>)
 8008a10:	685b      	ldr	r3, [r3, #4]
 8008a12:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008a16:	4a87      	ldr	r2, [pc, #540]	; (8008c34 <HAL_RCC_OscConfig+0x520>)
 8008a18:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a1c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008a1e:	e075      	b.n	8008b0c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008a20:	4b84      	ldr	r3, [pc, #528]	; (8008c34 <HAL_RCC_OscConfig+0x520>)
 8008a22:	685b      	ldr	r3, [r3, #4]
 8008a24:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	6a1b      	ldr	r3, [r3, #32]
 8008a2c:	069b      	lsls	r3, r3, #26
 8008a2e:	4981      	ldr	r1, [pc, #516]	; (8008c34 <HAL_RCC_OscConfig+0x520>)
 8008a30:	4313      	orrs	r3, r2
 8008a32:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008a34:	e06a      	b.n	8008b0c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008a36:	4b7f      	ldr	r3, [pc, #508]	; (8008c34 <HAL_RCC_OscConfig+0x520>)
 8008a38:	68db      	ldr	r3, [r3, #12]
 8008a3a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6a1b      	ldr	r3, [r3, #32]
 8008a42:	061b      	lsls	r3, r3, #24
 8008a44:	497b      	ldr	r1, [pc, #492]	; (8008c34 <HAL_RCC_OscConfig+0x520>)
 8008a46:	4313      	orrs	r3, r2
 8008a48:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008a4a:	e05f      	b.n	8008b0c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	69db      	ldr	r3, [r3, #28]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d042      	beq.n	8008ada <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008a54:	4b77      	ldr	r3, [pc, #476]	; (8008c34 <HAL_RCC_OscConfig+0x520>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	4a76      	ldr	r2, [pc, #472]	; (8008c34 <HAL_RCC_OscConfig+0x520>)
 8008a5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a60:	f7fa fd90 	bl	8003584 <HAL_GetTick>
 8008a64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008a66:	e008      	b.n	8008a7a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008a68:	f7fa fd8c 	bl	8003584 <HAL_GetTick>
 8008a6c:	4602      	mov	r2, r0
 8008a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a70:	1ad3      	subs	r3, r2, r3
 8008a72:	2b02      	cmp	r3, #2
 8008a74:	d901      	bls.n	8008a7a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8008a76:	2303      	movs	r3, #3
 8008a78:	e255      	b.n	8008f26 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008a7a:	4b6e      	ldr	r3, [pc, #440]	; (8008c34 <HAL_RCC_OscConfig+0x520>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d0f0      	beq.n	8008a68 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008a86:	f7fa fdab 	bl	80035e0 <HAL_GetREVID>
 8008a8a:	4602      	mov	r2, r0
 8008a8c:	f241 0303 	movw	r3, #4099	; 0x1003
 8008a90:	429a      	cmp	r2, r3
 8008a92:	d817      	bhi.n	8008ac4 <HAL_RCC_OscConfig+0x3b0>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6a1b      	ldr	r3, [r3, #32]
 8008a98:	2b20      	cmp	r3, #32
 8008a9a:	d108      	bne.n	8008aae <HAL_RCC_OscConfig+0x39a>
 8008a9c:	4b65      	ldr	r3, [pc, #404]	; (8008c34 <HAL_RCC_OscConfig+0x520>)
 8008a9e:	685b      	ldr	r3, [r3, #4]
 8008aa0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008aa4:	4a63      	ldr	r2, [pc, #396]	; (8008c34 <HAL_RCC_OscConfig+0x520>)
 8008aa6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008aaa:	6053      	str	r3, [r2, #4]
 8008aac:	e02e      	b.n	8008b0c <HAL_RCC_OscConfig+0x3f8>
 8008aae:	4b61      	ldr	r3, [pc, #388]	; (8008c34 <HAL_RCC_OscConfig+0x520>)
 8008ab0:	685b      	ldr	r3, [r3, #4]
 8008ab2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6a1b      	ldr	r3, [r3, #32]
 8008aba:	069b      	lsls	r3, r3, #26
 8008abc:	495d      	ldr	r1, [pc, #372]	; (8008c34 <HAL_RCC_OscConfig+0x520>)
 8008abe:	4313      	orrs	r3, r2
 8008ac0:	604b      	str	r3, [r1, #4]
 8008ac2:	e023      	b.n	8008b0c <HAL_RCC_OscConfig+0x3f8>
 8008ac4:	4b5b      	ldr	r3, [pc, #364]	; (8008c34 <HAL_RCC_OscConfig+0x520>)
 8008ac6:	68db      	ldr	r3, [r3, #12]
 8008ac8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6a1b      	ldr	r3, [r3, #32]
 8008ad0:	061b      	lsls	r3, r3, #24
 8008ad2:	4958      	ldr	r1, [pc, #352]	; (8008c34 <HAL_RCC_OscConfig+0x520>)
 8008ad4:	4313      	orrs	r3, r2
 8008ad6:	60cb      	str	r3, [r1, #12]
 8008ad8:	e018      	b.n	8008b0c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008ada:	4b56      	ldr	r3, [pc, #344]	; (8008c34 <HAL_RCC_OscConfig+0x520>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4a55      	ldr	r2, [pc, #340]	; (8008c34 <HAL_RCC_OscConfig+0x520>)
 8008ae0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ae4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ae6:	f7fa fd4d 	bl	8003584 <HAL_GetTick>
 8008aea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008aec:	e008      	b.n	8008b00 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008aee:	f7fa fd49 	bl	8003584 <HAL_GetTick>
 8008af2:	4602      	mov	r2, r0
 8008af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af6:	1ad3      	subs	r3, r2, r3
 8008af8:	2b02      	cmp	r3, #2
 8008afa:	d901      	bls.n	8008b00 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8008afc:	2303      	movs	r3, #3
 8008afe:	e212      	b.n	8008f26 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008b00:	4b4c      	ldr	r3, [pc, #304]	; (8008c34 <HAL_RCC_OscConfig+0x520>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d1f0      	bne.n	8008aee <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f003 0308 	and.w	r3, r3, #8
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d036      	beq.n	8008b86 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	695b      	ldr	r3, [r3, #20]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d019      	beq.n	8008b54 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008b20:	4b44      	ldr	r3, [pc, #272]	; (8008c34 <HAL_RCC_OscConfig+0x520>)
 8008b22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b24:	4a43      	ldr	r2, [pc, #268]	; (8008c34 <HAL_RCC_OscConfig+0x520>)
 8008b26:	f043 0301 	orr.w	r3, r3, #1
 8008b2a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b2c:	f7fa fd2a 	bl	8003584 <HAL_GetTick>
 8008b30:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008b32:	e008      	b.n	8008b46 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008b34:	f7fa fd26 	bl	8003584 <HAL_GetTick>
 8008b38:	4602      	mov	r2, r0
 8008b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b3c:	1ad3      	subs	r3, r2, r3
 8008b3e:	2b02      	cmp	r3, #2
 8008b40:	d901      	bls.n	8008b46 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8008b42:	2303      	movs	r3, #3
 8008b44:	e1ef      	b.n	8008f26 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008b46:	4b3b      	ldr	r3, [pc, #236]	; (8008c34 <HAL_RCC_OscConfig+0x520>)
 8008b48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b4a:	f003 0302 	and.w	r3, r3, #2
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d0f0      	beq.n	8008b34 <HAL_RCC_OscConfig+0x420>
 8008b52:	e018      	b.n	8008b86 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008b54:	4b37      	ldr	r3, [pc, #220]	; (8008c34 <HAL_RCC_OscConfig+0x520>)
 8008b56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b58:	4a36      	ldr	r2, [pc, #216]	; (8008c34 <HAL_RCC_OscConfig+0x520>)
 8008b5a:	f023 0301 	bic.w	r3, r3, #1
 8008b5e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b60:	f7fa fd10 	bl	8003584 <HAL_GetTick>
 8008b64:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008b66:	e008      	b.n	8008b7a <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008b68:	f7fa fd0c 	bl	8003584 <HAL_GetTick>
 8008b6c:	4602      	mov	r2, r0
 8008b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b70:	1ad3      	subs	r3, r2, r3
 8008b72:	2b02      	cmp	r3, #2
 8008b74:	d901      	bls.n	8008b7a <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8008b76:	2303      	movs	r3, #3
 8008b78:	e1d5      	b.n	8008f26 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008b7a:	4b2e      	ldr	r3, [pc, #184]	; (8008c34 <HAL_RCC_OscConfig+0x520>)
 8008b7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b7e:	f003 0302 	and.w	r3, r3, #2
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d1f0      	bne.n	8008b68 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f003 0320 	and.w	r3, r3, #32
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d036      	beq.n	8008c00 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	699b      	ldr	r3, [r3, #24]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d019      	beq.n	8008bce <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008b9a:	4b26      	ldr	r3, [pc, #152]	; (8008c34 <HAL_RCC_OscConfig+0x520>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	4a25      	ldr	r2, [pc, #148]	; (8008c34 <HAL_RCC_OscConfig+0x520>)
 8008ba0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008ba4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008ba6:	f7fa fced 	bl	8003584 <HAL_GetTick>
 8008baa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008bac:	e008      	b.n	8008bc0 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008bae:	f7fa fce9 	bl	8003584 <HAL_GetTick>
 8008bb2:	4602      	mov	r2, r0
 8008bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb6:	1ad3      	subs	r3, r2, r3
 8008bb8:	2b02      	cmp	r3, #2
 8008bba:	d901      	bls.n	8008bc0 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8008bbc:	2303      	movs	r3, #3
 8008bbe:	e1b2      	b.n	8008f26 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008bc0:	4b1c      	ldr	r3, [pc, #112]	; (8008c34 <HAL_RCC_OscConfig+0x520>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d0f0      	beq.n	8008bae <HAL_RCC_OscConfig+0x49a>
 8008bcc:	e018      	b.n	8008c00 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008bce:	4b19      	ldr	r3, [pc, #100]	; (8008c34 <HAL_RCC_OscConfig+0x520>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	4a18      	ldr	r2, [pc, #96]	; (8008c34 <HAL_RCC_OscConfig+0x520>)
 8008bd4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008bd8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008bda:	f7fa fcd3 	bl	8003584 <HAL_GetTick>
 8008bde:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008be0:	e008      	b.n	8008bf4 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008be2:	f7fa fccf 	bl	8003584 <HAL_GetTick>
 8008be6:	4602      	mov	r2, r0
 8008be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bea:	1ad3      	subs	r3, r2, r3
 8008bec:	2b02      	cmp	r3, #2
 8008bee:	d901      	bls.n	8008bf4 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8008bf0:	2303      	movs	r3, #3
 8008bf2:	e198      	b.n	8008f26 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008bf4:	4b0f      	ldr	r3, [pc, #60]	; (8008c34 <HAL_RCC_OscConfig+0x520>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d1f0      	bne.n	8008be2 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f003 0304 	and.w	r3, r3, #4
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	f000 8085 	beq.w	8008d18 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008c0e:	4b0a      	ldr	r3, [pc, #40]	; (8008c38 <HAL_RCC_OscConfig+0x524>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	4a09      	ldr	r2, [pc, #36]	; (8008c38 <HAL_RCC_OscConfig+0x524>)
 8008c14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c18:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008c1a:	f7fa fcb3 	bl	8003584 <HAL_GetTick>
 8008c1e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008c20:	e00c      	b.n	8008c3c <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008c22:	f7fa fcaf 	bl	8003584 <HAL_GetTick>
 8008c26:	4602      	mov	r2, r0
 8008c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c2a:	1ad3      	subs	r3, r2, r3
 8008c2c:	2b64      	cmp	r3, #100	; 0x64
 8008c2e:	d905      	bls.n	8008c3c <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8008c30:	2303      	movs	r3, #3
 8008c32:	e178      	b.n	8008f26 <HAL_RCC_OscConfig+0x812>
 8008c34:	58024400 	.word	0x58024400
 8008c38:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008c3c:	4b96      	ldr	r3, [pc, #600]	; (8008e98 <HAL_RCC_OscConfig+0x784>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d0ec      	beq.n	8008c22 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	689b      	ldr	r3, [r3, #8]
 8008c4c:	2b01      	cmp	r3, #1
 8008c4e:	d106      	bne.n	8008c5e <HAL_RCC_OscConfig+0x54a>
 8008c50:	4b92      	ldr	r3, [pc, #584]	; (8008e9c <HAL_RCC_OscConfig+0x788>)
 8008c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c54:	4a91      	ldr	r2, [pc, #580]	; (8008e9c <HAL_RCC_OscConfig+0x788>)
 8008c56:	f043 0301 	orr.w	r3, r3, #1
 8008c5a:	6713      	str	r3, [r2, #112]	; 0x70
 8008c5c:	e02d      	b.n	8008cba <HAL_RCC_OscConfig+0x5a6>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	689b      	ldr	r3, [r3, #8]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d10c      	bne.n	8008c80 <HAL_RCC_OscConfig+0x56c>
 8008c66:	4b8d      	ldr	r3, [pc, #564]	; (8008e9c <HAL_RCC_OscConfig+0x788>)
 8008c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c6a:	4a8c      	ldr	r2, [pc, #560]	; (8008e9c <HAL_RCC_OscConfig+0x788>)
 8008c6c:	f023 0301 	bic.w	r3, r3, #1
 8008c70:	6713      	str	r3, [r2, #112]	; 0x70
 8008c72:	4b8a      	ldr	r3, [pc, #552]	; (8008e9c <HAL_RCC_OscConfig+0x788>)
 8008c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c76:	4a89      	ldr	r2, [pc, #548]	; (8008e9c <HAL_RCC_OscConfig+0x788>)
 8008c78:	f023 0304 	bic.w	r3, r3, #4
 8008c7c:	6713      	str	r3, [r2, #112]	; 0x70
 8008c7e:	e01c      	b.n	8008cba <HAL_RCC_OscConfig+0x5a6>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	689b      	ldr	r3, [r3, #8]
 8008c84:	2b05      	cmp	r3, #5
 8008c86:	d10c      	bne.n	8008ca2 <HAL_RCC_OscConfig+0x58e>
 8008c88:	4b84      	ldr	r3, [pc, #528]	; (8008e9c <HAL_RCC_OscConfig+0x788>)
 8008c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c8c:	4a83      	ldr	r2, [pc, #524]	; (8008e9c <HAL_RCC_OscConfig+0x788>)
 8008c8e:	f043 0304 	orr.w	r3, r3, #4
 8008c92:	6713      	str	r3, [r2, #112]	; 0x70
 8008c94:	4b81      	ldr	r3, [pc, #516]	; (8008e9c <HAL_RCC_OscConfig+0x788>)
 8008c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c98:	4a80      	ldr	r2, [pc, #512]	; (8008e9c <HAL_RCC_OscConfig+0x788>)
 8008c9a:	f043 0301 	orr.w	r3, r3, #1
 8008c9e:	6713      	str	r3, [r2, #112]	; 0x70
 8008ca0:	e00b      	b.n	8008cba <HAL_RCC_OscConfig+0x5a6>
 8008ca2:	4b7e      	ldr	r3, [pc, #504]	; (8008e9c <HAL_RCC_OscConfig+0x788>)
 8008ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ca6:	4a7d      	ldr	r2, [pc, #500]	; (8008e9c <HAL_RCC_OscConfig+0x788>)
 8008ca8:	f023 0301 	bic.w	r3, r3, #1
 8008cac:	6713      	str	r3, [r2, #112]	; 0x70
 8008cae:	4b7b      	ldr	r3, [pc, #492]	; (8008e9c <HAL_RCC_OscConfig+0x788>)
 8008cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cb2:	4a7a      	ldr	r2, [pc, #488]	; (8008e9c <HAL_RCC_OscConfig+0x788>)
 8008cb4:	f023 0304 	bic.w	r3, r3, #4
 8008cb8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	689b      	ldr	r3, [r3, #8]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d015      	beq.n	8008cee <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008cc2:	f7fa fc5f 	bl	8003584 <HAL_GetTick>
 8008cc6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008cc8:	e00a      	b.n	8008ce0 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008cca:	f7fa fc5b 	bl	8003584 <HAL_GetTick>
 8008cce:	4602      	mov	r2, r0
 8008cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cd2:	1ad3      	subs	r3, r2, r3
 8008cd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d901      	bls.n	8008ce0 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8008cdc:	2303      	movs	r3, #3
 8008cde:	e122      	b.n	8008f26 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008ce0:	4b6e      	ldr	r3, [pc, #440]	; (8008e9c <HAL_RCC_OscConfig+0x788>)
 8008ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ce4:	f003 0302 	and.w	r3, r3, #2
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d0ee      	beq.n	8008cca <HAL_RCC_OscConfig+0x5b6>
 8008cec:	e014      	b.n	8008d18 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008cee:	f7fa fc49 	bl	8003584 <HAL_GetTick>
 8008cf2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008cf4:	e00a      	b.n	8008d0c <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008cf6:	f7fa fc45 	bl	8003584 <HAL_GetTick>
 8008cfa:	4602      	mov	r2, r0
 8008cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cfe:	1ad3      	subs	r3, r2, r3
 8008d00:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d901      	bls.n	8008d0c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8008d08:	2303      	movs	r3, #3
 8008d0a:	e10c      	b.n	8008f26 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008d0c:	4b63      	ldr	r3, [pc, #396]	; (8008e9c <HAL_RCC_OscConfig+0x788>)
 8008d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d10:	f003 0302 	and.w	r3, r3, #2
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d1ee      	bne.n	8008cf6 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	f000 8101 	beq.w	8008f24 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008d22:	4b5e      	ldr	r3, [pc, #376]	; (8008e9c <HAL_RCC_OscConfig+0x788>)
 8008d24:	691b      	ldr	r3, [r3, #16]
 8008d26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008d2a:	2b18      	cmp	r3, #24
 8008d2c:	f000 80bc 	beq.w	8008ea8 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d34:	2b02      	cmp	r3, #2
 8008d36:	f040 8095 	bne.w	8008e64 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d3a:	4b58      	ldr	r3, [pc, #352]	; (8008e9c <HAL_RCC_OscConfig+0x788>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	4a57      	ldr	r2, [pc, #348]	; (8008e9c <HAL_RCC_OscConfig+0x788>)
 8008d40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008d44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d46:	f7fa fc1d 	bl	8003584 <HAL_GetTick>
 8008d4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008d4c:	e008      	b.n	8008d60 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008d4e:	f7fa fc19 	bl	8003584 <HAL_GetTick>
 8008d52:	4602      	mov	r2, r0
 8008d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d56:	1ad3      	subs	r3, r2, r3
 8008d58:	2b02      	cmp	r3, #2
 8008d5a:	d901      	bls.n	8008d60 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8008d5c:	2303      	movs	r3, #3
 8008d5e:	e0e2      	b.n	8008f26 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008d60:	4b4e      	ldr	r3, [pc, #312]	; (8008e9c <HAL_RCC_OscConfig+0x788>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d1f0      	bne.n	8008d4e <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008d6c:	4b4b      	ldr	r3, [pc, #300]	; (8008e9c <HAL_RCC_OscConfig+0x788>)
 8008d6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008d70:	4b4b      	ldr	r3, [pc, #300]	; (8008ea0 <HAL_RCC_OscConfig+0x78c>)
 8008d72:	4013      	ands	r3, r2
 8008d74:	687a      	ldr	r2, [r7, #4]
 8008d76:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008d78:	687a      	ldr	r2, [r7, #4]
 8008d7a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008d7c:	0112      	lsls	r2, r2, #4
 8008d7e:	430a      	orrs	r2, r1
 8008d80:	4946      	ldr	r1, [pc, #280]	; (8008e9c <HAL_RCC_OscConfig+0x788>)
 8008d82:	4313      	orrs	r3, r2
 8008d84:	628b      	str	r3, [r1, #40]	; 0x28
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d8a:	3b01      	subs	r3, #1
 8008d8c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d94:	3b01      	subs	r3, #1
 8008d96:	025b      	lsls	r3, r3, #9
 8008d98:	b29b      	uxth	r3, r3
 8008d9a:	431a      	orrs	r2, r3
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008da0:	3b01      	subs	r3, #1
 8008da2:	041b      	lsls	r3, r3, #16
 8008da4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008da8:	431a      	orrs	r2, r3
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dae:	3b01      	subs	r3, #1
 8008db0:	061b      	lsls	r3, r3, #24
 8008db2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008db6:	4939      	ldr	r1, [pc, #228]	; (8008e9c <HAL_RCC_OscConfig+0x788>)
 8008db8:	4313      	orrs	r3, r2
 8008dba:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8008dbc:	4b37      	ldr	r3, [pc, #220]	; (8008e9c <HAL_RCC_OscConfig+0x788>)
 8008dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dc0:	4a36      	ldr	r2, [pc, #216]	; (8008e9c <HAL_RCC_OscConfig+0x788>)
 8008dc2:	f023 0301 	bic.w	r3, r3, #1
 8008dc6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008dc8:	4b34      	ldr	r3, [pc, #208]	; (8008e9c <HAL_RCC_OscConfig+0x788>)
 8008dca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008dcc:	4b35      	ldr	r3, [pc, #212]	; (8008ea4 <HAL_RCC_OscConfig+0x790>)
 8008dce:	4013      	ands	r3, r2
 8008dd0:	687a      	ldr	r2, [r7, #4]
 8008dd2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008dd4:	00d2      	lsls	r2, r2, #3
 8008dd6:	4931      	ldr	r1, [pc, #196]	; (8008e9c <HAL_RCC_OscConfig+0x788>)
 8008dd8:	4313      	orrs	r3, r2
 8008dda:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008ddc:	4b2f      	ldr	r3, [pc, #188]	; (8008e9c <HAL_RCC_OscConfig+0x788>)
 8008dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008de0:	f023 020c 	bic.w	r2, r3, #12
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008de8:	492c      	ldr	r1, [pc, #176]	; (8008e9c <HAL_RCC_OscConfig+0x788>)
 8008dea:	4313      	orrs	r3, r2
 8008dec:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008dee:	4b2b      	ldr	r3, [pc, #172]	; (8008e9c <HAL_RCC_OscConfig+0x788>)
 8008df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008df2:	f023 0202 	bic.w	r2, r3, #2
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dfa:	4928      	ldr	r1, [pc, #160]	; (8008e9c <HAL_RCC_OscConfig+0x788>)
 8008dfc:	4313      	orrs	r3, r2
 8008dfe:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008e00:	4b26      	ldr	r3, [pc, #152]	; (8008e9c <HAL_RCC_OscConfig+0x788>)
 8008e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e04:	4a25      	ldr	r2, [pc, #148]	; (8008e9c <HAL_RCC_OscConfig+0x788>)
 8008e06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e0c:	4b23      	ldr	r3, [pc, #140]	; (8008e9c <HAL_RCC_OscConfig+0x788>)
 8008e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e10:	4a22      	ldr	r2, [pc, #136]	; (8008e9c <HAL_RCC_OscConfig+0x788>)
 8008e12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008e18:	4b20      	ldr	r3, [pc, #128]	; (8008e9c <HAL_RCC_OscConfig+0x788>)
 8008e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e1c:	4a1f      	ldr	r2, [pc, #124]	; (8008e9c <HAL_RCC_OscConfig+0x788>)
 8008e1e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008e22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008e24:	4b1d      	ldr	r3, [pc, #116]	; (8008e9c <HAL_RCC_OscConfig+0x788>)
 8008e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e28:	4a1c      	ldr	r2, [pc, #112]	; (8008e9c <HAL_RCC_OscConfig+0x788>)
 8008e2a:	f043 0301 	orr.w	r3, r3, #1
 8008e2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008e30:	4b1a      	ldr	r3, [pc, #104]	; (8008e9c <HAL_RCC_OscConfig+0x788>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	4a19      	ldr	r2, [pc, #100]	; (8008e9c <HAL_RCC_OscConfig+0x788>)
 8008e36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008e3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e3c:	f7fa fba2 	bl	8003584 <HAL_GetTick>
 8008e40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008e42:	e008      	b.n	8008e56 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008e44:	f7fa fb9e 	bl	8003584 <HAL_GetTick>
 8008e48:	4602      	mov	r2, r0
 8008e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e4c:	1ad3      	subs	r3, r2, r3
 8008e4e:	2b02      	cmp	r3, #2
 8008e50:	d901      	bls.n	8008e56 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8008e52:	2303      	movs	r3, #3
 8008e54:	e067      	b.n	8008f26 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008e56:	4b11      	ldr	r3, [pc, #68]	; (8008e9c <HAL_RCC_OscConfig+0x788>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d0f0      	beq.n	8008e44 <HAL_RCC_OscConfig+0x730>
 8008e62:	e05f      	b.n	8008f24 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e64:	4b0d      	ldr	r3, [pc, #52]	; (8008e9c <HAL_RCC_OscConfig+0x788>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	4a0c      	ldr	r2, [pc, #48]	; (8008e9c <HAL_RCC_OscConfig+0x788>)
 8008e6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008e6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e70:	f7fa fb88 	bl	8003584 <HAL_GetTick>
 8008e74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008e76:	e008      	b.n	8008e8a <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008e78:	f7fa fb84 	bl	8003584 <HAL_GetTick>
 8008e7c:	4602      	mov	r2, r0
 8008e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e80:	1ad3      	subs	r3, r2, r3
 8008e82:	2b02      	cmp	r3, #2
 8008e84:	d901      	bls.n	8008e8a <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8008e86:	2303      	movs	r3, #3
 8008e88:	e04d      	b.n	8008f26 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008e8a:	4b04      	ldr	r3, [pc, #16]	; (8008e9c <HAL_RCC_OscConfig+0x788>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d1f0      	bne.n	8008e78 <HAL_RCC_OscConfig+0x764>
 8008e96:	e045      	b.n	8008f24 <HAL_RCC_OscConfig+0x810>
 8008e98:	58024800 	.word	0x58024800
 8008e9c:	58024400 	.word	0x58024400
 8008ea0:	fffffc0c 	.word	0xfffffc0c
 8008ea4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008ea8:	4b21      	ldr	r3, [pc, #132]	; (8008f30 <HAL_RCC_OscConfig+0x81c>)
 8008eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eac:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008eae:	4b20      	ldr	r3, [pc, #128]	; (8008f30 <HAL_RCC_OscConfig+0x81c>)
 8008eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eb2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb8:	2b01      	cmp	r3, #1
 8008eba:	d031      	beq.n	8008f20 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ebc:	693b      	ldr	r3, [r7, #16]
 8008ebe:	f003 0203 	and.w	r2, r3, #3
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008ec6:	429a      	cmp	r2, r3
 8008ec8:	d12a      	bne.n	8008f20 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008eca:	693b      	ldr	r3, [r7, #16]
 8008ecc:	091b      	lsrs	r3, r3, #4
 8008ece:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ed6:	429a      	cmp	r2, r3
 8008ed8:	d122      	bne.n	8008f20 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ee4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008ee6:	429a      	cmp	r2, r3
 8008ee8:	d11a      	bne.n	8008f20 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	0a5b      	lsrs	r3, r3, #9
 8008eee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ef6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008ef8:	429a      	cmp	r2, r3
 8008efa:	d111      	bne.n	8008f20 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	0c1b      	lsrs	r3, r3, #16
 8008f00:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f08:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008f0a:	429a      	cmp	r2, r3
 8008f0c:	d108      	bne.n	8008f20 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	0e1b      	lsrs	r3, r3, #24
 8008f12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f1a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008f1c:	429a      	cmp	r2, r3
 8008f1e:	d001      	beq.n	8008f24 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8008f20:	2301      	movs	r3, #1
 8008f22:	e000      	b.n	8008f26 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8008f24:	2300      	movs	r3, #0
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	3730      	adds	r7, #48	; 0x30
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}
 8008f2e:	bf00      	nop
 8008f30:	58024400 	.word	0x58024400

08008f34 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b086      	sub	sp, #24
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d101      	bne.n	8008f48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008f44:	2301      	movs	r3, #1
 8008f46:	e19c      	b.n	8009282 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008f48:	4b8a      	ldr	r3, [pc, #552]	; (8009174 <HAL_RCC_ClockConfig+0x240>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f003 030f 	and.w	r3, r3, #15
 8008f50:	683a      	ldr	r2, [r7, #0]
 8008f52:	429a      	cmp	r2, r3
 8008f54:	d910      	bls.n	8008f78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f56:	4b87      	ldr	r3, [pc, #540]	; (8009174 <HAL_RCC_ClockConfig+0x240>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f023 020f 	bic.w	r2, r3, #15
 8008f5e:	4985      	ldr	r1, [pc, #532]	; (8009174 <HAL_RCC_ClockConfig+0x240>)
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	4313      	orrs	r3, r2
 8008f64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f66:	4b83      	ldr	r3, [pc, #524]	; (8009174 <HAL_RCC_ClockConfig+0x240>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f003 030f 	and.w	r3, r3, #15
 8008f6e:	683a      	ldr	r2, [r7, #0]
 8008f70:	429a      	cmp	r2, r3
 8008f72:	d001      	beq.n	8008f78 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008f74:	2301      	movs	r3, #1
 8008f76:	e184      	b.n	8009282 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f003 0304 	and.w	r3, r3, #4
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d010      	beq.n	8008fa6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	691a      	ldr	r2, [r3, #16]
 8008f88:	4b7b      	ldr	r3, [pc, #492]	; (8009178 <HAL_RCC_ClockConfig+0x244>)
 8008f8a:	699b      	ldr	r3, [r3, #24]
 8008f8c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008f90:	429a      	cmp	r2, r3
 8008f92:	d908      	bls.n	8008fa6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008f94:	4b78      	ldr	r3, [pc, #480]	; (8009178 <HAL_RCC_ClockConfig+0x244>)
 8008f96:	699b      	ldr	r3, [r3, #24]
 8008f98:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	691b      	ldr	r3, [r3, #16]
 8008fa0:	4975      	ldr	r1, [pc, #468]	; (8009178 <HAL_RCC_ClockConfig+0x244>)
 8008fa2:	4313      	orrs	r3, r2
 8008fa4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f003 0308 	and.w	r3, r3, #8
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d010      	beq.n	8008fd4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	695a      	ldr	r2, [r3, #20]
 8008fb6:	4b70      	ldr	r3, [pc, #448]	; (8009178 <HAL_RCC_ClockConfig+0x244>)
 8008fb8:	69db      	ldr	r3, [r3, #28]
 8008fba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008fbe:	429a      	cmp	r2, r3
 8008fc0:	d908      	bls.n	8008fd4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008fc2:	4b6d      	ldr	r3, [pc, #436]	; (8009178 <HAL_RCC_ClockConfig+0x244>)
 8008fc4:	69db      	ldr	r3, [r3, #28]
 8008fc6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	695b      	ldr	r3, [r3, #20]
 8008fce:	496a      	ldr	r1, [pc, #424]	; (8009178 <HAL_RCC_ClockConfig+0x244>)
 8008fd0:	4313      	orrs	r3, r2
 8008fd2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f003 0310 	and.w	r3, r3, #16
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d010      	beq.n	8009002 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	699a      	ldr	r2, [r3, #24]
 8008fe4:	4b64      	ldr	r3, [pc, #400]	; (8009178 <HAL_RCC_ClockConfig+0x244>)
 8008fe6:	69db      	ldr	r3, [r3, #28]
 8008fe8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008fec:	429a      	cmp	r2, r3
 8008fee:	d908      	bls.n	8009002 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008ff0:	4b61      	ldr	r3, [pc, #388]	; (8009178 <HAL_RCC_ClockConfig+0x244>)
 8008ff2:	69db      	ldr	r3, [r3, #28]
 8008ff4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	699b      	ldr	r3, [r3, #24]
 8008ffc:	495e      	ldr	r1, [pc, #376]	; (8009178 <HAL_RCC_ClockConfig+0x244>)
 8008ffe:	4313      	orrs	r3, r2
 8009000:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f003 0320 	and.w	r3, r3, #32
 800900a:	2b00      	cmp	r3, #0
 800900c:	d010      	beq.n	8009030 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	69da      	ldr	r2, [r3, #28]
 8009012:	4b59      	ldr	r3, [pc, #356]	; (8009178 <HAL_RCC_ClockConfig+0x244>)
 8009014:	6a1b      	ldr	r3, [r3, #32]
 8009016:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800901a:	429a      	cmp	r2, r3
 800901c:	d908      	bls.n	8009030 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800901e:	4b56      	ldr	r3, [pc, #344]	; (8009178 <HAL_RCC_ClockConfig+0x244>)
 8009020:	6a1b      	ldr	r3, [r3, #32]
 8009022:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	69db      	ldr	r3, [r3, #28]
 800902a:	4953      	ldr	r1, [pc, #332]	; (8009178 <HAL_RCC_ClockConfig+0x244>)
 800902c:	4313      	orrs	r3, r2
 800902e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f003 0302 	and.w	r3, r3, #2
 8009038:	2b00      	cmp	r3, #0
 800903a:	d010      	beq.n	800905e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	68da      	ldr	r2, [r3, #12]
 8009040:	4b4d      	ldr	r3, [pc, #308]	; (8009178 <HAL_RCC_ClockConfig+0x244>)
 8009042:	699b      	ldr	r3, [r3, #24]
 8009044:	f003 030f 	and.w	r3, r3, #15
 8009048:	429a      	cmp	r2, r3
 800904a:	d908      	bls.n	800905e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800904c:	4b4a      	ldr	r3, [pc, #296]	; (8009178 <HAL_RCC_ClockConfig+0x244>)
 800904e:	699b      	ldr	r3, [r3, #24]
 8009050:	f023 020f 	bic.w	r2, r3, #15
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	68db      	ldr	r3, [r3, #12]
 8009058:	4947      	ldr	r1, [pc, #284]	; (8009178 <HAL_RCC_ClockConfig+0x244>)
 800905a:	4313      	orrs	r3, r2
 800905c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f003 0301 	and.w	r3, r3, #1
 8009066:	2b00      	cmp	r3, #0
 8009068:	d055      	beq.n	8009116 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800906a:	4b43      	ldr	r3, [pc, #268]	; (8009178 <HAL_RCC_ClockConfig+0x244>)
 800906c:	699b      	ldr	r3, [r3, #24]
 800906e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	689b      	ldr	r3, [r3, #8]
 8009076:	4940      	ldr	r1, [pc, #256]	; (8009178 <HAL_RCC_ClockConfig+0x244>)
 8009078:	4313      	orrs	r3, r2
 800907a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	685b      	ldr	r3, [r3, #4]
 8009080:	2b02      	cmp	r3, #2
 8009082:	d107      	bne.n	8009094 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009084:	4b3c      	ldr	r3, [pc, #240]	; (8009178 <HAL_RCC_ClockConfig+0x244>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800908c:	2b00      	cmp	r3, #0
 800908e:	d121      	bne.n	80090d4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009090:	2301      	movs	r3, #1
 8009092:	e0f6      	b.n	8009282 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	685b      	ldr	r3, [r3, #4]
 8009098:	2b03      	cmp	r3, #3
 800909a:	d107      	bne.n	80090ac <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800909c:	4b36      	ldr	r3, [pc, #216]	; (8009178 <HAL_RCC_ClockConfig+0x244>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d115      	bne.n	80090d4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80090a8:	2301      	movs	r3, #1
 80090aa:	e0ea      	b.n	8009282 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	685b      	ldr	r3, [r3, #4]
 80090b0:	2b01      	cmp	r3, #1
 80090b2:	d107      	bne.n	80090c4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80090b4:	4b30      	ldr	r3, [pc, #192]	; (8009178 <HAL_RCC_ClockConfig+0x244>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d109      	bne.n	80090d4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80090c0:	2301      	movs	r3, #1
 80090c2:	e0de      	b.n	8009282 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80090c4:	4b2c      	ldr	r3, [pc, #176]	; (8009178 <HAL_RCC_ClockConfig+0x244>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f003 0304 	and.w	r3, r3, #4
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d101      	bne.n	80090d4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80090d0:	2301      	movs	r3, #1
 80090d2:	e0d6      	b.n	8009282 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80090d4:	4b28      	ldr	r3, [pc, #160]	; (8009178 <HAL_RCC_ClockConfig+0x244>)
 80090d6:	691b      	ldr	r3, [r3, #16]
 80090d8:	f023 0207 	bic.w	r2, r3, #7
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	685b      	ldr	r3, [r3, #4]
 80090e0:	4925      	ldr	r1, [pc, #148]	; (8009178 <HAL_RCC_ClockConfig+0x244>)
 80090e2:	4313      	orrs	r3, r2
 80090e4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80090e6:	f7fa fa4d 	bl	8003584 <HAL_GetTick>
 80090ea:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80090ec:	e00a      	b.n	8009104 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80090ee:	f7fa fa49 	bl	8003584 <HAL_GetTick>
 80090f2:	4602      	mov	r2, r0
 80090f4:	697b      	ldr	r3, [r7, #20]
 80090f6:	1ad3      	subs	r3, r2, r3
 80090f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d901      	bls.n	8009104 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8009100:	2303      	movs	r3, #3
 8009102:	e0be      	b.n	8009282 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009104:	4b1c      	ldr	r3, [pc, #112]	; (8009178 <HAL_RCC_ClockConfig+0x244>)
 8009106:	691b      	ldr	r3, [r3, #16]
 8009108:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	685b      	ldr	r3, [r3, #4]
 8009110:	00db      	lsls	r3, r3, #3
 8009112:	429a      	cmp	r2, r3
 8009114:	d1eb      	bne.n	80090ee <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f003 0302 	and.w	r3, r3, #2
 800911e:	2b00      	cmp	r3, #0
 8009120:	d010      	beq.n	8009144 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	68da      	ldr	r2, [r3, #12]
 8009126:	4b14      	ldr	r3, [pc, #80]	; (8009178 <HAL_RCC_ClockConfig+0x244>)
 8009128:	699b      	ldr	r3, [r3, #24]
 800912a:	f003 030f 	and.w	r3, r3, #15
 800912e:	429a      	cmp	r2, r3
 8009130:	d208      	bcs.n	8009144 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009132:	4b11      	ldr	r3, [pc, #68]	; (8009178 <HAL_RCC_ClockConfig+0x244>)
 8009134:	699b      	ldr	r3, [r3, #24]
 8009136:	f023 020f 	bic.w	r2, r3, #15
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	68db      	ldr	r3, [r3, #12]
 800913e:	490e      	ldr	r1, [pc, #56]	; (8009178 <HAL_RCC_ClockConfig+0x244>)
 8009140:	4313      	orrs	r3, r2
 8009142:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009144:	4b0b      	ldr	r3, [pc, #44]	; (8009174 <HAL_RCC_ClockConfig+0x240>)
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f003 030f 	and.w	r3, r3, #15
 800914c:	683a      	ldr	r2, [r7, #0]
 800914e:	429a      	cmp	r2, r3
 8009150:	d214      	bcs.n	800917c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009152:	4b08      	ldr	r3, [pc, #32]	; (8009174 <HAL_RCC_ClockConfig+0x240>)
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f023 020f 	bic.w	r2, r3, #15
 800915a:	4906      	ldr	r1, [pc, #24]	; (8009174 <HAL_RCC_ClockConfig+0x240>)
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	4313      	orrs	r3, r2
 8009160:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009162:	4b04      	ldr	r3, [pc, #16]	; (8009174 <HAL_RCC_ClockConfig+0x240>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f003 030f 	and.w	r3, r3, #15
 800916a:	683a      	ldr	r2, [r7, #0]
 800916c:	429a      	cmp	r2, r3
 800916e:	d005      	beq.n	800917c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009170:	2301      	movs	r3, #1
 8009172:	e086      	b.n	8009282 <HAL_RCC_ClockConfig+0x34e>
 8009174:	52002000 	.word	0x52002000
 8009178:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f003 0304 	and.w	r3, r3, #4
 8009184:	2b00      	cmp	r3, #0
 8009186:	d010      	beq.n	80091aa <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	691a      	ldr	r2, [r3, #16]
 800918c:	4b3f      	ldr	r3, [pc, #252]	; (800928c <HAL_RCC_ClockConfig+0x358>)
 800918e:	699b      	ldr	r3, [r3, #24]
 8009190:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009194:	429a      	cmp	r2, r3
 8009196:	d208      	bcs.n	80091aa <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009198:	4b3c      	ldr	r3, [pc, #240]	; (800928c <HAL_RCC_ClockConfig+0x358>)
 800919a:	699b      	ldr	r3, [r3, #24]
 800919c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	691b      	ldr	r3, [r3, #16]
 80091a4:	4939      	ldr	r1, [pc, #228]	; (800928c <HAL_RCC_ClockConfig+0x358>)
 80091a6:	4313      	orrs	r3, r2
 80091a8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f003 0308 	and.w	r3, r3, #8
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d010      	beq.n	80091d8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	695a      	ldr	r2, [r3, #20]
 80091ba:	4b34      	ldr	r3, [pc, #208]	; (800928c <HAL_RCC_ClockConfig+0x358>)
 80091bc:	69db      	ldr	r3, [r3, #28]
 80091be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80091c2:	429a      	cmp	r2, r3
 80091c4:	d208      	bcs.n	80091d8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80091c6:	4b31      	ldr	r3, [pc, #196]	; (800928c <HAL_RCC_ClockConfig+0x358>)
 80091c8:	69db      	ldr	r3, [r3, #28]
 80091ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	695b      	ldr	r3, [r3, #20]
 80091d2:	492e      	ldr	r1, [pc, #184]	; (800928c <HAL_RCC_ClockConfig+0x358>)
 80091d4:	4313      	orrs	r3, r2
 80091d6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f003 0310 	and.w	r3, r3, #16
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d010      	beq.n	8009206 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	699a      	ldr	r2, [r3, #24]
 80091e8:	4b28      	ldr	r3, [pc, #160]	; (800928c <HAL_RCC_ClockConfig+0x358>)
 80091ea:	69db      	ldr	r3, [r3, #28]
 80091ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80091f0:	429a      	cmp	r2, r3
 80091f2:	d208      	bcs.n	8009206 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80091f4:	4b25      	ldr	r3, [pc, #148]	; (800928c <HAL_RCC_ClockConfig+0x358>)
 80091f6:	69db      	ldr	r3, [r3, #28]
 80091f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	699b      	ldr	r3, [r3, #24]
 8009200:	4922      	ldr	r1, [pc, #136]	; (800928c <HAL_RCC_ClockConfig+0x358>)
 8009202:	4313      	orrs	r3, r2
 8009204:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f003 0320 	and.w	r3, r3, #32
 800920e:	2b00      	cmp	r3, #0
 8009210:	d010      	beq.n	8009234 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	69da      	ldr	r2, [r3, #28]
 8009216:	4b1d      	ldr	r3, [pc, #116]	; (800928c <HAL_RCC_ClockConfig+0x358>)
 8009218:	6a1b      	ldr	r3, [r3, #32]
 800921a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800921e:	429a      	cmp	r2, r3
 8009220:	d208      	bcs.n	8009234 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009222:	4b1a      	ldr	r3, [pc, #104]	; (800928c <HAL_RCC_ClockConfig+0x358>)
 8009224:	6a1b      	ldr	r3, [r3, #32]
 8009226:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	69db      	ldr	r3, [r3, #28]
 800922e:	4917      	ldr	r1, [pc, #92]	; (800928c <HAL_RCC_ClockConfig+0x358>)
 8009230:	4313      	orrs	r3, r2
 8009232:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009234:	f000 f844 	bl	80092c0 <HAL_RCC_GetSysClockFreq>
 8009238:	4601      	mov	r1, r0
 800923a:	4b14      	ldr	r3, [pc, #80]	; (800928c <HAL_RCC_ClockConfig+0x358>)
 800923c:	699b      	ldr	r3, [r3, #24]
 800923e:	0a1b      	lsrs	r3, r3, #8
 8009240:	f003 030f 	and.w	r3, r3, #15
 8009244:	4a12      	ldr	r2, [pc, #72]	; (8009290 <HAL_RCC_ClockConfig+0x35c>)
 8009246:	5cd3      	ldrb	r3, [r2, r3]
 8009248:	f003 031f 	and.w	r3, r3, #31
 800924c:	fa21 f303 	lsr.w	r3, r1, r3
 8009250:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009252:	4b0e      	ldr	r3, [pc, #56]	; (800928c <HAL_RCC_ClockConfig+0x358>)
 8009254:	699b      	ldr	r3, [r3, #24]
 8009256:	f003 030f 	and.w	r3, r3, #15
 800925a:	4a0d      	ldr	r2, [pc, #52]	; (8009290 <HAL_RCC_ClockConfig+0x35c>)
 800925c:	5cd3      	ldrb	r3, [r2, r3]
 800925e:	f003 031f 	and.w	r3, r3, #31
 8009262:	693a      	ldr	r2, [r7, #16]
 8009264:	fa22 f303 	lsr.w	r3, r2, r3
 8009268:	4a0a      	ldr	r2, [pc, #40]	; (8009294 <HAL_RCC_ClockConfig+0x360>)
 800926a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800926c:	4a0a      	ldr	r2, [pc, #40]	; (8009298 <HAL_RCC_ClockConfig+0x364>)
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8009272:	4b0a      	ldr	r3, [pc, #40]	; (800929c <HAL_RCC_ClockConfig+0x368>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	4618      	mov	r0, r3
 8009278:	f7fa f93a 	bl	80034f0 <HAL_InitTick>
 800927c:	4603      	mov	r3, r0
 800927e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009280:	7bfb      	ldrb	r3, [r7, #15]
}
 8009282:	4618      	mov	r0, r3
 8009284:	3718      	adds	r7, #24
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}
 800928a:	bf00      	nop
 800928c:	58024400 	.word	0x58024400
 8009290:	08019e9c 	.word	0x08019e9c
 8009294:	24000010 	.word	0x24000010
 8009298:	2400000c 	.word	0x2400000c
 800929c:	24000014 	.word	0x24000014

080092a0 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80092a0:	b480      	push	{r7}
 80092a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 80092a4:	4b05      	ldr	r3, [pc, #20]	; (80092bc <HAL_RCC_EnableCSS+0x1c>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	4a04      	ldr	r2, [pc, #16]	; (80092bc <HAL_RCC_EnableCSS+0x1c>)
 80092aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80092ae:	6013      	str	r3, [r2, #0]
}
 80092b0:	bf00      	nop
 80092b2:	46bd      	mov	sp, r7
 80092b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b8:	4770      	bx	lr
 80092ba:	bf00      	nop
 80092bc:	58024400 	.word	0x58024400

080092c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80092c0:	b480      	push	{r7}
 80092c2:	b089      	sub	sp, #36	; 0x24
 80092c4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80092c6:	4baf      	ldr	r3, [pc, #700]	; (8009584 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80092c8:	691b      	ldr	r3, [r3, #16]
 80092ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80092ce:	2b18      	cmp	r3, #24
 80092d0:	f200 814e 	bhi.w	8009570 <HAL_RCC_GetSysClockFreq+0x2b0>
 80092d4:	a201      	add	r2, pc, #4	; (adr r2, 80092dc <HAL_RCC_GetSysClockFreq+0x1c>)
 80092d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092da:	bf00      	nop
 80092dc:	08009341 	.word	0x08009341
 80092e0:	08009571 	.word	0x08009571
 80092e4:	08009571 	.word	0x08009571
 80092e8:	08009571 	.word	0x08009571
 80092ec:	08009571 	.word	0x08009571
 80092f0:	08009571 	.word	0x08009571
 80092f4:	08009571 	.word	0x08009571
 80092f8:	08009571 	.word	0x08009571
 80092fc:	08009367 	.word	0x08009367
 8009300:	08009571 	.word	0x08009571
 8009304:	08009571 	.word	0x08009571
 8009308:	08009571 	.word	0x08009571
 800930c:	08009571 	.word	0x08009571
 8009310:	08009571 	.word	0x08009571
 8009314:	08009571 	.word	0x08009571
 8009318:	08009571 	.word	0x08009571
 800931c:	0800936d 	.word	0x0800936d
 8009320:	08009571 	.word	0x08009571
 8009324:	08009571 	.word	0x08009571
 8009328:	08009571 	.word	0x08009571
 800932c:	08009571 	.word	0x08009571
 8009330:	08009571 	.word	0x08009571
 8009334:	08009571 	.word	0x08009571
 8009338:	08009571 	.word	0x08009571
 800933c:	08009373 	.word	0x08009373
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009340:	4b90      	ldr	r3, [pc, #576]	; (8009584 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f003 0320 	and.w	r3, r3, #32
 8009348:	2b00      	cmp	r3, #0
 800934a:	d009      	beq.n	8009360 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800934c:	4b8d      	ldr	r3, [pc, #564]	; (8009584 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	08db      	lsrs	r3, r3, #3
 8009352:	f003 0303 	and.w	r3, r3, #3
 8009356:	4a8c      	ldr	r2, [pc, #560]	; (8009588 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8009358:	fa22 f303 	lsr.w	r3, r2, r3
 800935c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800935e:	e10a      	b.n	8009576 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009360:	4b89      	ldr	r3, [pc, #548]	; (8009588 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8009362:	61bb      	str	r3, [r7, #24]
    break;
 8009364:	e107      	b.n	8009576 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8009366:	4b89      	ldr	r3, [pc, #548]	; (800958c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8009368:	61bb      	str	r3, [r7, #24]
    break;
 800936a:	e104      	b.n	8009576 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800936c:	4b88      	ldr	r3, [pc, #544]	; (8009590 <HAL_RCC_GetSysClockFreq+0x2d0>)
 800936e:	61bb      	str	r3, [r7, #24]
    break;
 8009370:	e101      	b.n	8009576 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009372:	4b84      	ldr	r3, [pc, #528]	; (8009584 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009376:	f003 0303 	and.w	r3, r3, #3
 800937a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800937c:	4b81      	ldr	r3, [pc, #516]	; (8009584 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800937e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009380:	091b      	lsrs	r3, r3, #4
 8009382:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009386:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009388:	4b7e      	ldr	r3, [pc, #504]	; (8009584 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800938a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800938c:	f003 0301 	and.w	r3, r3, #1
 8009390:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009392:	4b7c      	ldr	r3, [pc, #496]	; (8009584 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009396:	08db      	lsrs	r3, r3, #3
 8009398:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800939c:	68fa      	ldr	r2, [r7, #12]
 800939e:	fb02 f303 	mul.w	r3, r2, r3
 80093a2:	ee07 3a90 	vmov	s15, r3
 80093a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093aa:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80093ae:	693b      	ldr	r3, [r7, #16]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	f000 80da 	beq.w	800956a <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 80093b6:	697b      	ldr	r3, [r7, #20]
 80093b8:	2b01      	cmp	r3, #1
 80093ba:	d05a      	beq.n	8009472 <HAL_RCC_GetSysClockFreq+0x1b2>
 80093bc:	2b01      	cmp	r3, #1
 80093be:	d302      	bcc.n	80093c6 <HAL_RCC_GetSysClockFreq+0x106>
 80093c0:	2b02      	cmp	r3, #2
 80093c2:	d078      	beq.n	80094b6 <HAL_RCC_GetSysClockFreq+0x1f6>
 80093c4:	e099      	b.n	80094fa <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80093c6:	4b6f      	ldr	r3, [pc, #444]	; (8009584 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f003 0320 	and.w	r3, r3, #32
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d02d      	beq.n	800942e <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80093d2:	4b6c      	ldr	r3, [pc, #432]	; (8009584 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	08db      	lsrs	r3, r3, #3
 80093d8:	f003 0303 	and.w	r3, r3, #3
 80093dc:	4a6a      	ldr	r2, [pc, #424]	; (8009588 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80093de:	fa22 f303 	lsr.w	r3, r2, r3
 80093e2:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	ee07 3a90 	vmov	s15, r3
 80093ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093ee:	693b      	ldr	r3, [r7, #16]
 80093f0:	ee07 3a90 	vmov	s15, r3
 80093f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093fc:	4b61      	ldr	r3, [pc, #388]	; (8009584 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80093fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009400:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009404:	ee07 3a90 	vmov	s15, r3
 8009408:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800940c:	ed97 6a02 	vldr	s12, [r7, #8]
 8009410:	eddf 5a60 	vldr	s11, [pc, #384]	; 8009594 <HAL_RCC_GetSysClockFreq+0x2d4>
 8009414:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009418:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800941c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009420:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009424:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009428:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800942c:	e087      	b.n	800953e <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	ee07 3a90 	vmov	s15, r3
 8009434:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009438:	eddf 6a57 	vldr	s13, [pc, #348]	; 8009598 <HAL_RCC_GetSysClockFreq+0x2d8>
 800943c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009440:	4b50      	ldr	r3, [pc, #320]	; (8009584 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009444:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009448:	ee07 3a90 	vmov	s15, r3
 800944c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009450:	ed97 6a02 	vldr	s12, [r7, #8]
 8009454:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8009594 <HAL_RCC_GetSysClockFreq+0x2d4>
 8009458:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800945c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009460:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009464:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009468:	ee67 7a27 	vmul.f32	s15, s14, s15
 800946c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009470:	e065      	b.n	800953e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	ee07 3a90 	vmov	s15, r3
 8009478:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800947c:	eddf 6a47 	vldr	s13, [pc, #284]	; 800959c <HAL_RCC_GetSysClockFreq+0x2dc>
 8009480:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009484:	4b3f      	ldr	r3, [pc, #252]	; (8009584 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009488:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800948c:	ee07 3a90 	vmov	s15, r3
 8009490:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009494:	ed97 6a02 	vldr	s12, [r7, #8]
 8009498:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8009594 <HAL_RCC_GetSysClockFreq+0x2d4>
 800949c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094b0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80094b4:	e043      	b.n	800953e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80094b6:	693b      	ldr	r3, [r7, #16]
 80094b8:	ee07 3a90 	vmov	s15, r3
 80094bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094c0:	eddf 6a37 	vldr	s13, [pc, #220]	; 80095a0 <HAL_RCC_GetSysClockFreq+0x2e0>
 80094c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094c8:	4b2e      	ldr	r3, [pc, #184]	; (8009584 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80094ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094d0:	ee07 3a90 	vmov	s15, r3
 80094d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094d8:	ed97 6a02 	vldr	s12, [r7, #8]
 80094dc:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8009594 <HAL_RCC_GetSysClockFreq+0x2d4>
 80094e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094f4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80094f8:	e021      	b.n	800953e <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80094fa:	693b      	ldr	r3, [r7, #16]
 80094fc:	ee07 3a90 	vmov	s15, r3
 8009500:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009504:	eddf 6a25 	vldr	s13, [pc, #148]	; 800959c <HAL_RCC_GetSysClockFreq+0x2dc>
 8009508:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800950c:	4b1d      	ldr	r3, [pc, #116]	; (8009584 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800950e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009510:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009514:	ee07 3a90 	vmov	s15, r3
 8009518:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800951c:	ed97 6a02 	vldr	s12, [r7, #8]
 8009520:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8009594 <HAL_RCC_GetSysClockFreq+0x2d4>
 8009524:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009528:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800952c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009530:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009534:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009538:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800953c:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800953e:	4b11      	ldr	r3, [pc, #68]	; (8009584 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009542:	0a5b      	lsrs	r3, r3, #9
 8009544:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009548:	3301      	adds	r3, #1
 800954a:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	ee07 3a90 	vmov	s15, r3
 8009552:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009556:	edd7 6a07 	vldr	s13, [r7, #28]
 800955a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800955e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009562:	ee17 3a90 	vmov	r3, s15
 8009566:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8009568:	e005      	b.n	8009576 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 800956a:	2300      	movs	r3, #0
 800956c:	61bb      	str	r3, [r7, #24]
    break;
 800956e:	e002      	b.n	8009576 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8009570:	4b06      	ldr	r3, [pc, #24]	; (800958c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8009572:	61bb      	str	r3, [r7, #24]
    break;
 8009574:	bf00      	nop
  }

  return sysclockfreq;
 8009576:	69bb      	ldr	r3, [r7, #24]
}
 8009578:	4618      	mov	r0, r3
 800957a:	3724      	adds	r7, #36	; 0x24
 800957c:	46bd      	mov	sp, r7
 800957e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009582:	4770      	bx	lr
 8009584:	58024400 	.word	0x58024400
 8009588:	03d09000 	.word	0x03d09000
 800958c:	003d0900 	.word	0x003d0900
 8009590:	017d7840 	.word	0x017d7840
 8009594:	46000000 	.word	0x46000000
 8009598:	4c742400 	.word	0x4c742400
 800959c:	4a742400 	.word	0x4a742400
 80095a0:	4bbebc20 	.word	0x4bbebc20

080095a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b082      	sub	sp, #8
 80095a8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80095aa:	f7ff fe89 	bl	80092c0 <HAL_RCC_GetSysClockFreq>
 80095ae:	4601      	mov	r1, r0
 80095b0:	4b10      	ldr	r3, [pc, #64]	; (80095f4 <HAL_RCC_GetHCLKFreq+0x50>)
 80095b2:	699b      	ldr	r3, [r3, #24]
 80095b4:	0a1b      	lsrs	r3, r3, #8
 80095b6:	f003 030f 	and.w	r3, r3, #15
 80095ba:	4a0f      	ldr	r2, [pc, #60]	; (80095f8 <HAL_RCC_GetHCLKFreq+0x54>)
 80095bc:	5cd3      	ldrb	r3, [r2, r3]
 80095be:	f003 031f 	and.w	r3, r3, #31
 80095c2:	fa21 f303 	lsr.w	r3, r1, r3
 80095c6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80095c8:	4b0a      	ldr	r3, [pc, #40]	; (80095f4 <HAL_RCC_GetHCLKFreq+0x50>)
 80095ca:	699b      	ldr	r3, [r3, #24]
 80095cc:	f003 030f 	and.w	r3, r3, #15
 80095d0:	4a09      	ldr	r2, [pc, #36]	; (80095f8 <HAL_RCC_GetHCLKFreq+0x54>)
 80095d2:	5cd3      	ldrb	r3, [r2, r3]
 80095d4:	f003 031f 	and.w	r3, r3, #31
 80095d8:	687a      	ldr	r2, [r7, #4]
 80095da:	fa22 f303 	lsr.w	r3, r2, r3
 80095de:	4a07      	ldr	r2, [pc, #28]	; (80095fc <HAL_RCC_GetHCLKFreq+0x58>)
 80095e0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80095e2:	4a07      	ldr	r2, [pc, #28]	; (8009600 <HAL_RCC_GetHCLKFreq+0x5c>)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80095e8:	4b04      	ldr	r3, [pc, #16]	; (80095fc <HAL_RCC_GetHCLKFreq+0x58>)
 80095ea:	681b      	ldr	r3, [r3, #0]
}
 80095ec:	4618      	mov	r0, r3
 80095ee:	3708      	adds	r7, #8
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bd80      	pop	{r7, pc}
 80095f4:	58024400 	.word	0x58024400
 80095f8:	08019e9c 	.word	0x08019e9c
 80095fc:	24000010 	.word	0x24000010
 8009600:	2400000c 	.word	0x2400000c

08009604 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009608:	f7ff ffcc 	bl	80095a4 <HAL_RCC_GetHCLKFreq>
 800960c:	4601      	mov	r1, r0
 800960e:	4b06      	ldr	r3, [pc, #24]	; (8009628 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009610:	69db      	ldr	r3, [r3, #28]
 8009612:	091b      	lsrs	r3, r3, #4
 8009614:	f003 0307 	and.w	r3, r3, #7
 8009618:	4a04      	ldr	r2, [pc, #16]	; (800962c <HAL_RCC_GetPCLK1Freq+0x28>)
 800961a:	5cd3      	ldrb	r3, [r2, r3]
 800961c:	f003 031f 	and.w	r3, r3, #31
 8009620:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009624:	4618      	mov	r0, r3
 8009626:	bd80      	pop	{r7, pc}
 8009628:	58024400 	.word	0x58024400
 800962c:	08019e9c 	.word	0x08019e9c

08009630 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009634:	f7ff ffb6 	bl	80095a4 <HAL_RCC_GetHCLKFreq>
 8009638:	4601      	mov	r1, r0
 800963a:	4b06      	ldr	r3, [pc, #24]	; (8009654 <HAL_RCC_GetPCLK2Freq+0x24>)
 800963c:	69db      	ldr	r3, [r3, #28]
 800963e:	0a1b      	lsrs	r3, r3, #8
 8009640:	f003 0307 	and.w	r3, r3, #7
 8009644:	4a04      	ldr	r2, [pc, #16]	; (8009658 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009646:	5cd3      	ldrb	r3, [r2, r3]
 8009648:	f003 031f 	and.w	r3, r3, #31
 800964c:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009650:	4618      	mov	r0, r3
 8009652:	bd80      	pop	{r7, pc}
 8009654:	58024400 	.word	0x58024400
 8009658:	08019e9c 	.word	0x08019e9c

0800965c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8009660:	4b07      	ldr	r3, [pc, #28]	; (8009680 <HAL_RCC_NMI_IRQHandler+0x24>)
 8009662:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009664:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009668:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800966c:	d105      	bne.n	800967a <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CCSCallback();
 800966e:	f000 f809 	bl	8009684 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8009672:	4b03      	ldr	r3, [pc, #12]	; (8009680 <HAL_RCC_NMI_IRQHandler+0x24>)
 8009674:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009678:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 800967a:	bf00      	nop
 800967c:	bd80      	pop	{r7, pc}
 800967e:	bf00      	nop
 8009680:	58024400 	.word	0x58024400

08009684 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CCSCallback(void)
{
 8009684:	b480      	push	{r7}
 8009686:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CCSCallback could be implemented in the user file
   */
}
 8009688:	bf00      	nop
 800968a:	46bd      	mov	sp, r7
 800968c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009690:	4770      	bx	lr
	...

08009694 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b086      	sub	sp, #24
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800969c:	2300      	movs	r3, #0
 800969e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80096a0:	2300      	movs	r3, #0
 80096a2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d03d      	beq.n	800972c <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80096b8:	d013      	beq.n	80096e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80096ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80096be:	d802      	bhi.n	80096c6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d007      	beq.n	80096d4 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80096c4:	e01f      	b.n	8009706 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80096c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80096ca:	d013      	beq.n	80096f4 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80096cc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80096d0:	d01c      	beq.n	800970c <HAL_RCCEx_PeriphCLKConfig+0x78>
 80096d2:	e018      	b.n	8009706 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096d4:	4baf      	ldr	r3, [pc, #700]	; (8009994 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80096d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096d8:	4aae      	ldr	r2, [pc, #696]	; (8009994 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80096da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80096de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80096e0:	e015      	b.n	800970e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	3304      	adds	r3, #4
 80096e6:	2102      	movs	r1, #2
 80096e8:	4618      	mov	r0, r3
 80096ea:	f001 fd33 	bl	800b154 <RCCEx_PLL2_Config>
 80096ee:	4603      	mov	r3, r0
 80096f0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80096f2:	e00c      	b.n	800970e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	3324      	adds	r3, #36	; 0x24
 80096f8:	2102      	movs	r1, #2
 80096fa:	4618      	mov	r0, r3
 80096fc:	f001 fddc 	bl	800b2b8 <RCCEx_PLL3_Config>
 8009700:	4603      	mov	r3, r0
 8009702:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009704:	e003      	b.n	800970e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009706:	2301      	movs	r3, #1
 8009708:	75fb      	strb	r3, [r7, #23]
      break;
 800970a:	e000      	b.n	800970e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800970c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800970e:	7dfb      	ldrb	r3, [r7, #23]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d109      	bne.n	8009728 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009714:	4b9f      	ldr	r3, [pc, #636]	; (8009994 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009716:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009718:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009720:	499c      	ldr	r1, [pc, #624]	; (8009994 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009722:	4313      	orrs	r3, r2
 8009724:	650b      	str	r3, [r1, #80]	; 0x50
 8009726:	e001      	b.n	800972c <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009728:	7dfb      	ldrb	r3, [r7, #23]
 800972a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009734:	2b00      	cmp	r3, #0
 8009736:	d03d      	beq.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800973c:	2b04      	cmp	r3, #4
 800973e:	d826      	bhi.n	800978e <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8009740:	a201      	add	r2, pc, #4	; (adr r2, 8009748 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8009742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009746:	bf00      	nop
 8009748:	0800975d 	.word	0x0800975d
 800974c:	0800976b 	.word	0x0800976b
 8009750:	0800977d 	.word	0x0800977d
 8009754:	08009795 	.word	0x08009795
 8009758:	08009795 	.word	0x08009795
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800975c:	4b8d      	ldr	r3, [pc, #564]	; (8009994 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800975e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009760:	4a8c      	ldr	r2, [pc, #560]	; (8009994 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009762:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009766:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009768:	e015      	b.n	8009796 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	3304      	adds	r3, #4
 800976e:	2100      	movs	r1, #0
 8009770:	4618      	mov	r0, r3
 8009772:	f001 fcef 	bl	800b154 <RCCEx_PLL2_Config>
 8009776:	4603      	mov	r3, r0
 8009778:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800977a:	e00c      	b.n	8009796 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	3324      	adds	r3, #36	; 0x24
 8009780:	2100      	movs	r1, #0
 8009782:	4618      	mov	r0, r3
 8009784:	f001 fd98 	bl	800b2b8 <RCCEx_PLL3_Config>
 8009788:	4603      	mov	r3, r0
 800978a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800978c:	e003      	b.n	8009796 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800978e:	2301      	movs	r3, #1
 8009790:	75fb      	strb	r3, [r7, #23]
      break;
 8009792:	e000      	b.n	8009796 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8009794:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009796:	7dfb      	ldrb	r3, [r7, #23]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d109      	bne.n	80097b0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800979c:	4b7d      	ldr	r3, [pc, #500]	; (8009994 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800979e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097a0:	f023 0207 	bic.w	r2, r3, #7
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097a8:	497a      	ldr	r1, [pc, #488]	; (8009994 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80097aa:	4313      	orrs	r3, r2
 80097ac:	650b      	str	r3, [r1, #80]	; 0x50
 80097ae:	e001      	b.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097b0:	7dfb      	ldrb	r3, [r7, #23]
 80097b2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d03e      	beq.n	800983e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097c4:	2b80      	cmp	r3, #128	; 0x80
 80097c6:	d01c      	beq.n	8009802 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80097c8:	2b80      	cmp	r3, #128	; 0x80
 80097ca:	d804      	bhi.n	80097d6 <HAL_RCCEx_PeriphCLKConfig+0x142>
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d008      	beq.n	80097e2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80097d0:	2b40      	cmp	r3, #64	; 0x40
 80097d2:	d00d      	beq.n	80097f0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80097d4:	e01e      	b.n	8009814 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80097d6:	2bc0      	cmp	r3, #192	; 0xc0
 80097d8:	d01f      	beq.n	800981a <HAL_RCCEx_PeriphCLKConfig+0x186>
 80097da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097de:	d01e      	beq.n	800981e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80097e0:	e018      	b.n	8009814 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097e2:	4b6c      	ldr	r3, [pc, #432]	; (8009994 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80097e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097e6:	4a6b      	ldr	r2, [pc, #428]	; (8009994 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80097e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80097ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80097ee:	e017      	b.n	8009820 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	3304      	adds	r3, #4
 80097f4:	2100      	movs	r1, #0
 80097f6:	4618      	mov	r0, r3
 80097f8:	f001 fcac 	bl	800b154 <RCCEx_PLL2_Config>
 80097fc:	4603      	mov	r3, r0
 80097fe:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009800:	e00e      	b.n	8009820 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	3324      	adds	r3, #36	; 0x24
 8009806:	2100      	movs	r1, #0
 8009808:	4618      	mov	r0, r3
 800980a:	f001 fd55 	bl	800b2b8 <RCCEx_PLL3_Config>
 800980e:	4603      	mov	r3, r0
 8009810:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009812:	e005      	b.n	8009820 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009814:	2301      	movs	r3, #1
 8009816:	75fb      	strb	r3, [r7, #23]
      break;
 8009818:	e002      	b.n	8009820 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800981a:	bf00      	nop
 800981c:	e000      	b.n	8009820 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800981e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009820:	7dfb      	ldrb	r3, [r7, #23]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d109      	bne.n	800983a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009826:	4b5b      	ldr	r3, [pc, #364]	; (8009994 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009828:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800982a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009832:	4958      	ldr	r1, [pc, #352]	; (8009994 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009834:	4313      	orrs	r3, r2
 8009836:	650b      	str	r3, [r1, #80]	; 0x50
 8009838:	e001      	b.n	800983e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800983a:	7dfb      	ldrb	r3, [r7, #23]
 800983c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009846:	2b00      	cmp	r3, #0
 8009848:	d044      	beq.n	80098d4 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009850:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009854:	d01f      	beq.n	8009896 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8009856:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800985a:	d805      	bhi.n	8009868 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800985c:	2b00      	cmp	r3, #0
 800985e:	d00a      	beq.n	8009876 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009860:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009864:	d00e      	beq.n	8009884 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8009866:	e01f      	b.n	80098a8 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8009868:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800986c:	d01f      	beq.n	80098ae <HAL_RCCEx_PeriphCLKConfig+0x21a>
 800986e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009872:	d01e      	beq.n	80098b2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8009874:	e018      	b.n	80098a8 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009876:	4b47      	ldr	r3, [pc, #284]	; (8009994 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800987a:	4a46      	ldr	r2, [pc, #280]	; (8009994 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800987c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009880:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009882:	e017      	b.n	80098b4 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	3304      	adds	r3, #4
 8009888:	2100      	movs	r1, #0
 800988a:	4618      	mov	r0, r3
 800988c:	f001 fc62 	bl	800b154 <RCCEx_PLL2_Config>
 8009890:	4603      	mov	r3, r0
 8009892:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009894:	e00e      	b.n	80098b4 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	3324      	adds	r3, #36	; 0x24
 800989a:	2100      	movs	r1, #0
 800989c:	4618      	mov	r0, r3
 800989e:	f001 fd0b 	bl	800b2b8 <RCCEx_PLL3_Config>
 80098a2:	4603      	mov	r3, r0
 80098a4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80098a6:	e005      	b.n	80098b4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80098a8:	2301      	movs	r3, #1
 80098aa:	75fb      	strb	r3, [r7, #23]
      break;
 80098ac:	e002      	b.n	80098b4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80098ae:	bf00      	nop
 80098b0:	e000      	b.n	80098b4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80098b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80098b4:	7dfb      	ldrb	r3, [r7, #23]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d10a      	bne.n	80098d0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80098ba:	4b36      	ldr	r3, [pc, #216]	; (8009994 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80098bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098be:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80098c8:	4932      	ldr	r1, [pc, #200]	; (8009994 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80098ca:	4313      	orrs	r3, r2
 80098cc:	658b      	str	r3, [r1, #88]	; 0x58
 80098ce:	e001      	b.n	80098d4 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098d0:	7dfb      	ldrb	r3, [r7, #23]
 80098d2:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d044      	beq.n	800996a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80098e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80098ea:	d01f      	beq.n	800992c <HAL_RCCEx_PeriphCLKConfig+0x298>
 80098ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80098f0:	d805      	bhi.n	80098fe <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d00a      	beq.n	800990c <HAL_RCCEx_PeriphCLKConfig+0x278>
 80098f6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80098fa:	d00e      	beq.n	800991a <HAL_RCCEx_PeriphCLKConfig+0x286>
 80098fc:	e01f      	b.n	800993e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 80098fe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009902:	d01f      	beq.n	8009944 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8009904:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009908:	d01e      	beq.n	8009948 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800990a:	e018      	b.n	800993e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800990c:	4b21      	ldr	r3, [pc, #132]	; (8009994 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800990e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009910:	4a20      	ldr	r2, [pc, #128]	; (8009994 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009912:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009916:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009918:	e017      	b.n	800994a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	3304      	adds	r3, #4
 800991e:	2100      	movs	r1, #0
 8009920:	4618      	mov	r0, r3
 8009922:	f001 fc17 	bl	800b154 <RCCEx_PLL2_Config>
 8009926:	4603      	mov	r3, r0
 8009928:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800992a:	e00e      	b.n	800994a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	3324      	adds	r3, #36	; 0x24
 8009930:	2100      	movs	r1, #0
 8009932:	4618      	mov	r0, r3
 8009934:	f001 fcc0 	bl	800b2b8 <RCCEx_PLL3_Config>
 8009938:	4603      	mov	r3, r0
 800993a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800993c:	e005      	b.n	800994a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800993e:	2301      	movs	r3, #1
 8009940:	75fb      	strb	r3, [r7, #23]
      break;
 8009942:	e002      	b.n	800994a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8009944:	bf00      	nop
 8009946:	e000      	b.n	800994a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8009948:	bf00      	nop
    }

    if(ret == HAL_OK)
 800994a:	7dfb      	ldrb	r3, [r7, #23]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d10a      	bne.n	8009966 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009950:	4b10      	ldr	r3, [pc, #64]	; (8009994 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009954:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800995e:	490d      	ldr	r1, [pc, #52]	; (8009994 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009960:	4313      	orrs	r3, r2
 8009962:	658b      	str	r3, [r1, #88]	; 0x58
 8009964:	e001      	b.n	800996a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009966:	7dfb      	ldrb	r3, [r7, #23]
 8009968:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009972:	2b00      	cmp	r3, #0
 8009974:	d035      	beq.n	80099e2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800997a:	2b10      	cmp	r3, #16
 800997c:	d00c      	beq.n	8009998 <HAL_RCCEx_PeriphCLKConfig+0x304>
 800997e:	2b10      	cmp	r3, #16
 8009980:	d802      	bhi.n	8009988 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8009982:	2b00      	cmp	r3, #0
 8009984:	d01b      	beq.n	80099be <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8009986:	e017      	b.n	80099b8 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8009988:	2b20      	cmp	r3, #32
 800998a:	d00c      	beq.n	80099a6 <HAL_RCCEx_PeriphCLKConfig+0x312>
 800998c:	2b30      	cmp	r3, #48	; 0x30
 800998e:	d018      	beq.n	80099c2 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8009990:	e012      	b.n	80099b8 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8009992:	bf00      	nop
 8009994:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009998:	4baf      	ldr	r3, [pc, #700]	; (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800999a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800999c:	4aae      	ldr	r2, [pc, #696]	; (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800999e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80099a4:	e00e      	b.n	80099c4 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	3304      	adds	r3, #4
 80099aa:	2102      	movs	r1, #2
 80099ac:	4618      	mov	r0, r3
 80099ae:	f001 fbd1 	bl	800b154 <RCCEx_PLL2_Config>
 80099b2:	4603      	mov	r3, r0
 80099b4:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80099b6:	e005      	b.n	80099c4 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80099b8:	2301      	movs	r3, #1
 80099ba:	75fb      	strb	r3, [r7, #23]
      break;
 80099bc:	e002      	b.n	80099c4 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80099be:	bf00      	nop
 80099c0:	e000      	b.n	80099c4 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80099c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80099c4:	7dfb      	ldrb	r3, [r7, #23]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d109      	bne.n	80099de <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80099ca:	4ba3      	ldr	r3, [pc, #652]	; (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80099cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099ce:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80099d6:	49a0      	ldr	r1, [pc, #640]	; (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80099d8:	4313      	orrs	r3, r2
 80099da:	64cb      	str	r3, [r1, #76]	; 0x4c
 80099dc:	e001      	b.n	80099e2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099de:	7dfb      	ldrb	r3, [r7, #23]
 80099e0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d042      	beq.n	8009a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80099f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80099f6:	d01f      	beq.n	8009a38 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80099f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80099fc:	d805      	bhi.n	8009a0a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d00a      	beq.n	8009a18 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8009a02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a06:	d00e      	beq.n	8009a26 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8009a08:	e01f      	b.n	8009a4a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8009a0a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009a0e:	d01f      	beq.n	8009a50 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8009a10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009a14:	d01e      	beq.n	8009a54 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8009a16:	e018      	b.n	8009a4a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a18:	4b8f      	ldr	r3, [pc, #572]	; (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a1c:	4a8e      	ldr	r2, [pc, #568]	; (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009a1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a22:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009a24:	e017      	b.n	8009a56 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	3304      	adds	r3, #4
 8009a2a:	2100      	movs	r1, #0
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	f001 fb91 	bl	800b154 <RCCEx_PLL2_Config>
 8009a32:	4603      	mov	r3, r0
 8009a34:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009a36:	e00e      	b.n	8009a56 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	3324      	adds	r3, #36	; 0x24
 8009a3c:	2100      	movs	r1, #0
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f001 fc3a 	bl	800b2b8 <RCCEx_PLL3_Config>
 8009a44:	4603      	mov	r3, r0
 8009a46:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009a48:	e005      	b.n	8009a56 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	75fb      	strb	r3, [r7, #23]
      break;
 8009a4e:	e002      	b.n	8009a56 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8009a50:	bf00      	nop
 8009a52:	e000      	b.n	8009a56 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8009a54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009a56:	7dfb      	ldrb	r3, [r7, #23]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d109      	bne.n	8009a70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009a5c:	4b7e      	ldr	r3, [pc, #504]	; (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009a5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a60:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a68:	497b      	ldr	r1, [pc, #492]	; (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009a6a:	4313      	orrs	r3, r2
 8009a6c:	650b      	str	r3, [r1, #80]	; 0x50
 8009a6e:	e001      	b.n	8009a74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a70:	7dfb      	ldrb	r3, [r7, #23]
 8009a72:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d042      	beq.n	8009b06 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009a88:	d01b      	beq.n	8009ac2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8009a8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009a8e:	d805      	bhi.n	8009a9c <HAL_RCCEx_PeriphCLKConfig+0x408>
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d022      	beq.n	8009ada <HAL_RCCEx_PeriphCLKConfig+0x446>
 8009a94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a98:	d00a      	beq.n	8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8009a9a:	e01b      	b.n	8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8009a9c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009aa0:	d01d      	beq.n	8009ade <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8009aa2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009aa6:	d01c      	beq.n	8009ae2 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8009aa8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009aac:	d01b      	beq.n	8009ae6 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8009aae:	e011      	b.n	8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	3304      	adds	r3, #4
 8009ab4:	2101      	movs	r1, #1
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f001 fb4c 	bl	800b154 <RCCEx_PLL2_Config>
 8009abc:	4603      	mov	r3, r0
 8009abe:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009ac0:	e012      	b.n	8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	3324      	adds	r3, #36	; 0x24
 8009ac6:	2101      	movs	r1, #1
 8009ac8:	4618      	mov	r0, r3
 8009aca:	f001 fbf5 	bl	800b2b8 <RCCEx_PLL3_Config>
 8009ace:	4603      	mov	r3, r0
 8009ad0:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009ad2:	e009      	b.n	8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	75fb      	strb	r3, [r7, #23]
      break;
 8009ad8:	e006      	b.n	8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8009ada:	bf00      	nop
 8009adc:	e004      	b.n	8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8009ade:	bf00      	nop
 8009ae0:	e002      	b.n	8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8009ae2:	bf00      	nop
 8009ae4:	e000      	b.n	8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8009ae6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ae8:	7dfb      	ldrb	r3, [r7, #23]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d109      	bne.n	8009b02 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009aee:	4b5a      	ldr	r3, [pc, #360]	; (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009af0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009af2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009afa:	4957      	ldr	r1, [pc, #348]	; (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009afc:	4313      	orrs	r3, r2
 8009afe:	650b      	str	r3, [r1, #80]	; 0x50
 8009b00:	e001      	b.n	8009b06 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b02:	7dfb      	ldrb	r3, [r7, #23]
 8009b04:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d044      	beq.n	8009b9c <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009b18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b1c:	d01b      	beq.n	8009b56 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8009b1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b22:	d805      	bhi.n	8009b30 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d022      	beq.n	8009b6e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8009b28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009b2c:	d00a      	beq.n	8009b44 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8009b2e:	e01b      	b.n	8009b68 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8009b30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b34:	d01d      	beq.n	8009b72 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8009b36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009b3a:	d01c      	beq.n	8009b76 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8009b3c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009b40:	d01b      	beq.n	8009b7a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8009b42:	e011      	b.n	8009b68 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	3304      	adds	r3, #4
 8009b48:	2101      	movs	r1, #1
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	f001 fb02 	bl	800b154 <RCCEx_PLL2_Config>
 8009b50:	4603      	mov	r3, r0
 8009b52:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009b54:	e012      	b.n	8009b7c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	3324      	adds	r3, #36	; 0x24
 8009b5a:	2101      	movs	r1, #1
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	f001 fbab 	bl	800b2b8 <RCCEx_PLL3_Config>
 8009b62:	4603      	mov	r3, r0
 8009b64:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009b66:	e009      	b.n	8009b7c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8009b68:	2301      	movs	r3, #1
 8009b6a:	75fb      	strb	r3, [r7, #23]
      break;
 8009b6c:	e006      	b.n	8009b7c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8009b6e:	bf00      	nop
 8009b70:	e004      	b.n	8009b7c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8009b72:	bf00      	nop
 8009b74:	e002      	b.n	8009b7c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8009b76:	bf00      	nop
 8009b78:	e000      	b.n	8009b7c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8009b7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b7c:	7dfb      	ldrb	r3, [r7, #23]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d10a      	bne.n	8009b98 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009b82:	4b35      	ldr	r3, [pc, #212]	; (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b86:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009b90:	4931      	ldr	r1, [pc, #196]	; (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009b92:	4313      	orrs	r3, r2
 8009b94:	658b      	str	r3, [r1, #88]	; 0x58
 8009b96:	e001      	b.n	8009b9c <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b98:	7dfb      	ldrb	r3, [r7, #23]
 8009b9a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d02d      	beq.n	8009c04 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009bb0:	d005      	beq.n	8009bbe <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8009bb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009bb6:	d009      	beq.n	8009bcc <HAL_RCCEx_PeriphCLKConfig+0x538>
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d013      	beq.n	8009be4 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8009bbc:	e00f      	b.n	8009bde <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009bbe:	4b26      	ldr	r3, [pc, #152]	; (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bc2:	4a25      	ldr	r2, [pc, #148]	; (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009bc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009bc8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009bca:	e00c      	b.n	8009be6 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	3304      	adds	r3, #4
 8009bd0:	2101      	movs	r1, #1
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	f001 fabe 	bl	800b154 <RCCEx_PLL2_Config>
 8009bd8:	4603      	mov	r3, r0
 8009bda:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009bdc:	e003      	b.n	8009be6 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009bde:	2301      	movs	r3, #1
 8009be0:	75fb      	strb	r3, [r7, #23]
      break;
 8009be2:	e000      	b.n	8009be6 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8009be4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009be6:	7dfb      	ldrb	r3, [r7, #23]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d109      	bne.n	8009c00 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009bec:	4b1a      	ldr	r3, [pc, #104]	; (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009bee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bf0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bf8:	4917      	ldr	r1, [pc, #92]	; (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009bfa:	4313      	orrs	r3, r2
 8009bfc:	650b      	str	r3, [r1, #80]	; 0x50
 8009bfe:	e001      	b.n	8009c04 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c00:	7dfb      	ldrb	r3, [r7, #23]
 8009c02:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d035      	beq.n	8009c7c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c14:	2b03      	cmp	r3, #3
 8009c16:	d81b      	bhi.n	8009c50 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8009c18:	a201      	add	r2, pc, #4	; (adr r2, 8009c20 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8009c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c1e:	bf00      	nop
 8009c20:	08009c5d 	.word	0x08009c5d
 8009c24:	08009c31 	.word	0x08009c31
 8009c28:	08009c3f 	.word	0x08009c3f
 8009c2c:	08009c5d 	.word	0x08009c5d
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c30:	4b09      	ldr	r3, [pc, #36]	; (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c34:	4a08      	ldr	r2, [pc, #32]	; (8009c58 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009c36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c3a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009c3c:	e00f      	b.n	8009c5e <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	3304      	adds	r3, #4
 8009c42:	2102      	movs	r1, #2
 8009c44:	4618      	mov	r0, r3
 8009c46:	f001 fa85 	bl	800b154 <RCCEx_PLL2_Config>
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009c4e:	e006      	b.n	8009c5e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009c50:	2301      	movs	r3, #1
 8009c52:	75fb      	strb	r3, [r7, #23]
      break;
 8009c54:	e003      	b.n	8009c5e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8009c56:	bf00      	nop
 8009c58:	58024400 	.word	0x58024400
      break;
 8009c5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c5e:	7dfb      	ldrb	r3, [r7, #23]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d109      	bne.n	8009c78 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009c64:	4bba      	ldr	r3, [pc, #744]	; (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009c66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c68:	f023 0203 	bic.w	r2, r3, #3
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c70:	49b7      	ldr	r1, [pc, #732]	; (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009c72:	4313      	orrs	r3, r2
 8009c74:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009c76:	e001      	b.n	8009c7c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c78:	7dfb      	ldrb	r3, [r7, #23]
 8009c7a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	f000 8086 	beq.w	8009d96 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009c8a:	4bb2      	ldr	r3, [pc, #712]	; (8009f54 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	4ab1      	ldr	r2, [pc, #708]	; (8009f54 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8009c90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c94:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009c96:	f7f9 fc75 	bl	8003584 <HAL_GetTick>
 8009c9a:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009c9c:	e009      	b.n	8009cb2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009c9e:	f7f9 fc71 	bl	8003584 <HAL_GetTick>
 8009ca2:	4602      	mov	r2, r0
 8009ca4:	693b      	ldr	r3, [r7, #16]
 8009ca6:	1ad3      	subs	r3, r2, r3
 8009ca8:	2b64      	cmp	r3, #100	; 0x64
 8009caa:	d902      	bls.n	8009cb2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8009cac:	2303      	movs	r3, #3
 8009cae:	75fb      	strb	r3, [r7, #23]
        break;
 8009cb0:	e005      	b.n	8009cbe <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009cb2:	4ba8      	ldr	r3, [pc, #672]	; (8009f54 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d0ef      	beq.n	8009c9e <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8009cbe:	7dfb      	ldrb	r3, [r7, #23]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d166      	bne.n	8009d92 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009cc4:	4ba2      	ldr	r3, [pc, #648]	; (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009cc6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009cce:	4053      	eors	r3, r2
 8009cd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d013      	beq.n	8009d00 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009cd8:	4b9d      	ldr	r3, [pc, #628]	; (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ce0:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009ce2:	4b9b      	ldr	r3, [pc, #620]	; (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ce6:	4a9a      	ldr	r2, [pc, #616]	; (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009ce8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009cec:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009cee:	4b98      	ldr	r3, [pc, #608]	; (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cf2:	4a97      	ldr	r2, [pc, #604]	; (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009cf4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009cf8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009cfa:	4a95      	ldr	r2, [pc, #596]	; (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009d06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d0a:	d115      	bne.n	8009d38 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d0c:	f7f9 fc3a 	bl	8003584 <HAL_GetTick>
 8009d10:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009d12:	e00b      	b.n	8009d2c <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009d14:	f7f9 fc36 	bl	8003584 <HAL_GetTick>
 8009d18:	4602      	mov	r2, r0
 8009d1a:	693b      	ldr	r3, [r7, #16]
 8009d1c:	1ad3      	subs	r3, r2, r3
 8009d1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d22:	4293      	cmp	r3, r2
 8009d24:	d902      	bls.n	8009d2c <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8009d26:	2303      	movs	r3, #3
 8009d28:	75fb      	strb	r3, [r7, #23]
            break;
 8009d2a:	e005      	b.n	8009d38 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009d2c:	4b88      	ldr	r3, [pc, #544]	; (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d30:	f003 0302 	and.w	r3, r3, #2
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d0ed      	beq.n	8009d14 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8009d38:	7dfb      	ldrb	r3, [r7, #23]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d126      	bne.n	8009d8c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009d44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009d4c:	d10d      	bne.n	8009d6a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8009d4e:	4b80      	ldr	r3, [pc, #512]	; (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009d50:	691b      	ldr	r3, [r3, #16]
 8009d52:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009d5c:	0919      	lsrs	r1, r3, #4
 8009d5e:	4b7e      	ldr	r3, [pc, #504]	; (8009f58 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8009d60:	400b      	ands	r3, r1
 8009d62:	497b      	ldr	r1, [pc, #492]	; (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009d64:	4313      	orrs	r3, r2
 8009d66:	610b      	str	r3, [r1, #16]
 8009d68:	e005      	b.n	8009d76 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8009d6a:	4b79      	ldr	r3, [pc, #484]	; (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009d6c:	691b      	ldr	r3, [r3, #16]
 8009d6e:	4a78      	ldr	r2, [pc, #480]	; (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009d70:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009d74:	6113      	str	r3, [r2, #16]
 8009d76:	4b76      	ldr	r3, [pc, #472]	; (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009d78:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009d80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009d84:	4972      	ldr	r1, [pc, #456]	; (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009d86:	4313      	orrs	r3, r2
 8009d88:	670b      	str	r3, [r1, #112]	; 0x70
 8009d8a:	e004      	b.n	8009d96 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009d8c:	7dfb      	ldrb	r3, [r7, #23]
 8009d8e:	75bb      	strb	r3, [r7, #22]
 8009d90:	e001      	b.n	8009d96 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d92:	7dfb      	ldrb	r3, [r7, #23]
 8009d94:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	f003 0301 	and.w	r3, r3, #1
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d07d      	beq.n	8009e9e <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009da6:	2b28      	cmp	r3, #40	; 0x28
 8009da8:	d866      	bhi.n	8009e78 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8009daa:	a201      	add	r2, pc, #4	; (adr r2, 8009db0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8009dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009db0:	08009e7f 	.word	0x08009e7f
 8009db4:	08009e79 	.word	0x08009e79
 8009db8:	08009e79 	.word	0x08009e79
 8009dbc:	08009e79 	.word	0x08009e79
 8009dc0:	08009e79 	.word	0x08009e79
 8009dc4:	08009e79 	.word	0x08009e79
 8009dc8:	08009e79 	.word	0x08009e79
 8009dcc:	08009e79 	.word	0x08009e79
 8009dd0:	08009e55 	.word	0x08009e55
 8009dd4:	08009e79 	.word	0x08009e79
 8009dd8:	08009e79 	.word	0x08009e79
 8009ddc:	08009e79 	.word	0x08009e79
 8009de0:	08009e79 	.word	0x08009e79
 8009de4:	08009e79 	.word	0x08009e79
 8009de8:	08009e79 	.word	0x08009e79
 8009dec:	08009e79 	.word	0x08009e79
 8009df0:	08009e67 	.word	0x08009e67
 8009df4:	08009e79 	.word	0x08009e79
 8009df8:	08009e79 	.word	0x08009e79
 8009dfc:	08009e79 	.word	0x08009e79
 8009e00:	08009e79 	.word	0x08009e79
 8009e04:	08009e79 	.word	0x08009e79
 8009e08:	08009e79 	.word	0x08009e79
 8009e0c:	08009e79 	.word	0x08009e79
 8009e10:	08009e7f 	.word	0x08009e7f
 8009e14:	08009e79 	.word	0x08009e79
 8009e18:	08009e79 	.word	0x08009e79
 8009e1c:	08009e79 	.word	0x08009e79
 8009e20:	08009e79 	.word	0x08009e79
 8009e24:	08009e79 	.word	0x08009e79
 8009e28:	08009e79 	.word	0x08009e79
 8009e2c:	08009e79 	.word	0x08009e79
 8009e30:	08009e7f 	.word	0x08009e7f
 8009e34:	08009e79 	.word	0x08009e79
 8009e38:	08009e79 	.word	0x08009e79
 8009e3c:	08009e79 	.word	0x08009e79
 8009e40:	08009e79 	.word	0x08009e79
 8009e44:	08009e79 	.word	0x08009e79
 8009e48:	08009e79 	.word	0x08009e79
 8009e4c:	08009e79 	.word	0x08009e79
 8009e50:	08009e7f 	.word	0x08009e7f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	3304      	adds	r3, #4
 8009e58:	2101      	movs	r1, #1
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f001 f97a 	bl	800b154 <RCCEx_PLL2_Config>
 8009e60:	4603      	mov	r3, r0
 8009e62:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009e64:	e00c      	b.n	8009e80 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	3324      	adds	r3, #36	; 0x24
 8009e6a:	2101      	movs	r1, #1
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f001 fa23 	bl	800b2b8 <RCCEx_PLL3_Config>
 8009e72:	4603      	mov	r3, r0
 8009e74:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009e76:	e003      	b.n	8009e80 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009e78:	2301      	movs	r3, #1
 8009e7a:	75fb      	strb	r3, [r7, #23]
      break;
 8009e7c:	e000      	b.n	8009e80 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8009e7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009e80:	7dfb      	ldrb	r3, [r7, #23]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d109      	bne.n	8009e9a <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009e86:	4b32      	ldr	r3, [pc, #200]	; (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e8a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009e92:	492f      	ldr	r1, [pc, #188]	; (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009e94:	4313      	orrs	r3, r2
 8009e96:	654b      	str	r3, [r1, #84]	; 0x54
 8009e98:	e001      	b.n	8009e9e <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e9a:	7dfb      	ldrb	r3, [r7, #23]
 8009e9c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	f003 0302 	and.w	r3, r3, #2
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d037      	beq.n	8009f1a <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009eae:	2b05      	cmp	r3, #5
 8009eb0:	d820      	bhi.n	8009ef4 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8009eb2:	a201      	add	r2, pc, #4	; (adr r2, 8009eb8 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8009eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eb8:	08009efb 	.word	0x08009efb
 8009ebc:	08009ed1 	.word	0x08009ed1
 8009ec0:	08009ee3 	.word	0x08009ee3
 8009ec4:	08009efb 	.word	0x08009efb
 8009ec8:	08009efb 	.word	0x08009efb
 8009ecc:	08009efb 	.word	0x08009efb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	3304      	adds	r3, #4
 8009ed4:	2101      	movs	r1, #1
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	f001 f93c 	bl	800b154 <RCCEx_PLL2_Config>
 8009edc:	4603      	mov	r3, r0
 8009ede:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009ee0:	e00c      	b.n	8009efc <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	3324      	adds	r3, #36	; 0x24
 8009ee6:	2101      	movs	r1, #1
 8009ee8:	4618      	mov	r0, r3
 8009eea:	f001 f9e5 	bl	800b2b8 <RCCEx_PLL3_Config>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009ef2:	e003      	b.n	8009efc <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	75fb      	strb	r3, [r7, #23]
      break;
 8009ef8:	e000      	b.n	8009efc <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8009efa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009efc:	7dfb      	ldrb	r3, [r7, #23]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d109      	bne.n	8009f16 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009f02:	4b13      	ldr	r3, [pc, #76]	; (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f06:	f023 0207 	bic.w	r2, r3, #7
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f0e:	4910      	ldr	r1, [pc, #64]	; (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009f10:	4313      	orrs	r3, r2
 8009f12:	654b      	str	r3, [r1, #84]	; 0x54
 8009f14:	e001      	b.n	8009f1a <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f16:	7dfb      	ldrb	r3, [r7, #23]
 8009f18:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	f003 0304 	and.w	r3, r3, #4
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d040      	beq.n	8009fa8 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f2c:	2b05      	cmp	r3, #5
 8009f2e:	d827      	bhi.n	8009f80 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8009f30:	a201      	add	r2, pc, #4	; (adr r2, 8009f38 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8009f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f36:	bf00      	nop
 8009f38:	08009f87 	.word	0x08009f87
 8009f3c:	08009f5d 	.word	0x08009f5d
 8009f40:	08009f6f 	.word	0x08009f6f
 8009f44:	08009f87 	.word	0x08009f87
 8009f48:	08009f87 	.word	0x08009f87
 8009f4c:	08009f87 	.word	0x08009f87
 8009f50:	58024400 	.word	0x58024400
 8009f54:	58024800 	.word	0x58024800
 8009f58:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	3304      	adds	r3, #4
 8009f60:	2101      	movs	r1, #1
 8009f62:	4618      	mov	r0, r3
 8009f64:	f001 f8f6 	bl	800b154 <RCCEx_PLL2_Config>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009f6c:	e00c      	b.n	8009f88 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	3324      	adds	r3, #36	; 0x24
 8009f72:	2101      	movs	r1, #1
 8009f74:	4618      	mov	r0, r3
 8009f76:	f001 f99f 	bl	800b2b8 <RCCEx_PLL3_Config>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009f7e:	e003      	b.n	8009f88 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009f80:	2301      	movs	r3, #1
 8009f82:	75fb      	strb	r3, [r7, #23]
      break;
 8009f84:	e000      	b.n	8009f88 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8009f86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f88:	7dfb      	ldrb	r3, [r7, #23]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d10a      	bne.n	8009fa4 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009f8e:	4bb2      	ldr	r3, [pc, #712]	; (800a258 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f92:	f023 0207 	bic.w	r2, r3, #7
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f9c:	49ae      	ldr	r1, [pc, #696]	; (800a258 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009f9e:	4313      	orrs	r3, r2
 8009fa0:	658b      	str	r3, [r1, #88]	; 0x58
 8009fa2:	e001      	b.n	8009fa8 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fa4:	7dfb      	ldrb	r3, [r7, #23]
 8009fa6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f003 0320 	and.w	r3, r3, #32
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d044      	beq.n	800a03e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009fba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009fbe:	d01b      	beq.n	8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8009fc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009fc4:	d805      	bhi.n	8009fd2 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d022      	beq.n	800a010 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8009fca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009fce:	d00a      	beq.n	8009fe6 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8009fd0:	e01b      	b.n	800a00a <HAL_RCCEx_PeriphCLKConfig+0x976>
 8009fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fd6:	d01d      	beq.n	800a014 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8009fd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009fdc:	d01c      	beq.n	800a018 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8009fde:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009fe2:	d01b      	beq.n	800a01c <HAL_RCCEx_PeriphCLKConfig+0x988>
 8009fe4:	e011      	b.n	800a00a <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	3304      	adds	r3, #4
 8009fea:	2100      	movs	r1, #0
 8009fec:	4618      	mov	r0, r3
 8009fee:	f001 f8b1 	bl	800b154 <RCCEx_PLL2_Config>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009ff6:	e012      	b.n	800a01e <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	3324      	adds	r3, #36	; 0x24
 8009ffc:	2102      	movs	r1, #2
 8009ffe:	4618      	mov	r0, r3
 800a000:	f001 f95a 	bl	800b2b8 <RCCEx_PLL3_Config>
 800a004:	4603      	mov	r3, r0
 800a006:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a008:	e009      	b.n	800a01e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a00a:	2301      	movs	r3, #1
 800a00c:	75fb      	strb	r3, [r7, #23]
      break;
 800a00e:	e006      	b.n	800a01e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800a010:	bf00      	nop
 800a012:	e004      	b.n	800a01e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800a014:	bf00      	nop
 800a016:	e002      	b.n	800a01e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800a018:	bf00      	nop
 800a01a:	e000      	b.n	800a01e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800a01c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a01e:	7dfb      	ldrb	r3, [r7, #23]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d10a      	bne.n	800a03a <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a024:	4b8c      	ldr	r3, [pc, #560]	; (800a258 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a028:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a032:	4989      	ldr	r1, [pc, #548]	; (800a258 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a034:	4313      	orrs	r3, r2
 800a036:	654b      	str	r3, [r1, #84]	; 0x54
 800a038:	e001      	b.n	800a03e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a03a:	7dfb      	ldrb	r3, [r7, #23]
 800a03c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a046:	2b00      	cmp	r3, #0
 800a048:	d044      	beq.n	800a0d4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a050:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a054:	d01b      	beq.n	800a08e <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 800a056:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a05a:	d805      	bhi.n	800a068 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d022      	beq.n	800a0a6 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800a060:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a064:	d00a      	beq.n	800a07c <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 800a066:	e01b      	b.n	800a0a0 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 800a068:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a06c:	d01d      	beq.n	800a0aa <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800a06e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a072:	d01c      	beq.n	800a0ae <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 800a074:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a078:	d01b      	beq.n	800a0b2 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 800a07a:	e011      	b.n	800a0a0 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	3304      	adds	r3, #4
 800a080:	2100      	movs	r1, #0
 800a082:	4618      	mov	r0, r3
 800a084:	f001 f866 	bl	800b154 <RCCEx_PLL2_Config>
 800a088:	4603      	mov	r3, r0
 800a08a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a08c:	e012      	b.n	800a0b4 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	3324      	adds	r3, #36	; 0x24
 800a092:	2102      	movs	r1, #2
 800a094:	4618      	mov	r0, r3
 800a096:	f001 f90f 	bl	800b2b8 <RCCEx_PLL3_Config>
 800a09a:	4603      	mov	r3, r0
 800a09c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a09e:	e009      	b.n	800a0b4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	75fb      	strb	r3, [r7, #23]
      break;
 800a0a4:	e006      	b.n	800a0b4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800a0a6:	bf00      	nop
 800a0a8:	e004      	b.n	800a0b4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800a0aa:	bf00      	nop
 800a0ac:	e002      	b.n	800a0b4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800a0ae:	bf00      	nop
 800a0b0:	e000      	b.n	800a0b4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800a0b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a0b4:	7dfb      	ldrb	r3, [r7, #23]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d10a      	bne.n	800a0d0 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a0ba:	4b67      	ldr	r3, [pc, #412]	; (800a258 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a0bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0be:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a0c8:	4963      	ldr	r1, [pc, #396]	; (800a258 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a0ca:	4313      	orrs	r3, r2
 800a0cc:	658b      	str	r3, [r1, #88]	; 0x58
 800a0ce:	e001      	b.n	800a0d4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0d0:	7dfb      	ldrb	r3, [r7, #23]
 800a0d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d044      	beq.n	800a16a <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a0e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a0ea:	d01b      	beq.n	800a124 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 800a0ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a0f0:	d805      	bhi.n	800a0fe <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d022      	beq.n	800a13c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800a0f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0fa:	d00a      	beq.n	800a112 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800a0fc:	e01b      	b.n	800a136 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 800a0fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a102:	d01d      	beq.n	800a140 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800a104:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a108:	d01c      	beq.n	800a144 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 800a10a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a10e:	d01b      	beq.n	800a148 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 800a110:	e011      	b.n	800a136 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	3304      	adds	r3, #4
 800a116:	2100      	movs	r1, #0
 800a118:	4618      	mov	r0, r3
 800a11a:	f001 f81b 	bl	800b154 <RCCEx_PLL2_Config>
 800a11e:	4603      	mov	r3, r0
 800a120:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a122:	e012      	b.n	800a14a <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	3324      	adds	r3, #36	; 0x24
 800a128:	2102      	movs	r1, #2
 800a12a:	4618      	mov	r0, r3
 800a12c:	f001 f8c4 	bl	800b2b8 <RCCEx_PLL3_Config>
 800a130:	4603      	mov	r3, r0
 800a132:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a134:	e009      	b.n	800a14a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a136:	2301      	movs	r3, #1
 800a138:	75fb      	strb	r3, [r7, #23]
      break;
 800a13a:	e006      	b.n	800a14a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800a13c:	bf00      	nop
 800a13e:	e004      	b.n	800a14a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800a140:	bf00      	nop
 800a142:	e002      	b.n	800a14a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800a144:	bf00      	nop
 800a146:	e000      	b.n	800a14a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800a148:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a14a:	7dfb      	ldrb	r3, [r7, #23]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d10a      	bne.n	800a166 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a150:	4b41      	ldr	r3, [pc, #260]	; (800a258 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a154:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a15e:	493e      	ldr	r1, [pc, #248]	; (800a258 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a160:	4313      	orrs	r3, r2
 800a162:	658b      	str	r3, [r1, #88]	; 0x58
 800a164:	e001      	b.n	800a16a <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a166:	7dfb      	ldrb	r3, [r7, #23]
 800a168:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	f003 0308 	and.w	r3, r3, #8
 800a172:	2b00      	cmp	r3, #0
 800a174:	d01a      	beq.n	800a1ac <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a17c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a180:	d10a      	bne.n	800a198 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	3324      	adds	r3, #36	; 0x24
 800a186:	2102      	movs	r1, #2
 800a188:	4618      	mov	r0, r3
 800a18a:	f001 f895 	bl	800b2b8 <RCCEx_PLL3_Config>
 800a18e:	4603      	mov	r3, r0
 800a190:	2b00      	cmp	r3, #0
 800a192:	d001      	beq.n	800a198 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 800a194:	2301      	movs	r3, #1
 800a196:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a198:	4b2f      	ldr	r3, [pc, #188]	; (800a258 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a19a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a19c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a1a6:	492c      	ldr	r1, [pc, #176]	; (800a258 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a1a8:	4313      	orrs	r3, r2
 800a1aa:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	f003 0310 	and.w	r3, r3, #16
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d01a      	beq.n	800a1ee <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a1be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1c2:	d10a      	bne.n	800a1da <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	3324      	adds	r3, #36	; 0x24
 800a1c8:	2102      	movs	r1, #2
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	f001 f874 	bl	800b2b8 <RCCEx_PLL3_Config>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d001      	beq.n	800a1da <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a1da:	4b1f      	ldr	r3, [pc, #124]	; (800a258 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a1dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a1e8:	491b      	ldr	r1, [pc, #108]	; (800a258 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a1ea:	4313      	orrs	r3, r2
 800a1ec:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d032      	beq.n	800a260 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a200:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a204:	d00d      	beq.n	800a222 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 800a206:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a20a:	d016      	beq.n	800a23a <HAL_RCCEx_PeriphCLKConfig+0xba6>
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d111      	bne.n	800a234 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	3304      	adds	r3, #4
 800a214:	2100      	movs	r1, #0
 800a216:	4618      	mov	r0, r3
 800a218:	f000 ff9c 	bl	800b154 <RCCEx_PLL2_Config>
 800a21c:	4603      	mov	r3, r0
 800a21e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a220:	e00c      	b.n	800a23c <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	3324      	adds	r3, #36	; 0x24
 800a226:	2102      	movs	r1, #2
 800a228:	4618      	mov	r0, r3
 800a22a:	f001 f845 	bl	800b2b8 <RCCEx_PLL3_Config>
 800a22e:	4603      	mov	r3, r0
 800a230:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a232:	e003      	b.n	800a23c <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a234:	2301      	movs	r3, #1
 800a236:	75fb      	strb	r3, [r7, #23]
      break;
 800a238:	e000      	b.n	800a23c <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 800a23a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a23c:	7dfb      	ldrb	r3, [r7, #23]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d10c      	bne.n	800a25c <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a242:	4b05      	ldr	r3, [pc, #20]	; (800a258 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a246:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a250:	4901      	ldr	r1, [pc, #4]	; (800a258 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a252:	4313      	orrs	r3, r2
 800a254:	658b      	str	r3, [r1, #88]	; 0x58
 800a256:	e003      	b.n	800a260 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 800a258:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a25c:	7dfb      	ldrb	r3, [r7, #23]
 800a25e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d02f      	beq.n	800a2cc <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a272:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a276:	d00c      	beq.n	800a292 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800a278:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a27c:	d015      	beq.n	800a2aa <HAL_RCCEx_PeriphCLKConfig+0xc16>
 800a27e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a282:	d10f      	bne.n	800a2a4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a284:	4b79      	ldr	r3, [pc, #484]	; (800a46c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a288:	4a78      	ldr	r2, [pc, #480]	; (800a46c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a28a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a28e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800a290:	e00c      	b.n	800a2ac <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	3324      	adds	r3, #36	; 0x24
 800a296:	2101      	movs	r1, #1
 800a298:	4618      	mov	r0, r3
 800a29a:	f001 f80d 	bl	800b2b8 <RCCEx_PLL3_Config>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800a2a2:	e003      	b.n	800a2ac <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a2a4:	2301      	movs	r3, #1
 800a2a6:	75fb      	strb	r3, [r7, #23]
      break;
 800a2a8:	e000      	b.n	800a2ac <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 800a2aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a2ac:	7dfb      	ldrb	r3, [r7, #23]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d10a      	bne.n	800a2c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a2b2:	4b6e      	ldr	r3, [pc, #440]	; (800a46c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a2b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a2c0:	496a      	ldr	r1, [pc, #424]	; (800a46c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a2c2:	4313      	orrs	r3, r2
 800a2c4:	654b      	str	r3, [r1, #84]	; 0x54
 800a2c6:	e001      	b.n	800a2cc <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2c8:	7dfb      	ldrb	r3, [r7, #23]
 800a2ca:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d029      	beq.n	800a32c <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d003      	beq.n	800a2e8 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 800a2e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2e4:	d007      	beq.n	800a2f6 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800a2e6:	e00f      	b.n	800a308 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a2e8:	4b60      	ldr	r3, [pc, #384]	; (800a46c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a2ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2ec:	4a5f      	ldr	r2, [pc, #380]	; (800a46c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a2ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a2f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a2f4:	e00b      	b.n	800a30e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	3304      	adds	r3, #4
 800a2fa:	2102      	movs	r1, #2
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	f000 ff29 	bl	800b154 <RCCEx_PLL2_Config>
 800a302:	4603      	mov	r3, r0
 800a304:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a306:	e002      	b.n	800a30e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 800a308:	2301      	movs	r3, #1
 800a30a:	75fb      	strb	r3, [r7, #23]
      break;
 800a30c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a30e:	7dfb      	ldrb	r3, [r7, #23]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d109      	bne.n	800a328 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a314:	4b55      	ldr	r3, [pc, #340]	; (800a46c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a316:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a318:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a320:	4952      	ldr	r1, [pc, #328]	; (800a46c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a322:	4313      	orrs	r3, r2
 800a324:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a326:	e001      	b.n	800a32c <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a328:	7dfb      	ldrb	r3, [r7, #23]
 800a32a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a334:	2b00      	cmp	r3, #0
 800a336:	d00a      	beq.n	800a34e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	3324      	adds	r3, #36	; 0x24
 800a33c:	2102      	movs	r1, #2
 800a33e:	4618      	mov	r0, r3
 800a340:	f000 ffba 	bl	800b2b8 <RCCEx_PLL3_Config>
 800a344:	4603      	mov	r3, r0
 800a346:	2b00      	cmp	r3, #0
 800a348:	d001      	beq.n	800a34e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 800a34a:	2301      	movs	r3, #1
 800a34c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a356:	2b00      	cmp	r3, #0
 800a358:	d02f      	beq.n	800a3ba <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a35e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a362:	d00c      	beq.n	800a37e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800a364:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a368:	d802      	bhi.n	800a370 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d011      	beq.n	800a392 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 800a36e:	e00d      	b.n	800a38c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 800a370:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a374:	d00f      	beq.n	800a396 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 800a376:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a37a:	d00e      	beq.n	800a39a <HAL_RCCEx_PeriphCLKConfig+0xd06>
 800a37c:	e006      	b.n	800a38c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a37e:	4b3b      	ldr	r3, [pc, #236]	; (800a46c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a382:	4a3a      	ldr	r2, [pc, #232]	; (800a46c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a384:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a388:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800a38a:	e007      	b.n	800a39c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a38c:	2301      	movs	r3, #1
 800a38e:	75fb      	strb	r3, [r7, #23]
      break;
 800a390:	e004      	b.n	800a39c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800a392:	bf00      	nop
 800a394:	e002      	b.n	800a39c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800a396:	bf00      	nop
 800a398:	e000      	b.n	800a39c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800a39a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a39c:	7dfb      	ldrb	r3, [r7, #23]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d109      	bne.n	800a3b6 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a3a2:	4b32      	ldr	r3, [pc, #200]	; (800a46c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a3a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a3ae:	492f      	ldr	r1, [pc, #188]	; (800a46c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a3b0:	4313      	orrs	r3, r2
 800a3b2:	654b      	str	r3, [r1, #84]	; 0x54
 800a3b4:	e001      	b.n	800a3ba <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3b6:	7dfb      	ldrb	r3, [r7, #23]
 800a3b8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d008      	beq.n	800a3d8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a3c6:	4b29      	ldr	r3, [pc, #164]	; (800a46c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a3c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3ca:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3d2:	4926      	ldr	r1, [pc, #152]	; (800a46c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a3d4:	4313      	orrs	r3, r2
 800a3d6:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d009      	beq.n	800a3f8 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a3e4:	4b21      	ldr	r3, [pc, #132]	; (800a46c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a3e6:	691b      	ldr	r3, [r3, #16]
 800a3e8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a3f2:	491e      	ldr	r1, [pc, #120]	; (800a46c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a3f4:	4313      	orrs	r3, r2
 800a3f6:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a400:	2b00      	cmp	r3, #0
 800a402:	d008      	beq.n	800a416 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a404:	4b19      	ldr	r3, [pc, #100]	; (800a46c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a406:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a408:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a410:	4916      	ldr	r1, [pc, #88]	; (800a46c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a412:	4313      	orrs	r3, r2
 800a414:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d00d      	beq.n	800a43e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a422:	4b12      	ldr	r3, [pc, #72]	; (800a46c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a424:	691b      	ldr	r3, [r3, #16]
 800a426:	4a11      	ldr	r2, [pc, #68]	; (800a46c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a428:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a42c:	6113      	str	r3, [r2, #16]
 800a42e:	4b0f      	ldr	r3, [pc, #60]	; (800a46c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a430:	691a      	ldr	r2, [r3, #16]
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a438:	490c      	ldr	r1, [pc, #48]	; (800a46c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a43a:	4313      	orrs	r3, r2
 800a43c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	2b00      	cmp	r3, #0
 800a444:	da08      	bge.n	800a458 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a446:	4b09      	ldr	r3, [pc, #36]	; (800a46c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a44a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a452:	4906      	ldr	r1, [pc, #24]	; (800a46c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a454:	4313      	orrs	r3, r2
 800a456:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 800a458:	7dbb      	ldrb	r3, [r7, #22]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d101      	bne.n	800a462 <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 800a45e:	2300      	movs	r3, #0
 800a460:	e000      	b.n	800a464 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 800a462:	2301      	movs	r3, #1
}
 800a464:	4618      	mov	r0, r3
 800a466:	3718      	adds	r7, #24
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}
 800a46c:	58024400 	.word	0x58024400

0800a470 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b090      	sub	sp, #64	; 0x40
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a47e:	d150      	bne.n	800a522 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800a480:	4ba1      	ldr	r3, [pc, #644]	; (800a708 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a482:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a484:	f003 0307 	and.w	r3, r3, #7
 800a488:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a48a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a48c:	2b04      	cmp	r3, #4
 800a48e:	d844      	bhi.n	800a51a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 800a490:	a201      	add	r2, pc, #4	; (adr r2, 800a498 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800a492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a496:	bf00      	nop
 800a498:	0800a4ad 	.word	0x0800a4ad
 800a49c:	0800a4bd 	.word	0x0800a4bd
 800a4a0:	0800a4cd 	.word	0x0800a4cd
 800a4a4:	0800a515 	.word	0x0800a515
 800a4a8:	0800a4dd 	.word	0x0800a4dd
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a4ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	f000 fd03 	bl	800aebc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a4b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a4ba:	e241      	b.n	800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a4bc:	f107 0318 	add.w	r3, r7, #24
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	f000 fa63 	bl	800a98c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a4c6:	69bb      	ldr	r3, [r7, #24]
 800a4c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a4ca:	e239      	b.n	800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a4cc:	f107 030c 	add.w	r3, r7, #12
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	f000 fba7 	bl	800ac24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a4da:	e231      	b.n	800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a4dc:	4b8a      	ldr	r3, [pc, #552]	; (800a708 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a4de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a4e4:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800a4e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d102      	bne.n	800a4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800a4ec:	4b87      	ldr	r3, [pc, #540]	; (800a70c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a4ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800a4f0:	e226      	b.n	800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800a4f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a4f8:	d102      	bne.n	800a500 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 800a4fa:	4b85      	ldr	r3, [pc, #532]	; (800a710 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a4fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a4fe:	e21f      	b.n	800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800a500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a502:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a506:	d102      	bne.n	800a50e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 800a508:	4b82      	ldr	r3, [pc, #520]	; (800a714 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a50a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a50c:	e218      	b.n	800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800a50e:	2300      	movs	r3, #0
 800a510:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a512:	e215      	b.n	800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a514:	4b80      	ldr	r3, [pc, #512]	; (800a718 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800a516:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a518:	e212      	b.n	800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800a51a:	2300      	movs	r3, #0
 800a51c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a51e:	bf00      	nop
 800a520:	e20e      	b.n	800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a528:	d14f      	bne.n	800a5ca <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800a52a:	4b77      	ldr	r3, [pc, #476]	; (800a708 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a52c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a52e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800a532:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a536:	2b80      	cmp	r3, #128	; 0x80
 800a538:	d01c      	beq.n	800a574 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800a53a:	2b80      	cmp	r3, #128	; 0x80
 800a53c:	d804      	bhi.n	800a548 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d008      	beq.n	800a554 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 800a542:	2b40      	cmp	r3, #64	; 0x40
 800a544:	d00e      	beq.n	800a564 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800a546:	e03c      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 800a548:	2bc0      	cmp	r3, #192	; 0xc0
 800a54a:	d037      	beq.n	800a5bc <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 800a54c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a550:	d018      	beq.n	800a584 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 800a552:	e036      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a554:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a558:	4618      	mov	r0, r3
 800a55a:	f000 fcaf 	bl	800aebc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a55e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a560:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a562:	e1ed      	b.n	800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a564:	f107 0318 	add.w	r3, r7, #24
 800a568:	4618      	mov	r0, r3
 800a56a:	f000 fa0f 	bl	800a98c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a56e:	69bb      	ldr	r3, [r7, #24]
 800a570:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a572:	e1e5      	b.n	800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a574:	f107 030c 	add.w	r3, r7, #12
 800a578:	4618      	mov	r0, r3
 800a57a:	f000 fb53 	bl	800ac24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a582:	e1dd      	b.n	800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a584:	4b60      	ldr	r3, [pc, #384]	; (800a708 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a588:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a58c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800a58e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a590:	2b00      	cmp	r3, #0
 800a592:	d102      	bne.n	800a59a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800a594:	4b5d      	ldr	r3, [pc, #372]	; (800a70c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a596:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800a598:	e1d2      	b.n	800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800a59a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a59c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a5a0:	d102      	bne.n	800a5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 800a5a2:	4b5b      	ldr	r3, [pc, #364]	; (800a710 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a5a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a5a6:	e1cb      	b.n	800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800a5a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a5ae:	d102      	bne.n	800a5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 800a5b0:	4b58      	ldr	r3, [pc, #352]	; (800a714 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a5b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a5b4:	e1c4      	b.n	800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a5ba:	e1c1      	b.n	800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a5bc:	4b56      	ldr	r3, [pc, #344]	; (800a718 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800a5be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a5c0:	e1be      	b.n	800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a5c6:	bf00      	nop
 800a5c8:	e1ba      	b.n	800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a5d0:	d153      	bne.n	800a67a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800a5d2:	4b4d      	ldr	r3, [pc, #308]	; (800a708 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a5d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5d6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800a5da:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a5dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a5e2:	d01f      	beq.n	800a624 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 800a5e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a5e8:	d805      	bhi.n	800a5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d00a      	beq.n	800a604 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 800a5ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a5f2:	d00f      	beq.n	800a614 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 800a5f4:	e03d      	b.n	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 800a5f6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a5fa:	d037      	beq.n	800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800a5fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a600:	d018      	beq.n	800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 800a602:	e036      	b.n	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a604:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a608:	4618      	mov	r0, r3
 800a60a:	f000 fc57 	bl	800aebc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a60e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a610:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a612:	e195      	b.n	800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a614:	f107 0318 	add.w	r3, r7, #24
 800a618:	4618      	mov	r0, r3
 800a61a:	f000 f9b7 	bl	800a98c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a61e:	69bb      	ldr	r3, [r7, #24]
 800a620:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a622:	e18d      	b.n	800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a624:	f107 030c 	add.w	r3, r7, #12
 800a628:	4618      	mov	r0, r3
 800a62a:	f000 fafb 	bl	800ac24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a632:	e185      	b.n	800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a634:	4b34      	ldr	r3, [pc, #208]	; (800a708 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a636:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a638:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a63c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800a63e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a640:	2b00      	cmp	r3, #0
 800a642:	d102      	bne.n	800a64a <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800a644:	4b31      	ldr	r3, [pc, #196]	; (800a70c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a646:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800a648:	e17a      	b.n	800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800a64a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a64c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a650:	d102      	bne.n	800a658 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 800a652:	4b2f      	ldr	r3, [pc, #188]	; (800a710 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a654:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a656:	e173      	b.n	800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800a658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a65a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a65e:	d102      	bne.n	800a666 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 800a660:	4b2c      	ldr	r3, [pc, #176]	; (800a714 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a662:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a664:	e16c      	b.n	800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800a666:	2300      	movs	r3, #0
 800a668:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a66a:	e169      	b.n	800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a66c:	4b2a      	ldr	r3, [pc, #168]	; (800a718 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800a66e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a670:	e166      	b.n	800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800a672:	2300      	movs	r3, #0
 800a674:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a676:	bf00      	nop
 800a678:	e162      	b.n	800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a680:	d15d      	bne.n	800a73e <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800a682:	4b21      	ldr	r3, [pc, #132]	; (800a708 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a686:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800a68a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a68c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a68e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a692:	d01f      	beq.n	800a6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800a694:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a698:	d805      	bhi.n	800a6a6 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d00a      	beq.n	800a6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800a69e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a6a2:	d00f      	beq.n	800a6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 800a6a4:	e047      	b.n	800a736 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 800a6a6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a6aa:	d041      	beq.n	800a730 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 800a6ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a6b0:	d018      	beq.n	800a6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 800a6b2:	e040      	b.n	800a736 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a6b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	f000 fbff 	bl	800aebc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a6be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a6c2:	e13d      	b.n	800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6c4:	f107 0318 	add.w	r3, r7, #24
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	f000 f95f 	bl	800a98c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a6ce:	69bb      	ldr	r3, [r7, #24]
 800a6d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a6d2:	e135      	b.n	800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a6d4:	f107 030c 	add.w	r3, r7, #12
 800a6d8:	4618      	mov	r0, r3
 800a6da:	f000 faa3 	bl	800ac24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a6e2:	e12d      	b.n	800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a6e4:	4b08      	ldr	r3, [pc, #32]	; (800a708 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a6e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a6ec:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800a6ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d102      	bne.n	800a6fa <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800a6f4:	4b05      	ldr	r3, [pc, #20]	; (800a70c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a6f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800a6f8:	e122      	b.n	800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800a6fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a700:	d10c      	bne.n	800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 800a702:	4b03      	ldr	r3, [pc, #12]	; (800a710 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a704:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a706:	e11b      	b.n	800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800a708:	58024400 	.word	0x58024400
 800a70c:	03d09000 	.word	0x03d09000
 800a710:	003d0900 	.word	0x003d0900
 800a714:	017d7840 	.word	0x017d7840
 800a718:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800a71c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a71e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a722:	d102      	bne.n	800a72a <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 800a724:	4b89      	ldr	r3, [pc, #548]	; (800a94c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800a726:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a728:	e10a      	b.n	800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800a72a:	2300      	movs	r3, #0
 800a72c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a72e:	e107      	b.n	800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a730:	4b87      	ldr	r3, [pc, #540]	; (800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800a732:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a734:	e104      	b.n	800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800a736:	2300      	movs	r3, #0
 800a738:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a73a:	bf00      	nop
 800a73c:	e100      	b.n	800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a744:	d153      	bne.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800a746:	4b83      	ldr	r3, [pc, #524]	; (800a954 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800a748:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a74a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800a74e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a752:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a756:	d01f      	beq.n	800a798 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800a758:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a75c:	d805      	bhi.n	800a76a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d00a      	beq.n	800a778 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 800a762:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a766:	d00f      	beq.n	800a788 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 800a768:	e03d      	b.n	800a7e6 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 800a76a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a76e:	d037      	beq.n	800a7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 800a770:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a774:	d018      	beq.n	800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800a776:	e036      	b.n	800a7e6 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a778:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a77c:	4618      	mov	r0, r3
 800a77e:	f000 fb9d 	bl	800aebc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a784:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a786:	e0db      	b.n	800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a788:	f107 0318 	add.w	r3, r7, #24
 800a78c:	4618      	mov	r0, r3
 800a78e:	f000 f8fd 	bl	800a98c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a792:	69bb      	ldr	r3, [r7, #24]
 800a794:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a796:	e0d3      	b.n	800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a798:	f107 030c 	add.w	r3, r7, #12
 800a79c:	4618      	mov	r0, r3
 800a79e:	f000 fa41 	bl	800ac24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a7a6:	e0cb      	b.n	800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a7a8:	4b6a      	ldr	r3, [pc, #424]	; (800a954 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800a7aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a7b0:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800a7b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d102      	bne.n	800a7be <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800a7b8:	4b67      	ldr	r3, [pc, #412]	; (800a958 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800a7ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800a7bc:	e0c0      	b.n	800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800a7be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a7c4:	d102      	bne.n	800a7cc <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 800a7c6:	4b65      	ldr	r3, [pc, #404]	; (800a95c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800a7c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a7ca:	e0b9      	b.n	800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800a7cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a7d2:	d102      	bne.n	800a7da <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 800a7d4:	4b5d      	ldr	r3, [pc, #372]	; (800a94c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800a7d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a7d8:	e0b2      	b.n	800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800a7da:	2300      	movs	r3, #0
 800a7dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a7de:	e0af      	b.n	800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a7e0:	4b5b      	ldr	r3, [pc, #364]	; (800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800a7e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a7e4:	e0ac      	b.n	800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a7ea:	bf00      	nop
 800a7ec:	e0a8      	b.n	800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a7f4:	d13d      	bne.n	800a872 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800a7f6:	4b57      	ldr	r3, [pc, #348]	; (800a954 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800a7f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a7fe:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a802:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a806:	d00c      	beq.n	800a822 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800a808:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a80c:	d011      	beq.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d12b      	bne.n	800a86a <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a812:	f107 0318 	add.w	r3, r7, #24
 800a816:	4618      	mov	r0, r3
 800a818:	f000 f8b8 	bl	800a98c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a81c:	69bb      	ldr	r3, [r7, #24]
 800a81e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a820:	e08e      	b.n	800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a822:	f107 030c 	add.w	r3, r7, #12
 800a826:	4618      	mov	r0, r3
 800a828:	f000 f9fc 	bl	800ac24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a82c:	697b      	ldr	r3, [r7, #20]
 800a82e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a830:	e086      	b.n	800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a832:	4b48      	ldr	r3, [pc, #288]	; (800a954 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800a834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a836:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a83a:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800a83c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d102      	bne.n	800a848 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800a842:	4b45      	ldr	r3, [pc, #276]	; (800a958 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800a844:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800a846:	e07b      	b.n	800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800a848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a84a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a84e:	d102      	bne.n	800a856 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 800a850:	4b42      	ldr	r3, [pc, #264]	; (800a95c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800a852:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a854:	e074      	b.n	800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800a856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a858:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a85c:	d102      	bne.n	800a864 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 800a85e:	4b3b      	ldr	r3, [pc, #236]	; (800a94c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800a860:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a862:	e06d      	b.n	800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800a864:	2300      	movs	r3, #0
 800a866:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a868:	e06a      	b.n	800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800a86a:	2300      	movs	r3, #0
 800a86c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a86e:	bf00      	nop
 800a870:	e066      	b.n	800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a878:	d11f      	bne.n	800a8ba <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800a87a:	4b36      	ldr	r3, [pc, #216]	; (800a954 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800a87c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a87e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a882:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a886:	2b00      	cmp	r3, #0
 800a888:	d003      	beq.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800a88a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a88e:	d008      	beq.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 800a890:	e00f      	b.n	800a8b2 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a892:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a896:	4618      	mov	r0, r3
 800a898:	f000 fb10 	bl	800aebc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a89c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a89e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a8a0:	e04e      	b.n	800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8a2:	f107 0318 	add.w	r3, r7, #24
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	f000 f870 	bl	800a98c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a8ac:	6a3b      	ldr	r3, [r7, #32]
 800a8ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a8b0:	e046      	b.n	800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a8b6:	bf00      	nop
 800a8b8:	e042      	b.n	800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a8c0:	d13c      	bne.n	800a93c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800a8c2:	4b24      	ldr	r3, [pc, #144]	; (800a954 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800a8c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8c6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800a8ca:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a8cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a8d2:	d01e      	beq.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 800a8d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a8d8:	d805      	bhi.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d00d      	beq.n	800a8fa <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800a8de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a8e2:	d00e      	beq.n	800a902 <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 800a8e4:	e026      	b.n	800a934 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 800a8e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8ea:	d01d      	beq.n	800a928 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 800a8ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a8f0:	d01d      	beq.n	800a92e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800a8f2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a8f6:	d014      	beq.n	800a922 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800a8f8:	e01c      	b.n	800a934 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a8fa:	f000 f831 	bl	800a960 <HAL_RCCEx_GetD3PCLK1Freq>
 800a8fe:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800a900:	e01e      	b.n	800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a902:	f107 0318 	add.w	r3, r7, #24
 800a906:	4618      	mov	r0, r3
 800a908:	f000 f840 	bl	800a98c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a90c:	69fb      	ldr	r3, [r7, #28]
 800a90e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a910:	e016      	b.n	800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a912:	f107 030c 	add.w	r3, r7, #12
 800a916:	4618      	mov	r0, r3
 800a918:	f000 f984 	bl	800ac24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a91c:	693b      	ldr	r3, [r7, #16]
 800a91e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a920:	e00e      	b.n	800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 800a922:	4b0d      	ldr	r3, [pc, #52]	; (800a958 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800a924:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a926:	e00b      	b.n	800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 800a928:	4b0c      	ldr	r3, [pc, #48]	; (800a95c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800a92a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a92c:	e008      	b.n	800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 800a92e:	4b07      	ldr	r3, [pc, #28]	; (800a94c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800a930:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a932:	e005      	b.n	800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800a934:	2300      	movs	r3, #0
 800a936:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a938:	bf00      	nop
 800a93a:	e001      	b.n	800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 800a93c:	2300      	movs	r3, #0
 800a93e:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800a940:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a942:	4618      	mov	r0, r3
 800a944:	3740      	adds	r7, #64	; 0x40
 800a946:	46bd      	mov	sp, r7
 800a948:	bd80      	pop	{r7, pc}
 800a94a:	bf00      	nop
 800a94c:	017d7840 	.word	0x017d7840
 800a950:	00bb8000 	.word	0x00bb8000
 800a954:	58024400 	.word	0x58024400
 800a958:	03d09000 	.word	0x03d09000
 800a95c:	003d0900 	.word	0x003d0900

0800a960 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a964:	f7fe fe1e 	bl	80095a4 <HAL_RCC_GetHCLKFreq>
 800a968:	4601      	mov	r1, r0
 800a96a:	4b06      	ldr	r3, [pc, #24]	; (800a984 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a96c:	6a1b      	ldr	r3, [r3, #32]
 800a96e:	091b      	lsrs	r3, r3, #4
 800a970:	f003 0307 	and.w	r3, r3, #7
 800a974:	4a04      	ldr	r2, [pc, #16]	; (800a988 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a976:	5cd3      	ldrb	r3, [r2, r3]
 800a978:	f003 031f 	and.w	r3, r3, #31
 800a97c:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a980:	4618      	mov	r0, r3
 800a982:	bd80      	pop	{r7, pc}
 800a984:	58024400 	.word	0x58024400
 800a988:	08019e9c 	.word	0x08019e9c

0800a98c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800a98c:	b480      	push	{r7}
 800a98e:	b089      	sub	sp, #36	; 0x24
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a994:	4b9d      	ldr	r3, [pc, #628]	; (800ac0c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a998:	f003 0303 	and.w	r3, r3, #3
 800a99c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800a99e:	4b9b      	ldr	r3, [pc, #620]	; (800ac0c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a9a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9a2:	0b1b      	lsrs	r3, r3, #12
 800a9a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a9a8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a9aa:	4b98      	ldr	r3, [pc, #608]	; (800ac0c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a9ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9ae:	091b      	lsrs	r3, r3, #4
 800a9b0:	f003 0301 	and.w	r3, r3, #1
 800a9b4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800a9b6:	4b95      	ldr	r3, [pc, #596]	; (800ac0c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a9b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9ba:	08db      	lsrs	r3, r3, #3
 800a9bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a9c0:	693a      	ldr	r2, [r7, #16]
 800a9c2:	fb02 f303 	mul.w	r3, r2, r3
 800a9c6:	ee07 3a90 	vmov	s15, r3
 800a9ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9ce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a9d2:	697b      	ldr	r3, [r7, #20]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	f000 810a 	beq.w	800abee <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 800a9da:	69bb      	ldr	r3, [r7, #24]
 800a9dc:	2b01      	cmp	r3, #1
 800a9de:	d05a      	beq.n	800aa96 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 800a9e0:	2b01      	cmp	r3, #1
 800a9e2:	d302      	bcc.n	800a9ea <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 800a9e4:	2b02      	cmp	r3, #2
 800a9e6:	d078      	beq.n	800aada <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 800a9e8:	e099      	b.n	800ab1e <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a9ea:	4b88      	ldr	r3, [pc, #544]	; (800ac0c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	f003 0320 	and.w	r3, r3, #32
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d02d      	beq.n	800aa52 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a9f6:	4b85      	ldr	r3, [pc, #532]	; (800ac0c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	08db      	lsrs	r3, r3, #3
 800a9fc:	f003 0303 	and.w	r3, r3, #3
 800aa00:	4a83      	ldr	r2, [pc, #524]	; (800ac10 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800aa02:	fa22 f303 	lsr.w	r3, r2, r3
 800aa06:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800aa08:	68bb      	ldr	r3, [r7, #8]
 800aa0a:	ee07 3a90 	vmov	s15, r3
 800aa0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa12:	697b      	ldr	r3, [r7, #20]
 800aa14:	ee07 3a90 	vmov	s15, r3
 800aa18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa20:	4b7a      	ldr	r3, [pc, #488]	; (800ac0c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800aa22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa28:	ee07 3a90 	vmov	s15, r3
 800aa2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa30:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa34:	eddf 5a77 	vldr	s11, [pc, #476]	; 800ac14 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800aa38:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa40:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa48:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa4c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800aa50:	e087      	b.n	800ab62 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800aa52:	697b      	ldr	r3, [r7, #20]
 800aa54:	ee07 3a90 	vmov	s15, r3
 800aa58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa5c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800ac18 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 800aa60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa64:	4b69      	ldr	r3, [pc, #420]	; (800ac0c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800aa66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa6c:	ee07 3a90 	vmov	s15, r3
 800aa70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa74:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa78:	eddf 5a66 	vldr	s11, [pc, #408]	; 800ac14 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800aa7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa90:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aa94:	e065      	b.n	800ab62 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800aa96:	697b      	ldr	r3, [r7, #20]
 800aa98:	ee07 3a90 	vmov	s15, r3
 800aa9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aaa0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800ac1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800aaa4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aaa8:	4b58      	ldr	r3, [pc, #352]	; (800ac0c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800aaaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aab0:	ee07 3a90 	vmov	s15, r3
 800aab4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aab8:	ed97 6a03 	vldr	s12, [r7, #12]
 800aabc:	eddf 5a55 	vldr	s11, [pc, #340]	; 800ac14 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800aac0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aac4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aac8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aacc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aad0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aad4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aad8:	e043      	b.n	800ab62 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800aada:	697b      	ldr	r3, [r7, #20]
 800aadc:	ee07 3a90 	vmov	s15, r3
 800aae0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aae4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800ac20 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 800aae8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aaec:	4b47      	ldr	r3, [pc, #284]	; (800ac0c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800aaee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aaf4:	ee07 3a90 	vmov	s15, r3
 800aaf8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aafc:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab00:	eddf 5a44 	vldr	s11, [pc, #272]	; 800ac14 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800ab04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab14:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab18:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ab1c:	e021      	b.n	800ab62 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ab1e:	697b      	ldr	r3, [r7, #20]
 800ab20:	ee07 3a90 	vmov	s15, r3
 800ab24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab28:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800ac1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800ab2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab30:	4b36      	ldr	r3, [pc, #216]	; (800ac0c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800ab32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab38:	ee07 3a90 	vmov	s15, r3
 800ab3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab40:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab44:	eddf 5a33 	vldr	s11, [pc, #204]	; 800ac14 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800ab48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab58:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab5c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ab60:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800ab62:	4b2a      	ldr	r3, [pc, #168]	; (800ac0c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800ab64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab66:	0a5b      	lsrs	r3, r3, #9
 800ab68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab6c:	ee07 3a90 	vmov	s15, r3
 800ab70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ab78:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ab7c:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab88:	ee17 2a90 	vmov	r2, s15
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800ab90:	4b1e      	ldr	r3, [pc, #120]	; (800ac0c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800ab92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab94:	0c1b      	lsrs	r3, r3, #16
 800ab96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab9a:	ee07 3a90 	vmov	s15, r3
 800ab9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aba2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aba6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800abaa:	edd7 6a07 	vldr	s13, [r7, #28]
 800abae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800abb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800abb6:	ee17 2a90 	vmov	r2, s15
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800abbe:	4b13      	ldr	r3, [pc, #76]	; (800ac0c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800abc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abc2:	0e1b      	lsrs	r3, r3, #24
 800abc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abc8:	ee07 3a90 	vmov	s15, r3
 800abcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abd0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800abd4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800abd8:	edd7 6a07 	vldr	s13, [r7, #28]
 800abdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800abe0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800abe4:	ee17 2a90 	vmov	r2, s15
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800abec:	e008      	b.n	800ac00 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2200      	movs	r2, #0
 800abf2:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	2200      	movs	r2, #0
 800abf8:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	2200      	movs	r2, #0
 800abfe:	609a      	str	r2, [r3, #8]
}
 800ac00:	bf00      	nop
 800ac02:	3724      	adds	r7, #36	; 0x24
 800ac04:	46bd      	mov	sp, r7
 800ac06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0a:	4770      	bx	lr
 800ac0c:	58024400 	.word	0x58024400
 800ac10:	03d09000 	.word	0x03d09000
 800ac14:	46000000 	.word	0x46000000
 800ac18:	4c742400 	.word	0x4c742400
 800ac1c:	4a742400 	.word	0x4a742400
 800ac20:	4bbebc20 	.word	0x4bbebc20

0800ac24 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800ac24:	b480      	push	{r7}
 800ac26:	b089      	sub	sp, #36	; 0x24
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ac2c:	4b9d      	ldr	r3, [pc, #628]	; (800aea4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800ac2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac30:	f003 0303 	and.w	r3, r3, #3
 800ac34:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800ac36:	4b9b      	ldr	r3, [pc, #620]	; (800aea4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800ac38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac3a:	0d1b      	lsrs	r3, r3, #20
 800ac3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ac40:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ac42:	4b98      	ldr	r3, [pc, #608]	; (800aea4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800ac44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac46:	0a1b      	lsrs	r3, r3, #8
 800ac48:	f003 0301 	and.w	r3, r3, #1
 800ac4c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800ac4e:	4b95      	ldr	r3, [pc, #596]	; (800aea4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800ac50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac52:	08db      	lsrs	r3, r3, #3
 800ac54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ac58:	693a      	ldr	r2, [r7, #16]
 800ac5a:	fb02 f303 	mul.w	r3, r2, r3
 800ac5e:	ee07 3a90 	vmov	s15, r3
 800ac62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac66:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ac6a:	697b      	ldr	r3, [r7, #20]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	f000 810a 	beq.w	800ae86 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800ac72:	69bb      	ldr	r3, [r7, #24]
 800ac74:	2b01      	cmp	r3, #1
 800ac76:	d05a      	beq.n	800ad2e <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 800ac78:	2b01      	cmp	r3, #1
 800ac7a:	d302      	bcc.n	800ac82 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 800ac7c:	2b02      	cmp	r3, #2
 800ac7e:	d078      	beq.n	800ad72 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 800ac80:	e099      	b.n	800adb6 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac82:	4b88      	ldr	r3, [pc, #544]	; (800aea4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	f003 0320 	and.w	r3, r3, #32
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d02d      	beq.n	800acea <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ac8e:	4b85      	ldr	r3, [pc, #532]	; (800aea4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	08db      	lsrs	r3, r3, #3
 800ac94:	f003 0303 	and.w	r3, r3, #3
 800ac98:	4a83      	ldr	r2, [pc, #524]	; (800aea8 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 800ac9a:	fa22 f303 	lsr.w	r3, r2, r3
 800ac9e:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800aca0:	68bb      	ldr	r3, [r7, #8]
 800aca2:	ee07 3a90 	vmov	s15, r3
 800aca6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acaa:	697b      	ldr	r3, [r7, #20]
 800acac:	ee07 3a90 	vmov	s15, r3
 800acb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acb4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acb8:	4b7a      	ldr	r3, [pc, #488]	; (800aea4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800acba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acc0:	ee07 3a90 	vmov	s15, r3
 800acc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acc8:	ed97 6a03 	vldr	s12, [r7, #12]
 800accc:	eddf 5a77 	vldr	s11, [pc, #476]	; 800aeac <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800acd0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acd4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acd8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800acdc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ace0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ace4:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800ace8:	e087      	b.n	800adfa <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800acea:	697b      	ldr	r3, [r7, #20]
 800acec:	ee07 3a90 	vmov	s15, r3
 800acf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acf4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800aeb0 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 800acf8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acfc:	4b69      	ldr	r3, [pc, #420]	; (800aea4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800acfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad04:	ee07 3a90 	vmov	s15, r3
 800ad08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad0c:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad10:	eddf 5a66 	vldr	s11, [pc, #408]	; 800aeac <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800ad14:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad18:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad1c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad24:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad28:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ad2c:	e065      	b.n	800adfa <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ad2e:	697b      	ldr	r3, [r7, #20]
 800ad30:	ee07 3a90 	vmov	s15, r3
 800ad34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad38:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800aeb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800ad3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad40:	4b58      	ldr	r3, [pc, #352]	; (800aea4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800ad42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad48:	ee07 3a90 	vmov	s15, r3
 800ad4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad50:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad54:	eddf 5a55 	vldr	s11, [pc, #340]	; 800aeac <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800ad58:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad60:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad68:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad6c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ad70:	e043      	b.n	800adfa <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ad72:	697b      	ldr	r3, [r7, #20]
 800ad74:	ee07 3a90 	vmov	s15, r3
 800ad78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad7c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800aeb8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 800ad80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad84:	4b47      	ldr	r3, [pc, #284]	; (800aea4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800ad86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad8c:	ee07 3a90 	vmov	s15, r3
 800ad90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad94:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad98:	eddf 5a44 	vldr	s11, [pc, #272]	; 800aeac <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800ad9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ada0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ada4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ada8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adb0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800adb4:	e021      	b.n	800adfa <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800adb6:	697b      	ldr	r3, [r7, #20]
 800adb8:	ee07 3a90 	vmov	s15, r3
 800adbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adc0:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800aeb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800adc4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800adc8:	4b36      	ldr	r3, [pc, #216]	; (800aea4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800adca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800add0:	ee07 3a90 	vmov	s15, r3
 800add4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800add8:	ed97 6a03 	vldr	s12, [r7, #12]
 800addc:	eddf 5a33 	vldr	s11, [pc, #204]	; 800aeac <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800ade0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ade4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ade8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800adec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adf4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800adf8:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800adfa:	4b2a      	ldr	r3, [pc, #168]	; (800aea4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800adfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adfe:	0a5b      	lsrs	r3, r3, #9
 800ae00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae04:	ee07 3a90 	vmov	s15, r3
 800ae08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ae10:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae14:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae20:	ee17 2a90 	vmov	r2, s15
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800ae28:	4b1e      	ldr	r3, [pc, #120]	; (800aea4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800ae2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae2c:	0c1b      	lsrs	r3, r3, #16
 800ae2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae32:	ee07 3a90 	vmov	s15, r3
 800ae36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ae3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae42:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae4e:	ee17 2a90 	vmov	r2, s15
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800ae56:	4b13      	ldr	r3, [pc, #76]	; (800aea4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800ae58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae5a:	0e1b      	lsrs	r3, r3, #24
 800ae5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae60:	ee07 3a90 	vmov	s15, r3
 800ae64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ae6c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae70:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae7c:	ee17 2a90 	vmov	r2, s15
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ae84:	e008      	b.n	800ae98 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	2200      	movs	r2, #0
 800ae8a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2200      	movs	r2, #0
 800ae90:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2200      	movs	r2, #0
 800ae96:	609a      	str	r2, [r3, #8]
}
 800ae98:	bf00      	nop
 800ae9a:	3724      	adds	r7, #36	; 0x24
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea2:	4770      	bx	lr
 800aea4:	58024400 	.word	0x58024400
 800aea8:	03d09000 	.word	0x03d09000
 800aeac:	46000000 	.word	0x46000000
 800aeb0:	4c742400 	.word	0x4c742400
 800aeb4:	4a742400 	.word	0x4a742400
 800aeb8:	4bbebc20 	.word	0x4bbebc20

0800aebc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800aebc:	b480      	push	{r7}
 800aebe:	b089      	sub	sp, #36	; 0x24
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aec4:	4b9d      	ldr	r3, [pc, #628]	; (800b13c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800aec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aec8:	f003 0303 	and.w	r3, r3, #3
 800aecc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800aece:	4b9b      	ldr	r3, [pc, #620]	; (800b13c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800aed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aed2:	091b      	lsrs	r3, r3, #4
 800aed4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aed8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800aeda:	4b98      	ldr	r3, [pc, #608]	; (800b13c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800aedc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aede:	f003 0301 	and.w	r3, r3, #1
 800aee2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800aee4:	4b95      	ldr	r3, [pc, #596]	; (800b13c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800aee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aee8:	08db      	lsrs	r3, r3, #3
 800aeea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aeee:	693a      	ldr	r2, [r7, #16]
 800aef0:	fb02 f303 	mul.w	r3, r2, r3
 800aef4:	ee07 3a90 	vmov	s15, r3
 800aef8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aefc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800af00:	697b      	ldr	r3, [r7, #20]
 800af02:	2b00      	cmp	r3, #0
 800af04:	f000 810a 	beq.w	800b11c <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 800af08:	69bb      	ldr	r3, [r7, #24]
 800af0a:	2b01      	cmp	r3, #1
 800af0c:	d05a      	beq.n	800afc4 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 800af0e:	2b01      	cmp	r3, #1
 800af10:	d302      	bcc.n	800af18 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 800af12:	2b02      	cmp	r3, #2
 800af14:	d078      	beq.n	800b008 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 800af16:	e099      	b.n	800b04c <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800af18:	4b88      	ldr	r3, [pc, #544]	; (800b13c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	f003 0320 	and.w	r3, r3, #32
 800af20:	2b00      	cmp	r3, #0
 800af22:	d02d      	beq.n	800af80 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800af24:	4b85      	ldr	r3, [pc, #532]	; (800b13c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	08db      	lsrs	r3, r3, #3
 800af2a:	f003 0303 	and.w	r3, r3, #3
 800af2e:	4a84      	ldr	r2, [pc, #528]	; (800b140 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 800af30:	fa22 f303 	lsr.w	r3, r2, r3
 800af34:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800af36:	68bb      	ldr	r3, [r7, #8]
 800af38:	ee07 3a90 	vmov	s15, r3
 800af3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af40:	697b      	ldr	r3, [r7, #20]
 800af42:	ee07 3a90 	vmov	s15, r3
 800af46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af4e:	4b7b      	ldr	r3, [pc, #492]	; (800b13c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800af50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af56:	ee07 3a90 	vmov	s15, r3
 800af5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af5e:	ed97 6a03 	vldr	s12, [r7, #12]
 800af62:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b144 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800af66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af76:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af7a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800af7e:	e087      	b.n	800b090 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800af80:	697b      	ldr	r3, [r7, #20]
 800af82:	ee07 3a90 	vmov	s15, r3
 800af86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af8a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b148 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 800af8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af92:	4b6a      	ldr	r3, [pc, #424]	; (800b13c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800af94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af9a:	ee07 3a90 	vmov	s15, r3
 800af9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afa2:	ed97 6a03 	vldr	s12, [r7, #12]
 800afa6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b144 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800afaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800afb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afbe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800afc2:	e065      	b.n	800b090 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800afc4:	697b      	ldr	r3, [r7, #20]
 800afc6:	ee07 3a90 	vmov	s15, r3
 800afca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afce:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b14c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800afd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afd6:	4b59      	ldr	r3, [pc, #356]	; (800b13c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800afd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afde:	ee07 3a90 	vmov	s15, r3
 800afe2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afe6:	ed97 6a03 	vldr	s12, [r7, #12]
 800afea:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b144 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800afee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aff2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aff6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800affa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800affe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b002:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b006:	e043      	b.n	800b090 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b008:	697b      	ldr	r3, [r7, #20]
 800b00a:	ee07 3a90 	vmov	s15, r3
 800b00e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b012:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b150 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b016:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b01a:	4b48      	ldr	r3, [pc, #288]	; (800b13c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800b01c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b01e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b022:	ee07 3a90 	vmov	s15, r3
 800b026:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b02a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b02e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b144 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800b032:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b036:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b03a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b03e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b042:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b046:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b04a:	e021      	b.n	800b090 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b04c:	697b      	ldr	r3, [r7, #20]
 800b04e:	ee07 3a90 	vmov	s15, r3
 800b052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b056:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b14c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800b05a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b05e:	4b37      	ldr	r3, [pc, #220]	; (800b13c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800b060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b062:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b066:	ee07 3a90 	vmov	s15, r3
 800b06a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b06e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b072:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b144 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800b076:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b07a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b07e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b082:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b08a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b08e:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800b090:	4b2a      	ldr	r3, [pc, #168]	; (800b13c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800b092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b094:	0a5b      	lsrs	r3, r3, #9
 800b096:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b09a:	ee07 3a90 	vmov	s15, r3
 800b09e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b0a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b0aa:	edd7 6a07 	vldr	s13, [r7, #28]
 800b0ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b0b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b0b6:	ee17 2a90 	vmov	r2, s15
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800b0be:	4b1f      	ldr	r3, [pc, #124]	; (800b13c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800b0c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0c2:	0c1b      	lsrs	r3, r3, #16
 800b0c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0c8:	ee07 3a90 	vmov	s15, r3
 800b0cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b0d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b0d8:	edd7 6a07 	vldr	s13, [r7, #28]
 800b0dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b0e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b0e4:	ee17 2a90 	vmov	r2, s15
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800b0ec:	4b13      	ldr	r3, [pc, #76]	; (800b13c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800b0ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0f0:	0e1b      	lsrs	r3, r3, #24
 800b0f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0f6:	ee07 3a90 	vmov	s15, r3
 800b0fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b102:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b106:	edd7 6a07 	vldr	s13, [r7, #28]
 800b10a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b10e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b112:	ee17 2a90 	vmov	r2, s15
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b11a:	e008      	b.n	800b12e <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2200      	movs	r2, #0
 800b120:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	2200      	movs	r2, #0
 800b126:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2200      	movs	r2, #0
 800b12c:	609a      	str	r2, [r3, #8]
}
 800b12e:	bf00      	nop
 800b130:	3724      	adds	r7, #36	; 0x24
 800b132:	46bd      	mov	sp, r7
 800b134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b138:	4770      	bx	lr
 800b13a:	bf00      	nop
 800b13c:	58024400 	.word	0x58024400
 800b140:	03d09000 	.word	0x03d09000
 800b144:	46000000 	.word	0x46000000
 800b148:	4c742400 	.word	0x4c742400
 800b14c:	4a742400 	.word	0x4a742400
 800b150:	4bbebc20 	.word	0x4bbebc20

0800b154 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b084      	sub	sp, #16
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
 800b15c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b15e:	2300      	movs	r3, #0
 800b160:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b162:	4b53      	ldr	r3, [pc, #332]	; (800b2b0 <RCCEx_PLL2_Config+0x15c>)
 800b164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b166:	f003 0303 	and.w	r3, r3, #3
 800b16a:	2b03      	cmp	r3, #3
 800b16c:	d101      	bne.n	800b172 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b16e:	2301      	movs	r3, #1
 800b170:	e099      	b.n	800b2a6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b172:	4b4f      	ldr	r3, [pc, #316]	; (800b2b0 <RCCEx_PLL2_Config+0x15c>)
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	4a4e      	ldr	r2, [pc, #312]	; (800b2b0 <RCCEx_PLL2_Config+0x15c>)
 800b178:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b17c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b17e:	f7f8 fa01 	bl	8003584 <HAL_GetTick>
 800b182:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b184:	e008      	b.n	800b198 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b186:	f7f8 f9fd 	bl	8003584 <HAL_GetTick>
 800b18a:	4602      	mov	r2, r0
 800b18c:	68bb      	ldr	r3, [r7, #8]
 800b18e:	1ad3      	subs	r3, r2, r3
 800b190:	2b02      	cmp	r3, #2
 800b192:	d901      	bls.n	800b198 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b194:	2303      	movs	r3, #3
 800b196:	e086      	b.n	800b2a6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b198:	4b45      	ldr	r3, [pc, #276]	; (800b2b0 <RCCEx_PLL2_Config+0x15c>)
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d1f0      	bne.n	800b186 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b1a4:	4b42      	ldr	r3, [pc, #264]	; (800b2b0 <RCCEx_PLL2_Config+0x15c>)
 800b1a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1a8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	031b      	lsls	r3, r3, #12
 800b1b2:	493f      	ldr	r1, [pc, #252]	; (800b2b0 <RCCEx_PLL2_Config+0x15c>)
 800b1b4:	4313      	orrs	r3, r2
 800b1b6:	628b      	str	r3, [r1, #40]	; 0x28
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	685b      	ldr	r3, [r3, #4]
 800b1bc:	3b01      	subs	r3, #1
 800b1be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	689b      	ldr	r3, [r3, #8]
 800b1c6:	3b01      	subs	r3, #1
 800b1c8:	025b      	lsls	r3, r3, #9
 800b1ca:	b29b      	uxth	r3, r3
 800b1cc:	431a      	orrs	r2, r3
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	68db      	ldr	r3, [r3, #12]
 800b1d2:	3b01      	subs	r3, #1
 800b1d4:	041b      	lsls	r3, r3, #16
 800b1d6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b1da:	431a      	orrs	r2, r3
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	691b      	ldr	r3, [r3, #16]
 800b1e0:	3b01      	subs	r3, #1
 800b1e2:	061b      	lsls	r3, r3, #24
 800b1e4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b1e8:	4931      	ldr	r1, [pc, #196]	; (800b2b0 <RCCEx_PLL2_Config+0x15c>)
 800b1ea:	4313      	orrs	r3, r2
 800b1ec:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b1ee:	4b30      	ldr	r3, [pc, #192]	; (800b2b0 <RCCEx_PLL2_Config+0x15c>)
 800b1f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1f2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	695b      	ldr	r3, [r3, #20]
 800b1fa:	492d      	ldr	r1, [pc, #180]	; (800b2b0 <RCCEx_PLL2_Config+0x15c>)
 800b1fc:	4313      	orrs	r3, r2
 800b1fe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b200:	4b2b      	ldr	r3, [pc, #172]	; (800b2b0 <RCCEx_PLL2_Config+0x15c>)
 800b202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b204:	f023 0220 	bic.w	r2, r3, #32
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	699b      	ldr	r3, [r3, #24]
 800b20c:	4928      	ldr	r1, [pc, #160]	; (800b2b0 <RCCEx_PLL2_Config+0x15c>)
 800b20e:	4313      	orrs	r3, r2
 800b210:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b212:	4b27      	ldr	r3, [pc, #156]	; (800b2b0 <RCCEx_PLL2_Config+0x15c>)
 800b214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b216:	4a26      	ldr	r2, [pc, #152]	; (800b2b0 <RCCEx_PLL2_Config+0x15c>)
 800b218:	f023 0310 	bic.w	r3, r3, #16
 800b21c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b21e:	4b24      	ldr	r3, [pc, #144]	; (800b2b0 <RCCEx_PLL2_Config+0x15c>)
 800b220:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b222:	4b24      	ldr	r3, [pc, #144]	; (800b2b4 <RCCEx_PLL2_Config+0x160>)
 800b224:	4013      	ands	r3, r2
 800b226:	687a      	ldr	r2, [r7, #4]
 800b228:	69d2      	ldr	r2, [r2, #28]
 800b22a:	00d2      	lsls	r2, r2, #3
 800b22c:	4920      	ldr	r1, [pc, #128]	; (800b2b0 <RCCEx_PLL2_Config+0x15c>)
 800b22e:	4313      	orrs	r3, r2
 800b230:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b232:	4b1f      	ldr	r3, [pc, #124]	; (800b2b0 <RCCEx_PLL2_Config+0x15c>)
 800b234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b236:	4a1e      	ldr	r2, [pc, #120]	; (800b2b0 <RCCEx_PLL2_Config+0x15c>)
 800b238:	f043 0310 	orr.w	r3, r3, #16
 800b23c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b23e:	683b      	ldr	r3, [r7, #0]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d106      	bne.n	800b252 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b244:	4b1a      	ldr	r3, [pc, #104]	; (800b2b0 <RCCEx_PLL2_Config+0x15c>)
 800b246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b248:	4a19      	ldr	r2, [pc, #100]	; (800b2b0 <RCCEx_PLL2_Config+0x15c>)
 800b24a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b24e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b250:	e00f      	b.n	800b272 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b252:	683b      	ldr	r3, [r7, #0]
 800b254:	2b01      	cmp	r3, #1
 800b256:	d106      	bne.n	800b266 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b258:	4b15      	ldr	r3, [pc, #84]	; (800b2b0 <RCCEx_PLL2_Config+0x15c>)
 800b25a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b25c:	4a14      	ldr	r2, [pc, #80]	; (800b2b0 <RCCEx_PLL2_Config+0x15c>)
 800b25e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b262:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b264:	e005      	b.n	800b272 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b266:	4b12      	ldr	r3, [pc, #72]	; (800b2b0 <RCCEx_PLL2_Config+0x15c>)
 800b268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b26a:	4a11      	ldr	r2, [pc, #68]	; (800b2b0 <RCCEx_PLL2_Config+0x15c>)
 800b26c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b270:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b272:	4b0f      	ldr	r3, [pc, #60]	; (800b2b0 <RCCEx_PLL2_Config+0x15c>)
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	4a0e      	ldr	r2, [pc, #56]	; (800b2b0 <RCCEx_PLL2_Config+0x15c>)
 800b278:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b27c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b27e:	f7f8 f981 	bl	8003584 <HAL_GetTick>
 800b282:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b284:	e008      	b.n	800b298 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b286:	f7f8 f97d 	bl	8003584 <HAL_GetTick>
 800b28a:	4602      	mov	r2, r0
 800b28c:	68bb      	ldr	r3, [r7, #8]
 800b28e:	1ad3      	subs	r3, r2, r3
 800b290:	2b02      	cmp	r3, #2
 800b292:	d901      	bls.n	800b298 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b294:	2303      	movs	r3, #3
 800b296:	e006      	b.n	800b2a6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b298:	4b05      	ldr	r3, [pc, #20]	; (800b2b0 <RCCEx_PLL2_Config+0x15c>)
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d0f0      	beq.n	800b286 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b2a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	3710      	adds	r7, #16
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	bd80      	pop	{r7, pc}
 800b2ae:	bf00      	nop
 800b2b0:	58024400 	.word	0x58024400
 800b2b4:	ffff0007 	.word	0xffff0007

0800b2b8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b084      	sub	sp, #16
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
 800b2c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b2c6:	4b53      	ldr	r3, [pc, #332]	; (800b414 <RCCEx_PLL3_Config+0x15c>)
 800b2c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2ca:	f003 0303 	and.w	r3, r3, #3
 800b2ce:	2b03      	cmp	r3, #3
 800b2d0:	d101      	bne.n	800b2d6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b2d2:	2301      	movs	r3, #1
 800b2d4:	e099      	b.n	800b40a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b2d6:	4b4f      	ldr	r3, [pc, #316]	; (800b414 <RCCEx_PLL3_Config+0x15c>)
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	4a4e      	ldr	r2, [pc, #312]	; (800b414 <RCCEx_PLL3_Config+0x15c>)
 800b2dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b2e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b2e2:	f7f8 f94f 	bl	8003584 <HAL_GetTick>
 800b2e6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b2e8:	e008      	b.n	800b2fc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b2ea:	f7f8 f94b 	bl	8003584 <HAL_GetTick>
 800b2ee:	4602      	mov	r2, r0
 800b2f0:	68bb      	ldr	r3, [r7, #8]
 800b2f2:	1ad3      	subs	r3, r2, r3
 800b2f4:	2b02      	cmp	r3, #2
 800b2f6:	d901      	bls.n	800b2fc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b2f8:	2303      	movs	r3, #3
 800b2fa:	e086      	b.n	800b40a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b2fc:	4b45      	ldr	r3, [pc, #276]	; (800b414 <RCCEx_PLL3_Config+0x15c>)
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b304:	2b00      	cmp	r3, #0
 800b306:	d1f0      	bne.n	800b2ea <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b308:	4b42      	ldr	r3, [pc, #264]	; (800b414 <RCCEx_PLL3_Config+0x15c>)
 800b30a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b30c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	051b      	lsls	r3, r3, #20
 800b316:	493f      	ldr	r1, [pc, #252]	; (800b414 <RCCEx_PLL3_Config+0x15c>)
 800b318:	4313      	orrs	r3, r2
 800b31a:	628b      	str	r3, [r1, #40]	; 0x28
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	685b      	ldr	r3, [r3, #4]
 800b320:	3b01      	subs	r3, #1
 800b322:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	689b      	ldr	r3, [r3, #8]
 800b32a:	3b01      	subs	r3, #1
 800b32c:	025b      	lsls	r3, r3, #9
 800b32e:	b29b      	uxth	r3, r3
 800b330:	431a      	orrs	r2, r3
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	68db      	ldr	r3, [r3, #12]
 800b336:	3b01      	subs	r3, #1
 800b338:	041b      	lsls	r3, r3, #16
 800b33a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b33e:	431a      	orrs	r2, r3
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	691b      	ldr	r3, [r3, #16]
 800b344:	3b01      	subs	r3, #1
 800b346:	061b      	lsls	r3, r3, #24
 800b348:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b34c:	4931      	ldr	r1, [pc, #196]	; (800b414 <RCCEx_PLL3_Config+0x15c>)
 800b34e:	4313      	orrs	r3, r2
 800b350:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b352:	4b30      	ldr	r3, [pc, #192]	; (800b414 <RCCEx_PLL3_Config+0x15c>)
 800b354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b356:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	695b      	ldr	r3, [r3, #20]
 800b35e:	492d      	ldr	r1, [pc, #180]	; (800b414 <RCCEx_PLL3_Config+0x15c>)
 800b360:	4313      	orrs	r3, r2
 800b362:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b364:	4b2b      	ldr	r3, [pc, #172]	; (800b414 <RCCEx_PLL3_Config+0x15c>)
 800b366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b368:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	699b      	ldr	r3, [r3, #24]
 800b370:	4928      	ldr	r1, [pc, #160]	; (800b414 <RCCEx_PLL3_Config+0x15c>)
 800b372:	4313      	orrs	r3, r2
 800b374:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b376:	4b27      	ldr	r3, [pc, #156]	; (800b414 <RCCEx_PLL3_Config+0x15c>)
 800b378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b37a:	4a26      	ldr	r2, [pc, #152]	; (800b414 <RCCEx_PLL3_Config+0x15c>)
 800b37c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b380:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b382:	4b24      	ldr	r3, [pc, #144]	; (800b414 <RCCEx_PLL3_Config+0x15c>)
 800b384:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b386:	4b24      	ldr	r3, [pc, #144]	; (800b418 <RCCEx_PLL3_Config+0x160>)
 800b388:	4013      	ands	r3, r2
 800b38a:	687a      	ldr	r2, [r7, #4]
 800b38c:	69d2      	ldr	r2, [r2, #28]
 800b38e:	00d2      	lsls	r2, r2, #3
 800b390:	4920      	ldr	r1, [pc, #128]	; (800b414 <RCCEx_PLL3_Config+0x15c>)
 800b392:	4313      	orrs	r3, r2
 800b394:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b396:	4b1f      	ldr	r3, [pc, #124]	; (800b414 <RCCEx_PLL3_Config+0x15c>)
 800b398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b39a:	4a1e      	ldr	r2, [pc, #120]	; (800b414 <RCCEx_PLL3_Config+0x15c>)
 800b39c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b3a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b3a2:	683b      	ldr	r3, [r7, #0]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d106      	bne.n	800b3b6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b3a8:	4b1a      	ldr	r3, [pc, #104]	; (800b414 <RCCEx_PLL3_Config+0x15c>)
 800b3aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3ac:	4a19      	ldr	r2, [pc, #100]	; (800b414 <RCCEx_PLL3_Config+0x15c>)
 800b3ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b3b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b3b4:	e00f      	b.n	800b3d6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	2b01      	cmp	r3, #1
 800b3ba:	d106      	bne.n	800b3ca <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b3bc:	4b15      	ldr	r3, [pc, #84]	; (800b414 <RCCEx_PLL3_Config+0x15c>)
 800b3be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3c0:	4a14      	ldr	r2, [pc, #80]	; (800b414 <RCCEx_PLL3_Config+0x15c>)
 800b3c2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b3c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b3c8:	e005      	b.n	800b3d6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b3ca:	4b12      	ldr	r3, [pc, #72]	; (800b414 <RCCEx_PLL3_Config+0x15c>)
 800b3cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3ce:	4a11      	ldr	r2, [pc, #68]	; (800b414 <RCCEx_PLL3_Config+0x15c>)
 800b3d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b3d4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b3d6:	4b0f      	ldr	r3, [pc, #60]	; (800b414 <RCCEx_PLL3_Config+0x15c>)
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	4a0e      	ldr	r2, [pc, #56]	; (800b414 <RCCEx_PLL3_Config+0x15c>)
 800b3dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b3e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b3e2:	f7f8 f8cf 	bl	8003584 <HAL_GetTick>
 800b3e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b3e8:	e008      	b.n	800b3fc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b3ea:	f7f8 f8cb 	bl	8003584 <HAL_GetTick>
 800b3ee:	4602      	mov	r2, r0
 800b3f0:	68bb      	ldr	r3, [r7, #8]
 800b3f2:	1ad3      	subs	r3, r2, r3
 800b3f4:	2b02      	cmp	r3, #2
 800b3f6:	d901      	bls.n	800b3fc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b3f8:	2303      	movs	r3, #3
 800b3fa:	e006      	b.n	800b40a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b3fc:	4b05      	ldr	r3, [pc, #20]	; (800b414 <RCCEx_PLL3_Config+0x15c>)
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b404:	2b00      	cmp	r3, #0
 800b406:	d0f0      	beq.n	800b3ea <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b408:	7bfb      	ldrb	r3, [r7, #15]
}
 800b40a:	4618      	mov	r0, r3
 800b40c:	3710      	adds	r7, #16
 800b40e:	46bd      	mov	sp, r7
 800b410:	bd80      	pop	{r7, pc}
 800b412:	bf00      	nop
 800b414:	58024400 	.word	0x58024400
 800b418:	ffff0007 	.word	0xffff0007

0800b41c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b084      	sub	sp, #16
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800b424:	2301      	movs	r3, #1
 800b426:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d067      	beq.n	800b4fe <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800b434:	b2db      	uxtb	r3, r3
 800b436:	2b00      	cmp	r3, #0
 800b438:	d106      	bne.n	800b448 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	2200      	movs	r2, #0
 800b43e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800b442:	6878      	ldr	r0, [r7, #4]
 800b444:	f7f7 fce2 	bl	8002e0c <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2202      	movs	r2, #2
 800b44c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	22ca      	movs	r2, #202	; 0xca
 800b456:	625a      	str	r2, [r3, #36]	; 0x24
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	2253      	movs	r2, #83	; 0x53
 800b45e:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800b460:	6878      	ldr	r0, [r7, #4]
 800b462:	f000 fa49 	bl	800b8f8 <RTC_EnterInitMode>
 800b466:	4603      	mov	r3, r0
 800b468:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 800b46a:	7bfb      	ldrb	r3, [r7, #15]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d13b      	bne.n	800b4e8 <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	6899      	ldr	r1, [r3, #8]
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681a      	ldr	r2, [r3, #0]
 800b47a:	4b23      	ldr	r3, [pc, #140]	; (800b508 <HAL_RTC_Init+0xec>)
 800b47c:	400b      	ands	r3, r1
 800b47e:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	6899      	ldr	r1, [r3, #8]
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	685a      	ldr	r2, [r3, #4]
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	691b      	ldr	r3, [r3, #16]
 800b48e:	431a      	orrs	r2, r3
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	699b      	ldr	r3, [r3, #24]
 800b494:	431a      	orrs	r2, r3
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	430a      	orrs	r2, r1
 800b49c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	689b      	ldr	r3, [r3, #8]
 800b4a2:	0419      	lsls	r1, r3, #16
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	68da      	ldr	r2, [r3, #12]
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	430a      	orrs	r2, r1
 800b4ae:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800b4b0:	6878      	ldr	r0, [r7, #4]
 800b4b2:	f000 fa51 	bl	800b958 <RTC_ExitInitMode>
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 800b4ba:	7bfb      	ldrb	r3, [r7, #15]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d113      	bne.n	800b4e8 <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	f022 0203 	bic.w	r2, r2, #3
 800b4ce:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	69da      	ldr	r2, [r3, #28]
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	695b      	ldr	r3, [r3, #20]
 800b4de:	431a      	orrs	r2, r3
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	430a      	orrs	r2, r1
 800b4e6:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	22ff      	movs	r2, #255	; 0xff
 800b4ee:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 800b4f0:	7bfb      	ldrb	r3, [r7, #15]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d103      	bne.n	800b4fe <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	2201      	movs	r2, #1
 800b4fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800b4fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800b500:	4618      	mov	r0, r3
 800b502:	3710      	adds	r7, #16
 800b504:	46bd      	mov	sp, r7
 800b506:	bd80      	pop	{r7, pc}
 800b508:	ff8fffbf 	.word	0xff8fffbf

0800b50c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b50c:	b590      	push	{r4, r7, lr}
 800b50e:	b087      	sub	sp, #28
 800b510:	af00      	add	r7, sp, #0
 800b512:	60f8      	str	r0, [r7, #12]
 800b514:	60b9      	str	r1, [r7, #8]
 800b516:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b51e:	2b01      	cmp	r3, #1
 800b520:	d101      	bne.n	800b526 <HAL_RTC_SetTime+0x1a>
 800b522:	2302      	movs	r3, #2
 800b524:	e089      	b.n	800b63a <HAL_RTC_SetTime+0x12e>
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	2201      	movs	r2, #1
 800b52a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	2202      	movs	r2, #2
 800b532:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	22ca      	movs	r2, #202	; 0xca
 800b53c:	625a      	str	r2, [r3, #36]	; 0x24
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	2253      	movs	r2, #83	; 0x53
 800b544:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b546:	68f8      	ldr	r0, [r7, #12]
 800b548:	f000 f9d6 	bl	800b8f8 <RTC_EnterInitMode>
 800b54c:	4603      	mov	r3, r0
 800b54e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800b550:	7cfb      	ldrb	r3, [r7, #19]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d161      	bne.n	800b61a <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d126      	bne.n	800b5aa <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	689b      	ldr	r3, [r3, #8]
 800b562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b566:	2b00      	cmp	r3, #0
 800b568:	d102      	bne.n	800b570 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800b56a:	68bb      	ldr	r3, [r7, #8]
 800b56c:	2200      	movs	r2, #0
 800b56e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b570:	68bb      	ldr	r3, [r7, #8]
 800b572:	781b      	ldrb	r3, [r3, #0]
 800b574:	4618      	mov	r0, r3
 800b576:	f000 fa2d 	bl	800b9d4 <RTC_ByteToBcd2>
 800b57a:	4603      	mov	r3, r0
 800b57c:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b57e:	68bb      	ldr	r3, [r7, #8]
 800b580:	785b      	ldrb	r3, [r3, #1]
 800b582:	4618      	mov	r0, r3
 800b584:	f000 fa26 	bl	800b9d4 <RTC_ByteToBcd2>
 800b588:	4603      	mov	r3, r0
 800b58a:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b58c:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800b58e:	68bb      	ldr	r3, [r7, #8]
 800b590:	789b      	ldrb	r3, [r3, #2]
 800b592:	4618      	mov	r0, r3
 800b594:	f000 fa1e 	bl	800b9d4 <RTC_ByteToBcd2>
 800b598:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b59a:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b59e:	68bb      	ldr	r3, [r7, #8]
 800b5a0:	78db      	ldrb	r3, [r3, #3]
 800b5a2:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b5a4:	4313      	orrs	r3, r2
 800b5a6:	617b      	str	r3, [r7, #20]
 800b5a8:	e018      	b.n	800b5dc <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	689b      	ldr	r3, [r3, #8]
 800b5b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d102      	bne.n	800b5be <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800b5b8:	68bb      	ldr	r3, [r7, #8]
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b5be:	68bb      	ldr	r3, [r7, #8]
 800b5c0:	781b      	ldrb	r3, [r3, #0]
 800b5c2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b5c4:	68bb      	ldr	r3, [r7, #8]
 800b5c6:	785b      	ldrb	r3, [r3, #1]
 800b5c8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b5ca:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800b5cc:	68ba      	ldr	r2, [r7, #8]
 800b5ce:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b5d0:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b5d2:	68bb      	ldr	r3, [r7, #8]
 800b5d4:	78db      	ldrb	r3, [r3, #3]
 800b5d6:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b5d8:	4313      	orrs	r3, r2
 800b5da:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	681a      	ldr	r2, [r3, #0]
 800b5e0:	6979      	ldr	r1, [r7, #20]
 800b5e2:	4b18      	ldr	r3, [pc, #96]	; (800b644 <HAL_RTC_SetTime+0x138>)
 800b5e4:	400b      	ands	r3, r1
 800b5e6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	689a      	ldr	r2, [r3, #8]
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b5f6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	6899      	ldr	r1, [r3, #8]
 800b5fe:	68bb      	ldr	r3, [r7, #8]
 800b600:	68da      	ldr	r2, [r3, #12]
 800b602:	68bb      	ldr	r3, [r7, #8]
 800b604:	691b      	ldr	r3, [r3, #16]
 800b606:	431a      	orrs	r2, r3
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	430a      	orrs	r2, r1
 800b60e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800b610:	68f8      	ldr	r0, [r7, #12]
 800b612:	f000 f9a1 	bl	800b958 <RTC_ExitInitMode>
 800b616:	4603      	mov	r3, r0
 800b618:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	22ff      	movs	r2, #255	; 0xff
 800b620:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800b622:	7cfb      	ldrb	r3, [r7, #19]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d103      	bne.n	800b630 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	2201      	movs	r2, #1
 800b62c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	2200      	movs	r2, #0
 800b634:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800b638:	7cfb      	ldrb	r3, [r7, #19]
}
 800b63a:	4618      	mov	r0, r3
 800b63c:	371c      	adds	r7, #28
 800b63e:	46bd      	mov	sp, r7
 800b640:	bd90      	pop	{r4, r7, pc}
 800b642:	bf00      	nop
 800b644:	007f7f7f 	.word	0x007f7f7f

0800b648 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b086      	sub	sp, #24
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	60f8      	str	r0, [r7, #12]
 800b650:	60b9      	str	r1, [r7, #8]
 800b652:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b65a:	68bb      	ldr	r3, [r7, #8]
 800b65c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	691b      	ldr	r3, [r3, #16]
 800b664:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800b668:	68bb      	ldr	r3, [r7, #8]
 800b66a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	681a      	ldr	r2, [r3, #0]
 800b672:	4b22      	ldr	r3, [pc, #136]	; (800b6fc <HAL_RTC_GetTime+0xb4>)
 800b674:	4013      	ands	r3, r2
 800b676:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800b678:	697b      	ldr	r3, [r7, #20]
 800b67a:	0c1b      	lsrs	r3, r3, #16
 800b67c:	b2db      	uxtb	r3, r3
 800b67e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b682:	b2da      	uxtb	r2, r3
 800b684:	68bb      	ldr	r3, [r7, #8]
 800b686:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800b688:	697b      	ldr	r3, [r7, #20]
 800b68a:	0a1b      	lsrs	r3, r3, #8
 800b68c:	b2db      	uxtb	r3, r3
 800b68e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b692:	b2da      	uxtb	r2, r3
 800b694:	68bb      	ldr	r3, [r7, #8]
 800b696:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800b698:	697b      	ldr	r3, [r7, #20]
 800b69a:	b2db      	uxtb	r3, r3
 800b69c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b6a0:	b2da      	uxtb	r2, r3
 800b6a2:	68bb      	ldr	r3, [r7, #8]
 800b6a4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800b6a6:	697b      	ldr	r3, [r7, #20]
 800b6a8:	0d9b      	lsrs	r3, r3, #22
 800b6aa:	b2db      	uxtb	r3, r3
 800b6ac:	f003 0301 	and.w	r3, r3, #1
 800b6b0:	b2da      	uxtb	r2, r3
 800b6b2:	68bb      	ldr	r3, [r7, #8]
 800b6b4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d11a      	bne.n	800b6f2 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800b6bc:	68bb      	ldr	r3, [r7, #8]
 800b6be:	781b      	ldrb	r3, [r3, #0]
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	f000 f9a7 	bl	800ba14 <RTC_Bcd2ToByte>
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	461a      	mov	r2, r3
 800b6ca:	68bb      	ldr	r3, [r7, #8]
 800b6cc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800b6ce:	68bb      	ldr	r3, [r7, #8]
 800b6d0:	785b      	ldrb	r3, [r3, #1]
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	f000 f99e 	bl	800ba14 <RTC_Bcd2ToByte>
 800b6d8:	4603      	mov	r3, r0
 800b6da:	461a      	mov	r2, r3
 800b6dc:	68bb      	ldr	r3, [r7, #8]
 800b6de:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	789b      	ldrb	r3, [r3, #2]
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	f000 f995 	bl	800ba14 <RTC_Bcd2ToByte>
 800b6ea:	4603      	mov	r3, r0
 800b6ec:	461a      	mov	r2, r3
 800b6ee:	68bb      	ldr	r3, [r7, #8]
 800b6f0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800b6f2:	2300      	movs	r3, #0
}
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	3718      	adds	r7, #24
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bd80      	pop	{r7, pc}
 800b6fc:	007f7f7f 	.word	0x007f7f7f

0800b700 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b700:	b590      	push	{r4, r7, lr}
 800b702:	b087      	sub	sp, #28
 800b704:	af00      	add	r7, sp, #0
 800b706:	60f8      	str	r0, [r7, #12]
 800b708:	60b9      	str	r1, [r7, #8]
 800b70a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b712:	2b01      	cmp	r3, #1
 800b714:	d101      	bne.n	800b71a <HAL_RTC_SetDate+0x1a>
 800b716:	2302      	movs	r3, #2
 800b718:	e073      	b.n	800b802 <HAL_RTC_SetDate+0x102>
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	2201      	movs	r2, #1
 800b71e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	2202      	movs	r2, #2
 800b726:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d10e      	bne.n	800b74e <HAL_RTC_SetDate+0x4e>
 800b730:	68bb      	ldr	r3, [r7, #8]
 800b732:	785b      	ldrb	r3, [r3, #1]
 800b734:	f003 0310 	and.w	r3, r3, #16
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d008      	beq.n	800b74e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800b73c:	68bb      	ldr	r3, [r7, #8]
 800b73e:	785b      	ldrb	r3, [r3, #1]
 800b740:	f023 0310 	bic.w	r3, r3, #16
 800b744:	b2db      	uxtb	r3, r3
 800b746:	330a      	adds	r3, #10
 800b748:	b2da      	uxtb	r2, r3
 800b74a:	68bb      	ldr	r3, [r7, #8]
 800b74c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d11c      	bne.n	800b78e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b754:	68bb      	ldr	r3, [r7, #8]
 800b756:	78db      	ldrb	r3, [r3, #3]
 800b758:	4618      	mov	r0, r3
 800b75a:	f000 f93b 	bl	800b9d4 <RTC_ByteToBcd2>
 800b75e:	4603      	mov	r3, r0
 800b760:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b762:	68bb      	ldr	r3, [r7, #8]
 800b764:	785b      	ldrb	r3, [r3, #1]
 800b766:	4618      	mov	r0, r3
 800b768:	f000 f934 	bl	800b9d4 <RTC_ByteToBcd2>
 800b76c:	4603      	mov	r3, r0
 800b76e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b770:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800b772:	68bb      	ldr	r3, [r7, #8]
 800b774:	789b      	ldrb	r3, [r3, #2]
 800b776:	4618      	mov	r0, r3
 800b778:	f000 f92c 	bl	800b9d4 <RTC_ByteToBcd2>
 800b77c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b77e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800b782:	68bb      	ldr	r3, [r7, #8]
 800b784:	781b      	ldrb	r3, [r3, #0]
 800b786:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b788:	4313      	orrs	r3, r2
 800b78a:	617b      	str	r3, [r7, #20]
 800b78c:	e00e      	b.n	800b7ac <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800b78e:	68bb      	ldr	r3, [r7, #8]
 800b790:	78db      	ldrb	r3, [r3, #3]
 800b792:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800b794:	68bb      	ldr	r3, [r7, #8]
 800b796:	785b      	ldrb	r3, [r3, #1]
 800b798:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800b79a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800b79c:	68ba      	ldr	r2, [r7, #8]
 800b79e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800b7a0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800b7a2:	68bb      	ldr	r3, [r7, #8]
 800b7a4:	781b      	ldrb	r3, [r3, #0]
 800b7a6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800b7a8:	4313      	orrs	r3, r2
 800b7aa:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	22ca      	movs	r2, #202	; 0xca
 800b7b2:	625a      	str	r2, [r3, #36]	; 0x24
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	2253      	movs	r2, #83	; 0x53
 800b7ba:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b7bc:	68f8      	ldr	r0, [r7, #12]
 800b7be:	f000 f89b 	bl	800b8f8 <RTC_EnterInitMode>
 800b7c2:	4603      	mov	r3, r0
 800b7c4:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800b7c6:	7cfb      	ldrb	r3, [r7, #19]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d10a      	bne.n	800b7e2 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	681a      	ldr	r2, [r3, #0]
 800b7d0:	6979      	ldr	r1, [r7, #20]
 800b7d2:	4b0e      	ldr	r3, [pc, #56]	; (800b80c <HAL_RTC_SetDate+0x10c>)
 800b7d4:	400b      	ands	r3, r1
 800b7d6:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800b7d8:	68f8      	ldr	r0, [r7, #12]
 800b7da:	f000 f8bd 	bl	800b958 <RTC_ExitInitMode>
 800b7de:	4603      	mov	r3, r0
 800b7e0:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	22ff      	movs	r2, #255	; 0xff
 800b7e8:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800b7ea:	7cfb      	ldrb	r3, [r7, #19]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d103      	bne.n	800b7f8 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	2201      	movs	r2, #1
 800b7f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800b800:	7cfb      	ldrb	r3, [r7, #19]


}
 800b802:	4618      	mov	r0, r3
 800b804:	371c      	adds	r7, #28
 800b806:	46bd      	mov	sp, r7
 800b808:	bd90      	pop	{r4, r7, pc}
 800b80a:	bf00      	nop
 800b80c:	00ffff3f 	.word	0x00ffff3f

0800b810 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b086      	sub	sp, #24
 800b814:	af00      	add	r7, sp, #0
 800b816:	60f8      	str	r0, [r7, #12]
 800b818:	60b9      	str	r1, [r7, #8]
 800b81a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	685a      	ldr	r2, [r3, #4]
 800b822:	4b21      	ldr	r3, [pc, #132]	; (800b8a8 <HAL_RTC_GetDate+0x98>)
 800b824:	4013      	ands	r3, r2
 800b826:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800b828:	697b      	ldr	r3, [r7, #20]
 800b82a:	0c1b      	lsrs	r3, r3, #16
 800b82c:	b2da      	uxtb	r2, r3
 800b82e:	68bb      	ldr	r3, [r7, #8]
 800b830:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800b832:	697b      	ldr	r3, [r7, #20]
 800b834:	0a1b      	lsrs	r3, r3, #8
 800b836:	b2db      	uxtb	r3, r3
 800b838:	f003 031f 	and.w	r3, r3, #31
 800b83c:	b2da      	uxtb	r2, r3
 800b83e:	68bb      	ldr	r3, [r7, #8]
 800b840:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800b842:	697b      	ldr	r3, [r7, #20]
 800b844:	b2db      	uxtb	r3, r3
 800b846:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b84a:	b2da      	uxtb	r2, r3
 800b84c:	68bb      	ldr	r3, [r7, #8]
 800b84e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800b850:	697b      	ldr	r3, [r7, #20]
 800b852:	0b5b      	lsrs	r3, r3, #13
 800b854:	b2db      	uxtb	r3, r3
 800b856:	f003 0307 	and.w	r3, r3, #7
 800b85a:	b2da      	uxtb	r2, r3
 800b85c:	68bb      	ldr	r3, [r7, #8]
 800b85e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d11a      	bne.n	800b89c <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800b866:	68bb      	ldr	r3, [r7, #8]
 800b868:	78db      	ldrb	r3, [r3, #3]
 800b86a:	4618      	mov	r0, r3
 800b86c:	f000 f8d2 	bl	800ba14 <RTC_Bcd2ToByte>
 800b870:	4603      	mov	r3, r0
 800b872:	461a      	mov	r2, r3
 800b874:	68bb      	ldr	r3, [r7, #8]
 800b876:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800b878:	68bb      	ldr	r3, [r7, #8]
 800b87a:	785b      	ldrb	r3, [r3, #1]
 800b87c:	4618      	mov	r0, r3
 800b87e:	f000 f8c9 	bl	800ba14 <RTC_Bcd2ToByte>
 800b882:	4603      	mov	r3, r0
 800b884:	461a      	mov	r2, r3
 800b886:	68bb      	ldr	r3, [r7, #8]
 800b888:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800b88a:	68bb      	ldr	r3, [r7, #8]
 800b88c:	789b      	ldrb	r3, [r3, #2]
 800b88e:	4618      	mov	r0, r3
 800b890:	f000 f8c0 	bl	800ba14 <RTC_Bcd2ToByte>
 800b894:	4603      	mov	r3, r0
 800b896:	461a      	mov	r2, r3
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800b89c:	2300      	movs	r3, #0
}
 800b89e:	4618      	mov	r0, r3
 800b8a0:	3718      	adds	r7, #24
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	bd80      	pop	{r7, pc}
 800b8a6:	bf00      	nop
 800b8a8:	00ffff3f 	.word	0x00ffff3f

0800b8ac <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b084      	sub	sp, #16
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	68da      	ldr	r2, [r3, #12]
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b8c2:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 800b8c4:	f7f7 fe5e 	bl	8003584 <HAL_GetTick>
 800b8c8:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b8ca:	e009      	b.n	800b8e0 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b8cc:	f7f7 fe5a 	bl	8003584 <HAL_GetTick>
 800b8d0:	4602      	mov	r2, r0
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	1ad3      	subs	r3, r2, r3
 800b8d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b8da:	d901      	bls.n	800b8e0 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 800b8dc:	2303      	movs	r3, #3
 800b8de:	e007      	b.n	800b8f0 <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	68db      	ldr	r3, [r3, #12]
 800b8e6:	f003 0320 	and.w	r3, r3, #32
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d0ee      	beq.n	800b8cc <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 800b8ee:	2300      	movs	r3, #0
}
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	3710      	adds	r7, #16
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	bd80      	pop	{r7, pc}

0800b8f8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b084      	sub	sp, #16
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b900:	2300      	movs	r3, #0
 800b902:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	68db      	ldr	r3, [r3, #12]
 800b90a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d11d      	bne.n	800b94e <RTC_EnterInitMode+0x56>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	f04f 32ff 	mov.w	r2, #4294967295
 800b91a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800b91c:	f7f7 fe32 	bl	8003584 <HAL_GetTick>
 800b920:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800b922:	e00d      	b.n	800b940 <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800b924:	f7f7 fe2e 	bl	8003584 <HAL_GetTick>
 800b928:	4602      	mov	r2, r0
 800b92a:	68bb      	ldr	r3, [r7, #8]
 800b92c:	1ad3      	subs	r3, r2, r3
 800b92e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b932:	d905      	bls.n	800b940 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800b934:	2303      	movs	r3, #3
 800b936:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2203      	movs	r2, #3
 800b93c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	68db      	ldr	r3, [r3, #12]
 800b946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d0ea      	beq.n	800b924 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 800b94e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b950:	4618      	mov	r0, r3
 800b952:	3710      	adds	r7, #16
 800b954:	46bd      	mov	sp, r7
 800b956:	bd80      	pop	{r7, pc}

0800b958 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b084      	sub	sp, #16
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b960:	2300      	movs	r3, #0
 800b962:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 800b964:	4b1a      	ldr	r3, [pc, #104]	; (800b9d0 <RTC_ExitInitMode+0x78>)
 800b966:	68db      	ldr	r3, [r3, #12]
 800b968:	4a19      	ldr	r2, [pc, #100]	; (800b9d0 <RTC_ExitInitMode+0x78>)
 800b96a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b96e:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800b970:	4b17      	ldr	r3, [pc, #92]	; (800b9d0 <RTC_ExitInitMode+0x78>)
 800b972:	689b      	ldr	r3, [r3, #8]
 800b974:	f003 0320 	and.w	r3, r3, #32
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d10c      	bne.n	800b996 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b97c:	6878      	ldr	r0, [r7, #4]
 800b97e:	f7ff ff95 	bl	800b8ac <HAL_RTC_WaitForSynchro>
 800b982:	4603      	mov	r3, r0
 800b984:	2b00      	cmp	r3, #0
 800b986:	d01e      	beq.n	800b9c6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2203      	movs	r2, #3
 800b98c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800b990:	2303      	movs	r3, #3
 800b992:	73fb      	strb	r3, [r7, #15]
 800b994:	e017      	b.n	800b9c6 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800b996:	4b0e      	ldr	r3, [pc, #56]	; (800b9d0 <RTC_ExitInitMode+0x78>)
 800b998:	689b      	ldr	r3, [r3, #8]
 800b99a:	4a0d      	ldr	r2, [pc, #52]	; (800b9d0 <RTC_ExitInitMode+0x78>)
 800b99c:	f023 0320 	bic.w	r3, r3, #32
 800b9a0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b9a2:	6878      	ldr	r0, [r7, #4]
 800b9a4:	f7ff ff82 	bl	800b8ac <HAL_RTC_WaitForSynchro>
 800b9a8:	4603      	mov	r3, r0
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d005      	beq.n	800b9ba <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	2203      	movs	r2, #3
 800b9b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800b9b6:	2303      	movs	r3, #3
 800b9b8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800b9ba:	4b05      	ldr	r3, [pc, #20]	; (800b9d0 <RTC_ExitInitMode+0x78>)
 800b9bc:	689b      	ldr	r3, [r3, #8]
 800b9be:	4a04      	ldr	r2, [pc, #16]	; (800b9d0 <RTC_ExitInitMode+0x78>)
 800b9c0:	f043 0320 	orr.w	r3, r3, #32
 800b9c4:	6093      	str	r3, [r2, #8]
  }

  return status;
 800b9c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	3710      	adds	r7, #16
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	bd80      	pop	{r7, pc}
 800b9d0:	58004000 	.word	0x58004000

0800b9d4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800b9d4:	b480      	push	{r7}
 800b9d6:	b085      	sub	sp, #20
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	4603      	mov	r3, r0
 800b9dc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800b9de:	2300      	movs	r3, #0
 800b9e0:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800b9e2:	79fb      	ldrb	r3, [r7, #7]
 800b9e4:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800b9e6:	e005      	b.n	800b9f4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	3301      	adds	r3, #1
 800b9ec:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800b9ee:	7afb      	ldrb	r3, [r7, #11]
 800b9f0:	3b0a      	subs	r3, #10
 800b9f2:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800b9f4:	7afb      	ldrb	r3, [r7, #11]
 800b9f6:	2b09      	cmp	r3, #9
 800b9f8:	d8f6      	bhi.n	800b9e8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	b2db      	uxtb	r3, r3
 800b9fe:	011b      	lsls	r3, r3, #4
 800ba00:	b2da      	uxtb	r2, r3
 800ba02:	7afb      	ldrb	r3, [r7, #11]
 800ba04:	4313      	orrs	r3, r2
 800ba06:	b2db      	uxtb	r3, r3
}
 800ba08:	4618      	mov	r0, r3
 800ba0a:	3714      	adds	r7, #20
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba12:	4770      	bx	lr

0800ba14 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800ba14:	b480      	push	{r7}
 800ba16:	b085      	sub	sp, #20
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	4603      	mov	r3, r0
 800ba1c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800ba1e:	79fb      	ldrb	r3, [r7, #7]
 800ba20:	091b      	lsrs	r3, r3, #4
 800ba22:	b2db      	uxtb	r3, r3
 800ba24:	461a      	mov	r2, r3
 800ba26:	0092      	lsls	r2, r2, #2
 800ba28:	4413      	add	r3, r2
 800ba2a:	005b      	lsls	r3, r3, #1
 800ba2c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800ba2e:	79fb      	ldrb	r3, [r7, #7]
 800ba30:	f003 030f 	and.w	r3, r3, #15
 800ba34:	b2da      	uxtb	r2, r3
 800ba36:	7bfb      	ldrb	r3, [r7, #15]
 800ba38:	4413      	add	r3, r2
 800ba3a:	b2db      	uxtb	r3, r3
}
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	3714      	adds	r7, #20
 800ba40:	46bd      	mov	sp, r7
 800ba42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba46:	4770      	bx	lr

0800ba48 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b08a      	sub	sp, #40	; 0x28
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d101      	bne.n	800ba5a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800ba56:	2301      	movs	r3, #1
 800ba58:	e07c      	b.n	800bb54 <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ba60:	b2db      	uxtb	r3, r3
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d10c      	bne.n	800ba80 <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	2200      	movs	r2, #0
 800ba6a:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	699b      	ldr	r3, [r3, #24]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d102      	bne.n	800ba7a <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	2202      	movs	r2, #2
 800ba78:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800ba7a:	6878      	ldr	r0, [r7, #4]
 800ba7c:	f7f7 f9e0 	bl	8002e40 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2203      	movs	r2, #3
 800ba84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800ba88:	6878      	ldr	r0, [r7, #4]
 800ba8a:	f000 f867 	bl	800bb5c <HAL_SD_InitCard>
 800ba8e:	4603      	mov	r3, r0
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d001      	beq.n	800ba98 <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 800ba94:	2301      	movs	r3, #1
 800ba96:	e05d      	b.n	800bb54 <HAL_SD_Init+0x10c>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800ba98:	f107 0308 	add.w	r3, r7, #8
 800ba9c:	4619      	mov	r1, r3
 800ba9e:	6878      	ldr	r0, [r7, #4]
 800baa0:	f001 f8ce 	bl	800cc40 <HAL_SD_GetCardStatus>
 800baa4:	4603      	mov	r3, r0
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d001      	beq.n	800baae <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 800baaa:	2301      	movs	r3, #1
 800baac:	e052      	b.n	800bb54 <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800baae:	7e3b      	ldrb	r3, [r7, #24]
 800bab0:	b2db      	uxtb	r3, r3
 800bab2:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800bab4:	7e7b      	ldrb	r3, [r7, #25]
 800bab6:	b2db      	uxtb	r3, r3
 800bab8:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800babe:	2b01      	cmp	r3, #1
 800bac0:	d10a      	bne.n	800bad8 <HAL_SD_Init+0x90>
 800bac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d102      	bne.n	800bace <HAL_SD_Init+0x86>
 800bac8:	6a3b      	ldr	r3, [r7, #32]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d004      	beq.n	800bad8 <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bad4:	65da      	str	r2, [r3, #92]	; 0x5c
 800bad6:	e00b      	b.n	800baf0 <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800badc:	2b01      	cmp	r3, #1
 800bade:	d104      	bne.n	800baea <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bae6:	65da      	str	r2, [r3, #92]	; 0x5c
 800bae8:	e002      	b.n	800baf0 <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	2200      	movs	r2, #0
 800baee:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	68db      	ldr	r3, [r3, #12]
 800baf4:	4619      	mov	r1, r3
 800baf6:	6878      	ldr	r0, [r7, #4]
 800baf8:	f001 f984 	bl	800ce04 <HAL_SD_ConfigWideBusOperation>
 800bafc:	4603      	mov	r3, r0
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d001      	beq.n	800bb06 <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 800bb02:	2301      	movs	r3, #1
 800bb04:	e026      	b.n	800bb54 <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800bb06:	f7f7 fd3d 	bl	8003584 <HAL_GetTick>
 800bb0a:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800bb0c:	e011      	b.n	800bb32 <HAL_SD_Init+0xea>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 800bb0e:	f7f7 fd39 	bl	8003584 <HAL_GetTick>
 800bb12:	4602      	mov	r2, r0
 800bb14:	69fb      	ldr	r3, [r7, #28]
 800bb16:	1ad3      	subs	r3, r2, r3
 800bb18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb1c:	d109      	bne.n	800bb32 <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bb24:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	2201      	movs	r2, #1
 800bb2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 800bb2e:	2303      	movs	r3, #3
 800bb30:	e010      	b.n	800bb54 <HAL_SD_Init+0x10c>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800bb32:	6878      	ldr	r0, [r7, #4]
 800bb34:	f001 fa10 	bl	800cf58 <HAL_SD_GetCardState>
 800bb38:	4603      	mov	r3, r0
 800bb3a:	2b04      	cmp	r3, #4
 800bb3c:	d1e7      	bne.n	800bb0e <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	2200      	movs	r2, #0
 800bb42:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2200      	movs	r2, #0
 800bb48:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	2201      	movs	r2, #1
 800bb4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800bb52:	2300      	movs	r3, #0
}
 800bb54:	4618      	mov	r0, r3
 800bb56:	3728      	adds	r7, #40	; 0x28
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	bd80      	pop	{r7, pc}

0800bb5c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800bb5c:	b5b0      	push	{r4, r5, r7, lr}
 800bb5e:	b08e      	sub	sp, #56	; 0x38
 800bb60:	af04      	add	r7, sp, #16
 800bb62:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800bb64:	2300      	movs	r3, #0
 800bb66:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800bb68:	2300      	movs	r3, #0
 800bb6a:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800bb70:	2300      	movs	r3, #0
 800bb72:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800bb74:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800bb78:	f7fe fc7a 	bl	800a470 <HAL_RCCEx_GetPeriphCLKFreq>
 800bb7c:	6278      	str	r0, [r7, #36]	; 0x24
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 800bb7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb80:	0a1b      	lsrs	r3, r3, #8
 800bb82:	4a40      	ldr	r2, [pc, #256]	; (800bc84 <HAL_SD_InitCard+0x128>)
 800bb84:	fba2 2303 	umull	r2, r3, r2, r3
 800bb88:	091b      	lsrs	r3, r3, #4
 800bb8a:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	699b      	ldr	r3, [r3, #24]
 800bb90:	2b02      	cmp	r3, #2
 800bb92:	d107      	bne.n	800bba4 <HAL_SD_InitCard+0x48>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	681a      	ldr	r2, [r3, #0]
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	f042 0210 	orr.w	r2, r2, #16
 800bba2:	601a      	str	r2, [r3, #0]
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681d      	ldr	r5, [r3, #0]
 800bba8:	466c      	mov	r4, sp
 800bbaa:	f107 0314 	add.w	r3, r7, #20
 800bbae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bbb2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800bbb6:	f107 0308 	add.w	r3, r7, #8
 800bbba:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bbbc:	4628      	mov	r0, r5
 800bbbe:	f004 f9f5 	bl	800ffac <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	f004 fa38 	bl	801003c <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 800bbcc:	69bb      	ldr	r3, [r7, #24]
 800bbce:	005b      	lsls	r3, r3, #1
 800bbd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bbd2:	fbb2 f3f3 	udiv	r3, r2, r3
 800bbd6:	627b      	str	r3, [r7, #36]	; 0x24

  if(sdmmc_clk != 0U)
 800bbd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d008      	beq.n	800bbf0 <HAL_SD_InitCard+0x94>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 800bbde:	4a2a      	ldr	r2, [pc, #168]	; (800bc88 <HAL_SD_InitCard+0x12c>)
 800bbe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbe2:	fbb2 f3f3 	udiv	r3, r2, r3
 800bbe6:	3301      	adds	r3, #1
 800bbe8:	4618      	mov	r0, r3
 800bbea:	f7f7 fcd7 	bl	800359c <HAL_Delay>
 800bbee:	e002      	b.n	800bbf6 <HAL_SD_InitCard+0x9a>
  }
  else
  {
    HAL_Delay(2U);
 800bbf0:	2002      	movs	r0, #2
 800bbf2:	f7f7 fcd3 	bl	800359c <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800bbf6:	6878      	ldr	r0, [r7, #4]
 800bbf8:	f001 fa8c 	bl	800d114 <SD_PowerON>
 800bbfc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bbfe:	6a3b      	ldr	r3, [r7, #32]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d00b      	beq.n	800bc1c <HAL_SD_InitCard+0xc0>
  {
    hsd->State = HAL_SD_STATE_READY;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	2201      	movs	r2, #1
 800bc08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc10:	6a3b      	ldr	r3, [r7, #32]
 800bc12:	431a      	orrs	r2, r3
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800bc18:	2301      	movs	r3, #1
 800bc1a:	e02e      	b.n	800bc7a <HAL_SD_InitCard+0x11e>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800bc1c:	6878      	ldr	r0, [r7, #4]
 800bc1e:	f001 f9bb 	bl	800cf98 <SD_InitCard>
 800bc22:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bc24:	6a3b      	ldr	r3, [r7, #32]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d00b      	beq.n	800bc42 <HAL_SD_InitCard+0xe6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	2201      	movs	r2, #1
 800bc2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc36:	6a3b      	ldr	r3, [r7, #32]
 800bc38:	431a      	orrs	r2, r3
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800bc3e:	2301      	movs	r3, #1
 800bc40:	e01b      	b.n	800bc7a <HAL_SD_InitCard+0x11e>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	f44f 7100 	mov.w	r1, #512	; 0x200
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	f004 fa8c 	bl	8010168 <SDMMC_CmdBlockLength>
 800bc50:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bc52:	6a3b      	ldr	r3, [r7, #32]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d00f      	beq.n	800bc78 <HAL_SD_InitCard+0x11c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	4a0b      	ldr	r2, [pc, #44]	; (800bc8c <HAL_SD_InitCard+0x130>)
 800bc5e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc64:	6a3b      	ldr	r3, [r7, #32]
 800bc66:	431a      	orrs	r2, r3
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2201      	movs	r2, #1
 800bc70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800bc74:	2301      	movs	r3, #1
 800bc76:	e000      	b.n	800bc7a <HAL_SD_InitCard+0x11e>
  }

  return HAL_OK;
 800bc78:	2300      	movs	r3, #0
}
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	3728      	adds	r7, #40	; 0x28
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	bdb0      	pop	{r4, r5, r7, pc}
 800bc82:	bf00      	nop
 800bc84:	014f8b59 	.word	0x014f8b59
 800bc88:	00012110 	.word	0x00012110
 800bc8c:	1fe00fff 	.word	0x1fe00fff

0800bc90 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b092      	sub	sp, #72	; 0x48
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	60f8      	str	r0, [r7, #12]
 800bc98:	60b9      	str	r1, [r7, #8]
 800bc9a:	607a      	str	r2, [r7, #4]
 800bc9c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800bc9e:	f7f7 fc71 	bl	8003584 <HAL_GetTick>
 800bca2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800bca8:	68bb      	ldr	r3, [r7, #8]
 800bcaa:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800bcac:	68bb      	ldr	r3, [r7, #8]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d107      	bne.n	800bcc2 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcb6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800bcbe:	2301      	movs	r3, #1
 800bcc0:	e167      	b.n	800bf92 <HAL_SD_ReadBlocks+0x302>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bcc8:	b2db      	uxtb	r3, r3
 800bcca:	2b01      	cmp	r3, #1
 800bccc:	f040 815a 	bne.w	800bf84 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800bcd6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	441a      	add	r2, r3
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bce0:	429a      	cmp	r2, r3
 800bce2:	d907      	bls.n	800bcf4 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bce8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800bcf0:	2301      	movs	r3, #1
 800bcf2:	e14e      	b.n	800bf92 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	2203      	movs	r2, #3
 800bcf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	2200      	movs	r2, #0
 800bd02:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd08:	2b01      	cmp	r3, #1
 800bd0a:	d002      	beq.n	800bd12 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800bd0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd0e:	025b      	lsls	r3, r3, #9
 800bd10:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800bd12:	f04f 33ff 	mov.w	r3, #4294967295
 800bd16:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	025b      	lsls	r3, r3, #9
 800bd1c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800bd1e:	2390      	movs	r3, #144	; 0x90
 800bd20:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800bd22:	2302      	movs	r3, #2
 800bd24:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800bd26:	2300      	movs	r3, #0
 800bd28:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	f107 0214 	add.w	r2, r7, #20
 800bd36:	4611      	mov	r1, r2
 800bd38:	4618      	mov	r0, r3
 800bd3a:	f004 f9e9 	bl	8010110 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	68da      	ldr	r2, [r3, #12]
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bd4c:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	2b01      	cmp	r3, #1
 800bd52:	d90a      	bls.n	800bd6a <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	2202      	movs	r2, #2
 800bd58:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bd60:	4618      	mov	r0, r3
 800bd62:	f004 fa47 	bl	80101f4 <SDMMC_CmdReadMultiBlock>
 800bd66:	6478      	str	r0, [r7, #68]	; 0x44
 800bd68:	e009      	b.n	800bd7e <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	2201      	movs	r2, #1
 800bd6e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bd76:	4618      	mov	r0, r3
 800bd78:	f004 fa19 	bl	80101ae <SDMMC_CmdReadSingleBlock>
 800bd7c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800bd7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d012      	beq.n	800bdaa <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	4a84      	ldr	r2, [pc, #528]	; (800bf9c <HAL_SD_ReadBlocks+0x30c>)
 800bd8a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bd90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd92:	431a      	orrs	r2, r3
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	2201      	movs	r2, #1
 800bd9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	2200      	movs	r2, #0
 800bda4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800bda6:	2301      	movs	r3, #1
 800bda8:	e0f3      	b.n	800bf92 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800bdaa:	69bb      	ldr	r3, [r7, #24]
 800bdac:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800bdae:	e058      	b.n	800be62 <HAL_SD_ReadBlocks+0x1d2>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d033      	beq.n	800be26 <HAL_SD_ReadBlocks+0x196>
 800bdbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdc0:	2b1f      	cmp	r3, #31
 800bdc2:	d930      	bls.n	800be26 <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	643b      	str	r3, [r7, #64]	; 0x40
 800bdc8:	e027      	b.n	800be1a <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	4618      	mov	r0, r3
 800bdd0:	f004 f916 	bl	8010000 <SDMMC_ReadFIFO>
 800bdd4:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800bdd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdd8:	b2da      	uxtb	r2, r3
 800bdda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bddc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800bdde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bde0:	3301      	adds	r3, #1
 800bde2:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800bde4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bde6:	0a1b      	lsrs	r3, r3, #8
 800bde8:	b2da      	uxtb	r2, r3
 800bdea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdec:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800bdee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdf0:	3301      	adds	r3, #1
 800bdf2:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800bdf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdf6:	0c1b      	lsrs	r3, r3, #16
 800bdf8:	b2da      	uxtb	r2, r3
 800bdfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdfc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800bdfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be00:	3301      	adds	r3, #1
 800be02:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800be04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be06:	0e1b      	lsrs	r3, r3, #24
 800be08:	b2da      	uxtb	r2, r3
 800be0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be0c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800be0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be10:	3301      	adds	r3, #1
 800be12:	637b      	str	r3, [r7, #52]	; 0x34
        for(count = 0U; count < 8U; count++)
 800be14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be16:	3301      	adds	r3, #1
 800be18:	643b      	str	r3, [r7, #64]	; 0x40
 800be1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be1c:	2b07      	cmp	r3, #7
 800be1e:	d9d4      	bls.n	800bdca <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 800be20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be22:	3b20      	subs	r3, #32
 800be24:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800be26:	f7f7 fbad 	bl	8003584 <HAL_GetTick>
 800be2a:	4602      	mov	r2, r0
 800be2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be2e:	1ad3      	subs	r3, r2, r3
 800be30:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800be32:	429a      	cmp	r2, r3
 800be34:	d902      	bls.n	800be3c <HAL_SD_ReadBlocks+0x1ac>
 800be36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d112      	bne.n	800be62 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	4a56      	ldr	r2, [pc, #344]	; (800bf9c <HAL_SD_ReadBlocks+0x30c>)
 800be42:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be48:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	2201      	movs	r2, #1
 800be54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	2200      	movs	r2, #0
 800be5c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800be5e:	2303      	movs	r3, #3
 800be60:	e097      	b.n	800bf92 <HAL_SD_ReadBlocks+0x302>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be68:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d09f      	beq.n	800bdb0 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	68da      	ldr	r2, [r3, #12]
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800be7e:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d022      	beq.n	800bed4 <HAL_SD_ReadBlocks+0x244>
 800be8e:	683b      	ldr	r3, [r7, #0]
 800be90:	2b01      	cmp	r3, #1
 800be92:	d91f      	bls.n	800bed4 <HAL_SD_ReadBlocks+0x244>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be98:	2b03      	cmp	r3, #3
 800be9a:	d01b      	beq.n	800bed4 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	4618      	mov	r0, r3
 800bea2:	f004 fa11 	bl	80102c8 <SDMMC_CmdStopTransfer>
 800bea6:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800bea8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d012      	beq.n	800bed4 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	4a3a      	ldr	r2, [pc, #232]	; (800bf9c <HAL_SD_ReadBlocks+0x30c>)
 800beb4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800beba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bebc:	431a      	orrs	r2, r3
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	2201      	movs	r2, #1
 800bec6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	2200      	movs	r2, #0
 800bece:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800bed0:	2301      	movs	r3, #1
 800bed2:	e05e      	b.n	800bf92 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800beda:	f003 0308 	and.w	r3, r3, #8
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d012      	beq.n	800bf08 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	4a2d      	ldr	r2, [pc, #180]	; (800bf9c <HAL_SD_ReadBlocks+0x30c>)
 800bee8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800beee:	f043 0208 	orr.w	r2, r3, #8
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	2201      	movs	r2, #1
 800befa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	2200      	movs	r2, #0
 800bf02:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800bf04:	2301      	movs	r3, #1
 800bf06:	e044      	b.n	800bf92 <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf0e:	f003 0302 	and.w	r3, r3, #2
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d012      	beq.n	800bf3c <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	4a20      	ldr	r2, [pc, #128]	; (800bf9c <HAL_SD_ReadBlocks+0x30c>)
 800bf1c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf22:	f043 0202 	orr.w	r2, r3, #2
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	2201      	movs	r2, #1
 800bf2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	2200      	movs	r2, #0
 800bf36:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800bf38:	2301      	movs	r3, #1
 800bf3a:	e02a      	b.n	800bf92 <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf42:	f003 0320 	and.w	r3, r3, #32
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d012      	beq.n	800bf70 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	4a13      	ldr	r2, [pc, #76]	; (800bf9c <HAL_SD_ReadBlocks+0x30c>)
 800bf50:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf56:	f043 0220 	orr.w	r2, r3, #32
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	2201      	movs	r2, #1
 800bf62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	2200      	movs	r2, #0
 800bf6a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800bf6c:	2301      	movs	r3, #1
 800bf6e:	e010      	b.n	800bf92 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	4a0a      	ldr	r2, [pc, #40]	; (800bfa0 <HAL_SD_ReadBlocks+0x310>)
 800bf76:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	2201      	movs	r2, #1
 800bf7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800bf80:	2300      	movs	r3, #0
 800bf82:	e006      	b.n	800bf92 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf88:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800bf90:	2301      	movs	r3, #1
  }
}
 800bf92:	4618      	mov	r0, r3
 800bf94:	3748      	adds	r7, #72	; 0x48
 800bf96:	46bd      	mov	sp, r7
 800bf98:	bd80      	pop	{r7, pc}
 800bf9a:	bf00      	nop
 800bf9c:	1fe00fff 	.word	0x1fe00fff
 800bfa0:	18000f3a 	.word	0x18000f3a

0800bfa4 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b092      	sub	sp, #72	; 0x48
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	60f8      	str	r0, [r7, #12]
 800bfac:	60b9      	str	r1, [r7, #8]
 800bfae:	607a      	str	r2, [r7, #4]
 800bfb0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800bfb2:	f7f7 fae7 	bl	8003584 <HAL_GetTick>
 800bfb6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800bfbc:	68bb      	ldr	r3, [r7, #8]
 800bfbe:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800bfc0:	68bb      	ldr	r3, [r7, #8]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d107      	bne.n	800bfd6 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfca:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800bfd2:	2301      	movs	r3, #1
 800bfd4:	e16b      	b.n	800c2ae <HAL_SD_WriteBlocks+0x30a>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bfdc:	b2db      	uxtb	r3, r3
 800bfde:	2b01      	cmp	r3, #1
 800bfe0:	f040 815e 	bne.w	800c2a0 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800bfea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bfec:	683b      	ldr	r3, [r7, #0]
 800bfee:	441a      	add	r2, r3
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bff4:	429a      	cmp	r2, r3
 800bff6:	d907      	bls.n	800c008 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bffc:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800c004:	2301      	movs	r3, #1
 800c006:	e152      	b.n	800c2ae <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	2203      	movs	r2, #3
 800c00c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	2200      	movs	r2, #0
 800c016:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c01c:	2b01      	cmp	r3, #1
 800c01e:	d002      	beq.n	800c026 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800c020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c022:	025b      	lsls	r3, r3, #9
 800c024:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c026:	f04f 33ff 	mov.w	r3, #4294967295
 800c02a:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800c02c:	683b      	ldr	r3, [r7, #0]
 800c02e:	025b      	lsls	r3, r3, #9
 800c030:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c032:	2390      	movs	r3, #144	; 0x90
 800c034:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800c036:	2300      	movs	r3, #0
 800c038:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c03a:	2300      	movs	r3, #0
 800c03c:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800c03e:	2300      	movs	r3, #0
 800c040:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	f107 0218 	add.w	r2, r7, #24
 800c04a:	4611      	mov	r1, r2
 800c04c:	4618      	mov	r0, r3
 800c04e:	f004 f85f 	bl	8010110 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	68da      	ldr	r2, [r3, #12]
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c060:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800c062:	683b      	ldr	r3, [r7, #0]
 800c064:	2b01      	cmp	r3, #1
 800c066:	d90a      	bls.n	800c07e <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	2220      	movs	r2, #32
 800c06c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c074:	4618      	mov	r0, r3
 800c076:	f004 f903 	bl	8010280 <SDMMC_CmdWriteMultiBlock>
 800c07a:	6478      	str	r0, [r7, #68]	; 0x44
 800c07c:	e009      	b.n	800c092 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	2210      	movs	r2, #16
 800c082:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c08a:	4618      	mov	r0, r3
 800c08c:	f004 f8d5 	bl	801023a <SDMMC_CmdWriteSingleBlock>
 800c090:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800c092:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c094:	2b00      	cmp	r3, #0
 800c096:	d012      	beq.n	800c0be <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	4a86      	ldr	r2, [pc, #536]	; (800c2b8 <HAL_SD_WriteBlocks+0x314>)
 800c09e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c0a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c0a6:	431a      	orrs	r2, r3
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	2201      	movs	r2, #1
 800c0b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c0ba:	2301      	movs	r3, #1
 800c0bc:	e0f7      	b.n	800c2ae <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800c0be:	69fb      	ldr	r3, [r7, #28]
 800c0c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800c0c2:	e05c      	b.n	800c17e <HAL_SD_WriteBlocks+0x1da>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d037      	beq.n	800c142 <HAL_SD_WriteBlocks+0x19e>
 800c0d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0d4:	2b1f      	cmp	r3, #31
 800c0d6:	d934      	bls.n	800c142 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800c0d8:	2300      	movs	r3, #0
 800c0da:	643b      	str	r3, [r7, #64]	; 0x40
 800c0dc:	e02b      	b.n	800c136 <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 800c0de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0e0:	781b      	ldrb	r3, [r3, #0]
 800c0e2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800c0e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0e6:	3301      	adds	r3, #1
 800c0e8:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 800c0ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0ec:	781b      	ldrb	r3, [r3, #0]
 800c0ee:	021a      	lsls	r2, r3, #8
 800c0f0:	697b      	ldr	r3, [r7, #20]
 800c0f2:	4313      	orrs	r3, r2
 800c0f4:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800c0f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0f8:	3301      	adds	r3, #1
 800c0fa:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 800c0fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0fe:	781b      	ldrb	r3, [r3, #0]
 800c100:	041a      	lsls	r2, r3, #16
 800c102:	697b      	ldr	r3, [r7, #20]
 800c104:	4313      	orrs	r3, r2
 800c106:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800c108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c10a:	3301      	adds	r3, #1
 800c10c:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 800c10e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c110:	781b      	ldrb	r3, [r3, #0]
 800c112:	061a      	lsls	r2, r3, #24
 800c114:	697b      	ldr	r3, [r7, #20]
 800c116:	4313      	orrs	r3, r2
 800c118:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800c11a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c11c:	3301      	adds	r3, #1
 800c11e:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	f107 0214 	add.w	r2, r7, #20
 800c128:	4611      	mov	r1, r2
 800c12a:	4618      	mov	r0, r3
 800c12c:	f003 ff75 	bl	801001a <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800c130:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c132:	3301      	adds	r3, #1
 800c134:	643b      	str	r3, [r7, #64]	; 0x40
 800c136:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c138:	2b07      	cmp	r3, #7
 800c13a:	d9d0      	bls.n	800c0de <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 800c13c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c13e:	3b20      	subs	r3, #32
 800c140:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800c142:	f7f7 fa1f 	bl	8003584 <HAL_GetTick>
 800c146:	4602      	mov	r2, r0
 800c148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c14a:	1ad3      	subs	r3, r2, r3
 800c14c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c14e:	429a      	cmp	r2, r3
 800c150:	d902      	bls.n	800c158 <HAL_SD_WriteBlocks+0x1b4>
 800c152:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c154:	2b00      	cmp	r3, #0
 800c156:	d112      	bne.n	800c17e <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	4a56      	ldr	r2, [pc, #344]	; (800c2b8 <HAL_SD_WriteBlocks+0x314>)
 800c15e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c164:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c166:	431a      	orrs	r2, r3
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	2201      	movs	r2, #1
 800c170:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	2200      	movs	r2, #0
 800c178:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800c17a:	2303      	movs	r3, #3
 800c17c:	e097      	b.n	800c2ae <HAL_SD_WriteBlocks+0x30a>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c184:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d09b      	beq.n	800c0c4 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	68da      	ldr	r2, [r3, #12]
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c19a:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d022      	beq.n	800c1f0 <HAL_SD_WriteBlocks+0x24c>
 800c1aa:	683b      	ldr	r3, [r7, #0]
 800c1ac:	2b01      	cmp	r3, #1
 800c1ae:	d91f      	bls.n	800c1f0 <HAL_SD_WriteBlocks+0x24c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1b4:	2b03      	cmp	r3, #3
 800c1b6:	d01b      	beq.n	800c1f0 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	4618      	mov	r0, r3
 800c1be:	f004 f883 	bl	80102c8 <SDMMC_CmdStopTransfer>
 800c1c2:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800c1c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d012      	beq.n	800c1f0 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	4a3a      	ldr	r2, [pc, #232]	; (800c2b8 <HAL_SD_WriteBlocks+0x314>)
 800c1d0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c1d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c1d8:	431a      	orrs	r2, r3
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	2201      	movs	r2, #1
 800c1e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800c1ec:	2301      	movs	r3, #1
 800c1ee:	e05e      	b.n	800c2ae <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1f6:	f003 0308 	and.w	r3, r3, #8
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d012      	beq.n	800c224 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	4a2d      	ldr	r2, [pc, #180]	; (800c2b8 <HAL_SD_WriteBlocks+0x314>)
 800c204:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c20a:	f043 0208 	orr.w	r2, r3, #8
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	2201      	movs	r2, #1
 800c216:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	2200      	movs	r2, #0
 800c21e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c220:	2301      	movs	r3, #1
 800c222:	e044      	b.n	800c2ae <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c22a:	f003 0302 	and.w	r3, r3, #2
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d012      	beq.n	800c258 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	4a20      	ldr	r2, [pc, #128]	; (800c2b8 <HAL_SD_WriteBlocks+0x314>)
 800c238:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c23e:	f043 0202 	orr.w	r2, r3, #2
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	2201      	movs	r2, #1
 800c24a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	2200      	movs	r2, #0
 800c252:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c254:	2301      	movs	r3, #1
 800c256:	e02a      	b.n	800c2ae <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c25e:	f003 0310 	and.w	r3, r3, #16
 800c262:	2b00      	cmp	r3, #0
 800c264:	d012      	beq.n	800c28c <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	4a13      	ldr	r2, [pc, #76]	; (800c2b8 <HAL_SD_WriteBlocks+0x314>)
 800c26c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c272:	f043 0210 	orr.w	r2, r3, #16
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	2201      	movs	r2, #1
 800c27e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	2200      	movs	r2, #0
 800c286:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c288:	2301      	movs	r3, #1
 800c28a:	e010      	b.n	800c2ae <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	4a0a      	ldr	r2, [pc, #40]	; (800c2bc <HAL_SD_WriteBlocks+0x318>)
 800c292:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	2201      	movs	r2, #1
 800c298:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800c29c:	2300      	movs	r3, #0
 800c29e:	e006      	b.n	800c2ae <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2a4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c2ac:	2301      	movs	r3, #1
  }
}
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	3748      	adds	r7, #72	; 0x48
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	bd80      	pop	{r7, pc}
 800c2b6:	bf00      	nop
 800c2b8:	1fe00fff 	.word	0x1fe00fff
 800c2bc:	18000f3a 	.word	0x18000f3a

0800c2c0 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b08c      	sub	sp, #48	; 0x30
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	60f8      	str	r0, [r7, #12]
 800c2c8:	60b9      	str	r1, [r7, #8]
 800c2ca:	607a      	str	r2, [r7, #4]
 800c2cc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800c2d2:	68bb      	ldr	r3, [r7, #8]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d107      	bne.n	800c2e8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2dc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c2e4:	2301      	movs	r3, #1
 800c2e6:	e08d      	b.n	800c404 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c2ee:	b2db      	uxtb	r3, r3
 800c2f0:	2b01      	cmp	r3, #1
 800c2f2:	f040 8086 	bne.w	800c402 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	2200      	movs	r2, #0
 800c2fa:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c2fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c2fe:	683b      	ldr	r3, [r7, #0]
 800c300:	441a      	add	r2, r3
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c306:	429a      	cmp	r2, r3
 800c308:	d907      	bls.n	800c31a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c30e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800c316:	2301      	movs	r3, #1
 800c318:	e074      	b.n	800c404 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	2203      	movs	r2, #3
 800c31e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	2200      	movs	r2, #0
 800c328:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	68ba      	ldr	r2, [r7, #8]
 800c32e:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800c330:	683b      	ldr	r3, [r7, #0]
 800c332:	025a      	lsls	r2, r3, #9
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c33c:	2b01      	cmp	r3, #1
 800c33e:	d002      	beq.n	800c346 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800c340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c342:	025b      	lsls	r3, r3, #9
 800c344:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c346:	f04f 33ff 	mov.w	r3, #4294967295
 800c34a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c34c:	683b      	ldr	r3, [r7, #0]
 800c34e:	025b      	lsls	r3, r3, #9
 800c350:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c352:	2390      	movs	r3, #144	; 0x90
 800c354:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c356:	2302      	movs	r3, #2
 800c358:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c35a:	2300      	movs	r3, #0
 800c35c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800c35e:	2300      	movs	r3, #0
 800c360:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	f107 0210 	add.w	r2, r7, #16
 800c36a:	4611      	mov	r1, r2
 800c36c:	4618      	mov	r0, r3
 800c36e:	f003 fecf 	bl	8010110 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	68da      	ldr	r2, [r3, #12]
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c380:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	68ba      	ldr	r2, [r7, #8]
 800c388:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	2201      	movs	r2, #1
 800c390:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if(NumberOfBlocks > 1U)
 800c392:	683b      	ldr	r3, [r7, #0]
 800c394:	2b01      	cmp	r3, #1
 800c396:	d90a      	bls.n	800c3ae <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	2282      	movs	r2, #130	; 0x82
 800c39c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	f003 ff25 	bl	80101f4 <SDMMC_CmdReadMultiBlock>
 800c3aa:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c3ac:	e009      	b.n	800c3c2 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	2281      	movs	r2, #129	; 0x81
 800c3b2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	f003 fef7 	bl	80101ae <SDMMC_CmdReadSingleBlock>
 800c3c0:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800c3c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d012      	beq.n	800c3ee <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	4a0f      	ldr	r2, [pc, #60]	; (800c40c <HAL_SD_ReadBlocks_DMA+0x14c>)
 800c3ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c3d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3d6:	431a      	orrs	r2, r3
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	2201      	movs	r2, #1
 800c3e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c3ea:	2301      	movs	r3, #1
 800c3ec:	e00a      	b.n	800c404 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800c3fc:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800c3fe:	2300      	movs	r3, #0
 800c400:	e000      	b.n	800c404 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800c402:	2302      	movs	r3, #2
  }
}
 800c404:	4618      	mov	r0, r3
 800c406:	3730      	adds	r7, #48	; 0x30
 800c408:	46bd      	mov	sp, r7
 800c40a:	bd80      	pop	{r7, pc}
 800c40c:	1fe00fff 	.word	0x1fe00fff

0800c410 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800c410:	b580      	push	{r7, lr}
 800c412:	b08c      	sub	sp, #48	; 0x30
 800c414:	af00      	add	r7, sp, #0
 800c416:	60f8      	str	r0, [r7, #12]
 800c418:	60b9      	str	r1, [r7, #8]
 800c41a:	607a      	str	r2, [r7, #4]
 800c41c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800c422:	68bb      	ldr	r3, [r7, #8]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d107      	bne.n	800c438 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c42c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c434:	2301      	movs	r3, #1
 800c436:	e08d      	b.n	800c554 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c43e:	b2db      	uxtb	r3, r3
 800c440:	2b01      	cmp	r3, #1
 800c442:	f040 8086 	bne.w	800c552 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	2200      	movs	r2, #0
 800c44a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c44c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c44e:	683b      	ldr	r3, [r7, #0]
 800c450:	441a      	add	r2, r3
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c456:	429a      	cmp	r2, r3
 800c458:	d907      	bls.n	800c46a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c45e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800c466:	2301      	movs	r3, #1
 800c468:	e074      	b.n	800c554 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	2203      	movs	r2, #3
 800c46e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	2200      	movs	r2, #0
 800c478:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	68ba      	ldr	r2, [r7, #8]
 800c47e:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800c480:	683b      	ldr	r3, [r7, #0]
 800c482:	025a      	lsls	r2, r3, #9
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	625a      	str	r2, [r3, #36]	; 0x24

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c48c:	2b01      	cmp	r3, #1
 800c48e:	d002      	beq.n	800c496 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800c490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c492:	025b      	lsls	r3, r3, #9
 800c494:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c496:	f04f 33ff 	mov.w	r3, #4294967295
 800c49a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c49c:	683b      	ldr	r3, [r7, #0]
 800c49e:	025b      	lsls	r3, r3, #9
 800c4a0:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c4a2:	2390      	movs	r3, #144	; 0x90
 800c4a4:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	f107 0210 	add.w	r2, r7, #16
 800c4ba:	4611      	mov	r1, r2
 800c4bc:	4618      	mov	r0, r3
 800c4be:	f003 fe27 	bl	8010110 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	68da      	ldr	r2, [r3, #12]
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c4d0:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	68ba      	ldr	r2, [r7, #8]
 800c4d8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	2201      	movs	r2, #1
 800c4e0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800c4e2:	683b      	ldr	r3, [r7, #0]
 800c4e4:	2b01      	cmp	r3, #1
 800c4e6:	d90a      	bls.n	800c4fe <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	22a0      	movs	r2, #160	; 0xa0
 800c4ec:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	f003 fec3 	bl	8010280 <SDMMC_CmdWriteMultiBlock>
 800c4fa:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c4fc:	e009      	b.n	800c512 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	2290      	movs	r2, #144	; 0x90
 800c502:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c50a:	4618      	mov	r0, r3
 800c50c:	f003 fe95 	bl	801023a <SDMMC_CmdWriteSingleBlock>
 800c510:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800c512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c514:	2b00      	cmp	r3, #0
 800c516:	d012      	beq.n	800c53e <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	4a0f      	ldr	r2, [pc, #60]	; (800c55c <HAL_SD_WriteBlocks_DMA+0x14c>)
 800c51e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c526:	431a      	orrs	r2, r3
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	2201      	movs	r2, #1
 800c530:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	2200      	movs	r2, #0
 800c538:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c53a:	2301      	movs	r3, #1
 800c53c:	e00a      	b.n	800c554 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800c54c:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800c54e:	2300      	movs	r3, #0
 800c550:	e000      	b.n	800c554 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800c552:	2302      	movs	r3, #2
  }
}
 800c554:	4618      	mov	r0, r3
 800c556:	3730      	adds	r7, #48	; 0x30
 800c558:	46bd      	mov	sp, r7
 800c55a:	bd80      	pop	{r7, pc}
 800c55c:	1fe00fff 	.word	0x1fe00fff

0800c560 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800c560:	b580      	push	{r7, lr}
 800c562:	b084      	sub	sp, #16
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c56c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c574:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d008      	beq.n	800c58e <HAL_SD_IRQHandler+0x2e>
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	f003 0308 	and.w	r3, r3, #8
 800c582:	2b00      	cmp	r3, #0
 800c584:	d003      	beq.n	800c58e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800c586:	6878      	ldr	r0, [r7, #4]
 800c588:	f001 f92a 	bl	800d7e0 <SD_Read_IT>
 800c58c:	e19a      	b.n	800c8c4 <HAL_SD_IRQHandler+0x364>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c598:	2b00      	cmp	r3, #0
 800c59a:	f000 80ac 	beq.w	800c6f6 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c5a6:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681a      	ldr	r2, [r3, #0]
 800c5b2:	4b9d      	ldr	r3, [pc, #628]	; (800c828 <HAL_SD_IRQHandler+0x2c8>)
 800c5b4:	400b      	ands	r3, r1
 800c5b6:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800c5c6:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	68da      	ldr	r2, [r3, #12]
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c5d6:	60da      	str	r2, [r3, #12]

    if((context & SD_CONTEXT_IT) != 0U)
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	f003 0308 	and.w	r3, r3, #8
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d038      	beq.n	800c654 <HAL_SD_IRQHandler+0xf4>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	f003 0302 	and.w	r3, r3, #2
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d104      	bne.n	800c5f6 <HAL_SD_IRQHandler+0x96>
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	f003 0320 	and.w	r3, r3, #32
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d011      	beq.n	800c61a <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	f003 fe64 	bl	80102c8 <SDMMC_CmdStopTransfer>
 800c600:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800c602:	68bb      	ldr	r3, [r7, #8]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d008      	beq.n	800c61a <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c60c:	68bb      	ldr	r3, [r7, #8]
 800c60e:	431a      	orrs	r2, r3
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800c614:	6878      	ldr	r0, [r7, #4]
 800c616:	f000 f959 	bl	800c8cc <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	4a83      	ldr	r2, [pc, #524]	; (800c82c <HAL_SD_IRQHandler+0x2cc>)
 800c620:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	2201      	movs	r2, #1
 800c626:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	2200      	movs	r2, #0
 800c62e:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	f003 0301 	and.w	r3, r3, #1
 800c636:	2b00      	cmp	r3, #0
 800c638:	d104      	bne.n	800c644 <HAL_SD_IRQHandler+0xe4>
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	f003 0302 	and.w	r3, r3, #2
 800c640:	2b00      	cmp	r3, #0
 800c642:	d003      	beq.n	800c64c <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800c644:	6878      	ldr	r0, [r7, #4]
 800c646:	f005 fe55 	bl	80122f4 <HAL_SD_RxCpltCallback>
 800c64a:	e13b      	b.n	800c8c4 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800c64c:	6878      	ldr	r0, [r7, #4]
 800c64e:	f005 fe47 	bl	80122e0 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c652:	e137      	b.n	800c8c4 <HAL_SD_IRQHandler+0x364>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	f000 8132 	beq.w	800c8c4 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	2200      	movs	r2, #0
 800c666:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	2200      	movs	r2, #0
 800c66e:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	2200      	movs	r2, #0
 800c676:	651a      	str	r2, [r3, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	f003 0302 	and.w	r3, r3, #2
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d104      	bne.n	800c68c <HAL_SD_IRQHandler+0x12c>
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	f003 0320 	and.w	r3, r3, #32
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d011      	beq.n	800c6b0 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	4618      	mov	r0, r3
 800c692:	f003 fe19 	bl	80102c8 <SDMMC_CmdStopTransfer>
 800c696:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800c698:	68bb      	ldr	r3, [r7, #8]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d008      	beq.n	800c6b0 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c6a2:	68bb      	ldr	r3, [r7, #8]
 800c6a4:	431a      	orrs	r2, r3
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800c6aa:	6878      	ldr	r0, [r7, #4]
 800c6ac:	f000 f90e 	bl	800c8cc <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	2201      	movs	r2, #1
 800c6b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	f003 0310 	and.w	r3, r3, #16
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d104      	bne.n	800c6d2 <HAL_SD_IRQHandler+0x172>
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	f003 0320 	and.w	r3, r3, #32
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d002      	beq.n	800c6d8 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800c6d2:	6878      	ldr	r0, [r7, #4]
 800c6d4:	f005 fe04 	bl	80122e0 <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	f003 0301 	and.w	r3, r3, #1
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d105      	bne.n	800c6ee <HAL_SD_IRQHandler+0x18e>
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	f003 0302 	and.w	r3, r3, #2
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	f000 80eb 	beq.w	800c8c4 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800c6ee:	6878      	ldr	r0, [r7, #4]
 800c6f0:	f005 fe00 	bl	80122f4 <HAL_SD_RxCpltCallback>
}
 800c6f4:	e0e6      	b.n	800c8c4 <HAL_SD_IRQHandler+0x364>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c700:	2b00      	cmp	r3, #0
 800c702:	d008      	beq.n	800c716 <HAL_SD_IRQHandler+0x1b6>
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	f003 0308 	and.w	r3, r3, #8
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d003      	beq.n	800c716 <HAL_SD_IRQHandler+0x1b6>
    SD_Write_IT(hsd);
 800c70e:	6878      	ldr	r0, [r7, #4]
 800c710:	f001 f8ac 	bl	800d86c <SD_Write_IT>
 800c714:	e0d6      	b.n	800c8c4 <HAL_SD_IRQHandler+0x364>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c71c:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800c720:	2b00      	cmp	r3, #0
 800c722:	f000 80a2 	beq.w	800c86a <HAL_SD_IRQHandler+0x30a>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c72c:	f003 0302 	and.w	r3, r3, #2
 800c730:	2b00      	cmp	r3, #0
 800c732:	d005      	beq.n	800c740 <HAL_SD_IRQHandler+0x1e0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c738:	f043 0202 	orr.w	r2, r3, #2
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c746:	f003 0308 	and.w	r3, r3, #8
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d005      	beq.n	800c75a <HAL_SD_IRQHandler+0x1fa>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c752:	f043 0208 	orr.w	r2, r3, #8
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c760:	f003 0320 	and.w	r3, r3, #32
 800c764:	2b00      	cmp	r3, #0
 800c766:	d005      	beq.n	800c774 <HAL_SD_IRQHandler+0x214>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c76c:	f043 0220 	orr.w	r2, r3, #32
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c77a:	f003 0310 	and.w	r3, r3, #16
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d005      	beq.n	800c78e <HAL_SD_IRQHandler+0x22e>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c786:	f043 0210 	orr.w	r2, r3, #16
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	4a26      	ldr	r2, [pc, #152]	; (800c82c <HAL_SD_IRQHandler+0x2cc>)
 800c794:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800c7a4:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	68da      	ldr	r2, [r3, #12]
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c7b4:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c7c4:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	68da      	ldr	r2, [r3, #12]
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c7d4:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	4618      	mov	r0, r3
 800c7dc:	f003 fd74 	bl	80102c8 <SDMMC_CmdStopTransfer>
 800c7e0:	4602      	mov	r2, r0
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7e6:	431a      	orrs	r2, r3
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	68da      	ldr	r2, [r3, #12]
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c7fa:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c804:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	f003 0308 	and.w	r3, r3, #8
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d00f      	beq.n	800c830 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	2201      	movs	r2, #1
 800c814:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	2200      	movs	r2, #0
 800c81c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800c81e:	6878      	ldr	r0, [r7, #4]
 800c820:	f000 f854 	bl	800c8cc <HAL_SD_ErrorCallback>
}
 800c824:	e04e      	b.n	800c8c4 <HAL_SD_IRQHandler+0x364>
 800c826:	bf00      	nop
 800c828:	ffff3ec5 	.word	0xffff3ec5
 800c82c:	18000f3a 	.word	0x18000f3a
    else if((context & SD_CONTEXT_DMA) != 0U)
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c836:	2b00      	cmp	r3, #0
 800c838:	d044      	beq.n	800c8c4 <HAL_SD_IRQHandler+0x364>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d040      	beq.n	800c8c4 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800c850:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	2200      	movs	r2, #0
 800c858:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	2201      	movs	r2, #1
 800c85e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 800c862:	6878      	ldr	r0, [r7, #4]
 800c864:	f000 f832 	bl	800c8cc <HAL_SD_ErrorCallback>
}
 800c868:	e02c      	b.n	800c8c4 <HAL_SD_IRQHandler+0x364>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c870:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c874:	2b00      	cmp	r3, #0
 800c876:	d025      	beq.n	800c8c4 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c880:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c888:	f003 0304 	and.w	r3, r3, #4
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d10c      	bne.n	800c8aa <HAL_SD_IRQHandler+0x34a>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	f003 0320 	and.w	r3, r3, #32
 800c896:	2b00      	cmp	r3, #0
 800c898:	d003      	beq.n	800c8a2 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800c89a:	6878      	ldr	r0, [r7, #4]
 800c89c:	f001 f84e 	bl	800d93c <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800c8a0:	e010      	b.n	800c8c4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800c8a2:	6878      	ldr	r0, [r7, #4]
 800c8a4:	f001 f836 	bl	800d914 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800c8a8:	e00c      	b.n	800c8c4 <HAL_SD_IRQHandler+0x364>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	f003 0320 	and.w	r3, r3, #32
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d003      	beq.n	800c8bc <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800c8b4:	6878      	ldr	r0, [r7, #4]
 800c8b6:	f001 f837 	bl	800d928 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800c8ba:	e003      	b.n	800c8c4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800c8bc:	6878      	ldr	r0, [r7, #4]
 800c8be:	f001 f81f 	bl	800d900 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800c8c2:	e7ff      	b.n	800c8c4 <HAL_SD_IRQHandler+0x364>
 800c8c4:	bf00      	nop
 800c8c6:	3710      	adds	r7, #16
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	bd80      	pop	{r7, pc}

0800c8cc <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800c8cc:	b480      	push	{r7}
 800c8ce:	b083      	sub	sp, #12
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800c8d4:	bf00      	nop
 800c8d6:	370c      	adds	r7, #12
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8de:	4770      	bx	lr

0800c8e0 <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 800c8e0:	b480      	push	{r7}
 800c8e2:	b083      	sub	sp, #12
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	4603      	mov	r3, r0
 800c8e8:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 800c8ea:	bf00      	nop
 800c8ec:	370c      	adds	r7, #12
 800c8ee:	46bd      	mov	sp, r7
 800c8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f4:	4770      	bx	lr
	...

0800c8f8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800c8f8:	b480      	push	{r7}
 800c8fa:	b083      	sub	sp, #12
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
 800c900:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c906:	0f9b      	lsrs	r3, r3, #30
 800c908:	b2da      	uxtb	r2, r3
 800c90a:	683b      	ldr	r3, [r7, #0]
 800c90c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c912:	0e9b      	lsrs	r3, r3, #26
 800c914:	b2db      	uxtb	r3, r3
 800c916:	f003 030f 	and.w	r3, r3, #15
 800c91a:	b2da      	uxtb	r2, r3
 800c91c:	683b      	ldr	r3, [r7, #0]
 800c91e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c924:	0e1b      	lsrs	r3, r3, #24
 800c926:	b2db      	uxtb	r3, r3
 800c928:	f003 0303 	and.w	r3, r3, #3
 800c92c:	b2da      	uxtb	r2, r3
 800c92e:	683b      	ldr	r3, [r7, #0]
 800c930:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c936:	0c1b      	lsrs	r3, r3, #16
 800c938:	b2da      	uxtb	r2, r3
 800c93a:	683b      	ldr	r3, [r7, #0]
 800c93c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c942:	0a1b      	lsrs	r3, r3, #8
 800c944:	b2da      	uxtb	r2, r3
 800c946:	683b      	ldr	r3, [r7, #0]
 800c948:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c94e:	b2da      	uxtb	r2, r3
 800c950:	683b      	ldr	r3, [r7, #0]
 800c952:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c958:	0d1b      	lsrs	r3, r3, #20
 800c95a:	b29a      	uxth	r2, r3
 800c95c:	683b      	ldr	r3, [r7, #0]
 800c95e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c964:	0c1b      	lsrs	r3, r3, #16
 800c966:	b2db      	uxtb	r3, r3
 800c968:	f003 030f 	and.w	r3, r3, #15
 800c96c:	b2da      	uxtb	r2, r3
 800c96e:	683b      	ldr	r3, [r7, #0]
 800c970:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c976:	0bdb      	lsrs	r3, r3, #15
 800c978:	b2db      	uxtb	r3, r3
 800c97a:	f003 0301 	and.w	r3, r3, #1
 800c97e:	b2da      	uxtb	r2, r3
 800c980:	683b      	ldr	r3, [r7, #0]
 800c982:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c988:	0b9b      	lsrs	r3, r3, #14
 800c98a:	b2db      	uxtb	r3, r3
 800c98c:	f003 0301 	and.w	r3, r3, #1
 800c990:	b2da      	uxtb	r2, r3
 800c992:	683b      	ldr	r3, [r7, #0]
 800c994:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c99a:	0b5b      	lsrs	r3, r3, #13
 800c99c:	b2db      	uxtb	r3, r3
 800c99e:	f003 0301 	and.w	r3, r3, #1
 800c9a2:	b2da      	uxtb	r2, r3
 800c9a4:	683b      	ldr	r3, [r7, #0]
 800c9a6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c9ac:	0b1b      	lsrs	r3, r3, #12
 800c9ae:	b2db      	uxtb	r3, r3
 800c9b0:	f003 0301 	and.w	r3, r3, #1
 800c9b4:	b2da      	uxtb	r2, r3
 800c9b6:	683b      	ldr	r3, [r7, #0]
 800c9b8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800c9ba:	683b      	ldr	r3, [r7, #0]
 800c9bc:	2200      	movs	r2, #0
 800c9be:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d163      	bne.n	800ca90 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c9cc:	009a      	lsls	r2, r3, #2
 800c9ce:	f640 73fc 	movw	r3, #4092	; 0xffc
 800c9d2:	4013      	ands	r3, r2
 800c9d4:	687a      	ldr	r2, [r7, #4]
 800c9d6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800c9d8:	0f92      	lsrs	r2, r2, #30
 800c9da:	431a      	orrs	r2, r3
 800c9dc:	683b      	ldr	r3, [r7, #0]
 800c9de:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c9e4:	0edb      	lsrs	r3, r3, #27
 800c9e6:	b2db      	uxtb	r3, r3
 800c9e8:	f003 0307 	and.w	r3, r3, #7
 800c9ec:	b2da      	uxtb	r2, r3
 800c9ee:	683b      	ldr	r3, [r7, #0]
 800c9f0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c9f6:	0e1b      	lsrs	r3, r3, #24
 800c9f8:	b2db      	uxtb	r3, r3
 800c9fa:	f003 0307 	and.w	r3, r3, #7
 800c9fe:	b2da      	uxtb	r2, r3
 800ca00:	683b      	ldr	r3, [r7, #0]
 800ca02:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ca08:	0d5b      	lsrs	r3, r3, #21
 800ca0a:	b2db      	uxtb	r3, r3
 800ca0c:	f003 0307 	and.w	r3, r3, #7
 800ca10:	b2da      	uxtb	r2, r3
 800ca12:	683b      	ldr	r3, [r7, #0]
 800ca14:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ca1a:	0c9b      	lsrs	r3, r3, #18
 800ca1c:	b2db      	uxtb	r3, r3
 800ca1e:	f003 0307 	and.w	r3, r3, #7
 800ca22:	b2da      	uxtb	r2, r3
 800ca24:	683b      	ldr	r3, [r7, #0]
 800ca26:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ca2c:	0bdb      	lsrs	r3, r3, #15
 800ca2e:	b2db      	uxtb	r3, r3
 800ca30:	f003 0307 	and.w	r3, r3, #7
 800ca34:	b2da      	uxtb	r2, r3
 800ca36:	683b      	ldr	r3, [r7, #0]
 800ca38:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800ca3a:	683b      	ldr	r3, [r7, #0]
 800ca3c:	691b      	ldr	r3, [r3, #16]
 800ca3e:	1c5a      	adds	r2, r3, #1
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800ca44:	683b      	ldr	r3, [r7, #0]
 800ca46:	7e1b      	ldrb	r3, [r3, #24]
 800ca48:	b2db      	uxtb	r3, r3
 800ca4a:	f003 0307 	and.w	r3, r3, #7
 800ca4e:	3302      	adds	r3, #2
 800ca50:	2201      	movs	r2, #1
 800ca52:	fa02 f303 	lsl.w	r3, r2, r3
 800ca56:	687a      	ldr	r2, [r7, #4]
 800ca58:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800ca5a:	fb02 f203 	mul.w	r2, r2, r3
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800ca62:	683b      	ldr	r3, [r7, #0]
 800ca64:	7a1b      	ldrb	r3, [r3, #8]
 800ca66:	b2db      	uxtb	r3, r3
 800ca68:	f003 030f 	and.w	r3, r3, #15
 800ca6c:	2201      	movs	r2, #1
 800ca6e:	409a      	lsls	r2, r3
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca78:	687a      	ldr	r2, [r7, #4]
 800ca7a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800ca7c:	0a52      	lsrs	r2, r2, #9
 800ca7e:	fb02 f203 	mul.w	r2, r2, r3
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ca8c:	659a      	str	r2, [r3, #88]	; 0x58
 800ca8e:	e031      	b.n	800caf4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca94:	2b01      	cmp	r3, #1
 800ca96:	d11d      	bne.n	800cad4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ca9c:	041b      	lsls	r3, r3, #16
 800ca9e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800caa6:	0c1b      	lsrs	r3, r3, #16
 800caa8:	431a      	orrs	r2, r3
 800caaa:	683b      	ldr	r3, [r7, #0]
 800caac:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800caae:	683b      	ldr	r3, [r7, #0]
 800cab0:	691b      	ldr	r3, [r3, #16]
 800cab2:	3301      	adds	r3, #1
 800cab4:	029a      	lsls	r2, r3, #10
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cac8:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	659a      	str	r2, [r3, #88]	; 0x58
 800cad2:	e00f      	b.n	800caf4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	4a58      	ldr	r2, [pc, #352]	; (800cc3c <HAL_SD_GetCardCSD+0x344>)
 800cada:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cae0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	2201      	movs	r2, #1
 800caec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800caf0:	2301      	movs	r3, #1
 800caf2:	e09d      	b.n	800cc30 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800caf8:	0b9b      	lsrs	r3, r3, #14
 800cafa:	b2db      	uxtb	r3, r3
 800cafc:	f003 0301 	and.w	r3, r3, #1
 800cb00:	b2da      	uxtb	r2, r3
 800cb02:	683b      	ldr	r3, [r7, #0]
 800cb04:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cb0a:	09db      	lsrs	r3, r3, #7
 800cb0c:	b2db      	uxtb	r3, r3
 800cb0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb12:	b2da      	uxtb	r2, r3
 800cb14:	683b      	ldr	r3, [r7, #0]
 800cb16:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cb1c:	b2db      	uxtb	r3, r3
 800cb1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb22:	b2da      	uxtb	r2, r3
 800cb24:	683b      	ldr	r3, [r7, #0]
 800cb26:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb2c:	0fdb      	lsrs	r3, r3, #31
 800cb2e:	b2da      	uxtb	r2, r3
 800cb30:	683b      	ldr	r3, [r7, #0]
 800cb32:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb38:	0f5b      	lsrs	r3, r3, #29
 800cb3a:	b2db      	uxtb	r3, r3
 800cb3c:	f003 0303 	and.w	r3, r3, #3
 800cb40:	b2da      	uxtb	r2, r3
 800cb42:	683b      	ldr	r3, [r7, #0]
 800cb44:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb4a:	0e9b      	lsrs	r3, r3, #26
 800cb4c:	b2db      	uxtb	r3, r3
 800cb4e:	f003 0307 	and.w	r3, r3, #7
 800cb52:	b2da      	uxtb	r2, r3
 800cb54:	683b      	ldr	r3, [r7, #0]
 800cb56:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb5c:	0d9b      	lsrs	r3, r3, #22
 800cb5e:	b2db      	uxtb	r3, r3
 800cb60:	f003 030f 	and.w	r3, r3, #15
 800cb64:	b2da      	uxtb	r2, r3
 800cb66:	683b      	ldr	r3, [r7, #0]
 800cb68:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb6e:	0d5b      	lsrs	r3, r3, #21
 800cb70:	b2db      	uxtb	r3, r3
 800cb72:	f003 0301 	and.w	r3, r3, #1
 800cb76:	b2da      	uxtb	r2, r3
 800cb78:	683b      	ldr	r3, [r7, #0]
 800cb7a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800cb7e:	683b      	ldr	r3, [r7, #0]
 800cb80:	2200      	movs	r2, #0
 800cb82:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb8a:	0c1b      	lsrs	r3, r3, #16
 800cb8c:	b2db      	uxtb	r3, r3
 800cb8e:	f003 0301 	and.w	r3, r3, #1
 800cb92:	b2da      	uxtb	r2, r3
 800cb94:	683b      	ldr	r3, [r7, #0]
 800cb96:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb9e:	0bdb      	lsrs	r3, r3, #15
 800cba0:	b2db      	uxtb	r3, r3
 800cba2:	f003 0301 	and.w	r3, r3, #1
 800cba6:	b2da      	uxtb	r2, r3
 800cba8:	683b      	ldr	r3, [r7, #0]
 800cbaa:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cbb2:	0b9b      	lsrs	r3, r3, #14
 800cbb4:	b2db      	uxtb	r3, r3
 800cbb6:	f003 0301 	and.w	r3, r3, #1
 800cbba:	b2da      	uxtb	r2, r3
 800cbbc:	683b      	ldr	r3, [r7, #0]
 800cbbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cbc6:	0b5b      	lsrs	r3, r3, #13
 800cbc8:	b2db      	uxtb	r3, r3
 800cbca:	f003 0301 	and.w	r3, r3, #1
 800cbce:	b2da      	uxtb	r2, r3
 800cbd0:	683b      	ldr	r3, [r7, #0]
 800cbd2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cbda:	0b1b      	lsrs	r3, r3, #12
 800cbdc:	b2db      	uxtb	r3, r3
 800cbde:	f003 0301 	and.w	r3, r3, #1
 800cbe2:	b2da      	uxtb	r2, r3
 800cbe4:	683b      	ldr	r3, [r7, #0]
 800cbe6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cbee:	0a9b      	lsrs	r3, r3, #10
 800cbf0:	b2db      	uxtb	r3, r3
 800cbf2:	f003 0303 	and.w	r3, r3, #3
 800cbf6:	b2da      	uxtb	r2, r3
 800cbf8:	683b      	ldr	r3, [r7, #0]
 800cbfa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc02:	0a1b      	lsrs	r3, r3, #8
 800cc04:	b2db      	uxtb	r3, r3
 800cc06:	f003 0303 	and.w	r3, r3, #3
 800cc0a:	b2da      	uxtb	r2, r3
 800cc0c:	683b      	ldr	r3, [r7, #0]
 800cc0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc16:	085b      	lsrs	r3, r3, #1
 800cc18:	b2db      	uxtb	r3, r3
 800cc1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc1e:	b2da      	uxtb	r2, r3
 800cc20:	683b      	ldr	r3, [r7, #0]
 800cc22:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800cc26:	683b      	ldr	r3, [r7, #0]
 800cc28:	2201      	movs	r2, #1
 800cc2a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800cc2e:	2300      	movs	r3, #0
}
 800cc30:	4618      	mov	r0, r3
 800cc32:	370c      	adds	r7, #12
 800cc34:	46bd      	mov	sp, r7
 800cc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3a:	4770      	bx	lr
 800cc3c:	1fe00fff 	.word	0x1fe00fff

0800cc40 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800cc40:	b580      	push	{r7, lr}
 800cc42:	b094      	sub	sp, #80	; 0x50
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	6078      	str	r0, [r7, #4]
 800cc48:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800cc50:	f107 0308 	add.w	r3, r7, #8
 800cc54:	4619      	mov	r1, r3
 800cc56:	6878      	ldr	r0, [r7, #4]
 800cc58:	f000 fb64 	bl	800d324 <SD_SendSDStatus>
 800cc5c:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800cc5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d011      	beq.n	800cc88 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	4a4f      	ldr	r2, [pc, #316]	; (800cda8 <HAL_SD_GetCardStatus+0x168>)
 800cc6a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc72:	431a      	orrs	r2, r3
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	2201      	movs	r2, #1
 800cc7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800cc80:	2301      	movs	r3, #1
 800cc82:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800cc86:	e070      	b.n	800cd6a <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800cc88:	68bb      	ldr	r3, [r7, #8]
 800cc8a:	099b      	lsrs	r3, r3, #6
 800cc8c:	b2db      	uxtb	r3, r3
 800cc8e:	f003 0303 	and.w	r3, r3, #3
 800cc92:	b2da      	uxtb	r2, r3
 800cc94:	683b      	ldr	r3, [r7, #0]
 800cc96:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800cc98:	68bb      	ldr	r3, [r7, #8]
 800cc9a:	095b      	lsrs	r3, r3, #5
 800cc9c:	b2db      	uxtb	r3, r3
 800cc9e:	f003 0301 	and.w	r3, r3, #1
 800cca2:	b2da      	uxtb	r2, r3
 800cca4:	683b      	ldr	r3, [r7, #0]
 800cca6:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800cca8:	68bb      	ldr	r3, [r7, #8]
 800ccaa:	0a1b      	lsrs	r3, r3, #8
 800ccac:	b29b      	uxth	r3, r3
 800ccae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ccb2:	b29a      	uxth	r2, r3
 800ccb4:	68bb      	ldr	r3, [r7, #8]
 800ccb6:	0e1b      	lsrs	r3, r3, #24
 800ccb8:	b29b      	uxth	r3, r3
 800ccba:	4313      	orrs	r3, r2
 800ccbc:	b29a      	uxth	r2, r3
 800ccbe:	683b      	ldr	r3, [r7, #0]
 800ccc0:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	061a      	lsls	r2, r3, #24
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	021b      	lsls	r3, r3, #8
 800ccca:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ccce:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	0a1b      	lsrs	r3, r3, #8
 800ccd4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ccd8:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	0e1b      	lsrs	r3, r3, #24
 800ccde:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800cce0:	683b      	ldr	r3, [r7, #0]
 800cce2:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800cce4:	693b      	ldr	r3, [r7, #16]
 800cce6:	b2da      	uxtb	r2, r3
 800cce8:	683b      	ldr	r3, [r7, #0]
 800ccea:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800ccec:	693b      	ldr	r3, [r7, #16]
 800ccee:	0a1b      	lsrs	r3, r3, #8
 800ccf0:	b2da      	uxtb	r2, r3
 800ccf2:	683b      	ldr	r3, [r7, #0]
 800ccf4:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800ccf6:	693b      	ldr	r3, [r7, #16]
 800ccf8:	0d1b      	lsrs	r3, r3, #20
 800ccfa:	b2db      	uxtb	r3, r3
 800ccfc:	f003 030f 	and.w	r3, r3, #15
 800cd00:	b2da      	uxtb	r2, r3
 800cd02:	683b      	ldr	r3, [r7, #0]
 800cd04:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800cd06:	693b      	ldr	r3, [r7, #16]
 800cd08:	0c1b      	lsrs	r3, r3, #16
 800cd0a:	b29b      	uxth	r3, r3
 800cd0c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cd10:	b29a      	uxth	r2, r3
 800cd12:	697b      	ldr	r3, [r7, #20]
 800cd14:	b29b      	uxth	r3, r3
 800cd16:	b2db      	uxtb	r3, r3
 800cd18:	b29b      	uxth	r3, r3
 800cd1a:	4313      	orrs	r3, r2
 800cd1c:	b29a      	uxth	r2, r3
 800cd1e:	683b      	ldr	r3, [r7, #0]
 800cd20:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800cd22:	697b      	ldr	r3, [r7, #20]
 800cd24:	0a9b      	lsrs	r3, r3, #10
 800cd26:	b2db      	uxtb	r3, r3
 800cd28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cd2c:	b2da      	uxtb	r2, r3
 800cd2e:	683b      	ldr	r3, [r7, #0]
 800cd30:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800cd32:	697b      	ldr	r3, [r7, #20]
 800cd34:	0a1b      	lsrs	r3, r3, #8
 800cd36:	b2db      	uxtb	r3, r3
 800cd38:	f003 0303 	and.w	r3, r3, #3
 800cd3c:	b2da      	uxtb	r2, r3
 800cd3e:	683b      	ldr	r3, [r7, #0]
 800cd40:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800cd42:	697b      	ldr	r3, [r7, #20]
 800cd44:	091b      	lsrs	r3, r3, #4
 800cd46:	b2db      	uxtb	r3, r3
 800cd48:	f003 030f 	and.w	r3, r3, #15
 800cd4c:	b2da      	uxtb	r2, r3
 800cd4e:	683b      	ldr	r3, [r7, #0]
 800cd50:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800cd52:	697b      	ldr	r3, [r7, #20]
 800cd54:	b2db      	uxtb	r3, r3
 800cd56:	f003 030f 	and.w	r3, r3, #15
 800cd5a:	b2da      	uxtb	r2, r3
 800cd5c:	683b      	ldr	r3, [r7, #0]
 800cd5e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800cd60:	69bb      	ldr	r3, [r7, #24]
 800cd62:	0e1b      	lsrs	r3, r3, #24
 800cd64:	b2da      	uxtb	r2, r3
 800cd66:	683b      	ldr	r3, [r7, #0]
 800cd68:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cd72:	4618      	mov	r0, r3
 800cd74:	f003 f9f8 	bl	8010168 <SDMMC_CmdBlockLength>
 800cd78:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800cd7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d00d      	beq.n	800cd9c <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	4a08      	ldr	r2, [pc, #32]	; (800cda8 <HAL_SD_GetCardStatus+0x168>)
 800cd86:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cd8c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	2201      	movs	r2, #1
 800cd92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800cd96:	2301      	movs	r3, #1
 800cd98:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 800cd9c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800cda0:	4618      	mov	r0, r3
 800cda2:	3750      	adds	r7, #80	; 0x50
 800cda4:	46bd      	mov	sp, r7
 800cda6:	bd80      	pop	{r7, pc}
 800cda8:	1fe00fff 	.word	0x1fe00fff

0800cdac <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800cdac:	b480      	push	{r7}
 800cdae:	b083      	sub	sp, #12
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	6078      	str	r0, [r7, #4]
 800cdb4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cdba:	683b      	ldr	r3, [r7, #0]
 800cdbc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cdc2:	683b      	ldr	r3, [r7, #0]
 800cdc4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cdca:	683b      	ldr	r3, [r7, #0]
 800cdcc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cdd2:	683b      	ldr	r3, [r7, #0]
 800cdd4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cdda:	683b      	ldr	r3, [r7, #0]
 800cddc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cde2:	683b      	ldr	r3, [r7, #0]
 800cde4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cdea:	683b      	ldr	r3, [r7, #0]
 800cdec:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800cdf2:	683b      	ldr	r3, [r7, #0]
 800cdf4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800cdf6:	2300      	movs	r3, #0
}
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	370c      	adds	r7, #12
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce02:	4770      	bx	lr

0800ce04 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800ce04:	b5b0      	push	{r4, r5, r7, lr}
 800ce06:	b08e      	sub	sp, #56	; 0x38
 800ce08:	af04      	add	r7, sp, #16
 800ce0a:	6078      	str	r0, [r7, #4]
 800ce0c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800ce0e:	2300      	movs	r3, #0
 800ce10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	2203      	movs	r2, #3
 800ce18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce20:	2b03      	cmp	r3, #3
 800ce22:	d02e      	beq.n	800ce82 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800ce24:	683b      	ldr	r3, [r7, #0]
 800ce26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ce2a:	d106      	bne.n	800ce3a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce30:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	639a      	str	r2, [r3, #56]	; 0x38
 800ce38:	e029      	b.n	800ce8e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800ce3a:	683b      	ldr	r3, [r7, #0]
 800ce3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ce40:	d10a      	bne.n	800ce58 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800ce42:	6878      	ldr	r0, [r7, #4]
 800ce44:	f000 fb66 	bl	800d514 <SD_WideBus_Enable>
 800ce48:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce4e:	6a3b      	ldr	r3, [r7, #32]
 800ce50:	431a      	orrs	r2, r3
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	639a      	str	r2, [r3, #56]	; 0x38
 800ce56:	e01a      	b.n	800ce8e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800ce58:	683b      	ldr	r3, [r7, #0]
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d10a      	bne.n	800ce74 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800ce5e:	6878      	ldr	r0, [r7, #4]
 800ce60:	f000 fba3 	bl	800d5aa <SD_WideBus_Disable>
 800ce64:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce6a:	6a3b      	ldr	r3, [r7, #32]
 800ce6c:	431a      	orrs	r2, r3
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	639a      	str	r2, [r3, #56]	; 0x38
 800ce72:	e00c      	b.n	800ce8e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce78:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	639a      	str	r2, [r3, #56]	; 0x38
 800ce80:	e005      	b.n	800ce8e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce86:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d007      	beq.n	800cea6 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	4a2e      	ldr	r2, [pc, #184]	; (800cf54 <HAL_SD_ConfigWideBusOperation+0x150>)
 800ce9c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800ce9e:	2301      	movs	r3, #1
 800cea0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cea4:	e034      	b.n	800cf10 <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	685b      	ldr	r3, [r3, #4]
 800ceaa:	60bb      	str	r3, [r7, #8]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	689b      	ldr	r3, [r3, #8]
 800ceb0:	60fb      	str	r3, [r7, #12]
    Init.BusWide             = WideMode;
 800ceb2:	683b      	ldr	r3, [r7, #0]
 800ceb4:	613b      	str	r3, [r7, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	691b      	ldr	r3, [r3, #16]
 800ceba:	617b      	str	r3, [r7, #20]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	695b      	ldr	r3, [r3, #20]
 800cec0:	2b03      	cmp	r3, #3
 800cec2:	d903      	bls.n	800cecc <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	695b      	ldr	r3, [r3, #20]
 800cec8:	61bb      	str	r3, [r7, #24]
 800ceca:	e012      	b.n	800cef2 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ced0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ced4:	d103      	bne.n	800cede <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	695b      	ldr	r3, [r3, #20]
 800ceda:	61bb      	str	r3, [r7, #24]
 800cedc:	e009      	b.n	800cef2 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cee2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cee6:	d102      	bne.n	800ceee <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 800cee8:	2302      	movs	r3, #2
 800ceea:	61bb      	str	r3, [r7, #24]
 800ceec:	e001      	b.n	800cef2 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 800ceee:	2304      	movs	r3, #4
 800cef0:	61bb      	str	r3, [r7, #24]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	681d      	ldr	r5, [r3, #0]
 800cef6:	466c      	mov	r4, sp
 800cef8:	f107 0314 	add.w	r3, r7, #20
 800cefc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cf00:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800cf04:	f107 0308 	add.w	r3, r7, #8
 800cf08:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cf0a:	4628      	mov	r0, r5
 800cf0c:	f003 f84e 	bl	800ffac <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cf18:	4618      	mov	r0, r3
 800cf1a:	f003 f925 	bl	8010168 <SDMMC_CmdBlockLength>
 800cf1e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cf20:	6a3b      	ldr	r3, [r7, #32]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d00c      	beq.n	800cf40 <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	4a0a      	ldr	r2, [pc, #40]	; (800cf54 <HAL_SD_ConfigWideBusOperation+0x150>)
 800cf2c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cf32:	6a3b      	ldr	r3, [r7, #32]
 800cf34:	431a      	orrs	r2, r3
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800cf3a:	2301      	movs	r3, #1
 800cf3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	2201      	movs	r2, #1
 800cf44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800cf48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	3728      	adds	r7, #40	; 0x28
 800cf50:	46bd      	mov	sp, r7
 800cf52:	bdb0      	pop	{r4, r5, r7, pc}
 800cf54:	1fe00fff 	.word	0x1fe00fff

0800cf58 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800cf58:	b580      	push	{r7, lr}
 800cf5a:	b086      	sub	sp, #24
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800cf60:	2300      	movs	r3, #0
 800cf62:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800cf64:	f107 030c 	add.w	r3, r7, #12
 800cf68:	4619      	mov	r1, r3
 800cf6a:	6878      	ldr	r0, [r7, #4]
 800cf6c:	f000 faaa 	bl	800d4c4 <SD_SendStatus>
 800cf70:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cf72:	697b      	ldr	r3, [r7, #20]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d005      	beq.n	800cf84 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cf7c:	697b      	ldr	r3, [r7, #20]
 800cf7e:	431a      	orrs	r2, r3
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	0a5b      	lsrs	r3, r3, #9
 800cf88:	f003 030f 	and.w	r3, r3, #15
 800cf8c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800cf8e:	693b      	ldr	r3, [r7, #16]
}
 800cf90:	4618      	mov	r0, r3
 800cf92:	3718      	adds	r7, #24
 800cf94:	46bd      	mov	sp, r7
 800cf96:	bd80      	pop	{r7, pc}

0800cf98 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800cf98:	b590      	push	{r4, r7, lr}
 800cf9a:	b091      	sub	sp, #68	; 0x44
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800cfa0:	2301      	movs	r3, #1
 800cfa2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	f003 f858 	bl	801005e <SDMMC_GetPowerState>
 800cfae:	4603      	mov	r3, r0
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d102      	bne.n	800cfba <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800cfb4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800cfb8:	e0a8      	b.n	800d10c <SD_InitCard+0x174>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfbe:	2b03      	cmp	r3, #3
 800cfc0:	d02e      	beq.n	800d020 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	f003 faa4 	bl	8010514 <SDMMC_CmdSendCID>
 800cfcc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800cfce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d001      	beq.n	800cfd8 <SD_InitCard+0x40>
    {
      return errorstate;
 800cfd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfd6:	e099      	b.n	800d10c <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	2100      	movs	r1, #0
 800cfde:	4618      	mov	r0, r3
 800cfe0:	f003 f883 	bl	80100ea <SDMMC_GetResponse>
 800cfe4:	4602      	mov	r2, r0
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	2104      	movs	r1, #4
 800cff0:	4618      	mov	r0, r3
 800cff2:	f003 f87a 	bl	80100ea <SDMMC_GetResponse>
 800cff6:	4602      	mov	r2, r0
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	2108      	movs	r1, #8
 800d002:	4618      	mov	r0, r3
 800d004:	f003 f871 	bl	80100ea <SDMMC_GetResponse>
 800d008:	4602      	mov	r2, r0
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	210c      	movs	r1, #12
 800d014:	4618      	mov	r0, r3
 800d016:	f003 f868 	bl	80100ea <SDMMC_GetResponse>
 800d01a:	4602      	mov	r2, r0
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d024:	2b03      	cmp	r3, #3
 800d026:	d00d      	beq.n	800d044 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	f107 020e 	add.w	r2, r7, #14
 800d030:	4611      	mov	r1, r2
 800d032:	4618      	mov	r0, r3
 800d034:	f003 faad 	bl	8010592 <SDMMC_CmdSetRelAdd>
 800d038:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d03a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d001      	beq.n	800d044 <SD_InitCard+0xac>
    {
      return errorstate;
 800d040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d042:	e063      	b.n	800d10c <SD_InitCard+0x174>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d048:	2b03      	cmp	r3, #3
 800d04a:	d036      	beq.n	800d0ba <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800d04c:	89fb      	ldrh	r3, [r7, #14]
 800d04e:	461a      	mov	r2, r3
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	681a      	ldr	r2, [r3, #0]
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d05c:	041b      	lsls	r3, r3, #16
 800d05e:	4619      	mov	r1, r3
 800d060:	4610      	mov	r0, r2
 800d062:	f003 fa76 	bl	8010552 <SDMMC_CmdSendCSD>
 800d066:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d068:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d001      	beq.n	800d072 <SD_InitCard+0xda>
    {
      return errorstate;
 800d06e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d070:	e04c      	b.n	800d10c <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	2100      	movs	r1, #0
 800d078:	4618      	mov	r0, r3
 800d07a:	f003 f836 	bl	80100ea <SDMMC_GetResponse>
 800d07e:	4602      	mov	r2, r0
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	2104      	movs	r1, #4
 800d08a:	4618      	mov	r0, r3
 800d08c:	f003 f82d 	bl	80100ea <SDMMC_GetResponse>
 800d090:	4602      	mov	r2, r0
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	2108      	movs	r1, #8
 800d09c:	4618      	mov	r0, r3
 800d09e:	f003 f824 	bl	80100ea <SDMMC_GetResponse>
 800d0a2:	4602      	mov	r2, r0
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	210c      	movs	r1, #12
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	f003 f81b 	bl	80100ea <SDMMC_GetResponse>
 800d0b4:	4602      	mov	r2, r0
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	2104      	movs	r1, #4
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	f003 f812 	bl	80100ea <SDMMC_GetResponse>
 800d0c6:	4603      	mov	r3, r0
 800d0c8:	0d1a      	lsrs	r2, r3, #20
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800d0ce:	f107 0310 	add.w	r3, r7, #16
 800d0d2:	4619      	mov	r1, r3
 800d0d4:	6878      	ldr	r0, [r7, #4]
 800d0d6:	f7ff fc0f 	bl	800c8f8 <HAL_SD_GetCardCSD>
 800d0da:	4603      	mov	r3, r0
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d002      	beq.n	800d0e6 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d0e0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d0e4:	e012      	b.n	800d10c <SD_InitCard+0x174>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	6819      	ldr	r1, [r3, #0]
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d0ee:	041b      	lsls	r3, r3, #16
 800d0f0:	f04f 0400 	mov.w	r4, #0
 800d0f4:	461a      	mov	r2, r3
 800d0f6:	4623      	mov	r3, r4
 800d0f8:	4608      	mov	r0, r1
 800d0fa:	f003 f921 	bl	8010340 <SDMMC_CmdSelDesel>
 800d0fe:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800d100:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d102:	2b00      	cmp	r3, #0
 800d104:	d001      	beq.n	800d10a <SD_InitCard+0x172>
  {
    return errorstate;
 800d106:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d108:	e000      	b.n	800d10c <SD_InitCard+0x174>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800d10a:	2300      	movs	r3, #0
}
 800d10c:	4618      	mov	r0, r3
 800d10e:	3744      	adds	r7, #68	; 0x44
 800d110:	46bd      	mov	sp, r7
 800d112:	bd90      	pop	{r4, r7, pc}

0800d114 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800d114:	b580      	push	{r7, lr}
 800d116:	b088      	sub	sp, #32
 800d118:	af00      	add	r7, sp, #0
 800d11a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d11c:	2300      	movs	r3, #0
 800d11e:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 800d120:	2300      	movs	r3, #0
 800d122:	61fb      	str	r3, [r7, #28]
 800d124:	2300      	movs	r3, #0
 800d126:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 800d128:	f7f6 fa2c 	bl	8003584 <HAL_GetTick>
 800d12c:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	4618      	mov	r0, r3
 800d134:	f003 f928 	bl	8010388 <SDMMC_CmdGoIdleState>
 800d138:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d13a:	693b      	ldr	r3, [r7, #16]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d001      	beq.n	800d144 <SD_PowerON+0x30>
  {
    return errorstate;
 800d140:	693b      	ldr	r3, [r7, #16]
 800d142:	e0e9      	b.n	800d318 <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	4618      	mov	r0, r3
 800d14a:	f003 f93b 	bl	80103c4 <SDMMC_CmdOperCond>
 800d14e:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d150:	693b      	ldr	r3, [r7, #16]
 800d152:	2b00      	cmp	r3, #0
 800d154:	d00d      	beq.n	800d172 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	2200      	movs	r2, #0
 800d15a:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	4618      	mov	r0, r3
 800d162:	f003 f911 	bl	8010388 <SDMMC_CmdGoIdleState>
 800d166:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d168:	693b      	ldr	r3, [r7, #16]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d004      	beq.n	800d178 <SD_PowerON+0x64>
    {
      return errorstate;
 800d16e:	693b      	ldr	r3, [r7, #16]
 800d170:	e0d2      	b.n	800d318 <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	2201      	movs	r2, #1
 800d176:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d17c:	2b01      	cmp	r3, #1
 800d17e:	d137      	bne.n	800d1f0 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	2100      	movs	r1, #0
 800d186:	4618      	mov	r0, r3
 800d188:	f003 f93c 	bl	8010404 <SDMMC_CmdAppCommand>
 800d18c:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d18e:	693b      	ldr	r3, [r7, #16]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d02d      	beq.n	800d1f0 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d194:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d198:	e0be      	b.n	800d318 <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	2100      	movs	r1, #0
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	f003 f92f 	bl	8010404 <SDMMC_CmdAppCommand>
 800d1a6:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d1a8:	693b      	ldr	r3, [r7, #16]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d001      	beq.n	800d1b2 <SD_PowerON+0x9e>
    {
      return errorstate;
 800d1ae:	693b      	ldr	r3, [r7, #16]
 800d1b0:	e0b2      	b.n	800d318 <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	495a      	ldr	r1, [pc, #360]	; (800d320 <SD_PowerON+0x20c>)
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	f003 f946 	bl	801044a <SDMMC_CmdAppOperCommand>
 800d1be:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d1c0:	693b      	ldr	r3, [r7, #16]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d002      	beq.n	800d1cc <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d1c6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d1ca:	e0a5      	b.n	800d318 <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	2100      	movs	r1, #0
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	f002 ff89 	bl	80100ea <SDMMC_GetResponse>
 800d1d8:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800d1da:	69fb      	ldr	r3, [r7, #28]
 800d1dc:	0fdb      	lsrs	r3, r3, #31
 800d1de:	2b01      	cmp	r3, #1
 800d1e0:	d101      	bne.n	800d1e6 <SD_PowerON+0xd2>
 800d1e2:	2301      	movs	r3, #1
 800d1e4:	e000      	b.n	800d1e8 <SD_PowerON+0xd4>
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	61bb      	str	r3, [r7, #24]

    count++;
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	3301      	adds	r3, #1
 800d1ee:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d1f6:	4293      	cmp	r3, r2
 800d1f8:	d802      	bhi.n	800d200 <SD_PowerON+0xec>
 800d1fa:	69bb      	ldr	r3, [r7, #24]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d0cc      	beq.n	800d19a <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d206:	4293      	cmp	r3, r2
 800d208:	d902      	bls.n	800d210 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800d20a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d20e:	e083      	b.n	800d318 <SD_PowerON+0x204>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800d210:	69fb      	ldr	r3, [r7, #28]
 800d212:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d216:	2b00      	cmp	r3, #0
 800d218:	d07d      	beq.n	800d316 <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	2201      	movs	r2, #1
 800d21e:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	699b      	ldr	r3, [r3, #24]
 800d224:	2b02      	cmp	r3, #2
 800d226:	d176      	bne.n	800d316 <SD_PowerON+0x202>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800d228:	69fb      	ldr	r3, [r7, #28]
 800d22a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d071      	beq.n	800d316 <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d238:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	681a      	ldr	r2, [r3, #0]
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	f042 0208 	orr.w	r2, r2, #8
 800d248:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	4618      	mov	r0, r3
 800d250:	f003 fa06 	bl	8010660 <SDMMC_CmdVoltageSwitch>
 800d254:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d256:	693b      	ldr	r3, [r7, #16]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d00c      	beq.n	800d276 <SD_PowerON+0x162>
        {
          return errorstate;
 800d25c:	693b      	ldr	r3, [r7, #16]
 800d25e:	e05b      	b.n	800d318 <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d260:	f7f6 f990 	bl	8003584 <HAL_GetTick>
 800d264:	4602      	mov	r2, r0
 800d266:	697b      	ldr	r3, [r7, #20]
 800d268:	1ad3      	subs	r3, r2, r3
 800d26a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d26e:	d102      	bne.n	800d276 <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 800d270:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d274:	e050      	b.n	800d318 <SD_PowerON+0x204>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d27c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d280:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d284:	d1ec      	bne.n	800d260 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800d28e:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d296:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d29a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d29e:	d002      	beq.n	800d2a6 <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 800d2a0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d2a4:	e038      	b.n	800d318 <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 800d2a6:	2001      	movs	r0, #1
 800d2a8:	f7ff fb1a 	bl	800c8e0 <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	681a      	ldr	r2, [r3, #0]
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	f042 0204 	orr.w	r2, r2, #4
 800d2ba:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800d2bc:	e00a      	b.n	800d2d4 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d2be:	f7f6 f961 	bl	8003584 <HAL_GetTick>
 800d2c2:	4602      	mov	r2, r0
 800d2c4:	697b      	ldr	r3, [r7, #20]
 800d2c6:	1ad3      	subs	r3, r2, r3
 800d2c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2cc:	d102      	bne.n	800d2d4 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 800d2ce:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d2d2:	e021      	b.n	800d318 <SD_PowerON+0x204>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d2de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d2e2:	d1ec      	bne.n	800d2be <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800d2ec:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d2f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d2fc:	d102      	bne.n	800d304 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800d2fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d302:	e009      	b.n	800d318 <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	2213      	movs	r2, #19
 800d30a:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	f04f 32ff 	mov.w	r2, #4294967295
 800d314:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800d316:	2300      	movs	r3, #0
}
 800d318:	4618      	mov	r0, r3
 800d31a:	3720      	adds	r7, #32
 800d31c:	46bd      	mov	sp, r7
 800d31e:	bd80      	pop	{r7, pc}
 800d320:	c1100000 	.word	0xc1100000

0800d324 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800d324:	b580      	push	{r7, lr}
 800d326:	b08c      	sub	sp, #48	; 0x30
 800d328:	af00      	add	r7, sp, #0
 800d32a:	6078      	str	r0, [r7, #4]
 800d32c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d32e:	f7f6 f929 	bl	8003584 <HAL_GetTick>
 800d332:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800d334:	683b      	ldr	r3, [r7, #0]
 800d336:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	2100      	movs	r1, #0
 800d33e:	4618      	mov	r0, r3
 800d340:	f002 fed3 	bl	80100ea <SDMMC_GetResponse>
 800d344:	4603      	mov	r3, r0
 800d346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d34a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d34e:	d102      	bne.n	800d356 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d350:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d354:	e0b0      	b.n	800d4b8 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	2140      	movs	r1, #64	; 0x40
 800d35c:	4618      	mov	r0, r3
 800d35e:	f002 ff03 	bl	8010168 <SDMMC_CmdBlockLength>
 800d362:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d364:	6a3b      	ldr	r3, [r7, #32]
 800d366:	2b00      	cmp	r3, #0
 800d368:	d005      	beq.n	800d376 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800d372:	6a3b      	ldr	r3, [r7, #32]
 800d374:	e0a0      	b.n	800d4b8 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	681a      	ldr	r2, [r3, #0]
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d37e:	041b      	lsls	r3, r3, #16
 800d380:	4619      	mov	r1, r3
 800d382:	4610      	mov	r0, r2
 800d384:	f003 f83e 	bl	8010404 <SDMMC_CmdAppCommand>
 800d388:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d38a:	6a3b      	ldr	r3, [r7, #32]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d005      	beq.n	800d39c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800d398:	6a3b      	ldr	r3, [r7, #32]
 800d39a:	e08d      	b.n	800d4b8 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d39c:	f04f 33ff 	mov.w	r3, #4294967295
 800d3a0:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800d3a2:	2340      	movs	r3, #64	; 0x40
 800d3a4:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800d3a6:	2360      	movs	r3, #96	; 0x60
 800d3a8:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d3aa:	2302      	movs	r3, #2
 800d3ac:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800d3b2:	2301      	movs	r3, #1
 800d3b4:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	f107 0208 	add.w	r2, r7, #8
 800d3be:	4611      	mov	r1, r2
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	f002 fea5 	bl	8010110 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	f003 f926 	bl	801061c <SDMMC_CmdStatusRegister>
 800d3d0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d3d2:	6a3b      	ldr	r3, [r7, #32]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d02b      	beq.n	800d430 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800d3e0:	6a3b      	ldr	r3, [r7, #32]
 800d3e2:	e069      	b.n	800d4b8 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d013      	beq.n	800d41a <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d3f6:	e00d      	b.n	800d414 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	f002 fdff 	bl	8010000 <SDMMC_ReadFIFO>
 800d402:	4602      	mov	r2, r0
 800d404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d406:	601a      	str	r2, [r3, #0]
        pData++;
 800d408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d40a:	3304      	adds	r3, #4
 800d40c:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 800d40e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d410:	3301      	adds	r3, #1
 800d412:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d416:	2b07      	cmp	r3, #7
 800d418:	d9ee      	bls.n	800d3f8 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d41a:	f7f6 f8b3 	bl	8003584 <HAL_GetTick>
 800d41e:	4602      	mov	r2, r0
 800d420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d422:	1ad3      	subs	r3, r2, r3
 800d424:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d428:	d102      	bne.n	800d430 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d42a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d42e:	e043      	b.n	800d4b8 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d436:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d0d2      	beq.n	800d3e4 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d444:	f003 0308 	and.w	r3, r3, #8
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d001      	beq.n	800d450 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800d44c:	2308      	movs	r3, #8
 800d44e:	e033      	b.n	800d4b8 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d456:	f003 0302 	and.w	r3, r3, #2
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d001      	beq.n	800d462 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800d45e:	2302      	movs	r3, #2
 800d460:	e02a      	b.n	800d4b8 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d468:	f003 0320 	and.w	r3, r3, #32
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d017      	beq.n	800d4a0 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800d470:	2320      	movs	r3, #32
 800d472:	e021      	b.n	800d4b8 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	4618      	mov	r0, r3
 800d47a:	f002 fdc1 	bl	8010000 <SDMMC_ReadFIFO>
 800d47e:	4602      	mov	r2, r0
 800d480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d482:	601a      	str	r2, [r3, #0]
    pData++;
 800d484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d486:	3304      	adds	r3, #4
 800d488:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d48a:	f7f6 f87b 	bl	8003584 <HAL_GetTick>
 800d48e:	4602      	mov	r2, r0
 800d490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d492:	1ad3      	subs	r3, r2, r3
 800d494:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d498:	d102      	bne.n	800d4a0 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d49a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d49e:	e00b      	b.n	800d4b8 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d1e2      	bne.n	800d474 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	4a03      	ldr	r2, [pc, #12]	; (800d4c0 <SD_SendSDStatus+0x19c>)
 800d4b4:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800d4b6:	2300      	movs	r3, #0
}
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	3730      	adds	r7, #48	; 0x30
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	bd80      	pop	{r7, pc}
 800d4c0:	18000f3a 	.word	0x18000f3a

0800d4c4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800d4c4:	b580      	push	{r7, lr}
 800d4c6:	b084      	sub	sp, #16
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	6078      	str	r0, [r7, #4]
 800d4cc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800d4ce:	683b      	ldr	r3, [r7, #0]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d102      	bne.n	800d4da <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800d4d4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d4d8:	e018      	b.n	800d50c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	681a      	ldr	r2, [r3, #0]
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d4e2:	041b      	lsls	r3, r3, #16
 800d4e4:	4619      	mov	r1, r3
 800d4e6:	4610      	mov	r0, r2
 800d4e8:	f003 f875 	bl	80105d6 <SDMMC_CmdSendStatus>
 800d4ec:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d001      	beq.n	800d4f8 <SD_SendStatus+0x34>
  {
    return errorstate;
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	e009      	b.n	800d50c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	2100      	movs	r1, #0
 800d4fe:	4618      	mov	r0, r3
 800d500:	f002 fdf3 	bl	80100ea <SDMMC_GetResponse>
 800d504:	4602      	mov	r2, r0
 800d506:	683b      	ldr	r3, [r7, #0]
 800d508:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800d50a:	2300      	movs	r3, #0
}
 800d50c:	4618      	mov	r0, r3
 800d50e:	3710      	adds	r7, #16
 800d510:	46bd      	mov	sp, r7
 800d512:	bd80      	pop	{r7, pc}

0800d514 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800d514:	b580      	push	{r7, lr}
 800d516:	b086      	sub	sp, #24
 800d518:	af00      	add	r7, sp, #0
 800d51a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800d51c:	2300      	movs	r3, #0
 800d51e:	60fb      	str	r3, [r7, #12]
 800d520:	2300      	movs	r3, #0
 800d522:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	2100      	movs	r1, #0
 800d52a:	4618      	mov	r0, r3
 800d52c:	f002 fddd 	bl	80100ea <SDMMC_GetResponse>
 800d530:	4603      	mov	r3, r0
 800d532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d536:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d53a:	d102      	bne.n	800d542 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d53c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d540:	e02f      	b.n	800d5a2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d542:	f107 030c 	add.w	r3, r7, #12
 800d546:	4619      	mov	r1, r3
 800d548:	6878      	ldr	r0, [r7, #4]
 800d54a:	f000 f879 	bl	800d640 <SD_FindSCR>
 800d54e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d550:	697b      	ldr	r3, [r7, #20]
 800d552:	2b00      	cmp	r3, #0
 800d554:	d001      	beq.n	800d55a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800d556:	697b      	ldr	r3, [r7, #20]
 800d558:	e023      	b.n	800d5a2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d55a:	693b      	ldr	r3, [r7, #16]
 800d55c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d560:	2b00      	cmp	r3, #0
 800d562:	d01c      	beq.n	800d59e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	681a      	ldr	r2, [r3, #0]
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d56c:	041b      	lsls	r3, r3, #16
 800d56e:	4619      	mov	r1, r3
 800d570:	4610      	mov	r0, r2
 800d572:	f002 ff47 	bl	8010404 <SDMMC_CmdAppCommand>
 800d576:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d578:	697b      	ldr	r3, [r7, #20]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d001      	beq.n	800d582 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800d57e:	697b      	ldr	r3, [r7, #20]
 800d580:	e00f      	b.n	800d5a2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	2102      	movs	r1, #2
 800d588:	4618      	mov	r0, r3
 800d58a:	f002 ff7e 	bl	801048a <SDMMC_CmdBusWidth>
 800d58e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d590:	697b      	ldr	r3, [r7, #20]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d001      	beq.n	800d59a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800d596:	697b      	ldr	r3, [r7, #20]
 800d598:	e003      	b.n	800d5a2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d59a:	2300      	movs	r3, #0
 800d59c:	e001      	b.n	800d5a2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d59e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	3718      	adds	r7, #24
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	bd80      	pop	{r7, pc}

0800d5aa <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800d5aa:	b580      	push	{r7, lr}
 800d5ac:	b086      	sub	sp, #24
 800d5ae:	af00      	add	r7, sp, #0
 800d5b0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	60fb      	str	r3, [r7, #12]
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	2100      	movs	r1, #0
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	f002 fd92 	bl	80100ea <SDMMC_GetResponse>
 800d5c6:	4603      	mov	r3, r0
 800d5c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d5cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d5d0:	d102      	bne.n	800d5d8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d5d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d5d6:	e02f      	b.n	800d638 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d5d8:	f107 030c 	add.w	r3, r7, #12
 800d5dc:	4619      	mov	r1, r3
 800d5de:	6878      	ldr	r0, [r7, #4]
 800d5e0:	f000 f82e 	bl	800d640 <SD_FindSCR>
 800d5e4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d5e6:	697b      	ldr	r3, [r7, #20]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d001      	beq.n	800d5f0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800d5ec:	697b      	ldr	r3, [r7, #20]
 800d5ee:	e023      	b.n	800d638 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d5f0:	693b      	ldr	r3, [r7, #16]
 800d5f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d01c      	beq.n	800d634 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	681a      	ldr	r2, [r3, #0]
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d602:	041b      	lsls	r3, r3, #16
 800d604:	4619      	mov	r1, r3
 800d606:	4610      	mov	r0, r2
 800d608:	f002 fefc 	bl	8010404 <SDMMC_CmdAppCommand>
 800d60c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d60e:	697b      	ldr	r3, [r7, #20]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d001      	beq.n	800d618 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800d614:	697b      	ldr	r3, [r7, #20]
 800d616:	e00f      	b.n	800d638 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	2100      	movs	r1, #0
 800d61e:	4618      	mov	r0, r3
 800d620:	f002 ff33 	bl	801048a <SDMMC_CmdBusWidth>
 800d624:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d626:	697b      	ldr	r3, [r7, #20]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d001      	beq.n	800d630 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800d62c:	697b      	ldr	r3, [r7, #20]
 800d62e:	e003      	b.n	800d638 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d630:	2300      	movs	r3, #0
 800d632:	e001      	b.n	800d638 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d634:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800d638:	4618      	mov	r0, r3
 800d63a:	3718      	adds	r7, #24
 800d63c:	46bd      	mov	sp, r7
 800d63e:	bd80      	pop	{r7, pc}

0800d640 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800d640:	b580      	push	{r7, lr}
 800d642:	b08e      	sub	sp, #56	; 0x38
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]
 800d648:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d64a:	f7f5 ff9b 	bl	8003584 <HAL_GetTick>
 800d64e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800d650:	2300      	movs	r3, #0
 800d652:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800d654:	2300      	movs	r3, #0
 800d656:	60bb      	str	r3, [r7, #8]
 800d658:	2300      	movs	r3, #0
 800d65a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800d65c:	683b      	ldr	r3, [r7, #0]
 800d65e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	2108      	movs	r1, #8
 800d666:	4618      	mov	r0, r3
 800d668:	f002 fd7e 	bl	8010168 <SDMMC_CmdBlockLength>
 800d66c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800d66e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d670:	2b00      	cmp	r3, #0
 800d672:	d001      	beq.n	800d678 <SD_FindSCR+0x38>
  {
    return errorstate;
 800d674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d676:	e0ad      	b.n	800d7d4 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	681a      	ldr	r2, [r3, #0]
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d680:	041b      	lsls	r3, r3, #16
 800d682:	4619      	mov	r1, r3
 800d684:	4610      	mov	r0, r2
 800d686:	f002 febd 	bl	8010404 <SDMMC_CmdAppCommand>
 800d68a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800d68c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d001      	beq.n	800d696 <SD_FindSCR+0x56>
  {
    return errorstate;
 800d692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d694:	e09e      	b.n	800d7d4 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d696:	f04f 33ff 	mov.w	r3, #4294967295
 800d69a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800d69c:	2308      	movs	r3, #8
 800d69e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800d6a0:	2330      	movs	r3, #48	; 0x30
 800d6a2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d6a4:	2302      	movs	r3, #2
 800d6a6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800d6ac:	2301      	movs	r3, #1
 800d6ae:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	f107 0210 	add.w	r2, r7, #16
 800d6b8:	4611      	mov	r1, r2
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	f002 fd28 	bl	8010110 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	f002 ff03 	bl	80104d0 <SDMMC_CmdSendSCR>
 800d6ca:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800d6cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d027      	beq.n	800d722 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800d6d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6d4:	e07e      	b.n	800d7d4 <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d113      	bne.n	800d70c <SD_FindSCR+0xcc>
 800d6e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d110      	bne.n	800d70c <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	f002 fc86 	bl	8010000 <SDMMC_ReadFIFO>
 800d6f4:	4603      	mov	r3, r0
 800d6f6:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	f002 fc7f 	bl	8010000 <SDMMC_ReadFIFO>
 800d702:	4603      	mov	r3, r0
 800d704:	60fb      	str	r3, [r7, #12]
      index++;
 800d706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d708:	3301      	adds	r3, #1
 800d70a:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d70c:	f7f5 ff3a 	bl	8003584 <HAL_GetTick>
 800d710:	4602      	mov	r2, r0
 800d712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d714:	1ad3      	subs	r3, r2, r3
 800d716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d71a:	d102      	bne.n	800d722 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d71c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d720:	e058      	b.n	800d7d4 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d728:	f240 532a 	movw	r3, #1322	; 0x52a
 800d72c:	4013      	ands	r3, r2
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d0d1      	beq.n	800d6d6 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d738:	f003 0308 	and.w	r3, r3, #8
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d005      	beq.n	800d74c <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	2208      	movs	r2, #8
 800d746:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800d748:	2308      	movs	r3, #8
 800d74a:	e043      	b.n	800d7d4 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d752:	f003 0302 	and.w	r3, r3, #2
 800d756:	2b00      	cmp	r3, #0
 800d758:	d005      	beq.n	800d766 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	2202      	movs	r2, #2
 800d760:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800d762:	2302      	movs	r3, #2
 800d764:	e036      	b.n	800d7d4 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d76c:	f003 0320 	and.w	r3, r3, #32
 800d770:	2b00      	cmp	r3, #0
 800d772:	d005      	beq.n	800d780 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	2220      	movs	r2, #32
 800d77a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800d77c:	2320      	movs	r3, #32
 800d77e:	e029      	b.n	800d7d4 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	4a15      	ldr	r2, [pc, #84]	; (800d7dc <SD_FindSCR+0x19c>)
 800d786:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	061a      	lsls	r2, r3, #24
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	021b      	lsls	r3, r3, #8
 800d790:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d794:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	0a1b      	lsrs	r3, r3, #8
 800d79a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800d79e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	0e1b      	lsrs	r3, r3, #24
 800d7a4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800d7a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7a8:	601a      	str	r2, [r3, #0]
    scr++;
 800d7aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7ac:	3304      	adds	r3, #4
 800d7ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800d7b0:	68bb      	ldr	r3, [r7, #8]
 800d7b2:	061a      	lsls	r2, r3, #24
 800d7b4:	68bb      	ldr	r3, [r7, #8]
 800d7b6:	021b      	lsls	r3, r3, #8
 800d7b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d7bc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d7be:	68bb      	ldr	r3, [r7, #8]
 800d7c0:	0a1b      	lsrs	r3, r3, #8
 800d7c2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800d7c6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d7c8:	68bb      	ldr	r3, [r7, #8]
 800d7ca:	0e1b      	lsrs	r3, r3, #24
 800d7cc:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800d7ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7d0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800d7d2:	2300      	movs	r3, #0
}
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	3738      	adds	r7, #56	; 0x38
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	bd80      	pop	{r7, pc}
 800d7dc:	18000f3a 	.word	0x18000f3a

0800d7e0 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	b086      	sub	sp, #24
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	6078      	str	r0, [r7, #4]
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7ec:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7f2:	2b1f      	cmp	r3, #31
 800d7f4:	d936      	bls.n	800d864 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800d7f6:	2300      	movs	r3, #0
 800d7f8:	617b      	str	r3, [r7, #20]
 800d7fa:	e027      	b.n	800d84c <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	4618      	mov	r0, r3
 800d802:	f002 fbfd 	bl	8010000 <SDMMC_ReadFIFO>
 800d806:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	b2da      	uxtb	r2, r3
 800d80c:	693b      	ldr	r3, [r7, #16]
 800d80e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d810:	693b      	ldr	r3, [r7, #16]
 800d812:	3301      	adds	r3, #1
 800d814:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	0a1b      	lsrs	r3, r3, #8
 800d81a:	b2da      	uxtb	r2, r3
 800d81c:	693b      	ldr	r3, [r7, #16]
 800d81e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d820:	693b      	ldr	r3, [r7, #16]
 800d822:	3301      	adds	r3, #1
 800d824:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	0c1b      	lsrs	r3, r3, #16
 800d82a:	b2da      	uxtb	r2, r3
 800d82c:	693b      	ldr	r3, [r7, #16]
 800d82e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d830:	693b      	ldr	r3, [r7, #16]
 800d832:	3301      	adds	r3, #1
 800d834:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	0e1b      	lsrs	r3, r3, #24
 800d83a:	b2da      	uxtb	r2, r3
 800d83c:	693b      	ldr	r3, [r7, #16]
 800d83e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d840:	693b      	ldr	r3, [r7, #16]
 800d842:	3301      	adds	r3, #1
 800d844:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800d846:	697b      	ldr	r3, [r7, #20]
 800d848:	3301      	adds	r3, #1
 800d84a:	617b      	str	r3, [r7, #20]
 800d84c:	697b      	ldr	r3, [r7, #20]
 800d84e:	2b07      	cmp	r3, #7
 800d850:	d9d4      	bls.n	800d7fc <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	693a      	ldr	r2, [r7, #16]
 800d856:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize -= 32U;
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d85c:	f1a3 0220 	sub.w	r2, r3, #32
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800d864:	bf00      	nop
 800d866:	3718      	adds	r7, #24
 800d868:	46bd      	mov	sp, r7
 800d86a:	bd80      	pop	{r7, pc}

0800d86c <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800d86c:	b580      	push	{r7, lr}
 800d86e:	b086      	sub	sp, #24
 800d870:	af00      	add	r7, sp, #0
 800d872:	6078      	str	r0, [r7, #4]
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	6a1b      	ldr	r3, [r3, #32]
 800d878:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d87e:	2b1f      	cmp	r3, #31
 800d880:	d93a      	bls.n	800d8f8 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800d882:	2300      	movs	r3, #0
 800d884:	617b      	str	r3, [r7, #20]
 800d886:	e02b      	b.n	800d8e0 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800d888:	693b      	ldr	r3, [r7, #16]
 800d88a:	781b      	ldrb	r3, [r3, #0]
 800d88c:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d88e:	693b      	ldr	r3, [r7, #16]
 800d890:	3301      	adds	r3, #1
 800d892:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800d894:	693b      	ldr	r3, [r7, #16]
 800d896:	781b      	ldrb	r3, [r3, #0]
 800d898:	021a      	lsls	r2, r3, #8
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	4313      	orrs	r3, r2
 800d89e:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d8a0:	693b      	ldr	r3, [r7, #16]
 800d8a2:	3301      	adds	r3, #1
 800d8a4:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800d8a6:	693b      	ldr	r3, [r7, #16]
 800d8a8:	781b      	ldrb	r3, [r3, #0]
 800d8aa:	041a      	lsls	r2, r3, #16
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	4313      	orrs	r3, r2
 800d8b0:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d8b2:	693b      	ldr	r3, [r7, #16]
 800d8b4:	3301      	adds	r3, #1
 800d8b6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800d8b8:	693b      	ldr	r3, [r7, #16]
 800d8ba:	781b      	ldrb	r3, [r3, #0]
 800d8bc:	061a      	lsls	r2, r3, #24
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	4313      	orrs	r3, r2
 800d8c2:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d8c4:	693b      	ldr	r3, [r7, #16]
 800d8c6:	3301      	adds	r3, #1
 800d8c8:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	f107 020c 	add.w	r2, r7, #12
 800d8d2:	4611      	mov	r1, r2
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	f002 fba0 	bl	801001a <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800d8da:	697b      	ldr	r3, [r7, #20]
 800d8dc:	3301      	adds	r3, #1
 800d8de:	617b      	str	r3, [r7, #20]
 800d8e0:	697b      	ldr	r3, [r7, #20]
 800d8e2:	2b07      	cmp	r3, #7
 800d8e4:	d9d0      	bls.n	800d888 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	693a      	ldr	r2, [r7, #16]
 800d8ea:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize -= 32U;
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8f0:	f1a3 0220 	sub.w	r2, r3, #32
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800d8f8:	bf00      	nop
 800d8fa:	3718      	adds	r7, #24
 800d8fc:	46bd      	mov	sp, r7
 800d8fe:	bd80      	pop	{r7, pc}

0800d900 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800d900:	b480      	push	{r7}
 800d902:	b083      	sub	sp, #12
 800d904:	af00      	add	r7, sp, #0
 800d906:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800d908:	bf00      	nop
 800d90a:	370c      	adds	r7, #12
 800d90c:	46bd      	mov	sp, r7
 800d90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d912:	4770      	bx	lr

0800d914 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800d914:	b480      	push	{r7}
 800d916:	b083      	sub	sp, #12
 800d918:	af00      	add	r7, sp, #0
 800d91a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800d91c:	bf00      	nop
 800d91e:	370c      	adds	r7, #12
 800d920:	46bd      	mov	sp, r7
 800d922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d926:	4770      	bx	lr

0800d928 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800d928:	b480      	push	{r7}
 800d92a:	b083      	sub	sp, #12
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800d930:	bf00      	nop
 800d932:	370c      	adds	r7, #12
 800d934:	46bd      	mov	sp, r7
 800d936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93a:	4770      	bx	lr

0800d93c <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800d93c:	b480      	push	{r7}
 800d93e:	b083      	sub	sp, #12
 800d940:	af00      	add	r7, sp, #0
 800d942:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800d944:	bf00      	nop
 800d946:	370c      	adds	r7, #12
 800d948:	46bd      	mov	sp, r7
 800d94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d94e:	4770      	bx	lr

0800d950 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d950:	b580      	push	{r7, lr}
 800d952:	b084      	sub	sp, #16
 800d954:	af00      	add	r7, sp, #0
 800d956:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 800d958:	2300      	movs	r3, #0
 800d95a:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d101      	bne.n	800d966 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800d962:	2301      	movs	r3, #1
 800d964:	e0e2      	b.n	800db2c <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	2200      	movs	r2, #0
 800d96a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	4a70      	ldr	r2, [pc, #448]	; (800db34 <HAL_SPI_Init+0x1e4>)
 800d972:	4293      	cmp	r3, r2
 800d974:	d00f      	beq.n	800d996 <HAL_SPI_Init+0x46>
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	4a6f      	ldr	r2, [pc, #444]	; (800db38 <HAL_SPI_Init+0x1e8>)
 800d97c:	4293      	cmp	r3, r2
 800d97e:	d00a      	beq.n	800d996 <HAL_SPI_Init+0x46>
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	4a6d      	ldr	r2, [pc, #436]	; (800db3c <HAL_SPI_Init+0x1ec>)
 800d986:	4293      	cmp	r3, r2
 800d988:	d005      	beq.n	800d996 <HAL_SPI_Init+0x46>
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	68db      	ldr	r3, [r3, #12]
 800d98e:	2b0f      	cmp	r3, #15
 800d990:	d901      	bls.n	800d996 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800d992:	2301      	movs	r3, #1
 800d994:	e0ca      	b.n	800db2c <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800d996:	6878      	ldr	r0, [r7, #4]
 800d998:	f001 f870 	bl	800ea7c <SPI_GetPacketSize>
 800d99c:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	4a64      	ldr	r2, [pc, #400]	; (800db34 <HAL_SPI_Init+0x1e4>)
 800d9a4:	4293      	cmp	r3, r2
 800d9a6:	d00c      	beq.n	800d9c2 <HAL_SPI_Init+0x72>
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	4a62      	ldr	r2, [pc, #392]	; (800db38 <HAL_SPI_Init+0x1e8>)
 800d9ae:	4293      	cmp	r3, r2
 800d9b0:	d007      	beq.n	800d9c2 <HAL_SPI_Init+0x72>
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	4a61      	ldr	r2, [pc, #388]	; (800db3c <HAL_SPI_Init+0x1ec>)
 800d9b8:	4293      	cmp	r3, r2
 800d9ba:	d002      	beq.n	800d9c2 <HAL_SPI_Init+0x72>
 800d9bc:	68bb      	ldr	r3, [r7, #8]
 800d9be:	2b08      	cmp	r3, #8
 800d9c0:	d811      	bhi.n	800d9e6 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d9c6:	4a5b      	ldr	r2, [pc, #364]	; (800db34 <HAL_SPI_Init+0x1e4>)
 800d9c8:	4293      	cmp	r3, r2
 800d9ca:	d009      	beq.n	800d9e0 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	4a59      	ldr	r2, [pc, #356]	; (800db38 <HAL_SPI_Init+0x1e8>)
 800d9d2:	4293      	cmp	r3, r2
 800d9d4:	d004      	beq.n	800d9e0 <HAL_SPI_Init+0x90>
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	4a58      	ldr	r2, [pc, #352]	; (800db3c <HAL_SPI_Init+0x1ec>)
 800d9dc:	4293      	cmp	r3, r2
 800d9de:	d104      	bne.n	800d9ea <HAL_SPI_Init+0x9a>
 800d9e0:	68bb      	ldr	r3, [r7, #8]
 800d9e2:	2b10      	cmp	r3, #16
 800d9e4:	d901      	bls.n	800d9ea <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800d9e6:	2301      	movs	r3, #1
 800d9e8:	e0a0      	b.n	800db2c <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d9f0:	b2db      	uxtb	r3, r3
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d106      	bne.n	800da04 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	2200      	movs	r2, #0
 800d9fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d9fe:	6878      	ldr	r0, [r7, #4]
 800da00:	f7f5 fa92 	bl	8002f28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	2202      	movs	r2, #2
 800da08:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	681a      	ldr	r2, [r3, #0]
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	f022 0201 	bic.w	r2, r2, #1
 800da1a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	699b      	ldr	r3, [r3, #24]
 800da20:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800da24:	d110      	bne.n	800da48 <HAL_SPI_Init+0xf8>
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	685b      	ldr	r3, [r3, #4]
 800da2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800da2e:	d10b      	bne.n	800da48 <HAL_SPI_Init+0xf8>
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da34:	2b00      	cmp	r3, #0
 800da36:	d107      	bne.n	800da48 <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	681a      	ldr	r2, [r3, #0]
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800da46:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	69da      	ldr	r2, [r3, #28]
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da50:	431a      	orrs	r2, r3
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	431a      	orrs	r2, r3
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da5a:	ea42 0103 	orr.w	r1, r2, r3
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	68da      	ldr	r2, [r3, #12]
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	430a      	orrs	r2, r1
 800da68:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da72:	431a      	orrs	r2, r3
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da78:	431a      	orrs	r2, r3
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	699b      	ldr	r3, [r3, #24]
 800da7e:	431a      	orrs	r2, r3
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	691b      	ldr	r3, [r3, #16]
 800da84:	431a      	orrs	r2, r3
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	695b      	ldr	r3, [r3, #20]
 800da8a:	431a      	orrs	r2, r3
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	6a1b      	ldr	r3, [r3, #32]
 800da90:	431a      	orrs	r2, r3
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	685b      	ldr	r3, [r3, #4]
 800da96:	431a      	orrs	r2, r3
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800da9c:	431a      	orrs	r2, r3
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	689b      	ldr	r3, [r3, #8]
 800daa2:	431a      	orrs	r2, r3
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800daa8:	ea42 0103 	orr.w	r1, r2, r3
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	430a      	orrs	r2, r1
 800dab6:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	685b      	ldr	r3, [r3, #4]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d113      	bne.n	800dae8 <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	689b      	ldr	r3, [r3, #8]
 800dac6:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dad2:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	689b      	ldr	r3, [r3, #8]
 800dada:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800dae6:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	f022 0201 	bic.w	r2, r2, #1
 800daf6:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	685b      	ldr	r3, [r3, #4]
 800dafc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800db00:	2b00      	cmp	r3, #0
 800db02:	d00a      	beq.n	800db1a <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	68db      	ldr	r3, [r3, #12]
 800db0a:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	430a      	orrs	r2, r1
 800db18:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	2200      	movs	r2, #0
 800db1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	2201      	movs	r2, #1
 800db26:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800db2a:	2300      	movs	r3, #0
}
 800db2c:	4618      	mov	r0, r3
 800db2e:	3710      	adds	r7, #16
 800db30:	46bd      	mov	sp, r7
 800db32:	bd80      	pop	{r7, pc}
 800db34:	40013000 	.word	0x40013000
 800db38:	40003800 	.word	0x40003800
 800db3c:	40003c00 	.word	0x40003c00

0800db40 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800db40:	b580      	push	{r7, lr}
 800db42:	b08a      	sub	sp, #40	; 0x28
 800db44:	af02      	add	r7, sp, #8
 800db46:	60f8      	str	r0, [r7, #12]
 800db48:	60b9      	str	r1, [r7, #8]
 800db4a:	603b      	str	r3, [r7, #0]
 800db4c:	4613      	mov	r3, r2
 800db4e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	3320      	adds	r3, #32
 800db56:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800db58:	2300      	movs	r3, #0
 800db5a:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800db62:	2b01      	cmp	r3, #1
 800db64:	d101      	bne.n	800db6a <HAL_SPI_Transmit+0x2a>
 800db66:	2302      	movs	r3, #2
 800db68:	e1d7      	b.n	800df1a <HAL_SPI_Transmit+0x3da>
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	2201      	movs	r2, #1
 800db6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800db72:	f7f5 fd07 	bl	8003584 <HAL_GetTick>
 800db76:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800db7e:	b2db      	uxtb	r3, r3
 800db80:	2b01      	cmp	r3, #1
 800db82:	d007      	beq.n	800db94 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800db84:	2302      	movs	r3, #2
 800db86:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	2200      	movs	r2, #0
 800db8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800db90:	7efb      	ldrb	r3, [r7, #27]
 800db92:	e1c2      	b.n	800df1a <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800db94:	68bb      	ldr	r3, [r7, #8]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d002      	beq.n	800dba0 <HAL_SPI_Transmit+0x60>
 800db9a:	88fb      	ldrh	r3, [r7, #6]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d107      	bne.n	800dbb0 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800dba0:	2301      	movs	r3, #1
 800dba2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	2200      	movs	r2, #0
 800dba8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800dbac:	7efb      	ldrb	r3, [r7, #27]
 800dbae:	e1b4      	b.n	800df1a <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	2203      	movs	r2, #3
 800dbb4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	2200      	movs	r2, #0
 800dbbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	68ba      	ldr	r2, [r7, #8]
 800dbc4:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	88fa      	ldrh	r2, [r7, #6]
 800dbca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	88fa      	ldrh	r2, [r7, #6]
 800dbd2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	2200      	movs	r2, #0
 800dbda:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	2200      	movs	r2, #0
 800dbe0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	2200      	movs	r2, #0
 800dbe8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	2200      	movs	r2, #0
 800dbf0:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	2200      	movs	r2, #0
 800dbf6:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	689b      	ldr	r3, [r3, #8]
 800dbfc:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800dc00:	d107      	bne.n	800dc12 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	681a      	ldr	r2, [r3, #0]
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dc10:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	685a      	ldr	r2, [r3, #4]
 800dc18:	4b96      	ldr	r3, [pc, #600]	; (800de74 <HAL_SPI_Transmit+0x334>)
 800dc1a:	4013      	ands	r3, r2
 800dc1c:	88f9      	ldrh	r1, [r7, #6]
 800dc1e:	68fa      	ldr	r2, [r7, #12]
 800dc20:	6812      	ldr	r2, [r2, #0]
 800dc22:	430b      	orrs	r3, r1
 800dc24:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	681a      	ldr	r2, [r3, #0]
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	f042 0201 	orr.w	r2, r2, #1
 800dc34:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	685b      	ldr	r3, [r3, #4]
 800dc3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dc3e:	d107      	bne.n	800dc50 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	681a      	ldr	r2, [r3, #0]
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dc4e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	68db      	ldr	r3, [r3, #12]
 800dc54:	2b0f      	cmp	r3, #15
 800dc56:	d947      	bls.n	800dce8 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800dc58:	e03f      	b.n	800dcda <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	695b      	ldr	r3, [r3, #20]
 800dc60:	f003 0302 	and.w	r3, r3, #2
 800dc64:	2b02      	cmp	r3, #2
 800dc66:	d114      	bne.n	800dc92 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	6812      	ldr	r2, [r2, #0]
 800dc72:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dc78:	1d1a      	adds	r2, r3, #4
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dc84:	b29b      	uxth	r3, r3
 800dc86:	3b01      	subs	r3, #1
 800dc88:	b29a      	uxth	r2, r3
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800dc90:	e023      	b.n	800dcda <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dc92:	f7f5 fc77 	bl	8003584 <HAL_GetTick>
 800dc96:	4602      	mov	r2, r0
 800dc98:	697b      	ldr	r3, [r7, #20]
 800dc9a:	1ad3      	subs	r3, r2, r3
 800dc9c:	683a      	ldr	r2, [r7, #0]
 800dc9e:	429a      	cmp	r2, r3
 800dca0:	d803      	bhi.n	800dcaa <HAL_SPI_Transmit+0x16a>
 800dca2:	683b      	ldr	r3, [r7, #0]
 800dca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dca8:	d102      	bne.n	800dcb0 <HAL_SPI_Transmit+0x170>
 800dcaa:	683b      	ldr	r3, [r7, #0]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d114      	bne.n	800dcda <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800dcb0:	68f8      	ldr	r0, [r7, #12]
 800dcb2:	f000 fe15 	bl	800e8e0 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	2200      	movs	r2, #0
 800dcba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dcc4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	2201      	movs	r2, #1
 800dcd2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800dcd6:	2301      	movs	r3, #1
 800dcd8:	e11f      	b.n	800df1a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dce0:	b29b      	uxth	r3, r3
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d1b9      	bne.n	800dc5a <HAL_SPI_Transmit+0x11a>
 800dce6:	e0f2      	b.n	800dece <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	68db      	ldr	r3, [r3, #12]
 800dcec:	2b07      	cmp	r3, #7
 800dcee:	f240 80e7 	bls.w	800dec0 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800dcf2:	e05d      	b.n	800ddb0 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	695b      	ldr	r3, [r3, #20]
 800dcfa:	f003 0302 	and.w	r3, r3, #2
 800dcfe:	2b02      	cmp	r3, #2
 800dd00:	d132      	bne.n	800dd68 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dd08:	b29b      	uxth	r3, r3
 800dd0a:	2b01      	cmp	r3, #1
 800dd0c:	d918      	bls.n	800dd40 <HAL_SPI_Transmit+0x200>
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d014      	beq.n	800dd40 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	6812      	ldr	r2, [r2, #0]
 800dd20:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dd26:	1d1a      	adds	r2, r3, #4
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dd32:	b29b      	uxth	r3, r3
 800dd34:	3b02      	subs	r3, #2
 800dd36:	b29a      	uxth	r2, r3
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800dd3e:	e037      	b.n	800ddb0 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dd44:	881a      	ldrh	r2, [r3, #0]
 800dd46:	69fb      	ldr	r3, [r7, #28]
 800dd48:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dd4e:	1c9a      	adds	r2, r3, #2
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dd5a:	b29b      	uxth	r3, r3
 800dd5c:	3b01      	subs	r3, #1
 800dd5e:	b29a      	uxth	r2, r3
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800dd66:	e023      	b.n	800ddb0 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dd68:	f7f5 fc0c 	bl	8003584 <HAL_GetTick>
 800dd6c:	4602      	mov	r2, r0
 800dd6e:	697b      	ldr	r3, [r7, #20]
 800dd70:	1ad3      	subs	r3, r2, r3
 800dd72:	683a      	ldr	r2, [r7, #0]
 800dd74:	429a      	cmp	r2, r3
 800dd76:	d803      	bhi.n	800dd80 <HAL_SPI_Transmit+0x240>
 800dd78:	683b      	ldr	r3, [r7, #0]
 800dd7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd7e:	d102      	bne.n	800dd86 <HAL_SPI_Transmit+0x246>
 800dd80:	683b      	ldr	r3, [r7, #0]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d114      	bne.n	800ddb0 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800dd86:	68f8      	ldr	r0, [r7, #12]
 800dd88:	f000 fdaa 	bl	800e8e0 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	2200      	movs	r2, #0
 800dd90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dd9a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	2201      	movs	r2, #1
 800dda8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800ddac:	2301      	movs	r3, #1
 800ddae:	e0b4      	b.n	800df1a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ddb6:	b29b      	uxth	r3, r3
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d19b      	bne.n	800dcf4 <HAL_SPI_Transmit+0x1b4>
 800ddbc:	e087      	b.n	800dece <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	695b      	ldr	r3, [r3, #20]
 800ddc4:	f003 0302 	and.w	r3, r3, #2
 800ddc8:	2b02      	cmp	r3, #2
 800ddca:	d155      	bne.n	800de78 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ddd2:	b29b      	uxth	r3, r3
 800ddd4:	2b03      	cmp	r3, #3
 800ddd6:	d918      	bls.n	800de0a <HAL_SPI_Transmit+0x2ca>
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dddc:	2b40      	cmp	r3, #64	; 0x40
 800ddde:	d914      	bls.n	800de0a <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	6812      	ldr	r2, [r2, #0]
 800ddea:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ddf0:	1d1a      	adds	r2, r3, #4
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ddfc:	b29b      	uxth	r3, r3
 800ddfe:	3b04      	subs	r3, #4
 800de00:	b29a      	uxth	r2, r3
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800de08:	e05a      	b.n	800dec0 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800de10:	b29b      	uxth	r3, r3
 800de12:	2b01      	cmp	r3, #1
 800de14:	d917      	bls.n	800de46 <HAL_SPI_Transmit+0x306>
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d013      	beq.n	800de46 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800de22:	881a      	ldrh	r2, [r3, #0]
 800de24:	69fb      	ldr	r3, [r7, #28]
 800de26:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800de2c:	1c9a      	adds	r2, r3, #2
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800de38:	b29b      	uxth	r3, r3
 800de3a:	3b02      	subs	r3, #2
 800de3c:	b29a      	uxth	r2, r3
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800de44:	e03c      	b.n	800dec0 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	3320      	adds	r3, #32
 800de50:	7812      	ldrb	r2, [r2, #0]
 800de52:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800de58:	1c5a      	adds	r2, r3, #1
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800de64:	b29b      	uxth	r3, r3
 800de66:	3b01      	subs	r3, #1
 800de68:	b29a      	uxth	r2, r3
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800de70:	e026      	b.n	800dec0 <HAL_SPI_Transmit+0x380>
 800de72:	bf00      	nop
 800de74:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800de78:	f7f5 fb84 	bl	8003584 <HAL_GetTick>
 800de7c:	4602      	mov	r2, r0
 800de7e:	697b      	ldr	r3, [r7, #20]
 800de80:	1ad3      	subs	r3, r2, r3
 800de82:	683a      	ldr	r2, [r7, #0]
 800de84:	429a      	cmp	r2, r3
 800de86:	d803      	bhi.n	800de90 <HAL_SPI_Transmit+0x350>
 800de88:	683b      	ldr	r3, [r7, #0]
 800de8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de8e:	d102      	bne.n	800de96 <HAL_SPI_Transmit+0x356>
 800de90:	683b      	ldr	r3, [r7, #0]
 800de92:	2b00      	cmp	r3, #0
 800de94:	d114      	bne.n	800dec0 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800de96:	68f8      	ldr	r0, [r7, #12]
 800de98:	f000 fd22 	bl	800e8e0 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	2200      	movs	r2, #0
 800dea0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800deaa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	2201      	movs	r2, #1
 800deb8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800debc:	2301      	movs	r3, #1
 800debe:	e02c      	b.n	800df1a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dec6:	b29b      	uxth	r3, r3
 800dec8:	2b00      	cmp	r3, #0
 800deca:	f47f af78 	bne.w	800ddbe <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800dece:	683b      	ldr	r3, [r7, #0]
 800ded0:	9300      	str	r3, [sp, #0]
 800ded2:	697b      	ldr	r3, [r7, #20]
 800ded4:	2200      	movs	r2, #0
 800ded6:	2108      	movs	r1, #8
 800ded8:	68f8      	ldr	r0, [r7, #12]
 800deda:	f000 fda1 	bl	800ea20 <SPI_WaitOnFlagUntilTimeout>
 800dede:	4603      	mov	r3, r0
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d007      	beq.n	800def4 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800deea:	f043 0220 	orr.w	r2, r3, #32
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800def4:	68f8      	ldr	r0, [r7, #12]
 800def6:	f000 fcf3 	bl	800e8e0 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	2200      	movs	r2, #0
 800defe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	2201      	movs	r2, #1
 800df06:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df10:	2b00      	cmp	r3, #0
 800df12:	d001      	beq.n	800df18 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800df14:	2301      	movs	r3, #1
 800df16:	e000      	b.n	800df1a <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800df18:	7efb      	ldrb	r3, [r7, #27]
}
 800df1a:	4618      	mov	r0, r3
 800df1c:	3720      	adds	r7, #32
 800df1e:	46bd      	mov	sp, r7
 800df20:	bd80      	pop	{r7, pc}
 800df22:	bf00      	nop

0800df24 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800df24:	b580      	push	{r7, lr}
 800df26:	b08a      	sub	sp, #40	; 0x28
 800df28:	af02      	add	r7, sp, #8
 800df2a:	60f8      	str	r0, [r7, #12]
 800df2c:	60b9      	str	r1, [r7, #8]
 800df2e:	603b      	str	r3, [r7, #0]
 800df30:	4613      	mov	r3, r2
 800df32:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800df34:	2300      	movs	r3, #0
 800df36:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	3330      	adds	r3, #48	; 0x30
 800df3e:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	685b      	ldr	r3, [r3, #4]
 800df44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800df48:	d112      	bne.n	800df70 <HAL_SPI_Receive+0x4c>
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	689b      	ldr	r3, [r3, #8]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d10e      	bne.n	800df70 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	2204      	movs	r2, #4
 800df56:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800df5a:	88fa      	ldrh	r2, [r7, #6]
 800df5c:	683b      	ldr	r3, [r7, #0]
 800df5e:	9300      	str	r3, [sp, #0]
 800df60:	4613      	mov	r3, r2
 800df62:	68ba      	ldr	r2, [r7, #8]
 800df64:	68b9      	ldr	r1, [r7, #8]
 800df66:	68f8      	ldr	r0, [r7, #12]
 800df68:	f000 f9ce 	bl	800e308 <HAL_SPI_TransmitReceive>
 800df6c:	4603      	mov	r3, r0
 800df6e:	e1c7      	b.n	800e300 <HAL_SPI_Receive+0x3dc>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800df76:	2b01      	cmp	r3, #1
 800df78:	d101      	bne.n	800df7e <HAL_SPI_Receive+0x5a>
 800df7a:	2302      	movs	r3, #2
 800df7c:	e1c0      	b.n	800e300 <HAL_SPI_Receive+0x3dc>
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	2201      	movs	r2, #1
 800df82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800df86:	f7f5 fafd 	bl	8003584 <HAL_GetTick>
 800df8a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800df92:	b2db      	uxtb	r3, r3
 800df94:	2b01      	cmp	r3, #1
 800df96:	d007      	beq.n	800dfa8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800df98:	2302      	movs	r3, #2
 800df9a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	2200      	movs	r2, #0
 800dfa0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800dfa4:	7ffb      	ldrb	r3, [r7, #31]
 800dfa6:	e1ab      	b.n	800e300 <HAL_SPI_Receive+0x3dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800dfa8:	68bb      	ldr	r3, [r7, #8]
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d002      	beq.n	800dfb4 <HAL_SPI_Receive+0x90>
 800dfae:	88fb      	ldrh	r3, [r7, #6]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d107      	bne.n	800dfc4 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800dfb4:	2301      	movs	r3, #1
 800dfb6:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	2200      	movs	r2, #0
 800dfbc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800dfc0:	7ffb      	ldrb	r3, [r7, #31]
 800dfc2:	e19d      	b.n	800e300 <HAL_SPI_Receive+0x3dc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	2204      	movs	r2, #4
 800dfc8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	2200      	movs	r2, #0
 800dfd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	68ba      	ldr	r2, [r7, #8]
 800dfd8:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	88fa      	ldrh	r2, [r7, #6]
 800dfde:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	88fa      	ldrh	r2, [r7, #6]
 800dfe6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	2200      	movs	r2, #0
 800dfee:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	2200      	movs	r2, #0
 800dff4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	2200      	movs	r2, #0
 800dffc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	2200      	movs	r2, #0
 800e004:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	2200      	movs	r2, #0
 800e00a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	689b      	ldr	r3, [r3, #8]
 800e010:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800e014:	d107      	bne.n	800e026 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	681a      	ldr	r2, [r3, #0]
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e024:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	685a      	ldr	r2, [r3, #4]
 800e02c:	4b94      	ldr	r3, [pc, #592]	; (800e280 <HAL_SPI_Receive+0x35c>)
 800e02e:	4013      	ands	r3, r2
 800e030:	88f9      	ldrh	r1, [r7, #6]
 800e032:	68fa      	ldr	r2, [r7, #12]
 800e034:	6812      	ldr	r2, [r2, #0]
 800e036:	430b      	orrs	r3, r1
 800e038:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	681a      	ldr	r2, [r3, #0]
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	f042 0201 	orr.w	r2, r2, #1
 800e048:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	685b      	ldr	r3, [r3, #4]
 800e04e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e052:	d107      	bne.n	800e064 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	681a      	ldr	r2, [r3, #0]
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e062:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	68db      	ldr	r3, [r3, #12]
 800e068:	2b0f      	cmp	r3, #15
 800e06a:	d948      	bls.n	800e0fe <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e06c:	e040      	b.n	800e0f0 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	695a      	ldr	r2, [r3, #20]
 800e074:	f248 0308 	movw	r3, #32776	; 0x8008
 800e078:	4013      	ands	r3, r2
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d014      	beq.n	800e0a8 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	681a      	ldr	r2, [r3, #0]
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e086:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e088:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e08e:	1d1a      	adds	r2, r3, #4
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e09a:	b29b      	uxth	r3, r3
 800e09c:	3b01      	subs	r3, #1
 800e09e:	b29a      	uxth	r2, r3
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e0a6:	e023      	b.n	800e0f0 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e0a8:	f7f5 fa6c 	bl	8003584 <HAL_GetTick>
 800e0ac:	4602      	mov	r2, r0
 800e0ae:	697b      	ldr	r3, [r7, #20]
 800e0b0:	1ad3      	subs	r3, r2, r3
 800e0b2:	683a      	ldr	r2, [r7, #0]
 800e0b4:	429a      	cmp	r2, r3
 800e0b6:	d803      	bhi.n	800e0c0 <HAL_SPI_Receive+0x19c>
 800e0b8:	683b      	ldr	r3, [r7, #0]
 800e0ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0be:	d102      	bne.n	800e0c6 <HAL_SPI_Receive+0x1a2>
 800e0c0:	683b      	ldr	r3, [r7, #0]
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d114      	bne.n	800e0f0 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e0c6:	68f8      	ldr	r0, [r7, #12]
 800e0c8:	f000 fc0a 	bl	800e8e0 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	2200      	movs	r2, #0
 800e0d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e0da:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	2201      	movs	r2, #1
 800e0e8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800e0ec:	2301      	movs	r3, #1
 800e0ee:	e107      	b.n	800e300 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e0f6:	b29b      	uxth	r3, r3
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d1b8      	bne.n	800e06e <HAL_SPI_Receive+0x14a>
 800e0fc:	e0ed      	b.n	800e2da <HAL_SPI_Receive+0x3b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	68db      	ldr	r3, [r3, #12]
 800e102:	2b07      	cmp	r3, #7
 800e104:	f240 80e2 	bls.w	800e2cc <HAL_SPI_Receive+0x3a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e108:	e05b      	b.n	800e1c2 <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	695b      	ldr	r3, [r3, #20]
 800e110:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e114:	2b00      	cmp	r3, #0
 800e116:	d030      	beq.n	800e17a <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	695b      	ldr	r3, [r3, #20]
 800e11e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e122:	2b00      	cmp	r3, #0
 800e124:	d014      	beq.n	800e150 <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	681a      	ldr	r2, [r3, #0]
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e12e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e130:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e136:	1d1a      	adds	r2, r3, #4
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e142:	b29b      	uxth	r3, r3
 800e144:	3b02      	subs	r3, #2
 800e146:	b29a      	uxth	r2, r3
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e14e:	e038      	b.n	800e1c2 <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e154:	69ba      	ldr	r2, [r7, #24]
 800e156:	8812      	ldrh	r2, [r2, #0]
 800e158:	b292      	uxth	r2, r2
 800e15a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e160:	1c9a      	adds	r2, r3, #2
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e16c:	b29b      	uxth	r3, r3
 800e16e:	3b01      	subs	r3, #1
 800e170:	b29a      	uxth	r2, r3
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e178:	e023      	b.n	800e1c2 <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e17a:	f7f5 fa03 	bl	8003584 <HAL_GetTick>
 800e17e:	4602      	mov	r2, r0
 800e180:	697b      	ldr	r3, [r7, #20]
 800e182:	1ad3      	subs	r3, r2, r3
 800e184:	683a      	ldr	r2, [r7, #0]
 800e186:	429a      	cmp	r2, r3
 800e188:	d803      	bhi.n	800e192 <HAL_SPI_Receive+0x26e>
 800e18a:	683b      	ldr	r3, [r7, #0]
 800e18c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e190:	d102      	bne.n	800e198 <HAL_SPI_Receive+0x274>
 800e192:	683b      	ldr	r3, [r7, #0]
 800e194:	2b00      	cmp	r3, #0
 800e196:	d114      	bne.n	800e1c2 <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e198:	68f8      	ldr	r0, [r7, #12]
 800e19a:	f000 fba1 	bl	800e8e0 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	2200      	movs	r2, #0
 800e1a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e1ac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	2201      	movs	r2, #1
 800e1ba:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800e1be:	2301      	movs	r3, #1
 800e1c0:	e09e      	b.n	800e300 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e1c8:	b29b      	uxth	r3, r3
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d19d      	bne.n	800e10a <HAL_SPI_Receive+0x1e6>
 800e1ce:	e084      	b.n	800e2da <HAL_SPI_Receive+0x3b6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	695b      	ldr	r3, [r3, #20]
 800e1d6:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d052      	beq.n	800e284 <HAL_SPI_Receive+0x360>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	695b      	ldr	r3, [r3, #20]
 800e1e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d014      	beq.n	800e216 <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	681a      	ldr	r2, [r3, #0]
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e1f4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e1f6:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e1fc:	1d1a      	adds	r2, r3, #4
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e208:	b29b      	uxth	r3, r3
 800e20a:	3b04      	subs	r3, #4
 800e20c:	b29a      	uxth	r2, r3
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e214:	e05a      	b.n	800e2cc <HAL_SPI_Receive+0x3a8>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	695b      	ldr	r3, [r3, #20]
 800e21c:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800e220:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e224:	d914      	bls.n	800e250 <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e22a:	69ba      	ldr	r2, [r7, #24]
 800e22c:	8812      	ldrh	r2, [r2, #0]
 800e22e:	b292      	uxth	r2, r2
 800e230:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e236:	1c9a      	adds	r2, r3, #2
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e242:	b29b      	uxth	r3, r3
 800e244:	3b02      	subs	r3, #2
 800e246:	b29a      	uxth	r2, r3
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e24e:	e03d      	b.n	800e2cc <HAL_SPI_Receive+0x3a8>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e25c:	7812      	ldrb	r2, [r2, #0]
 800e25e:	b2d2      	uxtb	r2, r2
 800e260:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e266:	1c5a      	adds	r2, r3, #1
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e272:	b29b      	uxth	r3, r3
 800e274:	3b01      	subs	r3, #1
 800e276:	b29a      	uxth	r2, r3
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e27e:	e025      	b.n	800e2cc <HAL_SPI_Receive+0x3a8>
 800e280:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e284:	f7f5 f97e 	bl	8003584 <HAL_GetTick>
 800e288:	4602      	mov	r2, r0
 800e28a:	697b      	ldr	r3, [r7, #20]
 800e28c:	1ad3      	subs	r3, r2, r3
 800e28e:	683a      	ldr	r2, [r7, #0]
 800e290:	429a      	cmp	r2, r3
 800e292:	d803      	bhi.n	800e29c <HAL_SPI_Receive+0x378>
 800e294:	683b      	ldr	r3, [r7, #0]
 800e296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e29a:	d102      	bne.n	800e2a2 <HAL_SPI_Receive+0x37e>
 800e29c:	683b      	ldr	r3, [r7, #0]
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d114      	bne.n	800e2cc <HAL_SPI_Receive+0x3a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e2a2:	68f8      	ldr	r0, [r7, #12]
 800e2a4:	f000 fb1c 	bl	800e8e0 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	2200      	movs	r2, #0
 800e2ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e2b6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	2201      	movs	r2, #1
 800e2c4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800e2c8:	2301      	movs	r3, #1
 800e2ca:	e019      	b.n	800e300 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e2d2:	b29b      	uxth	r3, r3
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	f47f af7b 	bne.w	800e1d0 <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800e2da:	68f8      	ldr	r0, [r7, #12]
 800e2dc:	f000 fb00 	bl	800e8e0 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	2200      	movs	r2, #0
 800e2e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	2201      	movs	r2, #1
 800e2ec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d001      	beq.n	800e2fe <HAL_SPI_Receive+0x3da>
  {
    return HAL_ERROR;
 800e2fa:	2301      	movs	r3, #1
 800e2fc:	e000      	b.n	800e300 <HAL_SPI_Receive+0x3dc>
  }
  return errorcode;
 800e2fe:	7ffb      	ldrb	r3, [r7, #31]
}
 800e300:	4618      	mov	r0, r3
 800e302:	3720      	adds	r7, #32
 800e304:	46bd      	mov	sp, r7
 800e306:	bd80      	pop	{r7, pc}

0800e308 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800e308:	b580      	push	{r7, lr}
 800e30a:	b08e      	sub	sp, #56	; 0x38
 800e30c:	af02      	add	r7, sp, #8
 800e30e:	60f8      	str	r0, [r7, #12]
 800e310:	60b9      	str	r1, [r7, #8]
 800e312:	607a      	str	r2, [r7, #4]
 800e314:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e316:	2300      	movs	r3, #0
 800e318:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	3320      	adds	r3, #32
 800e322:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	3330      	adds	r3, #48	; 0x30
 800e32a:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e332:	2b01      	cmp	r3, #1
 800e334:	d101      	bne.n	800e33a <HAL_SPI_TransmitReceive+0x32>
 800e336:	2302      	movs	r3, #2
 800e338:	e2ce      	b.n	800e8d8 <HAL_SPI_TransmitReceive+0x5d0>
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	2201      	movs	r2, #1
 800e33e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e342:	f7f5 f91f 	bl	8003584 <HAL_GetTick>
 800e346:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800e348:	887b      	ldrh	r3, [r7, #2]
 800e34a:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800e34c:	887b      	ldrh	r3, [r7, #2]
 800e34e:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e356:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	685b      	ldr	r3, [r3, #4]
 800e35c:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800e35e:	7efb      	ldrb	r3, [r7, #27]
 800e360:	2b01      	cmp	r3, #1
 800e362:	d014      	beq.n	800e38e <HAL_SPI_TransmitReceive+0x86>
 800e364:	697b      	ldr	r3, [r7, #20]
 800e366:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e36a:	d106      	bne.n	800e37a <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	689b      	ldr	r3, [r3, #8]
 800e370:	2b00      	cmp	r3, #0
 800e372:	d102      	bne.n	800e37a <HAL_SPI_TransmitReceive+0x72>
 800e374:	7efb      	ldrb	r3, [r7, #27]
 800e376:	2b04      	cmp	r3, #4
 800e378:	d009      	beq.n	800e38e <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 800e37a:	2302      	movs	r3, #2
 800e37c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	2200      	movs	r2, #0
 800e384:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800e388:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e38c:	e2a4      	b.n	800e8d8 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800e38e:	68bb      	ldr	r3, [r7, #8]
 800e390:	2b00      	cmp	r3, #0
 800e392:	d005      	beq.n	800e3a0 <HAL_SPI_TransmitReceive+0x98>
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	2b00      	cmp	r3, #0
 800e398:	d002      	beq.n	800e3a0 <HAL_SPI_TransmitReceive+0x98>
 800e39a:	887b      	ldrh	r3, [r7, #2]
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d109      	bne.n	800e3b4 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800e3a0:	2301      	movs	r3, #1
 800e3a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	2200      	movs	r2, #0
 800e3aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800e3ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e3b2:	e291      	b.n	800e8d8 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e3ba:	b2db      	uxtb	r3, r3
 800e3bc:	2b04      	cmp	r3, #4
 800e3be:	d003      	beq.n	800e3c8 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	2205      	movs	r2, #5
 800e3c4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	2200      	movs	r2, #0
 800e3cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	687a      	ldr	r2, [r7, #4]
 800e3d4:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	887a      	ldrh	r2, [r7, #2]
 800e3da:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	887a      	ldrh	r2, [r7, #2]
 800e3e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	68ba      	ldr	r2, [r7, #8]
 800e3ea:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	887a      	ldrh	r2, [r7, #2]
 800e3f0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	887a      	ldrh	r2, [r7, #2]
 800e3f8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	2200      	movs	r2, #0
 800e400:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	2200      	movs	r2, #0
 800e406:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	685a      	ldr	r2, [r3, #4]
 800e40e:	4b9f      	ldr	r3, [pc, #636]	; (800e68c <HAL_SPI_TransmitReceive+0x384>)
 800e410:	4013      	ands	r3, r2
 800e412:	8879      	ldrh	r1, [r7, #2]
 800e414:	68fa      	ldr	r2, [r7, #12]
 800e416:	6812      	ldr	r2, [r2, #0]
 800e418:	430b      	orrs	r3, r1
 800e41a:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	681a      	ldr	r2, [r3, #0]
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	f042 0201 	orr.w	r2, r2, #1
 800e42a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	685b      	ldr	r3, [r3, #4]
 800e430:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e434:	d107      	bne.n	800e446 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	681a      	ldr	r2, [r3, #0]
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e444:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	68db      	ldr	r3, [r3, #12]
 800e44a:	2b0f      	cmp	r3, #15
 800e44c:	d970      	bls.n	800e530 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e44e:	e068      	b.n	800e522 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	695b      	ldr	r3, [r3, #20]
 800e456:	f003 0302 	and.w	r3, r3, #2
 800e45a:	2b02      	cmp	r3, #2
 800e45c:	d11a      	bne.n	800e494 <HAL_SPI_TransmitReceive+0x18c>
 800e45e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e460:	2b00      	cmp	r3, #0
 800e462:	d017      	beq.n	800e494 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	6812      	ldr	r2, [r2, #0]
 800e46e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e474:	1d1a      	adds	r2, r3, #4
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e480:	b29b      	uxth	r3, r3
 800e482:	3b01      	subs	r3, #1
 800e484:	b29a      	uxth	r2, r3
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e492:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	695a      	ldr	r2, [r3, #20]
 800e49a:	f248 0308 	movw	r3, #32776	; 0x8008
 800e49e:	4013      	ands	r3, r2
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d01a      	beq.n	800e4da <HAL_SPI_TransmitReceive+0x1d2>
 800e4a4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d017      	beq.n	800e4da <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	681a      	ldr	r2, [r3, #0]
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e4b2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e4b4:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e4ba:	1d1a      	adds	r2, r3, #4
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e4c6:	b29b      	uxth	r3, r3
 800e4c8:	3b01      	subs	r3, #1
 800e4ca:	b29a      	uxth	r2, r3
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e4d8:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e4da:	f7f5 f853 	bl	8003584 <HAL_GetTick>
 800e4de:	4602      	mov	r2, r0
 800e4e0:	69fb      	ldr	r3, [r7, #28]
 800e4e2:	1ad3      	subs	r3, r2, r3
 800e4e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e4e6:	429a      	cmp	r2, r3
 800e4e8:	d803      	bhi.n	800e4f2 <HAL_SPI_TransmitReceive+0x1ea>
 800e4ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4f0:	d102      	bne.n	800e4f8 <HAL_SPI_TransmitReceive+0x1f0>
 800e4f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d114      	bne.n	800e522 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800e4f8:	68f8      	ldr	r0, [r7, #12]
 800e4fa:	f000 f9f1 	bl	800e8e0 <SPI_CloseTransfer>
      
        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	2200      	movs	r2, #0
 800e502:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e50c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	2201      	movs	r2, #1
 800e51a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800e51e:	2301      	movs	r3, #1
 800e520:	e1da      	b.n	800e8d8 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e522:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e524:	2b00      	cmp	r3, #0
 800e526:	d193      	bne.n	800e450 <HAL_SPI_TransmitReceive+0x148>
 800e528:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d190      	bne.n	800e450 <HAL_SPI_TransmitReceive+0x148>
 800e52e:	e1ac      	b.n	800e88a <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	68db      	ldr	r3, [r3, #12]
 800e534:	2b07      	cmp	r3, #7
 800e536:	f240 81a0 	bls.w	800e87a <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e53a:	e0a9      	b.n	800e690 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	695b      	ldr	r3, [r3, #20]
 800e542:	f003 0302 	and.w	r3, r3, #2
 800e546:	2b02      	cmp	r3, #2
 800e548:	d139      	bne.n	800e5be <HAL_SPI_TransmitReceive+0x2b6>
 800e54a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d036      	beq.n	800e5be <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800e550:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e552:	2b01      	cmp	r3, #1
 800e554:	d91c      	bls.n	800e590 <HAL_SPI_TransmitReceive+0x288>
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d018      	beq.n	800e590 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	6812      	ldr	r2, [r2, #0]
 800e568:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e56e:	1d1a      	adds	r2, r3, #4
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e57a:	b29b      	uxth	r3, r3
 800e57c:	3b02      	subs	r3, #2
 800e57e:	b29a      	uxth	r2, r3
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e58c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800e58e:	e016      	b.n	800e5be <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e594:	881a      	ldrh	r2, [r3, #0]
 800e596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e598:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e59e:	1c9a      	adds	r2, r3, #2
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e5aa:	b29b      	uxth	r3, r3
 800e5ac:	3b01      	subs	r3, #1
 800e5ae:	b29a      	uxth	r2, r3
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e5bc:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	695b      	ldr	r3, [r3, #20]
 800e5c4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d03a      	beq.n	800e642 <HAL_SPI_TransmitReceive+0x33a>
 800e5cc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d037      	beq.n	800e642 <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	695b      	ldr	r3, [r3, #20]
 800e5d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d018      	beq.n	800e612 <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	681a      	ldr	r2, [r3, #0]
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e5e8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e5ea:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e5f0:	1d1a      	adds	r2, r3, #4
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e5fc:	b29b      	uxth	r3, r3
 800e5fe:	3b02      	subs	r3, #2
 800e600:	b29a      	uxth	r2, r3
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e60e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800e610:	e017      	b.n	800e642 <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e616:	6a3a      	ldr	r2, [r7, #32]
 800e618:	8812      	ldrh	r2, [r2, #0]
 800e61a:	b292      	uxth	r2, r2
 800e61c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e622:	1c9a      	adds	r2, r3, #2
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e62e:	b29b      	uxth	r3, r3
 800e630:	3b01      	subs	r3, #1
 800e632:	b29a      	uxth	r2, r3
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e640:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e642:	f7f4 ff9f 	bl	8003584 <HAL_GetTick>
 800e646:	4602      	mov	r2, r0
 800e648:	69fb      	ldr	r3, [r7, #28]
 800e64a:	1ad3      	subs	r3, r2, r3
 800e64c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e64e:	429a      	cmp	r2, r3
 800e650:	d803      	bhi.n	800e65a <HAL_SPI_TransmitReceive+0x352>
 800e652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e654:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e658:	d102      	bne.n	800e660 <HAL_SPI_TransmitReceive+0x358>
 800e65a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d117      	bne.n	800e690 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800e660:	68f8      	ldr	r0, [r7, #12]
 800e662:	f000 f93d 	bl	800e8e0 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	2200      	movs	r2, #0
 800e66a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e674:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	2201      	movs	r2, #1
 800e682:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800e686:	2301      	movs	r3, #1
 800e688:	e126      	b.n	800e8d8 <HAL_SPI_TransmitReceive+0x5d0>
 800e68a:	bf00      	nop
 800e68c:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e690:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e692:	2b00      	cmp	r3, #0
 800e694:	f47f af52 	bne.w	800e53c <HAL_SPI_TransmitReceive+0x234>
 800e698:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	f47f af4e 	bne.w	800e53c <HAL_SPI_TransmitReceive+0x234>
 800e6a0:	e0f3      	b.n	800e88a <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	695b      	ldr	r3, [r3, #20]
 800e6a8:	f003 0302 	and.w	r3, r3, #2
 800e6ac:	2b02      	cmp	r3, #2
 800e6ae:	d15a      	bne.n	800e766 <HAL_SPI_TransmitReceive+0x45e>
 800e6b0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d057      	beq.n	800e766 <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800e6b6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e6b8:	2b03      	cmp	r3, #3
 800e6ba:	d91c      	bls.n	800e6f6 <HAL_SPI_TransmitReceive+0x3ee>
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6c0:	2b40      	cmp	r3, #64	; 0x40
 800e6c2:	d918      	bls.n	800e6f6 <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	6812      	ldr	r2, [r2, #0]
 800e6ce:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e6d4:	1d1a      	adds	r2, r3, #4
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e6e0:	b29b      	uxth	r3, r3
 800e6e2:	3b04      	subs	r3, #4
 800e6e4:	b29a      	uxth	r2, r3
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e6f2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800e6f4:	e037      	b.n	800e766 <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800e6f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e6f8:	2b01      	cmp	r3, #1
 800e6fa:	d91b      	bls.n	800e734 <HAL_SPI_TransmitReceive+0x42c>
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e700:	2b00      	cmp	r3, #0
 800e702:	d017      	beq.n	800e734 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e708:	881a      	ldrh	r2, [r3, #0]
 800e70a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e70c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e712:	1c9a      	adds	r2, r3, #2
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e71e:	b29b      	uxth	r3, r3
 800e720:	3b02      	subs	r3, #2
 800e722:	b29a      	uxth	r2, r3
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e730:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800e732:	e018      	b.n	800e766 <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	3320      	adds	r3, #32
 800e73e:	7812      	ldrb	r2, [r2, #0]
 800e740:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e746:	1c5a      	adds	r2, r3, #1
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e752:	b29b      	uxth	r3, r3
 800e754:	3b01      	subs	r3, #1
 800e756:	b29a      	uxth	r2, r3
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e764:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	695b      	ldr	r3, [r3, #20]
 800e76c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e770:	2b00      	cmp	r3, #0
 800e772:	d05e      	beq.n	800e832 <HAL_SPI_TransmitReceive+0x52a>
 800e774:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e776:	2b00      	cmp	r3, #0
 800e778:	d05b      	beq.n	800e832 <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	695b      	ldr	r3, [r3, #20]
 800e780:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e784:	2b00      	cmp	r3, #0
 800e786:	d018      	beq.n	800e7ba <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	681a      	ldr	r2, [r3, #0]
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e790:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e792:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e798:	1d1a      	adds	r2, r3, #4
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e7a4:	b29b      	uxth	r3, r3
 800e7a6:	3b04      	subs	r3, #4
 800e7a8:	b29a      	uxth	r2, r3
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e7b6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800e7b8:	e03b      	b.n	800e832 <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	695b      	ldr	r3, [r3, #20]
 800e7c0:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800e7c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e7c8:	d918      	bls.n	800e7fc <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e7ce:	6a3a      	ldr	r2, [r7, #32]
 800e7d0:	8812      	ldrh	r2, [r2, #0]
 800e7d2:	b292      	uxth	r2, r2
 800e7d4:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e7da:	1c9a      	adds	r2, r3, #2
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e7e6:	b29b      	uxth	r3, r3
 800e7e8:	3b02      	subs	r3, #2
 800e7ea:	b29a      	uxth	r2, r3
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e7f8:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800e7fa:	e01a      	b.n	800e832 <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e808:	7812      	ldrb	r2, [r2, #0]
 800e80a:	b2d2      	uxtb	r2, r2
 800e80c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e812:	1c5a      	adds	r2, r3, #1
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e81e:	b29b      	uxth	r3, r3
 800e820:	3b01      	subs	r3, #1
 800e822:	b29a      	uxth	r2, r3
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e830:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e832:	f7f4 fea7 	bl	8003584 <HAL_GetTick>
 800e836:	4602      	mov	r2, r0
 800e838:	69fb      	ldr	r3, [r7, #28]
 800e83a:	1ad3      	subs	r3, r2, r3
 800e83c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e83e:	429a      	cmp	r2, r3
 800e840:	d803      	bhi.n	800e84a <HAL_SPI_TransmitReceive+0x542>
 800e842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e844:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e848:	d102      	bne.n	800e850 <HAL_SPI_TransmitReceive+0x548>
 800e84a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d114      	bne.n	800e87a <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800e850:	68f8      	ldr	r0, [r7, #12]
 800e852:	f000 f845 	bl	800e8e0 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	2200      	movs	r2, #0
 800e85a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e864:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	2201      	movs	r2, #1
 800e872:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800e876:	2301      	movs	r3, #1
 800e878:	e02e      	b.n	800e8d8 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e87a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	f47f af10 	bne.w	800e6a2 <HAL_SPI_TransmitReceive+0x39a>
 800e882:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e884:	2b00      	cmp	r3, #0
 800e886:	f47f af0c 	bne.w	800e6a2 <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800e88a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e88c:	9300      	str	r3, [sp, #0]
 800e88e:	69fb      	ldr	r3, [r7, #28]
 800e890:	2200      	movs	r2, #0
 800e892:	2108      	movs	r1, #8
 800e894:	68f8      	ldr	r0, [r7, #12]
 800e896:	f000 f8c3 	bl	800ea20 <SPI_WaitOnFlagUntilTimeout>
 800e89a:	4603      	mov	r3, r0
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d007      	beq.n	800e8b0 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e8a6:	f043 0220 	orr.w	r2, r3, #32
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800e8b0:	68f8      	ldr	r0, [r7, #12]
 800e8b2:	f000 f815 	bl	800e8e0 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	2200      	movs	r2, #0
 800e8ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	2201      	movs	r2, #1
 800e8c2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d001      	beq.n	800e8d4 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 800e8d0:	2301      	movs	r3, #1
 800e8d2:	e001      	b.n	800e8d8 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 800e8d4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800e8d8:	4618      	mov	r0, r3
 800e8da:	3730      	adds	r7, #48	; 0x30
 800e8dc:	46bd      	mov	sp, r7
 800e8de:	bd80      	pop	{r7, pc}

0800e8e0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800e8e0:	b480      	push	{r7}
 800e8e2:	b085      	sub	sp, #20
 800e8e4:	af00      	add	r7, sp, #0
 800e8e6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	695b      	ldr	r3, [r3, #20]
 800e8ee:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	699a      	ldr	r2, [r3, #24]
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	f042 0208 	orr.w	r2, r2, #8
 800e8fe:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	699a      	ldr	r2, [r3, #24]
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	f042 0210 	orr.w	r2, r2, #16
 800e90e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	681a      	ldr	r2, [r3, #0]
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	f022 0201 	bic.w	r2, r2, #1
 800e91e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	6919      	ldr	r1, [r3, #16]
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	681a      	ldr	r2, [r3, #0]
 800e92a:	4b3c      	ldr	r3, [pc, #240]	; (800ea1c <SPI_CloseTransfer+0x13c>)
 800e92c:	400b      	ands	r3, r1
 800e92e:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	689a      	ldr	r2, [r3, #8]
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800e93e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e946:	b2db      	uxtb	r3, r3
 800e948:	2b04      	cmp	r3, #4
 800e94a:	d014      	beq.n	800e976 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	f003 0320 	and.w	r3, r3, #32
 800e952:	2b00      	cmp	r3, #0
 800e954:	d00f      	beq.n	800e976 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e95c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	699a      	ldr	r2, [r3, #24]
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	f042 0220 	orr.w	r2, r2, #32
 800e974:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e97c:	b2db      	uxtb	r3, r3
 800e97e:	2b03      	cmp	r3, #3
 800e980:	d014      	beq.n	800e9ac <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d00f      	beq.n	800e9ac <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e992:	f043 0204 	orr.w	r2, r3, #4
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	699a      	ldr	r2, [r3, #24]
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e9aa:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d00f      	beq.n	800e9d6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e9bc:	f043 0201 	orr.w	r2, r3, #1
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	699a      	ldr	r2, [r3, #24]
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e9d4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d00f      	beq.n	800ea00 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e9e6:	f043 0208 	orr.w	r2, r3, #8
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	699a      	ldr	r2, [r3, #24]
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e9fe:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	2200      	movs	r2, #0
 800ea04:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	2200      	movs	r2, #0
 800ea0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800ea10:	bf00      	nop
 800ea12:	3714      	adds	r7, #20
 800ea14:	46bd      	mov	sp, r7
 800ea16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea1a:	4770      	bx	lr
 800ea1c:	fffffc90 	.word	0xfffffc90

0800ea20 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800ea20:	b580      	push	{r7, lr}
 800ea22:	b084      	sub	sp, #16
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	60f8      	str	r0, [r7, #12]
 800ea28:	60b9      	str	r1, [r7, #8]
 800ea2a:	603b      	str	r3, [r7, #0]
 800ea2c:	4613      	mov	r3, r2
 800ea2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800ea30:	e010      	b.n	800ea54 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ea32:	f7f4 fda7 	bl	8003584 <HAL_GetTick>
 800ea36:	4602      	mov	r2, r0
 800ea38:	683b      	ldr	r3, [r7, #0]
 800ea3a:	1ad3      	subs	r3, r2, r3
 800ea3c:	69ba      	ldr	r2, [r7, #24]
 800ea3e:	429a      	cmp	r2, r3
 800ea40:	d803      	bhi.n	800ea4a <SPI_WaitOnFlagUntilTimeout+0x2a>
 800ea42:	69bb      	ldr	r3, [r7, #24]
 800ea44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea48:	d102      	bne.n	800ea50 <SPI_WaitOnFlagUntilTimeout+0x30>
 800ea4a:	69bb      	ldr	r3, [r7, #24]
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d101      	bne.n	800ea54 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800ea50:	2303      	movs	r3, #3
 800ea52:	e00f      	b.n	800ea74 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	695a      	ldr	r2, [r3, #20]
 800ea5a:	68bb      	ldr	r3, [r7, #8]
 800ea5c:	4013      	ands	r3, r2
 800ea5e:	68ba      	ldr	r2, [r7, #8]
 800ea60:	429a      	cmp	r2, r3
 800ea62:	bf0c      	ite	eq
 800ea64:	2301      	moveq	r3, #1
 800ea66:	2300      	movne	r3, #0
 800ea68:	b2db      	uxtb	r3, r3
 800ea6a:	461a      	mov	r2, r3
 800ea6c:	79fb      	ldrb	r3, [r7, #7]
 800ea6e:	429a      	cmp	r2, r3
 800ea70:	d0df      	beq.n	800ea32 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800ea72:	2300      	movs	r3, #0
}
 800ea74:	4618      	mov	r0, r3
 800ea76:	3710      	adds	r7, #16
 800ea78:	46bd      	mov	sp, r7
 800ea7a:	bd80      	pop	{r7, pc}

0800ea7c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800ea7c:	b480      	push	{r7}
 800ea7e:	b085      	sub	sp, #20
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea88:	095b      	lsrs	r3, r3, #5
 800ea8a:	3301      	adds	r3, #1
 800ea8c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	68db      	ldr	r3, [r3, #12]
 800ea92:	3301      	adds	r3, #1
 800ea94:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800ea96:	68bb      	ldr	r3, [r7, #8]
 800ea98:	3307      	adds	r3, #7
 800ea9a:	08db      	lsrs	r3, r3, #3
 800ea9c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800ea9e:	68bb      	ldr	r3, [r7, #8]
 800eaa0:	68fa      	ldr	r2, [r7, #12]
 800eaa2:	fb02 f303 	mul.w	r3, r2, r3
}
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	3714      	adds	r7, #20
 800eaaa:	46bd      	mov	sp, r7
 800eaac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab0:	4770      	bx	lr

0800eab2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800eab2:	b580      	push	{r7, lr}
 800eab4:	b082      	sub	sp, #8
 800eab6:	af00      	add	r7, sp, #0
 800eab8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d101      	bne.n	800eac4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800eac0:	2301      	movs	r3, #1
 800eac2:	e042      	b.n	800eb4a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d106      	bne.n	800eadc <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	2200      	movs	r2, #0
 800ead2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ead6:	6878      	ldr	r0, [r7, #4]
 800ead8:	f7f4 fa70 	bl	8002fbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	2224      	movs	r2, #36	; 0x24
 800eae0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	681a      	ldr	r2, [r3, #0]
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	f022 0201 	bic.w	r2, r2, #1
 800eaf2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800eaf4:	6878      	ldr	r0, [r7, #4]
 800eaf6:	f000 f95f 	bl	800edb8 <UART_SetConfig>
 800eafa:	4603      	mov	r3, r0
 800eafc:	2b01      	cmp	r3, #1
 800eafe:	d101      	bne.n	800eb04 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800eb00:	2301      	movs	r3, #1
 800eb02:	e022      	b.n	800eb4a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d002      	beq.n	800eb12 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800eb0c:	6878      	ldr	r0, [r7, #4]
 800eb0e:	f000 ff03 	bl	800f918 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	685a      	ldr	r2, [r3, #4]
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800eb20:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	689a      	ldr	r2, [r3, #8]
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800eb30:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	681a      	ldr	r2, [r3, #0]
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	f042 0201 	orr.w	r2, r2, #1
 800eb40:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800eb42:	6878      	ldr	r0, [r7, #4]
 800eb44:	f000 ff8a 	bl	800fa5c <UART_CheckIdleState>
 800eb48:	4603      	mov	r3, r0
}
 800eb4a:	4618      	mov	r0, r3
 800eb4c:	3708      	adds	r7, #8
 800eb4e:	46bd      	mov	sp, r7
 800eb50:	bd80      	pop	{r7, pc}

0800eb52 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800eb52:	b580      	push	{r7, lr}
 800eb54:	b08a      	sub	sp, #40	; 0x28
 800eb56:	af02      	add	r7, sp, #8
 800eb58:	60f8      	str	r0, [r7, #12]
 800eb5a:	60b9      	str	r1, [r7, #8]
 800eb5c:	603b      	str	r3, [r7, #0]
 800eb5e:	4613      	mov	r3, r2
 800eb60:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eb68:	2b20      	cmp	r3, #32
 800eb6a:	f040 8083 	bne.w	800ec74 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800eb6e:	68bb      	ldr	r3, [r7, #8]
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d002      	beq.n	800eb7a <HAL_UART_Transmit+0x28>
 800eb74:	88fb      	ldrh	r3, [r7, #6]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d101      	bne.n	800eb7e <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800eb7a:	2301      	movs	r3, #1
 800eb7c:	e07b      	b.n	800ec76 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800eb84:	2b01      	cmp	r3, #1
 800eb86:	d101      	bne.n	800eb8c <HAL_UART_Transmit+0x3a>
 800eb88:	2302      	movs	r3, #2
 800eb8a:	e074      	b.n	800ec76 <HAL_UART_Transmit+0x124>
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	2201      	movs	r2, #1
 800eb90:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	2200      	movs	r2, #0
 800eb98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	2221      	movs	r2, #33	; 0x21
 800eba0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800eba4:	f7f4 fcee 	bl	8003584 <HAL_GetTick>
 800eba8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	88fa      	ldrh	r2, [r7, #6]
 800ebae:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	88fa      	ldrh	r2, [r7, #6]
 800ebb6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	689b      	ldr	r3, [r3, #8]
 800ebbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ebc2:	d108      	bne.n	800ebd6 <HAL_UART_Transmit+0x84>
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	691b      	ldr	r3, [r3, #16]
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d104      	bne.n	800ebd6 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800ebcc:	2300      	movs	r3, #0
 800ebce:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800ebd0:	68bb      	ldr	r3, [r7, #8]
 800ebd2:	61bb      	str	r3, [r7, #24]
 800ebd4:	e003      	b.n	800ebde <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800ebd6:	68bb      	ldr	r3, [r7, #8]
 800ebd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ebda:	2300      	movs	r3, #0
 800ebdc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	2200      	movs	r2, #0
 800ebe2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 800ebe6:	e02c      	b.n	800ec42 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ebe8:	683b      	ldr	r3, [r7, #0]
 800ebea:	9300      	str	r3, [sp, #0]
 800ebec:	697b      	ldr	r3, [r7, #20]
 800ebee:	2200      	movs	r2, #0
 800ebf0:	2180      	movs	r1, #128	; 0x80
 800ebf2:	68f8      	ldr	r0, [r7, #12]
 800ebf4:	f000 ff7a 	bl	800faec <UART_WaitOnFlagUntilTimeout>
 800ebf8:	4603      	mov	r3, r0
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d001      	beq.n	800ec02 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800ebfe:	2303      	movs	r3, #3
 800ec00:	e039      	b.n	800ec76 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800ec02:	69fb      	ldr	r3, [r7, #28]
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d10b      	bne.n	800ec20 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ec08:	69bb      	ldr	r3, [r7, #24]
 800ec0a:	881b      	ldrh	r3, [r3, #0]
 800ec0c:	461a      	mov	r2, r3
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ec16:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ec18:	69bb      	ldr	r3, [r7, #24]
 800ec1a:	3302      	adds	r3, #2
 800ec1c:	61bb      	str	r3, [r7, #24]
 800ec1e:	e007      	b.n	800ec30 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ec20:	69fb      	ldr	r3, [r7, #28]
 800ec22:	781a      	ldrb	r2, [r3, #0]
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800ec2a:	69fb      	ldr	r3, [r7, #28]
 800ec2c:	3301      	adds	r3, #1
 800ec2e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ec36:	b29b      	uxth	r3, r3
 800ec38:	3b01      	subs	r3, #1
 800ec3a:	b29a      	uxth	r2, r3
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ec48:	b29b      	uxth	r3, r3
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d1cc      	bne.n	800ebe8 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ec4e:	683b      	ldr	r3, [r7, #0]
 800ec50:	9300      	str	r3, [sp, #0]
 800ec52:	697b      	ldr	r3, [r7, #20]
 800ec54:	2200      	movs	r2, #0
 800ec56:	2140      	movs	r1, #64	; 0x40
 800ec58:	68f8      	ldr	r0, [r7, #12]
 800ec5a:	f000 ff47 	bl	800faec <UART_WaitOnFlagUntilTimeout>
 800ec5e:	4603      	mov	r3, r0
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d001      	beq.n	800ec68 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800ec64:	2303      	movs	r3, #3
 800ec66:	e006      	b.n	800ec76 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	2220      	movs	r2, #32
 800ec6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800ec70:	2300      	movs	r3, #0
 800ec72:	e000      	b.n	800ec76 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800ec74:	2302      	movs	r3, #2
  }
}
 800ec76:	4618      	mov	r0, r3
 800ec78:	3720      	adds	r7, #32
 800ec7a:	46bd      	mov	sp, r7
 800ec7c:	bd80      	pop	{r7, pc}
	...

0800ec80 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ec80:	b580      	push	{r7, lr}
 800ec82:	b084      	sub	sp, #16
 800ec84:	af00      	add	r7, sp, #0
 800ec86:	60f8      	str	r0, [r7, #12]
 800ec88:	60b9      	str	r1, [r7, #8]
 800ec8a:	4613      	mov	r3, r2
 800ec8c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ec94:	2b20      	cmp	r3, #32
 800ec96:	d170      	bne.n	800ed7a <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 800ec98:	68bb      	ldr	r3, [r7, #8]
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d002      	beq.n	800eca4 <HAL_UART_Receive_DMA+0x24>
 800ec9e:	88fb      	ldrh	r3, [r7, #6]
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d101      	bne.n	800eca8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800eca4:	2301      	movs	r3, #1
 800eca6:	e069      	b.n	800ed7c <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ecae:	2b01      	cmp	r3, #1
 800ecb0:	d101      	bne.n	800ecb6 <HAL_UART_Receive_DMA+0x36>
 800ecb2:	2302      	movs	r3, #2
 800ecb4:	e062      	b.n	800ed7c <HAL_UART_Receive_DMA+0xfc>
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	2201      	movs	r2, #1
 800ecba:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	68ba      	ldr	r2, [r7, #8]
 800ecc2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	88fa      	ldrh	r2, [r7, #6]
 800ecc8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	2200      	movs	r2, #0
 800ecd0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	2222      	movs	r2, #34	; 0x22
 800ecd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d02c      	beq.n	800ed3e <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ece8:	4a26      	ldr	r2, [pc, #152]	; (800ed84 <HAL_UART_Receive_DMA+0x104>)
 800ecea:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ecf0:	4a25      	ldr	r2, [pc, #148]	; (800ed88 <HAL_UART_Receive_DMA+0x108>)
 800ecf2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ecf8:	4a24      	ldr	r2, [pc, #144]	; (800ed8c <HAL_UART_Receive_DMA+0x10c>)
 800ecfa:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ed00:	2200      	movs	r2, #0
 800ed02:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	3324      	adds	r3, #36	; 0x24
 800ed0e:	4619      	mov	r1, r3
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ed14:	461a      	mov	r2, r3
 800ed16:	88fb      	ldrh	r3, [r7, #6]
 800ed18:	f7f5 f8da 	bl	8003ed0 <HAL_DMA_Start_IT>
 800ed1c:	4603      	mov	r3, r0
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d00d      	beq.n	800ed3e <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	2210      	movs	r2, #16
 800ed26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	2200      	movs	r2, #0
 800ed2e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	2220      	movs	r2, #32
 800ed36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 800ed3a:	2301      	movs	r3, #1
 800ed3c:	e01e      	b.n	800ed7c <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	2200      	movs	r2, #0
 800ed42:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	681a      	ldr	r2, [r3, #0]
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ed54:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	689a      	ldr	r2, [r3, #8]
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	f042 0201 	orr.w	r2, r2, #1
 800ed64:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	689a      	ldr	r2, [r3, #8]
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ed74:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800ed76:	2300      	movs	r3, #0
 800ed78:	e000      	b.n	800ed7c <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 800ed7a:	2302      	movs	r3, #2
  }
}
 800ed7c:	4618      	mov	r0, r3
 800ed7e:	3710      	adds	r7, #16
 800ed80:	46bd      	mov	sp, r7
 800ed82:	bd80      	pop	{r7, pc}
 800ed84:	0800fc71 	.word	0x0800fc71
 800ed88:	0800fcd7 	.word	0x0800fcd7
 800ed8c:	0800fcf3 	.word	0x0800fcf3

0800ed90 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ed90:	b480      	push	{r7}
 800ed92:	b083      	sub	sp, #12
 800ed94:	af00      	add	r7, sp, #0
 800ed96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800ed98:	bf00      	nop
 800ed9a:	370c      	adds	r7, #12
 800ed9c:	46bd      	mov	sp, r7
 800ed9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eda2:	4770      	bx	lr

0800eda4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800eda4:	b480      	push	{r7}
 800eda6:	b083      	sub	sp, #12
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800edac:	bf00      	nop
 800edae:	370c      	adds	r7, #12
 800edb0:	46bd      	mov	sp, r7
 800edb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb6:	4770      	bx	lr

0800edb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800edb8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800edbc:	b08e      	sub	sp, #56	; 0x38
 800edbe:	af00      	add	r7, sp, #0
 800edc0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800edc2:	2300      	movs	r3, #0
 800edc4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	689a      	ldr	r2, [r3, #8]
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	691b      	ldr	r3, [r3, #16]
 800edd0:	431a      	orrs	r2, r3
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	695b      	ldr	r3, [r3, #20]
 800edd6:	431a      	orrs	r2, r3
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	69db      	ldr	r3, [r3, #28]
 800eddc:	4313      	orrs	r3, r2
 800edde:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ede4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ede6:	4313      	orrs	r3, r2
 800ede8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	681a      	ldr	r2, [r3, #0]
 800edf0:	4bc1      	ldr	r3, [pc, #772]	; (800f0f8 <UART_SetConfig+0x340>)
 800edf2:	4013      	ands	r3, r2
 800edf4:	687a      	ldr	r2, [r7, #4]
 800edf6:	6812      	ldr	r2, [r2, #0]
 800edf8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800edfa:	430b      	orrs	r3, r1
 800edfc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	685b      	ldr	r3, [r3, #4]
 800ee04:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	68da      	ldr	r2, [r3, #12]
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	430a      	orrs	r2, r1
 800ee12:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	699b      	ldr	r3, [r3, #24]
 800ee18:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	4ab7      	ldr	r2, [pc, #732]	; (800f0fc <UART_SetConfig+0x344>)
 800ee20:	4293      	cmp	r3, r2
 800ee22:	d004      	beq.n	800ee2e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	6a1b      	ldr	r3, [r3, #32]
 800ee28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ee2a:	4313      	orrs	r3, r2
 800ee2c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	689a      	ldr	r2, [r3, #8]
 800ee34:	4bb2      	ldr	r3, [pc, #712]	; (800f100 <UART_SetConfig+0x348>)
 800ee36:	4013      	ands	r3, r2
 800ee38:	687a      	ldr	r2, [r7, #4]
 800ee3a:	6812      	ldr	r2, [r2, #0]
 800ee3c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ee3e:	430b      	orrs	r3, r1
 800ee40:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee48:	f023 010f 	bic.w	r1, r3, #15
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	430a      	orrs	r2, r1
 800ee56:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	4aa9      	ldr	r2, [pc, #676]	; (800f104 <UART_SetConfig+0x34c>)
 800ee5e:	4293      	cmp	r3, r2
 800ee60:	d177      	bne.n	800ef52 <UART_SetConfig+0x19a>
 800ee62:	4ba9      	ldr	r3, [pc, #676]	; (800f108 <UART_SetConfig+0x350>)
 800ee64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ee6a:	2b28      	cmp	r3, #40	; 0x28
 800ee6c:	d86c      	bhi.n	800ef48 <UART_SetConfig+0x190>
 800ee6e:	a201      	add	r2, pc, #4	; (adr r2, 800ee74 <UART_SetConfig+0xbc>)
 800ee70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee74:	0800ef19 	.word	0x0800ef19
 800ee78:	0800ef49 	.word	0x0800ef49
 800ee7c:	0800ef49 	.word	0x0800ef49
 800ee80:	0800ef49 	.word	0x0800ef49
 800ee84:	0800ef49 	.word	0x0800ef49
 800ee88:	0800ef49 	.word	0x0800ef49
 800ee8c:	0800ef49 	.word	0x0800ef49
 800ee90:	0800ef49 	.word	0x0800ef49
 800ee94:	0800ef21 	.word	0x0800ef21
 800ee98:	0800ef49 	.word	0x0800ef49
 800ee9c:	0800ef49 	.word	0x0800ef49
 800eea0:	0800ef49 	.word	0x0800ef49
 800eea4:	0800ef49 	.word	0x0800ef49
 800eea8:	0800ef49 	.word	0x0800ef49
 800eeac:	0800ef49 	.word	0x0800ef49
 800eeb0:	0800ef49 	.word	0x0800ef49
 800eeb4:	0800ef29 	.word	0x0800ef29
 800eeb8:	0800ef49 	.word	0x0800ef49
 800eebc:	0800ef49 	.word	0x0800ef49
 800eec0:	0800ef49 	.word	0x0800ef49
 800eec4:	0800ef49 	.word	0x0800ef49
 800eec8:	0800ef49 	.word	0x0800ef49
 800eecc:	0800ef49 	.word	0x0800ef49
 800eed0:	0800ef49 	.word	0x0800ef49
 800eed4:	0800ef31 	.word	0x0800ef31
 800eed8:	0800ef49 	.word	0x0800ef49
 800eedc:	0800ef49 	.word	0x0800ef49
 800eee0:	0800ef49 	.word	0x0800ef49
 800eee4:	0800ef49 	.word	0x0800ef49
 800eee8:	0800ef49 	.word	0x0800ef49
 800eeec:	0800ef49 	.word	0x0800ef49
 800eef0:	0800ef49 	.word	0x0800ef49
 800eef4:	0800ef39 	.word	0x0800ef39
 800eef8:	0800ef49 	.word	0x0800ef49
 800eefc:	0800ef49 	.word	0x0800ef49
 800ef00:	0800ef49 	.word	0x0800ef49
 800ef04:	0800ef49 	.word	0x0800ef49
 800ef08:	0800ef49 	.word	0x0800ef49
 800ef0c:	0800ef49 	.word	0x0800ef49
 800ef10:	0800ef49 	.word	0x0800ef49
 800ef14:	0800ef41 	.word	0x0800ef41
 800ef18:	2301      	movs	r3, #1
 800ef1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ef1e:	e233      	b.n	800f388 <UART_SetConfig+0x5d0>
 800ef20:	2304      	movs	r3, #4
 800ef22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ef26:	e22f      	b.n	800f388 <UART_SetConfig+0x5d0>
 800ef28:	2308      	movs	r3, #8
 800ef2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ef2e:	e22b      	b.n	800f388 <UART_SetConfig+0x5d0>
 800ef30:	2310      	movs	r3, #16
 800ef32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ef36:	e227      	b.n	800f388 <UART_SetConfig+0x5d0>
 800ef38:	2320      	movs	r3, #32
 800ef3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ef3e:	e223      	b.n	800f388 <UART_SetConfig+0x5d0>
 800ef40:	2340      	movs	r3, #64	; 0x40
 800ef42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ef46:	e21f      	b.n	800f388 <UART_SetConfig+0x5d0>
 800ef48:	2380      	movs	r3, #128	; 0x80
 800ef4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ef4e:	bf00      	nop
 800ef50:	e21a      	b.n	800f388 <UART_SetConfig+0x5d0>
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	4a6d      	ldr	r2, [pc, #436]	; (800f10c <UART_SetConfig+0x354>)
 800ef58:	4293      	cmp	r3, r2
 800ef5a:	d132      	bne.n	800efc2 <UART_SetConfig+0x20a>
 800ef5c:	4b6a      	ldr	r3, [pc, #424]	; (800f108 <UART_SetConfig+0x350>)
 800ef5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef60:	f003 0307 	and.w	r3, r3, #7
 800ef64:	2b05      	cmp	r3, #5
 800ef66:	d827      	bhi.n	800efb8 <UART_SetConfig+0x200>
 800ef68:	a201      	add	r2, pc, #4	; (adr r2, 800ef70 <UART_SetConfig+0x1b8>)
 800ef6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef6e:	bf00      	nop
 800ef70:	0800ef89 	.word	0x0800ef89
 800ef74:	0800ef91 	.word	0x0800ef91
 800ef78:	0800ef99 	.word	0x0800ef99
 800ef7c:	0800efa1 	.word	0x0800efa1
 800ef80:	0800efa9 	.word	0x0800efa9
 800ef84:	0800efb1 	.word	0x0800efb1
 800ef88:	2300      	movs	r3, #0
 800ef8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ef8e:	e1fb      	b.n	800f388 <UART_SetConfig+0x5d0>
 800ef90:	2304      	movs	r3, #4
 800ef92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ef96:	e1f7      	b.n	800f388 <UART_SetConfig+0x5d0>
 800ef98:	2308      	movs	r3, #8
 800ef9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ef9e:	e1f3      	b.n	800f388 <UART_SetConfig+0x5d0>
 800efa0:	2310      	movs	r3, #16
 800efa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800efa6:	e1ef      	b.n	800f388 <UART_SetConfig+0x5d0>
 800efa8:	2320      	movs	r3, #32
 800efaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800efae:	e1eb      	b.n	800f388 <UART_SetConfig+0x5d0>
 800efb0:	2340      	movs	r3, #64	; 0x40
 800efb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800efb6:	e1e7      	b.n	800f388 <UART_SetConfig+0x5d0>
 800efb8:	2380      	movs	r3, #128	; 0x80
 800efba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800efbe:	bf00      	nop
 800efc0:	e1e2      	b.n	800f388 <UART_SetConfig+0x5d0>
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	4a52      	ldr	r2, [pc, #328]	; (800f110 <UART_SetConfig+0x358>)
 800efc8:	4293      	cmp	r3, r2
 800efca:	d132      	bne.n	800f032 <UART_SetConfig+0x27a>
 800efcc:	4b4e      	ldr	r3, [pc, #312]	; (800f108 <UART_SetConfig+0x350>)
 800efce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800efd0:	f003 0307 	and.w	r3, r3, #7
 800efd4:	2b05      	cmp	r3, #5
 800efd6:	d827      	bhi.n	800f028 <UART_SetConfig+0x270>
 800efd8:	a201      	add	r2, pc, #4	; (adr r2, 800efe0 <UART_SetConfig+0x228>)
 800efda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efde:	bf00      	nop
 800efe0:	0800eff9 	.word	0x0800eff9
 800efe4:	0800f001 	.word	0x0800f001
 800efe8:	0800f009 	.word	0x0800f009
 800efec:	0800f011 	.word	0x0800f011
 800eff0:	0800f019 	.word	0x0800f019
 800eff4:	0800f021 	.word	0x0800f021
 800eff8:	2300      	movs	r3, #0
 800effa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800effe:	e1c3      	b.n	800f388 <UART_SetConfig+0x5d0>
 800f000:	2304      	movs	r3, #4
 800f002:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f006:	e1bf      	b.n	800f388 <UART_SetConfig+0x5d0>
 800f008:	2308      	movs	r3, #8
 800f00a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f00e:	e1bb      	b.n	800f388 <UART_SetConfig+0x5d0>
 800f010:	2310      	movs	r3, #16
 800f012:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f016:	e1b7      	b.n	800f388 <UART_SetConfig+0x5d0>
 800f018:	2320      	movs	r3, #32
 800f01a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f01e:	e1b3      	b.n	800f388 <UART_SetConfig+0x5d0>
 800f020:	2340      	movs	r3, #64	; 0x40
 800f022:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f026:	e1af      	b.n	800f388 <UART_SetConfig+0x5d0>
 800f028:	2380      	movs	r3, #128	; 0x80
 800f02a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f02e:	bf00      	nop
 800f030:	e1aa      	b.n	800f388 <UART_SetConfig+0x5d0>
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	4a37      	ldr	r2, [pc, #220]	; (800f114 <UART_SetConfig+0x35c>)
 800f038:	4293      	cmp	r3, r2
 800f03a:	d132      	bne.n	800f0a2 <UART_SetConfig+0x2ea>
 800f03c:	4b32      	ldr	r3, [pc, #200]	; (800f108 <UART_SetConfig+0x350>)
 800f03e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f040:	f003 0307 	and.w	r3, r3, #7
 800f044:	2b05      	cmp	r3, #5
 800f046:	d827      	bhi.n	800f098 <UART_SetConfig+0x2e0>
 800f048:	a201      	add	r2, pc, #4	; (adr r2, 800f050 <UART_SetConfig+0x298>)
 800f04a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f04e:	bf00      	nop
 800f050:	0800f069 	.word	0x0800f069
 800f054:	0800f071 	.word	0x0800f071
 800f058:	0800f079 	.word	0x0800f079
 800f05c:	0800f081 	.word	0x0800f081
 800f060:	0800f089 	.word	0x0800f089
 800f064:	0800f091 	.word	0x0800f091
 800f068:	2300      	movs	r3, #0
 800f06a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f06e:	e18b      	b.n	800f388 <UART_SetConfig+0x5d0>
 800f070:	2304      	movs	r3, #4
 800f072:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f076:	e187      	b.n	800f388 <UART_SetConfig+0x5d0>
 800f078:	2308      	movs	r3, #8
 800f07a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f07e:	e183      	b.n	800f388 <UART_SetConfig+0x5d0>
 800f080:	2310      	movs	r3, #16
 800f082:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f086:	e17f      	b.n	800f388 <UART_SetConfig+0x5d0>
 800f088:	2320      	movs	r3, #32
 800f08a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f08e:	e17b      	b.n	800f388 <UART_SetConfig+0x5d0>
 800f090:	2340      	movs	r3, #64	; 0x40
 800f092:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f096:	e177      	b.n	800f388 <UART_SetConfig+0x5d0>
 800f098:	2380      	movs	r3, #128	; 0x80
 800f09a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f09e:	bf00      	nop
 800f0a0:	e172      	b.n	800f388 <UART_SetConfig+0x5d0>
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	4a1c      	ldr	r2, [pc, #112]	; (800f118 <UART_SetConfig+0x360>)
 800f0a8:	4293      	cmp	r3, r2
 800f0aa:	d144      	bne.n	800f136 <UART_SetConfig+0x37e>
 800f0ac:	4b16      	ldr	r3, [pc, #88]	; (800f108 <UART_SetConfig+0x350>)
 800f0ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f0b0:	f003 0307 	and.w	r3, r3, #7
 800f0b4:	2b05      	cmp	r3, #5
 800f0b6:	d839      	bhi.n	800f12c <UART_SetConfig+0x374>
 800f0b8:	a201      	add	r2, pc, #4	; (adr r2, 800f0c0 <UART_SetConfig+0x308>)
 800f0ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0be:	bf00      	nop
 800f0c0:	0800f0d9 	.word	0x0800f0d9
 800f0c4:	0800f0e1 	.word	0x0800f0e1
 800f0c8:	0800f0e9 	.word	0x0800f0e9
 800f0cc:	0800f0f1 	.word	0x0800f0f1
 800f0d0:	0800f11d 	.word	0x0800f11d
 800f0d4:	0800f125 	.word	0x0800f125
 800f0d8:	2300      	movs	r3, #0
 800f0da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f0de:	e153      	b.n	800f388 <UART_SetConfig+0x5d0>
 800f0e0:	2304      	movs	r3, #4
 800f0e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f0e6:	e14f      	b.n	800f388 <UART_SetConfig+0x5d0>
 800f0e8:	2308      	movs	r3, #8
 800f0ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f0ee:	e14b      	b.n	800f388 <UART_SetConfig+0x5d0>
 800f0f0:	2310      	movs	r3, #16
 800f0f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f0f6:	e147      	b.n	800f388 <UART_SetConfig+0x5d0>
 800f0f8:	cfff69f3 	.word	0xcfff69f3
 800f0fc:	58000c00 	.word	0x58000c00
 800f100:	11fff4ff 	.word	0x11fff4ff
 800f104:	40011000 	.word	0x40011000
 800f108:	58024400 	.word	0x58024400
 800f10c:	40004400 	.word	0x40004400
 800f110:	40004800 	.word	0x40004800
 800f114:	40004c00 	.word	0x40004c00
 800f118:	40005000 	.word	0x40005000
 800f11c:	2320      	movs	r3, #32
 800f11e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f122:	e131      	b.n	800f388 <UART_SetConfig+0x5d0>
 800f124:	2340      	movs	r3, #64	; 0x40
 800f126:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f12a:	e12d      	b.n	800f388 <UART_SetConfig+0x5d0>
 800f12c:	2380      	movs	r3, #128	; 0x80
 800f12e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f132:	bf00      	nop
 800f134:	e128      	b.n	800f388 <UART_SetConfig+0x5d0>
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	4ab6      	ldr	r2, [pc, #728]	; (800f414 <UART_SetConfig+0x65c>)
 800f13c:	4293      	cmp	r3, r2
 800f13e:	d178      	bne.n	800f232 <UART_SetConfig+0x47a>
 800f140:	4bb5      	ldr	r3, [pc, #724]	; (800f418 <UART_SetConfig+0x660>)
 800f142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f144:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f148:	2b28      	cmp	r3, #40	; 0x28
 800f14a:	d86d      	bhi.n	800f228 <UART_SetConfig+0x470>
 800f14c:	a201      	add	r2, pc, #4	; (adr r2, 800f154 <UART_SetConfig+0x39c>)
 800f14e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f152:	bf00      	nop
 800f154:	0800f1f9 	.word	0x0800f1f9
 800f158:	0800f229 	.word	0x0800f229
 800f15c:	0800f229 	.word	0x0800f229
 800f160:	0800f229 	.word	0x0800f229
 800f164:	0800f229 	.word	0x0800f229
 800f168:	0800f229 	.word	0x0800f229
 800f16c:	0800f229 	.word	0x0800f229
 800f170:	0800f229 	.word	0x0800f229
 800f174:	0800f201 	.word	0x0800f201
 800f178:	0800f229 	.word	0x0800f229
 800f17c:	0800f229 	.word	0x0800f229
 800f180:	0800f229 	.word	0x0800f229
 800f184:	0800f229 	.word	0x0800f229
 800f188:	0800f229 	.word	0x0800f229
 800f18c:	0800f229 	.word	0x0800f229
 800f190:	0800f229 	.word	0x0800f229
 800f194:	0800f209 	.word	0x0800f209
 800f198:	0800f229 	.word	0x0800f229
 800f19c:	0800f229 	.word	0x0800f229
 800f1a0:	0800f229 	.word	0x0800f229
 800f1a4:	0800f229 	.word	0x0800f229
 800f1a8:	0800f229 	.word	0x0800f229
 800f1ac:	0800f229 	.word	0x0800f229
 800f1b0:	0800f229 	.word	0x0800f229
 800f1b4:	0800f211 	.word	0x0800f211
 800f1b8:	0800f229 	.word	0x0800f229
 800f1bc:	0800f229 	.word	0x0800f229
 800f1c0:	0800f229 	.word	0x0800f229
 800f1c4:	0800f229 	.word	0x0800f229
 800f1c8:	0800f229 	.word	0x0800f229
 800f1cc:	0800f229 	.word	0x0800f229
 800f1d0:	0800f229 	.word	0x0800f229
 800f1d4:	0800f219 	.word	0x0800f219
 800f1d8:	0800f229 	.word	0x0800f229
 800f1dc:	0800f229 	.word	0x0800f229
 800f1e0:	0800f229 	.word	0x0800f229
 800f1e4:	0800f229 	.word	0x0800f229
 800f1e8:	0800f229 	.word	0x0800f229
 800f1ec:	0800f229 	.word	0x0800f229
 800f1f0:	0800f229 	.word	0x0800f229
 800f1f4:	0800f221 	.word	0x0800f221
 800f1f8:	2301      	movs	r3, #1
 800f1fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f1fe:	e0c3      	b.n	800f388 <UART_SetConfig+0x5d0>
 800f200:	2304      	movs	r3, #4
 800f202:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f206:	e0bf      	b.n	800f388 <UART_SetConfig+0x5d0>
 800f208:	2308      	movs	r3, #8
 800f20a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f20e:	e0bb      	b.n	800f388 <UART_SetConfig+0x5d0>
 800f210:	2310      	movs	r3, #16
 800f212:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f216:	e0b7      	b.n	800f388 <UART_SetConfig+0x5d0>
 800f218:	2320      	movs	r3, #32
 800f21a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f21e:	e0b3      	b.n	800f388 <UART_SetConfig+0x5d0>
 800f220:	2340      	movs	r3, #64	; 0x40
 800f222:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f226:	e0af      	b.n	800f388 <UART_SetConfig+0x5d0>
 800f228:	2380      	movs	r3, #128	; 0x80
 800f22a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f22e:	bf00      	nop
 800f230:	e0aa      	b.n	800f388 <UART_SetConfig+0x5d0>
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	4a79      	ldr	r2, [pc, #484]	; (800f41c <UART_SetConfig+0x664>)
 800f238:	4293      	cmp	r3, r2
 800f23a:	d132      	bne.n	800f2a2 <UART_SetConfig+0x4ea>
 800f23c:	4b76      	ldr	r3, [pc, #472]	; (800f418 <UART_SetConfig+0x660>)
 800f23e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f240:	f003 0307 	and.w	r3, r3, #7
 800f244:	2b05      	cmp	r3, #5
 800f246:	d827      	bhi.n	800f298 <UART_SetConfig+0x4e0>
 800f248:	a201      	add	r2, pc, #4	; (adr r2, 800f250 <UART_SetConfig+0x498>)
 800f24a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f24e:	bf00      	nop
 800f250:	0800f269 	.word	0x0800f269
 800f254:	0800f271 	.word	0x0800f271
 800f258:	0800f279 	.word	0x0800f279
 800f25c:	0800f281 	.word	0x0800f281
 800f260:	0800f289 	.word	0x0800f289
 800f264:	0800f291 	.word	0x0800f291
 800f268:	2300      	movs	r3, #0
 800f26a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f26e:	e08b      	b.n	800f388 <UART_SetConfig+0x5d0>
 800f270:	2304      	movs	r3, #4
 800f272:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f276:	e087      	b.n	800f388 <UART_SetConfig+0x5d0>
 800f278:	2308      	movs	r3, #8
 800f27a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f27e:	e083      	b.n	800f388 <UART_SetConfig+0x5d0>
 800f280:	2310      	movs	r3, #16
 800f282:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f286:	e07f      	b.n	800f388 <UART_SetConfig+0x5d0>
 800f288:	2320      	movs	r3, #32
 800f28a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f28e:	e07b      	b.n	800f388 <UART_SetConfig+0x5d0>
 800f290:	2340      	movs	r3, #64	; 0x40
 800f292:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f296:	e077      	b.n	800f388 <UART_SetConfig+0x5d0>
 800f298:	2380      	movs	r3, #128	; 0x80
 800f29a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f29e:	bf00      	nop
 800f2a0:	e072      	b.n	800f388 <UART_SetConfig+0x5d0>
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	4a5e      	ldr	r2, [pc, #376]	; (800f420 <UART_SetConfig+0x668>)
 800f2a8:	4293      	cmp	r3, r2
 800f2aa:	d132      	bne.n	800f312 <UART_SetConfig+0x55a>
 800f2ac:	4b5a      	ldr	r3, [pc, #360]	; (800f418 <UART_SetConfig+0x660>)
 800f2ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f2b0:	f003 0307 	and.w	r3, r3, #7
 800f2b4:	2b05      	cmp	r3, #5
 800f2b6:	d827      	bhi.n	800f308 <UART_SetConfig+0x550>
 800f2b8:	a201      	add	r2, pc, #4	; (adr r2, 800f2c0 <UART_SetConfig+0x508>)
 800f2ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2be:	bf00      	nop
 800f2c0:	0800f2d9 	.word	0x0800f2d9
 800f2c4:	0800f2e1 	.word	0x0800f2e1
 800f2c8:	0800f2e9 	.word	0x0800f2e9
 800f2cc:	0800f2f1 	.word	0x0800f2f1
 800f2d0:	0800f2f9 	.word	0x0800f2f9
 800f2d4:	0800f301 	.word	0x0800f301
 800f2d8:	2300      	movs	r3, #0
 800f2da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f2de:	e053      	b.n	800f388 <UART_SetConfig+0x5d0>
 800f2e0:	2304      	movs	r3, #4
 800f2e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f2e6:	e04f      	b.n	800f388 <UART_SetConfig+0x5d0>
 800f2e8:	2308      	movs	r3, #8
 800f2ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f2ee:	e04b      	b.n	800f388 <UART_SetConfig+0x5d0>
 800f2f0:	2310      	movs	r3, #16
 800f2f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f2f6:	e047      	b.n	800f388 <UART_SetConfig+0x5d0>
 800f2f8:	2320      	movs	r3, #32
 800f2fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f2fe:	e043      	b.n	800f388 <UART_SetConfig+0x5d0>
 800f300:	2340      	movs	r3, #64	; 0x40
 800f302:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f306:	e03f      	b.n	800f388 <UART_SetConfig+0x5d0>
 800f308:	2380      	movs	r3, #128	; 0x80
 800f30a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f30e:	bf00      	nop
 800f310:	e03a      	b.n	800f388 <UART_SetConfig+0x5d0>
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	4a43      	ldr	r2, [pc, #268]	; (800f424 <UART_SetConfig+0x66c>)
 800f318:	4293      	cmp	r3, r2
 800f31a:	d132      	bne.n	800f382 <UART_SetConfig+0x5ca>
 800f31c:	4b3e      	ldr	r3, [pc, #248]	; (800f418 <UART_SetConfig+0x660>)
 800f31e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f320:	f003 0307 	and.w	r3, r3, #7
 800f324:	2b05      	cmp	r3, #5
 800f326:	d827      	bhi.n	800f378 <UART_SetConfig+0x5c0>
 800f328:	a201      	add	r2, pc, #4	; (adr r2, 800f330 <UART_SetConfig+0x578>)
 800f32a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f32e:	bf00      	nop
 800f330:	0800f349 	.word	0x0800f349
 800f334:	0800f351 	.word	0x0800f351
 800f338:	0800f359 	.word	0x0800f359
 800f33c:	0800f361 	.word	0x0800f361
 800f340:	0800f369 	.word	0x0800f369
 800f344:	0800f371 	.word	0x0800f371
 800f348:	2302      	movs	r3, #2
 800f34a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f34e:	e01b      	b.n	800f388 <UART_SetConfig+0x5d0>
 800f350:	2304      	movs	r3, #4
 800f352:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f356:	e017      	b.n	800f388 <UART_SetConfig+0x5d0>
 800f358:	2308      	movs	r3, #8
 800f35a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f35e:	e013      	b.n	800f388 <UART_SetConfig+0x5d0>
 800f360:	2310      	movs	r3, #16
 800f362:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f366:	e00f      	b.n	800f388 <UART_SetConfig+0x5d0>
 800f368:	2320      	movs	r3, #32
 800f36a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f36e:	e00b      	b.n	800f388 <UART_SetConfig+0x5d0>
 800f370:	2340      	movs	r3, #64	; 0x40
 800f372:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f376:	e007      	b.n	800f388 <UART_SetConfig+0x5d0>
 800f378:	2380      	movs	r3, #128	; 0x80
 800f37a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f37e:	bf00      	nop
 800f380:	e002      	b.n	800f388 <UART_SetConfig+0x5d0>
 800f382:	2380      	movs	r3, #128	; 0x80
 800f384:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	4a25      	ldr	r2, [pc, #148]	; (800f424 <UART_SetConfig+0x66c>)
 800f38e:	4293      	cmp	r3, r2
 800f390:	f040 80b8 	bne.w	800f504 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f394:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f398:	2b08      	cmp	r3, #8
 800f39a:	d019      	beq.n	800f3d0 <UART_SetConfig+0x618>
 800f39c:	2b08      	cmp	r3, #8
 800f39e:	dc04      	bgt.n	800f3aa <UART_SetConfig+0x5f2>
 800f3a0:	2b02      	cmp	r3, #2
 800f3a2:	d009      	beq.n	800f3b8 <UART_SetConfig+0x600>
 800f3a4:	2b04      	cmp	r3, #4
 800f3a6:	d00b      	beq.n	800f3c0 <UART_SetConfig+0x608>
 800f3a8:	e042      	b.n	800f430 <UART_SetConfig+0x678>
 800f3aa:	2b20      	cmp	r3, #32
 800f3ac:	d02b      	beq.n	800f406 <UART_SetConfig+0x64e>
 800f3ae:	2b40      	cmp	r3, #64	; 0x40
 800f3b0:	d02c      	beq.n	800f40c <UART_SetConfig+0x654>
 800f3b2:	2b10      	cmp	r3, #16
 800f3b4:	d014      	beq.n	800f3e0 <UART_SetConfig+0x628>
 800f3b6:	e03b      	b.n	800f430 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f3b8:	f7fb fad2 	bl	800a960 <HAL_RCCEx_GetD3PCLK1Freq>
 800f3bc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f3be:	e03d      	b.n	800f43c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f3c0:	f107 0314 	add.w	r3, r7, #20
 800f3c4:	4618      	mov	r0, r3
 800f3c6:	f7fb fae1 	bl	800a98c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f3ca:	69bb      	ldr	r3, [r7, #24]
 800f3cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f3ce:	e035      	b.n	800f43c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f3d0:	f107 0308 	add.w	r3, r7, #8
 800f3d4:	4618      	mov	r0, r3
 800f3d6:	f7fb fc25 	bl	800ac24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f3de:	e02d      	b.n	800f43c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f3e0:	4b0d      	ldr	r3, [pc, #52]	; (800f418 <UART_SetConfig+0x660>)
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	f003 0320 	and.w	r3, r3, #32
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d009      	beq.n	800f400 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f3ec:	4b0a      	ldr	r3, [pc, #40]	; (800f418 <UART_SetConfig+0x660>)
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	08db      	lsrs	r3, r3, #3
 800f3f2:	f003 0303 	and.w	r3, r3, #3
 800f3f6:	4a0c      	ldr	r2, [pc, #48]	; (800f428 <UART_SetConfig+0x670>)
 800f3f8:	fa22 f303 	lsr.w	r3, r2, r3
 800f3fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f3fe:	e01d      	b.n	800f43c <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 800f400:	4b09      	ldr	r3, [pc, #36]	; (800f428 <UART_SetConfig+0x670>)
 800f402:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f404:	e01a      	b.n	800f43c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f406:	4b09      	ldr	r3, [pc, #36]	; (800f42c <UART_SetConfig+0x674>)
 800f408:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f40a:	e017      	b.n	800f43c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f40c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f410:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f412:	e013      	b.n	800f43c <UART_SetConfig+0x684>
 800f414:	40011400 	.word	0x40011400
 800f418:	58024400 	.word	0x58024400
 800f41c:	40007800 	.word	0x40007800
 800f420:	40007c00 	.word	0x40007c00
 800f424:	58000c00 	.word	0x58000c00
 800f428:	03d09000 	.word	0x03d09000
 800f42c:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800f430:	2300      	movs	r3, #0
 800f432:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800f434:	2301      	movs	r3, #1
 800f436:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800f43a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f43c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f43e:	2b00      	cmp	r3, #0
 800f440:	f000 824d 	beq.w	800f8de <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f448:	4aad      	ldr	r2, [pc, #692]	; (800f700 <UART_SetConfig+0x948>)
 800f44a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f44e:	461a      	mov	r2, r3
 800f450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f452:	fbb3 f3f2 	udiv	r3, r3, r2
 800f456:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	685a      	ldr	r2, [r3, #4]
 800f45c:	4613      	mov	r3, r2
 800f45e:	005b      	lsls	r3, r3, #1
 800f460:	4413      	add	r3, r2
 800f462:	6a3a      	ldr	r2, [r7, #32]
 800f464:	429a      	cmp	r2, r3
 800f466:	d305      	bcc.n	800f474 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	685b      	ldr	r3, [r3, #4]
 800f46c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f46e:	6a3a      	ldr	r2, [r7, #32]
 800f470:	429a      	cmp	r2, r3
 800f472:	d903      	bls.n	800f47c <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 800f474:	2301      	movs	r3, #1
 800f476:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800f47a:	e230      	b.n	800f8de <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f47c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f47e:	4618      	mov	r0, r3
 800f480:	f04f 0100 	mov.w	r1, #0
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f488:	4a9d      	ldr	r2, [pc, #628]	; (800f700 <UART_SetConfig+0x948>)
 800f48a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f48e:	b29b      	uxth	r3, r3
 800f490:	f04f 0400 	mov.w	r4, #0
 800f494:	461a      	mov	r2, r3
 800f496:	4623      	mov	r3, r4
 800f498:	f7f0 ff7a 	bl	8000390 <__aeabi_uldivmod>
 800f49c:	4603      	mov	r3, r0
 800f49e:	460c      	mov	r4, r1
 800f4a0:	4619      	mov	r1, r3
 800f4a2:	4622      	mov	r2, r4
 800f4a4:	f04f 0300 	mov.w	r3, #0
 800f4a8:	f04f 0400 	mov.w	r4, #0
 800f4ac:	0214      	lsls	r4, r2, #8
 800f4ae:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800f4b2:	020b      	lsls	r3, r1, #8
 800f4b4:	687a      	ldr	r2, [r7, #4]
 800f4b6:	6852      	ldr	r2, [r2, #4]
 800f4b8:	0852      	lsrs	r2, r2, #1
 800f4ba:	4611      	mov	r1, r2
 800f4bc:	f04f 0200 	mov.w	r2, #0
 800f4c0:	eb13 0b01 	adds.w	fp, r3, r1
 800f4c4:	eb44 0c02 	adc.w	ip, r4, r2
 800f4c8:	4658      	mov	r0, fp
 800f4ca:	4661      	mov	r1, ip
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	685b      	ldr	r3, [r3, #4]
 800f4d0:	f04f 0400 	mov.w	r4, #0
 800f4d4:	461a      	mov	r2, r3
 800f4d6:	4623      	mov	r3, r4
 800f4d8:	f7f0 ff5a 	bl	8000390 <__aeabi_uldivmod>
 800f4dc:	4603      	mov	r3, r0
 800f4de:	460c      	mov	r4, r1
 800f4e0:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f4e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f4e8:	d308      	bcc.n	800f4fc <UART_SetConfig+0x744>
 800f4ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f4f0:	d204      	bcs.n	800f4fc <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f4f8:	60da      	str	r2, [r3, #12]
 800f4fa:	e1f0      	b.n	800f8de <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 800f4fc:	2301      	movs	r3, #1
 800f4fe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800f502:	e1ec      	b.n	800f8de <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	69db      	ldr	r3, [r3, #28]
 800f508:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f50c:	f040 8100 	bne.w	800f710 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 800f510:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f514:	2b40      	cmp	r3, #64	; 0x40
 800f516:	f200 80b7 	bhi.w	800f688 <UART_SetConfig+0x8d0>
 800f51a:	a201      	add	r2, pc, #4	; (adr r2, 800f520 <UART_SetConfig+0x768>)
 800f51c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f520:	0800f625 	.word	0x0800f625
 800f524:	0800f62d 	.word	0x0800f62d
 800f528:	0800f689 	.word	0x0800f689
 800f52c:	0800f689 	.word	0x0800f689
 800f530:	0800f635 	.word	0x0800f635
 800f534:	0800f689 	.word	0x0800f689
 800f538:	0800f689 	.word	0x0800f689
 800f53c:	0800f689 	.word	0x0800f689
 800f540:	0800f645 	.word	0x0800f645
 800f544:	0800f689 	.word	0x0800f689
 800f548:	0800f689 	.word	0x0800f689
 800f54c:	0800f689 	.word	0x0800f689
 800f550:	0800f689 	.word	0x0800f689
 800f554:	0800f689 	.word	0x0800f689
 800f558:	0800f689 	.word	0x0800f689
 800f55c:	0800f689 	.word	0x0800f689
 800f560:	0800f655 	.word	0x0800f655
 800f564:	0800f689 	.word	0x0800f689
 800f568:	0800f689 	.word	0x0800f689
 800f56c:	0800f689 	.word	0x0800f689
 800f570:	0800f689 	.word	0x0800f689
 800f574:	0800f689 	.word	0x0800f689
 800f578:	0800f689 	.word	0x0800f689
 800f57c:	0800f689 	.word	0x0800f689
 800f580:	0800f689 	.word	0x0800f689
 800f584:	0800f689 	.word	0x0800f689
 800f588:	0800f689 	.word	0x0800f689
 800f58c:	0800f689 	.word	0x0800f689
 800f590:	0800f689 	.word	0x0800f689
 800f594:	0800f689 	.word	0x0800f689
 800f598:	0800f689 	.word	0x0800f689
 800f59c:	0800f689 	.word	0x0800f689
 800f5a0:	0800f67b 	.word	0x0800f67b
 800f5a4:	0800f689 	.word	0x0800f689
 800f5a8:	0800f689 	.word	0x0800f689
 800f5ac:	0800f689 	.word	0x0800f689
 800f5b0:	0800f689 	.word	0x0800f689
 800f5b4:	0800f689 	.word	0x0800f689
 800f5b8:	0800f689 	.word	0x0800f689
 800f5bc:	0800f689 	.word	0x0800f689
 800f5c0:	0800f689 	.word	0x0800f689
 800f5c4:	0800f689 	.word	0x0800f689
 800f5c8:	0800f689 	.word	0x0800f689
 800f5cc:	0800f689 	.word	0x0800f689
 800f5d0:	0800f689 	.word	0x0800f689
 800f5d4:	0800f689 	.word	0x0800f689
 800f5d8:	0800f689 	.word	0x0800f689
 800f5dc:	0800f689 	.word	0x0800f689
 800f5e0:	0800f689 	.word	0x0800f689
 800f5e4:	0800f689 	.word	0x0800f689
 800f5e8:	0800f689 	.word	0x0800f689
 800f5ec:	0800f689 	.word	0x0800f689
 800f5f0:	0800f689 	.word	0x0800f689
 800f5f4:	0800f689 	.word	0x0800f689
 800f5f8:	0800f689 	.word	0x0800f689
 800f5fc:	0800f689 	.word	0x0800f689
 800f600:	0800f689 	.word	0x0800f689
 800f604:	0800f689 	.word	0x0800f689
 800f608:	0800f689 	.word	0x0800f689
 800f60c:	0800f689 	.word	0x0800f689
 800f610:	0800f689 	.word	0x0800f689
 800f614:	0800f689 	.word	0x0800f689
 800f618:	0800f689 	.word	0x0800f689
 800f61c:	0800f689 	.word	0x0800f689
 800f620:	0800f681 	.word	0x0800f681
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f624:	f7f9 ffee 	bl	8009604 <HAL_RCC_GetPCLK1Freq>
 800f628:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f62a:	e033      	b.n	800f694 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f62c:	f7fa f800 	bl	8009630 <HAL_RCC_GetPCLK2Freq>
 800f630:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f632:	e02f      	b.n	800f694 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f634:	f107 0314 	add.w	r3, r7, #20
 800f638:	4618      	mov	r0, r3
 800f63a:	f7fb f9a7 	bl	800a98c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f63e:	69bb      	ldr	r3, [r7, #24]
 800f640:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f642:	e027      	b.n	800f694 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f644:	f107 0308 	add.w	r3, r7, #8
 800f648:	4618      	mov	r0, r3
 800f64a:	f7fb faeb 	bl	800ac24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f652:	e01f      	b.n	800f694 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f654:	4b2b      	ldr	r3, [pc, #172]	; (800f704 <UART_SetConfig+0x94c>)
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	f003 0320 	and.w	r3, r3, #32
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d009      	beq.n	800f674 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f660:	4b28      	ldr	r3, [pc, #160]	; (800f704 <UART_SetConfig+0x94c>)
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	08db      	lsrs	r3, r3, #3
 800f666:	f003 0303 	and.w	r3, r3, #3
 800f66a:	4a27      	ldr	r2, [pc, #156]	; (800f708 <UART_SetConfig+0x950>)
 800f66c:	fa22 f303 	lsr.w	r3, r2, r3
 800f670:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f672:	e00f      	b.n	800f694 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 800f674:	4b24      	ldr	r3, [pc, #144]	; (800f708 <UART_SetConfig+0x950>)
 800f676:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f678:	e00c      	b.n	800f694 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f67a:	4b24      	ldr	r3, [pc, #144]	; (800f70c <UART_SetConfig+0x954>)
 800f67c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f67e:	e009      	b.n	800f694 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f680:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f684:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f686:	e005      	b.n	800f694 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 800f688:	2300      	movs	r3, #0
 800f68a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800f68c:	2301      	movs	r3, #1
 800f68e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800f692:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f696:	2b00      	cmp	r3, #0
 800f698:	f000 8121 	beq.w	800f8de <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6a0:	4a17      	ldr	r2, [pc, #92]	; (800f700 <UART_SetConfig+0x948>)
 800f6a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f6a6:	461a      	mov	r2, r3
 800f6a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6aa:	fbb3 f3f2 	udiv	r3, r3, r2
 800f6ae:	005a      	lsls	r2, r3, #1
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	685b      	ldr	r3, [r3, #4]
 800f6b4:	085b      	lsrs	r3, r3, #1
 800f6b6:	441a      	add	r2, r3
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	685b      	ldr	r3, [r3, #4]
 800f6bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800f6c0:	b29b      	uxth	r3, r3
 800f6c2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f6c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6c6:	2b0f      	cmp	r3, #15
 800f6c8:	d916      	bls.n	800f6f8 <UART_SetConfig+0x940>
 800f6ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f6d0:	d212      	bcs.n	800f6f8 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f6d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6d4:	b29b      	uxth	r3, r3
 800f6d6:	f023 030f 	bic.w	r3, r3, #15
 800f6da:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f6dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6de:	085b      	lsrs	r3, r3, #1
 800f6e0:	b29b      	uxth	r3, r3
 800f6e2:	f003 0307 	and.w	r3, r3, #7
 800f6e6:	b29a      	uxth	r2, r3
 800f6e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f6ea:	4313      	orrs	r3, r2
 800f6ec:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f6f4:	60da      	str	r2, [r3, #12]
 800f6f6:	e0f2      	b.n	800f8de <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800f6f8:	2301      	movs	r3, #1
 800f6fa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800f6fe:	e0ee      	b.n	800f8de <UART_SetConfig+0xb26>
 800f700:	08019ec4 	.word	0x08019ec4
 800f704:	58024400 	.word	0x58024400
 800f708:	03d09000 	.word	0x03d09000
 800f70c:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 800f710:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f714:	2b40      	cmp	r3, #64	; 0x40
 800f716:	f200 80b7 	bhi.w	800f888 <UART_SetConfig+0xad0>
 800f71a:	a201      	add	r2, pc, #4	; (adr r2, 800f720 <UART_SetConfig+0x968>)
 800f71c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f720:	0800f825 	.word	0x0800f825
 800f724:	0800f82d 	.word	0x0800f82d
 800f728:	0800f889 	.word	0x0800f889
 800f72c:	0800f889 	.word	0x0800f889
 800f730:	0800f835 	.word	0x0800f835
 800f734:	0800f889 	.word	0x0800f889
 800f738:	0800f889 	.word	0x0800f889
 800f73c:	0800f889 	.word	0x0800f889
 800f740:	0800f845 	.word	0x0800f845
 800f744:	0800f889 	.word	0x0800f889
 800f748:	0800f889 	.word	0x0800f889
 800f74c:	0800f889 	.word	0x0800f889
 800f750:	0800f889 	.word	0x0800f889
 800f754:	0800f889 	.word	0x0800f889
 800f758:	0800f889 	.word	0x0800f889
 800f75c:	0800f889 	.word	0x0800f889
 800f760:	0800f855 	.word	0x0800f855
 800f764:	0800f889 	.word	0x0800f889
 800f768:	0800f889 	.word	0x0800f889
 800f76c:	0800f889 	.word	0x0800f889
 800f770:	0800f889 	.word	0x0800f889
 800f774:	0800f889 	.word	0x0800f889
 800f778:	0800f889 	.word	0x0800f889
 800f77c:	0800f889 	.word	0x0800f889
 800f780:	0800f889 	.word	0x0800f889
 800f784:	0800f889 	.word	0x0800f889
 800f788:	0800f889 	.word	0x0800f889
 800f78c:	0800f889 	.word	0x0800f889
 800f790:	0800f889 	.word	0x0800f889
 800f794:	0800f889 	.word	0x0800f889
 800f798:	0800f889 	.word	0x0800f889
 800f79c:	0800f889 	.word	0x0800f889
 800f7a0:	0800f87b 	.word	0x0800f87b
 800f7a4:	0800f889 	.word	0x0800f889
 800f7a8:	0800f889 	.word	0x0800f889
 800f7ac:	0800f889 	.word	0x0800f889
 800f7b0:	0800f889 	.word	0x0800f889
 800f7b4:	0800f889 	.word	0x0800f889
 800f7b8:	0800f889 	.word	0x0800f889
 800f7bc:	0800f889 	.word	0x0800f889
 800f7c0:	0800f889 	.word	0x0800f889
 800f7c4:	0800f889 	.word	0x0800f889
 800f7c8:	0800f889 	.word	0x0800f889
 800f7cc:	0800f889 	.word	0x0800f889
 800f7d0:	0800f889 	.word	0x0800f889
 800f7d4:	0800f889 	.word	0x0800f889
 800f7d8:	0800f889 	.word	0x0800f889
 800f7dc:	0800f889 	.word	0x0800f889
 800f7e0:	0800f889 	.word	0x0800f889
 800f7e4:	0800f889 	.word	0x0800f889
 800f7e8:	0800f889 	.word	0x0800f889
 800f7ec:	0800f889 	.word	0x0800f889
 800f7f0:	0800f889 	.word	0x0800f889
 800f7f4:	0800f889 	.word	0x0800f889
 800f7f8:	0800f889 	.word	0x0800f889
 800f7fc:	0800f889 	.word	0x0800f889
 800f800:	0800f889 	.word	0x0800f889
 800f804:	0800f889 	.word	0x0800f889
 800f808:	0800f889 	.word	0x0800f889
 800f80c:	0800f889 	.word	0x0800f889
 800f810:	0800f889 	.word	0x0800f889
 800f814:	0800f889 	.word	0x0800f889
 800f818:	0800f889 	.word	0x0800f889
 800f81c:	0800f889 	.word	0x0800f889
 800f820:	0800f881 	.word	0x0800f881
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f824:	f7f9 feee 	bl	8009604 <HAL_RCC_GetPCLK1Freq>
 800f828:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f82a:	e033      	b.n	800f894 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f82c:	f7f9 ff00 	bl	8009630 <HAL_RCC_GetPCLK2Freq>
 800f830:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f832:	e02f      	b.n	800f894 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f834:	f107 0314 	add.w	r3, r7, #20
 800f838:	4618      	mov	r0, r3
 800f83a:	f7fb f8a7 	bl	800a98c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f83e:	69bb      	ldr	r3, [r7, #24]
 800f840:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f842:	e027      	b.n	800f894 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f844:	f107 0308 	add.w	r3, r7, #8
 800f848:	4618      	mov	r0, r3
 800f84a:	f7fb f9eb 	bl	800ac24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f852:	e01f      	b.n	800f894 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f854:	4b2c      	ldr	r3, [pc, #176]	; (800f908 <UART_SetConfig+0xb50>)
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	f003 0320 	and.w	r3, r3, #32
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d009      	beq.n	800f874 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f860:	4b29      	ldr	r3, [pc, #164]	; (800f908 <UART_SetConfig+0xb50>)
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	08db      	lsrs	r3, r3, #3
 800f866:	f003 0303 	and.w	r3, r3, #3
 800f86a:	4a28      	ldr	r2, [pc, #160]	; (800f90c <UART_SetConfig+0xb54>)
 800f86c:	fa22 f303 	lsr.w	r3, r2, r3
 800f870:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f872:	e00f      	b.n	800f894 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 800f874:	4b25      	ldr	r3, [pc, #148]	; (800f90c <UART_SetConfig+0xb54>)
 800f876:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f878:	e00c      	b.n	800f894 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f87a:	4b25      	ldr	r3, [pc, #148]	; (800f910 <UART_SetConfig+0xb58>)
 800f87c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f87e:	e009      	b.n	800f894 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f880:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f884:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f886:	e005      	b.n	800f894 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 800f888:	2300      	movs	r3, #0
 800f88a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800f88c:	2301      	movs	r3, #1
 800f88e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800f892:	bf00      	nop
    }

    if (pclk != 0U)
 800f894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f896:	2b00      	cmp	r3, #0
 800f898:	d021      	beq.n	800f8de <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f89e:	4a1d      	ldr	r2, [pc, #116]	; (800f914 <UART_SetConfig+0xb5c>)
 800f8a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f8a4:	461a      	mov	r2, r3
 800f8a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8a8:	fbb3 f2f2 	udiv	r2, r3, r2
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	685b      	ldr	r3, [r3, #4]
 800f8b0:	085b      	lsrs	r3, r3, #1
 800f8b2:	441a      	add	r2, r3
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	685b      	ldr	r3, [r3, #4]
 800f8b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800f8bc:	b29b      	uxth	r3, r3
 800f8be:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f8c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8c2:	2b0f      	cmp	r3, #15
 800f8c4:	d908      	bls.n	800f8d8 <UART_SetConfig+0xb20>
 800f8c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f8cc:	d204      	bcs.n	800f8d8 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f8d4:	60da      	str	r2, [r3, #12]
 800f8d6:	e002      	b.n	800f8de <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800f8d8:	2301      	movs	r3, #1
 800f8da:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	2201      	movs	r2, #1
 800f8e2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	2201      	movs	r2, #1
 800f8ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	2200      	movs	r2, #0
 800f8f2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	2200      	movs	r2, #0
 800f8f8:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800f8fa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800f8fe:	4618      	mov	r0, r3
 800f900:	3738      	adds	r7, #56	; 0x38
 800f902:	46bd      	mov	sp, r7
 800f904:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800f908:	58024400 	.word	0x58024400
 800f90c:	03d09000 	.word	0x03d09000
 800f910:	003d0900 	.word	0x003d0900
 800f914:	08019ec4 	.word	0x08019ec4

0800f918 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f918:	b480      	push	{r7}
 800f91a:	b083      	sub	sp, #12
 800f91c:	af00      	add	r7, sp, #0
 800f91e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f924:	f003 0301 	and.w	r3, r3, #1
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d00a      	beq.n	800f942 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	685b      	ldr	r3, [r3, #4]
 800f932:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	430a      	orrs	r2, r1
 800f940:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f946:	f003 0302 	and.w	r3, r3, #2
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d00a      	beq.n	800f964 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	685b      	ldr	r3, [r3, #4]
 800f954:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	430a      	orrs	r2, r1
 800f962:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f968:	f003 0304 	and.w	r3, r3, #4
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d00a      	beq.n	800f986 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	685b      	ldr	r3, [r3, #4]
 800f976:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	430a      	orrs	r2, r1
 800f984:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f98a:	f003 0308 	and.w	r3, r3, #8
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d00a      	beq.n	800f9a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	685b      	ldr	r3, [r3, #4]
 800f998:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	430a      	orrs	r2, r1
 800f9a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9ac:	f003 0310 	and.w	r3, r3, #16
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d00a      	beq.n	800f9ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	689b      	ldr	r3, [r3, #8]
 800f9ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	430a      	orrs	r2, r1
 800f9c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9ce:	f003 0320 	and.w	r3, r3, #32
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d00a      	beq.n	800f9ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	689b      	ldr	r3, [r3, #8]
 800f9dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	430a      	orrs	r2, r1
 800f9ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d01a      	beq.n	800fa2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	685b      	ldr	r3, [r3, #4]
 800f9fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	430a      	orrs	r2, r1
 800fa0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fa16:	d10a      	bne.n	800fa2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	685b      	ldr	r3, [r3, #4]
 800fa1e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	430a      	orrs	r2, r1
 800fa2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d00a      	beq.n	800fa50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	685b      	ldr	r3, [r3, #4]
 800fa40:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	430a      	orrs	r2, r1
 800fa4e:	605a      	str	r2, [r3, #4]
  }
}
 800fa50:	bf00      	nop
 800fa52:	370c      	adds	r7, #12
 800fa54:	46bd      	mov	sp, r7
 800fa56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa5a:	4770      	bx	lr

0800fa5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800fa5c:	b580      	push	{r7, lr}
 800fa5e:	b086      	sub	sp, #24
 800fa60:	af02      	add	r7, sp, #8
 800fa62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	2200      	movs	r2, #0
 800fa68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800fa6c:	f7f3 fd8a 	bl	8003584 <HAL_GetTick>
 800fa70:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	f003 0308 	and.w	r3, r3, #8
 800fa7c:	2b08      	cmp	r3, #8
 800fa7e:	d10e      	bne.n	800fa9e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fa80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800fa84:	9300      	str	r3, [sp, #0]
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	2200      	movs	r2, #0
 800fa8a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800fa8e:	6878      	ldr	r0, [r7, #4]
 800fa90:	f000 f82c 	bl	800faec <UART_WaitOnFlagUntilTimeout>
 800fa94:	4603      	mov	r3, r0
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d001      	beq.n	800fa9e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fa9a:	2303      	movs	r3, #3
 800fa9c:	e022      	b.n	800fae4 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	f003 0304 	and.w	r3, r3, #4
 800faa8:	2b04      	cmp	r3, #4
 800faaa:	d10e      	bne.n	800faca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800faac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800fab0:	9300      	str	r3, [sp, #0]
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	2200      	movs	r2, #0
 800fab6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800faba:	6878      	ldr	r0, [r7, #4]
 800fabc:	f000 f816 	bl	800faec <UART_WaitOnFlagUntilTimeout>
 800fac0:	4603      	mov	r3, r0
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d001      	beq.n	800faca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fac6:	2303      	movs	r3, #3
 800fac8:	e00c      	b.n	800fae4 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	2220      	movs	r2, #32
 800face:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	2220      	movs	r2, #32
 800fad6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	2200      	movs	r2, #0
 800fade:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800fae2:	2300      	movs	r3, #0
}
 800fae4:	4618      	mov	r0, r3
 800fae6:	3710      	adds	r7, #16
 800fae8:	46bd      	mov	sp, r7
 800faea:	bd80      	pop	{r7, pc}

0800faec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800faec:	b580      	push	{r7, lr}
 800faee:	b084      	sub	sp, #16
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	60f8      	str	r0, [r7, #12]
 800faf4:	60b9      	str	r1, [r7, #8]
 800faf6:	603b      	str	r3, [r7, #0]
 800faf8:	4613      	mov	r3, r2
 800fafa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fafc:	e062      	b.n	800fbc4 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fafe:	69bb      	ldr	r3, [r7, #24]
 800fb00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb04:	d05e      	beq.n	800fbc4 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fb06:	f7f3 fd3d 	bl	8003584 <HAL_GetTick>
 800fb0a:	4602      	mov	r2, r0
 800fb0c:	683b      	ldr	r3, [r7, #0]
 800fb0e:	1ad3      	subs	r3, r2, r3
 800fb10:	69ba      	ldr	r2, [r7, #24]
 800fb12:	429a      	cmp	r2, r3
 800fb14:	d302      	bcc.n	800fb1c <UART_WaitOnFlagUntilTimeout+0x30>
 800fb16:	69bb      	ldr	r3, [r7, #24]
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d11d      	bne.n	800fb58 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800fb1c:	68fb      	ldr	r3, [r7, #12]
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	681a      	ldr	r2, [r3, #0]
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800fb2a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fb2c:	68fb      	ldr	r3, [r7, #12]
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	689a      	ldr	r2, [r3, #8]
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	f022 0201 	bic.w	r2, r2, #1
 800fb3a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	2220      	movs	r2, #32
 800fb40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	2220      	movs	r2, #32
 800fb48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	2200      	movs	r2, #0
 800fb50:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800fb54:	2303      	movs	r3, #3
 800fb56:	e045      	b.n	800fbe4 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	f003 0304 	and.w	r3, r3, #4
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d02e      	beq.n	800fbc4 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	69db      	ldr	r3, [r3, #28]
 800fb6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fb70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fb74:	d126      	bne.n	800fbc4 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fb7e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	681a      	ldr	r2, [r3, #0]
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800fb8e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	689a      	ldr	r2, [r3, #8]
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	f022 0201 	bic.w	r2, r2, #1
 800fb9e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	2220      	movs	r2, #32
 800fba4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	2220      	movs	r2, #32
 800fbac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	2220      	movs	r2, #32
 800fbb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	2200      	movs	r2, #0
 800fbbc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800fbc0:	2303      	movs	r3, #3
 800fbc2:	e00f      	b.n	800fbe4 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	69da      	ldr	r2, [r3, #28]
 800fbca:	68bb      	ldr	r3, [r7, #8]
 800fbcc:	4013      	ands	r3, r2
 800fbce:	68ba      	ldr	r2, [r7, #8]
 800fbd0:	429a      	cmp	r2, r3
 800fbd2:	bf0c      	ite	eq
 800fbd4:	2301      	moveq	r3, #1
 800fbd6:	2300      	movne	r3, #0
 800fbd8:	b2db      	uxtb	r3, r3
 800fbda:	461a      	mov	r2, r3
 800fbdc:	79fb      	ldrb	r3, [r7, #7]
 800fbde:	429a      	cmp	r2, r3
 800fbe0:	d08d      	beq.n	800fafe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fbe2:	2300      	movs	r3, #0
}
 800fbe4:	4618      	mov	r0, r3
 800fbe6:	3710      	adds	r7, #16
 800fbe8:	46bd      	mov	sp, r7
 800fbea:	bd80      	pop	{r7, pc}

0800fbec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800fbec:	b480      	push	{r7}
 800fbee:	b083      	sub	sp, #12
 800fbf0:	af00      	add	r7, sp, #0
 800fbf2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	681a      	ldr	r2, [r3, #0]
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800fc02:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	689a      	ldr	r2, [r3, #8]
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800fc12:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	2220      	movs	r2, #32
 800fc18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800fc1c:	bf00      	nop
 800fc1e:	370c      	adds	r7, #12
 800fc20:	46bd      	mov	sp, r7
 800fc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc26:	4770      	bx	lr

0800fc28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fc28:	b480      	push	{r7}
 800fc2a:	b083      	sub	sp, #12
 800fc2c:	af00      	add	r7, sp, #0
 800fc2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	681a      	ldr	r2, [r3, #0]
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800fc3e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	6899      	ldr	r1, [r3, #8]
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	681a      	ldr	r2, [r3, #0]
 800fc4a:	4b08      	ldr	r3, [pc, #32]	; (800fc6c <UART_EndRxTransfer+0x44>)
 800fc4c:	400b      	ands	r3, r1
 800fc4e:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	2220      	movs	r2, #32
 800fc54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	2200      	movs	r2, #0
 800fc5c:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800fc5e:	bf00      	nop
 800fc60:	370c      	adds	r7, #12
 800fc62:	46bd      	mov	sp, r7
 800fc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc68:	4770      	bx	lr
 800fc6a:	bf00      	nop
 800fc6c:	effffffe 	.word	0xeffffffe

0800fc70 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800fc70:	b580      	push	{r7, lr}
 800fc72:	b084      	sub	sp, #16
 800fc74:	af00      	add	r7, sp, #0
 800fc76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc7c:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	69db      	ldr	r3, [r3, #28]
 800fc82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fc86:	d01f      	beq.n	800fcc8 <UART_DMAReceiveCplt+0x58>
  {
    huart->RxXferCount = 0U;
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	2200      	movs	r2, #0
 800fc8c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	681a      	ldr	r2, [r3, #0]
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800fc9e:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	689a      	ldr	r2, [r3, #8]
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	f022 0201 	bic.w	r2, r2, #1
 800fcae:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	689a      	ldr	r2, [r3, #8]
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fcbe:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	2220      	movs	r2, #32
 800fcc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800fcc8:	68f8      	ldr	r0, [r7, #12]
 800fcca:	f7ff f861 	bl	800ed90 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fcce:	bf00      	nop
 800fcd0:	3710      	adds	r7, #16
 800fcd2:	46bd      	mov	sp, r7
 800fcd4:	bd80      	pop	{r7, pc}

0800fcd6 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800fcd6:	b580      	push	{r7, lr}
 800fcd8:	b084      	sub	sp, #16
 800fcda:	af00      	add	r7, sp, #0
 800fcdc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fce2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800fce4:	68f8      	ldr	r0, [r7, #12]
 800fce6:	f7f0 fe61 	bl	80009ac <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fcea:	bf00      	nop
 800fcec:	3710      	adds	r7, #16
 800fcee:	46bd      	mov	sp, r7
 800fcf0:	bd80      	pop	{r7, pc}

0800fcf2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800fcf2:	b580      	push	{r7, lr}
 800fcf4:	b086      	sub	sp, #24
 800fcf6:	af00      	add	r7, sp, #0
 800fcf8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fcfe:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800fd00:	697b      	ldr	r3, [r7, #20]
 800fd02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fd06:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800fd08:	697b      	ldr	r3, [r7, #20]
 800fd0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fd0e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800fd10:	697b      	ldr	r3, [r7, #20]
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	689b      	ldr	r3, [r3, #8]
 800fd16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fd1a:	2b80      	cmp	r3, #128	; 0x80
 800fd1c:	d109      	bne.n	800fd32 <UART_DMAError+0x40>
 800fd1e:	693b      	ldr	r3, [r7, #16]
 800fd20:	2b21      	cmp	r3, #33	; 0x21
 800fd22:	d106      	bne.n	800fd32 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800fd24:	697b      	ldr	r3, [r7, #20]
 800fd26:	2200      	movs	r2, #0
 800fd28:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800fd2c:	6978      	ldr	r0, [r7, #20]
 800fd2e:	f7ff ff5d 	bl	800fbec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800fd32:	697b      	ldr	r3, [r7, #20]
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	689b      	ldr	r3, [r3, #8]
 800fd38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fd3c:	2b40      	cmp	r3, #64	; 0x40
 800fd3e:	d109      	bne.n	800fd54 <UART_DMAError+0x62>
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	2b22      	cmp	r3, #34	; 0x22
 800fd44:	d106      	bne.n	800fd54 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800fd46:	697b      	ldr	r3, [r7, #20]
 800fd48:	2200      	movs	r2, #0
 800fd4a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800fd4e:	6978      	ldr	r0, [r7, #20]
 800fd50:	f7ff ff6a 	bl	800fc28 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800fd54:	697b      	ldr	r3, [r7, #20]
 800fd56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fd5a:	f043 0210 	orr.w	r2, r3, #16
 800fd5e:	697b      	ldr	r3, [r7, #20]
 800fd60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fd64:	6978      	ldr	r0, [r7, #20]
 800fd66:	f7ff f81d 	bl	800eda4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fd6a:	bf00      	nop
 800fd6c:	3718      	adds	r7, #24
 800fd6e:	46bd      	mov	sp, r7
 800fd70:	bd80      	pop	{r7, pc}

0800fd72 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800fd72:	b480      	push	{r7}
 800fd74:	b085      	sub	sp, #20
 800fd76:	af00      	add	r7, sp, #0
 800fd78:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800fd80:	2b01      	cmp	r3, #1
 800fd82:	d101      	bne.n	800fd88 <HAL_UARTEx_DisableFifoMode+0x16>
 800fd84:	2302      	movs	r3, #2
 800fd86:	e027      	b.n	800fdd8 <HAL_UARTEx_DisableFifoMode+0x66>
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	2201      	movs	r2, #1
 800fd8c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	2224      	movs	r2, #36	; 0x24
 800fd94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	681a      	ldr	r2, [r3, #0]
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	f022 0201 	bic.w	r2, r2, #1
 800fdae:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800fdb6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	2200      	movs	r2, #0
 800fdbc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	68fa      	ldr	r2, [r7, #12]
 800fdc4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	2220      	movs	r2, #32
 800fdca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	2200      	movs	r2, #0
 800fdd2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800fdd6:	2300      	movs	r3, #0
}
 800fdd8:	4618      	mov	r0, r3
 800fdda:	3714      	adds	r7, #20
 800fddc:	46bd      	mov	sp, r7
 800fdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde2:	4770      	bx	lr

0800fde4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fde4:	b580      	push	{r7, lr}
 800fde6:	b084      	sub	sp, #16
 800fde8:	af00      	add	r7, sp, #0
 800fdea:	6078      	str	r0, [r7, #4]
 800fdec:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800fdf4:	2b01      	cmp	r3, #1
 800fdf6:	d101      	bne.n	800fdfc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800fdf8:	2302      	movs	r3, #2
 800fdfa:	e02d      	b.n	800fe58 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	2201      	movs	r2, #1
 800fe00:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	2224      	movs	r2, #36	; 0x24
 800fe08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	681a      	ldr	r2, [r3, #0]
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	f022 0201 	bic.w	r2, r2, #1
 800fe22:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	689b      	ldr	r3, [r3, #8]
 800fe2a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	683a      	ldr	r2, [r7, #0]
 800fe34:	430a      	orrs	r2, r1
 800fe36:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fe38:	6878      	ldr	r0, [r7, #4]
 800fe3a:	f000 f84f 	bl	800fedc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	68fa      	ldr	r2, [r7, #12]
 800fe44:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	2220      	movs	r2, #32
 800fe4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	2200      	movs	r2, #0
 800fe52:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800fe56:	2300      	movs	r3, #0
}
 800fe58:	4618      	mov	r0, r3
 800fe5a:	3710      	adds	r7, #16
 800fe5c:	46bd      	mov	sp, r7
 800fe5e:	bd80      	pop	{r7, pc}

0800fe60 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fe60:	b580      	push	{r7, lr}
 800fe62:	b084      	sub	sp, #16
 800fe64:	af00      	add	r7, sp, #0
 800fe66:	6078      	str	r0, [r7, #4]
 800fe68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800fe70:	2b01      	cmp	r3, #1
 800fe72:	d101      	bne.n	800fe78 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800fe74:	2302      	movs	r3, #2
 800fe76:	e02d      	b.n	800fed4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	2201      	movs	r2, #1
 800fe7c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	2224      	movs	r2, #36	; 0x24
 800fe84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	681a      	ldr	r2, [r3, #0]
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	f022 0201 	bic.w	r2, r2, #1
 800fe9e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	689b      	ldr	r3, [r3, #8]
 800fea6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	683a      	ldr	r2, [r7, #0]
 800feb0:	430a      	orrs	r2, r1
 800feb2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800feb4:	6878      	ldr	r0, [r7, #4]
 800feb6:	f000 f811 	bl	800fedc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	68fa      	ldr	r2, [r7, #12]
 800fec0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	2220      	movs	r2, #32
 800fec6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	2200      	movs	r2, #0
 800fece:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800fed2:	2300      	movs	r3, #0
}
 800fed4:	4618      	mov	r0, r3
 800fed6:	3710      	adds	r7, #16
 800fed8:	46bd      	mov	sp, r7
 800feda:	bd80      	pop	{r7, pc}

0800fedc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800fedc:	b480      	push	{r7}
 800fede:	b089      	sub	sp, #36	; 0x24
 800fee0:	af00      	add	r7, sp, #0
 800fee2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800fee4:	4a2f      	ldr	r2, [pc, #188]	; (800ffa4 <UARTEx_SetNbDataToProcess+0xc8>)
 800fee6:	f107 0314 	add.w	r3, r7, #20
 800feea:	e892 0003 	ldmia.w	r2, {r0, r1}
 800feee:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800fef2:	4a2d      	ldr	r2, [pc, #180]	; (800ffa8 <UARTEx_SetNbDataToProcess+0xcc>)
 800fef4:	f107 030c 	add.w	r3, r7, #12
 800fef8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fefc:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d108      	bne.n	800ff1a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	2201      	movs	r2, #1
 800ff0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	2201      	movs	r2, #1
 800ff14:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ff18:	e03d      	b.n	800ff96 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ff1a:	2310      	movs	r3, #16
 800ff1c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ff1e:	2310      	movs	r3, #16
 800ff20:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	689b      	ldr	r3, [r3, #8]
 800ff28:	0e5b      	lsrs	r3, r3, #25
 800ff2a:	b2db      	uxtb	r3, r3
 800ff2c:	f003 0307 	and.w	r3, r3, #7
 800ff30:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	689b      	ldr	r3, [r3, #8]
 800ff38:	0f5b      	lsrs	r3, r3, #29
 800ff3a:	b2db      	uxtb	r3, r3
 800ff3c:	f003 0307 	and.w	r3, r3, #7
 800ff40:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800ff42:	7fbb      	ldrb	r3, [r7, #30]
 800ff44:	7f3a      	ldrb	r2, [r7, #28]
 800ff46:	f107 0120 	add.w	r1, r7, #32
 800ff4a:	440a      	add	r2, r1
 800ff4c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800ff50:	fb02 f303 	mul.w	r3, r2, r3
 800ff54:	7f3a      	ldrb	r2, [r7, #28]
 800ff56:	f107 0120 	add.w	r1, r7, #32
 800ff5a:	440a      	add	r2, r1
 800ff5c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800ff60:	fb93 f3f2 	sdiv	r3, r3, r2
 800ff64:	b29a      	uxth	r2, r3
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800ff6c:	7ffb      	ldrb	r3, [r7, #31]
 800ff6e:	7f7a      	ldrb	r2, [r7, #29]
 800ff70:	f107 0120 	add.w	r1, r7, #32
 800ff74:	440a      	add	r2, r1
 800ff76:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800ff7a:	fb02 f303 	mul.w	r3, r2, r3
 800ff7e:	7f7a      	ldrb	r2, [r7, #29]
 800ff80:	f107 0120 	add.w	r1, r7, #32
 800ff84:	440a      	add	r2, r1
 800ff86:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800ff8a:	fb93 f3f2 	sdiv	r3, r3, r2
 800ff8e:	b29a      	uxth	r2, r3
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ff96:	bf00      	nop
 800ff98:	3724      	adds	r7, #36	; 0x24
 800ff9a:	46bd      	mov	sp, r7
 800ff9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffa0:	4770      	bx	lr
 800ffa2:	bf00      	nop
 800ffa4:	08019e04 	.word	0x08019e04
 800ffa8:	08019e0c 	.word	0x08019e0c

0800ffac <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800ffac:	b084      	sub	sp, #16
 800ffae:	b480      	push	{r7}
 800ffb0:	b085      	sub	sp, #20
 800ffb2:	af00      	add	r7, sp, #0
 800ffb4:	6078      	str	r0, [r7, #4]
 800ffb6:	f107 001c 	add.w	r0, r7, #28
 800ffba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800ffbe:	2300      	movs	r3, #0
 800ffc0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800ffc2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800ffc4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800ffc6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800ffc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800ffca:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800ffcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800ffce:	431a      	orrs	r2, r3
             Init.ClockDiv
 800ffd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800ffd2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800ffd4:	68fa      	ldr	r2, [r7, #12]
 800ffd6:	4313      	orrs	r3, r2
 800ffd8:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	685a      	ldr	r2, [r3, #4]
 800ffde:	4b07      	ldr	r3, [pc, #28]	; (800fffc <SDMMC_Init+0x50>)
 800ffe0:	4013      	ands	r3, r2
 800ffe2:	68fa      	ldr	r2, [r7, #12]
 800ffe4:	431a      	orrs	r2, r3
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800ffea:	2300      	movs	r3, #0
}
 800ffec:	4618      	mov	r0, r3
 800ffee:	3714      	adds	r7, #20
 800fff0:	46bd      	mov	sp, r7
 800fff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fff6:	b004      	add	sp, #16
 800fff8:	4770      	bx	lr
 800fffa:	bf00      	nop
 800fffc:	ffc02c00 	.word	0xffc02c00

08010000 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8010000:	b480      	push	{r7}
 8010002:	b083      	sub	sp, #12
 8010004:	af00      	add	r7, sp, #0
 8010006:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 801000e:	4618      	mov	r0, r3
 8010010:	370c      	adds	r7, #12
 8010012:	46bd      	mov	sp, r7
 8010014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010018:	4770      	bx	lr

0801001a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 801001a:	b480      	push	{r7}
 801001c:	b083      	sub	sp, #12
 801001e:	af00      	add	r7, sp, #0
 8010020:	6078      	str	r0, [r7, #4]
 8010022:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8010024:	683b      	ldr	r3, [r7, #0]
 8010026:	681a      	ldr	r2, [r3, #0]
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801002e:	2300      	movs	r3, #0
}
 8010030:	4618      	mov	r0, r3
 8010032:	370c      	adds	r7, #12
 8010034:	46bd      	mov	sp, r7
 8010036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801003a:	4770      	bx	lr

0801003c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 801003c:	b480      	push	{r7}
 801003e:	b083      	sub	sp, #12
 8010040:	af00      	add	r7, sp, #0
 8010042:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	f043 0203 	orr.w	r2, r3, #3
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8010050:	2300      	movs	r3, #0
}
 8010052:	4618      	mov	r0, r3
 8010054:	370c      	adds	r7, #12
 8010056:	46bd      	mov	sp, r7
 8010058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801005c:	4770      	bx	lr

0801005e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 801005e:	b480      	push	{r7}
 8010060:	b083      	sub	sp, #12
 8010062:	af00      	add	r7, sp, #0
 8010064:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	f003 0303 	and.w	r3, r3, #3
}
 801006e:	4618      	mov	r0, r3
 8010070:	370c      	adds	r7, #12
 8010072:	46bd      	mov	sp, r7
 8010074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010078:	4770      	bx	lr
	...

0801007c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 801007c:	b480      	push	{r7}
 801007e:	b085      	sub	sp, #20
 8010080:	af00      	add	r7, sp, #0
 8010082:	6078      	str	r0, [r7, #4]
 8010084:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010086:	2300      	movs	r3, #0
 8010088:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 801008a:	683b      	ldr	r3, [r7, #0]
 801008c:	681a      	ldr	r2, [r3, #0]
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010092:	683b      	ldr	r3, [r7, #0]
 8010094:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8010096:	683b      	ldr	r3, [r7, #0]
 8010098:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 801009a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 801009c:	683b      	ldr	r3, [r7, #0]
 801009e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80100a0:	431a      	orrs	r2, r3
                       Command->CPSM);
 80100a2:	683b      	ldr	r3, [r7, #0]
 80100a4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80100a6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80100a8:	68fa      	ldr	r2, [r7, #12]
 80100aa:	4313      	orrs	r3, r2
 80100ac:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	68da      	ldr	r2, [r3, #12]
 80100b2:	4b06      	ldr	r3, [pc, #24]	; (80100cc <SDMMC_SendCommand+0x50>)
 80100b4:	4013      	ands	r3, r2
 80100b6:	68fa      	ldr	r2, [r7, #12]
 80100b8:	431a      	orrs	r2, r3
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80100be:	2300      	movs	r3, #0
}
 80100c0:	4618      	mov	r0, r3
 80100c2:	3714      	adds	r7, #20
 80100c4:	46bd      	mov	sp, r7
 80100c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ca:	4770      	bx	lr
 80100cc:	fffee0c0 	.word	0xfffee0c0

080100d0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80100d0:	b480      	push	{r7}
 80100d2:	b083      	sub	sp, #12
 80100d4:	af00      	add	r7, sp, #0
 80100d6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	691b      	ldr	r3, [r3, #16]
 80100dc:	b2db      	uxtb	r3, r3
}
 80100de:	4618      	mov	r0, r3
 80100e0:	370c      	adds	r7, #12
 80100e2:	46bd      	mov	sp, r7
 80100e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100e8:	4770      	bx	lr

080100ea <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80100ea:	b480      	push	{r7}
 80100ec:	b085      	sub	sp, #20
 80100ee:	af00      	add	r7, sp, #0
 80100f0:	6078      	str	r0, [r7, #4]
 80100f2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	3314      	adds	r3, #20
 80100f8:	461a      	mov	r2, r3
 80100fa:	683b      	ldr	r3, [r7, #0]
 80100fc:	4413      	add	r3, r2
 80100fe:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8010100:	68fb      	ldr	r3, [r7, #12]
 8010102:	681b      	ldr	r3, [r3, #0]
}
 8010104:	4618      	mov	r0, r3
 8010106:	3714      	adds	r7, #20
 8010108:	46bd      	mov	sp, r7
 801010a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801010e:	4770      	bx	lr

08010110 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8010110:	b480      	push	{r7}
 8010112:	b085      	sub	sp, #20
 8010114:	af00      	add	r7, sp, #0
 8010116:	6078      	str	r0, [r7, #4]
 8010118:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801011a:	2300      	movs	r3, #0
 801011c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 801011e:	683b      	ldr	r3, [r7, #0]
 8010120:	681a      	ldr	r2, [r3, #0]
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8010126:	683b      	ldr	r3, [r7, #0]
 8010128:	685a      	ldr	r2, [r3, #4]
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801012e:	683b      	ldr	r3, [r7, #0]
 8010130:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8010132:	683b      	ldr	r3, [r7, #0]
 8010134:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010136:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8010138:	683b      	ldr	r3, [r7, #0]
 801013a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 801013c:	431a      	orrs	r2, r3
                       Data->DPSM);
 801013e:	683b      	ldr	r3, [r7, #0]
 8010140:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8010142:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010144:	68fa      	ldr	r2, [r7, #12]
 8010146:	4313      	orrs	r3, r2
 8010148:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801014e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	431a      	orrs	r2, r3
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 801015a:	2300      	movs	r3, #0

}
 801015c:	4618      	mov	r0, r3
 801015e:	3714      	adds	r7, #20
 8010160:	46bd      	mov	sp, r7
 8010162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010166:	4770      	bx	lr

08010168 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8010168:	b580      	push	{r7, lr}
 801016a:	b088      	sub	sp, #32
 801016c:	af00      	add	r7, sp, #0
 801016e:	6078      	str	r0, [r7, #4]
 8010170:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8010172:	683b      	ldr	r3, [r7, #0]
 8010174:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8010176:	2310      	movs	r3, #16
 8010178:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801017a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801017e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010180:	2300      	movs	r3, #0
 8010182:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010184:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010188:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801018a:	f107 0308 	add.w	r3, r7, #8
 801018e:	4619      	mov	r1, r3
 8010190:	6878      	ldr	r0, [r7, #4]
 8010192:	f7ff ff73 	bl	801007c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8010196:	f241 3288 	movw	r2, #5000	; 0x1388
 801019a:	2110      	movs	r1, #16
 801019c:	6878      	ldr	r0, [r7, #4]
 801019e:	f000 faaf 	bl	8010700 <SDMMC_GetCmdResp1>
 80101a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80101a4:	69fb      	ldr	r3, [r7, #28]
}
 80101a6:	4618      	mov	r0, r3
 80101a8:	3720      	adds	r7, #32
 80101aa:	46bd      	mov	sp, r7
 80101ac:	bd80      	pop	{r7, pc}

080101ae <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80101ae:	b580      	push	{r7, lr}
 80101b0:	b088      	sub	sp, #32
 80101b2:	af00      	add	r7, sp, #0
 80101b4:	6078      	str	r0, [r7, #4]
 80101b6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80101b8:	683b      	ldr	r3, [r7, #0]
 80101ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80101bc:	2311      	movs	r3, #17
 80101be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80101c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80101c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80101c6:	2300      	movs	r3, #0
 80101c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80101ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80101ce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80101d0:	f107 0308 	add.w	r3, r7, #8
 80101d4:	4619      	mov	r1, r3
 80101d6:	6878      	ldr	r0, [r7, #4]
 80101d8:	f7ff ff50 	bl	801007c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80101dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80101e0:	2111      	movs	r1, #17
 80101e2:	6878      	ldr	r0, [r7, #4]
 80101e4:	f000 fa8c 	bl	8010700 <SDMMC_GetCmdResp1>
 80101e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80101ea:	69fb      	ldr	r3, [r7, #28]
}
 80101ec:	4618      	mov	r0, r3
 80101ee:	3720      	adds	r7, #32
 80101f0:	46bd      	mov	sp, r7
 80101f2:	bd80      	pop	{r7, pc}

080101f4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80101f4:	b580      	push	{r7, lr}
 80101f6:	b088      	sub	sp, #32
 80101f8:	af00      	add	r7, sp, #0
 80101fa:	6078      	str	r0, [r7, #4]
 80101fc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80101fe:	683b      	ldr	r3, [r7, #0]
 8010200:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8010202:	2312      	movs	r3, #18
 8010204:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010206:	f44f 7380 	mov.w	r3, #256	; 0x100
 801020a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801020c:	2300      	movs	r3, #0
 801020e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010210:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010214:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010216:	f107 0308 	add.w	r3, r7, #8
 801021a:	4619      	mov	r1, r3
 801021c:	6878      	ldr	r0, [r7, #4]
 801021e:	f7ff ff2d 	bl	801007c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8010222:	f241 3288 	movw	r2, #5000	; 0x1388
 8010226:	2112      	movs	r1, #18
 8010228:	6878      	ldr	r0, [r7, #4]
 801022a:	f000 fa69 	bl	8010700 <SDMMC_GetCmdResp1>
 801022e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010230:	69fb      	ldr	r3, [r7, #28]
}
 8010232:	4618      	mov	r0, r3
 8010234:	3720      	adds	r7, #32
 8010236:	46bd      	mov	sp, r7
 8010238:	bd80      	pop	{r7, pc}

0801023a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 801023a:	b580      	push	{r7, lr}
 801023c:	b088      	sub	sp, #32
 801023e:	af00      	add	r7, sp, #0
 8010240:	6078      	str	r0, [r7, #4]
 8010242:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010244:	683b      	ldr	r3, [r7, #0]
 8010246:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8010248:	2318      	movs	r3, #24
 801024a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801024c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010250:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010252:	2300      	movs	r3, #0
 8010254:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010256:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801025a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801025c:	f107 0308 	add.w	r3, r7, #8
 8010260:	4619      	mov	r1, r3
 8010262:	6878      	ldr	r0, [r7, #4]
 8010264:	f7ff ff0a 	bl	801007c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8010268:	f241 3288 	movw	r2, #5000	; 0x1388
 801026c:	2118      	movs	r1, #24
 801026e:	6878      	ldr	r0, [r7, #4]
 8010270:	f000 fa46 	bl	8010700 <SDMMC_GetCmdResp1>
 8010274:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010276:	69fb      	ldr	r3, [r7, #28]
}
 8010278:	4618      	mov	r0, r3
 801027a:	3720      	adds	r7, #32
 801027c:	46bd      	mov	sp, r7
 801027e:	bd80      	pop	{r7, pc}

08010280 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8010280:	b580      	push	{r7, lr}
 8010282:	b088      	sub	sp, #32
 8010284:	af00      	add	r7, sp, #0
 8010286:	6078      	str	r0, [r7, #4]
 8010288:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801028a:	683b      	ldr	r3, [r7, #0]
 801028c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 801028e:	2319      	movs	r3, #25
 8010290:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010292:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010296:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010298:	2300      	movs	r3, #0
 801029a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801029c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80102a0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80102a2:	f107 0308 	add.w	r3, r7, #8
 80102a6:	4619      	mov	r1, r3
 80102a8:	6878      	ldr	r0, [r7, #4]
 80102aa:	f7ff fee7 	bl	801007c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80102ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80102b2:	2119      	movs	r1, #25
 80102b4:	6878      	ldr	r0, [r7, #4]
 80102b6:	f000 fa23 	bl	8010700 <SDMMC_GetCmdResp1>
 80102ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80102bc:	69fb      	ldr	r3, [r7, #28]
}
 80102be:	4618      	mov	r0, r3
 80102c0:	3720      	adds	r7, #32
 80102c2:	46bd      	mov	sp, r7
 80102c4:	bd80      	pop	{r7, pc}
	...

080102c8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80102c8:	b580      	push	{r7, lr}
 80102ca:	b088      	sub	sp, #32
 80102cc:	af00      	add	r7, sp, #0
 80102ce:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80102d0:	2300      	movs	r3, #0
 80102d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80102d4:	230c      	movs	r3, #12
 80102d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80102d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80102dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80102de:	2300      	movs	r3, #0
 80102e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80102e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80102e6:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	68db      	ldr	r3, [r3, #12]
 80102ec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	68db      	ldr	r3, [r3, #12]
 80102f8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010300:	f107 0308 	add.w	r3, r7, #8
 8010304:	4619      	mov	r1, r3
 8010306:	6878      	ldr	r0, [r7, #4]
 8010308:	f7ff feb8 	bl	801007c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 801030c:	4a0b      	ldr	r2, [pc, #44]	; (801033c <SDMMC_CmdStopTransfer+0x74>)
 801030e:	210c      	movs	r1, #12
 8010310:	6878      	ldr	r0, [r7, #4]
 8010312:	f000 f9f5 	bl	8010700 <SDMMC_GetCmdResp1>
 8010316:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	68db      	ldr	r3, [r3, #12]
 801031c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8010324:	69fb      	ldr	r3, [r7, #28]
 8010326:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801032a:	d101      	bne.n	8010330 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 801032c:	2300      	movs	r3, #0
 801032e:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8010330:	69fb      	ldr	r3, [r7, #28]
}
 8010332:	4618      	mov	r0, r3
 8010334:	3720      	adds	r7, #32
 8010336:	46bd      	mov	sp, r7
 8010338:	bd80      	pop	{r7, pc}
 801033a:	bf00      	nop
 801033c:	05f5e100 	.word	0x05f5e100

08010340 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8010340:	b580      	push	{r7, lr}
 8010342:	b08a      	sub	sp, #40	; 0x28
 8010344:	af00      	add	r7, sp, #0
 8010346:	60f8      	str	r0, [r7, #12]
 8010348:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 801034c:	683b      	ldr	r3, [r7, #0]
 801034e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8010350:	2307      	movs	r3, #7
 8010352:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010354:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010358:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801035a:	2300      	movs	r3, #0
 801035c:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801035e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010362:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010364:	f107 0310 	add.w	r3, r7, #16
 8010368:	4619      	mov	r1, r3
 801036a:	68f8      	ldr	r0, [r7, #12]
 801036c:	f7ff fe86 	bl	801007c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8010370:	f241 3288 	movw	r2, #5000	; 0x1388
 8010374:	2107      	movs	r1, #7
 8010376:	68f8      	ldr	r0, [r7, #12]
 8010378:	f000 f9c2 	bl	8010700 <SDMMC_GetCmdResp1>
 801037c:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 801037e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010380:	4618      	mov	r0, r3
 8010382:	3728      	adds	r7, #40	; 0x28
 8010384:	46bd      	mov	sp, r7
 8010386:	bd80      	pop	{r7, pc}

08010388 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8010388:	b580      	push	{r7, lr}
 801038a:	b088      	sub	sp, #32
 801038c:	af00      	add	r7, sp, #0
 801038e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8010390:	2300      	movs	r3, #0
 8010392:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8010394:	2300      	movs	r3, #0
 8010396:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8010398:	2300      	movs	r3, #0
 801039a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801039c:	2300      	movs	r3, #0
 801039e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80103a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80103a4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80103a6:	f107 0308 	add.w	r3, r7, #8
 80103aa:	4619      	mov	r1, r3
 80103ac:	6878      	ldr	r0, [r7, #4]
 80103ae:	f7ff fe65 	bl	801007c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80103b2:	6878      	ldr	r0, [r7, #4]
 80103b4:	f000 f976 	bl	80106a4 <SDMMC_GetCmdError>
 80103b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80103ba:	69fb      	ldr	r3, [r7, #28]
}
 80103bc:	4618      	mov	r0, r3
 80103be:	3720      	adds	r7, #32
 80103c0:	46bd      	mov	sp, r7
 80103c2:	bd80      	pop	{r7, pc}

080103c4 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80103c4:	b580      	push	{r7, lr}
 80103c6:	b088      	sub	sp, #32
 80103c8:	af00      	add	r7, sp, #0
 80103ca:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80103cc:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80103d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80103d2:	2308      	movs	r3, #8
 80103d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80103d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80103da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80103dc:	2300      	movs	r3, #0
 80103de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80103e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80103e4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80103e6:	f107 0308 	add.w	r3, r7, #8
 80103ea:	4619      	mov	r1, r3
 80103ec:	6878      	ldr	r0, [r7, #4]
 80103ee:	f7ff fe45 	bl	801007c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80103f2:	6878      	ldr	r0, [r7, #4]
 80103f4:	f000 fb78 	bl	8010ae8 <SDMMC_GetCmdResp7>
 80103f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80103fa:	69fb      	ldr	r3, [r7, #28]
}
 80103fc:	4618      	mov	r0, r3
 80103fe:	3720      	adds	r7, #32
 8010400:	46bd      	mov	sp, r7
 8010402:	bd80      	pop	{r7, pc}

08010404 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010404:	b580      	push	{r7, lr}
 8010406:	b088      	sub	sp, #32
 8010408:	af00      	add	r7, sp, #0
 801040a:	6078      	str	r0, [r7, #4]
 801040c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 801040e:	683b      	ldr	r3, [r7, #0]
 8010410:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8010412:	2337      	movs	r3, #55	; 0x37
 8010414:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010416:	f44f 7380 	mov.w	r3, #256	; 0x100
 801041a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801041c:	2300      	movs	r3, #0
 801041e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010420:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010424:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010426:	f107 0308 	add.w	r3, r7, #8
 801042a:	4619      	mov	r1, r3
 801042c:	6878      	ldr	r0, [r7, #4]
 801042e:	f7ff fe25 	bl	801007c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8010432:	f241 3288 	movw	r2, #5000	; 0x1388
 8010436:	2137      	movs	r1, #55	; 0x37
 8010438:	6878      	ldr	r0, [r7, #4]
 801043a:	f000 f961 	bl	8010700 <SDMMC_GetCmdResp1>
 801043e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010440:	69fb      	ldr	r3, [r7, #28]
}
 8010442:	4618      	mov	r0, r3
 8010444:	3720      	adds	r7, #32
 8010446:	46bd      	mov	sp, r7
 8010448:	bd80      	pop	{r7, pc}

0801044a <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801044a:	b580      	push	{r7, lr}
 801044c:	b088      	sub	sp, #32
 801044e:	af00      	add	r7, sp, #0
 8010450:	6078      	str	r0, [r7, #4]
 8010452:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8010454:	683b      	ldr	r3, [r7, #0]
 8010456:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8010458:	2329      	movs	r3, #41	; 0x29
 801045a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801045c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010460:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010462:	2300      	movs	r3, #0
 8010464:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010466:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801046a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801046c:	f107 0308 	add.w	r3, r7, #8
 8010470:	4619      	mov	r1, r3
 8010472:	6878      	ldr	r0, [r7, #4]
 8010474:	f7ff fe02 	bl	801007c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8010478:	6878      	ldr	r0, [r7, #4]
 801047a:	f000 fa7d 	bl	8010978 <SDMMC_GetCmdResp3>
 801047e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010480:	69fb      	ldr	r3, [r7, #28]
}
 8010482:	4618      	mov	r0, r3
 8010484:	3720      	adds	r7, #32
 8010486:	46bd      	mov	sp, r7
 8010488:	bd80      	pop	{r7, pc}

0801048a <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 801048a:	b580      	push	{r7, lr}
 801048c:	b088      	sub	sp, #32
 801048e:	af00      	add	r7, sp, #0
 8010490:	6078      	str	r0, [r7, #4]
 8010492:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8010494:	683b      	ldr	r3, [r7, #0]
 8010496:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8010498:	2306      	movs	r3, #6
 801049a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801049c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80104a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80104a2:	2300      	movs	r3, #0
 80104a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80104a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80104aa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80104ac:	f107 0308 	add.w	r3, r7, #8
 80104b0:	4619      	mov	r1, r3
 80104b2:	6878      	ldr	r0, [r7, #4]
 80104b4:	f7ff fde2 	bl	801007c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80104b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80104bc:	2106      	movs	r1, #6
 80104be:	6878      	ldr	r0, [r7, #4]
 80104c0:	f000 f91e 	bl	8010700 <SDMMC_GetCmdResp1>
 80104c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80104c6:	69fb      	ldr	r3, [r7, #28]
}
 80104c8:	4618      	mov	r0, r3
 80104ca:	3720      	adds	r7, #32
 80104cc:	46bd      	mov	sp, r7
 80104ce:	bd80      	pop	{r7, pc}

080104d0 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80104d0:	b580      	push	{r7, lr}
 80104d2:	b088      	sub	sp, #32
 80104d4:	af00      	add	r7, sp, #0
 80104d6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80104d8:	2300      	movs	r3, #0
 80104da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80104dc:	2333      	movs	r3, #51	; 0x33
 80104de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80104e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80104e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80104e6:	2300      	movs	r3, #0
 80104e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80104ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80104ee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80104f0:	f107 0308 	add.w	r3, r7, #8
 80104f4:	4619      	mov	r1, r3
 80104f6:	6878      	ldr	r0, [r7, #4]
 80104f8:	f7ff fdc0 	bl	801007c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80104fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8010500:	2133      	movs	r1, #51	; 0x33
 8010502:	6878      	ldr	r0, [r7, #4]
 8010504:	f000 f8fc 	bl	8010700 <SDMMC_GetCmdResp1>
 8010508:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801050a:	69fb      	ldr	r3, [r7, #28]
}
 801050c:	4618      	mov	r0, r3
 801050e:	3720      	adds	r7, #32
 8010510:	46bd      	mov	sp, r7
 8010512:	bd80      	pop	{r7, pc}

08010514 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8010514:	b580      	push	{r7, lr}
 8010516:	b088      	sub	sp, #32
 8010518:	af00      	add	r7, sp, #0
 801051a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 801051c:	2300      	movs	r3, #0
 801051e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8010520:	2302      	movs	r3, #2
 8010522:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8010524:	f44f 7340 	mov.w	r3, #768	; 0x300
 8010528:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801052a:	2300      	movs	r3, #0
 801052c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801052e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010532:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010534:	f107 0308 	add.w	r3, r7, #8
 8010538:	4619      	mov	r1, r3
 801053a:	6878      	ldr	r0, [r7, #4]
 801053c:	f7ff fd9e 	bl	801007c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8010540:	6878      	ldr	r0, [r7, #4]
 8010542:	f000 f9cf 	bl	80108e4 <SDMMC_GetCmdResp2>
 8010546:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010548:	69fb      	ldr	r3, [r7, #28]
}
 801054a:	4618      	mov	r0, r3
 801054c:	3720      	adds	r7, #32
 801054e:	46bd      	mov	sp, r7
 8010550:	bd80      	pop	{r7, pc}

08010552 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010552:	b580      	push	{r7, lr}
 8010554:	b088      	sub	sp, #32
 8010556:	af00      	add	r7, sp, #0
 8010558:	6078      	str	r0, [r7, #4]
 801055a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 801055c:	683b      	ldr	r3, [r7, #0]
 801055e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8010560:	2309      	movs	r3, #9
 8010562:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8010564:	f44f 7340 	mov.w	r3, #768	; 0x300
 8010568:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801056a:	2300      	movs	r3, #0
 801056c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801056e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010572:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010574:	f107 0308 	add.w	r3, r7, #8
 8010578:	4619      	mov	r1, r3
 801057a:	6878      	ldr	r0, [r7, #4]
 801057c:	f7ff fd7e 	bl	801007c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8010580:	6878      	ldr	r0, [r7, #4]
 8010582:	f000 f9af 	bl	80108e4 <SDMMC_GetCmdResp2>
 8010586:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010588:	69fb      	ldr	r3, [r7, #28]
}
 801058a:	4618      	mov	r0, r3
 801058c:	3720      	adds	r7, #32
 801058e:	46bd      	mov	sp, r7
 8010590:	bd80      	pop	{r7, pc}

08010592 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8010592:	b580      	push	{r7, lr}
 8010594:	b088      	sub	sp, #32
 8010596:	af00      	add	r7, sp, #0
 8010598:	6078      	str	r0, [r7, #4]
 801059a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 801059c:	2300      	movs	r3, #0
 801059e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80105a0:	2303      	movs	r3, #3
 80105a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80105a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80105a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80105aa:	2300      	movs	r3, #0
 80105ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80105ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80105b2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80105b4:	f107 0308 	add.w	r3, r7, #8
 80105b8:	4619      	mov	r1, r3
 80105ba:	6878      	ldr	r0, [r7, #4]
 80105bc:	f7ff fd5e 	bl	801007c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80105c0:	683a      	ldr	r2, [r7, #0]
 80105c2:	2103      	movs	r1, #3
 80105c4:	6878      	ldr	r0, [r7, #4]
 80105c6:	f000 fa17 	bl	80109f8 <SDMMC_GetCmdResp6>
 80105ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80105cc:	69fb      	ldr	r3, [r7, #28]
}
 80105ce:	4618      	mov	r0, r3
 80105d0:	3720      	adds	r7, #32
 80105d2:	46bd      	mov	sp, r7
 80105d4:	bd80      	pop	{r7, pc}

080105d6 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80105d6:	b580      	push	{r7, lr}
 80105d8:	b088      	sub	sp, #32
 80105da:	af00      	add	r7, sp, #0
 80105dc:	6078      	str	r0, [r7, #4]
 80105de:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80105e0:	683b      	ldr	r3, [r7, #0]
 80105e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80105e4:	230d      	movs	r3, #13
 80105e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80105e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80105ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80105ee:	2300      	movs	r3, #0
 80105f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80105f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80105f6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80105f8:	f107 0308 	add.w	r3, r7, #8
 80105fc:	4619      	mov	r1, r3
 80105fe:	6878      	ldr	r0, [r7, #4]
 8010600:	f7ff fd3c 	bl	801007c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8010604:	f241 3288 	movw	r2, #5000	; 0x1388
 8010608:	210d      	movs	r1, #13
 801060a:	6878      	ldr	r0, [r7, #4]
 801060c:	f000 f878 	bl	8010700 <SDMMC_GetCmdResp1>
 8010610:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010612:	69fb      	ldr	r3, [r7, #28]
}
 8010614:	4618      	mov	r0, r3
 8010616:	3720      	adds	r7, #32
 8010618:	46bd      	mov	sp, r7
 801061a:	bd80      	pop	{r7, pc}

0801061c <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 801061c:	b580      	push	{r7, lr}
 801061e:	b088      	sub	sp, #32
 8010620:	af00      	add	r7, sp, #0
 8010622:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8010624:	2300      	movs	r3, #0
 8010626:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8010628:	230d      	movs	r3, #13
 801062a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801062c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010630:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010632:	2300      	movs	r3, #0
 8010634:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010636:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801063a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801063c:	f107 0308 	add.w	r3, r7, #8
 8010640:	4619      	mov	r1, r3
 8010642:	6878      	ldr	r0, [r7, #4]
 8010644:	f7ff fd1a 	bl	801007c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8010648:	f241 3288 	movw	r2, #5000	; 0x1388
 801064c:	210d      	movs	r1, #13
 801064e:	6878      	ldr	r0, [r7, #4]
 8010650:	f000 f856 	bl	8010700 <SDMMC_GetCmdResp1>
 8010654:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010656:	69fb      	ldr	r3, [r7, #28]
}
 8010658:	4618      	mov	r0, r3
 801065a:	3720      	adds	r7, #32
 801065c:	46bd      	mov	sp, r7
 801065e:	bd80      	pop	{r7, pc}

08010660 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 8010660:	b580      	push	{r7, lr}
 8010662:	b088      	sub	sp, #32
 8010664:	af00      	add	r7, sp, #0
 8010666:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 8010668:	2300      	movs	r3, #0
 801066a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 801066c:	230b      	movs	r3, #11
 801066e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010670:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010674:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010676:	2300      	movs	r3, #0
 8010678:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801067a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801067e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010680:	f107 0308 	add.w	r3, r7, #8
 8010684:	4619      	mov	r1, r3
 8010686:	6878      	ldr	r0, [r7, #4]
 8010688:	f7ff fcf8 	bl	801007c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 801068c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010690:	210b      	movs	r1, #11
 8010692:	6878      	ldr	r0, [r7, #4]
 8010694:	f000 f834 	bl	8010700 <SDMMC_GetCmdResp1>
 8010698:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801069a:	69fb      	ldr	r3, [r7, #28]
}
 801069c:	4618      	mov	r0, r3
 801069e:	3720      	adds	r7, #32
 80106a0:	46bd      	mov	sp, r7
 80106a2:	bd80      	pop	{r7, pc}

080106a4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80106a4:	b480      	push	{r7}
 80106a6:	b085      	sub	sp, #20
 80106a8:	af00      	add	r7, sp, #0
 80106aa:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80106ac:	4b11      	ldr	r3, [pc, #68]	; (80106f4 <SDMMC_GetCmdError+0x50>)
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	4a11      	ldr	r2, [pc, #68]	; (80106f8 <SDMMC_GetCmdError+0x54>)
 80106b2:	fba2 2303 	umull	r2, r3, r2, r3
 80106b6:	0a5b      	lsrs	r3, r3, #9
 80106b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80106bc:	fb02 f303 	mul.w	r3, r2, r3
 80106c0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	1e5a      	subs	r2, r3, #1
 80106c6:	60fa      	str	r2, [r7, #12]
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d102      	bne.n	80106d2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80106cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80106d0:	e009      	b.n	80106e6 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80106d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d0f1      	beq.n	80106c2 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	4a06      	ldr	r2, [pc, #24]	; (80106fc <SDMMC_GetCmdError+0x58>)
 80106e2:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 80106e4:	2300      	movs	r3, #0
}
 80106e6:	4618      	mov	r0, r3
 80106e8:	3714      	adds	r7, #20
 80106ea:	46bd      	mov	sp, r7
 80106ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f0:	4770      	bx	lr
 80106f2:	bf00      	nop
 80106f4:	2400000c 	.word	0x2400000c
 80106f8:	10624dd3 	.word	0x10624dd3
 80106fc:	002000c5 	.word	0x002000c5

08010700 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8010700:	b580      	push	{r7, lr}
 8010702:	b088      	sub	sp, #32
 8010704:	af00      	add	r7, sp, #0
 8010706:	60f8      	str	r0, [r7, #12]
 8010708:	460b      	mov	r3, r1
 801070a:	607a      	str	r2, [r7, #4]
 801070c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801070e:	4b70      	ldr	r3, [pc, #448]	; (80108d0 <SDMMC_GetCmdResp1+0x1d0>)
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	4a70      	ldr	r2, [pc, #448]	; (80108d4 <SDMMC_GetCmdResp1+0x1d4>)
 8010714:	fba2 2303 	umull	r2, r3, r2, r3
 8010718:	0a5a      	lsrs	r2, r3, #9
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	fb02 f303 	mul.w	r3, r2, r3
 8010720:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8010722:	69fb      	ldr	r3, [r7, #28]
 8010724:	1e5a      	subs	r2, r3, #1
 8010726:	61fa      	str	r2, [r7, #28]
 8010728:	2b00      	cmp	r3, #0
 801072a:	d102      	bne.n	8010732 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 801072c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010730:	e0c9      	b.n	80108c6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010736:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8010738:	69ba      	ldr	r2, [r7, #24]
 801073a:	4b67      	ldr	r3, [pc, #412]	; (80108d8 <SDMMC_GetCmdResp1+0x1d8>)
 801073c:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801073e:	2b00      	cmp	r3, #0
 8010740:	d0ef      	beq.n	8010722 <SDMMC_GetCmdResp1+0x22>
 8010742:	69bb      	ldr	r3, [r7, #24]
 8010744:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8010748:	2b00      	cmp	r3, #0
 801074a:	d1ea      	bne.n	8010722 <SDMMC_GetCmdResp1+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801074c:	68fb      	ldr	r3, [r7, #12]
 801074e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010750:	f003 0304 	and.w	r3, r3, #4
 8010754:	2b00      	cmp	r3, #0
 8010756:	d004      	beq.n	8010762 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010758:	68fb      	ldr	r3, [r7, #12]
 801075a:	2204      	movs	r2, #4
 801075c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801075e:	2304      	movs	r3, #4
 8010760:	e0b1      	b.n	80108c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010766:	f003 0301 	and.w	r3, r3, #1
 801076a:	2b00      	cmp	r3, #0
 801076c:	d004      	beq.n	8010778 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801076e:	68fb      	ldr	r3, [r7, #12]
 8010770:	2201      	movs	r2, #1
 8010772:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010774:	2301      	movs	r3, #1
 8010776:	e0a6      	b.n	80108c6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	4a58      	ldr	r2, [pc, #352]	; (80108dc <SDMMC_GetCmdResp1+0x1dc>)
 801077c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801077e:	68f8      	ldr	r0, [r7, #12]
 8010780:	f7ff fca6 	bl	80100d0 <SDMMC_GetCommandResponse>
 8010784:	4603      	mov	r3, r0
 8010786:	461a      	mov	r2, r3
 8010788:	7afb      	ldrb	r3, [r7, #11]
 801078a:	4293      	cmp	r3, r2
 801078c:	d001      	beq.n	8010792 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801078e:	2301      	movs	r3, #1
 8010790:	e099      	b.n	80108c6 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8010792:	2100      	movs	r1, #0
 8010794:	68f8      	ldr	r0, [r7, #12]
 8010796:	f7ff fca8 	bl	80100ea <SDMMC_GetResponse>
 801079a:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 801079c:	697a      	ldr	r2, [r7, #20]
 801079e:	4b50      	ldr	r3, [pc, #320]	; (80108e0 <SDMMC_GetCmdResp1+0x1e0>)
 80107a0:	4013      	ands	r3, r2
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d101      	bne.n	80107aa <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80107a6:	2300      	movs	r3, #0
 80107a8:	e08d      	b.n	80108c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80107aa:	697b      	ldr	r3, [r7, #20]
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	da02      	bge.n	80107b6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80107b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80107b4:	e087      	b.n	80108c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80107b6:	697b      	ldr	r3, [r7, #20]
 80107b8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d001      	beq.n	80107c4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80107c0:	2340      	movs	r3, #64	; 0x40
 80107c2:	e080      	b.n	80108c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80107c4:	697b      	ldr	r3, [r7, #20]
 80107c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d001      	beq.n	80107d2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80107ce:	2380      	movs	r3, #128	; 0x80
 80107d0:	e079      	b.n	80108c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80107d2:	697b      	ldr	r3, [r7, #20]
 80107d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d002      	beq.n	80107e2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80107dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80107e0:	e071      	b.n	80108c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80107e2:	697b      	ldr	r3, [r7, #20]
 80107e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d002      	beq.n	80107f2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80107ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80107f0:	e069      	b.n	80108c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80107f2:	697b      	ldr	r3, [r7, #20]
 80107f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d002      	beq.n	8010802 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80107fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010800:	e061      	b.n	80108c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010802:	697b      	ldr	r3, [r7, #20]
 8010804:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010808:	2b00      	cmp	r3, #0
 801080a:	d002      	beq.n	8010812 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 801080c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010810:	e059      	b.n	80108c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8010812:	697b      	ldr	r3, [r7, #20]
 8010814:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010818:	2b00      	cmp	r3, #0
 801081a:	d002      	beq.n	8010822 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 801081c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010820:	e051      	b.n	80108c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010822:	697b      	ldr	r3, [r7, #20]
 8010824:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010828:	2b00      	cmp	r3, #0
 801082a:	d002      	beq.n	8010832 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 801082c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010830:	e049      	b.n	80108c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010832:	697b      	ldr	r3, [r7, #20]
 8010834:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010838:	2b00      	cmp	r3, #0
 801083a:	d002      	beq.n	8010842 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 801083c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010840:	e041      	b.n	80108c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010842:	697b      	ldr	r3, [r7, #20]
 8010844:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010848:	2b00      	cmp	r3, #0
 801084a:	d002      	beq.n	8010852 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 801084c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010850:	e039      	b.n	80108c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010852:	697b      	ldr	r3, [r7, #20]
 8010854:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010858:	2b00      	cmp	r3, #0
 801085a:	d002      	beq.n	8010862 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 801085c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8010860:	e031      	b.n	80108c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010862:	697b      	ldr	r3, [r7, #20]
 8010864:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010868:	2b00      	cmp	r3, #0
 801086a:	d002      	beq.n	8010872 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 801086c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8010870:	e029      	b.n	80108c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010872:	697b      	ldr	r3, [r7, #20]
 8010874:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010878:	2b00      	cmp	r3, #0
 801087a:	d002      	beq.n	8010882 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 801087c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010880:	e021      	b.n	80108c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8010882:	697b      	ldr	r3, [r7, #20]
 8010884:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010888:	2b00      	cmp	r3, #0
 801088a:	d002      	beq.n	8010892 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 801088c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8010890:	e019      	b.n	80108c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8010892:	697b      	ldr	r3, [r7, #20]
 8010894:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010898:	2b00      	cmp	r3, #0
 801089a:	d002      	beq.n	80108a2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 801089c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80108a0:	e011      	b.n	80108c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80108a2:	697b      	ldr	r3, [r7, #20]
 80108a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d002      	beq.n	80108b2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80108ac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80108b0:	e009      	b.n	80108c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80108b2:	697b      	ldr	r3, [r7, #20]
 80108b4:	f003 0308 	and.w	r3, r3, #8
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d002      	beq.n	80108c2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80108bc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80108c0:	e001      	b.n	80108c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80108c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80108c6:	4618      	mov	r0, r3
 80108c8:	3720      	adds	r7, #32
 80108ca:	46bd      	mov	sp, r7
 80108cc:	bd80      	pop	{r7, pc}
 80108ce:	bf00      	nop
 80108d0:	2400000c 	.word	0x2400000c
 80108d4:	10624dd3 	.word	0x10624dd3
 80108d8:	00200045 	.word	0x00200045
 80108dc:	002000c5 	.word	0x002000c5
 80108e0:	fdffe008 	.word	0xfdffe008

080108e4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80108e4:	b480      	push	{r7}
 80108e6:	b085      	sub	sp, #20
 80108e8:	af00      	add	r7, sp, #0
 80108ea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80108ec:	4b1f      	ldr	r3, [pc, #124]	; (801096c <SDMMC_GetCmdResp2+0x88>)
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	4a1f      	ldr	r2, [pc, #124]	; (8010970 <SDMMC_GetCmdResp2+0x8c>)
 80108f2:	fba2 2303 	umull	r2, r3, r2, r3
 80108f6:	0a5b      	lsrs	r3, r3, #9
 80108f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80108fc:	fb02 f303 	mul.w	r3, r2, r3
 8010900:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010902:	68fb      	ldr	r3, [r7, #12]
 8010904:	1e5a      	subs	r2, r3, #1
 8010906:	60fa      	str	r2, [r7, #12]
 8010908:	2b00      	cmp	r3, #0
 801090a:	d102      	bne.n	8010912 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801090c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010910:	e026      	b.n	8010960 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010916:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010918:	68bb      	ldr	r3, [r7, #8]
 801091a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801091e:	2b00      	cmp	r3, #0
 8010920:	d0ef      	beq.n	8010902 <SDMMC_GetCmdResp2+0x1e>
 8010922:	68bb      	ldr	r3, [r7, #8]
 8010924:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010928:	2b00      	cmp	r3, #0
 801092a:	d1ea      	bne.n	8010902 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010930:	f003 0304 	and.w	r3, r3, #4
 8010934:	2b00      	cmp	r3, #0
 8010936:	d004      	beq.n	8010942 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	2204      	movs	r2, #4
 801093c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801093e:	2304      	movs	r3, #4
 8010940:	e00e      	b.n	8010960 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010946:	f003 0301 	and.w	r3, r3, #1
 801094a:	2b00      	cmp	r3, #0
 801094c:	d004      	beq.n	8010958 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	2201      	movs	r2, #1
 8010952:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010954:	2301      	movs	r3, #1
 8010956:	e003      	b.n	8010960 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	4a06      	ldr	r2, [pc, #24]	; (8010974 <SDMMC_GetCmdResp2+0x90>)
 801095c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801095e:	2300      	movs	r3, #0
}
 8010960:	4618      	mov	r0, r3
 8010962:	3714      	adds	r7, #20
 8010964:	46bd      	mov	sp, r7
 8010966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801096a:	4770      	bx	lr
 801096c:	2400000c 	.word	0x2400000c
 8010970:	10624dd3 	.word	0x10624dd3
 8010974:	002000c5 	.word	0x002000c5

08010978 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8010978:	b480      	push	{r7}
 801097a:	b085      	sub	sp, #20
 801097c:	af00      	add	r7, sp, #0
 801097e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010980:	4b1a      	ldr	r3, [pc, #104]	; (80109ec <SDMMC_GetCmdResp3+0x74>)
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	4a1a      	ldr	r2, [pc, #104]	; (80109f0 <SDMMC_GetCmdResp3+0x78>)
 8010986:	fba2 2303 	umull	r2, r3, r2, r3
 801098a:	0a5b      	lsrs	r3, r3, #9
 801098c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010990:	fb02 f303 	mul.w	r3, r2, r3
 8010994:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010996:	68fb      	ldr	r3, [r7, #12]
 8010998:	1e5a      	subs	r2, r3, #1
 801099a:	60fa      	str	r2, [r7, #12]
 801099c:	2b00      	cmp	r3, #0
 801099e:	d102      	bne.n	80109a6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80109a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80109a4:	e01b      	b.n	80109de <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80109aa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80109ac:	68bb      	ldr	r3, [r7, #8]
 80109ae:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d0ef      	beq.n	8010996 <SDMMC_GetCmdResp3+0x1e>
 80109b6:	68bb      	ldr	r3, [r7, #8]
 80109b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d1ea      	bne.n	8010996 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80109c4:	f003 0304 	and.w	r3, r3, #4
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d004      	beq.n	80109d6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	2204      	movs	r2, #4
 80109d0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80109d2:	2304      	movs	r3, #4
 80109d4:	e003      	b.n	80109de <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	4a06      	ldr	r2, [pc, #24]	; (80109f4 <SDMMC_GetCmdResp3+0x7c>)
 80109da:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80109dc:	2300      	movs	r3, #0
}
 80109de:	4618      	mov	r0, r3
 80109e0:	3714      	adds	r7, #20
 80109e2:	46bd      	mov	sp, r7
 80109e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109e8:	4770      	bx	lr
 80109ea:	bf00      	nop
 80109ec:	2400000c 	.word	0x2400000c
 80109f0:	10624dd3 	.word	0x10624dd3
 80109f4:	002000c5 	.word	0x002000c5

080109f8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80109f8:	b580      	push	{r7, lr}
 80109fa:	b088      	sub	sp, #32
 80109fc:	af00      	add	r7, sp, #0
 80109fe:	60f8      	str	r0, [r7, #12]
 8010a00:	460b      	mov	r3, r1
 8010a02:	607a      	str	r2, [r7, #4]
 8010a04:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010a06:	4b35      	ldr	r3, [pc, #212]	; (8010adc <SDMMC_GetCmdResp6+0xe4>)
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	4a35      	ldr	r2, [pc, #212]	; (8010ae0 <SDMMC_GetCmdResp6+0xe8>)
 8010a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8010a10:	0a5b      	lsrs	r3, r3, #9
 8010a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8010a16:	fb02 f303 	mul.w	r3, r2, r3
 8010a1a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8010a1c:	69fb      	ldr	r3, [r7, #28]
 8010a1e:	1e5a      	subs	r2, r3, #1
 8010a20:	61fa      	str	r2, [r7, #28]
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d102      	bne.n	8010a2c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010a26:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010a2a:	e052      	b.n	8010ad2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8010a2c:	68fb      	ldr	r3, [r7, #12]
 8010a2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a30:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010a32:	69bb      	ldr	r3, [r7, #24]
 8010a34:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d0ef      	beq.n	8010a1c <SDMMC_GetCmdResp6+0x24>
 8010a3c:	69bb      	ldr	r3, [r7, #24]
 8010a3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d1ea      	bne.n	8010a1c <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a4a:	f003 0304 	and.w	r3, r3, #4
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d004      	beq.n	8010a5c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010a52:	68fb      	ldr	r3, [r7, #12]
 8010a54:	2204      	movs	r2, #4
 8010a56:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010a58:	2304      	movs	r3, #4
 8010a5a:	e03a      	b.n	8010ad2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010a5c:	68fb      	ldr	r3, [r7, #12]
 8010a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a60:	f003 0301 	and.w	r3, r3, #1
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d004      	beq.n	8010a72 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010a68:	68fb      	ldr	r3, [r7, #12]
 8010a6a:	2201      	movs	r2, #1
 8010a6c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010a6e:	2301      	movs	r3, #1
 8010a70:	e02f      	b.n	8010ad2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010a72:	68f8      	ldr	r0, [r7, #12]
 8010a74:	f7ff fb2c 	bl	80100d0 <SDMMC_GetCommandResponse>
 8010a78:	4603      	mov	r3, r0
 8010a7a:	461a      	mov	r2, r3
 8010a7c:	7afb      	ldrb	r3, [r7, #11]
 8010a7e:	4293      	cmp	r3, r2
 8010a80:	d001      	beq.n	8010a86 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010a82:	2301      	movs	r3, #1
 8010a84:	e025      	b.n	8010ad2 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010a86:	68fb      	ldr	r3, [r7, #12]
 8010a88:	4a16      	ldr	r2, [pc, #88]	; (8010ae4 <SDMMC_GetCmdResp6+0xec>)
 8010a8a:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8010a8c:	2100      	movs	r1, #0
 8010a8e:	68f8      	ldr	r0, [r7, #12]
 8010a90:	f7ff fb2b 	bl	80100ea <SDMMC_GetResponse>
 8010a94:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8010a96:	697b      	ldr	r3, [r7, #20]
 8010a98:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d106      	bne.n	8010aae <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8010aa0:	697b      	ldr	r3, [r7, #20]
 8010aa2:	0c1b      	lsrs	r3, r3, #16
 8010aa4:	b29a      	uxth	r2, r3
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8010aaa:	2300      	movs	r3, #0
 8010aac:	e011      	b.n	8010ad2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8010aae:	697b      	ldr	r3, [r7, #20]
 8010ab0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d002      	beq.n	8010abe <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010ab8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010abc:	e009      	b.n	8010ad2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8010abe:	697b      	ldr	r3, [r7, #20]
 8010ac0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d002      	beq.n	8010ace <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010ac8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010acc:	e001      	b.n	8010ad2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010ace:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8010ad2:	4618      	mov	r0, r3
 8010ad4:	3720      	adds	r7, #32
 8010ad6:	46bd      	mov	sp, r7
 8010ad8:	bd80      	pop	{r7, pc}
 8010ada:	bf00      	nop
 8010adc:	2400000c 	.word	0x2400000c
 8010ae0:	10624dd3 	.word	0x10624dd3
 8010ae4:	002000c5 	.word	0x002000c5

08010ae8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8010ae8:	b480      	push	{r7}
 8010aea:	b085      	sub	sp, #20
 8010aec:	af00      	add	r7, sp, #0
 8010aee:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010af0:	4b22      	ldr	r3, [pc, #136]	; (8010b7c <SDMMC_GetCmdResp7+0x94>)
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	4a22      	ldr	r2, [pc, #136]	; (8010b80 <SDMMC_GetCmdResp7+0x98>)
 8010af6:	fba2 2303 	umull	r2, r3, r2, r3
 8010afa:	0a5b      	lsrs	r3, r3, #9
 8010afc:	f241 3288 	movw	r2, #5000	; 0x1388
 8010b00:	fb02 f303 	mul.w	r3, r2, r3
 8010b04:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010b06:	68fb      	ldr	r3, [r7, #12]
 8010b08:	1e5a      	subs	r2, r3, #1
 8010b0a:	60fa      	str	r2, [r7, #12]
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d102      	bne.n	8010b16 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010b10:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010b14:	e02c      	b.n	8010b70 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b1a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010b1c:	68bb      	ldr	r3, [r7, #8]
 8010b1e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d0ef      	beq.n	8010b06 <SDMMC_GetCmdResp7+0x1e>
 8010b26:	68bb      	ldr	r3, [r7, #8]
 8010b28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d1ea      	bne.n	8010b06 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b34:	f003 0304 	and.w	r3, r3, #4
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d004      	beq.n	8010b46 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	2204      	movs	r2, #4
 8010b40:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010b42:	2304      	movs	r3, #4
 8010b44:	e014      	b.n	8010b70 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b4a:	f003 0301 	and.w	r3, r3, #1
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d004      	beq.n	8010b5c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	2201      	movs	r2, #1
 8010b56:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010b58:	2301      	movs	r3, #1
 8010b5a:	e009      	b.n	8010b70 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d002      	beq.n	8010b6e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	2240      	movs	r2, #64	; 0x40
 8010b6c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8010b6e:	2300      	movs	r3, #0

}
 8010b70:	4618      	mov	r0, r3
 8010b72:	3714      	adds	r7, #20
 8010b74:	46bd      	mov	sp, r7
 8010b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b7a:	4770      	bx	lr
 8010b7c:	2400000c 	.word	0x2400000c
 8010b80:	10624dd3 	.word	0x10624dd3

08010b84 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010b84:	b084      	sub	sp, #16
 8010b86:	b580      	push	{r7, lr}
 8010b88:	b084      	sub	sp, #16
 8010b8a:	af00      	add	r7, sp, #0
 8010b8c:	6078      	str	r0, [r7, #4]
 8010b8e:	f107 001c 	add.w	r0, r7, #28
 8010b92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8010b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b98:	2b01      	cmp	r3, #1
 8010b9a:	d120      	bne.n	8010bde <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ba0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	68da      	ldr	r2, [r3, #12]
 8010bac:	4b25      	ldr	r3, [pc, #148]	; (8010c44 <USB_CoreInit+0xc0>)
 8010bae:	4013      	ands	r3, r2
 8010bb0:	687a      	ldr	r2, [r7, #4]
 8010bb2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	68db      	ldr	r3, [r3, #12]
 8010bb8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8010bc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010bc2:	2b01      	cmp	r3, #1
 8010bc4:	d105      	bne.n	8010bd2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	68db      	ldr	r3, [r3, #12]
 8010bca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8010bd2:	6878      	ldr	r0, [r7, #4]
 8010bd4:	f001 fabe 	bl	8012154 <USB_CoreReset>
 8010bd8:	4603      	mov	r3, r0
 8010bda:	73fb      	strb	r3, [r7, #15]
 8010bdc:	e01a      	b.n	8010c14 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	68db      	ldr	r3, [r3, #12]
 8010be2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8010bea:	6878      	ldr	r0, [r7, #4]
 8010bec:	f001 fab2 	bl	8012154 <USB_CoreReset>
 8010bf0:	4603      	mov	r3, r0
 8010bf2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8010bf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d106      	bne.n	8010c08 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010bfe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	639a      	str	r2, [r3, #56]	; 0x38
 8010c06:	e005      	b.n	8010c14 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c0c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8010c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c16:	2b01      	cmp	r3, #1
 8010c18:	d10b      	bne.n	8010c32 <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	689b      	ldr	r3, [r3, #8]
 8010c1e:	f043 0206 	orr.w	r2, r3, #6
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	689b      	ldr	r3, [r3, #8]
 8010c2a:	f043 0220 	orr.w	r2, r3, #32
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8010c32:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c34:	4618      	mov	r0, r3
 8010c36:	3710      	adds	r7, #16
 8010c38:	46bd      	mov	sp, r7
 8010c3a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010c3e:	b004      	add	sp, #16
 8010c40:	4770      	bx	lr
 8010c42:	bf00      	nop
 8010c44:	ffbdffbf 	.word	0xffbdffbf

08010c48 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8010c48:	b480      	push	{r7}
 8010c4a:	b087      	sub	sp, #28
 8010c4c:	af00      	add	r7, sp, #0
 8010c4e:	60f8      	str	r0, [r7, #12]
 8010c50:	60b9      	str	r1, [r7, #8]
 8010c52:	4613      	mov	r3, r2
 8010c54:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8010c56:	79fb      	ldrb	r3, [r7, #7]
 8010c58:	2b02      	cmp	r3, #2
 8010c5a:	d165      	bne.n	8010d28 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8010c5c:	68bb      	ldr	r3, [r7, #8]
 8010c5e:	4a41      	ldr	r2, [pc, #260]	; (8010d64 <USB_SetTurnaroundTime+0x11c>)
 8010c60:	4293      	cmp	r3, r2
 8010c62:	d906      	bls.n	8010c72 <USB_SetTurnaroundTime+0x2a>
 8010c64:	68bb      	ldr	r3, [r7, #8]
 8010c66:	4a40      	ldr	r2, [pc, #256]	; (8010d68 <USB_SetTurnaroundTime+0x120>)
 8010c68:	4293      	cmp	r3, r2
 8010c6a:	d802      	bhi.n	8010c72 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8010c6c:	230f      	movs	r3, #15
 8010c6e:	617b      	str	r3, [r7, #20]
 8010c70:	e062      	b.n	8010d38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8010c72:	68bb      	ldr	r3, [r7, #8]
 8010c74:	4a3c      	ldr	r2, [pc, #240]	; (8010d68 <USB_SetTurnaroundTime+0x120>)
 8010c76:	4293      	cmp	r3, r2
 8010c78:	d906      	bls.n	8010c88 <USB_SetTurnaroundTime+0x40>
 8010c7a:	68bb      	ldr	r3, [r7, #8]
 8010c7c:	4a3b      	ldr	r2, [pc, #236]	; (8010d6c <USB_SetTurnaroundTime+0x124>)
 8010c7e:	4293      	cmp	r3, r2
 8010c80:	d802      	bhi.n	8010c88 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8010c82:	230e      	movs	r3, #14
 8010c84:	617b      	str	r3, [r7, #20]
 8010c86:	e057      	b.n	8010d38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8010c88:	68bb      	ldr	r3, [r7, #8]
 8010c8a:	4a38      	ldr	r2, [pc, #224]	; (8010d6c <USB_SetTurnaroundTime+0x124>)
 8010c8c:	4293      	cmp	r3, r2
 8010c8e:	d906      	bls.n	8010c9e <USB_SetTurnaroundTime+0x56>
 8010c90:	68bb      	ldr	r3, [r7, #8]
 8010c92:	4a37      	ldr	r2, [pc, #220]	; (8010d70 <USB_SetTurnaroundTime+0x128>)
 8010c94:	4293      	cmp	r3, r2
 8010c96:	d802      	bhi.n	8010c9e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8010c98:	230d      	movs	r3, #13
 8010c9a:	617b      	str	r3, [r7, #20]
 8010c9c:	e04c      	b.n	8010d38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8010c9e:	68bb      	ldr	r3, [r7, #8]
 8010ca0:	4a33      	ldr	r2, [pc, #204]	; (8010d70 <USB_SetTurnaroundTime+0x128>)
 8010ca2:	4293      	cmp	r3, r2
 8010ca4:	d906      	bls.n	8010cb4 <USB_SetTurnaroundTime+0x6c>
 8010ca6:	68bb      	ldr	r3, [r7, #8]
 8010ca8:	4a32      	ldr	r2, [pc, #200]	; (8010d74 <USB_SetTurnaroundTime+0x12c>)
 8010caa:	4293      	cmp	r3, r2
 8010cac:	d802      	bhi.n	8010cb4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8010cae:	230c      	movs	r3, #12
 8010cb0:	617b      	str	r3, [r7, #20]
 8010cb2:	e041      	b.n	8010d38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8010cb4:	68bb      	ldr	r3, [r7, #8]
 8010cb6:	4a2f      	ldr	r2, [pc, #188]	; (8010d74 <USB_SetTurnaroundTime+0x12c>)
 8010cb8:	4293      	cmp	r3, r2
 8010cba:	d906      	bls.n	8010cca <USB_SetTurnaroundTime+0x82>
 8010cbc:	68bb      	ldr	r3, [r7, #8]
 8010cbe:	4a2e      	ldr	r2, [pc, #184]	; (8010d78 <USB_SetTurnaroundTime+0x130>)
 8010cc0:	4293      	cmp	r3, r2
 8010cc2:	d802      	bhi.n	8010cca <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8010cc4:	230b      	movs	r3, #11
 8010cc6:	617b      	str	r3, [r7, #20]
 8010cc8:	e036      	b.n	8010d38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8010cca:	68bb      	ldr	r3, [r7, #8]
 8010ccc:	4a2a      	ldr	r2, [pc, #168]	; (8010d78 <USB_SetTurnaroundTime+0x130>)
 8010cce:	4293      	cmp	r3, r2
 8010cd0:	d906      	bls.n	8010ce0 <USB_SetTurnaroundTime+0x98>
 8010cd2:	68bb      	ldr	r3, [r7, #8]
 8010cd4:	4a29      	ldr	r2, [pc, #164]	; (8010d7c <USB_SetTurnaroundTime+0x134>)
 8010cd6:	4293      	cmp	r3, r2
 8010cd8:	d802      	bhi.n	8010ce0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8010cda:	230a      	movs	r3, #10
 8010cdc:	617b      	str	r3, [r7, #20]
 8010cde:	e02b      	b.n	8010d38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8010ce0:	68bb      	ldr	r3, [r7, #8]
 8010ce2:	4a26      	ldr	r2, [pc, #152]	; (8010d7c <USB_SetTurnaroundTime+0x134>)
 8010ce4:	4293      	cmp	r3, r2
 8010ce6:	d906      	bls.n	8010cf6 <USB_SetTurnaroundTime+0xae>
 8010ce8:	68bb      	ldr	r3, [r7, #8]
 8010cea:	4a25      	ldr	r2, [pc, #148]	; (8010d80 <USB_SetTurnaroundTime+0x138>)
 8010cec:	4293      	cmp	r3, r2
 8010cee:	d802      	bhi.n	8010cf6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8010cf0:	2309      	movs	r3, #9
 8010cf2:	617b      	str	r3, [r7, #20]
 8010cf4:	e020      	b.n	8010d38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8010cf6:	68bb      	ldr	r3, [r7, #8]
 8010cf8:	4a21      	ldr	r2, [pc, #132]	; (8010d80 <USB_SetTurnaroundTime+0x138>)
 8010cfa:	4293      	cmp	r3, r2
 8010cfc:	d906      	bls.n	8010d0c <USB_SetTurnaroundTime+0xc4>
 8010cfe:	68bb      	ldr	r3, [r7, #8]
 8010d00:	4a20      	ldr	r2, [pc, #128]	; (8010d84 <USB_SetTurnaroundTime+0x13c>)
 8010d02:	4293      	cmp	r3, r2
 8010d04:	d802      	bhi.n	8010d0c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8010d06:	2308      	movs	r3, #8
 8010d08:	617b      	str	r3, [r7, #20]
 8010d0a:	e015      	b.n	8010d38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8010d0c:	68bb      	ldr	r3, [r7, #8]
 8010d0e:	4a1d      	ldr	r2, [pc, #116]	; (8010d84 <USB_SetTurnaroundTime+0x13c>)
 8010d10:	4293      	cmp	r3, r2
 8010d12:	d906      	bls.n	8010d22 <USB_SetTurnaroundTime+0xda>
 8010d14:	68bb      	ldr	r3, [r7, #8]
 8010d16:	4a1c      	ldr	r2, [pc, #112]	; (8010d88 <USB_SetTurnaroundTime+0x140>)
 8010d18:	4293      	cmp	r3, r2
 8010d1a:	d802      	bhi.n	8010d22 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8010d1c:	2307      	movs	r3, #7
 8010d1e:	617b      	str	r3, [r7, #20]
 8010d20:	e00a      	b.n	8010d38 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8010d22:	2306      	movs	r3, #6
 8010d24:	617b      	str	r3, [r7, #20]
 8010d26:	e007      	b.n	8010d38 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8010d28:	79fb      	ldrb	r3, [r7, #7]
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d102      	bne.n	8010d34 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8010d2e:	2309      	movs	r3, #9
 8010d30:	617b      	str	r3, [r7, #20]
 8010d32:	e001      	b.n	8010d38 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8010d34:	2309      	movs	r3, #9
 8010d36:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8010d38:	68fb      	ldr	r3, [r7, #12]
 8010d3a:	68db      	ldr	r3, [r3, #12]
 8010d3c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8010d40:	68fb      	ldr	r3, [r7, #12]
 8010d42:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8010d44:	68fb      	ldr	r3, [r7, #12]
 8010d46:	68da      	ldr	r2, [r3, #12]
 8010d48:	697b      	ldr	r3, [r7, #20]
 8010d4a:	029b      	lsls	r3, r3, #10
 8010d4c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8010d50:	431a      	orrs	r2, r3
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8010d56:	2300      	movs	r3, #0
}
 8010d58:	4618      	mov	r0, r3
 8010d5a:	371c      	adds	r7, #28
 8010d5c:	46bd      	mov	sp, r7
 8010d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d62:	4770      	bx	lr
 8010d64:	00d8acbf 	.word	0x00d8acbf
 8010d68:	00e4e1bf 	.word	0x00e4e1bf
 8010d6c:	00f423ff 	.word	0x00f423ff
 8010d70:	0106737f 	.word	0x0106737f
 8010d74:	011a499f 	.word	0x011a499f
 8010d78:	01312cff 	.word	0x01312cff
 8010d7c:	014ca43f 	.word	0x014ca43f
 8010d80:	016e35ff 	.word	0x016e35ff
 8010d84:	01a6ab1f 	.word	0x01a6ab1f
 8010d88:	01e847ff 	.word	0x01e847ff

08010d8c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010d8c:	b480      	push	{r7}
 8010d8e:	b083      	sub	sp, #12
 8010d90:	af00      	add	r7, sp, #0
 8010d92:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	689b      	ldr	r3, [r3, #8]
 8010d98:	f043 0201 	orr.w	r2, r3, #1
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010da0:	2300      	movs	r3, #0
}
 8010da2:	4618      	mov	r0, r3
 8010da4:	370c      	adds	r7, #12
 8010da6:	46bd      	mov	sp, r7
 8010da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dac:	4770      	bx	lr

08010dae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010dae:	b480      	push	{r7}
 8010db0:	b083      	sub	sp, #12
 8010db2:	af00      	add	r7, sp, #0
 8010db4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	689b      	ldr	r3, [r3, #8]
 8010dba:	f023 0201 	bic.w	r2, r3, #1
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010dc2:	2300      	movs	r3, #0
}
 8010dc4:	4618      	mov	r0, r3
 8010dc6:	370c      	adds	r7, #12
 8010dc8:	46bd      	mov	sp, r7
 8010dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dce:	4770      	bx	lr

08010dd0 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8010dd0:	b580      	push	{r7, lr}
 8010dd2:	b082      	sub	sp, #8
 8010dd4:	af00      	add	r7, sp, #0
 8010dd6:	6078      	str	r0, [r7, #4]
 8010dd8:	460b      	mov	r3, r1
 8010dda:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	68db      	ldr	r3, [r3, #12]
 8010de0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8010de8:	78fb      	ldrb	r3, [r7, #3]
 8010dea:	2b01      	cmp	r3, #1
 8010dec:	d106      	bne.n	8010dfc <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	68db      	ldr	r3, [r3, #12]
 8010df2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	60da      	str	r2, [r3, #12]
 8010dfa:	e00b      	b.n	8010e14 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8010dfc:	78fb      	ldrb	r3, [r7, #3]
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d106      	bne.n	8010e10 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	68db      	ldr	r3, [r3, #12]
 8010e06:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	60da      	str	r2, [r3, #12]
 8010e0e:	e001      	b.n	8010e14 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8010e10:	2301      	movs	r3, #1
 8010e12:	e003      	b.n	8010e1c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8010e14:	2032      	movs	r0, #50	; 0x32
 8010e16:	f7f2 fbc1 	bl	800359c <HAL_Delay>

  return HAL_OK;
 8010e1a:	2300      	movs	r3, #0
}
 8010e1c:	4618      	mov	r0, r3
 8010e1e:	3708      	adds	r7, #8
 8010e20:	46bd      	mov	sp, r7
 8010e22:	bd80      	pop	{r7, pc}

08010e24 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010e24:	b084      	sub	sp, #16
 8010e26:	b580      	push	{r7, lr}
 8010e28:	b086      	sub	sp, #24
 8010e2a:	af00      	add	r7, sp, #0
 8010e2c:	6078      	str	r0, [r7, #4]
 8010e2e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8010e32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8010e36:	2300      	movs	r3, #0
 8010e38:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8010e3e:	2300      	movs	r3, #0
 8010e40:	613b      	str	r3, [r7, #16]
 8010e42:	e009      	b.n	8010e58 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8010e44:	687a      	ldr	r2, [r7, #4]
 8010e46:	693b      	ldr	r3, [r7, #16]
 8010e48:	3340      	adds	r3, #64	; 0x40
 8010e4a:	009b      	lsls	r3, r3, #2
 8010e4c:	4413      	add	r3, r2
 8010e4e:	2200      	movs	r2, #0
 8010e50:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8010e52:	693b      	ldr	r3, [r7, #16]
 8010e54:	3301      	adds	r3, #1
 8010e56:	613b      	str	r3, [r7, #16]
 8010e58:	693b      	ldr	r3, [r7, #16]
 8010e5a:	2b0e      	cmp	r3, #14
 8010e5c:	d9f2      	bls.n	8010e44 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8010e5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d11c      	bne.n	8010e9e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010e64:	68fb      	ldr	r3, [r7, #12]
 8010e66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010e6a:	685b      	ldr	r3, [r3, #4]
 8010e6c:	68fa      	ldr	r2, [r7, #12]
 8010e6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010e72:	f043 0302 	orr.w	r3, r3, #2
 8010e76:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e7c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	681b      	ldr	r3, [r3, #0]
 8010e88:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	681b      	ldr	r3, [r3, #0]
 8010e94:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	601a      	str	r2, [r3, #0]
 8010e9c:	e005      	b.n	8010eaa <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ea2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8010eaa:	68fb      	ldr	r3, [r7, #12]
 8010eac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010eb0:	461a      	mov	r2, r3
 8010eb2:	2300      	movs	r3, #0
 8010eb4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8010eb6:	68fb      	ldr	r3, [r7, #12]
 8010eb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010ebc:	4619      	mov	r1, r3
 8010ebe:	68fb      	ldr	r3, [r7, #12]
 8010ec0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010ec4:	461a      	mov	r2, r3
 8010ec6:	680b      	ldr	r3, [r1, #0]
 8010ec8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8010eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ecc:	2b01      	cmp	r3, #1
 8010ece:	d10c      	bne.n	8010eea <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8010ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d104      	bne.n	8010ee0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8010ed6:	2100      	movs	r1, #0
 8010ed8:	6878      	ldr	r0, [r7, #4]
 8010eda:	f000 f949 	bl	8011170 <USB_SetDevSpeed>
 8010ede:	e008      	b.n	8010ef2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8010ee0:	2101      	movs	r1, #1
 8010ee2:	6878      	ldr	r0, [r7, #4]
 8010ee4:	f000 f944 	bl	8011170 <USB_SetDevSpeed>
 8010ee8:	e003      	b.n	8010ef2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8010eea:	2103      	movs	r1, #3
 8010eec:	6878      	ldr	r0, [r7, #4]
 8010eee:	f000 f93f 	bl	8011170 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8010ef2:	2110      	movs	r1, #16
 8010ef4:	6878      	ldr	r0, [r7, #4]
 8010ef6:	f000 f8f3 	bl	80110e0 <USB_FlushTxFifo>
 8010efa:	4603      	mov	r3, r0
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d001      	beq.n	8010f04 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8010f00:	2301      	movs	r3, #1
 8010f02:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8010f04:	6878      	ldr	r0, [r7, #4]
 8010f06:	f000 f911 	bl	801112c <USB_FlushRxFifo>
 8010f0a:	4603      	mov	r3, r0
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d001      	beq.n	8010f14 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8010f10:	2301      	movs	r3, #1
 8010f12:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8010f14:	68fb      	ldr	r3, [r7, #12]
 8010f16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010f1a:	461a      	mov	r2, r3
 8010f1c:	2300      	movs	r3, #0
 8010f1e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8010f20:	68fb      	ldr	r3, [r7, #12]
 8010f22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010f26:	461a      	mov	r2, r3
 8010f28:	2300      	movs	r3, #0
 8010f2a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8010f2c:	68fb      	ldr	r3, [r7, #12]
 8010f2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010f32:	461a      	mov	r2, r3
 8010f34:	2300      	movs	r3, #0
 8010f36:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010f38:	2300      	movs	r3, #0
 8010f3a:	613b      	str	r3, [r7, #16]
 8010f3c:	e043      	b.n	8010fc6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010f3e:	693b      	ldr	r3, [r7, #16]
 8010f40:	015a      	lsls	r2, r3, #5
 8010f42:	68fb      	ldr	r3, [r7, #12]
 8010f44:	4413      	add	r3, r2
 8010f46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010f50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010f54:	d118      	bne.n	8010f88 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8010f56:	693b      	ldr	r3, [r7, #16]
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d10a      	bne.n	8010f72 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8010f5c:	693b      	ldr	r3, [r7, #16]
 8010f5e:	015a      	lsls	r2, r3, #5
 8010f60:	68fb      	ldr	r3, [r7, #12]
 8010f62:	4413      	add	r3, r2
 8010f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010f68:	461a      	mov	r2, r3
 8010f6a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8010f6e:	6013      	str	r3, [r2, #0]
 8010f70:	e013      	b.n	8010f9a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8010f72:	693b      	ldr	r3, [r7, #16]
 8010f74:	015a      	lsls	r2, r3, #5
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	4413      	add	r3, r2
 8010f7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010f7e:	461a      	mov	r2, r3
 8010f80:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8010f84:	6013      	str	r3, [r2, #0]
 8010f86:	e008      	b.n	8010f9a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8010f88:	693b      	ldr	r3, [r7, #16]
 8010f8a:	015a      	lsls	r2, r3, #5
 8010f8c:	68fb      	ldr	r3, [r7, #12]
 8010f8e:	4413      	add	r3, r2
 8010f90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010f94:	461a      	mov	r2, r3
 8010f96:	2300      	movs	r3, #0
 8010f98:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8010f9a:	693b      	ldr	r3, [r7, #16]
 8010f9c:	015a      	lsls	r2, r3, #5
 8010f9e:	68fb      	ldr	r3, [r7, #12]
 8010fa0:	4413      	add	r3, r2
 8010fa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010fa6:	461a      	mov	r2, r3
 8010fa8:	2300      	movs	r3, #0
 8010faa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8010fac:	693b      	ldr	r3, [r7, #16]
 8010fae:	015a      	lsls	r2, r3, #5
 8010fb0:	68fb      	ldr	r3, [r7, #12]
 8010fb2:	4413      	add	r3, r2
 8010fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010fb8:	461a      	mov	r2, r3
 8010fba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8010fbe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010fc0:	693b      	ldr	r3, [r7, #16]
 8010fc2:	3301      	adds	r3, #1
 8010fc4:	613b      	str	r3, [r7, #16]
 8010fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fc8:	693a      	ldr	r2, [r7, #16]
 8010fca:	429a      	cmp	r2, r3
 8010fcc:	d3b7      	bcc.n	8010f3e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010fce:	2300      	movs	r3, #0
 8010fd0:	613b      	str	r3, [r7, #16]
 8010fd2:	e043      	b.n	801105c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010fd4:	693b      	ldr	r3, [r7, #16]
 8010fd6:	015a      	lsls	r2, r3, #5
 8010fd8:	68fb      	ldr	r3, [r7, #12]
 8010fda:	4413      	add	r3, r2
 8010fdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010fe6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010fea:	d118      	bne.n	801101e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8010fec:	693b      	ldr	r3, [r7, #16]
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d10a      	bne.n	8011008 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8010ff2:	693b      	ldr	r3, [r7, #16]
 8010ff4:	015a      	lsls	r2, r3, #5
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	4413      	add	r3, r2
 8010ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ffe:	461a      	mov	r2, r3
 8011000:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8011004:	6013      	str	r3, [r2, #0]
 8011006:	e013      	b.n	8011030 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8011008:	693b      	ldr	r3, [r7, #16]
 801100a:	015a      	lsls	r2, r3, #5
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	4413      	add	r3, r2
 8011010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011014:	461a      	mov	r2, r3
 8011016:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801101a:	6013      	str	r3, [r2, #0]
 801101c:	e008      	b.n	8011030 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801101e:	693b      	ldr	r3, [r7, #16]
 8011020:	015a      	lsls	r2, r3, #5
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	4413      	add	r3, r2
 8011026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801102a:	461a      	mov	r2, r3
 801102c:	2300      	movs	r3, #0
 801102e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8011030:	693b      	ldr	r3, [r7, #16]
 8011032:	015a      	lsls	r2, r3, #5
 8011034:	68fb      	ldr	r3, [r7, #12]
 8011036:	4413      	add	r3, r2
 8011038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801103c:	461a      	mov	r2, r3
 801103e:	2300      	movs	r3, #0
 8011040:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8011042:	693b      	ldr	r3, [r7, #16]
 8011044:	015a      	lsls	r2, r3, #5
 8011046:	68fb      	ldr	r3, [r7, #12]
 8011048:	4413      	add	r3, r2
 801104a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801104e:	461a      	mov	r2, r3
 8011050:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8011054:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011056:	693b      	ldr	r3, [r7, #16]
 8011058:	3301      	adds	r3, #1
 801105a:	613b      	str	r3, [r7, #16]
 801105c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801105e:	693a      	ldr	r2, [r7, #16]
 8011060:	429a      	cmp	r2, r3
 8011062:	d3b7      	bcc.n	8010fd4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801106a:	691b      	ldr	r3, [r3, #16]
 801106c:	68fa      	ldr	r2, [r7, #12]
 801106e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011072:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011076:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	2200      	movs	r2, #0
 801107c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8011084:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8011086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011088:	2b00      	cmp	r3, #0
 801108a:	d105      	bne.n	8011098 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	699b      	ldr	r3, [r3, #24]
 8011090:	f043 0210 	orr.w	r2, r3, #16
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	699a      	ldr	r2, [r3, #24]
 801109c:	4b0e      	ldr	r3, [pc, #56]	; (80110d8 <USB_DevInit+0x2b4>)
 801109e:	4313      	orrs	r3, r2
 80110a0:	687a      	ldr	r2, [r7, #4]
 80110a2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80110a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d005      	beq.n	80110b6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	699b      	ldr	r3, [r3, #24]
 80110ae:	f043 0208 	orr.w	r2, r3, #8
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80110b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80110b8:	2b01      	cmp	r3, #1
 80110ba:	d105      	bne.n	80110c8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	699a      	ldr	r2, [r3, #24]
 80110c0:	4b06      	ldr	r3, [pc, #24]	; (80110dc <USB_DevInit+0x2b8>)
 80110c2:	4313      	orrs	r3, r2
 80110c4:	687a      	ldr	r2, [r7, #4]
 80110c6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80110c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80110ca:	4618      	mov	r0, r3
 80110cc:	3718      	adds	r7, #24
 80110ce:	46bd      	mov	sp, r7
 80110d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80110d4:	b004      	add	sp, #16
 80110d6:	4770      	bx	lr
 80110d8:	803c3800 	.word	0x803c3800
 80110dc:	40000004 	.word	0x40000004

080110e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80110e0:	b480      	push	{r7}
 80110e2:	b085      	sub	sp, #20
 80110e4:	af00      	add	r7, sp, #0
 80110e6:	6078      	str	r0, [r7, #4]
 80110e8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80110ea:	2300      	movs	r3, #0
 80110ec:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80110ee:	683b      	ldr	r3, [r7, #0]
 80110f0:	019b      	lsls	r3, r3, #6
 80110f2:	f043 0220 	orr.w	r2, r3, #32
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	3301      	adds	r3, #1
 80110fe:	60fb      	str	r3, [r7, #12]
 8011100:	68fb      	ldr	r3, [r7, #12]
 8011102:	4a09      	ldr	r2, [pc, #36]	; (8011128 <USB_FlushTxFifo+0x48>)
 8011104:	4293      	cmp	r3, r2
 8011106:	d901      	bls.n	801110c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8011108:	2303      	movs	r3, #3
 801110a:	e006      	b.n	801111a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	691b      	ldr	r3, [r3, #16]
 8011110:	f003 0320 	and.w	r3, r3, #32
 8011114:	2b20      	cmp	r3, #32
 8011116:	d0f0      	beq.n	80110fa <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8011118:	2300      	movs	r3, #0
}
 801111a:	4618      	mov	r0, r3
 801111c:	3714      	adds	r7, #20
 801111e:	46bd      	mov	sp, r7
 8011120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011124:	4770      	bx	lr
 8011126:	bf00      	nop
 8011128:	00030d40 	.word	0x00030d40

0801112c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 801112c:	b480      	push	{r7}
 801112e:	b085      	sub	sp, #20
 8011130:	af00      	add	r7, sp, #0
 8011132:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8011134:	2300      	movs	r3, #0
 8011136:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	2210      	movs	r2, #16
 801113c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	3301      	adds	r3, #1
 8011142:	60fb      	str	r3, [r7, #12]
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	4a09      	ldr	r2, [pc, #36]	; (801116c <USB_FlushRxFifo+0x40>)
 8011148:	4293      	cmp	r3, r2
 801114a:	d901      	bls.n	8011150 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 801114c:	2303      	movs	r3, #3
 801114e:	e006      	b.n	801115e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	691b      	ldr	r3, [r3, #16]
 8011154:	f003 0310 	and.w	r3, r3, #16
 8011158:	2b10      	cmp	r3, #16
 801115a:	d0f0      	beq.n	801113e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 801115c:	2300      	movs	r3, #0
}
 801115e:	4618      	mov	r0, r3
 8011160:	3714      	adds	r7, #20
 8011162:	46bd      	mov	sp, r7
 8011164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011168:	4770      	bx	lr
 801116a:	bf00      	nop
 801116c:	00030d40 	.word	0x00030d40

08011170 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8011170:	b480      	push	{r7}
 8011172:	b085      	sub	sp, #20
 8011174:	af00      	add	r7, sp, #0
 8011176:	6078      	str	r0, [r7, #4]
 8011178:	460b      	mov	r3, r1
 801117a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8011180:	68fb      	ldr	r3, [r7, #12]
 8011182:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011186:	681a      	ldr	r2, [r3, #0]
 8011188:	78fb      	ldrb	r3, [r7, #3]
 801118a:	68f9      	ldr	r1, [r7, #12]
 801118c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011190:	4313      	orrs	r3, r2
 8011192:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8011194:	2300      	movs	r3, #0
}
 8011196:	4618      	mov	r0, r3
 8011198:	3714      	adds	r7, #20
 801119a:	46bd      	mov	sp, r7
 801119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a0:	4770      	bx	lr

080111a2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80111a2:	b480      	push	{r7}
 80111a4:	b087      	sub	sp, #28
 80111a6:	af00      	add	r7, sp, #0
 80111a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80111ae:	693b      	ldr	r3, [r7, #16]
 80111b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80111b4:	689b      	ldr	r3, [r3, #8]
 80111b6:	f003 0306 	and.w	r3, r3, #6
 80111ba:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d102      	bne.n	80111c8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80111c2:	2300      	movs	r3, #0
 80111c4:	75fb      	strb	r3, [r7, #23]
 80111c6:	e00a      	b.n	80111de <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80111c8:	68fb      	ldr	r3, [r7, #12]
 80111ca:	2b02      	cmp	r3, #2
 80111cc:	d002      	beq.n	80111d4 <USB_GetDevSpeed+0x32>
 80111ce:	68fb      	ldr	r3, [r7, #12]
 80111d0:	2b06      	cmp	r3, #6
 80111d2:	d102      	bne.n	80111da <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80111d4:	2302      	movs	r3, #2
 80111d6:	75fb      	strb	r3, [r7, #23]
 80111d8:	e001      	b.n	80111de <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80111da:	230f      	movs	r3, #15
 80111dc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80111de:	7dfb      	ldrb	r3, [r7, #23]
}
 80111e0:	4618      	mov	r0, r3
 80111e2:	371c      	adds	r7, #28
 80111e4:	46bd      	mov	sp, r7
 80111e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ea:	4770      	bx	lr

080111ec <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80111ec:	b480      	push	{r7}
 80111ee:	b085      	sub	sp, #20
 80111f0:	af00      	add	r7, sp, #0
 80111f2:	6078      	str	r0, [r7, #4]
 80111f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80111fa:	683b      	ldr	r3, [r7, #0]
 80111fc:	781b      	ldrb	r3, [r3, #0]
 80111fe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011200:	683b      	ldr	r3, [r7, #0]
 8011202:	785b      	ldrb	r3, [r3, #1]
 8011204:	2b01      	cmp	r3, #1
 8011206:	d139      	bne.n	801127c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8011208:	68fb      	ldr	r3, [r7, #12]
 801120a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801120e:	69da      	ldr	r2, [r3, #28]
 8011210:	683b      	ldr	r3, [r7, #0]
 8011212:	781b      	ldrb	r3, [r3, #0]
 8011214:	f003 030f 	and.w	r3, r3, #15
 8011218:	2101      	movs	r1, #1
 801121a:	fa01 f303 	lsl.w	r3, r1, r3
 801121e:	b29b      	uxth	r3, r3
 8011220:	68f9      	ldr	r1, [r7, #12]
 8011222:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011226:	4313      	orrs	r3, r2
 8011228:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801122a:	68bb      	ldr	r3, [r7, #8]
 801122c:	015a      	lsls	r2, r3, #5
 801122e:	68fb      	ldr	r3, [r7, #12]
 8011230:	4413      	add	r3, r2
 8011232:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801123c:	2b00      	cmp	r3, #0
 801123e:	d153      	bne.n	80112e8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011240:	68bb      	ldr	r3, [r7, #8]
 8011242:	015a      	lsls	r2, r3, #5
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	4413      	add	r3, r2
 8011248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801124c:	681a      	ldr	r2, [r3, #0]
 801124e:	683b      	ldr	r3, [r7, #0]
 8011250:	689b      	ldr	r3, [r3, #8]
 8011252:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8011256:	683b      	ldr	r3, [r7, #0]
 8011258:	78db      	ldrb	r3, [r3, #3]
 801125a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801125c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801125e:	68bb      	ldr	r3, [r7, #8]
 8011260:	059b      	lsls	r3, r3, #22
 8011262:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011264:	431a      	orrs	r2, r3
 8011266:	68bb      	ldr	r3, [r7, #8]
 8011268:	0159      	lsls	r1, r3, #5
 801126a:	68fb      	ldr	r3, [r7, #12]
 801126c:	440b      	add	r3, r1
 801126e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011272:	4619      	mov	r1, r3
 8011274:	4b20      	ldr	r3, [pc, #128]	; (80112f8 <USB_ActivateEndpoint+0x10c>)
 8011276:	4313      	orrs	r3, r2
 8011278:	600b      	str	r3, [r1, #0]
 801127a:	e035      	b.n	80112e8 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 801127c:	68fb      	ldr	r3, [r7, #12]
 801127e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011282:	69da      	ldr	r2, [r3, #28]
 8011284:	683b      	ldr	r3, [r7, #0]
 8011286:	781b      	ldrb	r3, [r3, #0]
 8011288:	f003 030f 	and.w	r3, r3, #15
 801128c:	2101      	movs	r1, #1
 801128e:	fa01 f303 	lsl.w	r3, r1, r3
 8011292:	041b      	lsls	r3, r3, #16
 8011294:	68f9      	ldr	r1, [r7, #12]
 8011296:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801129a:	4313      	orrs	r3, r2
 801129c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 801129e:	68bb      	ldr	r3, [r7, #8]
 80112a0:	015a      	lsls	r2, r3, #5
 80112a2:	68fb      	ldr	r3, [r7, #12]
 80112a4:	4413      	add	r3, r2
 80112a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80112aa:	681b      	ldr	r3, [r3, #0]
 80112ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d119      	bne.n	80112e8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80112b4:	68bb      	ldr	r3, [r7, #8]
 80112b6:	015a      	lsls	r2, r3, #5
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	4413      	add	r3, r2
 80112bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80112c0:	681a      	ldr	r2, [r3, #0]
 80112c2:	683b      	ldr	r3, [r7, #0]
 80112c4:	689b      	ldr	r3, [r3, #8]
 80112c6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80112ca:	683b      	ldr	r3, [r7, #0]
 80112cc:	78db      	ldrb	r3, [r3, #3]
 80112ce:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80112d0:	430b      	orrs	r3, r1
 80112d2:	431a      	orrs	r2, r3
 80112d4:	68bb      	ldr	r3, [r7, #8]
 80112d6:	0159      	lsls	r1, r3, #5
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	440b      	add	r3, r1
 80112dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80112e0:	4619      	mov	r1, r3
 80112e2:	4b05      	ldr	r3, [pc, #20]	; (80112f8 <USB_ActivateEndpoint+0x10c>)
 80112e4:	4313      	orrs	r3, r2
 80112e6:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80112e8:	2300      	movs	r3, #0
}
 80112ea:	4618      	mov	r0, r3
 80112ec:	3714      	adds	r7, #20
 80112ee:	46bd      	mov	sp, r7
 80112f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112f4:	4770      	bx	lr
 80112f6:	bf00      	nop
 80112f8:	10008000 	.word	0x10008000

080112fc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80112fc:	b480      	push	{r7}
 80112fe:	b085      	sub	sp, #20
 8011300:	af00      	add	r7, sp, #0
 8011302:	6078      	str	r0, [r7, #4]
 8011304:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801130a:	683b      	ldr	r3, [r7, #0]
 801130c:	781b      	ldrb	r3, [r3, #0]
 801130e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8011310:	683b      	ldr	r3, [r7, #0]
 8011312:	785b      	ldrb	r3, [r3, #1]
 8011314:	2b01      	cmp	r3, #1
 8011316:	d161      	bne.n	80113dc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8011318:	68bb      	ldr	r3, [r7, #8]
 801131a:	015a      	lsls	r2, r3, #5
 801131c:	68fb      	ldr	r3, [r7, #12]
 801131e:	4413      	add	r3, r2
 8011320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011324:	681b      	ldr	r3, [r3, #0]
 8011326:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801132a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801132e:	d11f      	bne.n	8011370 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8011330:	68bb      	ldr	r3, [r7, #8]
 8011332:	015a      	lsls	r2, r3, #5
 8011334:	68fb      	ldr	r3, [r7, #12]
 8011336:	4413      	add	r3, r2
 8011338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801133c:	681b      	ldr	r3, [r3, #0]
 801133e:	68ba      	ldr	r2, [r7, #8]
 8011340:	0151      	lsls	r1, r2, #5
 8011342:	68fa      	ldr	r2, [r7, #12]
 8011344:	440a      	add	r2, r1
 8011346:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801134a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801134e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8011350:	68bb      	ldr	r3, [r7, #8]
 8011352:	015a      	lsls	r2, r3, #5
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	4413      	add	r3, r2
 8011358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	68ba      	ldr	r2, [r7, #8]
 8011360:	0151      	lsls	r1, r2, #5
 8011362:	68fa      	ldr	r2, [r7, #12]
 8011364:	440a      	add	r2, r1
 8011366:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801136a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801136e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8011370:	68fb      	ldr	r3, [r7, #12]
 8011372:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011376:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011378:	683b      	ldr	r3, [r7, #0]
 801137a:	781b      	ldrb	r3, [r3, #0]
 801137c:	f003 030f 	and.w	r3, r3, #15
 8011380:	2101      	movs	r1, #1
 8011382:	fa01 f303 	lsl.w	r3, r1, r3
 8011386:	b29b      	uxth	r3, r3
 8011388:	43db      	mvns	r3, r3
 801138a:	68f9      	ldr	r1, [r7, #12]
 801138c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011390:	4013      	ands	r3, r2
 8011392:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8011394:	68fb      	ldr	r3, [r7, #12]
 8011396:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801139a:	69da      	ldr	r2, [r3, #28]
 801139c:	683b      	ldr	r3, [r7, #0]
 801139e:	781b      	ldrb	r3, [r3, #0]
 80113a0:	f003 030f 	and.w	r3, r3, #15
 80113a4:	2101      	movs	r1, #1
 80113a6:	fa01 f303 	lsl.w	r3, r1, r3
 80113aa:	b29b      	uxth	r3, r3
 80113ac:	43db      	mvns	r3, r3
 80113ae:	68f9      	ldr	r1, [r7, #12]
 80113b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80113b4:	4013      	ands	r3, r2
 80113b6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80113b8:	68bb      	ldr	r3, [r7, #8]
 80113ba:	015a      	lsls	r2, r3, #5
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	4413      	add	r3, r2
 80113c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80113c4:	681a      	ldr	r2, [r3, #0]
 80113c6:	68bb      	ldr	r3, [r7, #8]
 80113c8:	0159      	lsls	r1, r3, #5
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	440b      	add	r3, r1
 80113ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80113d2:	4619      	mov	r1, r3
 80113d4:	4b35      	ldr	r3, [pc, #212]	; (80114ac <USB_DeactivateEndpoint+0x1b0>)
 80113d6:	4013      	ands	r3, r2
 80113d8:	600b      	str	r3, [r1, #0]
 80113da:	e060      	b.n	801149e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80113dc:	68bb      	ldr	r3, [r7, #8]
 80113de:	015a      	lsls	r2, r3, #5
 80113e0:	68fb      	ldr	r3, [r7, #12]
 80113e2:	4413      	add	r3, r2
 80113e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80113e8:	681b      	ldr	r3, [r3, #0]
 80113ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80113ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80113f2:	d11f      	bne.n	8011434 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80113f4:	68bb      	ldr	r3, [r7, #8]
 80113f6:	015a      	lsls	r2, r3, #5
 80113f8:	68fb      	ldr	r3, [r7, #12]
 80113fa:	4413      	add	r3, r2
 80113fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	68ba      	ldr	r2, [r7, #8]
 8011404:	0151      	lsls	r1, r2, #5
 8011406:	68fa      	ldr	r2, [r7, #12]
 8011408:	440a      	add	r2, r1
 801140a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801140e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011412:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8011414:	68bb      	ldr	r3, [r7, #8]
 8011416:	015a      	lsls	r2, r3, #5
 8011418:	68fb      	ldr	r3, [r7, #12]
 801141a:	4413      	add	r3, r2
 801141c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011420:	681b      	ldr	r3, [r3, #0]
 8011422:	68ba      	ldr	r2, [r7, #8]
 8011424:	0151      	lsls	r1, r2, #5
 8011426:	68fa      	ldr	r2, [r7, #12]
 8011428:	440a      	add	r2, r1
 801142a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801142e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011432:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8011434:	68fb      	ldr	r3, [r7, #12]
 8011436:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801143a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801143c:	683b      	ldr	r3, [r7, #0]
 801143e:	781b      	ldrb	r3, [r3, #0]
 8011440:	f003 030f 	and.w	r3, r3, #15
 8011444:	2101      	movs	r1, #1
 8011446:	fa01 f303 	lsl.w	r3, r1, r3
 801144a:	041b      	lsls	r3, r3, #16
 801144c:	43db      	mvns	r3, r3
 801144e:	68f9      	ldr	r1, [r7, #12]
 8011450:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011454:	4013      	ands	r3, r2
 8011456:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8011458:	68fb      	ldr	r3, [r7, #12]
 801145a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801145e:	69da      	ldr	r2, [r3, #28]
 8011460:	683b      	ldr	r3, [r7, #0]
 8011462:	781b      	ldrb	r3, [r3, #0]
 8011464:	f003 030f 	and.w	r3, r3, #15
 8011468:	2101      	movs	r1, #1
 801146a:	fa01 f303 	lsl.w	r3, r1, r3
 801146e:	041b      	lsls	r3, r3, #16
 8011470:	43db      	mvns	r3, r3
 8011472:	68f9      	ldr	r1, [r7, #12]
 8011474:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011478:	4013      	ands	r3, r2
 801147a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 801147c:	68bb      	ldr	r3, [r7, #8]
 801147e:	015a      	lsls	r2, r3, #5
 8011480:	68fb      	ldr	r3, [r7, #12]
 8011482:	4413      	add	r3, r2
 8011484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011488:	681a      	ldr	r2, [r3, #0]
 801148a:	68bb      	ldr	r3, [r7, #8]
 801148c:	0159      	lsls	r1, r3, #5
 801148e:	68fb      	ldr	r3, [r7, #12]
 8011490:	440b      	add	r3, r1
 8011492:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011496:	4619      	mov	r1, r3
 8011498:	4b05      	ldr	r3, [pc, #20]	; (80114b0 <USB_DeactivateEndpoint+0x1b4>)
 801149a:	4013      	ands	r3, r2
 801149c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 801149e:	2300      	movs	r3, #0
}
 80114a0:	4618      	mov	r0, r3
 80114a2:	3714      	adds	r7, #20
 80114a4:	46bd      	mov	sp, r7
 80114a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114aa:	4770      	bx	lr
 80114ac:	ec337800 	.word	0xec337800
 80114b0:	eff37800 	.word	0xeff37800

080114b4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80114b4:	b580      	push	{r7, lr}
 80114b6:	b08a      	sub	sp, #40	; 0x28
 80114b8:	af02      	add	r7, sp, #8
 80114ba:	60f8      	str	r0, [r7, #12]
 80114bc:	60b9      	str	r1, [r7, #8]
 80114be:	4613      	mov	r3, r2
 80114c0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80114c6:	68bb      	ldr	r3, [r7, #8]
 80114c8:	781b      	ldrb	r3, [r3, #0]
 80114ca:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80114cc:	68bb      	ldr	r3, [r7, #8]
 80114ce:	785b      	ldrb	r3, [r3, #1]
 80114d0:	2b01      	cmp	r3, #1
 80114d2:	f040 8163 	bne.w	801179c <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80114d6:	68bb      	ldr	r3, [r7, #8]
 80114d8:	695b      	ldr	r3, [r3, #20]
 80114da:	2b00      	cmp	r3, #0
 80114dc:	d132      	bne.n	8011544 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80114de:	69bb      	ldr	r3, [r7, #24]
 80114e0:	015a      	lsls	r2, r3, #5
 80114e2:	69fb      	ldr	r3, [r7, #28]
 80114e4:	4413      	add	r3, r2
 80114e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80114ea:	691a      	ldr	r2, [r3, #16]
 80114ec:	69bb      	ldr	r3, [r7, #24]
 80114ee:	0159      	lsls	r1, r3, #5
 80114f0:	69fb      	ldr	r3, [r7, #28]
 80114f2:	440b      	add	r3, r1
 80114f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80114f8:	4619      	mov	r1, r3
 80114fa:	4ba5      	ldr	r3, [pc, #660]	; (8011790 <USB_EPStartXfer+0x2dc>)
 80114fc:	4013      	ands	r3, r2
 80114fe:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011500:	69bb      	ldr	r3, [r7, #24]
 8011502:	015a      	lsls	r2, r3, #5
 8011504:	69fb      	ldr	r3, [r7, #28]
 8011506:	4413      	add	r3, r2
 8011508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801150c:	691b      	ldr	r3, [r3, #16]
 801150e:	69ba      	ldr	r2, [r7, #24]
 8011510:	0151      	lsls	r1, r2, #5
 8011512:	69fa      	ldr	r2, [r7, #28]
 8011514:	440a      	add	r2, r1
 8011516:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801151a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801151e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011520:	69bb      	ldr	r3, [r7, #24]
 8011522:	015a      	lsls	r2, r3, #5
 8011524:	69fb      	ldr	r3, [r7, #28]
 8011526:	4413      	add	r3, r2
 8011528:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801152c:	691a      	ldr	r2, [r3, #16]
 801152e:	69bb      	ldr	r3, [r7, #24]
 8011530:	0159      	lsls	r1, r3, #5
 8011532:	69fb      	ldr	r3, [r7, #28]
 8011534:	440b      	add	r3, r1
 8011536:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801153a:	4619      	mov	r1, r3
 801153c:	4b95      	ldr	r3, [pc, #596]	; (8011794 <USB_EPStartXfer+0x2e0>)
 801153e:	4013      	ands	r3, r2
 8011540:	610b      	str	r3, [r1, #16]
 8011542:	e074      	b.n	801162e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011544:	69bb      	ldr	r3, [r7, #24]
 8011546:	015a      	lsls	r2, r3, #5
 8011548:	69fb      	ldr	r3, [r7, #28]
 801154a:	4413      	add	r3, r2
 801154c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011550:	691a      	ldr	r2, [r3, #16]
 8011552:	69bb      	ldr	r3, [r7, #24]
 8011554:	0159      	lsls	r1, r3, #5
 8011556:	69fb      	ldr	r3, [r7, #28]
 8011558:	440b      	add	r3, r1
 801155a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801155e:	4619      	mov	r1, r3
 8011560:	4b8c      	ldr	r3, [pc, #560]	; (8011794 <USB_EPStartXfer+0x2e0>)
 8011562:	4013      	ands	r3, r2
 8011564:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011566:	69bb      	ldr	r3, [r7, #24]
 8011568:	015a      	lsls	r2, r3, #5
 801156a:	69fb      	ldr	r3, [r7, #28]
 801156c:	4413      	add	r3, r2
 801156e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011572:	691a      	ldr	r2, [r3, #16]
 8011574:	69bb      	ldr	r3, [r7, #24]
 8011576:	0159      	lsls	r1, r3, #5
 8011578:	69fb      	ldr	r3, [r7, #28]
 801157a:	440b      	add	r3, r1
 801157c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011580:	4619      	mov	r1, r3
 8011582:	4b83      	ldr	r3, [pc, #524]	; (8011790 <USB_EPStartXfer+0x2dc>)
 8011584:	4013      	ands	r3, r2
 8011586:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8011588:	69bb      	ldr	r3, [r7, #24]
 801158a:	015a      	lsls	r2, r3, #5
 801158c:	69fb      	ldr	r3, [r7, #28]
 801158e:	4413      	add	r3, r2
 8011590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011594:	691a      	ldr	r2, [r3, #16]
 8011596:	68bb      	ldr	r3, [r7, #8]
 8011598:	6959      	ldr	r1, [r3, #20]
 801159a:	68bb      	ldr	r3, [r7, #8]
 801159c:	689b      	ldr	r3, [r3, #8]
 801159e:	440b      	add	r3, r1
 80115a0:	1e59      	subs	r1, r3, #1
 80115a2:	68bb      	ldr	r3, [r7, #8]
 80115a4:	689b      	ldr	r3, [r3, #8]
 80115a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80115aa:	04d9      	lsls	r1, r3, #19
 80115ac:	4b7a      	ldr	r3, [pc, #488]	; (8011798 <USB_EPStartXfer+0x2e4>)
 80115ae:	400b      	ands	r3, r1
 80115b0:	69b9      	ldr	r1, [r7, #24]
 80115b2:	0148      	lsls	r0, r1, #5
 80115b4:	69f9      	ldr	r1, [r7, #28]
 80115b6:	4401      	add	r1, r0
 80115b8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80115bc:	4313      	orrs	r3, r2
 80115be:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80115c0:	69bb      	ldr	r3, [r7, #24]
 80115c2:	015a      	lsls	r2, r3, #5
 80115c4:	69fb      	ldr	r3, [r7, #28]
 80115c6:	4413      	add	r3, r2
 80115c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80115cc:	691a      	ldr	r2, [r3, #16]
 80115ce:	68bb      	ldr	r3, [r7, #8]
 80115d0:	695b      	ldr	r3, [r3, #20]
 80115d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80115d6:	69b9      	ldr	r1, [r7, #24]
 80115d8:	0148      	lsls	r0, r1, #5
 80115da:	69f9      	ldr	r1, [r7, #28]
 80115dc:	4401      	add	r1, r0
 80115de:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80115e2:	4313      	orrs	r3, r2
 80115e4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80115e6:	68bb      	ldr	r3, [r7, #8]
 80115e8:	78db      	ldrb	r3, [r3, #3]
 80115ea:	2b01      	cmp	r3, #1
 80115ec:	d11f      	bne.n	801162e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80115ee:	69bb      	ldr	r3, [r7, #24]
 80115f0:	015a      	lsls	r2, r3, #5
 80115f2:	69fb      	ldr	r3, [r7, #28]
 80115f4:	4413      	add	r3, r2
 80115f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80115fa:	691b      	ldr	r3, [r3, #16]
 80115fc:	69ba      	ldr	r2, [r7, #24]
 80115fe:	0151      	lsls	r1, r2, #5
 8011600:	69fa      	ldr	r2, [r7, #28]
 8011602:	440a      	add	r2, r1
 8011604:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011608:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 801160c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 801160e:	69bb      	ldr	r3, [r7, #24]
 8011610:	015a      	lsls	r2, r3, #5
 8011612:	69fb      	ldr	r3, [r7, #28]
 8011614:	4413      	add	r3, r2
 8011616:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801161a:	691b      	ldr	r3, [r3, #16]
 801161c:	69ba      	ldr	r2, [r7, #24]
 801161e:	0151      	lsls	r1, r2, #5
 8011620:	69fa      	ldr	r2, [r7, #28]
 8011622:	440a      	add	r2, r1
 8011624:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011628:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801162c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 801162e:	79fb      	ldrb	r3, [r7, #7]
 8011630:	2b01      	cmp	r3, #1
 8011632:	d14b      	bne.n	80116cc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8011634:	68bb      	ldr	r3, [r7, #8]
 8011636:	691b      	ldr	r3, [r3, #16]
 8011638:	2b00      	cmp	r3, #0
 801163a:	d009      	beq.n	8011650 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801163c:	69bb      	ldr	r3, [r7, #24]
 801163e:	015a      	lsls	r2, r3, #5
 8011640:	69fb      	ldr	r3, [r7, #28]
 8011642:	4413      	add	r3, r2
 8011644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011648:	461a      	mov	r2, r3
 801164a:	68bb      	ldr	r3, [r7, #8]
 801164c:	691b      	ldr	r3, [r3, #16]
 801164e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8011650:	68bb      	ldr	r3, [r7, #8]
 8011652:	78db      	ldrb	r3, [r3, #3]
 8011654:	2b01      	cmp	r3, #1
 8011656:	d128      	bne.n	80116aa <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011658:	69fb      	ldr	r3, [r7, #28]
 801165a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801165e:	689b      	ldr	r3, [r3, #8]
 8011660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011664:	2b00      	cmp	r3, #0
 8011666:	d110      	bne.n	801168a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8011668:	69bb      	ldr	r3, [r7, #24]
 801166a:	015a      	lsls	r2, r3, #5
 801166c:	69fb      	ldr	r3, [r7, #28]
 801166e:	4413      	add	r3, r2
 8011670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	69ba      	ldr	r2, [r7, #24]
 8011678:	0151      	lsls	r1, r2, #5
 801167a:	69fa      	ldr	r2, [r7, #28]
 801167c:	440a      	add	r2, r1
 801167e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011682:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011686:	6013      	str	r3, [r2, #0]
 8011688:	e00f      	b.n	80116aa <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801168a:	69bb      	ldr	r3, [r7, #24]
 801168c:	015a      	lsls	r2, r3, #5
 801168e:	69fb      	ldr	r3, [r7, #28]
 8011690:	4413      	add	r3, r2
 8011692:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011696:	681b      	ldr	r3, [r3, #0]
 8011698:	69ba      	ldr	r2, [r7, #24]
 801169a:	0151      	lsls	r1, r2, #5
 801169c:	69fa      	ldr	r2, [r7, #28]
 801169e:	440a      	add	r2, r1
 80116a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80116a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80116a8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80116aa:	69bb      	ldr	r3, [r7, #24]
 80116ac:	015a      	lsls	r2, r3, #5
 80116ae:	69fb      	ldr	r3, [r7, #28]
 80116b0:	4413      	add	r3, r2
 80116b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80116b6:	681b      	ldr	r3, [r3, #0]
 80116b8:	69ba      	ldr	r2, [r7, #24]
 80116ba:	0151      	lsls	r1, r2, #5
 80116bc:	69fa      	ldr	r2, [r7, #28]
 80116be:	440a      	add	r2, r1
 80116c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80116c4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80116c8:	6013      	str	r3, [r2, #0]
 80116ca:	e133      	b.n	8011934 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80116cc:	69bb      	ldr	r3, [r7, #24]
 80116ce:	015a      	lsls	r2, r3, #5
 80116d0:	69fb      	ldr	r3, [r7, #28]
 80116d2:	4413      	add	r3, r2
 80116d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80116d8:	681b      	ldr	r3, [r3, #0]
 80116da:	69ba      	ldr	r2, [r7, #24]
 80116dc:	0151      	lsls	r1, r2, #5
 80116de:	69fa      	ldr	r2, [r7, #28]
 80116e0:	440a      	add	r2, r1
 80116e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80116e6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80116ea:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80116ec:	68bb      	ldr	r3, [r7, #8]
 80116ee:	78db      	ldrb	r3, [r3, #3]
 80116f0:	2b01      	cmp	r3, #1
 80116f2:	d015      	beq.n	8011720 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80116f4:	68bb      	ldr	r3, [r7, #8]
 80116f6:	695b      	ldr	r3, [r3, #20]
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	f000 811b 	beq.w	8011934 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80116fe:	69fb      	ldr	r3, [r7, #28]
 8011700:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011704:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011706:	68bb      	ldr	r3, [r7, #8]
 8011708:	781b      	ldrb	r3, [r3, #0]
 801170a:	f003 030f 	and.w	r3, r3, #15
 801170e:	2101      	movs	r1, #1
 8011710:	fa01 f303 	lsl.w	r3, r1, r3
 8011714:	69f9      	ldr	r1, [r7, #28]
 8011716:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801171a:	4313      	orrs	r3, r2
 801171c:	634b      	str	r3, [r1, #52]	; 0x34
 801171e:	e109      	b.n	8011934 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011720:	69fb      	ldr	r3, [r7, #28]
 8011722:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011726:	689b      	ldr	r3, [r3, #8]
 8011728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801172c:	2b00      	cmp	r3, #0
 801172e:	d110      	bne.n	8011752 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8011730:	69bb      	ldr	r3, [r7, #24]
 8011732:	015a      	lsls	r2, r3, #5
 8011734:	69fb      	ldr	r3, [r7, #28]
 8011736:	4413      	add	r3, r2
 8011738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801173c:	681b      	ldr	r3, [r3, #0]
 801173e:	69ba      	ldr	r2, [r7, #24]
 8011740:	0151      	lsls	r1, r2, #5
 8011742:	69fa      	ldr	r2, [r7, #28]
 8011744:	440a      	add	r2, r1
 8011746:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801174a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801174e:	6013      	str	r3, [r2, #0]
 8011750:	e00f      	b.n	8011772 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8011752:	69bb      	ldr	r3, [r7, #24]
 8011754:	015a      	lsls	r2, r3, #5
 8011756:	69fb      	ldr	r3, [r7, #28]
 8011758:	4413      	add	r3, r2
 801175a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801175e:	681b      	ldr	r3, [r3, #0]
 8011760:	69ba      	ldr	r2, [r7, #24]
 8011762:	0151      	lsls	r1, r2, #5
 8011764:	69fa      	ldr	r2, [r7, #28]
 8011766:	440a      	add	r2, r1
 8011768:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801176c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011770:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8011772:	68bb      	ldr	r3, [r7, #8]
 8011774:	68d9      	ldr	r1, [r3, #12]
 8011776:	68bb      	ldr	r3, [r7, #8]
 8011778:	781a      	ldrb	r2, [r3, #0]
 801177a:	68bb      	ldr	r3, [r7, #8]
 801177c:	695b      	ldr	r3, [r3, #20]
 801177e:	b298      	uxth	r0, r3
 8011780:	79fb      	ldrb	r3, [r7, #7]
 8011782:	9300      	str	r3, [sp, #0]
 8011784:	4603      	mov	r3, r0
 8011786:	68f8      	ldr	r0, [r7, #12]
 8011788:	f000 fa38 	bl	8011bfc <USB_WritePacket>
 801178c:	e0d2      	b.n	8011934 <USB_EPStartXfer+0x480>
 801178e:	bf00      	nop
 8011790:	e007ffff 	.word	0xe007ffff
 8011794:	fff80000 	.word	0xfff80000
 8011798:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801179c:	69bb      	ldr	r3, [r7, #24]
 801179e:	015a      	lsls	r2, r3, #5
 80117a0:	69fb      	ldr	r3, [r7, #28]
 80117a2:	4413      	add	r3, r2
 80117a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80117a8:	691a      	ldr	r2, [r3, #16]
 80117aa:	69bb      	ldr	r3, [r7, #24]
 80117ac:	0159      	lsls	r1, r3, #5
 80117ae:	69fb      	ldr	r3, [r7, #28]
 80117b0:	440b      	add	r3, r1
 80117b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80117b6:	4619      	mov	r1, r3
 80117b8:	4b61      	ldr	r3, [pc, #388]	; (8011940 <USB_EPStartXfer+0x48c>)
 80117ba:	4013      	ands	r3, r2
 80117bc:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80117be:	69bb      	ldr	r3, [r7, #24]
 80117c0:	015a      	lsls	r2, r3, #5
 80117c2:	69fb      	ldr	r3, [r7, #28]
 80117c4:	4413      	add	r3, r2
 80117c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80117ca:	691a      	ldr	r2, [r3, #16]
 80117cc:	69bb      	ldr	r3, [r7, #24]
 80117ce:	0159      	lsls	r1, r3, #5
 80117d0:	69fb      	ldr	r3, [r7, #28]
 80117d2:	440b      	add	r3, r1
 80117d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80117d8:	4619      	mov	r1, r3
 80117da:	4b5a      	ldr	r3, [pc, #360]	; (8011944 <USB_EPStartXfer+0x490>)
 80117dc:	4013      	ands	r3, r2
 80117de:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 80117e0:	68bb      	ldr	r3, [r7, #8]
 80117e2:	695b      	ldr	r3, [r3, #20]
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d123      	bne.n	8011830 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80117e8:	69bb      	ldr	r3, [r7, #24]
 80117ea:	015a      	lsls	r2, r3, #5
 80117ec:	69fb      	ldr	r3, [r7, #28]
 80117ee:	4413      	add	r3, r2
 80117f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80117f4:	691a      	ldr	r2, [r3, #16]
 80117f6:	68bb      	ldr	r3, [r7, #8]
 80117f8:	689b      	ldr	r3, [r3, #8]
 80117fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80117fe:	69b9      	ldr	r1, [r7, #24]
 8011800:	0148      	lsls	r0, r1, #5
 8011802:	69f9      	ldr	r1, [r7, #28]
 8011804:	4401      	add	r1, r0
 8011806:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801180a:	4313      	orrs	r3, r2
 801180c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801180e:	69bb      	ldr	r3, [r7, #24]
 8011810:	015a      	lsls	r2, r3, #5
 8011812:	69fb      	ldr	r3, [r7, #28]
 8011814:	4413      	add	r3, r2
 8011816:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801181a:	691b      	ldr	r3, [r3, #16]
 801181c:	69ba      	ldr	r2, [r7, #24]
 801181e:	0151      	lsls	r1, r2, #5
 8011820:	69fa      	ldr	r2, [r7, #28]
 8011822:	440a      	add	r2, r1
 8011824:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011828:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801182c:	6113      	str	r3, [r2, #16]
 801182e:	e033      	b.n	8011898 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8011830:	68bb      	ldr	r3, [r7, #8]
 8011832:	695a      	ldr	r2, [r3, #20]
 8011834:	68bb      	ldr	r3, [r7, #8]
 8011836:	689b      	ldr	r3, [r3, #8]
 8011838:	4413      	add	r3, r2
 801183a:	1e5a      	subs	r2, r3, #1
 801183c:	68bb      	ldr	r3, [r7, #8]
 801183e:	689b      	ldr	r3, [r3, #8]
 8011840:	fbb2 f3f3 	udiv	r3, r2, r3
 8011844:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8011846:	69bb      	ldr	r3, [r7, #24]
 8011848:	015a      	lsls	r2, r3, #5
 801184a:	69fb      	ldr	r3, [r7, #28]
 801184c:	4413      	add	r3, r2
 801184e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011852:	691a      	ldr	r2, [r3, #16]
 8011854:	8afb      	ldrh	r3, [r7, #22]
 8011856:	04d9      	lsls	r1, r3, #19
 8011858:	4b3b      	ldr	r3, [pc, #236]	; (8011948 <USB_EPStartXfer+0x494>)
 801185a:	400b      	ands	r3, r1
 801185c:	69b9      	ldr	r1, [r7, #24]
 801185e:	0148      	lsls	r0, r1, #5
 8011860:	69f9      	ldr	r1, [r7, #28]
 8011862:	4401      	add	r1, r0
 8011864:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011868:	4313      	orrs	r3, r2
 801186a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 801186c:	69bb      	ldr	r3, [r7, #24]
 801186e:	015a      	lsls	r2, r3, #5
 8011870:	69fb      	ldr	r3, [r7, #28]
 8011872:	4413      	add	r3, r2
 8011874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011878:	691a      	ldr	r2, [r3, #16]
 801187a:	68bb      	ldr	r3, [r7, #8]
 801187c:	689b      	ldr	r3, [r3, #8]
 801187e:	8af9      	ldrh	r1, [r7, #22]
 8011880:	fb01 f303 	mul.w	r3, r1, r3
 8011884:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011888:	69b9      	ldr	r1, [r7, #24]
 801188a:	0148      	lsls	r0, r1, #5
 801188c:	69f9      	ldr	r1, [r7, #28]
 801188e:	4401      	add	r1, r0
 8011890:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011894:	4313      	orrs	r3, r2
 8011896:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8011898:	79fb      	ldrb	r3, [r7, #7]
 801189a:	2b01      	cmp	r3, #1
 801189c:	d10d      	bne.n	80118ba <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801189e:	68bb      	ldr	r3, [r7, #8]
 80118a0:	68db      	ldr	r3, [r3, #12]
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	d009      	beq.n	80118ba <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80118a6:	68bb      	ldr	r3, [r7, #8]
 80118a8:	68d9      	ldr	r1, [r3, #12]
 80118aa:	69bb      	ldr	r3, [r7, #24]
 80118ac:	015a      	lsls	r2, r3, #5
 80118ae:	69fb      	ldr	r3, [r7, #28]
 80118b0:	4413      	add	r3, r2
 80118b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80118b6:	460a      	mov	r2, r1
 80118b8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80118ba:	68bb      	ldr	r3, [r7, #8]
 80118bc:	78db      	ldrb	r3, [r3, #3]
 80118be:	2b01      	cmp	r3, #1
 80118c0:	d128      	bne.n	8011914 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80118c2:	69fb      	ldr	r3, [r7, #28]
 80118c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80118c8:	689b      	ldr	r3, [r3, #8]
 80118ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d110      	bne.n	80118f4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80118d2:	69bb      	ldr	r3, [r7, #24]
 80118d4:	015a      	lsls	r2, r3, #5
 80118d6:	69fb      	ldr	r3, [r7, #28]
 80118d8:	4413      	add	r3, r2
 80118da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80118de:	681b      	ldr	r3, [r3, #0]
 80118e0:	69ba      	ldr	r2, [r7, #24]
 80118e2:	0151      	lsls	r1, r2, #5
 80118e4:	69fa      	ldr	r2, [r7, #28]
 80118e6:	440a      	add	r2, r1
 80118e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80118ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80118f0:	6013      	str	r3, [r2, #0]
 80118f2:	e00f      	b.n	8011914 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80118f4:	69bb      	ldr	r3, [r7, #24]
 80118f6:	015a      	lsls	r2, r3, #5
 80118f8:	69fb      	ldr	r3, [r7, #28]
 80118fa:	4413      	add	r3, r2
 80118fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	69ba      	ldr	r2, [r7, #24]
 8011904:	0151      	lsls	r1, r2, #5
 8011906:	69fa      	ldr	r2, [r7, #28]
 8011908:	440a      	add	r2, r1
 801190a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801190e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011912:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8011914:	69bb      	ldr	r3, [r7, #24]
 8011916:	015a      	lsls	r2, r3, #5
 8011918:	69fb      	ldr	r3, [r7, #28]
 801191a:	4413      	add	r3, r2
 801191c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011920:	681b      	ldr	r3, [r3, #0]
 8011922:	69ba      	ldr	r2, [r7, #24]
 8011924:	0151      	lsls	r1, r2, #5
 8011926:	69fa      	ldr	r2, [r7, #28]
 8011928:	440a      	add	r2, r1
 801192a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801192e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011932:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011934:	2300      	movs	r3, #0
}
 8011936:	4618      	mov	r0, r3
 8011938:	3720      	adds	r7, #32
 801193a:	46bd      	mov	sp, r7
 801193c:	bd80      	pop	{r7, pc}
 801193e:	bf00      	nop
 8011940:	fff80000 	.word	0xfff80000
 8011944:	e007ffff 	.word	0xe007ffff
 8011948:	1ff80000 	.word	0x1ff80000

0801194c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801194c:	b480      	push	{r7}
 801194e:	b087      	sub	sp, #28
 8011950:	af00      	add	r7, sp, #0
 8011952:	60f8      	str	r0, [r7, #12]
 8011954:	60b9      	str	r1, [r7, #8]
 8011956:	4613      	mov	r3, r2
 8011958:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801195a:	68fb      	ldr	r3, [r7, #12]
 801195c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 801195e:	68bb      	ldr	r3, [r7, #8]
 8011960:	781b      	ldrb	r3, [r3, #0]
 8011962:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8011964:	68bb      	ldr	r3, [r7, #8]
 8011966:	785b      	ldrb	r3, [r3, #1]
 8011968:	2b01      	cmp	r3, #1
 801196a:	f040 80cd 	bne.w	8011b08 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801196e:	68bb      	ldr	r3, [r7, #8]
 8011970:	695b      	ldr	r3, [r3, #20]
 8011972:	2b00      	cmp	r3, #0
 8011974:	d132      	bne.n	80119dc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011976:	693b      	ldr	r3, [r7, #16]
 8011978:	015a      	lsls	r2, r3, #5
 801197a:	697b      	ldr	r3, [r7, #20]
 801197c:	4413      	add	r3, r2
 801197e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011982:	691a      	ldr	r2, [r3, #16]
 8011984:	693b      	ldr	r3, [r7, #16]
 8011986:	0159      	lsls	r1, r3, #5
 8011988:	697b      	ldr	r3, [r7, #20]
 801198a:	440b      	add	r3, r1
 801198c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011990:	4619      	mov	r1, r3
 8011992:	4b98      	ldr	r3, [pc, #608]	; (8011bf4 <USB_EP0StartXfer+0x2a8>)
 8011994:	4013      	ands	r3, r2
 8011996:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011998:	693b      	ldr	r3, [r7, #16]
 801199a:	015a      	lsls	r2, r3, #5
 801199c:	697b      	ldr	r3, [r7, #20]
 801199e:	4413      	add	r3, r2
 80119a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80119a4:	691b      	ldr	r3, [r3, #16]
 80119a6:	693a      	ldr	r2, [r7, #16]
 80119a8:	0151      	lsls	r1, r2, #5
 80119aa:	697a      	ldr	r2, [r7, #20]
 80119ac:	440a      	add	r2, r1
 80119ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80119b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80119b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80119b8:	693b      	ldr	r3, [r7, #16]
 80119ba:	015a      	lsls	r2, r3, #5
 80119bc:	697b      	ldr	r3, [r7, #20]
 80119be:	4413      	add	r3, r2
 80119c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80119c4:	691a      	ldr	r2, [r3, #16]
 80119c6:	693b      	ldr	r3, [r7, #16]
 80119c8:	0159      	lsls	r1, r3, #5
 80119ca:	697b      	ldr	r3, [r7, #20]
 80119cc:	440b      	add	r3, r1
 80119ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80119d2:	4619      	mov	r1, r3
 80119d4:	4b88      	ldr	r3, [pc, #544]	; (8011bf8 <USB_EP0StartXfer+0x2ac>)
 80119d6:	4013      	ands	r3, r2
 80119d8:	610b      	str	r3, [r1, #16]
 80119da:	e04e      	b.n	8011a7a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80119dc:	693b      	ldr	r3, [r7, #16]
 80119de:	015a      	lsls	r2, r3, #5
 80119e0:	697b      	ldr	r3, [r7, #20]
 80119e2:	4413      	add	r3, r2
 80119e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80119e8:	691a      	ldr	r2, [r3, #16]
 80119ea:	693b      	ldr	r3, [r7, #16]
 80119ec:	0159      	lsls	r1, r3, #5
 80119ee:	697b      	ldr	r3, [r7, #20]
 80119f0:	440b      	add	r3, r1
 80119f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80119f6:	4619      	mov	r1, r3
 80119f8:	4b7f      	ldr	r3, [pc, #508]	; (8011bf8 <USB_EP0StartXfer+0x2ac>)
 80119fa:	4013      	ands	r3, r2
 80119fc:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80119fe:	693b      	ldr	r3, [r7, #16]
 8011a00:	015a      	lsls	r2, r3, #5
 8011a02:	697b      	ldr	r3, [r7, #20]
 8011a04:	4413      	add	r3, r2
 8011a06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011a0a:	691a      	ldr	r2, [r3, #16]
 8011a0c:	693b      	ldr	r3, [r7, #16]
 8011a0e:	0159      	lsls	r1, r3, #5
 8011a10:	697b      	ldr	r3, [r7, #20]
 8011a12:	440b      	add	r3, r1
 8011a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011a18:	4619      	mov	r1, r3
 8011a1a:	4b76      	ldr	r3, [pc, #472]	; (8011bf4 <USB_EP0StartXfer+0x2a8>)
 8011a1c:	4013      	ands	r3, r2
 8011a1e:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8011a20:	68bb      	ldr	r3, [r7, #8]
 8011a22:	695a      	ldr	r2, [r3, #20]
 8011a24:	68bb      	ldr	r3, [r7, #8]
 8011a26:	689b      	ldr	r3, [r3, #8]
 8011a28:	429a      	cmp	r2, r3
 8011a2a:	d903      	bls.n	8011a34 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8011a2c:	68bb      	ldr	r3, [r7, #8]
 8011a2e:	689a      	ldr	r2, [r3, #8]
 8011a30:	68bb      	ldr	r3, [r7, #8]
 8011a32:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011a34:	693b      	ldr	r3, [r7, #16]
 8011a36:	015a      	lsls	r2, r3, #5
 8011a38:	697b      	ldr	r3, [r7, #20]
 8011a3a:	4413      	add	r3, r2
 8011a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011a40:	691b      	ldr	r3, [r3, #16]
 8011a42:	693a      	ldr	r2, [r7, #16]
 8011a44:	0151      	lsls	r1, r2, #5
 8011a46:	697a      	ldr	r2, [r7, #20]
 8011a48:	440a      	add	r2, r1
 8011a4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011a4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011a52:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8011a54:	693b      	ldr	r3, [r7, #16]
 8011a56:	015a      	lsls	r2, r3, #5
 8011a58:	697b      	ldr	r3, [r7, #20]
 8011a5a:	4413      	add	r3, r2
 8011a5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011a60:	691a      	ldr	r2, [r3, #16]
 8011a62:	68bb      	ldr	r3, [r7, #8]
 8011a64:	695b      	ldr	r3, [r3, #20]
 8011a66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011a6a:	6939      	ldr	r1, [r7, #16]
 8011a6c:	0148      	lsls	r0, r1, #5
 8011a6e:	6979      	ldr	r1, [r7, #20]
 8011a70:	4401      	add	r1, r0
 8011a72:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8011a76:	4313      	orrs	r3, r2
 8011a78:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8011a7a:	79fb      	ldrb	r3, [r7, #7]
 8011a7c:	2b01      	cmp	r3, #1
 8011a7e:	d11e      	bne.n	8011abe <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8011a80:	68bb      	ldr	r3, [r7, #8]
 8011a82:	691b      	ldr	r3, [r3, #16]
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d009      	beq.n	8011a9c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8011a88:	693b      	ldr	r3, [r7, #16]
 8011a8a:	015a      	lsls	r2, r3, #5
 8011a8c:	697b      	ldr	r3, [r7, #20]
 8011a8e:	4413      	add	r3, r2
 8011a90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011a94:	461a      	mov	r2, r3
 8011a96:	68bb      	ldr	r3, [r7, #8]
 8011a98:	691b      	ldr	r3, [r3, #16]
 8011a9a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011a9c:	693b      	ldr	r3, [r7, #16]
 8011a9e:	015a      	lsls	r2, r3, #5
 8011aa0:	697b      	ldr	r3, [r7, #20]
 8011aa2:	4413      	add	r3, r2
 8011aa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011aa8:	681b      	ldr	r3, [r3, #0]
 8011aaa:	693a      	ldr	r2, [r7, #16]
 8011aac:	0151      	lsls	r1, r2, #5
 8011aae:	697a      	ldr	r2, [r7, #20]
 8011ab0:	440a      	add	r2, r1
 8011ab2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011ab6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011aba:	6013      	str	r3, [r2, #0]
 8011abc:	e092      	b.n	8011be4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011abe:	693b      	ldr	r3, [r7, #16]
 8011ac0:	015a      	lsls	r2, r3, #5
 8011ac2:	697b      	ldr	r3, [r7, #20]
 8011ac4:	4413      	add	r3, r2
 8011ac6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	693a      	ldr	r2, [r7, #16]
 8011ace:	0151      	lsls	r1, r2, #5
 8011ad0:	697a      	ldr	r2, [r7, #20]
 8011ad2:	440a      	add	r2, r1
 8011ad4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011ad8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011adc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8011ade:	68bb      	ldr	r3, [r7, #8]
 8011ae0:	695b      	ldr	r3, [r3, #20]
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d07e      	beq.n	8011be4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8011ae6:	697b      	ldr	r3, [r7, #20]
 8011ae8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011aec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011aee:	68bb      	ldr	r3, [r7, #8]
 8011af0:	781b      	ldrb	r3, [r3, #0]
 8011af2:	f003 030f 	and.w	r3, r3, #15
 8011af6:	2101      	movs	r1, #1
 8011af8:	fa01 f303 	lsl.w	r3, r1, r3
 8011afc:	6979      	ldr	r1, [r7, #20]
 8011afe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011b02:	4313      	orrs	r3, r2
 8011b04:	634b      	str	r3, [r1, #52]	; 0x34
 8011b06:	e06d      	b.n	8011be4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8011b08:	693b      	ldr	r3, [r7, #16]
 8011b0a:	015a      	lsls	r2, r3, #5
 8011b0c:	697b      	ldr	r3, [r7, #20]
 8011b0e:	4413      	add	r3, r2
 8011b10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011b14:	691a      	ldr	r2, [r3, #16]
 8011b16:	693b      	ldr	r3, [r7, #16]
 8011b18:	0159      	lsls	r1, r3, #5
 8011b1a:	697b      	ldr	r3, [r7, #20]
 8011b1c:	440b      	add	r3, r1
 8011b1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011b22:	4619      	mov	r1, r3
 8011b24:	4b34      	ldr	r3, [pc, #208]	; (8011bf8 <USB_EP0StartXfer+0x2ac>)
 8011b26:	4013      	ands	r3, r2
 8011b28:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8011b2a:	693b      	ldr	r3, [r7, #16]
 8011b2c:	015a      	lsls	r2, r3, #5
 8011b2e:	697b      	ldr	r3, [r7, #20]
 8011b30:	4413      	add	r3, r2
 8011b32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011b36:	691a      	ldr	r2, [r3, #16]
 8011b38:	693b      	ldr	r3, [r7, #16]
 8011b3a:	0159      	lsls	r1, r3, #5
 8011b3c:	697b      	ldr	r3, [r7, #20]
 8011b3e:	440b      	add	r3, r1
 8011b40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011b44:	4619      	mov	r1, r3
 8011b46:	4b2b      	ldr	r3, [pc, #172]	; (8011bf4 <USB_EP0StartXfer+0x2a8>)
 8011b48:	4013      	ands	r3, r2
 8011b4a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8011b4c:	68bb      	ldr	r3, [r7, #8]
 8011b4e:	695b      	ldr	r3, [r3, #20]
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	d003      	beq.n	8011b5c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8011b54:	68bb      	ldr	r3, [r7, #8]
 8011b56:	689a      	ldr	r2, [r3, #8]
 8011b58:	68bb      	ldr	r3, [r7, #8]
 8011b5a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011b5c:	693b      	ldr	r3, [r7, #16]
 8011b5e:	015a      	lsls	r2, r3, #5
 8011b60:	697b      	ldr	r3, [r7, #20]
 8011b62:	4413      	add	r3, r2
 8011b64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011b68:	691b      	ldr	r3, [r3, #16]
 8011b6a:	693a      	ldr	r2, [r7, #16]
 8011b6c:	0151      	lsls	r1, r2, #5
 8011b6e:	697a      	ldr	r2, [r7, #20]
 8011b70:	440a      	add	r2, r1
 8011b72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011b76:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011b7a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8011b7c:	693b      	ldr	r3, [r7, #16]
 8011b7e:	015a      	lsls	r2, r3, #5
 8011b80:	697b      	ldr	r3, [r7, #20]
 8011b82:	4413      	add	r3, r2
 8011b84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011b88:	691a      	ldr	r2, [r3, #16]
 8011b8a:	68bb      	ldr	r3, [r7, #8]
 8011b8c:	689b      	ldr	r3, [r3, #8]
 8011b8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011b92:	6939      	ldr	r1, [r7, #16]
 8011b94:	0148      	lsls	r0, r1, #5
 8011b96:	6979      	ldr	r1, [r7, #20]
 8011b98:	4401      	add	r1, r0
 8011b9a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011b9e:	4313      	orrs	r3, r2
 8011ba0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8011ba2:	79fb      	ldrb	r3, [r7, #7]
 8011ba4:	2b01      	cmp	r3, #1
 8011ba6:	d10d      	bne.n	8011bc4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8011ba8:	68bb      	ldr	r3, [r7, #8]
 8011baa:	68db      	ldr	r3, [r3, #12]
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d009      	beq.n	8011bc4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8011bb0:	68bb      	ldr	r3, [r7, #8]
 8011bb2:	68d9      	ldr	r1, [r3, #12]
 8011bb4:	693b      	ldr	r3, [r7, #16]
 8011bb6:	015a      	lsls	r2, r3, #5
 8011bb8:	697b      	ldr	r3, [r7, #20]
 8011bba:	4413      	add	r3, r2
 8011bbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011bc0:	460a      	mov	r2, r1
 8011bc2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8011bc4:	693b      	ldr	r3, [r7, #16]
 8011bc6:	015a      	lsls	r2, r3, #5
 8011bc8:	697b      	ldr	r3, [r7, #20]
 8011bca:	4413      	add	r3, r2
 8011bcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011bd0:	681b      	ldr	r3, [r3, #0]
 8011bd2:	693a      	ldr	r2, [r7, #16]
 8011bd4:	0151      	lsls	r1, r2, #5
 8011bd6:	697a      	ldr	r2, [r7, #20]
 8011bd8:	440a      	add	r2, r1
 8011bda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011bde:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011be2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011be4:	2300      	movs	r3, #0
}
 8011be6:	4618      	mov	r0, r3
 8011be8:	371c      	adds	r7, #28
 8011bea:	46bd      	mov	sp, r7
 8011bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bf0:	4770      	bx	lr
 8011bf2:	bf00      	nop
 8011bf4:	e007ffff 	.word	0xe007ffff
 8011bf8:	fff80000 	.word	0xfff80000

08011bfc <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8011bfc:	b480      	push	{r7}
 8011bfe:	b089      	sub	sp, #36	; 0x24
 8011c00:	af00      	add	r7, sp, #0
 8011c02:	60f8      	str	r0, [r7, #12]
 8011c04:	60b9      	str	r1, [r7, #8]
 8011c06:	4611      	mov	r1, r2
 8011c08:	461a      	mov	r2, r3
 8011c0a:	460b      	mov	r3, r1
 8011c0c:	71fb      	strb	r3, [r7, #7]
 8011c0e:	4613      	mov	r3, r2
 8011c10:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011c12:	68fb      	ldr	r3, [r7, #12]
 8011c14:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8011c16:	68bb      	ldr	r3, [r7, #8]
 8011c18:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8011c1a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	d11a      	bne.n	8011c58 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8011c22:	88bb      	ldrh	r3, [r7, #4]
 8011c24:	3303      	adds	r3, #3
 8011c26:	089b      	lsrs	r3, r3, #2
 8011c28:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8011c2a:	2300      	movs	r3, #0
 8011c2c:	61bb      	str	r3, [r7, #24]
 8011c2e:	e00f      	b.n	8011c50 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8011c30:	79fb      	ldrb	r3, [r7, #7]
 8011c32:	031a      	lsls	r2, r3, #12
 8011c34:	697b      	ldr	r3, [r7, #20]
 8011c36:	4413      	add	r3, r2
 8011c38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011c3c:	461a      	mov	r2, r3
 8011c3e:	69fb      	ldr	r3, [r7, #28]
 8011c40:	681b      	ldr	r3, [r3, #0]
 8011c42:	6013      	str	r3, [r2, #0]
      pSrc++;
 8011c44:	69fb      	ldr	r3, [r7, #28]
 8011c46:	3304      	adds	r3, #4
 8011c48:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8011c4a:	69bb      	ldr	r3, [r7, #24]
 8011c4c:	3301      	adds	r3, #1
 8011c4e:	61bb      	str	r3, [r7, #24]
 8011c50:	69ba      	ldr	r2, [r7, #24]
 8011c52:	693b      	ldr	r3, [r7, #16]
 8011c54:	429a      	cmp	r2, r3
 8011c56:	d3eb      	bcc.n	8011c30 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8011c58:	2300      	movs	r3, #0
}
 8011c5a:	4618      	mov	r0, r3
 8011c5c:	3724      	adds	r7, #36	; 0x24
 8011c5e:	46bd      	mov	sp, r7
 8011c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c64:	4770      	bx	lr

08011c66 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8011c66:	b480      	push	{r7}
 8011c68:	b089      	sub	sp, #36	; 0x24
 8011c6a:	af00      	add	r7, sp, #0
 8011c6c:	60f8      	str	r0, [r7, #12]
 8011c6e:	60b9      	str	r1, [r7, #8]
 8011c70:	4613      	mov	r3, r2
 8011c72:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011c74:	68fb      	ldr	r3, [r7, #12]
 8011c76:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8011c78:	68bb      	ldr	r3, [r7, #8]
 8011c7a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8011c7c:	88fb      	ldrh	r3, [r7, #6]
 8011c7e:	3303      	adds	r3, #3
 8011c80:	089b      	lsrs	r3, r3, #2
 8011c82:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8011c84:	2300      	movs	r3, #0
 8011c86:	61bb      	str	r3, [r7, #24]
 8011c88:	e00b      	b.n	8011ca2 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8011c8a:	697b      	ldr	r3, [r7, #20]
 8011c8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011c90:	681a      	ldr	r2, [r3, #0]
 8011c92:	69fb      	ldr	r3, [r7, #28]
 8011c94:	601a      	str	r2, [r3, #0]
    pDest++;
 8011c96:	69fb      	ldr	r3, [r7, #28]
 8011c98:	3304      	adds	r3, #4
 8011c9a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8011c9c:	69bb      	ldr	r3, [r7, #24]
 8011c9e:	3301      	adds	r3, #1
 8011ca0:	61bb      	str	r3, [r7, #24]
 8011ca2:	69ba      	ldr	r2, [r7, #24]
 8011ca4:	693b      	ldr	r3, [r7, #16]
 8011ca6:	429a      	cmp	r2, r3
 8011ca8:	d3ef      	bcc.n	8011c8a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8011caa:	69fb      	ldr	r3, [r7, #28]
}
 8011cac:	4618      	mov	r0, r3
 8011cae:	3724      	adds	r7, #36	; 0x24
 8011cb0:	46bd      	mov	sp, r7
 8011cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cb6:	4770      	bx	lr

08011cb8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011cb8:	b480      	push	{r7}
 8011cba:	b085      	sub	sp, #20
 8011cbc:	af00      	add	r7, sp, #0
 8011cbe:	6078      	str	r0, [r7, #4]
 8011cc0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011cc6:	683b      	ldr	r3, [r7, #0]
 8011cc8:	781b      	ldrb	r3, [r3, #0]
 8011cca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011ccc:	683b      	ldr	r3, [r7, #0]
 8011cce:	785b      	ldrb	r3, [r3, #1]
 8011cd0:	2b01      	cmp	r3, #1
 8011cd2:	d12c      	bne.n	8011d2e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8011cd4:	68bb      	ldr	r3, [r7, #8]
 8011cd6:	015a      	lsls	r2, r3, #5
 8011cd8:	68fb      	ldr	r3, [r7, #12]
 8011cda:	4413      	add	r3, r2
 8011cdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011ce0:	681b      	ldr	r3, [r3, #0]
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	db12      	blt.n	8011d0c <USB_EPSetStall+0x54>
 8011ce6:	68bb      	ldr	r3, [r7, #8]
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d00f      	beq.n	8011d0c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8011cec:	68bb      	ldr	r3, [r7, #8]
 8011cee:	015a      	lsls	r2, r3, #5
 8011cf0:	68fb      	ldr	r3, [r7, #12]
 8011cf2:	4413      	add	r3, r2
 8011cf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011cf8:	681b      	ldr	r3, [r3, #0]
 8011cfa:	68ba      	ldr	r2, [r7, #8]
 8011cfc:	0151      	lsls	r1, r2, #5
 8011cfe:	68fa      	ldr	r2, [r7, #12]
 8011d00:	440a      	add	r2, r1
 8011d02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011d06:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8011d0a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8011d0c:	68bb      	ldr	r3, [r7, #8]
 8011d0e:	015a      	lsls	r2, r3, #5
 8011d10:	68fb      	ldr	r3, [r7, #12]
 8011d12:	4413      	add	r3, r2
 8011d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011d18:	681b      	ldr	r3, [r3, #0]
 8011d1a:	68ba      	ldr	r2, [r7, #8]
 8011d1c:	0151      	lsls	r1, r2, #5
 8011d1e:	68fa      	ldr	r2, [r7, #12]
 8011d20:	440a      	add	r2, r1
 8011d22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011d26:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8011d2a:	6013      	str	r3, [r2, #0]
 8011d2c:	e02b      	b.n	8011d86 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8011d2e:	68bb      	ldr	r3, [r7, #8]
 8011d30:	015a      	lsls	r2, r3, #5
 8011d32:	68fb      	ldr	r3, [r7, #12]
 8011d34:	4413      	add	r3, r2
 8011d36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011d3a:	681b      	ldr	r3, [r3, #0]
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	db12      	blt.n	8011d66 <USB_EPSetStall+0xae>
 8011d40:	68bb      	ldr	r3, [r7, #8]
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d00f      	beq.n	8011d66 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8011d46:	68bb      	ldr	r3, [r7, #8]
 8011d48:	015a      	lsls	r2, r3, #5
 8011d4a:	68fb      	ldr	r3, [r7, #12]
 8011d4c:	4413      	add	r3, r2
 8011d4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011d52:	681b      	ldr	r3, [r3, #0]
 8011d54:	68ba      	ldr	r2, [r7, #8]
 8011d56:	0151      	lsls	r1, r2, #5
 8011d58:	68fa      	ldr	r2, [r7, #12]
 8011d5a:	440a      	add	r2, r1
 8011d5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011d60:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8011d64:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8011d66:	68bb      	ldr	r3, [r7, #8]
 8011d68:	015a      	lsls	r2, r3, #5
 8011d6a:	68fb      	ldr	r3, [r7, #12]
 8011d6c:	4413      	add	r3, r2
 8011d6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	68ba      	ldr	r2, [r7, #8]
 8011d76:	0151      	lsls	r1, r2, #5
 8011d78:	68fa      	ldr	r2, [r7, #12]
 8011d7a:	440a      	add	r2, r1
 8011d7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011d80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8011d84:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011d86:	2300      	movs	r3, #0
}
 8011d88:	4618      	mov	r0, r3
 8011d8a:	3714      	adds	r7, #20
 8011d8c:	46bd      	mov	sp, r7
 8011d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d92:	4770      	bx	lr

08011d94 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011d94:	b480      	push	{r7}
 8011d96:	b085      	sub	sp, #20
 8011d98:	af00      	add	r7, sp, #0
 8011d9a:	6078      	str	r0, [r7, #4]
 8011d9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011da2:	683b      	ldr	r3, [r7, #0]
 8011da4:	781b      	ldrb	r3, [r3, #0]
 8011da6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011da8:	683b      	ldr	r3, [r7, #0]
 8011daa:	785b      	ldrb	r3, [r3, #1]
 8011dac:	2b01      	cmp	r3, #1
 8011dae:	d128      	bne.n	8011e02 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8011db0:	68bb      	ldr	r3, [r7, #8]
 8011db2:	015a      	lsls	r2, r3, #5
 8011db4:	68fb      	ldr	r3, [r7, #12]
 8011db6:	4413      	add	r3, r2
 8011db8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011dbc:	681b      	ldr	r3, [r3, #0]
 8011dbe:	68ba      	ldr	r2, [r7, #8]
 8011dc0:	0151      	lsls	r1, r2, #5
 8011dc2:	68fa      	ldr	r2, [r7, #12]
 8011dc4:	440a      	add	r2, r1
 8011dc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011dca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011dce:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8011dd0:	683b      	ldr	r3, [r7, #0]
 8011dd2:	78db      	ldrb	r3, [r3, #3]
 8011dd4:	2b03      	cmp	r3, #3
 8011dd6:	d003      	beq.n	8011de0 <USB_EPClearStall+0x4c>
 8011dd8:	683b      	ldr	r3, [r7, #0]
 8011dda:	78db      	ldrb	r3, [r3, #3]
 8011ddc:	2b02      	cmp	r3, #2
 8011dde:	d138      	bne.n	8011e52 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8011de0:	68bb      	ldr	r3, [r7, #8]
 8011de2:	015a      	lsls	r2, r3, #5
 8011de4:	68fb      	ldr	r3, [r7, #12]
 8011de6:	4413      	add	r3, r2
 8011de8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011dec:	681b      	ldr	r3, [r3, #0]
 8011dee:	68ba      	ldr	r2, [r7, #8]
 8011df0:	0151      	lsls	r1, r2, #5
 8011df2:	68fa      	ldr	r2, [r7, #12]
 8011df4:	440a      	add	r2, r1
 8011df6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011dfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011dfe:	6013      	str	r3, [r2, #0]
 8011e00:	e027      	b.n	8011e52 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8011e02:	68bb      	ldr	r3, [r7, #8]
 8011e04:	015a      	lsls	r2, r3, #5
 8011e06:	68fb      	ldr	r3, [r7, #12]
 8011e08:	4413      	add	r3, r2
 8011e0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011e0e:	681b      	ldr	r3, [r3, #0]
 8011e10:	68ba      	ldr	r2, [r7, #8]
 8011e12:	0151      	lsls	r1, r2, #5
 8011e14:	68fa      	ldr	r2, [r7, #12]
 8011e16:	440a      	add	r2, r1
 8011e18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011e1c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011e20:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8011e22:	683b      	ldr	r3, [r7, #0]
 8011e24:	78db      	ldrb	r3, [r3, #3]
 8011e26:	2b03      	cmp	r3, #3
 8011e28:	d003      	beq.n	8011e32 <USB_EPClearStall+0x9e>
 8011e2a:	683b      	ldr	r3, [r7, #0]
 8011e2c:	78db      	ldrb	r3, [r3, #3]
 8011e2e:	2b02      	cmp	r3, #2
 8011e30:	d10f      	bne.n	8011e52 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8011e32:	68bb      	ldr	r3, [r7, #8]
 8011e34:	015a      	lsls	r2, r3, #5
 8011e36:	68fb      	ldr	r3, [r7, #12]
 8011e38:	4413      	add	r3, r2
 8011e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011e3e:	681b      	ldr	r3, [r3, #0]
 8011e40:	68ba      	ldr	r2, [r7, #8]
 8011e42:	0151      	lsls	r1, r2, #5
 8011e44:	68fa      	ldr	r2, [r7, #12]
 8011e46:	440a      	add	r2, r1
 8011e48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011e4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011e50:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8011e52:	2300      	movs	r3, #0
}
 8011e54:	4618      	mov	r0, r3
 8011e56:	3714      	adds	r7, #20
 8011e58:	46bd      	mov	sp, r7
 8011e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e5e:	4770      	bx	lr

08011e60 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8011e60:	b480      	push	{r7}
 8011e62:	b085      	sub	sp, #20
 8011e64:	af00      	add	r7, sp, #0
 8011e66:	6078      	str	r0, [r7, #4]
 8011e68:	460b      	mov	r3, r1
 8011e6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8011e70:	68fb      	ldr	r3, [r7, #12]
 8011e72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011e76:	681b      	ldr	r3, [r3, #0]
 8011e78:	68fa      	ldr	r2, [r7, #12]
 8011e7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011e7e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8011e82:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8011e84:	68fb      	ldr	r3, [r7, #12]
 8011e86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011e8a:	681a      	ldr	r2, [r3, #0]
 8011e8c:	78fb      	ldrb	r3, [r7, #3]
 8011e8e:	011b      	lsls	r3, r3, #4
 8011e90:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8011e94:	68f9      	ldr	r1, [r7, #12]
 8011e96:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011e9a:	4313      	orrs	r3, r2
 8011e9c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8011e9e:	2300      	movs	r3, #0
}
 8011ea0:	4618      	mov	r0, r3
 8011ea2:	3714      	adds	r7, #20
 8011ea4:	46bd      	mov	sp, r7
 8011ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eaa:	4770      	bx	lr

08011eac <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8011eac:	b580      	push	{r7, lr}
 8011eae:	b084      	sub	sp, #16
 8011eb0:	af00      	add	r7, sp, #0
 8011eb2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8011eb8:	68fb      	ldr	r3, [r7, #12]
 8011eba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011ebe:	685b      	ldr	r3, [r3, #4]
 8011ec0:	68fa      	ldr	r2, [r7, #12]
 8011ec2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011ec6:	f023 0302 	bic.w	r3, r3, #2
 8011eca:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8011ecc:	2003      	movs	r0, #3
 8011ece:	f7f1 fb65 	bl	800359c <HAL_Delay>

  return HAL_OK;
 8011ed2:	2300      	movs	r3, #0
}
 8011ed4:	4618      	mov	r0, r3
 8011ed6:	3710      	adds	r7, #16
 8011ed8:	46bd      	mov	sp, r7
 8011eda:	bd80      	pop	{r7, pc}

08011edc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8011edc:	b580      	push	{r7, lr}
 8011ede:	b084      	sub	sp, #16
 8011ee0:	af00      	add	r7, sp, #0
 8011ee2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8011ee8:	68fb      	ldr	r3, [r7, #12]
 8011eea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011eee:	685b      	ldr	r3, [r3, #4]
 8011ef0:	68fa      	ldr	r2, [r7, #12]
 8011ef2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011ef6:	f043 0302 	orr.w	r3, r3, #2
 8011efa:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8011efc:	2003      	movs	r0, #3
 8011efe:	f7f1 fb4d 	bl	800359c <HAL_Delay>

  return HAL_OK;
 8011f02:	2300      	movs	r3, #0
}
 8011f04:	4618      	mov	r0, r3
 8011f06:	3710      	adds	r7, #16
 8011f08:	46bd      	mov	sp, r7
 8011f0a:	bd80      	pop	{r7, pc}

08011f0c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8011f0c:	b480      	push	{r7}
 8011f0e:	b085      	sub	sp, #20
 8011f10:	af00      	add	r7, sp, #0
 8011f12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	695b      	ldr	r3, [r3, #20]
 8011f18:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	699b      	ldr	r3, [r3, #24]
 8011f1e:	68fa      	ldr	r2, [r7, #12]
 8011f20:	4013      	ands	r3, r2
 8011f22:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8011f24:	68fb      	ldr	r3, [r7, #12]
}
 8011f26:	4618      	mov	r0, r3
 8011f28:	3714      	adds	r7, #20
 8011f2a:	46bd      	mov	sp, r7
 8011f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f30:	4770      	bx	lr

08011f32 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8011f32:	b480      	push	{r7}
 8011f34:	b085      	sub	sp, #20
 8011f36:	af00      	add	r7, sp, #0
 8011f38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8011f3e:	68fb      	ldr	r3, [r7, #12]
 8011f40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011f44:	699b      	ldr	r3, [r3, #24]
 8011f46:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8011f48:	68fb      	ldr	r3, [r7, #12]
 8011f4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011f4e:	69db      	ldr	r3, [r3, #28]
 8011f50:	68ba      	ldr	r2, [r7, #8]
 8011f52:	4013      	ands	r3, r2
 8011f54:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8011f56:	68bb      	ldr	r3, [r7, #8]
 8011f58:	0c1b      	lsrs	r3, r3, #16
}
 8011f5a:	4618      	mov	r0, r3
 8011f5c:	3714      	adds	r7, #20
 8011f5e:	46bd      	mov	sp, r7
 8011f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f64:	4770      	bx	lr

08011f66 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8011f66:	b480      	push	{r7}
 8011f68:	b085      	sub	sp, #20
 8011f6a:	af00      	add	r7, sp, #0
 8011f6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8011f72:	68fb      	ldr	r3, [r7, #12]
 8011f74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011f78:	699b      	ldr	r3, [r3, #24]
 8011f7a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8011f7c:	68fb      	ldr	r3, [r7, #12]
 8011f7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011f82:	69db      	ldr	r3, [r3, #28]
 8011f84:	68ba      	ldr	r2, [r7, #8]
 8011f86:	4013      	ands	r3, r2
 8011f88:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8011f8a:	68bb      	ldr	r3, [r7, #8]
 8011f8c:	b29b      	uxth	r3, r3
}
 8011f8e:	4618      	mov	r0, r3
 8011f90:	3714      	adds	r7, #20
 8011f92:	46bd      	mov	sp, r7
 8011f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f98:	4770      	bx	lr

08011f9a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8011f9a:	b480      	push	{r7}
 8011f9c:	b085      	sub	sp, #20
 8011f9e:	af00      	add	r7, sp, #0
 8011fa0:	6078      	str	r0, [r7, #4]
 8011fa2:	460b      	mov	r3, r1
 8011fa4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8011faa:	78fb      	ldrb	r3, [r7, #3]
 8011fac:	015a      	lsls	r2, r3, #5
 8011fae:	68fb      	ldr	r3, [r7, #12]
 8011fb0:	4413      	add	r3, r2
 8011fb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011fb6:	689b      	ldr	r3, [r3, #8]
 8011fb8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8011fba:	68fb      	ldr	r3, [r7, #12]
 8011fbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011fc0:	695b      	ldr	r3, [r3, #20]
 8011fc2:	68ba      	ldr	r2, [r7, #8]
 8011fc4:	4013      	ands	r3, r2
 8011fc6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8011fc8:	68bb      	ldr	r3, [r7, #8]
}
 8011fca:	4618      	mov	r0, r3
 8011fcc:	3714      	adds	r7, #20
 8011fce:	46bd      	mov	sp, r7
 8011fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fd4:	4770      	bx	lr

08011fd6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8011fd6:	b480      	push	{r7}
 8011fd8:	b087      	sub	sp, #28
 8011fda:	af00      	add	r7, sp, #0
 8011fdc:	6078      	str	r0, [r7, #4]
 8011fde:	460b      	mov	r3, r1
 8011fe0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8011fe6:	697b      	ldr	r3, [r7, #20]
 8011fe8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011fec:	691b      	ldr	r3, [r3, #16]
 8011fee:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8011ff0:	697b      	ldr	r3, [r7, #20]
 8011ff2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011ff8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8011ffa:	78fb      	ldrb	r3, [r7, #3]
 8011ffc:	f003 030f 	and.w	r3, r3, #15
 8012000:	68fa      	ldr	r2, [r7, #12]
 8012002:	fa22 f303 	lsr.w	r3, r2, r3
 8012006:	01db      	lsls	r3, r3, #7
 8012008:	b2db      	uxtb	r3, r3
 801200a:	693a      	ldr	r2, [r7, #16]
 801200c:	4313      	orrs	r3, r2
 801200e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8012010:	78fb      	ldrb	r3, [r7, #3]
 8012012:	015a      	lsls	r2, r3, #5
 8012014:	697b      	ldr	r3, [r7, #20]
 8012016:	4413      	add	r3, r2
 8012018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801201c:	689b      	ldr	r3, [r3, #8]
 801201e:	693a      	ldr	r2, [r7, #16]
 8012020:	4013      	ands	r3, r2
 8012022:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8012024:	68bb      	ldr	r3, [r7, #8]
}
 8012026:	4618      	mov	r0, r3
 8012028:	371c      	adds	r7, #28
 801202a:	46bd      	mov	sp, r7
 801202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012030:	4770      	bx	lr

08012032 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8012032:	b480      	push	{r7}
 8012034:	b083      	sub	sp, #12
 8012036:	af00      	add	r7, sp, #0
 8012038:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	695b      	ldr	r3, [r3, #20]
 801203e:	f003 0301 	and.w	r3, r3, #1
}
 8012042:	4618      	mov	r0, r3
 8012044:	370c      	adds	r7, #12
 8012046:	46bd      	mov	sp, r7
 8012048:	f85d 7b04 	ldr.w	r7, [sp], #4
 801204c:	4770      	bx	lr
	...

08012050 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8012050:	b480      	push	{r7}
 8012052:	b085      	sub	sp, #20
 8012054:	af00      	add	r7, sp, #0
 8012056:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801205c:	68fb      	ldr	r3, [r7, #12]
 801205e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012062:	681a      	ldr	r2, [r3, #0]
 8012064:	68fb      	ldr	r3, [r7, #12]
 8012066:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801206a:	4619      	mov	r1, r3
 801206c:	4b09      	ldr	r3, [pc, #36]	; (8012094 <USB_ActivateSetup+0x44>)
 801206e:	4013      	ands	r3, r2
 8012070:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8012072:	68fb      	ldr	r3, [r7, #12]
 8012074:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012078:	685b      	ldr	r3, [r3, #4]
 801207a:	68fa      	ldr	r2, [r7, #12]
 801207c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012080:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012084:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8012086:	2300      	movs	r3, #0
}
 8012088:	4618      	mov	r0, r3
 801208a:	3714      	adds	r7, #20
 801208c:	46bd      	mov	sp, r7
 801208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012092:	4770      	bx	lr
 8012094:	fffff800 	.word	0xfffff800

08012098 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8012098:	b480      	push	{r7}
 801209a:	b087      	sub	sp, #28
 801209c:	af00      	add	r7, sp, #0
 801209e:	60f8      	str	r0, [r7, #12]
 80120a0:	460b      	mov	r3, r1
 80120a2:	607a      	str	r2, [r7, #4]
 80120a4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80120a6:	68fb      	ldr	r3, [r7, #12]
 80120a8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80120aa:	68fb      	ldr	r3, [r7, #12]
 80120ac:	333c      	adds	r3, #60	; 0x3c
 80120ae:	3304      	adds	r3, #4
 80120b0:	681b      	ldr	r3, [r3, #0]
 80120b2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80120b4:	693b      	ldr	r3, [r7, #16]
 80120b6:	4a26      	ldr	r2, [pc, #152]	; (8012150 <USB_EP0_OutStart+0xb8>)
 80120b8:	4293      	cmp	r3, r2
 80120ba:	d90a      	bls.n	80120d2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80120bc:	697b      	ldr	r3, [r7, #20]
 80120be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80120c2:	681b      	ldr	r3, [r3, #0]
 80120c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80120c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80120cc:	d101      	bne.n	80120d2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80120ce:	2300      	movs	r3, #0
 80120d0:	e037      	b.n	8012142 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80120d2:	697b      	ldr	r3, [r7, #20]
 80120d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80120d8:	461a      	mov	r2, r3
 80120da:	2300      	movs	r3, #0
 80120dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80120de:	697b      	ldr	r3, [r7, #20]
 80120e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80120e4:	691b      	ldr	r3, [r3, #16]
 80120e6:	697a      	ldr	r2, [r7, #20]
 80120e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80120ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80120f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80120f2:	697b      	ldr	r3, [r7, #20]
 80120f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80120f8:	691b      	ldr	r3, [r3, #16]
 80120fa:	697a      	ldr	r2, [r7, #20]
 80120fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012100:	f043 0318 	orr.w	r3, r3, #24
 8012104:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8012106:	697b      	ldr	r3, [r7, #20]
 8012108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801210c:	691b      	ldr	r3, [r3, #16]
 801210e:	697a      	ldr	r2, [r7, #20]
 8012110:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012114:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8012118:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801211a:	7afb      	ldrb	r3, [r7, #11]
 801211c:	2b01      	cmp	r3, #1
 801211e:	d10f      	bne.n	8012140 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8012120:	697b      	ldr	r3, [r7, #20]
 8012122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012126:	461a      	mov	r2, r3
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 801212c:	697b      	ldr	r3, [r7, #20]
 801212e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012132:	681b      	ldr	r3, [r3, #0]
 8012134:	697a      	ldr	r2, [r7, #20]
 8012136:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801213a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 801213e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012140:	2300      	movs	r3, #0
}
 8012142:	4618      	mov	r0, r3
 8012144:	371c      	adds	r7, #28
 8012146:	46bd      	mov	sp, r7
 8012148:	f85d 7b04 	ldr.w	r7, [sp], #4
 801214c:	4770      	bx	lr
 801214e:	bf00      	nop
 8012150:	4f54300a 	.word	0x4f54300a

08012154 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8012154:	b480      	push	{r7}
 8012156:	b085      	sub	sp, #20
 8012158:	af00      	add	r7, sp, #0
 801215a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 801215c:	2300      	movs	r3, #0
 801215e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8012160:	68fb      	ldr	r3, [r7, #12]
 8012162:	3301      	adds	r3, #1
 8012164:	60fb      	str	r3, [r7, #12]
 8012166:	68fb      	ldr	r3, [r7, #12]
 8012168:	4a13      	ldr	r2, [pc, #76]	; (80121b8 <USB_CoreReset+0x64>)
 801216a:	4293      	cmp	r3, r2
 801216c:	d901      	bls.n	8012172 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801216e:	2303      	movs	r3, #3
 8012170:	e01b      	b.n	80121aa <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	691b      	ldr	r3, [r3, #16]
 8012176:	2b00      	cmp	r3, #0
 8012178:	daf2      	bge.n	8012160 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801217a:	2300      	movs	r3, #0
 801217c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	691b      	ldr	r3, [r3, #16]
 8012182:	f043 0201 	orr.w	r2, r3, #1
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801218a:	68fb      	ldr	r3, [r7, #12]
 801218c:	3301      	adds	r3, #1
 801218e:	60fb      	str	r3, [r7, #12]
 8012190:	68fb      	ldr	r3, [r7, #12]
 8012192:	4a09      	ldr	r2, [pc, #36]	; (80121b8 <USB_CoreReset+0x64>)
 8012194:	4293      	cmp	r3, r2
 8012196:	d901      	bls.n	801219c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8012198:	2303      	movs	r3, #3
 801219a:	e006      	b.n	80121aa <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	691b      	ldr	r3, [r3, #16]
 80121a0:	f003 0301 	and.w	r3, r3, #1
 80121a4:	2b01      	cmp	r3, #1
 80121a6:	d0f0      	beq.n	801218a <USB_CoreReset+0x36>

  return HAL_OK;
 80121a8:	2300      	movs	r3, #0
}
 80121aa:	4618      	mov	r0, r3
 80121ac:	3714      	adds	r7, #20
 80121ae:	46bd      	mov	sp, r7
 80121b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121b4:	4770      	bx	lr
 80121b6:	bf00      	nop
 80121b8:	00030d40 	.word	0x00030d40

080121bc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80121bc:	b580      	push	{r7, lr}
 80121be:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80121c0:	4904      	ldr	r1, [pc, #16]	; (80121d4 <MX_FATFS_Init+0x18>)
 80121c2:	4805      	ldr	r0, [pc, #20]	; (80121d8 <MX_FATFS_Init+0x1c>)
 80121c4:	f005 fbec 	bl	80179a0 <FATFS_LinkDriver>
 80121c8:	4603      	mov	r3, r0
 80121ca:	461a      	mov	r2, r3
 80121cc:	4b03      	ldr	r3, [pc, #12]	; (80121dc <MX_FATFS_Init+0x20>)
 80121ce:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80121d0:	bf00      	nop
 80121d2:	bd80      	pop	{r7, pc}
 80121d4:	24001748 	.word	0x24001748
 80121d8:	08019edc 	.word	0x08019edc
 80121dc:	24001744 	.word	0x24001744

080121e0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80121e0:	b480      	push	{r7}
 80121e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80121e4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80121e6:	4618      	mov	r0, r3
 80121e8:	46bd      	mov	sp, r7
 80121ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121ee:	4770      	bx	lr

080121f0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80121f0:	b580      	push	{r7, lr}
 80121f2:	b082      	sub	sp, #8
 80121f4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80121f6:	2300      	movs	r3, #0
 80121f8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80121fa:	f000 f885 	bl	8012308 <BSP_SD_IsDetected>
 80121fe:	4603      	mov	r3, r0
 8012200:	2b01      	cmp	r3, #1
 8012202:	d001      	beq.n	8012208 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8012204:	2302      	movs	r3, #2
 8012206:	e012      	b.n	801222e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8012208:	480b      	ldr	r0, [pc, #44]	; (8012238 <BSP_SD_Init+0x48>)
 801220a:	f7f9 fc1d 	bl	800ba48 <HAL_SD_Init>
 801220e:	4603      	mov	r3, r0
 8012210:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8012212:	79fb      	ldrb	r3, [r7, #7]
 8012214:	2b00      	cmp	r3, #0
 8012216:	d109      	bne.n	801222c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8012218:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 801221c:	4806      	ldr	r0, [pc, #24]	; (8012238 <BSP_SD_Init+0x48>)
 801221e:	f7fa fdf1 	bl	800ce04 <HAL_SD_ConfigWideBusOperation>
 8012222:	4603      	mov	r3, r0
 8012224:	2b00      	cmp	r3, #0
 8012226:	d001      	beq.n	801222c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8012228:	2301      	movs	r3, #1
 801222a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 801222c:	79fb      	ldrb	r3, [r7, #7]
}
 801222e:	4618      	mov	r0, r3
 8012230:	3708      	adds	r7, #8
 8012232:	46bd      	mov	sp, r7
 8012234:	bd80      	pop	{r7, pc}
 8012236:	bf00      	nop
 8012238:	24001448 	.word	0x24001448

0801223c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 801223c:	b580      	push	{r7, lr}
 801223e:	b086      	sub	sp, #24
 8012240:	af00      	add	r7, sp, #0
 8012242:	60f8      	str	r0, [r7, #12]
 8012244:	60b9      	str	r1, [r7, #8]
 8012246:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8012248:	2300      	movs	r3, #0
 801224a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	68ba      	ldr	r2, [r7, #8]
 8012250:	68f9      	ldr	r1, [r7, #12]
 8012252:	4806      	ldr	r0, [pc, #24]	; (801226c <BSP_SD_ReadBlocks_DMA+0x30>)
 8012254:	f7fa f834 	bl	800c2c0 <HAL_SD_ReadBlocks_DMA>
 8012258:	4603      	mov	r3, r0
 801225a:	2b00      	cmp	r3, #0
 801225c:	d001      	beq.n	8012262 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801225e:	2301      	movs	r3, #1
 8012260:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8012262:	7dfb      	ldrb	r3, [r7, #23]
}
 8012264:	4618      	mov	r0, r3
 8012266:	3718      	adds	r7, #24
 8012268:	46bd      	mov	sp, r7
 801226a:	bd80      	pop	{r7, pc}
 801226c:	24001448 	.word	0x24001448

08012270 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8012270:	b580      	push	{r7, lr}
 8012272:	b086      	sub	sp, #24
 8012274:	af00      	add	r7, sp, #0
 8012276:	60f8      	str	r0, [r7, #12]
 8012278:	60b9      	str	r1, [r7, #8]
 801227a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 801227c:	2300      	movs	r3, #0
 801227e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	68ba      	ldr	r2, [r7, #8]
 8012284:	68f9      	ldr	r1, [r7, #12]
 8012286:	4806      	ldr	r0, [pc, #24]	; (80122a0 <BSP_SD_WriteBlocks_DMA+0x30>)
 8012288:	f7fa f8c2 	bl	800c410 <HAL_SD_WriteBlocks_DMA>
 801228c:	4603      	mov	r3, r0
 801228e:	2b00      	cmp	r3, #0
 8012290:	d001      	beq.n	8012296 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8012292:	2301      	movs	r3, #1
 8012294:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8012296:	7dfb      	ldrb	r3, [r7, #23]
}
 8012298:	4618      	mov	r0, r3
 801229a:	3718      	adds	r7, #24
 801229c:	46bd      	mov	sp, r7
 801229e:	bd80      	pop	{r7, pc}
 80122a0:	24001448 	.word	0x24001448

080122a4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80122a4:	b580      	push	{r7, lr}
 80122a6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80122a8:	4805      	ldr	r0, [pc, #20]	; (80122c0 <BSP_SD_GetCardState+0x1c>)
 80122aa:	f7fa fe55 	bl	800cf58 <HAL_SD_GetCardState>
 80122ae:	4603      	mov	r3, r0
 80122b0:	2b04      	cmp	r3, #4
 80122b2:	bf14      	ite	ne
 80122b4:	2301      	movne	r3, #1
 80122b6:	2300      	moveq	r3, #0
 80122b8:	b2db      	uxtb	r3, r3
}
 80122ba:	4618      	mov	r0, r3
 80122bc:	bd80      	pop	{r7, pc}
 80122be:	bf00      	nop
 80122c0:	24001448 	.word	0x24001448

080122c4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80122c4:	b580      	push	{r7, lr}
 80122c6:	b082      	sub	sp, #8
 80122c8:	af00      	add	r7, sp, #0
 80122ca:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80122cc:	6879      	ldr	r1, [r7, #4]
 80122ce:	4803      	ldr	r0, [pc, #12]	; (80122dc <BSP_SD_GetCardInfo+0x18>)
 80122d0:	f7fa fd6c 	bl	800cdac <HAL_SD_GetCardInfo>
}
 80122d4:	bf00      	nop
 80122d6:	3708      	adds	r7, #8
 80122d8:	46bd      	mov	sp, r7
 80122da:	bd80      	pop	{r7, pc}
 80122dc:	24001448 	.word	0x24001448

080122e0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80122e0:	b580      	push	{r7, lr}
 80122e2:	b082      	sub	sp, #8
 80122e4:	af00      	add	r7, sp, #0
 80122e6:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80122e8:	f000 f9a0 	bl	801262c <BSP_SD_WriteCpltCallback>
}
 80122ec:	bf00      	nop
 80122ee:	3708      	adds	r7, #8
 80122f0:	46bd      	mov	sp, r7
 80122f2:	bd80      	pop	{r7, pc}

080122f4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80122f4:	b580      	push	{r7, lr}
 80122f6:	b082      	sub	sp, #8
 80122f8:	af00      	add	r7, sp, #0
 80122fa:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80122fc:	f000 f9a2 	bl	8012644 <BSP_SD_ReadCpltCallback>
}
 8012300:	bf00      	nop
 8012302:	3708      	adds	r7, #8
 8012304:	46bd      	mov	sp, r7
 8012306:	bd80      	pop	{r7, pc}

08012308 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8012308:	b580      	push	{r7, lr}
 801230a:	b082      	sub	sp, #8
 801230c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 801230e:	2301      	movs	r3, #1
 8012310:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8012312:	f000 f80b 	bl	801232c <BSP_PlatformIsDetected>
 8012316:	4603      	mov	r3, r0
 8012318:	2b00      	cmp	r3, #0
 801231a:	d101      	bne.n	8012320 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 801231c:	2300      	movs	r3, #0
 801231e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8012320:	79fb      	ldrb	r3, [r7, #7]
 8012322:	b2db      	uxtb	r3, r3
}
 8012324:	4618      	mov	r0, r3
 8012326:	3708      	adds	r7, #8
 8012328:	46bd      	mov	sp, r7
 801232a:	bd80      	pop	{r7, pc}

0801232c <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 801232c:	b580      	push	{r7, lr}
 801232e:	b082      	sub	sp, #8
 8012330:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8012332:	2301      	movs	r3, #1
 8012334:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8012336:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801233a:	4806      	ldr	r0, [pc, #24]	; (8012354 <BSP_PlatformIsDetected+0x28>)
 801233c:	f7f4 fe30 	bl	8006fa0 <HAL_GPIO_ReadPin>
 8012340:	4603      	mov	r3, r0
 8012342:	2b00      	cmp	r3, #0
 8012344:	d001      	beq.n	801234a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8012346:	2300      	movs	r3, #0
 8012348:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 801234a:	79fb      	ldrb	r3, [r7, #7]
}
 801234c:	4618      	mov	r0, r3
 801234e:	3708      	adds	r7, #8
 8012350:	46bd      	mov	sp, r7
 8012352:	bd80      	pop	{r7, pc}
 8012354:	58020000 	.word	0x58020000

08012358 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8012358:	b580      	push	{r7, lr}
 801235a:	b084      	sub	sp, #16
 801235c:	af00      	add	r7, sp, #0
 801235e:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8012360:	f7f1 f910 	bl	8003584 <HAL_GetTick>
 8012364:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8012366:	e006      	b.n	8012376 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8012368:	f7ff ff9c 	bl	80122a4 <BSP_SD_GetCardState>
 801236c:	4603      	mov	r3, r0
 801236e:	2b00      	cmp	r3, #0
 8012370:	d101      	bne.n	8012376 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8012372:	2300      	movs	r3, #0
 8012374:	e009      	b.n	801238a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8012376:	f7f1 f905 	bl	8003584 <HAL_GetTick>
 801237a:	4602      	mov	r2, r0
 801237c:	68fb      	ldr	r3, [r7, #12]
 801237e:	1ad3      	subs	r3, r2, r3
 8012380:	687a      	ldr	r2, [r7, #4]
 8012382:	429a      	cmp	r2, r3
 8012384:	d8f0      	bhi.n	8012368 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8012386:	f04f 33ff 	mov.w	r3, #4294967295
}
 801238a:	4618      	mov	r0, r3
 801238c:	3710      	adds	r7, #16
 801238e:	46bd      	mov	sp, r7
 8012390:	bd80      	pop	{r7, pc}
	...

08012394 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8012394:	b580      	push	{r7, lr}
 8012396:	b082      	sub	sp, #8
 8012398:	af00      	add	r7, sp, #0
 801239a:	4603      	mov	r3, r0
 801239c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801239e:	4b0b      	ldr	r3, [pc, #44]	; (80123cc <SD_CheckStatus+0x38>)
 80123a0:	2201      	movs	r2, #1
 80123a2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80123a4:	f7ff ff7e 	bl	80122a4 <BSP_SD_GetCardState>
 80123a8:	4603      	mov	r3, r0
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	d107      	bne.n	80123be <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80123ae:	4b07      	ldr	r3, [pc, #28]	; (80123cc <SD_CheckStatus+0x38>)
 80123b0:	781b      	ldrb	r3, [r3, #0]
 80123b2:	b2db      	uxtb	r3, r3
 80123b4:	f023 0301 	bic.w	r3, r3, #1
 80123b8:	b2da      	uxtb	r2, r3
 80123ba:	4b04      	ldr	r3, [pc, #16]	; (80123cc <SD_CheckStatus+0x38>)
 80123bc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80123be:	4b03      	ldr	r3, [pc, #12]	; (80123cc <SD_CheckStatus+0x38>)
 80123c0:	781b      	ldrb	r3, [r3, #0]
 80123c2:	b2db      	uxtb	r3, r3
}
 80123c4:	4618      	mov	r0, r3
 80123c6:	3708      	adds	r7, #8
 80123c8:	46bd      	mov	sp, r7
 80123ca:	bd80      	pop	{r7, pc}
 80123cc:	24000019 	.word	0x24000019

080123d0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80123d0:	b580      	push	{r7, lr}
 80123d2:	b082      	sub	sp, #8
 80123d4:	af00      	add	r7, sp, #0
 80123d6:	4603      	mov	r3, r0
 80123d8:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80123da:	f7ff ff09 	bl	80121f0 <BSP_SD_Init>
 80123de:	4603      	mov	r3, r0
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	d107      	bne.n	80123f4 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80123e4:	79fb      	ldrb	r3, [r7, #7]
 80123e6:	4618      	mov	r0, r3
 80123e8:	f7ff ffd4 	bl	8012394 <SD_CheckStatus>
 80123ec:	4603      	mov	r3, r0
 80123ee:	461a      	mov	r2, r3
 80123f0:	4b04      	ldr	r3, [pc, #16]	; (8012404 <SD_initialize+0x34>)
 80123f2:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80123f4:	4b03      	ldr	r3, [pc, #12]	; (8012404 <SD_initialize+0x34>)
 80123f6:	781b      	ldrb	r3, [r3, #0]
 80123f8:	b2db      	uxtb	r3, r3
}
 80123fa:	4618      	mov	r0, r3
 80123fc:	3708      	adds	r7, #8
 80123fe:	46bd      	mov	sp, r7
 8012400:	bd80      	pop	{r7, pc}
 8012402:	bf00      	nop
 8012404:	24000019 	.word	0x24000019

08012408 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8012408:	b580      	push	{r7, lr}
 801240a:	b082      	sub	sp, #8
 801240c:	af00      	add	r7, sp, #0
 801240e:	4603      	mov	r3, r0
 8012410:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8012412:	79fb      	ldrb	r3, [r7, #7]
 8012414:	4618      	mov	r0, r3
 8012416:	f7ff ffbd 	bl	8012394 <SD_CheckStatus>
 801241a:	4603      	mov	r3, r0
}
 801241c:	4618      	mov	r0, r3
 801241e:	3708      	adds	r7, #8
 8012420:	46bd      	mov	sp, r7
 8012422:	bd80      	pop	{r7, pc}

08012424 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8012424:	b580      	push	{r7, lr}
 8012426:	b086      	sub	sp, #24
 8012428:	af00      	add	r7, sp, #0
 801242a:	60b9      	str	r1, [r7, #8]
 801242c:	607a      	str	r2, [r7, #4]
 801242e:	603b      	str	r3, [r7, #0]
 8012430:	4603      	mov	r3, r0
 8012432:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8012434:	2301      	movs	r3, #1
 8012436:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8012438:	f247 5030 	movw	r0, #30000	; 0x7530
 801243c:	f7ff ff8c 	bl	8012358 <SD_CheckStatusWithTimeout>
 8012440:	4603      	mov	r3, r0
 8012442:	2b00      	cmp	r3, #0
 8012444:	da01      	bge.n	801244a <SD_read+0x26>
  {
    return res;
 8012446:	7dfb      	ldrb	r3, [r7, #23]
 8012448:	e03b      	b.n	80124c2 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 801244a:	683a      	ldr	r2, [r7, #0]
 801244c:	6879      	ldr	r1, [r7, #4]
 801244e:	68b8      	ldr	r0, [r7, #8]
 8012450:	f7ff fef4 	bl	801223c <BSP_SD_ReadBlocks_DMA>
 8012454:	4603      	mov	r3, r0
 8012456:	2b00      	cmp	r3, #0
 8012458:	d132      	bne.n	80124c0 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 801245a:	4b1c      	ldr	r3, [pc, #112]	; (80124cc <SD_read+0xa8>)
 801245c:	2200      	movs	r2, #0
 801245e:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8012460:	f7f1 f890 	bl	8003584 <HAL_GetTick>
 8012464:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8012466:	bf00      	nop
 8012468:	4b18      	ldr	r3, [pc, #96]	; (80124cc <SD_read+0xa8>)
 801246a:	681b      	ldr	r3, [r3, #0]
 801246c:	2b00      	cmp	r3, #0
 801246e:	d108      	bne.n	8012482 <SD_read+0x5e>
 8012470:	f7f1 f888 	bl	8003584 <HAL_GetTick>
 8012474:	4602      	mov	r2, r0
 8012476:	693b      	ldr	r3, [r7, #16]
 8012478:	1ad3      	subs	r3, r2, r3
 801247a:	f247 522f 	movw	r2, #29999	; 0x752f
 801247e:	4293      	cmp	r3, r2
 8012480:	d9f2      	bls.n	8012468 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 8012482:	4b12      	ldr	r3, [pc, #72]	; (80124cc <SD_read+0xa8>)
 8012484:	681b      	ldr	r3, [r3, #0]
 8012486:	2b00      	cmp	r3, #0
 8012488:	d102      	bne.n	8012490 <SD_read+0x6c>
      {
        res = RES_ERROR;
 801248a:	2301      	movs	r3, #1
 801248c:	75fb      	strb	r3, [r7, #23]
 801248e:	e017      	b.n	80124c0 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8012490:	4b0e      	ldr	r3, [pc, #56]	; (80124cc <SD_read+0xa8>)
 8012492:	2200      	movs	r2, #0
 8012494:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8012496:	f7f1 f875 	bl	8003584 <HAL_GetTick>
 801249a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801249c:	e007      	b.n	80124ae <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801249e:	f7ff ff01 	bl	80122a4 <BSP_SD_GetCardState>
 80124a2:	4603      	mov	r3, r0
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	d102      	bne.n	80124ae <SD_read+0x8a>
          {
            res = RES_OK;
 80124a8:	2300      	movs	r3, #0
 80124aa:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80124ac:	e008      	b.n	80124c0 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80124ae:	f7f1 f869 	bl	8003584 <HAL_GetTick>
 80124b2:	4602      	mov	r2, r0
 80124b4:	693b      	ldr	r3, [r7, #16]
 80124b6:	1ad3      	subs	r3, r2, r3
 80124b8:	f247 522f 	movw	r2, #29999	; 0x752f
 80124bc:	4293      	cmp	r3, r2
 80124be:	d9ee      	bls.n	801249e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80124c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80124c2:	4618      	mov	r0, r3
 80124c4:	3718      	adds	r7, #24
 80124c6:	46bd      	mov	sp, r7
 80124c8:	bd80      	pop	{r7, pc}
 80124ca:	bf00      	nop
 80124cc:	24000b48 	.word	0x24000b48

080124d0 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80124d0:	b580      	push	{r7, lr}
 80124d2:	b086      	sub	sp, #24
 80124d4:	af00      	add	r7, sp, #0
 80124d6:	60b9      	str	r1, [r7, #8]
 80124d8:	607a      	str	r2, [r7, #4]
 80124da:	603b      	str	r3, [r7, #0]
 80124dc:	4603      	mov	r3, r0
 80124de:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80124e0:	2301      	movs	r3, #1
 80124e2:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80124e4:	4b24      	ldr	r3, [pc, #144]	; (8012578 <SD_write+0xa8>)
 80124e6:	2200      	movs	r2, #0
 80124e8:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80124ea:	f247 5030 	movw	r0, #30000	; 0x7530
 80124ee:	f7ff ff33 	bl	8012358 <SD_CheckStatusWithTimeout>
 80124f2:	4603      	mov	r3, r0
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	da01      	bge.n	80124fc <SD_write+0x2c>
  {
    return res;
 80124f8:	7dfb      	ldrb	r3, [r7, #23]
 80124fa:	e038      	b.n	801256e <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80124fc:	683a      	ldr	r2, [r7, #0]
 80124fe:	6879      	ldr	r1, [r7, #4]
 8012500:	68b8      	ldr	r0, [r7, #8]
 8012502:	f7ff feb5 	bl	8012270 <BSP_SD_WriteBlocks_DMA>
 8012506:	4603      	mov	r3, r0
 8012508:	2b00      	cmp	r3, #0
 801250a:	d12f      	bne.n	801256c <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 801250c:	f7f1 f83a 	bl	8003584 <HAL_GetTick>
 8012510:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8012512:	bf00      	nop
 8012514:	4b18      	ldr	r3, [pc, #96]	; (8012578 <SD_write+0xa8>)
 8012516:	681b      	ldr	r3, [r3, #0]
 8012518:	2b00      	cmp	r3, #0
 801251a:	d108      	bne.n	801252e <SD_write+0x5e>
 801251c:	f7f1 f832 	bl	8003584 <HAL_GetTick>
 8012520:	4602      	mov	r2, r0
 8012522:	693b      	ldr	r3, [r7, #16]
 8012524:	1ad3      	subs	r3, r2, r3
 8012526:	f247 522f 	movw	r2, #29999	; 0x752f
 801252a:	4293      	cmp	r3, r2
 801252c:	d9f2      	bls.n	8012514 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 801252e:	4b12      	ldr	r3, [pc, #72]	; (8012578 <SD_write+0xa8>)
 8012530:	681b      	ldr	r3, [r3, #0]
 8012532:	2b00      	cmp	r3, #0
 8012534:	d102      	bne.n	801253c <SD_write+0x6c>
      {
        res = RES_ERROR;
 8012536:	2301      	movs	r3, #1
 8012538:	75fb      	strb	r3, [r7, #23]
 801253a:	e017      	b.n	801256c <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 801253c:	4b0e      	ldr	r3, [pc, #56]	; (8012578 <SD_write+0xa8>)
 801253e:	2200      	movs	r2, #0
 8012540:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8012542:	f7f1 f81f 	bl	8003584 <HAL_GetTick>
 8012546:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8012548:	e007      	b.n	801255a <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801254a:	f7ff feab 	bl	80122a4 <BSP_SD_GetCardState>
 801254e:	4603      	mov	r3, r0
 8012550:	2b00      	cmp	r3, #0
 8012552:	d102      	bne.n	801255a <SD_write+0x8a>
          {
            res = RES_OK;
 8012554:	2300      	movs	r3, #0
 8012556:	75fb      	strb	r3, [r7, #23]
            break;
 8012558:	e008      	b.n	801256c <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801255a:	f7f1 f813 	bl	8003584 <HAL_GetTick>
 801255e:	4602      	mov	r2, r0
 8012560:	693b      	ldr	r3, [r7, #16]
 8012562:	1ad3      	subs	r3, r2, r3
 8012564:	f247 522f 	movw	r2, #29999	; 0x752f
 8012568:	4293      	cmp	r3, r2
 801256a:	d9ee      	bls.n	801254a <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 801256c:	7dfb      	ldrb	r3, [r7, #23]
}
 801256e:	4618      	mov	r0, r3
 8012570:	3718      	adds	r7, #24
 8012572:	46bd      	mov	sp, r7
 8012574:	bd80      	pop	{r7, pc}
 8012576:	bf00      	nop
 8012578:	24000b44 	.word	0x24000b44

0801257c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 801257c:	b580      	push	{r7, lr}
 801257e:	b08c      	sub	sp, #48	; 0x30
 8012580:	af00      	add	r7, sp, #0
 8012582:	4603      	mov	r3, r0
 8012584:	603a      	str	r2, [r7, #0]
 8012586:	71fb      	strb	r3, [r7, #7]
 8012588:	460b      	mov	r3, r1
 801258a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 801258c:	2301      	movs	r3, #1
 801258e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8012592:	4b25      	ldr	r3, [pc, #148]	; (8012628 <SD_ioctl+0xac>)
 8012594:	781b      	ldrb	r3, [r3, #0]
 8012596:	b2db      	uxtb	r3, r3
 8012598:	f003 0301 	and.w	r3, r3, #1
 801259c:	2b00      	cmp	r3, #0
 801259e:	d001      	beq.n	80125a4 <SD_ioctl+0x28>
 80125a0:	2303      	movs	r3, #3
 80125a2:	e03c      	b.n	801261e <SD_ioctl+0xa2>

  switch (cmd)
 80125a4:	79bb      	ldrb	r3, [r7, #6]
 80125a6:	2b03      	cmp	r3, #3
 80125a8:	d834      	bhi.n	8012614 <SD_ioctl+0x98>
 80125aa:	a201      	add	r2, pc, #4	; (adr r2, 80125b0 <SD_ioctl+0x34>)
 80125ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80125b0:	080125c1 	.word	0x080125c1
 80125b4:	080125c9 	.word	0x080125c9
 80125b8:	080125e1 	.word	0x080125e1
 80125bc:	080125fb 	.word	0x080125fb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80125c0:	2300      	movs	r3, #0
 80125c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80125c6:	e028      	b.n	801261a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80125c8:	f107 0308 	add.w	r3, r7, #8
 80125cc:	4618      	mov	r0, r3
 80125ce:	f7ff fe79 	bl	80122c4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80125d2:	6a3a      	ldr	r2, [r7, #32]
 80125d4:	683b      	ldr	r3, [r7, #0]
 80125d6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80125d8:	2300      	movs	r3, #0
 80125da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80125de:	e01c      	b.n	801261a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80125e0:	f107 0308 	add.w	r3, r7, #8
 80125e4:	4618      	mov	r0, r3
 80125e6:	f7ff fe6d 	bl	80122c4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80125ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125ec:	b29a      	uxth	r2, r3
 80125ee:	683b      	ldr	r3, [r7, #0]
 80125f0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80125f2:	2300      	movs	r3, #0
 80125f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80125f8:	e00f      	b.n	801261a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80125fa:	f107 0308 	add.w	r3, r7, #8
 80125fe:	4618      	mov	r0, r3
 8012600:	f7ff fe60 	bl	80122c4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8012604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012606:	0a5a      	lsrs	r2, r3, #9
 8012608:	683b      	ldr	r3, [r7, #0]
 801260a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801260c:	2300      	movs	r3, #0
 801260e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012612:	e002      	b.n	801261a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8012614:	2304      	movs	r3, #4
 8012616:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 801261a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801261e:	4618      	mov	r0, r3
 8012620:	3730      	adds	r7, #48	; 0x30
 8012622:	46bd      	mov	sp, r7
 8012624:	bd80      	pop	{r7, pc}
 8012626:	bf00      	nop
 8012628:	24000019 	.word	0x24000019

0801262c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 801262c:	b480      	push	{r7}
 801262e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8012630:	4b03      	ldr	r3, [pc, #12]	; (8012640 <BSP_SD_WriteCpltCallback+0x14>)
 8012632:	2201      	movs	r2, #1
 8012634:	601a      	str	r2, [r3, #0]
}
 8012636:	bf00      	nop
 8012638:	46bd      	mov	sp, r7
 801263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801263e:	4770      	bx	lr
 8012640:	24000b44 	.word	0x24000b44

08012644 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8012644:	b480      	push	{r7}
 8012646:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8012648:	4b03      	ldr	r3, [pc, #12]	; (8012658 <BSP_SD_ReadCpltCallback+0x14>)
 801264a:	2201      	movs	r2, #1
 801264c:	601a      	str	r2, [r3, #0]
}
 801264e:	bf00      	nop
 8012650:	46bd      	mov	sp, r7
 8012652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012656:	4770      	bx	lr
 8012658:	24000b48 	.word	0x24000b48

0801265c <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801265c:	b580      	push	{r7, lr}
 801265e:	b084      	sub	sp, #16
 8012660:	af00      	add	r7, sp, #0
 8012662:	6078      	str	r0, [r7, #4]
 8012664:	460b      	mov	r3, r1
 8012666:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8012668:	f248 0074 	movw	r0, #32884	; 0x8074
 801266c:	f005 fed0 	bl	8018410 <malloc>
 8012670:	4603      	mov	r3, r0
 8012672:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8012674:	68fb      	ldr	r3, [r7, #12]
 8012676:	2b00      	cmp	r3, #0
 8012678:	d105      	bne.n	8012686 <USBD_MSC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	2200      	movs	r2, #0
 801267e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8012682:	2302      	movs	r3, #2
 8012684:	e034      	b.n	80126f0 <USBD_MSC_Init+0x94>
  }

  pdev->pClassData = (void *)hmsc;
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	68fa      	ldr	r2, [r7, #12]
 801268a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	7c1b      	ldrb	r3, [r3, #16]
 8012692:	2b00      	cmp	r3, #0
 8012694:	d115      	bne.n	80126c2 <USBD_MSC_Init+0x66>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8012696:	f44f 7300 	mov.w	r3, #512	; 0x200
 801269a:	2202      	movs	r2, #2
 801269c:	2101      	movs	r1, #1
 801269e:	6878      	ldr	r0, [r7, #4]
 80126a0:	f005 fd1d 	bl	80180de <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	2201      	movs	r2, #1
 80126a8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 80126ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80126b0:	2202      	movs	r2, #2
 80126b2:	2181      	movs	r1, #129	; 0x81
 80126b4:	6878      	ldr	r0, [r7, #4]
 80126b6:	f005 fd12 	bl	80180de <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	2201      	movs	r2, #1
 80126be:	871a      	strh	r2, [r3, #56]	; 0x38
 80126c0:	e012      	b.n	80126e8 <USBD_MSC_Init+0x8c>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 80126c2:	2340      	movs	r3, #64	; 0x40
 80126c4:	2202      	movs	r2, #2
 80126c6:	2101      	movs	r1, #1
 80126c8:	6878      	ldr	r0, [r7, #4]
 80126ca:	f005 fd08 	bl	80180de <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	2201      	movs	r2, #1
 80126d2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 80126d6:	2340      	movs	r3, #64	; 0x40
 80126d8:	2202      	movs	r2, #2
 80126da:	2181      	movs	r1, #129	; 0x81
 80126dc:	6878      	ldr	r0, [r7, #4]
 80126de:	f005 fcfe 	bl	80180de <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	2201      	movs	r2, #1
 80126e6:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 80126e8:	6878      	ldr	r0, [r7, #4]
 80126ea:	f000 f98e 	bl	8012a0a <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 80126ee:	2300      	movs	r3, #0
}
 80126f0:	4618      	mov	r0, r3
 80126f2:	3710      	adds	r7, #16
 80126f4:	46bd      	mov	sp, r7
 80126f6:	bd80      	pop	{r7, pc}

080126f8 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80126f8:	b580      	push	{r7, lr}
 80126fa:	b082      	sub	sp, #8
 80126fc:	af00      	add	r7, sp, #0
 80126fe:	6078      	str	r0, [r7, #4]
 8012700:	460b      	mov	r3, r1
 8012702:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 8012704:	2101      	movs	r1, #1
 8012706:	6878      	ldr	r0, [r7, #4]
 8012708:	f005 fd0f 	bl	801812a <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	2200      	movs	r2, #0
 8012710:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 8012714:	2181      	movs	r1, #129	; 0x81
 8012716:	6878      	ldr	r0, [r7, #4]
 8012718:	f005 fd07 	bl	801812a <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	2200      	movs	r2, #0
 8012720:	871a      	strh	r2, [r3, #56]	; 0x38

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 8012722:	6878      	ldr	r0, [r7, #4]
 8012724:	f000 f9cf 	bl	8012ac6 <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801272e:	2b00      	cmp	r3, #0
 8012730:	d009      	beq.n	8012746 <USBD_MSC_DeInit+0x4e>
  {
    (void)USBD_free(pdev->pClassData);
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012738:	4618      	mov	r0, r3
 801273a:	f005 fe71 	bl	8018420 <free>
    pdev->pClassData = NULL;
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	2200      	movs	r2, #0
 8012742:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8012746:	2300      	movs	r3, #0
}
 8012748:	4618      	mov	r0, r3
 801274a:	3708      	adds	r7, #8
 801274c:	46bd      	mov	sp, r7
 801274e:	bd80      	pop	{r7, pc}

08012750 <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012750:	b580      	push	{r7, lr}
 8012752:	b086      	sub	sp, #24
 8012754:	af00      	add	r7, sp, #0
 8012756:	6078      	str	r0, [r7, #4]
 8012758:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012760:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8012762:	2300      	movs	r3, #0
 8012764:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8012766:	2300      	movs	r3, #0
 8012768:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801276a:	683b      	ldr	r3, [r7, #0]
 801276c:	781b      	ldrb	r3, [r3, #0]
 801276e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012772:	2b00      	cmp	r3, #0
 8012774:	d04d      	beq.n	8012812 <USBD_MSC_Setup+0xc2>
 8012776:	2b20      	cmp	r3, #32
 8012778:	f040 80c6 	bne.w	8012908 <USBD_MSC_Setup+0x1b8>
  {
    /* Class request */
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 801277c:	683b      	ldr	r3, [r7, #0]
 801277e:	785b      	ldrb	r3, [r3, #1]
 8012780:	2bfe      	cmp	r3, #254	; 0xfe
 8012782:	d002      	beq.n	801278a <USBD_MSC_Setup+0x3a>
 8012784:	2bff      	cmp	r3, #255	; 0xff
 8012786:	d024      	beq.n	80127d2 <USBD_MSC_Setup+0x82>
 8012788:	e03b      	b.n	8012802 <USBD_MSC_Setup+0xb2>
    {
    case BOT_GET_MAX_LUN:
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 801278a:	683b      	ldr	r3, [r7, #0]
 801278c:	885b      	ldrh	r3, [r3, #2]
 801278e:	2b00      	cmp	r3, #0
 8012790:	d118      	bne.n	80127c4 <USBD_MSC_Setup+0x74>
 8012792:	683b      	ldr	r3, [r7, #0]
 8012794:	88db      	ldrh	r3, [r3, #6]
 8012796:	2b01      	cmp	r3, #1
 8012798:	d114      	bne.n	80127c4 <USBD_MSC_Setup+0x74>
          ((req->bmRequest & 0x80U) == 0x80U))
 801279a:	683b      	ldr	r3, [r7, #0]
 801279c:	781b      	ldrb	r3, [r3, #0]
 801279e:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	da0f      	bge.n	80127c4 <USBD_MSC_Setup+0x74>
      {
        hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80127aa:	699b      	ldr	r3, [r3, #24]
 80127ac:	4798      	blx	r3
 80127ae:	4603      	mov	r3, r0
 80127b0:	461a      	mov	r2, r3
 80127b2:	693b      	ldr	r3, [r7, #16]
 80127b4:	601a      	str	r2, [r3, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 80127b6:	693b      	ldr	r3, [r7, #16]
 80127b8:	2201      	movs	r2, #1
 80127ba:	4619      	mov	r1, r3
 80127bc:	6878      	ldr	r0, [r7, #4]
 80127be:	f002 fdaa 	bl	8015316 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80127c2:	e025      	b.n	8012810 <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 80127c4:	6839      	ldr	r1, [r7, #0]
 80127c6:	6878      	ldr	r0, [r7, #4]
 80127c8:	f002 fd34 	bl	8015234 <USBD_CtlError>
        ret = USBD_FAIL;
 80127cc:	2303      	movs	r3, #3
 80127ce:	75fb      	strb	r3, [r7, #23]
      break;
 80127d0:	e01e      	b.n	8012810 <USBD_MSC_Setup+0xc0>

    case BOT_RESET :
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 80127d2:	683b      	ldr	r3, [r7, #0]
 80127d4:	885b      	ldrh	r3, [r3, #2]
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d10c      	bne.n	80127f4 <USBD_MSC_Setup+0xa4>
 80127da:	683b      	ldr	r3, [r7, #0]
 80127dc:	88db      	ldrh	r3, [r3, #6]
 80127de:	2b00      	cmp	r3, #0
 80127e0:	d108      	bne.n	80127f4 <USBD_MSC_Setup+0xa4>
          ((req->bmRequest & 0x80U) != 0x80U))
 80127e2:	683b      	ldr	r3, [r7, #0]
 80127e4:	781b      	ldrb	r3, [r3, #0]
 80127e6:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	db03      	blt.n	80127f4 <USBD_MSC_Setup+0xa4>
      {
        MSC_BOT_Reset(pdev);
 80127ec:	6878      	ldr	r0, [r7, #4]
 80127ee:	f000 f947 	bl	8012a80 <MSC_BOT_Reset>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80127f2:	e00d      	b.n	8012810 <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 80127f4:	6839      	ldr	r1, [r7, #0]
 80127f6:	6878      	ldr	r0, [r7, #4]
 80127f8:	f002 fd1c 	bl	8015234 <USBD_CtlError>
        ret = USBD_FAIL;
 80127fc:	2303      	movs	r3, #3
 80127fe:	75fb      	strb	r3, [r7, #23]
      break;
 8012800:	e006      	b.n	8012810 <USBD_MSC_Setup+0xc0>

    default:
      USBD_CtlError(pdev, req);
 8012802:	6839      	ldr	r1, [r7, #0]
 8012804:	6878      	ldr	r0, [r7, #4]
 8012806:	f002 fd15 	bl	8015234 <USBD_CtlError>
      ret = USBD_FAIL;
 801280a:	2303      	movs	r3, #3
 801280c:	75fb      	strb	r3, [r7, #23]
      break;
 801280e:	bf00      	nop
    }
    break;
 8012810:	e081      	b.n	8012916 <USBD_MSC_Setup+0x1c6>
    /* Interface & Endpoint request */
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8012812:	683b      	ldr	r3, [r7, #0]
 8012814:	785b      	ldrb	r3, [r3, #1]
 8012816:	2b0b      	cmp	r3, #11
 8012818:	d86d      	bhi.n	80128f6 <USBD_MSC_Setup+0x1a6>
 801281a:	a201      	add	r2, pc, #4	; (adr r2, 8012820 <USBD_MSC_Setup+0xd0>)
 801281c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012820:	08012851 	.word	0x08012851
 8012824:	080128c7 	.word	0x080128c7
 8012828:	080128f7 	.word	0x080128f7
 801282c:	080128f7 	.word	0x080128f7
 8012830:	080128f7 	.word	0x080128f7
 8012834:	080128f7 	.word	0x080128f7
 8012838:	080128f7 	.word	0x080128f7
 801283c:	080128f7 	.word	0x080128f7
 8012840:	080128f7 	.word	0x080128f7
 8012844:	080128f7 	.word	0x080128f7
 8012848:	08012879 	.word	0x08012879
 801284c:	080128a1 	.word	0x080128a1
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012856:	2b03      	cmp	r3, #3
 8012858:	d107      	bne.n	801286a <USBD_MSC_Setup+0x11a>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801285a:	f107 030e 	add.w	r3, r7, #14
 801285e:	2202      	movs	r2, #2
 8012860:	4619      	mov	r1, r3
 8012862:	6878      	ldr	r0, [r7, #4]
 8012864:	f002 fd57 	bl	8015316 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8012868:	e04d      	b.n	8012906 <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 801286a:	6839      	ldr	r1, [r7, #0]
 801286c:	6878      	ldr	r0, [r7, #4]
 801286e:	f002 fce1 	bl	8015234 <USBD_CtlError>
        ret = USBD_FAIL;
 8012872:	2303      	movs	r3, #3
 8012874:	75fb      	strb	r3, [r7, #23]
      break;
 8012876:	e046      	b.n	8012906 <USBD_MSC_Setup+0x1b6>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801287e:	2b03      	cmp	r3, #3
 8012880:	d107      	bne.n	8012892 <USBD_MSC_Setup+0x142>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8012882:	693b      	ldr	r3, [r7, #16]
 8012884:	3304      	adds	r3, #4
 8012886:	2201      	movs	r2, #1
 8012888:	4619      	mov	r1, r3
 801288a:	6878      	ldr	r0, [r7, #4]
 801288c:	f002 fd43 	bl	8015316 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8012890:	e039      	b.n	8012906 <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 8012892:	6839      	ldr	r1, [r7, #0]
 8012894:	6878      	ldr	r0, [r7, #4]
 8012896:	f002 fccd 	bl	8015234 <USBD_CtlError>
        ret = USBD_FAIL;
 801289a:	2303      	movs	r3, #3
 801289c:	75fb      	strb	r3, [r7, #23]
      break;
 801289e:	e032      	b.n	8012906 <USBD_MSC_Setup+0x1b6>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80128a6:	2b03      	cmp	r3, #3
 80128a8:	d106      	bne.n	80128b8 <USBD_MSC_Setup+0x168>
      {
        hmsc->interface = (uint8_t)(req->wValue);
 80128aa:	683b      	ldr	r3, [r7, #0]
 80128ac:	885b      	ldrh	r3, [r3, #2]
 80128ae:	b2db      	uxtb	r3, r3
 80128b0:	461a      	mov	r2, r3
 80128b2:	693b      	ldr	r3, [r7, #16]
 80128b4:	605a      	str	r2, [r3, #4]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80128b6:	e026      	b.n	8012906 <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 80128b8:	6839      	ldr	r1, [r7, #0]
 80128ba:	6878      	ldr	r0, [r7, #4]
 80128bc:	f002 fcba 	bl	8015234 <USBD_CtlError>
        ret = USBD_FAIL;
 80128c0:	2303      	movs	r3, #3
 80128c2:	75fb      	strb	r3, [r7, #23]
      break;
 80128c4:	e01f      	b.n	8012906 <USBD_MSC_Setup+0x1b6>

    case USB_REQ_CLEAR_FEATURE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80128cc:	2b03      	cmp	r3, #3
 80128ce:	d119      	bne.n	8012904 <USBD_MSC_Setup+0x1b4>
      {
        if (req->wValue == USB_FEATURE_EP_HALT)
 80128d0:	683b      	ldr	r3, [r7, #0]
 80128d2:	885b      	ldrh	r3, [r3, #2]
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d115      	bne.n	8012904 <USBD_MSC_Setup+0x1b4>
        {
          /* Flush the FIFO */
          (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 80128d8:	683b      	ldr	r3, [r7, #0]
 80128da:	889b      	ldrh	r3, [r3, #4]
 80128dc:	b2db      	uxtb	r3, r3
 80128de:	4619      	mov	r1, r3
 80128e0:	6878      	ldr	r0, [r7, #4]
 80128e2:	f005 fc41 	bl	8018168 <USBD_LL_FlushEP>

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 80128e6:	683b      	ldr	r3, [r7, #0]
 80128e8:	889b      	ldrh	r3, [r3, #4]
 80128ea:	b2db      	uxtb	r3, r3
 80128ec:	4619      	mov	r1, r3
 80128ee:	6878      	ldr	r0, [r7, #4]
 80128f0:	f000 fa90 	bl	8012e14 <MSC_BOT_CplClrFeature>
        }
      }
      break;
 80128f4:	e006      	b.n	8012904 <USBD_MSC_Setup+0x1b4>

    default:
      USBD_CtlError(pdev, req);
 80128f6:	6839      	ldr	r1, [r7, #0]
 80128f8:	6878      	ldr	r0, [r7, #4]
 80128fa:	f002 fc9b 	bl	8015234 <USBD_CtlError>
      ret = USBD_FAIL;
 80128fe:	2303      	movs	r3, #3
 8012900:	75fb      	strb	r3, [r7, #23]
      break;
 8012902:	e000      	b.n	8012906 <USBD_MSC_Setup+0x1b6>
      break;
 8012904:	bf00      	nop
    }
    break;
 8012906:	e006      	b.n	8012916 <USBD_MSC_Setup+0x1c6>

  default:
    USBD_CtlError(pdev, req);
 8012908:	6839      	ldr	r1, [r7, #0]
 801290a:	6878      	ldr	r0, [r7, #4]
 801290c:	f002 fc92 	bl	8015234 <USBD_CtlError>
    ret = USBD_FAIL;
 8012910:	2303      	movs	r3, #3
 8012912:	75fb      	strb	r3, [r7, #23]
    break;
 8012914:	bf00      	nop
  }

  return (uint8_t)ret;
 8012916:	7dfb      	ldrb	r3, [r7, #23]
}
 8012918:	4618      	mov	r0, r3
 801291a:	3718      	adds	r7, #24
 801291c:	46bd      	mov	sp, r7
 801291e:	bd80      	pop	{r7, pc}

08012920 <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012920:	b580      	push	{r7, lr}
 8012922:	b082      	sub	sp, #8
 8012924:	af00      	add	r7, sp, #0
 8012926:	6078      	str	r0, [r7, #4]
 8012928:	460b      	mov	r3, r1
 801292a:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 801292c:	78fb      	ldrb	r3, [r7, #3]
 801292e:	4619      	mov	r1, r3
 8012930:	6878      	ldr	r0, [r7, #4]
 8012932:	f000 f8d9 	bl	8012ae8 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 8012936:	2300      	movs	r3, #0
}
 8012938:	4618      	mov	r0, r3
 801293a:	3708      	adds	r7, #8
 801293c:	46bd      	mov	sp, r7
 801293e:	bd80      	pop	{r7, pc}

08012940 <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012940:	b580      	push	{r7, lr}
 8012942:	b082      	sub	sp, #8
 8012944:	af00      	add	r7, sp, #0
 8012946:	6078      	str	r0, [r7, #4]
 8012948:	460b      	mov	r3, r1
 801294a:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 801294c:	78fb      	ldrb	r3, [r7, #3]
 801294e:	4619      	mov	r1, r3
 8012950:	6878      	ldr	r0, [r7, #4]
 8012952:	f000 f8fd 	bl	8012b50 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 8012956:	2300      	movs	r3, #0
}
 8012958:	4618      	mov	r0, r3
 801295a:	3708      	adds	r7, #8
 801295c:	46bd      	mov	sp, r7
 801295e:	bd80      	pop	{r7, pc}

08012960 <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8012960:	b480      	push	{r7}
 8012962:	b083      	sub	sp, #12
 8012964:	af00      	add	r7, sp, #0
 8012966:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	2220      	movs	r2, #32
 801296c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 801296e:	4b03      	ldr	r3, [pc, #12]	; (801297c <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 8012970:	4618      	mov	r0, r3
 8012972:	370c      	adds	r7, #12
 8012974:	46bd      	mov	sp, r7
 8012976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801297a:	4770      	bx	lr
 801297c:	24000054 	.word	0x24000054

08012980 <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8012980:	b480      	push	{r7}
 8012982:	b083      	sub	sp, #12
 8012984:	af00      	add	r7, sp, #0
 8012986:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	2220      	movs	r2, #32
 801298c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 801298e:	4b03      	ldr	r3, [pc, #12]	; (801299c <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 8012990:	4618      	mov	r0, r3
 8012992:	370c      	adds	r7, #12
 8012994:	46bd      	mov	sp, r7
 8012996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801299a:	4770      	bx	lr
 801299c:	24000074 	.word	0x24000074

080129a0 <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80129a0:	b480      	push	{r7}
 80129a2:	b083      	sub	sp, #12
 80129a4:	af00      	add	r7, sp, #0
 80129a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	2220      	movs	r2, #32
 80129ac:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 80129ae:	4b03      	ldr	r3, [pc, #12]	; (80129bc <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 80129b0:	4618      	mov	r0, r3
 80129b2:	370c      	adds	r7, #12
 80129b4:	46bd      	mov	sp, r7
 80129b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129ba:	4770      	bx	lr
 80129bc:	24000094 	.word	0x24000094

080129c0 <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80129c0:	b480      	push	{r7}
 80129c2:	b083      	sub	sp, #12
 80129c4:	af00      	add	r7, sp, #0
 80129c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	220a      	movs	r2, #10
 80129cc:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 80129ce:	4b03      	ldr	r3, [pc, #12]	; (80129dc <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 80129d0:	4618      	mov	r0, r3
 80129d2:	370c      	adds	r7, #12
 80129d4:	46bd      	mov	sp, r7
 80129d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129da:	4770      	bx	lr
 80129dc:	240000b4 	.word	0x240000b4

080129e0 <USBD_MSC_RegisterStorage>:
* @brief  USBD_MSC_RegisterStorage
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 80129e0:	b480      	push	{r7}
 80129e2:	b083      	sub	sp, #12
 80129e4:	af00      	add	r7, sp, #0
 80129e6:	6078      	str	r0, [r7, #4]
 80129e8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80129ea:	683b      	ldr	r3, [r7, #0]
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	d101      	bne.n	80129f4 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80129f0:	2303      	movs	r3, #3
 80129f2:	e004      	b.n	80129fe <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	683a      	ldr	r2, [r7, #0]
 80129f8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80129fc:	2300      	movs	r3, #0
}
 80129fe:	4618      	mov	r0, r3
 8012a00:	370c      	adds	r7, #12
 8012a02:	46bd      	mov	sp, r7
 8012a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a08:	4770      	bx	lr

08012a0a <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8012a0a:	b580      	push	{r7, lr}
 8012a0c:	b084      	sub	sp, #16
 8012a0e:	af00      	add	r7, sp, #0
 8012a10:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012a18:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 8012a1a:	68fb      	ldr	r3, [r7, #12]
 8012a1c:	2200      	movs	r2, #0
 8012a1e:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8012a20:	68fb      	ldr	r3, [r7, #12]
 8012a22:	2200      	movs	r2, #0
 8012a24:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8012a26:	68fa      	ldr	r2, [r7, #12]
 8012a28:	f248 0361 	movw	r3, #32865	; 0x8061
 8012a2c:	4413      	add	r3, r2
 8012a2e:	2200      	movs	r2, #0
 8012a30:	701a      	strb	r2, [r3, #0]
  hmsc->scsi_sense_head = 0U;
 8012a32:	68fa      	ldr	r2, [r7, #12]
 8012a34:	f248 0360 	movw	r3, #32864	; 0x8060
 8012a38:	4413      	add	r3, r2
 8012a3a:	2200      	movs	r2, #0
 8012a3c:	701a      	strb	r2, [r3, #0]
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8012a3e:	68fa      	ldr	r2, [r7, #12]
 8012a40:	f248 0362 	movw	r3, #32866	; 0x8062
 8012a44:	4413      	add	r3, r2
 8012a46:	2200      	movs	r2, #0
 8012a48:	701a      	strb	r2, [r3, #0]

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012a50:	681b      	ldr	r3, [r3, #0]
 8012a52:	2000      	movs	r0, #0
 8012a54:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8012a56:	2101      	movs	r1, #1
 8012a58:	6878      	ldr	r0, [r7, #4]
 8012a5a:	f005 fb85 	bl	8018168 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 8012a5e:	2181      	movs	r1, #129	; 0x81
 8012a60:	6878      	ldr	r0, [r7, #4]
 8012a62:	f005 fb81 	bl	8018168 <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8012a66:	68fb      	ldr	r3, [r7, #12]
 8012a68:	f248 0210 	movw	r2, #32784	; 0x8010
 8012a6c:	441a      	add	r2, r3
 8012a6e:	231f      	movs	r3, #31
 8012a70:	2101      	movs	r1, #1
 8012a72:	6878      	ldr	r0, [r7, #4]
 8012a74:	f005 fc41 	bl	80182fa <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 8012a78:	bf00      	nop
 8012a7a:	3710      	adds	r7, #16
 8012a7c:	46bd      	mov	sp, r7
 8012a7e:	bd80      	pop	{r7, pc}

08012a80 <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8012a80:	b580      	push	{r7, lr}
 8012a82:	b084      	sub	sp, #16
 8012a84:	af00      	add	r7, sp, #0
 8012a86:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012a8e:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 8012a90:	68fb      	ldr	r3, [r7, #12]
 8012a92:	2200      	movs	r2, #0
 8012a94:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8012a96:	68fb      	ldr	r3, [r7, #12]
 8012a98:	2201      	movs	r2, #1
 8012a9a:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 8012a9c:	2181      	movs	r1, #129	; 0x81
 8012a9e:	6878      	ldr	r0, [r7, #4]
 8012aa0:	f005 fba0 	bl	80181e4 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 8012aa4:	2101      	movs	r1, #1
 8012aa6:	6878      	ldr	r0, [r7, #4]
 8012aa8:	f005 fb9c 	bl	80181e4 <USBD_LL_ClearStallEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8012aac:	68fb      	ldr	r3, [r7, #12]
 8012aae:	f248 0210 	movw	r2, #32784	; 0x8010
 8012ab2:	441a      	add	r2, r3
 8012ab4:	231f      	movs	r3, #31
 8012ab6:	2101      	movs	r1, #1
 8012ab8:	6878      	ldr	r0, [r7, #4]
 8012aba:	f005 fc1e 	bl	80182fa <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 8012abe:	bf00      	nop
 8012ac0:	3710      	adds	r7, #16
 8012ac2:	46bd      	mov	sp, r7
 8012ac4:	bd80      	pop	{r7, pc}

08012ac6 <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8012ac6:	b480      	push	{r7}
 8012ac8:	b085      	sub	sp, #20
 8012aca:	af00      	add	r7, sp, #0
 8012acc:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012ad4:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 8012ad6:	68fb      	ldr	r3, [r7, #12]
 8012ad8:	2200      	movs	r2, #0
 8012ada:	721a      	strb	r2, [r3, #8]
}
 8012adc:	bf00      	nop
 8012ade:	3714      	adds	r7, #20
 8012ae0:	46bd      	mov	sp, r7
 8012ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ae6:	4770      	bx	lr

08012ae8 <MSC_BOT_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012ae8:	b580      	push	{r7, lr}
 8012aea:	b084      	sub	sp, #16
 8012aec:	af00      	add	r7, sp, #0
 8012aee:	6078      	str	r0, [r7, #4]
 8012af0:	460b      	mov	r3, r1
 8012af2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012afa:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8012afc:	68fb      	ldr	r3, [r7, #12]
 8012afe:	7a1b      	ldrb	r3, [r3, #8]
 8012b00:	2b02      	cmp	r3, #2
 8012b02:	d004      	beq.n	8012b0e <MSC_BOT_DataIn+0x26>
 8012b04:	2b02      	cmp	r3, #2
 8012b06:	db1c      	blt.n	8012b42 <MSC_BOT_DataIn+0x5a>
 8012b08:	2b04      	cmp	r3, #4
 8012b0a:	dc1a      	bgt.n	8012b42 <MSC_BOT_DataIn+0x5a>
 8012b0c:	e014      	b.n	8012b38 <MSC_BOT_DataIn+0x50>
  {
  case USBD_BOT_DATA_IN:
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8012b0e:	68fa      	ldr	r2, [r7, #12]
 8012b10:	f248 031d 	movw	r3, #32797	; 0x801d
 8012b14:	4413      	add	r3, r2
 8012b16:	7819      	ldrb	r1, [r3, #0]
 8012b18:	68fa      	ldr	r2, [r7, #12]
 8012b1a:	f248 031f 	movw	r3, #32799	; 0x801f
 8012b1e:	4413      	add	r3, r2
 8012b20:	461a      	mov	r2, r3
 8012b22:	6878      	ldr	r0, [r7, #4]
 8012b24:	f000 f99e 	bl	8012e64 <SCSI_ProcessCmd>
 8012b28:	4603      	mov	r3, r0
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	da0b      	bge.n	8012b46 <MSC_BOT_DataIn+0x5e>
    {
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8012b2e:	2101      	movs	r1, #1
 8012b30:	6878      	ldr	r0, [r7, #4]
 8012b32:	f000 f90b 	bl	8012d4c <MSC_BOT_SendCSW>
    }
    break;
 8012b36:	e006      	b.n	8012b46 <MSC_BOT_DataIn+0x5e>

  case USBD_BOT_SEND_DATA:
  case USBD_BOT_LAST_DATA_IN:
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8012b38:	2100      	movs	r1, #0
 8012b3a:	6878      	ldr	r0, [r7, #4]
 8012b3c:	f000 f906 	bl	8012d4c <MSC_BOT_SendCSW>
    break;
 8012b40:	e002      	b.n	8012b48 <MSC_BOT_DataIn+0x60>

  default:
    break;
 8012b42:	bf00      	nop
 8012b44:	e000      	b.n	8012b48 <MSC_BOT_DataIn+0x60>
    break;
 8012b46:	bf00      	nop
  }
}
 8012b48:	bf00      	nop
 8012b4a:	3710      	adds	r7, #16
 8012b4c:	46bd      	mov	sp, r7
 8012b4e:	bd80      	pop	{r7, pc}

08012b50 <MSC_BOT_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012b50:	b580      	push	{r7, lr}
 8012b52:	b084      	sub	sp, #16
 8012b54:	af00      	add	r7, sp, #0
 8012b56:	6078      	str	r0, [r7, #4]
 8012b58:	460b      	mov	r3, r1
 8012b5a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012b62:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8012b64:	68fb      	ldr	r3, [r7, #12]
 8012b66:	7a1b      	ldrb	r3, [r3, #8]
 8012b68:	2b00      	cmp	r3, #0
 8012b6a:	d002      	beq.n	8012b72 <MSC_BOT_DataOut+0x22>
 8012b6c:	2b01      	cmp	r3, #1
 8012b6e:	d004      	beq.n	8012b7a <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8012b70:	e018      	b.n	8012ba4 <MSC_BOT_DataOut+0x54>
      MSC_BOT_CBW_Decode(pdev);
 8012b72:	6878      	ldr	r0, [r7, #4]
 8012b74:	f000 f81a 	bl	8012bac <MSC_BOT_CBW_Decode>
      break;
 8012b78:	e014      	b.n	8012ba4 <MSC_BOT_DataOut+0x54>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8012b7a:	68fa      	ldr	r2, [r7, #12]
 8012b7c:	f248 031d 	movw	r3, #32797	; 0x801d
 8012b80:	4413      	add	r3, r2
 8012b82:	7819      	ldrb	r1, [r3, #0]
 8012b84:	68fa      	ldr	r2, [r7, #12]
 8012b86:	f248 031f 	movw	r3, #32799	; 0x801f
 8012b8a:	4413      	add	r3, r2
 8012b8c:	461a      	mov	r2, r3
 8012b8e:	6878      	ldr	r0, [r7, #4]
 8012b90:	f000 f968 	bl	8012e64 <SCSI_ProcessCmd>
 8012b94:	4603      	mov	r3, r0
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	da03      	bge.n	8012ba2 <MSC_BOT_DataOut+0x52>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8012b9a:	2101      	movs	r1, #1
 8012b9c:	6878      	ldr	r0, [r7, #4]
 8012b9e:	f000 f8d5 	bl	8012d4c <MSC_BOT_SendCSW>
      break;
 8012ba2:	bf00      	nop
  }
}
 8012ba4:	bf00      	nop
 8012ba6:	3710      	adds	r7, #16
 8012ba8:	46bd      	mov	sp, r7
 8012baa:	bd80      	pop	{r7, pc}

08012bac <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8012bac:	b580      	push	{r7, lr}
 8012bae:	b084      	sub	sp, #16
 8012bb0:	af00      	add	r7, sp, #0
 8012bb2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012bba:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8012bbc:	68fa      	ldr	r2, [r7, #12]
 8012bbe:	f248 0314 	movw	r3, #32788	; 0x8014
 8012bc2:	4413      	add	r3, r2
 8012bc4:	681a      	ldr	r2, [r3, #0]
 8012bc6:	68f9      	ldr	r1, [r7, #12]
 8012bc8:	f248 0334 	movw	r3, #32820	; 0x8034
 8012bcc:	440b      	add	r3, r1
 8012bce:	601a      	str	r2, [r3, #0]
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8012bd0:	68fa      	ldr	r2, [r7, #12]
 8012bd2:	f248 0318 	movw	r3, #32792	; 0x8018
 8012bd6:	4413      	add	r3, r2
 8012bd8:	681a      	ldr	r2, [r3, #0]
 8012bda:	68f9      	ldr	r1, [r7, #12]
 8012bdc:	f248 0338 	movw	r3, #32824	; 0x8038
 8012be0:	440b      	add	r3, r1
 8012be2:	601a      	str	r2, [r3, #0]

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8012be4:	2101      	movs	r1, #1
 8012be6:	6878      	ldr	r0, [r7, #4]
 8012be8:	f005 fba8 	bl	801833c <USBD_LL_GetRxDataSize>
 8012bec:	4603      	mov	r3, r0
 8012bee:	2b1f      	cmp	r3, #31
 8012bf0:	d11c      	bne.n	8012c2c <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8012bf2:	68fa      	ldr	r2, [r7, #12]
 8012bf4:	f248 0310 	movw	r3, #32784	; 0x8010
 8012bf8:	4413      	add	r3, r2
 8012bfa:	681b      	ldr	r3, [r3, #0]
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8012bfc:	4a38      	ldr	r2, [pc, #224]	; (8012ce0 <MSC_BOT_CBW_Decode+0x134>)
 8012bfe:	4293      	cmp	r3, r2
 8012c00:	d114      	bne.n	8012c2c <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8012c02:	68fa      	ldr	r2, [r7, #12]
 8012c04:	f248 031d 	movw	r3, #32797	; 0x801d
 8012c08:	4413      	add	r3, r2
 8012c0a:	781b      	ldrb	r3, [r3, #0]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8012c0c:	2b01      	cmp	r3, #1
 8012c0e:	d80d      	bhi.n	8012c2c <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8012c10:	68fa      	ldr	r2, [r7, #12]
 8012c12:	f248 031e 	movw	r3, #32798	; 0x801e
 8012c16:	4413      	add	r3, r2
 8012c18:	781b      	ldrb	r3, [r3, #0]
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	d006      	beq.n	8012c2c <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.bCBLength > 16U))
 8012c1e:	68fa      	ldr	r2, [r7, #12]
 8012c20:	f248 031e 	movw	r3, #32798	; 0x801e
 8012c24:	4413      	add	r3, r2
 8012c26:	781b      	ldrb	r3, [r3, #0]
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8012c28:	2b10      	cmp	r3, #16
 8012c2a:	d910      	bls.n	8012c4e <MSC_BOT_CBW_Decode+0xa2>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012c2c:	68fa      	ldr	r2, [r7, #12]
 8012c2e:	f248 031d 	movw	r3, #32797	; 0x801d
 8012c32:	4413      	add	r3, r2
 8012c34:	7819      	ldrb	r1, [r3, #0]
 8012c36:	2320      	movs	r3, #32
 8012c38:	2205      	movs	r2, #5
 8012c3a:	6878      	ldr	r0, [r7, #4]
 8012c3c:	f000 fd36 	bl	80136ac <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8012c40:	68fb      	ldr	r3, [r7, #12]
 8012c42:	2202      	movs	r2, #2
 8012c44:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8012c46:	6878      	ldr	r0, [r7, #4]
 8012c48:	f000 f8b2 	bl	8012db0 <MSC_BOT_Abort>
 8012c4c:	e044      	b.n	8012cd8 <MSC_BOT_CBW_Decode+0x12c>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8012c4e:	68fa      	ldr	r2, [r7, #12]
 8012c50:	f248 031d 	movw	r3, #32797	; 0x801d
 8012c54:	4413      	add	r3, r2
 8012c56:	7819      	ldrb	r1, [r3, #0]
 8012c58:	68fa      	ldr	r2, [r7, #12]
 8012c5a:	f248 031f 	movw	r3, #32799	; 0x801f
 8012c5e:	4413      	add	r3, r2
 8012c60:	461a      	mov	r2, r3
 8012c62:	6878      	ldr	r0, [r7, #4]
 8012c64:	f000 f8fe 	bl	8012e64 <SCSI_ProcessCmd>
 8012c68:	4603      	mov	r3, r0
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	da0c      	bge.n	8012c88 <MSC_BOT_CBW_Decode+0xdc>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8012c6e:	68fb      	ldr	r3, [r7, #12]
 8012c70:	7a1b      	ldrb	r3, [r3, #8]
 8012c72:	2b05      	cmp	r3, #5
 8012c74:	d104      	bne.n	8012c80 <MSC_BOT_CBW_Decode+0xd4>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8012c76:	2101      	movs	r1, #1
 8012c78:	6878      	ldr	r0, [r7, #4]
 8012c7a:	f000 f867 	bl	8012d4c <MSC_BOT_SendCSW>
 8012c7e:	e02b      	b.n	8012cd8 <MSC_BOT_CBW_Decode+0x12c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8012c80:	6878      	ldr	r0, [r7, #4]
 8012c82:	f000 f895 	bl	8012db0 <MSC_BOT_Abort>
 8012c86:	e027      	b.n	8012cd8 <MSC_BOT_CBW_Decode+0x12c>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8012c88:	68fb      	ldr	r3, [r7, #12]
 8012c8a:	7a1b      	ldrb	r3, [r3, #8]
 8012c8c:	2b02      	cmp	r3, #2
 8012c8e:	d022      	beq.n	8012cd6 <MSC_BOT_CBW_Decode+0x12a>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8012c90:	68fb      	ldr	r3, [r7, #12]
 8012c92:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8012c94:	2b01      	cmp	r3, #1
 8012c96:	d01e      	beq.n	8012cd6 <MSC_BOT_CBW_Decode+0x12a>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8012c98:	68fb      	ldr	r3, [r7, #12]
 8012c9a:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8012c9c:	2b03      	cmp	r3, #3
 8012c9e:	d01a      	beq.n	8012cd6 <MSC_BOT_CBW_Decode+0x12a>
    {
      if (hmsc->bot_data_length > 0U)
 8012ca0:	68fb      	ldr	r3, [r7, #12]
 8012ca2:	68db      	ldr	r3, [r3, #12]
 8012ca4:	2b00      	cmp	r3, #0
 8012ca6:	d009      	beq.n	8012cbc <MSC_BOT_CBW_Decode+0x110>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8012ca8:	68fb      	ldr	r3, [r7, #12]
 8012caa:	f103 0110 	add.w	r1, r3, #16
 8012cae:	68fb      	ldr	r3, [r7, #12]
 8012cb0:	68db      	ldr	r3, [r3, #12]
 8012cb2:	461a      	mov	r2, r3
 8012cb4:	6878      	ldr	r0, [r7, #4]
 8012cb6:	f000 f815 	bl	8012ce4 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8012cba:	e00d      	b.n	8012cd8 <MSC_BOT_CBW_Decode+0x12c>
      }
      else if (hmsc->bot_data_length == 0U)
 8012cbc:	68fb      	ldr	r3, [r7, #12]
 8012cbe:	68db      	ldr	r3, [r3, #12]
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	d104      	bne.n	8012cce <MSC_BOT_CBW_Decode+0x122>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8012cc4:	2100      	movs	r1, #0
 8012cc6:	6878      	ldr	r0, [r7, #4]
 8012cc8:	f000 f840 	bl	8012d4c <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8012ccc:	e004      	b.n	8012cd8 <MSC_BOT_CBW_Decode+0x12c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8012cce:	6878      	ldr	r0, [r7, #4]
 8012cd0:	f000 f86e 	bl	8012db0 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8012cd4:	e000      	b.n	8012cd8 <MSC_BOT_CBW_Decode+0x12c>
      }
    }
    else
    {
      return;
 8012cd6:	bf00      	nop
    }
  }
}
 8012cd8:	3710      	adds	r7, #16
 8012cda:	46bd      	mov	sp, r7
 8012cdc:	bd80      	pop	{r7, pc}
 8012cde:	bf00      	nop
 8012ce0:	43425355 	.word	0x43425355

08012ce4 <MSC_BOT_SendData>:
* @param  buf: pointer to data buffer
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8012ce4:	b580      	push	{r7, lr}
 8012ce6:	b086      	sub	sp, #24
 8012ce8:	af00      	add	r7, sp, #0
 8012cea:	60f8      	str	r0, [r7, #12]
 8012cec:	60b9      	str	r1, [r7, #8]
 8012cee:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012cf0:	68fb      	ldr	r3, [r7, #12]
 8012cf2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012cf6:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 8012cf8:	697a      	ldr	r2, [r7, #20]
 8012cfa:	f248 0318 	movw	r3, #32792	; 0x8018
 8012cfe:	4413      	add	r3, r2
 8012d00:	681b      	ldr	r3, [r3, #0]
 8012d02:	687a      	ldr	r2, [r7, #4]
 8012d04:	4293      	cmp	r3, r2
 8012d06:	bf28      	it	cs
 8012d08:	4613      	movcs	r3, r2
 8012d0a:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 8012d0c:	697a      	ldr	r2, [r7, #20]
 8012d0e:	f248 0338 	movw	r3, #32824	; 0x8038
 8012d12:	4413      	add	r3, r2
 8012d14:	681a      	ldr	r2, [r3, #0]
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	1ad2      	subs	r2, r2, r3
 8012d1a:	6979      	ldr	r1, [r7, #20]
 8012d1c:	f248 0338 	movw	r3, #32824	; 0x8038
 8012d20:	440b      	add	r3, r1
 8012d22:	601a      	str	r2, [r3, #0]
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8012d24:	697a      	ldr	r2, [r7, #20]
 8012d26:	f248 033c 	movw	r3, #32828	; 0x803c
 8012d2a:	4413      	add	r3, r2
 8012d2c:	2200      	movs	r2, #0
 8012d2e:	701a      	strb	r2, [r3, #0]
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8012d30:	697b      	ldr	r3, [r7, #20]
 8012d32:	2204      	movs	r2, #4
 8012d34:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 8012d36:	693b      	ldr	r3, [r7, #16]
 8012d38:	68ba      	ldr	r2, [r7, #8]
 8012d3a:	2181      	movs	r1, #129	; 0x81
 8012d3c:	68f8      	ldr	r0, [r7, #12]
 8012d3e:	f005 fabb 	bl	80182b8 <USBD_LL_Transmit>
}
 8012d42:	bf00      	nop
 8012d44:	3718      	adds	r7, #24
 8012d46:	46bd      	mov	sp, r7
 8012d48:	bd80      	pop	{r7, pc}
	...

08012d4c <MSC_BOT_SendCSW>:
* @param  pdev: device instance
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8012d4c:	b580      	push	{r7, lr}
 8012d4e:	b084      	sub	sp, #16
 8012d50:	af00      	add	r7, sp, #0
 8012d52:	6078      	str	r0, [r7, #4]
 8012d54:	460b      	mov	r3, r1
 8012d56:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012d5e:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8012d60:	68fa      	ldr	r2, [r7, #12]
 8012d62:	f248 0330 	movw	r3, #32816	; 0x8030
 8012d66:	4413      	add	r3, r2
 8012d68:	4a10      	ldr	r2, [pc, #64]	; (8012dac <MSC_BOT_SendCSW+0x60>)
 8012d6a:	601a      	str	r2, [r3, #0]
  hmsc->csw.bStatus = CSW_Status;
 8012d6c:	68fa      	ldr	r2, [r7, #12]
 8012d6e:	f248 033c 	movw	r3, #32828	; 0x803c
 8012d72:	4413      	add	r3, r2
 8012d74:	78fa      	ldrb	r2, [r7, #3]
 8012d76:	701a      	strb	r2, [r3, #0]
  hmsc->bot_state = USBD_BOT_IDLE;
 8012d78:	68fb      	ldr	r3, [r7, #12]
 8012d7a:	2200      	movs	r2, #0
 8012d7c:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 8012d7e:	68fb      	ldr	r3, [r7, #12]
 8012d80:	f248 0230 	movw	r2, #32816	; 0x8030
 8012d84:	441a      	add	r2, r3
 8012d86:	230d      	movs	r3, #13
 8012d88:	2181      	movs	r1, #129	; 0x81
 8012d8a:	6878      	ldr	r0, [r7, #4]
 8012d8c:	f005 fa94 	bl	80182b8 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8012d90:	68fb      	ldr	r3, [r7, #12]
 8012d92:	f248 0210 	movw	r2, #32784	; 0x8010
 8012d96:	441a      	add	r2, r3
 8012d98:	231f      	movs	r3, #31
 8012d9a:	2101      	movs	r1, #1
 8012d9c:	6878      	ldr	r0, [r7, #4]
 8012d9e:	f005 faac 	bl	80182fa <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 8012da2:	bf00      	nop
 8012da4:	3710      	adds	r7, #16
 8012da6:	46bd      	mov	sp, r7
 8012da8:	bd80      	pop	{r7, pc}
 8012daa:	bf00      	nop
 8012dac:	53425355 	.word	0x53425355

08012db0 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8012db0:	b580      	push	{r7, lr}
 8012db2:	b084      	sub	sp, #16
 8012db4:	af00      	add	r7, sp, #0
 8012db6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012dbe:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 8012dc0:	68fa      	ldr	r2, [r7, #12]
 8012dc2:	f248 031c 	movw	r3, #32796	; 0x801c
 8012dc6:	4413      	add	r3, r2
 8012dc8:	781b      	ldrb	r3, [r3, #0]
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	d10e      	bne.n	8012dec <MSC_BOT_Abort+0x3c>
      (hmsc->cbw.dDataLength != 0U) &&
 8012dce:	68fa      	ldr	r2, [r7, #12]
 8012dd0:	f248 0318 	movw	r3, #32792	; 0x8018
 8012dd4:	4413      	add	r3, r2
 8012dd6:	681b      	ldr	r3, [r3, #0]
  if ((hmsc->cbw.bmFlags == 0U) &&
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	d007      	beq.n	8012dec <MSC_BOT_Abort+0x3c>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8012ddc:	68fb      	ldr	r3, [r7, #12]
 8012dde:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	d103      	bne.n	8012dec <MSC_BOT_Abort+0x3c>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8012de4:	2101      	movs	r1, #1
 8012de6:	6878      	ldr	r0, [r7, #4]
 8012de8:	f005 f9dd 	bl	80181a6 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8012dec:	2181      	movs	r1, #129	; 0x81
 8012dee:	6878      	ldr	r0, [r7, #4]
 8012df0:	f005 f9d9 	bl	80181a6 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8012df4:	68fb      	ldr	r3, [r7, #12]
 8012df6:	7a5b      	ldrb	r3, [r3, #9]
 8012df8:	2b02      	cmp	r3, #2
 8012dfa:	d107      	bne.n	8012e0c <MSC_BOT_Abort+0x5c>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8012dfc:	2181      	movs	r1, #129	; 0x81
 8012dfe:	6878      	ldr	r0, [r7, #4]
 8012e00:	f005 f9d1 	bl	80181a6 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8012e04:	2101      	movs	r1, #1
 8012e06:	6878      	ldr	r0, [r7, #4]
 8012e08:	f005 f9cd 	bl	80181a6 <USBD_LL_StallEP>
  }
}
 8012e0c:	bf00      	nop
 8012e0e:	3710      	adds	r7, #16
 8012e10:	46bd      	mov	sp, r7
 8012e12:	bd80      	pop	{r7, pc}

08012e14 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012e14:	b580      	push	{r7, lr}
 8012e16:	b084      	sub	sp, #16
 8012e18:	af00      	add	r7, sp, #0
 8012e1a:	6078      	str	r0, [r7, #4]
 8012e1c:	460b      	mov	r3, r1
 8012e1e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012e26:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8012e28:	68fb      	ldr	r3, [r7, #12]
 8012e2a:	7a5b      	ldrb	r3, [r3, #9]
 8012e2c:	2b02      	cmp	r3, #2
 8012e2e:	d108      	bne.n	8012e42 <MSC_BOT_CplClrFeature+0x2e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8012e30:	2181      	movs	r1, #129	; 0x81
 8012e32:	6878      	ldr	r0, [r7, #4]
 8012e34:	f005 f9b7 	bl	80181a6 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8012e38:	2101      	movs	r1, #1
 8012e3a:	6878      	ldr	r0, [r7, #4]
 8012e3c:	f005 f9b3 	bl	80181a6 <USBD_LL_StallEP>
 8012e40:	e00d      	b.n	8012e5e <MSC_BOT_CplClrFeature+0x4a>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8012e42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	da08      	bge.n	8012e5c <MSC_BOT_CplClrFeature+0x48>
 8012e4a:	68fb      	ldr	r3, [r7, #12]
 8012e4c:	7a5b      	ldrb	r3, [r3, #9]
 8012e4e:	2b01      	cmp	r3, #1
 8012e50:	d004      	beq.n	8012e5c <MSC_BOT_CplClrFeature+0x48>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8012e52:	2101      	movs	r1, #1
 8012e54:	6878      	ldr	r0, [r7, #4]
 8012e56:	f7ff ff79 	bl	8012d4c <MSC_BOT_SendCSW>
 8012e5a:	e000      	b.n	8012e5e <MSC_BOT_CplClrFeature+0x4a>
  }
  else
  {
    return;
 8012e5c:	bf00      	nop
  }
}
 8012e5e:	3710      	adds	r7, #16
 8012e60:	46bd      	mov	sp, r7
 8012e62:	bd80      	pop	{r7, pc}

08012e64 <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8012e64:	b580      	push	{r7, lr}
 8012e66:	b086      	sub	sp, #24
 8012e68:	af00      	add	r7, sp, #0
 8012e6a:	60f8      	str	r0, [r7, #12]
 8012e6c:	460b      	mov	r3, r1
 8012e6e:	607a      	str	r2, [r7, #4]
 8012e70:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012e72:	68fb      	ldr	r3, [r7, #12]
 8012e74:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012e78:	613b      	str	r3, [r7, #16]

  switch (cmd[0])
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	781b      	ldrb	r3, [r3, #0]
 8012e7e:	2b25      	cmp	r3, #37	; 0x25
 8012e80:	d06e      	beq.n	8012f60 <SCSI_ProcessCmd+0xfc>
 8012e82:	2b25      	cmp	r3, #37	; 0x25
 8012e84:	dc11      	bgt.n	8012eaa <SCSI_ProcessCmd+0x46>
 8012e86:	2b1a      	cmp	r3, #26
 8012e88:	d04f      	beq.n	8012f2a <SCSI_ProcessCmd+0xc6>
 8012e8a:	2b1a      	cmp	r3, #26
 8012e8c:	dc06      	bgt.n	8012e9c <SCSI_ProcessCmd+0x38>
 8012e8e:	2b03      	cmp	r3, #3
 8012e90:	d027      	beq.n	8012ee2 <SCSI_ProcessCmd+0x7e>
 8012e92:	2b12      	cmp	r3, #18
 8012e94:	d02e      	beq.n	8012ef4 <SCSI_ProcessCmd+0x90>
 8012e96:	2b00      	cmp	r3, #0
 8012e98:	d01a      	beq.n	8012ed0 <SCSI_ProcessCmd+0x6c>
 8012e9a:	e0a0      	b.n	8012fde <SCSI_ProcessCmd+0x17a>
 8012e9c:	2b1e      	cmp	r3, #30
 8012e9e:	d03b      	beq.n	8012f18 <SCSI_ProcessCmd+0xb4>
 8012ea0:	2b23      	cmp	r3, #35	; 0x23
 8012ea2:	d054      	beq.n	8012f4e <SCSI_ProcessCmd+0xea>
 8012ea4:	2b1b      	cmp	r3, #27
 8012ea6:	d02e      	beq.n	8012f06 <SCSI_ProcessCmd+0xa2>
 8012ea8:	e099      	b.n	8012fde <SCSI_ProcessCmd+0x17a>
 8012eaa:	2b5a      	cmp	r3, #90	; 0x5a
 8012eac:	d046      	beq.n	8012f3c <SCSI_ProcessCmd+0xd8>
 8012eae:	2b5a      	cmp	r3, #90	; 0x5a
 8012eb0:	dc07      	bgt.n	8012ec2 <SCSI_ProcessCmd+0x5e>
 8012eb2:	2b2a      	cmp	r3, #42	; 0x2a
 8012eb4:	d078      	beq.n	8012fa8 <SCSI_ProcessCmd+0x144>
 8012eb6:	2b2f      	cmp	r3, #47	; 0x2f
 8012eb8:	f000 8088 	beq.w	8012fcc <SCSI_ProcessCmd+0x168>
 8012ebc:	2b28      	cmp	r3, #40	; 0x28
 8012ebe:	d061      	beq.n	8012f84 <SCSI_ProcessCmd+0x120>
 8012ec0:	e08d      	b.n	8012fde <SCSI_ProcessCmd+0x17a>
 8012ec2:	2ba8      	cmp	r3, #168	; 0xa8
 8012ec4:	d067      	beq.n	8012f96 <SCSI_ProcessCmd+0x132>
 8012ec6:	2baa      	cmp	r3, #170	; 0xaa
 8012ec8:	d077      	beq.n	8012fba <SCSI_ProcessCmd+0x156>
 8012eca:	2b9e      	cmp	r3, #158	; 0x9e
 8012ecc:	d051      	beq.n	8012f72 <SCSI_ProcessCmd+0x10e>
 8012ece:	e086      	b.n	8012fde <SCSI_ProcessCmd+0x17a>
  {
  case SCSI_TEST_UNIT_READY:
    ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8012ed0:	7afb      	ldrb	r3, [r7, #11]
 8012ed2:	687a      	ldr	r2, [r7, #4]
 8012ed4:	4619      	mov	r1, r3
 8012ed6:	68f8      	ldr	r0, [r7, #12]
 8012ed8:	f000 f893 	bl	8013002 <SCSI_TestUnitReady>
 8012edc:	4603      	mov	r3, r0
 8012ede:	75fb      	strb	r3, [r7, #23]
    break;
 8012ee0:	e089      	b.n	8012ff6 <SCSI_ProcessCmd+0x192>

  case SCSI_REQUEST_SENSE:
    ret = SCSI_RequestSense(pdev, lun, cmd);
 8012ee2:	7afb      	ldrb	r3, [r7, #11]
 8012ee4:	687a      	ldr	r2, [r7, #4]
 8012ee6:	4619      	mov	r1, r3
 8012ee8:	68f8      	ldr	r0, [r7, #12]
 8012eea:	f000 fb47 	bl	801357c <SCSI_RequestSense>
 8012eee:	4603      	mov	r3, r0
 8012ef0:	75fb      	strb	r3, [r7, #23]
    break;
 8012ef2:	e080      	b.n	8012ff6 <SCSI_ProcessCmd+0x192>

  case SCSI_INQUIRY:
    ret = SCSI_Inquiry(pdev, lun, cmd);
 8012ef4:	7afb      	ldrb	r3, [r7, #11]
 8012ef6:	687a      	ldr	r2, [r7, #4]
 8012ef8:	4619      	mov	r1, r3
 8012efa:	68f8      	ldr	r0, [r7, #12]
 8012efc:	f000 f8d2 	bl	80130a4 <SCSI_Inquiry>
 8012f00:	4603      	mov	r3, r0
 8012f02:	75fb      	strb	r3, [r7, #23]
    break;
 8012f04:	e077      	b.n	8012ff6 <SCSI_ProcessCmd+0x192>

  case SCSI_START_STOP_UNIT:
    ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8012f06:	7afb      	ldrb	r3, [r7, #11]
 8012f08:	687a      	ldr	r2, [r7, #4]
 8012f0a:	4619      	mov	r1, r3
 8012f0c:	68f8      	ldr	r0, [r7, #12]
 8012f0e:	f000 fc27 	bl	8013760 <SCSI_StartStopUnit>
 8012f12:	4603      	mov	r3, r0
 8012f14:	75fb      	strb	r3, [r7, #23]
    break;
 8012f16:	e06e      	b.n	8012ff6 <SCSI_ProcessCmd+0x192>

  case SCSI_ALLOW_MEDIUM_REMOVAL:
    ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8012f18:	7afb      	ldrb	r3, [r7, #11]
 8012f1a:	687a      	ldr	r2, [r7, #4]
 8012f1c:	4619      	mov	r1, r3
 8012f1e:	68f8      	ldr	r0, [r7, #12]
 8012f20:	f000 fc71 	bl	8013806 <SCSI_AllowPreventRemovable>
 8012f24:	4603      	mov	r3, r0
 8012f26:	75fb      	strb	r3, [r7, #23]
    break;
 8012f28:	e065      	b.n	8012ff6 <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE6:
    ret = SCSI_ModeSense6(pdev, lun, cmd);
 8012f2a:	7afb      	ldrb	r3, [r7, #11]
 8012f2c:	687a      	ldr	r2, [r7, #4]
 8012f2e:	4619      	mov	r1, r3
 8012f30:	68f8      	ldr	r0, [r7, #12]
 8012f32:	f000 fad7 	bl	80134e4 <SCSI_ModeSense6>
 8012f36:	4603      	mov	r3, r0
 8012f38:	75fb      	strb	r3, [r7, #23]
    break;
 8012f3a:	e05c      	b.n	8012ff6 <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE10:
    ret = SCSI_ModeSense10(pdev, lun, cmd);
 8012f3c:	7afb      	ldrb	r3, [r7, #11]
 8012f3e:	687a      	ldr	r2, [r7, #4]
 8012f40:	4619      	mov	r1, r3
 8012f42:	68f8      	ldr	r0, [r7, #12]
 8012f44:	f000 faf4 	bl	8013530 <SCSI_ModeSense10>
 8012f48:	4603      	mov	r3, r0
 8012f4a:	75fb      	strb	r3, [r7, #23]
    break;
 8012f4c:	e053      	b.n	8012ff6 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_FORMAT_CAPACITIES:
    ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8012f4e:	7afb      	ldrb	r3, [r7, #11]
 8012f50:	687a      	ldr	r2, [r7, #4]
 8012f52:	4619      	mov	r1, r3
 8012f54:	68f8      	ldr	r0, [r7, #12]
 8012f56:	f000 fa56 	bl	8013406 <SCSI_ReadFormatCapacity>
 8012f5a:	4603      	mov	r3, r0
 8012f5c:	75fb      	strb	r3, [r7, #23]
    break;
 8012f5e:	e04a      	b.n	8012ff6 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY10:
    ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8012f60:	7afb      	ldrb	r3, [r7, #11]
 8012f62:	687a      	ldr	r2, [r7, #4]
 8012f64:	4619      	mov	r1, r3
 8012f66:	68f8      	ldr	r0, [r7, #12]
 8012f68:	f000 f910 	bl	801318c <SCSI_ReadCapacity10>
 8012f6c:	4603      	mov	r3, r0
 8012f6e:	75fb      	strb	r3, [r7, #23]
    break;
 8012f70:	e041      	b.n	8012ff6 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY16:
    ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8012f72:	7afb      	ldrb	r3, [r7, #11]
 8012f74:	687a      	ldr	r2, [r7, #4]
 8012f76:	4619      	mov	r1, r3
 8012f78:	68f8      	ldr	r0, [r7, #12]
 8012f7a:	f000 f98b 	bl	8013294 <SCSI_ReadCapacity16>
 8012f7e:	4603      	mov	r3, r0
 8012f80:	75fb      	strb	r3, [r7, #23]
    break;
 8012f82:	e038      	b.n	8012ff6 <SCSI_ProcessCmd+0x192>

  case SCSI_READ10:
    ret = SCSI_Read10(pdev, lun, cmd);
 8012f84:	7afb      	ldrb	r3, [r7, #11]
 8012f86:	687a      	ldr	r2, [r7, #4]
 8012f88:	4619      	mov	r1, r3
 8012f8a:	68f8      	ldr	r0, [r7, #12]
 8012f8c:	f000 fc62 	bl	8013854 <SCSI_Read10>
 8012f90:	4603      	mov	r3, r0
 8012f92:	75fb      	strb	r3, [r7, #23]
    break;
 8012f94:	e02f      	b.n	8012ff6 <SCSI_ProcessCmd+0x192>

  case SCSI_READ12:
    ret = SCSI_Read12(pdev, lun, cmd);
 8012f96:	7afb      	ldrb	r3, [r7, #11]
 8012f98:	687a      	ldr	r2, [r7, #4]
 8012f9a:	4619      	mov	r1, r3
 8012f9c:	68f8      	ldr	r0, [r7, #12]
 8012f9e:	f000 fd0b 	bl	80139b8 <SCSI_Read12>
 8012fa2:	4603      	mov	r3, r0
 8012fa4:	75fb      	strb	r3, [r7, #23]
    break;
 8012fa6:	e026      	b.n	8012ff6 <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE10:
    ret = SCSI_Write10(pdev, lun, cmd);
 8012fa8:	7afb      	ldrb	r3, [r7, #11]
 8012faa:	687a      	ldr	r2, [r7, #4]
 8012fac:	4619      	mov	r1, r3
 8012fae:	68f8      	ldr	r0, [r7, #12]
 8012fb0:	f000 fdbe 	bl	8013b30 <SCSI_Write10>
 8012fb4:	4603      	mov	r3, r0
 8012fb6:	75fb      	strb	r3, [r7, #23]
    break;
 8012fb8:	e01d      	b.n	8012ff6 <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE12:
    ret = SCSI_Write12(pdev, lun, cmd);
 8012fba:	7afb      	ldrb	r3, [r7, #11]
 8012fbc:	687a      	ldr	r2, [r7, #4]
 8012fbe:	4619      	mov	r1, r3
 8012fc0:	68f8      	ldr	r0, [r7, #12]
 8012fc2:	f000 fe8d 	bl	8013ce0 <SCSI_Write12>
 8012fc6:	4603      	mov	r3, r0
 8012fc8:	75fb      	strb	r3, [r7, #23]
    break;
 8012fca:	e014      	b.n	8012ff6 <SCSI_ProcessCmd+0x192>

  case SCSI_VERIFY10:
    ret = SCSI_Verify10(pdev, lun, cmd);
 8012fcc:	7afb      	ldrb	r3, [r7, #11]
 8012fce:	687a      	ldr	r2, [r7, #4]
 8012fd0:	4619      	mov	r1, r3
 8012fd2:	68f8      	ldr	r0, [r7, #12]
 8012fd4:	f000 ff6c 	bl	8013eb0 <SCSI_Verify10>
 8012fd8:	4603      	mov	r3, r0
 8012fda:	75fb      	strb	r3, [r7, #23]
    break;
 8012fdc:	e00b      	b.n	8012ff6 <SCSI_ProcessCmd+0x192>

  default:
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8012fde:	7af9      	ldrb	r1, [r7, #11]
 8012fe0:	2320      	movs	r3, #32
 8012fe2:	2205      	movs	r2, #5
 8012fe4:	68f8      	ldr	r0, [r7, #12]
 8012fe6:	f000 fb61 	bl	80136ac <SCSI_SenseCode>
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8012fea:	693b      	ldr	r3, [r7, #16]
 8012fec:	2202      	movs	r2, #2
 8012fee:	725a      	strb	r2, [r3, #9]
    ret = -1;
 8012ff0:	23ff      	movs	r3, #255	; 0xff
 8012ff2:	75fb      	strb	r3, [r7, #23]
    break;
 8012ff4:	bf00      	nop
  }

  return ret;
 8012ff6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012ffa:	4618      	mov	r0, r3
 8012ffc:	3718      	adds	r7, #24
 8012ffe:	46bd      	mov	sp, r7
 8013000:	bd80      	pop	{r7, pc}

08013002 <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8013002:	b580      	push	{r7, lr}
 8013004:	b086      	sub	sp, #24
 8013006:	af00      	add	r7, sp, #0
 8013008:	60f8      	str	r0, [r7, #12]
 801300a:	460b      	mov	r3, r1
 801300c:	607a      	str	r2, [r7, #4]
 801300e:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013010:	68fb      	ldr	r3, [r7, #12]
 8013012:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013016:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8013018:	697a      	ldr	r2, [r7, #20]
 801301a:	f248 0318 	movw	r3, #32792	; 0x8018
 801301e:	4413      	add	r3, r2
 8013020:	681b      	ldr	r3, [r3, #0]
 8013022:	2b00      	cmp	r3, #0
 8013024:	d00c      	beq.n	8013040 <SCSI_TestUnitReady+0x3e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013026:	697a      	ldr	r2, [r7, #20]
 8013028:	f248 031d 	movw	r3, #32797	; 0x801d
 801302c:	4413      	add	r3, r2
 801302e:	7819      	ldrb	r1, [r3, #0]
 8013030:	2320      	movs	r3, #32
 8013032:	2205      	movs	r2, #5
 8013034:	68f8      	ldr	r0, [r7, #12]
 8013036:	f000 fb39 	bl	80136ac <SCSI_SenseCode>

    return -1;
 801303a:	f04f 33ff 	mov.w	r3, #4294967295
 801303e:	e02c      	b.n	801309a <SCSI_TestUnitReady+0x98>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8013040:	697a      	ldr	r2, [r7, #20]
 8013042:	f248 0362 	movw	r3, #32866	; 0x8062
 8013046:	4413      	add	r3, r2
 8013048:	781b      	ldrb	r3, [r3, #0]
 801304a:	2b02      	cmp	r3, #2
 801304c:	d10b      	bne.n	8013066 <SCSI_TestUnitReady+0x64>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801304e:	7af9      	ldrb	r1, [r7, #11]
 8013050:	233a      	movs	r3, #58	; 0x3a
 8013052:	2202      	movs	r2, #2
 8013054:	68f8      	ldr	r0, [r7, #12]
 8013056:	f000 fb29 	bl	80136ac <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 801305a:	697b      	ldr	r3, [r7, #20]
 801305c:	2205      	movs	r2, #5
 801305e:	721a      	strb	r2, [r3, #8]
    return -1;
 8013060:	f04f 33ff 	mov.w	r3, #4294967295
 8013064:	e019      	b.n	801309a <SCSI_TestUnitReady+0x98>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8013066:	68fb      	ldr	r3, [r7, #12]
 8013068:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801306c:	689b      	ldr	r3, [r3, #8]
 801306e:	7afa      	ldrb	r2, [r7, #11]
 8013070:	4610      	mov	r0, r2
 8013072:	4798      	blx	r3
 8013074:	4603      	mov	r3, r0
 8013076:	2b00      	cmp	r3, #0
 8013078:	d00b      	beq.n	8013092 <SCSI_TestUnitReady+0x90>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801307a:	7af9      	ldrb	r1, [r7, #11]
 801307c:	233a      	movs	r3, #58	; 0x3a
 801307e:	2202      	movs	r2, #2
 8013080:	68f8      	ldr	r0, [r7, #12]
 8013082:	f000 fb13 	bl	80136ac <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8013086:	697b      	ldr	r3, [r7, #20]
 8013088:	2205      	movs	r2, #5
 801308a:	721a      	strb	r2, [r3, #8]

    return -1;
 801308c:	f04f 33ff 	mov.w	r3, #4294967295
 8013090:	e003      	b.n	801309a <SCSI_TestUnitReady+0x98>
  }
  hmsc->bot_data_length = 0U;
 8013092:	697b      	ldr	r3, [r7, #20]
 8013094:	2200      	movs	r2, #0
 8013096:	60da      	str	r2, [r3, #12]

  return 0;
 8013098:	2300      	movs	r3, #0
}
 801309a:	4618      	mov	r0, r3
 801309c:	3718      	adds	r7, #24
 801309e:	46bd      	mov	sp, r7
 80130a0:	bd80      	pop	{r7, pc}
	...

080130a4 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80130a4:	b580      	push	{r7, lr}
 80130a6:	b088      	sub	sp, #32
 80130a8:	af00      	add	r7, sp, #0
 80130aa:	60f8      	str	r0, [r7, #12]
 80130ac:	460b      	mov	r3, r1
 80130ae:	607a      	str	r2, [r7, #4]
 80130b0:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80130b2:	68fb      	ldr	r3, [r7, #12]
 80130b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80130b8:	61bb      	str	r3, [r7, #24]

  if (hmsc->cbw.dDataLength == 0U)
 80130ba:	69ba      	ldr	r2, [r7, #24]
 80130bc:	f248 0318 	movw	r3, #32792	; 0x8018
 80130c0:	4413      	add	r3, r2
 80130c2:	681b      	ldr	r3, [r3, #0]
 80130c4:	2b00      	cmp	r3, #0
 80130c6:	d10c      	bne.n	80130e2 <SCSI_Inquiry+0x3e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80130c8:	69ba      	ldr	r2, [r7, #24]
 80130ca:	f248 031d 	movw	r3, #32797	; 0x801d
 80130ce:	4413      	add	r3, r2
 80130d0:	7819      	ldrb	r1, [r3, #0]
 80130d2:	2320      	movs	r3, #32
 80130d4:	2205      	movs	r2, #5
 80130d6:	68f8      	ldr	r0, [r7, #12]
 80130d8:	f000 fae8 	bl	80136ac <SCSI_SenseCode>
    return -1;
 80130dc:	f04f 33ff 	mov.w	r3, #4294967295
 80130e0:	e04c      	b.n	801317c <SCSI_Inquiry+0xd8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	3301      	adds	r3, #1
 80130e6:	781b      	ldrb	r3, [r3, #0]
 80130e8:	f003 0301 	and.w	r3, r3, #1
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	d022      	beq.n	8013136 <SCSI_Inquiry+0x92>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	3302      	adds	r3, #2
 80130f4:	781b      	ldrb	r3, [r3, #0]
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	d105      	bne.n	8013106 <SCSI_Inquiry+0x62>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 80130fa:	2206      	movs	r2, #6
 80130fc:	4921      	ldr	r1, [pc, #132]	; (8013184 <SCSI_Inquiry+0xe0>)
 80130fe:	69b8      	ldr	r0, [r7, #24]
 8013100:	f001 f862 	bl	80141c8 <SCSI_UpdateBotData>
 8013104:	e039      	b.n	801317a <SCSI_Inquiry+0xd6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	3302      	adds	r3, #2
 801310a:	781b      	ldrb	r3, [r3, #0]
 801310c:	2b80      	cmp	r3, #128	; 0x80
 801310e:	d105      	bne.n	801311c <SCSI_Inquiry+0x78>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8013110:	2208      	movs	r2, #8
 8013112:	491d      	ldr	r1, [pc, #116]	; (8013188 <SCSI_Inquiry+0xe4>)
 8013114:	69b8      	ldr	r0, [r7, #24]
 8013116:	f001 f857 	bl	80141c8 <SCSI_UpdateBotData>
 801311a:	e02e      	b.n	801317a <SCSI_Inquiry+0xd6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 801311c:	69ba      	ldr	r2, [r7, #24]
 801311e:	f248 031d 	movw	r3, #32797	; 0x801d
 8013122:	4413      	add	r3, r2
 8013124:	7819      	ldrb	r1, [r3, #0]
 8013126:	2324      	movs	r3, #36	; 0x24
 8013128:	2205      	movs	r2, #5
 801312a:	68f8      	ldr	r0, [r7, #12]
 801312c:	f000 fabe 	bl	80136ac <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8013130:	f04f 33ff 	mov.w	r3, #4294967295
 8013134:	e022      	b.n	801317c <SCSI_Inquiry+0xd8>
    }
  }
  else
  {
    pPage = (uint8_t *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8013136:	68fb      	ldr	r3, [r7, #12]
 8013138:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801313c:	69d9      	ldr	r1, [r3, #28]
 801313e:	7afa      	ldrb	r2, [r7, #11]
 8013140:	4613      	mov	r3, r2
 8013142:	00db      	lsls	r3, r3, #3
 8013144:	4413      	add	r3, r2
 8013146:	009b      	lsls	r3, r3, #2
 8013148:	440b      	add	r3, r1
 801314a:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 801314c:	697b      	ldr	r3, [r7, #20]
 801314e:	3304      	adds	r3, #4
 8013150:	781b      	ldrb	r3, [r3, #0]
 8013152:	b29b      	uxth	r3, r3
 8013154:	3305      	adds	r3, #5
 8013156:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	3304      	adds	r3, #4
 801315c:	781b      	ldrb	r3, [r3, #0]
 801315e:	b29b      	uxth	r3, r3
 8013160:	8bfa      	ldrh	r2, [r7, #30]
 8013162:	429a      	cmp	r2, r3
 8013164:	d303      	bcc.n	801316e <SCSI_Inquiry+0xca>
    {
      len = params[4];
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	3304      	adds	r3, #4
 801316a:	781b      	ldrb	r3, [r3, #0]
 801316c:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 801316e:	8bfb      	ldrh	r3, [r7, #30]
 8013170:	461a      	mov	r2, r3
 8013172:	6979      	ldr	r1, [r7, #20]
 8013174:	69b8      	ldr	r0, [r7, #24]
 8013176:	f001 f827 	bl	80141c8 <SCSI_UpdateBotData>
  }

  return 0;
 801317a:	2300      	movs	r3, #0
}
 801317c:	4618      	mov	r0, r3
 801317e:	3720      	adds	r7, #32
 8013180:	46bd      	mov	sp, r7
 8013182:	bd80      	pop	{r7, pc}
 8013184:	240000c0 	.word	0x240000c0
 8013188:	240000c8 	.word	0x240000c8

0801318c <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801318c:	b590      	push	{r4, r7, lr}
 801318e:	b087      	sub	sp, #28
 8013190:	af00      	add	r7, sp, #0
 8013192:	60f8      	str	r0, [r7, #12]
 8013194:	460b      	mov	r3, r1
 8013196:	607a      	str	r2, [r7, #4]
 8013198:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801319a:	68fb      	ldr	r3, [r7, #12]
 801319c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80131a0:	617b      	str	r3, [r7, #20]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 80131a2:	68fb      	ldr	r3, [r7, #12]
 80131a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80131a8:	685c      	ldr	r4, [r3, #4]
 80131aa:	697a      	ldr	r2, [r7, #20]
 80131ac:	f248 0368 	movw	r3, #32872	; 0x8068
 80131b0:	4413      	add	r3, r2
 80131b2:	6979      	ldr	r1, [r7, #20]
 80131b4:	f248 0264 	movw	r2, #32868	; 0x8064
 80131b8:	440a      	add	r2, r1
 80131ba:	7af8      	ldrb	r0, [r7, #11]
 80131bc:	4619      	mov	r1, r3
 80131be:	47a0      	blx	r4
 80131c0:	4603      	mov	r3, r0
 80131c2:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80131c4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d106      	bne.n	80131da <SCSI_ReadCapacity10+0x4e>
 80131cc:	697a      	ldr	r2, [r7, #20]
 80131ce:	f248 0362 	movw	r3, #32866	; 0x8062
 80131d2:	4413      	add	r3, r2
 80131d4:	781b      	ldrb	r3, [r3, #0]
 80131d6:	2b02      	cmp	r3, #2
 80131d8:	d108      	bne.n	80131ec <SCSI_ReadCapacity10+0x60>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80131da:	7af9      	ldrb	r1, [r7, #11]
 80131dc:	233a      	movs	r3, #58	; 0x3a
 80131de:	2202      	movs	r2, #2
 80131e0:	68f8      	ldr	r0, [r7, #12]
 80131e2:	f000 fa63 	bl	80136ac <SCSI_SenseCode>
    return -1;
 80131e6:	f04f 33ff 	mov.w	r3, #4294967295
 80131ea:	e04f      	b.n	801328c <SCSI_ReadCapacity10+0x100>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 80131ec:	697a      	ldr	r2, [r7, #20]
 80131ee:	f248 0368 	movw	r3, #32872	; 0x8068
 80131f2:	4413      	add	r3, r2
 80131f4:	681b      	ldr	r3, [r3, #0]
 80131f6:	3b01      	subs	r3, #1
 80131f8:	0e1b      	lsrs	r3, r3, #24
 80131fa:	b2da      	uxtb	r2, r3
 80131fc:	697b      	ldr	r3, [r7, #20]
 80131fe:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8013200:	697a      	ldr	r2, [r7, #20]
 8013202:	f248 0368 	movw	r3, #32872	; 0x8068
 8013206:	4413      	add	r3, r2
 8013208:	681b      	ldr	r3, [r3, #0]
 801320a:	3b01      	subs	r3, #1
 801320c:	0c1b      	lsrs	r3, r3, #16
 801320e:	b2da      	uxtb	r2, r3
 8013210:	697b      	ldr	r3, [r7, #20]
 8013212:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8013214:	697a      	ldr	r2, [r7, #20]
 8013216:	f248 0368 	movw	r3, #32872	; 0x8068
 801321a:	4413      	add	r3, r2
 801321c:	681b      	ldr	r3, [r3, #0]
 801321e:	3b01      	subs	r3, #1
 8013220:	0a1b      	lsrs	r3, r3, #8
 8013222:	b2da      	uxtb	r2, r3
 8013224:	697b      	ldr	r3, [r7, #20]
 8013226:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8013228:	697a      	ldr	r2, [r7, #20]
 801322a:	f248 0368 	movw	r3, #32872	; 0x8068
 801322e:	4413      	add	r3, r2
 8013230:	681b      	ldr	r3, [r3, #0]
 8013232:	b2db      	uxtb	r3, r3
 8013234:	3b01      	subs	r3, #1
 8013236:	b2da      	uxtb	r2, r3
 8013238:	697b      	ldr	r3, [r7, #20]
 801323a:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 801323c:	697a      	ldr	r2, [r7, #20]
 801323e:	f248 0364 	movw	r3, #32868	; 0x8064
 8013242:	4413      	add	r3, r2
 8013244:	881b      	ldrh	r3, [r3, #0]
 8013246:	161b      	asrs	r3, r3, #24
 8013248:	b2da      	uxtb	r2, r3
 801324a:	697b      	ldr	r3, [r7, #20]
 801324c:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 801324e:	697a      	ldr	r2, [r7, #20]
 8013250:	f248 0364 	movw	r3, #32868	; 0x8064
 8013254:	4413      	add	r3, r2
 8013256:	881b      	ldrh	r3, [r3, #0]
 8013258:	141b      	asrs	r3, r3, #16
 801325a:	b2da      	uxtb	r2, r3
 801325c:	697b      	ldr	r3, [r7, #20]
 801325e:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8013260:	697a      	ldr	r2, [r7, #20]
 8013262:	f248 0364 	movw	r3, #32868	; 0x8064
 8013266:	4413      	add	r3, r2
 8013268:	881b      	ldrh	r3, [r3, #0]
 801326a:	0a1b      	lsrs	r3, r3, #8
 801326c:	b29b      	uxth	r3, r3
 801326e:	b2da      	uxtb	r2, r3
 8013270:	697b      	ldr	r3, [r7, #20]
 8013272:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8013274:	697a      	ldr	r2, [r7, #20]
 8013276:	f248 0364 	movw	r3, #32868	; 0x8064
 801327a:	4413      	add	r3, r2
 801327c:	881b      	ldrh	r3, [r3, #0]
 801327e:	b2da      	uxtb	r2, r3
 8013280:	697b      	ldr	r3, [r7, #20]
 8013282:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8013284:	697b      	ldr	r3, [r7, #20]
 8013286:	2208      	movs	r2, #8
 8013288:	60da      	str	r2, [r3, #12]

  return 0;
 801328a:	2300      	movs	r3, #0

}
 801328c:	4618      	mov	r0, r3
 801328e:	371c      	adds	r7, #28
 8013290:	46bd      	mov	sp, r7
 8013292:	bd90      	pop	{r4, r7, pc}

08013294 <SCSI_ReadCapacity16>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8013294:	b590      	push	{r4, r7, lr}
 8013296:	b089      	sub	sp, #36	; 0x24
 8013298:	af00      	add	r7, sp, #0
 801329a:	60f8      	str	r0, [r7, #12]
 801329c:	460b      	mov	r3, r1
 801329e:	607a      	str	r2, [r7, #4]
 80132a0:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80132a2:	68fb      	ldr	r3, [r7, #12]
 80132a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80132a8:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 80132aa:	68fb      	ldr	r3, [r7, #12]
 80132ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80132b0:	685c      	ldr	r4, [r3, #4]
 80132b2:	69ba      	ldr	r2, [r7, #24]
 80132b4:	f248 0368 	movw	r3, #32872	; 0x8068
 80132b8:	4413      	add	r3, r2
 80132ba:	69b9      	ldr	r1, [r7, #24]
 80132bc:	f248 0264 	movw	r2, #32868	; 0x8064
 80132c0:	440a      	add	r2, r1
 80132c2:	7af8      	ldrb	r0, [r7, #11]
 80132c4:	4619      	mov	r1, r3
 80132c6:	47a0      	blx	r4
 80132c8:	4603      	mov	r3, r0
 80132ca:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80132cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80132d0:	2b00      	cmp	r3, #0
 80132d2:	d106      	bne.n	80132e2 <SCSI_ReadCapacity16+0x4e>
 80132d4:	69ba      	ldr	r2, [r7, #24]
 80132d6:	f248 0362 	movw	r3, #32866	; 0x8062
 80132da:	4413      	add	r3, r2
 80132dc:	781b      	ldrb	r3, [r3, #0]
 80132de:	2b02      	cmp	r3, #2
 80132e0:	d108      	bne.n	80132f4 <SCSI_ReadCapacity16+0x60>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80132e2:	7af9      	ldrb	r1, [r7, #11]
 80132e4:	233a      	movs	r3, #58	; 0x3a
 80132e6:	2202      	movs	r2, #2
 80132e8:	68f8      	ldr	r0, [r7, #12]
 80132ea:	f000 f9df 	bl	80136ac <SCSI_SenseCode>
    return -1;
 80132ee:	f04f 33ff 	mov.w	r3, #4294967295
 80132f2:	e084      	b.n	80133fe <SCSI_ReadCapacity16+0x16a>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	330a      	adds	r3, #10
 80132f8:	781b      	ldrb	r3, [r3, #0]
 80132fa:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	330b      	adds	r3, #11
 8013300:	781b      	ldrb	r3, [r3, #0]
 8013302:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8013304:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	330c      	adds	r3, #12
 801330a:	781b      	ldrb	r3, [r3, #0]
 801330c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 801330e:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 8013310:	687a      	ldr	r2, [r7, #4]
 8013312:	320d      	adds	r2, #13
 8013314:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8013316:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8013318:	69bb      	ldr	r3, [r7, #24]
 801331a:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 801331c:	2300      	movs	r3, #0
 801331e:	77fb      	strb	r3, [r7, #31]
 8013320:	e007      	b.n	8013332 <SCSI_ReadCapacity16+0x9e>
  {
    hmsc->bot_data[idx] = 0U;
 8013322:	7ffb      	ldrb	r3, [r7, #31]
 8013324:	69ba      	ldr	r2, [r7, #24]
 8013326:	4413      	add	r3, r2
 8013328:	2200      	movs	r2, #0
 801332a:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 801332c:	7ffb      	ldrb	r3, [r7, #31]
 801332e:	3301      	adds	r3, #1
 8013330:	77fb      	strb	r3, [r7, #31]
 8013332:	7ffa      	ldrb	r2, [r7, #31]
 8013334:	69bb      	ldr	r3, [r7, #24]
 8013336:	68db      	ldr	r3, [r3, #12]
 8013338:	429a      	cmp	r2, r3
 801333a:	d3f2      	bcc.n	8013322 <SCSI_ReadCapacity16+0x8e>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 801333c:	69ba      	ldr	r2, [r7, #24]
 801333e:	f248 0368 	movw	r3, #32872	; 0x8068
 8013342:	4413      	add	r3, r2
 8013344:	681b      	ldr	r3, [r3, #0]
 8013346:	3b01      	subs	r3, #1
 8013348:	0e1b      	lsrs	r3, r3, #24
 801334a:	b2da      	uxtb	r2, r3
 801334c:	69bb      	ldr	r3, [r7, #24]
 801334e:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8013350:	69ba      	ldr	r2, [r7, #24]
 8013352:	f248 0368 	movw	r3, #32872	; 0x8068
 8013356:	4413      	add	r3, r2
 8013358:	681b      	ldr	r3, [r3, #0]
 801335a:	3b01      	subs	r3, #1
 801335c:	0c1b      	lsrs	r3, r3, #16
 801335e:	b2da      	uxtb	r2, r3
 8013360:	69bb      	ldr	r3, [r7, #24]
 8013362:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8013364:	69ba      	ldr	r2, [r7, #24]
 8013366:	f248 0368 	movw	r3, #32872	; 0x8068
 801336a:	4413      	add	r3, r2
 801336c:	681b      	ldr	r3, [r3, #0]
 801336e:	3b01      	subs	r3, #1
 8013370:	0a1b      	lsrs	r3, r3, #8
 8013372:	b2da      	uxtb	r2, r3
 8013374:	69bb      	ldr	r3, [r7, #24]
 8013376:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8013378:	69ba      	ldr	r2, [r7, #24]
 801337a:	f248 0368 	movw	r3, #32872	; 0x8068
 801337e:	4413      	add	r3, r2
 8013380:	681b      	ldr	r3, [r3, #0]
 8013382:	b2db      	uxtb	r3, r3
 8013384:	3b01      	subs	r3, #1
 8013386:	b2da      	uxtb	r2, r3
 8013388:	69bb      	ldr	r3, [r7, #24]
 801338a:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 801338c:	69ba      	ldr	r2, [r7, #24]
 801338e:	f248 0364 	movw	r3, #32868	; 0x8064
 8013392:	4413      	add	r3, r2
 8013394:	881b      	ldrh	r3, [r3, #0]
 8013396:	161b      	asrs	r3, r3, #24
 8013398:	b2da      	uxtb	r2, r3
 801339a:	69bb      	ldr	r3, [r7, #24]
 801339c:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 801339e:	69ba      	ldr	r2, [r7, #24]
 80133a0:	f248 0364 	movw	r3, #32868	; 0x8064
 80133a4:	4413      	add	r3, r2
 80133a6:	881b      	ldrh	r3, [r3, #0]
 80133a8:	141b      	asrs	r3, r3, #16
 80133aa:	b2da      	uxtb	r2, r3
 80133ac:	69bb      	ldr	r3, [r7, #24]
 80133ae:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 80133b0:	69ba      	ldr	r2, [r7, #24]
 80133b2:	f248 0364 	movw	r3, #32868	; 0x8064
 80133b6:	4413      	add	r3, r2
 80133b8:	881b      	ldrh	r3, [r3, #0]
 80133ba:	0a1b      	lsrs	r3, r3, #8
 80133bc:	b29b      	uxth	r3, r3
 80133be:	b2da      	uxtb	r2, r3
 80133c0:	69bb      	ldr	r3, [r7, #24]
 80133c2:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 80133c4:	69ba      	ldr	r2, [r7, #24]
 80133c6:	f248 0364 	movw	r3, #32868	; 0x8064
 80133ca:	4413      	add	r3, r2
 80133cc:	881b      	ldrh	r3, [r3, #0]
 80133ce:	b2da      	uxtb	r2, r3
 80133d0:	69bb      	ldr	r3, [r7, #24]
 80133d2:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	330a      	adds	r3, #10
 80133d8:	781b      	ldrb	r3, [r3, #0]
 80133da:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	330b      	adds	r3, #11
 80133e0:	781b      	ldrb	r3, [r3, #0]
 80133e2:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80133e4:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	330c      	adds	r3, #12
 80133ea:	781b      	ldrb	r3, [r3, #0]
 80133ec:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 80133ee:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 80133f0:	687a      	ldr	r2, [r7, #4]
 80133f2:	320d      	adds	r2, #13
 80133f4:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 80133f6:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80133f8:	69bb      	ldr	r3, [r7, #24]
 80133fa:	60da      	str	r2, [r3, #12]

  return 0;
 80133fc:	2300      	movs	r3, #0
}
 80133fe:	4618      	mov	r0, r3
 8013400:	3724      	adds	r7, #36	; 0x24
 8013402:	46bd      	mov	sp, r7
 8013404:	bd90      	pop	{r4, r7, pc}

08013406 <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8013406:	b580      	push	{r7, lr}
 8013408:	b088      	sub	sp, #32
 801340a:	af00      	add	r7, sp, #0
 801340c:	60f8      	str	r0, [r7, #12]
 801340e:	460b      	mov	r3, r1
 8013410:	607a      	str	r2, [r7, #4]
 8013412:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013414:	68fb      	ldr	r3, [r7, #12]
 8013416:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801341a:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 801341c:	68fb      	ldr	r3, [r7, #12]
 801341e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013422:	685b      	ldr	r3, [r3, #4]
 8013424:	f107 0214 	add.w	r2, r7, #20
 8013428:	f107 0110 	add.w	r1, r7, #16
 801342c:	7af8      	ldrb	r0, [r7, #11]
 801342e:	4798      	blx	r3
 8013430:	4603      	mov	r3, r0
 8013432:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8013434:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013438:	2b00      	cmp	r3, #0
 801343a:	d106      	bne.n	801344a <SCSI_ReadFormatCapacity+0x44>
 801343c:	69ba      	ldr	r2, [r7, #24]
 801343e:	f248 0362 	movw	r3, #32866	; 0x8062
 8013442:	4413      	add	r3, r2
 8013444:	781b      	ldrb	r3, [r3, #0]
 8013446:	2b02      	cmp	r3, #2
 8013448:	d108      	bne.n	801345c <SCSI_ReadFormatCapacity+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801344a:	7af9      	ldrb	r1, [r7, #11]
 801344c:	233a      	movs	r3, #58	; 0x3a
 801344e:	2202      	movs	r2, #2
 8013450:	68f8      	ldr	r0, [r7, #12]
 8013452:	f000 f92b 	bl	80136ac <SCSI_SenseCode>
    return -1;
 8013456:	f04f 33ff 	mov.w	r3, #4294967295
 801345a:	e03e      	b.n	80134da <SCSI_ReadFormatCapacity+0xd4>
  }

  for (i = 0U; i < 12U ; i++)
 801345c:	2300      	movs	r3, #0
 801345e:	83fb      	strh	r3, [r7, #30]
 8013460:	e007      	b.n	8013472 <SCSI_ReadFormatCapacity+0x6c>
  {
    hmsc->bot_data[i] = 0U;
 8013462:	8bfb      	ldrh	r3, [r7, #30]
 8013464:	69ba      	ldr	r2, [r7, #24]
 8013466:	4413      	add	r3, r2
 8013468:	2200      	movs	r2, #0
 801346a:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 801346c:	8bfb      	ldrh	r3, [r7, #30]
 801346e:	3301      	adds	r3, #1
 8013470:	83fb      	strh	r3, [r7, #30]
 8013472:	8bfb      	ldrh	r3, [r7, #30]
 8013474:	2b0b      	cmp	r3, #11
 8013476:	d9f4      	bls.n	8013462 <SCSI_ReadFormatCapacity+0x5c>
  }

  hmsc->bot_data[3] = 0x08U;
 8013478:	69bb      	ldr	r3, [r7, #24]
 801347a:	2208      	movs	r2, #8
 801347c:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 801347e:	693b      	ldr	r3, [r7, #16]
 8013480:	3b01      	subs	r3, #1
 8013482:	0e1b      	lsrs	r3, r3, #24
 8013484:	b2da      	uxtb	r2, r3
 8013486:	69bb      	ldr	r3, [r7, #24]
 8013488:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 801348a:	693b      	ldr	r3, [r7, #16]
 801348c:	3b01      	subs	r3, #1
 801348e:	0c1b      	lsrs	r3, r3, #16
 8013490:	b2da      	uxtb	r2, r3
 8013492:	69bb      	ldr	r3, [r7, #24]
 8013494:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8013496:	693b      	ldr	r3, [r7, #16]
 8013498:	3b01      	subs	r3, #1
 801349a:	0a1b      	lsrs	r3, r3, #8
 801349c:	b2da      	uxtb	r2, r3
 801349e:	69bb      	ldr	r3, [r7, #24]
 80134a0:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 80134a2:	693b      	ldr	r3, [r7, #16]
 80134a4:	b2db      	uxtb	r3, r3
 80134a6:	3b01      	subs	r3, #1
 80134a8:	b2da      	uxtb	r2, r3
 80134aa:	69bb      	ldr	r3, [r7, #24]
 80134ac:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 80134ae:	69bb      	ldr	r3, [r7, #24]
 80134b0:	2202      	movs	r2, #2
 80134b2:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 80134b4:	8abb      	ldrh	r3, [r7, #20]
 80134b6:	141b      	asrs	r3, r3, #16
 80134b8:	b2da      	uxtb	r2, r3
 80134ba:	69bb      	ldr	r3, [r7, #24]
 80134bc:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 80134be:	8abb      	ldrh	r3, [r7, #20]
 80134c0:	0a1b      	lsrs	r3, r3, #8
 80134c2:	b29b      	uxth	r3, r3
 80134c4:	b2da      	uxtb	r2, r3
 80134c6:	69bb      	ldr	r3, [r7, #24]
 80134c8:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 80134ca:	8abb      	ldrh	r3, [r7, #20]
 80134cc:	b2da      	uxtb	r2, r3
 80134ce:	69bb      	ldr	r3, [r7, #24]
 80134d0:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 80134d2:	69bb      	ldr	r3, [r7, #24]
 80134d4:	220c      	movs	r2, #12
 80134d6:	60da      	str	r2, [r3, #12]

  return 0;
 80134d8:	2300      	movs	r3, #0
}
 80134da:	4618      	mov	r0, r3
 80134dc:	3720      	adds	r7, #32
 80134de:	46bd      	mov	sp, r7
 80134e0:	bd80      	pop	{r7, pc}
	...

080134e4 <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80134e4:	b580      	push	{r7, lr}
 80134e6:	b086      	sub	sp, #24
 80134e8:	af00      	add	r7, sp, #0
 80134ea:	60f8      	str	r0, [r7, #12]
 80134ec:	460b      	mov	r3, r1
 80134ee:	607a      	str	r2, [r7, #4]
 80134f0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80134f2:	68fb      	ldr	r3, [r7, #12]
 80134f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80134f8:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 80134fa:	2317      	movs	r3, #23
 80134fc:	82fb      	strh	r3, [r7, #22]

  if (params[4] <= len)
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	3304      	adds	r3, #4
 8013502:	781b      	ldrb	r3, [r3, #0]
 8013504:	b29b      	uxth	r3, r3
 8013506:	8afa      	ldrh	r2, [r7, #22]
 8013508:	429a      	cmp	r2, r3
 801350a:	d303      	bcc.n	8013514 <SCSI_ModeSense6+0x30>
  {
    len = params[4];
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	3304      	adds	r3, #4
 8013510:	781b      	ldrb	r3, [r3, #0]
 8013512:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8013514:	8afb      	ldrh	r3, [r7, #22]
 8013516:	461a      	mov	r2, r3
 8013518:	4904      	ldr	r1, [pc, #16]	; (801352c <SCSI_ModeSense6+0x48>)
 801351a:	6938      	ldr	r0, [r7, #16]
 801351c:	f000 fe54 	bl	80141c8 <SCSI_UpdateBotData>

  return 0;
 8013520:	2300      	movs	r3, #0
}
 8013522:	4618      	mov	r0, r3
 8013524:	3718      	adds	r7, #24
 8013526:	46bd      	mov	sp, r7
 8013528:	bd80      	pop	{r7, pc}
 801352a:	bf00      	nop
 801352c:	240000d0 	.word	0x240000d0

08013530 <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8013530:	b580      	push	{r7, lr}
 8013532:	b086      	sub	sp, #24
 8013534:	af00      	add	r7, sp, #0
 8013536:	60f8      	str	r0, [r7, #12]
 8013538:	460b      	mov	r3, r1
 801353a:	607a      	str	r2, [r7, #4]
 801353c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801353e:	68fb      	ldr	r3, [r7, #12]
 8013540:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013544:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 8013546:	231b      	movs	r3, #27
 8013548:	82fb      	strh	r3, [r7, #22]

  if (params[8] <= len)
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	3308      	adds	r3, #8
 801354e:	781b      	ldrb	r3, [r3, #0]
 8013550:	b29b      	uxth	r3, r3
 8013552:	8afa      	ldrh	r2, [r7, #22]
 8013554:	429a      	cmp	r2, r3
 8013556:	d303      	bcc.n	8013560 <SCSI_ModeSense10+0x30>
  {
    len = params[8];
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	3308      	adds	r3, #8
 801355c:	781b      	ldrb	r3, [r3, #0]
 801355e:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8013560:	8afb      	ldrh	r3, [r7, #22]
 8013562:	461a      	mov	r2, r3
 8013564:	4904      	ldr	r1, [pc, #16]	; (8013578 <SCSI_ModeSense10+0x48>)
 8013566:	6938      	ldr	r0, [r7, #16]
 8013568:	f000 fe2e 	bl	80141c8 <SCSI_UpdateBotData>

  return 0;
 801356c:	2300      	movs	r3, #0
}
 801356e:	4618      	mov	r0, r3
 8013570:	3718      	adds	r7, #24
 8013572:	46bd      	mov	sp, r7
 8013574:	bd80      	pop	{r7, pc}
 8013576:	bf00      	nop
 8013578:	240000e8 	.word	0x240000e8

0801357c <SCSI_RequestSense>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801357c:	b580      	push	{r7, lr}
 801357e:	b086      	sub	sp, #24
 8013580:	af00      	add	r7, sp, #0
 8013582:	60f8      	str	r0, [r7, #12]
 8013584:	460b      	mov	r3, r1
 8013586:	607a      	str	r2, [r7, #4]
 8013588:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801358a:	68fb      	ldr	r3, [r7, #12]
 801358c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013590:	613b      	str	r3, [r7, #16]

  if (hmsc->cbw.dDataLength == 0U)
 8013592:	693a      	ldr	r2, [r7, #16]
 8013594:	f248 0318 	movw	r3, #32792	; 0x8018
 8013598:	4413      	add	r3, r2
 801359a:	681b      	ldr	r3, [r3, #0]
 801359c:	2b00      	cmp	r3, #0
 801359e:	d10c      	bne.n	80135ba <SCSI_RequestSense+0x3e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80135a0:	693a      	ldr	r2, [r7, #16]
 80135a2:	f248 031d 	movw	r3, #32797	; 0x801d
 80135a6:	4413      	add	r3, r2
 80135a8:	7819      	ldrb	r1, [r3, #0]
 80135aa:	2320      	movs	r3, #32
 80135ac:	2205      	movs	r2, #5
 80135ae:	68f8      	ldr	r0, [r7, #12]
 80135b0:	f000 f87c 	bl	80136ac <SCSI_SenseCode>
    return -1;
 80135b4:	f04f 33ff 	mov.w	r3, #4294967295
 80135b8:	e074      	b.n	80136a4 <SCSI_RequestSense+0x128>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 80135ba:	2300      	movs	r3, #0
 80135bc:	75fb      	strb	r3, [r7, #23]
 80135be:	e007      	b.n	80135d0 <SCSI_RequestSense+0x54>
  {
    hmsc->bot_data[i] = 0U;
 80135c0:	7dfb      	ldrb	r3, [r7, #23]
 80135c2:	693a      	ldr	r2, [r7, #16]
 80135c4:	4413      	add	r3, r2
 80135c6:	2200      	movs	r2, #0
 80135c8:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 80135ca:	7dfb      	ldrb	r3, [r7, #23]
 80135cc:	3301      	adds	r3, #1
 80135ce:	75fb      	strb	r3, [r7, #23]
 80135d0:	7dfb      	ldrb	r3, [r7, #23]
 80135d2:	2b11      	cmp	r3, #17
 80135d4:	d9f4      	bls.n	80135c0 <SCSI_RequestSense+0x44>
  }

  hmsc->bot_data[0] = 0x70U;
 80135d6:	693b      	ldr	r3, [r7, #16]
 80135d8:	2270      	movs	r2, #112	; 0x70
 80135da:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 80135dc:	693b      	ldr	r3, [r7, #16]
 80135de:	220c      	movs	r2, #12
 80135e0:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 80135e2:	693a      	ldr	r2, [r7, #16]
 80135e4:	f248 0360 	movw	r3, #32864	; 0x8060
 80135e8:	4413      	add	r3, r2
 80135ea:	781a      	ldrb	r2, [r3, #0]
 80135ec:	6939      	ldr	r1, [r7, #16]
 80135ee:	f248 0361 	movw	r3, #32865	; 0x8061
 80135f2:	440b      	add	r3, r1
 80135f4:	781b      	ldrb	r3, [r3, #0]
 80135f6:	429a      	cmp	r2, r3
 80135f8:	d045      	beq.n	8013686 <SCSI_RequestSense+0x10a>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 80135fa:	693a      	ldr	r2, [r7, #16]
 80135fc:	f248 0360 	movw	r3, #32864	; 0x8060
 8013600:	4413      	add	r3, r2
 8013602:	781b      	ldrb	r3, [r3, #0]
 8013604:	4619      	mov	r1, r3
 8013606:	693a      	ldr	r2, [r7, #16]
 8013608:	f241 0308 	movw	r3, #4104	; 0x1008
 801360c:	440b      	add	r3, r1
 801360e:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 8013612:	693b      	ldr	r3, [r7, #16]
 8013614:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8013616:	693a      	ldr	r2, [r7, #16]
 8013618:	f248 0360 	movw	r3, #32864	; 0x8060
 801361c:	4413      	add	r3, r2
 801361e:	781b      	ldrb	r3, [r3, #0]
 8013620:	4619      	mov	r1, r3
 8013622:	693a      	ldr	r2, [r7, #16]
 8013624:	f241 0308 	movw	r3, #4104	; 0x1008
 8013628:	440b      	add	r3, r1
 801362a:	00db      	lsls	r3, r3, #3
 801362c:	4413      	add	r3, r2
 801362e:	791a      	ldrb	r2, [r3, #4]
 8013630:	693b      	ldr	r3, [r7, #16]
 8013632:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8013634:	693a      	ldr	r2, [r7, #16]
 8013636:	f248 0360 	movw	r3, #32864	; 0x8060
 801363a:	4413      	add	r3, r2
 801363c:	781b      	ldrb	r3, [r3, #0]
 801363e:	4619      	mov	r1, r3
 8013640:	693a      	ldr	r2, [r7, #16]
 8013642:	f241 0308 	movw	r3, #4104	; 0x1008
 8013646:	440b      	add	r3, r1
 8013648:	00db      	lsls	r3, r3, #3
 801364a:	4413      	add	r3, r2
 801364c:	795a      	ldrb	r2, [r3, #5]
 801364e:	693b      	ldr	r3, [r7, #16]
 8013650:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 8013652:	693a      	ldr	r2, [r7, #16]
 8013654:	f248 0360 	movw	r3, #32864	; 0x8060
 8013658:	4413      	add	r3, r2
 801365a:	781b      	ldrb	r3, [r3, #0]
 801365c:	3301      	adds	r3, #1
 801365e:	b2d9      	uxtb	r1, r3
 8013660:	693a      	ldr	r2, [r7, #16]
 8013662:	f248 0360 	movw	r3, #32864	; 0x8060
 8013666:	4413      	add	r3, r2
 8013668:	460a      	mov	r2, r1
 801366a:	701a      	strb	r2, [r3, #0]

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 801366c:	693a      	ldr	r2, [r7, #16]
 801366e:	f248 0360 	movw	r3, #32864	; 0x8060
 8013672:	4413      	add	r3, r2
 8013674:	781b      	ldrb	r3, [r3, #0]
 8013676:	2b04      	cmp	r3, #4
 8013678:	d105      	bne.n	8013686 <SCSI_RequestSense+0x10a>
    {
      hmsc->scsi_sense_head = 0U;
 801367a:	693a      	ldr	r2, [r7, #16]
 801367c:	f248 0360 	movw	r3, #32864	; 0x8060
 8013680:	4413      	add	r3, r2
 8013682:	2200      	movs	r2, #0
 8013684:	701a      	strb	r2, [r3, #0]
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8013686:	693b      	ldr	r3, [r7, #16]
 8013688:	2212      	movs	r2, #18
 801368a:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	3304      	adds	r3, #4
 8013690:	781b      	ldrb	r3, [r3, #0]
 8013692:	2b12      	cmp	r3, #18
 8013694:	d805      	bhi.n	80136a2 <SCSI_RequestSense+0x126>
  {
    hmsc->bot_data_length = params[4];
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	3304      	adds	r3, #4
 801369a:	781b      	ldrb	r3, [r3, #0]
 801369c:	461a      	mov	r2, r3
 801369e:	693b      	ldr	r3, [r7, #16]
 80136a0:	60da      	str	r2, [r3, #12]
  }

  return 0;
 80136a2:	2300      	movs	r3, #0
}
 80136a4:	4618      	mov	r0, r3
 80136a6:	3718      	adds	r7, #24
 80136a8:	46bd      	mov	sp, r7
 80136aa:	bd80      	pop	{r7, pc}

080136ac <SCSI_SenseCode>:
* @param  ASC: Additional Sense Code
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 80136ac:	b480      	push	{r7}
 80136ae:	b085      	sub	sp, #20
 80136b0:	af00      	add	r7, sp, #0
 80136b2:	6078      	str	r0, [r7, #4]
 80136b4:	4608      	mov	r0, r1
 80136b6:	4611      	mov	r1, r2
 80136b8:	461a      	mov	r2, r3
 80136ba:	4603      	mov	r3, r0
 80136bc:	70fb      	strb	r3, [r7, #3]
 80136be:	460b      	mov	r3, r1
 80136c0:	70bb      	strb	r3, [r7, #2]
 80136c2:	4613      	mov	r3, r2
 80136c4:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80136cc:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 80136ce:	68fa      	ldr	r2, [r7, #12]
 80136d0:	f248 0361 	movw	r3, #32865	; 0x8061
 80136d4:	4413      	add	r3, r2
 80136d6:	781b      	ldrb	r3, [r3, #0]
 80136d8:	4619      	mov	r1, r3
 80136da:	68fa      	ldr	r2, [r7, #12]
 80136dc:	f241 0308 	movw	r3, #4104	; 0x1008
 80136e0:	440b      	add	r3, r1
 80136e2:	78b9      	ldrb	r1, [r7, #2]
 80136e4:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 80136e8:	68fa      	ldr	r2, [r7, #12]
 80136ea:	f248 0361 	movw	r3, #32865	; 0x8061
 80136ee:	4413      	add	r3, r2
 80136f0:	781b      	ldrb	r3, [r3, #0]
 80136f2:	4619      	mov	r1, r3
 80136f4:	68fa      	ldr	r2, [r7, #12]
 80136f6:	f241 0308 	movw	r3, #4104	; 0x1008
 80136fa:	440b      	add	r3, r1
 80136fc:	00db      	lsls	r3, r3, #3
 80136fe:	4413      	add	r3, r2
 8013700:	787a      	ldrb	r2, [r7, #1]
 8013702:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 8013704:	68fa      	ldr	r2, [r7, #12]
 8013706:	f248 0361 	movw	r3, #32865	; 0x8061
 801370a:	4413      	add	r3, r2
 801370c:	781b      	ldrb	r3, [r3, #0]
 801370e:	4619      	mov	r1, r3
 8013710:	68fa      	ldr	r2, [r7, #12]
 8013712:	f241 0308 	movw	r3, #4104	; 0x1008
 8013716:	440b      	add	r3, r1
 8013718:	00db      	lsls	r3, r3, #3
 801371a:	4413      	add	r3, r2
 801371c:	2200      	movs	r2, #0
 801371e:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8013720:	68fa      	ldr	r2, [r7, #12]
 8013722:	f248 0361 	movw	r3, #32865	; 0x8061
 8013726:	4413      	add	r3, r2
 8013728:	781b      	ldrb	r3, [r3, #0]
 801372a:	3301      	adds	r3, #1
 801372c:	b2d9      	uxtb	r1, r3
 801372e:	68fa      	ldr	r2, [r7, #12]
 8013730:	f248 0361 	movw	r3, #32865	; 0x8061
 8013734:	4413      	add	r3, r2
 8013736:	460a      	mov	r2, r1
 8013738:	701a      	strb	r2, [r3, #0]

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 801373a:	68fa      	ldr	r2, [r7, #12]
 801373c:	f248 0361 	movw	r3, #32865	; 0x8061
 8013740:	4413      	add	r3, r2
 8013742:	781b      	ldrb	r3, [r3, #0]
 8013744:	2b04      	cmp	r3, #4
 8013746:	d105      	bne.n	8013754 <SCSI_SenseCode+0xa8>
  {
    hmsc->scsi_sense_tail = 0U;
 8013748:	68fa      	ldr	r2, [r7, #12]
 801374a:	f248 0361 	movw	r3, #32865	; 0x8061
 801374e:	4413      	add	r3, r2
 8013750:	2200      	movs	r2, #0
 8013752:	701a      	strb	r2, [r3, #0]
  }
}
 8013754:	bf00      	nop
 8013756:	3714      	adds	r7, #20
 8013758:	46bd      	mov	sp, r7
 801375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801375e:	4770      	bx	lr

08013760 <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8013760:	b580      	push	{r7, lr}
 8013762:	b086      	sub	sp, #24
 8013764:	af00      	add	r7, sp, #0
 8013766:	60f8      	str	r0, [r7, #12]
 8013768:	460b      	mov	r3, r1
 801376a:	607a      	str	r2, [r7, #4]
 801376c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801376e:	68fb      	ldr	r3, [r7, #12]
 8013770:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013774:	617b      	str	r3, [r7, #20]

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 8013776:	697a      	ldr	r2, [r7, #20]
 8013778:	f248 0362 	movw	r3, #32866	; 0x8062
 801377c:	4413      	add	r3, r2
 801377e:	781b      	ldrb	r3, [r3, #0]
 8013780:	2b01      	cmp	r3, #1
 8013782:	d10f      	bne.n	80137a4 <SCSI_StartStopUnit+0x44>
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	3304      	adds	r3, #4
 8013788:	781b      	ldrb	r3, [r3, #0]
 801378a:	f003 0303 	and.w	r3, r3, #3
 801378e:	2b02      	cmp	r3, #2
 8013790:	d108      	bne.n	80137a4 <SCSI_StartStopUnit+0x44>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8013792:	7af9      	ldrb	r1, [r7, #11]
 8013794:	2324      	movs	r3, #36	; 0x24
 8013796:	2205      	movs	r2, #5
 8013798:	68f8      	ldr	r0, [r7, #12]
 801379a:	f7ff ff87 	bl	80136ac <SCSI_SenseCode>

    return -1;
 801379e:	f04f 33ff 	mov.w	r3, #4294967295
 80137a2:	e02c      	b.n	80137fe <SCSI_StartStopUnit+0x9e>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	3304      	adds	r3, #4
 80137a8:	781b      	ldrb	r3, [r3, #0]
 80137aa:	f003 0303 	and.w	r3, r3, #3
 80137ae:	2b01      	cmp	r3, #1
 80137b0:	d106      	bne.n	80137c0 <SCSI_StartStopUnit+0x60>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80137b2:	697a      	ldr	r2, [r7, #20]
 80137b4:	f248 0362 	movw	r3, #32866	; 0x8062
 80137b8:	4413      	add	r3, r2
 80137ba:	2200      	movs	r2, #0
 80137bc:	701a      	strb	r2, [r3, #0]
 80137be:	e01a      	b.n	80137f6 <SCSI_StartStopUnit+0x96>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	3304      	adds	r3, #4
 80137c4:	781b      	ldrb	r3, [r3, #0]
 80137c6:	f003 0303 	and.w	r3, r3, #3
 80137ca:	2b02      	cmp	r3, #2
 80137cc:	d106      	bne.n	80137dc <SCSI_StartStopUnit+0x7c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 80137ce:	697a      	ldr	r2, [r7, #20]
 80137d0:	f248 0362 	movw	r3, #32866	; 0x8062
 80137d4:	4413      	add	r3, r2
 80137d6:	2202      	movs	r2, #2
 80137d8:	701a      	strb	r2, [r3, #0]
 80137da:	e00c      	b.n	80137f6 <SCSI_StartStopUnit+0x96>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	3304      	adds	r3, #4
 80137e0:	781b      	ldrb	r3, [r3, #0]
 80137e2:	f003 0303 	and.w	r3, r3, #3
 80137e6:	2b03      	cmp	r3, #3
 80137e8:	d105      	bne.n	80137f6 <SCSI_StartStopUnit+0x96>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80137ea:	697a      	ldr	r2, [r7, #20]
 80137ec:	f248 0362 	movw	r3, #32866	; 0x8062
 80137f0:	4413      	add	r3, r2
 80137f2:	2200      	movs	r2, #0
 80137f4:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 80137f6:	697b      	ldr	r3, [r7, #20]
 80137f8:	2200      	movs	r2, #0
 80137fa:	60da      	str	r2, [r3, #12]

  return 0;
 80137fc:	2300      	movs	r3, #0
}
 80137fe:	4618      	mov	r0, r3
 8013800:	3718      	adds	r7, #24
 8013802:	46bd      	mov	sp, r7
 8013804:	bd80      	pop	{r7, pc}

08013806 <SCSI_AllowPreventRemovable>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8013806:	b480      	push	{r7}
 8013808:	b087      	sub	sp, #28
 801380a:	af00      	add	r7, sp, #0
 801380c:	60f8      	str	r0, [r7, #12]
 801380e:	460b      	mov	r3, r1
 8013810:	607a      	str	r2, [r7, #4]
 8013812:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013814:	68fb      	ldr	r3, [r7, #12]
 8013816:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801381a:	617b      	str	r3, [r7, #20]

  if (params[4] == 0U)
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	3304      	adds	r3, #4
 8013820:	781b      	ldrb	r3, [r3, #0]
 8013822:	2b00      	cmp	r3, #0
 8013824:	d106      	bne.n	8013834 <SCSI_AllowPreventRemovable+0x2e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8013826:	697a      	ldr	r2, [r7, #20]
 8013828:	f248 0362 	movw	r3, #32866	; 0x8062
 801382c:	4413      	add	r3, r2
 801382e:	2200      	movs	r2, #0
 8013830:	701a      	strb	r2, [r3, #0]
 8013832:	e005      	b.n	8013840 <SCSI_AllowPreventRemovable+0x3a>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8013834:	697a      	ldr	r2, [r7, #20]
 8013836:	f248 0362 	movw	r3, #32866	; 0x8062
 801383a:	4413      	add	r3, r2
 801383c:	2201      	movs	r2, #1
 801383e:	701a      	strb	r2, [r3, #0]
  }

  hmsc->bot_data_length = 0U;
 8013840:	697b      	ldr	r3, [r7, #20]
 8013842:	2200      	movs	r2, #0
 8013844:	60da      	str	r2, [r3, #12]

  return 0;
 8013846:	2300      	movs	r3, #0
}
 8013848:	4618      	mov	r0, r3
 801384a:	371c      	adds	r7, #28
 801384c:	46bd      	mov	sp, r7
 801384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013852:	4770      	bx	lr

08013854 <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8013854:	b580      	push	{r7, lr}
 8013856:	b086      	sub	sp, #24
 8013858:	af00      	add	r7, sp, #0
 801385a:	60f8      	str	r0, [r7, #12]
 801385c:	460b      	mov	r3, r1
 801385e:	607a      	str	r2, [r7, #4]
 8013860:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013862:	68fb      	ldr	r3, [r7, #12]
 8013864:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013868:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 801386a:	697b      	ldr	r3, [r7, #20]
 801386c:	7a1b      	ldrb	r3, [r3, #8]
 801386e:	2b00      	cmp	r3, #0
 8013870:	f040 8094 	bne.w	801399c <SCSI_Read10+0x148>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8013874:	697a      	ldr	r2, [r7, #20]
 8013876:	f248 031c 	movw	r3, #32796	; 0x801c
 801387a:	4413      	add	r3, r2
 801387c:	781b      	ldrb	r3, [r3, #0]
 801387e:	b25b      	sxtb	r3, r3
 8013880:	2b00      	cmp	r3, #0
 8013882:	db0c      	blt.n	801389e <SCSI_Read10+0x4a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013884:	697a      	ldr	r2, [r7, #20]
 8013886:	f248 031d 	movw	r3, #32797	; 0x801d
 801388a:	4413      	add	r3, r2
 801388c:	7819      	ldrb	r1, [r3, #0]
 801388e:	2320      	movs	r3, #32
 8013890:	2205      	movs	r2, #5
 8013892:	68f8      	ldr	r0, [r7, #12]
 8013894:	f7ff ff0a 	bl	80136ac <SCSI_SenseCode>
      return -1;
 8013898:	f04f 33ff 	mov.w	r3, #4294967295
 801389c:	e088      	b.n	80139b0 <SCSI_Read10+0x15c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 801389e:	697a      	ldr	r2, [r7, #20]
 80138a0:	f248 0362 	movw	r3, #32866	; 0x8062
 80138a4:	4413      	add	r3, r2
 80138a6:	781b      	ldrb	r3, [r3, #0]
 80138a8:	2b02      	cmp	r3, #2
 80138aa:	d108      	bne.n	80138be <SCSI_Read10+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80138ac:	7af9      	ldrb	r1, [r7, #11]
 80138ae:	233a      	movs	r3, #58	; 0x3a
 80138b0:	2202      	movs	r2, #2
 80138b2:	68f8      	ldr	r0, [r7, #12]
 80138b4:	f7ff fefa 	bl	80136ac <SCSI_SenseCode>

      return -1;
 80138b8:	f04f 33ff 	mov.w	r3, #4294967295
 80138bc:	e078      	b.n	80139b0 <SCSI_Read10+0x15c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80138be:	68fb      	ldr	r3, [r7, #12]
 80138c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80138c4:	689b      	ldr	r3, [r3, #8]
 80138c6:	7afa      	ldrb	r2, [r7, #11]
 80138c8:	4610      	mov	r0, r2
 80138ca:	4798      	blx	r3
 80138cc:	4603      	mov	r3, r0
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d008      	beq.n	80138e4 <SCSI_Read10+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80138d2:	7af9      	ldrb	r1, [r7, #11]
 80138d4:	233a      	movs	r3, #58	; 0x3a
 80138d6:	2202      	movs	r2, #2
 80138d8:	68f8      	ldr	r0, [r7, #12]
 80138da:	f7ff fee7 	bl	80136ac <SCSI_SenseCode>
      return -1;
 80138de:	f04f 33ff 	mov.w	r3, #4294967295
 80138e2:	e065      	b.n	80139b0 <SCSI_Read10+0x15c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	3302      	adds	r3, #2
 80138e8:	781b      	ldrb	r3, [r3, #0]
 80138ea:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	3303      	adds	r3, #3
 80138f0:	781b      	ldrb	r3, [r3, #0]
 80138f2:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80138f4:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	3304      	adds	r3, #4
 80138fa:	781b      	ldrb	r3, [r3, #0]
 80138fc:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80138fe:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8013900:	687a      	ldr	r2, [r7, #4]
 8013902:	3205      	adds	r2, #5
 8013904:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8013906:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013908:	6979      	ldr	r1, [r7, #20]
 801390a:	f248 036c 	movw	r3, #32876	; 0x806c
 801390e:	440b      	add	r3, r1
 8013910:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	3307      	adds	r3, #7
 8013916:	781b      	ldrb	r3, [r3, #0]
 8013918:	021b      	lsls	r3, r3, #8
 801391a:	687a      	ldr	r2, [r7, #4]
 801391c:	3208      	adds	r2, #8
 801391e:	7812      	ldrb	r2, [r2, #0]
 8013920:	431a      	orrs	r2, r3
 8013922:	6979      	ldr	r1, [r7, #20]
 8013924:	f248 0370 	movw	r3, #32880	; 0x8070
 8013928:	440b      	add	r3, r1
 801392a:	601a      	str	r2, [r3, #0]

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 801392c:	697a      	ldr	r2, [r7, #20]
 801392e:	f248 036c 	movw	r3, #32876	; 0x806c
 8013932:	4413      	add	r3, r2
 8013934:	6818      	ldr	r0, [r3, #0]
 8013936:	697a      	ldr	r2, [r7, #20]
 8013938:	f248 0370 	movw	r3, #32880	; 0x8070
 801393c:	4413      	add	r3, r2
 801393e:	681b      	ldr	r3, [r3, #0]
 8013940:	7af9      	ldrb	r1, [r7, #11]
 8013942:	4602      	mov	r2, r0
 8013944:	68f8      	ldr	r0, [r7, #12]
 8013946:	f000 faeb 	bl	8013f20 <SCSI_CheckAddressRange>
 801394a:	4603      	mov	r3, r0
 801394c:	2b00      	cmp	r3, #0
 801394e:	da02      	bge.n	8013956 <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8013950:	f04f 33ff 	mov.w	r3, #4294967295
 8013954:	e02c      	b.n	80139b0 <SCSI_Read10+0x15c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8013956:	697a      	ldr	r2, [r7, #20]
 8013958:	f248 0318 	movw	r3, #32792	; 0x8018
 801395c:	4413      	add	r3, r2
 801395e:	681a      	ldr	r2, [r3, #0]
 8013960:	6979      	ldr	r1, [r7, #20]
 8013962:	f248 0370 	movw	r3, #32880	; 0x8070
 8013966:	440b      	add	r3, r1
 8013968:	6819      	ldr	r1, [r3, #0]
 801396a:	6978      	ldr	r0, [r7, #20]
 801396c:	f248 0364 	movw	r3, #32868	; 0x8064
 8013970:	4403      	add	r3, r0
 8013972:	881b      	ldrh	r3, [r3, #0]
 8013974:	fb03 f301 	mul.w	r3, r3, r1
 8013978:	429a      	cmp	r2, r3
 801397a:	d00c      	beq.n	8013996 <SCSI_Read10+0x142>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801397c:	697a      	ldr	r2, [r7, #20]
 801397e:	f248 031d 	movw	r3, #32797	; 0x801d
 8013982:	4413      	add	r3, r2
 8013984:	7819      	ldrb	r1, [r3, #0]
 8013986:	2320      	movs	r3, #32
 8013988:	2205      	movs	r2, #5
 801398a:	68f8      	ldr	r0, [r7, #12]
 801398c:	f7ff fe8e 	bl	80136ac <SCSI_SenseCode>
      return -1;
 8013990:	f04f 33ff 	mov.w	r3, #4294967295
 8013994:	e00c      	b.n	80139b0 <SCSI_Read10+0x15c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8013996:	697b      	ldr	r3, [r7, #20]
 8013998:	2202      	movs	r2, #2
 801399a:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 801399c:	697b      	ldr	r3, [r7, #20]
 801399e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80139a2:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80139a4:	7afb      	ldrb	r3, [r7, #11]
 80139a6:	4619      	mov	r1, r3
 80139a8:	68f8      	ldr	r0, [r7, #12]
 80139aa:	f000 fadd 	bl	8013f68 <SCSI_ProcessRead>
 80139ae:	4603      	mov	r3, r0
}
 80139b0:	4618      	mov	r0, r3
 80139b2:	3718      	adds	r7, #24
 80139b4:	46bd      	mov	sp, r7
 80139b6:	bd80      	pop	{r7, pc}

080139b8 <SCSI_Read12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80139b8:	b580      	push	{r7, lr}
 80139ba:	b086      	sub	sp, #24
 80139bc:	af00      	add	r7, sp, #0
 80139be:	60f8      	str	r0, [r7, #12]
 80139c0:	460b      	mov	r3, r1
 80139c2:	607a      	str	r2, [r7, #4]
 80139c4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80139c6:	68fb      	ldr	r3, [r7, #12]
 80139c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80139cc:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80139ce:	697b      	ldr	r3, [r7, #20]
 80139d0:	7a1b      	ldrb	r3, [r3, #8]
 80139d2:	2b00      	cmp	r3, #0
 80139d4:	f040 809e 	bne.w	8013b14 <SCSI_Read12+0x15c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80139d8:	697a      	ldr	r2, [r7, #20]
 80139da:	f248 031c 	movw	r3, #32796	; 0x801c
 80139de:	4413      	add	r3, r2
 80139e0:	781b      	ldrb	r3, [r3, #0]
 80139e2:	b25b      	sxtb	r3, r3
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	db0c      	blt.n	8013a02 <SCSI_Read12+0x4a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80139e8:	697a      	ldr	r2, [r7, #20]
 80139ea:	f248 031d 	movw	r3, #32797	; 0x801d
 80139ee:	4413      	add	r3, r2
 80139f0:	7819      	ldrb	r1, [r3, #0]
 80139f2:	2320      	movs	r3, #32
 80139f4:	2205      	movs	r2, #5
 80139f6:	68f8      	ldr	r0, [r7, #12]
 80139f8:	f7ff fe58 	bl	80136ac <SCSI_SenseCode>
      return -1;
 80139fc:	f04f 33ff 	mov.w	r3, #4294967295
 8013a00:	e092      	b.n	8013b28 <SCSI_Read12+0x170>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8013a02:	697a      	ldr	r2, [r7, #20]
 8013a04:	f248 0362 	movw	r3, #32866	; 0x8062
 8013a08:	4413      	add	r3, r2
 8013a0a:	781b      	ldrb	r3, [r3, #0]
 8013a0c:	2b02      	cmp	r3, #2
 8013a0e:	d108      	bne.n	8013a22 <SCSI_Read12+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8013a10:	7af9      	ldrb	r1, [r7, #11]
 8013a12:	233a      	movs	r3, #58	; 0x3a
 8013a14:	2202      	movs	r2, #2
 8013a16:	68f8      	ldr	r0, [r7, #12]
 8013a18:	f7ff fe48 	bl	80136ac <SCSI_SenseCode>
      return -1;
 8013a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8013a20:	e082      	b.n	8013b28 <SCSI_Read12+0x170>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8013a22:	68fb      	ldr	r3, [r7, #12]
 8013a24:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013a28:	689b      	ldr	r3, [r3, #8]
 8013a2a:	7afa      	ldrb	r2, [r7, #11]
 8013a2c:	4610      	mov	r0, r2
 8013a2e:	4798      	blx	r3
 8013a30:	4603      	mov	r3, r0
 8013a32:	2b00      	cmp	r3, #0
 8013a34:	d008      	beq.n	8013a48 <SCSI_Read12+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8013a36:	7af9      	ldrb	r1, [r7, #11]
 8013a38:	233a      	movs	r3, #58	; 0x3a
 8013a3a:	2202      	movs	r2, #2
 8013a3c:	68f8      	ldr	r0, [r7, #12]
 8013a3e:	f7ff fe35 	bl	80136ac <SCSI_SenseCode>
      return -1;
 8013a42:	f04f 33ff 	mov.w	r3, #4294967295
 8013a46:	e06f      	b.n	8013b28 <SCSI_Read12+0x170>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	3302      	adds	r3, #2
 8013a4c:	781b      	ldrb	r3, [r3, #0]
 8013a4e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	3303      	adds	r3, #3
 8013a54:	781b      	ldrb	r3, [r3, #0]
 8013a56:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013a58:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	3304      	adds	r3, #4
 8013a5e:	781b      	ldrb	r3, [r3, #0]
 8013a60:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8013a62:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8013a64:	687a      	ldr	r2, [r7, #4]
 8013a66:	3205      	adds	r2, #5
 8013a68:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8013a6a:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013a6c:	6979      	ldr	r1, [r7, #20]
 8013a6e:	f248 036c 	movw	r3, #32876	; 0x806c
 8013a72:	440b      	add	r3, r1
 8013a74:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	3306      	adds	r3, #6
 8013a7a:	781b      	ldrb	r3, [r3, #0]
 8013a7c:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	3307      	adds	r3, #7
 8013a82:	781b      	ldrb	r3, [r3, #0]
 8013a84:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8013a86:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	3308      	adds	r3, #8
 8013a8c:	781b      	ldrb	r3, [r3, #0]
 8013a8e:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8013a90:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8013a92:	687a      	ldr	r2, [r7, #4]
 8013a94:	3209      	adds	r2, #9
 8013a96:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8013a98:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8013a9a:	6979      	ldr	r1, [r7, #20]
 8013a9c:	f248 0370 	movw	r3, #32880	; 0x8070
 8013aa0:	440b      	add	r3, r1
 8013aa2:	601a      	str	r2, [r3, #0]

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8013aa4:	697a      	ldr	r2, [r7, #20]
 8013aa6:	f248 036c 	movw	r3, #32876	; 0x806c
 8013aaa:	4413      	add	r3, r2
 8013aac:	6818      	ldr	r0, [r3, #0]
 8013aae:	697a      	ldr	r2, [r7, #20]
 8013ab0:	f248 0370 	movw	r3, #32880	; 0x8070
 8013ab4:	4413      	add	r3, r2
 8013ab6:	681b      	ldr	r3, [r3, #0]
 8013ab8:	7af9      	ldrb	r1, [r7, #11]
 8013aba:	4602      	mov	r2, r0
 8013abc:	68f8      	ldr	r0, [r7, #12]
 8013abe:	f000 fa2f 	bl	8013f20 <SCSI_CheckAddressRange>
 8013ac2:	4603      	mov	r3, r0
 8013ac4:	2b00      	cmp	r3, #0
 8013ac6:	da02      	bge.n	8013ace <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8013ac8:	f04f 33ff 	mov.w	r3, #4294967295
 8013acc:	e02c      	b.n	8013b28 <SCSI_Read12+0x170>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8013ace:	697a      	ldr	r2, [r7, #20]
 8013ad0:	f248 0318 	movw	r3, #32792	; 0x8018
 8013ad4:	4413      	add	r3, r2
 8013ad6:	681a      	ldr	r2, [r3, #0]
 8013ad8:	6979      	ldr	r1, [r7, #20]
 8013ada:	f248 0370 	movw	r3, #32880	; 0x8070
 8013ade:	440b      	add	r3, r1
 8013ae0:	6819      	ldr	r1, [r3, #0]
 8013ae2:	6978      	ldr	r0, [r7, #20]
 8013ae4:	f248 0364 	movw	r3, #32868	; 0x8064
 8013ae8:	4403      	add	r3, r0
 8013aea:	881b      	ldrh	r3, [r3, #0]
 8013aec:	fb03 f301 	mul.w	r3, r3, r1
 8013af0:	429a      	cmp	r2, r3
 8013af2:	d00c      	beq.n	8013b0e <SCSI_Read12+0x156>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013af4:	697a      	ldr	r2, [r7, #20]
 8013af6:	f248 031d 	movw	r3, #32797	; 0x801d
 8013afa:	4413      	add	r3, r2
 8013afc:	7819      	ldrb	r1, [r3, #0]
 8013afe:	2320      	movs	r3, #32
 8013b00:	2205      	movs	r2, #5
 8013b02:	68f8      	ldr	r0, [r7, #12]
 8013b04:	f7ff fdd2 	bl	80136ac <SCSI_SenseCode>
      return -1;
 8013b08:	f04f 33ff 	mov.w	r3, #4294967295
 8013b0c:	e00c      	b.n	8013b28 <SCSI_Read12+0x170>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8013b0e:	697b      	ldr	r3, [r7, #20]
 8013b10:	2202      	movs	r2, #2
 8013b12:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8013b14:	697b      	ldr	r3, [r7, #20]
 8013b16:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8013b1a:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8013b1c:	7afb      	ldrb	r3, [r7, #11]
 8013b1e:	4619      	mov	r1, r3
 8013b20:	68f8      	ldr	r0, [r7, #12]
 8013b22:	f000 fa21 	bl	8013f68 <SCSI_ProcessRead>
 8013b26:	4603      	mov	r3, r0
}
 8013b28:	4618      	mov	r0, r3
 8013b2a:	3718      	adds	r7, #24
 8013b2c:	46bd      	mov	sp, r7
 8013b2e:	bd80      	pop	{r7, pc}

08013b30 <SCSI_Write10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8013b30:	b580      	push	{r7, lr}
 8013b32:	b086      	sub	sp, #24
 8013b34:	af00      	add	r7, sp, #0
 8013b36:	60f8      	str	r0, [r7, #12]
 8013b38:	460b      	mov	r3, r1
 8013b3a:	607a      	str	r2, [r7, #4]
 8013b3c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013b3e:	68fb      	ldr	r3, [r7, #12]
 8013b40:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013b44:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8013b46:	697b      	ldr	r3, [r7, #20]
 8013b48:	7a1b      	ldrb	r3, [r3, #8]
 8013b4a:	2b00      	cmp	r3, #0
 8013b4c:	f040 80be 	bne.w	8013ccc <SCSI_Write10+0x19c>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8013b50:	697a      	ldr	r2, [r7, #20]
 8013b52:	f248 0318 	movw	r3, #32792	; 0x8018
 8013b56:	4413      	add	r3, r2
 8013b58:	681b      	ldr	r3, [r3, #0]
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	d10c      	bne.n	8013b78 <SCSI_Write10+0x48>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013b5e:	697a      	ldr	r2, [r7, #20]
 8013b60:	f248 031d 	movw	r3, #32797	; 0x801d
 8013b64:	4413      	add	r3, r2
 8013b66:	7819      	ldrb	r1, [r3, #0]
 8013b68:	2320      	movs	r3, #32
 8013b6a:	2205      	movs	r2, #5
 8013b6c:	68f8      	ldr	r0, [r7, #12]
 8013b6e:	f7ff fd9d 	bl	80136ac <SCSI_SenseCode>
      return -1;
 8013b72:	f04f 33ff 	mov.w	r3, #4294967295
 8013b76:	e0af      	b.n	8013cd8 <SCSI_Write10+0x1a8>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8013b78:	697a      	ldr	r2, [r7, #20]
 8013b7a:	f248 031c 	movw	r3, #32796	; 0x801c
 8013b7e:	4413      	add	r3, r2
 8013b80:	781b      	ldrb	r3, [r3, #0]
 8013b82:	b25b      	sxtb	r3, r3
 8013b84:	2b00      	cmp	r3, #0
 8013b86:	da0c      	bge.n	8013ba2 <SCSI_Write10+0x72>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013b88:	697a      	ldr	r2, [r7, #20]
 8013b8a:	f248 031d 	movw	r3, #32797	; 0x801d
 8013b8e:	4413      	add	r3, r2
 8013b90:	7819      	ldrb	r1, [r3, #0]
 8013b92:	2320      	movs	r3, #32
 8013b94:	2205      	movs	r2, #5
 8013b96:	68f8      	ldr	r0, [r7, #12]
 8013b98:	f7ff fd88 	bl	80136ac <SCSI_SenseCode>
      return -1;
 8013b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8013ba0:	e09a      	b.n	8013cd8 <SCSI_Write10+0x1a8>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8013ba2:	68fb      	ldr	r3, [r7, #12]
 8013ba4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013ba8:	689b      	ldr	r3, [r3, #8]
 8013baa:	7afa      	ldrb	r2, [r7, #11]
 8013bac:	4610      	mov	r0, r2
 8013bae:	4798      	blx	r3
 8013bb0:	4603      	mov	r3, r0
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	d008      	beq.n	8013bc8 <SCSI_Write10+0x98>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8013bb6:	7af9      	ldrb	r1, [r7, #11]
 8013bb8:	233a      	movs	r3, #58	; 0x3a
 8013bba:	2202      	movs	r2, #2
 8013bbc:	68f8      	ldr	r0, [r7, #12]
 8013bbe:	f7ff fd75 	bl	80136ac <SCSI_SenseCode>
      return -1;
 8013bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8013bc6:	e087      	b.n	8013cd8 <SCSI_Write10+0x1a8>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8013bc8:	68fb      	ldr	r3, [r7, #12]
 8013bca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013bce:	68db      	ldr	r3, [r3, #12]
 8013bd0:	7afa      	ldrb	r2, [r7, #11]
 8013bd2:	4610      	mov	r0, r2
 8013bd4:	4798      	blx	r3
 8013bd6:	4603      	mov	r3, r0
 8013bd8:	2b00      	cmp	r3, #0
 8013bda:	d008      	beq.n	8013bee <SCSI_Write10+0xbe>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8013bdc:	7af9      	ldrb	r1, [r7, #11]
 8013bde:	2327      	movs	r3, #39	; 0x27
 8013be0:	2202      	movs	r2, #2
 8013be2:	68f8      	ldr	r0, [r7, #12]
 8013be4:	f7ff fd62 	bl	80136ac <SCSI_SenseCode>
      return -1;
 8013be8:	f04f 33ff 	mov.w	r3, #4294967295
 8013bec:	e074      	b.n	8013cd8 <SCSI_Write10+0x1a8>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	3302      	adds	r3, #2
 8013bf2:	781b      	ldrb	r3, [r3, #0]
 8013bf4:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	3303      	adds	r3, #3
 8013bfa:	781b      	ldrb	r3, [r3, #0]
 8013bfc:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013bfe:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	3304      	adds	r3, #4
 8013c04:	781b      	ldrb	r3, [r3, #0]
 8013c06:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8013c08:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8013c0a:	687a      	ldr	r2, [r7, #4]
 8013c0c:	3205      	adds	r2, #5
 8013c0e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8013c10:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013c12:	6979      	ldr	r1, [r7, #20]
 8013c14:	f248 036c 	movw	r3, #32876	; 0x806c
 8013c18:	440b      	add	r3, r1
 8013c1a:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	3307      	adds	r3, #7
 8013c20:	781b      	ldrb	r3, [r3, #0]
 8013c22:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8013c24:	687a      	ldr	r2, [r7, #4]
 8013c26:	3208      	adds	r2, #8
 8013c28:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8013c2a:	431a      	orrs	r2, r3
 8013c2c:	6979      	ldr	r1, [r7, #20]
 8013c2e:	f248 0370 	movw	r3, #32880	; 0x8070
 8013c32:	440b      	add	r3, r1
 8013c34:	601a      	str	r2, [r3, #0]

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8013c36:	697a      	ldr	r2, [r7, #20]
 8013c38:	f248 036c 	movw	r3, #32876	; 0x806c
 8013c3c:	4413      	add	r3, r2
 8013c3e:	6818      	ldr	r0, [r3, #0]
 8013c40:	697a      	ldr	r2, [r7, #20]
 8013c42:	f248 0370 	movw	r3, #32880	; 0x8070
 8013c46:	4413      	add	r3, r2
 8013c48:	681b      	ldr	r3, [r3, #0]
 8013c4a:	7af9      	ldrb	r1, [r7, #11]
 8013c4c:	4602      	mov	r2, r0
 8013c4e:	68f8      	ldr	r0, [r7, #12]
 8013c50:	f000 f966 	bl	8013f20 <SCSI_CheckAddressRange>
 8013c54:	4603      	mov	r3, r0
 8013c56:	2b00      	cmp	r3, #0
 8013c58:	da02      	bge.n	8013c60 <SCSI_Write10+0x130>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8013c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8013c5e:	e03b      	b.n	8013cd8 <SCSI_Write10+0x1a8>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8013c60:	697a      	ldr	r2, [r7, #20]
 8013c62:	f248 0370 	movw	r3, #32880	; 0x8070
 8013c66:	4413      	add	r3, r2
 8013c68:	681a      	ldr	r2, [r3, #0]
 8013c6a:	6979      	ldr	r1, [r7, #20]
 8013c6c:	f248 0364 	movw	r3, #32868	; 0x8064
 8013c70:	440b      	add	r3, r1
 8013c72:	881b      	ldrh	r3, [r3, #0]
 8013c74:	fb03 f302 	mul.w	r3, r3, r2
 8013c78:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8013c7a:	697a      	ldr	r2, [r7, #20]
 8013c7c:	f248 0318 	movw	r3, #32792	; 0x8018
 8013c80:	4413      	add	r3, r2
 8013c82:	681b      	ldr	r3, [r3, #0]
 8013c84:	693a      	ldr	r2, [r7, #16]
 8013c86:	429a      	cmp	r2, r3
 8013c88:	d00c      	beq.n	8013ca4 <SCSI_Write10+0x174>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013c8a:	697a      	ldr	r2, [r7, #20]
 8013c8c:	f248 031d 	movw	r3, #32797	; 0x801d
 8013c90:	4413      	add	r3, r2
 8013c92:	7819      	ldrb	r1, [r3, #0]
 8013c94:	2320      	movs	r3, #32
 8013c96:	2205      	movs	r2, #5
 8013c98:	68f8      	ldr	r0, [r7, #12]
 8013c9a:	f7ff fd07 	bl	80136ac <SCSI_SenseCode>
      return -1;
 8013c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8013ca2:	e019      	b.n	8013cd8 <SCSI_Write10+0x1a8>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8013ca4:	693b      	ldr	r3, [r7, #16]
 8013ca6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013caa:	bf28      	it	cs
 8013cac:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8013cb0:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8013cb2:	697b      	ldr	r3, [r7, #20]
 8013cb4:	2201      	movs	r2, #1
 8013cb6:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8013cb8:	697b      	ldr	r3, [r7, #20]
 8013cba:	f103 0210 	add.w	r2, r3, #16
 8013cbe:	693b      	ldr	r3, [r7, #16]
 8013cc0:	2101      	movs	r1, #1
 8013cc2:	68f8      	ldr	r0, [r7, #12]
 8013cc4:	f004 fb19 	bl	80182fa <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8013cc8:	2300      	movs	r3, #0
 8013cca:	e005      	b.n	8013cd8 <SCSI_Write10+0x1a8>
    return SCSI_ProcessWrite(pdev, lun);
 8013ccc:	7afb      	ldrb	r3, [r7, #11]
 8013cce:	4619      	mov	r1, r3
 8013cd0:	68f8      	ldr	r0, [r7, #12]
 8013cd2:	f000 f9d7 	bl	8014084 <SCSI_ProcessWrite>
 8013cd6:	4603      	mov	r3, r0
}
 8013cd8:	4618      	mov	r0, r3
 8013cda:	3718      	adds	r7, #24
 8013cdc:	46bd      	mov	sp, r7
 8013cde:	bd80      	pop	{r7, pc}

08013ce0 <SCSI_Write12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8013ce0:	b580      	push	{r7, lr}
 8013ce2:	b086      	sub	sp, #24
 8013ce4:	af00      	add	r7, sp, #0
 8013ce6:	60f8      	str	r0, [r7, #12]
 8013ce8:	460b      	mov	r3, r1
 8013cea:	607a      	str	r2, [r7, #4]
 8013cec:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013cee:	68fb      	ldr	r3, [r7, #12]
 8013cf0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013cf4:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8013cf6:	697b      	ldr	r3, [r7, #20]
 8013cf8:	7a1b      	ldrb	r3, [r3, #8]
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	f040 80ce 	bne.w	8013e9c <SCSI_Write12+0x1bc>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8013d00:	697a      	ldr	r2, [r7, #20]
 8013d02:	f248 0318 	movw	r3, #32792	; 0x8018
 8013d06:	4413      	add	r3, r2
 8013d08:	681b      	ldr	r3, [r3, #0]
 8013d0a:	2b00      	cmp	r3, #0
 8013d0c:	d10c      	bne.n	8013d28 <SCSI_Write12+0x48>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013d0e:	697a      	ldr	r2, [r7, #20]
 8013d10:	f248 031d 	movw	r3, #32797	; 0x801d
 8013d14:	4413      	add	r3, r2
 8013d16:	7819      	ldrb	r1, [r3, #0]
 8013d18:	2320      	movs	r3, #32
 8013d1a:	2205      	movs	r2, #5
 8013d1c:	68f8      	ldr	r0, [r7, #12]
 8013d1e:	f7ff fcc5 	bl	80136ac <SCSI_SenseCode>
      return -1;
 8013d22:	f04f 33ff 	mov.w	r3, #4294967295
 8013d26:	e0bf      	b.n	8013ea8 <SCSI_Write12+0x1c8>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8013d28:	697a      	ldr	r2, [r7, #20]
 8013d2a:	f248 031c 	movw	r3, #32796	; 0x801c
 8013d2e:	4413      	add	r3, r2
 8013d30:	781b      	ldrb	r3, [r3, #0]
 8013d32:	b25b      	sxtb	r3, r3
 8013d34:	2b00      	cmp	r3, #0
 8013d36:	da0c      	bge.n	8013d52 <SCSI_Write12+0x72>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013d38:	697a      	ldr	r2, [r7, #20]
 8013d3a:	f248 031d 	movw	r3, #32797	; 0x801d
 8013d3e:	4413      	add	r3, r2
 8013d40:	7819      	ldrb	r1, [r3, #0]
 8013d42:	2320      	movs	r3, #32
 8013d44:	2205      	movs	r2, #5
 8013d46:	68f8      	ldr	r0, [r7, #12]
 8013d48:	f7ff fcb0 	bl	80136ac <SCSI_SenseCode>
      return -1;
 8013d4c:	f04f 33ff 	mov.w	r3, #4294967295
 8013d50:	e0aa      	b.n	8013ea8 <SCSI_Write12+0x1c8>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8013d52:	68fb      	ldr	r3, [r7, #12]
 8013d54:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013d58:	689b      	ldr	r3, [r3, #8]
 8013d5a:	7afa      	ldrb	r2, [r7, #11]
 8013d5c:	4610      	mov	r0, r2
 8013d5e:	4798      	blx	r3
 8013d60:	4603      	mov	r3, r0
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d00b      	beq.n	8013d7e <SCSI_Write12+0x9e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8013d66:	7af9      	ldrb	r1, [r7, #11]
 8013d68:	233a      	movs	r3, #58	; 0x3a
 8013d6a:	2202      	movs	r2, #2
 8013d6c:	68f8      	ldr	r0, [r7, #12]
 8013d6e:	f7ff fc9d 	bl	80136ac <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8013d72:	697b      	ldr	r3, [r7, #20]
 8013d74:	2205      	movs	r2, #5
 8013d76:	721a      	strb	r2, [r3, #8]
      return -1;
 8013d78:	f04f 33ff 	mov.w	r3, #4294967295
 8013d7c:	e094      	b.n	8013ea8 <SCSI_Write12+0x1c8>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8013d7e:	68fb      	ldr	r3, [r7, #12]
 8013d80:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013d84:	68db      	ldr	r3, [r3, #12]
 8013d86:	7afa      	ldrb	r2, [r7, #11]
 8013d88:	4610      	mov	r0, r2
 8013d8a:	4798      	blx	r3
 8013d8c:	4603      	mov	r3, r0
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	d00b      	beq.n	8013daa <SCSI_Write12+0xca>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8013d92:	7af9      	ldrb	r1, [r7, #11]
 8013d94:	2327      	movs	r3, #39	; 0x27
 8013d96:	2202      	movs	r2, #2
 8013d98:	68f8      	ldr	r0, [r7, #12]
 8013d9a:	f7ff fc87 	bl	80136ac <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8013d9e:	697b      	ldr	r3, [r7, #20]
 8013da0:	2205      	movs	r2, #5
 8013da2:	721a      	strb	r2, [r3, #8]
      return -1;
 8013da4:	f04f 33ff 	mov.w	r3, #4294967295
 8013da8:	e07e      	b.n	8013ea8 <SCSI_Write12+0x1c8>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	3302      	adds	r3, #2
 8013dae:	781b      	ldrb	r3, [r3, #0]
 8013db0:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	3303      	adds	r3, #3
 8013db6:	781b      	ldrb	r3, [r3, #0]
 8013db8:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013dba:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	3304      	adds	r3, #4
 8013dc0:	781b      	ldrb	r3, [r3, #0]
 8013dc2:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8013dc4:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8013dc6:	687a      	ldr	r2, [r7, #4]
 8013dc8:	3205      	adds	r2, #5
 8013dca:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8013dcc:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013dce:	6979      	ldr	r1, [r7, #20]
 8013dd0:	f248 036c 	movw	r3, #32876	; 0x806c
 8013dd4:	440b      	add	r3, r1
 8013dd6:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	3306      	adds	r3, #6
 8013ddc:	781b      	ldrb	r3, [r3, #0]
 8013dde:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	3307      	adds	r3, #7
 8013de4:	781b      	ldrb	r3, [r3, #0]
 8013de6:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8013de8:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	3308      	adds	r3, #8
 8013dee:	781b      	ldrb	r3, [r3, #0]
 8013df0:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8013df2:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8013df4:	687a      	ldr	r2, [r7, #4]
 8013df6:	3209      	adds	r2, #9
 8013df8:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8013dfa:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8013dfc:	6979      	ldr	r1, [r7, #20]
 8013dfe:	f248 0370 	movw	r3, #32880	; 0x8070
 8013e02:	440b      	add	r3, r1
 8013e04:	601a      	str	r2, [r3, #0]

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8013e06:	697a      	ldr	r2, [r7, #20]
 8013e08:	f248 036c 	movw	r3, #32876	; 0x806c
 8013e0c:	4413      	add	r3, r2
 8013e0e:	6818      	ldr	r0, [r3, #0]
 8013e10:	697a      	ldr	r2, [r7, #20]
 8013e12:	f248 0370 	movw	r3, #32880	; 0x8070
 8013e16:	4413      	add	r3, r2
 8013e18:	681b      	ldr	r3, [r3, #0]
 8013e1a:	7af9      	ldrb	r1, [r7, #11]
 8013e1c:	4602      	mov	r2, r0
 8013e1e:	68f8      	ldr	r0, [r7, #12]
 8013e20:	f000 f87e 	bl	8013f20 <SCSI_CheckAddressRange>
 8013e24:	4603      	mov	r3, r0
 8013e26:	2b00      	cmp	r3, #0
 8013e28:	da02      	bge.n	8013e30 <SCSI_Write12+0x150>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8013e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8013e2e:	e03b      	b.n	8013ea8 <SCSI_Write12+0x1c8>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8013e30:	697a      	ldr	r2, [r7, #20]
 8013e32:	f248 0370 	movw	r3, #32880	; 0x8070
 8013e36:	4413      	add	r3, r2
 8013e38:	681a      	ldr	r2, [r3, #0]
 8013e3a:	6979      	ldr	r1, [r7, #20]
 8013e3c:	f248 0364 	movw	r3, #32868	; 0x8064
 8013e40:	440b      	add	r3, r1
 8013e42:	881b      	ldrh	r3, [r3, #0]
 8013e44:	fb03 f302 	mul.w	r3, r3, r2
 8013e48:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8013e4a:	697a      	ldr	r2, [r7, #20]
 8013e4c:	f248 0318 	movw	r3, #32792	; 0x8018
 8013e50:	4413      	add	r3, r2
 8013e52:	681b      	ldr	r3, [r3, #0]
 8013e54:	693a      	ldr	r2, [r7, #16]
 8013e56:	429a      	cmp	r2, r3
 8013e58:	d00c      	beq.n	8013e74 <SCSI_Write12+0x194>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013e5a:	697a      	ldr	r2, [r7, #20]
 8013e5c:	f248 031d 	movw	r3, #32797	; 0x801d
 8013e60:	4413      	add	r3, r2
 8013e62:	7819      	ldrb	r1, [r3, #0]
 8013e64:	2320      	movs	r3, #32
 8013e66:	2205      	movs	r2, #5
 8013e68:	68f8      	ldr	r0, [r7, #12]
 8013e6a:	f7ff fc1f 	bl	80136ac <SCSI_SenseCode>
      return -1;
 8013e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8013e72:	e019      	b.n	8013ea8 <SCSI_Write12+0x1c8>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8013e74:	693b      	ldr	r3, [r7, #16]
 8013e76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013e7a:	bf28      	it	cs
 8013e7c:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8013e80:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8013e82:	697b      	ldr	r3, [r7, #20]
 8013e84:	2201      	movs	r2, #1
 8013e86:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8013e88:	697b      	ldr	r3, [r7, #20]
 8013e8a:	f103 0210 	add.w	r2, r3, #16
 8013e8e:	693b      	ldr	r3, [r7, #16]
 8013e90:	2101      	movs	r1, #1
 8013e92:	68f8      	ldr	r0, [r7, #12]
 8013e94:	f004 fa31 	bl	80182fa <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8013e98:	2300      	movs	r3, #0
 8013e9a:	e005      	b.n	8013ea8 <SCSI_Write12+0x1c8>
    return SCSI_ProcessWrite(pdev, lun);
 8013e9c:	7afb      	ldrb	r3, [r7, #11]
 8013e9e:	4619      	mov	r1, r3
 8013ea0:	68f8      	ldr	r0, [r7, #12]
 8013ea2:	f000 f8ef 	bl	8014084 <SCSI_ProcessWrite>
 8013ea6:	4603      	mov	r3, r0
}
 8013ea8:	4618      	mov	r0, r3
 8013eaa:	3718      	adds	r7, #24
 8013eac:	46bd      	mov	sp, r7
 8013eae:	bd80      	pop	{r7, pc}

08013eb0 <SCSI_Verify10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8013eb0:	b580      	push	{r7, lr}
 8013eb2:	b086      	sub	sp, #24
 8013eb4:	af00      	add	r7, sp, #0
 8013eb6:	60f8      	str	r0, [r7, #12]
 8013eb8:	460b      	mov	r3, r1
 8013eba:	607a      	str	r2, [r7, #4]
 8013ebc:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013ebe:	68fb      	ldr	r3, [r7, #12]
 8013ec0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013ec4:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	3301      	adds	r3, #1
 8013eca:	781b      	ldrb	r3, [r3, #0]
 8013ecc:	f003 0302 	and.w	r3, r3, #2
 8013ed0:	2b00      	cmp	r3, #0
 8013ed2:	d008      	beq.n	8013ee6 <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8013ed4:	7af9      	ldrb	r1, [r7, #11]
 8013ed6:	2324      	movs	r3, #36	; 0x24
 8013ed8:	2205      	movs	r2, #5
 8013eda:	68f8      	ldr	r0, [r7, #12]
 8013edc:	f7ff fbe6 	bl	80136ac <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8013ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8013ee4:	e018      	b.n	8013f18 <SCSI_Verify10+0x68>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8013ee6:	697a      	ldr	r2, [r7, #20]
 8013ee8:	f248 036c 	movw	r3, #32876	; 0x806c
 8013eec:	4413      	add	r3, r2
 8013eee:	6818      	ldr	r0, [r3, #0]
 8013ef0:	697a      	ldr	r2, [r7, #20]
 8013ef2:	f248 0370 	movw	r3, #32880	; 0x8070
 8013ef6:	4413      	add	r3, r2
 8013ef8:	681b      	ldr	r3, [r3, #0]
 8013efa:	7af9      	ldrb	r1, [r7, #11]
 8013efc:	4602      	mov	r2, r0
 8013efe:	68f8      	ldr	r0, [r7, #12]
 8013f00:	f000 f80e 	bl	8013f20 <SCSI_CheckAddressRange>
 8013f04:	4603      	mov	r3, r0
 8013f06:	2b00      	cmp	r3, #0
 8013f08:	da02      	bge.n	8013f10 <SCSI_Verify10+0x60>
  {
    return -1; /* error */
 8013f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8013f0e:	e003      	b.n	8013f18 <SCSI_Verify10+0x68>
  }

  hmsc->bot_data_length = 0U;
 8013f10:	697b      	ldr	r3, [r7, #20]
 8013f12:	2200      	movs	r2, #0
 8013f14:	60da      	str	r2, [r3, #12]

  return 0;
 8013f16:	2300      	movs	r3, #0
}
 8013f18:	4618      	mov	r0, r3
 8013f1a:	3718      	adds	r7, #24
 8013f1c:	46bd      	mov	sp, r7
 8013f1e:	bd80      	pop	{r7, pc}

08013f20 <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8013f20:	b580      	push	{r7, lr}
 8013f22:	b086      	sub	sp, #24
 8013f24:	af00      	add	r7, sp, #0
 8013f26:	60f8      	str	r0, [r7, #12]
 8013f28:	607a      	str	r2, [r7, #4]
 8013f2a:	603b      	str	r3, [r7, #0]
 8013f2c:	460b      	mov	r3, r1
 8013f2e:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013f30:	68fb      	ldr	r3, [r7, #12]
 8013f32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013f36:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8013f38:	687a      	ldr	r2, [r7, #4]
 8013f3a:	683b      	ldr	r3, [r7, #0]
 8013f3c:	441a      	add	r2, r3
 8013f3e:	6979      	ldr	r1, [r7, #20]
 8013f40:	f248 0368 	movw	r3, #32872	; 0x8068
 8013f44:	440b      	add	r3, r1
 8013f46:	681b      	ldr	r3, [r3, #0]
 8013f48:	429a      	cmp	r2, r3
 8013f4a:	d908      	bls.n	8013f5e <SCSI_CheckAddressRange+0x3e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8013f4c:	7af9      	ldrb	r1, [r7, #11]
 8013f4e:	2321      	movs	r3, #33	; 0x21
 8013f50:	2205      	movs	r2, #5
 8013f52:	68f8      	ldr	r0, [r7, #12]
 8013f54:	f7ff fbaa 	bl	80136ac <SCSI_SenseCode>
    return -1;
 8013f58:	f04f 33ff 	mov.w	r3, #4294967295
 8013f5c:	e000      	b.n	8013f60 <SCSI_CheckAddressRange+0x40>
  }

  return 0;
 8013f5e:	2300      	movs	r3, #0
}
 8013f60:	4618      	mov	r0, r3
 8013f62:	3718      	adds	r7, #24
 8013f64:	46bd      	mov	sp, r7
 8013f66:	bd80      	pop	{r7, pc}

08013f68 <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8013f68:	b5b0      	push	{r4, r5, r7, lr}
 8013f6a:	b084      	sub	sp, #16
 8013f6c:	af00      	add	r7, sp, #0
 8013f6e:	6078      	str	r0, [r7, #4]
 8013f70:	460b      	mov	r3, r1
 8013f72:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013f7a:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8013f7c:	68fa      	ldr	r2, [r7, #12]
 8013f7e:	f248 0370 	movw	r3, #32880	; 0x8070
 8013f82:	4413      	add	r3, r2
 8013f84:	681a      	ldr	r2, [r3, #0]
 8013f86:	68f9      	ldr	r1, [r7, #12]
 8013f88:	f248 0364 	movw	r3, #32868	; 0x8064
 8013f8c:	440b      	add	r3, r1
 8013f8e:	881b      	ldrh	r3, [r3, #0]
 8013f90:	fb03 f302 	mul.w	r3, r3, r2
 8013f94:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 8013f96:	68bb      	ldr	r3, [r7, #8]
 8013f98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013f9c:	bf28      	it	cs
 8013f9e:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8013fa2:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013faa:	691c      	ldr	r4, [r3, #16]
 8013fac:	68fb      	ldr	r3, [r7, #12]
 8013fae:	f103 0110 	add.w	r1, r3, #16
 8013fb2:	68fa      	ldr	r2, [r7, #12]
 8013fb4:	f248 036c 	movw	r3, #32876	; 0x806c
 8013fb8:	4413      	add	r3, r2
 8013fba:	681d      	ldr	r5, [r3, #0]
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 8013fbc:	68fa      	ldr	r2, [r7, #12]
 8013fbe:	f248 0364 	movw	r3, #32868	; 0x8064
 8013fc2:	4413      	add	r3, r2
 8013fc4:	881b      	ldrh	r3, [r3, #0]
 8013fc6:	461a      	mov	r2, r3
 8013fc8:	68bb      	ldr	r3, [r7, #8]
 8013fca:	fbb3 f3f2 	udiv	r3, r3, r2
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8013fce:	b29b      	uxth	r3, r3
 8013fd0:	78f8      	ldrb	r0, [r7, #3]
 8013fd2:	462a      	mov	r2, r5
 8013fd4:	47a0      	blx	r4
 8013fd6:	4603      	mov	r3, r0
 8013fd8:	2b00      	cmp	r3, #0
 8013fda:	da08      	bge.n	8013fee <SCSI_ProcessRead+0x86>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8013fdc:	78f9      	ldrb	r1, [r7, #3]
 8013fde:	2311      	movs	r3, #17
 8013fe0:	2204      	movs	r2, #4
 8013fe2:	6878      	ldr	r0, [r7, #4]
 8013fe4:	f7ff fb62 	bl	80136ac <SCSI_SenseCode>
    return -1;
 8013fe8:	f04f 33ff 	mov.w	r3, #4294967295
 8013fec:	e046      	b.n	801407c <SCSI_ProcessRead+0x114>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 8013fee:	68fb      	ldr	r3, [r7, #12]
 8013ff0:	f103 0210 	add.w	r2, r3, #16
 8013ff4:	68bb      	ldr	r3, [r7, #8]
 8013ff6:	2181      	movs	r1, #129	; 0x81
 8013ff8:	6878      	ldr	r0, [r7, #4]
 8013ffa:	f004 f95d 	bl	80182b8 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8013ffe:	68fa      	ldr	r2, [r7, #12]
 8014000:	f248 036c 	movw	r3, #32876	; 0x806c
 8014004:	4413      	add	r3, r2
 8014006:	681a      	ldr	r2, [r3, #0]
 8014008:	68f9      	ldr	r1, [r7, #12]
 801400a:	f248 0364 	movw	r3, #32868	; 0x8064
 801400e:	440b      	add	r3, r1
 8014010:	881b      	ldrh	r3, [r3, #0]
 8014012:	4619      	mov	r1, r3
 8014014:	68bb      	ldr	r3, [r7, #8]
 8014016:	fbb3 f3f1 	udiv	r3, r3, r1
 801401a:	441a      	add	r2, r3
 801401c:	68f9      	ldr	r1, [r7, #12]
 801401e:	f248 036c 	movw	r3, #32876	; 0x806c
 8014022:	440b      	add	r3, r1
 8014024:	601a      	str	r2, [r3, #0]
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8014026:	68fa      	ldr	r2, [r7, #12]
 8014028:	f248 0370 	movw	r3, #32880	; 0x8070
 801402c:	4413      	add	r3, r2
 801402e:	681a      	ldr	r2, [r3, #0]
 8014030:	68f9      	ldr	r1, [r7, #12]
 8014032:	f248 0364 	movw	r3, #32868	; 0x8064
 8014036:	440b      	add	r3, r1
 8014038:	881b      	ldrh	r3, [r3, #0]
 801403a:	4619      	mov	r1, r3
 801403c:	68bb      	ldr	r3, [r7, #8]
 801403e:	fbb3 f3f1 	udiv	r3, r3, r1
 8014042:	1ad2      	subs	r2, r2, r3
 8014044:	68f9      	ldr	r1, [r7, #12]
 8014046:	f248 0370 	movw	r3, #32880	; 0x8070
 801404a:	440b      	add	r3, r1
 801404c:	601a      	str	r2, [r3, #0]

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 801404e:	68fa      	ldr	r2, [r7, #12]
 8014050:	f248 0338 	movw	r3, #32824	; 0x8038
 8014054:	4413      	add	r3, r2
 8014056:	681a      	ldr	r2, [r3, #0]
 8014058:	68bb      	ldr	r3, [r7, #8]
 801405a:	1ad2      	subs	r2, r2, r3
 801405c:	68f9      	ldr	r1, [r7, #12]
 801405e:	f248 0338 	movw	r3, #32824	; 0x8038
 8014062:	440b      	add	r3, r1
 8014064:	601a      	str	r2, [r3, #0]

  if (hmsc->scsi_blk_len == 0U)
 8014066:	68fa      	ldr	r2, [r7, #12]
 8014068:	f248 0370 	movw	r3, #32880	; 0x8070
 801406c:	4413      	add	r3, r2
 801406e:	681b      	ldr	r3, [r3, #0]
 8014070:	2b00      	cmp	r3, #0
 8014072:	d102      	bne.n	801407a <SCSI_ProcessRead+0x112>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8014074:	68fb      	ldr	r3, [r7, #12]
 8014076:	2203      	movs	r2, #3
 8014078:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 801407a:	2300      	movs	r3, #0
}
 801407c:	4618      	mov	r0, r3
 801407e:	3710      	adds	r7, #16
 8014080:	46bd      	mov	sp, r7
 8014082:	bdb0      	pop	{r4, r5, r7, pc}

08014084 <SCSI_ProcessWrite>:
*         Handle Write Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8014084:	b5b0      	push	{r4, r5, r7, lr}
 8014086:	b084      	sub	sp, #16
 8014088:	af00      	add	r7, sp, #0
 801408a:	6078      	str	r0, [r7, #4]
 801408c:	460b      	mov	r3, r1
 801408e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014096:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8014098:	68fa      	ldr	r2, [r7, #12]
 801409a:	f248 0370 	movw	r3, #32880	; 0x8070
 801409e:	4413      	add	r3, r2
 80140a0:	681a      	ldr	r2, [r3, #0]
 80140a2:	68f9      	ldr	r1, [r7, #12]
 80140a4:	f248 0364 	movw	r3, #32868	; 0x8064
 80140a8:	440b      	add	r3, r1
 80140aa:	881b      	ldrh	r3, [r3, #0]
 80140ac:	fb03 f302 	mul.w	r3, r3, r2
 80140b0:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 80140b2:	68bb      	ldr	r3, [r7, #8]
 80140b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80140b8:	bf28      	it	cs
 80140ba:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 80140be:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 80140c0:	687b      	ldr	r3, [r7, #4]
 80140c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80140c6:	695c      	ldr	r4, [r3, #20]
 80140c8:	68fb      	ldr	r3, [r7, #12]
 80140ca:	f103 0110 	add.w	r1, r3, #16
 80140ce:	68fa      	ldr	r2, [r7, #12]
 80140d0:	f248 036c 	movw	r3, #32876	; 0x806c
 80140d4:	4413      	add	r3, r2
 80140d6:	681d      	ldr	r5, [r3, #0]
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 80140d8:	68fa      	ldr	r2, [r7, #12]
 80140da:	f248 0364 	movw	r3, #32868	; 0x8064
 80140de:	4413      	add	r3, r2
 80140e0:	881b      	ldrh	r3, [r3, #0]
 80140e2:	461a      	mov	r2, r3
 80140e4:	68bb      	ldr	r3, [r7, #8]
 80140e6:	fbb3 f3f2 	udiv	r3, r3, r2
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 80140ea:	b29b      	uxth	r3, r3
 80140ec:	78f8      	ldrb	r0, [r7, #3]
 80140ee:	462a      	mov	r2, r5
 80140f0:	47a0      	blx	r4
 80140f2:	4603      	mov	r3, r0
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	da08      	bge.n	801410a <SCSI_ProcessWrite+0x86>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 80140f8:	78f9      	ldrb	r1, [r7, #3]
 80140fa:	2303      	movs	r3, #3
 80140fc:	2204      	movs	r2, #4
 80140fe:	6878      	ldr	r0, [r7, #4]
 8014100:	f7ff fad4 	bl	80136ac <SCSI_SenseCode>
    return -1;
 8014104:	f04f 33ff 	mov.w	r3, #4294967295
 8014108:	e05a      	b.n	80141c0 <SCSI_ProcessWrite+0x13c>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 801410a:	68fa      	ldr	r2, [r7, #12]
 801410c:	f248 036c 	movw	r3, #32876	; 0x806c
 8014110:	4413      	add	r3, r2
 8014112:	681a      	ldr	r2, [r3, #0]
 8014114:	68f9      	ldr	r1, [r7, #12]
 8014116:	f248 0364 	movw	r3, #32868	; 0x8064
 801411a:	440b      	add	r3, r1
 801411c:	881b      	ldrh	r3, [r3, #0]
 801411e:	4619      	mov	r1, r3
 8014120:	68bb      	ldr	r3, [r7, #8]
 8014122:	fbb3 f3f1 	udiv	r3, r3, r1
 8014126:	441a      	add	r2, r3
 8014128:	68f9      	ldr	r1, [r7, #12]
 801412a:	f248 036c 	movw	r3, #32876	; 0x806c
 801412e:	440b      	add	r3, r1
 8014130:	601a      	str	r2, [r3, #0]
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8014132:	68fa      	ldr	r2, [r7, #12]
 8014134:	f248 0370 	movw	r3, #32880	; 0x8070
 8014138:	4413      	add	r3, r2
 801413a:	681a      	ldr	r2, [r3, #0]
 801413c:	68f9      	ldr	r1, [r7, #12]
 801413e:	f248 0364 	movw	r3, #32868	; 0x8064
 8014142:	440b      	add	r3, r1
 8014144:	881b      	ldrh	r3, [r3, #0]
 8014146:	4619      	mov	r1, r3
 8014148:	68bb      	ldr	r3, [r7, #8]
 801414a:	fbb3 f3f1 	udiv	r3, r3, r1
 801414e:	1ad2      	subs	r2, r2, r3
 8014150:	68f9      	ldr	r1, [r7, #12]
 8014152:	f248 0370 	movw	r3, #32880	; 0x8070
 8014156:	440b      	add	r3, r1
 8014158:	601a      	str	r2, [r3, #0]

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 801415a:	68fa      	ldr	r2, [r7, #12]
 801415c:	f248 0338 	movw	r3, #32824	; 0x8038
 8014160:	4413      	add	r3, r2
 8014162:	681a      	ldr	r2, [r3, #0]
 8014164:	68bb      	ldr	r3, [r7, #8]
 8014166:	1ad2      	subs	r2, r2, r3
 8014168:	68f9      	ldr	r1, [r7, #12]
 801416a:	f248 0338 	movw	r3, #32824	; 0x8038
 801416e:	440b      	add	r3, r1
 8014170:	601a      	str	r2, [r3, #0]

  if (hmsc->scsi_blk_len == 0U)
 8014172:	68fa      	ldr	r2, [r7, #12]
 8014174:	f248 0370 	movw	r3, #32880	; 0x8070
 8014178:	4413      	add	r3, r2
 801417a:	681b      	ldr	r3, [r3, #0]
 801417c:	2b00      	cmp	r3, #0
 801417e:	d104      	bne.n	801418a <SCSI_ProcessWrite+0x106>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8014180:	2100      	movs	r1, #0
 8014182:	6878      	ldr	r0, [r7, #4]
 8014184:	f7fe fde2 	bl	8012d4c <MSC_BOT_SendCSW>
 8014188:	e019      	b.n	80141be <SCSI_ProcessWrite+0x13a>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 801418a:	68fa      	ldr	r2, [r7, #12]
 801418c:	f248 0370 	movw	r3, #32880	; 0x8070
 8014190:	4413      	add	r3, r2
 8014192:	681a      	ldr	r2, [r3, #0]
 8014194:	68f9      	ldr	r1, [r7, #12]
 8014196:	f248 0364 	movw	r3, #32868	; 0x8064
 801419a:	440b      	add	r3, r1
 801419c:	881b      	ldrh	r3, [r3, #0]
 801419e:	fb03 f302 	mul.w	r3, r3, r2
 80141a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80141a6:	bf28      	it	cs
 80141a8:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 80141ac:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 80141ae:	68fb      	ldr	r3, [r7, #12]
 80141b0:	f103 0210 	add.w	r2, r3, #16
 80141b4:	68bb      	ldr	r3, [r7, #8]
 80141b6:	2101      	movs	r1, #1
 80141b8:	6878      	ldr	r0, [r7, #4]
 80141ba:	f004 f89e 	bl	80182fa <USBD_LL_PrepareReceive>
  }

  return 0;
 80141be:	2300      	movs	r3, #0
}
 80141c0:	4618      	mov	r0, r3
 80141c2:	3710      	adds	r7, #16
 80141c4:	46bd      	mov	sp, r7
 80141c6:	bdb0      	pop	{r4, r5, r7, pc}

080141c8 <SCSI_UpdateBotData>:
* @param  length: Data length
* @retval status
*/
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 80141c8:	b480      	push	{r7}
 80141ca:	b087      	sub	sp, #28
 80141cc:	af00      	add	r7, sp, #0
 80141ce:	60f8      	str	r0, [r7, #12]
 80141d0:	60b9      	str	r1, [r7, #8]
 80141d2:	4613      	mov	r3, r2
 80141d4:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 80141d6:	88fb      	ldrh	r3, [r7, #6]
 80141d8:	82fb      	strh	r3, [r7, #22]

  hmsc->bot_data_length = len;
 80141da:	8afa      	ldrh	r2, [r7, #22]
 80141dc:	68fb      	ldr	r3, [r7, #12]
 80141de:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 80141e0:	e00b      	b.n	80141fa <SCSI_UpdateBotData+0x32>
  {
    len--;
 80141e2:	8afb      	ldrh	r3, [r7, #22]
 80141e4:	3b01      	subs	r3, #1
 80141e6:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 80141e8:	8afb      	ldrh	r3, [r7, #22]
 80141ea:	68ba      	ldr	r2, [r7, #8]
 80141ec:	441a      	add	r2, r3
 80141ee:	8afb      	ldrh	r3, [r7, #22]
 80141f0:	7811      	ldrb	r1, [r2, #0]
 80141f2:	68fa      	ldr	r2, [r7, #12]
 80141f4:	4413      	add	r3, r2
 80141f6:	460a      	mov	r2, r1
 80141f8:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 80141fa:	8afb      	ldrh	r3, [r7, #22]
 80141fc:	2b00      	cmp	r3, #0
 80141fe:	d1f0      	bne.n	80141e2 <SCSI_UpdateBotData+0x1a>
  }

  return 0;
 8014200:	2300      	movs	r3, #0
}
 8014202:	4618      	mov	r0, r3
 8014204:	371c      	adds	r7, #28
 8014206:	46bd      	mov	sp, r7
 8014208:	f85d 7b04 	ldr.w	r7, [sp], #4
 801420c:	4770      	bx	lr

0801420e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801420e:	b580      	push	{r7, lr}
 8014210:	b086      	sub	sp, #24
 8014212:	af00      	add	r7, sp, #0
 8014214:	60f8      	str	r0, [r7, #12]
 8014216:	60b9      	str	r1, [r7, #8]
 8014218:	4613      	mov	r3, r2
 801421a:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801421c:	68fb      	ldr	r3, [r7, #12]
 801421e:	2b00      	cmp	r3, #0
 8014220:	d101      	bne.n	8014226 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8014222:	2303      	movs	r3, #3
 8014224:	e025      	b.n	8014272 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8014226:	68fb      	ldr	r3, [r7, #12]
 8014228:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801422c:	2b00      	cmp	r3, #0
 801422e:	d003      	beq.n	8014238 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8014230:	68fb      	ldr	r3, [r7, #12]
 8014232:	2200      	movs	r2, #0
 8014234:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8014238:	68fb      	ldr	r3, [r7, #12]
 801423a:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 801423e:	2b00      	cmp	r3, #0
 8014240:	d003      	beq.n	801424a <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8014242:	68fb      	ldr	r3, [r7, #12]
 8014244:	2200      	movs	r2, #0
 8014246:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801424a:	68bb      	ldr	r3, [r7, #8]
 801424c:	2b00      	cmp	r3, #0
 801424e:	d003      	beq.n	8014258 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8014250:	68fb      	ldr	r3, [r7, #12]
 8014252:	68ba      	ldr	r2, [r7, #8]
 8014254:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014258:	68fb      	ldr	r3, [r7, #12]
 801425a:	2201      	movs	r2, #1
 801425c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8014260:	68fb      	ldr	r3, [r7, #12]
 8014262:	79fa      	ldrb	r2, [r7, #7]
 8014264:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8014266:	68f8      	ldr	r0, [r7, #12]
 8014268:	f003 fece 	bl	8018008 <USBD_LL_Init>
 801426c:	4603      	mov	r3, r0
 801426e:	75fb      	strb	r3, [r7, #23]

  return ret;
 8014270:	7dfb      	ldrb	r3, [r7, #23]
}
 8014272:	4618      	mov	r0, r3
 8014274:	3718      	adds	r7, #24
 8014276:	46bd      	mov	sp, r7
 8014278:	bd80      	pop	{r7, pc}

0801427a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801427a:	b580      	push	{r7, lr}
 801427c:	b084      	sub	sp, #16
 801427e:	af00      	add	r7, sp, #0
 8014280:	6078      	str	r0, [r7, #4]
 8014282:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014284:	2300      	movs	r3, #0
 8014286:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8014288:	683b      	ldr	r3, [r7, #0]
 801428a:	2b00      	cmp	r3, #0
 801428c:	d101      	bne.n	8014292 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 801428e:	2303      	movs	r3, #3
 8014290:	e010      	b.n	80142b4 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	683a      	ldr	r2, [r7, #0]
 8014296:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 801429a:	687b      	ldr	r3, [r7, #4]
 801429c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80142a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80142a2:	f107 020e 	add.w	r2, r7, #14
 80142a6:	4610      	mov	r0, r2
 80142a8:	4798      	blx	r3
 80142aa:	4602      	mov	r2, r0
 80142ac:	687b      	ldr	r3, [r7, #4]
 80142ae:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 80142b2:	2300      	movs	r3, #0
}
 80142b4:	4618      	mov	r0, r3
 80142b6:	3710      	adds	r7, #16
 80142b8:	46bd      	mov	sp, r7
 80142ba:	bd80      	pop	{r7, pc}

080142bc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80142bc:	b580      	push	{r7, lr}
 80142be:	b082      	sub	sp, #8
 80142c0:	af00      	add	r7, sp, #0
 80142c2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80142c4:	6878      	ldr	r0, [r7, #4]
 80142c6:	f003 feef 	bl	80180a8 <USBD_LL_Start>
 80142ca:	4603      	mov	r3, r0
}
 80142cc:	4618      	mov	r0, r3
 80142ce:	3708      	adds	r7, #8
 80142d0:	46bd      	mov	sp, r7
 80142d2:	bd80      	pop	{r7, pc}

080142d4 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80142d4:	b480      	push	{r7}
 80142d6:	b083      	sub	sp, #12
 80142d8:	af00      	add	r7, sp, #0
 80142da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80142dc:	2300      	movs	r3, #0
}
 80142de:	4618      	mov	r0, r3
 80142e0:	370c      	adds	r7, #12
 80142e2:	46bd      	mov	sp, r7
 80142e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142e8:	4770      	bx	lr

080142ea <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80142ea:	b580      	push	{r7, lr}
 80142ec:	b084      	sub	sp, #16
 80142ee:	af00      	add	r7, sp, #0
 80142f0:	6078      	str	r0, [r7, #4]
 80142f2:	460b      	mov	r3, r1
 80142f4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80142f6:	2303      	movs	r3, #3
 80142f8:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014300:	2b00      	cmp	r3, #0
 8014302:	d009      	beq.n	8014318 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801430a:	681b      	ldr	r3, [r3, #0]
 801430c:	78fa      	ldrb	r2, [r7, #3]
 801430e:	4611      	mov	r1, r2
 8014310:	6878      	ldr	r0, [r7, #4]
 8014312:	4798      	blx	r3
 8014314:	4603      	mov	r3, r0
 8014316:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8014318:	7bfb      	ldrb	r3, [r7, #15]
}
 801431a:	4618      	mov	r0, r3
 801431c:	3710      	adds	r7, #16
 801431e:	46bd      	mov	sp, r7
 8014320:	bd80      	pop	{r7, pc}

08014322 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014322:	b580      	push	{r7, lr}
 8014324:	b082      	sub	sp, #8
 8014326:	af00      	add	r7, sp, #0
 8014328:	6078      	str	r0, [r7, #4]
 801432a:	460b      	mov	r3, r1
 801432c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014334:	2b00      	cmp	r3, #0
 8014336:	d007      	beq.n	8014348 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801433e:	685b      	ldr	r3, [r3, #4]
 8014340:	78fa      	ldrb	r2, [r7, #3]
 8014342:	4611      	mov	r1, r2
 8014344:	6878      	ldr	r0, [r7, #4]
 8014346:	4798      	blx	r3
  }

  return USBD_OK;
 8014348:	2300      	movs	r3, #0
}
 801434a:	4618      	mov	r0, r3
 801434c:	3708      	adds	r7, #8
 801434e:	46bd      	mov	sp, r7
 8014350:	bd80      	pop	{r7, pc}

08014352 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8014352:	b580      	push	{r7, lr}
 8014354:	b084      	sub	sp, #16
 8014356:	af00      	add	r7, sp, #0
 8014358:	6078      	str	r0, [r7, #4]
 801435a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014362:	6839      	ldr	r1, [r7, #0]
 8014364:	4618      	mov	r0, r3
 8014366:	f000 ff2b 	bl	80151c0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	2201      	movs	r2, #1
 801436e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8014378:	461a      	mov	r2, r3
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8014380:	687b      	ldr	r3, [r7, #4]
 8014382:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8014386:	f003 031f 	and.w	r3, r3, #31
 801438a:	2b01      	cmp	r3, #1
 801438c:	d00e      	beq.n	80143ac <USBD_LL_SetupStage+0x5a>
 801438e:	2b01      	cmp	r3, #1
 8014390:	d302      	bcc.n	8014398 <USBD_LL_SetupStage+0x46>
 8014392:	2b02      	cmp	r3, #2
 8014394:	d014      	beq.n	80143c0 <USBD_LL_SetupStage+0x6e>
 8014396:	e01d      	b.n	80143d4 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801439e:	4619      	mov	r1, r3
 80143a0:	6878      	ldr	r0, [r7, #4]
 80143a2:	f000 fa17 	bl	80147d4 <USBD_StdDevReq>
 80143a6:	4603      	mov	r3, r0
 80143a8:	73fb      	strb	r3, [r7, #15]
      break;
 80143aa:	e020      	b.n	80143ee <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80143b2:	4619      	mov	r1, r3
 80143b4:	6878      	ldr	r0, [r7, #4]
 80143b6:	f000 fa7b 	bl	80148b0 <USBD_StdItfReq>
 80143ba:	4603      	mov	r3, r0
 80143bc:	73fb      	strb	r3, [r7, #15]
      break;
 80143be:	e016      	b.n	80143ee <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80143c6:	4619      	mov	r1, r3
 80143c8:	6878      	ldr	r0, [r7, #4]
 80143ca:	f000 fab7 	bl	801493c <USBD_StdEPReq>
 80143ce:	4603      	mov	r3, r0
 80143d0:	73fb      	strb	r3, [r7, #15]
      break;
 80143d2:	e00c      	b.n	80143ee <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80143da:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80143de:	b2db      	uxtb	r3, r3
 80143e0:	4619      	mov	r1, r3
 80143e2:	6878      	ldr	r0, [r7, #4]
 80143e4:	f003 fedf 	bl	80181a6 <USBD_LL_StallEP>
 80143e8:	4603      	mov	r3, r0
 80143ea:	73fb      	strb	r3, [r7, #15]
      break;
 80143ec:	bf00      	nop
  }

  return ret;
 80143ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80143f0:	4618      	mov	r0, r3
 80143f2:	3710      	adds	r7, #16
 80143f4:	46bd      	mov	sp, r7
 80143f6:	bd80      	pop	{r7, pc}

080143f8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80143f8:	b580      	push	{r7, lr}
 80143fa:	b086      	sub	sp, #24
 80143fc:	af00      	add	r7, sp, #0
 80143fe:	60f8      	str	r0, [r7, #12]
 8014400:	460b      	mov	r3, r1
 8014402:	607a      	str	r2, [r7, #4]
 8014404:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8014406:	7afb      	ldrb	r3, [r7, #11]
 8014408:	2b00      	cmp	r3, #0
 801440a:	d137      	bne.n	801447c <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 801440c:	68fb      	ldr	r3, [r7, #12]
 801440e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8014412:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8014414:	68fb      	ldr	r3, [r7, #12]
 8014416:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801441a:	2b03      	cmp	r3, #3
 801441c:	d14a      	bne.n	80144b4 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 801441e:	693b      	ldr	r3, [r7, #16]
 8014420:	689a      	ldr	r2, [r3, #8]
 8014422:	693b      	ldr	r3, [r7, #16]
 8014424:	68db      	ldr	r3, [r3, #12]
 8014426:	429a      	cmp	r2, r3
 8014428:	d913      	bls.n	8014452 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801442a:	693b      	ldr	r3, [r7, #16]
 801442c:	689a      	ldr	r2, [r3, #8]
 801442e:	693b      	ldr	r3, [r7, #16]
 8014430:	68db      	ldr	r3, [r3, #12]
 8014432:	1ad2      	subs	r2, r2, r3
 8014434:	693b      	ldr	r3, [r7, #16]
 8014436:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8014438:	693b      	ldr	r3, [r7, #16]
 801443a:	68da      	ldr	r2, [r3, #12]
 801443c:	693b      	ldr	r3, [r7, #16]
 801443e:	689b      	ldr	r3, [r3, #8]
 8014440:	4293      	cmp	r3, r2
 8014442:	bf28      	it	cs
 8014444:	4613      	movcs	r3, r2
 8014446:	461a      	mov	r2, r3
 8014448:	6879      	ldr	r1, [r7, #4]
 801444a:	68f8      	ldr	r0, [r7, #12]
 801444c:	f000 ff8f 	bl	801536e <USBD_CtlContinueRx>
 8014450:	e030      	b.n	80144b4 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8014452:	68fb      	ldr	r3, [r7, #12]
 8014454:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014458:	691b      	ldr	r3, [r3, #16]
 801445a:	2b00      	cmp	r3, #0
 801445c:	d00a      	beq.n	8014474 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 801445e:	68fb      	ldr	r3, [r7, #12]
 8014460:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8014464:	2b03      	cmp	r3, #3
 8014466:	d105      	bne.n	8014474 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8014468:	68fb      	ldr	r3, [r7, #12]
 801446a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801446e:	691b      	ldr	r3, [r3, #16]
 8014470:	68f8      	ldr	r0, [r7, #12]
 8014472:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8014474:	68f8      	ldr	r0, [r7, #12]
 8014476:	f000 ff8b 	bl	8015390 <USBD_CtlSendStatus>
 801447a:	e01b      	b.n	80144b4 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 801447c:	68fb      	ldr	r3, [r7, #12]
 801447e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014482:	699b      	ldr	r3, [r3, #24]
 8014484:	2b00      	cmp	r3, #0
 8014486:	d013      	beq.n	80144b0 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8014488:	68fb      	ldr	r3, [r7, #12]
 801448a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 801448e:	2b03      	cmp	r3, #3
 8014490:	d10e      	bne.n	80144b0 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8014492:	68fb      	ldr	r3, [r7, #12]
 8014494:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014498:	699b      	ldr	r3, [r3, #24]
 801449a:	7afa      	ldrb	r2, [r7, #11]
 801449c:	4611      	mov	r1, r2
 801449e:	68f8      	ldr	r0, [r7, #12]
 80144a0:	4798      	blx	r3
 80144a2:	4603      	mov	r3, r0
 80144a4:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80144a6:	7dfb      	ldrb	r3, [r7, #23]
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	d003      	beq.n	80144b4 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80144ac:	7dfb      	ldrb	r3, [r7, #23]
 80144ae:	e002      	b.n	80144b6 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80144b0:	2303      	movs	r3, #3
 80144b2:	e000      	b.n	80144b6 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80144b4:	2300      	movs	r3, #0
}
 80144b6:	4618      	mov	r0, r3
 80144b8:	3718      	adds	r7, #24
 80144ba:	46bd      	mov	sp, r7
 80144bc:	bd80      	pop	{r7, pc}

080144be <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80144be:	b580      	push	{r7, lr}
 80144c0:	b086      	sub	sp, #24
 80144c2:	af00      	add	r7, sp, #0
 80144c4:	60f8      	str	r0, [r7, #12]
 80144c6:	460b      	mov	r3, r1
 80144c8:	607a      	str	r2, [r7, #4]
 80144ca:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80144cc:	7afb      	ldrb	r3, [r7, #11]
 80144ce:	2b00      	cmp	r3, #0
 80144d0:	d16a      	bne.n	80145a8 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80144d2:	68fb      	ldr	r3, [r7, #12]
 80144d4:	3314      	adds	r3, #20
 80144d6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80144d8:	68fb      	ldr	r3, [r7, #12]
 80144da:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80144de:	2b02      	cmp	r3, #2
 80144e0:	d155      	bne.n	801458e <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80144e2:	693b      	ldr	r3, [r7, #16]
 80144e4:	689a      	ldr	r2, [r3, #8]
 80144e6:	693b      	ldr	r3, [r7, #16]
 80144e8:	68db      	ldr	r3, [r3, #12]
 80144ea:	429a      	cmp	r2, r3
 80144ec:	d914      	bls.n	8014518 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80144ee:	693b      	ldr	r3, [r7, #16]
 80144f0:	689a      	ldr	r2, [r3, #8]
 80144f2:	693b      	ldr	r3, [r7, #16]
 80144f4:	68db      	ldr	r3, [r3, #12]
 80144f6:	1ad2      	subs	r2, r2, r3
 80144f8:	693b      	ldr	r3, [r7, #16]
 80144fa:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80144fc:	693b      	ldr	r3, [r7, #16]
 80144fe:	689b      	ldr	r3, [r3, #8]
 8014500:	461a      	mov	r2, r3
 8014502:	6879      	ldr	r1, [r7, #4]
 8014504:	68f8      	ldr	r0, [r7, #12]
 8014506:	f000 ff21 	bl	801534c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801450a:	2300      	movs	r3, #0
 801450c:	2200      	movs	r2, #0
 801450e:	2100      	movs	r1, #0
 8014510:	68f8      	ldr	r0, [r7, #12]
 8014512:	f003 fef2 	bl	80182fa <USBD_LL_PrepareReceive>
 8014516:	e03a      	b.n	801458e <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8014518:	693b      	ldr	r3, [r7, #16]
 801451a:	68da      	ldr	r2, [r3, #12]
 801451c:	693b      	ldr	r3, [r7, #16]
 801451e:	689b      	ldr	r3, [r3, #8]
 8014520:	429a      	cmp	r2, r3
 8014522:	d11c      	bne.n	801455e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8014524:	693b      	ldr	r3, [r7, #16]
 8014526:	685a      	ldr	r2, [r3, #4]
 8014528:	693b      	ldr	r3, [r7, #16]
 801452a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801452c:	429a      	cmp	r2, r3
 801452e:	d316      	bcc.n	801455e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8014530:	693b      	ldr	r3, [r7, #16]
 8014532:	685a      	ldr	r2, [r3, #4]
 8014534:	68fb      	ldr	r3, [r7, #12]
 8014536:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 801453a:	429a      	cmp	r2, r3
 801453c:	d20f      	bcs.n	801455e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801453e:	2200      	movs	r2, #0
 8014540:	2100      	movs	r1, #0
 8014542:	68f8      	ldr	r0, [r7, #12]
 8014544:	f000 ff02 	bl	801534c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8014548:	68fb      	ldr	r3, [r7, #12]
 801454a:	2200      	movs	r2, #0
 801454c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014550:	2300      	movs	r3, #0
 8014552:	2200      	movs	r2, #0
 8014554:	2100      	movs	r1, #0
 8014556:	68f8      	ldr	r0, [r7, #12]
 8014558:	f003 fecf 	bl	80182fa <USBD_LL_PrepareReceive>
 801455c:	e017      	b.n	801458e <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801455e:	68fb      	ldr	r3, [r7, #12]
 8014560:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014564:	68db      	ldr	r3, [r3, #12]
 8014566:	2b00      	cmp	r3, #0
 8014568:	d00a      	beq.n	8014580 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 801456a:	68fb      	ldr	r3, [r7, #12]
 801456c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8014570:	2b03      	cmp	r3, #3
 8014572:	d105      	bne.n	8014580 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8014574:	68fb      	ldr	r3, [r7, #12]
 8014576:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801457a:	68db      	ldr	r3, [r3, #12]
 801457c:	68f8      	ldr	r0, [r7, #12]
 801457e:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8014580:	2180      	movs	r1, #128	; 0x80
 8014582:	68f8      	ldr	r0, [r7, #12]
 8014584:	f003 fe0f 	bl	80181a6 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8014588:	68f8      	ldr	r0, [r7, #12]
 801458a:	f000 ff14 	bl	80153b6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 801458e:	68fb      	ldr	r3, [r7, #12]
 8014590:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8014594:	2b01      	cmp	r3, #1
 8014596:	d123      	bne.n	80145e0 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8014598:	68f8      	ldr	r0, [r7, #12]
 801459a:	f7ff fe9b 	bl	80142d4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801459e:	68fb      	ldr	r3, [r7, #12]
 80145a0:	2200      	movs	r2, #0
 80145a2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80145a6:	e01b      	b.n	80145e0 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80145a8:	68fb      	ldr	r3, [r7, #12]
 80145aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80145ae:	695b      	ldr	r3, [r3, #20]
 80145b0:	2b00      	cmp	r3, #0
 80145b2:	d013      	beq.n	80145dc <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80145b4:	68fb      	ldr	r3, [r7, #12]
 80145b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80145ba:	2b03      	cmp	r3, #3
 80145bc:	d10e      	bne.n	80145dc <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80145be:	68fb      	ldr	r3, [r7, #12]
 80145c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80145c4:	695b      	ldr	r3, [r3, #20]
 80145c6:	7afa      	ldrb	r2, [r7, #11]
 80145c8:	4611      	mov	r1, r2
 80145ca:	68f8      	ldr	r0, [r7, #12]
 80145cc:	4798      	blx	r3
 80145ce:	4603      	mov	r3, r0
 80145d0:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80145d2:	7dfb      	ldrb	r3, [r7, #23]
 80145d4:	2b00      	cmp	r3, #0
 80145d6:	d003      	beq.n	80145e0 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80145d8:	7dfb      	ldrb	r3, [r7, #23]
 80145da:	e002      	b.n	80145e2 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80145dc:	2303      	movs	r3, #3
 80145de:	e000      	b.n	80145e2 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80145e0:	2300      	movs	r3, #0
}
 80145e2:	4618      	mov	r0, r3
 80145e4:	3718      	adds	r7, #24
 80145e6:	46bd      	mov	sp, r7
 80145e8:	bd80      	pop	{r7, pc}

080145ea <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80145ea:	b580      	push	{r7, lr}
 80145ec:	b082      	sub	sp, #8
 80145ee:	af00      	add	r7, sp, #0
 80145f0:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80145f2:	687b      	ldr	r3, [r7, #4]
 80145f4:	2201      	movs	r2, #1
 80145f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80145fa:	687b      	ldr	r3, [r7, #4]
 80145fc:	2200      	movs	r2, #0
 80145fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8014602:	687b      	ldr	r3, [r7, #4]
 8014604:	2200      	movs	r2, #0
 8014606:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	2200      	movs	r2, #0
 801460c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014616:	2b00      	cmp	r3, #0
 8014618:	d009      	beq.n	801462e <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014620:	685b      	ldr	r3, [r3, #4]
 8014622:	687a      	ldr	r2, [r7, #4]
 8014624:	6852      	ldr	r2, [r2, #4]
 8014626:	b2d2      	uxtb	r2, r2
 8014628:	4611      	mov	r1, r2
 801462a:	6878      	ldr	r0, [r7, #4]
 801462c:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801462e:	2340      	movs	r3, #64	; 0x40
 8014630:	2200      	movs	r2, #0
 8014632:	2100      	movs	r1, #0
 8014634:	6878      	ldr	r0, [r7, #4]
 8014636:	f003 fd52 	bl	80180de <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801463a:	687b      	ldr	r3, [r7, #4]
 801463c:	2201      	movs	r2, #1
 801463e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8014642:	687b      	ldr	r3, [r7, #4]
 8014644:	2240      	movs	r2, #64	; 0x40
 8014646:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801464a:	2340      	movs	r3, #64	; 0x40
 801464c:	2200      	movs	r2, #0
 801464e:	2180      	movs	r1, #128	; 0x80
 8014650:	6878      	ldr	r0, [r7, #4]
 8014652:	f003 fd44 	bl	80180de <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	2201      	movs	r2, #1
 801465a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	2240      	movs	r2, #64	; 0x40
 8014660:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8014662:	2300      	movs	r3, #0
}
 8014664:	4618      	mov	r0, r3
 8014666:	3708      	adds	r7, #8
 8014668:	46bd      	mov	sp, r7
 801466a:	bd80      	pop	{r7, pc}

0801466c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801466c:	b480      	push	{r7}
 801466e:	b083      	sub	sp, #12
 8014670:	af00      	add	r7, sp, #0
 8014672:	6078      	str	r0, [r7, #4]
 8014674:	460b      	mov	r3, r1
 8014676:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8014678:	687b      	ldr	r3, [r7, #4]
 801467a:	78fa      	ldrb	r2, [r7, #3]
 801467c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801467e:	2300      	movs	r3, #0
}
 8014680:	4618      	mov	r0, r3
 8014682:	370c      	adds	r7, #12
 8014684:	46bd      	mov	sp, r7
 8014686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801468a:	4770      	bx	lr

0801468c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801468c:	b480      	push	{r7}
 801468e:	b083      	sub	sp, #12
 8014690:	af00      	add	r7, sp, #0
 8014692:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8014694:	687b      	ldr	r3, [r7, #4]
 8014696:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 801469a:	687b      	ldr	r3, [r7, #4]
 801469c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	2204      	movs	r2, #4
 80146a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80146a8:	2300      	movs	r3, #0
}
 80146aa:	4618      	mov	r0, r3
 80146ac:	370c      	adds	r7, #12
 80146ae:	46bd      	mov	sp, r7
 80146b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146b4:	4770      	bx	lr

080146b6 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80146b6:	b480      	push	{r7}
 80146b8:	b083      	sub	sp, #12
 80146ba:	af00      	add	r7, sp, #0
 80146bc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80146c4:	2b04      	cmp	r3, #4
 80146c6:	d105      	bne.n	80146d4 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80146c8:	687b      	ldr	r3, [r7, #4]
 80146ca:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80146d4:	2300      	movs	r3, #0
}
 80146d6:	4618      	mov	r0, r3
 80146d8:	370c      	adds	r7, #12
 80146da:	46bd      	mov	sp, r7
 80146dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146e0:	4770      	bx	lr

080146e2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80146e2:	b580      	push	{r7, lr}
 80146e4:	b082      	sub	sp, #8
 80146e6:	af00      	add	r7, sp, #0
 80146e8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80146ea:	687b      	ldr	r3, [r7, #4]
 80146ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80146f0:	2b03      	cmp	r3, #3
 80146f2:	d10b      	bne.n	801470c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80146fa:	69db      	ldr	r3, [r3, #28]
 80146fc:	2b00      	cmp	r3, #0
 80146fe:	d005      	beq.n	801470c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014706:	69db      	ldr	r3, [r3, #28]
 8014708:	6878      	ldr	r0, [r7, #4]
 801470a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801470c:	2300      	movs	r3, #0
}
 801470e:	4618      	mov	r0, r3
 8014710:	3708      	adds	r7, #8
 8014712:	46bd      	mov	sp, r7
 8014714:	bd80      	pop	{r7, pc}

08014716 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8014716:	b480      	push	{r7}
 8014718:	b083      	sub	sp, #12
 801471a:	af00      	add	r7, sp, #0
 801471c:	6078      	str	r0, [r7, #4]
 801471e:	460b      	mov	r3, r1
 8014720:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8014722:	2300      	movs	r3, #0
}
 8014724:	4618      	mov	r0, r3
 8014726:	370c      	adds	r7, #12
 8014728:	46bd      	mov	sp, r7
 801472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801472e:	4770      	bx	lr

08014730 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8014730:	b480      	push	{r7}
 8014732:	b083      	sub	sp, #12
 8014734:	af00      	add	r7, sp, #0
 8014736:	6078      	str	r0, [r7, #4]
 8014738:	460b      	mov	r3, r1
 801473a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 801473c:	2300      	movs	r3, #0
}
 801473e:	4618      	mov	r0, r3
 8014740:	370c      	adds	r7, #12
 8014742:	46bd      	mov	sp, r7
 8014744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014748:	4770      	bx	lr

0801474a <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801474a:	b480      	push	{r7}
 801474c:	b083      	sub	sp, #12
 801474e:	af00      	add	r7, sp, #0
 8014750:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8014752:	2300      	movs	r3, #0
}
 8014754:	4618      	mov	r0, r3
 8014756:	370c      	adds	r7, #12
 8014758:	46bd      	mov	sp, r7
 801475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801475e:	4770      	bx	lr

08014760 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8014760:	b580      	push	{r7, lr}
 8014762:	b082      	sub	sp, #8
 8014764:	af00      	add	r7, sp, #0
 8014766:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	2201      	movs	r2, #1
 801476c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8014770:	687b      	ldr	r3, [r7, #4]
 8014772:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014776:	2b00      	cmp	r3, #0
 8014778:	d009      	beq.n	801478e <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801477a:	687b      	ldr	r3, [r7, #4]
 801477c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014780:	685b      	ldr	r3, [r3, #4]
 8014782:	687a      	ldr	r2, [r7, #4]
 8014784:	6852      	ldr	r2, [r2, #4]
 8014786:	b2d2      	uxtb	r2, r2
 8014788:	4611      	mov	r1, r2
 801478a:	6878      	ldr	r0, [r7, #4]
 801478c:	4798      	blx	r3
  }

  return USBD_OK;
 801478e:	2300      	movs	r3, #0
}
 8014790:	4618      	mov	r0, r3
 8014792:	3708      	adds	r7, #8
 8014794:	46bd      	mov	sp, r7
 8014796:	bd80      	pop	{r7, pc}

08014798 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8014798:	b480      	push	{r7}
 801479a:	b087      	sub	sp, #28
 801479c:	af00      	add	r7, sp, #0
 801479e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80147a4:	697b      	ldr	r3, [r7, #20]
 80147a6:	781b      	ldrb	r3, [r3, #0]
 80147a8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80147aa:	697b      	ldr	r3, [r7, #20]
 80147ac:	3301      	adds	r3, #1
 80147ae:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80147b0:	697b      	ldr	r3, [r7, #20]
 80147b2:	781b      	ldrb	r3, [r3, #0]
 80147b4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80147b6:	8a3b      	ldrh	r3, [r7, #16]
 80147b8:	021b      	lsls	r3, r3, #8
 80147ba:	b21a      	sxth	r2, r3
 80147bc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80147c0:	4313      	orrs	r3, r2
 80147c2:	b21b      	sxth	r3, r3
 80147c4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80147c6:	89fb      	ldrh	r3, [r7, #14]
}
 80147c8:	4618      	mov	r0, r3
 80147ca:	371c      	adds	r7, #28
 80147cc:	46bd      	mov	sp, r7
 80147ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147d2:	4770      	bx	lr

080147d4 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80147d4:	b580      	push	{r7, lr}
 80147d6:	b084      	sub	sp, #16
 80147d8:	af00      	add	r7, sp, #0
 80147da:	6078      	str	r0, [r7, #4]
 80147dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80147de:	2300      	movs	r3, #0
 80147e0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80147e2:	683b      	ldr	r3, [r7, #0]
 80147e4:	781b      	ldrb	r3, [r3, #0]
 80147e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80147ea:	2b20      	cmp	r3, #32
 80147ec:	d004      	beq.n	80147f8 <USBD_StdDevReq+0x24>
 80147ee:	2b40      	cmp	r3, #64	; 0x40
 80147f0:	d002      	beq.n	80147f8 <USBD_StdDevReq+0x24>
 80147f2:	2b00      	cmp	r3, #0
 80147f4:	d00a      	beq.n	801480c <USBD_StdDevReq+0x38>
 80147f6:	e050      	b.n	801489a <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80147fe:	689b      	ldr	r3, [r3, #8]
 8014800:	6839      	ldr	r1, [r7, #0]
 8014802:	6878      	ldr	r0, [r7, #4]
 8014804:	4798      	blx	r3
 8014806:	4603      	mov	r3, r0
 8014808:	73fb      	strb	r3, [r7, #15]
    break;
 801480a:	e04b      	b.n	80148a4 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 801480c:	683b      	ldr	r3, [r7, #0]
 801480e:	785b      	ldrb	r3, [r3, #1]
 8014810:	2b09      	cmp	r3, #9
 8014812:	d83c      	bhi.n	801488e <USBD_StdDevReq+0xba>
 8014814:	a201      	add	r2, pc, #4	; (adr r2, 801481c <USBD_StdDevReq+0x48>)
 8014816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801481a:	bf00      	nop
 801481c:	08014871 	.word	0x08014871
 8014820:	08014885 	.word	0x08014885
 8014824:	0801488f 	.word	0x0801488f
 8014828:	0801487b 	.word	0x0801487b
 801482c:	0801488f 	.word	0x0801488f
 8014830:	0801484f 	.word	0x0801484f
 8014834:	08014845 	.word	0x08014845
 8014838:	0801488f 	.word	0x0801488f
 801483c:	08014867 	.word	0x08014867
 8014840:	08014859 	.word	0x08014859
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8014844:	6839      	ldr	r1, [r7, #0]
 8014846:	6878      	ldr	r0, [r7, #4]
 8014848:	f000 f9ce 	bl	8014be8 <USBD_GetDescriptor>
      break;
 801484c:	e024      	b.n	8014898 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 801484e:	6839      	ldr	r1, [r7, #0]
 8014850:	6878      	ldr	r0, [r7, #4]
 8014852:	f000 fb33 	bl	8014ebc <USBD_SetAddress>
      break;
 8014856:	e01f      	b.n	8014898 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8014858:	6839      	ldr	r1, [r7, #0]
 801485a:	6878      	ldr	r0, [r7, #4]
 801485c:	f000 fb70 	bl	8014f40 <USBD_SetConfig>
 8014860:	4603      	mov	r3, r0
 8014862:	73fb      	strb	r3, [r7, #15]
      break;
 8014864:	e018      	b.n	8014898 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8014866:	6839      	ldr	r1, [r7, #0]
 8014868:	6878      	ldr	r0, [r7, #4]
 801486a:	f000 fc0d 	bl	8015088 <USBD_GetConfig>
      break;
 801486e:	e013      	b.n	8014898 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8014870:	6839      	ldr	r1, [r7, #0]
 8014872:	6878      	ldr	r0, [r7, #4]
 8014874:	f000 fc3c 	bl	80150f0 <USBD_GetStatus>
      break;
 8014878:	e00e      	b.n	8014898 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 801487a:	6839      	ldr	r1, [r7, #0]
 801487c:	6878      	ldr	r0, [r7, #4]
 801487e:	f000 fc6a 	bl	8015156 <USBD_SetFeature>
      break;
 8014882:	e009      	b.n	8014898 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8014884:	6839      	ldr	r1, [r7, #0]
 8014886:	6878      	ldr	r0, [r7, #4]
 8014888:	f000 fc79 	bl	801517e <USBD_ClrFeature>
      break;
 801488c:	e004      	b.n	8014898 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 801488e:	6839      	ldr	r1, [r7, #0]
 8014890:	6878      	ldr	r0, [r7, #4]
 8014892:	f000 fccf 	bl	8015234 <USBD_CtlError>
      break;
 8014896:	bf00      	nop
    }
    break;
 8014898:	e004      	b.n	80148a4 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 801489a:	6839      	ldr	r1, [r7, #0]
 801489c:	6878      	ldr	r0, [r7, #4]
 801489e:	f000 fcc9 	bl	8015234 <USBD_CtlError>
    break;
 80148a2:	bf00      	nop
  }

  return ret;
 80148a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80148a6:	4618      	mov	r0, r3
 80148a8:	3710      	adds	r7, #16
 80148aa:	46bd      	mov	sp, r7
 80148ac:	bd80      	pop	{r7, pc}
 80148ae:	bf00      	nop

080148b0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80148b0:	b580      	push	{r7, lr}
 80148b2:	b084      	sub	sp, #16
 80148b4:	af00      	add	r7, sp, #0
 80148b6:	6078      	str	r0, [r7, #4]
 80148b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80148ba:	2300      	movs	r3, #0
 80148bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80148be:	683b      	ldr	r3, [r7, #0]
 80148c0:	781b      	ldrb	r3, [r3, #0]
 80148c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80148c6:	2b20      	cmp	r3, #32
 80148c8:	d003      	beq.n	80148d2 <USBD_StdItfReq+0x22>
 80148ca:	2b40      	cmp	r3, #64	; 0x40
 80148cc:	d001      	beq.n	80148d2 <USBD_StdItfReq+0x22>
 80148ce:	2b00      	cmp	r3, #0
 80148d0:	d12a      	bne.n	8014928 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80148d2:	687b      	ldr	r3, [r7, #4]
 80148d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80148d8:	3b01      	subs	r3, #1
 80148da:	2b02      	cmp	r3, #2
 80148dc:	d81d      	bhi.n	801491a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80148de:	683b      	ldr	r3, [r7, #0]
 80148e0:	889b      	ldrh	r3, [r3, #4]
 80148e2:	b2db      	uxtb	r3, r3
 80148e4:	2b01      	cmp	r3, #1
 80148e6:	d813      	bhi.n	8014910 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80148e8:	687b      	ldr	r3, [r7, #4]
 80148ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80148ee:	689b      	ldr	r3, [r3, #8]
 80148f0:	6839      	ldr	r1, [r7, #0]
 80148f2:	6878      	ldr	r0, [r7, #4]
 80148f4:	4798      	blx	r3
 80148f6:	4603      	mov	r3, r0
 80148f8:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80148fa:	683b      	ldr	r3, [r7, #0]
 80148fc:	88db      	ldrh	r3, [r3, #6]
 80148fe:	2b00      	cmp	r3, #0
 8014900:	d110      	bne.n	8014924 <USBD_StdItfReq+0x74>
 8014902:	7bfb      	ldrb	r3, [r7, #15]
 8014904:	2b00      	cmp	r3, #0
 8014906:	d10d      	bne.n	8014924 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8014908:	6878      	ldr	r0, [r7, #4]
 801490a:	f000 fd41 	bl	8015390 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 801490e:	e009      	b.n	8014924 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8014910:	6839      	ldr	r1, [r7, #0]
 8014912:	6878      	ldr	r0, [r7, #4]
 8014914:	f000 fc8e 	bl	8015234 <USBD_CtlError>
      break;
 8014918:	e004      	b.n	8014924 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 801491a:	6839      	ldr	r1, [r7, #0]
 801491c:	6878      	ldr	r0, [r7, #4]
 801491e:	f000 fc89 	bl	8015234 <USBD_CtlError>
      break;
 8014922:	e000      	b.n	8014926 <USBD_StdItfReq+0x76>
      break;
 8014924:	bf00      	nop
    }
    break;
 8014926:	e004      	b.n	8014932 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8014928:	6839      	ldr	r1, [r7, #0]
 801492a:	6878      	ldr	r0, [r7, #4]
 801492c:	f000 fc82 	bl	8015234 <USBD_CtlError>
    break;
 8014930:	bf00      	nop
  }

  return ret;
 8014932:	7bfb      	ldrb	r3, [r7, #15]
}
 8014934:	4618      	mov	r0, r3
 8014936:	3710      	adds	r7, #16
 8014938:	46bd      	mov	sp, r7
 801493a:	bd80      	pop	{r7, pc}

0801493c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801493c:	b580      	push	{r7, lr}
 801493e:	b084      	sub	sp, #16
 8014940:	af00      	add	r7, sp, #0
 8014942:	6078      	str	r0, [r7, #4]
 8014944:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8014946:	2300      	movs	r3, #0
 8014948:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 801494a:	683b      	ldr	r3, [r7, #0]
 801494c:	889b      	ldrh	r3, [r3, #4]
 801494e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014950:	683b      	ldr	r3, [r7, #0]
 8014952:	781b      	ldrb	r3, [r3, #0]
 8014954:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014958:	2b20      	cmp	r3, #32
 801495a:	d004      	beq.n	8014966 <USBD_StdEPReq+0x2a>
 801495c:	2b40      	cmp	r3, #64	; 0x40
 801495e:	d002      	beq.n	8014966 <USBD_StdEPReq+0x2a>
 8014960:	2b00      	cmp	r3, #0
 8014962:	d00a      	beq.n	801497a <USBD_StdEPReq+0x3e>
 8014964:	e135      	b.n	8014bd2 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801496c:	689b      	ldr	r3, [r3, #8]
 801496e:	6839      	ldr	r1, [r7, #0]
 8014970:	6878      	ldr	r0, [r7, #4]
 8014972:	4798      	blx	r3
 8014974:	4603      	mov	r3, r0
 8014976:	73fb      	strb	r3, [r7, #15]
    break;
 8014978:	e130      	b.n	8014bdc <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 801497a:	683b      	ldr	r3, [r7, #0]
 801497c:	785b      	ldrb	r3, [r3, #1]
 801497e:	2b01      	cmp	r3, #1
 8014980:	d03e      	beq.n	8014a00 <USBD_StdEPReq+0xc4>
 8014982:	2b03      	cmp	r3, #3
 8014984:	d002      	beq.n	801498c <USBD_StdEPReq+0x50>
 8014986:	2b00      	cmp	r3, #0
 8014988:	d077      	beq.n	8014a7a <USBD_StdEPReq+0x13e>
 801498a:	e11c      	b.n	8014bc6 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014992:	2b02      	cmp	r3, #2
 8014994:	d002      	beq.n	801499c <USBD_StdEPReq+0x60>
 8014996:	2b03      	cmp	r3, #3
 8014998:	d015      	beq.n	80149c6 <USBD_StdEPReq+0x8a>
 801499a:	e02b      	b.n	80149f4 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801499c:	7bbb      	ldrb	r3, [r7, #14]
 801499e:	2b00      	cmp	r3, #0
 80149a0:	d00c      	beq.n	80149bc <USBD_StdEPReq+0x80>
 80149a2:	7bbb      	ldrb	r3, [r7, #14]
 80149a4:	2b80      	cmp	r3, #128	; 0x80
 80149a6:	d009      	beq.n	80149bc <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80149a8:	7bbb      	ldrb	r3, [r7, #14]
 80149aa:	4619      	mov	r1, r3
 80149ac:	6878      	ldr	r0, [r7, #4]
 80149ae:	f003 fbfa 	bl	80181a6 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80149b2:	2180      	movs	r1, #128	; 0x80
 80149b4:	6878      	ldr	r0, [r7, #4]
 80149b6:	f003 fbf6 	bl	80181a6 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80149ba:	e020      	b.n	80149fe <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 80149bc:	6839      	ldr	r1, [r7, #0]
 80149be:	6878      	ldr	r0, [r7, #4]
 80149c0:	f000 fc38 	bl	8015234 <USBD_CtlError>
        break;
 80149c4:	e01b      	b.n	80149fe <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80149c6:	683b      	ldr	r3, [r7, #0]
 80149c8:	885b      	ldrh	r3, [r3, #2]
 80149ca:	2b00      	cmp	r3, #0
 80149cc:	d10e      	bne.n	80149ec <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80149ce:	7bbb      	ldrb	r3, [r7, #14]
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	d00b      	beq.n	80149ec <USBD_StdEPReq+0xb0>
 80149d4:	7bbb      	ldrb	r3, [r7, #14]
 80149d6:	2b80      	cmp	r3, #128	; 0x80
 80149d8:	d008      	beq.n	80149ec <USBD_StdEPReq+0xb0>
 80149da:	683b      	ldr	r3, [r7, #0]
 80149dc:	88db      	ldrh	r3, [r3, #6]
 80149de:	2b00      	cmp	r3, #0
 80149e0:	d104      	bne.n	80149ec <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80149e2:	7bbb      	ldrb	r3, [r7, #14]
 80149e4:	4619      	mov	r1, r3
 80149e6:	6878      	ldr	r0, [r7, #4]
 80149e8:	f003 fbdd 	bl	80181a6 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80149ec:	6878      	ldr	r0, [r7, #4]
 80149ee:	f000 fccf 	bl	8015390 <USBD_CtlSendStatus>

        break;
 80149f2:	e004      	b.n	80149fe <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 80149f4:	6839      	ldr	r1, [r7, #0]
 80149f6:	6878      	ldr	r0, [r7, #4]
 80149f8:	f000 fc1c 	bl	8015234 <USBD_CtlError>
        break;
 80149fc:	bf00      	nop
      }
      break;
 80149fe:	e0e7      	b.n	8014bd0 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014a06:	2b02      	cmp	r3, #2
 8014a08:	d002      	beq.n	8014a10 <USBD_StdEPReq+0xd4>
 8014a0a:	2b03      	cmp	r3, #3
 8014a0c:	d015      	beq.n	8014a3a <USBD_StdEPReq+0xfe>
 8014a0e:	e02d      	b.n	8014a6c <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014a10:	7bbb      	ldrb	r3, [r7, #14]
 8014a12:	2b00      	cmp	r3, #0
 8014a14:	d00c      	beq.n	8014a30 <USBD_StdEPReq+0xf4>
 8014a16:	7bbb      	ldrb	r3, [r7, #14]
 8014a18:	2b80      	cmp	r3, #128	; 0x80
 8014a1a:	d009      	beq.n	8014a30 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8014a1c:	7bbb      	ldrb	r3, [r7, #14]
 8014a1e:	4619      	mov	r1, r3
 8014a20:	6878      	ldr	r0, [r7, #4]
 8014a22:	f003 fbc0 	bl	80181a6 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8014a26:	2180      	movs	r1, #128	; 0x80
 8014a28:	6878      	ldr	r0, [r7, #4]
 8014a2a:	f003 fbbc 	bl	80181a6 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8014a2e:	e023      	b.n	8014a78 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8014a30:	6839      	ldr	r1, [r7, #0]
 8014a32:	6878      	ldr	r0, [r7, #4]
 8014a34:	f000 fbfe 	bl	8015234 <USBD_CtlError>
        break;
 8014a38:	e01e      	b.n	8014a78 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8014a3a:	683b      	ldr	r3, [r7, #0]
 8014a3c:	885b      	ldrh	r3, [r3, #2]
 8014a3e:	2b00      	cmp	r3, #0
 8014a40:	d119      	bne.n	8014a76 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8014a42:	7bbb      	ldrb	r3, [r7, #14]
 8014a44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014a48:	2b00      	cmp	r3, #0
 8014a4a:	d004      	beq.n	8014a56 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8014a4c:	7bbb      	ldrb	r3, [r7, #14]
 8014a4e:	4619      	mov	r1, r3
 8014a50:	6878      	ldr	r0, [r7, #4]
 8014a52:	f003 fbc7 	bl	80181e4 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8014a56:	6878      	ldr	r0, [r7, #4]
 8014a58:	f000 fc9a 	bl	8015390 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014a62:	689b      	ldr	r3, [r3, #8]
 8014a64:	6839      	ldr	r1, [r7, #0]
 8014a66:	6878      	ldr	r0, [r7, #4]
 8014a68:	4798      	blx	r3
        }
        break;
 8014a6a:	e004      	b.n	8014a76 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8014a6c:	6839      	ldr	r1, [r7, #0]
 8014a6e:	6878      	ldr	r0, [r7, #4]
 8014a70:	f000 fbe0 	bl	8015234 <USBD_CtlError>
        break;
 8014a74:	e000      	b.n	8014a78 <USBD_StdEPReq+0x13c>
        break;
 8014a76:	bf00      	nop
      }
      break;
 8014a78:	e0aa      	b.n	8014bd0 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8014a7a:	687b      	ldr	r3, [r7, #4]
 8014a7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014a80:	2b02      	cmp	r3, #2
 8014a82:	d002      	beq.n	8014a8a <USBD_StdEPReq+0x14e>
 8014a84:	2b03      	cmp	r3, #3
 8014a86:	d032      	beq.n	8014aee <USBD_StdEPReq+0x1b2>
 8014a88:	e097      	b.n	8014bba <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014a8a:	7bbb      	ldrb	r3, [r7, #14]
 8014a8c:	2b00      	cmp	r3, #0
 8014a8e:	d007      	beq.n	8014aa0 <USBD_StdEPReq+0x164>
 8014a90:	7bbb      	ldrb	r3, [r7, #14]
 8014a92:	2b80      	cmp	r3, #128	; 0x80
 8014a94:	d004      	beq.n	8014aa0 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8014a96:	6839      	ldr	r1, [r7, #0]
 8014a98:	6878      	ldr	r0, [r7, #4]
 8014a9a:	f000 fbcb 	bl	8015234 <USBD_CtlError>
          break;
 8014a9e:	e091      	b.n	8014bc4 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014aa0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014aa4:	2b00      	cmp	r3, #0
 8014aa6:	da0b      	bge.n	8014ac0 <USBD_StdEPReq+0x184>
 8014aa8:	7bbb      	ldrb	r3, [r7, #14]
 8014aaa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014aae:	4613      	mov	r3, r2
 8014ab0:	009b      	lsls	r3, r3, #2
 8014ab2:	4413      	add	r3, r2
 8014ab4:	009b      	lsls	r3, r3, #2
 8014ab6:	3310      	adds	r3, #16
 8014ab8:	687a      	ldr	r2, [r7, #4]
 8014aba:	4413      	add	r3, r2
 8014abc:	3304      	adds	r3, #4
 8014abe:	e00b      	b.n	8014ad8 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8014ac0:	7bbb      	ldrb	r3, [r7, #14]
 8014ac2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014ac6:	4613      	mov	r3, r2
 8014ac8:	009b      	lsls	r3, r3, #2
 8014aca:	4413      	add	r3, r2
 8014acc:	009b      	lsls	r3, r3, #2
 8014ace:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8014ad2:	687a      	ldr	r2, [r7, #4]
 8014ad4:	4413      	add	r3, r2
 8014ad6:	3304      	adds	r3, #4
 8014ad8:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8014ada:	68bb      	ldr	r3, [r7, #8]
 8014adc:	2200      	movs	r2, #0
 8014ade:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014ae0:	68bb      	ldr	r3, [r7, #8]
 8014ae2:	2202      	movs	r2, #2
 8014ae4:	4619      	mov	r1, r3
 8014ae6:	6878      	ldr	r0, [r7, #4]
 8014ae8:	f000 fc15 	bl	8015316 <USBD_CtlSendData>
        break;
 8014aec:	e06a      	b.n	8014bc4 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8014aee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014af2:	2b00      	cmp	r3, #0
 8014af4:	da11      	bge.n	8014b1a <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8014af6:	7bbb      	ldrb	r3, [r7, #14]
 8014af8:	f003 020f 	and.w	r2, r3, #15
 8014afc:	6879      	ldr	r1, [r7, #4]
 8014afe:	4613      	mov	r3, r2
 8014b00:	009b      	lsls	r3, r3, #2
 8014b02:	4413      	add	r3, r2
 8014b04:	009b      	lsls	r3, r3, #2
 8014b06:	440b      	add	r3, r1
 8014b08:	3324      	adds	r3, #36	; 0x24
 8014b0a:	881b      	ldrh	r3, [r3, #0]
 8014b0c:	2b00      	cmp	r3, #0
 8014b0e:	d117      	bne.n	8014b40 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8014b10:	6839      	ldr	r1, [r7, #0]
 8014b12:	6878      	ldr	r0, [r7, #4]
 8014b14:	f000 fb8e 	bl	8015234 <USBD_CtlError>
            break;
 8014b18:	e054      	b.n	8014bc4 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8014b1a:	7bbb      	ldrb	r3, [r7, #14]
 8014b1c:	f003 020f 	and.w	r2, r3, #15
 8014b20:	6879      	ldr	r1, [r7, #4]
 8014b22:	4613      	mov	r3, r2
 8014b24:	009b      	lsls	r3, r3, #2
 8014b26:	4413      	add	r3, r2
 8014b28:	009b      	lsls	r3, r3, #2
 8014b2a:	440b      	add	r3, r1
 8014b2c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014b30:	881b      	ldrh	r3, [r3, #0]
 8014b32:	2b00      	cmp	r3, #0
 8014b34:	d104      	bne.n	8014b40 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8014b36:	6839      	ldr	r1, [r7, #0]
 8014b38:	6878      	ldr	r0, [r7, #4]
 8014b3a:	f000 fb7b 	bl	8015234 <USBD_CtlError>
            break;
 8014b3e:	e041      	b.n	8014bc4 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014b40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014b44:	2b00      	cmp	r3, #0
 8014b46:	da0b      	bge.n	8014b60 <USBD_StdEPReq+0x224>
 8014b48:	7bbb      	ldrb	r3, [r7, #14]
 8014b4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014b4e:	4613      	mov	r3, r2
 8014b50:	009b      	lsls	r3, r3, #2
 8014b52:	4413      	add	r3, r2
 8014b54:	009b      	lsls	r3, r3, #2
 8014b56:	3310      	adds	r3, #16
 8014b58:	687a      	ldr	r2, [r7, #4]
 8014b5a:	4413      	add	r3, r2
 8014b5c:	3304      	adds	r3, #4
 8014b5e:	e00b      	b.n	8014b78 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8014b60:	7bbb      	ldrb	r3, [r7, #14]
 8014b62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014b66:	4613      	mov	r3, r2
 8014b68:	009b      	lsls	r3, r3, #2
 8014b6a:	4413      	add	r3, r2
 8014b6c:	009b      	lsls	r3, r3, #2
 8014b6e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8014b72:	687a      	ldr	r2, [r7, #4]
 8014b74:	4413      	add	r3, r2
 8014b76:	3304      	adds	r3, #4
 8014b78:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8014b7a:	7bbb      	ldrb	r3, [r7, #14]
 8014b7c:	2b00      	cmp	r3, #0
 8014b7e:	d002      	beq.n	8014b86 <USBD_StdEPReq+0x24a>
 8014b80:	7bbb      	ldrb	r3, [r7, #14]
 8014b82:	2b80      	cmp	r3, #128	; 0x80
 8014b84:	d103      	bne.n	8014b8e <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8014b86:	68bb      	ldr	r3, [r7, #8]
 8014b88:	2200      	movs	r2, #0
 8014b8a:	601a      	str	r2, [r3, #0]
 8014b8c:	e00e      	b.n	8014bac <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8014b8e:	7bbb      	ldrb	r3, [r7, #14]
 8014b90:	4619      	mov	r1, r3
 8014b92:	6878      	ldr	r0, [r7, #4]
 8014b94:	f003 fb45 	bl	8018222 <USBD_LL_IsStallEP>
 8014b98:	4603      	mov	r3, r0
 8014b9a:	2b00      	cmp	r3, #0
 8014b9c:	d003      	beq.n	8014ba6 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8014b9e:	68bb      	ldr	r3, [r7, #8]
 8014ba0:	2201      	movs	r2, #1
 8014ba2:	601a      	str	r2, [r3, #0]
 8014ba4:	e002      	b.n	8014bac <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8014ba6:	68bb      	ldr	r3, [r7, #8]
 8014ba8:	2200      	movs	r2, #0
 8014baa:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014bac:	68bb      	ldr	r3, [r7, #8]
 8014bae:	2202      	movs	r2, #2
 8014bb0:	4619      	mov	r1, r3
 8014bb2:	6878      	ldr	r0, [r7, #4]
 8014bb4:	f000 fbaf 	bl	8015316 <USBD_CtlSendData>
          break;
 8014bb8:	e004      	b.n	8014bc4 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8014bba:	6839      	ldr	r1, [r7, #0]
 8014bbc:	6878      	ldr	r0, [r7, #4]
 8014bbe:	f000 fb39 	bl	8015234 <USBD_CtlError>
        break;
 8014bc2:	bf00      	nop
      }
      break;
 8014bc4:	e004      	b.n	8014bd0 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8014bc6:	6839      	ldr	r1, [r7, #0]
 8014bc8:	6878      	ldr	r0, [r7, #4]
 8014bca:	f000 fb33 	bl	8015234 <USBD_CtlError>
      break;
 8014bce:	bf00      	nop
    }
    break;
 8014bd0:	e004      	b.n	8014bdc <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8014bd2:	6839      	ldr	r1, [r7, #0]
 8014bd4:	6878      	ldr	r0, [r7, #4]
 8014bd6:	f000 fb2d 	bl	8015234 <USBD_CtlError>
    break;
 8014bda:	bf00      	nop
  }

  return ret;
 8014bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8014bde:	4618      	mov	r0, r3
 8014be0:	3710      	adds	r7, #16
 8014be2:	46bd      	mov	sp, r7
 8014be4:	bd80      	pop	{r7, pc}
	...

08014be8 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014be8:	b580      	push	{r7, lr}
 8014bea:	b084      	sub	sp, #16
 8014bec:	af00      	add	r7, sp, #0
 8014bee:	6078      	str	r0, [r7, #4]
 8014bf0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014bf2:	2300      	movs	r3, #0
 8014bf4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8014bf6:	2300      	movs	r3, #0
 8014bf8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8014bfa:	2300      	movs	r3, #0
 8014bfc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8014bfe:	683b      	ldr	r3, [r7, #0]
 8014c00:	885b      	ldrh	r3, [r3, #2]
 8014c02:	0a1b      	lsrs	r3, r3, #8
 8014c04:	b29b      	uxth	r3, r3
 8014c06:	3b01      	subs	r3, #1
 8014c08:	2b06      	cmp	r3, #6
 8014c0a:	f200 8128 	bhi.w	8014e5e <USBD_GetDescriptor+0x276>
 8014c0e:	a201      	add	r2, pc, #4	; (adr r2, 8014c14 <USBD_GetDescriptor+0x2c>)
 8014c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014c14:	08014c31 	.word	0x08014c31
 8014c18:	08014c49 	.word	0x08014c49
 8014c1c:	08014c89 	.word	0x08014c89
 8014c20:	08014e5f 	.word	0x08014e5f
 8014c24:	08014e5f 	.word	0x08014e5f
 8014c28:	08014dff 	.word	0x08014dff
 8014c2c:	08014e2b 	.word	0x08014e2b
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014c36:	681b      	ldr	r3, [r3, #0]
 8014c38:	687a      	ldr	r2, [r7, #4]
 8014c3a:	7c12      	ldrb	r2, [r2, #16]
 8014c3c:	f107 0108 	add.w	r1, r7, #8
 8014c40:	4610      	mov	r0, r2
 8014c42:	4798      	blx	r3
 8014c44:	60f8      	str	r0, [r7, #12]
    break;
 8014c46:	e112      	b.n	8014e6e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014c48:	687b      	ldr	r3, [r7, #4]
 8014c4a:	7c1b      	ldrb	r3, [r3, #16]
 8014c4c:	2b00      	cmp	r3, #0
 8014c4e:	d10d      	bne.n	8014c6c <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8014c50:	687b      	ldr	r3, [r7, #4]
 8014c52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014c58:	f107 0208 	add.w	r2, r7, #8
 8014c5c:	4610      	mov	r0, r2
 8014c5e:	4798      	blx	r3
 8014c60:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014c62:	68fb      	ldr	r3, [r7, #12]
 8014c64:	3301      	adds	r3, #1
 8014c66:	2202      	movs	r2, #2
 8014c68:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8014c6a:	e100      	b.n	8014e6e <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8014c6c:	687b      	ldr	r3, [r7, #4]
 8014c6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c74:	f107 0208 	add.w	r2, r7, #8
 8014c78:	4610      	mov	r0, r2
 8014c7a:	4798      	blx	r3
 8014c7c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014c7e:	68fb      	ldr	r3, [r7, #12]
 8014c80:	3301      	adds	r3, #1
 8014c82:	2202      	movs	r2, #2
 8014c84:	701a      	strb	r2, [r3, #0]
    break;
 8014c86:	e0f2      	b.n	8014e6e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8014c88:	683b      	ldr	r3, [r7, #0]
 8014c8a:	885b      	ldrh	r3, [r3, #2]
 8014c8c:	b2db      	uxtb	r3, r3
 8014c8e:	2b05      	cmp	r3, #5
 8014c90:	f200 80ac 	bhi.w	8014dec <USBD_GetDescriptor+0x204>
 8014c94:	a201      	add	r2, pc, #4	; (adr r2, 8014c9c <USBD_GetDescriptor+0xb4>)
 8014c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014c9a:	bf00      	nop
 8014c9c:	08014cb5 	.word	0x08014cb5
 8014ca0:	08014ce9 	.word	0x08014ce9
 8014ca4:	08014d1d 	.word	0x08014d1d
 8014ca8:	08014d51 	.word	0x08014d51
 8014cac:	08014d85 	.word	0x08014d85
 8014cb0:	08014db9 	.word	0x08014db9
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014cba:	685b      	ldr	r3, [r3, #4]
 8014cbc:	2b00      	cmp	r3, #0
 8014cbe:	d00b      	beq.n	8014cd8 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8014cc0:	687b      	ldr	r3, [r7, #4]
 8014cc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014cc6:	685b      	ldr	r3, [r3, #4]
 8014cc8:	687a      	ldr	r2, [r7, #4]
 8014cca:	7c12      	ldrb	r2, [r2, #16]
 8014ccc:	f107 0108 	add.w	r1, r7, #8
 8014cd0:	4610      	mov	r0, r2
 8014cd2:	4798      	blx	r3
 8014cd4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014cd6:	e091      	b.n	8014dfc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8014cd8:	6839      	ldr	r1, [r7, #0]
 8014cda:	6878      	ldr	r0, [r7, #4]
 8014cdc:	f000 faaa 	bl	8015234 <USBD_CtlError>
        err++;
 8014ce0:	7afb      	ldrb	r3, [r7, #11]
 8014ce2:	3301      	adds	r3, #1
 8014ce4:	72fb      	strb	r3, [r7, #11]
      break;
 8014ce6:	e089      	b.n	8014dfc <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014cee:	689b      	ldr	r3, [r3, #8]
 8014cf0:	2b00      	cmp	r3, #0
 8014cf2:	d00b      	beq.n	8014d0c <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8014cf4:	687b      	ldr	r3, [r7, #4]
 8014cf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014cfa:	689b      	ldr	r3, [r3, #8]
 8014cfc:	687a      	ldr	r2, [r7, #4]
 8014cfe:	7c12      	ldrb	r2, [r2, #16]
 8014d00:	f107 0108 	add.w	r1, r7, #8
 8014d04:	4610      	mov	r0, r2
 8014d06:	4798      	blx	r3
 8014d08:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014d0a:	e077      	b.n	8014dfc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8014d0c:	6839      	ldr	r1, [r7, #0]
 8014d0e:	6878      	ldr	r0, [r7, #4]
 8014d10:	f000 fa90 	bl	8015234 <USBD_CtlError>
        err++;
 8014d14:	7afb      	ldrb	r3, [r7, #11]
 8014d16:	3301      	adds	r3, #1
 8014d18:	72fb      	strb	r3, [r7, #11]
      break;
 8014d1a:	e06f      	b.n	8014dfc <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014d22:	68db      	ldr	r3, [r3, #12]
 8014d24:	2b00      	cmp	r3, #0
 8014d26:	d00b      	beq.n	8014d40 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8014d28:	687b      	ldr	r3, [r7, #4]
 8014d2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014d2e:	68db      	ldr	r3, [r3, #12]
 8014d30:	687a      	ldr	r2, [r7, #4]
 8014d32:	7c12      	ldrb	r2, [r2, #16]
 8014d34:	f107 0108 	add.w	r1, r7, #8
 8014d38:	4610      	mov	r0, r2
 8014d3a:	4798      	blx	r3
 8014d3c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014d3e:	e05d      	b.n	8014dfc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8014d40:	6839      	ldr	r1, [r7, #0]
 8014d42:	6878      	ldr	r0, [r7, #4]
 8014d44:	f000 fa76 	bl	8015234 <USBD_CtlError>
        err++;
 8014d48:	7afb      	ldrb	r3, [r7, #11]
 8014d4a:	3301      	adds	r3, #1
 8014d4c:	72fb      	strb	r3, [r7, #11]
      break;
 8014d4e:	e055      	b.n	8014dfc <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8014d50:	687b      	ldr	r3, [r7, #4]
 8014d52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014d56:	691b      	ldr	r3, [r3, #16]
 8014d58:	2b00      	cmp	r3, #0
 8014d5a:	d00b      	beq.n	8014d74 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014d62:	691b      	ldr	r3, [r3, #16]
 8014d64:	687a      	ldr	r2, [r7, #4]
 8014d66:	7c12      	ldrb	r2, [r2, #16]
 8014d68:	f107 0108 	add.w	r1, r7, #8
 8014d6c:	4610      	mov	r0, r2
 8014d6e:	4798      	blx	r3
 8014d70:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014d72:	e043      	b.n	8014dfc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8014d74:	6839      	ldr	r1, [r7, #0]
 8014d76:	6878      	ldr	r0, [r7, #4]
 8014d78:	f000 fa5c 	bl	8015234 <USBD_CtlError>
        err++;
 8014d7c:	7afb      	ldrb	r3, [r7, #11]
 8014d7e:	3301      	adds	r3, #1
 8014d80:	72fb      	strb	r3, [r7, #11]
      break;
 8014d82:	e03b      	b.n	8014dfc <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014d8a:	695b      	ldr	r3, [r3, #20]
 8014d8c:	2b00      	cmp	r3, #0
 8014d8e:	d00b      	beq.n	8014da8 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8014d90:	687b      	ldr	r3, [r7, #4]
 8014d92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014d96:	695b      	ldr	r3, [r3, #20]
 8014d98:	687a      	ldr	r2, [r7, #4]
 8014d9a:	7c12      	ldrb	r2, [r2, #16]
 8014d9c:	f107 0108 	add.w	r1, r7, #8
 8014da0:	4610      	mov	r0, r2
 8014da2:	4798      	blx	r3
 8014da4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014da6:	e029      	b.n	8014dfc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8014da8:	6839      	ldr	r1, [r7, #0]
 8014daa:	6878      	ldr	r0, [r7, #4]
 8014dac:	f000 fa42 	bl	8015234 <USBD_CtlError>
        err++;
 8014db0:	7afb      	ldrb	r3, [r7, #11]
 8014db2:	3301      	adds	r3, #1
 8014db4:	72fb      	strb	r3, [r7, #11]
      break;
 8014db6:	e021      	b.n	8014dfc <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014dbe:	699b      	ldr	r3, [r3, #24]
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	d00b      	beq.n	8014ddc <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014dca:	699b      	ldr	r3, [r3, #24]
 8014dcc:	687a      	ldr	r2, [r7, #4]
 8014dce:	7c12      	ldrb	r2, [r2, #16]
 8014dd0:	f107 0108 	add.w	r1, r7, #8
 8014dd4:	4610      	mov	r0, r2
 8014dd6:	4798      	blx	r3
 8014dd8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014dda:	e00f      	b.n	8014dfc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8014ddc:	6839      	ldr	r1, [r7, #0]
 8014dde:	6878      	ldr	r0, [r7, #4]
 8014de0:	f000 fa28 	bl	8015234 <USBD_CtlError>
        err++;
 8014de4:	7afb      	ldrb	r3, [r7, #11]
 8014de6:	3301      	adds	r3, #1
 8014de8:	72fb      	strb	r3, [r7, #11]
      break;
 8014dea:	e007      	b.n	8014dfc <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8014dec:	6839      	ldr	r1, [r7, #0]
 8014dee:	6878      	ldr	r0, [r7, #4]
 8014df0:	f000 fa20 	bl	8015234 <USBD_CtlError>
      err++;
 8014df4:	7afb      	ldrb	r3, [r7, #11]
 8014df6:	3301      	adds	r3, #1
 8014df8:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8014dfa:	bf00      	nop
    }
    break;
 8014dfc:	e037      	b.n	8014e6e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	7c1b      	ldrb	r3, [r3, #16]
 8014e02:	2b00      	cmp	r3, #0
 8014e04:	d109      	bne.n	8014e1a <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014e0e:	f107 0208 	add.w	r2, r7, #8
 8014e12:	4610      	mov	r0, r2
 8014e14:	4798      	blx	r3
 8014e16:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8014e18:	e029      	b.n	8014e6e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8014e1a:	6839      	ldr	r1, [r7, #0]
 8014e1c:	6878      	ldr	r0, [r7, #4]
 8014e1e:	f000 fa09 	bl	8015234 <USBD_CtlError>
      err++;
 8014e22:	7afb      	ldrb	r3, [r7, #11]
 8014e24:	3301      	adds	r3, #1
 8014e26:	72fb      	strb	r3, [r7, #11]
    break;
 8014e28:	e021      	b.n	8014e6e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	7c1b      	ldrb	r3, [r3, #16]
 8014e2e:	2b00      	cmp	r3, #0
 8014e30:	d10d      	bne.n	8014e4e <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8014e32:	687b      	ldr	r3, [r7, #4]
 8014e34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014e3a:	f107 0208 	add.w	r2, r7, #8
 8014e3e:	4610      	mov	r0, r2
 8014e40:	4798      	blx	r3
 8014e42:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8014e44:	68fb      	ldr	r3, [r7, #12]
 8014e46:	3301      	adds	r3, #1
 8014e48:	2207      	movs	r2, #7
 8014e4a:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8014e4c:	e00f      	b.n	8014e6e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8014e4e:	6839      	ldr	r1, [r7, #0]
 8014e50:	6878      	ldr	r0, [r7, #4]
 8014e52:	f000 f9ef 	bl	8015234 <USBD_CtlError>
      err++;
 8014e56:	7afb      	ldrb	r3, [r7, #11]
 8014e58:	3301      	adds	r3, #1
 8014e5a:	72fb      	strb	r3, [r7, #11]
    break;
 8014e5c:	e007      	b.n	8014e6e <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8014e5e:	6839      	ldr	r1, [r7, #0]
 8014e60:	6878      	ldr	r0, [r7, #4]
 8014e62:	f000 f9e7 	bl	8015234 <USBD_CtlError>
    err++;
 8014e66:	7afb      	ldrb	r3, [r7, #11]
 8014e68:	3301      	adds	r3, #1
 8014e6a:	72fb      	strb	r3, [r7, #11]
    break;
 8014e6c:	bf00      	nop
  }

  if (err != 0U)
 8014e6e:	7afb      	ldrb	r3, [r7, #11]
 8014e70:	2b00      	cmp	r3, #0
 8014e72:	d11e      	bne.n	8014eb2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8014e74:	683b      	ldr	r3, [r7, #0]
 8014e76:	88db      	ldrh	r3, [r3, #6]
 8014e78:	2b00      	cmp	r3, #0
 8014e7a:	d016      	beq.n	8014eaa <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8014e7c:	893b      	ldrh	r3, [r7, #8]
 8014e7e:	2b00      	cmp	r3, #0
 8014e80:	d00e      	beq.n	8014ea0 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8014e82:	683b      	ldr	r3, [r7, #0]
 8014e84:	88da      	ldrh	r2, [r3, #6]
 8014e86:	893b      	ldrh	r3, [r7, #8]
 8014e88:	4293      	cmp	r3, r2
 8014e8a:	bf28      	it	cs
 8014e8c:	4613      	movcs	r3, r2
 8014e8e:	b29b      	uxth	r3, r3
 8014e90:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8014e92:	893b      	ldrh	r3, [r7, #8]
 8014e94:	461a      	mov	r2, r3
 8014e96:	68f9      	ldr	r1, [r7, #12]
 8014e98:	6878      	ldr	r0, [r7, #4]
 8014e9a:	f000 fa3c 	bl	8015316 <USBD_CtlSendData>
 8014e9e:	e009      	b.n	8014eb4 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8014ea0:	6839      	ldr	r1, [r7, #0]
 8014ea2:	6878      	ldr	r0, [r7, #4]
 8014ea4:	f000 f9c6 	bl	8015234 <USBD_CtlError>
 8014ea8:	e004      	b.n	8014eb4 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8014eaa:	6878      	ldr	r0, [r7, #4]
 8014eac:	f000 fa70 	bl	8015390 <USBD_CtlSendStatus>
 8014eb0:	e000      	b.n	8014eb4 <USBD_GetDescriptor+0x2cc>
    return;
 8014eb2:	bf00      	nop
    }
  }
}
 8014eb4:	3710      	adds	r7, #16
 8014eb6:	46bd      	mov	sp, r7
 8014eb8:	bd80      	pop	{r7, pc}
 8014eba:	bf00      	nop

08014ebc <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014ebc:	b580      	push	{r7, lr}
 8014ebe:	b084      	sub	sp, #16
 8014ec0:	af00      	add	r7, sp, #0
 8014ec2:	6078      	str	r0, [r7, #4]
 8014ec4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8014ec6:	683b      	ldr	r3, [r7, #0]
 8014ec8:	889b      	ldrh	r3, [r3, #4]
 8014eca:	2b00      	cmp	r3, #0
 8014ecc:	d130      	bne.n	8014f30 <USBD_SetAddress+0x74>
 8014ece:	683b      	ldr	r3, [r7, #0]
 8014ed0:	88db      	ldrh	r3, [r3, #6]
 8014ed2:	2b00      	cmp	r3, #0
 8014ed4:	d12c      	bne.n	8014f30 <USBD_SetAddress+0x74>
 8014ed6:	683b      	ldr	r3, [r7, #0]
 8014ed8:	885b      	ldrh	r3, [r3, #2]
 8014eda:	2b7f      	cmp	r3, #127	; 0x7f
 8014edc:	d828      	bhi.n	8014f30 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8014ede:	683b      	ldr	r3, [r7, #0]
 8014ee0:	885b      	ldrh	r3, [r3, #2]
 8014ee2:	b2db      	uxtb	r3, r3
 8014ee4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014ee8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014eea:	687b      	ldr	r3, [r7, #4]
 8014eec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014ef0:	2b03      	cmp	r3, #3
 8014ef2:	d104      	bne.n	8014efe <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8014ef4:	6839      	ldr	r1, [r7, #0]
 8014ef6:	6878      	ldr	r0, [r7, #4]
 8014ef8:	f000 f99c 	bl	8015234 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014efc:	e01c      	b.n	8014f38 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8014efe:	687b      	ldr	r3, [r7, #4]
 8014f00:	7bfa      	ldrb	r2, [r7, #15]
 8014f02:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8014f06:	7bfb      	ldrb	r3, [r7, #15]
 8014f08:	4619      	mov	r1, r3
 8014f0a:	6878      	ldr	r0, [r7, #4]
 8014f0c:	f003 f9b5 	bl	801827a <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8014f10:	6878      	ldr	r0, [r7, #4]
 8014f12:	f000 fa3d 	bl	8015390 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8014f16:	7bfb      	ldrb	r3, [r7, #15]
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	d004      	beq.n	8014f26 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	2202      	movs	r2, #2
 8014f20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014f24:	e008      	b.n	8014f38 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	2201      	movs	r2, #1
 8014f2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014f2e:	e003      	b.n	8014f38 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8014f30:	6839      	ldr	r1, [r7, #0]
 8014f32:	6878      	ldr	r0, [r7, #4]
 8014f34:	f000 f97e 	bl	8015234 <USBD_CtlError>
  }
}
 8014f38:	bf00      	nop
 8014f3a:	3710      	adds	r7, #16
 8014f3c:	46bd      	mov	sp, r7
 8014f3e:	bd80      	pop	{r7, pc}

08014f40 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014f40:	b580      	push	{r7, lr}
 8014f42:	b084      	sub	sp, #16
 8014f44:	af00      	add	r7, sp, #0
 8014f46:	6078      	str	r0, [r7, #4]
 8014f48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014f4a:	2300      	movs	r3, #0
 8014f4c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8014f4e:	683b      	ldr	r3, [r7, #0]
 8014f50:	885b      	ldrh	r3, [r3, #2]
 8014f52:	b2da      	uxtb	r2, r3
 8014f54:	4b4b      	ldr	r3, [pc, #300]	; (8015084 <USBD_SetConfig+0x144>)
 8014f56:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8014f58:	4b4a      	ldr	r3, [pc, #296]	; (8015084 <USBD_SetConfig+0x144>)
 8014f5a:	781b      	ldrb	r3, [r3, #0]
 8014f5c:	2b01      	cmp	r3, #1
 8014f5e:	d905      	bls.n	8014f6c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8014f60:	6839      	ldr	r1, [r7, #0]
 8014f62:	6878      	ldr	r0, [r7, #4]
 8014f64:	f000 f966 	bl	8015234 <USBD_CtlError>
    return USBD_FAIL;
 8014f68:	2303      	movs	r3, #3
 8014f6a:	e087      	b.n	801507c <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014f72:	2b02      	cmp	r3, #2
 8014f74:	d002      	beq.n	8014f7c <USBD_SetConfig+0x3c>
 8014f76:	2b03      	cmp	r3, #3
 8014f78:	d025      	beq.n	8014fc6 <USBD_SetConfig+0x86>
 8014f7a:	e071      	b.n	8015060 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8014f7c:	4b41      	ldr	r3, [pc, #260]	; (8015084 <USBD_SetConfig+0x144>)
 8014f7e:	781b      	ldrb	r3, [r3, #0]
 8014f80:	2b00      	cmp	r3, #0
 8014f82:	d01c      	beq.n	8014fbe <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8014f84:	4b3f      	ldr	r3, [pc, #252]	; (8015084 <USBD_SetConfig+0x144>)
 8014f86:	781b      	ldrb	r3, [r3, #0]
 8014f88:	461a      	mov	r2, r3
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8014f8e:	4b3d      	ldr	r3, [pc, #244]	; (8015084 <USBD_SetConfig+0x144>)
 8014f90:	781b      	ldrb	r3, [r3, #0]
 8014f92:	4619      	mov	r1, r3
 8014f94:	6878      	ldr	r0, [r7, #4]
 8014f96:	f7ff f9a8 	bl	80142ea <USBD_SetClassConfig>
 8014f9a:	4603      	mov	r3, r0
 8014f9c:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8014f9e:	7bfb      	ldrb	r3, [r7, #15]
 8014fa0:	2b00      	cmp	r3, #0
 8014fa2:	d004      	beq.n	8014fae <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8014fa4:	6839      	ldr	r1, [r7, #0]
 8014fa6:	6878      	ldr	r0, [r7, #4]
 8014fa8:	f000 f944 	bl	8015234 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8014fac:	e065      	b.n	801507a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8014fae:	6878      	ldr	r0, [r7, #4]
 8014fb0:	f000 f9ee 	bl	8015390 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	2203      	movs	r2, #3
 8014fb8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8014fbc:	e05d      	b.n	801507a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8014fbe:	6878      	ldr	r0, [r7, #4]
 8014fc0:	f000 f9e6 	bl	8015390 <USBD_CtlSendStatus>
    break;
 8014fc4:	e059      	b.n	801507a <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8014fc6:	4b2f      	ldr	r3, [pc, #188]	; (8015084 <USBD_SetConfig+0x144>)
 8014fc8:	781b      	ldrb	r3, [r3, #0]
 8014fca:	2b00      	cmp	r3, #0
 8014fcc:	d112      	bne.n	8014ff4 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8014fce:	687b      	ldr	r3, [r7, #4]
 8014fd0:	2202      	movs	r2, #2
 8014fd2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8014fd6:	4b2b      	ldr	r3, [pc, #172]	; (8015084 <USBD_SetConfig+0x144>)
 8014fd8:	781b      	ldrb	r3, [r3, #0]
 8014fda:	461a      	mov	r2, r3
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014fe0:	4b28      	ldr	r3, [pc, #160]	; (8015084 <USBD_SetConfig+0x144>)
 8014fe2:	781b      	ldrb	r3, [r3, #0]
 8014fe4:	4619      	mov	r1, r3
 8014fe6:	6878      	ldr	r0, [r7, #4]
 8014fe8:	f7ff f99b 	bl	8014322 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8014fec:	6878      	ldr	r0, [r7, #4]
 8014fee:	f000 f9cf 	bl	8015390 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8014ff2:	e042      	b.n	801507a <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8014ff4:	4b23      	ldr	r3, [pc, #140]	; (8015084 <USBD_SetConfig+0x144>)
 8014ff6:	781b      	ldrb	r3, [r3, #0]
 8014ff8:	461a      	mov	r2, r3
 8014ffa:	687b      	ldr	r3, [r7, #4]
 8014ffc:	685b      	ldr	r3, [r3, #4]
 8014ffe:	429a      	cmp	r2, r3
 8015000:	d02a      	beq.n	8015058 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	685b      	ldr	r3, [r3, #4]
 8015006:	b2db      	uxtb	r3, r3
 8015008:	4619      	mov	r1, r3
 801500a:	6878      	ldr	r0, [r7, #4]
 801500c:	f7ff f989 	bl	8014322 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8015010:	4b1c      	ldr	r3, [pc, #112]	; (8015084 <USBD_SetConfig+0x144>)
 8015012:	781b      	ldrb	r3, [r3, #0]
 8015014:	461a      	mov	r2, r3
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 801501a:	4b1a      	ldr	r3, [pc, #104]	; (8015084 <USBD_SetConfig+0x144>)
 801501c:	781b      	ldrb	r3, [r3, #0]
 801501e:	4619      	mov	r1, r3
 8015020:	6878      	ldr	r0, [r7, #4]
 8015022:	f7ff f962 	bl	80142ea <USBD_SetClassConfig>
 8015026:	4603      	mov	r3, r0
 8015028:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 801502a:	7bfb      	ldrb	r3, [r7, #15]
 801502c:	2b00      	cmp	r3, #0
 801502e:	d00f      	beq.n	8015050 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8015030:	6839      	ldr	r1, [r7, #0]
 8015032:	6878      	ldr	r0, [r7, #4]
 8015034:	f000 f8fe 	bl	8015234 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	685b      	ldr	r3, [r3, #4]
 801503c:	b2db      	uxtb	r3, r3
 801503e:	4619      	mov	r1, r3
 8015040:	6878      	ldr	r0, [r7, #4]
 8015042:	f7ff f96e 	bl	8014322 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	2202      	movs	r2, #2
 801504a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 801504e:	e014      	b.n	801507a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8015050:	6878      	ldr	r0, [r7, #4]
 8015052:	f000 f99d 	bl	8015390 <USBD_CtlSendStatus>
    break;
 8015056:	e010      	b.n	801507a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8015058:	6878      	ldr	r0, [r7, #4]
 801505a:	f000 f999 	bl	8015390 <USBD_CtlSendStatus>
    break;
 801505e:	e00c      	b.n	801507a <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8015060:	6839      	ldr	r1, [r7, #0]
 8015062:	6878      	ldr	r0, [r7, #4]
 8015064:	f000 f8e6 	bl	8015234 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8015068:	4b06      	ldr	r3, [pc, #24]	; (8015084 <USBD_SetConfig+0x144>)
 801506a:	781b      	ldrb	r3, [r3, #0]
 801506c:	4619      	mov	r1, r3
 801506e:	6878      	ldr	r0, [r7, #4]
 8015070:	f7ff f957 	bl	8014322 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8015074:	2303      	movs	r3, #3
 8015076:	73fb      	strb	r3, [r7, #15]
    break;
 8015078:	bf00      	nop
  }

  return ret;
 801507a:	7bfb      	ldrb	r3, [r7, #15]
}
 801507c:	4618      	mov	r0, r3
 801507e:	3710      	adds	r7, #16
 8015080:	46bd      	mov	sp, r7
 8015082:	bd80      	pop	{r7, pc}
 8015084:	24000b4c 	.word	0x24000b4c

08015088 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015088:	b580      	push	{r7, lr}
 801508a:	b082      	sub	sp, #8
 801508c:	af00      	add	r7, sp, #0
 801508e:	6078      	str	r0, [r7, #4]
 8015090:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8015092:	683b      	ldr	r3, [r7, #0]
 8015094:	88db      	ldrh	r3, [r3, #6]
 8015096:	2b01      	cmp	r3, #1
 8015098:	d004      	beq.n	80150a4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801509a:	6839      	ldr	r1, [r7, #0]
 801509c:	6878      	ldr	r0, [r7, #4]
 801509e:	f000 f8c9 	bl	8015234 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80150a2:	e021      	b.n	80150e8 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80150a4:	687b      	ldr	r3, [r7, #4]
 80150a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80150aa:	2b01      	cmp	r3, #1
 80150ac:	db17      	blt.n	80150de <USBD_GetConfig+0x56>
 80150ae:	2b02      	cmp	r3, #2
 80150b0:	dd02      	ble.n	80150b8 <USBD_GetConfig+0x30>
 80150b2:	2b03      	cmp	r3, #3
 80150b4:	d00b      	beq.n	80150ce <USBD_GetConfig+0x46>
 80150b6:	e012      	b.n	80150de <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80150b8:	687b      	ldr	r3, [r7, #4]
 80150ba:	2200      	movs	r2, #0
 80150bc:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	3308      	adds	r3, #8
 80150c2:	2201      	movs	r2, #1
 80150c4:	4619      	mov	r1, r3
 80150c6:	6878      	ldr	r0, [r7, #4]
 80150c8:	f000 f925 	bl	8015316 <USBD_CtlSendData>
      break;
 80150cc:	e00c      	b.n	80150e8 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80150ce:	687b      	ldr	r3, [r7, #4]
 80150d0:	3304      	adds	r3, #4
 80150d2:	2201      	movs	r2, #1
 80150d4:	4619      	mov	r1, r3
 80150d6:	6878      	ldr	r0, [r7, #4]
 80150d8:	f000 f91d 	bl	8015316 <USBD_CtlSendData>
      break;
 80150dc:	e004      	b.n	80150e8 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 80150de:	6839      	ldr	r1, [r7, #0]
 80150e0:	6878      	ldr	r0, [r7, #4]
 80150e2:	f000 f8a7 	bl	8015234 <USBD_CtlError>
      break;
 80150e6:	bf00      	nop
}
 80150e8:	bf00      	nop
 80150ea:	3708      	adds	r7, #8
 80150ec:	46bd      	mov	sp, r7
 80150ee:	bd80      	pop	{r7, pc}

080150f0 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80150f0:	b580      	push	{r7, lr}
 80150f2:	b082      	sub	sp, #8
 80150f4:	af00      	add	r7, sp, #0
 80150f6:	6078      	str	r0, [r7, #4]
 80150f8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80150fa:	687b      	ldr	r3, [r7, #4]
 80150fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015100:	3b01      	subs	r3, #1
 8015102:	2b02      	cmp	r3, #2
 8015104:	d81e      	bhi.n	8015144 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8015106:	683b      	ldr	r3, [r7, #0]
 8015108:	88db      	ldrh	r3, [r3, #6]
 801510a:	2b02      	cmp	r3, #2
 801510c:	d004      	beq.n	8015118 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 801510e:	6839      	ldr	r1, [r7, #0]
 8015110:	6878      	ldr	r0, [r7, #4]
 8015112:	f000 f88f 	bl	8015234 <USBD_CtlError>
      break;
 8015116:	e01a      	b.n	801514e <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8015118:	687b      	ldr	r3, [r7, #4]
 801511a:	2201      	movs	r2, #1
 801511c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8015124:	2b00      	cmp	r3, #0
 8015126:	d005      	beq.n	8015134 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8015128:	687b      	ldr	r3, [r7, #4]
 801512a:	68db      	ldr	r3, [r3, #12]
 801512c:	f043 0202 	orr.w	r2, r3, #2
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8015134:	687b      	ldr	r3, [r7, #4]
 8015136:	330c      	adds	r3, #12
 8015138:	2202      	movs	r2, #2
 801513a:	4619      	mov	r1, r3
 801513c:	6878      	ldr	r0, [r7, #4]
 801513e:	f000 f8ea 	bl	8015316 <USBD_CtlSendData>
    break;
 8015142:	e004      	b.n	801514e <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8015144:	6839      	ldr	r1, [r7, #0]
 8015146:	6878      	ldr	r0, [r7, #4]
 8015148:	f000 f874 	bl	8015234 <USBD_CtlError>
    break;
 801514c:	bf00      	nop
  }
}
 801514e:	bf00      	nop
 8015150:	3708      	adds	r7, #8
 8015152:	46bd      	mov	sp, r7
 8015154:	bd80      	pop	{r7, pc}

08015156 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015156:	b580      	push	{r7, lr}
 8015158:	b082      	sub	sp, #8
 801515a:	af00      	add	r7, sp, #0
 801515c:	6078      	str	r0, [r7, #4]
 801515e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8015160:	683b      	ldr	r3, [r7, #0]
 8015162:	885b      	ldrh	r3, [r3, #2]
 8015164:	2b01      	cmp	r3, #1
 8015166:	d106      	bne.n	8015176 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8015168:	687b      	ldr	r3, [r7, #4]
 801516a:	2201      	movs	r2, #1
 801516c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8015170:	6878      	ldr	r0, [r7, #4]
 8015172:	f000 f90d 	bl	8015390 <USBD_CtlSendStatus>
  }
}
 8015176:	bf00      	nop
 8015178:	3708      	adds	r7, #8
 801517a:	46bd      	mov	sp, r7
 801517c:	bd80      	pop	{r7, pc}

0801517e <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801517e:	b580      	push	{r7, lr}
 8015180:	b082      	sub	sp, #8
 8015182:	af00      	add	r7, sp, #0
 8015184:	6078      	str	r0, [r7, #4]
 8015186:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801518e:	3b01      	subs	r3, #1
 8015190:	2b02      	cmp	r3, #2
 8015192:	d80b      	bhi.n	80151ac <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8015194:	683b      	ldr	r3, [r7, #0]
 8015196:	885b      	ldrh	r3, [r3, #2]
 8015198:	2b01      	cmp	r3, #1
 801519a:	d10c      	bne.n	80151b6 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	2200      	movs	r2, #0
 80151a0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80151a4:	6878      	ldr	r0, [r7, #4]
 80151a6:	f000 f8f3 	bl	8015390 <USBD_CtlSendStatus>
      }
      break;
 80151aa:	e004      	b.n	80151b6 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80151ac:	6839      	ldr	r1, [r7, #0]
 80151ae:	6878      	ldr	r0, [r7, #4]
 80151b0:	f000 f840 	bl	8015234 <USBD_CtlError>
      break;
 80151b4:	e000      	b.n	80151b8 <USBD_ClrFeature+0x3a>
      break;
 80151b6:	bf00      	nop
  }
}
 80151b8:	bf00      	nop
 80151ba:	3708      	adds	r7, #8
 80151bc:	46bd      	mov	sp, r7
 80151be:	bd80      	pop	{r7, pc}

080151c0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80151c0:	b580      	push	{r7, lr}
 80151c2:	b084      	sub	sp, #16
 80151c4:	af00      	add	r7, sp, #0
 80151c6:	6078      	str	r0, [r7, #4]
 80151c8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80151ca:	683b      	ldr	r3, [r7, #0]
 80151cc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80151ce:	68fb      	ldr	r3, [r7, #12]
 80151d0:	781a      	ldrb	r2, [r3, #0]
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80151d6:	68fb      	ldr	r3, [r7, #12]
 80151d8:	3301      	adds	r3, #1
 80151da:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80151dc:	68fb      	ldr	r3, [r7, #12]
 80151de:	781a      	ldrb	r2, [r3, #0]
 80151e0:	687b      	ldr	r3, [r7, #4]
 80151e2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80151e4:	68fb      	ldr	r3, [r7, #12]
 80151e6:	3301      	adds	r3, #1
 80151e8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80151ea:	68f8      	ldr	r0, [r7, #12]
 80151ec:	f7ff fad4 	bl	8014798 <SWAPBYTE>
 80151f0:	4603      	mov	r3, r0
 80151f2:	461a      	mov	r2, r3
 80151f4:	687b      	ldr	r3, [r7, #4]
 80151f6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80151f8:	68fb      	ldr	r3, [r7, #12]
 80151fa:	3301      	adds	r3, #1
 80151fc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80151fe:	68fb      	ldr	r3, [r7, #12]
 8015200:	3301      	adds	r3, #1
 8015202:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8015204:	68f8      	ldr	r0, [r7, #12]
 8015206:	f7ff fac7 	bl	8014798 <SWAPBYTE>
 801520a:	4603      	mov	r3, r0
 801520c:	461a      	mov	r2, r3
 801520e:	687b      	ldr	r3, [r7, #4]
 8015210:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8015212:	68fb      	ldr	r3, [r7, #12]
 8015214:	3301      	adds	r3, #1
 8015216:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8015218:	68fb      	ldr	r3, [r7, #12]
 801521a:	3301      	adds	r3, #1
 801521c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801521e:	68f8      	ldr	r0, [r7, #12]
 8015220:	f7ff faba 	bl	8014798 <SWAPBYTE>
 8015224:	4603      	mov	r3, r0
 8015226:	461a      	mov	r2, r3
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	80da      	strh	r2, [r3, #6]
}
 801522c:	bf00      	nop
 801522e:	3710      	adds	r7, #16
 8015230:	46bd      	mov	sp, r7
 8015232:	bd80      	pop	{r7, pc}

08015234 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015234:	b580      	push	{r7, lr}
 8015236:	b082      	sub	sp, #8
 8015238:	af00      	add	r7, sp, #0
 801523a:	6078      	str	r0, [r7, #4]
 801523c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801523e:	2180      	movs	r1, #128	; 0x80
 8015240:	6878      	ldr	r0, [r7, #4]
 8015242:	f002 ffb0 	bl	80181a6 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8015246:	2100      	movs	r1, #0
 8015248:	6878      	ldr	r0, [r7, #4]
 801524a:	f002 ffac 	bl	80181a6 <USBD_LL_StallEP>
}
 801524e:	bf00      	nop
 8015250:	3708      	adds	r7, #8
 8015252:	46bd      	mov	sp, r7
 8015254:	bd80      	pop	{r7, pc}

08015256 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8015256:	b580      	push	{r7, lr}
 8015258:	b086      	sub	sp, #24
 801525a:	af00      	add	r7, sp, #0
 801525c:	60f8      	str	r0, [r7, #12]
 801525e:	60b9      	str	r1, [r7, #8]
 8015260:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8015262:	2300      	movs	r3, #0
 8015264:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8015266:	68fb      	ldr	r3, [r7, #12]
 8015268:	2b00      	cmp	r3, #0
 801526a:	d036      	beq.n	80152da <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801526c:	68fb      	ldr	r3, [r7, #12]
 801526e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8015270:	6938      	ldr	r0, [r7, #16]
 8015272:	f000 f836 	bl	80152e2 <USBD_GetLen>
 8015276:	4603      	mov	r3, r0
 8015278:	3301      	adds	r3, #1
 801527a:	b29b      	uxth	r3, r3
 801527c:	005b      	lsls	r3, r3, #1
 801527e:	b29a      	uxth	r2, r3
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8015284:	7dfb      	ldrb	r3, [r7, #23]
 8015286:	68ba      	ldr	r2, [r7, #8]
 8015288:	4413      	add	r3, r2
 801528a:	687a      	ldr	r2, [r7, #4]
 801528c:	7812      	ldrb	r2, [r2, #0]
 801528e:	701a      	strb	r2, [r3, #0]
  idx++;
 8015290:	7dfb      	ldrb	r3, [r7, #23]
 8015292:	3301      	adds	r3, #1
 8015294:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8015296:	7dfb      	ldrb	r3, [r7, #23]
 8015298:	68ba      	ldr	r2, [r7, #8]
 801529a:	4413      	add	r3, r2
 801529c:	2203      	movs	r2, #3
 801529e:	701a      	strb	r2, [r3, #0]
  idx++;
 80152a0:	7dfb      	ldrb	r3, [r7, #23]
 80152a2:	3301      	adds	r3, #1
 80152a4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80152a6:	e013      	b.n	80152d0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80152a8:	7dfb      	ldrb	r3, [r7, #23]
 80152aa:	68ba      	ldr	r2, [r7, #8]
 80152ac:	4413      	add	r3, r2
 80152ae:	693a      	ldr	r2, [r7, #16]
 80152b0:	7812      	ldrb	r2, [r2, #0]
 80152b2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80152b4:	693b      	ldr	r3, [r7, #16]
 80152b6:	3301      	adds	r3, #1
 80152b8:	613b      	str	r3, [r7, #16]
    idx++;
 80152ba:	7dfb      	ldrb	r3, [r7, #23]
 80152bc:	3301      	adds	r3, #1
 80152be:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80152c0:	7dfb      	ldrb	r3, [r7, #23]
 80152c2:	68ba      	ldr	r2, [r7, #8]
 80152c4:	4413      	add	r3, r2
 80152c6:	2200      	movs	r2, #0
 80152c8:	701a      	strb	r2, [r3, #0]
    idx++;
 80152ca:	7dfb      	ldrb	r3, [r7, #23]
 80152cc:	3301      	adds	r3, #1
 80152ce:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80152d0:	693b      	ldr	r3, [r7, #16]
 80152d2:	781b      	ldrb	r3, [r3, #0]
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	d1e7      	bne.n	80152a8 <USBD_GetString+0x52>
 80152d8:	e000      	b.n	80152dc <USBD_GetString+0x86>
    return;
 80152da:	bf00      	nop
  }
}
 80152dc:	3718      	adds	r7, #24
 80152de:	46bd      	mov	sp, r7
 80152e0:	bd80      	pop	{r7, pc}

080152e2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80152e2:	b480      	push	{r7}
 80152e4:	b085      	sub	sp, #20
 80152e6:	af00      	add	r7, sp, #0
 80152e8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80152ea:	2300      	movs	r3, #0
 80152ec:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80152ee:	687b      	ldr	r3, [r7, #4]
 80152f0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80152f2:	e005      	b.n	8015300 <USBD_GetLen+0x1e>
  {
    len++;
 80152f4:	7bfb      	ldrb	r3, [r7, #15]
 80152f6:	3301      	adds	r3, #1
 80152f8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80152fa:	68bb      	ldr	r3, [r7, #8]
 80152fc:	3301      	adds	r3, #1
 80152fe:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8015300:	68bb      	ldr	r3, [r7, #8]
 8015302:	781b      	ldrb	r3, [r3, #0]
 8015304:	2b00      	cmp	r3, #0
 8015306:	d1f5      	bne.n	80152f4 <USBD_GetLen+0x12>
  }

  return len;
 8015308:	7bfb      	ldrb	r3, [r7, #15]
}
 801530a:	4618      	mov	r0, r3
 801530c:	3714      	adds	r7, #20
 801530e:	46bd      	mov	sp, r7
 8015310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015314:	4770      	bx	lr

08015316 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8015316:	b580      	push	{r7, lr}
 8015318:	b084      	sub	sp, #16
 801531a:	af00      	add	r7, sp, #0
 801531c:	60f8      	str	r0, [r7, #12]
 801531e:	60b9      	str	r1, [r7, #8]
 8015320:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8015322:	68fb      	ldr	r3, [r7, #12]
 8015324:	2202      	movs	r2, #2
 8015326:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801532a:	68fb      	ldr	r3, [r7, #12]
 801532c:	687a      	ldr	r2, [r7, #4]
 801532e:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8015330:	68fb      	ldr	r3, [r7, #12]
 8015332:	687a      	ldr	r2, [r7, #4]
 8015334:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8015336:	687b      	ldr	r3, [r7, #4]
 8015338:	68ba      	ldr	r2, [r7, #8]
 801533a:	2100      	movs	r1, #0
 801533c:	68f8      	ldr	r0, [r7, #12]
 801533e:	f002 ffbb 	bl	80182b8 <USBD_LL_Transmit>

  return USBD_OK;
 8015342:	2300      	movs	r3, #0
}
 8015344:	4618      	mov	r0, r3
 8015346:	3710      	adds	r7, #16
 8015348:	46bd      	mov	sp, r7
 801534a:	bd80      	pop	{r7, pc}

0801534c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801534c:	b580      	push	{r7, lr}
 801534e:	b084      	sub	sp, #16
 8015350:	af00      	add	r7, sp, #0
 8015352:	60f8      	str	r0, [r7, #12]
 8015354:	60b9      	str	r1, [r7, #8]
 8015356:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8015358:	687b      	ldr	r3, [r7, #4]
 801535a:	68ba      	ldr	r2, [r7, #8]
 801535c:	2100      	movs	r1, #0
 801535e:	68f8      	ldr	r0, [r7, #12]
 8015360:	f002 ffaa 	bl	80182b8 <USBD_LL_Transmit>

  return USBD_OK;
 8015364:	2300      	movs	r3, #0
}
 8015366:	4618      	mov	r0, r3
 8015368:	3710      	adds	r7, #16
 801536a:	46bd      	mov	sp, r7
 801536c:	bd80      	pop	{r7, pc}

0801536e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801536e:	b580      	push	{r7, lr}
 8015370:	b084      	sub	sp, #16
 8015372:	af00      	add	r7, sp, #0
 8015374:	60f8      	str	r0, [r7, #12]
 8015376:	60b9      	str	r1, [r7, #8]
 8015378:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801537a:	687b      	ldr	r3, [r7, #4]
 801537c:	68ba      	ldr	r2, [r7, #8]
 801537e:	2100      	movs	r1, #0
 8015380:	68f8      	ldr	r0, [r7, #12]
 8015382:	f002 ffba 	bl	80182fa <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015386:	2300      	movs	r3, #0
}
 8015388:	4618      	mov	r0, r3
 801538a:	3710      	adds	r7, #16
 801538c:	46bd      	mov	sp, r7
 801538e:	bd80      	pop	{r7, pc}

08015390 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8015390:	b580      	push	{r7, lr}
 8015392:	b082      	sub	sp, #8
 8015394:	af00      	add	r7, sp, #0
 8015396:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8015398:	687b      	ldr	r3, [r7, #4]
 801539a:	2204      	movs	r2, #4
 801539c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80153a0:	2300      	movs	r3, #0
 80153a2:	2200      	movs	r2, #0
 80153a4:	2100      	movs	r1, #0
 80153a6:	6878      	ldr	r0, [r7, #4]
 80153a8:	f002 ff86 	bl	80182b8 <USBD_LL_Transmit>

  return USBD_OK;
 80153ac:	2300      	movs	r3, #0
}
 80153ae:	4618      	mov	r0, r3
 80153b0:	3708      	adds	r7, #8
 80153b2:	46bd      	mov	sp, r7
 80153b4:	bd80      	pop	{r7, pc}

080153b6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80153b6:	b580      	push	{r7, lr}
 80153b8:	b082      	sub	sp, #8
 80153ba:	af00      	add	r7, sp, #0
 80153bc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80153be:	687b      	ldr	r3, [r7, #4]
 80153c0:	2205      	movs	r2, #5
 80153c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80153c6:	2300      	movs	r3, #0
 80153c8:	2200      	movs	r2, #0
 80153ca:	2100      	movs	r1, #0
 80153cc:	6878      	ldr	r0, [r7, #4]
 80153ce:	f002 ff94 	bl	80182fa <USBD_LL_PrepareReceive>

  return USBD_OK;
 80153d2:	2300      	movs	r3, #0
}
 80153d4:	4618      	mov	r0, r3
 80153d6:	3708      	adds	r7, #8
 80153d8:	46bd      	mov	sp, r7
 80153da:	bd80      	pop	{r7, pc}

080153dc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80153dc:	b580      	push	{r7, lr}
 80153de:	b084      	sub	sp, #16
 80153e0:	af00      	add	r7, sp, #0
 80153e2:	4603      	mov	r3, r0
 80153e4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80153e6:	79fb      	ldrb	r3, [r7, #7]
 80153e8:	4a08      	ldr	r2, [pc, #32]	; (801540c <disk_status+0x30>)
 80153ea:	009b      	lsls	r3, r3, #2
 80153ec:	4413      	add	r3, r2
 80153ee:	685b      	ldr	r3, [r3, #4]
 80153f0:	685b      	ldr	r3, [r3, #4]
 80153f2:	79fa      	ldrb	r2, [r7, #7]
 80153f4:	4905      	ldr	r1, [pc, #20]	; (801540c <disk_status+0x30>)
 80153f6:	440a      	add	r2, r1
 80153f8:	7a12      	ldrb	r2, [r2, #8]
 80153fa:	4610      	mov	r0, r2
 80153fc:	4798      	blx	r3
 80153fe:	4603      	mov	r3, r0
 8015400:	73fb      	strb	r3, [r7, #15]
  return stat;
 8015402:	7bfb      	ldrb	r3, [r7, #15]
}
 8015404:	4618      	mov	r0, r3
 8015406:	3710      	adds	r7, #16
 8015408:	46bd      	mov	sp, r7
 801540a:	bd80      	pop	{r7, pc}
 801540c:	24000b78 	.word	0x24000b78

08015410 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8015410:	b580      	push	{r7, lr}
 8015412:	b084      	sub	sp, #16
 8015414:	af00      	add	r7, sp, #0
 8015416:	4603      	mov	r3, r0
 8015418:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801541a:	2300      	movs	r3, #0
 801541c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801541e:	79fb      	ldrb	r3, [r7, #7]
 8015420:	4a0d      	ldr	r2, [pc, #52]	; (8015458 <disk_initialize+0x48>)
 8015422:	5cd3      	ldrb	r3, [r2, r3]
 8015424:	2b00      	cmp	r3, #0
 8015426:	d111      	bne.n	801544c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8015428:	79fb      	ldrb	r3, [r7, #7]
 801542a:	4a0b      	ldr	r2, [pc, #44]	; (8015458 <disk_initialize+0x48>)
 801542c:	2101      	movs	r1, #1
 801542e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8015430:	79fb      	ldrb	r3, [r7, #7]
 8015432:	4a09      	ldr	r2, [pc, #36]	; (8015458 <disk_initialize+0x48>)
 8015434:	009b      	lsls	r3, r3, #2
 8015436:	4413      	add	r3, r2
 8015438:	685b      	ldr	r3, [r3, #4]
 801543a:	681b      	ldr	r3, [r3, #0]
 801543c:	79fa      	ldrb	r2, [r7, #7]
 801543e:	4906      	ldr	r1, [pc, #24]	; (8015458 <disk_initialize+0x48>)
 8015440:	440a      	add	r2, r1
 8015442:	7a12      	ldrb	r2, [r2, #8]
 8015444:	4610      	mov	r0, r2
 8015446:	4798      	blx	r3
 8015448:	4603      	mov	r3, r0
 801544a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 801544c:	7bfb      	ldrb	r3, [r7, #15]
}
 801544e:	4618      	mov	r0, r3
 8015450:	3710      	adds	r7, #16
 8015452:	46bd      	mov	sp, r7
 8015454:	bd80      	pop	{r7, pc}
 8015456:	bf00      	nop
 8015458:	24000b78 	.word	0x24000b78

0801545c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 801545c:	b590      	push	{r4, r7, lr}
 801545e:	b087      	sub	sp, #28
 8015460:	af00      	add	r7, sp, #0
 8015462:	60b9      	str	r1, [r7, #8]
 8015464:	607a      	str	r2, [r7, #4]
 8015466:	603b      	str	r3, [r7, #0]
 8015468:	4603      	mov	r3, r0
 801546a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801546c:	7bfb      	ldrb	r3, [r7, #15]
 801546e:	4a0a      	ldr	r2, [pc, #40]	; (8015498 <disk_read+0x3c>)
 8015470:	009b      	lsls	r3, r3, #2
 8015472:	4413      	add	r3, r2
 8015474:	685b      	ldr	r3, [r3, #4]
 8015476:	689c      	ldr	r4, [r3, #8]
 8015478:	7bfb      	ldrb	r3, [r7, #15]
 801547a:	4a07      	ldr	r2, [pc, #28]	; (8015498 <disk_read+0x3c>)
 801547c:	4413      	add	r3, r2
 801547e:	7a18      	ldrb	r0, [r3, #8]
 8015480:	683b      	ldr	r3, [r7, #0]
 8015482:	687a      	ldr	r2, [r7, #4]
 8015484:	68b9      	ldr	r1, [r7, #8]
 8015486:	47a0      	blx	r4
 8015488:	4603      	mov	r3, r0
 801548a:	75fb      	strb	r3, [r7, #23]
  return res;
 801548c:	7dfb      	ldrb	r3, [r7, #23]
}
 801548e:	4618      	mov	r0, r3
 8015490:	371c      	adds	r7, #28
 8015492:	46bd      	mov	sp, r7
 8015494:	bd90      	pop	{r4, r7, pc}
 8015496:	bf00      	nop
 8015498:	24000b78 	.word	0x24000b78

0801549c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 801549c:	b590      	push	{r4, r7, lr}
 801549e:	b087      	sub	sp, #28
 80154a0:	af00      	add	r7, sp, #0
 80154a2:	60b9      	str	r1, [r7, #8]
 80154a4:	607a      	str	r2, [r7, #4]
 80154a6:	603b      	str	r3, [r7, #0]
 80154a8:	4603      	mov	r3, r0
 80154aa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80154ac:	7bfb      	ldrb	r3, [r7, #15]
 80154ae:	4a0a      	ldr	r2, [pc, #40]	; (80154d8 <disk_write+0x3c>)
 80154b0:	009b      	lsls	r3, r3, #2
 80154b2:	4413      	add	r3, r2
 80154b4:	685b      	ldr	r3, [r3, #4]
 80154b6:	68dc      	ldr	r4, [r3, #12]
 80154b8:	7bfb      	ldrb	r3, [r7, #15]
 80154ba:	4a07      	ldr	r2, [pc, #28]	; (80154d8 <disk_write+0x3c>)
 80154bc:	4413      	add	r3, r2
 80154be:	7a18      	ldrb	r0, [r3, #8]
 80154c0:	683b      	ldr	r3, [r7, #0]
 80154c2:	687a      	ldr	r2, [r7, #4]
 80154c4:	68b9      	ldr	r1, [r7, #8]
 80154c6:	47a0      	blx	r4
 80154c8:	4603      	mov	r3, r0
 80154ca:	75fb      	strb	r3, [r7, #23]
  return res;
 80154cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80154ce:	4618      	mov	r0, r3
 80154d0:	371c      	adds	r7, #28
 80154d2:	46bd      	mov	sp, r7
 80154d4:	bd90      	pop	{r4, r7, pc}
 80154d6:	bf00      	nop
 80154d8:	24000b78 	.word	0x24000b78

080154dc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80154dc:	b580      	push	{r7, lr}
 80154de:	b084      	sub	sp, #16
 80154e0:	af00      	add	r7, sp, #0
 80154e2:	4603      	mov	r3, r0
 80154e4:	603a      	str	r2, [r7, #0]
 80154e6:	71fb      	strb	r3, [r7, #7]
 80154e8:	460b      	mov	r3, r1
 80154ea:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80154ec:	79fb      	ldrb	r3, [r7, #7]
 80154ee:	4a09      	ldr	r2, [pc, #36]	; (8015514 <disk_ioctl+0x38>)
 80154f0:	009b      	lsls	r3, r3, #2
 80154f2:	4413      	add	r3, r2
 80154f4:	685b      	ldr	r3, [r3, #4]
 80154f6:	691b      	ldr	r3, [r3, #16]
 80154f8:	79fa      	ldrb	r2, [r7, #7]
 80154fa:	4906      	ldr	r1, [pc, #24]	; (8015514 <disk_ioctl+0x38>)
 80154fc:	440a      	add	r2, r1
 80154fe:	7a10      	ldrb	r0, [r2, #8]
 8015500:	79b9      	ldrb	r1, [r7, #6]
 8015502:	683a      	ldr	r2, [r7, #0]
 8015504:	4798      	blx	r3
 8015506:	4603      	mov	r3, r0
 8015508:	73fb      	strb	r3, [r7, #15]
  return res;
 801550a:	7bfb      	ldrb	r3, [r7, #15]
}
 801550c:	4618      	mov	r0, r3
 801550e:	3710      	adds	r7, #16
 8015510:	46bd      	mov	sp, r7
 8015512:	bd80      	pop	{r7, pc}
 8015514:	24000b78 	.word	0x24000b78

08015518 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8015518:	b480      	push	{r7}
 801551a:	b085      	sub	sp, #20
 801551c:	af00      	add	r7, sp, #0
 801551e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	3301      	adds	r3, #1
 8015524:	781b      	ldrb	r3, [r3, #0]
 8015526:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8015528:	89fb      	ldrh	r3, [r7, #14]
 801552a:	021b      	lsls	r3, r3, #8
 801552c:	b21a      	sxth	r2, r3
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	781b      	ldrb	r3, [r3, #0]
 8015532:	b21b      	sxth	r3, r3
 8015534:	4313      	orrs	r3, r2
 8015536:	b21b      	sxth	r3, r3
 8015538:	81fb      	strh	r3, [r7, #14]
	return rv;
 801553a:	89fb      	ldrh	r3, [r7, #14]
}
 801553c:	4618      	mov	r0, r3
 801553e:	3714      	adds	r7, #20
 8015540:	46bd      	mov	sp, r7
 8015542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015546:	4770      	bx	lr

08015548 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8015548:	b480      	push	{r7}
 801554a:	b085      	sub	sp, #20
 801554c:	af00      	add	r7, sp, #0
 801554e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8015550:	687b      	ldr	r3, [r7, #4]
 8015552:	3303      	adds	r3, #3
 8015554:	781b      	ldrb	r3, [r3, #0]
 8015556:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8015558:	68fb      	ldr	r3, [r7, #12]
 801555a:	021b      	lsls	r3, r3, #8
 801555c:	687a      	ldr	r2, [r7, #4]
 801555e:	3202      	adds	r2, #2
 8015560:	7812      	ldrb	r2, [r2, #0]
 8015562:	4313      	orrs	r3, r2
 8015564:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8015566:	68fb      	ldr	r3, [r7, #12]
 8015568:	021b      	lsls	r3, r3, #8
 801556a:	687a      	ldr	r2, [r7, #4]
 801556c:	3201      	adds	r2, #1
 801556e:	7812      	ldrb	r2, [r2, #0]
 8015570:	4313      	orrs	r3, r2
 8015572:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8015574:	68fb      	ldr	r3, [r7, #12]
 8015576:	021b      	lsls	r3, r3, #8
 8015578:	687a      	ldr	r2, [r7, #4]
 801557a:	7812      	ldrb	r2, [r2, #0]
 801557c:	4313      	orrs	r3, r2
 801557e:	60fb      	str	r3, [r7, #12]
	return rv;
 8015580:	68fb      	ldr	r3, [r7, #12]
}
 8015582:	4618      	mov	r0, r3
 8015584:	3714      	adds	r7, #20
 8015586:	46bd      	mov	sp, r7
 8015588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801558c:	4770      	bx	lr

0801558e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801558e:	b480      	push	{r7}
 8015590:	b083      	sub	sp, #12
 8015592:	af00      	add	r7, sp, #0
 8015594:	6078      	str	r0, [r7, #4]
 8015596:	460b      	mov	r3, r1
 8015598:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	1c5a      	adds	r2, r3, #1
 801559e:	607a      	str	r2, [r7, #4]
 80155a0:	887a      	ldrh	r2, [r7, #2]
 80155a2:	b2d2      	uxtb	r2, r2
 80155a4:	701a      	strb	r2, [r3, #0]
 80155a6:	887b      	ldrh	r3, [r7, #2]
 80155a8:	0a1b      	lsrs	r3, r3, #8
 80155aa:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80155ac:	687b      	ldr	r3, [r7, #4]
 80155ae:	1c5a      	adds	r2, r3, #1
 80155b0:	607a      	str	r2, [r7, #4]
 80155b2:	887a      	ldrh	r2, [r7, #2]
 80155b4:	b2d2      	uxtb	r2, r2
 80155b6:	701a      	strb	r2, [r3, #0]
}
 80155b8:	bf00      	nop
 80155ba:	370c      	adds	r7, #12
 80155bc:	46bd      	mov	sp, r7
 80155be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155c2:	4770      	bx	lr

080155c4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80155c4:	b480      	push	{r7}
 80155c6:	b083      	sub	sp, #12
 80155c8:	af00      	add	r7, sp, #0
 80155ca:	6078      	str	r0, [r7, #4]
 80155cc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80155ce:	687b      	ldr	r3, [r7, #4]
 80155d0:	1c5a      	adds	r2, r3, #1
 80155d2:	607a      	str	r2, [r7, #4]
 80155d4:	683a      	ldr	r2, [r7, #0]
 80155d6:	b2d2      	uxtb	r2, r2
 80155d8:	701a      	strb	r2, [r3, #0]
 80155da:	683b      	ldr	r3, [r7, #0]
 80155dc:	0a1b      	lsrs	r3, r3, #8
 80155de:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80155e0:	687b      	ldr	r3, [r7, #4]
 80155e2:	1c5a      	adds	r2, r3, #1
 80155e4:	607a      	str	r2, [r7, #4]
 80155e6:	683a      	ldr	r2, [r7, #0]
 80155e8:	b2d2      	uxtb	r2, r2
 80155ea:	701a      	strb	r2, [r3, #0]
 80155ec:	683b      	ldr	r3, [r7, #0]
 80155ee:	0a1b      	lsrs	r3, r3, #8
 80155f0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80155f2:	687b      	ldr	r3, [r7, #4]
 80155f4:	1c5a      	adds	r2, r3, #1
 80155f6:	607a      	str	r2, [r7, #4]
 80155f8:	683a      	ldr	r2, [r7, #0]
 80155fa:	b2d2      	uxtb	r2, r2
 80155fc:	701a      	strb	r2, [r3, #0]
 80155fe:	683b      	ldr	r3, [r7, #0]
 8015600:	0a1b      	lsrs	r3, r3, #8
 8015602:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8015604:	687b      	ldr	r3, [r7, #4]
 8015606:	1c5a      	adds	r2, r3, #1
 8015608:	607a      	str	r2, [r7, #4]
 801560a:	683a      	ldr	r2, [r7, #0]
 801560c:	b2d2      	uxtb	r2, r2
 801560e:	701a      	strb	r2, [r3, #0]
}
 8015610:	bf00      	nop
 8015612:	370c      	adds	r7, #12
 8015614:	46bd      	mov	sp, r7
 8015616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801561a:	4770      	bx	lr

0801561c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 801561c:	b480      	push	{r7}
 801561e:	b087      	sub	sp, #28
 8015620:	af00      	add	r7, sp, #0
 8015622:	60f8      	str	r0, [r7, #12]
 8015624:	60b9      	str	r1, [r7, #8]
 8015626:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8015628:	68fb      	ldr	r3, [r7, #12]
 801562a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 801562c:	68bb      	ldr	r3, [r7, #8]
 801562e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8015630:	687b      	ldr	r3, [r7, #4]
 8015632:	2b00      	cmp	r3, #0
 8015634:	d00d      	beq.n	8015652 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8015636:	693a      	ldr	r2, [r7, #16]
 8015638:	1c53      	adds	r3, r2, #1
 801563a:	613b      	str	r3, [r7, #16]
 801563c:	697b      	ldr	r3, [r7, #20]
 801563e:	1c59      	adds	r1, r3, #1
 8015640:	6179      	str	r1, [r7, #20]
 8015642:	7812      	ldrb	r2, [r2, #0]
 8015644:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8015646:	687b      	ldr	r3, [r7, #4]
 8015648:	3b01      	subs	r3, #1
 801564a:	607b      	str	r3, [r7, #4]
 801564c:	687b      	ldr	r3, [r7, #4]
 801564e:	2b00      	cmp	r3, #0
 8015650:	d1f1      	bne.n	8015636 <mem_cpy+0x1a>
	}
}
 8015652:	bf00      	nop
 8015654:	371c      	adds	r7, #28
 8015656:	46bd      	mov	sp, r7
 8015658:	f85d 7b04 	ldr.w	r7, [sp], #4
 801565c:	4770      	bx	lr

0801565e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801565e:	b480      	push	{r7}
 8015660:	b087      	sub	sp, #28
 8015662:	af00      	add	r7, sp, #0
 8015664:	60f8      	str	r0, [r7, #12]
 8015666:	60b9      	str	r1, [r7, #8]
 8015668:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801566a:	68fb      	ldr	r3, [r7, #12]
 801566c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801566e:	697b      	ldr	r3, [r7, #20]
 8015670:	1c5a      	adds	r2, r3, #1
 8015672:	617a      	str	r2, [r7, #20]
 8015674:	68ba      	ldr	r2, [r7, #8]
 8015676:	b2d2      	uxtb	r2, r2
 8015678:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801567a:	687b      	ldr	r3, [r7, #4]
 801567c:	3b01      	subs	r3, #1
 801567e:	607b      	str	r3, [r7, #4]
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	2b00      	cmp	r3, #0
 8015684:	d1f3      	bne.n	801566e <mem_set+0x10>
}
 8015686:	bf00      	nop
 8015688:	371c      	adds	r7, #28
 801568a:	46bd      	mov	sp, r7
 801568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015690:	4770      	bx	lr

08015692 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8015692:	b480      	push	{r7}
 8015694:	b089      	sub	sp, #36	; 0x24
 8015696:	af00      	add	r7, sp, #0
 8015698:	60f8      	str	r0, [r7, #12]
 801569a:	60b9      	str	r1, [r7, #8]
 801569c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801569e:	68fb      	ldr	r3, [r7, #12]
 80156a0:	61fb      	str	r3, [r7, #28]
 80156a2:	68bb      	ldr	r3, [r7, #8]
 80156a4:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80156a6:	2300      	movs	r3, #0
 80156a8:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80156aa:	69fb      	ldr	r3, [r7, #28]
 80156ac:	1c5a      	adds	r2, r3, #1
 80156ae:	61fa      	str	r2, [r7, #28]
 80156b0:	781b      	ldrb	r3, [r3, #0]
 80156b2:	4619      	mov	r1, r3
 80156b4:	69bb      	ldr	r3, [r7, #24]
 80156b6:	1c5a      	adds	r2, r3, #1
 80156b8:	61ba      	str	r2, [r7, #24]
 80156ba:	781b      	ldrb	r3, [r3, #0]
 80156bc:	1acb      	subs	r3, r1, r3
 80156be:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	3b01      	subs	r3, #1
 80156c4:	607b      	str	r3, [r7, #4]
 80156c6:	687b      	ldr	r3, [r7, #4]
 80156c8:	2b00      	cmp	r3, #0
 80156ca:	d002      	beq.n	80156d2 <mem_cmp+0x40>
 80156cc:	697b      	ldr	r3, [r7, #20]
 80156ce:	2b00      	cmp	r3, #0
 80156d0:	d0eb      	beq.n	80156aa <mem_cmp+0x18>

	return r;
 80156d2:	697b      	ldr	r3, [r7, #20]
}
 80156d4:	4618      	mov	r0, r3
 80156d6:	3724      	adds	r7, #36	; 0x24
 80156d8:	46bd      	mov	sp, r7
 80156da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156de:	4770      	bx	lr

080156e0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80156e0:	b480      	push	{r7}
 80156e2:	b083      	sub	sp, #12
 80156e4:	af00      	add	r7, sp, #0
 80156e6:	6078      	str	r0, [r7, #4]
 80156e8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80156ea:	e002      	b.n	80156f2 <chk_chr+0x12>
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	3301      	adds	r3, #1
 80156f0:	607b      	str	r3, [r7, #4]
 80156f2:	687b      	ldr	r3, [r7, #4]
 80156f4:	781b      	ldrb	r3, [r3, #0]
 80156f6:	2b00      	cmp	r3, #0
 80156f8:	d005      	beq.n	8015706 <chk_chr+0x26>
 80156fa:	687b      	ldr	r3, [r7, #4]
 80156fc:	781b      	ldrb	r3, [r3, #0]
 80156fe:	461a      	mov	r2, r3
 8015700:	683b      	ldr	r3, [r7, #0]
 8015702:	4293      	cmp	r3, r2
 8015704:	d1f2      	bne.n	80156ec <chk_chr+0xc>
	return *str;
 8015706:	687b      	ldr	r3, [r7, #4]
 8015708:	781b      	ldrb	r3, [r3, #0]
}
 801570a:	4618      	mov	r0, r3
 801570c:	370c      	adds	r7, #12
 801570e:	46bd      	mov	sp, r7
 8015710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015714:	4770      	bx	lr
	...

08015718 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8015718:	b480      	push	{r7}
 801571a:	b085      	sub	sp, #20
 801571c:	af00      	add	r7, sp, #0
 801571e:	6078      	str	r0, [r7, #4]
 8015720:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8015722:	2300      	movs	r3, #0
 8015724:	60bb      	str	r3, [r7, #8]
 8015726:	68bb      	ldr	r3, [r7, #8]
 8015728:	60fb      	str	r3, [r7, #12]
 801572a:	e029      	b.n	8015780 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 801572c:	4a27      	ldr	r2, [pc, #156]	; (80157cc <chk_lock+0xb4>)
 801572e:	68fb      	ldr	r3, [r7, #12]
 8015730:	011b      	lsls	r3, r3, #4
 8015732:	4413      	add	r3, r2
 8015734:	681b      	ldr	r3, [r3, #0]
 8015736:	2b00      	cmp	r3, #0
 8015738:	d01d      	beq.n	8015776 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801573a:	4a24      	ldr	r2, [pc, #144]	; (80157cc <chk_lock+0xb4>)
 801573c:	68fb      	ldr	r3, [r7, #12]
 801573e:	011b      	lsls	r3, r3, #4
 8015740:	4413      	add	r3, r2
 8015742:	681a      	ldr	r2, [r3, #0]
 8015744:	687b      	ldr	r3, [r7, #4]
 8015746:	681b      	ldr	r3, [r3, #0]
 8015748:	429a      	cmp	r2, r3
 801574a:	d116      	bne.n	801577a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 801574c:	4a1f      	ldr	r2, [pc, #124]	; (80157cc <chk_lock+0xb4>)
 801574e:	68fb      	ldr	r3, [r7, #12]
 8015750:	011b      	lsls	r3, r3, #4
 8015752:	4413      	add	r3, r2
 8015754:	3304      	adds	r3, #4
 8015756:	681a      	ldr	r2, [r3, #0]
 8015758:	687b      	ldr	r3, [r7, #4]
 801575a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801575c:	429a      	cmp	r2, r3
 801575e:	d10c      	bne.n	801577a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8015760:	4a1a      	ldr	r2, [pc, #104]	; (80157cc <chk_lock+0xb4>)
 8015762:	68fb      	ldr	r3, [r7, #12]
 8015764:	011b      	lsls	r3, r3, #4
 8015766:	4413      	add	r3, r2
 8015768:	3308      	adds	r3, #8
 801576a:	681a      	ldr	r2, [r3, #0]
 801576c:	687b      	ldr	r3, [r7, #4]
 801576e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8015770:	429a      	cmp	r2, r3
 8015772:	d102      	bne.n	801577a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8015774:	e007      	b.n	8015786 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8015776:	2301      	movs	r3, #1
 8015778:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801577a:	68fb      	ldr	r3, [r7, #12]
 801577c:	3301      	adds	r3, #1
 801577e:	60fb      	str	r3, [r7, #12]
 8015780:	68fb      	ldr	r3, [r7, #12]
 8015782:	2b01      	cmp	r3, #1
 8015784:	d9d2      	bls.n	801572c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8015786:	68fb      	ldr	r3, [r7, #12]
 8015788:	2b02      	cmp	r3, #2
 801578a:	d109      	bne.n	80157a0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 801578c:	68bb      	ldr	r3, [r7, #8]
 801578e:	2b00      	cmp	r3, #0
 8015790:	d102      	bne.n	8015798 <chk_lock+0x80>
 8015792:	683b      	ldr	r3, [r7, #0]
 8015794:	2b02      	cmp	r3, #2
 8015796:	d101      	bne.n	801579c <chk_lock+0x84>
 8015798:	2300      	movs	r3, #0
 801579a:	e010      	b.n	80157be <chk_lock+0xa6>
 801579c:	2312      	movs	r3, #18
 801579e:	e00e      	b.n	80157be <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80157a0:	683b      	ldr	r3, [r7, #0]
 80157a2:	2b00      	cmp	r3, #0
 80157a4:	d108      	bne.n	80157b8 <chk_lock+0xa0>
 80157a6:	4a09      	ldr	r2, [pc, #36]	; (80157cc <chk_lock+0xb4>)
 80157a8:	68fb      	ldr	r3, [r7, #12]
 80157aa:	011b      	lsls	r3, r3, #4
 80157ac:	4413      	add	r3, r2
 80157ae:	330c      	adds	r3, #12
 80157b0:	881b      	ldrh	r3, [r3, #0]
 80157b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80157b6:	d101      	bne.n	80157bc <chk_lock+0xa4>
 80157b8:	2310      	movs	r3, #16
 80157ba:	e000      	b.n	80157be <chk_lock+0xa6>
 80157bc:	2300      	movs	r3, #0
}
 80157be:	4618      	mov	r0, r3
 80157c0:	3714      	adds	r7, #20
 80157c2:	46bd      	mov	sp, r7
 80157c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157c8:	4770      	bx	lr
 80157ca:	bf00      	nop
 80157cc:	24000b58 	.word	0x24000b58

080157d0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80157d0:	b480      	push	{r7}
 80157d2:	b083      	sub	sp, #12
 80157d4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80157d6:	2300      	movs	r3, #0
 80157d8:	607b      	str	r3, [r7, #4]
 80157da:	e002      	b.n	80157e2 <enq_lock+0x12>
 80157dc:	687b      	ldr	r3, [r7, #4]
 80157de:	3301      	adds	r3, #1
 80157e0:	607b      	str	r3, [r7, #4]
 80157e2:	687b      	ldr	r3, [r7, #4]
 80157e4:	2b01      	cmp	r3, #1
 80157e6:	d806      	bhi.n	80157f6 <enq_lock+0x26>
 80157e8:	4a09      	ldr	r2, [pc, #36]	; (8015810 <enq_lock+0x40>)
 80157ea:	687b      	ldr	r3, [r7, #4]
 80157ec:	011b      	lsls	r3, r3, #4
 80157ee:	4413      	add	r3, r2
 80157f0:	681b      	ldr	r3, [r3, #0]
 80157f2:	2b00      	cmp	r3, #0
 80157f4:	d1f2      	bne.n	80157dc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80157f6:	687b      	ldr	r3, [r7, #4]
 80157f8:	2b02      	cmp	r3, #2
 80157fa:	bf14      	ite	ne
 80157fc:	2301      	movne	r3, #1
 80157fe:	2300      	moveq	r3, #0
 8015800:	b2db      	uxtb	r3, r3
}
 8015802:	4618      	mov	r0, r3
 8015804:	370c      	adds	r7, #12
 8015806:	46bd      	mov	sp, r7
 8015808:	f85d 7b04 	ldr.w	r7, [sp], #4
 801580c:	4770      	bx	lr
 801580e:	bf00      	nop
 8015810:	24000b58 	.word	0x24000b58

08015814 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8015814:	b480      	push	{r7}
 8015816:	b085      	sub	sp, #20
 8015818:	af00      	add	r7, sp, #0
 801581a:	6078      	str	r0, [r7, #4]
 801581c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801581e:	2300      	movs	r3, #0
 8015820:	60fb      	str	r3, [r7, #12]
 8015822:	e01f      	b.n	8015864 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8015824:	4a41      	ldr	r2, [pc, #260]	; (801592c <inc_lock+0x118>)
 8015826:	68fb      	ldr	r3, [r7, #12]
 8015828:	011b      	lsls	r3, r3, #4
 801582a:	4413      	add	r3, r2
 801582c:	681a      	ldr	r2, [r3, #0]
 801582e:	687b      	ldr	r3, [r7, #4]
 8015830:	681b      	ldr	r3, [r3, #0]
 8015832:	429a      	cmp	r2, r3
 8015834:	d113      	bne.n	801585e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8015836:	4a3d      	ldr	r2, [pc, #244]	; (801592c <inc_lock+0x118>)
 8015838:	68fb      	ldr	r3, [r7, #12]
 801583a:	011b      	lsls	r3, r3, #4
 801583c:	4413      	add	r3, r2
 801583e:	3304      	adds	r3, #4
 8015840:	681a      	ldr	r2, [r3, #0]
 8015842:	687b      	ldr	r3, [r7, #4]
 8015844:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8015846:	429a      	cmp	r2, r3
 8015848:	d109      	bne.n	801585e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801584a:	4a38      	ldr	r2, [pc, #224]	; (801592c <inc_lock+0x118>)
 801584c:	68fb      	ldr	r3, [r7, #12]
 801584e:	011b      	lsls	r3, r3, #4
 8015850:	4413      	add	r3, r2
 8015852:	3308      	adds	r3, #8
 8015854:	681a      	ldr	r2, [r3, #0]
 8015856:	687b      	ldr	r3, [r7, #4]
 8015858:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801585a:	429a      	cmp	r2, r3
 801585c:	d006      	beq.n	801586c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801585e:	68fb      	ldr	r3, [r7, #12]
 8015860:	3301      	adds	r3, #1
 8015862:	60fb      	str	r3, [r7, #12]
 8015864:	68fb      	ldr	r3, [r7, #12]
 8015866:	2b01      	cmp	r3, #1
 8015868:	d9dc      	bls.n	8015824 <inc_lock+0x10>
 801586a:	e000      	b.n	801586e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 801586c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801586e:	68fb      	ldr	r3, [r7, #12]
 8015870:	2b02      	cmp	r3, #2
 8015872:	d132      	bne.n	80158da <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8015874:	2300      	movs	r3, #0
 8015876:	60fb      	str	r3, [r7, #12]
 8015878:	e002      	b.n	8015880 <inc_lock+0x6c>
 801587a:	68fb      	ldr	r3, [r7, #12]
 801587c:	3301      	adds	r3, #1
 801587e:	60fb      	str	r3, [r7, #12]
 8015880:	68fb      	ldr	r3, [r7, #12]
 8015882:	2b01      	cmp	r3, #1
 8015884:	d806      	bhi.n	8015894 <inc_lock+0x80>
 8015886:	4a29      	ldr	r2, [pc, #164]	; (801592c <inc_lock+0x118>)
 8015888:	68fb      	ldr	r3, [r7, #12]
 801588a:	011b      	lsls	r3, r3, #4
 801588c:	4413      	add	r3, r2
 801588e:	681b      	ldr	r3, [r3, #0]
 8015890:	2b00      	cmp	r3, #0
 8015892:	d1f2      	bne.n	801587a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8015894:	68fb      	ldr	r3, [r7, #12]
 8015896:	2b02      	cmp	r3, #2
 8015898:	d101      	bne.n	801589e <inc_lock+0x8a>
 801589a:	2300      	movs	r3, #0
 801589c:	e040      	b.n	8015920 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801589e:	687b      	ldr	r3, [r7, #4]
 80158a0:	681a      	ldr	r2, [r3, #0]
 80158a2:	4922      	ldr	r1, [pc, #136]	; (801592c <inc_lock+0x118>)
 80158a4:	68fb      	ldr	r3, [r7, #12]
 80158a6:	011b      	lsls	r3, r3, #4
 80158a8:	440b      	add	r3, r1
 80158aa:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80158ac:	687b      	ldr	r3, [r7, #4]
 80158ae:	689a      	ldr	r2, [r3, #8]
 80158b0:	491e      	ldr	r1, [pc, #120]	; (801592c <inc_lock+0x118>)
 80158b2:	68fb      	ldr	r3, [r7, #12]
 80158b4:	011b      	lsls	r3, r3, #4
 80158b6:	440b      	add	r3, r1
 80158b8:	3304      	adds	r3, #4
 80158ba:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80158bc:	687b      	ldr	r3, [r7, #4]
 80158be:	695a      	ldr	r2, [r3, #20]
 80158c0:	491a      	ldr	r1, [pc, #104]	; (801592c <inc_lock+0x118>)
 80158c2:	68fb      	ldr	r3, [r7, #12]
 80158c4:	011b      	lsls	r3, r3, #4
 80158c6:	440b      	add	r3, r1
 80158c8:	3308      	adds	r3, #8
 80158ca:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80158cc:	4a17      	ldr	r2, [pc, #92]	; (801592c <inc_lock+0x118>)
 80158ce:	68fb      	ldr	r3, [r7, #12]
 80158d0:	011b      	lsls	r3, r3, #4
 80158d2:	4413      	add	r3, r2
 80158d4:	330c      	adds	r3, #12
 80158d6:	2200      	movs	r2, #0
 80158d8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80158da:	683b      	ldr	r3, [r7, #0]
 80158dc:	2b00      	cmp	r3, #0
 80158de:	d009      	beq.n	80158f4 <inc_lock+0xe0>
 80158e0:	4a12      	ldr	r2, [pc, #72]	; (801592c <inc_lock+0x118>)
 80158e2:	68fb      	ldr	r3, [r7, #12]
 80158e4:	011b      	lsls	r3, r3, #4
 80158e6:	4413      	add	r3, r2
 80158e8:	330c      	adds	r3, #12
 80158ea:	881b      	ldrh	r3, [r3, #0]
 80158ec:	2b00      	cmp	r3, #0
 80158ee:	d001      	beq.n	80158f4 <inc_lock+0xe0>
 80158f0:	2300      	movs	r3, #0
 80158f2:	e015      	b.n	8015920 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80158f4:	683b      	ldr	r3, [r7, #0]
 80158f6:	2b00      	cmp	r3, #0
 80158f8:	d108      	bne.n	801590c <inc_lock+0xf8>
 80158fa:	4a0c      	ldr	r2, [pc, #48]	; (801592c <inc_lock+0x118>)
 80158fc:	68fb      	ldr	r3, [r7, #12]
 80158fe:	011b      	lsls	r3, r3, #4
 8015900:	4413      	add	r3, r2
 8015902:	330c      	adds	r3, #12
 8015904:	881b      	ldrh	r3, [r3, #0]
 8015906:	3301      	adds	r3, #1
 8015908:	b29a      	uxth	r2, r3
 801590a:	e001      	b.n	8015910 <inc_lock+0xfc>
 801590c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015910:	4906      	ldr	r1, [pc, #24]	; (801592c <inc_lock+0x118>)
 8015912:	68fb      	ldr	r3, [r7, #12]
 8015914:	011b      	lsls	r3, r3, #4
 8015916:	440b      	add	r3, r1
 8015918:	330c      	adds	r3, #12
 801591a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 801591c:	68fb      	ldr	r3, [r7, #12]
 801591e:	3301      	adds	r3, #1
}
 8015920:	4618      	mov	r0, r3
 8015922:	3714      	adds	r7, #20
 8015924:	46bd      	mov	sp, r7
 8015926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801592a:	4770      	bx	lr
 801592c:	24000b58 	.word	0x24000b58

08015930 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8015930:	b480      	push	{r7}
 8015932:	b085      	sub	sp, #20
 8015934:	af00      	add	r7, sp, #0
 8015936:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8015938:	687b      	ldr	r3, [r7, #4]
 801593a:	3b01      	subs	r3, #1
 801593c:	607b      	str	r3, [r7, #4]
 801593e:	687b      	ldr	r3, [r7, #4]
 8015940:	2b01      	cmp	r3, #1
 8015942:	d825      	bhi.n	8015990 <dec_lock+0x60>
		n = Files[i].ctr;
 8015944:	4a17      	ldr	r2, [pc, #92]	; (80159a4 <dec_lock+0x74>)
 8015946:	687b      	ldr	r3, [r7, #4]
 8015948:	011b      	lsls	r3, r3, #4
 801594a:	4413      	add	r3, r2
 801594c:	330c      	adds	r3, #12
 801594e:	881b      	ldrh	r3, [r3, #0]
 8015950:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8015952:	89fb      	ldrh	r3, [r7, #14]
 8015954:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015958:	d101      	bne.n	801595e <dec_lock+0x2e>
 801595a:	2300      	movs	r3, #0
 801595c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801595e:	89fb      	ldrh	r3, [r7, #14]
 8015960:	2b00      	cmp	r3, #0
 8015962:	d002      	beq.n	801596a <dec_lock+0x3a>
 8015964:	89fb      	ldrh	r3, [r7, #14]
 8015966:	3b01      	subs	r3, #1
 8015968:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801596a:	4a0e      	ldr	r2, [pc, #56]	; (80159a4 <dec_lock+0x74>)
 801596c:	687b      	ldr	r3, [r7, #4]
 801596e:	011b      	lsls	r3, r3, #4
 8015970:	4413      	add	r3, r2
 8015972:	330c      	adds	r3, #12
 8015974:	89fa      	ldrh	r2, [r7, #14]
 8015976:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8015978:	89fb      	ldrh	r3, [r7, #14]
 801597a:	2b00      	cmp	r3, #0
 801597c:	d105      	bne.n	801598a <dec_lock+0x5a>
 801597e:	4a09      	ldr	r2, [pc, #36]	; (80159a4 <dec_lock+0x74>)
 8015980:	687b      	ldr	r3, [r7, #4]
 8015982:	011b      	lsls	r3, r3, #4
 8015984:	4413      	add	r3, r2
 8015986:	2200      	movs	r2, #0
 8015988:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801598a:	2300      	movs	r3, #0
 801598c:	737b      	strb	r3, [r7, #13]
 801598e:	e001      	b.n	8015994 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8015990:	2302      	movs	r3, #2
 8015992:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8015994:	7b7b      	ldrb	r3, [r7, #13]
}
 8015996:	4618      	mov	r0, r3
 8015998:	3714      	adds	r7, #20
 801599a:	46bd      	mov	sp, r7
 801599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159a0:	4770      	bx	lr
 80159a2:	bf00      	nop
 80159a4:	24000b58 	.word	0x24000b58

080159a8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80159a8:	b480      	push	{r7}
 80159aa:	b085      	sub	sp, #20
 80159ac:	af00      	add	r7, sp, #0
 80159ae:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80159b0:	2300      	movs	r3, #0
 80159b2:	60fb      	str	r3, [r7, #12]
 80159b4:	e010      	b.n	80159d8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80159b6:	4a0d      	ldr	r2, [pc, #52]	; (80159ec <clear_lock+0x44>)
 80159b8:	68fb      	ldr	r3, [r7, #12]
 80159ba:	011b      	lsls	r3, r3, #4
 80159bc:	4413      	add	r3, r2
 80159be:	681b      	ldr	r3, [r3, #0]
 80159c0:	687a      	ldr	r2, [r7, #4]
 80159c2:	429a      	cmp	r2, r3
 80159c4:	d105      	bne.n	80159d2 <clear_lock+0x2a>
 80159c6:	4a09      	ldr	r2, [pc, #36]	; (80159ec <clear_lock+0x44>)
 80159c8:	68fb      	ldr	r3, [r7, #12]
 80159ca:	011b      	lsls	r3, r3, #4
 80159cc:	4413      	add	r3, r2
 80159ce:	2200      	movs	r2, #0
 80159d0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80159d2:	68fb      	ldr	r3, [r7, #12]
 80159d4:	3301      	adds	r3, #1
 80159d6:	60fb      	str	r3, [r7, #12]
 80159d8:	68fb      	ldr	r3, [r7, #12]
 80159da:	2b01      	cmp	r3, #1
 80159dc:	d9eb      	bls.n	80159b6 <clear_lock+0xe>
	}
}
 80159de:	bf00      	nop
 80159e0:	3714      	adds	r7, #20
 80159e2:	46bd      	mov	sp, r7
 80159e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159e8:	4770      	bx	lr
 80159ea:	bf00      	nop
 80159ec:	24000b58 	.word	0x24000b58

080159f0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80159f0:	b580      	push	{r7, lr}
 80159f2:	b086      	sub	sp, #24
 80159f4:	af00      	add	r7, sp, #0
 80159f6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80159f8:	2300      	movs	r3, #0
 80159fa:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80159fc:	687b      	ldr	r3, [r7, #4]
 80159fe:	78db      	ldrb	r3, [r3, #3]
 8015a00:	2b00      	cmp	r3, #0
 8015a02:	d034      	beq.n	8015a6e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8015a04:	687b      	ldr	r3, [r7, #4]
 8015a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a08:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8015a0a:	687b      	ldr	r3, [r7, #4]
 8015a0c:	7858      	ldrb	r0, [r3, #1]
 8015a0e:	687b      	ldr	r3, [r7, #4]
 8015a10:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015a14:	2301      	movs	r3, #1
 8015a16:	697a      	ldr	r2, [r7, #20]
 8015a18:	f7ff fd40 	bl	801549c <disk_write>
 8015a1c:	4603      	mov	r3, r0
 8015a1e:	2b00      	cmp	r3, #0
 8015a20:	d002      	beq.n	8015a28 <sync_window+0x38>
			res = FR_DISK_ERR;
 8015a22:	2301      	movs	r3, #1
 8015a24:	73fb      	strb	r3, [r7, #15]
 8015a26:	e022      	b.n	8015a6e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8015a28:	687b      	ldr	r3, [r7, #4]
 8015a2a:	2200      	movs	r2, #0
 8015a2c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8015a2e:	687b      	ldr	r3, [r7, #4]
 8015a30:	6a1b      	ldr	r3, [r3, #32]
 8015a32:	697a      	ldr	r2, [r7, #20]
 8015a34:	1ad2      	subs	r2, r2, r3
 8015a36:	687b      	ldr	r3, [r7, #4]
 8015a38:	699b      	ldr	r3, [r3, #24]
 8015a3a:	429a      	cmp	r2, r3
 8015a3c:	d217      	bcs.n	8015a6e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8015a3e:	687b      	ldr	r3, [r7, #4]
 8015a40:	789b      	ldrb	r3, [r3, #2]
 8015a42:	613b      	str	r3, [r7, #16]
 8015a44:	e010      	b.n	8015a68 <sync_window+0x78>
					wsect += fs->fsize;
 8015a46:	687b      	ldr	r3, [r7, #4]
 8015a48:	699b      	ldr	r3, [r3, #24]
 8015a4a:	697a      	ldr	r2, [r7, #20]
 8015a4c:	4413      	add	r3, r2
 8015a4e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8015a50:	687b      	ldr	r3, [r7, #4]
 8015a52:	7858      	ldrb	r0, [r3, #1]
 8015a54:	687b      	ldr	r3, [r7, #4]
 8015a56:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015a5a:	2301      	movs	r3, #1
 8015a5c:	697a      	ldr	r2, [r7, #20]
 8015a5e:	f7ff fd1d 	bl	801549c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8015a62:	693b      	ldr	r3, [r7, #16]
 8015a64:	3b01      	subs	r3, #1
 8015a66:	613b      	str	r3, [r7, #16]
 8015a68:	693b      	ldr	r3, [r7, #16]
 8015a6a:	2b01      	cmp	r3, #1
 8015a6c:	d8eb      	bhi.n	8015a46 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8015a6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015a70:	4618      	mov	r0, r3
 8015a72:	3718      	adds	r7, #24
 8015a74:	46bd      	mov	sp, r7
 8015a76:	bd80      	pop	{r7, pc}

08015a78 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8015a78:	b580      	push	{r7, lr}
 8015a7a:	b084      	sub	sp, #16
 8015a7c:	af00      	add	r7, sp, #0
 8015a7e:	6078      	str	r0, [r7, #4]
 8015a80:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8015a82:	2300      	movs	r3, #0
 8015a84:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a8a:	683a      	ldr	r2, [r7, #0]
 8015a8c:	429a      	cmp	r2, r3
 8015a8e:	d01b      	beq.n	8015ac8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8015a90:	6878      	ldr	r0, [r7, #4]
 8015a92:	f7ff ffad 	bl	80159f0 <sync_window>
 8015a96:	4603      	mov	r3, r0
 8015a98:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8015a9a:	7bfb      	ldrb	r3, [r7, #15]
 8015a9c:	2b00      	cmp	r3, #0
 8015a9e:	d113      	bne.n	8015ac8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8015aa0:	687b      	ldr	r3, [r7, #4]
 8015aa2:	7858      	ldrb	r0, [r3, #1]
 8015aa4:	687b      	ldr	r3, [r7, #4]
 8015aa6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015aaa:	2301      	movs	r3, #1
 8015aac:	683a      	ldr	r2, [r7, #0]
 8015aae:	f7ff fcd5 	bl	801545c <disk_read>
 8015ab2:	4603      	mov	r3, r0
 8015ab4:	2b00      	cmp	r3, #0
 8015ab6:	d004      	beq.n	8015ac2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8015ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8015abc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8015abe:	2301      	movs	r3, #1
 8015ac0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8015ac2:	687b      	ldr	r3, [r7, #4]
 8015ac4:	683a      	ldr	r2, [r7, #0]
 8015ac6:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8015ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8015aca:	4618      	mov	r0, r3
 8015acc:	3710      	adds	r7, #16
 8015ace:	46bd      	mov	sp, r7
 8015ad0:	bd80      	pop	{r7, pc}
	...

08015ad4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8015ad4:	b580      	push	{r7, lr}
 8015ad6:	b084      	sub	sp, #16
 8015ad8:	af00      	add	r7, sp, #0
 8015ada:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8015adc:	6878      	ldr	r0, [r7, #4]
 8015ade:	f7ff ff87 	bl	80159f0 <sync_window>
 8015ae2:	4603      	mov	r3, r0
 8015ae4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8015ae6:	7bfb      	ldrb	r3, [r7, #15]
 8015ae8:	2b00      	cmp	r3, #0
 8015aea:	d158      	bne.n	8015b9e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8015aec:	687b      	ldr	r3, [r7, #4]
 8015aee:	781b      	ldrb	r3, [r3, #0]
 8015af0:	2b03      	cmp	r3, #3
 8015af2:	d148      	bne.n	8015b86 <sync_fs+0xb2>
 8015af4:	687b      	ldr	r3, [r7, #4]
 8015af6:	791b      	ldrb	r3, [r3, #4]
 8015af8:	2b01      	cmp	r3, #1
 8015afa:	d144      	bne.n	8015b86 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8015afc:	687b      	ldr	r3, [r7, #4]
 8015afe:	3330      	adds	r3, #48	; 0x30
 8015b00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015b04:	2100      	movs	r1, #0
 8015b06:	4618      	mov	r0, r3
 8015b08:	f7ff fda9 	bl	801565e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	3330      	adds	r3, #48	; 0x30
 8015b10:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8015b14:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8015b18:	4618      	mov	r0, r3
 8015b1a:	f7ff fd38 	bl	801558e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8015b1e:	687b      	ldr	r3, [r7, #4]
 8015b20:	3330      	adds	r3, #48	; 0x30
 8015b22:	4921      	ldr	r1, [pc, #132]	; (8015ba8 <sync_fs+0xd4>)
 8015b24:	4618      	mov	r0, r3
 8015b26:	f7ff fd4d 	bl	80155c4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8015b2a:	687b      	ldr	r3, [r7, #4]
 8015b2c:	3330      	adds	r3, #48	; 0x30
 8015b2e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8015b32:	491e      	ldr	r1, [pc, #120]	; (8015bac <sync_fs+0xd8>)
 8015b34:	4618      	mov	r0, r3
 8015b36:	f7ff fd45 	bl	80155c4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8015b3a:	687b      	ldr	r3, [r7, #4]
 8015b3c:	3330      	adds	r3, #48	; 0x30
 8015b3e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8015b42:	687b      	ldr	r3, [r7, #4]
 8015b44:	691b      	ldr	r3, [r3, #16]
 8015b46:	4619      	mov	r1, r3
 8015b48:	4610      	mov	r0, r2
 8015b4a:	f7ff fd3b 	bl	80155c4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8015b4e:	687b      	ldr	r3, [r7, #4]
 8015b50:	3330      	adds	r3, #48	; 0x30
 8015b52:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8015b56:	687b      	ldr	r3, [r7, #4]
 8015b58:	68db      	ldr	r3, [r3, #12]
 8015b5a:	4619      	mov	r1, r3
 8015b5c:	4610      	mov	r0, r2
 8015b5e:	f7ff fd31 	bl	80155c4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8015b62:	687b      	ldr	r3, [r7, #4]
 8015b64:	69db      	ldr	r3, [r3, #28]
 8015b66:	1c5a      	adds	r2, r3, #1
 8015b68:	687b      	ldr	r3, [r7, #4]
 8015b6a:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8015b6c:	687b      	ldr	r3, [r7, #4]
 8015b6e:	7858      	ldrb	r0, [r3, #1]
 8015b70:	687b      	ldr	r3, [r7, #4]
 8015b72:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015b76:	687b      	ldr	r3, [r7, #4]
 8015b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015b7a:	2301      	movs	r3, #1
 8015b7c:	f7ff fc8e 	bl	801549c <disk_write>
			fs->fsi_flag = 0;
 8015b80:	687b      	ldr	r3, [r7, #4]
 8015b82:	2200      	movs	r2, #0
 8015b84:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8015b86:	687b      	ldr	r3, [r7, #4]
 8015b88:	785b      	ldrb	r3, [r3, #1]
 8015b8a:	2200      	movs	r2, #0
 8015b8c:	2100      	movs	r1, #0
 8015b8e:	4618      	mov	r0, r3
 8015b90:	f7ff fca4 	bl	80154dc <disk_ioctl>
 8015b94:	4603      	mov	r3, r0
 8015b96:	2b00      	cmp	r3, #0
 8015b98:	d001      	beq.n	8015b9e <sync_fs+0xca>
 8015b9a:	2301      	movs	r3, #1
 8015b9c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8015b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015ba0:	4618      	mov	r0, r3
 8015ba2:	3710      	adds	r7, #16
 8015ba4:	46bd      	mov	sp, r7
 8015ba6:	bd80      	pop	{r7, pc}
 8015ba8:	41615252 	.word	0x41615252
 8015bac:	61417272 	.word	0x61417272

08015bb0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8015bb0:	b480      	push	{r7}
 8015bb2:	b083      	sub	sp, #12
 8015bb4:	af00      	add	r7, sp, #0
 8015bb6:	6078      	str	r0, [r7, #4]
 8015bb8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8015bba:	683b      	ldr	r3, [r7, #0]
 8015bbc:	3b02      	subs	r3, #2
 8015bbe:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8015bc0:	687b      	ldr	r3, [r7, #4]
 8015bc2:	695b      	ldr	r3, [r3, #20]
 8015bc4:	3b02      	subs	r3, #2
 8015bc6:	683a      	ldr	r2, [r7, #0]
 8015bc8:	429a      	cmp	r2, r3
 8015bca:	d301      	bcc.n	8015bd0 <clust2sect+0x20>
 8015bcc:	2300      	movs	r3, #0
 8015bce:	e008      	b.n	8015be2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8015bd0:	687b      	ldr	r3, [r7, #4]
 8015bd2:	895b      	ldrh	r3, [r3, #10]
 8015bd4:	461a      	mov	r2, r3
 8015bd6:	683b      	ldr	r3, [r7, #0]
 8015bd8:	fb03 f202 	mul.w	r2, r3, r2
 8015bdc:	687b      	ldr	r3, [r7, #4]
 8015bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015be0:	4413      	add	r3, r2
}
 8015be2:	4618      	mov	r0, r3
 8015be4:	370c      	adds	r7, #12
 8015be6:	46bd      	mov	sp, r7
 8015be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bec:	4770      	bx	lr

08015bee <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8015bee:	b580      	push	{r7, lr}
 8015bf0:	b086      	sub	sp, #24
 8015bf2:	af00      	add	r7, sp, #0
 8015bf4:	6078      	str	r0, [r7, #4]
 8015bf6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8015bf8:	687b      	ldr	r3, [r7, #4]
 8015bfa:	681b      	ldr	r3, [r3, #0]
 8015bfc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8015bfe:	683b      	ldr	r3, [r7, #0]
 8015c00:	2b01      	cmp	r3, #1
 8015c02:	d904      	bls.n	8015c0e <get_fat+0x20>
 8015c04:	693b      	ldr	r3, [r7, #16]
 8015c06:	695b      	ldr	r3, [r3, #20]
 8015c08:	683a      	ldr	r2, [r7, #0]
 8015c0a:	429a      	cmp	r2, r3
 8015c0c:	d302      	bcc.n	8015c14 <get_fat+0x26>
		val = 1;	/* Internal error */
 8015c0e:	2301      	movs	r3, #1
 8015c10:	617b      	str	r3, [r7, #20]
 8015c12:	e08c      	b.n	8015d2e <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8015c14:	f04f 33ff 	mov.w	r3, #4294967295
 8015c18:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8015c1a:	693b      	ldr	r3, [r7, #16]
 8015c1c:	781b      	ldrb	r3, [r3, #0]
 8015c1e:	2b02      	cmp	r3, #2
 8015c20:	d045      	beq.n	8015cae <get_fat+0xc0>
 8015c22:	2b03      	cmp	r3, #3
 8015c24:	d05d      	beq.n	8015ce2 <get_fat+0xf4>
 8015c26:	2b01      	cmp	r3, #1
 8015c28:	d177      	bne.n	8015d1a <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8015c2a:	683b      	ldr	r3, [r7, #0]
 8015c2c:	60fb      	str	r3, [r7, #12]
 8015c2e:	68fb      	ldr	r3, [r7, #12]
 8015c30:	085b      	lsrs	r3, r3, #1
 8015c32:	68fa      	ldr	r2, [r7, #12]
 8015c34:	4413      	add	r3, r2
 8015c36:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015c38:	693b      	ldr	r3, [r7, #16]
 8015c3a:	6a1a      	ldr	r2, [r3, #32]
 8015c3c:	68fb      	ldr	r3, [r7, #12]
 8015c3e:	0a5b      	lsrs	r3, r3, #9
 8015c40:	4413      	add	r3, r2
 8015c42:	4619      	mov	r1, r3
 8015c44:	6938      	ldr	r0, [r7, #16]
 8015c46:	f7ff ff17 	bl	8015a78 <move_window>
 8015c4a:	4603      	mov	r3, r0
 8015c4c:	2b00      	cmp	r3, #0
 8015c4e:	d167      	bne.n	8015d20 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 8015c50:	68fb      	ldr	r3, [r7, #12]
 8015c52:	1c5a      	adds	r2, r3, #1
 8015c54:	60fa      	str	r2, [r7, #12]
 8015c56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015c5a:	693a      	ldr	r2, [r7, #16]
 8015c5c:	4413      	add	r3, r2
 8015c5e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015c62:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015c64:	693b      	ldr	r3, [r7, #16]
 8015c66:	6a1a      	ldr	r2, [r3, #32]
 8015c68:	68fb      	ldr	r3, [r7, #12]
 8015c6a:	0a5b      	lsrs	r3, r3, #9
 8015c6c:	4413      	add	r3, r2
 8015c6e:	4619      	mov	r1, r3
 8015c70:	6938      	ldr	r0, [r7, #16]
 8015c72:	f7ff ff01 	bl	8015a78 <move_window>
 8015c76:	4603      	mov	r3, r0
 8015c78:	2b00      	cmp	r3, #0
 8015c7a:	d153      	bne.n	8015d24 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8015c7c:	68fb      	ldr	r3, [r7, #12]
 8015c7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015c82:	693a      	ldr	r2, [r7, #16]
 8015c84:	4413      	add	r3, r2
 8015c86:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015c8a:	021b      	lsls	r3, r3, #8
 8015c8c:	461a      	mov	r2, r3
 8015c8e:	68bb      	ldr	r3, [r7, #8]
 8015c90:	4313      	orrs	r3, r2
 8015c92:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8015c94:	683b      	ldr	r3, [r7, #0]
 8015c96:	f003 0301 	and.w	r3, r3, #1
 8015c9a:	2b00      	cmp	r3, #0
 8015c9c:	d002      	beq.n	8015ca4 <get_fat+0xb6>
 8015c9e:	68bb      	ldr	r3, [r7, #8]
 8015ca0:	091b      	lsrs	r3, r3, #4
 8015ca2:	e002      	b.n	8015caa <get_fat+0xbc>
 8015ca4:	68bb      	ldr	r3, [r7, #8]
 8015ca6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8015caa:	617b      	str	r3, [r7, #20]
			break;
 8015cac:	e03f      	b.n	8015d2e <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8015cae:	693b      	ldr	r3, [r7, #16]
 8015cb0:	6a1a      	ldr	r2, [r3, #32]
 8015cb2:	683b      	ldr	r3, [r7, #0]
 8015cb4:	0a1b      	lsrs	r3, r3, #8
 8015cb6:	4413      	add	r3, r2
 8015cb8:	4619      	mov	r1, r3
 8015cba:	6938      	ldr	r0, [r7, #16]
 8015cbc:	f7ff fedc 	bl	8015a78 <move_window>
 8015cc0:	4603      	mov	r3, r0
 8015cc2:	2b00      	cmp	r3, #0
 8015cc4:	d130      	bne.n	8015d28 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8015cc6:	693b      	ldr	r3, [r7, #16]
 8015cc8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8015ccc:	683b      	ldr	r3, [r7, #0]
 8015cce:	005b      	lsls	r3, r3, #1
 8015cd0:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8015cd4:	4413      	add	r3, r2
 8015cd6:	4618      	mov	r0, r3
 8015cd8:	f7ff fc1e 	bl	8015518 <ld_word>
 8015cdc:	4603      	mov	r3, r0
 8015cde:	617b      	str	r3, [r7, #20]
			break;
 8015ce0:	e025      	b.n	8015d2e <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8015ce2:	693b      	ldr	r3, [r7, #16]
 8015ce4:	6a1a      	ldr	r2, [r3, #32]
 8015ce6:	683b      	ldr	r3, [r7, #0]
 8015ce8:	09db      	lsrs	r3, r3, #7
 8015cea:	4413      	add	r3, r2
 8015cec:	4619      	mov	r1, r3
 8015cee:	6938      	ldr	r0, [r7, #16]
 8015cf0:	f7ff fec2 	bl	8015a78 <move_window>
 8015cf4:	4603      	mov	r3, r0
 8015cf6:	2b00      	cmp	r3, #0
 8015cf8:	d118      	bne.n	8015d2c <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8015cfa:	693b      	ldr	r3, [r7, #16]
 8015cfc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8015d00:	683b      	ldr	r3, [r7, #0]
 8015d02:	009b      	lsls	r3, r3, #2
 8015d04:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8015d08:	4413      	add	r3, r2
 8015d0a:	4618      	mov	r0, r3
 8015d0c:	f7ff fc1c 	bl	8015548 <ld_dword>
 8015d10:	4603      	mov	r3, r0
 8015d12:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8015d16:	617b      	str	r3, [r7, #20]
			break;
 8015d18:	e009      	b.n	8015d2e <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8015d1a:	2301      	movs	r3, #1
 8015d1c:	617b      	str	r3, [r7, #20]
 8015d1e:	e006      	b.n	8015d2e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015d20:	bf00      	nop
 8015d22:	e004      	b.n	8015d2e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015d24:	bf00      	nop
 8015d26:	e002      	b.n	8015d2e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8015d28:	bf00      	nop
 8015d2a:	e000      	b.n	8015d2e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8015d2c:	bf00      	nop
		}
	}

	return val;
 8015d2e:	697b      	ldr	r3, [r7, #20]
}
 8015d30:	4618      	mov	r0, r3
 8015d32:	3718      	adds	r7, #24
 8015d34:	46bd      	mov	sp, r7
 8015d36:	bd80      	pop	{r7, pc}

08015d38 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8015d38:	b590      	push	{r4, r7, lr}
 8015d3a:	b089      	sub	sp, #36	; 0x24
 8015d3c:	af00      	add	r7, sp, #0
 8015d3e:	60f8      	str	r0, [r7, #12]
 8015d40:	60b9      	str	r1, [r7, #8]
 8015d42:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8015d44:	2302      	movs	r3, #2
 8015d46:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8015d48:	68bb      	ldr	r3, [r7, #8]
 8015d4a:	2b01      	cmp	r3, #1
 8015d4c:	f240 80d6 	bls.w	8015efc <put_fat+0x1c4>
 8015d50:	68fb      	ldr	r3, [r7, #12]
 8015d52:	695b      	ldr	r3, [r3, #20]
 8015d54:	68ba      	ldr	r2, [r7, #8]
 8015d56:	429a      	cmp	r2, r3
 8015d58:	f080 80d0 	bcs.w	8015efc <put_fat+0x1c4>
		switch (fs->fs_type) {
 8015d5c:	68fb      	ldr	r3, [r7, #12]
 8015d5e:	781b      	ldrb	r3, [r3, #0]
 8015d60:	2b02      	cmp	r3, #2
 8015d62:	d073      	beq.n	8015e4c <put_fat+0x114>
 8015d64:	2b03      	cmp	r3, #3
 8015d66:	f000 8091 	beq.w	8015e8c <put_fat+0x154>
 8015d6a:	2b01      	cmp	r3, #1
 8015d6c:	f040 80c6 	bne.w	8015efc <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8015d70:	68bb      	ldr	r3, [r7, #8]
 8015d72:	61bb      	str	r3, [r7, #24]
 8015d74:	69bb      	ldr	r3, [r7, #24]
 8015d76:	085b      	lsrs	r3, r3, #1
 8015d78:	69ba      	ldr	r2, [r7, #24]
 8015d7a:	4413      	add	r3, r2
 8015d7c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8015d7e:	68fb      	ldr	r3, [r7, #12]
 8015d80:	6a1a      	ldr	r2, [r3, #32]
 8015d82:	69bb      	ldr	r3, [r7, #24]
 8015d84:	0a5b      	lsrs	r3, r3, #9
 8015d86:	4413      	add	r3, r2
 8015d88:	4619      	mov	r1, r3
 8015d8a:	68f8      	ldr	r0, [r7, #12]
 8015d8c:	f7ff fe74 	bl	8015a78 <move_window>
 8015d90:	4603      	mov	r3, r0
 8015d92:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8015d94:	7ffb      	ldrb	r3, [r7, #31]
 8015d96:	2b00      	cmp	r3, #0
 8015d98:	f040 80a9 	bne.w	8015eee <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8015d9c:	68fb      	ldr	r3, [r7, #12]
 8015d9e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8015da2:	69bb      	ldr	r3, [r7, #24]
 8015da4:	1c59      	adds	r1, r3, #1
 8015da6:	61b9      	str	r1, [r7, #24]
 8015da8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015dac:	4413      	add	r3, r2
 8015dae:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8015db0:	68bb      	ldr	r3, [r7, #8]
 8015db2:	f003 0301 	and.w	r3, r3, #1
 8015db6:	2b00      	cmp	r3, #0
 8015db8:	d00d      	beq.n	8015dd6 <put_fat+0x9e>
 8015dba:	697b      	ldr	r3, [r7, #20]
 8015dbc:	781b      	ldrb	r3, [r3, #0]
 8015dbe:	b25b      	sxtb	r3, r3
 8015dc0:	f003 030f 	and.w	r3, r3, #15
 8015dc4:	b25a      	sxtb	r2, r3
 8015dc6:	687b      	ldr	r3, [r7, #4]
 8015dc8:	b2db      	uxtb	r3, r3
 8015dca:	011b      	lsls	r3, r3, #4
 8015dcc:	b25b      	sxtb	r3, r3
 8015dce:	4313      	orrs	r3, r2
 8015dd0:	b25b      	sxtb	r3, r3
 8015dd2:	b2db      	uxtb	r3, r3
 8015dd4:	e001      	b.n	8015dda <put_fat+0xa2>
 8015dd6:	687b      	ldr	r3, [r7, #4]
 8015dd8:	b2db      	uxtb	r3, r3
 8015dda:	697a      	ldr	r2, [r7, #20]
 8015ddc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8015dde:	68fb      	ldr	r3, [r7, #12]
 8015de0:	2201      	movs	r2, #1
 8015de2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8015de4:	68fb      	ldr	r3, [r7, #12]
 8015de6:	6a1a      	ldr	r2, [r3, #32]
 8015de8:	69bb      	ldr	r3, [r7, #24]
 8015dea:	0a5b      	lsrs	r3, r3, #9
 8015dec:	4413      	add	r3, r2
 8015dee:	4619      	mov	r1, r3
 8015df0:	68f8      	ldr	r0, [r7, #12]
 8015df2:	f7ff fe41 	bl	8015a78 <move_window>
 8015df6:	4603      	mov	r3, r0
 8015df8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8015dfa:	7ffb      	ldrb	r3, [r7, #31]
 8015dfc:	2b00      	cmp	r3, #0
 8015dfe:	d178      	bne.n	8015ef2 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8015e00:	68fb      	ldr	r3, [r7, #12]
 8015e02:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8015e06:	69bb      	ldr	r3, [r7, #24]
 8015e08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015e0c:	4413      	add	r3, r2
 8015e0e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8015e10:	68bb      	ldr	r3, [r7, #8]
 8015e12:	f003 0301 	and.w	r3, r3, #1
 8015e16:	2b00      	cmp	r3, #0
 8015e18:	d003      	beq.n	8015e22 <put_fat+0xea>
 8015e1a:	687b      	ldr	r3, [r7, #4]
 8015e1c:	091b      	lsrs	r3, r3, #4
 8015e1e:	b2db      	uxtb	r3, r3
 8015e20:	e00e      	b.n	8015e40 <put_fat+0x108>
 8015e22:	697b      	ldr	r3, [r7, #20]
 8015e24:	781b      	ldrb	r3, [r3, #0]
 8015e26:	b25b      	sxtb	r3, r3
 8015e28:	f023 030f 	bic.w	r3, r3, #15
 8015e2c:	b25a      	sxtb	r2, r3
 8015e2e:	687b      	ldr	r3, [r7, #4]
 8015e30:	0a1b      	lsrs	r3, r3, #8
 8015e32:	b25b      	sxtb	r3, r3
 8015e34:	f003 030f 	and.w	r3, r3, #15
 8015e38:	b25b      	sxtb	r3, r3
 8015e3a:	4313      	orrs	r3, r2
 8015e3c:	b25b      	sxtb	r3, r3
 8015e3e:	b2db      	uxtb	r3, r3
 8015e40:	697a      	ldr	r2, [r7, #20]
 8015e42:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8015e44:	68fb      	ldr	r3, [r7, #12]
 8015e46:	2201      	movs	r2, #1
 8015e48:	70da      	strb	r2, [r3, #3]
			break;
 8015e4a:	e057      	b.n	8015efc <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8015e4c:	68fb      	ldr	r3, [r7, #12]
 8015e4e:	6a1a      	ldr	r2, [r3, #32]
 8015e50:	68bb      	ldr	r3, [r7, #8]
 8015e52:	0a1b      	lsrs	r3, r3, #8
 8015e54:	4413      	add	r3, r2
 8015e56:	4619      	mov	r1, r3
 8015e58:	68f8      	ldr	r0, [r7, #12]
 8015e5a:	f7ff fe0d 	bl	8015a78 <move_window>
 8015e5e:	4603      	mov	r3, r0
 8015e60:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8015e62:	7ffb      	ldrb	r3, [r7, #31]
 8015e64:	2b00      	cmp	r3, #0
 8015e66:	d146      	bne.n	8015ef6 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8015e68:	68fb      	ldr	r3, [r7, #12]
 8015e6a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8015e6e:	68bb      	ldr	r3, [r7, #8]
 8015e70:	005b      	lsls	r3, r3, #1
 8015e72:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8015e76:	4413      	add	r3, r2
 8015e78:	687a      	ldr	r2, [r7, #4]
 8015e7a:	b292      	uxth	r2, r2
 8015e7c:	4611      	mov	r1, r2
 8015e7e:	4618      	mov	r0, r3
 8015e80:	f7ff fb85 	bl	801558e <st_word>
			fs->wflag = 1;
 8015e84:	68fb      	ldr	r3, [r7, #12]
 8015e86:	2201      	movs	r2, #1
 8015e88:	70da      	strb	r2, [r3, #3]
			break;
 8015e8a:	e037      	b.n	8015efc <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8015e8c:	68fb      	ldr	r3, [r7, #12]
 8015e8e:	6a1a      	ldr	r2, [r3, #32]
 8015e90:	68bb      	ldr	r3, [r7, #8]
 8015e92:	09db      	lsrs	r3, r3, #7
 8015e94:	4413      	add	r3, r2
 8015e96:	4619      	mov	r1, r3
 8015e98:	68f8      	ldr	r0, [r7, #12]
 8015e9a:	f7ff fded 	bl	8015a78 <move_window>
 8015e9e:	4603      	mov	r3, r0
 8015ea0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8015ea2:	7ffb      	ldrb	r3, [r7, #31]
 8015ea4:	2b00      	cmp	r3, #0
 8015ea6:	d128      	bne.n	8015efa <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8015ea8:	687b      	ldr	r3, [r7, #4]
 8015eaa:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8015eae:	68fb      	ldr	r3, [r7, #12]
 8015eb0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8015eb4:	68bb      	ldr	r3, [r7, #8]
 8015eb6:	009b      	lsls	r3, r3, #2
 8015eb8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8015ebc:	4413      	add	r3, r2
 8015ebe:	4618      	mov	r0, r3
 8015ec0:	f7ff fb42 	bl	8015548 <ld_dword>
 8015ec4:	4603      	mov	r3, r0
 8015ec6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8015eca:	4323      	orrs	r3, r4
 8015ecc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8015ece:	68fb      	ldr	r3, [r7, #12]
 8015ed0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8015ed4:	68bb      	ldr	r3, [r7, #8]
 8015ed6:	009b      	lsls	r3, r3, #2
 8015ed8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8015edc:	4413      	add	r3, r2
 8015ede:	6879      	ldr	r1, [r7, #4]
 8015ee0:	4618      	mov	r0, r3
 8015ee2:	f7ff fb6f 	bl	80155c4 <st_dword>
			fs->wflag = 1;
 8015ee6:	68fb      	ldr	r3, [r7, #12]
 8015ee8:	2201      	movs	r2, #1
 8015eea:	70da      	strb	r2, [r3, #3]
			break;
 8015eec:	e006      	b.n	8015efc <put_fat+0x1c4>
			if (res != FR_OK) break;
 8015eee:	bf00      	nop
 8015ef0:	e004      	b.n	8015efc <put_fat+0x1c4>
			if (res != FR_OK) break;
 8015ef2:	bf00      	nop
 8015ef4:	e002      	b.n	8015efc <put_fat+0x1c4>
			if (res != FR_OK) break;
 8015ef6:	bf00      	nop
 8015ef8:	e000      	b.n	8015efc <put_fat+0x1c4>
			if (res != FR_OK) break;
 8015efa:	bf00      	nop
		}
	}
	return res;
 8015efc:	7ffb      	ldrb	r3, [r7, #31]
}
 8015efe:	4618      	mov	r0, r3
 8015f00:	3724      	adds	r7, #36	; 0x24
 8015f02:	46bd      	mov	sp, r7
 8015f04:	bd90      	pop	{r4, r7, pc}

08015f06 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8015f06:	b580      	push	{r7, lr}
 8015f08:	b088      	sub	sp, #32
 8015f0a:	af00      	add	r7, sp, #0
 8015f0c:	60f8      	str	r0, [r7, #12]
 8015f0e:	60b9      	str	r1, [r7, #8]
 8015f10:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8015f12:	2300      	movs	r3, #0
 8015f14:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8015f16:	68fb      	ldr	r3, [r7, #12]
 8015f18:	681b      	ldr	r3, [r3, #0]
 8015f1a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8015f1c:	68bb      	ldr	r3, [r7, #8]
 8015f1e:	2b01      	cmp	r3, #1
 8015f20:	d904      	bls.n	8015f2c <remove_chain+0x26>
 8015f22:	69bb      	ldr	r3, [r7, #24]
 8015f24:	695b      	ldr	r3, [r3, #20]
 8015f26:	68ba      	ldr	r2, [r7, #8]
 8015f28:	429a      	cmp	r2, r3
 8015f2a:	d301      	bcc.n	8015f30 <remove_chain+0x2a>
 8015f2c:	2302      	movs	r3, #2
 8015f2e:	e04b      	b.n	8015fc8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8015f30:	687b      	ldr	r3, [r7, #4]
 8015f32:	2b00      	cmp	r3, #0
 8015f34:	d00c      	beq.n	8015f50 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8015f36:	f04f 32ff 	mov.w	r2, #4294967295
 8015f3a:	6879      	ldr	r1, [r7, #4]
 8015f3c:	69b8      	ldr	r0, [r7, #24]
 8015f3e:	f7ff fefb 	bl	8015d38 <put_fat>
 8015f42:	4603      	mov	r3, r0
 8015f44:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8015f46:	7ffb      	ldrb	r3, [r7, #31]
 8015f48:	2b00      	cmp	r3, #0
 8015f4a:	d001      	beq.n	8015f50 <remove_chain+0x4a>
 8015f4c:	7ffb      	ldrb	r3, [r7, #31]
 8015f4e:	e03b      	b.n	8015fc8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8015f50:	68b9      	ldr	r1, [r7, #8]
 8015f52:	68f8      	ldr	r0, [r7, #12]
 8015f54:	f7ff fe4b 	bl	8015bee <get_fat>
 8015f58:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8015f5a:	697b      	ldr	r3, [r7, #20]
 8015f5c:	2b00      	cmp	r3, #0
 8015f5e:	d031      	beq.n	8015fc4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8015f60:	697b      	ldr	r3, [r7, #20]
 8015f62:	2b01      	cmp	r3, #1
 8015f64:	d101      	bne.n	8015f6a <remove_chain+0x64>
 8015f66:	2302      	movs	r3, #2
 8015f68:	e02e      	b.n	8015fc8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8015f6a:	697b      	ldr	r3, [r7, #20]
 8015f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015f70:	d101      	bne.n	8015f76 <remove_chain+0x70>
 8015f72:	2301      	movs	r3, #1
 8015f74:	e028      	b.n	8015fc8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8015f76:	2200      	movs	r2, #0
 8015f78:	68b9      	ldr	r1, [r7, #8]
 8015f7a:	69b8      	ldr	r0, [r7, #24]
 8015f7c:	f7ff fedc 	bl	8015d38 <put_fat>
 8015f80:	4603      	mov	r3, r0
 8015f82:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8015f84:	7ffb      	ldrb	r3, [r7, #31]
 8015f86:	2b00      	cmp	r3, #0
 8015f88:	d001      	beq.n	8015f8e <remove_chain+0x88>
 8015f8a:	7ffb      	ldrb	r3, [r7, #31]
 8015f8c:	e01c      	b.n	8015fc8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8015f8e:	69bb      	ldr	r3, [r7, #24]
 8015f90:	691a      	ldr	r2, [r3, #16]
 8015f92:	69bb      	ldr	r3, [r7, #24]
 8015f94:	695b      	ldr	r3, [r3, #20]
 8015f96:	3b02      	subs	r3, #2
 8015f98:	429a      	cmp	r2, r3
 8015f9a:	d20b      	bcs.n	8015fb4 <remove_chain+0xae>
			fs->free_clst++;
 8015f9c:	69bb      	ldr	r3, [r7, #24]
 8015f9e:	691b      	ldr	r3, [r3, #16]
 8015fa0:	1c5a      	adds	r2, r3, #1
 8015fa2:	69bb      	ldr	r3, [r7, #24]
 8015fa4:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8015fa6:	69bb      	ldr	r3, [r7, #24]
 8015fa8:	791b      	ldrb	r3, [r3, #4]
 8015faa:	f043 0301 	orr.w	r3, r3, #1
 8015fae:	b2da      	uxtb	r2, r3
 8015fb0:	69bb      	ldr	r3, [r7, #24]
 8015fb2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8015fb4:	697b      	ldr	r3, [r7, #20]
 8015fb6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8015fb8:	69bb      	ldr	r3, [r7, #24]
 8015fba:	695b      	ldr	r3, [r3, #20]
 8015fbc:	68ba      	ldr	r2, [r7, #8]
 8015fbe:	429a      	cmp	r2, r3
 8015fc0:	d3c6      	bcc.n	8015f50 <remove_chain+0x4a>
 8015fc2:	e000      	b.n	8015fc6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8015fc4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8015fc6:	2300      	movs	r3, #0
}
 8015fc8:	4618      	mov	r0, r3
 8015fca:	3720      	adds	r7, #32
 8015fcc:	46bd      	mov	sp, r7
 8015fce:	bd80      	pop	{r7, pc}

08015fd0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8015fd0:	b580      	push	{r7, lr}
 8015fd2:	b088      	sub	sp, #32
 8015fd4:	af00      	add	r7, sp, #0
 8015fd6:	6078      	str	r0, [r7, #4]
 8015fd8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8015fda:	687b      	ldr	r3, [r7, #4]
 8015fdc:	681b      	ldr	r3, [r3, #0]
 8015fde:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8015fe0:	683b      	ldr	r3, [r7, #0]
 8015fe2:	2b00      	cmp	r3, #0
 8015fe4:	d10d      	bne.n	8016002 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8015fe6:	693b      	ldr	r3, [r7, #16]
 8015fe8:	68db      	ldr	r3, [r3, #12]
 8015fea:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8015fec:	69bb      	ldr	r3, [r7, #24]
 8015fee:	2b00      	cmp	r3, #0
 8015ff0:	d004      	beq.n	8015ffc <create_chain+0x2c>
 8015ff2:	693b      	ldr	r3, [r7, #16]
 8015ff4:	695b      	ldr	r3, [r3, #20]
 8015ff6:	69ba      	ldr	r2, [r7, #24]
 8015ff8:	429a      	cmp	r2, r3
 8015ffa:	d31b      	bcc.n	8016034 <create_chain+0x64>
 8015ffc:	2301      	movs	r3, #1
 8015ffe:	61bb      	str	r3, [r7, #24]
 8016000:	e018      	b.n	8016034 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8016002:	6839      	ldr	r1, [r7, #0]
 8016004:	6878      	ldr	r0, [r7, #4]
 8016006:	f7ff fdf2 	bl	8015bee <get_fat>
 801600a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801600c:	68fb      	ldr	r3, [r7, #12]
 801600e:	2b01      	cmp	r3, #1
 8016010:	d801      	bhi.n	8016016 <create_chain+0x46>
 8016012:	2301      	movs	r3, #1
 8016014:	e070      	b.n	80160f8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8016016:	68fb      	ldr	r3, [r7, #12]
 8016018:	f1b3 3fff 	cmp.w	r3, #4294967295
 801601c:	d101      	bne.n	8016022 <create_chain+0x52>
 801601e:	68fb      	ldr	r3, [r7, #12]
 8016020:	e06a      	b.n	80160f8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8016022:	693b      	ldr	r3, [r7, #16]
 8016024:	695b      	ldr	r3, [r3, #20]
 8016026:	68fa      	ldr	r2, [r7, #12]
 8016028:	429a      	cmp	r2, r3
 801602a:	d201      	bcs.n	8016030 <create_chain+0x60>
 801602c:	68fb      	ldr	r3, [r7, #12]
 801602e:	e063      	b.n	80160f8 <create_chain+0x128>
		scl = clst;
 8016030:	683b      	ldr	r3, [r7, #0]
 8016032:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8016034:	69bb      	ldr	r3, [r7, #24]
 8016036:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8016038:	69fb      	ldr	r3, [r7, #28]
 801603a:	3301      	adds	r3, #1
 801603c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801603e:	693b      	ldr	r3, [r7, #16]
 8016040:	695b      	ldr	r3, [r3, #20]
 8016042:	69fa      	ldr	r2, [r7, #28]
 8016044:	429a      	cmp	r2, r3
 8016046:	d307      	bcc.n	8016058 <create_chain+0x88>
				ncl = 2;
 8016048:	2302      	movs	r3, #2
 801604a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801604c:	69fa      	ldr	r2, [r7, #28]
 801604e:	69bb      	ldr	r3, [r7, #24]
 8016050:	429a      	cmp	r2, r3
 8016052:	d901      	bls.n	8016058 <create_chain+0x88>
 8016054:	2300      	movs	r3, #0
 8016056:	e04f      	b.n	80160f8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8016058:	69f9      	ldr	r1, [r7, #28]
 801605a:	6878      	ldr	r0, [r7, #4]
 801605c:	f7ff fdc7 	bl	8015bee <get_fat>
 8016060:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8016062:	68fb      	ldr	r3, [r7, #12]
 8016064:	2b00      	cmp	r3, #0
 8016066:	d00e      	beq.n	8016086 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8016068:	68fb      	ldr	r3, [r7, #12]
 801606a:	2b01      	cmp	r3, #1
 801606c:	d003      	beq.n	8016076 <create_chain+0xa6>
 801606e:	68fb      	ldr	r3, [r7, #12]
 8016070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016074:	d101      	bne.n	801607a <create_chain+0xaa>
 8016076:	68fb      	ldr	r3, [r7, #12]
 8016078:	e03e      	b.n	80160f8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801607a:	69fa      	ldr	r2, [r7, #28]
 801607c:	69bb      	ldr	r3, [r7, #24]
 801607e:	429a      	cmp	r2, r3
 8016080:	d1da      	bne.n	8016038 <create_chain+0x68>
 8016082:	2300      	movs	r3, #0
 8016084:	e038      	b.n	80160f8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8016086:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8016088:	f04f 32ff 	mov.w	r2, #4294967295
 801608c:	69f9      	ldr	r1, [r7, #28]
 801608e:	6938      	ldr	r0, [r7, #16]
 8016090:	f7ff fe52 	bl	8015d38 <put_fat>
 8016094:	4603      	mov	r3, r0
 8016096:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8016098:	7dfb      	ldrb	r3, [r7, #23]
 801609a:	2b00      	cmp	r3, #0
 801609c:	d109      	bne.n	80160b2 <create_chain+0xe2>
 801609e:	683b      	ldr	r3, [r7, #0]
 80160a0:	2b00      	cmp	r3, #0
 80160a2:	d006      	beq.n	80160b2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80160a4:	69fa      	ldr	r2, [r7, #28]
 80160a6:	6839      	ldr	r1, [r7, #0]
 80160a8:	6938      	ldr	r0, [r7, #16]
 80160aa:	f7ff fe45 	bl	8015d38 <put_fat>
 80160ae:	4603      	mov	r3, r0
 80160b0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80160b2:	7dfb      	ldrb	r3, [r7, #23]
 80160b4:	2b00      	cmp	r3, #0
 80160b6:	d116      	bne.n	80160e6 <create_chain+0x116>
		fs->last_clst = ncl;
 80160b8:	693b      	ldr	r3, [r7, #16]
 80160ba:	69fa      	ldr	r2, [r7, #28]
 80160bc:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80160be:	693b      	ldr	r3, [r7, #16]
 80160c0:	691a      	ldr	r2, [r3, #16]
 80160c2:	693b      	ldr	r3, [r7, #16]
 80160c4:	695b      	ldr	r3, [r3, #20]
 80160c6:	3b02      	subs	r3, #2
 80160c8:	429a      	cmp	r2, r3
 80160ca:	d804      	bhi.n	80160d6 <create_chain+0x106>
 80160cc:	693b      	ldr	r3, [r7, #16]
 80160ce:	691b      	ldr	r3, [r3, #16]
 80160d0:	1e5a      	subs	r2, r3, #1
 80160d2:	693b      	ldr	r3, [r7, #16]
 80160d4:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80160d6:	693b      	ldr	r3, [r7, #16]
 80160d8:	791b      	ldrb	r3, [r3, #4]
 80160da:	f043 0301 	orr.w	r3, r3, #1
 80160de:	b2da      	uxtb	r2, r3
 80160e0:	693b      	ldr	r3, [r7, #16]
 80160e2:	711a      	strb	r2, [r3, #4]
 80160e4:	e007      	b.n	80160f6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80160e6:	7dfb      	ldrb	r3, [r7, #23]
 80160e8:	2b01      	cmp	r3, #1
 80160ea:	d102      	bne.n	80160f2 <create_chain+0x122>
 80160ec:	f04f 33ff 	mov.w	r3, #4294967295
 80160f0:	e000      	b.n	80160f4 <create_chain+0x124>
 80160f2:	2301      	movs	r3, #1
 80160f4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80160f6:	69fb      	ldr	r3, [r7, #28]
}
 80160f8:	4618      	mov	r0, r3
 80160fa:	3720      	adds	r7, #32
 80160fc:	46bd      	mov	sp, r7
 80160fe:	bd80      	pop	{r7, pc}

08016100 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8016100:	b480      	push	{r7}
 8016102:	b087      	sub	sp, #28
 8016104:	af00      	add	r7, sp, #0
 8016106:	6078      	str	r0, [r7, #4]
 8016108:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	681b      	ldr	r3, [r3, #0]
 801610e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8016110:	687b      	ldr	r3, [r7, #4]
 8016112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016114:	3304      	adds	r3, #4
 8016116:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8016118:	683b      	ldr	r3, [r7, #0]
 801611a:	0a5b      	lsrs	r3, r3, #9
 801611c:	68fa      	ldr	r2, [r7, #12]
 801611e:	8952      	ldrh	r2, [r2, #10]
 8016120:	fbb3 f3f2 	udiv	r3, r3, r2
 8016124:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8016126:	693b      	ldr	r3, [r7, #16]
 8016128:	1d1a      	adds	r2, r3, #4
 801612a:	613a      	str	r2, [r7, #16]
 801612c:	681b      	ldr	r3, [r3, #0]
 801612e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8016130:	68bb      	ldr	r3, [r7, #8]
 8016132:	2b00      	cmp	r3, #0
 8016134:	d101      	bne.n	801613a <clmt_clust+0x3a>
 8016136:	2300      	movs	r3, #0
 8016138:	e010      	b.n	801615c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 801613a:	697a      	ldr	r2, [r7, #20]
 801613c:	68bb      	ldr	r3, [r7, #8]
 801613e:	429a      	cmp	r2, r3
 8016140:	d307      	bcc.n	8016152 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8016142:	697a      	ldr	r2, [r7, #20]
 8016144:	68bb      	ldr	r3, [r7, #8]
 8016146:	1ad3      	subs	r3, r2, r3
 8016148:	617b      	str	r3, [r7, #20]
 801614a:	693b      	ldr	r3, [r7, #16]
 801614c:	3304      	adds	r3, #4
 801614e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8016150:	e7e9      	b.n	8016126 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8016152:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8016154:	693b      	ldr	r3, [r7, #16]
 8016156:	681a      	ldr	r2, [r3, #0]
 8016158:	697b      	ldr	r3, [r7, #20]
 801615a:	4413      	add	r3, r2
}
 801615c:	4618      	mov	r0, r3
 801615e:	371c      	adds	r7, #28
 8016160:	46bd      	mov	sp, r7
 8016162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016166:	4770      	bx	lr

08016168 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8016168:	b580      	push	{r7, lr}
 801616a:	b086      	sub	sp, #24
 801616c:	af00      	add	r7, sp, #0
 801616e:	6078      	str	r0, [r7, #4]
 8016170:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8016172:	687b      	ldr	r3, [r7, #4]
 8016174:	681b      	ldr	r3, [r3, #0]
 8016176:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8016178:	683b      	ldr	r3, [r7, #0]
 801617a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801617e:	d204      	bcs.n	801618a <dir_sdi+0x22>
 8016180:	683b      	ldr	r3, [r7, #0]
 8016182:	f003 031f 	and.w	r3, r3, #31
 8016186:	2b00      	cmp	r3, #0
 8016188:	d001      	beq.n	801618e <dir_sdi+0x26>
		return FR_INT_ERR;
 801618a:	2302      	movs	r3, #2
 801618c:	e063      	b.n	8016256 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 801618e:	687b      	ldr	r3, [r7, #4]
 8016190:	683a      	ldr	r2, [r7, #0]
 8016192:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8016194:	687b      	ldr	r3, [r7, #4]
 8016196:	689b      	ldr	r3, [r3, #8]
 8016198:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801619a:	697b      	ldr	r3, [r7, #20]
 801619c:	2b00      	cmp	r3, #0
 801619e:	d106      	bne.n	80161ae <dir_sdi+0x46>
 80161a0:	693b      	ldr	r3, [r7, #16]
 80161a2:	781b      	ldrb	r3, [r3, #0]
 80161a4:	2b02      	cmp	r3, #2
 80161a6:	d902      	bls.n	80161ae <dir_sdi+0x46>
		clst = fs->dirbase;
 80161a8:	693b      	ldr	r3, [r7, #16]
 80161aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80161ac:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80161ae:	697b      	ldr	r3, [r7, #20]
 80161b0:	2b00      	cmp	r3, #0
 80161b2:	d10c      	bne.n	80161ce <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80161b4:	683b      	ldr	r3, [r7, #0]
 80161b6:	095b      	lsrs	r3, r3, #5
 80161b8:	693a      	ldr	r2, [r7, #16]
 80161ba:	8912      	ldrh	r2, [r2, #8]
 80161bc:	4293      	cmp	r3, r2
 80161be:	d301      	bcc.n	80161c4 <dir_sdi+0x5c>
 80161c0:	2302      	movs	r3, #2
 80161c2:	e048      	b.n	8016256 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80161c4:	693b      	ldr	r3, [r7, #16]
 80161c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80161c8:	687b      	ldr	r3, [r7, #4]
 80161ca:	61da      	str	r2, [r3, #28]
 80161cc:	e029      	b.n	8016222 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80161ce:	693b      	ldr	r3, [r7, #16]
 80161d0:	895b      	ldrh	r3, [r3, #10]
 80161d2:	025b      	lsls	r3, r3, #9
 80161d4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80161d6:	e019      	b.n	801620c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80161d8:	687b      	ldr	r3, [r7, #4]
 80161da:	6979      	ldr	r1, [r7, #20]
 80161dc:	4618      	mov	r0, r3
 80161de:	f7ff fd06 	bl	8015bee <get_fat>
 80161e2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80161e4:	697b      	ldr	r3, [r7, #20]
 80161e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80161ea:	d101      	bne.n	80161f0 <dir_sdi+0x88>
 80161ec:	2301      	movs	r3, #1
 80161ee:	e032      	b.n	8016256 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80161f0:	697b      	ldr	r3, [r7, #20]
 80161f2:	2b01      	cmp	r3, #1
 80161f4:	d904      	bls.n	8016200 <dir_sdi+0x98>
 80161f6:	693b      	ldr	r3, [r7, #16]
 80161f8:	695b      	ldr	r3, [r3, #20]
 80161fa:	697a      	ldr	r2, [r7, #20]
 80161fc:	429a      	cmp	r2, r3
 80161fe:	d301      	bcc.n	8016204 <dir_sdi+0x9c>
 8016200:	2302      	movs	r3, #2
 8016202:	e028      	b.n	8016256 <dir_sdi+0xee>
			ofs -= csz;
 8016204:	683a      	ldr	r2, [r7, #0]
 8016206:	68fb      	ldr	r3, [r7, #12]
 8016208:	1ad3      	subs	r3, r2, r3
 801620a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801620c:	683a      	ldr	r2, [r7, #0]
 801620e:	68fb      	ldr	r3, [r7, #12]
 8016210:	429a      	cmp	r2, r3
 8016212:	d2e1      	bcs.n	80161d8 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8016214:	6979      	ldr	r1, [r7, #20]
 8016216:	6938      	ldr	r0, [r7, #16]
 8016218:	f7ff fcca 	bl	8015bb0 <clust2sect>
 801621c:	4602      	mov	r2, r0
 801621e:	687b      	ldr	r3, [r7, #4]
 8016220:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8016222:	687b      	ldr	r3, [r7, #4]
 8016224:	697a      	ldr	r2, [r7, #20]
 8016226:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8016228:	687b      	ldr	r3, [r7, #4]
 801622a:	69db      	ldr	r3, [r3, #28]
 801622c:	2b00      	cmp	r3, #0
 801622e:	d101      	bne.n	8016234 <dir_sdi+0xcc>
 8016230:	2302      	movs	r3, #2
 8016232:	e010      	b.n	8016256 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8016234:	687b      	ldr	r3, [r7, #4]
 8016236:	69da      	ldr	r2, [r3, #28]
 8016238:	683b      	ldr	r3, [r7, #0]
 801623a:	0a5b      	lsrs	r3, r3, #9
 801623c:	441a      	add	r2, r3
 801623e:	687b      	ldr	r3, [r7, #4]
 8016240:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8016242:	693b      	ldr	r3, [r7, #16]
 8016244:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016248:	683b      	ldr	r3, [r7, #0]
 801624a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801624e:	441a      	add	r2, r3
 8016250:	687b      	ldr	r3, [r7, #4]
 8016252:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8016254:	2300      	movs	r3, #0
}
 8016256:	4618      	mov	r0, r3
 8016258:	3718      	adds	r7, #24
 801625a:	46bd      	mov	sp, r7
 801625c:	bd80      	pop	{r7, pc}

0801625e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801625e:	b580      	push	{r7, lr}
 8016260:	b086      	sub	sp, #24
 8016262:	af00      	add	r7, sp, #0
 8016264:	6078      	str	r0, [r7, #4]
 8016266:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8016268:	687b      	ldr	r3, [r7, #4]
 801626a:	681b      	ldr	r3, [r3, #0]
 801626c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801626e:	687b      	ldr	r3, [r7, #4]
 8016270:	695b      	ldr	r3, [r3, #20]
 8016272:	3320      	adds	r3, #32
 8016274:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8016276:	687b      	ldr	r3, [r7, #4]
 8016278:	69db      	ldr	r3, [r3, #28]
 801627a:	2b00      	cmp	r3, #0
 801627c:	d003      	beq.n	8016286 <dir_next+0x28>
 801627e:	68bb      	ldr	r3, [r7, #8]
 8016280:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8016284:	d301      	bcc.n	801628a <dir_next+0x2c>
 8016286:	2304      	movs	r3, #4
 8016288:	e0aa      	b.n	80163e0 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801628a:	68bb      	ldr	r3, [r7, #8]
 801628c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016290:	2b00      	cmp	r3, #0
 8016292:	f040 8098 	bne.w	80163c6 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8016296:	687b      	ldr	r3, [r7, #4]
 8016298:	69db      	ldr	r3, [r3, #28]
 801629a:	1c5a      	adds	r2, r3, #1
 801629c:	687b      	ldr	r3, [r7, #4]
 801629e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80162a0:	687b      	ldr	r3, [r7, #4]
 80162a2:	699b      	ldr	r3, [r3, #24]
 80162a4:	2b00      	cmp	r3, #0
 80162a6:	d10b      	bne.n	80162c0 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80162a8:	68bb      	ldr	r3, [r7, #8]
 80162aa:	095b      	lsrs	r3, r3, #5
 80162ac:	68fa      	ldr	r2, [r7, #12]
 80162ae:	8912      	ldrh	r2, [r2, #8]
 80162b0:	4293      	cmp	r3, r2
 80162b2:	f0c0 8088 	bcc.w	80163c6 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80162b6:	687b      	ldr	r3, [r7, #4]
 80162b8:	2200      	movs	r2, #0
 80162ba:	61da      	str	r2, [r3, #28]
 80162bc:	2304      	movs	r3, #4
 80162be:	e08f      	b.n	80163e0 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80162c0:	68bb      	ldr	r3, [r7, #8]
 80162c2:	0a5b      	lsrs	r3, r3, #9
 80162c4:	68fa      	ldr	r2, [r7, #12]
 80162c6:	8952      	ldrh	r2, [r2, #10]
 80162c8:	3a01      	subs	r2, #1
 80162ca:	4013      	ands	r3, r2
 80162cc:	2b00      	cmp	r3, #0
 80162ce:	d17a      	bne.n	80163c6 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80162d0:	687a      	ldr	r2, [r7, #4]
 80162d2:	687b      	ldr	r3, [r7, #4]
 80162d4:	699b      	ldr	r3, [r3, #24]
 80162d6:	4619      	mov	r1, r3
 80162d8:	4610      	mov	r0, r2
 80162da:	f7ff fc88 	bl	8015bee <get_fat>
 80162de:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80162e0:	697b      	ldr	r3, [r7, #20]
 80162e2:	2b01      	cmp	r3, #1
 80162e4:	d801      	bhi.n	80162ea <dir_next+0x8c>
 80162e6:	2302      	movs	r3, #2
 80162e8:	e07a      	b.n	80163e0 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80162ea:	697b      	ldr	r3, [r7, #20]
 80162ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80162f0:	d101      	bne.n	80162f6 <dir_next+0x98>
 80162f2:	2301      	movs	r3, #1
 80162f4:	e074      	b.n	80163e0 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80162f6:	68fb      	ldr	r3, [r7, #12]
 80162f8:	695b      	ldr	r3, [r3, #20]
 80162fa:	697a      	ldr	r2, [r7, #20]
 80162fc:	429a      	cmp	r2, r3
 80162fe:	d358      	bcc.n	80163b2 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8016300:	683b      	ldr	r3, [r7, #0]
 8016302:	2b00      	cmp	r3, #0
 8016304:	d104      	bne.n	8016310 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8016306:	687b      	ldr	r3, [r7, #4]
 8016308:	2200      	movs	r2, #0
 801630a:	61da      	str	r2, [r3, #28]
 801630c:	2304      	movs	r3, #4
 801630e:	e067      	b.n	80163e0 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8016310:	687a      	ldr	r2, [r7, #4]
 8016312:	687b      	ldr	r3, [r7, #4]
 8016314:	699b      	ldr	r3, [r3, #24]
 8016316:	4619      	mov	r1, r3
 8016318:	4610      	mov	r0, r2
 801631a:	f7ff fe59 	bl	8015fd0 <create_chain>
 801631e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8016320:	697b      	ldr	r3, [r7, #20]
 8016322:	2b00      	cmp	r3, #0
 8016324:	d101      	bne.n	801632a <dir_next+0xcc>
 8016326:	2307      	movs	r3, #7
 8016328:	e05a      	b.n	80163e0 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801632a:	697b      	ldr	r3, [r7, #20]
 801632c:	2b01      	cmp	r3, #1
 801632e:	d101      	bne.n	8016334 <dir_next+0xd6>
 8016330:	2302      	movs	r3, #2
 8016332:	e055      	b.n	80163e0 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8016334:	697b      	ldr	r3, [r7, #20]
 8016336:	f1b3 3fff 	cmp.w	r3, #4294967295
 801633a:	d101      	bne.n	8016340 <dir_next+0xe2>
 801633c:	2301      	movs	r3, #1
 801633e:	e04f      	b.n	80163e0 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8016340:	68f8      	ldr	r0, [r7, #12]
 8016342:	f7ff fb55 	bl	80159f0 <sync_window>
 8016346:	4603      	mov	r3, r0
 8016348:	2b00      	cmp	r3, #0
 801634a:	d001      	beq.n	8016350 <dir_next+0xf2>
 801634c:	2301      	movs	r3, #1
 801634e:	e047      	b.n	80163e0 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8016350:	68fb      	ldr	r3, [r7, #12]
 8016352:	3330      	adds	r3, #48	; 0x30
 8016354:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016358:	2100      	movs	r1, #0
 801635a:	4618      	mov	r0, r3
 801635c:	f7ff f97f 	bl	801565e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8016360:	2300      	movs	r3, #0
 8016362:	613b      	str	r3, [r7, #16]
 8016364:	6979      	ldr	r1, [r7, #20]
 8016366:	68f8      	ldr	r0, [r7, #12]
 8016368:	f7ff fc22 	bl	8015bb0 <clust2sect>
 801636c:	4602      	mov	r2, r0
 801636e:	68fb      	ldr	r3, [r7, #12]
 8016370:	62da      	str	r2, [r3, #44]	; 0x2c
 8016372:	e012      	b.n	801639a <dir_next+0x13c>
						fs->wflag = 1;
 8016374:	68fb      	ldr	r3, [r7, #12]
 8016376:	2201      	movs	r2, #1
 8016378:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801637a:	68f8      	ldr	r0, [r7, #12]
 801637c:	f7ff fb38 	bl	80159f0 <sync_window>
 8016380:	4603      	mov	r3, r0
 8016382:	2b00      	cmp	r3, #0
 8016384:	d001      	beq.n	801638a <dir_next+0x12c>
 8016386:	2301      	movs	r3, #1
 8016388:	e02a      	b.n	80163e0 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801638a:	693b      	ldr	r3, [r7, #16]
 801638c:	3301      	adds	r3, #1
 801638e:	613b      	str	r3, [r7, #16]
 8016390:	68fb      	ldr	r3, [r7, #12]
 8016392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016394:	1c5a      	adds	r2, r3, #1
 8016396:	68fb      	ldr	r3, [r7, #12]
 8016398:	62da      	str	r2, [r3, #44]	; 0x2c
 801639a:	68fb      	ldr	r3, [r7, #12]
 801639c:	895b      	ldrh	r3, [r3, #10]
 801639e:	461a      	mov	r2, r3
 80163a0:	693b      	ldr	r3, [r7, #16]
 80163a2:	4293      	cmp	r3, r2
 80163a4:	d3e6      	bcc.n	8016374 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80163a6:	68fb      	ldr	r3, [r7, #12]
 80163a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80163aa:	693b      	ldr	r3, [r7, #16]
 80163ac:	1ad2      	subs	r2, r2, r3
 80163ae:	68fb      	ldr	r3, [r7, #12]
 80163b0:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80163b2:	687b      	ldr	r3, [r7, #4]
 80163b4:	697a      	ldr	r2, [r7, #20]
 80163b6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80163b8:	6979      	ldr	r1, [r7, #20]
 80163ba:	68f8      	ldr	r0, [r7, #12]
 80163bc:	f7ff fbf8 	bl	8015bb0 <clust2sect>
 80163c0:	4602      	mov	r2, r0
 80163c2:	687b      	ldr	r3, [r7, #4]
 80163c4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80163c6:	687b      	ldr	r3, [r7, #4]
 80163c8:	68ba      	ldr	r2, [r7, #8]
 80163ca:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80163cc:	68fb      	ldr	r3, [r7, #12]
 80163ce:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80163d2:	68bb      	ldr	r3, [r7, #8]
 80163d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80163d8:	441a      	add	r2, r3
 80163da:	687b      	ldr	r3, [r7, #4]
 80163dc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80163de:	2300      	movs	r3, #0
}
 80163e0:	4618      	mov	r0, r3
 80163e2:	3718      	adds	r7, #24
 80163e4:	46bd      	mov	sp, r7
 80163e6:	bd80      	pop	{r7, pc}

080163e8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80163e8:	b580      	push	{r7, lr}
 80163ea:	b086      	sub	sp, #24
 80163ec:	af00      	add	r7, sp, #0
 80163ee:	6078      	str	r0, [r7, #4]
 80163f0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80163f2:	687b      	ldr	r3, [r7, #4]
 80163f4:	681b      	ldr	r3, [r3, #0]
 80163f6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80163f8:	2100      	movs	r1, #0
 80163fa:	6878      	ldr	r0, [r7, #4]
 80163fc:	f7ff feb4 	bl	8016168 <dir_sdi>
 8016400:	4603      	mov	r3, r0
 8016402:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8016404:	7dfb      	ldrb	r3, [r7, #23]
 8016406:	2b00      	cmp	r3, #0
 8016408:	d12b      	bne.n	8016462 <dir_alloc+0x7a>
		n = 0;
 801640a:	2300      	movs	r3, #0
 801640c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801640e:	687b      	ldr	r3, [r7, #4]
 8016410:	69db      	ldr	r3, [r3, #28]
 8016412:	4619      	mov	r1, r3
 8016414:	68f8      	ldr	r0, [r7, #12]
 8016416:	f7ff fb2f 	bl	8015a78 <move_window>
 801641a:	4603      	mov	r3, r0
 801641c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801641e:	7dfb      	ldrb	r3, [r7, #23]
 8016420:	2b00      	cmp	r3, #0
 8016422:	d11d      	bne.n	8016460 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8016424:	687b      	ldr	r3, [r7, #4]
 8016426:	6a1b      	ldr	r3, [r3, #32]
 8016428:	781b      	ldrb	r3, [r3, #0]
 801642a:	2be5      	cmp	r3, #229	; 0xe5
 801642c:	d004      	beq.n	8016438 <dir_alloc+0x50>
 801642e:	687b      	ldr	r3, [r7, #4]
 8016430:	6a1b      	ldr	r3, [r3, #32]
 8016432:	781b      	ldrb	r3, [r3, #0]
 8016434:	2b00      	cmp	r3, #0
 8016436:	d107      	bne.n	8016448 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8016438:	693b      	ldr	r3, [r7, #16]
 801643a:	3301      	adds	r3, #1
 801643c:	613b      	str	r3, [r7, #16]
 801643e:	693a      	ldr	r2, [r7, #16]
 8016440:	683b      	ldr	r3, [r7, #0]
 8016442:	429a      	cmp	r2, r3
 8016444:	d102      	bne.n	801644c <dir_alloc+0x64>
 8016446:	e00c      	b.n	8016462 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8016448:	2300      	movs	r3, #0
 801644a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801644c:	2101      	movs	r1, #1
 801644e:	6878      	ldr	r0, [r7, #4]
 8016450:	f7ff ff05 	bl	801625e <dir_next>
 8016454:	4603      	mov	r3, r0
 8016456:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8016458:	7dfb      	ldrb	r3, [r7, #23]
 801645a:	2b00      	cmp	r3, #0
 801645c:	d0d7      	beq.n	801640e <dir_alloc+0x26>
 801645e:	e000      	b.n	8016462 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8016460:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8016462:	7dfb      	ldrb	r3, [r7, #23]
 8016464:	2b04      	cmp	r3, #4
 8016466:	d101      	bne.n	801646c <dir_alloc+0x84>
 8016468:	2307      	movs	r3, #7
 801646a:	75fb      	strb	r3, [r7, #23]
	return res;
 801646c:	7dfb      	ldrb	r3, [r7, #23]
}
 801646e:	4618      	mov	r0, r3
 8016470:	3718      	adds	r7, #24
 8016472:	46bd      	mov	sp, r7
 8016474:	bd80      	pop	{r7, pc}

08016476 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8016476:	b580      	push	{r7, lr}
 8016478:	b084      	sub	sp, #16
 801647a:	af00      	add	r7, sp, #0
 801647c:	6078      	str	r0, [r7, #4]
 801647e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8016480:	683b      	ldr	r3, [r7, #0]
 8016482:	331a      	adds	r3, #26
 8016484:	4618      	mov	r0, r3
 8016486:	f7ff f847 	bl	8015518 <ld_word>
 801648a:	4603      	mov	r3, r0
 801648c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801648e:	687b      	ldr	r3, [r7, #4]
 8016490:	781b      	ldrb	r3, [r3, #0]
 8016492:	2b03      	cmp	r3, #3
 8016494:	d109      	bne.n	80164aa <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8016496:	683b      	ldr	r3, [r7, #0]
 8016498:	3314      	adds	r3, #20
 801649a:	4618      	mov	r0, r3
 801649c:	f7ff f83c 	bl	8015518 <ld_word>
 80164a0:	4603      	mov	r3, r0
 80164a2:	041b      	lsls	r3, r3, #16
 80164a4:	68fa      	ldr	r2, [r7, #12]
 80164a6:	4313      	orrs	r3, r2
 80164a8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80164aa:	68fb      	ldr	r3, [r7, #12]
}
 80164ac:	4618      	mov	r0, r3
 80164ae:	3710      	adds	r7, #16
 80164b0:	46bd      	mov	sp, r7
 80164b2:	bd80      	pop	{r7, pc}

080164b4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80164b4:	b580      	push	{r7, lr}
 80164b6:	b084      	sub	sp, #16
 80164b8:	af00      	add	r7, sp, #0
 80164ba:	60f8      	str	r0, [r7, #12]
 80164bc:	60b9      	str	r1, [r7, #8]
 80164be:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80164c0:	68bb      	ldr	r3, [r7, #8]
 80164c2:	331a      	adds	r3, #26
 80164c4:	687a      	ldr	r2, [r7, #4]
 80164c6:	b292      	uxth	r2, r2
 80164c8:	4611      	mov	r1, r2
 80164ca:	4618      	mov	r0, r3
 80164cc:	f7ff f85f 	bl	801558e <st_word>
	if (fs->fs_type == FS_FAT32) {
 80164d0:	68fb      	ldr	r3, [r7, #12]
 80164d2:	781b      	ldrb	r3, [r3, #0]
 80164d4:	2b03      	cmp	r3, #3
 80164d6:	d109      	bne.n	80164ec <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80164d8:	68bb      	ldr	r3, [r7, #8]
 80164da:	f103 0214 	add.w	r2, r3, #20
 80164de:	687b      	ldr	r3, [r7, #4]
 80164e0:	0c1b      	lsrs	r3, r3, #16
 80164e2:	b29b      	uxth	r3, r3
 80164e4:	4619      	mov	r1, r3
 80164e6:	4610      	mov	r0, r2
 80164e8:	f7ff f851 	bl	801558e <st_word>
	}
}
 80164ec:	bf00      	nop
 80164ee:	3710      	adds	r7, #16
 80164f0:	46bd      	mov	sp, r7
 80164f2:	bd80      	pop	{r7, pc}

080164f4 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80164f4:	b580      	push	{r7, lr}
 80164f6:	b086      	sub	sp, #24
 80164f8:	af00      	add	r7, sp, #0
 80164fa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80164fc:	687b      	ldr	r3, [r7, #4]
 80164fe:	681b      	ldr	r3, [r3, #0]
 8016500:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8016502:	2100      	movs	r1, #0
 8016504:	6878      	ldr	r0, [r7, #4]
 8016506:	f7ff fe2f 	bl	8016168 <dir_sdi>
 801650a:	4603      	mov	r3, r0
 801650c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801650e:	7dfb      	ldrb	r3, [r7, #23]
 8016510:	2b00      	cmp	r3, #0
 8016512:	d001      	beq.n	8016518 <dir_find+0x24>
 8016514:	7dfb      	ldrb	r3, [r7, #23]
 8016516:	e03e      	b.n	8016596 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8016518:	687b      	ldr	r3, [r7, #4]
 801651a:	69db      	ldr	r3, [r3, #28]
 801651c:	4619      	mov	r1, r3
 801651e:	6938      	ldr	r0, [r7, #16]
 8016520:	f7ff faaa 	bl	8015a78 <move_window>
 8016524:	4603      	mov	r3, r0
 8016526:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8016528:	7dfb      	ldrb	r3, [r7, #23]
 801652a:	2b00      	cmp	r3, #0
 801652c:	d12f      	bne.n	801658e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 801652e:	687b      	ldr	r3, [r7, #4]
 8016530:	6a1b      	ldr	r3, [r3, #32]
 8016532:	781b      	ldrb	r3, [r3, #0]
 8016534:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8016536:	7bfb      	ldrb	r3, [r7, #15]
 8016538:	2b00      	cmp	r3, #0
 801653a:	d102      	bne.n	8016542 <dir_find+0x4e>
 801653c:	2304      	movs	r3, #4
 801653e:	75fb      	strb	r3, [r7, #23]
 8016540:	e028      	b.n	8016594 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8016542:	687b      	ldr	r3, [r7, #4]
 8016544:	6a1b      	ldr	r3, [r3, #32]
 8016546:	330b      	adds	r3, #11
 8016548:	781b      	ldrb	r3, [r3, #0]
 801654a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801654e:	b2da      	uxtb	r2, r3
 8016550:	687b      	ldr	r3, [r7, #4]
 8016552:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8016554:	687b      	ldr	r3, [r7, #4]
 8016556:	6a1b      	ldr	r3, [r3, #32]
 8016558:	330b      	adds	r3, #11
 801655a:	781b      	ldrb	r3, [r3, #0]
 801655c:	f003 0308 	and.w	r3, r3, #8
 8016560:	2b00      	cmp	r3, #0
 8016562:	d10a      	bne.n	801657a <dir_find+0x86>
 8016564:	687b      	ldr	r3, [r7, #4]
 8016566:	6a18      	ldr	r0, [r3, #32]
 8016568:	687b      	ldr	r3, [r7, #4]
 801656a:	3324      	adds	r3, #36	; 0x24
 801656c:	220b      	movs	r2, #11
 801656e:	4619      	mov	r1, r3
 8016570:	f7ff f88f 	bl	8015692 <mem_cmp>
 8016574:	4603      	mov	r3, r0
 8016576:	2b00      	cmp	r3, #0
 8016578:	d00b      	beq.n	8016592 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801657a:	2100      	movs	r1, #0
 801657c:	6878      	ldr	r0, [r7, #4]
 801657e:	f7ff fe6e 	bl	801625e <dir_next>
 8016582:	4603      	mov	r3, r0
 8016584:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8016586:	7dfb      	ldrb	r3, [r7, #23]
 8016588:	2b00      	cmp	r3, #0
 801658a:	d0c5      	beq.n	8016518 <dir_find+0x24>
 801658c:	e002      	b.n	8016594 <dir_find+0xa0>
		if (res != FR_OK) break;
 801658e:	bf00      	nop
 8016590:	e000      	b.n	8016594 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8016592:	bf00      	nop

	return res;
 8016594:	7dfb      	ldrb	r3, [r7, #23]
}
 8016596:	4618      	mov	r0, r3
 8016598:	3718      	adds	r7, #24
 801659a:	46bd      	mov	sp, r7
 801659c:	bd80      	pop	{r7, pc}

0801659e <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801659e:	b580      	push	{r7, lr}
 80165a0:	b084      	sub	sp, #16
 80165a2:	af00      	add	r7, sp, #0
 80165a4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80165a6:	687b      	ldr	r3, [r7, #4]
 80165a8:	681b      	ldr	r3, [r3, #0]
 80165aa:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80165ac:	2101      	movs	r1, #1
 80165ae:	6878      	ldr	r0, [r7, #4]
 80165b0:	f7ff ff1a 	bl	80163e8 <dir_alloc>
 80165b4:	4603      	mov	r3, r0
 80165b6:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80165b8:	7bfb      	ldrb	r3, [r7, #15]
 80165ba:	2b00      	cmp	r3, #0
 80165bc:	d11c      	bne.n	80165f8 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80165be:	687b      	ldr	r3, [r7, #4]
 80165c0:	69db      	ldr	r3, [r3, #28]
 80165c2:	4619      	mov	r1, r3
 80165c4:	68b8      	ldr	r0, [r7, #8]
 80165c6:	f7ff fa57 	bl	8015a78 <move_window>
 80165ca:	4603      	mov	r3, r0
 80165cc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80165ce:	7bfb      	ldrb	r3, [r7, #15]
 80165d0:	2b00      	cmp	r3, #0
 80165d2:	d111      	bne.n	80165f8 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80165d4:	687b      	ldr	r3, [r7, #4]
 80165d6:	6a1b      	ldr	r3, [r3, #32]
 80165d8:	2220      	movs	r2, #32
 80165da:	2100      	movs	r1, #0
 80165dc:	4618      	mov	r0, r3
 80165de:	f7ff f83e 	bl	801565e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80165e2:	687b      	ldr	r3, [r7, #4]
 80165e4:	6a18      	ldr	r0, [r3, #32]
 80165e6:	687b      	ldr	r3, [r7, #4]
 80165e8:	3324      	adds	r3, #36	; 0x24
 80165ea:	220b      	movs	r2, #11
 80165ec:	4619      	mov	r1, r3
 80165ee:	f7ff f815 	bl	801561c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80165f2:	68bb      	ldr	r3, [r7, #8]
 80165f4:	2201      	movs	r2, #1
 80165f6:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80165f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80165fa:	4618      	mov	r0, r3
 80165fc:	3710      	adds	r7, #16
 80165fe:	46bd      	mov	sp, r7
 8016600:	bd80      	pop	{r7, pc}
	...

08016604 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8016604:	b580      	push	{r7, lr}
 8016606:	b088      	sub	sp, #32
 8016608:	af00      	add	r7, sp, #0
 801660a:	6078      	str	r0, [r7, #4]
 801660c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 801660e:	683b      	ldr	r3, [r7, #0]
 8016610:	681b      	ldr	r3, [r3, #0]
 8016612:	60fb      	str	r3, [r7, #12]
 8016614:	687b      	ldr	r3, [r7, #4]
 8016616:	3324      	adds	r3, #36	; 0x24
 8016618:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 801661a:	220b      	movs	r2, #11
 801661c:	2120      	movs	r1, #32
 801661e:	68b8      	ldr	r0, [r7, #8]
 8016620:	f7ff f81d 	bl	801565e <mem_set>
	si = i = 0; ni = 8;
 8016624:	2300      	movs	r3, #0
 8016626:	613b      	str	r3, [r7, #16]
 8016628:	693b      	ldr	r3, [r7, #16]
 801662a:	617b      	str	r3, [r7, #20]
 801662c:	2308      	movs	r3, #8
 801662e:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8016630:	697b      	ldr	r3, [r7, #20]
 8016632:	1c5a      	adds	r2, r3, #1
 8016634:	617a      	str	r2, [r7, #20]
 8016636:	68fa      	ldr	r2, [r7, #12]
 8016638:	4413      	add	r3, r2
 801663a:	781b      	ldrb	r3, [r3, #0]
 801663c:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 801663e:	7ffb      	ldrb	r3, [r7, #31]
 8016640:	2b20      	cmp	r3, #32
 8016642:	d94e      	bls.n	80166e2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8016644:	7ffb      	ldrb	r3, [r7, #31]
 8016646:	2b2f      	cmp	r3, #47	; 0x2f
 8016648:	d006      	beq.n	8016658 <create_name+0x54>
 801664a:	7ffb      	ldrb	r3, [r7, #31]
 801664c:	2b5c      	cmp	r3, #92	; 0x5c
 801664e:	d110      	bne.n	8016672 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8016650:	e002      	b.n	8016658 <create_name+0x54>
 8016652:	697b      	ldr	r3, [r7, #20]
 8016654:	3301      	adds	r3, #1
 8016656:	617b      	str	r3, [r7, #20]
 8016658:	68fa      	ldr	r2, [r7, #12]
 801665a:	697b      	ldr	r3, [r7, #20]
 801665c:	4413      	add	r3, r2
 801665e:	781b      	ldrb	r3, [r3, #0]
 8016660:	2b2f      	cmp	r3, #47	; 0x2f
 8016662:	d0f6      	beq.n	8016652 <create_name+0x4e>
 8016664:	68fa      	ldr	r2, [r7, #12]
 8016666:	697b      	ldr	r3, [r7, #20]
 8016668:	4413      	add	r3, r2
 801666a:	781b      	ldrb	r3, [r3, #0]
 801666c:	2b5c      	cmp	r3, #92	; 0x5c
 801666e:	d0f0      	beq.n	8016652 <create_name+0x4e>
			break;
 8016670:	e038      	b.n	80166e4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8016672:	7ffb      	ldrb	r3, [r7, #31]
 8016674:	2b2e      	cmp	r3, #46	; 0x2e
 8016676:	d003      	beq.n	8016680 <create_name+0x7c>
 8016678:	693a      	ldr	r2, [r7, #16]
 801667a:	69bb      	ldr	r3, [r7, #24]
 801667c:	429a      	cmp	r2, r3
 801667e:	d30c      	bcc.n	801669a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8016680:	69bb      	ldr	r3, [r7, #24]
 8016682:	2b0b      	cmp	r3, #11
 8016684:	d002      	beq.n	801668c <create_name+0x88>
 8016686:	7ffb      	ldrb	r3, [r7, #31]
 8016688:	2b2e      	cmp	r3, #46	; 0x2e
 801668a:	d001      	beq.n	8016690 <create_name+0x8c>
 801668c:	2306      	movs	r3, #6
 801668e:	e044      	b.n	801671a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8016690:	2308      	movs	r3, #8
 8016692:	613b      	str	r3, [r7, #16]
 8016694:	230b      	movs	r3, #11
 8016696:	61bb      	str	r3, [r7, #24]
			continue;
 8016698:	e022      	b.n	80166e0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 801669a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801669e:	2b00      	cmp	r3, #0
 80166a0:	da04      	bge.n	80166ac <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80166a2:	7ffb      	ldrb	r3, [r7, #31]
 80166a4:	3b80      	subs	r3, #128	; 0x80
 80166a6:	4a1f      	ldr	r2, [pc, #124]	; (8016724 <create_name+0x120>)
 80166a8:	5cd3      	ldrb	r3, [r2, r3]
 80166aa:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80166ac:	7ffb      	ldrb	r3, [r7, #31]
 80166ae:	4619      	mov	r1, r3
 80166b0:	481d      	ldr	r0, [pc, #116]	; (8016728 <create_name+0x124>)
 80166b2:	f7ff f815 	bl	80156e0 <chk_chr>
 80166b6:	4603      	mov	r3, r0
 80166b8:	2b00      	cmp	r3, #0
 80166ba:	d001      	beq.n	80166c0 <create_name+0xbc>
 80166bc:	2306      	movs	r3, #6
 80166be:	e02c      	b.n	801671a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80166c0:	7ffb      	ldrb	r3, [r7, #31]
 80166c2:	2b60      	cmp	r3, #96	; 0x60
 80166c4:	d905      	bls.n	80166d2 <create_name+0xce>
 80166c6:	7ffb      	ldrb	r3, [r7, #31]
 80166c8:	2b7a      	cmp	r3, #122	; 0x7a
 80166ca:	d802      	bhi.n	80166d2 <create_name+0xce>
 80166cc:	7ffb      	ldrb	r3, [r7, #31]
 80166ce:	3b20      	subs	r3, #32
 80166d0:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 80166d2:	693b      	ldr	r3, [r7, #16]
 80166d4:	1c5a      	adds	r2, r3, #1
 80166d6:	613a      	str	r2, [r7, #16]
 80166d8:	68ba      	ldr	r2, [r7, #8]
 80166da:	4413      	add	r3, r2
 80166dc:	7ffa      	ldrb	r2, [r7, #31]
 80166de:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80166e0:	e7a6      	b.n	8016630 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80166e2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80166e4:	68fa      	ldr	r2, [r7, #12]
 80166e6:	697b      	ldr	r3, [r7, #20]
 80166e8:	441a      	add	r2, r3
 80166ea:	683b      	ldr	r3, [r7, #0]
 80166ec:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80166ee:	693b      	ldr	r3, [r7, #16]
 80166f0:	2b00      	cmp	r3, #0
 80166f2:	d101      	bne.n	80166f8 <create_name+0xf4>
 80166f4:	2306      	movs	r3, #6
 80166f6:	e010      	b.n	801671a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80166f8:	68bb      	ldr	r3, [r7, #8]
 80166fa:	781b      	ldrb	r3, [r3, #0]
 80166fc:	2be5      	cmp	r3, #229	; 0xe5
 80166fe:	d102      	bne.n	8016706 <create_name+0x102>
 8016700:	68bb      	ldr	r3, [r7, #8]
 8016702:	2205      	movs	r2, #5
 8016704:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8016706:	7ffb      	ldrb	r3, [r7, #31]
 8016708:	2b20      	cmp	r3, #32
 801670a:	d801      	bhi.n	8016710 <create_name+0x10c>
 801670c:	2204      	movs	r2, #4
 801670e:	e000      	b.n	8016712 <create_name+0x10e>
 8016710:	2200      	movs	r2, #0
 8016712:	68bb      	ldr	r3, [r7, #8]
 8016714:	330b      	adds	r3, #11
 8016716:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8016718:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 801671a:	4618      	mov	r0, r3
 801671c:	3720      	adds	r7, #32
 801671e:	46bd      	mov	sp, r7
 8016720:	bd80      	pop	{r7, pc}
 8016722:	bf00      	nop
 8016724:	08019ef0 	.word	0x08019ef0
 8016728:	08019e14 	.word	0x08019e14

0801672c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801672c:	b580      	push	{r7, lr}
 801672e:	b086      	sub	sp, #24
 8016730:	af00      	add	r7, sp, #0
 8016732:	6078      	str	r0, [r7, #4]
 8016734:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8016736:	687b      	ldr	r3, [r7, #4]
 8016738:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801673a:	693b      	ldr	r3, [r7, #16]
 801673c:	681b      	ldr	r3, [r3, #0]
 801673e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8016740:	e002      	b.n	8016748 <follow_path+0x1c>
 8016742:	683b      	ldr	r3, [r7, #0]
 8016744:	3301      	adds	r3, #1
 8016746:	603b      	str	r3, [r7, #0]
 8016748:	683b      	ldr	r3, [r7, #0]
 801674a:	781b      	ldrb	r3, [r3, #0]
 801674c:	2b2f      	cmp	r3, #47	; 0x2f
 801674e:	d0f8      	beq.n	8016742 <follow_path+0x16>
 8016750:	683b      	ldr	r3, [r7, #0]
 8016752:	781b      	ldrb	r3, [r3, #0]
 8016754:	2b5c      	cmp	r3, #92	; 0x5c
 8016756:	d0f4      	beq.n	8016742 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8016758:	693b      	ldr	r3, [r7, #16]
 801675a:	2200      	movs	r2, #0
 801675c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801675e:	683b      	ldr	r3, [r7, #0]
 8016760:	781b      	ldrb	r3, [r3, #0]
 8016762:	2b1f      	cmp	r3, #31
 8016764:	d80a      	bhi.n	801677c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8016766:	687b      	ldr	r3, [r7, #4]
 8016768:	2280      	movs	r2, #128	; 0x80
 801676a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 801676e:	2100      	movs	r1, #0
 8016770:	6878      	ldr	r0, [r7, #4]
 8016772:	f7ff fcf9 	bl	8016168 <dir_sdi>
 8016776:	4603      	mov	r3, r0
 8016778:	75fb      	strb	r3, [r7, #23]
 801677a:	e043      	b.n	8016804 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801677c:	463b      	mov	r3, r7
 801677e:	4619      	mov	r1, r3
 8016780:	6878      	ldr	r0, [r7, #4]
 8016782:	f7ff ff3f 	bl	8016604 <create_name>
 8016786:	4603      	mov	r3, r0
 8016788:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801678a:	7dfb      	ldrb	r3, [r7, #23]
 801678c:	2b00      	cmp	r3, #0
 801678e:	d134      	bne.n	80167fa <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8016790:	6878      	ldr	r0, [r7, #4]
 8016792:	f7ff feaf 	bl	80164f4 <dir_find>
 8016796:	4603      	mov	r3, r0
 8016798:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801679a:	687b      	ldr	r3, [r7, #4]
 801679c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80167a0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80167a2:	7dfb      	ldrb	r3, [r7, #23]
 80167a4:	2b00      	cmp	r3, #0
 80167a6:	d00a      	beq.n	80167be <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80167a8:	7dfb      	ldrb	r3, [r7, #23]
 80167aa:	2b04      	cmp	r3, #4
 80167ac:	d127      	bne.n	80167fe <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80167ae:	7afb      	ldrb	r3, [r7, #11]
 80167b0:	f003 0304 	and.w	r3, r3, #4
 80167b4:	2b00      	cmp	r3, #0
 80167b6:	d122      	bne.n	80167fe <follow_path+0xd2>
 80167b8:	2305      	movs	r3, #5
 80167ba:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80167bc:	e01f      	b.n	80167fe <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80167be:	7afb      	ldrb	r3, [r7, #11]
 80167c0:	f003 0304 	and.w	r3, r3, #4
 80167c4:	2b00      	cmp	r3, #0
 80167c6:	d11c      	bne.n	8016802 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80167c8:	693b      	ldr	r3, [r7, #16]
 80167ca:	799b      	ldrb	r3, [r3, #6]
 80167cc:	f003 0310 	and.w	r3, r3, #16
 80167d0:	2b00      	cmp	r3, #0
 80167d2:	d102      	bne.n	80167da <follow_path+0xae>
				res = FR_NO_PATH; break;
 80167d4:	2305      	movs	r3, #5
 80167d6:	75fb      	strb	r3, [r7, #23]
 80167d8:	e014      	b.n	8016804 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80167da:	68fb      	ldr	r3, [r7, #12]
 80167dc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80167e0:	687b      	ldr	r3, [r7, #4]
 80167e2:	695b      	ldr	r3, [r3, #20]
 80167e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80167e8:	4413      	add	r3, r2
 80167ea:	4619      	mov	r1, r3
 80167ec:	68f8      	ldr	r0, [r7, #12]
 80167ee:	f7ff fe42 	bl	8016476 <ld_clust>
 80167f2:	4602      	mov	r2, r0
 80167f4:	693b      	ldr	r3, [r7, #16]
 80167f6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80167f8:	e7c0      	b.n	801677c <follow_path+0x50>
			if (res != FR_OK) break;
 80167fa:	bf00      	nop
 80167fc:	e002      	b.n	8016804 <follow_path+0xd8>
				break;
 80167fe:	bf00      	nop
 8016800:	e000      	b.n	8016804 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8016802:	bf00      	nop
			}
		}
	}

	return res;
 8016804:	7dfb      	ldrb	r3, [r7, #23]
}
 8016806:	4618      	mov	r0, r3
 8016808:	3718      	adds	r7, #24
 801680a:	46bd      	mov	sp, r7
 801680c:	bd80      	pop	{r7, pc}

0801680e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801680e:	b480      	push	{r7}
 8016810:	b087      	sub	sp, #28
 8016812:	af00      	add	r7, sp, #0
 8016814:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8016816:	f04f 33ff 	mov.w	r3, #4294967295
 801681a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801681c:	687b      	ldr	r3, [r7, #4]
 801681e:	681b      	ldr	r3, [r3, #0]
 8016820:	2b00      	cmp	r3, #0
 8016822:	d031      	beq.n	8016888 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8016824:	687b      	ldr	r3, [r7, #4]
 8016826:	681b      	ldr	r3, [r3, #0]
 8016828:	617b      	str	r3, [r7, #20]
 801682a:	e002      	b.n	8016832 <get_ldnumber+0x24>
 801682c:	697b      	ldr	r3, [r7, #20]
 801682e:	3301      	adds	r3, #1
 8016830:	617b      	str	r3, [r7, #20]
 8016832:	697b      	ldr	r3, [r7, #20]
 8016834:	781b      	ldrb	r3, [r3, #0]
 8016836:	2b20      	cmp	r3, #32
 8016838:	d903      	bls.n	8016842 <get_ldnumber+0x34>
 801683a:	697b      	ldr	r3, [r7, #20]
 801683c:	781b      	ldrb	r3, [r3, #0]
 801683e:	2b3a      	cmp	r3, #58	; 0x3a
 8016840:	d1f4      	bne.n	801682c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8016842:	697b      	ldr	r3, [r7, #20]
 8016844:	781b      	ldrb	r3, [r3, #0]
 8016846:	2b3a      	cmp	r3, #58	; 0x3a
 8016848:	d11c      	bne.n	8016884 <get_ldnumber+0x76>
			tp = *path;
 801684a:	687b      	ldr	r3, [r7, #4]
 801684c:	681b      	ldr	r3, [r3, #0]
 801684e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8016850:	68fb      	ldr	r3, [r7, #12]
 8016852:	1c5a      	adds	r2, r3, #1
 8016854:	60fa      	str	r2, [r7, #12]
 8016856:	781b      	ldrb	r3, [r3, #0]
 8016858:	3b30      	subs	r3, #48	; 0x30
 801685a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801685c:	68bb      	ldr	r3, [r7, #8]
 801685e:	2b09      	cmp	r3, #9
 8016860:	d80e      	bhi.n	8016880 <get_ldnumber+0x72>
 8016862:	68fa      	ldr	r2, [r7, #12]
 8016864:	697b      	ldr	r3, [r7, #20]
 8016866:	429a      	cmp	r2, r3
 8016868:	d10a      	bne.n	8016880 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801686a:	68bb      	ldr	r3, [r7, #8]
 801686c:	2b00      	cmp	r3, #0
 801686e:	d107      	bne.n	8016880 <get_ldnumber+0x72>
					vol = (int)i;
 8016870:	68bb      	ldr	r3, [r7, #8]
 8016872:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8016874:	697b      	ldr	r3, [r7, #20]
 8016876:	3301      	adds	r3, #1
 8016878:	617b      	str	r3, [r7, #20]
 801687a:	687b      	ldr	r3, [r7, #4]
 801687c:	697a      	ldr	r2, [r7, #20]
 801687e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8016880:	693b      	ldr	r3, [r7, #16]
 8016882:	e002      	b.n	801688a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8016884:	2300      	movs	r3, #0
 8016886:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8016888:	693b      	ldr	r3, [r7, #16]
}
 801688a:	4618      	mov	r0, r3
 801688c:	371c      	adds	r7, #28
 801688e:	46bd      	mov	sp, r7
 8016890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016894:	4770      	bx	lr
	...

08016898 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8016898:	b580      	push	{r7, lr}
 801689a:	b082      	sub	sp, #8
 801689c:	af00      	add	r7, sp, #0
 801689e:	6078      	str	r0, [r7, #4]
 80168a0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80168a2:	687b      	ldr	r3, [r7, #4]
 80168a4:	2200      	movs	r2, #0
 80168a6:	70da      	strb	r2, [r3, #3]
 80168a8:	687b      	ldr	r3, [r7, #4]
 80168aa:	f04f 32ff 	mov.w	r2, #4294967295
 80168ae:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80168b0:	6839      	ldr	r1, [r7, #0]
 80168b2:	6878      	ldr	r0, [r7, #4]
 80168b4:	f7ff f8e0 	bl	8015a78 <move_window>
 80168b8:	4603      	mov	r3, r0
 80168ba:	2b00      	cmp	r3, #0
 80168bc:	d001      	beq.n	80168c2 <check_fs+0x2a>
 80168be:	2304      	movs	r3, #4
 80168c0:	e038      	b.n	8016934 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80168c2:	687b      	ldr	r3, [r7, #4]
 80168c4:	3330      	adds	r3, #48	; 0x30
 80168c6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80168ca:	4618      	mov	r0, r3
 80168cc:	f7fe fe24 	bl	8015518 <ld_word>
 80168d0:	4603      	mov	r3, r0
 80168d2:	461a      	mov	r2, r3
 80168d4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80168d8:	429a      	cmp	r2, r3
 80168da:	d001      	beq.n	80168e0 <check_fs+0x48>
 80168dc:	2303      	movs	r3, #3
 80168de:	e029      	b.n	8016934 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80168e0:	687b      	ldr	r3, [r7, #4]
 80168e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80168e6:	2be9      	cmp	r3, #233	; 0xe9
 80168e8:	d009      	beq.n	80168fe <check_fs+0x66>
 80168ea:	687b      	ldr	r3, [r7, #4]
 80168ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80168f0:	2beb      	cmp	r3, #235	; 0xeb
 80168f2:	d11e      	bne.n	8016932 <check_fs+0x9a>
 80168f4:	687b      	ldr	r3, [r7, #4]
 80168f6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80168fa:	2b90      	cmp	r3, #144	; 0x90
 80168fc:	d119      	bne.n	8016932 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80168fe:	687b      	ldr	r3, [r7, #4]
 8016900:	3330      	adds	r3, #48	; 0x30
 8016902:	3336      	adds	r3, #54	; 0x36
 8016904:	4618      	mov	r0, r3
 8016906:	f7fe fe1f 	bl	8015548 <ld_dword>
 801690a:	4603      	mov	r3, r0
 801690c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8016910:	4a0a      	ldr	r2, [pc, #40]	; (801693c <check_fs+0xa4>)
 8016912:	4293      	cmp	r3, r2
 8016914:	d101      	bne.n	801691a <check_fs+0x82>
 8016916:	2300      	movs	r3, #0
 8016918:	e00c      	b.n	8016934 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801691a:	687b      	ldr	r3, [r7, #4]
 801691c:	3330      	adds	r3, #48	; 0x30
 801691e:	3352      	adds	r3, #82	; 0x52
 8016920:	4618      	mov	r0, r3
 8016922:	f7fe fe11 	bl	8015548 <ld_dword>
 8016926:	4602      	mov	r2, r0
 8016928:	4b05      	ldr	r3, [pc, #20]	; (8016940 <check_fs+0xa8>)
 801692a:	429a      	cmp	r2, r3
 801692c:	d101      	bne.n	8016932 <check_fs+0x9a>
 801692e:	2300      	movs	r3, #0
 8016930:	e000      	b.n	8016934 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8016932:	2302      	movs	r3, #2
}
 8016934:	4618      	mov	r0, r3
 8016936:	3708      	adds	r7, #8
 8016938:	46bd      	mov	sp, r7
 801693a:	bd80      	pop	{r7, pc}
 801693c:	00544146 	.word	0x00544146
 8016940:	33544146 	.word	0x33544146

08016944 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8016944:	b580      	push	{r7, lr}
 8016946:	b096      	sub	sp, #88	; 0x58
 8016948:	af00      	add	r7, sp, #0
 801694a:	60f8      	str	r0, [r7, #12]
 801694c:	60b9      	str	r1, [r7, #8]
 801694e:	4613      	mov	r3, r2
 8016950:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8016952:	68bb      	ldr	r3, [r7, #8]
 8016954:	2200      	movs	r2, #0
 8016956:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8016958:	68f8      	ldr	r0, [r7, #12]
 801695a:	f7ff ff58 	bl	801680e <get_ldnumber>
 801695e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8016960:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016962:	2b00      	cmp	r3, #0
 8016964:	da01      	bge.n	801696a <find_volume+0x26>
 8016966:	230b      	movs	r3, #11
 8016968:	e22e      	b.n	8016dc8 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801696a:	4aa8      	ldr	r2, [pc, #672]	; (8016c0c <find_volume+0x2c8>)
 801696c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801696e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016972:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8016974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016976:	2b00      	cmp	r3, #0
 8016978:	d101      	bne.n	801697e <find_volume+0x3a>
 801697a:	230c      	movs	r3, #12
 801697c:	e224      	b.n	8016dc8 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801697e:	68bb      	ldr	r3, [r7, #8]
 8016980:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016982:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8016984:	79fb      	ldrb	r3, [r7, #7]
 8016986:	f023 0301 	bic.w	r3, r3, #1
 801698a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801698c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801698e:	781b      	ldrb	r3, [r3, #0]
 8016990:	2b00      	cmp	r3, #0
 8016992:	d01a      	beq.n	80169ca <find_volume+0x86>
		stat = disk_status(fs->drv);
 8016994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016996:	785b      	ldrb	r3, [r3, #1]
 8016998:	4618      	mov	r0, r3
 801699a:	f7fe fd1f 	bl	80153dc <disk_status>
 801699e:	4603      	mov	r3, r0
 80169a0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80169a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80169a8:	f003 0301 	and.w	r3, r3, #1
 80169ac:	2b00      	cmp	r3, #0
 80169ae:	d10c      	bne.n	80169ca <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80169b0:	79fb      	ldrb	r3, [r7, #7]
 80169b2:	2b00      	cmp	r3, #0
 80169b4:	d007      	beq.n	80169c6 <find_volume+0x82>
 80169b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80169ba:	f003 0304 	and.w	r3, r3, #4
 80169be:	2b00      	cmp	r3, #0
 80169c0:	d001      	beq.n	80169c6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80169c2:	230a      	movs	r3, #10
 80169c4:	e200      	b.n	8016dc8 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 80169c6:	2300      	movs	r3, #0
 80169c8:	e1fe      	b.n	8016dc8 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80169ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80169cc:	2200      	movs	r2, #0
 80169ce:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80169d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80169d2:	b2da      	uxtb	r2, r3
 80169d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80169d6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80169d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80169da:	785b      	ldrb	r3, [r3, #1]
 80169dc:	4618      	mov	r0, r3
 80169de:	f7fe fd17 	bl	8015410 <disk_initialize>
 80169e2:	4603      	mov	r3, r0
 80169e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80169e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80169ec:	f003 0301 	and.w	r3, r3, #1
 80169f0:	2b00      	cmp	r3, #0
 80169f2:	d001      	beq.n	80169f8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80169f4:	2303      	movs	r3, #3
 80169f6:	e1e7      	b.n	8016dc8 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80169f8:	79fb      	ldrb	r3, [r7, #7]
 80169fa:	2b00      	cmp	r3, #0
 80169fc:	d007      	beq.n	8016a0e <find_volume+0xca>
 80169fe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016a02:	f003 0304 	and.w	r3, r3, #4
 8016a06:	2b00      	cmp	r3, #0
 8016a08:	d001      	beq.n	8016a0e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8016a0a:	230a      	movs	r3, #10
 8016a0c:	e1dc      	b.n	8016dc8 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8016a0e:	2300      	movs	r3, #0
 8016a10:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8016a12:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016a14:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016a16:	f7ff ff3f 	bl	8016898 <check_fs>
 8016a1a:	4603      	mov	r3, r0
 8016a1c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8016a20:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016a24:	2b02      	cmp	r3, #2
 8016a26:	d14b      	bne.n	8016ac0 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8016a28:	2300      	movs	r3, #0
 8016a2a:	643b      	str	r3, [r7, #64]	; 0x40
 8016a2c:	e01f      	b.n	8016a6e <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8016a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a30:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016a34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016a36:	011b      	lsls	r3, r3, #4
 8016a38:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8016a3c:	4413      	add	r3, r2
 8016a3e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8016a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a42:	3304      	adds	r3, #4
 8016a44:	781b      	ldrb	r3, [r3, #0]
 8016a46:	2b00      	cmp	r3, #0
 8016a48:	d006      	beq.n	8016a58 <find_volume+0x114>
 8016a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a4c:	3308      	adds	r3, #8
 8016a4e:	4618      	mov	r0, r3
 8016a50:	f7fe fd7a 	bl	8015548 <ld_dword>
 8016a54:	4602      	mov	r2, r0
 8016a56:	e000      	b.n	8016a5a <find_volume+0x116>
 8016a58:	2200      	movs	r2, #0
 8016a5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016a5c:	009b      	lsls	r3, r3, #2
 8016a5e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8016a62:	440b      	add	r3, r1
 8016a64:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8016a68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016a6a:	3301      	adds	r3, #1
 8016a6c:	643b      	str	r3, [r7, #64]	; 0x40
 8016a6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016a70:	2b03      	cmp	r3, #3
 8016a72:	d9dc      	bls.n	8016a2e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8016a74:	2300      	movs	r3, #0
 8016a76:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8016a78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016a7a:	2b00      	cmp	r3, #0
 8016a7c:	d002      	beq.n	8016a84 <find_volume+0x140>
 8016a7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016a80:	3b01      	subs	r3, #1
 8016a82:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8016a84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016a86:	009b      	lsls	r3, r3, #2
 8016a88:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8016a8c:	4413      	add	r3, r2
 8016a8e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8016a92:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8016a94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016a96:	2b00      	cmp	r3, #0
 8016a98:	d005      	beq.n	8016aa6 <find_volume+0x162>
 8016a9a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016a9c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016a9e:	f7ff fefb 	bl	8016898 <check_fs>
 8016aa2:	4603      	mov	r3, r0
 8016aa4:	e000      	b.n	8016aa8 <find_volume+0x164>
 8016aa6:	2303      	movs	r3, #3
 8016aa8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8016aac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016ab0:	2b01      	cmp	r3, #1
 8016ab2:	d905      	bls.n	8016ac0 <find_volume+0x17c>
 8016ab4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016ab6:	3301      	adds	r3, #1
 8016ab8:	643b      	str	r3, [r7, #64]	; 0x40
 8016aba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016abc:	2b03      	cmp	r3, #3
 8016abe:	d9e1      	bls.n	8016a84 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8016ac0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016ac4:	2b04      	cmp	r3, #4
 8016ac6:	d101      	bne.n	8016acc <find_volume+0x188>
 8016ac8:	2301      	movs	r3, #1
 8016aca:	e17d      	b.n	8016dc8 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8016acc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016ad0:	2b01      	cmp	r3, #1
 8016ad2:	d901      	bls.n	8016ad8 <find_volume+0x194>
 8016ad4:	230d      	movs	r3, #13
 8016ad6:	e177      	b.n	8016dc8 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8016ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ada:	3330      	adds	r3, #48	; 0x30
 8016adc:	330b      	adds	r3, #11
 8016ade:	4618      	mov	r0, r3
 8016ae0:	f7fe fd1a 	bl	8015518 <ld_word>
 8016ae4:	4603      	mov	r3, r0
 8016ae6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016aea:	d001      	beq.n	8016af0 <find_volume+0x1ac>
 8016aec:	230d      	movs	r3, #13
 8016aee:	e16b      	b.n	8016dc8 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8016af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016af2:	3330      	adds	r3, #48	; 0x30
 8016af4:	3316      	adds	r3, #22
 8016af6:	4618      	mov	r0, r3
 8016af8:	f7fe fd0e 	bl	8015518 <ld_word>
 8016afc:	4603      	mov	r3, r0
 8016afe:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8016b00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016b02:	2b00      	cmp	r3, #0
 8016b04:	d106      	bne.n	8016b14 <find_volume+0x1d0>
 8016b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b08:	3330      	adds	r3, #48	; 0x30
 8016b0a:	3324      	adds	r3, #36	; 0x24
 8016b0c:	4618      	mov	r0, r3
 8016b0e:	f7fe fd1b 	bl	8015548 <ld_dword>
 8016b12:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8016b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b16:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016b18:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8016b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b1c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8016b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b22:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8016b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b26:	789b      	ldrb	r3, [r3, #2]
 8016b28:	2b01      	cmp	r3, #1
 8016b2a:	d005      	beq.n	8016b38 <find_volume+0x1f4>
 8016b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b2e:	789b      	ldrb	r3, [r3, #2]
 8016b30:	2b02      	cmp	r3, #2
 8016b32:	d001      	beq.n	8016b38 <find_volume+0x1f4>
 8016b34:	230d      	movs	r3, #13
 8016b36:	e147      	b.n	8016dc8 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8016b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b3a:	789b      	ldrb	r3, [r3, #2]
 8016b3c:	461a      	mov	r2, r3
 8016b3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016b40:	fb02 f303 	mul.w	r3, r2, r3
 8016b44:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8016b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8016b4c:	b29a      	uxth	r2, r3
 8016b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b50:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8016b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b54:	895b      	ldrh	r3, [r3, #10]
 8016b56:	2b00      	cmp	r3, #0
 8016b58:	d008      	beq.n	8016b6c <find_volume+0x228>
 8016b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b5c:	895b      	ldrh	r3, [r3, #10]
 8016b5e:	461a      	mov	r2, r3
 8016b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b62:	895b      	ldrh	r3, [r3, #10]
 8016b64:	3b01      	subs	r3, #1
 8016b66:	4013      	ands	r3, r2
 8016b68:	2b00      	cmp	r3, #0
 8016b6a:	d001      	beq.n	8016b70 <find_volume+0x22c>
 8016b6c:	230d      	movs	r3, #13
 8016b6e:	e12b      	b.n	8016dc8 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8016b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b72:	3330      	adds	r3, #48	; 0x30
 8016b74:	3311      	adds	r3, #17
 8016b76:	4618      	mov	r0, r3
 8016b78:	f7fe fcce 	bl	8015518 <ld_word>
 8016b7c:	4603      	mov	r3, r0
 8016b7e:	461a      	mov	r2, r3
 8016b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b82:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8016b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b86:	891b      	ldrh	r3, [r3, #8]
 8016b88:	f003 030f 	and.w	r3, r3, #15
 8016b8c:	b29b      	uxth	r3, r3
 8016b8e:	2b00      	cmp	r3, #0
 8016b90:	d001      	beq.n	8016b96 <find_volume+0x252>
 8016b92:	230d      	movs	r3, #13
 8016b94:	e118      	b.n	8016dc8 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8016b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b98:	3330      	adds	r3, #48	; 0x30
 8016b9a:	3313      	adds	r3, #19
 8016b9c:	4618      	mov	r0, r3
 8016b9e:	f7fe fcbb 	bl	8015518 <ld_word>
 8016ba2:	4603      	mov	r3, r0
 8016ba4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8016ba6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016ba8:	2b00      	cmp	r3, #0
 8016baa:	d106      	bne.n	8016bba <find_volume+0x276>
 8016bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016bae:	3330      	adds	r3, #48	; 0x30
 8016bb0:	3320      	adds	r3, #32
 8016bb2:	4618      	mov	r0, r3
 8016bb4:	f7fe fcc8 	bl	8015548 <ld_dword>
 8016bb8:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8016bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016bbc:	3330      	adds	r3, #48	; 0x30
 8016bbe:	330e      	adds	r3, #14
 8016bc0:	4618      	mov	r0, r3
 8016bc2:	f7fe fca9 	bl	8015518 <ld_word>
 8016bc6:	4603      	mov	r3, r0
 8016bc8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8016bca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8016bcc:	2b00      	cmp	r3, #0
 8016bce:	d101      	bne.n	8016bd4 <find_volume+0x290>
 8016bd0:	230d      	movs	r3, #13
 8016bd2:	e0f9      	b.n	8016dc8 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8016bd4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8016bd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016bd8:	4413      	add	r3, r2
 8016bda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016bdc:	8912      	ldrh	r2, [r2, #8]
 8016bde:	0912      	lsrs	r2, r2, #4
 8016be0:	b292      	uxth	r2, r2
 8016be2:	4413      	add	r3, r2
 8016be4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8016be6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016bea:	429a      	cmp	r2, r3
 8016bec:	d201      	bcs.n	8016bf2 <find_volume+0x2ae>
 8016bee:	230d      	movs	r3, #13
 8016bf0:	e0ea      	b.n	8016dc8 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8016bf2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016bf6:	1ad3      	subs	r3, r2, r3
 8016bf8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016bfa:	8952      	ldrh	r2, [r2, #10]
 8016bfc:	fbb3 f3f2 	udiv	r3, r3, r2
 8016c00:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8016c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c04:	2b00      	cmp	r3, #0
 8016c06:	d103      	bne.n	8016c10 <find_volume+0x2cc>
 8016c08:	230d      	movs	r3, #13
 8016c0a:	e0dd      	b.n	8016dc8 <find_volume+0x484>
 8016c0c:	24000b50 	.word	0x24000b50
		fmt = FS_FAT32;
 8016c10:	2303      	movs	r3, #3
 8016c12:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8016c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c18:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8016c1c:	4293      	cmp	r3, r2
 8016c1e:	d802      	bhi.n	8016c26 <find_volume+0x2e2>
 8016c20:	2302      	movs	r3, #2
 8016c22:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8016c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c28:	f640 72f5 	movw	r2, #4085	; 0xff5
 8016c2c:	4293      	cmp	r3, r2
 8016c2e:	d802      	bhi.n	8016c36 <find_volume+0x2f2>
 8016c30:	2301      	movs	r3, #1
 8016c32:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8016c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c38:	1c9a      	adds	r2, r3, #2
 8016c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016c3c:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8016c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016c40:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016c42:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8016c44:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8016c46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016c48:	441a      	add	r2, r3
 8016c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016c4c:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8016c4e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c52:	441a      	add	r2, r3
 8016c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016c56:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8016c58:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016c5c:	2b03      	cmp	r3, #3
 8016c5e:	d11e      	bne.n	8016c9e <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8016c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016c62:	3330      	adds	r3, #48	; 0x30
 8016c64:	332a      	adds	r3, #42	; 0x2a
 8016c66:	4618      	mov	r0, r3
 8016c68:	f7fe fc56 	bl	8015518 <ld_word>
 8016c6c:	4603      	mov	r3, r0
 8016c6e:	2b00      	cmp	r3, #0
 8016c70:	d001      	beq.n	8016c76 <find_volume+0x332>
 8016c72:	230d      	movs	r3, #13
 8016c74:	e0a8      	b.n	8016dc8 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8016c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016c78:	891b      	ldrh	r3, [r3, #8]
 8016c7a:	2b00      	cmp	r3, #0
 8016c7c:	d001      	beq.n	8016c82 <find_volume+0x33e>
 8016c7e:	230d      	movs	r3, #13
 8016c80:	e0a2      	b.n	8016dc8 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8016c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016c84:	3330      	adds	r3, #48	; 0x30
 8016c86:	332c      	adds	r3, #44	; 0x2c
 8016c88:	4618      	mov	r0, r3
 8016c8a:	f7fe fc5d 	bl	8015548 <ld_dword>
 8016c8e:	4602      	mov	r2, r0
 8016c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016c92:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8016c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016c96:	695b      	ldr	r3, [r3, #20]
 8016c98:	009b      	lsls	r3, r3, #2
 8016c9a:	647b      	str	r3, [r7, #68]	; 0x44
 8016c9c:	e01f      	b.n	8016cde <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8016c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ca0:	891b      	ldrh	r3, [r3, #8]
 8016ca2:	2b00      	cmp	r3, #0
 8016ca4:	d101      	bne.n	8016caa <find_volume+0x366>
 8016ca6:	230d      	movs	r3, #13
 8016ca8:	e08e      	b.n	8016dc8 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8016caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016cac:	6a1a      	ldr	r2, [r3, #32]
 8016cae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016cb0:	441a      	add	r2, r3
 8016cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016cb4:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8016cb6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016cba:	2b02      	cmp	r3, #2
 8016cbc:	d103      	bne.n	8016cc6 <find_volume+0x382>
 8016cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016cc0:	695b      	ldr	r3, [r3, #20]
 8016cc2:	005b      	lsls	r3, r3, #1
 8016cc4:	e00a      	b.n	8016cdc <find_volume+0x398>
 8016cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016cc8:	695a      	ldr	r2, [r3, #20]
 8016cca:	4613      	mov	r3, r2
 8016ccc:	005b      	lsls	r3, r3, #1
 8016cce:	4413      	add	r3, r2
 8016cd0:	085a      	lsrs	r2, r3, #1
 8016cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016cd4:	695b      	ldr	r3, [r3, #20]
 8016cd6:	f003 0301 	and.w	r3, r3, #1
 8016cda:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8016cdc:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8016cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ce0:	699a      	ldr	r2, [r3, #24]
 8016ce2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016ce4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8016ce8:	0a5b      	lsrs	r3, r3, #9
 8016cea:	429a      	cmp	r2, r3
 8016cec:	d201      	bcs.n	8016cf2 <find_volume+0x3ae>
 8016cee:	230d      	movs	r3, #13
 8016cf0:	e06a      	b.n	8016dc8 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8016cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8016cf8:	611a      	str	r2, [r3, #16]
 8016cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016cfc:	691a      	ldr	r2, [r3, #16]
 8016cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d00:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8016d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d04:	2280      	movs	r2, #128	; 0x80
 8016d06:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8016d08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016d0c:	2b03      	cmp	r3, #3
 8016d0e:	d149      	bne.n	8016da4 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8016d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d12:	3330      	adds	r3, #48	; 0x30
 8016d14:	3330      	adds	r3, #48	; 0x30
 8016d16:	4618      	mov	r0, r3
 8016d18:	f7fe fbfe 	bl	8015518 <ld_word>
 8016d1c:	4603      	mov	r3, r0
 8016d1e:	2b01      	cmp	r3, #1
 8016d20:	d140      	bne.n	8016da4 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8016d22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016d24:	3301      	adds	r3, #1
 8016d26:	4619      	mov	r1, r3
 8016d28:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016d2a:	f7fe fea5 	bl	8015a78 <move_window>
 8016d2e:	4603      	mov	r3, r0
 8016d30:	2b00      	cmp	r3, #0
 8016d32:	d137      	bne.n	8016da4 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8016d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d36:	2200      	movs	r2, #0
 8016d38:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8016d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d3c:	3330      	adds	r3, #48	; 0x30
 8016d3e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8016d42:	4618      	mov	r0, r3
 8016d44:	f7fe fbe8 	bl	8015518 <ld_word>
 8016d48:	4603      	mov	r3, r0
 8016d4a:	461a      	mov	r2, r3
 8016d4c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8016d50:	429a      	cmp	r2, r3
 8016d52:	d127      	bne.n	8016da4 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8016d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d56:	3330      	adds	r3, #48	; 0x30
 8016d58:	4618      	mov	r0, r3
 8016d5a:	f7fe fbf5 	bl	8015548 <ld_dword>
 8016d5e:	4602      	mov	r2, r0
 8016d60:	4b1b      	ldr	r3, [pc, #108]	; (8016dd0 <find_volume+0x48c>)
 8016d62:	429a      	cmp	r2, r3
 8016d64:	d11e      	bne.n	8016da4 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8016d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d68:	3330      	adds	r3, #48	; 0x30
 8016d6a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8016d6e:	4618      	mov	r0, r3
 8016d70:	f7fe fbea 	bl	8015548 <ld_dword>
 8016d74:	4602      	mov	r2, r0
 8016d76:	4b17      	ldr	r3, [pc, #92]	; (8016dd4 <find_volume+0x490>)
 8016d78:	429a      	cmp	r2, r3
 8016d7a:	d113      	bne.n	8016da4 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8016d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d7e:	3330      	adds	r3, #48	; 0x30
 8016d80:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8016d84:	4618      	mov	r0, r3
 8016d86:	f7fe fbdf 	bl	8015548 <ld_dword>
 8016d8a:	4602      	mov	r2, r0
 8016d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d8e:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8016d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d92:	3330      	adds	r3, #48	; 0x30
 8016d94:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8016d98:	4618      	mov	r0, r3
 8016d9a:	f7fe fbd5 	bl	8015548 <ld_dword>
 8016d9e:	4602      	mov	r2, r0
 8016da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016da2:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8016da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016da6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8016daa:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8016dac:	4b0a      	ldr	r3, [pc, #40]	; (8016dd8 <find_volume+0x494>)
 8016dae:	881b      	ldrh	r3, [r3, #0]
 8016db0:	3301      	adds	r3, #1
 8016db2:	b29a      	uxth	r2, r3
 8016db4:	4b08      	ldr	r3, [pc, #32]	; (8016dd8 <find_volume+0x494>)
 8016db6:	801a      	strh	r2, [r3, #0]
 8016db8:	4b07      	ldr	r3, [pc, #28]	; (8016dd8 <find_volume+0x494>)
 8016dba:	881a      	ldrh	r2, [r3, #0]
 8016dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016dbe:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8016dc0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016dc2:	f7fe fdf1 	bl	80159a8 <clear_lock>
#endif
	return FR_OK;
 8016dc6:	2300      	movs	r3, #0
}
 8016dc8:	4618      	mov	r0, r3
 8016dca:	3758      	adds	r7, #88	; 0x58
 8016dcc:	46bd      	mov	sp, r7
 8016dce:	bd80      	pop	{r7, pc}
 8016dd0:	41615252 	.word	0x41615252
 8016dd4:	61417272 	.word	0x61417272
 8016dd8:	24000b54 	.word	0x24000b54

08016ddc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8016ddc:	b580      	push	{r7, lr}
 8016dde:	b084      	sub	sp, #16
 8016de0:	af00      	add	r7, sp, #0
 8016de2:	6078      	str	r0, [r7, #4]
 8016de4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8016de6:	2309      	movs	r3, #9
 8016de8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8016dea:	687b      	ldr	r3, [r7, #4]
 8016dec:	2b00      	cmp	r3, #0
 8016dee:	d01c      	beq.n	8016e2a <validate+0x4e>
 8016df0:	687b      	ldr	r3, [r7, #4]
 8016df2:	681b      	ldr	r3, [r3, #0]
 8016df4:	2b00      	cmp	r3, #0
 8016df6:	d018      	beq.n	8016e2a <validate+0x4e>
 8016df8:	687b      	ldr	r3, [r7, #4]
 8016dfa:	681b      	ldr	r3, [r3, #0]
 8016dfc:	781b      	ldrb	r3, [r3, #0]
 8016dfe:	2b00      	cmp	r3, #0
 8016e00:	d013      	beq.n	8016e2a <validate+0x4e>
 8016e02:	687b      	ldr	r3, [r7, #4]
 8016e04:	889a      	ldrh	r2, [r3, #4]
 8016e06:	687b      	ldr	r3, [r7, #4]
 8016e08:	681b      	ldr	r3, [r3, #0]
 8016e0a:	88db      	ldrh	r3, [r3, #6]
 8016e0c:	429a      	cmp	r2, r3
 8016e0e:	d10c      	bne.n	8016e2a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8016e10:	687b      	ldr	r3, [r7, #4]
 8016e12:	681b      	ldr	r3, [r3, #0]
 8016e14:	785b      	ldrb	r3, [r3, #1]
 8016e16:	4618      	mov	r0, r3
 8016e18:	f7fe fae0 	bl	80153dc <disk_status>
 8016e1c:	4603      	mov	r3, r0
 8016e1e:	f003 0301 	and.w	r3, r3, #1
 8016e22:	2b00      	cmp	r3, #0
 8016e24:	d101      	bne.n	8016e2a <validate+0x4e>
			res = FR_OK;
 8016e26:	2300      	movs	r3, #0
 8016e28:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8016e2a:	7bfb      	ldrb	r3, [r7, #15]
 8016e2c:	2b00      	cmp	r3, #0
 8016e2e:	d102      	bne.n	8016e36 <validate+0x5a>
 8016e30:	687b      	ldr	r3, [r7, #4]
 8016e32:	681b      	ldr	r3, [r3, #0]
 8016e34:	e000      	b.n	8016e38 <validate+0x5c>
 8016e36:	2300      	movs	r3, #0
 8016e38:	683a      	ldr	r2, [r7, #0]
 8016e3a:	6013      	str	r3, [r2, #0]
	return res;
 8016e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8016e3e:	4618      	mov	r0, r3
 8016e40:	3710      	adds	r7, #16
 8016e42:	46bd      	mov	sp, r7
 8016e44:	bd80      	pop	{r7, pc}
	...

08016e48 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8016e48:	b580      	push	{r7, lr}
 8016e4a:	b088      	sub	sp, #32
 8016e4c:	af00      	add	r7, sp, #0
 8016e4e:	60f8      	str	r0, [r7, #12]
 8016e50:	60b9      	str	r1, [r7, #8]
 8016e52:	4613      	mov	r3, r2
 8016e54:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8016e56:	68bb      	ldr	r3, [r7, #8]
 8016e58:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8016e5a:	f107 0310 	add.w	r3, r7, #16
 8016e5e:	4618      	mov	r0, r3
 8016e60:	f7ff fcd5 	bl	801680e <get_ldnumber>
 8016e64:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8016e66:	69fb      	ldr	r3, [r7, #28]
 8016e68:	2b00      	cmp	r3, #0
 8016e6a:	da01      	bge.n	8016e70 <f_mount+0x28>
 8016e6c:	230b      	movs	r3, #11
 8016e6e:	e02b      	b.n	8016ec8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8016e70:	4a17      	ldr	r2, [pc, #92]	; (8016ed0 <f_mount+0x88>)
 8016e72:	69fb      	ldr	r3, [r7, #28]
 8016e74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016e78:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8016e7a:	69bb      	ldr	r3, [r7, #24]
 8016e7c:	2b00      	cmp	r3, #0
 8016e7e:	d005      	beq.n	8016e8c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8016e80:	69b8      	ldr	r0, [r7, #24]
 8016e82:	f7fe fd91 	bl	80159a8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8016e86:	69bb      	ldr	r3, [r7, #24]
 8016e88:	2200      	movs	r2, #0
 8016e8a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8016e8c:	68fb      	ldr	r3, [r7, #12]
 8016e8e:	2b00      	cmp	r3, #0
 8016e90:	d002      	beq.n	8016e98 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8016e92:	68fb      	ldr	r3, [r7, #12]
 8016e94:	2200      	movs	r2, #0
 8016e96:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8016e98:	68fa      	ldr	r2, [r7, #12]
 8016e9a:	490d      	ldr	r1, [pc, #52]	; (8016ed0 <f_mount+0x88>)
 8016e9c:	69fb      	ldr	r3, [r7, #28]
 8016e9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8016ea2:	68fb      	ldr	r3, [r7, #12]
 8016ea4:	2b00      	cmp	r3, #0
 8016ea6:	d002      	beq.n	8016eae <f_mount+0x66>
 8016ea8:	79fb      	ldrb	r3, [r7, #7]
 8016eaa:	2b01      	cmp	r3, #1
 8016eac:	d001      	beq.n	8016eb2 <f_mount+0x6a>
 8016eae:	2300      	movs	r3, #0
 8016eb0:	e00a      	b.n	8016ec8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8016eb2:	f107 010c 	add.w	r1, r7, #12
 8016eb6:	f107 0308 	add.w	r3, r7, #8
 8016eba:	2200      	movs	r2, #0
 8016ebc:	4618      	mov	r0, r3
 8016ebe:	f7ff fd41 	bl	8016944 <find_volume>
 8016ec2:	4603      	mov	r3, r0
 8016ec4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8016ec6:	7dfb      	ldrb	r3, [r7, #23]
}
 8016ec8:	4618      	mov	r0, r3
 8016eca:	3720      	adds	r7, #32
 8016ecc:	46bd      	mov	sp, r7
 8016ece:	bd80      	pop	{r7, pc}
 8016ed0:	24000b50 	.word	0x24000b50

08016ed4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8016ed4:	b580      	push	{r7, lr}
 8016ed6:	b098      	sub	sp, #96	; 0x60
 8016ed8:	af00      	add	r7, sp, #0
 8016eda:	60f8      	str	r0, [r7, #12]
 8016edc:	60b9      	str	r1, [r7, #8]
 8016ede:	4613      	mov	r3, r2
 8016ee0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8016ee2:	68fb      	ldr	r3, [r7, #12]
 8016ee4:	2b00      	cmp	r3, #0
 8016ee6:	d101      	bne.n	8016eec <f_open+0x18>
 8016ee8:	2309      	movs	r3, #9
 8016eea:	e1ad      	b.n	8017248 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8016eec:	79fb      	ldrb	r3, [r7, #7]
 8016eee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016ef2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8016ef4:	79fa      	ldrb	r2, [r7, #7]
 8016ef6:	f107 0110 	add.w	r1, r7, #16
 8016efa:	f107 0308 	add.w	r3, r7, #8
 8016efe:	4618      	mov	r0, r3
 8016f00:	f7ff fd20 	bl	8016944 <find_volume>
 8016f04:	4603      	mov	r3, r0
 8016f06:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8016f0a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016f0e:	2b00      	cmp	r3, #0
 8016f10:	f040 8191 	bne.w	8017236 <f_open+0x362>
		dj.obj.fs = fs;
 8016f14:	693b      	ldr	r3, [r7, #16]
 8016f16:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8016f18:	68ba      	ldr	r2, [r7, #8]
 8016f1a:	f107 0314 	add.w	r3, r7, #20
 8016f1e:	4611      	mov	r1, r2
 8016f20:	4618      	mov	r0, r3
 8016f22:	f7ff fc03 	bl	801672c <follow_path>
 8016f26:	4603      	mov	r3, r0
 8016f28:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8016f2c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016f30:	2b00      	cmp	r3, #0
 8016f32:	d11a      	bne.n	8016f6a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8016f34:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8016f38:	b25b      	sxtb	r3, r3
 8016f3a:	2b00      	cmp	r3, #0
 8016f3c:	da03      	bge.n	8016f46 <f_open+0x72>
				res = FR_INVALID_NAME;
 8016f3e:	2306      	movs	r3, #6
 8016f40:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8016f44:	e011      	b.n	8016f6a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8016f46:	79fb      	ldrb	r3, [r7, #7]
 8016f48:	f023 0301 	bic.w	r3, r3, #1
 8016f4c:	2b00      	cmp	r3, #0
 8016f4e:	bf14      	ite	ne
 8016f50:	2301      	movne	r3, #1
 8016f52:	2300      	moveq	r3, #0
 8016f54:	b2db      	uxtb	r3, r3
 8016f56:	461a      	mov	r2, r3
 8016f58:	f107 0314 	add.w	r3, r7, #20
 8016f5c:	4611      	mov	r1, r2
 8016f5e:	4618      	mov	r0, r3
 8016f60:	f7fe fbda 	bl	8015718 <chk_lock>
 8016f64:	4603      	mov	r3, r0
 8016f66:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8016f6a:	79fb      	ldrb	r3, [r7, #7]
 8016f6c:	f003 031c 	and.w	r3, r3, #28
 8016f70:	2b00      	cmp	r3, #0
 8016f72:	d07f      	beq.n	8017074 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8016f74:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016f78:	2b00      	cmp	r3, #0
 8016f7a:	d017      	beq.n	8016fac <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8016f7c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016f80:	2b04      	cmp	r3, #4
 8016f82:	d10e      	bne.n	8016fa2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8016f84:	f7fe fc24 	bl	80157d0 <enq_lock>
 8016f88:	4603      	mov	r3, r0
 8016f8a:	2b00      	cmp	r3, #0
 8016f8c:	d006      	beq.n	8016f9c <f_open+0xc8>
 8016f8e:	f107 0314 	add.w	r3, r7, #20
 8016f92:	4618      	mov	r0, r3
 8016f94:	f7ff fb03 	bl	801659e <dir_register>
 8016f98:	4603      	mov	r3, r0
 8016f9a:	e000      	b.n	8016f9e <f_open+0xca>
 8016f9c:	2312      	movs	r3, #18
 8016f9e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8016fa2:	79fb      	ldrb	r3, [r7, #7]
 8016fa4:	f043 0308 	orr.w	r3, r3, #8
 8016fa8:	71fb      	strb	r3, [r7, #7]
 8016faa:	e010      	b.n	8016fce <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8016fac:	7ebb      	ldrb	r3, [r7, #26]
 8016fae:	f003 0311 	and.w	r3, r3, #17
 8016fb2:	2b00      	cmp	r3, #0
 8016fb4:	d003      	beq.n	8016fbe <f_open+0xea>
					res = FR_DENIED;
 8016fb6:	2307      	movs	r3, #7
 8016fb8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8016fbc:	e007      	b.n	8016fce <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8016fbe:	79fb      	ldrb	r3, [r7, #7]
 8016fc0:	f003 0304 	and.w	r3, r3, #4
 8016fc4:	2b00      	cmp	r3, #0
 8016fc6:	d002      	beq.n	8016fce <f_open+0xfa>
 8016fc8:	2308      	movs	r3, #8
 8016fca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8016fce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016fd2:	2b00      	cmp	r3, #0
 8016fd4:	d168      	bne.n	80170a8 <f_open+0x1d4>
 8016fd6:	79fb      	ldrb	r3, [r7, #7]
 8016fd8:	f003 0308 	and.w	r3, r3, #8
 8016fdc:	2b00      	cmp	r3, #0
 8016fde:	d063      	beq.n	80170a8 <f_open+0x1d4>
				dw = GET_FATTIME();
 8016fe0:	f7fb f8fe 	bl	80121e0 <get_fattime>
 8016fe4:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8016fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016fe8:	330e      	adds	r3, #14
 8016fea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016fec:	4618      	mov	r0, r3
 8016fee:	f7fe fae9 	bl	80155c4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8016ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016ff4:	3316      	adds	r3, #22
 8016ff6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016ff8:	4618      	mov	r0, r3
 8016ffa:	f7fe fae3 	bl	80155c4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8016ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017000:	330b      	adds	r3, #11
 8017002:	2220      	movs	r2, #32
 8017004:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8017006:	693b      	ldr	r3, [r7, #16]
 8017008:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801700a:	4611      	mov	r1, r2
 801700c:	4618      	mov	r0, r3
 801700e:	f7ff fa32 	bl	8016476 <ld_clust>
 8017012:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8017014:	693b      	ldr	r3, [r7, #16]
 8017016:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017018:	2200      	movs	r2, #0
 801701a:	4618      	mov	r0, r3
 801701c:	f7ff fa4a 	bl	80164b4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8017020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017022:	331c      	adds	r3, #28
 8017024:	2100      	movs	r1, #0
 8017026:	4618      	mov	r0, r3
 8017028:	f7fe facc 	bl	80155c4 <st_dword>
					fs->wflag = 1;
 801702c:	693b      	ldr	r3, [r7, #16]
 801702e:	2201      	movs	r2, #1
 8017030:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8017032:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017034:	2b00      	cmp	r3, #0
 8017036:	d037      	beq.n	80170a8 <f_open+0x1d4>
						dw = fs->winsect;
 8017038:	693b      	ldr	r3, [r7, #16]
 801703a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801703c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 801703e:	f107 0314 	add.w	r3, r7, #20
 8017042:	2200      	movs	r2, #0
 8017044:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8017046:	4618      	mov	r0, r3
 8017048:	f7fe ff5d 	bl	8015f06 <remove_chain>
 801704c:	4603      	mov	r3, r0
 801704e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8017052:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017056:	2b00      	cmp	r3, #0
 8017058:	d126      	bne.n	80170a8 <f_open+0x1d4>
							res = move_window(fs, dw);
 801705a:	693b      	ldr	r3, [r7, #16]
 801705c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801705e:	4618      	mov	r0, r3
 8017060:	f7fe fd0a 	bl	8015a78 <move_window>
 8017064:	4603      	mov	r3, r0
 8017066:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801706a:	693b      	ldr	r3, [r7, #16]
 801706c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801706e:	3a01      	subs	r2, #1
 8017070:	60da      	str	r2, [r3, #12]
 8017072:	e019      	b.n	80170a8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8017074:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017078:	2b00      	cmp	r3, #0
 801707a:	d115      	bne.n	80170a8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801707c:	7ebb      	ldrb	r3, [r7, #26]
 801707e:	f003 0310 	and.w	r3, r3, #16
 8017082:	2b00      	cmp	r3, #0
 8017084:	d003      	beq.n	801708e <f_open+0x1ba>
					res = FR_NO_FILE;
 8017086:	2304      	movs	r3, #4
 8017088:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801708c:	e00c      	b.n	80170a8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801708e:	79fb      	ldrb	r3, [r7, #7]
 8017090:	f003 0302 	and.w	r3, r3, #2
 8017094:	2b00      	cmp	r3, #0
 8017096:	d007      	beq.n	80170a8 <f_open+0x1d4>
 8017098:	7ebb      	ldrb	r3, [r7, #26]
 801709a:	f003 0301 	and.w	r3, r3, #1
 801709e:	2b00      	cmp	r3, #0
 80170a0:	d002      	beq.n	80170a8 <f_open+0x1d4>
						res = FR_DENIED;
 80170a2:	2307      	movs	r3, #7
 80170a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80170a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80170ac:	2b00      	cmp	r3, #0
 80170ae:	d128      	bne.n	8017102 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80170b0:	79fb      	ldrb	r3, [r7, #7]
 80170b2:	f003 0308 	and.w	r3, r3, #8
 80170b6:	2b00      	cmp	r3, #0
 80170b8:	d003      	beq.n	80170c2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80170ba:	79fb      	ldrb	r3, [r7, #7]
 80170bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80170c0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80170c2:	693b      	ldr	r3, [r7, #16]
 80170c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80170c6:	68fb      	ldr	r3, [r7, #12]
 80170c8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80170ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80170cc:	68fb      	ldr	r3, [r7, #12]
 80170ce:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80170d0:	79fb      	ldrb	r3, [r7, #7]
 80170d2:	f023 0301 	bic.w	r3, r3, #1
 80170d6:	2b00      	cmp	r3, #0
 80170d8:	bf14      	ite	ne
 80170da:	2301      	movne	r3, #1
 80170dc:	2300      	moveq	r3, #0
 80170de:	b2db      	uxtb	r3, r3
 80170e0:	461a      	mov	r2, r3
 80170e2:	f107 0314 	add.w	r3, r7, #20
 80170e6:	4611      	mov	r1, r2
 80170e8:	4618      	mov	r0, r3
 80170ea:	f7fe fb93 	bl	8015814 <inc_lock>
 80170ee:	4602      	mov	r2, r0
 80170f0:	68fb      	ldr	r3, [r7, #12]
 80170f2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80170f4:	68fb      	ldr	r3, [r7, #12]
 80170f6:	691b      	ldr	r3, [r3, #16]
 80170f8:	2b00      	cmp	r3, #0
 80170fa:	d102      	bne.n	8017102 <f_open+0x22e>
 80170fc:	2302      	movs	r3, #2
 80170fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8017102:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017106:	2b00      	cmp	r3, #0
 8017108:	f040 8095 	bne.w	8017236 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801710c:	693b      	ldr	r3, [r7, #16]
 801710e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017110:	4611      	mov	r1, r2
 8017112:	4618      	mov	r0, r3
 8017114:	f7ff f9af 	bl	8016476 <ld_clust>
 8017118:	4602      	mov	r2, r0
 801711a:	68fb      	ldr	r3, [r7, #12]
 801711c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801711e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017120:	331c      	adds	r3, #28
 8017122:	4618      	mov	r0, r3
 8017124:	f7fe fa10 	bl	8015548 <ld_dword>
 8017128:	4602      	mov	r2, r0
 801712a:	68fb      	ldr	r3, [r7, #12]
 801712c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801712e:	68fb      	ldr	r3, [r7, #12]
 8017130:	2200      	movs	r2, #0
 8017132:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8017134:	693a      	ldr	r2, [r7, #16]
 8017136:	68fb      	ldr	r3, [r7, #12]
 8017138:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801713a:	693b      	ldr	r3, [r7, #16]
 801713c:	88da      	ldrh	r2, [r3, #6]
 801713e:	68fb      	ldr	r3, [r7, #12]
 8017140:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8017142:	68fb      	ldr	r3, [r7, #12]
 8017144:	79fa      	ldrb	r2, [r7, #7]
 8017146:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8017148:	68fb      	ldr	r3, [r7, #12]
 801714a:	2200      	movs	r2, #0
 801714c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801714e:	68fb      	ldr	r3, [r7, #12]
 8017150:	2200      	movs	r2, #0
 8017152:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8017154:	68fb      	ldr	r3, [r7, #12]
 8017156:	2200      	movs	r2, #0
 8017158:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801715a:	68fb      	ldr	r3, [r7, #12]
 801715c:	3330      	adds	r3, #48	; 0x30
 801715e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017162:	2100      	movs	r1, #0
 8017164:	4618      	mov	r0, r3
 8017166:	f7fe fa7a 	bl	801565e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801716a:	79fb      	ldrb	r3, [r7, #7]
 801716c:	f003 0320 	and.w	r3, r3, #32
 8017170:	2b00      	cmp	r3, #0
 8017172:	d060      	beq.n	8017236 <f_open+0x362>
 8017174:	68fb      	ldr	r3, [r7, #12]
 8017176:	68db      	ldr	r3, [r3, #12]
 8017178:	2b00      	cmp	r3, #0
 801717a:	d05c      	beq.n	8017236 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801717c:	68fb      	ldr	r3, [r7, #12]
 801717e:	68da      	ldr	r2, [r3, #12]
 8017180:	68fb      	ldr	r3, [r7, #12]
 8017182:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8017184:	693b      	ldr	r3, [r7, #16]
 8017186:	895b      	ldrh	r3, [r3, #10]
 8017188:	025b      	lsls	r3, r3, #9
 801718a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801718c:	68fb      	ldr	r3, [r7, #12]
 801718e:	689b      	ldr	r3, [r3, #8]
 8017190:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8017192:	68fb      	ldr	r3, [r7, #12]
 8017194:	68db      	ldr	r3, [r3, #12]
 8017196:	657b      	str	r3, [r7, #84]	; 0x54
 8017198:	e016      	b.n	80171c8 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 801719a:	68fb      	ldr	r3, [r7, #12]
 801719c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801719e:	4618      	mov	r0, r3
 80171a0:	f7fe fd25 	bl	8015bee <get_fat>
 80171a4:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80171a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80171a8:	2b01      	cmp	r3, #1
 80171aa:	d802      	bhi.n	80171b2 <f_open+0x2de>
 80171ac:	2302      	movs	r3, #2
 80171ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80171b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80171b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80171b8:	d102      	bne.n	80171c0 <f_open+0x2ec>
 80171ba:	2301      	movs	r3, #1
 80171bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80171c0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80171c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80171c4:	1ad3      	subs	r3, r2, r3
 80171c6:	657b      	str	r3, [r7, #84]	; 0x54
 80171c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80171cc:	2b00      	cmp	r3, #0
 80171ce:	d103      	bne.n	80171d8 <f_open+0x304>
 80171d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80171d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80171d4:	429a      	cmp	r2, r3
 80171d6:	d8e0      	bhi.n	801719a <f_open+0x2c6>
				}
				fp->clust = clst;
 80171d8:	68fb      	ldr	r3, [r7, #12]
 80171da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80171dc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80171de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80171e2:	2b00      	cmp	r3, #0
 80171e4:	d127      	bne.n	8017236 <f_open+0x362>
 80171e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80171e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80171ec:	2b00      	cmp	r3, #0
 80171ee:	d022      	beq.n	8017236 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80171f0:	693b      	ldr	r3, [r7, #16]
 80171f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80171f4:	4618      	mov	r0, r3
 80171f6:	f7fe fcdb 	bl	8015bb0 <clust2sect>
 80171fa:	6478      	str	r0, [r7, #68]	; 0x44
 80171fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80171fe:	2b00      	cmp	r3, #0
 8017200:	d103      	bne.n	801720a <f_open+0x336>
						res = FR_INT_ERR;
 8017202:	2302      	movs	r3, #2
 8017204:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8017208:	e015      	b.n	8017236 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801720a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801720c:	0a5a      	lsrs	r2, r3, #9
 801720e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017210:	441a      	add	r2, r3
 8017212:	68fb      	ldr	r3, [r7, #12]
 8017214:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8017216:	693b      	ldr	r3, [r7, #16]
 8017218:	7858      	ldrb	r0, [r3, #1]
 801721a:	68fb      	ldr	r3, [r7, #12]
 801721c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017220:	68fb      	ldr	r3, [r7, #12]
 8017222:	6a1a      	ldr	r2, [r3, #32]
 8017224:	2301      	movs	r3, #1
 8017226:	f7fe f919 	bl	801545c <disk_read>
 801722a:	4603      	mov	r3, r0
 801722c:	2b00      	cmp	r3, #0
 801722e:	d002      	beq.n	8017236 <f_open+0x362>
 8017230:	2301      	movs	r3, #1
 8017232:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8017236:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801723a:	2b00      	cmp	r3, #0
 801723c:	d002      	beq.n	8017244 <f_open+0x370>
 801723e:	68fb      	ldr	r3, [r7, #12]
 8017240:	2200      	movs	r2, #0
 8017242:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8017244:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8017248:	4618      	mov	r0, r3
 801724a:	3760      	adds	r7, #96	; 0x60
 801724c:	46bd      	mov	sp, r7
 801724e:	bd80      	pop	{r7, pc}

08017250 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8017250:	b580      	push	{r7, lr}
 8017252:	b08e      	sub	sp, #56	; 0x38
 8017254:	af00      	add	r7, sp, #0
 8017256:	60f8      	str	r0, [r7, #12]
 8017258:	60b9      	str	r1, [r7, #8]
 801725a:	607a      	str	r2, [r7, #4]
 801725c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 801725e:	68bb      	ldr	r3, [r7, #8]
 8017260:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8017262:	683b      	ldr	r3, [r7, #0]
 8017264:	2200      	movs	r2, #0
 8017266:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8017268:	68fb      	ldr	r3, [r7, #12]
 801726a:	f107 0214 	add.w	r2, r7, #20
 801726e:	4611      	mov	r1, r2
 8017270:	4618      	mov	r0, r3
 8017272:	f7ff fdb3 	bl	8016ddc <validate>
 8017276:	4603      	mov	r3, r0
 8017278:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801727c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017280:	2b00      	cmp	r3, #0
 8017282:	d107      	bne.n	8017294 <f_read+0x44>
 8017284:	68fb      	ldr	r3, [r7, #12]
 8017286:	7d5b      	ldrb	r3, [r3, #21]
 8017288:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801728c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017290:	2b00      	cmp	r3, #0
 8017292:	d002      	beq.n	801729a <f_read+0x4a>
 8017294:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017298:	e115      	b.n	80174c6 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 801729a:	68fb      	ldr	r3, [r7, #12]
 801729c:	7d1b      	ldrb	r3, [r3, #20]
 801729e:	f003 0301 	and.w	r3, r3, #1
 80172a2:	2b00      	cmp	r3, #0
 80172a4:	d101      	bne.n	80172aa <f_read+0x5a>
 80172a6:	2307      	movs	r3, #7
 80172a8:	e10d      	b.n	80174c6 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 80172aa:	68fb      	ldr	r3, [r7, #12]
 80172ac:	68da      	ldr	r2, [r3, #12]
 80172ae:	68fb      	ldr	r3, [r7, #12]
 80172b0:	699b      	ldr	r3, [r3, #24]
 80172b2:	1ad3      	subs	r3, r2, r3
 80172b4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80172b6:	687a      	ldr	r2, [r7, #4]
 80172b8:	6a3b      	ldr	r3, [r7, #32]
 80172ba:	429a      	cmp	r2, r3
 80172bc:	f240 80fe 	bls.w	80174bc <f_read+0x26c>
 80172c0:	6a3b      	ldr	r3, [r7, #32]
 80172c2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80172c4:	e0fa      	b.n	80174bc <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80172c6:	68fb      	ldr	r3, [r7, #12]
 80172c8:	699b      	ldr	r3, [r3, #24]
 80172ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80172ce:	2b00      	cmp	r3, #0
 80172d0:	f040 80c6 	bne.w	8017460 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80172d4:	68fb      	ldr	r3, [r7, #12]
 80172d6:	699b      	ldr	r3, [r3, #24]
 80172d8:	0a5b      	lsrs	r3, r3, #9
 80172da:	697a      	ldr	r2, [r7, #20]
 80172dc:	8952      	ldrh	r2, [r2, #10]
 80172de:	3a01      	subs	r2, #1
 80172e0:	4013      	ands	r3, r2
 80172e2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80172e4:	69fb      	ldr	r3, [r7, #28]
 80172e6:	2b00      	cmp	r3, #0
 80172e8:	d12f      	bne.n	801734a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80172ea:	68fb      	ldr	r3, [r7, #12]
 80172ec:	699b      	ldr	r3, [r3, #24]
 80172ee:	2b00      	cmp	r3, #0
 80172f0:	d103      	bne.n	80172fa <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80172f2:	68fb      	ldr	r3, [r7, #12]
 80172f4:	689b      	ldr	r3, [r3, #8]
 80172f6:	633b      	str	r3, [r7, #48]	; 0x30
 80172f8:	e013      	b.n	8017322 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80172fa:	68fb      	ldr	r3, [r7, #12]
 80172fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80172fe:	2b00      	cmp	r3, #0
 8017300:	d007      	beq.n	8017312 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8017302:	68fb      	ldr	r3, [r7, #12]
 8017304:	699b      	ldr	r3, [r3, #24]
 8017306:	4619      	mov	r1, r3
 8017308:	68f8      	ldr	r0, [r7, #12]
 801730a:	f7fe fef9 	bl	8016100 <clmt_clust>
 801730e:	6338      	str	r0, [r7, #48]	; 0x30
 8017310:	e007      	b.n	8017322 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8017312:	68fa      	ldr	r2, [r7, #12]
 8017314:	68fb      	ldr	r3, [r7, #12]
 8017316:	69db      	ldr	r3, [r3, #28]
 8017318:	4619      	mov	r1, r3
 801731a:	4610      	mov	r0, r2
 801731c:	f7fe fc67 	bl	8015bee <get_fat>
 8017320:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8017322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017324:	2b01      	cmp	r3, #1
 8017326:	d804      	bhi.n	8017332 <f_read+0xe2>
 8017328:	68fb      	ldr	r3, [r7, #12]
 801732a:	2202      	movs	r2, #2
 801732c:	755a      	strb	r2, [r3, #21]
 801732e:	2302      	movs	r3, #2
 8017330:	e0c9      	b.n	80174c6 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8017332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017338:	d104      	bne.n	8017344 <f_read+0xf4>
 801733a:	68fb      	ldr	r3, [r7, #12]
 801733c:	2201      	movs	r2, #1
 801733e:	755a      	strb	r2, [r3, #21]
 8017340:	2301      	movs	r3, #1
 8017342:	e0c0      	b.n	80174c6 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8017344:	68fb      	ldr	r3, [r7, #12]
 8017346:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017348:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801734a:	697a      	ldr	r2, [r7, #20]
 801734c:	68fb      	ldr	r3, [r7, #12]
 801734e:	69db      	ldr	r3, [r3, #28]
 8017350:	4619      	mov	r1, r3
 8017352:	4610      	mov	r0, r2
 8017354:	f7fe fc2c 	bl	8015bb0 <clust2sect>
 8017358:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801735a:	69bb      	ldr	r3, [r7, #24]
 801735c:	2b00      	cmp	r3, #0
 801735e:	d104      	bne.n	801736a <f_read+0x11a>
 8017360:	68fb      	ldr	r3, [r7, #12]
 8017362:	2202      	movs	r2, #2
 8017364:	755a      	strb	r2, [r3, #21]
 8017366:	2302      	movs	r3, #2
 8017368:	e0ad      	b.n	80174c6 <f_read+0x276>
			sect += csect;
 801736a:	69ba      	ldr	r2, [r7, #24]
 801736c:	69fb      	ldr	r3, [r7, #28]
 801736e:	4413      	add	r3, r2
 8017370:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8017372:	687b      	ldr	r3, [r7, #4]
 8017374:	0a5b      	lsrs	r3, r3, #9
 8017376:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8017378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801737a:	2b00      	cmp	r3, #0
 801737c:	d039      	beq.n	80173f2 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801737e:	69fa      	ldr	r2, [r7, #28]
 8017380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017382:	4413      	add	r3, r2
 8017384:	697a      	ldr	r2, [r7, #20]
 8017386:	8952      	ldrh	r2, [r2, #10]
 8017388:	4293      	cmp	r3, r2
 801738a:	d905      	bls.n	8017398 <f_read+0x148>
					cc = fs->csize - csect;
 801738c:	697b      	ldr	r3, [r7, #20]
 801738e:	895b      	ldrh	r3, [r3, #10]
 8017390:	461a      	mov	r2, r3
 8017392:	69fb      	ldr	r3, [r7, #28]
 8017394:	1ad3      	subs	r3, r2, r3
 8017396:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8017398:	697b      	ldr	r3, [r7, #20]
 801739a:	7858      	ldrb	r0, [r3, #1]
 801739c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801739e:	69ba      	ldr	r2, [r7, #24]
 80173a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80173a2:	f7fe f85b 	bl	801545c <disk_read>
 80173a6:	4603      	mov	r3, r0
 80173a8:	2b00      	cmp	r3, #0
 80173aa:	d004      	beq.n	80173b6 <f_read+0x166>
 80173ac:	68fb      	ldr	r3, [r7, #12]
 80173ae:	2201      	movs	r2, #1
 80173b0:	755a      	strb	r2, [r3, #21]
 80173b2:	2301      	movs	r3, #1
 80173b4:	e087      	b.n	80174c6 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80173b6:	68fb      	ldr	r3, [r7, #12]
 80173b8:	7d1b      	ldrb	r3, [r3, #20]
 80173ba:	b25b      	sxtb	r3, r3
 80173bc:	2b00      	cmp	r3, #0
 80173be:	da14      	bge.n	80173ea <f_read+0x19a>
 80173c0:	68fb      	ldr	r3, [r7, #12]
 80173c2:	6a1a      	ldr	r2, [r3, #32]
 80173c4:	69bb      	ldr	r3, [r7, #24]
 80173c6:	1ad3      	subs	r3, r2, r3
 80173c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80173ca:	429a      	cmp	r2, r3
 80173cc:	d90d      	bls.n	80173ea <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80173ce:	68fb      	ldr	r3, [r7, #12]
 80173d0:	6a1a      	ldr	r2, [r3, #32]
 80173d2:	69bb      	ldr	r3, [r7, #24]
 80173d4:	1ad3      	subs	r3, r2, r3
 80173d6:	025b      	lsls	r3, r3, #9
 80173d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80173da:	18d0      	adds	r0, r2, r3
 80173dc:	68fb      	ldr	r3, [r7, #12]
 80173de:	3330      	adds	r3, #48	; 0x30
 80173e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80173e4:	4619      	mov	r1, r3
 80173e6:	f7fe f919 	bl	801561c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80173ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173ec:	025b      	lsls	r3, r3, #9
 80173ee:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80173f0:	e050      	b.n	8017494 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80173f2:	68fb      	ldr	r3, [r7, #12]
 80173f4:	6a1b      	ldr	r3, [r3, #32]
 80173f6:	69ba      	ldr	r2, [r7, #24]
 80173f8:	429a      	cmp	r2, r3
 80173fa:	d02e      	beq.n	801745a <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80173fc:	68fb      	ldr	r3, [r7, #12]
 80173fe:	7d1b      	ldrb	r3, [r3, #20]
 8017400:	b25b      	sxtb	r3, r3
 8017402:	2b00      	cmp	r3, #0
 8017404:	da18      	bge.n	8017438 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8017406:	697b      	ldr	r3, [r7, #20]
 8017408:	7858      	ldrb	r0, [r3, #1]
 801740a:	68fb      	ldr	r3, [r7, #12]
 801740c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017410:	68fb      	ldr	r3, [r7, #12]
 8017412:	6a1a      	ldr	r2, [r3, #32]
 8017414:	2301      	movs	r3, #1
 8017416:	f7fe f841 	bl	801549c <disk_write>
 801741a:	4603      	mov	r3, r0
 801741c:	2b00      	cmp	r3, #0
 801741e:	d004      	beq.n	801742a <f_read+0x1da>
 8017420:	68fb      	ldr	r3, [r7, #12]
 8017422:	2201      	movs	r2, #1
 8017424:	755a      	strb	r2, [r3, #21]
 8017426:	2301      	movs	r3, #1
 8017428:	e04d      	b.n	80174c6 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 801742a:	68fb      	ldr	r3, [r7, #12]
 801742c:	7d1b      	ldrb	r3, [r3, #20]
 801742e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017432:	b2da      	uxtb	r2, r3
 8017434:	68fb      	ldr	r3, [r7, #12]
 8017436:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8017438:	697b      	ldr	r3, [r7, #20]
 801743a:	7858      	ldrb	r0, [r3, #1]
 801743c:	68fb      	ldr	r3, [r7, #12]
 801743e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017442:	2301      	movs	r3, #1
 8017444:	69ba      	ldr	r2, [r7, #24]
 8017446:	f7fe f809 	bl	801545c <disk_read>
 801744a:	4603      	mov	r3, r0
 801744c:	2b00      	cmp	r3, #0
 801744e:	d004      	beq.n	801745a <f_read+0x20a>
 8017450:	68fb      	ldr	r3, [r7, #12]
 8017452:	2201      	movs	r2, #1
 8017454:	755a      	strb	r2, [r3, #21]
 8017456:	2301      	movs	r3, #1
 8017458:	e035      	b.n	80174c6 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 801745a:	68fb      	ldr	r3, [r7, #12]
 801745c:	69ba      	ldr	r2, [r7, #24]
 801745e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8017460:	68fb      	ldr	r3, [r7, #12]
 8017462:	699b      	ldr	r3, [r3, #24]
 8017464:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017468:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 801746c:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 801746e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017470:	687b      	ldr	r3, [r7, #4]
 8017472:	429a      	cmp	r2, r3
 8017474:	d901      	bls.n	801747a <f_read+0x22a>
 8017476:	687b      	ldr	r3, [r7, #4]
 8017478:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 801747a:	68fb      	ldr	r3, [r7, #12]
 801747c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8017480:	68fb      	ldr	r3, [r7, #12]
 8017482:	699b      	ldr	r3, [r3, #24]
 8017484:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017488:	4413      	add	r3, r2
 801748a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801748c:	4619      	mov	r1, r3
 801748e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017490:	f7fe f8c4 	bl	801561c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8017494:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017498:	4413      	add	r3, r2
 801749a:	627b      	str	r3, [r7, #36]	; 0x24
 801749c:	68fb      	ldr	r3, [r7, #12]
 801749e:	699a      	ldr	r2, [r3, #24]
 80174a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174a2:	441a      	add	r2, r3
 80174a4:	68fb      	ldr	r3, [r7, #12]
 80174a6:	619a      	str	r2, [r3, #24]
 80174a8:	683b      	ldr	r3, [r7, #0]
 80174aa:	681a      	ldr	r2, [r3, #0]
 80174ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174ae:	441a      	add	r2, r3
 80174b0:	683b      	ldr	r3, [r7, #0]
 80174b2:	601a      	str	r2, [r3, #0]
 80174b4:	687a      	ldr	r2, [r7, #4]
 80174b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174b8:	1ad3      	subs	r3, r2, r3
 80174ba:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80174bc:	687b      	ldr	r3, [r7, #4]
 80174be:	2b00      	cmp	r3, #0
 80174c0:	f47f af01 	bne.w	80172c6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80174c4:	2300      	movs	r3, #0
}
 80174c6:	4618      	mov	r0, r3
 80174c8:	3738      	adds	r7, #56	; 0x38
 80174ca:	46bd      	mov	sp, r7
 80174cc:	bd80      	pop	{r7, pc}

080174ce <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80174ce:	b580      	push	{r7, lr}
 80174d0:	b08c      	sub	sp, #48	; 0x30
 80174d2:	af00      	add	r7, sp, #0
 80174d4:	60f8      	str	r0, [r7, #12]
 80174d6:	60b9      	str	r1, [r7, #8]
 80174d8:	607a      	str	r2, [r7, #4]
 80174da:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80174dc:	68bb      	ldr	r3, [r7, #8]
 80174de:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80174e0:	683b      	ldr	r3, [r7, #0]
 80174e2:	2200      	movs	r2, #0
 80174e4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80174e6:	68fb      	ldr	r3, [r7, #12]
 80174e8:	f107 0210 	add.w	r2, r7, #16
 80174ec:	4611      	mov	r1, r2
 80174ee:	4618      	mov	r0, r3
 80174f0:	f7ff fc74 	bl	8016ddc <validate>
 80174f4:	4603      	mov	r3, r0
 80174f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80174fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80174fe:	2b00      	cmp	r3, #0
 8017500:	d107      	bne.n	8017512 <f_write+0x44>
 8017502:	68fb      	ldr	r3, [r7, #12]
 8017504:	7d5b      	ldrb	r3, [r3, #21]
 8017506:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801750a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801750e:	2b00      	cmp	r3, #0
 8017510:	d002      	beq.n	8017518 <f_write+0x4a>
 8017512:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017516:	e14b      	b.n	80177b0 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8017518:	68fb      	ldr	r3, [r7, #12]
 801751a:	7d1b      	ldrb	r3, [r3, #20]
 801751c:	f003 0302 	and.w	r3, r3, #2
 8017520:	2b00      	cmp	r3, #0
 8017522:	d101      	bne.n	8017528 <f_write+0x5a>
 8017524:	2307      	movs	r3, #7
 8017526:	e143      	b.n	80177b0 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8017528:	68fb      	ldr	r3, [r7, #12]
 801752a:	699a      	ldr	r2, [r3, #24]
 801752c:	687b      	ldr	r3, [r7, #4]
 801752e:	441a      	add	r2, r3
 8017530:	68fb      	ldr	r3, [r7, #12]
 8017532:	699b      	ldr	r3, [r3, #24]
 8017534:	429a      	cmp	r2, r3
 8017536:	f080 812d 	bcs.w	8017794 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801753a:	68fb      	ldr	r3, [r7, #12]
 801753c:	699b      	ldr	r3, [r3, #24]
 801753e:	43db      	mvns	r3, r3
 8017540:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8017542:	e127      	b.n	8017794 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8017544:	68fb      	ldr	r3, [r7, #12]
 8017546:	699b      	ldr	r3, [r3, #24]
 8017548:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801754c:	2b00      	cmp	r3, #0
 801754e:	f040 80e3 	bne.w	8017718 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8017552:	68fb      	ldr	r3, [r7, #12]
 8017554:	699b      	ldr	r3, [r3, #24]
 8017556:	0a5b      	lsrs	r3, r3, #9
 8017558:	693a      	ldr	r2, [r7, #16]
 801755a:	8952      	ldrh	r2, [r2, #10]
 801755c:	3a01      	subs	r2, #1
 801755e:	4013      	ands	r3, r2
 8017560:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8017562:	69bb      	ldr	r3, [r7, #24]
 8017564:	2b00      	cmp	r3, #0
 8017566:	d143      	bne.n	80175f0 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8017568:	68fb      	ldr	r3, [r7, #12]
 801756a:	699b      	ldr	r3, [r3, #24]
 801756c:	2b00      	cmp	r3, #0
 801756e:	d10c      	bne.n	801758a <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8017570:	68fb      	ldr	r3, [r7, #12]
 8017572:	689b      	ldr	r3, [r3, #8]
 8017574:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8017576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017578:	2b00      	cmp	r3, #0
 801757a:	d11a      	bne.n	80175b2 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801757c:	68fb      	ldr	r3, [r7, #12]
 801757e:	2100      	movs	r1, #0
 8017580:	4618      	mov	r0, r3
 8017582:	f7fe fd25 	bl	8015fd0 <create_chain>
 8017586:	62b8      	str	r0, [r7, #40]	; 0x28
 8017588:	e013      	b.n	80175b2 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801758a:	68fb      	ldr	r3, [r7, #12]
 801758c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801758e:	2b00      	cmp	r3, #0
 8017590:	d007      	beq.n	80175a2 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8017592:	68fb      	ldr	r3, [r7, #12]
 8017594:	699b      	ldr	r3, [r3, #24]
 8017596:	4619      	mov	r1, r3
 8017598:	68f8      	ldr	r0, [r7, #12]
 801759a:	f7fe fdb1 	bl	8016100 <clmt_clust>
 801759e:	62b8      	str	r0, [r7, #40]	; 0x28
 80175a0:	e007      	b.n	80175b2 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80175a2:	68fa      	ldr	r2, [r7, #12]
 80175a4:	68fb      	ldr	r3, [r7, #12]
 80175a6:	69db      	ldr	r3, [r3, #28]
 80175a8:	4619      	mov	r1, r3
 80175aa:	4610      	mov	r0, r2
 80175ac:	f7fe fd10 	bl	8015fd0 <create_chain>
 80175b0:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80175b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175b4:	2b00      	cmp	r3, #0
 80175b6:	f000 80f2 	beq.w	801779e <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80175ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175bc:	2b01      	cmp	r3, #1
 80175be:	d104      	bne.n	80175ca <f_write+0xfc>
 80175c0:	68fb      	ldr	r3, [r7, #12]
 80175c2:	2202      	movs	r2, #2
 80175c4:	755a      	strb	r2, [r3, #21]
 80175c6:	2302      	movs	r3, #2
 80175c8:	e0f2      	b.n	80177b0 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80175ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80175d0:	d104      	bne.n	80175dc <f_write+0x10e>
 80175d2:	68fb      	ldr	r3, [r7, #12]
 80175d4:	2201      	movs	r2, #1
 80175d6:	755a      	strb	r2, [r3, #21]
 80175d8:	2301      	movs	r3, #1
 80175da:	e0e9      	b.n	80177b0 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 80175dc:	68fb      	ldr	r3, [r7, #12]
 80175de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80175e0:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80175e2:	68fb      	ldr	r3, [r7, #12]
 80175e4:	689b      	ldr	r3, [r3, #8]
 80175e6:	2b00      	cmp	r3, #0
 80175e8:	d102      	bne.n	80175f0 <f_write+0x122>
 80175ea:	68fb      	ldr	r3, [r7, #12]
 80175ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80175ee:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80175f0:	68fb      	ldr	r3, [r7, #12]
 80175f2:	7d1b      	ldrb	r3, [r3, #20]
 80175f4:	b25b      	sxtb	r3, r3
 80175f6:	2b00      	cmp	r3, #0
 80175f8:	da18      	bge.n	801762c <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80175fa:	693b      	ldr	r3, [r7, #16]
 80175fc:	7858      	ldrb	r0, [r3, #1]
 80175fe:	68fb      	ldr	r3, [r7, #12]
 8017600:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017604:	68fb      	ldr	r3, [r7, #12]
 8017606:	6a1a      	ldr	r2, [r3, #32]
 8017608:	2301      	movs	r3, #1
 801760a:	f7fd ff47 	bl	801549c <disk_write>
 801760e:	4603      	mov	r3, r0
 8017610:	2b00      	cmp	r3, #0
 8017612:	d004      	beq.n	801761e <f_write+0x150>
 8017614:	68fb      	ldr	r3, [r7, #12]
 8017616:	2201      	movs	r2, #1
 8017618:	755a      	strb	r2, [r3, #21]
 801761a:	2301      	movs	r3, #1
 801761c:	e0c8      	b.n	80177b0 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 801761e:	68fb      	ldr	r3, [r7, #12]
 8017620:	7d1b      	ldrb	r3, [r3, #20]
 8017622:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017626:	b2da      	uxtb	r2, r3
 8017628:	68fb      	ldr	r3, [r7, #12]
 801762a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801762c:	693a      	ldr	r2, [r7, #16]
 801762e:	68fb      	ldr	r3, [r7, #12]
 8017630:	69db      	ldr	r3, [r3, #28]
 8017632:	4619      	mov	r1, r3
 8017634:	4610      	mov	r0, r2
 8017636:	f7fe fabb 	bl	8015bb0 <clust2sect>
 801763a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801763c:	697b      	ldr	r3, [r7, #20]
 801763e:	2b00      	cmp	r3, #0
 8017640:	d104      	bne.n	801764c <f_write+0x17e>
 8017642:	68fb      	ldr	r3, [r7, #12]
 8017644:	2202      	movs	r2, #2
 8017646:	755a      	strb	r2, [r3, #21]
 8017648:	2302      	movs	r3, #2
 801764a:	e0b1      	b.n	80177b0 <f_write+0x2e2>
			sect += csect;
 801764c:	697a      	ldr	r2, [r7, #20]
 801764e:	69bb      	ldr	r3, [r7, #24]
 8017650:	4413      	add	r3, r2
 8017652:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8017654:	687b      	ldr	r3, [r7, #4]
 8017656:	0a5b      	lsrs	r3, r3, #9
 8017658:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801765a:	6a3b      	ldr	r3, [r7, #32]
 801765c:	2b00      	cmp	r3, #0
 801765e:	d03c      	beq.n	80176da <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8017660:	69ba      	ldr	r2, [r7, #24]
 8017662:	6a3b      	ldr	r3, [r7, #32]
 8017664:	4413      	add	r3, r2
 8017666:	693a      	ldr	r2, [r7, #16]
 8017668:	8952      	ldrh	r2, [r2, #10]
 801766a:	4293      	cmp	r3, r2
 801766c:	d905      	bls.n	801767a <f_write+0x1ac>
					cc = fs->csize - csect;
 801766e:	693b      	ldr	r3, [r7, #16]
 8017670:	895b      	ldrh	r3, [r3, #10]
 8017672:	461a      	mov	r2, r3
 8017674:	69bb      	ldr	r3, [r7, #24]
 8017676:	1ad3      	subs	r3, r2, r3
 8017678:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801767a:	693b      	ldr	r3, [r7, #16]
 801767c:	7858      	ldrb	r0, [r3, #1]
 801767e:	6a3b      	ldr	r3, [r7, #32]
 8017680:	697a      	ldr	r2, [r7, #20]
 8017682:	69f9      	ldr	r1, [r7, #28]
 8017684:	f7fd ff0a 	bl	801549c <disk_write>
 8017688:	4603      	mov	r3, r0
 801768a:	2b00      	cmp	r3, #0
 801768c:	d004      	beq.n	8017698 <f_write+0x1ca>
 801768e:	68fb      	ldr	r3, [r7, #12]
 8017690:	2201      	movs	r2, #1
 8017692:	755a      	strb	r2, [r3, #21]
 8017694:	2301      	movs	r3, #1
 8017696:	e08b      	b.n	80177b0 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8017698:	68fb      	ldr	r3, [r7, #12]
 801769a:	6a1a      	ldr	r2, [r3, #32]
 801769c:	697b      	ldr	r3, [r7, #20]
 801769e:	1ad3      	subs	r3, r2, r3
 80176a0:	6a3a      	ldr	r2, [r7, #32]
 80176a2:	429a      	cmp	r2, r3
 80176a4:	d915      	bls.n	80176d2 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80176a6:	68fb      	ldr	r3, [r7, #12]
 80176a8:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80176ac:	68fb      	ldr	r3, [r7, #12]
 80176ae:	6a1a      	ldr	r2, [r3, #32]
 80176b0:	697b      	ldr	r3, [r7, #20]
 80176b2:	1ad3      	subs	r3, r2, r3
 80176b4:	025b      	lsls	r3, r3, #9
 80176b6:	69fa      	ldr	r2, [r7, #28]
 80176b8:	4413      	add	r3, r2
 80176ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80176be:	4619      	mov	r1, r3
 80176c0:	f7fd ffac 	bl	801561c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80176c4:	68fb      	ldr	r3, [r7, #12]
 80176c6:	7d1b      	ldrb	r3, [r3, #20]
 80176c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80176cc:	b2da      	uxtb	r2, r3
 80176ce:	68fb      	ldr	r3, [r7, #12]
 80176d0:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80176d2:	6a3b      	ldr	r3, [r7, #32]
 80176d4:	025b      	lsls	r3, r3, #9
 80176d6:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80176d8:	e03f      	b.n	801775a <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80176da:	68fb      	ldr	r3, [r7, #12]
 80176dc:	6a1b      	ldr	r3, [r3, #32]
 80176de:	697a      	ldr	r2, [r7, #20]
 80176e0:	429a      	cmp	r2, r3
 80176e2:	d016      	beq.n	8017712 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 80176e4:	68fb      	ldr	r3, [r7, #12]
 80176e6:	699a      	ldr	r2, [r3, #24]
 80176e8:	68fb      	ldr	r3, [r7, #12]
 80176ea:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80176ec:	429a      	cmp	r2, r3
 80176ee:	d210      	bcs.n	8017712 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80176f0:	693b      	ldr	r3, [r7, #16]
 80176f2:	7858      	ldrb	r0, [r3, #1]
 80176f4:	68fb      	ldr	r3, [r7, #12]
 80176f6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80176fa:	2301      	movs	r3, #1
 80176fc:	697a      	ldr	r2, [r7, #20]
 80176fe:	f7fd fead 	bl	801545c <disk_read>
 8017702:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8017704:	2b00      	cmp	r3, #0
 8017706:	d004      	beq.n	8017712 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8017708:	68fb      	ldr	r3, [r7, #12]
 801770a:	2201      	movs	r2, #1
 801770c:	755a      	strb	r2, [r3, #21]
 801770e:	2301      	movs	r3, #1
 8017710:	e04e      	b.n	80177b0 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8017712:	68fb      	ldr	r3, [r7, #12]
 8017714:	697a      	ldr	r2, [r7, #20]
 8017716:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8017718:	68fb      	ldr	r3, [r7, #12]
 801771a:	699b      	ldr	r3, [r3, #24]
 801771c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017720:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8017724:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8017726:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017728:	687b      	ldr	r3, [r7, #4]
 801772a:	429a      	cmp	r2, r3
 801772c:	d901      	bls.n	8017732 <f_write+0x264>
 801772e:	687b      	ldr	r3, [r7, #4]
 8017730:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8017732:	68fb      	ldr	r3, [r7, #12]
 8017734:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8017738:	68fb      	ldr	r3, [r7, #12]
 801773a:	699b      	ldr	r3, [r3, #24]
 801773c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017740:	4413      	add	r3, r2
 8017742:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017744:	69f9      	ldr	r1, [r7, #28]
 8017746:	4618      	mov	r0, r3
 8017748:	f7fd ff68 	bl	801561c <mem_cpy>
		fp->flag |= FA_DIRTY;
 801774c:	68fb      	ldr	r3, [r7, #12]
 801774e:	7d1b      	ldrb	r3, [r3, #20]
 8017750:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8017754:	b2da      	uxtb	r2, r3
 8017756:	68fb      	ldr	r3, [r7, #12]
 8017758:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801775a:	69fa      	ldr	r2, [r7, #28]
 801775c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801775e:	4413      	add	r3, r2
 8017760:	61fb      	str	r3, [r7, #28]
 8017762:	68fb      	ldr	r3, [r7, #12]
 8017764:	699a      	ldr	r2, [r3, #24]
 8017766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017768:	441a      	add	r2, r3
 801776a:	68fb      	ldr	r3, [r7, #12]
 801776c:	619a      	str	r2, [r3, #24]
 801776e:	68fb      	ldr	r3, [r7, #12]
 8017770:	68da      	ldr	r2, [r3, #12]
 8017772:	68fb      	ldr	r3, [r7, #12]
 8017774:	699b      	ldr	r3, [r3, #24]
 8017776:	429a      	cmp	r2, r3
 8017778:	bf38      	it	cc
 801777a:	461a      	movcc	r2, r3
 801777c:	68fb      	ldr	r3, [r7, #12]
 801777e:	60da      	str	r2, [r3, #12]
 8017780:	683b      	ldr	r3, [r7, #0]
 8017782:	681a      	ldr	r2, [r3, #0]
 8017784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017786:	441a      	add	r2, r3
 8017788:	683b      	ldr	r3, [r7, #0]
 801778a:	601a      	str	r2, [r3, #0]
 801778c:	687a      	ldr	r2, [r7, #4]
 801778e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017790:	1ad3      	subs	r3, r2, r3
 8017792:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8017794:	687b      	ldr	r3, [r7, #4]
 8017796:	2b00      	cmp	r3, #0
 8017798:	f47f aed4 	bne.w	8017544 <f_write+0x76>
 801779c:	e000      	b.n	80177a0 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801779e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80177a0:	68fb      	ldr	r3, [r7, #12]
 80177a2:	7d1b      	ldrb	r3, [r3, #20]
 80177a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80177a8:	b2da      	uxtb	r2, r3
 80177aa:	68fb      	ldr	r3, [r7, #12]
 80177ac:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80177ae:	2300      	movs	r3, #0
}
 80177b0:	4618      	mov	r0, r3
 80177b2:	3730      	adds	r7, #48	; 0x30
 80177b4:	46bd      	mov	sp, r7
 80177b6:	bd80      	pop	{r7, pc}

080177b8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80177b8:	b580      	push	{r7, lr}
 80177ba:	b086      	sub	sp, #24
 80177bc:	af00      	add	r7, sp, #0
 80177be:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80177c0:	687b      	ldr	r3, [r7, #4]
 80177c2:	f107 0208 	add.w	r2, r7, #8
 80177c6:	4611      	mov	r1, r2
 80177c8:	4618      	mov	r0, r3
 80177ca:	f7ff fb07 	bl	8016ddc <validate>
 80177ce:	4603      	mov	r3, r0
 80177d0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80177d2:	7dfb      	ldrb	r3, [r7, #23]
 80177d4:	2b00      	cmp	r3, #0
 80177d6:	d168      	bne.n	80178aa <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80177d8:	687b      	ldr	r3, [r7, #4]
 80177da:	7d1b      	ldrb	r3, [r3, #20]
 80177dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80177e0:	2b00      	cmp	r3, #0
 80177e2:	d062      	beq.n	80178aa <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80177e4:	687b      	ldr	r3, [r7, #4]
 80177e6:	7d1b      	ldrb	r3, [r3, #20]
 80177e8:	b25b      	sxtb	r3, r3
 80177ea:	2b00      	cmp	r3, #0
 80177ec:	da15      	bge.n	801781a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80177ee:	68bb      	ldr	r3, [r7, #8]
 80177f0:	7858      	ldrb	r0, [r3, #1]
 80177f2:	687b      	ldr	r3, [r7, #4]
 80177f4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80177f8:	687b      	ldr	r3, [r7, #4]
 80177fa:	6a1a      	ldr	r2, [r3, #32]
 80177fc:	2301      	movs	r3, #1
 80177fe:	f7fd fe4d 	bl	801549c <disk_write>
 8017802:	4603      	mov	r3, r0
 8017804:	2b00      	cmp	r3, #0
 8017806:	d001      	beq.n	801780c <f_sync+0x54>
 8017808:	2301      	movs	r3, #1
 801780a:	e04f      	b.n	80178ac <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801780c:	687b      	ldr	r3, [r7, #4]
 801780e:	7d1b      	ldrb	r3, [r3, #20]
 8017810:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017814:	b2da      	uxtb	r2, r3
 8017816:	687b      	ldr	r3, [r7, #4]
 8017818:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801781a:	f7fa fce1 	bl	80121e0 <get_fattime>
 801781e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8017820:	68ba      	ldr	r2, [r7, #8]
 8017822:	687b      	ldr	r3, [r7, #4]
 8017824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017826:	4619      	mov	r1, r3
 8017828:	4610      	mov	r0, r2
 801782a:	f7fe f925 	bl	8015a78 <move_window>
 801782e:	4603      	mov	r3, r0
 8017830:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8017832:	7dfb      	ldrb	r3, [r7, #23]
 8017834:	2b00      	cmp	r3, #0
 8017836:	d138      	bne.n	80178aa <f_sync+0xf2>
					dir = fp->dir_ptr;
 8017838:	687b      	ldr	r3, [r7, #4]
 801783a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801783c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801783e:	68fb      	ldr	r3, [r7, #12]
 8017840:	330b      	adds	r3, #11
 8017842:	781a      	ldrb	r2, [r3, #0]
 8017844:	68fb      	ldr	r3, [r7, #12]
 8017846:	330b      	adds	r3, #11
 8017848:	f042 0220 	orr.w	r2, r2, #32
 801784c:	b2d2      	uxtb	r2, r2
 801784e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8017850:	687b      	ldr	r3, [r7, #4]
 8017852:	6818      	ldr	r0, [r3, #0]
 8017854:	687b      	ldr	r3, [r7, #4]
 8017856:	689b      	ldr	r3, [r3, #8]
 8017858:	461a      	mov	r2, r3
 801785a:	68f9      	ldr	r1, [r7, #12]
 801785c:	f7fe fe2a 	bl	80164b4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8017860:	68fb      	ldr	r3, [r7, #12]
 8017862:	f103 021c 	add.w	r2, r3, #28
 8017866:	687b      	ldr	r3, [r7, #4]
 8017868:	68db      	ldr	r3, [r3, #12]
 801786a:	4619      	mov	r1, r3
 801786c:	4610      	mov	r0, r2
 801786e:	f7fd fea9 	bl	80155c4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8017872:	68fb      	ldr	r3, [r7, #12]
 8017874:	3316      	adds	r3, #22
 8017876:	6939      	ldr	r1, [r7, #16]
 8017878:	4618      	mov	r0, r3
 801787a:	f7fd fea3 	bl	80155c4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801787e:	68fb      	ldr	r3, [r7, #12]
 8017880:	3312      	adds	r3, #18
 8017882:	2100      	movs	r1, #0
 8017884:	4618      	mov	r0, r3
 8017886:	f7fd fe82 	bl	801558e <st_word>
					fs->wflag = 1;
 801788a:	68bb      	ldr	r3, [r7, #8]
 801788c:	2201      	movs	r2, #1
 801788e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8017890:	68bb      	ldr	r3, [r7, #8]
 8017892:	4618      	mov	r0, r3
 8017894:	f7fe f91e 	bl	8015ad4 <sync_fs>
 8017898:	4603      	mov	r3, r0
 801789a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801789c:	687b      	ldr	r3, [r7, #4]
 801789e:	7d1b      	ldrb	r3, [r3, #20]
 80178a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80178a4:	b2da      	uxtb	r2, r3
 80178a6:	687b      	ldr	r3, [r7, #4]
 80178a8:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80178aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80178ac:	4618      	mov	r0, r3
 80178ae:	3718      	adds	r7, #24
 80178b0:	46bd      	mov	sp, r7
 80178b2:	bd80      	pop	{r7, pc}

080178b4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80178b4:	b580      	push	{r7, lr}
 80178b6:	b084      	sub	sp, #16
 80178b8:	af00      	add	r7, sp, #0
 80178ba:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80178bc:	6878      	ldr	r0, [r7, #4]
 80178be:	f7ff ff7b 	bl	80177b8 <f_sync>
 80178c2:	4603      	mov	r3, r0
 80178c4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80178c6:	7bfb      	ldrb	r3, [r7, #15]
 80178c8:	2b00      	cmp	r3, #0
 80178ca:	d118      	bne.n	80178fe <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80178cc:	687b      	ldr	r3, [r7, #4]
 80178ce:	f107 0208 	add.w	r2, r7, #8
 80178d2:	4611      	mov	r1, r2
 80178d4:	4618      	mov	r0, r3
 80178d6:	f7ff fa81 	bl	8016ddc <validate>
 80178da:	4603      	mov	r3, r0
 80178dc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80178de:	7bfb      	ldrb	r3, [r7, #15]
 80178e0:	2b00      	cmp	r3, #0
 80178e2:	d10c      	bne.n	80178fe <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80178e4:	687b      	ldr	r3, [r7, #4]
 80178e6:	691b      	ldr	r3, [r3, #16]
 80178e8:	4618      	mov	r0, r3
 80178ea:	f7fe f821 	bl	8015930 <dec_lock>
 80178ee:	4603      	mov	r3, r0
 80178f0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80178f2:	7bfb      	ldrb	r3, [r7, #15]
 80178f4:	2b00      	cmp	r3, #0
 80178f6:	d102      	bne.n	80178fe <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80178f8:	687b      	ldr	r3, [r7, #4]
 80178fa:	2200      	movs	r2, #0
 80178fc:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80178fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8017900:	4618      	mov	r0, r3
 8017902:	3710      	adds	r7, #16
 8017904:	46bd      	mov	sp, r7
 8017906:	bd80      	pop	{r7, pc}

08017908 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8017908:	b480      	push	{r7}
 801790a:	b087      	sub	sp, #28
 801790c:	af00      	add	r7, sp, #0
 801790e:	60f8      	str	r0, [r7, #12]
 8017910:	60b9      	str	r1, [r7, #8]
 8017912:	4613      	mov	r3, r2
 8017914:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8017916:	2301      	movs	r3, #1
 8017918:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801791a:	2300      	movs	r3, #0
 801791c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801791e:	4b1f      	ldr	r3, [pc, #124]	; (801799c <FATFS_LinkDriverEx+0x94>)
 8017920:	7a5b      	ldrb	r3, [r3, #9]
 8017922:	b2db      	uxtb	r3, r3
 8017924:	2b00      	cmp	r3, #0
 8017926:	d131      	bne.n	801798c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8017928:	4b1c      	ldr	r3, [pc, #112]	; (801799c <FATFS_LinkDriverEx+0x94>)
 801792a:	7a5b      	ldrb	r3, [r3, #9]
 801792c:	b2db      	uxtb	r3, r3
 801792e:	461a      	mov	r2, r3
 8017930:	4b1a      	ldr	r3, [pc, #104]	; (801799c <FATFS_LinkDriverEx+0x94>)
 8017932:	2100      	movs	r1, #0
 8017934:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8017936:	4b19      	ldr	r3, [pc, #100]	; (801799c <FATFS_LinkDriverEx+0x94>)
 8017938:	7a5b      	ldrb	r3, [r3, #9]
 801793a:	b2db      	uxtb	r3, r3
 801793c:	4a17      	ldr	r2, [pc, #92]	; (801799c <FATFS_LinkDriverEx+0x94>)
 801793e:	009b      	lsls	r3, r3, #2
 8017940:	4413      	add	r3, r2
 8017942:	68fa      	ldr	r2, [r7, #12]
 8017944:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8017946:	4b15      	ldr	r3, [pc, #84]	; (801799c <FATFS_LinkDriverEx+0x94>)
 8017948:	7a5b      	ldrb	r3, [r3, #9]
 801794a:	b2db      	uxtb	r3, r3
 801794c:	461a      	mov	r2, r3
 801794e:	4b13      	ldr	r3, [pc, #76]	; (801799c <FATFS_LinkDriverEx+0x94>)
 8017950:	4413      	add	r3, r2
 8017952:	79fa      	ldrb	r2, [r7, #7]
 8017954:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8017956:	4b11      	ldr	r3, [pc, #68]	; (801799c <FATFS_LinkDriverEx+0x94>)
 8017958:	7a5b      	ldrb	r3, [r3, #9]
 801795a:	b2db      	uxtb	r3, r3
 801795c:	1c5a      	adds	r2, r3, #1
 801795e:	b2d1      	uxtb	r1, r2
 8017960:	4a0e      	ldr	r2, [pc, #56]	; (801799c <FATFS_LinkDriverEx+0x94>)
 8017962:	7251      	strb	r1, [r2, #9]
 8017964:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8017966:	7dbb      	ldrb	r3, [r7, #22]
 8017968:	3330      	adds	r3, #48	; 0x30
 801796a:	b2da      	uxtb	r2, r3
 801796c:	68bb      	ldr	r3, [r7, #8]
 801796e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8017970:	68bb      	ldr	r3, [r7, #8]
 8017972:	3301      	adds	r3, #1
 8017974:	223a      	movs	r2, #58	; 0x3a
 8017976:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8017978:	68bb      	ldr	r3, [r7, #8]
 801797a:	3302      	adds	r3, #2
 801797c:	222f      	movs	r2, #47	; 0x2f
 801797e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8017980:	68bb      	ldr	r3, [r7, #8]
 8017982:	3303      	adds	r3, #3
 8017984:	2200      	movs	r2, #0
 8017986:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8017988:	2300      	movs	r3, #0
 801798a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801798c:	7dfb      	ldrb	r3, [r7, #23]
}
 801798e:	4618      	mov	r0, r3
 8017990:	371c      	adds	r7, #28
 8017992:	46bd      	mov	sp, r7
 8017994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017998:	4770      	bx	lr
 801799a:	bf00      	nop
 801799c:	24000b78 	.word	0x24000b78

080179a0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80179a0:	b580      	push	{r7, lr}
 80179a2:	b082      	sub	sp, #8
 80179a4:	af00      	add	r7, sp, #0
 80179a6:	6078      	str	r0, [r7, #4]
 80179a8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80179aa:	2200      	movs	r2, #0
 80179ac:	6839      	ldr	r1, [r7, #0]
 80179ae:	6878      	ldr	r0, [r7, #4]
 80179b0:	f7ff ffaa 	bl	8017908 <FATFS_LinkDriverEx>
 80179b4:	4603      	mov	r3, r0
}
 80179b6:	4618      	mov	r0, r3
 80179b8:	3708      	adds	r7, #8
 80179ba:	46bd      	mov	sp, r7
 80179bc:	bd80      	pop	{r7, pc}
	...

080179c0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80179c0:	b580      	push	{r7, lr}
 80179c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80179c4:	2200      	movs	r2, #0
 80179c6:	4913      	ldr	r1, [pc, #76]	; (8017a14 <MX_USB_DEVICE_Init+0x54>)
 80179c8:	4813      	ldr	r0, [pc, #76]	; (8017a18 <MX_USB_DEVICE_Init+0x58>)
 80179ca:	f7fc fc20 	bl	801420e <USBD_Init>
 80179ce:	4603      	mov	r3, r0
 80179d0:	2b00      	cmp	r3, #0
 80179d2:	d001      	beq.n	80179d8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80179d4:	f7eb f8ee 	bl	8002bb4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 80179d8:	4910      	ldr	r1, [pc, #64]	; (8017a1c <MX_USB_DEVICE_Init+0x5c>)
 80179da:	480f      	ldr	r0, [pc, #60]	; (8017a18 <MX_USB_DEVICE_Init+0x58>)
 80179dc:	f7fc fc4d 	bl	801427a <USBD_RegisterClass>
 80179e0:	4603      	mov	r3, r0
 80179e2:	2b00      	cmp	r3, #0
 80179e4:	d001      	beq.n	80179ea <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80179e6:	f7eb f8e5 	bl	8002bb4 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 80179ea:	490d      	ldr	r1, [pc, #52]	; (8017a20 <MX_USB_DEVICE_Init+0x60>)
 80179ec:	480a      	ldr	r0, [pc, #40]	; (8017a18 <MX_USB_DEVICE_Init+0x58>)
 80179ee:	f7fa fff7 	bl	80129e0 <USBD_MSC_RegisterStorage>
 80179f2:	4603      	mov	r3, r0
 80179f4:	2b00      	cmp	r3, #0
 80179f6:	d001      	beq.n	80179fc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80179f8:	f7eb f8dc 	bl	8002bb4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80179fc:	4806      	ldr	r0, [pc, #24]	; (8017a18 <MX_USB_DEVICE_Init+0x58>)
 80179fe:	f7fc fc5d 	bl	80142bc <USBD_Start>
 8017a02:	4603      	mov	r3, r0
 8017a04:	2b00      	cmp	r3, #0
 8017a06:	d001      	beq.n	8017a0c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8017a08:	f7eb f8d4 	bl	8002bb4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8017a0c:	f7f0 fe2e 	bl	800866c <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8017a10:	bf00      	nop
 8017a12:	bd80      	pop	{r7, pc}
 8017a14:	24000104 	.word	0x24000104
 8017a18:	24001bac 	.word	0x24001bac
 8017a1c:	2400001c 	.word	0x2400001c
 8017a20:	24000154 	.word	0x24000154

08017a24 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017a24:	b480      	push	{r7}
 8017a26:	b083      	sub	sp, #12
 8017a28:	af00      	add	r7, sp, #0
 8017a2a:	4603      	mov	r3, r0
 8017a2c:	6039      	str	r1, [r7, #0]
 8017a2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8017a30:	683b      	ldr	r3, [r7, #0]
 8017a32:	2212      	movs	r2, #18
 8017a34:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8017a36:	4b03      	ldr	r3, [pc, #12]	; (8017a44 <USBD_FS_DeviceDescriptor+0x20>)
}
 8017a38:	4618      	mov	r0, r3
 8017a3a:	370c      	adds	r7, #12
 8017a3c:	46bd      	mov	sp, r7
 8017a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a42:	4770      	bx	lr
 8017a44:	24000120 	.word	0x24000120

08017a48 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017a48:	b480      	push	{r7}
 8017a4a:	b083      	sub	sp, #12
 8017a4c:	af00      	add	r7, sp, #0
 8017a4e:	4603      	mov	r3, r0
 8017a50:	6039      	str	r1, [r7, #0]
 8017a52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8017a54:	683b      	ldr	r3, [r7, #0]
 8017a56:	2204      	movs	r2, #4
 8017a58:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8017a5a:	4b03      	ldr	r3, [pc, #12]	; (8017a68 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8017a5c:	4618      	mov	r0, r3
 8017a5e:	370c      	adds	r7, #12
 8017a60:	46bd      	mov	sp, r7
 8017a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a66:	4770      	bx	lr
 8017a68:	24000134 	.word	0x24000134

08017a6c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017a6c:	b580      	push	{r7, lr}
 8017a6e:	b082      	sub	sp, #8
 8017a70:	af00      	add	r7, sp, #0
 8017a72:	4603      	mov	r3, r0
 8017a74:	6039      	str	r1, [r7, #0]
 8017a76:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017a78:	79fb      	ldrb	r3, [r7, #7]
 8017a7a:	2b00      	cmp	r3, #0
 8017a7c:	d105      	bne.n	8017a8a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8017a7e:	683a      	ldr	r2, [r7, #0]
 8017a80:	4907      	ldr	r1, [pc, #28]	; (8017aa0 <USBD_FS_ProductStrDescriptor+0x34>)
 8017a82:	4808      	ldr	r0, [pc, #32]	; (8017aa4 <USBD_FS_ProductStrDescriptor+0x38>)
 8017a84:	f7fd fbe7 	bl	8015256 <USBD_GetString>
 8017a88:	e004      	b.n	8017a94 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8017a8a:	683a      	ldr	r2, [r7, #0]
 8017a8c:	4904      	ldr	r1, [pc, #16]	; (8017aa0 <USBD_FS_ProductStrDescriptor+0x34>)
 8017a8e:	4805      	ldr	r0, [pc, #20]	; (8017aa4 <USBD_FS_ProductStrDescriptor+0x38>)
 8017a90:	f7fd fbe1 	bl	8015256 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017a94:	4b02      	ldr	r3, [pc, #8]	; (8017aa0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8017a96:	4618      	mov	r0, r3
 8017a98:	3708      	adds	r7, #8
 8017a9a:	46bd      	mov	sp, r7
 8017a9c:	bd80      	pop	{r7, pc}
 8017a9e:	bf00      	nop
 8017aa0:	24001e7c 	.word	0x24001e7c
 8017aa4:	08019e58 	.word	0x08019e58

08017aa8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017aa8:	b580      	push	{r7, lr}
 8017aaa:	b082      	sub	sp, #8
 8017aac:	af00      	add	r7, sp, #0
 8017aae:	4603      	mov	r3, r0
 8017ab0:	6039      	str	r1, [r7, #0]
 8017ab2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8017ab4:	683a      	ldr	r2, [r7, #0]
 8017ab6:	4904      	ldr	r1, [pc, #16]	; (8017ac8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8017ab8:	4804      	ldr	r0, [pc, #16]	; (8017acc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8017aba:	f7fd fbcc 	bl	8015256 <USBD_GetString>
  return USBD_StrDesc;
 8017abe:	4b02      	ldr	r3, [pc, #8]	; (8017ac8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8017ac0:	4618      	mov	r0, r3
 8017ac2:	3708      	adds	r7, #8
 8017ac4:	46bd      	mov	sp, r7
 8017ac6:	bd80      	pop	{r7, pc}
 8017ac8:	24001e7c 	.word	0x24001e7c
 8017acc:	08019e6c 	.word	0x08019e6c

08017ad0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017ad0:	b580      	push	{r7, lr}
 8017ad2:	b082      	sub	sp, #8
 8017ad4:	af00      	add	r7, sp, #0
 8017ad6:	4603      	mov	r3, r0
 8017ad8:	6039      	str	r1, [r7, #0]
 8017ada:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8017adc:	683b      	ldr	r3, [r7, #0]
 8017ade:	221a      	movs	r2, #26
 8017ae0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8017ae2:	f000 f843 	bl	8017b6c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8017ae6:	4b02      	ldr	r3, [pc, #8]	; (8017af0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8017ae8:	4618      	mov	r0, r3
 8017aea:	3708      	adds	r7, #8
 8017aec:	46bd      	mov	sp, r7
 8017aee:	bd80      	pop	{r7, pc}
 8017af0:	24000138 	.word	0x24000138

08017af4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017af4:	b580      	push	{r7, lr}
 8017af6:	b082      	sub	sp, #8
 8017af8:	af00      	add	r7, sp, #0
 8017afa:	4603      	mov	r3, r0
 8017afc:	6039      	str	r1, [r7, #0]
 8017afe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8017b00:	79fb      	ldrb	r3, [r7, #7]
 8017b02:	2b00      	cmp	r3, #0
 8017b04:	d105      	bne.n	8017b12 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8017b06:	683a      	ldr	r2, [r7, #0]
 8017b08:	4907      	ldr	r1, [pc, #28]	; (8017b28 <USBD_FS_ConfigStrDescriptor+0x34>)
 8017b0a:	4808      	ldr	r0, [pc, #32]	; (8017b2c <USBD_FS_ConfigStrDescriptor+0x38>)
 8017b0c:	f7fd fba3 	bl	8015256 <USBD_GetString>
 8017b10:	e004      	b.n	8017b1c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8017b12:	683a      	ldr	r2, [r7, #0]
 8017b14:	4904      	ldr	r1, [pc, #16]	; (8017b28 <USBD_FS_ConfigStrDescriptor+0x34>)
 8017b16:	4805      	ldr	r0, [pc, #20]	; (8017b2c <USBD_FS_ConfigStrDescriptor+0x38>)
 8017b18:	f7fd fb9d 	bl	8015256 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017b1c:	4b02      	ldr	r3, [pc, #8]	; (8017b28 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8017b1e:	4618      	mov	r0, r3
 8017b20:	3708      	adds	r7, #8
 8017b22:	46bd      	mov	sp, r7
 8017b24:	bd80      	pop	{r7, pc}
 8017b26:	bf00      	nop
 8017b28:	24001e7c 	.word	0x24001e7c
 8017b2c:	08019e80 	.word	0x08019e80

08017b30 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017b30:	b580      	push	{r7, lr}
 8017b32:	b082      	sub	sp, #8
 8017b34:	af00      	add	r7, sp, #0
 8017b36:	4603      	mov	r3, r0
 8017b38:	6039      	str	r1, [r7, #0]
 8017b3a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017b3c:	79fb      	ldrb	r3, [r7, #7]
 8017b3e:	2b00      	cmp	r3, #0
 8017b40:	d105      	bne.n	8017b4e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8017b42:	683a      	ldr	r2, [r7, #0]
 8017b44:	4907      	ldr	r1, [pc, #28]	; (8017b64 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8017b46:	4808      	ldr	r0, [pc, #32]	; (8017b68 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8017b48:	f7fd fb85 	bl	8015256 <USBD_GetString>
 8017b4c:	e004      	b.n	8017b58 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8017b4e:	683a      	ldr	r2, [r7, #0]
 8017b50:	4904      	ldr	r1, [pc, #16]	; (8017b64 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8017b52:	4805      	ldr	r0, [pc, #20]	; (8017b68 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8017b54:	f7fd fb7f 	bl	8015256 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017b58:	4b02      	ldr	r3, [pc, #8]	; (8017b64 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8017b5a:	4618      	mov	r0, r3
 8017b5c:	3708      	adds	r7, #8
 8017b5e:	46bd      	mov	sp, r7
 8017b60:	bd80      	pop	{r7, pc}
 8017b62:	bf00      	nop
 8017b64:	24001e7c 	.word	0x24001e7c
 8017b68:	08019e8c 	.word	0x08019e8c

08017b6c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8017b6c:	b580      	push	{r7, lr}
 8017b6e:	b084      	sub	sp, #16
 8017b70:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8017b72:	4b0f      	ldr	r3, [pc, #60]	; (8017bb0 <Get_SerialNum+0x44>)
 8017b74:	681b      	ldr	r3, [r3, #0]
 8017b76:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8017b78:	4b0e      	ldr	r3, [pc, #56]	; (8017bb4 <Get_SerialNum+0x48>)
 8017b7a:	681b      	ldr	r3, [r3, #0]
 8017b7c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8017b7e:	4b0e      	ldr	r3, [pc, #56]	; (8017bb8 <Get_SerialNum+0x4c>)
 8017b80:	681b      	ldr	r3, [r3, #0]
 8017b82:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8017b84:	68fa      	ldr	r2, [r7, #12]
 8017b86:	687b      	ldr	r3, [r7, #4]
 8017b88:	4413      	add	r3, r2
 8017b8a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8017b8c:	68fb      	ldr	r3, [r7, #12]
 8017b8e:	2b00      	cmp	r3, #0
 8017b90:	d009      	beq.n	8017ba6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8017b92:	2208      	movs	r2, #8
 8017b94:	4909      	ldr	r1, [pc, #36]	; (8017bbc <Get_SerialNum+0x50>)
 8017b96:	68f8      	ldr	r0, [r7, #12]
 8017b98:	f000 f814 	bl	8017bc4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8017b9c:	2204      	movs	r2, #4
 8017b9e:	4908      	ldr	r1, [pc, #32]	; (8017bc0 <Get_SerialNum+0x54>)
 8017ba0:	68b8      	ldr	r0, [r7, #8]
 8017ba2:	f000 f80f 	bl	8017bc4 <IntToUnicode>
  }
}
 8017ba6:	bf00      	nop
 8017ba8:	3710      	adds	r7, #16
 8017baa:	46bd      	mov	sp, r7
 8017bac:	bd80      	pop	{r7, pc}
 8017bae:	bf00      	nop
 8017bb0:	1ff1e800 	.word	0x1ff1e800
 8017bb4:	1ff1e804 	.word	0x1ff1e804
 8017bb8:	1ff1e808 	.word	0x1ff1e808
 8017bbc:	2400013a 	.word	0x2400013a
 8017bc0:	2400014a 	.word	0x2400014a

08017bc4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8017bc4:	b480      	push	{r7}
 8017bc6:	b087      	sub	sp, #28
 8017bc8:	af00      	add	r7, sp, #0
 8017bca:	60f8      	str	r0, [r7, #12]
 8017bcc:	60b9      	str	r1, [r7, #8]
 8017bce:	4613      	mov	r3, r2
 8017bd0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8017bd2:	2300      	movs	r3, #0
 8017bd4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8017bd6:	2300      	movs	r3, #0
 8017bd8:	75fb      	strb	r3, [r7, #23]
 8017bda:	e027      	b.n	8017c2c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8017bdc:	68fb      	ldr	r3, [r7, #12]
 8017bde:	0f1b      	lsrs	r3, r3, #28
 8017be0:	2b09      	cmp	r3, #9
 8017be2:	d80b      	bhi.n	8017bfc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8017be4:	68fb      	ldr	r3, [r7, #12]
 8017be6:	0f1b      	lsrs	r3, r3, #28
 8017be8:	b2da      	uxtb	r2, r3
 8017bea:	7dfb      	ldrb	r3, [r7, #23]
 8017bec:	005b      	lsls	r3, r3, #1
 8017bee:	4619      	mov	r1, r3
 8017bf0:	68bb      	ldr	r3, [r7, #8]
 8017bf2:	440b      	add	r3, r1
 8017bf4:	3230      	adds	r2, #48	; 0x30
 8017bf6:	b2d2      	uxtb	r2, r2
 8017bf8:	701a      	strb	r2, [r3, #0]
 8017bfa:	e00a      	b.n	8017c12 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8017bfc:	68fb      	ldr	r3, [r7, #12]
 8017bfe:	0f1b      	lsrs	r3, r3, #28
 8017c00:	b2da      	uxtb	r2, r3
 8017c02:	7dfb      	ldrb	r3, [r7, #23]
 8017c04:	005b      	lsls	r3, r3, #1
 8017c06:	4619      	mov	r1, r3
 8017c08:	68bb      	ldr	r3, [r7, #8]
 8017c0a:	440b      	add	r3, r1
 8017c0c:	3237      	adds	r2, #55	; 0x37
 8017c0e:	b2d2      	uxtb	r2, r2
 8017c10:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8017c12:	68fb      	ldr	r3, [r7, #12]
 8017c14:	011b      	lsls	r3, r3, #4
 8017c16:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8017c18:	7dfb      	ldrb	r3, [r7, #23]
 8017c1a:	005b      	lsls	r3, r3, #1
 8017c1c:	3301      	adds	r3, #1
 8017c1e:	68ba      	ldr	r2, [r7, #8]
 8017c20:	4413      	add	r3, r2
 8017c22:	2200      	movs	r2, #0
 8017c24:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8017c26:	7dfb      	ldrb	r3, [r7, #23]
 8017c28:	3301      	adds	r3, #1
 8017c2a:	75fb      	strb	r3, [r7, #23]
 8017c2c:	7dfa      	ldrb	r2, [r7, #23]
 8017c2e:	79fb      	ldrb	r3, [r7, #7]
 8017c30:	429a      	cmp	r2, r3
 8017c32:	d3d3      	bcc.n	8017bdc <IntToUnicode+0x18>
  }
}
 8017c34:	bf00      	nop
 8017c36:	371c      	adds	r7, #28
 8017c38:	46bd      	mov	sp, r7
 8017c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c3e:	4770      	bx	lr

08017c40 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 8017c40:	b480      	push	{r7}
 8017c42:	b083      	sub	sp, #12
 8017c44:	af00      	add	r7, sp, #0
 8017c46:	4603      	mov	r3, r0
 8017c48:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 8017c4a:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8017c4c:	4618      	mov	r0, r3
 8017c4e:	370c      	adds	r7, #12
 8017c50:	46bd      	mov	sp, r7
 8017c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c56:	4770      	bx	lr

08017c58 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8017c58:	b580      	push	{r7, lr}
 8017c5a:	b08e      	sub	sp, #56	; 0x38
 8017c5c:	af00      	add	r7, sp, #0
 8017c5e:	4603      	mov	r3, r0
 8017c60:	60b9      	str	r1, [r7, #8]
 8017c62:	607a      	str	r2, [r7, #4]
 8017c64:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
	HAL_SD_CardInfoTypeDef info;
	  int8_t ret = -1;
 8017c66:	23ff      	movs	r3, #255	; 0xff
 8017c68:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	  HAL_SD_GetCardInfo(&hsd1, &info);
 8017c6c:	f107 0310 	add.w	r3, r7, #16
 8017c70:	4619      	mov	r1, r3
 8017c72:	480a      	ldr	r0, [pc, #40]	; (8017c9c <STORAGE_GetCapacity_FS+0x44>)
 8017c74:	f7f5 f89a 	bl	800cdac <HAL_SD_GetCardInfo>

	  *block_num =  info.LogBlockNbr  - 1;
 8017c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c7a:	1e5a      	subs	r2, r3, #1
 8017c7c:	68bb      	ldr	r3, [r7, #8]
 8017c7e:	601a      	str	r2, [r3, #0]
	  *block_size = info.LogBlockSize;
 8017c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c82:	b29a      	uxth	r2, r3
 8017c84:	687b      	ldr	r3, [r7, #4]
 8017c86:	801a      	strh	r2, [r3, #0]
	  ret = 0;
 8017c88:	2300      	movs	r3, #0
 8017c8a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  return ret;
 8017c8e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
  /* USER CODE END 3 */
}
 8017c92:	4618      	mov	r0, r3
 8017c94:	3738      	adds	r7, #56	; 0x38
 8017c96:	46bd      	mov	sp, r7
 8017c98:	bd80      	pop	{r7, pc}
 8017c9a:	bf00      	nop
 8017c9c:	24001448 	.word	0x24001448

08017ca0 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8017ca0:	b480      	push	{r7}
 8017ca2:	b083      	sub	sp, #12
 8017ca4:	af00      	add	r7, sp, #0
 8017ca6:	4603      	mov	r3, r0
 8017ca8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8017caa:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8017cac:	4618      	mov	r0, r3
 8017cae:	370c      	adds	r7, #12
 8017cb0:	46bd      	mov	sp, r7
 8017cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cb6:	4770      	bx	lr

08017cb8 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8017cb8:	b480      	push	{r7}
 8017cba:	b083      	sub	sp, #12
 8017cbc:	af00      	add	r7, sp, #0
 8017cbe:	4603      	mov	r3, r0
 8017cc0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8017cc2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8017cc4:	4618      	mov	r0, r3
 8017cc6:	370c      	adds	r7, #12
 8017cc8:	46bd      	mov	sp, r7
 8017cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cce:	4770      	bx	lr

08017cd0 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8017cd0:	b580      	push	{r7, lr}
 8017cd2:	b088      	sub	sp, #32
 8017cd4:	af02      	add	r7, sp, #8
 8017cd6:	60b9      	str	r1, [r7, #8]
 8017cd8:	607a      	str	r2, [r7, #4]
 8017cda:	461a      	mov	r2, r3
 8017cdc:	4603      	mov	r3, r0
 8017cde:	73fb      	strb	r3, [r7, #15]
 8017ce0:	4613      	mov	r3, r2
 8017ce2:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	int8_t ret = -1;
 8017ce4:	23ff      	movs	r3, #255	; 0xff
 8017ce6:	75fb      	strb	r3, [r7, #23]

	HAL_SD_ReadBlocks(&hsd1, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8017ce8:	89ba      	ldrh	r2, [r7, #12]
 8017cea:	f04f 33ff 	mov.w	r3, #4294967295
 8017cee:	9300      	str	r3, [sp, #0]
 8017cf0:	4613      	mov	r3, r2
 8017cf2:	687a      	ldr	r2, [r7, #4]
 8017cf4:	68b9      	ldr	r1, [r7, #8]
 8017cf6:	4809      	ldr	r0, [pc, #36]	; (8017d1c <STORAGE_Read_FS+0x4c>)
 8017cf8:	f7f3 ffca 	bl	800bc90 <HAL_SD_ReadBlocks>

	/* Wait until SD card is ready to use for new operation */
	while (HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER){}
 8017cfc:	bf00      	nop
 8017cfe:	4807      	ldr	r0, [pc, #28]	; (8017d1c <STORAGE_Read_FS+0x4c>)
 8017d00:	f7f5 f92a 	bl	800cf58 <HAL_SD_GetCardState>
 8017d04:	4603      	mov	r3, r0
 8017d06:	2b04      	cmp	r3, #4
 8017d08:	d1f9      	bne.n	8017cfe <STORAGE_Read_FS+0x2e>
	ret = 0;
 8017d0a:	2300      	movs	r3, #0
 8017d0c:	75fb      	strb	r3, [r7, #23]
	return ret;
 8017d0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 6 */
}
 8017d12:	4618      	mov	r0, r3
 8017d14:	3718      	adds	r7, #24
 8017d16:	46bd      	mov	sp, r7
 8017d18:	bd80      	pop	{r7, pc}
 8017d1a:	bf00      	nop
 8017d1c:	24001448 	.word	0x24001448

08017d20 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8017d20:	b580      	push	{r7, lr}
 8017d22:	b088      	sub	sp, #32
 8017d24:	af02      	add	r7, sp, #8
 8017d26:	60b9      	str	r1, [r7, #8]
 8017d28:	607a      	str	r2, [r7, #4]
 8017d2a:	461a      	mov	r2, r3
 8017d2c:	4603      	mov	r3, r0
 8017d2e:	73fb      	strb	r3, [r7, #15]
 8017d30:	4613      	mov	r3, r2
 8017d32:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	int8_t ret = -1;
 8017d34:	23ff      	movs	r3, #255	; 0xff
 8017d36:	75fb      	strb	r3, [r7, #23]

	HAL_SD_WriteBlocks(&hsd1, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8017d38:	89ba      	ldrh	r2, [r7, #12]
 8017d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8017d3e:	9300      	str	r3, [sp, #0]
 8017d40:	4613      	mov	r3, r2
 8017d42:	687a      	ldr	r2, [r7, #4]
 8017d44:	68b9      	ldr	r1, [r7, #8]
 8017d46:	4809      	ldr	r0, [pc, #36]	; (8017d6c <STORAGE_Write_FS+0x4c>)
 8017d48:	f7f4 f92c 	bl	800bfa4 <HAL_SD_WriteBlocks>


	/* Wait until SD card is ready to use for new operation */
	while (HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER){}
 8017d4c:	bf00      	nop
 8017d4e:	4807      	ldr	r0, [pc, #28]	; (8017d6c <STORAGE_Write_FS+0x4c>)
 8017d50:	f7f5 f902 	bl	800cf58 <HAL_SD_GetCardState>
 8017d54:	4603      	mov	r3, r0
 8017d56:	2b04      	cmp	r3, #4
 8017d58:	d1f9      	bne.n	8017d4e <STORAGE_Write_FS+0x2e>
	ret = 0;
 8017d5a:	2300      	movs	r3, #0
 8017d5c:	75fb      	strb	r3, [r7, #23]
	return ret;
 8017d5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 7 */
}
 8017d62:	4618      	mov	r0, r3
 8017d64:	3718      	adds	r7, #24
 8017d66:	46bd      	mov	sp, r7
 8017d68:	bd80      	pop	{r7, pc}
 8017d6a:	bf00      	nop
 8017d6c:	24001448 	.word	0x24001448

08017d70 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8017d70:	b480      	push	{r7}
 8017d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8017d74:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8017d76:	4618      	mov	r0, r3
 8017d78:	46bd      	mov	sp, r7
 8017d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d7e:	4770      	bx	lr

08017d80 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8017d80:	b580      	push	{r7, lr}
 8017d82:	b08a      	sub	sp, #40	; 0x28
 8017d84:	af00      	add	r7, sp, #0
 8017d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017d88:	f107 0314 	add.w	r3, r7, #20
 8017d8c:	2200      	movs	r2, #0
 8017d8e:	601a      	str	r2, [r3, #0]
 8017d90:	605a      	str	r2, [r3, #4]
 8017d92:	609a      	str	r2, [r3, #8]
 8017d94:	60da      	str	r2, [r3, #12]
 8017d96:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8017d98:	687b      	ldr	r3, [r7, #4]
 8017d9a:	681b      	ldr	r3, [r3, #0]
 8017d9c:	4a1e      	ldr	r2, [pc, #120]	; (8017e18 <HAL_PCD_MspInit+0x98>)
 8017d9e:	4293      	cmp	r3, r2
 8017da0:	d136      	bne.n	8017e10 <HAL_PCD_MspInit+0x90>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017da2:	4b1e      	ldr	r3, [pc, #120]	; (8017e1c <HAL_PCD_MspInit+0x9c>)
 8017da4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8017da8:	4a1c      	ldr	r2, [pc, #112]	; (8017e1c <HAL_PCD_MspInit+0x9c>)
 8017daa:	f043 0301 	orr.w	r3, r3, #1
 8017dae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8017db2:	4b1a      	ldr	r3, [pc, #104]	; (8017e1c <HAL_PCD_MspInit+0x9c>)
 8017db4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8017db8:	f003 0301 	and.w	r3, r3, #1
 8017dbc:	613b      	str	r3, [r7, #16]
 8017dbe:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8017dc0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8017dc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017dc6:	2302      	movs	r3, #2
 8017dc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017dca:	2300      	movs	r3, #0
 8017dcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017dce:	2300      	movs	r3, #0
 8017dd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8017dd2:	230a      	movs	r3, #10
 8017dd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8017dd6:	f107 0314 	add.w	r3, r7, #20
 8017dda:	4619      	mov	r1, r3
 8017ddc:	4810      	ldr	r0, [pc, #64]	; (8017e20 <HAL_PCD_MspInit+0xa0>)
 8017dde:	f7ee ff2f 	bl	8006c40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8017de2:	4b0e      	ldr	r3, [pc, #56]	; (8017e1c <HAL_PCD_MspInit+0x9c>)
 8017de4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8017de8:	4a0c      	ldr	r2, [pc, #48]	; (8017e1c <HAL_PCD_MspInit+0x9c>)
 8017dea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8017dee:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8017df2:	4b0a      	ldr	r3, [pc, #40]	; (8017e1c <HAL_PCD_MspInit+0x9c>)
 8017df4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8017df8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8017dfc:	60fb      	str	r3, [r7, #12]
 8017dfe:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8017e00:	2200      	movs	r2, #0
 8017e02:	2100      	movs	r1, #0
 8017e04:	2065      	movs	r0, #101	; 0x65
 8017e06:	f7eb fcd2 	bl	80037ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8017e0a:	2065      	movs	r0, #101	; 0x65
 8017e0c:	f7eb fce9 	bl	80037e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8017e10:	bf00      	nop
 8017e12:	3728      	adds	r7, #40	; 0x28
 8017e14:	46bd      	mov	sp, r7
 8017e16:	bd80      	pop	{r7, pc}
 8017e18:	40080000 	.word	0x40080000
 8017e1c:	58024400 	.word	0x58024400
 8017e20:	58020000 	.word	0x58020000

08017e24 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017e24:	b580      	push	{r7, lr}
 8017e26:	b082      	sub	sp, #8
 8017e28:	af00      	add	r7, sp, #0
 8017e2a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8017e2c:	687b      	ldr	r3, [r7, #4]
 8017e2e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8017e32:	687b      	ldr	r3, [r7, #4]
 8017e34:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8017e38:	4619      	mov	r1, r3
 8017e3a:	4610      	mov	r0, r2
 8017e3c:	f7fc fa89 	bl	8014352 <USBD_LL_SetupStage>
}
 8017e40:	bf00      	nop
 8017e42:	3708      	adds	r7, #8
 8017e44:	46bd      	mov	sp, r7
 8017e46:	bd80      	pop	{r7, pc}

08017e48 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017e48:	b580      	push	{r7, lr}
 8017e4a:	b082      	sub	sp, #8
 8017e4c:	af00      	add	r7, sp, #0
 8017e4e:	6078      	str	r0, [r7, #4]
 8017e50:	460b      	mov	r3, r1
 8017e52:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8017e54:	687b      	ldr	r3, [r7, #4]
 8017e56:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8017e5a:	78fa      	ldrb	r2, [r7, #3]
 8017e5c:	6879      	ldr	r1, [r7, #4]
 8017e5e:	4613      	mov	r3, r2
 8017e60:	00db      	lsls	r3, r3, #3
 8017e62:	1a9b      	subs	r3, r3, r2
 8017e64:	009b      	lsls	r3, r3, #2
 8017e66:	440b      	add	r3, r1
 8017e68:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8017e6c:	681a      	ldr	r2, [r3, #0]
 8017e6e:	78fb      	ldrb	r3, [r7, #3]
 8017e70:	4619      	mov	r1, r3
 8017e72:	f7fc fac1 	bl	80143f8 <USBD_LL_DataOutStage>
}
 8017e76:	bf00      	nop
 8017e78:	3708      	adds	r7, #8
 8017e7a:	46bd      	mov	sp, r7
 8017e7c:	bd80      	pop	{r7, pc}

08017e7e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017e7e:	b580      	push	{r7, lr}
 8017e80:	b082      	sub	sp, #8
 8017e82:	af00      	add	r7, sp, #0
 8017e84:	6078      	str	r0, [r7, #4]
 8017e86:	460b      	mov	r3, r1
 8017e88:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8017e8a:	687b      	ldr	r3, [r7, #4]
 8017e8c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8017e90:	78fa      	ldrb	r2, [r7, #3]
 8017e92:	6879      	ldr	r1, [r7, #4]
 8017e94:	4613      	mov	r3, r2
 8017e96:	00db      	lsls	r3, r3, #3
 8017e98:	1a9b      	subs	r3, r3, r2
 8017e9a:	009b      	lsls	r3, r3, #2
 8017e9c:	440b      	add	r3, r1
 8017e9e:	3348      	adds	r3, #72	; 0x48
 8017ea0:	681a      	ldr	r2, [r3, #0]
 8017ea2:	78fb      	ldrb	r3, [r7, #3]
 8017ea4:	4619      	mov	r1, r3
 8017ea6:	f7fc fb0a 	bl	80144be <USBD_LL_DataInStage>
}
 8017eaa:	bf00      	nop
 8017eac:	3708      	adds	r7, #8
 8017eae:	46bd      	mov	sp, r7
 8017eb0:	bd80      	pop	{r7, pc}

08017eb2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017eb2:	b580      	push	{r7, lr}
 8017eb4:	b082      	sub	sp, #8
 8017eb6:	af00      	add	r7, sp, #0
 8017eb8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8017eba:	687b      	ldr	r3, [r7, #4]
 8017ebc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8017ec0:	4618      	mov	r0, r3
 8017ec2:	f7fc fc0e 	bl	80146e2 <USBD_LL_SOF>
}
 8017ec6:	bf00      	nop
 8017ec8:	3708      	adds	r7, #8
 8017eca:	46bd      	mov	sp, r7
 8017ecc:	bd80      	pop	{r7, pc}

08017ece <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017ece:	b580      	push	{r7, lr}
 8017ed0:	b084      	sub	sp, #16
 8017ed2:	af00      	add	r7, sp, #0
 8017ed4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8017ed6:	2301      	movs	r3, #1
 8017ed8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8017eda:	687b      	ldr	r3, [r7, #4]
 8017edc:	68db      	ldr	r3, [r3, #12]
 8017ede:	2b00      	cmp	r3, #0
 8017ee0:	d102      	bne.n	8017ee8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8017ee2:	2300      	movs	r3, #0
 8017ee4:	73fb      	strb	r3, [r7, #15]
 8017ee6:	e008      	b.n	8017efa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8017ee8:	687b      	ldr	r3, [r7, #4]
 8017eea:	68db      	ldr	r3, [r3, #12]
 8017eec:	2b02      	cmp	r3, #2
 8017eee:	d102      	bne.n	8017ef6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8017ef0:	2301      	movs	r3, #1
 8017ef2:	73fb      	strb	r3, [r7, #15]
 8017ef4:	e001      	b.n	8017efa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8017ef6:	f7ea fe5d 	bl	8002bb4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8017efa:	687b      	ldr	r3, [r7, #4]
 8017efc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8017f00:	7bfa      	ldrb	r2, [r7, #15]
 8017f02:	4611      	mov	r1, r2
 8017f04:	4618      	mov	r0, r3
 8017f06:	f7fc fbb1 	bl	801466c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8017f0a:	687b      	ldr	r3, [r7, #4]
 8017f0c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8017f10:	4618      	mov	r0, r3
 8017f12:	f7fc fb6a 	bl	80145ea <USBD_LL_Reset>
}
 8017f16:	bf00      	nop
 8017f18:	3710      	adds	r7, #16
 8017f1a:	46bd      	mov	sp, r7
 8017f1c:	bd80      	pop	{r7, pc}
	...

08017f20 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017f20:	b580      	push	{r7, lr}
 8017f22:	b082      	sub	sp, #8
 8017f24:	af00      	add	r7, sp, #0
 8017f26:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8017f28:	687b      	ldr	r3, [r7, #4]
 8017f2a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8017f2e:	4618      	mov	r0, r3
 8017f30:	f7fc fbac 	bl	801468c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8017f34:	687b      	ldr	r3, [r7, #4]
 8017f36:	681b      	ldr	r3, [r3, #0]
 8017f38:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8017f3c:	681b      	ldr	r3, [r3, #0]
 8017f3e:	687a      	ldr	r2, [r7, #4]
 8017f40:	6812      	ldr	r2, [r2, #0]
 8017f42:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8017f46:	f043 0301 	orr.w	r3, r3, #1
 8017f4a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8017f4c:	687b      	ldr	r3, [r7, #4]
 8017f4e:	6a1b      	ldr	r3, [r3, #32]
 8017f50:	2b00      	cmp	r3, #0
 8017f52:	d005      	beq.n	8017f60 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017f54:	4b04      	ldr	r3, [pc, #16]	; (8017f68 <HAL_PCD_SuspendCallback+0x48>)
 8017f56:	691b      	ldr	r3, [r3, #16]
 8017f58:	4a03      	ldr	r2, [pc, #12]	; (8017f68 <HAL_PCD_SuspendCallback+0x48>)
 8017f5a:	f043 0306 	orr.w	r3, r3, #6
 8017f5e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8017f60:	bf00      	nop
 8017f62:	3708      	adds	r7, #8
 8017f64:	46bd      	mov	sp, r7
 8017f66:	bd80      	pop	{r7, pc}
 8017f68:	e000ed00 	.word	0xe000ed00

08017f6c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017f6c:	b580      	push	{r7, lr}
 8017f6e:	b082      	sub	sp, #8
 8017f70:	af00      	add	r7, sp, #0
 8017f72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8017f74:	687b      	ldr	r3, [r7, #4]
 8017f76:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8017f7a:	4618      	mov	r0, r3
 8017f7c:	f7fc fb9b 	bl	80146b6 <USBD_LL_Resume>
}
 8017f80:	bf00      	nop
 8017f82:	3708      	adds	r7, #8
 8017f84:	46bd      	mov	sp, r7
 8017f86:	bd80      	pop	{r7, pc}

08017f88 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017f88:	b580      	push	{r7, lr}
 8017f8a:	b082      	sub	sp, #8
 8017f8c:	af00      	add	r7, sp, #0
 8017f8e:	6078      	str	r0, [r7, #4]
 8017f90:	460b      	mov	r3, r1
 8017f92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017f94:	687b      	ldr	r3, [r7, #4]
 8017f96:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8017f9a:	78fa      	ldrb	r2, [r7, #3]
 8017f9c:	4611      	mov	r1, r2
 8017f9e:	4618      	mov	r0, r3
 8017fa0:	f7fc fbc6 	bl	8014730 <USBD_LL_IsoOUTIncomplete>
}
 8017fa4:	bf00      	nop
 8017fa6:	3708      	adds	r7, #8
 8017fa8:	46bd      	mov	sp, r7
 8017faa:	bd80      	pop	{r7, pc}

08017fac <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017fac:	b580      	push	{r7, lr}
 8017fae:	b082      	sub	sp, #8
 8017fb0:	af00      	add	r7, sp, #0
 8017fb2:	6078      	str	r0, [r7, #4]
 8017fb4:	460b      	mov	r3, r1
 8017fb6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017fb8:	687b      	ldr	r3, [r7, #4]
 8017fba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8017fbe:	78fa      	ldrb	r2, [r7, #3]
 8017fc0:	4611      	mov	r1, r2
 8017fc2:	4618      	mov	r0, r3
 8017fc4:	f7fc fba7 	bl	8014716 <USBD_LL_IsoINIncomplete>
}
 8017fc8:	bf00      	nop
 8017fca:	3708      	adds	r7, #8
 8017fcc:	46bd      	mov	sp, r7
 8017fce:	bd80      	pop	{r7, pc}

08017fd0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017fd0:	b580      	push	{r7, lr}
 8017fd2:	b082      	sub	sp, #8
 8017fd4:	af00      	add	r7, sp, #0
 8017fd6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8017fd8:	687b      	ldr	r3, [r7, #4]
 8017fda:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8017fde:	4618      	mov	r0, r3
 8017fe0:	f7fc fbb3 	bl	801474a <USBD_LL_DevConnected>
}
 8017fe4:	bf00      	nop
 8017fe6:	3708      	adds	r7, #8
 8017fe8:	46bd      	mov	sp, r7
 8017fea:	bd80      	pop	{r7, pc}

08017fec <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017fec:	b580      	push	{r7, lr}
 8017fee:	b082      	sub	sp, #8
 8017ff0:	af00      	add	r7, sp, #0
 8017ff2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8017ff4:	687b      	ldr	r3, [r7, #4]
 8017ff6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8017ffa:	4618      	mov	r0, r3
 8017ffc:	f7fc fbb0 	bl	8014760 <USBD_LL_DevDisconnected>
}
 8018000:	bf00      	nop
 8018002:	3708      	adds	r7, #8
 8018004:	46bd      	mov	sp, r7
 8018006:	bd80      	pop	{r7, pc}

08018008 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8018008:	b580      	push	{r7, lr}
 801800a:	b082      	sub	sp, #8
 801800c:	af00      	add	r7, sp, #0
 801800e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8018010:	687b      	ldr	r3, [r7, #4]
 8018012:	781b      	ldrb	r3, [r3, #0]
 8018014:	2b00      	cmp	r3, #0
 8018016:	d13e      	bne.n	8018096 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8018018:	4a21      	ldr	r2, [pc, #132]	; (80180a0 <USBD_LL_Init+0x98>)
 801801a:	687b      	ldr	r3, [r7, #4]
 801801c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8018020:	687b      	ldr	r3, [r7, #4]
 8018022:	4a1f      	ldr	r2, [pc, #124]	; (80180a0 <USBD_LL_Init+0x98>)
 8018024:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8018028:	4b1d      	ldr	r3, [pc, #116]	; (80180a0 <USBD_LL_Init+0x98>)
 801802a:	4a1e      	ldr	r2, [pc, #120]	; (80180a4 <USBD_LL_Init+0x9c>)
 801802c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 801802e:	4b1c      	ldr	r3, [pc, #112]	; (80180a0 <USBD_LL_Init+0x98>)
 8018030:	2209      	movs	r2, #9
 8018032:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8018034:	4b1a      	ldr	r3, [pc, #104]	; (80180a0 <USBD_LL_Init+0x98>)
 8018036:	2202      	movs	r2, #2
 8018038:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801803a:	4b19      	ldr	r3, [pc, #100]	; (80180a0 <USBD_LL_Init+0x98>)
 801803c:	2200      	movs	r2, #0
 801803e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8018040:	4b17      	ldr	r3, [pc, #92]	; (80180a0 <USBD_LL_Init+0x98>)
 8018042:	2202      	movs	r2, #2
 8018044:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8018046:	4b16      	ldr	r3, [pc, #88]	; (80180a0 <USBD_LL_Init+0x98>)
 8018048:	2200      	movs	r2, #0
 801804a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801804c:	4b14      	ldr	r3, [pc, #80]	; (80180a0 <USBD_LL_Init+0x98>)
 801804e:	2200      	movs	r2, #0
 8018050:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8018052:	4b13      	ldr	r3, [pc, #76]	; (80180a0 <USBD_LL_Init+0x98>)
 8018054:	2200      	movs	r2, #0
 8018056:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8018058:	4b11      	ldr	r3, [pc, #68]	; (80180a0 <USBD_LL_Init+0x98>)
 801805a:	2200      	movs	r2, #0
 801805c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801805e:	4b10      	ldr	r3, [pc, #64]	; (80180a0 <USBD_LL_Init+0x98>)
 8018060:	2200      	movs	r2, #0
 8018062:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8018064:	4b0e      	ldr	r3, [pc, #56]	; (80180a0 <USBD_LL_Init+0x98>)
 8018066:	2200      	movs	r2, #0
 8018068:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801806a:	480d      	ldr	r0, [pc, #52]	; (80180a0 <USBD_LL_Init+0x98>)
 801806c:	f7ef f822 	bl	80070b4 <HAL_PCD_Init>
 8018070:	4603      	mov	r3, r0
 8018072:	2b00      	cmp	r3, #0
 8018074:	d001      	beq.n	801807a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8018076:	f7ea fd9d 	bl	8002bb4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801807a:	2180      	movs	r1, #128	; 0x80
 801807c:	4808      	ldr	r0, [pc, #32]	; (80180a0 <USBD_LL_Init+0x98>)
 801807e:	f7f0 f9e0 	bl	8008442 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8018082:	2240      	movs	r2, #64	; 0x40
 8018084:	2100      	movs	r1, #0
 8018086:	4806      	ldr	r0, [pc, #24]	; (80180a0 <USBD_LL_Init+0x98>)
 8018088:	f7f0 f994 	bl	80083b4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801808c:	2280      	movs	r2, #128	; 0x80
 801808e:	2101      	movs	r1, #1
 8018090:	4803      	ldr	r0, [pc, #12]	; (80180a0 <USBD_LL_Init+0x98>)
 8018092:	f7f0 f98f 	bl	80083b4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8018096:	2300      	movs	r3, #0
}
 8018098:	4618      	mov	r0, r3
 801809a:	3708      	adds	r7, #8
 801809c:	46bd      	mov	sp, r7
 801809e:	bd80      	pop	{r7, pc}
 80180a0:	2400207c 	.word	0x2400207c
 80180a4:	40080000 	.word	0x40080000

080180a8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80180a8:	b580      	push	{r7, lr}
 80180aa:	b084      	sub	sp, #16
 80180ac:	af00      	add	r7, sp, #0
 80180ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80180b0:	2300      	movs	r3, #0
 80180b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80180b4:	2300      	movs	r3, #0
 80180b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80180b8:	687b      	ldr	r3, [r7, #4]
 80180ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80180be:	4618      	mov	r0, r3
 80180c0:	f7ef f91c 	bl	80072fc <HAL_PCD_Start>
 80180c4:	4603      	mov	r3, r0
 80180c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80180c8:	7bfb      	ldrb	r3, [r7, #15]
 80180ca:	4618      	mov	r0, r3
 80180cc:	f000 f94a 	bl	8018364 <USBD_Get_USB_Status>
 80180d0:	4603      	mov	r3, r0
 80180d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80180d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80180d6:	4618      	mov	r0, r3
 80180d8:	3710      	adds	r7, #16
 80180da:	46bd      	mov	sp, r7
 80180dc:	bd80      	pop	{r7, pc}

080180de <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80180de:	b580      	push	{r7, lr}
 80180e0:	b084      	sub	sp, #16
 80180e2:	af00      	add	r7, sp, #0
 80180e4:	6078      	str	r0, [r7, #4]
 80180e6:	4608      	mov	r0, r1
 80180e8:	4611      	mov	r1, r2
 80180ea:	461a      	mov	r2, r3
 80180ec:	4603      	mov	r3, r0
 80180ee:	70fb      	strb	r3, [r7, #3]
 80180f0:	460b      	mov	r3, r1
 80180f2:	70bb      	strb	r3, [r7, #2]
 80180f4:	4613      	mov	r3, r2
 80180f6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80180f8:	2300      	movs	r3, #0
 80180fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80180fc:	2300      	movs	r3, #0
 80180fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8018100:	687b      	ldr	r3, [r7, #4]
 8018102:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8018106:	78bb      	ldrb	r3, [r7, #2]
 8018108:	883a      	ldrh	r2, [r7, #0]
 801810a:	78f9      	ldrb	r1, [r7, #3]
 801810c:	f7ef fd2d 	bl	8007b6a <HAL_PCD_EP_Open>
 8018110:	4603      	mov	r3, r0
 8018112:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018114:	7bfb      	ldrb	r3, [r7, #15]
 8018116:	4618      	mov	r0, r3
 8018118:	f000 f924 	bl	8018364 <USBD_Get_USB_Status>
 801811c:	4603      	mov	r3, r0
 801811e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018120:	7bbb      	ldrb	r3, [r7, #14]
}
 8018122:	4618      	mov	r0, r3
 8018124:	3710      	adds	r7, #16
 8018126:	46bd      	mov	sp, r7
 8018128:	bd80      	pop	{r7, pc}

0801812a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801812a:	b580      	push	{r7, lr}
 801812c:	b084      	sub	sp, #16
 801812e:	af00      	add	r7, sp, #0
 8018130:	6078      	str	r0, [r7, #4]
 8018132:	460b      	mov	r3, r1
 8018134:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018136:	2300      	movs	r3, #0
 8018138:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801813a:	2300      	movs	r3, #0
 801813c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801813e:	687b      	ldr	r3, [r7, #4]
 8018140:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018144:	78fa      	ldrb	r2, [r7, #3]
 8018146:	4611      	mov	r1, r2
 8018148:	4618      	mov	r0, r3
 801814a:	f7ef fd76 	bl	8007c3a <HAL_PCD_EP_Close>
 801814e:	4603      	mov	r3, r0
 8018150:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018152:	7bfb      	ldrb	r3, [r7, #15]
 8018154:	4618      	mov	r0, r3
 8018156:	f000 f905 	bl	8018364 <USBD_Get_USB_Status>
 801815a:	4603      	mov	r3, r0
 801815c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801815e:	7bbb      	ldrb	r3, [r7, #14]
}
 8018160:	4618      	mov	r0, r3
 8018162:	3710      	adds	r7, #16
 8018164:	46bd      	mov	sp, r7
 8018166:	bd80      	pop	{r7, pc}

08018168 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018168:	b580      	push	{r7, lr}
 801816a:	b084      	sub	sp, #16
 801816c:	af00      	add	r7, sp, #0
 801816e:	6078      	str	r0, [r7, #4]
 8018170:	460b      	mov	r3, r1
 8018172:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018174:	2300      	movs	r3, #0
 8018176:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018178:	2300      	movs	r3, #0
 801817a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 801817c:	687b      	ldr	r3, [r7, #4]
 801817e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018182:	78fa      	ldrb	r2, [r7, #3]
 8018184:	4611      	mov	r1, r2
 8018186:	4618      	mov	r0, r3
 8018188:	f7ef ff08 	bl	8007f9c <HAL_PCD_EP_Flush>
 801818c:	4603      	mov	r3, r0
 801818e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018190:	7bfb      	ldrb	r3, [r7, #15]
 8018192:	4618      	mov	r0, r3
 8018194:	f000 f8e6 	bl	8018364 <USBD_Get_USB_Status>
 8018198:	4603      	mov	r3, r0
 801819a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801819c:	7bbb      	ldrb	r3, [r7, #14]
}
 801819e:	4618      	mov	r0, r3
 80181a0:	3710      	adds	r7, #16
 80181a2:	46bd      	mov	sp, r7
 80181a4:	bd80      	pop	{r7, pc}

080181a6 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80181a6:	b580      	push	{r7, lr}
 80181a8:	b084      	sub	sp, #16
 80181aa:	af00      	add	r7, sp, #0
 80181ac:	6078      	str	r0, [r7, #4]
 80181ae:	460b      	mov	r3, r1
 80181b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80181b2:	2300      	movs	r3, #0
 80181b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80181b6:	2300      	movs	r3, #0
 80181b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80181ba:	687b      	ldr	r3, [r7, #4]
 80181bc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80181c0:	78fa      	ldrb	r2, [r7, #3]
 80181c2:	4611      	mov	r1, r2
 80181c4:	4618      	mov	r0, r3
 80181c6:	f7ef fe2f 	bl	8007e28 <HAL_PCD_EP_SetStall>
 80181ca:	4603      	mov	r3, r0
 80181cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80181ce:	7bfb      	ldrb	r3, [r7, #15]
 80181d0:	4618      	mov	r0, r3
 80181d2:	f000 f8c7 	bl	8018364 <USBD_Get_USB_Status>
 80181d6:	4603      	mov	r3, r0
 80181d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80181da:	7bbb      	ldrb	r3, [r7, #14]
}
 80181dc:	4618      	mov	r0, r3
 80181de:	3710      	adds	r7, #16
 80181e0:	46bd      	mov	sp, r7
 80181e2:	bd80      	pop	{r7, pc}

080181e4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80181e4:	b580      	push	{r7, lr}
 80181e6:	b084      	sub	sp, #16
 80181e8:	af00      	add	r7, sp, #0
 80181ea:	6078      	str	r0, [r7, #4]
 80181ec:	460b      	mov	r3, r1
 80181ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80181f0:	2300      	movs	r3, #0
 80181f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80181f4:	2300      	movs	r3, #0
 80181f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80181f8:	687b      	ldr	r3, [r7, #4]
 80181fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80181fe:	78fa      	ldrb	r2, [r7, #3]
 8018200:	4611      	mov	r1, r2
 8018202:	4618      	mov	r0, r3
 8018204:	f7ef fe74 	bl	8007ef0 <HAL_PCD_EP_ClrStall>
 8018208:	4603      	mov	r3, r0
 801820a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801820c:	7bfb      	ldrb	r3, [r7, #15]
 801820e:	4618      	mov	r0, r3
 8018210:	f000 f8a8 	bl	8018364 <USBD_Get_USB_Status>
 8018214:	4603      	mov	r3, r0
 8018216:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018218:	7bbb      	ldrb	r3, [r7, #14]
}
 801821a:	4618      	mov	r0, r3
 801821c:	3710      	adds	r7, #16
 801821e:	46bd      	mov	sp, r7
 8018220:	bd80      	pop	{r7, pc}

08018222 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018222:	b480      	push	{r7}
 8018224:	b085      	sub	sp, #20
 8018226:	af00      	add	r7, sp, #0
 8018228:	6078      	str	r0, [r7, #4]
 801822a:	460b      	mov	r3, r1
 801822c:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801822e:	687b      	ldr	r3, [r7, #4]
 8018230:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018234:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8018236:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801823a:	2b00      	cmp	r3, #0
 801823c:	da0b      	bge.n	8018256 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801823e:	78fb      	ldrb	r3, [r7, #3]
 8018240:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8018244:	68f9      	ldr	r1, [r7, #12]
 8018246:	4613      	mov	r3, r2
 8018248:	00db      	lsls	r3, r3, #3
 801824a:	1a9b      	subs	r3, r3, r2
 801824c:	009b      	lsls	r3, r3, #2
 801824e:	440b      	add	r3, r1
 8018250:	333e      	adds	r3, #62	; 0x3e
 8018252:	781b      	ldrb	r3, [r3, #0]
 8018254:	e00b      	b.n	801826e <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8018256:	78fb      	ldrb	r3, [r7, #3]
 8018258:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801825c:	68f9      	ldr	r1, [r7, #12]
 801825e:	4613      	mov	r3, r2
 8018260:	00db      	lsls	r3, r3, #3
 8018262:	1a9b      	subs	r3, r3, r2
 8018264:	009b      	lsls	r3, r3, #2
 8018266:	440b      	add	r3, r1
 8018268:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801826c:	781b      	ldrb	r3, [r3, #0]
  }
}
 801826e:	4618      	mov	r0, r3
 8018270:	3714      	adds	r7, #20
 8018272:	46bd      	mov	sp, r7
 8018274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018278:	4770      	bx	lr

0801827a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801827a:	b580      	push	{r7, lr}
 801827c:	b084      	sub	sp, #16
 801827e:	af00      	add	r7, sp, #0
 8018280:	6078      	str	r0, [r7, #4]
 8018282:	460b      	mov	r3, r1
 8018284:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018286:	2300      	movs	r3, #0
 8018288:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801828a:	2300      	movs	r3, #0
 801828c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801828e:	687b      	ldr	r3, [r7, #4]
 8018290:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018294:	78fa      	ldrb	r2, [r7, #3]
 8018296:	4611      	mov	r1, r2
 8018298:	4618      	mov	r0, r3
 801829a:	f7ef fc41 	bl	8007b20 <HAL_PCD_SetAddress>
 801829e:	4603      	mov	r3, r0
 80182a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80182a2:	7bfb      	ldrb	r3, [r7, #15]
 80182a4:	4618      	mov	r0, r3
 80182a6:	f000 f85d 	bl	8018364 <USBD_Get_USB_Status>
 80182aa:	4603      	mov	r3, r0
 80182ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80182ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80182b0:	4618      	mov	r0, r3
 80182b2:	3710      	adds	r7, #16
 80182b4:	46bd      	mov	sp, r7
 80182b6:	bd80      	pop	{r7, pc}

080182b8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80182b8:	b580      	push	{r7, lr}
 80182ba:	b086      	sub	sp, #24
 80182bc:	af00      	add	r7, sp, #0
 80182be:	60f8      	str	r0, [r7, #12]
 80182c0:	607a      	str	r2, [r7, #4]
 80182c2:	603b      	str	r3, [r7, #0]
 80182c4:	460b      	mov	r3, r1
 80182c6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80182c8:	2300      	movs	r3, #0
 80182ca:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80182cc:	2300      	movs	r3, #0
 80182ce:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80182d0:	68fb      	ldr	r3, [r7, #12]
 80182d2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80182d6:	7af9      	ldrb	r1, [r7, #11]
 80182d8:	683b      	ldr	r3, [r7, #0]
 80182da:	687a      	ldr	r2, [r7, #4]
 80182dc:	f7ef fd5a 	bl	8007d94 <HAL_PCD_EP_Transmit>
 80182e0:	4603      	mov	r3, r0
 80182e2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80182e4:	7dfb      	ldrb	r3, [r7, #23]
 80182e6:	4618      	mov	r0, r3
 80182e8:	f000 f83c 	bl	8018364 <USBD_Get_USB_Status>
 80182ec:	4603      	mov	r3, r0
 80182ee:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80182f0:	7dbb      	ldrb	r3, [r7, #22]
}
 80182f2:	4618      	mov	r0, r3
 80182f4:	3718      	adds	r7, #24
 80182f6:	46bd      	mov	sp, r7
 80182f8:	bd80      	pop	{r7, pc}

080182fa <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80182fa:	b580      	push	{r7, lr}
 80182fc:	b086      	sub	sp, #24
 80182fe:	af00      	add	r7, sp, #0
 8018300:	60f8      	str	r0, [r7, #12]
 8018302:	607a      	str	r2, [r7, #4]
 8018304:	603b      	str	r3, [r7, #0]
 8018306:	460b      	mov	r3, r1
 8018308:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801830a:	2300      	movs	r3, #0
 801830c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801830e:	2300      	movs	r3, #0
 8018310:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8018312:	68fb      	ldr	r3, [r7, #12]
 8018314:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8018318:	7af9      	ldrb	r1, [r7, #11]
 801831a:	683b      	ldr	r3, [r7, #0]
 801831c:	687a      	ldr	r2, [r7, #4]
 801831e:	f7ef fcd6 	bl	8007cce <HAL_PCD_EP_Receive>
 8018322:	4603      	mov	r3, r0
 8018324:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018326:	7dfb      	ldrb	r3, [r7, #23]
 8018328:	4618      	mov	r0, r3
 801832a:	f000 f81b 	bl	8018364 <USBD_Get_USB_Status>
 801832e:	4603      	mov	r3, r0
 8018330:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8018332:	7dbb      	ldrb	r3, [r7, #22]
}
 8018334:	4618      	mov	r0, r3
 8018336:	3718      	adds	r7, #24
 8018338:	46bd      	mov	sp, r7
 801833a:	bd80      	pop	{r7, pc}

0801833c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801833c:	b580      	push	{r7, lr}
 801833e:	b082      	sub	sp, #8
 8018340:	af00      	add	r7, sp, #0
 8018342:	6078      	str	r0, [r7, #4]
 8018344:	460b      	mov	r3, r1
 8018346:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8018348:	687b      	ldr	r3, [r7, #4]
 801834a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801834e:	78fa      	ldrb	r2, [r7, #3]
 8018350:	4611      	mov	r1, r2
 8018352:	4618      	mov	r0, r3
 8018354:	f7ef fd06 	bl	8007d64 <HAL_PCD_EP_GetRxCount>
 8018358:	4603      	mov	r3, r0
}
 801835a:	4618      	mov	r0, r3
 801835c:	3708      	adds	r7, #8
 801835e:	46bd      	mov	sp, r7
 8018360:	bd80      	pop	{r7, pc}
	...

08018364 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8018364:	b480      	push	{r7}
 8018366:	b085      	sub	sp, #20
 8018368:	af00      	add	r7, sp, #0
 801836a:	4603      	mov	r3, r0
 801836c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801836e:	2300      	movs	r3, #0
 8018370:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8018372:	79fb      	ldrb	r3, [r7, #7]
 8018374:	2b03      	cmp	r3, #3
 8018376:	d817      	bhi.n	80183a8 <USBD_Get_USB_Status+0x44>
 8018378:	a201      	add	r2, pc, #4	; (adr r2, 8018380 <USBD_Get_USB_Status+0x1c>)
 801837a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801837e:	bf00      	nop
 8018380:	08018391 	.word	0x08018391
 8018384:	08018397 	.word	0x08018397
 8018388:	0801839d 	.word	0x0801839d
 801838c:	080183a3 	.word	0x080183a3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8018390:	2300      	movs	r3, #0
 8018392:	73fb      	strb	r3, [r7, #15]
    break;
 8018394:	e00b      	b.n	80183ae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8018396:	2303      	movs	r3, #3
 8018398:	73fb      	strb	r3, [r7, #15]
    break;
 801839a:	e008      	b.n	80183ae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801839c:	2301      	movs	r3, #1
 801839e:	73fb      	strb	r3, [r7, #15]
    break;
 80183a0:	e005      	b.n	80183ae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80183a2:	2303      	movs	r3, #3
 80183a4:	73fb      	strb	r3, [r7, #15]
    break;
 80183a6:	e002      	b.n	80183ae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80183a8:	2303      	movs	r3, #3
 80183aa:	73fb      	strb	r3, [r7, #15]
    break;
 80183ac:	bf00      	nop
  }
  return usb_status;
 80183ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80183b0:	4618      	mov	r0, r3
 80183b2:	3714      	adds	r7, #20
 80183b4:	46bd      	mov	sp, r7
 80183b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183ba:	4770      	bx	lr

080183bc <__errno>:
 80183bc:	4b01      	ldr	r3, [pc, #4]	; (80183c4 <__errno+0x8>)
 80183be:	6818      	ldr	r0, [r3, #0]
 80183c0:	4770      	bx	lr
 80183c2:	bf00      	nop
 80183c4:	24000174 	.word	0x24000174

080183c8 <__libc_init_array>:
 80183c8:	b570      	push	{r4, r5, r6, lr}
 80183ca:	4e0d      	ldr	r6, [pc, #52]	; (8018400 <__libc_init_array+0x38>)
 80183cc:	4c0d      	ldr	r4, [pc, #52]	; (8018404 <__libc_init_array+0x3c>)
 80183ce:	1ba4      	subs	r4, r4, r6
 80183d0:	10a4      	asrs	r4, r4, #2
 80183d2:	2500      	movs	r5, #0
 80183d4:	42a5      	cmp	r5, r4
 80183d6:	d109      	bne.n	80183ec <__libc_init_array+0x24>
 80183d8:	4e0b      	ldr	r6, [pc, #44]	; (8018408 <__libc_init_array+0x40>)
 80183da:	4c0c      	ldr	r4, [pc, #48]	; (801840c <__libc_init_array+0x44>)
 80183dc:	f001 f972 	bl	80196c4 <_init>
 80183e0:	1ba4      	subs	r4, r4, r6
 80183e2:	10a4      	asrs	r4, r4, #2
 80183e4:	2500      	movs	r5, #0
 80183e6:	42a5      	cmp	r5, r4
 80183e8:	d105      	bne.n	80183f6 <__libc_init_array+0x2e>
 80183ea:	bd70      	pop	{r4, r5, r6, pc}
 80183ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80183f0:	4798      	blx	r3
 80183f2:	3501      	adds	r5, #1
 80183f4:	e7ee      	b.n	80183d4 <__libc_init_array+0xc>
 80183f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80183fa:	4798      	blx	r3
 80183fc:	3501      	adds	r5, #1
 80183fe:	e7f2      	b.n	80183e6 <__libc_init_array+0x1e>
 8018400:	0801a034 	.word	0x0801a034
 8018404:	0801a034 	.word	0x0801a034
 8018408:	0801a034 	.word	0x0801a034
 801840c:	0801a038 	.word	0x0801a038

08018410 <malloc>:
 8018410:	4b02      	ldr	r3, [pc, #8]	; (801841c <malloc+0xc>)
 8018412:	4601      	mov	r1, r0
 8018414:	6818      	ldr	r0, [r3, #0]
 8018416:	f000 b86d 	b.w	80184f4 <_malloc_r>
 801841a:	bf00      	nop
 801841c:	24000174 	.word	0x24000174

08018420 <free>:
 8018420:	4b02      	ldr	r3, [pc, #8]	; (801842c <free+0xc>)
 8018422:	4601      	mov	r1, r0
 8018424:	6818      	ldr	r0, [r3, #0]
 8018426:	f000 b817 	b.w	8018458 <_free_r>
 801842a:	bf00      	nop
 801842c:	24000174 	.word	0x24000174

08018430 <memcpy>:
 8018430:	b510      	push	{r4, lr}
 8018432:	1e43      	subs	r3, r0, #1
 8018434:	440a      	add	r2, r1
 8018436:	4291      	cmp	r1, r2
 8018438:	d100      	bne.n	801843c <memcpy+0xc>
 801843a:	bd10      	pop	{r4, pc}
 801843c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018440:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018444:	e7f7      	b.n	8018436 <memcpy+0x6>

08018446 <memset>:
 8018446:	4402      	add	r2, r0
 8018448:	4603      	mov	r3, r0
 801844a:	4293      	cmp	r3, r2
 801844c:	d100      	bne.n	8018450 <memset+0xa>
 801844e:	4770      	bx	lr
 8018450:	f803 1b01 	strb.w	r1, [r3], #1
 8018454:	e7f9      	b.n	801844a <memset+0x4>
	...

08018458 <_free_r>:
 8018458:	b538      	push	{r3, r4, r5, lr}
 801845a:	4605      	mov	r5, r0
 801845c:	2900      	cmp	r1, #0
 801845e:	d045      	beq.n	80184ec <_free_r+0x94>
 8018460:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018464:	1f0c      	subs	r4, r1, #4
 8018466:	2b00      	cmp	r3, #0
 8018468:	bfb8      	it	lt
 801846a:	18e4      	addlt	r4, r4, r3
 801846c:	f000 fc1a 	bl	8018ca4 <__malloc_lock>
 8018470:	4a1f      	ldr	r2, [pc, #124]	; (80184f0 <_free_r+0x98>)
 8018472:	6813      	ldr	r3, [r2, #0]
 8018474:	4610      	mov	r0, r2
 8018476:	b933      	cbnz	r3, 8018486 <_free_r+0x2e>
 8018478:	6063      	str	r3, [r4, #4]
 801847a:	6014      	str	r4, [r2, #0]
 801847c:	4628      	mov	r0, r5
 801847e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018482:	f000 bc10 	b.w	8018ca6 <__malloc_unlock>
 8018486:	42a3      	cmp	r3, r4
 8018488:	d90c      	bls.n	80184a4 <_free_r+0x4c>
 801848a:	6821      	ldr	r1, [r4, #0]
 801848c:	1862      	adds	r2, r4, r1
 801848e:	4293      	cmp	r3, r2
 8018490:	bf04      	itt	eq
 8018492:	681a      	ldreq	r2, [r3, #0]
 8018494:	685b      	ldreq	r3, [r3, #4]
 8018496:	6063      	str	r3, [r4, #4]
 8018498:	bf04      	itt	eq
 801849a:	1852      	addeq	r2, r2, r1
 801849c:	6022      	streq	r2, [r4, #0]
 801849e:	6004      	str	r4, [r0, #0]
 80184a0:	e7ec      	b.n	801847c <_free_r+0x24>
 80184a2:	4613      	mov	r3, r2
 80184a4:	685a      	ldr	r2, [r3, #4]
 80184a6:	b10a      	cbz	r2, 80184ac <_free_r+0x54>
 80184a8:	42a2      	cmp	r2, r4
 80184aa:	d9fa      	bls.n	80184a2 <_free_r+0x4a>
 80184ac:	6819      	ldr	r1, [r3, #0]
 80184ae:	1858      	adds	r0, r3, r1
 80184b0:	42a0      	cmp	r0, r4
 80184b2:	d10b      	bne.n	80184cc <_free_r+0x74>
 80184b4:	6820      	ldr	r0, [r4, #0]
 80184b6:	4401      	add	r1, r0
 80184b8:	1858      	adds	r0, r3, r1
 80184ba:	4282      	cmp	r2, r0
 80184bc:	6019      	str	r1, [r3, #0]
 80184be:	d1dd      	bne.n	801847c <_free_r+0x24>
 80184c0:	6810      	ldr	r0, [r2, #0]
 80184c2:	6852      	ldr	r2, [r2, #4]
 80184c4:	605a      	str	r2, [r3, #4]
 80184c6:	4401      	add	r1, r0
 80184c8:	6019      	str	r1, [r3, #0]
 80184ca:	e7d7      	b.n	801847c <_free_r+0x24>
 80184cc:	d902      	bls.n	80184d4 <_free_r+0x7c>
 80184ce:	230c      	movs	r3, #12
 80184d0:	602b      	str	r3, [r5, #0]
 80184d2:	e7d3      	b.n	801847c <_free_r+0x24>
 80184d4:	6820      	ldr	r0, [r4, #0]
 80184d6:	1821      	adds	r1, r4, r0
 80184d8:	428a      	cmp	r2, r1
 80184da:	bf04      	itt	eq
 80184dc:	6811      	ldreq	r1, [r2, #0]
 80184de:	6852      	ldreq	r2, [r2, #4]
 80184e0:	6062      	str	r2, [r4, #4]
 80184e2:	bf04      	itt	eq
 80184e4:	1809      	addeq	r1, r1, r0
 80184e6:	6021      	streq	r1, [r4, #0]
 80184e8:	605c      	str	r4, [r3, #4]
 80184ea:	e7c7      	b.n	801847c <_free_r+0x24>
 80184ec:	bd38      	pop	{r3, r4, r5, pc}
 80184ee:	bf00      	nop
 80184f0:	24000b84 	.word	0x24000b84

080184f4 <_malloc_r>:
 80184f4:	b570      	push	{r4, r5, r6, lr}
 80184f6:	1ccd      	adds	r5, r1, #3
 80184f8:	f025 0503 	bic.w	r5, r5, #3
 80184fc:	3508      	adds	r5, #8
 80184fe:	2d0c      	cmp	r5, #12
 8018500:	bf38      	it	cc
 8018502:	250c      	movcc	r5, #12
 8018504:	2d00      	cmp	r5, #0
 8018506:	4606      	mov	r6, r0
 8018508:	db01      	blt.n	801850e <_malloc_r+0x1a>
 801850a:	42a9      	cmp	r1, r5
 801850c:	d903      	bls.n	8018516 <_malloc_r+0x22>
 801850e:	230c      	movs	r3, #12
 8018510:	6033      	str	r3, [r6, #0]
 8018512:	2000      	movs	r0, #0
 8018514:	bd70      	pop	{r4, r5, r6, pc}
 8018516:	f000 fbc5 	bl	8018ca4 <__malloc_lock>
 801851a:	4a21      	ldr	r2, [pc, #132]	; (80185a0 <_malloc_r+0xac>)
 801851c:	6814      	ldr	r4, [r2, #0]
 801851e:	4621      	mov	r1, r4
 8018520:	b991      	cbnz	r1, 8018548 <_malloc_r+0x54>
 8018522:	4c20      	ldr	r4, [pc, #128]	; (80185a4 <_malloc_r+0xb0>)
 8018524:	6823      	ldr	r3, [r4, #0]
 8018526:	b91b      	cbnz	r3, 8018530 <_malloc_r+0x3c>
 8018528:	4630      	mov	r0, r6
 801852a:	f000 f8b9 	bl	80186a0 <_sbrk_r>
 801852e:	6020      	str	r0, [r4, #0]
 8018530:	4629      	mov	r1, r5
 8018532:	4630      	mov	r0, r6
 8018534:	f000 f8b4 	bl	80186a0 <_sbrk_r>
 8018538:	1c43      	adds	r3, r0, #1
 801853a:	d124      	bne.n	8018586 <_malloc_r+0x92>
 801853c:	230c      	movs	r3, #12
 801853e:	6033      	str	r3, [r6, #0]
 8018540:	4630      	mov	r0, r6
 8018542:	f000 fbb0 	bl	8018ca6 <__malloc_unlock>
 8018546:	e7e4      	b.n	8018512 <_malloc_r+0x1e>
 8018548:	680b      	ldr	r3, [r1, #0]
 801854a:	1b5b      	subs	r3, r3, r5
 801854c:	d418      	bmi.n	8018580 <_malloc_r+0x8c>
 801854e:	2b0b      	cmp	r3, #11
 8018550:	d90f      	bls.n	8018572 <_malloc_r+0x7e>
 8018552:	600b      	str	r3, [r1, #0]
 8018554:	50cd      	str	r5, [r1, r3]
 8018556:	18cc      	adds	r4, r1, r3
 8018558:	4630      	mov	r0, r6
 801855a:	f000 fba4 	bl	8018ca6 <__malloc_unlock>
 801855e:	f104 000b 	add.w	r0, r4, #11
 8018562:	1d23      	adds	r3, r4, #4
 8018564:	f020 0007 	bic.w	r0, r0, #7
 8018568:	1ac3      	subs	r3, r0, r3
 801856a:	d0d3      	beq.n	8018514 <_malloc_r+0x20>
 801856c:	425a      	negs	r2, r3
 801856e:	50e2      	str	r2, [r4, r3]
 8018570:	e7d0      	b.n	8018514 <_malloc_r+0x20>
 8018572:	428c      	cmp	r4, r1
 8018574:	684b      	ldr	r3, [r1, #4]
 8018576:	bf16      	itet	ne
 8018578:	6063      	strne	r3, [r4, #4]
 801857a:	6013      	streq	r3, [r2, #0]
 801857c:	460c      	movne	r4, r1
 801857e:	e7eb      	b.n	8018558 <_malloc_r+0x64>
 8018580:	460c      	mov	r4, r1
 8018582:	6849      	ldr	r1, [r1, #4]
 8018584:	e7cc      	b.n	8018520 <_malloc_r+0x2c>
 8018586:	1cc4      	adds	r4, r0, #3
 8018588:	f024 0403 	bic.w	r4, r4, #3
 801858c:	42a0      	cmp	r0, r4
 801858e:	d005      	beq.n	801859c <_malloc_r+0xa8>
 8018590:	1a21      	subs	r1, r4, r0
 8018592:	4630      	mov	r0, r6
 8018594:	f000 f884 	bl	80186a0 <_sbrk_r>
 8018598:	3001      	adds	r0, #1
 801859a:	d0cf      	beq.n	801853c <_malloc_r+0x48>
 801859c:	6025      	str	r5, [r4, #0]
 801859e:	e7db      	b.n	8018558 <_malloc_r+0x64>
 80185a0:	24000b84 	.word	0x24000b84
 80185a4:	24000b88 	.word	0x24000b88

080185a8 <iprintf>:
 80185a8:	b40f      	push	{r0, r1, r2, r3}
 80185aa:	4b0a      	ldr	r3, [pc, #40]	; (80185d4 <iprintf+0x2c>)
 80185ac:	b513      	push	{r0, r1, r4, lr}
 80185ae:	681c      	ldr	r4, [r3, #0]
 80185b0:	b124      	cbz	r4, 80185bc <iprintf+0x14>
 80185b2:	69a3      	ldr	r3, [r4, #24]
 80185b4:	b913      	cbnz	r3, 80185bc <iprintf+0x14>
 80185b6:	4620      	mov	r0, r4
 80185b8:	f000 fa86 	bl	8018ac8 <__sinit>
 80185bc:	ab05      	add	r3, sp, #20
 80185be:	9a04      	ldr	r2, [sp, #16]
 80185c0:	68a1      	ldr	r1, [r4, #8]
 80185c2:	9301      	str	r3, [sp, #4]
 80185c4:	4620      	mov	r0, r4
 80185c6:	f000 fceb 	bl	8018fa0 <_vfiprintf_r>
 80185ca:	b002      	add	sp, #8
 80185cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80185d0:	b004      	add	sp, #16
 80185d2:	4770      	bx	lr
 80185d4:	24000174 	.word	0x24000174

080185d8 <_puts_r>:
 80185d8:	b570      	push	{r4, r5, r6, lr}
 80185da:	460e      	mov	r6, r1
 80185dc:	4605      	mov	r5, r0
 80185de:	b118      	cbz	r0, 80185e8 <_puts_r+0x10>
 80185e0:	6983      	ldr	r3, [r0, #24]
 80185e2:	b90b      	cbnz	r3, 80185e8 <_puts_r+0x10>
 80185e4:	f000 fa70 	bl	8018ac8 <__sinit>
 80185e8:	69ab      	ldr	r3, [r5, #24]
 80185ea:	68ac      	ldr	r4, [r5, #8]
 80185ec:	b913      	cbnz	r3, 80185f4 <_puts_r+0x1c>
 80185ee:	4628      	mov	r0, r5
 80185f0:	f000 fa6a 	bl	8018ac8 <__sinit>
 80185f4:	4b23      	ldr	r3, [pc, #140]	; (8018684 <_puts_r+0xac>)
 80185f6:	429c      	cmp	r4, r3
 80185f8:	d117      	bne.n	801862a <_puts_r+0x52>
 80185fa:	686c      	ldr	r4, [r5, #4]
 80185fc:	89a3      	ldrh	r3, [r4, #12]
 80185fe:	071b      	lsls	r3, r3, #28
 8018600:	d51d      	bpl.n	801863e <_puts_r+0x66>
 8018602:	6923      	ldr	r3, [r4, #16]
 8018604:	b1db      	cbz	r3, 801863e <_puts_r+0x66>
 8018606:	3e01      	subs	r6, #1
 8018608:	68a3      	ldr	r3, [r4, #8]
 801860a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801860e:	3b01      	subs	r3, #1
 8018610:	60a3      	str	r3, [r4, #8]
 8018612:	b9e9      	cbnz	r1, 8018650 <_puts_r+0x78>
 8018614:	2b00      	cmp	r3, #0
 8018616:	da2e      	bge.n	8018676 <_puts_r+0x9e>
 8018618:	4622      	mov	r2, r4
 801861a:	210a      	movs	r1, #10
 801861c:	4628      	mov	r0, r5
 801861e:	f000 f8a3 	bl	8018768 <__swbuf_r>
 8018622:	3001      	adds	r0, #1
 8018624:	d011      	beq.n	801864a <_puts_r+0x72>
 8018626:	200a      	movs	r0, #10
 8018628:	e011      	b.n	801864e <_puts_r+0x76>
 801862a:	4b17      	ldr	r3, [pc, #92]	; (8018688 <_puts_r+0xb0>)
 801862c:	429c      	cmp	r4, r3
 801862e:	d101      	bne.n	8018634 <_puts_r+0x5c>
 8018630:	68ac      	ldr	r4, [r5, #8]
 8018632:	e7e3      	b.n	80185fc <_puts_r+0x24>
 8018634:	4b15      	ldr	r3, [pc, #84]	; (801868c <_puts_r+0xb4>)
 8018636:	429c      	cmp	r4, r3
 8018638:	bf08      	it	eq
 801863a:	68ec      	ldreq	r4, [r5, #12]
 801863c:	e7de      	b.n	80185fc <_puts_r+0x24>
 801863e:	4621      	mov	r1, r4
 8018640:	4628      	mov	r0, r5
 8018642:	f000 f8e3 	bl	801880c <__swsetup_r>
 8018646:	2800      	cmp	r0, #0
 8018648:	d0dd      	beq.n	8018606 <_puts_r+0x2e>
 801864a:	f04f 30ff 	mov.w	r0, #4294967295
 801864e:	bd70      	pop	{r4, r5, r6, pc}
 8018650:	2b00      	cmp	r3, #0
 8018652:	da04      	bge.n	801865e <_puts_r+0x86>
 8018654:	69a2      	ldr	r2, [r4, #24]
 8018656:	429a      	cmp	r2, r3
 8018658:	dc06      	bgt.n	8018668 <_puts_r+0x90>
 801865a:	290a      	cmp	r1, #10
 801865c:	d004      	beq.n	8018668 <_puts_r+0x90>
 801865e:	6823      	ldr	r3, [r4, #0]
 8018660:	1c5a      	adds	r2, r3, #1
 8018662:	6022      	str	r2, [r4, #0]
 8018664:	7019      	strb	r1, [r3, #0]
 8018666:	e7cf      	b.n	8018608 <_puts_r+0x30>
 8018668:	4622      	mov	r2, r4
 801866a:	4628      	mov	r0, r5
 801866c:	f000 f87c 	bl	8018768 <__swbuf_r>
 8018670:	3001      	adds	r0, #1
 8018672:	d1c9      	bne.n	8018608 <_puts_r+0x30>
 8018674:	e7e9      	b.n	801864a <_puts_r+0x72>
 8018676:	6823      	ldr	r3, [r4, #0]
 8018678:	200a      	movs	r0, #10
 801867a:	1c5a      	adds	r2, r3, #1
 801867c:	6022      	str	r2, [r4, #0]
 801867e:	7018      	strb	r0, [r3, #0]
 8018680:	e7e5      	b.n	801864e <_puts_r+0x76>
 8018682:	bf00      	nop
 8018684:	08019fb8 	.word	0x08019fb8
 8018688:	08019fd8 	.word	0x08019fd8
 801868c:	08019f98 	.word	0x08019f98

08018690 <puts>:
 8018690:	4b02      	ldr	r3, [pc, #8]	; (801869c <puts+0xc>)
 8018692:	4601      	mov	r1, r0
 8018694:	6818      	ldr	r0, [r3, #0]
 8018696:	f7ff bf9f 	b.w	80185d8 <_puts_r>
 801869a:	bf00      	nop
 801869c:	24000174 	.word	0x24000174

080186a0 <_sbrk_r>:
 80186a0:	b538      	push	{r3, r4, r5, lr}
 80186a2:	4c06      	ldr	r4, [pc, #24]	; (80186bc <_sbrk_r+0x1c>)
 80186a4:	2300      	movs	r3, #0
 80186a6:	4605      	mov	r5, r0
 80186a8:	4608      	mov	r0, r1
 80186aa:	6023      	str	r3, [r4, #0]
 80186ac:	f7ea fdf8 	bl	80032a0 <_sbrk>
 80186b0:	1c43      	adds	r3, r0, #1
 80186b2:	d102      	bne.n	80186ba <_sbrk_r+0x1a>
 80186b4:	6823      	ldr	r3, [r4, #0]
 80186b6:	b103      	cbz	r3, 80186ba <_sbrk_r+0x1a>
 80186b8:	602b      	str	r3, [r5, #0]
 80186ba:	bd38      	pop	{r3, r4, r5, pc}
 80186bc:	24002484 	.word	0x24002484

080186c0 <sniprintf>:
 80186c0:	b40c      	push	{r2, r3}
 80186c2:	b530      	push	{r4, r5, lr}
 80186c4:	4b17      	ldr	r3, [pc, #92]	; (8018724 <sniprintf+0x64>)
 80186c6:	1e0c      	subs	r4, r1, #0
 80186c8:	b09d      	sub	sp, #116	; 0x74
 80186ca:	681d      	ldr	r5, [r3, #0]
 80186cc:	da08      	bge.n	80186e0 <sniprintf+0x20>
 80186ce:	238b      	movs	r3, #139	; 0x8b
 80186d0:	602b      	str	r3, [r5, #0]
 80186d2:	f04f 30ff 	mov.w	r0, #4294967295
 80186d6:	b01d      	add	sp, #116	; 0x74
 80186d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80186dc:	b002      	add	sp, #8
 80186de:	4770      	bx	lr
 80186e0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80186e4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80186e8:	bf14      	ite	ne
 80186ea:	f104 33ff 	addne.w	r3, r4, #4294967295
 80186ee:	4623      	moveq	r3, r4
 80186f0:	9304      	str	r3, [sp, #16]
 80186f2:	9307      	str	r3, [sp, #28]
 80186f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80186f8:	9002      	str	r0, [sp, #8]
 80186fa:	9006      	str	r0, [sp, #24]
 80186fc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018700:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8018702:	ab21      	add	r3, sp, #132	; 0x84
 8018704:	a902      	add	r1, sp, #8
 8018706:	4628      	mov	r0, r5
 8018708:	9301      	str	r3, [sp, #4]
 801870a:	f000 fb27 	bl	8018d5c <_svfiprintf_r>
 801870e:	1c43      	adds	r3, r0, #1
 8018710:	bfbc      	itt	lt
 8018712:	238b      	movlt	r3, #139	; 0x8b
 8018714:	602b      	strlt	r3, [r5, #0]
 8018716:	2c00      	cmp	r4, #0
 8018718:	d0dd      	beq.n	80186d6 <sniprintf+0x16>
 801871a:	9b02      	ldr	r3, [sp, #8]
 801871c:	2200      	movs	r2, #0
 801871e:	701a      	strb	r2, [r3, #0]
 8018720:	e7d9      	b.n	80186d6 <sniprintf+0x16>
 8018722:	bf00      	nop
 8018724:	24000174 	.word	0x24000174

08018728 <siprintf>:
 8018728:	b40e      	push	{r1, r2, r3}
 801872a:	b500      	push	{lr}
 801872c:	b09c      	sub	sp, #112	; 0x70
 801872e:	ab1d      	add	r3, sp, #116	; 0x74
 8018730:	9002      	str	r0, [sp, #8]
 8018732:	9006      	str	r0, [sp, #24]
 8018734:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8018738:	4809      	ldr	r0, [pc, #36]	; (8018760 <siprintf+0x38>)
 801873a:	9107      	str	r1, [sp, #28]
 801873c:	9104      	str	r1, [sp, #16]
 801873e:	4909      	ldr	r1, [pc, #36]	; (8018764 <siprintf+0x3c>)
 8018740:	f853 2b04 	ldr.w	r2, [r3], #4
 8018744:	9105      	str	r1, [sp, #20]
 8018746:	6800      	ldr	r0, [r0, #0]
 8018748:	9301      	str	r3, [sp, #4]
 801874a:	a902      	add	r1, sp, #8
 801874c:	f000 fb06 	bl	8018d5c <_svfiprintf_r>
 8018750:	9b02      	ldr	r3, [sp, #8]
 8018752:	2200      	movs	r2, #0
 8018754:	701a      	strb	r2, [r3, #0]
 8018756:	b01c      	add	sp, #112	; 0x70
 8018758:	f85d eb04 	ldr.w	lr, [sp], #4
 801875c:	b003      	add	sp, #12
 801875e:	4770      	bx	lr
 8018760:	24000174 	.word	0x24000174
 8018764:	ffff0208 	.word	0xffff0208

08018768 <__swbuf_r>:
 8018768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801876a:	460e      	mov	r6, r1
 801876c:	4614      	mov	r4, r2
 801876e:	4605      	mov	r5, r0
 8018770:	b118      	cbz	r0, 801877a <__swbuf_r+0x12>
 8018772:	6983      	ldr	r3, [r0, #24]
 8018774:	b90b      	cbnz	r3, 801877a <__swbuf_r+0x12>
 8018776:	f000 f9a7 	bl	8018ac8 <__sinit>
 801877a:	4b21      	ldr	r3, [pc, #132]	; (8018800 <__swbuf_r+0x98>)
 801877c:	429c      	cmp	r4, r3
 801877e:	d12a      	bne.n	80187d6 <__swbuf_r+0x6e>
 8018780:	686c      	ldr	r4, [r5, #4]
 8018782:	69a3      	ldr	r3, [r4, #24]
 8018784:	60a3      	str	r3, [r4, #8]
 8018786:	89a3      	ldrh	r3, [r4, #12]
 8018788:	071a      	lsls	r2, r3, #28
 801878a:	d52e      	bpl.n	80187ea <__swbuf_r+0x82>
 801878c:	6923      	ldr	r3, [r4, #16]
 801878e:	b363      	cbz	r3, 80187ea <__swbuf_r+0x82>
 8018790:	6923      	ldr	r3, [r4, #16]
 8018792:	6820      	ldr	r0, [r4, #0]
 8018794:	1ac0      	subs	r0, r0, r3
 8018796:	6963      	ldr	r3, [r4, #20]
 8018798:	b2f6      	uxtb	r6, r6
 801879a:	4283      	cmp	r3, r0
 801879c:	4637      	mov	r7, r6
 801879e:	dc04      	bgt.n	80187aa <__swbuf_r+0x42>
 80187a0:	4621      	mov	r1, r4
 80187a2:	4628      	mov	r0, r5
 80187a4:	f000 f926 	bl	80189f4 <_fflush_r>
 80187a8:	bb28      	cbnz	r0, 80187f6 <__swbuf_r+0x8e>
 80187aa:	68a3      	ldr	r3, [r4, #8]
 80187ac:	3b01      	subs	r3, #1
 80187ae:	60a3      	str	r3, [r4, #8]
 80187b0:	6823      	ldr	r3, [r4, #0]
 80187b2:	1c5a      	adds	r2, r3, #1
 80187b4:	6022      	str	r2, [r4, #0]
 80187b6:	701e      	strb	r6, [r3, #0]
 80187b8:	6963      	ldr	r3, [r4, #20]
 80187ba:	3001      	adds	r0, #1
 80187bc:	4283      	cmp	r3, r0
 80187be:	d004      	beq.n	80187ca <__swbuf_r+0x62>
 80187c0:	89a3      	ldrh	r3, [r4, #12]
 80187c2:	07db      	lsls	r3, r3, #31
 80187c4:	d519      	bpl.n	80187fa <__swbuf_r+0x92>
 80187c6:	2e0a      	cmp	r6, #10
 80187c8:	d117      	bne.n	80187fa <__swbuf_r+0x92>
 80187ca:	4621      	mov	r1, r4
 80187cc:	4628      	mov	r0, r5
 80187ce:	f000 f911 	bl	80189f4 <_fflush_r>
 80187d2:	b190      	cbz	r0, 80187fa <__swbuf_r+0x92>
 80187d4:	e00f      	b.n	80187f6 <__swbuf_r+0x8e>
 80187d6:	4b0b      	ldr	r3, [pc, #44]	; (8018804 <__swbuf_r+0x9c>)
 80187d8:	429c      	cmp	r4, r3
 80187da:	d101      	bne.n	80187e0 <__swbuf_r+0x78>
 80187dc:	68ac      	ldr	r4, [r5, #8]
 80187de:	e7d0      	b.n	8018782 <__swbuf_r+0x1a>
 80187e0:	4b09      	ldr	r3, [pc, #36]	; (8018808 <__swbuf_r+0xa0>)
 80187e2:	429c      	cmp	r4, r3
 80187e4:	bf08      	it	eq
 80187e6:	68ec      	ldreq	r4, [r5, #12]
 80187e8:	e7cb      	b.n	8018782 <__swbuf_r+0x1a>
 80187ea:	4621      	mov	r1, r4
 80187ec:	4628      	mov	r0, r5
 80187ee:	f000 f80d 	bl	801880c <__swsetup_r>
 80187f2:	2800      	cmp	r0, #0
 80187f4:	d0cc      	beq.n	8018790 <__swbuf_r+0x28>
 80187f6:	f04f 37ff 	mov.w	r7, #4294967295
 80187fa:	4638      	mov	r0, r7
 80187fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80187fe:	bf00      	nop
 8018800:	08019fb8 	.word	0x08019fb8
 8018804:	08019fd8 	.word	0x08019fd8
 8018808:	08019f98 	.word	0x08019f98

0801880c <__swsetup_r>:
 801880c:	4b32      	ldr	r3, [pc, #200]	; (80188d8 <__swsetup_r+0xcc>)
 801880e:	b570      	push	{r4, r5, r6, lr}
 8018810:	681d      	ldr	r5, [r3, #0]
 8018812:	4606      	mov	r6, r0
 8018814:	460c      	mov	r4, r1
 8018816:	b125      	cbz	r5, 8018822 <__swsetup_r+0x16>
 8018818:	69ab      	ldr	r3, [r5, #24]
 801881a:	b913      	cbnz	r3, 8018822 <__swsetup_r+0x16>
 801881c:	4628      	mov	r0, r5
 801881e:	f000 f953 	bl	8018ac8 <__sinit>
 8018822:	4b2e      	ldr	r3, [pc, #184]	; (80188dc <__swsetup_r+0xd0>)
 8018824:	429c      	cmp	r4, r3
 8018826:	d10f      	bne.n	8018848 <__swsetup_r+0x3c>
 8018828:	686c      	ldr	r4, [r5, #4]
 801882a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801882e:	b29a      	uxth	r2, r3
 8018830:	0715      	lsls	r5, r2, #28
 8018832:	d42c      	bmi.n	801888e <__swsetup_r+0x82>
 8018834:	06d0      	lsls	r0, r2, #27
 8018836:	d411      	bmi.n	801885c <__swsetup_r+0x50>
 8018838:	2209      	movs	r2, #9
 801883a:	6032      	str	r2, [r6, #0]
 801883c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018840:	81a3      	strh	r3, [r4, #12]
 8018842:	f04f 30ff 	mov.w	r0, #4294967295
 8018846:	e03e      	b.n	80188c6 <__swsetup_r+0xba>
 8018848:	4b25      	ldr	r3, [pc, #148]	; (80188e0 <__swsetup_r+0xd4>)
 801884a:	429c      	cmp	r4, r3
 801884c:	d101      	bne.n	8018852 <__swsetup_r+0x46>
 801884e:	68ac      	ldr	r4, [r5, #8]
 8018850:	e7eb      	b.n	801882a <__swsetup_r+0x1e>
 8018852:	4b24      	ldr	r3, [pc, #144]	; (80188e4 <__swsetup_r+0xd8>)
 8018854:	429c      	cmp	r4, r3
 8018856:	bf08      	it	eq
 8018858:	68ec      	ldreq	r4, [r5, #12]
 801885a:	e7e6      	b.n	801882a <__swsetup_r+0x1e>
 801885c:	0751      	lsls	r1, r2, #29
 801885e:	d512      	bpl.n	8018886 <__swsetup_r+0x7a>
 8018860:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018862:	b141      	cbz	r1, 8018876 <__swsetup_r+0x6a>
 8018864:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018868:	4299      	cmp	r1, r3
 801886a:	d002      	beq.n	8018872 <__swsetup_r+0x66>
 801886c:	4630      	mov	r0, r6
 801886e:	f7ff fdf3 	bl	8018458 <_free_r>
 8018872:	2300      	movs	r3, #0
 8018874:	6363      	str	r3, [r4, #52]	; 0x34
 8018876:	89a3      	ldrh	r3, [r4, #12]
 8018878:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801887c:	81a3      	strh	r3, [r4, #12]
 801887e:	2300      	movs	r3, #0
 8018880:	6063      	str	r3, [r4, #4]
 8018882:	6923      	ldr	r3, [r4, #16]
 8018884:	6023      	str	r3, [r4, #0]
 8018886:	89a3      	ldrh	r3, [r4, #12]
 8018888:	f043 0308 	orr.w	r3, r3, #8
 801888c:	81a3      	strh	r3, [r4, #12]
 801888e:	6923      	ldr	r3, [r4, #16]
 8018890:	b94b      	cbnz	r3, 80188a6 <__swsetup_r+0x9a>
 8018892:	89a3      	ldrh	r3, [r4, #12]
 8018894:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8018898:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801889c:	d003      	beq.n	80188a6 <__swsetup_r+0x9a>
 801889e:	4621      	mov	r1, r4
 80188a0:	4630      	mov	r0, r6
 80188a2:	f000 f9bf 	bl	8018c24 <__smakebuf_r>
 80188a6:	89a2      	ldrh	r2, [r4, #12]
 80188a8:	f012 0301 	ands.w	r3, r2, #1
 80188ac:	d00c      	beq.n	80188c8 <__swsetup_r+0xbc>
 80188ae:	2300      	movs	r3, #0
 80188b0:	60a3      	str	r3, [r4, #8]
 80188b2:	6963      	ldr	r3, [r4, #20]
 80188b4:	425b      	negs	r3, r3
 80188b6:	61a3      	str	r3, [r4, #24]
 80188b8:	6923      	ldr	r3, [r4, #16]
 80188ba:	b953      	cbnz	r3, 80188d2 <__swsetup_r+0xc6>
 80188bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80188c0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80188c4:	d1ba      	bne.n	801883c <__swsetup_r+0x30>
 80188c6:	bd70      	pop	{r4, r5, r6, pc}
 80188c8:	0792      	lsls	r2, r2, #30
 80188ca:	bf58      	it	pl
 80188cc:	6963      	ldrpl	r3, [r4, #20]
 80188ce:	60a3      	str	r3, [r4, #8]
 80188d0:	e7f2      	b.n	80188b8 <__swsetup_r+0xac>
 80188d2:	2000      	movs	r0, #0
 80188d4:	e7f7      	b.n	80188c6 <__swsetup_r+0xba>
 80188d6:	bf00      	nop
 80188d8:	24000174 	.word	0x24000174
 80188dc:	08019fb8 	.word	0x08019fb8
 80188e0:	08019fd8 	.word	0x08019fd8
 80188e4:	08019f98 	.word	0x08019f98

080188e8 <__sflush_r>:
 80188e8:	898a      	ldrh	r2, [r1, #12]
 80188ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80188ee:	4605      	mov	r5, r0
 80188f0:	0710      	lsls	r0, r2, #28
 80188f2:	460c      	mov	r4, r1
 80188f4:	d458      	bmi.n	80189a8 <__sflush_r+0xc0>
 80188f6:	684b      	ldr	r3, [r1, #4]
 80188f8:	2b00      	cmp	r3, #0
 80188fa:	dc05      	bgt.n	8018908 <__sflush_r+0x20>
 80188fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80188fe:	2b00      	cmp	r3, #0
 8018900:	dc02      	bgt.n	8018908 <__sflush_r+0x20>
 8018902:	2000      	movs	r0, #0
 8018904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018908:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801890a:	2e00      	cmp	r6, #0
 801890c:	d0f9      	beq.n	8018902 <__sflush_r+0x1a>
 801890e:	2300      	movs	r3, #0
 8018910:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018914:	682f      	ldr	r7, [r5, #0]
 8018916:	6a21      	ldr	r1, [r4, #32]
 8018918:	602b      	str	r3, [r5, #0]
 801891a:	d032      	beq.n	8018982 <__sflush_r+0x9a>
 801891c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801891e:	89a3      	ldrh	r3, [r4, #12]
 8018920:	075a      	lsls	r2, r3, #29
 8018922:	d505      	bpl.n	8018930 <__sflush_r+0x48>
 8018924:	6863      	ldr	r3, [r4, #4]
 8018926:	1ac0      	subs	r0, r0, r3
 8018928:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801892a:	b10b      	cbz	r3, 8018930 <__sflush_r+0x48>
 801892c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801892e:	1ac0      	subs	r0, r0, r3
 8018930:	2300      	movs	r3, #0
 8018932:	4602      	mov	r2, r0
 8018934:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018936:	6a21      	ldr	r1, [r4, #32]
 8018938:	4628      	mov	r0, r5
 801893a:	47b0      	blx	r6
 801893c:	1c43      	adds	r3, r0, #1
 801893e:	89a3      	ldrh	r3, [r4, #12]
 8018940:	d106      	bne.n	8018950 <__sflush_r+0x68>
 8018942:	6829      	ldr	r1, [r5, #0]
 8018944:	291d      	cmp	r1, #29
 8018946:	d848      	bhi.n	80189da <__sflush_r+0xf2>
 8018948:	4a29      	ldr	r2, [pc, #164]	; (80189f0 <__sflush_r+0x108>)
 801894a:	40ca      	lsrs	r2, r1
 801894c:	07d6      	lsls	r6, r2, #31
 801894e:	d544      	bpl.n	80189da <__sflush_r+0xf2>
 8018950:	2200      	movs	r2, #0
 8018952:	6062      	str	r2, [r4, #4]
 8018954:	04d9      	lsls	r1, r3, #19
 8018956:	6922      	ldr	r2, [r4, #16]
 8018958:	6022      	str	r2, [r4, #0]
 801895a:	d504      	bpl.n	8018966 <__sflush_r+0x7e>
 801895c:	1c42      	adds	r2, r0, #1
 801895e:	d101      	bne.n	8018964 <__sflush_r+0x7c>
 8018960:	682b      	ldr	r3, [r5, #0]
 8018962:	b903      	cbnz	r3, 8018966 <__sflush_r+0x7e>
 8018964:	6560      	str	r0, [r4, #84]	; 0x54
 8018966:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018968:	602f      	str	r7, [r5, #0]
 801896a:	2900      	cmp	r1, #0
 801896c:	d0c9      	beq.n	8018902 <__sflush_r+0x1a>
 801896e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018972:	4299      	cmp	r1, r3
 8018974:	d002      	beq.n	801897c <__sflush_r+0x94>
 8018976:	4628      	mov	r0, r5
 8018978:	f7ff fd6e 	bl	8018458 <_free_r>
 801897c:	2000      	movs	r0, #0
 801897e:	6360      	str	r0, [r4, #52]	; 0x34
 8018980:	e7c0      	b.n	8018904 <__sflush_r+0x1c>
 8018982:	2301      	movs	r3, #1
 8018984:	4628      	mov	r0, r5
 8018986:	47b0      	blx	r6
 8018988:	1c41      	adds	r1, r0, #1
 801898a:	d1c8      	bne.n	801891e <__sflush_r+0x36>
 801898c:	682b      	ldr	r3, [r5, #0]
 801898e:	2b00      	cmp	r3, #0
 8018990:	d0c5      	beq.n	801891e <__sflush_r+0x36>
 8018992:	2b1d      	cmp	r3, #29
 8018994:	d001      	beq.n	801899a <__sflush_r+0xb2>
 8018996:	2b16      	cmp	r3, #22
 8018998:	d101      	bne.n	801899e <__sflush_r+0xb6>
 801899a:	602f      	str	r7, [r5, #0]
 801899c:	e7b1      	b.n	8018902 <__sflush_r+0x1a>
 801899e:	89a3      	ldrh	r3, [r4, #12]
 80189a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80189a4:	81a3      	strh	r3, [r4, #12]
 80189a6:	e7ad      	b.n	8018904 <__sflush_r+0x1c>
 80189a8:	690f      	ldr	r7, [r1, #16]
 80189aa:	2f00      	cmp	r7, #0
 80189ac:	d0a9      	beq.n	8018902 <__sflush_r+0x1a>
 80189ae:	0793      	lsls	r3, r2, #30
 80189b0:	680e      	ldr	r6, [r1, #0]
 80189b2:	bf08      	it	eq
 80189b4:	694b      	ldreq	r3, [r1, #20]
 80189b6:	600f      	str	r7, [r1, #0]
 80189b8:	bf18      	it	ne
 80189ba:	2300      	movne	r3, #0
 80189bc:	eba6 0807 	sub.w	r8, r6, r7
 80189c0:	608b      	str	r3, [r1, #8]
 80189c2:	f1b8 0f00 	cmp.w	r8, #0
 80189c6:	dd9c      	ble.n	8018902 <__sflush_r+0x1a>
 80189c8:	4643      	mov	r3, r8
 80189ca:	463a      	mov	r2, r7
 80189cc:	6a21      	ldr	r1, [r4, #32]
 80189ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80189d0:	4628      	mov	r0, r5
 80189d2:	47b0      	blx	r6
 80189d4:	2800      	cmp	r0, #0
 80189d6:	dc06      	bgt.n	80189e6 <__sflush_r+0xfe>
 80189d8:	89a3      	ldrh	r3, [r4, #12]
 80189da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80189de:	81a3      	strh	r3, [r4, #12]
 80189e0:	f04f 30ff 	mov.w	r0, #4294967295
 80189e4:	e78e      	b.n	8018904 <__sflush_r+0x1c>
 80189e6:	4407      	add	r7, r0
 80189e8:	eba8 0800 	sub.w	r8, r8, r0
 80189ec:	e7e9      	b.n	80189c2 <__sflush_r+0xda>
 80189ee:	bf00      	nop
 80189f0:	20400001 	.word	0x20400001

080189f4 <_fflush_r>:
 80189f4:	b538      	push	{r3, r4, r5, lr}
 80189f6:	690b      	ldr	r3, [r1, #16]
 80189f8:	4605      	mov	r5, r0
 80189fa:	460c      	mov	r4, r1
 80189fc:	b1db      	cbz	r3, 8018a36 <_fflush_r+0x42>
 80189fe:	b118      	cbz	r0, 8018a08 <_fflush_r+0x14>
 8018a00:	6983      	ldr	r3, [r0, #24]
 8018a02:	b90b      	cbnz	r3, 8018a08 <_fflush_r+0x14>
 8018a04:	f000 f860 	bl	8018ac8 <__sinit>
 8018a08:	4b0c      	ldr	r3, [pc, #48]	; (8018a3c <_fflush_r+0x48>)
 8018a0a:	429c      	cmp	r4, r3
 8018a0c:	d109      	bne.n	8018a22 <_fflush_r+0x2e>
 8018a0e:	686c      	ldr	r4, [r5, #4]
 8018a10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018a14:	b17b      	cbz	r3, 8018a36 <_fflush_r+0x42>
 8018a16:	4621      	mov	r1, r4
 8018a18:	4628      	mov	r0, r5
 8018a1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018a1e:	f7ff bf63 	b.w	80188e8 <__sflush_r>
 8018a22:	4b07      	ldr	r3, [pc, #28]	; (8018a40 <_fflush_r+0x4c>)
 8018a24:	429c      	cmp	r4, r3
 8018a26:	d101      	bne.n	8018a2c <_fflush_r+0x38>
 8018a28:	68ac      	ldr	r4, [r5, #8]
 8018a2a:	e7f1      	b.n	8018a10 <_fflush_r+0x1c>
 8018a2c:	4b05      	ldr	r3, [pc, #20]	; (8018a44 <_fflush_r+0x50>)
 8018a2e:	429c      	cmp	r4, r3
 8018a30:	bf08      	it	eq
 8018a32:	68ec      	ldreq	r4, [r5, #12]
 8018a34:	e7ec      	b.n	8018a10 <_fflush_r+0x1c>
 8018a36:	2000      	movs	r0, #0
 8018a38:	bd38      	pop	{r3, r4, r5, pc}
 8018a3a:	bf00      	nop
 8018a3c:	08019fb8 	.word	0x08019fb8
 8018a40:	08019fd8 	.word	0x08019fd8
 8018a44:	08019f98 	.word	0x08019f98

08018a48 <std>:
 8018a48:	2300      	movs	r3, #0
 8018a4a:	b510      	push	{r4, lr}
 8018a4c:	4604      	mov	r4, r0
 8018a4e:	e9c0 3300 	strd	r3, r3, [r0]
 8018a52:	6083      	str	r3, [r0, #8]
 8018a54:	8181      	strh	r1, [r0, #12]
 8018a56:	6643      	str	r3, [r0, #100]	; 0x64
 8018a58:	81c2      	strh	r2, [r0, #14]
 8018a5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018a5e:	6183      	str	r3, [r0, #24]
 8018a60:	4619      	mov	r1, r3
 8018a62:	2208      	movs	r2, #8
 8018a64:	305c      	adds	r0, #92	; 0x5c
 8018a66:	f7ff fcee 	bl	8018446 <memset>
 8018a6a:	4b05      	ldr	r3, [pc, #20]	; (8018a80 <std+0x38>)
 8018a6c:	6263      	str	r3, [r4, #36]	; 0x24
 8018a6e:	4b05      	ldr	r3, [pc, #20]	; (8018a84 <std+0x3c>)
 8018a70:	62a3      	str	r3, [r4, #40]	; 0x28
 8018a72:	4b05      	ldr	r3, [pc, #20]	; (8018a88 <std+0x40>)
 8018a74:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018a76:	4b05      	ldr	r3, [pc, #20]	; (8018a8c <std+0x44>)
 8018a78:	6224      	str	r4, [r4, #32]
 8018a7a:	6323      	str	r3, [r4, #48]	; 0x30
 8018a7c:	bd10      	pop	{r4, pc}
 8018a7e:	bf00      	nop
 8018a80:	080194dd 	.word	0x080194dd
 8018a84:	080194ff 	.word	0x080194ff
 8018a88:	08019537 	.word	0x08019537
 8018a8c:	0801955b 	.word	0x0801955b

08018a90 <_cleanup_r>:
 8018a90:	4901      	ldr	r1, [pc, #4]	; (8018a98 <_cleanup_r+0x8>)
 8018a92:	f000 b885 	b.w	8018ba0 <_fwalk_reent>
 8018a96:	bf00      	nop
 8018a98:	080189f5 	.word	0x080189f5

08018a9c <__sfmoreglue>:
 8018a9c:	b570      	push	{r4, r5, r6, lr}
 8018a9e:	1e4a      	subs	r2, r1, #1
 8018aa0:	2568      	movs	r5, #104	; 0x68
 8018aa2:	4355      	muls	r5, r2
 8018aa4:	460e      	mov	r6, r1
 8018aa6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8018aaa:	f7ff fd23 	bl	80184f4 <_malloc_r>
 8018aae:	4604      	mov	r4, r0
 8018ab0:	b140      	cbz	r0, 8018ac4 <__sfmoreglue+0x28>
 8018ab2:	2100      	movs	r1, #0
 8018ab4:	e9c0 1600 	strd	r1, r6, [r0]
 8018ab8:	300c      	adds	r0, #12
 8018aba:	60a0      	str	r0, [r4, #8]
 8018abc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8018ac0:	f7ff fcc1 	bl	8018446 <memset>
 8018ac4:	4620      	mov	r0, r4
 8018ac6:	bd70      	pop	{r4, r5, r6, pc}

08018ac8 <__sinit>:
 8018ac8:	6983      	ldr	r3, [r0, #24]
 8018aca:	b510      	push	{r4, lr}
 8018acc:	4604      	mov	r4, r0
 8018ace:	bb33      	cbnz	r3, 8018b1e <__sinit+0x56>
 8018ad0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8018ad4:	6503      	str	r3, [r0, #80]	; 0x50
 8018ad6:	4b12      	ldr	r3, [pc, #72]	; (8018b20 <__sinit+0x58>)
 8018ad8:	4a12      	ldr	r2, [pc, #72]	; (8018b24 <__sinit+0x5c>)
 8018ada:	681b      	ldr	r3, [r3, #0]
 8018adc:	6282      	str	r2, [r0, #40]	; 0x28
 8018ade:	4298      	cmp	r0, r3
 8018ae0:	bf04      	itt	eq
 8018ae2:	2301      	moveq	r3, #1
 8018ae4:	6183      	streq	r3, [r0, #24]
 8018ae6:	f000 f81f 	bl	8018b28 <__sfp>
 8018aea:	6060      	str	r0, [r4, #4]
 8018aec:	4620      	mov	r0, r4
 8018aee:	f000 f81b 	bl	8018b28 <__sfp>
 8018af2:	60a0      	str	r0, [r4, #8]
 8018af4:	4620      	mov	r0, r4
 8018af6:	f000 f817 	bl	8018b28 <__sfp>
 8018afa:	2200      	movs	r2, #0
 8018afc:	60e0      	str	r0, [r4, #12]
 8018afe:	2104      	movs	r1, #4
 8018b00:	6860      	ldr	r0, [r4, #4]
 8018b02:	f7ff ffa1 	bl	8018a48 <std>
 8018b06:	2201      	movs	r2, #1
 8018b08:	2109      	movs	r1, #9
 8018b0a:	68a0      	ldr	r0, [r4, #8]
 8018b0c:	f7ff ff9c 	bl	8018a48 <std>
 8018b10:	2202      	movs	r2, #2
 8018b12:	2112      	movs	r1, #18
 8018b14:	68e0      	ldr	r0, [r4, #12]
 8018b16:	f7ff ff97 	bl	8018a48 <std>
 8018b1a:	2301      	movs	r3, #1
 8018b1c:	61a3      	str	r3, [r4, #24]
 8018b1e:	bd10      	pop	{r4, pc}
 8018b20:	08019f94 	.word	0x08019f94
 8018b24:	08018a91 	.word	0x08018a91

08018b28 <__sfp>:
 8018b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018b2a:	4b1b      	ldr	r3, [pc, #108]	; (8018b98 <__sfp+0x70>)
 8018b2c:	681e      	ldr	r6, [r3, #0]
 8018b2e:	69b3      	ldr	r3, [r6, #24]
 8018b30:	4607      	mov	r7, r0
 8018b32:	b913      	cbnz	r3, 8018b3a <__sfp+0x12>
 8018b34:	4630      	mov	r0, r6
 8018b36:	f7ff ffc7 	bl	8018ac8 <__sinit>
 8018b3a:	3648      	adds	r6, #72	; 0x48
 8018b3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8018b40:	3b01      	subs	r3, #1
 8018b42:	d503      	bpl.n	8018b4c <__sfp+0x24>
 8018b44:	6833      	ldr	r3, [r6, #0]
 8018b46:	b133      	cbz	r3, 8018b56 <__sfp+0x2e>
 8018b48:	6836      	ldr	r6, [r6, #0]
 8018b4a:	e7f7      	b.n	8018b3c <__sfp+0x14>
 8018b4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8018b50:	b16d      	cbz	r5, 8018b6e <__sfp+0x46>
 8018b52:	3468      	adds	r4, #104	; 0x68
 8018b54:	e7f4      	b.n	8018b40 <__sfp+0x18>
 8018b56:	2104      	movs	r1, #4
 8018b58:	4638      	mov	r0, r7
 8018b5a:	f7ff ff9f 	bl	8018a9c <__sfmoreglue>
 8018b5e:	6030      	str	r0, [r6, #0]
 8018b60:	2800      	cmp	r0, #0
 8018b62:	d1f1      	bne.n	8018b48 <__sfp+0x20>
 8018b64:	230c      	movs	r3, #12
 8018b66:	603b      	str	r3, [r7, #0]
 8018b68:	4604      	mov	r4, r0
 8018b6a:	4620      	mov	r0, r4
 8018b6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018b6e:	4b0b      	ldr	r3, [pc, #44]	; (8018b9c <__sfp+0x74>)
 8018b70:	6665      	str	r5, [r4, #100]	; 0x64
 8018b72:	e9c4 5500 	strd	r5, r5, [r4]
 8018b76:	60a5      	str	r5, [r4, #8]
 8018b78:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8018b7c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8018b80:	2208      	movs	r2, #8
 8018b82:	4629      	mov	r1, r5
 8018b84:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8018b88:	f7ff fc5d 	bl	8018446 <memset>
 8018b8c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8018b90:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8018b94:	e7e9      	b.n	8018b6a <__sfp+0x42>
 8018b96:	bf00      	nop
 8018b98:	08019f94 	.word	0x08019f94
 8018b9c:	ffff0001 	.word	0xffff0001

08018ba0 <_fwalk_reent>:
 8018ba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018ba4:	4680      	mov	r8, r0
 8018ba6:	4689      	mov	r9, r1
 8018ba8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8018bac:	2600      	movs	r6, #0
 8018bae:	b914      	cbnz	r4, 8018bb6 <_fwalk_reent+0x16>
 8018bb0:	4630      	mov	r0, r6
 8018bb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018bb6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8018bba:	3f01      	subs	r7, #1
 8018bbc:	d501      	bpl.n	8018bc2 <_fwalk_reent+0x22>
 8018bbe:	6824      	ldr	r4, [r4, #0]
 8018bc0:	e7f5      	b.n	8018bae <_fwalk_reent+0xe>
 8018bc2:	89ab      	ldrh	r3, [r5, #12]
 8018bc4:	2b01      	cmp	r3, #1
 8018bc6:	d907      	bls.n	8018bd8 <_fwalk_reent+0x38>
 8018bc8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018bcc:	3301      	adds	r3, #1
 8018bce:	d003      	beq.n	8018bd8 <_fwalk_reent+0x38>
 8018bd0:	4629      	mov	r1, r5
 8018bd2:	4640      	mov	r0, r8
 8018bd4:	47c8      	blx	r9
 8018bd6:	4306      	orrs	r6, r0
 8018bd8:	3568      	adds	r5, #104	; 0x68
 8018bda:	e7ee      	b.n	8018bba <_fwalk_reent+0x1a>

08018bdc <__swhatbuf_r>:
 8018bdc:	b570      	push	{r4, r5, r6, lr}
 8018bde:	460e      	mov	r6, r1
 8018be0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018be4:	2900      	cmp	r1, #0
 8018be6:	b096      	sub	sp, #88	; 0x58
 8018be8:	4614      	mov	r4, r2
 8018bea:	461d      	mov	r5, r3
 8018bec:	da07      	bge.n	8018bfe <__swhatbuf_r+0x22>
 8018bee:	2300      	movs	r3, #0
 8018bf0:	602b      	str	r3, [r5, #0]
 8018bf2:	89b3      	ldrh	r3, [r6, #12]
 8018bf4:	061a      	lsls	r2, r3, #24
 8018bf6:	d410      	bmi.n	8018c1a <__swhatbuf_r+0x3e>
 8018bf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018bfc:	e00e      	b.n	8018c1c <__swhatbuf_r+0x40>
 8018bfe:	466a      	mov	r2, sp
 8018c00:	f000 fcd2 	bl	80195a8 <_fstat_r>
 8018c04:	2800      	cmp	r0, #0
 8018c06:	dbf2      	blt.n	8018bee <__swhatbuf_r+0x12>
 8018c08:	9a01      	ldr	r2, [sp, #4]
 8018c0a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8018c0e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8018c12:	425a      	negs	r2, r3
 8018c14:	415a      	adcs	r2, r3
 8018c16:	602a      	str	r2, [r5, #0]
 8018c18:	e7ee      	b.n	8018bf8 <__swhatbuf_r+0x1c>
 8018c1a:	2340      	movs	r3, #64	; 0x40
 8018c1c:	2000      	movs	r0, #0
 8018c1e:	6023      	str	r3, [r4, #0]
 8018c20:	b016      	add	sp, #88	; 0x58
 8018c22:	bd70      	pop	{r4, r5, r6, pc}

08018c24 <__smakebuf_r>:
 8018c24:	898b      	ldrh	r3, [r1, #12]
 8018c26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018c28:	079d      	lsls	r5, r3, #30
 8018c2a:	4606      	mov	r6, r0
 8018c2c:	460c      	mov	r4, r1
 8018c2e:	d507      	bpl.n	8018c40 <__smakebuf_r+0x1c>
 8018c30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018c34:	6023      	str	r3, [r4, #0]
 8018c36:	6123      	str	r3, [r4, #16]
 8018c38:	2301      	movs	r3, #1
 8018c3a:	6163      	str	r3, [r4, #20]
 8018c3c:	b002      	add	sp, #8
 8018c3e:	bd70      	pop	{r4, r5, r6, pc}
 8018c40:	ab01      	add	r3, sp, #4
 8018c42:	466a      	mov	r2, sp
 8018c44:	f7ff ffca 	bl	8018bdc <__swhatbuf_r>
 8018c48:	9900      	ldr	r1, [sp, #0]
 8018c4a:	4605      	mov	r5, r0
 8018c4c:	4630      	mov	r0, r6
 8018c4e:	f7ff fc51 	bl	80184f4 <_malloc_r>
 8018c52:	b948      	cbnz	r0, 8018c68 <__smakebuf_r+0x44>
 8018c54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018c58:	059a      	lsls	r2, r3, #22
 8018c5a:	d4ef      	bmi.n	8018c3c <__smakebuf_r+0x18>
 8018c5c:	f023 0303 	bic.w	r3, r3, #3
 8018c60:	f043 0302 	orr.w	r3, r3, #2
 8018c64:	81a3      	strh	r3, [r4, #12]
 8018c66:	e7e3      	b.n	8018c30 <__smakebuf_r+0xc>
 8018c68:	4b0d      	ldr	r3, [pc, #52]	; (8018ca0 <__smakebuf_r+0x7c>)
 8018c6a:	62b3      	str	r3, [r6, #40]	; 0x28
 8018c6c:	89a3      	ldrh	r3, [r4, #12]
 8018c6e:	6020      	str	r0, [r4, #0]
 8018c70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018c74:	81a3      	strh	r3, [r4, #12]
 8018c76:	9b00      	ldr	r3, [sp, #0]
 8018c78:	6163      	str	r3, [r4, #20]
 8018c7a:	9b01      	ldr	r3, [sp, #4]
 8018c7c:	6120      	str	r0, [r4, #16]
 8018c7e:	b15b      	cbz	r3, 8018c98 <__smakebuf_r+0x74>
 8018c80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018c84:	4630      	mov	r0, r6
 8018c86:	f000 fca1 	bl	80195cc <_isatty_r>
 8018c8a:	b128      	cbz	r0, 8018c98 <__smakebuf_r+0x74>
 8018c8c:	89a3      	ldrh	r3, [r4, #12]
 8018c8e:	f023 0303 	bic.w	r3, r3, #3
 8018c92:	f043 0301 	orr.w	r3, r3, #1
 8018c96:	81a3      	strh	r3, [r4, #12]
 8018c98:	89a3      	ldrh	r3, [r4, #12]
 8018c9a:	431d      	orrs	r5, r3
 8018c9c:	81a5      	strh	r5, [r4, #12]
 8018c9e:	e7cd      	b.n	8018c3c <__smakebuf_r+0x18>
 8018ca0:	08018a91 	.word	0x08018a91

08018ca4 <__malloc_lock>:
 8018ca4:	4770      	bx	lr

08018ca6 <__malloc_unlock>:
 8018ca6:	4770      	bx	lr

08018ca8 <__ssputs_r>:
 8018ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018cac:	688e      	ldr	r6, [r1, #8]
 8018cae:	429e      	cmp	r6, r3
 8018cb0:	4682      	mov	sl, r0
 8018cb2:	460c      	mov	r4, r1
 8018cb4:	4690      	mov	r8, r2
 8018cb6:	4699      	mov	r9, r3
 8018cb8:	d837      	bhi.n	8018d2a <__ssputs_r+0x82>
 8018cba:	898a      	ldrh	r2, [r1, #12]
 8018cbc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018cc0:	d031      	beq.n	8018d26 <__ssputs_r+0x7e>
 8018cc2:	6825      	ldr	r5, [r4, #0]
 8018cc4:	6909      	ldr	r1, [r1, #16]
 8018cc6:	1a6f      	subs	r7, r5, r1
 8018cc8:	6965      	ldr	r5, [r4, #20]
 8018cca:	2302      	movs	r3, #2
 8018ccc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018cd0:	fb95 f5f3 	sdiv	r5, r5, r3
 8018cd4:	f109 0301 	add.w	r3, r9, #1
 8018cd8:	443b      	add	r3, r7
 8018cda:	429d      	cmp	r5, r3
 8018cdc:	bf38      	it	cc
 8018cde:	461d      	movcc	r5, r3
 8018ce0:	0553      	lsls	r3, r2, #21
 8018ce2:	d530      	bpl.n	8018d46 <__ssputs_r+0x9e>
 8018ce4:	4629      	mov	r1, r5
 8018ce6:	f7ff fc05 	bl	80184f4 <_malloc_r>
 8018cea:	4606      	mov	r6, r0
 8018cec:	b950      	cbnz	r0, 8018d04 <__ssputs_r+0x5c>
 8018cee:	230c      	movs	r3, #12
 8018cf0:	f8ca 3000 	str.w	r3, [sl]
 8018cf4:	89a3      	ldrh	r3, [r4, #12]
 8018cf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018cfa:	81a3      	strh	r3, [r4, #12]
 8018cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8018d00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018d04:	463a      	mov	r2, r7
 8018d06:	6921      	ldr	r1, [r4, #16]
 8018d08:	f7ff fb92 	bl	8018430 <memcpy>
 8018d0c:	89a3      	ldrh	r3, [r4, #12]
 8018d0e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8018d12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018d16:	81a3      	strh	r3, [r4, #12]
 8018d18:	6126      	str	r6, [r4, #16]
 8018d1a:	6165      	str	r5, [r4, #20]
 8018d1c:	443e      	add	r6, r7
 8018d1e:	1bed      	subs	r5, r5, r7
 8018d20:	6026      	str	r6, [r4, #0]
 8018d22:	60a5      	str	r5, [r4, #8]
 8018d24:	464e      	mov	r6, r9
 8018d26:	454e      	cmp	r6, r9
 8018d28:	d900      	bls.n	8018d2c <__ssputs_r+0x84>
 8018d2a:	464e      	mov	r6, r9
 8018d2c:	4632      	mov	r2, r6
 8018d2e:	4641      	mov	r1, r8
 8018d30:	6820      	ldr	r0, [r4, #0]
 8018d32:	f000 fc6d 	bl	8019610 <memmove>
 8018d36:	68a3      	ldr	r3, [r4, #8]
 8018d38:	1b9b      	subs	r3, r3, r6
 8018d3a:	60a3      	str	r3, [r4, #8]
 8018d3c:	6823      	ldr	r3, [r4, #0]
 8018d3e:	441e      	add	r6, r3
 8018d40:	6026      	str	r6, [r4, #0]
 8018d42:	2000      	movs	r0, #0
 8018d44:	e7dc      	b.n	8018d00 <__ssputs_r+0x58>
 8018d46:	462a      	mov	r2, r5
 8018d48:	f000 fc7b 	bl	8019642 <_realloc_r>
 8018d4c:	4606      	mov	r6, r0
 8018d4e:	2800      	cmp	r0, #0
 8018d50:	d1e2      	bne.n	8018d18 <__ssputs_r+0x70>
 8018d52:	6921      	ldr	r1, [r4, #16]
 8018d54:	4650      	mov	r0, sl
 8018d56:	f7ff fb7f 	bl	8018458 <_free_r>
 8018d5a:	e7c8      	b.n	8018cee <__ssputs_r+0x46>

08018d5c <_svfiprintf_r>:
 8018d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d60:	461d      	mov	r5, r3
 8018d62:	898b      	ldrh	r3, [r1, #12]
 8018d64:	061f      	lsls	r7, r3, #24
 8018d66:	b09d      	sub	sp, #116	; 0x74
 8018d68:	4680      	mov	r8, r0
 8018d6a:	460c      	mov	r4, r1
 8018d6c:	4616      	mov	r6, r2
 8018d6e:	d50f      	bpl.n	8018d90 <_svfiprintf_r+0x34>
 8018d70:	690b      	ldr	r3, [r1, #16]
 8018d72:	b96b      	cbnz	r3, 8018d90 <_svfiprintf_r+0x34>
 8018d74:	2140      	movs	r1, #64	; 0x40
 8018d76:	f7ff fbbd 	bl	80184f4 <_malloc_r>
 8018d7a:	6020      	str	r0, [r4, #0]
 8018d7c:	6120      	str	r0, [r4, #16]
 8018d7e:	b928      	cbnz	r0, 8018d8c <_svfiprintf_r+0x30>
 8018d80:	230c      	movs	r3, #12
 8018d82:	f8c8 3000 	str.w	r3, [r8]
 8018d86:	f04f 30ff 	mov.w	r0, #4294967295
 8018d8a:	e0c8      	b.n	8018f1e <_svfiprintf_r+0x1c2>
 8018d8c:	2340      	movs	r3, #64	; 0x40
 8018d8e:	6163      	str	r3, [r4, #20]
 8018d90:	2300      	movs	r3, #0
 8018d92:	9309      	str	r3, [sp, #36]	; 0x24
 8018d94:	2320      	movs	r3, #32
 8018d96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018d9a:	2330      	movs	r3, #48	; 0x30
 8018d9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018da0:	9503      	str	r5, [sp, #12]
 8018da2:	f04f 0b01 	mov.w	fp, #1
 8018da6:	4637      	mov	r7, r6
 8018da8:	463d      	mov	r5, r7
 8018daa:	f815 3b01 	ldrb.w	r3, [r5], #1
 8018dae:	b10b      	cbz	r3, 8018db4 <_svfiprintf_r+0x58>
 8018db0:	2b25      	cmp	r3, #37	; 0x25
 8018db2:	d13e      	bne.n	8018e32 <_svfiprintf_r+0xd6>
 8018db4:	ebb7 0a06 	subs.w	sl, r7, r6
 8018db8:	d00b      	beq.n	8018dd2 <_svfiprintf_r+0x76>
 8018dba:	4653      	mov	r3, sl
 8018dbc:	4632      	mov	r2, r6
 8018dbe:	4621      	mov	r1, r4
 8018dc0:	4640      	mov	r0, r8
 8018dc2:	f7ff ff71 	bl	8018ca8 <__ssputs_r>
 8018dc6:	3001      	adds	r0, #1
 8018dc8:	f000 80a4 	beq.w	8018f14 <_svfiprintf_r+0x1b8>
 8018dcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018dce:	4453      	add	r3, sl
 8018dd0:	9309      	str	r3, [sp, #36]	; 0x24
 8018dd2:	783b      	ldrb	r3, [r7, #0]
 8018dd4:	2b00      	cmp	r3, #0
 8018dd6:	f000 809d 	beq.w	8018f14 <_svfiprintf_r+0x1b8>
 8018dda:	2300      	movs	r3, #0
 8018ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8018de0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018de4:	9304      	str	r3, [sp, #16]
 8018de6:	9307      	str	r3, [sp, #28]
 8018de8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018dec:	931a      	str	r3, [sp, #104]	; 0x68
 8018dee:	462f      	mov	r7, r5
 8018df0:	2205      	movs	r2, #5
 8018df2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8018df6:	4850      	ldr	r0, [pc, #320]	; (8018f38 <_svfiprintf_r+0x1dc>)
 8018df8:	f7e7 fa7a 	bl	80002f0 <memchr>
 8018dfc:	9b04      	ldr	r3, [sp, #16]
 8018dfe:	b9d0      	cbnz	r0, 8018e36 <_svfiprintf_r+0xda>
 8018e00:	06d9      	lsls	r1, r3, #27
 8018e02:	bf44      	itt	mi
 8018e04:	2220      	movmi	r2, #32
 8018e06:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018e0a:	071a      	lsls	r2, r3, #28
 8018e0c:	bf44      	itt	mi
 8018e0e:	222b      	movmi	r2, #43	; 0x2b
 8018e10:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018e14:	782a      	ldrb	r2, [r5, #0]
 8018e16:	2a2a      	cmp	r2, #42	; 0x2a
 8018e18:	d015      	beq.n	8018e46 <_svfiprintf_r+0xea>
 8018e1a:	9a07      	ldr	r2, [sp, #28]
 8018e1c:	462f      	mov	r7, r5
 8018e1e:	2000      	movs	r0, #0
 8018e20:	250a      	movs	r5, #10
 8018e22:	4639      	mov	r1, r7
 8018e24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018e28:	3b30      	subs	r3, #48	; 0x30
 8018e2a:	2b09      	cmp	r3, #9
 8018e2c:	d94d      	bls.n	8018eca <_svfiprintf_r+0x16e>
 8018e2e:	b1b8      	cbz	r0, 8018e60 <_svfiprintf_r+0x104>
 8018e30:	e00f      	b.n	8018e52 <_svfiprintf_r+0xf6>
 8018e32:	462f      	mov	r7, r5
 8018e34:	e7b8      	b.n	8018da8 <_svfiprintf_r+0x4c>
 8018e36:	4a40      	ldr	r2, [pc, #256]	; (8018f38 <_svfiprintf_r+0x1dc>)
 8018e38:	1a80      	subs	r0, r0, r2
 8018e3a:	fa0b f000 	lsl.w	r0, fp, r0
 8018e3e:	4318      	orrs	r0, r3
 8018e40:	9004      	str	r0, [sp, #16]
 8018e42:	463d      	mov	r5, r7
 8018e44:	e7d3      	b.n	8018dee <_svfiprintf_r+0x92>
 8018e46:	9a03      	ldr	r2, [sp, #12]
 8018e48:	1d11      	adds	r1, r2, #4
 8018e4a:	6812      	ldr	r2, [r2, #0]
 8018e4c:	9103      	str	r1, [sp, #12]
 8018e4e:	2a00      	cmp	r2, #0
 8018e50:	db01      	blt.n	8018e56 <_svfiprintf_r+0xfa>
 8018e52:	9207      	str	r2, [sp, #28]
 8018e54:	e004      	b.n	8018e60 <_svfiprintf_r+0x104>
 8018e56:	4252      	negs	r2, r2
 8018e58:	f043 0302 	orr.w	r3, r3, #2
 8018e5c:	9207      	str	r2, [sp, #28]
 8018e5e:	9304      	str	r3, [sp, #16]
 8018e60:	783b      	ldrb	r3, [r7, #0]
 8018e62:	2b2e      	cmp	r3, #46	; 0x2e
 8018e64:	d10c      	bne.n	8018e80 <_svfiprintf_r+0x124>
 8018e66:	787b      	ldrb	r3, [r7, #1]
 8018e68:	2b2a      	cmp	r3, #42	; 0x2a
 8018e6a:	d133      	bne.n	8018ed4 <_svfiprintf_r+0x178>
 8018e6c:	9b03      	ldr	r3, [sp, #12]
 8018e6e:	1d1a      	adds	r2, r3, #4
 8018e70:	681b      	ldr	r3, [r3, #0]
 8018e72:	9203      	str	r2, [sp, #12]
 8018e74:	2b00      	cmp	r3, #0
 8018e76:	bfb8      	it	lt
 8018e78:	f04f 33ff 	movlt.w	r3, #4294967295
 8018e7c:	3702      	adds	r7, #2
 8018e7e:	9305      	str	r3, [sp, #20]
 8018e80:	4d2e      	ldr	r5, [pc, #184]	; (8018f3c <_svfiprintf_r+0x1e0>)
 8018e82:	7839      	ldrb	r1, [r7, #0]
 8018e84:	2203      	movs	r2, #3
 8018e86:	4628      	mov	r0, r5
 8018e88:	f7e7 fa32 	bl	80002f0 <memchr>
 8018e8c:	b138      	cbz	r0, 8018e9e <_svfiprintf_r+0x142>
 8018e8e:	2340      	movs	r3, #64	; 0x40
 8018e90:	1b40      	subs	r0, r0, r5
 8018e92:	fa03 f000 	lsl.w	r0, r3, r0
 8018e96:	9b04      	ldr	r3, [sp, #16]
 8018e98:	4303      	orrs	r3, r0
 8018e9a:	3701      	adds	r7, #1
 8018e9c:	9304      	str	r3, [sp, #16]
 8018e9e:	7839      	ldrb	r1, [r7, #0]
 8018ea0:	4827      	ldr	r0, [pc, #156]	; (8018f40 <_svfiprintf_r+0x1e4>)
 8018ea2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018ea6:	2206      	movs	r2, #6
 8018ea8:	1c7e      	adds	r6, r7, #1
 8018eaa:	f7e7 fa21 	bl	80002f0 <memchr>
 8018eae:	2800      	cmp	r0, #0
 8018eb0:	d038      	beq.n	8018f24 <_svfiprintf_r+0x1c8>
 8018eb2:	4b24      	ldr	r3, [pc, #144]	; (8018f44 <_svfiprintf_r+0x1e8>)
 8018eb4:	bb13      	cbnz	r3, 8018efc <_svfiprintf_r+0x1a0>
 8018eb6:	9b03      	ldr	r3, [sp, #12]
 8018eb8:	3307      	adds	r3, #7
 8018eba:	f023 0307 	bic.w	r3, r3, #7
 8018ebe:	3308      	adds	r3, #8
 8018ec0:	9303      	str	r3, [sp, #12]
 8018ec2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018ec4:	444b      	add	r3, r9
 8018ec6:	9309      	str	r3, [sp, #36]	; 0x24
 8018ec8:	e76d      	b.n	8018da6 <_svfiprintf_r+0x4a>
 8018eca:	fb05 3202 	mla	r2, r5, r2, r3
 8018ece:	2001      	movs	r0, #1
 8018ed0:	460f      	mov	r7, r1
 8018ed2:	e7a6      	b.n	8018e22 <_svfiprintf_r+0xc6>
 8018ed4:	2300      	movs	r3, #0
 8018ed6:	3701      	adds	r7, #1
 8018ed8:	9305      	str	r3, [sp, #20]
 8018eda:	4619      	mov	r1, r3
 8018edc:	250a      	movs	r5, #10
 8018ede:	4638      	mov	r0, r7
 8018ee0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018ee4:	3a30      	subs	r2, #48	; 0x30
 8018ee6:	2a09      	cmp	r2, #9
 8018ee8:	d903      	bls.n	8018ef2 <_svfiprintf_r+0x196>
 8018eea:	2b00      	cmp	r3, #0
 8018eec:	d0c8      	beq.n	8018e80 <_svfiprintf_r+0x124>
 8018eee:	9105      	str	r1, [sp, #20]
 8018ef0:	e7c6      	b.n	8018e80 <_svfiprintf_r+0x124>
 8018ef2:	fb05 2101 	mla	r1, r5, r1, r2
 8018ef6:	2301      	movs	r3, #1
 8018ef8:	4607      	mov	r7, r0
 8018efa:	e7f0      	b.n	8018ede <_svfiprintf_r+0x182>
 8018efc:	ab03      	add	r3, sp, #12
 8018efe:	9300      	str	r3, [sp, #0]
 8018f00:	4622      	mov	r2, r4
 8018f02:	4b11      	ldr	r3, [pc, #68]	; (8018f48 <_svfiprintf_r+0x1ec>)
 8018f04:	a904      	add	r1, sp, #16
 8018f06:	4640      	mov	r0, r8
 8018f08:	f3af 8000 	nop.w
 8018f0c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8018f10:	4681      	mov	r9, r0
 8018f12:	d1d6      	bne.n	8018ec2 <_svfiprintf_r+0x166>
 8018f14:	89a3      	ldrh	r3, [r4, #12]
 8018f16:	065b      	lsls	r3, r3, #25
 8018f18:	f53f af35 	bmi.w	8018d86 <_svfiprintf_r+0x2a>
 8018f1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018f1e:	b01d      	add	sp, #116	; 0x74
 8018f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f24:	ab03      	add	r3, sp, #12
 8018f26:	9300      	str	r3, [sp, #0]
 8018f28:	4622      	mov	r2, r4
 8018f2a:	4b07      	ldr	r3, [pc, #28]	; (8018f48 <_svfiprintf_r+0x1ec>)
 8018f2c:	a904      	add	r1, sp, #16
 8018f2e:	4640      	mov	r0, r8
 8018f30:	f000 f9c2 	bl	80192b8 <_printf_i>
 8018f34:	e7ea      	b.n	8018f0c <_svfiprintf_r+0x1b0>
 8018f36:	bf00      	nop
 8018f38:	08019ff8 	.word	0x08019ff8
 8018f3c:	08019ffe 	.word	0x08019ffe
 8018f40:	0801a002 	.word	0x0801a002
 8018f44:	00000000 	.word	0x00000000
 8018f48:	08018ca9 	.word	0x08018ca9

08018f4c <__sfputc_r>:
 8018f4c:	6893      	ldr	r3, [r2, #8]
 8018f4e:	3b01      	subs	r3, #1
 8018f50:	2b00      	cmp	r3, #0
 8018f52:	b410      	push	{r4}
 8018f54:	6093      	str	r3, [r2, #8]
 8018f56:	da08      	bge.n	8018f6a <__sfputc_r+0x1e>
 8018f58:	6994      	ldr	r4, [r2, #24]
 8018f5a:	42a3      	cmp	r3, r4
 8018f5c:	db01      	blt.n	8018f62 <__sfputc_r+0x16>
 8018f5e:	290a      	cmp	r1, #10
 8018f60:	d103      	bne.n	8018f6a <__sfputc_r+0x1e>
 8018f62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018f66:	f7ff bbff 	b.w	8018768 <__swbuf_r>
 8018f6a:	6813      	ldr	r3, [r2, #0]
 8018f6c:	1c58      	adds	r0, r3, #1
 8018f6e:	6010      	str	r0, [r2, #0]
 8018f70:	7019      	strb	r1, [r3, #0]
 8018f72:	4608      	mov	r0, r1
 8018f74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018f78:	4770      	bx	lr

08018f7a <__sfputs_r>:
 8018f7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018f7c:	4606      	mov	r6, r0
 8018f7e:	460f      	mov	r7, r1
 8018f80:	4614      	mov	r4, r2
 8018f82:	18d5      	adds	r5, r2, r3
 8018f84:	42ac      	cmp	r4, r5
 8018f86:	d101      	bne.n	8018f8c <__sfputs_r+0x12>
 8018f88:	2000      	movs	r0, #0
 8018f8a:	e007      	b.n	8018f9c <__sfputs_r+0x22>
 8018f8c:	463a      	mov	r2, r7
 8018f8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018f92:	4630      	mov	r0, r6
 8018f94:	f7ff ffda 	bl	8018f4c <__sfputc_r>
 8018f98:	1c43      	adds	r3, r0, #1
 8018f9a:	d1f3      	bne.n	8018f84 <__sfputs_r+0xa>
 8018f9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018fa0 <_vfiprintf_r>:
 8018fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018fa4:	460c      	mov	r4, r1
 8018fa6:	b09d      	sub	sp, #116	; 0x74
 8018fa8:	4617      	mov	r7, r2
 8018faa:	461d      	mov	r5, r3
 8018fac:	4606      	mov	r6, r0
 8018fae:	b118      	cbz	r0, 8018fb8 <_vfiprintf_r+0x18>
 8018fb0:	6983      	ldr	r3, [r0, #24]
 8018fb2:	b90b      	cbnz	r3, 8018fb8 <_vfiprintf_r+0x18>
 8018fb4:	f7ff fd88 	bl	8018ac8 <__sinit>
 8018fb8:	4b7c      	ldr	r3, [pc, #496]	; (80191ac <_vfiprintf_r+0x20c>)
 8018fba:	429c      	cmp	r4, r3
 8018fbc:	d158      	bne.n	8019070 <_vfiprintf_r+0xd0>
 8018fbe:	6874      	ldr	r4, [r6, #4]
 8018fc0:	89a3      	ldrh	r3, [r4, #12]
 8018fc2:	0718      	lsls	r0, r3, #28
 8018fc4:	d55e      	bpl.n	8019084 <_vfiprintf_r+0xe4>
 8018fc6:	6923      	ldr	r3, [r4, #16]
 8018fc8:	2b00      	cmp	r3, #0
 8018fca:	d05b      	beq.n	8019084 <_vfiprintf_r+0xe4>
 8018fcc:	2300      	movs	r3, #0
 8018fce:	9309      	str	r3, [sp, #36]	; 0x24
 8018fd0:	2320      	movs	r3, #32
 8018fd2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018fd6:	2330      	movs	r3, #48	; 0x30
 8018fd8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018fdc:	9503      	str	r5, [sp, #12]
 8018fde:	f04f 0b01 	mov.w	fp, #1
 8018fe2:	46b8      	mov	r8, r7
 8018fe4:	4645      	mov	r5, r8
 8018fe6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8018fea:	b10b      	cbz	r3, 8018ff0 <_vfiprintf_r+0x50>
 8018fec:	2b25      	cmp	r3, #37	; 0x25
 8018fee:	d154      	bne.n	801909a <_vfiprintf_r+0xfa>
 8018ff0:	ebb8 0a07 	subs.w	sl, r8, r7
 8018ff4:	d00b      	beq.n	801900e <_vfiprintf_r+0x6e>
 8018ff6:	4653      	mov	r3, sl
 8018ff8:	463a      	mov	r2, r7
 8018ffa:	4621      	mov	r1, r4
 8018ffc:	4630      	mov	r0, r6
 8018ffe:	f7ff ffbc 	bl	8018f7a <__sfputs_r>
 8019002:	3001      	adds	r0, #1
 8019004:	f000 80c2 	beq.w	801918c <_vfiprintf_r+0x1ec>
 8019008:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801900a:	4453      	add	r3, sl
 801900c:	9309      	str	r3, [sp, #36]	; 0x24
 801900e:	f898 3000 	ldrb.w	r3, [r8]
 8019012:	2b00      	cmp	r3, #0
 8019014:	f000 80ba 	beq.w	801918c <_vfiprintf_r+0x1ec>
 8019018:	2300      	movs	r3, #0
 801901a:	f04f 32ff 	mov.w	r2, #4294967295
 801901e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019022:	9304      	str	r3, [sp, #16]
 8019024:	9307      	str	r3, [sp, #28]
 8019026:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801902a:	931a      	str	r3, [sp, #104]	; 0x68
 801902c:	46a8      	mov	r8, r5
 801902e:	2205      	movs	r2, #5
 8019030:	f818 1b01 	ldrb.w	r1, [r8], #1
 8019034:	485e      	ldr	r0, [pc, #376]	; (80191b0 <_vfiprintf_r+0x210>)
 8019036:	f7e7 f95b 	bl	80002f0 <memchr>
 801903a:	9b04      	ldr	r3, [sp, #16]
 801903c:	bb78      	cbnz	r0, 801909e <_vfiprintf_r+0xfe>
 801903e:	06d9      	lsls	r1, r3, #27
 8019040:	bf44      	itt	mi
 8019042:	2220      	movmi	r2, #32
 8019044:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019048:	071a      	lsls	r2, r3, #28
 801904a:	bf44      	itt	mi
 801904c:	222b      	movmi	r2, #43	; 0x2b
 801904e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019052:	782a      	ldrb	r2, [r5, #0]
 8019054:	2a2a      	cmp	r2, #42	; 0x2a
 8019056:	d02a      	beq.n	80190ae <_vfiprintf_r+0x10e>
 8019058:	9a07      	ldr	r2, [sp, #28]
 801905a:	46a8      	mov	r8, r5
 801905c:	2000      	movs	r0, #0
 801905e:	250a      	movs	r5, #10
 8019060:	4641      	mov	r1, r8
 8019062:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019066:	3b30      	subs	r3, #48	; 0x30
 8019068:	2b09      	cmp	r3, #9
 801906a:	d969      	bls.n	8019140 <_vfiprintf_r+0x1a0>
 801906c:	b360      	cbz	r0, 80190c8 <_vfiprintf_r+0x128>
 801906e:	e024      	b.n	80190ba <_vfiprintf_r+0x11a>
 8019070:	4b50      	ldr	r3, [pc, #320]	; (80191b4 <_vfiprintf_r+0x214>)
 8019072:	429c      	cmp	r4, r3
 8019074:	d101      	bne.n	801907a <_vfiprintf_r+0xda>
 8019076:	68b4      	ldr	r4, [r6, #8]
 8019078:	e7a2      	b.n	8018fc0 <_vfiprintf_r+0x20>
 801907a:	4b4f      	ldr	r3, [pc, #316]	; (80191b8 <_vfiprintf_r+0x218>)
 801907c:	429c      	cmp	r4, r3
 801907e:	bf08      	it	eq
 8019080:	68f4      	ldreq	r4, [r6, #12]
 8019082:	e79d      	b.n	8018fc0 <_vfiprintf_r+0x20>
 8019084:	4621      	mov	r1, r4
 8019086:	4630      	mov	r0, r6
 8019088:	f7ff fbc0 	bl	801880c <__swsetup_r>
 801908c:	2800      	cmp	r0, #0
 801908e:	d09d      	beq.n	8018fcc <_vfiprintf_r+0x2c>
 8019090:	f04f 30ff 	mov.w	r0, #4294967295
 8019094:	b01d      	add	sp, #116	; 0x74
 8019096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801909a:	46a8      	mov	r8, r5
 801909c:	e7a2      	b.n	8018fe4 <_vfiprintf_r+0x44>
 801909e:	4a44      	ldr	r2, [pc, #272]	; (80191b0 <_vfiprintf_r+0x210>)
 80190a0:	1a80      	subs	r0, r0, r2
 80190a2:	fa0b f000 	lsl.w	r0, fp, r0
 80190a6:	4318      	orrs	r0, r3
 80190a8:	9004      	str	r0, [sp, #16]
 80190aa:	4645      	mov	r5, r8
 80190ac:	e7be      	b.n	801902c <_vfiprintf_r+0x8c>
 80190ae:	9a03      	ldr	r2, [sp, #12]
 80190b0:	1d11      	adds	r1, r2, #4
 80190b2:	6812      	ldr	r2, [r2, #0]
 80190b4:	9103      	str	r1, [sp, #12]
 80190b6:	2a00      	cmp	r2, #0
 80190b8:	db01      	blt.n	80190be <_vfiprintf_r+0x11e>
 80190ba:	9207      	str	r2, [sp, #28]
 80190bc:	e004      	b.n	80190c8 <_vfiprintf_r+0x128>
 80190be:	4252      	negs	r2, r2
 80190c0:	f043 0302 	orr.w	r3, r3, #2
 80190c4:	9207      	str	r2, [sp, #28]
 80190c6:	9304      	str	r3, [sp, #16]
 80190c8:	f898 3000 	ldrb.w	r3, [r8]
 80190cc:	2b2e      	cmp	r3, #46	; 0x2e
 80190ce:	d10e      	bne.n	80190ee <_vfiprintf_r+0x14e>
 80190d0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80190d4:	2b2a      	cmp	r3, #42	; 0x2a
 80190d6:	d138      	bne.n	801914a <_vfiprintf_r+0x1aa>
 80190d8:	9b03      	ldr	r3, [sp, #12]
 80190da:	1d1a      	adds	r2, r3, #4
 80190dc:	681b      	ldr	r3, [r3, #0]
 80190de:	9203      	str	r2, [sp, #12]
 80190e0:	2b00      	cmp	r3, #0
 80190e2:	bfb8      	it	lt
 80190e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80190e8:	f108 0802 	add.w	r8, r8, #2
 80190ec:	9305      	str	r3, [sp, #20]
 80190ee:	4d33      	ldr	r5, [pc, #204]	; (80191bc <_vfiprintf_r+0x21c>)
 80190f0:	f898 1000 	ldrb.w	r1, [r8]
 80190f4:	2203      	movs	r2, #3
 80190f6:	4628      	mov	r0, r5
 80190f8:	f7e7 f8fa 	bl	80002f0 <memchr>
 80190fc:	b140      	cbz	r0, 8019110 <_vfiprintf_r+0x170>
 80190fe:	2340      	movs	r3, #64	; 0x40
 8019100:	1b40      	subs	r0, r0, r5
 8019102:	fa03 f000 	lsl.w	r0, r3, r0
 8019106:	9b04      	ldr	r3, [sp, #16]
 8019108:	4303      	orrs	r3, r0
 801910a:	f108 0801 	add.w	r8, r8, #1
 801910e:	9304      	str	r3, [sp, #16]
 8019110:	f898 1000 	ldrb.w	r1, [r8]
 8019114:	482a      	ldr	r0, [pc, #168]	; (80191c0 <_vfiprintf_r+0x220>)
 8019116:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801911a:	2206      	movs	r2, #6
 801911c:	f108 0701 	add.w	r7, r8, #1
 8019120:	f7e7 f8e6 	bl	80002f0 <memchr>
 8019124:	2800      	cmp	r0, #0
 8019126:	d037      	beq.n	8019198 <_vfiprintf_r+0x1f8>
 8019128:	4b26      	ldr	r3, [pc, #152]	; (80191c4 <_vfiprintf_r+0x224>)
 801912a:	bb1b      	cbnz	r3, 8019174 <_vfiprintf_r+0x1d4>
 801912c:	9b03      	ldr	r3, [sp, #12]
 801912e:	3307      	adds	r3, #7
 8019130:	f023 0307 	bic.w	r3, r3, #7
 8019134:	3308      	adds	r3, #8
 8019136:	9303      	str	r3, [sp, #12]
 8019138:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801913a:	444b      	add	r3, r9
 801913c:	9309      	str	r3, [sp, #36]	; 0x24
 801913e:	e750      	b.n	8018fe2 <_vfiprintf_r+0x42>
 8019140:	fb05 3202 	mla	r2, r5, r2, r3
 8019144:	2001      	movs	r0, #1
 8019146:	4688      	mov	r8, r1
 8019148:	e78a      	b.n	8019060 <_vfiprintf_r+0xc0>
 801914a:	2300      	movs	r3, #0
 801914c:	f108 0801 	add.w	r8, r8, #1
 8019150:	9305      	str	r3, [sp, #20]
 8019152:	4619      	mov	r1, r3
 8019154:	250a      	movs	r5, #10
 8019156:	4640      	mov	r0, r8
 8019158:	f810 2b01 	ldrb.w	r2, [r0], #1
 801915c:	3a30      	subs	r2, #48	; 0x30
 801915e:	2a09      	cmp	r2, #9
 8019160:	d903      	bls.n	801916a <_vfiprintf_r+0x1ca>
 8019162:	2b00      	cmp	r3, #0
 8019164:	d0c3      	beq.n	80190ee <_vfiprintf_r+0x14e>
 8019166:	9105      	str	r1, [sp, #20]
 8019168:	e7c1      	b.n	80190ee <_vfiprintf_r+0x14e>
 801916a:	fb05 2101 	mla	r1, r5, r1, r2
 801916e:	2301      	movs	r3, #1
 8019170:	4680      	mov	r8, r0
 8019172:	e7f0      	b.n	8019156 <_vfiprintf_r+0x1b6>
 8019174:	ab03      	add	r3, sp, #12
 8019176:	9300      	str	r3, [sp, #0]
 8019178:	4622      	mov	r2, r4
 801917a:	4b13      	ldr	r3, [pc, #76]	; (80191c8 <_vfiprintf_r+0x228>)
 801917c:	a904      	add	r1, sp, #16
 801917e:	4630      	mov	r0, r6
 8019180:	f3af 8000 	nop.w
 8019184:	f1b0 3fff 	cmp.w	r0, #4294967295
 8019188:	4681      	mov	r9, r0
 801918a:	d1d5      	bne.n	8019138 <_vfiprintf_r+0x198>
 801918c:	89a3      	ldrh	r3, [r4, #12]
 801918e:	065b      	lsls	r3, r3, #25
 8019190:	f53f af7e 	bmi.w	8019090 <_vfiprintf_r+0xf0>
 8019194:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019196:	e77d      	b.n	8019094 <_vfiprintf_r+0xf4>
 8019198:	ab03      	add	r3, sp, #12
 801919a:	9300      	str	r3, [sp, #0]
 801919c:	4622      	mov	r2, r4
 801919e:	4b0a      	ldr	r3, [pc, #40]	; (80191c8 <_vfiprintf_r+0x228>)
 80191a0:	a904      	add	r1, sp, #16
 80191a2:	4630      	mov	r0, r6
 80191a4:	f000 f888 	bl	80192b8 <_printf_i>
 80191a8:	e7ec      	b.n	8019184 <_vfiprintf_r+0x1e4>
 80191aa:	bf00      	nop
 80191ac:	08019fb8 	.word	0x08019fb8
 80191b0:	08019ff8 	.word	0x08019ff8
 80191b4:	08019fd8 	.word	0x08019fd8
 80191b8:	08019f98 	.word	0x08019f98
 80191bc:	08019ffe 	.word	0x08019ffe
 80191c0:	0801a002 	.word	0x0801a002
 80191c4:	00000000 	.word	0x00000000
 80191c8:	08018f7b 	.word	0x08018f7b

080191cc <_printf_common>:
 80191cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80191d0:	4691      	mov	r9, r2
 80191d2:	461f      	mov	r7, r3
 80191d4:	688a      	ldr	r2, [r1, #8]
 80191d6:	690b      	ldr	r3, [r1, #16]
 80191d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80191dc:	4293      	cmp	r3, r2
 80191de:	bfb8      	it	lt
 80191e0:	4613      	movlt	r3, r2
 80191e2:	f8c9 3000 	str.w	r3, [r9]
 80191e6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80191ea:	4606      	mov	r6, r0
 80191ec:	460c      	mov	r4, r1
 80191ee:	b112      	cbz	r2, 80191f6 <_printf_common+0x2a>
 80191f0:	3301      	adds	r3, #1
 80191f2:	f8c9 3000 	str.w	r3, [r9]
 80191f6:	6823      	ldr	r3, [r4, #0]
 80191f8:	0699      	lsls	r1, r3, #26
 80191fa:	bf42      	ittt	mi
 80191fc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8019200:	3302      	addmi	r3, #2
 8019202:	f8c9 3000 	strmi.w	r3, [r9]
 8019206:	6825      	ldr	r5, [r4, #0]
 8019208:	f015 0506 	ands.w	r5, r5, #6
 801920c:	d107      	bne.n	801921e <_printf_common+0x52>
 801920e:	f104 0a19 	add.w	sl, r4, #25
 8019212:	68e3      	ldr	r3, [r4, #12]
 8019214:	f8d9 2000 	ldr.w	r2, [r9]
 8019218:	1a9b      	subs	r3, r3, r2
 801921a:	42ab      	cmp	r3, r5
 801921c:	dc28      	bgt.n	8019270 <_printf_common+0xa4>
 801921e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8019222:	6822      	ldr	r2, [r4, #0]
 8019224:	3300      	adds	r3, #0
 8019226:	bf18      	it	ne
 8019228:	2301      	movne	r3, #1
 801922a:	0692      	lsls	r2, r2, #26
 801922c:	d42d      	bmi.n	801928a <_printf_common+0xbe>
 801922e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019232:	4639      	mov	r1, r7
 8019234:	4630      	mov	r0, r6
 8019236:	47c0      	blx	r8
 8019238:	3001      	adds	r0, #1
 801923a:	d020      	beq.n	801927e <_printf_common+0xb2>
 801923c:	6823      	ldr	r3, [r4, #0]
 801923e:	68e5      	ldr	r5, [r4, #12]
 8019240:	f8d9 2000 	ldr.w	r2, [r9]
 8019244:	f003 0306 	and.w	r3, r3, #6
 8019248:	2b04      	cmp	r3, #4
 801924a:	bf08      	it	eq
 801924c:	1aad      	subeq	r5, r5, r2
 801924e:	68a3      	ldr	r3, [r4, #8]
 8019250:	6922      	ldr	r2, [r4, #16]
 8019252:	bf0c      	ite	eq
 8019254:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019258:	2500      	movne	r5, #0
 801925a:	4293      	cmp	r3, r2
 801925c:	bfc4      	itt	gt
 801925e:	1a9b      	subgt	r3, r3, r2
 8019260:	18ed      	addgt	r5, r5, r3
 8019262:	f04f 0900 	mov.w	r9, #0
 8019266:	341a      	adds	r4, #26
 8019268:	454d      	cmp	r5, r9
 801926a:	d11a      	bne.n	80192a2 <_printf_common+0xd6>
 801926c:	2000      	movs	r0, #0
 801926e:	e008      	b.n	8019282 <_printf_common+0xb6>
 8019270:	2301      	movs	r3, #1
 8019272:	4652      	mov	r2, sl
 8019274:	4639      	mov	r1, r7
 8019276:	4630      	mov	r0, r6
 8019278:	47c0      	blx	r8
 801927a:	3001      	adds	r0, #1
 801927c:	d103      	bne.n	8019286 <_printf_common+0xba>
 801927e:	f04f 30ff 	mov.w	r0, #4294967295
 8019282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019286:	3501      	adds	r5, #1
 8019288:	e7c3      	b.n	8019212 <_printf_common+0x46>
 801928a:	18e1      	adds	r1, r4, r3
 801928c:	1c5a      	adds	r2, r3, #1
 801928e:	2030      	movs	r0, #48	; 0x30
 8019290:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019294:	4422      	add	r2, r4
 8019296:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801929a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801929e:	3302      	adds	r3, #2
 80192a0:	e7c5      	b.n	801922e <_printf_common+0x62>
 80192a2:	2301      	movs	r3, #1
 80192a4:	4622      	mov	r2, r4
 80192a6:	4639      	mov	r1, r7
 80192a8:	4630      	mov	r0, r6
 80192aa:	47c0      	blx	r8
 80192ac:	3001      	adds	r0, #1
 80192ae:	d0e6      	beq.n	801927e <_printf_common+0xb2>
 80192b0:	f109 0901 	add.w	r9, r9, #1
 80192b4:	e7d8      	b.n	8019268 <_printf_common+0x9c>
	...

080192b8 <_printf_i>:
 80192b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80192bc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80192c0:	460c      	mov	r4, r1
 80192c2:	7e09      	ldrb	r1, [r1, #24]
 80192c4:	b085      	sub	sp, #20
 80192c6:	296e      	cmp	r1, #110	; 0x6e
 80192c8:	4617      	mov	r7, r2
 80192ca:	4606      	mov	r6, r0
 80192cc:	4698      	mov	r8, r3
 80192ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80192d0:	f000 80b3 	beq.w	801943a <_printf_i+0x182>
 80192d4:	d822      	bhi.n	801931c <_printf_i+0x64>
 80192d6:	2963      	cmp	r1, #99	; 0x63
 80192d8:	d036      	beq.n	8019348 <_printf_i+0x90>
 80192da:	d80a      	bhi.n	80192f2 <_printf_i+0x3a>
 80192dc:	2900      	cmp	r1, #0
 80192de:	f000 80b9 	beq.w	8019454 <_printf_i+0x19c>
 80192e2:	2958      	cmp	r1, #88	; 0x58
 80192e4:	f000 8083 	beq.w	80193ee <_printf_i+0x136>
 80192e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80192ec:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80192f0:	e032      	b.n	8019358 <_printf_i+0xa0>
 80192f2:	2964      	cmp	r1, #100	; 0x64
 80192f4:	d001      	beq.n	80192fa <_printf_i+0x42>
 80192f6:	2969      	cmp	r1, #105	; 0x69
 80192f8:	d1f6      	bne.n	80192e8 <_printf_i+0x30>
 80192fa:	6820      	ldr	r0, [r4, #0]
 80192fc:	6813      	ldr	r3, [r2, #0]
 80192fe:	0605      	lsls	r5, r0, #24
 8019300:	f103 0104 	add.w	r1, r3, #4
 8019304:	d52a      	bpl.n	801935c <_printf_i+0xa4>
 8019306:	681b      	ldr	r3, [r3, #0]
 8019308:	6011      	str	r1, [r2, #0]
 801930a:	2b00      	cmp	r3, #0
 801930c:	da03      	bge.n	8019316 <_printf_i+0x5e>
 801930e:	222d      	movs	r2, #45	; 0x2d
 8019310:	425b      	negs	r3, r3
 8019312:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8019316:	486f      	ldr	r0, [pc, #444]	; (80194d4 <_printf_i+0x21c>)
 8019318:	220a      	movs	r2, #10
 801931a:	e039      	b.n	8019390 <_printf_i+0xd8>
 801931c:	2973      	cmp	r1, #115	; 0x73
 801931e:	f000 809d 	beq.w	801945c <_printf_i+0x1a4>
 8019322:	d808      	bhi.n	8019336 <_printf_i+0x7e>
 8019324:	296f      	cmp	r1, #111	; 0x6f
 8019326:	d020      	beq.n	801936a <_printf_i+0xb2>
 8019328:	2970      	cmp	r1, #112	; 0x70
 801932a:	d1dd      	bne.n	80192e8 <_printf_i+0x30>
 801932c:	6823      	ldr	r3, [r4, #0]
 801932e:	f043 0320 	orr.w	r3, r3, #32
 8019332:	6023      	str	r3, [r4, #0]
 8019334:	e003      	b.n	801933e <_printf_i+0x86>
 8019336:	2975      	cmp	r1, #117	; 0x75
 8019338:	d017      	beq.n	801936a <_printf_i+0xb2>
 801933a:	2978      	cmp	r1, #120	; 0x78
 801933c:	d1d4      	bne.n	80192e8 <_printf_i+0x30>
 801933e:	2378      	movs	r3, #120	; 0x78
 8019340:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8019344:	4864      	ldr	r0, [pc, #400]	; (80194d8 <_printf_i+0x220>)
 8019346:	e055      	b.n	80193f4 <_printf_i+0x13c>
 8019348:	6813      	ldr	r3, [r2, #0]
 801934a:	1d19      	adds	r1, r3, #4
 801934c:	681b      	ldr	r3, [r3, #0]
 801934e:	6011      	str	r1, [r2, #0]
 8019350:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019354:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019358:	2301      	movs	r3, #1
 801935a:	e08c      	b.n	8019476 <_printf_i+0x1be>
 801935c:	681b      	ldr	r3, [r3, #0]
 801935e:	6011      	str	r1, [r2, #0]
 8019360:	f010 0f40 	tst.w	r0, #64	; 0x40
 8019364:	bf18      	it	ne
 8019366:	b21b      	sxthne	r3, r3
 8019368:	e7cf      	b.n	801930a <_printf_i+0x52>
 801936a:	6813      	ldr	r3, [r2, #0]
 801936c:	6825      	ldr	r5, [r4, #0]
 801936e:	1d18      	adds	r0, r3, #4
 8019370:	6010      	str	r0, [r2, #0]
 8019372:	0628      	lsls	r0, r5, #24
 8019374:	d501      	bpl.n	801937a <_printf_i+0xc2>
 8019376:	681b      	ldr	r3, [r3, #0]
 8019378:	e002      	b.n	8019380 <_printf_i+0xc8>
 801937a:	0668      	lsls	r0, r5, #25
 801937c:	d5fb      	bpl.n	8019376 <_printf_i+0xbe>
 801937e:	881b      	ldrh	r3, [r3, #0]
 8019380:	4854      	ldr	r0, [pc, #336]	; (80194d4 <_printf_i+0x21c>)
 8019382:	296f      	cmp	r1, #111	; 0x6f
 8019384:	bf14      	ite	ne
 8019386:	220a      	movne	r2, #10
 8019388:	2208      	moveq	r2, #8
 801938a:	2100      	movs	r1, #0
 801938c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8019390:	6865      	ldr	r5, [r4, #4]
 8019392:	60a5      	str	r5, [r4, #8]
 8019394:	2d00      	cmp	r5, #0
 8019396:	f2c0 8095 	blt.w	80194c4 <_printf_i+0x20c>
 801939a:	6821      	ldr	r1, [r4, #0]
 801939c:	f021 0104 	bic.w	r1, r1, #4
 80193a0:	6021      	str	r1, [r4, #0]
 80193a2:	2b00      	cmp	r3, #0
 80193a4:	d13d      	bne.n	8019422 <_printf_i+0x16a>
 80193a6:	2d00      	cmp	r5, #0
 80193a8:	f040 808e 	bne.w	80194c8 <_printf_i+0x210>
 80193ac:	4665      	mov	r5, ip
 80193ae:	2a08      	cmp	r2, #8
 80193b0:	d10b      	bne.n	80193ca <_printf_i+0x112>
 80193b2:	6823      	ldr	r3, [r4, #0]
 80193b4:	07db      	lsls	r3, r3, #31
 80193b6:	d508      	bpl.n	80193ca <_printf_i+0x112>
 80193b8:	6923      	ldr	r3, [r4, #16]
 80193ba:	6862      	ldr	r2, [r4, #4]
 80193bc:	429a      	cmp	r2, r3
 80193be:	bfde      	ittt	le
 80193c0:	2330      	movle	r3, #48	; 0x30
 80193c2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80193c6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80193ca:	ebac 0305 	sub.w	r3, ip, r5
 80193ce:	6123      	str	r3, [r4, #16]
 80193d0:	f8cd 8000 	str.w	r8, [sp]
 80193d4:	463b      	mov	r3, r7
 80193d6:	aa03      	add	r2, sp, #12
 80193d8:	4621      	mov	r1, r4
 80193da:	4630      	mov	r0, r6
 80193dc:	f7ff fef6 	bl	80191cc <_printf_common>
 80193e0:	3001      	adds	r0, #1
 80193e2:	d14d      	bne.n	8019480 <_printf_i+0x1c8>
 80193e4:	f04f 30ff 	mov.w	r0, #4294967295
 80193e8:	b005      	add	sp, #20
 80193ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80193ee:	4839      	ldr	r0, [pc, #228]	; (80194d4 <_printf_i+0x21c>)
 80193f0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80193f4:	6813      	ldr	r3, [r2, #0]
 80193f6:	6821      	ldr	r1, [r4, #0]
 80193f8:	1d1d      	adds	r5, r3, #4
 80193fa:	681b      	ldr	r3, [r3, #0]
 80193fc:	6015      	str	r5, [r2, #0]
 80193fe:	060a      	lsls	r2, r1, #24
 8019400:	d50b      	bpl.n	801941a <_printf_i+0x162>
 8019402:	07ca      	lsls	r2, r1, #31
 8019404:	bf44      	itt	mi
 8019406:	f041 0120 	orrmi.w	r1, r1, #32
 801940a:	6021      	strmi	r1, [r4, #0]
 801940c:	b91b      	cbnz	r3, 8019416 <_printf_i+0x15e>
 801940e:	6822      	ldr	r2, [r4, #0]
 8019410:	f022 0220 	bic.w	r2, r2, #32
 8019414:	6022      	str	r2, [r4, #0]
 8019416:	2210      	movs	r2, #16
 8019418:	e7b7      	b.n	801938a <_printf_i+0xd2>
 801941a:	064d      	lsls	r5, r1, #25
 801941c:	bf48      	it	mi
 801941e:	b29b      	uxthmi	r3, r3
 8019420:	e7ef      	b.n	8019402 <_printf_i+0x14a>
 8019422:	4665      	mov	r5, ip
 8019424:	fbb3 f1f2 	udiv	r1, r3, r2
 8019428:	fb02 3311 	mls	r3, r2, r1, r3
 801942c:	5cc3      	ldrb	r3, [r0, r3]
 801942e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8019432:	460b      	mov	r3, r1
 8019434:	2900      	cmp	r1, #0
 8019436:	d1f5      	bne.n	8019424 <_printf_i+0x16c>
 8019438:	e7b9      	b.n	80193ae <_printf_i+0xf6>
 801943a:	6813      	ldr	r3, [r2, #0]
 801943c:	6825      	ldr	r5, [r4, #0]
 801943e:	6961      	ldr	r1, [r4, #20]
 8019440:	1d18      	adds	r0, r3, #4
 8019442:	6010      	str	r0, [r2, #0]
 8019444:	0628      	lsls	r0, r5, #24
 8019446:	681b      	ldr	r3, [r3, #0]
 8019448:	d501      	bpl.n	801944e <_printf_i+0x196>
 801944a:	6019      	str	r1, [r3, #0]
 801944c:	e002      	b.n	8019454 <_printf_i+0x19c>
 801944e:	066a      	lsls	r2, r5, #25
 8019450:	d5fb      	bpl.n	801944a <_printf_i+0x192>
 8019452:	8019      	strh	r1, [r3, #0]
 8019454:	2300      	movs	r3, #0
 8019456:	6123      	str	r3, [r4, #16]
 8019458:	4665      	mov	r5, ip
 801945a:	e7b9      	b.n	80193d0 <_printf_i+0x118>
 801945c:	6813      	ldr	r3, [r2, #0]
 801945e:	1d19      	adds	r1, r3, #4
 8019460:	6011      	str	r1, [r2, #0]
 8019462:	681d      	ldr	r5, [r3, #0]
 8019464:	6862      	ldr	r2, [r4, #4]
 8019466:	2100      	movs	r1, #0
 8019468:	4628      	mov	r0, r5
 801946a:	f7e6 ff41 	bl	80002f0 <memchr>
 801946e:	b108      	cbz	r0, 8019474 <_printf_i+0x1bc>
 8019470:	1b40      	subs	r0, r0, r5
 8019472:	6060      	str	r0, [r4, #4]
 8019474:	6863      	ldr	r3, [r4, #4]
 8019476:	6123      	str	r3, [r4, #16]
 8019478:	2300      	movs	r3, #0
 801947a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801947e:	e7a7      	b.n	80193d0 <_printf_i+0x118>
 8019480:	6923      	ldr	r3, [r4, #16]
 8019482:	462a      	mov	r2, r5
 8019484:	4639      	mov	r1, r7
 8019486:	4630      	mov	r0, r6
 8019488:	47c0      	blx	r8
 801948a:	3001      	adds	r0, #1
 801948c:	d0aa      	beq.n	80193e4 <_printf_i+0x12c>
 801948e:	6823      	ldr	r3, [r4, #0]
 8019490:	079b      	lsls	r3, r3, #30
 8019492:	d413      	bmi.n	80194bc <_printf_i+0x204>
 8019494:	68e0      	ldr	r0, [r4, #12]
 8019496:	9b03      	ldr	r3, [sp, #12]
 8019498:	4298      	cmp	r0, r3
 801949a:	bfb8      	it	lt
 801949c:	4618      	movlt	r0, r3
 801949e:	e7a3      	b.n	80193e8 <_printf_i+0x130>
 80194a0:	2301      	movs	r3, #1
 80194a2:	464a      	mov	r2, r9
 80194a4:	4639      	mov	r1, r7
 80194a6:	4630      	mov	r0, r6
 80194a8:	47c0      	blx	r8
 80194aa:	3001      	adds	r0, #1
 80194ac:	d09a      	beq.n	80193e4 <_printf_i+0x12c>
 80194ae:	3501      	adds	r5, #1
 80194b0:	68e3      	ldr	r3, [r4, #12]
 80194b2:	9a03      	ldr	r2, [sp, #12]
 80194b4:	1a9b      	subs	r3, r3, r2
 80194b6:	42ab      	cmp	r3, r5
 80194b8:	dcf2      	bgt.n	80194a0 <_printf_i+0x1e8>
 80194ba:	e7eb      	b.n	8019494 <_printf_i+0x1dc>
 80194bc:	2500      	movs	r5, #0
 80194be:	f104 0919 	add.w	r9, r4, #25
 80194c2:	e7f5      	b.n	80194b0 <_printf_i+0x1f8>
 80194c4:	2b00      	cmp	r3, #0
 80194c6:	d1ac      	bne.n	8019422 <_printf_i+0x16a>
 80194c8:	7803      	ldrb	r3, [r0, #0]
 80194ca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80194ce:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80194d2:	e76c      	b.n	80193ae <_printf_i+0xf6>
 80194d4:	0801a009 	.word	0x0801a009
 80194d8:	0801a01a 	.word	0x0801a01a

080194dc <__sread>:
 80194dc:	b510      	push	{r4, lr}
 80194de:	460c      	mov	r4, r1
 80194e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80194e4:	f000 f8d4 	bl	8019690 <_read_r>
 80194e8:	2800      	cmp	r0, #0
 80194ea:	bfab      	itete	ge
 80194ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80194ee:	89a3      	ldrhlt	r3, [r4, #12]
 80194f0:	181b      	addge	r3, r3, r0
 80194f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80194f6:	bfac      	ite	ge
 80194f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80194fa:	81a3      	strhlt	r3, [r4, #12]
 80194fc:	bd10      	pop	{r4, pc}

080194fe <__swrite>:
 80194fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019502:	461f      	mov	r7, r3
 8019504:	898b      	ldrh	r3, [r1, #12]
 8019506:	05db      	lsls	r3, r3, #23
 8019508:	4605      	mov	r5, r0
 801950a:	460c      	mov	r4, r1
 801950c:	4616      	mov	r6, r2
 801950e:	d505      	bpl.n	801951c <__swrite+0x1e>
 8019510:	2302      	movs	r3, #2
 8019512:	2200      	movs	r2, #0
 8019514:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019518:	f000 f868 	bl	80195ec <_lseek_r>
 801951c:	89a3      	ldrh	r3, [r4, #12]
 801951e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019522:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8019526:	81a3      	strh	r3, [r4, #12]
 8019528:	4632      	mov	r2, r6
 801952a:	463b      	mov	r3, r7
 801952c:	4628      	mov	r0, r5
 801952e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019532:	f000 b817 	b.w	8019564 <_write_r>

08019536 <__sseek>:
 8019536:	b510      	push	{r4, lr}
 8019538:	460c      	mov	r4, r1
 801953a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801953e:	f000 f855 	bl	80195ec <_lseek_r>
 8019542:	1c43      	adds	r3, r0, #1
 8019544:	89a3      	ldrh	r3, [r4, #12]
 8019546:	bf15      	itete	ne
 8019548:	6560      	strne	r0, [r4, #84]	; 0x54
 801954a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801954e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8019552:	81a3      	strheq	r3, [r4, #12]
 8019554:	bf18      	it	ne
 8019556:	81a3      	strhne	r3, [r4, #12]
 8019558:	bd10      	pop	{r4, pc}

0801955a <__sclose>:
 801955a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801955e:	f000 b813 	b.w	8019588 <_close_r>
	...

08019564 <_write_r>:
 8019564:	b538      	push	{r3, r4, r5, lr}
 8019566:	4c07      	ldr	r4, [pc, #28]	; (8019584 <_write_r+0x20>)
 8019568:	4605      	mov	r5, r0
 801956a:	4608      	mov	r0, r1
 801956c:	4611      	mov	r1, r2
 801956e:	2200      	movs	r2, #0
 8019570:	6022      	str	r2, [r4, #0]
 8019572:	461a      	mov	r2, r3
 8019574:	f7e9 fb4f 	bl	8002c16 <_write>
 8019578:	1c43      	adds	r3, r0, #1
 801957a:	d102      	bne.n	8019582 <_write_r+0x1e>
 801957c:	6823      	ldr	r3, [r4, #0]
 801957e:	b103      	cbz	r3, 8019582 <_write_r+0x1e>
 8019580:	602b      	str	r3, [r5, #0]
 8019582:	bd38      	pop	{r3, r4, r5, pc}
 8019584:	24002484 	.word	0x24002484

08019588 <_close_r>:
 8019588:	b538      	push	{r3, r4, r5, lr}
 801958a:	4c06      	ldr	r4, [pc, #24]	; (80195a4 <_close_r+0x1c>)
 801958c:	2300      	movs	r3, #0
 801958e:	4605      	mov	r5, r0
 8019590:	4608      	mov	r0, r1
 8019592:	6023      	str	r3, [r4, #0]
 8019594:	f7e9 fe4f 	bl	8003236 <_close>
 8019598:	1c43      	adds	r3, r0, #1
 801959a:	d102      	bne.n	80195a2 <_close_r+0x1a>
 801959c:	6823      	ldr	r3, [r4, #0]
 801959e:	b103      	cbz	r3, 80195a2 <_close_r+0x1a>
 80195a0:	602b      	str	r3, [r5, #0]
 80195a2:	bd38      	pop	{r3, r4, r5, pc}
 80195a4:	24002484 	.word	0x24002484

080195a8 <_fstat_r>:
 80195a8:	b538      	push	{r3, r4, r5, lr}
 80195aa:	4c07      	ldr	r4, [pc, #28]	; (80195c8 <_fstat_r+0x20>)
 80195ac:	2300      	movs	r3, #0
 80195ae:	4605      	mov	r5, r0
 80195b0:	4608      	mov	r0, r1
 80195b2:	4611      	mov	r1, r2
 80195b4:	6023      	str	r3, [r4, #0]
 80195b6:	f7e9 fe4a 	bl	800324e <_fstat>
 80195ba:	1c43      	adds	r3, r0, #1
 80195bc:	d102      	bne.n	80195c4 <_fstat_r+0x1c>
 80195be:	6823      	ldr	r3, [r4, #0]
 80195c0:	b103      	cbz	r3, 80195c4 <_fstat_r+0x1c>
 80195c2:	602b      	str	r3, [r5, #0]
 80195c4:	bd38      	pop	{r3, r4, r5, pc}
 80195c6:	bf00      	nop
 80195c8:	24002484 	.word	0x24002484

080195cc <_isatty_r>:
 80195cc:	b538      	push	{r3, r4, r5, lr}
 80195ce:	4c06      	ldr	r4, [pc, #24]	; (80195e8 <_isatty_r+0x1c>)
 80195d0:	2300      	movs	r3, #0
 80195d2:	4605      	mov	r5, r0
 80195d4:	4608      	mov	r0, r1
 80195d6:	6023      	str	r3, [r4, #0]
 80195d8:	f7e9 fe49 	bl	800326e <_isatty>
 80195dc:	1c43      	adds	r3, r0, #1
 80195de:	d102      	bne.n	80195e6 <_isatty_r+0x1a>
 80195e0:	6823      	ldr	r3, [r4, #0]
 80195e2:	b103      	cbz	r3, 80195e6 <_isatty_r+0x1a>
 80195e4:	602b      	str	r3, [r5, #0]
 80195e6:	bd38      	pop	{r3, r4, r5, pc}
 80195e8:	24002484 	.word	0x24002484

080195ec <_lseek_r>:
 80195ec:	b538      	push	{r3, r4, r5, lr}
 80195ee:	4c07      	ldr	r4, [pc, #28]	; (801960c <_lseek_r+0x20>)
 80195f0:	4605      	mov	r5, r0
 80195f2:	4608      	mov	r0, r1
 80195f4:	4611      	mov	r1, r2
 80195f6:	2200      	movs	r2, #0
 80195f8:	6022      	str	r2, [r4, #0]
 80195fa:	461a      	mov	r2, r3
 80195fc:	f7e9 fe42 	bl	8003284 <_lseek>
 8019600:	1c43      	adds	r3, r0, #1
 8019602:	d102      	bne.n	801960a <_lseek_r+0x1e>
 8019604:	6823      	ldr	r3, [r4, #0]
 8019606:	b103      	cbz	r3, 801960a <_lseek_r+0x1e>
 8019608:	602b      	str	r3, [r5, #0]
 801960a:	bd38      	pop	{r3, r4, r5, pc}
 801960c:	24002484 	.word	0x24002484

08019610 <memmove>:
 8019610:	4288      	cmp	r0, r1
 8019612:	b510      	push	{r4, lr}
 8019614:	eb01 0302 	add.w	r3, r1, r2
 8019618:	d807      	bhi.n	801962a <memmove+0x1a>
 801961a:	1e42      	subs	r2, r0, #1
 801961c:	4299      	cmp	r1, r3
 801961e:	d00a      	beq.n	8019636 <memmove+0x26>
 8019620:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019624:	f802 4f01 	strb.w	r4, [r2, #1]!
 8019628:	e7f8      	b.n	801961c <memmove+0xc>
 801962a:	4283      	cmp	r3, r0
 801962c:	d9f5      	bls.n	801961a <memmove+0xa>
 801962e:	1881      	adds	r1, r0, r2
 8019630:	1ad2      	subs	r2, r2, r3
 8019632:	42d3      	cmn	r3, r2
 8019634:	d100      	bne.n	8019638 <memmove+0x28>
 8019636:	bd10      	pop	{r4, pc}
 8019638:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801963c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8019640:	e7f7      	b.n	8019632 <memmove+0x22>

08019642 <_realloc_r>:
 8019642:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019644:	4607      	mov	r7, r0
 8019646:	4614      	mov	r4, r2
 8019648:	460e      	mov	r6, r1
 801964a:	b921      	cbnz	r1, 8019656 <_realloc_r+0x14>
 801964c:	4611      	mov	r1, r2
 801964e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8019652:	f7fe bf4f 	b.w	80184f4 <_malloc_r>
 8019656:	b922      	cbnz	r2, 8019662 <_realloc_r+0x20>
 8019658:	f7fe fefe 	bl	8018458 <_free_r>
 801965c:	4625      	mov	r5, r4
 801965e:	4628      	mov	r0, r5
 8019660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019662:	f000 f827 	bl	80196b4 <_malloc_usable_size_r>
 8019666:	42a0      	cmp	r0, r4
 8019668:	d20f      	bcs.n	801968a <_realloc_r+0x48>
 801966a:	4621      	mov	r1, r4
 801966c:	4638      	mov	r0, r7
 801966e:	f7fe ff41 	bl	80184f4 <_malloc_r>
 8019672:	4605      	mov	r5, r0
 8019674:	2800      	cmp	r0, #0
 8019676:	d0f2      	beq.n	801965e <_realloc_r+0x1c>
 8019678:	4631      	mov	r1, r6
 801967a:	4622      	mov	r2, r4
 801967c:	f7fe fed8 	bl	8018430 <memcpy>
 8019680:	4631      	mov	r1, r6
 8019682:	4638      	mov	r0, r7
 8019684:	f7fe fee8 	bl	8018458 <_free_r>
 8019688:	e7e9      	b.n	801965e <_realloc_r+0x1c>
 801968a:	4635      	mov	r5, r6
 801968c:	e7e7      	b.n	801965e <_realloc_r+0x1c>
	...

08019690 <_read_r>:
 8019690:	b538      	push	{r3, r4, r5, lr}
 8019692:	4c07      	ldr	r4, [pc, #28]	; (80196b0 <_read_r+0x20>)
 8019694:	4605      	mov	r5, r0
 8019696:	4608      	mov	r0, r1
 8019698:	4611      	mov	r1, r2
 801969a:	2200      	movs	r2, #0
 801969c:	6022      	str	r2, [r4, #0]
 801969e:	461a      	mov	r2, r3
 80196a0:	f7e9 fdac 	bl	80031fc <_read>
 80196a4:	1c43      	adds	r3, r0, #1
 80196a6:	d102      	bne.n	80196ae <_read_r+0x1e>
 80196a8:	6823      	ldr	r3, [r4, #0]
 80196aa:	b103      	cbz	r3, 80196ae <_read_r+0x1e>
 80196ac:	602b      	str	r3, [r5, #0]
 80196ae:	bd38      	pop	{r3, r4, r5, pc}
 80196b0:	24002484 	.word	0x24002484

080196b4 <_malloc_usable_size_r>:
 80196b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80196b8:	1f18      	subs	r0, r3, #4
 80196ba:	2b00      	cmp	r3, #0
 80196bc:	bfbc      	itt	lt
 80196be:	580b      	ldrlt	r3, [r1, r0]
 80196c0:	18c0      	addlt	r0, r0, r3
 80196c2:	4770      	bx	lr

080196c4 <_init>:
 80196c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80196c6:	bf00      	nop
 80196c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80196ca:	bc08      	pop	{r3}
 80196cc:	469e      	mov	lr, r3
 80196ce:	4770      	bx	lr

080196d0 <_fini>:
 80196d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80196d2:	bf00      	nop
 80196d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80196d6:	bc08      	pop	{r3}
 80196d8:	469e      	mov	lr, r3
 80196da:	4770      	bx	lr

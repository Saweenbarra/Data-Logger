
Data-Logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000152b8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000033c  08015558  08015558  00025558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015894  08015894  000301cc  2**0
                  CONTENTS
  4 .ARM          00000008  08015894  08015894  00025894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801589c  0801589c  000301cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801589c  0801589c  0002589c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080158a0  080158a0  000258a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001cc  24000000  080158a4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000418ec  240001d0  08015a70  000301d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  24041abc  08015a70  00031abc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003fa25  00000000  00000000  000301fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006a42  00000000  00000000  0006fc1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002038  00000000  00000000  00076668  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001d98  00000000  00000000  000786a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0004027e  00000000  00000000  0007a438  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002240c  00000000  00000000  000ba6b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001705f9  00000000  00000000  000dcac2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0024d0bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008ed0  00000000  00000000  0024d138  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001d0 	.word	0x240001d0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08015540 	.word	0x08015540

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001d4 	.word	0x240001d4
 80002dc:	08015540 	.word	0x08015540

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000698:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800069c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80006a0:	f003 0301 	and.w	r3, r3, #1
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d013      	beq.n	80006d0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80006a8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006ac:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80006b0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d00b      	beq.n	80006d0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80006b8:	e000      	b.n	80006bc <ITM_SendChar+0x2c>
    {
      __NOP();
 80006ba:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80006bc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d0f9      	beq.n	80006ba <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80006c6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006ca:	687a      	ldr	r2, [r7, #4]
 80006cc:	b2d2      	uxtb	r2, r2
 80006ce:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80006d0:	687b      	ldr	r3, [r7, #4]
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	370c      	adds	r7, #12
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr

080006de <_write>:
static void MX_SPI1_Init(void);
/* USER CODE BEGIN PFP */
int WriteToBuff(char *, int);
static void FDCAN_Config(void);
int _write(int file, char *ptr, int len)
{
 80006de:	b580      	push	{r7, lr}
 80006e0:	b086      	sub	sp, #24
 80006e2:	af00      	add	r7, sp, #0
 80006e4:	60f8      	str	r0, [r7, #12]
 80006e6:	60b9      	str	r1, [r7, #8]
 80006e8:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 80006ee:	2300      	movs	r3, #0
 80006f0:	617b      	str	r3, [r7, #20]
 80006f2:	e009      	b.n	8000708 <_write+0x2a>
    ITM_SendChar((*ptr++));
 80006f4:	68bb      	ldr	r3, [r7, #8]
 80006f6:	1c5a      	adds	r2, r3, #1
 80006f8:	60ba      	str	r2, [r7, #8]
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	4618      	mov	r0, r3
 80006fe:	f7ff ffc7 	bl	8000690 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8000702:	697b      	ldr	r3, [r7, #20]
 8000704:	3301      	adds	r3, #1
 8000706:	617b      	str	r3, [r7, #20]
 8000708:	697a      	ldr	r2, [r7, #20]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	429a      	cmp	r2, r3
 800070e:	dbf1      	blt.n	80006f4 <_write+0x16>
  return len;
 8000710:	687b      	ldr	r3, [r7, #4]
}
 8000712:	4618      	mov	r0, r3
 8000714:	3718      	adds	r7, #24
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
	...

0800071c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800071c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800071e:	f2ad 4de4 	subw	sp, sp, #1252	; 0x4e4
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000724:	f001 f928 	bl	8001978 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000728:	f000 f908 	bl	800093c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800072c:	f000 fbf6 	bl	8000f1c <MX_GPIO_Init>
  MX_DMA_Init();
 8000730:	f000 fbd4 	bl	8000edc <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 8000734:	f000 fac2 	bl	8000cbc <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000738:	f00d fe0a 	bl	800e350 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 800073c:	f013 fa0a 	bl	8013b54 <MX_USB_DEVICE_Init>
  MX_FDCAN1_Init();
 8000740:	f000 f9f2 	bl	8000b28 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8000744:	f000 fa56 	bl	8000bf4 <MX_FDCAN2_Init>
  MX_UART8_Init();
 8000748:	f000 fb30 	bl	8000dac <MX_UART8_Init>
  MX_USART3_UART_Init();
 800074c:	f000 fb7a 	bl	8000e44 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8000750:	f000 fad6 	bl	8000d00 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  printf("Starting\n");
 8000754:	486a      	ldr	r0, [pc, #424]	; (8000900 <main+0x1e4>)
 8000756:	f014 f84d 	bl	80147f4 <puts>
  FDCAN_Config();
 800075a:	f000 fcc9 	bl	80010f0 <FDCAN_Config>
  if(f_mount(&myFATAFS, SDPath, 1) == FR_OK){
 800075e:	2201      	movs	r2, #1
 8000760:	4968      	ldr	r1, [pc, #416]	; (8000904 <main+0x1e8>)
 8000762:	4869      	ldr	r0, [pc, #420]	; (8000908 <main+0x1ec>)
 8000764:	f012 fc3a 	bl	8012fdc <f_mount>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	f040 80bf 	bne.w	80008ee <main+0x1d2>
  	  //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
  	  char myPath[] = "det.csv\0";
 8000770:	4a66      	ldr	r2, [pc, #408]	; (800090c <main+0x1f0>)
 8000772:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8000776:	ca07      	ldmia	r2, {r0, r1, r2}
 8000778:	c303      	stmia	r3!, {r0, r1}
 800077a:	701a      	strb	r2, [r3, #0]
      char ConfigPath[] ="Config.csv\0";
 800077c:	4a64      	ldr	r2, [pc, #400]	; (8000910 <main+0x1f4>)
 800077e:	f207 43b4 	addw	r3, r7, #1204	; 0x4b4
 8000782:	ca07      	ldmia	r2, {r0, r1, r2}
 8000784:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      char ConfigParams[1000];

      //Tries to open config File
      if(f_open(&Config, ConfigPath, FA_READ) == FR_NO_FILE){
 8000788:	f207 43b4 	addw	r3, r7, #1204	; 0x4b4
 800078c:	2201      	movs	r2, #1
 800078e:	4619      	mov	r1, r3
 8000790:	4860      	ldr	r0, [pc, #384]	; (8000914 <main+0x1f8>)
 8000792:	f012 fc69 	bl	8013068 <f_open>
 8000796:	4603      	mov	r3, r0
 8000798:	2b04      	cmp	r3, #4
 800079a:	d144      	bne.n	8000826 <main+0x10a>
        //If file doesnt exist creates a file using hard coded defualts and passes those to internal config array
        f_open(&Config, ConfigPath, FA_WRITE | FA_CREATE_ALWAYS);
 800079c:	f207 43b4 	addw	r3, r7, #1204	; 0x4b4
 80007a0:	220a      	movs	r2, #10
 80007a2:	4619      	mov	r1, r3
 80007a4:	485b      	ldr	r0, [pc, #364]	; (8000914 <main+0x1f8>)
 80007a6:	f012 fc5f 	bl	8013068 <f_open>

        sprintf(ConfigParams, "ID,Device,Bytes,Rate(HZ),Type,Description\n");
 80007aa:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80007ae:	4a5a      	ldr	r2, [pc, #360]	; (8000918 <main+0x1fc>)
 80007b0:	461c      	mov	r4, r3
 80007b2:	4615      	mov	r5, r2
 80007b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007c0:	c403      	stmia	r4!, {r0, r1}
 80007c2:	8022      	strh	r2, [r4, #0]
 80007c4:	3402      	adds	r4, #2
 80007c6:	0c13      	lsrs	r3, r2, #16
 80007c8:	7023      	strb	r3, [r4, #0]
        sprintf(ConfigParams + strlen(ConfigParams),"0x50,Datalogger,8,0.20,uint32_t,HIGH:FileNO LOW:millis,\n");
 80007ca:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff fd86 	bl	80002e0 <strlen>
 80007d4:	4602      	mov	r2, r0
 80007d6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80007da:	4413      	add	r3, r2
 80007dc:	4a4f      	ldr	r2, [pc, #316]	; (800091c <main+0x200>)
 80007de:	4614      	mov	r4, r2
 80007e0:	469c      	mov	ip, r3
 80007e2:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80007e6:	4665      	mov	r5, ip
 80007e8:	4626      	mov	r6, r4
 80007ea:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80007ec:	6028      	str	r0, [r5, #0]
 80007ee:	6069      	str	r1, [r5, #4]
 80007f0:	60aa      	str	r2, [r5, #8]
 80007f2:	60eb      	str	r3, [r5, #12]
 80007f4:	3410      	adds	r4, #16
 80007f6:	f10c 0c10 	add.w	ip, ip, #16
 80007fa:	4574      	cmp	r4, lr
 80007fc:	d1f3      	bne.n	80007e6 <main+0xca>
 80007fe:	4662      	mov	r2, ip
 8000800:	4623      	mov	r3, r4
 8000802:	cb03      	ldmia	r3!, {r0, r1}
 8000804:	6010      	str	r0, [r2, #0]
 8000806:	6051      	str	r1, [r2, #4]
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	7213      	strb	r3, [r2, #8]

        f_write(&Config, ConfigParams, strlen(ConfigParams), &ConfByteW);
 800080c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000810:	4618      	mov	r0, r3
 8000812:	f7ff fd65 	bl	80002e0 <strlen>
 8000816:	4602      	mov	r2, r0
 8000818:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 800081c:	4b40      	ldr	r3, [pc, #256]	; (8000920 <main+0x204>)
 800081e:	483d      	ldr	r0, [pc, #244]	; (8000914 <main+0x1f8>)
 8000820:	f012 ff1f 	bl	8013662 <f_write>
 8000824:	e00b      	b.n	800083e <main+0x122>
      }else{
        //If file does exist reads in config parameters to internal config array
        f_read(&Config, ConfigParams, strlen(ConfigParams), &ConfByteR);
 8000826:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800082a:	4618      	mov	r0, r3
 800082c:	f7ff fd58 	bl	80002e0 <strlen>
 8000830:	4602      	mov	r2, r0
 8000832:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 8000836:	4b3b      	ldr	r3, [pc, #236]	; (8000924 <main+0x208>)
 8000838:	4836      	ldr	r0, [pc, #216]	; (8000914 <main+0x1f8>)
 800083a:	f012 fdd3 	bl	80133e4 <f_read>
      }
      f_close(&Config);
 800083e:	4835      	ldr	r0, [pc, #212]	; (8000914 <main+0x1f8>)
 8000840:	f013 f902 	bl	8013a48 <f_close>
  	  f_open(&myFILE, myPath, FA_WRITE | FA_CREATE_ALWAYS);
 8000844:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8000848:	220a      	movs	r2, #10
 800084a:	4619      	mov	r1, r3
 800084c:	4836      	ldr	r0, [pc, #216]	; (8000928 <main+0x20c>)
 800084e:	f012 fc0b 	bl	8013068 <f_open>

  	  //write speed test
  	  	for(int i = 0; i<131072; i++){
 8000852:	2300      	movs	r3, #0
 8000854:	f8c7 34dc 	str.w	r3, [r7, #1244]	; 0x4dc
 8000858:	e00a      	b.n	8000870 <main+0x154>
  		    DataBuffer.Data.DataBuff1[i] = 'A';
 800085a:	4a34      	ldr	r2, [pc, #208]	; (800092c <main+0x210>)
 800085c:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	; 0x4dc
 8000860:	4413      	add	r3, r2
 8000862:	2241      	movs	r2, #65	; 0x41
 8000864:	701a      	strb	r2, [r3, #0]
  	  	for(int i = 0; i<131072; i++){
 8000866:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	; 0x4dc
 800086a:	3301      	adds	r3, #1
 800086c:	f8c7 34dc 	str.w	r3, [r7, #1244]	; 0x4dc
 8000870:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	; 0x4dc
 8000874:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000878:	dbef      	blt.n	800085a <main+0x13e>
  	    }
  	    int start = HAL_GetTick();
 800087a:	f001 f903 	bl	8001a84 <HAL_GetTick>
 800087e:	4603      	mov	r3, r0
 8000880:	f8c7 34d4 	str.w	r3, [r7, #1236]	; 0x4d4
  	    for(int i = 0; i<2048; i++){
 8000884:	2300      	movs	r3, #0
 8000886:	f8c7 34d8 	str.w	r3, [r7, #1240]	; 0x4d8
 800088a:	e00b      	b.n	80008a4 <main+0x188>
  		f_write(&myFILE, DataBuffer.Data.DataBuff1, sizeof(DataBuffer.Data.DataBuff1), &testByte);
 800088c:	4b28      	ldr	r3, [pc, #160]	; (8000930 <main+0x214>)
 800088e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000892:	4926      	ldr	r1, [pc, #152]	; (800092c <main+0x210>)
 8000894:	4824      	ldr	r0, [pc, #144]	; (8000928 <main+0x20c>)
 8000896:	f012 fee4 	bl	8013662 <f_write>
  	    for(int i = 0; i<2048; i++){
 800089a:	f8d7 34d8 	ldr.w	r3, [r7, #1240]	; 0x4d8
 800089e:	3301      	adds	r3, #1
 80008a0:	f8c7 34d8 	str.w	r3, [r7, #1240]	; 0x4d8
 80008a4:	f8d7 34d8 	ldr.w	r3, [r7, #1240]	; 0x4d8
 80008a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80008ac:	dbee      	blt.n	800088c <main+0x170>
        }
  	    int end = HAL_GetTick();
 80008ae:	f001 f8e9 	bl	8001a84 <HAL_GetTick>
 80008b2:	4603      	mov	r3, r0
 80008b4:	f8c7 34d0 	str.w	r3, [r7, #1232]	; 0x4d0
  	    int duration = end - start;
 80008b8:	f8d7 24d0 	ldr.w	r2, [r7, #1232]	; 0x4d0
 80008bc:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 80008c0:	1ad3      	subs	r3, r2, r3
 80008c2:	f8c7 34cc 	str.w	r3, [r7, #1228]	; 0x4cc
  	    char myTime[200];
  	    sprintf(myTime, "\r%i", duration);
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	f8d7 24cc 	ldr.w	r2, [r7, #1228]	; 0x4cc
 80008cc:	4919      	ldr	r1, [pc, #100]	; (8000934 <main+0x218>)
 80008ce:	4618      	mov	r0, r3
 80008d0:	f013 ffa8 	bl	8014824 <siprintf>
  	    f_write(&myFILE, myTime, strlen(myTime), &testByte);
 80008d4:	1d3b      	adds	r3, r7, #4
 80008d6:	4618      	mov	r0, r3
 80008d8:	f7ff fd02 	bl	80002e0 <strlen>
 80008dc:	4602      	mov	r2, r0
 80008de:	1d39      	adds	r1, r7, #4
 80008e0:	4b13      	ldr	r3, [pc, #76]	; (8000930 <main+0x214>)
 80008e2:	4811      	ldr	r0, [pc, #68]	; (8000928 <main+0x20c>)
 80008e4:	f012 febd 	bl	8013662 <f_write>
      f_close(&myFILE);
 80008e8:	480f      	ldr	r0, [pc, #60]	; (8000928 <main+0x20c>)
 80008ea:	f013 f8ad 	bl	8013a48 <f_close>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
	  ///HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
	  printf("loop\n");
 80008ee:	4812      	ldr	r0, [pc, #72]	; (8000938 <main+0x21c>)
 80008f0:	f013 ff80 	bl	80147f4 <puts>
	  HAL_Delay(1000);
 80008f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008f8:	f001 f8d0 	bl	8001a9c <HAL_Delay>
	  printf("loop\n");
 80008fc:	e7f7      	b.n	80008ee <main+0x1d2>
 80008fe:	bf00      	nop
 8000900:	08015558 	.word	0x08015558
 8000904:	24040d7c 	.word	0x24040d7c
 8000908:	240407b0 	.word	0x240407b0
 800090c:	080155d8 	.word	0x080155d8
 8000910:	080155e4 	.word	0x080155e4
 8000914:	24040b44 	.word	0x24040b44
 8000918:	08015564 	.word	0x08015564
 800091c:	08015590 	.word	0x08015590
 8000920:	24040724 	.word	0x24040724
 8000924:	240405f4 	.word	0x240405f4
 8000928:	24040344 	.word	0x24040344
 800092c:	240001ec 	.word	0x240001ec
 8000930:	24040b40 	.word	0x24040b40
 8000934:	080155cc 	.word	0x080155cc
 8000938:	080155d0 	.word	0x080155d0

0800093c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b0cc      	sub	sp, #304	; 0x130
 8000940:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000942:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000946:	224c      	movs	r2, #76	; 0x4c
 8000948:	2100      	movs	r1, #0
 800094a:	4618      	mov	r0, r3
 800094c:	f013 fe45 	bl	80145da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000950:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000954:	2220      	movs	r2, #32
 8000956:	2100      	movs	r1, #0
 8000958:	4618      	mov	r0, r3
 800095a:	f013 fe3e 	bl	80145da <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800095e:	f107 0308 	add.w	r3, r7, #8
 8000962:	4618      	mov	r0, r3
 8000964:	23bc      	movs	r3, #188	; 0xbc
 8000966:	461a      	mov	r2, r3
 8000968:	2100      	movs	r1, #0
 800096a:	f013 fe36 	bl	80145da <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800096e:	2002      	movs	r0, #2
 8000970:	f005 fbf8 	bl	8006164 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000974:	1d3b      	adds	r3, r7, #4
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	4b67      	ldr	r3, [pc, #412]	; (8000b18 <SystemClock_Config+0x1dc>)
 800097c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800097e:	4a66      	ldr	r2, [pc, #408]	; (8000b18 <SystemClock_Config+0x1dc>)
 8000980:	f023 0301 	bic.w	r3, r3, #1
 8000984:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000986:	4b64      	ldr	r3, [pc, #400]	; (8000b18 <SystemClock_Config+0x1dc>)
 8000988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800098a:	f003 0201 	and.w	r2, r3, #1
 800098e:	1d3b      	adds	r3, r7, #4
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	4b62      	ldr	r3, [pc, #392]	; (8000b1c <SystemClock_Config+0x1e0>)
 8000994:	699b      	ldr	r3, [r3, #24]
 8000996:	4a61      	ldr	r2, [pc, #388]	; (8000b1c <SystemClock_Config+0x1e0>)
 8000998:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800099c:	6193      	str	r3, [r2, #24]
 800099e:	4b5f      	ldr	r3, [pc, #380]	; (8000b1c <SystemClock_Config+0x1e0>)
 80009a0:	699b      	ldr	r3, [r3, #24]
 80009a2:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80009a6:	1d3b      	adds	r3, r7, #4
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	1d3b      	adds	r3, r7, #4
 80009ac:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009ae:	bf00      	nop
 80009b0:	4b5a      	ldr	r3, [pc, #360]	; (8000b1c <SystemClock_Config+0x1e0>)
 80009b2:	699b      	ldr	r3, [r3, #24]
 80009b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009bc:	d1f8      	bne.n	80009b0 <SystemClock_Config+0x74>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80009be:	4b58      	ldr	r3, [pc, #352]	; (8000b20 <SystemClock_Config+0x1e4>)
 80009c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009c2:	f023 0303 	bic.w	r3, r3, #3
 80009c6:	4a56      	ldr	r2, [pc, #344]	; (8000b20 <SystemClock_Config+0x1e4>)
 80009c8:	f043 0302 	orr.w	r3, r3, #2
 80009cc:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80009ce:	2321      	movs	r3, #33	; 0x21
 80009d0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009d8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80009dc:	2301      	movs	r3, #1
 80009de:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009e2:	2302      	movs	r3, #2
 80009e4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009e8:	2302      	movs	r3, #2
 80009ea:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80009ee:	2302      	movs	r3, #2
 80009f0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 64;
 80009f4:	2340      	movs	r3, #64	; 0x40
 80009f6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009fa:	2302      	movs	r3, #2
 80009fc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 10;
 8000a00:	230a      	movs	r3, #10
 8000a02:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a06:	2302      	movs	r3, #2
 8000a08:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a0c:	230c      	movs	r3, #12
 8000a0e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a12:	2300      	movs	r3, #0
 8000a14:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a1e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000a22:	4618      	mov	r0, r3
 8000a24:	f005 fbe8 	bl	80061f8 <HAL_RCC_OscConfig>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000a2e:	f000 fbc7 	bl	80011c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a32:	233f      	movs	r3, #63	; 0x3f
 8000a34:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a38:	2303      	movs	r3, #3
 8000a3a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000a44:	2308      	movs	r3, #8
 8000a46:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a4a:	2340      	movs	r3, #64	; 0x40
 8000a4c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a50:	2340      	movs	r3, #64	; 0x40
 8000a52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a5e:	2340      	movs	r3, #64	; 0x40
 8000a60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a64:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000a68:	2102      	movs	r1, #2
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f005 ffd4 	bl	8006a18 <HAL_RCC_ClockConfig>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <SystemClock_Config+0x13e>
  {
    Error_Handler();
 8000a76:	f000 fba3 	bl	80011c0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_FDCAN
 8000a7a:	f107 0308 	add.w	r3, r7, #8
 8000a7e:	4a29      	ldr	r2, [pc, #164]	; (8000b24 <SystemClock_Config+0x1e8>)
 8000a80:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_UART8|RCC_PERIPHCLK_SPI1
                              |RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000a82:	f107 0308 	add.w	r3, r7, #8
 8000a86:	2202      	movs	r2, #2
 8000a88:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000a8a:	f107 0308 	add.w	r3, r7, #8
 8000a8e:	220c      	movs	r2, #12
 8000a90:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000a92:	f107 0308 	add.w	r3, r7, #8
 8000a96:	2202      	movs	r2, #2
 8000a98:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000a9a:	f107 0308 	add.w	r3, r7, #8
 8000a9e:	2202      	movs	r2, #2
 8000aa0:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 3;
 8000aa2:	f107 0308 	add.w	r3, r7, #8
 8000aa6:	2203      	movs	r2, #3
 8000aa8:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000aaa:	f107 0308 	add.w	r3, r7, #8
 8000aae:	22c0      	movs	r2, #192	; 0xc0
 8000ab0:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000ab2:	f107 0308 	add.w	r3, r7, #8
 8000ab6:	2220      	movs	r2, #32
 8000ab8:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000aba:	f107 0308 	add.w	r3, r7, #8
 8000abe:	2200      	movs	r2, #0
 8000ac0:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8000ac2:	f107 0308 	add.w	r3, r7, #8
 8000ac6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000aca:	64da      	str	r2, [r3, #76]	; 0x4c
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000acc:	f107 0308 	add.w	r3, r7, #8
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000ad4:	f107 0308 	add.w	r3, r7, #8
 8000ad8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000adc:	66da      	str	r2, [r3, #108]	; 0x6c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000ade:	f107 0308 	add.w	r3, r7, #8
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000ae6:	f107 0308 	add.w	r3, r7, #8
 8000aea:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000aee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000af2:	f107 0308 	add.w	r3, r7, #8
 8000af6:	4618      	mov	r0, r3
 8000af8:	f006 fb3e 	bl	8007178 <HAL_RCCEx_PeriphCLKConfig>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <SystemClock_Config+0x1ca>
  {
    Error_Handler();
 8000b02:	f000 fb5d 	bl	80011c0 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000b06:	f006 f93d 	bl	8006d84 <HAL_RCC_EnableCSS>
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8000b0a:	f005 fb65 	bl	80061d8 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8000b0e:	bf00      	nop
 8000b10:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	58000400 	.word	0x58000400
 8000b1c:	58024800 	.word	0x58024800
 8000b20:	58024400 	.word	0x58024400
 8000b24:	00059002 	.word	0x00059002

08000b28 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000b2c:	4b2f      	ldr	r3, [pc, #188]	; (8000bec <MX_FDCAN1_Init+0xc4>)
 8000b2e:	4a30      	ldr	r2, [pc, #192]	; (8000bf0 <MX_FDCAN1_Init+0xc8>)
 8000b30:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8000b32:	4b2e      	ldr	r3, [pc, #184]	; (8000bec <MX_FDCAN1_Init+0xc4>)
 8000b34:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000b38:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000b3a:	4b2c      	ldr	r3, [pc, #176]	; (8000bec <MX_FDCAN1_Init+0xc4>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000b40:	4b2a      	ldr	r3, [pc, #168]	; (8000bec <MX_FDCAN1_Init+0xc4>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000b46:	4b29      	ldr	r3, [pc, #164]	; (8000bec <MX_FDCAN1_Init+0xc4>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000b4c:	4b27      	ldr	r3, [pc, #156]	; (8000bec <MX_FDCAN1_Init+0xc4>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000b52:	4b26      	ldr	r3, [pc, #152]	; (8000bec <MX_FDCAN1_Init+0xc4>)
 8000b54:	2201      	movs	r2, #1
 8000b56:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 50;
 8000b58:	4b24      	ldr	r3, [pc, #144]	; (8000bec <MX_FDCAN1_Init+0xc4>)
 8000b5a:	2232      	movs	r2, #50	; 0x32
 8000b5c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 109;
 8000b5e:	4b23      	ldr	r3, [pc, #140]	; (8000bec <MX_FDCAN1_Init+0xc4>)
 8000b60:	226d      	movs	r2, #109	; 0x6d
 8000b62:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 50;
 8000b64:	4b21      	ldr	r3, [pc, #132]	; (8000bec <MX_FDCAN1_Init+0xc4>)
 8000b66:	2232      	movs	r2, #50	; 0x32
 8000b68:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000b6a:	4b20      	ldr	r3, [pc, #128]	; (8000bec <MX_FDCAN1_Init+0xc4>)
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 5;
 8000b70:	4b1e      	ldr	r3, [pc, #120]	; (8000bec <MX_FDCAN1_Init+0xc4>)
 8000b72:	2205      	movs	r2, #5
 8000b74:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 10;
 8000b76:	4b1d      	ldr	r3, [pc, #116]	; (8000bec <MX_FDCAN1_Init+0xc4>)
 8000b78:	220a      	movs	r2, #10
 8000b7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 5;
 8000b7c:	4b1b      	ldr	r3, [pc, #108]	; (8000bec <MX_FDCAN1_Init+0xc4>)
 8000b7e:	2205      	movs	r2, #5
 8000b80:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000b82:	4b1a      	ldr	r3, [pc, #104]	; (8000bec <MX_FDCAN1_Init+0xc4>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 2;
 8000b88:	4b18      	ldr	r3, [pc, #96]	; (8000bec <MX_FDCAN1_Init+0xc4>)
 8000b8a:	2202      	movs	r2, #2
 8000b8c:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 2;
 8000b8e:	4b17      	ldr	r3, [pc, #92]	; (8000bec <MX_FDCAN1_Init+0xc4>)
 8000b90:	2202      	movs	r2, #2
 8000b92:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 64;
 8000b94:	4b15      	ldr	r3, [pc, #84]	; (8000bec <MX_FDCAN1_Init+0xc4>)
 8000b96:	2240      	movs	r2, #64	; 0x40
 8000b98:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_64;
 8000b9a:	4b14      	ldr	r3, [pc, #80]	; (8000bec <MX_FDCAN1_Init+0xc4>)
 8000b9c:	2212      	movs	r2, #18
 8000b9e:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000ba0:	4b12      	ldr	r3, [pc, #72]	; (8000bec <MX_FDCAN1_Init+0xc4>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000ba6:	4b11      	ldr	r3, [pc, #68]	; (8000bec <MX_FDCAN1_Init+0xc4>)
 8000ba8:	2204      	movs	r2, #4
 8000baa:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000bac:	4b0f      	ldr	r3, [pc, #60]	; (8000bec <MX_FDCAN1_Init+0xc4>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000bb2:	4b0e      	ldr	r3, [pc, #56]	; (8000bec <MX_FDCAN1_Init+0xc4>)
 8000bb4:	2204      	movs	r2, #4
 8000bb6:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000bb8:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <MX_FDCAN1_Init+0xc4>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000bbe:	4b0b      	ldr	r3, [pc, #44]	; (8000bec <MX_FDCAN1_Init+0xc4>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000bc4:	4b09      	ldr	r3, [pc, #36]	; (8000bec <MX_FDCAN1_Init+0xc4>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000bca:	4b08      	ldr	r3, [pc, #32]	; (8000bec <MX_FDCAN1_Init+0xc4>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000bd0:	4b06      	ldr	r3, [pc, #24]	; (8000bec <MX_FDCAN1_Init+0xc4>)
 8000bd2:	2204      	movs	r2, #4
 8000bd4:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000bd6:	4805      	ldr	r0, [pc, #20]	; (8000bec <MX_FDCAN1_Init+0xc4>)
 8000bd8:	f002 fd60 	bl	800369c <HAL_FDCAN_Init>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 8000be2:	f000 faed 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	240405f8 	.word	0x240405f8
 8000bf0:	4000a000 	.word	0x4000a000

08000bf4 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000bf8:	4b2e      	ldr	r3, [pc, #184]	; (8000cb4 <MX_FDCAN2_Init+0xc0>)
 8000bfa:	4a2f      	ldr	r2, [pc, #188]	; (8000cb8 <MX_FDCAN2_Init+0xc4>)
 8000bfc:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000bfe:	4b2d      	ldr	r3, [pc, #180]	; (8000cb4 <MX_FDCAN2_Init+0xc0>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000c04:	4b2b      	ldr	r3, [pc, #172]	; (8000cb4 <MX_FDCAN2_Init+0xc0>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000c0a:	4b2a      	ldr	r3, [pc, #168]	; (8000cb4 <MX_FDCAN2_Init+0xc0>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000c10:	4b28      	ldr	r3, [pc, #160]	; (8000cb4 <MX_FDCAN2_Init+0xc0>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000c16:	4b27      	ldr	r3, [pc, #156]	; (8000cb4 <MX_FDCAN2_Init+0xc0>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8000c1c:	4b25      	ldr	r3, [pc, #148]	; (8000cb4 <MX_FDCAN2_Init+0xc0>)
 8000c1e:	2201      	movs	r2, #1
 8000c20:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000c22:	4b24      	ldr	r3, [pc, #144]	; (8000cb4 <MX_FDCAN2_Init+0xc0>)
 8000c24:	2201      	movs	r2, #1
 8000c26:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000c28:	4b22      	ldr	r3, [pc, #136]	; (8000cb4 <MX_FDCAN2_Init+0xc0>)
 8000c2a:	2202      	movs	r2, #2
 8000c2c:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000c2e:	4b21      	ldr	r3, [pc, #132]	; (8000cb4 <MX_FDCAN2_Init+0xc0>)
 8000c30:	2202      	movs	r2, #2
 8000c32:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000c34:	4b1f      	ldr	r3, [pc, #124]	; (8000cb4 <MX_FDCAN2_Init+0xc0>)
 8000c36:	2201      	movs	r2, #1
 8000c38:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000c3a:	4b1e      	ldr	r3, [pc, #120]	; (8000cb4 <MX_FDCAN2_Init+0xc0>)
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000c40:	4b1c      	ldr	r3, [pc, #112]	; (8000cb4 <MX_FDCAN2_Init+0xc0>)
 8000c42:	2201      	movs	r2, #1
 8000c44:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000c46:	4b1b      	ldr	r3, [pc, #108]	; (8000cb4 <MX_FDCAN2_Init+0xc0>)
 8000c48:	2201      	movs	r2, #1
 8000c4a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000c4c:	4b19      	ldr	r3, [pc, #100]	; (8000cb4 <MX_FDCAN2_Init+0xc0>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000c52:	4b18      	ldr	r3, [pc, #96]	; (8000cb4 <MX_FDCAN2_Init+0xc0>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000c58:	4b16      	ldr	r3, [pc, #88]	; (8000cb4 <MX_FDCAN2_Init+0xc0>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000c5e:	4b15      	ldr	r3, [pc, #84]	; (8000cb4 <MX_FDCAN2_Init+0xc0>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000c64:	4b13      	ldr	r3, [pc, #76]	; (8000cb4 <MX_FDCAN2_Init+0xc0>)
 8000c66:	2204      	movs	r2, #4
 8000c68:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000c6a:	4b12      	ldr	r3, [pc, #72]	; (8000cb4 <MX_FDCAN2_Init+0xc0>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000c70:	4b10      	ldr	r3, [pc, #64]	; (8000cb4 <MX_FDCAN2_Init+0xc0>)
 8000c72:	2204      	movs	r2, #4
 8000c74:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000c76:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <MX_FDCAN2_Init+0xc0>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000c7c:	4b0d      	ldr	r3, [pc, #52]	; (8000cb4 <MX_FDCAN2_Init+0xc0>)
 8000c7e:	2204      	movs	r2, #4
 8000c80:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000c82:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <MX_FDCAN2_Init+0xc0>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000c88:	4b0a      	ldr	r3, [pc, #40]	; (8000cb4 <MX_FDCAN2_Init+0xc0>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000c8e:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <MX_FDCAN2_Init+0xc0>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000c94:	4b07      	ldr	r3, [pc, #28]	; (8000cb4 <MX_FDCAN2_Init+0xc0>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000c9a:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <MX_FDCAN2_Init+0xc0>)
 8000c9c:	2204      	movs	r2, #4
 8000c9e:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000ca0:	4804      	ldr	r0, [pc, #16]	; (8000cb4 <MX_FDCAN2_Init+0xc0>)
 8000ca2:	f002 fcfb 	bl	800369c <HAL_FDCAN_Init>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000cac:	f000 fa88 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000cb0:	bf00      	nop
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	24040a90 	.word	0x24040a90
 8000cb8:	4000a400 	.word	0x4000a400

08000cbc <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000cc0:	4b0d      	ldr	r3, [pc, #52]	; (8000cf8 <MX_SDMMC1_SD_Init+0x3c>)
 8000cc2:	4a0e      	ldr	r2, [pc, #56]	; (8000cfc <MX_SDMMC1_SD_Init+0x40>)
 8000cc4:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000cc6:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <MX_SDMMC1_SD_Init+0x3c>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000ccc:	4b0a      	ldr	r3, [pc, #40]	; (8000cf8 <MX_SDMMC1_SD_Init+0x3c>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000cd2:	4b09      	ldr	r3, [pc, #36]	; (8000cf8 <MX_SDMMC1_SD_Init+0x3c>)
 8000cd4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cd8:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 8000cda:	4b07      	ldr	r3, [pc, #28]	; (8000cf8 <MX_SDMMC1_SD_Init+0x3c>)
 8000cdc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ce0:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000ce2:	4b05      	ldr	r3, [pc, #20]	; (8000cf8 <MX_SDMMC1_SD_Init+0x3c>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 8000ce8:	4b03      	ldr	r3, [pc, #12]	; (8000cf8 <MX_SDMMC1_SD_Init+0x3c>)
 8000cea:	2201      	movs	r2, #1
 8000cec:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000cee:	bf00      	nop
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	24040574 	.word	0x24040574
 8000cfc:	52007000 	.word	0x52007000

08000d00 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d04:	4b27      	ldr	r3, [pc, #156]	; (8000da4 <MX_SPI1_Init+0xa4>)
 8000d06:	4a28      	ldr	r2, [pc, #160]	; (8000da8 <MX_SPI1_Init+0xa8>)
 8000d08:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d0a:	4b26      	ldr	r3, [pc, #152]	; (8000da4 <MX_SPI1_Init+0xa4>)
 8000d0c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000d10:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d12:	4b24      	ldr	r3, [pc, #144]	; (8000da4 <MX_SPI1_Init+0xa4>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d18:	4b22      	ldr	r3, [pc, #136]	; (8000da4 <MX_SPI1_Init+0xa4>)
 8000d1a:	2207      	movs	r2, #7
 8000d1c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d1e:	4b21      	ldr	r3, [pc, #132]	; (8000da4 <MX_SPI1_Init+0xa4>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d24:	4b1f      	ldr	r3, [pc, #124]	; (8000da4 <MX_SPI1_Init+0xa4>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d2a:	4b1e      	ldr	r3, [pc, #120]	; (8000da4 <MX_SPI1_Init+0xa4>)
 8000d2c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000d30:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d32:	4b1c      	ldr	r3, [pc, #112]	; (8000da4 <MX_SPI1_Init+0xa4>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d38:	4b1a      	ldr	r3, [pc, #104]	; (8000da4 <MX_SPI1_Init+0xa4>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d3e:	4b19      	ldr	r3, [pc, #100]	; (8000da4 <MX_SPI1_Init+0xa4>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d44:	4b17      	ldr	r3, [pc, #92]	; (8000da4 <MX_SPI1_Init+0xa4>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000d4a:	4b16      	ldr	r3, [pc, #88]	; (8000da4 <MX_SPI1_Init+0xa4>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d50:	4b14      	ldr	r3, [pc, #80]	; (8000da4 <MX_SPI1_Init+0xa4>)
 8000d52:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d56:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000d58:	4b12      	ldr	r3, [pc, #72]	; (8000da4 <MX_SPI1_Init+0xa4>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000d5e:	4b11      	ldr	r3, [pc, #68]	; (8000da4 <MX_SPI1_Init+0xa4>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d64:	4b0f      	ldr	r3, [pc, #60]	; (8000da4 <MX_SPI1_Init+0xa4>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d6a:	4b0e      	ldr	r3, [pc, #56]	; (8000da4 <MX_SPI1_Init+0xa4>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000d70:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <MX_SPI1_Init+0xa4>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000d76:	4b0b      	ldr	r3, [pc, #44]	; (8000da4 <MX_SPI1_Init+0xa4>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000d7c:	4b09      	ldr	r3, [pc, #36]	; (8000da4 <MX_SPI1_Init+0xa4>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000d82:	4b08      	ldr	r3, [pc, #32]	; (8000da4 <MX_SPI1_Init+0xa4>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000d88:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <MX_SPI1_Init+0xa4>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d8e:	4805      	ldr	r0, [pc, #20]	; (8000da4 <MX_SPI1_Init+0xa4>)
 8000d90:	f00a f83a 	bl	800ae08 <HAL_SPI_Init>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8000d9a:	f000 fa11 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	24040728 	.word	0x24040728
 8000da8:	40013000 	.word	0x40013000

08000dac <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8000db0:	4b22      	ldr	r3, [pc, #136]	; (8000e3c <MX_UART8_Init+0x90>)
 8000db2:	4a23      	ldr	r2, [pc, #140]	; (8000e40 <MX_UART8_Init+0x94>)
 8000db4:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8000db6:	4b21      	ldr	r3, [pc, #132]	; (8000e3c <MX_UART8_Init+0x90>)
 8000db8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dbc:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8000dbe:	4b1f      	ldr	r3, [pc, #124]	; (8000e3c <MX_UART8_Init+0x90>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8000dc4:	4b1d      	ldr	r3, [pc, #116]	; (8000e3c <MX_UART8_Init+0x90>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8000dca:	4b1c      	ldr	r3, [pc, #112]	; (8000e3c <MX_UART8_Init+0x90>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8000dd0:	4b1a      	ldr	r3, [pc, #104]	; (8000e3c <MX_UART8_Init+0x90>)
 8000dd2:	220c      	movs	r2, #12
 8000dd4:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dd6:	4b19      	ldr	r3, [pc, #100]	; (8000e3c <MX_UART8_Init+0x90>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ddc:	4b17      	ldr	r3, [pc, #92]	; (8000e3c <MX_UART8_Init+0x90>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000de2:	4b16      	ldr	r3, [pc, #88]	; (8000e3c <MX_UART8_Init+0x90>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000de8:	4b14      	ldr	r3, [pc, #80]	; (8000e3c <MX_UART8_Init+0x90>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dee:	4b13      	ldr	r3, [pc, #76]	; (8000e3c <MX_UART8_Init+0x90>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8000df4:	4811      	ldr	r0, [pc, #68]	; (8000e3c <MX_UART8_Init+0x90>)
 8000df6:	f00a f91a 	bl	800b02e <HAL_UART_Init>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8000e00:	f000 f9de 	bl	80011c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e04:	2100      	movs	r1, #0
 8000e06:	480d      	ldr	r0, [pc, #52]	; (8000e3c <MX_UART8_Init+0x90>)
 8000e08:	f00b f8b5 	bl	800bf76 <HAL_UARTEx_SetTxFifoThreshold>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 8000e12:	f000 f9d5 	bl	80011c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e16:	2100      	movs	r1, #0
 8000e18:	4808      	ldr	r0, [pc, #32]	; (8000e3c <MX_UART8_Init+0x90>)
 8000e1a:	f00b f8ea 	bl	800bff2 <HAL_UARTEx_SetRxFifoThreshold>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8000e24:	f000 f9cc 	bl	80011c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8000e28:	4804      	ldr	r0, [pc, #16]	; (8000e3c <MX_UART8_Init+0x90>)
 8000e2a:	f00b f86b 	bl	800bf04 <HAL_UARTEx_DisableFifoMode>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8000e34:	f000 f9c4 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8000e38:	bf00      	nop
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	24040698 	.word	0x24040698
 8000e40:	40007c00 	.word	0x40007c00

08000e44 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e48:	4b22      	ldr	r3, [pc, #136]	; (8000ed4 <MX_USART3_UART_Init+0x90>)
 8000e4a:	4a23      	ldr	r2, [pc, #140]	; (8000ed8 <MX_USART3_UART_Init+0x94>)
 8000e4c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8000e4e:	4b21      	ldr	r3, [pc, #132]	; (8000ed4 <MX_USART3_UART_Init+0x90>)
 8000e50:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000e54:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e56:	4b1f      	ldr	r3, [pc, #124]	; (8000ed4 <MX_USART3_UART_Init+0x90>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e5c:	4b1d      	ldr	r3, [pc, #116]	; (8000ed4 <MX_USART3_UART_Init+0x90>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e62:	4b1c      	ldr	r3, [pc, #112]	; (8000ed4 <MX_USART3_UART_Init+0x90>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e68:	4b1a      	ldr	r3, [pc, #104]	; (8000ed4 <MX_USART3_UART_Init+0x90>)
 8000e6a:	220c      	movs	r2, #12
 8000e6c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e6e:	4b19      	ldr	r3, [pc, #100]	; (8000ed4 <MX_USART3_UART_Init+0x90>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e74:	4b17      	ldr	r3, [pc, #92]	; (8000ed4 <MX_USART3_UART_Init+0x90>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e7a:	4b16      	ldr	r3, [pc, #88]	; (8000ed4 <MX_USART3_UART_Init+0x90>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e80:	4b14      	ldr	r3, [pc, #80]	; (8000ed4 <MX_USART3_UART_Init+0x90>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e86:	4b13      	ldr	r3, [pc, #76]	; (8000ed4 <MX_USART3_UART_Init+0x90>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e8c:	4811      	ldr	r0, [pc, #68]	; (8000ed4 <MX_USART3_UART_Init+0x90>)
 8000e8e:	f00a f8ce 	bl	800b02e <HAL_UART_Init>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000e98:	f000 f992 	bl	80011c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	480d      	ldr	r0, [pc, #52]	; (8000ed4 <MX_USART3_UART_Init+0x90>)
 8000ea0:	f00b f869 	bl	800bf76 <HAL_UARTEx_SetTxFifoThreshold>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000eaa:	f000 f989 	bl	80011c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000eae:	2100      	movs	r1, #0
 8000eb0:	4808      	ldr	r0, [pc, #32]	; (8000ed4 <MX_USART3_UART_Init+0x90>)
 8000eb2:	f00b f89e 	bl	800bff2 <HAL_UARTEx_SetRxFifoThreshold>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000ebc:	f000 f980 	bl	80011c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000ec0:	4804      	ldr	r0, [pc, #16]	; (8000ed4 <MX_USART3_UART_Init+0x90>)
 8000ec2:	f00b f81f 	bl	800bf04 <HAL_UARTEx_DisableFifoMode>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000ecc:	f000 f978 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ed0:	bf00      	nop
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	240402b8 	.word	0x240402b8
 8000ed8:	40004800 	.word	0x40004800

08000edc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ee2:	4b0d      	ldr	r3, [pc, #52]	; (8000f18 <MX_DMA_Init+0x3c>)
 8000ee4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ee8:	4a0b      	ldr	r2, [pc, #44]	; (8000f18 <MX_DMA_Init+0x3c>)
 8000eea:	f043 0301 	orr.w	r3, r3, #1
 8000eee:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ef2:	4b09      	ldr	r3, [pc, #36]	; (8000f18 <MX_DMA_Init+0x3c>)
 8000ef4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ef8:	f003 0301 	and.w	r3, r3, #1
 8000efc:	607b      	str	r3, [r7, #4]
 8000efe:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000f00:	2200      	movs	r2, #0
 8000f02:	2100      	movs	r1, #0
 8000f04:	200b      	movs	r0, #11
 8000f06:	f000 fed2 	bl	8001cae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000f0a:	200b      	movs	r0, #11
 8000f0c:	f000 fee9 	bl	8001ce2 <HAL_NVIC_EnableIRQ>

}
 8000f10:	bf00      	nop
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	58024400 	.word	0x58024400

08000f1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b08c      	sub	sp, #48	; 0x30
 8000f20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f22:	f107 031c 	add.w	r3, r7, #28
 8000f26:	2200      	movs	r2, #0
 8000f28:	601a      	str	r2, [r3, #0]
 8000f2a:	605a      	str	r2, [r3, #4]
 8000f2c:	609a      	str	r2, [r3, #8]
 8000f2e:	60da      	str	r2, [r3, #12]
 8000f30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f32:	4b69      	ldr	r3, [pc, #420]	; (80010d8 <MX_GPIO_Init+0x1bc>)
 8000f34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f38:	4a67      	ldr	r2, [pc, #412]	; (80010d8 <MX_GPIO_Init+0x1bc>)
 8000f3a:	f043 0310 	orr.w	r3, r3, #16
 8000f3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f42:	4b65      	ldr	r3, [pc, #404]	; (80010d8 <MX_GPIO_Init+0x1bc>)
 8000f44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f48:	f003 0310 	and.w	r3, r3, #16
 8000f4c:	61bb      	str	r3, [r7, #24]
 8000f4e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f50:	4b61      	ldr	r3, [pc, #388]	; (80010d8 <MX_GPIO_Init+0x1bc>)
 8000f52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f56:	4a60      	ldr	r2, [pc, #384]	; (80010d8 <MX_GPIO_Init+0x1bc>)
 8000f58:	f043 0304 	orr.w	r3, r3, #4
 8000f5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f60:	4b5d      	ldr	r3, [pc, #372]	; (80010d8 <MX_GPIO_Init+0x1bc>)
 8000f62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f66:	f003 0304 	and.w	r3, r3, #4
 8000f6a:	617b      	str	r3, [r7, #20]
 8000f6c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f6e:	4b5a      	ldr	r3, [pc, #360]	; (80010d8 <MX_GPIO_Init+0x1bc>)
 8000f70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f74:	4a58      	ldr	r2, [pc, #352]	; (80010d8 <MX_GPIO_Init+0x1bc>)
 8000f76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f7e:	4b56      	ldr	r3, [pc, #344]	; (80010d8 <MX_GPIO_Init+0x1bc>)
 8000f80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f88:	613b      	str	r3, [r7, #16]
 8000f8a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8c:	4b52      	ldr	r3, [pc, #328]	; (80010d8 <MX_GPIO_Init+0x1bc>)
 8000f8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f92:	4a51      	ldr	r2, [pc, #324]	; (80010d8 <MX_GPIO_Init+0x1bc>)
 8000f94:	f043 0301 	orr.w	r3, r3, #1
 8000f98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f9c:	4b4e      	ldr	r3, [pc, #312]	; (80010d8 <MX_GPIO_Init+0x1bc>)
 8000f9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000faa:	4b4b      	ldr	r3, [pc, #300]	; (80010d8 <MX_GPIO_Init+0x1bc>)
 8000fac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb0:	4a49      	ldr	r2, [pc, #292]	; (80010d8 <MX_GPIO_Init+0x1bc>)
 8000fb2:	f043 0302 	orr.w	r3, r3, #2
 8000fb6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fba:	4b47      	ldr	r3, [pc, #284]	; (80010d8 <MX_GPIO_Init+0x1bc>)
 8000fbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc0:	f003 0302 	and.w	r3, r3, #2
 8000fc4:	60bb      	str	r3, [r7, #8]
 8000fc6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fc8:	4b43      	ldr	r3, [pc, #268]	; (80010d8 <MX_GPIO_Init+0x1bc>)
 8000fca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fce:	4a42      	ldr	r2, [pc, #264]	; (80010d8 <MX_GPIO_Init+0x1bc>)
 8000fd0:	f043 0308 	orr.w	r3, r3, #8
 8000fd4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fd8:	4b3f      	ldr	r3, [pc, #252]	; (80010d8 <MX_GPIO_Init+0x1bc>)
 8000fda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fde:	f003 0308 	and.w	r3, r3, #8
 8000fe2:	607b      	str	r3, [r7, #4]
 8000fe4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RS_485_TX_EN_Pin|RS_485_RX_EN_Pin, GPIO_PIN_RESET);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	210c      	movs	r1, #12
 8000fea:	483c      	ldr	r0, [pc, #240]	; (80010dc <MX_GPIO_Init+0x1c0>)
 8000fec:	f003 fe5a 	bl	8004ca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TELE_CE_Pin|TELE_CS_Pin, GPIO_PIN_RESET);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	2103      	movs	r1, #3
 8000ff4:	483a      	ldr	r0, [pc, #232]	; (80010e0 <MX_GPIO_Init+0x1c4>)
 8000ff6:	f003 fe55 	bl	8004ca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2101      	movs	r1, #1
 8000ffe:	4839      	ldr	r0, [pc, #228]	; (80010e4 <MX_GPIO_Init+0x1c8>)
 8001000:	f003 fe50 	bl	8004ca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPS_RST_GPIO_Port, GPS_RST_Pin, GPIO_PIN_RESET);
 8001004:	2200      	movs	r2, #0
 8001006:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800100a:	4837      	ldr	r0, [pc, #220]	; (80010e8 <MX_GPIO_Init+0x1cc>)
 800100c:	f003 fe4a 	bl	8004ca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RS_485_TX_EN_Pin RS_485_RX_EN_Pin */
  GPIO_InitStruct.Pin = RS_485_TX_EN_Pin|RS_485_RX_EN_Pin;
 8001010:	230c      	movs	r3, #12
 8001012:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001014:	2301      	movs	r3, #1
 8001016:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101c:	2300      	movs	r3, #0
 800101e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001020:	f107 031c 	add.w	r3, r7, #28
 8001024:	4619      	mov	r1, r3
 8001026:	482d      	ldr	r0, [pc, #180]	; (80010dc <MX_GPIO_Init+0x1c0>)
 8001028:	f003 fc74 	bl	8004914 <HAL_GPIO_Init>

  /*Configure GPIO pins : TELE_CE_Pin TELE_CS_Pin */
  GPIO_InitStruct.Pin = TELE_CE_Pin|TELE_CS_Pin;
 800102c:	2303      	movs	r3, #3
 800102e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001030:	2301      	movs	r3, #1
 8001032:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001038:	2300      	movs	r3, #0
 800103a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103c:	f107 031c 	add.w	r3, r7, #28
 8001040:	4619      	mov	r1, r3
 8001042:	4827      	ldr	r0, [pc, #156]	; (80010e0 <MX_GPIO_Init+0x1c4>)
 8001044:	f003 fc66 	bl	8004914 <HAL_GPIO_Init>

  /*Configure GPIO pin : TELE_IRQ_Pin */
  GPIO_InitStruct.Pin = TELE_IRQ_Pin;
 8001048:	2304      	movs	r3, #4
 800104a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800104c:	4b27      	ldr	r3, [pc, #156]	; (80010ec <MX_GPIO_Init+0x1d0>)
 800104e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TELE_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001054:	f107 031c 	add.w	r3, r7, #28
 8001058:	4619      	mov	r1, r3
 800105a:	4821      	ldr	r0, [pc, #132]	; (80010e0 <MX_GPIO_Init+0x1c4>)
 800105c:	f003 fc5a 	bl	8004914 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001060:	2301      	movs	r3, #1
 8001062:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001064:	2301      	movs	r3, #1
 8001066:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106c:	2300      	movs	r3, #0
 800106e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001070:	f107 031c 	add.w	r3, r7, #28
 8001074:	4619      	mov	r1, r3
 8001076:	481b      	ldr	r0, [pc, #108]	; (80010e4 <MX_GPIO_Init+0x1c8>)
 8001078:	f003 fc4c 	bl	8004914 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_INT_Pin */
  GPIO_InitStruct.Pin = BTN_INT_Pin;
 800107c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001080:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001082:	4b1a      	ldr	r3, [pc, #104]	; (80010ec <MX_GPIO_Init+0x1d0>)
 8001084:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001086:	2300      	movs	r3, #0
 8001088:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BTN_INT_GPIO_Port, &GPIO_InitStruct);
 800108a:	f107 031c 	add.w	r3, r7, #28
 800108e:	4619      	mov	r1, r3
 8001090:	4812      	ldr	r0, [pc, #72]	; (80010dc <MX_GPIO_Init+0x1c0>)
 8001092:	f003 fc3f 	bl	8004914 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPS_RST_Pin */
  GPIO_InitStruct.Pin = GPS_RST_Pin;
 8001096:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800109a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109c:	2301      	movs	r3, #1
 800109e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a4:	2300      	movs	r3, #0
 80010a6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPS_RST_GPIO_Port, &GPIO_InitStruct);
 80010a8:	f107 031c 	add.w	r3, r7, #28
 80010ac:	4619      	mov	r1, r3
 80010ae:	480e      	ldr	r0, [pc, #56]	; (80010e8 <MX_GPIO_Init+0x1cc>)
 80010b0:	f003 fc30 	bl	8004914 <HAL_GPIO_Init>

  /*Configure GPIO pin : CARD_DET_Pin */
  GPIO_InitStruct.Pin = CARD_DET_Pin;
 80010b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ba:	2300      	movs	r3, #0
 80010bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CARD_DET_GPIO_Port, &GPIO_InitStruct);
 80010c2:	f107 031c 	add.w	r3, r7, #28
 80010c6:	4619      	mov	r1, r3
 80010c8:	4805      	ldr	r0, [pc, #20]	; (80010e0 <MX_GPIO_Init+0x1c4>)
 80010ca:	f003 fc23 	bl	8004914 <HAL_GPIO_Init>

}
 80010ce:	bf00      	nop
 80010d0:	3730      	adds	r7, #48	; 0x30
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	58024400 	.word	0x58024400
 80010dc:	58021000 	.word	0x58021000
 80010e0:	58020000 	.word	0x58020000
 80010e4:	58020400 	.word	0x58020400
 80010e8:	58020c00 	.word	0x58020c00
 80010ec:	11110000 	.word	0x11110000

080010f0 <FDCAN_Config>:
    return 2; //buffer 2 is full
  }
  memcpy((DataBuffer.Data.DataBuff + DataBuffer.counter), Data, len+1);
  return 0;
}
static void FDCAN_Config(void){
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b08a      	sub	sp, #40	; 0x28
 80010f4:	af02      	add	r7, sp, #8
	FDCAN_FilterTypeDef sFilterConfig;

	  /* Configure Rx filter */
	  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 80010f6:	2300      	movs	r3, #0
 80010f8:	603b      	str	r3, [r7, #0]
	  sFilterConfig.FilterIndex = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	607b      	str	r3, [r7, #4]
	  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80010fe:	2302      	movs	r3, #2
 8001100:	60bb      	str	r3, [r7, #8]
	  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001102:	2301      	movs	r3, #1
 8001104:	60fb      	str	r3, [r7, #12]
	  sFilterConfig.FilterID1 = 0x321;
 8001106:	f240 3321 	movw	r3, #801	; 0x321
 800110a:	613b      	str	r3, [r7, #16]
	  sFilterConfig.FilterID2 = 0x7FF;
 800110c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001110:	617b      	str	r3, [r7, #20]
	  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) == HAL_OK)
 8001112:	463b      	mov	r3, r7
 8001114:	4619      	mov	r1, r3
 8001116:	4817      	ldr	r0, [pc, #92]	; (8001174 <FDCAN_Config+0x84>)
 8001118:	f002 fca2 	bl	8003a60 <HAL_FDCAN_ConfigFilter>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d102      	bne.n	8001128 <FDCAN_Config+0x38>
	  {
	    printf("Filter configured\n");
 8001122:	4815      	ldr	r0, [pc, #84]	; (8001178 <FDCAN_Config+0x88>)
 8001124:	f013 fb66 	bl	80147f4 <puts>
	  }

	  /* Configure global filter:
	     Filter all remote frames with STD and EXT ID
	     Reject non matching frames with STD ID and EXT ID */
	  if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
 8001128:	2300      	movs	r3, #0
 800112a:	9300      	str	r3, [sp, #0]
 800112c:	2300      	movs	r3, #0
 800112e:	2202      	movs	r2, #2
 8001130:	2102      	movs	r1, #2
 8001132:	4810      	ldr	r0, [pc, #64]	; (8001174 <FDCAN_Config+0x84>)
 8001134:	f002 fd0a 	bl	8003b4c <HAL_FDCAN_ConfigGlobalFilter>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <FDCAN_Config+0x52>
	  {
	    Error_Handler();
 800113e:	f000 f83f 	bl	80011c0 <Error_Handler>
	  }
	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 8001142:	480c      	ldr	r0, [pc, #48]	; (8001174 <FDCAN_Config+0x84>)
 8001144:	f002 fd52 	bl	8003bec <HAL_FDCAN_Start>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <FDCAN_Config+0x62>
	  {
	    Error_Handler();
 800114e:	f000 f837 	bl	80011c0 <Error_Handler>
	  }
	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8001152:	2200      	movs	r2, #0
 8001154:	2101      	movs	r1, #1
 8001156:	4807      	ldr	r0, [pc, #28]	; (8001174 <FDCAN_Config+0x84>)
 8001158:	f002 fed2 	bl	8003f00 <HAL_FDCAN_ActivateNotification>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <FDCAN_Config+0x76>
	  {
	    /* Notification Error */
	    Error_Handler();
 8001162:	f000 f82d 	bl	80011c0 <Error_Handler>
	  }
	HAL_FDCAN_EnableTxDelayCompensation(&hfdcan1);
 8001166:	4803      	ldr	r0, [pc, #12]	; (8001174 <FDCAN_Config+0x84>)
 8001168:	f002 fd1d 	bl	8003ba6 <HAL_FDCAN_EnableTxDelayCompensation>

}
 800116c:	bf00      	nop
 800116e:	3720      	adds	r7, #32
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	240405f8 	.word	0x240405f8
 8001178:	080155f0 	.word	0x080155f0

0800117c <HAL_FDCAN_RxFifo0Callback>:
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan1, uint32_t RxFifo0ITs)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	6039      	str	r1, [r7, #0]
	if (HAL_FDCAN_GetRxMessage(hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 8001186:	4b0a      	ldr	r3, [pc, #40]	; (80011b0 <HAL_FDCAN_RxFifo0Callback+0x34>)
 8001188:	4a0a      	ldr	r2, [pc, #40]	; (80011b4 <HAL_FDCAN_RxFifo0Callback+0x38>)
 800118a:	2140      	movs	r1, #64	; 0x40
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f002 fd59 	bl	8003c44 <HAL_FDCAN_GetRxMessage>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d106      	bne.n	80011a6 <HAL_FDCAN_RxFifo0Callback+0x2a>
			      {
					HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001198:	2101      	movs	r1, #1
 800119a:	4807      	ldr	r0, [pc, #28]	; (80011b8 <HAL_FDCAN_RxFifo0Callback+0x3c>)
 800119c:	f003 fd9b 	bl	8004cd6 <HAL_GPIO_TogglePin>
					printf("Packet Acquired!\n");
 80011a0:	4806      	ldr	r0, [pc, #24]	; (80011bc <HAL_FDCAN_RxFifo0Callback+0x40>)
 80011a2:	f013 fb27 	bl	80147f4 <puts>
				  			  printf("%c",RxData[i]);
				  	  }
				  	  printf("\n");
				  	*/
			      }
}
 80011a6:	bf00      	nop
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	240409e0 	.word	0x240409e0
 80011b4:	24040a68 	.word	0x24040a68
 80011b8:	58020400 	.word	0x58020400
 80011bc:	08015604 	.word	0x08015604

080011c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011c4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("Error\n");
 80011c6:	4802      	ldr	r0, [pc, #8]	; (80011d0 <Error_Handler+0x10>)
 80011c8:	f013 fb14 	bl	80147f4 <puts>
 80011cc:	e7fb      	b.n	80011c6 <Error_Handler+0x6>
 80011ce:	bf00      	nop
 80011d0:	08015618 	.word	0x08015618

080011d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011da:	4b0a      	ldr	r3, [pc, #40]	; (8001204 <HAL_MspInit+0x30>)
 80011dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80011e0:	4a08      	ldr	r2, [pc, #32]	; (8001204 <HAL_MspInit+0x30>)
 80011e2:	f043 0302 	orr.w	r3, r3, #2
 80011e6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80011ea:	4b06      	ldr	r3, [pc, #24]	; (8001204 <HAL_MspInit+0x30>)
 80011ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80011f0:	f003 0302 	and.w	r3, r3, #2
 80011f4:	607b      	str	r3, [r7, #4]
 80011f6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011f8:	bf00      	nop
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	58024400 	.word	0x58024400

08001208 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b08c      	sub	sp, #48	; 0x30
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001210:	f107 031c 	add.w	r3, r7, #28
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]
 800121e:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a48      	ldr	r2, [pc, #288]	; (8001348 <HAL_FDCAN_MspInit+0x140>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d14e      	bne.n	80012c8 <HAL_FDCAN_MspInit+0xc0>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800122a:	4b48      	ldr	r3, [pc, #288]	; (800134c <HAL_FDCAN_MspInit+0x144>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	3301      	adds	r3, #1
 8001230:	4a46      	ldr	r2, [pc, #280]	; (800134c <HAL_FDCAN_MspInit+0x144>)
 8001232:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001234:	4b45      	ldr	r3, [pc, #276]	; (800134c <HAL_FDCAN_MspInit+0x144>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2b01      	cmp	r3, #1
 800123a:	d10e      	bne.n	800125a <HAL_FDCAN_MspInit+0x52>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800123c:	4b44      	ldr	r3, [pc, #272]	; (8001350 <HAL_FDCAN_MspInit+0x148>)
 800123e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001242:	4a43      	ldr	r2, [pc, #268]	; (8001350 <HAL_FDCAN_MspInit+0x148>)
 8001244:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001248:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800124c:	4b40      	ldr	r3, [pc, #256]	; (8001350 <HAL_FDCAN_MspInit+0x148>)
 800124e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001256:	61bb      	str	r3, [r7, #24]
 8001258:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800125a:	4b3d      	ldr	r3, [pc, #244]	; (8001350 <HAL_FDCAN_MspInit+0x148>)
 800125c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001260:	4a3b      	ldr	r2, [pc, #236]	; (8001350 <HAL_FDCAN_MspInit+0x148>)
 8001262:	f043 0302 	orr.w	r3, r3, #2
 8001266:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800126a:	4b39      	ldr	r3, [pc, #228]	; (8001350 <HAL_FDCAN_MspInit+0x148>)
 800126c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001270:	f003 0302 	and.w	r3, r3, #2
 8001274:	617b      	str	r3, [r7, #20]
 8001276:	697b      	ldr	r3, [r7, #20]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001278:	f44f 7340 	mov.w	r3, #768	; 0x300
 800127c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127e:	2302      	movs	r3, #2
 8001280:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001286:	2303      	movs	r3, #3
 8001288:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800128a:	2309      	movs	r3, #9
 800128c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800128e:	f107 031c 	add.w	r3, r7, #28
 8001292:	4619      	mov	r1, r3
 8001294:	482f      	ldr	r0, [pc, #188]	; (8001354 <HAL_FDCAN_MspInit+0x14c>)
 8001296:	f003 fb3d 	bl	8004914 <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_PMCR_I2C_PB8_FMP);
 800129a:	2040      	movs	r0, #64	; 0x40
 800129c:	f003 fd36 	bl	8004d0c <HAL_I2CEx_EnableFastModePlus>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_PMCR_I2C_PB9_FMP);
 80012a0:	2080      	movs	r0, #128	; 0x80
 80012a2:	f003 fd33 	bl	8004d0c <HAL_I2CEx_EnableFastModePlus>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80012a6:	2200      	movs	r2, #0
 80012a8:	2100      	movs	r1, #0
 80012aa:	2013      	movs	r0, #19
 80012ac:	f000 fcff 	bl	8001cae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80012b0:	2013      	movs	r0, #19
 80012b2:	f000 fd16 	bl	8001ce2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 80012b6:	2200      	movs	r2, #0
 80012b8:	2100      	movs	r1, #0
 80012ba:	2015      	movs	r0, #21
 80012bc:	f000 fcf7 	bl	8001cae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 80012c0:	2015      	movs	r0, #21
 80012c2:	f000 fd0e 	bl	8001ce2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 80012c6:	e03b      	b.n	8001340 <HAL_FDCAN_MspInit+0x138>
  else if(hfdcan->Instance==FDCAN2)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a22      	ldr	r2, [pc, #136]	; (8001358 <HAL_FDCAN_MspInit+0x150>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d136      	bne.n	8001340 <HAL_FDCAN_MspInit+0x138>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80012d2:	4b1e      	ldr	r3, [pc, #120]	; (800134c <HAL_FDCAN_MspInit+0x144>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	3301      	adds	r3, #1
 80012d8:	4a1c      	ldr	r2, [pc, #112]	; (800134c <HAL_FDCAN_MspInit+0x144>)
 80012da:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80012dc:	4b1b      	ldr	r3, [pc, #108]	; (800134c <HAL_FDCAN_MspInit+0x144>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d10e      	bne.n	8001302 <HAL_FDCAN_MspInit+0xfa>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80012e4:	4b1a      	ldr	r3, [pc, #104]	; (8001350 <HAL_FDCAN_MspInit+0x148>)
 80012e6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80012ea:	4a19      	ldr	r2, [pc, #100]	; (8001350 <HAL_FDCAN_MspInit+0x148>)
 80012ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012f0:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80012f4:	4b16      	ldr	r3, [pc, #88]	; (8001350 <HAL_FDCAN_MspInit+0x148>)
 80012f6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80012fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012fe:	613b      	str	r3, [r7, #16]
 8001300:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001302:	4b13      	ldr	r3, [pc, #76]	; (8001350 <HAL_FDCAN_MspInit+0x148>)
 8001304:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001308:	4a11      	ldr	r2, [pc, #68]	; (8001350 <HAL_FDCAN_MspInit+0x148>)
 800130a:	f043 0302 	orr.w	r3, r3, #2
 800130e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001312:	4b0f      	ldr	r3, [pc, #60]	; (8001350 <HAL_FDCAN_MspInit+0x148>)
 8001314:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001318:	f003 0302 	and.w	r3, r3, #2
 800131c:	60fb      	str	r3, [r7, #12]
 800131e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001320:	2360      	movs	r3, #96	; 0x60
 8001322:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001324:	2302      	movs	r3, #2
 8001326:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132c:	2300      	movs	r3, #0
 800132e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001330:	2309      	movs	r3, #9
 8001332:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001334:	f107 031c 	add.w	r3, r7, #28
 8001338:	4619      	mov	r1, r3
 800133a:	4806      	ldr	r0, [pc, #24]	; (8001354 <HAL_FDCAN_MspInit+0x14c>)
 800133c:	f003 faea 	bl	8004914 <HAL_GPIO_Init>
}
 8001340:	bf00      	nop
 8001342:	3730      	adds	r7, #48	; 0x30
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	4000a000 	.word	0x4000a000
 800134c:	240401f0 	.word	0x240401f0
 8001350:	58024400 	.word	0x58024400
 8001354:	58020400 	.word	0x58020400
 8001358:	4000a400 	.word	0x4000a400

0800135c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b08a      	sub	sp, #40	; 0x28
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001364:	f107 0314 	add.w	r3, r7, #20
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	60da      	str	r2, [r3, #12]
 8001372:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a2e      	ldr	r2, [pc, #184]	; (8001434 <HAL_SD_MspInit+0xd8>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d155      	bne.n	800142a <HAL_SD_MspInit+0xce>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800137e:	4b2e      	ldr	r3, [pc, #184]	; (8001438 <HAL_SD_MspInit+0xdc>)
 8001380:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001384:	4a2c      	ldr	r2, [pc, #176]	; (8001438 <HAL_SD_MspInit+0xdc>)
 8001386:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800138a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800138e:	4b2a      	ldr	r3, [pc, #168]	; (8001438 <HAL_SD_MspInit+0xdc>)
 8001390:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001394:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001398:	613b      	str	r3, [r7, #16]
 800139a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800139c:	4b26      	ldr	r3, [pc, #152]	; (8001438 <HAL_SD_MspInit+0xdc>)
 800139e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013a2:	4a25      	ldr	r2, [pc, #148]	; (8001438 <HAL_SD_MspInit+0xdc>)
 80013a4:	f043 0304 	orr.w	r3, r3, #4
 80013a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013ac:	4b22      	ldr	r3, [pc, #136]	; (8001438 <HAL_SD_MspInit+0xdc>)
 80013ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013b2:	f003 0304 	and.w	r3, r3, #4
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013ba:	4b1f      	ldr	r3, [pc, #124]	; (8001438 <HAL_SD_MspInit+0xdc>)
 80013bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013c0:	4a1d      	ldr	r2, [pc, #116]	; (8001438 <HAL_SD_MspInit+0xdc>)
 80013c2:	f043 0308 	orr.w	r3, r3, #8
 80013c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013ca:	4b1b      	ldr	r3, [pc, #108]	; (8001438 <HAL_SD_MspInit+0xdc>)
 80013cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013d0:	f003 0308 	and.w	r3, r3, #8
 80013d4:	60bb      	str	r3, [r7, #8]
 80013d6:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80013d8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80013dc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013de:	2302      	movs	r3, #2
 80013e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e6:	2303      	movs	r3, #3
 80013e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80013ea:	230c      	movs	r3, #12
 80013ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ee:	f107 0314 	add.w	r3, r7, #20
 80013f2:	4619      	mov	r1, r3
 80013f4:	4811      	ldr	r0, [pc, #68]	; (800143c <HAL_SD_MspInit+0xe0>)
 80013f6:	f003 fa8d 	bl	8004914 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013fa:	2304      	movs	r3, #4
 80013fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fe:	2302      	movs	r3, #2
 8001400:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	2300      	movs	r3, #0
 8001404:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001406:	2303      	movs	r3, #3
 8001408:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800140a:	230c      	movs	r3, #12
 800140c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800140e:	f107 0314 	add.w	r3, r7, #20
 8001412:	4619      	mov	r1, r3
 8001414:	480a      	ldr	r0, [pc, #40]	; (8001440 <HAL_SD_MspInit+0xe4>)
 8001416:	f003 fa7d 	bl	8004914 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 800141a:	2200      	movs	r2, #0
 800141c:	2100      	movs	r1, #0
 800141e:	2031      	movs	r0, #49	; 0x31
 8001420:	f000 fc45 	bl	8001cae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001424:	2031      	movs	r0, #49	; 0x31
 8001426:	f000 fc5c 	bl	8001ce2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800142a:	bf00      	nop
 800142c:	3728      	adds	r7, #40	; 0x28
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	52007000 	.word	0x52007000
 8001438:	58024400 	.word	0x58024400
 800143c:	58020800 	.word	0x58020800
 8001440:	58020c00 	.word	0x58020c00

08001444 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08a      	sub	sp, #40	; 0x28
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144c:	f107 0314 	add.w	r3, r7, #20
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a1a      	ldr	r2, [pc, #104]	; (80014cc <HAL_SPI_MspInit+0x88>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d12d      	bne.n	80014c2 <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001466:	4b1a      	ldr	r3, [pc, #104]	; (80014d0 <HAL_SPI_MspInit+0x8c>)
 8001468:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800146c:	4a18      	ldr	r2, [pc, #96]	; (80014d0 <HAL_SPI_MspInit+0x8c>)
 800146e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001472:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001476:	4b16      	ldr	r3, [pc, #88]	; (80014d0 <HAL_SPI_MspInit+0x8c>)
 8001478:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800147c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001480:	613b      	str	r3, [r7, #16]
 8001482:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001484:	4b12      	ldr	r3, [pc, #72]	; (80014d0 <HAL_SPI_MspInit+0x8c>)
 8001486:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800148a:	4a11      	ldr	r2, [pc, #68]	; (80014d0 <HAL_SPI_MspInit+0x8c>)
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001494:	4b0e      	ldr	r3, [pc, #56]	; (80014d0 <HAL_SPI_MspInit+0x8c>)
 8001496:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80014a2:	23e0      	movs	r3, #224	; 0xe0
 80014a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a6:	2302      	movs	r3, #2
 80014a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014aa:	2300      	movs	r3, #0
 80014ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ae:	2300      	movs	r3, #0
 80014b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014b2:	2305      	movs	r3, #5
 80014b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b6:	f107 0314 	add.w	r3, r7, #20
 80014ba:	4619      	mov	r1, r3
 80014bc:	4805      	ldr	r0, [pc, #20]	; (80014d4 <HAL_SPI_MspInit+0x90>)
 80014be:	f003 fa29 	bl	8004914 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80014c2:	bf00      	nop
 80014c4:	3728      	adds	r7, #40	; 0x28
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40013000 	.word	0x40013000
 80014d0:	58024400 	.word	0x58024400
 80014d4:	58020000 	.word	0x58020000

080014d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b08c      	sub	sp, #48	; 0x30
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e0:	f107 031c 	add.w	r3, r7, #28
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	60da      	str	r2, [r3, #12]
 80014ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a4b      	ldr	r2, [pc, #300]	; (8001624 <HAL_UART_MspInit+0x14c>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d12e      	bne.n	8001558 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 80014fa:	4b4b      	ldr	r3, [pc, #300]	; (8001628 <HAL_UART_MspInit+0x150>)
 80014fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001500:	4a49      	ldr	r2, [pc, #292]	; (8001628 <HAL_UART_MspInit+0x150>)
 8001502:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001506:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800150a:	4b47      	ldr	r3, [pc, #284]	; (8001628 <HAL_UART_MspInit+0x150>)
 800150c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001510:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001514:	61bb      	str	r3, [r7, #24]
 8001516:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001518:	4b43      	ldr	r3, [pc, #268]	; (8001628 <HAL_UART_MspInit+0x150>)
 800151a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800151e:	4a42      	ldr	r2, [pc, #264]	; (8001628 <HAL_UART_MspInit+0x150>)
 8001520:	f043 0310 	orr.w	r3, r3, #16
 8001524:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001528:	4b3f      	ldr	r3, [pc, #252]	; (8001628 <HAL_UART_MspInit+0x150>)
 800152a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800152e:	f003 0310 	and.w	r3, r3, #16
 8001532:	617b      	str	r3, [r7, #20]
 8001534:	697b      	ldr	r3, [r7, #20]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001536:	2303      	movs	r3, #3
 8001538:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153a:	2302      	movs	r3, #2
 800153c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153e:	2300      	movs	r3, #0
 8001540:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001542:	2300      	movs	r3, #0
 8001544:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8001546:	2308      	movs	r3, #8
 8001548:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800154a:	f107 031c 	add.w	r3, r7, #28
 800154e:	4619      	mov	r1, r3
 8001550:	4836      	ldr	r0, [pc, #216]	; (800162c <HAL_UART_MspInit+0x154>)
 8001552:	f003 f9df 	bl	8004914 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001556:	e061      	b.n	800161c <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART3)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a34      	ldr	r2, [pc, #208]	; (8001630 <HAL_UART_MspInit+0x158>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d15c      	bne.n	800161c <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001562:	4b31      	ldr	r3, [pc, #196]	; (8001628 <HAL_UART_MspInit+0x150>)
 8001564:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001568:	4a2f      	ldr	r2, [pc, #188]	; (8001628 <HAL_UART_MspInit+0x150>)
 800156a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800156e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001572:	4b2d      	ldr	r3, [pc, #180]	; (8001628 <HAL_UART_MspInit+0x150>)
 8001574:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001578:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800157c:	613b      	str	r3, [r7, #16]
 800157e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001580:	4b29      	ldr	r3, [pc, #164]	; (8001628 <HAL_UART_MspInit+0x150>)
 8001582:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001586:	4a28      	ldr	r2, [pc, #160]	; (8001628 <HAL_UART_MspInit+0x150>)
 8001588:	f043 0308 	orr.w	r3, r3, #8
 800158c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001590:	4b25      	ldr	r3, [pc, #148]	; (8001628 <HAL_UART_MspInit+0x150>)
 8001592:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001596:	f003 0308 	and.w	r3, r3, #8
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800159e:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a4:	2302      	movs	r3, #2
 80015a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ac:	2300      	movs	r3, #0
 80015ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015b0:	2307      	movs	r3, #7
 80015b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015b4:	f107 031c 	add.w	r3, r7, #28
 80015b8:	4619      	mov	r1, r3
 80015ba:	481e      	ldr	r0, [pc, #120]	; (8001634 <HAL_UART_MspInit+0x15c>)
 80015bc:	f003 f9aa 	bl	8004914 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream0;
 80015c0:	4b1d      	ldr	r3, [pc, #116]	; (8001638 <HAL_UART_MspInit+0x160>)
 80015c2:	4a1e      	ldr	r2, [pc, #120]	; (800163c <HAL_UART_MspInit+0x164>)
 80015c4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80015c6:	4b1c      	ldr	r3, [pc, #112]	; (8001638 <HAL_UART_MspInit+0x160>)
 80015c8:	222d      	movs	r2, #45	; 0x2d
 80015ca:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015cc:	4b1a      	ldr	r3, [pc, #104]	; (8001638 <HAL_UART_MspInit+0x160>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015d2:	4b19      	ldr	r3, [pc, #100]	; (8001638 <HAL_UART_MspInit+0x160>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015d8:	4b17      	ldr	r3, [pc, #92]	; (8001638 <HAL_UART_MspInit+0x160>)
 80015da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015de:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015e0:	4b15      	ldr	r3, [pc, #84]	; (8001638 <HAL_UART_MspInit+0x160>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015e6:	4b14      	ldr	r3, [pc, #80]	; (8001638 <HAL_UART_MspInit+0x160>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80015ec:	4b12      	ldr	r3, [pc, #72]	; (8001638 <HAL_UART_MspInit+0x160>)
 80015ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015f2:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80015f4:	4b10      	ldr	r3, [pc, #64]	; (8001638 <HAL_UART_MspInit+0x160>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015fa:	4b0f      	ldr	r3, [pc, #60]	; (8001638 <HAL_UART_MspInit+0x160>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001600:	480d      	ldr	r0, [pc, #52]	; (8001638 <HAL_UART_MspInit+0x160>)
 8001602:	f000 fb89 	bl	8001d18 <HAL_DMA_Init>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <HAL_UART_MspInit+0x138>
      Error_Handler();
 800160c:	f7ff fdd8 	bl	80011c0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4a09      	ldr	r2, [pc, #36]	; (8001638 <HAL_UART_MspInit+0x160>)
 8001614:	679a      	str	r2, [r3, #120]	; 0x78
 8001616:	4a08      	ldr	r2, [pc, #32]	; (8001638 <HAL_UART_MspInit+0x160>)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800161c:	bf00      	nop
 800161e:	3730      	adds	r7, #48	; 0x30
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	40007c00 	.word	0x40007c00
 8001628:	58024400 	.word	0x58024400
 800162c:	58021000 	.word	0x58021000
 8001630:	40004800 	.word	0x40004800
 8001634:	58020c00 	.word	0x58020c00
 8001638:	24040240 	.word	0x24040240
 800163c:	40020010 	.word	0x40020010

08001640 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001644:	f005 fd7c 	bl	8007140 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001648:	e7fe      	b.n	8001648 <NMI_Handler+0x8>

0800164a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800164a:	b480      	push	{r7}
 800164c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800164e:	e7fe      	b.n	800164e <HardFault_Handler+0x4>

08001650 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001654:	e7fe      	b.n	8001654 <MemManage_Handler+0x4>

08001656 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001656:	b480      	push	{r7}
 8001658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800165a:	e7fe      	b.n	800165a <BusFault_Handler+0x4>

0800165c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001660:	e7fe      	b.n	8001660 <UsageFault_Handler+0x4>

08001662 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001662:	b480      	push	{r7}
 8001664:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001674:	bf00      	nop
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr

0800167e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800167e:	b480      	push	{r7}
 8001680:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001682:	bf00      	nop
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001690:	f000 f9e4 	bl	8001a5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001694:	bf00      	nop
 8001696:	bd80      	pop	{r7, pc}

08001698 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800169c:	4802      	ldr	r0, [pc, #8]	; (80016a8 <DMA1_Stream0_IRQHandler+0x10>)
 800169e:	f000 fe97 	bl	80023d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	24040240 	.word	0x24040240

080016ac <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80016b0:	4802      	ldr	r0, [pc, #8]	; (80016bc <FDCAN1_IT0_IRQHandler+0x10>)
 80016b2:	f002 fc9f 	bl	8003ff4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	240405f8 	.word	0x240405f8

080016c0 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80016c4:	4802      	ldr	r0, [pc, #8]	; (80016d0 <FDCAN1_IT1_IRQHandler+0x10>)
 80016c6:	f002 fc95 	bl	8003ff4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	240405f8 	.word	0x240405f8

080016d4 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80016d8:	4802      	ldr	r0, [pc, #8]	; (80016e4 <SDMMC1_IRQHandler+0x10>)
 80016da:	f008 f99d 	bl	8009a18 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	24040574 	.word	0x24040574

080016e8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80016ec:	4802      	ldr	r0, [pc, #8]	; (80016f8 <OTG_FS_IRQHandler+0x10>)
 80016ee:	f003 fc88 	bl	8005002 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	240416b0 	.word	0x240416b0

080016fc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b086      	sub	sp, #24
 8001700:	af00      	add	r7, sp, #0
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001708:	2300      	movs	r3, #0
 800170a:	617b      	str	r3, [r7, #20]
 800170c:	e00a      	b.n	8001724 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800170e:	f3af 8000 	nop.w
 8001712:	4601      	mov	r1, r0
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	1c5a      	adds	r2, r3, #1
 8001718:	60ba      	str	r2, [r7, #8]
 800171a:	b2ca      	uxtb	r2, r1
 800171c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	3301      	adds	r3, #1
 8001722:	617b      	str	r3, [r7, #20]
 8001724:	697a      	ldr	r2, [r7, #20]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	429a      	cmp	r2, r3
 800172a:	dbf0      	blt.n	800170e <_read+0x12>
	}

return len;
 800172c:	687b      	ldr	r3, [r7, #4]
}
 800172e:	4618      	mov	r0, r3
 8001730:	3718      	adds	r7, #24
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}

08001736 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001736:	b480      	push	{r7}
 8001738:	b083      	sub	sp, #12
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
	return -1;
 800173e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001742:	4618      	mov	r0, r3
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr

0800174e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800174e:	b480      	push	{r7}
 8001750:	b083      	sub	sp, #12
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
 8001756:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800175e:	605a      	str	r2, [r3, #4]
	return 0;
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr

0800176e <_isatty>:

int _isatty(int file)
{
 800176e:	b480      	push	{r7}
 8001770:	b083      	sub	sp, #12
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
	return 1;
 8001776:	2301      	movs	r3, #1
}
 8001778:	4618      	mov	r0, r3
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	60b9      	str	r1, [r7, #8]
 800178e:	607a      	str	r2, [r7, #4]
	return 0;
 8001790:	2300      	movs	r3, #0
}
 8001792:	4618      	mov	r0, r3
 8001794:	3714      	adds	r7, #20
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
	...

080017a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017a8:	4a14      	ldr	r2, [pc, #80]	; (80017fc <_sbrk+0x5c>)
 80017aa:	4b15      	ldr	r3, [pc, #84]	; (8001800 <_sbrk+0x60>)
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017b4:	4b13      	ldr	r3, [pc, #76]	; (8001804 <_sbrk+0x64>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d102      	bne.n	80017c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017bc:	4b11      	ldr	r3, [pc, #68]	; (8001804 <_sbrk+0x64>)
 80017be:	4a12      	ldr	r2, [pc, #72]	; (8001808 <_sbrk+0x68>)
 80017c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017c2:	4b10      	ldr	r3, [pc, #64]	; (8001804 <_sbrk+0x64>)
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4413      	add	r3, r2
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d207      	bcs.n	80017e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017d0:	f012 febe 	bl	8014550 <__errno>
 80017d4:	4602      	mov	r2, r0
 80017d6:	230c      	movs	r3, #12
 80017d8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80017da:	f04f 33ff 	mov.w	r3, #4294967295
 80017de:	e009      	b.n	80017f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017e0:	4b08      	ldr	r3, [pc, #32]	; (8001804 <_sbrk+0x64>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017e6:	4b07      	ldr	r3, [pc, #28]	; (8001804 <_sbrk+0x64>)
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4413      	add	r3, r2
 80017ee:	4a05      	ldr	r2, [pc, #20]	; (8001804 <_sbrk+0x64>)
 80017f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017f2:	68fb      	ldr	r3, [r7, #12]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3718      	adds	r7, #24
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	24080000 	.word	0x24080000
 8001800:	00000400 	.word	0x00000400
 8001804:	240401f4 	.word	0x240401f4
 8001808:	24041ac0 	.word	0x24041ac0

0800180c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001810:	4b39      	ldr	r3, [pc, #228]	; (80018f8 <SystemInit+0xec>)
 8001812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001816:	4a38      	ldr	r2, [pc, #224]	; (80018f8 <SystemInit+0xec>)
 8001818:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800181c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001820:	4b36      	ldr	r3, [pc, #216]	; (80018fc <SystemInit+0xf0>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 030f 	and.w	r3, r3, #15
 8001828:	2b06      	cmp	r3, #6
 800182a:	d807      	bhi.n	800183c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800182c:	4b33      	ldr	r3, [pc, #204]	; (80018fc <SystemInit+0xf0>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f023 030f 	bic.w	r3, r3, #15
 8001834:	4a31      	ldr	r2, [pc, #196]	; (80018fc <SystemInit+0xf0>)
 8001836:	f043 0307 	orr.w	r3, r3, #7
 800183a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800183c:	4b30      	ldr	r3, [pc, #192]	; (8001900 <SystemInit+0xf4>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a2f      	ldr	r2, [pc, #188]	; (8001900 <SystemInit+0xf4>)
 8001842:	f043 0301 	orr.w	r3, r3, #1
 8001846:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001848:	4b2d      	ldr	r3, [pc, #180]	; (8001900 <SystemInit+0xf4>)
 800184a:	2200      	movs	r2, #0
 800184c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800184e:	4b2c      	ldr	r3, [pc, #176]	; (8001900 <SystemInit+0xf4>)
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	492b      	ldr	r1, [pc, #172]	; (8001900 <SystemInit+0xf4>)
 8001854:	4b2b      	ldr	r3, [pc, #172]	; (8001904 <SystemInit+0xf8>)
 8001856:	4013      	ands	r3, r2
 8001858:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800185a:	4b28      	ldr	r3, [pc, #160]	; (80018fc <SystemInit+0xf0>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 030f 	and.w	r3, r3, #15
 8001862:	2b07      	cmp	r3, #7
 8001864:	d907      	bls.n	8001876 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001866:	4b25      	ldr	r3, [pc, #148]	; (80018fc <SystemInit+0xf0>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f023 030f 	bic.w	r3, r3, #15
 800186e:	4a23      	ldr	r2, [pc, #140]	; (80018fc <SystemInit+0xf0>)
 8001870:	f043 0307 	orr.w	r3, r3, #7
 8001874:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001876:	4b22      	ldr	r3, [pc, #136]	; (8001900 <SystemInit+0xf4>)
 8001878:	2200      	movs	r2, #0
 800187a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800187c:	4b20      	ldr	r3, [pc, #128]	; (8001900 <SystemInit+0xf4>)
 800187e:	2200      	movs	r2, #0
 8001880:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001882:	4b1f      	ldr	r3, [pc, #124]	; (8001900 <SystemInit+0xf4>)
 8001884:	2200      	movs	r2, #0
 8001886:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001888:	4b1d      	ldr	r3, [pc, #116]	; (8001900 <SystemInit+0xf4>)
 800188a:	4a1f      	ldr	r2, [pc, #124]	; (8001908 <SystemInit+0xfc>)
 800188c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800188e:	4b1c      	ldr	r3, [pc, #112]	; (8001900 <SystemInit+0xf4>)
 8001890:	4a1e      	ldr	r2, [pc, #120]	; (800190c <SystemInit+0x100>)
 8001892:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001894:	4b1a      	ldr	r3, [pc, #104]	; (8001900 <SystemInit+0xf4>)
 8001896:	4a1e      	ldr	r2, [pc, #120]	; (8001910 <SystemInit+0x104>)
 8001898:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800189a:	4b19      	ldr	r3, [pc, #100]	; (8001900 <SystemInit+0xf4>)
 800189c:	2200      	movs	r2, #0
 800189e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80018a0:	4b17      	ldr	r3, [pc, #92]	; (8001900 <SystemInit+0xf4>)
 80018a2:	4a1b      	ldr	r2, [pc, #108]	; (8001910 <SystemInit+0x104>)
 80018a4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80018a6:	4b16      	ldr	r3, [pc, #88]	; (8001900 <SystemInit+0xf4>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80018ac:	4b14      	ldr	r3, [pc, #80]	; (8001900 <SystemInit+0xf4>)
 80018ae:	4a18      	ldr	r2, [pc, #96]	; (8001910 <SystemInit+0x104>)
 80018b0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80018b2:	4b13      	ldr	r3, [pc, #76]	; (8001900 <SystemInit+0xf4>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80018b8:	4b11      	ldr	r3, [pc, #68]	; (8001900 <SystemInit+0xf4>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a10      	ldr	r2, [pc, #64]	; (8001900 <SystemInit+0xf4>)
 80018be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018c2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80018c4:	4b0e      	ldr	r3, [pc, #56]	; (8001900 <SystemInit+0xf4>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80018ca:	4b12      	ldr	r3, [pc, #72]	; (8001914 <SystemInit+0x108>)
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	4b12      	ldr	r3, [pc, #72]	; (8001918 <SystemInit+0x10c>)
 80018d0:	4013      	ands	r3, r2
 80018d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80018d6:	d202      	bcs.n	80018de <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80018d8:	4b10      	ldr	r3, [pc, #64]	; (800191c <SystemInit+0x110>)
 80018da:	2201      	movs	r2, #1
 80018dc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80018de:	4b10      	ldr	r3, [pc, #64]	; (8001920 <SystemInit+0x114>)
 80018e0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80018e4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80018e6:	4b04      	ldr	r3, [pc, #16]	; (80018f8 <SystemInit+0xec>)
 80018e8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018ec:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80018ee:	bf00      	nop
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr
 80018f8:	e000ed00 	.word	0xe000ed00
 80018fc:	52002000 	.word	0x52002000
 8001900:	58024400 	.word	0x58024400
 8001904:	eaf6ed7f 	.word	0xeaf6ed7f
 8001908:	02020200 	.word	0x02020200
 800190c:	01ff0000 	.word	0x01ff0000
 8001910:	01010280 	.word	0x01010280
 8001914:	5c001000 	.word	0x5c001000
 8001918:	ffff0000 	.word	0xffff0000
 800191c:	51008108 	.word	0x51008108
 8001920:	52004000 	.word	0x52004000

08001924 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001924:	f8df d034 	ldr.w	sp, [pc, #52]	; 800195c <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001928:	f7ff ff70 	bl	800180c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800192c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800192e:	e003      	b.n	8001938 <LoopCopyDataInit>

08001930 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001930:	4b0b      	ldr	r3, [pc, #44]	; (8001960 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8001932:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001934:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001936:	3104      	adds	r1, #4

08001938 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001938:	480a      	ldr	r0, [pc, #40]	; (8001964 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 800193a:	4b0b      	ldr	r3, [pc, #44]	; (8001968 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 800193c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800193e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001940:	d3f6      	bcc.n	8001930 <CopyDataInit>
  ldr  r2, =_sbss
 8001942:	4a0a      	ldr	r2, [pc, #40]	; (800196c <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001944:	e002      	b.n	800194c <LoopFillZerobss>

08001946 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001946:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001948:	f842 3b04 	str.w	r3, [r2], #4

0800194c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800194c:	4b08      	ldr	r3, [pc, #32]	; (8001970 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 800194e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001950:	d3f9      	bcc.n	8001946 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001952:	f012 fe03 	bl	801455c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001956:	f7fe fee1 	bl	800071c <main>
  bx  lr    
 800195a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800195c:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001960:	080158a4 	.word	0x080158a4
  ldr  r0, =_sdata
 8001964:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001968:	240001cc 	.word	0x240001cc
  ldr  r2, =_sbss
 800196c:	240001d0 	.word	0x240001d0
  ldr  r3, = _ebss
 8001970:	24041abc 	.word	0x24041abc

08001974 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001974:	e7fe      	b.n	8001974 <ADC3_IRQHandler>
	...

08001978 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800197e:	2003      	movs	r0, #3
 8001980:	f000 f98a 	bl	8001c98 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001984:	f005 fa0e 	bl	8006da4 <HAL_RCC_GetSysClockFreq>
 8001988:	4601      	mov	r1, r0
 800198a:	4b15      	ldr	r3, [pc, #84]	; (80019e0 <HAL_Init+0x68>)
 800198c:	699b      	ldr	r3, [r3, #24]
 800198e:	0a1b      	lsrs	r3, r3, #8
 8001990:	f003 030f 	and.w	r3, r3, #15
 8001994:	4a13      	ldr	r2, [pc, #76]	; (80019e4 <HAL_Init+0x6c>)
 8001996:	5cd3      	ldrb	r3, [r2, r3]
 8001998:	f003 031f 	and.w	r3, r3, #31
 800199c:	fa21 f303 	lsr.w	r3, r1, r3
 80019a0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80019a2:	4b0f      	ldr	r3, [pc, #60]	; (80019e0 <HAL_Init+0x68>)
 80019a4:	699b      	ldr	r3, [r3, #24]
 80019a6:	f003 030f 	and.w	r3, r3, #15
 80019aa:	4a0e      	ldr	r2, [pc, #56]	; (80019e4 <HAL_Init+0x6c>)
 80019ac:	5cd3      	ldrb	r3, [r2, r3]
 80019ae:	f003 031f 	and.w	r3, r3, #31
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	fa22 f303 	lsr.w	r3, r2, r3
 80019b8:	4a0b      	ldr	r2, [pc, #44]	; (80019e8 <HAL_Init+0x70>)
 80019ba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80019bc:	4a0b      	ldr	r2, [pc, #44]	; (80019ec <HAL_Init+0x74>)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019c2:	2000      	movs	r0, #0
 80019c4:	f000 f814 	bl	80019f0 <HAL_InitTick>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e002      	b.n	80019d8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80019d2:	f7ff fbff 	bl	80011d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019d6:	2300      	movs	r3, #0
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3708      	adds	r7, #8
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	58024400 	.word	0x58024400
 80019e4:	08015704 	.word	0x08015704
 80019e8:	24000004 	.word	0x24000004
 80019ec:	24000000 	.word	0x24000000

080019f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80019f8:	4b15      	ldr	r3, [pc, #84]	; (8001a50 <HAL_InitTick+0x60>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d101      	bne.n	8001a04 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e021      	b.n	8001a48 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001a04:	4b13      	ldr	r3, [pc, #76]	; (8001a54 <HAL_InitTick+0x64>)
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	4b11      	ldr	r3, [pc, #68]	; (8001a50 <HAL_InitTick+0x60>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a12:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f000 f96f 	bl	8001cfe <HAL_SYSTICK_Config>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e00e      	b.n	8001a48 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2b0f      	cmp	r3, #15
 8001a2e:	d80a      	bhi.n	8001a46 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a30:	2200      	movs	r2, #0
 8001a32:	6879      	ldr	r1, [r7, #4]
 8001a34:	f04f 30ff 	mov.w	r0, #4294967295
 8001a38:	f000 f939 	bl	8001cae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a3c:	4a06      	ldr	r2, [pc, #24]	; (8001a58 <HAL_InitTick+0x68>)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a42:	2300      	movs	r3, #0
 8001a44:	e000      	b.n	8001a48 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	2400000c 	.word	0x2400000c
 8001a54:	24000000 	.word	0x24000000
 8001a58:	24000008 	.word	0x24000008

08001a5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a60:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <HAL_IncTick+0x20>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	461a      	mov	r2, r3
 8001a66:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <HAL_IncTick+0x24>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	4a04      	ldr	r2, [pc, #16]	; (8001a80 <HAL_IncTick+0x24>)
 8001a6e:	6013      	str	r3, [r2, #0]
}
 8001a70:	bf00      	nop
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	2400000c 	.word	0x2400000c
 8001a80:	24040d74 	.word	0x24040d74

08001a84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  return uwTick;
 8001a88:	4b03      	ldr	r3, [pc, #12]	; (8001a98 <HAL_GetTick+0x14>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	24040d74 	.word	0x24040d74

08001a9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001aa4:	f7ff ffee 	bl	8001a84 <HAL_GetTick>
 8001aa8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ab4:	d005      	beq.n	8001ac2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ab6:	4b09      	ldr	r3, [pc, #36]	; (8001adc <HAL_Delay+0x40>)
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	461a      	mov	r2, r3
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	4413      	add	r3, r2
 8001ac0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ac2:	bf00      	nop
 8001ac4:	f7ff ffde 	bl	8001a84 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	68fa      	ldr	r2, [r7, #12]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d8f7      	bhi.n	8001ac4 <HAL_Delay+0x28>
  {
  }
}
 8001ad4:	bf00      	nop
 8001ad6:	3710      	adds	r7, #16
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	2400000c 	.word	0x2400000c

08001ae0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001ae4:	4b03      	ldr	r3, [pc, #12]	; (8001af4 <HAL_GetREVID+0x14>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	0c1b      	lsrs	r3, r3, #16
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr
 8001af4:	5c001000 	.word	0x5c001000

08001af8 <__NVIC_SetPriorityGrouping>:
{
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f003 0307 	and.w	r3, r3, #7
 8001b06:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b08:	4b0b      	ldr	r3, [pc, #44]	; (8001b38 <__NVIC_SetPriorityGrouping+0x40>)
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b0e:	68ba      	ldr	r2, [r7, #8]
 8001b10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b14:	4013      	ands	r3, r2
 8001b16:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001b20:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <__NVIC_SetPriorityGrouping+0x44>)
 8001b22:	4313      	orrs	r3, r2
 8001b24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b26:	4a04      	ldr	r2, [pc, #16]	; (8001b38 <__NVIC_SetPriorityGrouping+0x40>)
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	60d3      	str	r3, [r2, #12]
}
 8001b2c:	bf00      	nop
 8001b2e:	3714      	adds	r7, #20
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr
 8001b38:	e000ed00 	.word	0xe000ed00
 8001b3c:	05fa0000 	.word	0x05fa0000

08001b40 <__NVIC_GetPriorityGrouping>:
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b44:	4b04      	ldr	r3, [pc, #16]	; (8001b58 <__NVIC_GetPriorityGrouping+0x18>)
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	0a1b      	lsrs	r3, r3, #8
 8001b4a:	f003 0307 	and.w	r3, r3, #7
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr
 8001b58:	e000ed00 	.word	0xe000ed00

08001b5c <__NVIC_EnableIRQ>:
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	db0b      	blt.n	8001b86 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b6e:	88fb      	ldrh	r3, [r7, #6]
 8001b70:	f003 021f 	and.w	r2, r3, #31
 8001b74:	4907      	ldr	r1, [pc, #28]	; (8001b94 <__NVIC_EnableIRQ+0x38>)
 8001b76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b7a:	095b      	lsrs	r3, r3, #5
 8001b7c:	2001      	movs	r0, #1
 8001b7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001b86:	bf00      	nop
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	e000e100 	.word	0xe000e100

08001b98 <__NVIC_SetPriority>:
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	6039      	str	r1, [r7, #0]
 8001ba2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ba4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	db0a      	blt.n	8001bc2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	b2da      	uxtb	r2, r3
 8001bb0:	490c      	ldr	r1, [pc, #48]	; (8001be4 <__NVIC_SetPriority+0x4c>)
 8001bb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bb6:	0112      	lsls	r2, r2, #4
 8001bb8:	b2d2      	uxtb	r2, r2
 8001bba:	440b      	add	r3, r1
 8001bbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001bc0:	e00a      	b.n	8001bd8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	b2da      	uxtb	r2, r3
 8001bc6:	4908      	ldr	r1, [pc, #32]	; (8001be8 <__NVIC_SetPriority+0x50>)
 8001bc8:	88fb      	ldrh	r3, [r7, #6]
 8001bca:	f003 030f 	and.w	r3, r3, #15
 8001bce:	3b04      	subs	r3, #4
 8001bd0:	0112      	lsls	r2, r2, #4
 8001bd2:	b2d2      	uxtb	r2, r2
 8001bd4:	440b      	add	r3, r1
 8001bd6:	761a      	strb	r2, [r3, #24]
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	e000e100 	.word	0xe000e100
 8001be8:	e000ed00 	.word	0xe000ed00

08001bec <NVIC_EncodePriority>:
{
 8001bec:	b480      	push	{r7}
 8001bee:	b089      	sub	sp, #36	; 0x24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	f003 0307 	and.w	r3, r3, #7
 8001bfe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	f1c3 0307 	rsb	r3, r3, #7
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	bf28      	it	cs
 8001c0a:	2304      	movcs	r3, #4
 8001c0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	3304      	adds	r3, #4
 8001c12:	2b06      	cmp	r3, #6
 8001c14:	d902      	bls.n	8001c1c <NVIC_EncodePriority+0x30>
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	3b03      	subs	r3, #3
 8001c1a:	e000      	b.n	8001c1e <NVIC_EncodePriority+0x32>
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c20:	f04f 32ff 	mov.w	r2, #4294967295
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	43da      	mvns	r2, r3
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	401a      	ands	r2, r3
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c34:	f04f 31ff 	mov.w	r1, #4294967295
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3e:	43d9      	mvns	r1, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c44:	4313      	orrs	r3, r2
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3724      	adds	r7, #36	; 0x24
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
	...

08001c54 <SysTick_Config>:
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c64:	d301      	bcc.n	8001c6a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001c66:	2301      	movs	r3, #1
 8001c68:	e00f      	b.n	8001c8a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c6a:	4a0a      	ldr	r2, [pc, #40]	; (8001c94 <SysTick_Config+0x40>)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c72:	210f      	movs	r1, #15
 8001c74:	f04f 30ff 	mov.w	r0, #4294967295
 8001c78:	f7ff ff8e 	bl	8001b98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c7c:	4b05      	ldr	r3, [pc, #20]	; (8001c94 <SysTick_Config+0x40>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c82:	4b04      	ldr	r3, [pc, #16]	; (8001c94 <SysTick_Config+0x40>)
 8001c84:	2207      	movs	r2, #7
 8001c86:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	e000e010 	.word	0xe000e010

08001c98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f7ff ff29 	bl	8001af8 <__NVIC_SetPriorityGrouping>
}
 8001ca6:	bf00      	nop
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b086      	sub	sp, #24
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	60b9      	str	r1, [r7, #8]
 8001cb8:	607a      	str	r2, [r7, #4]
 8001cba:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001cbc:	f7ff ff40 	bl	8001b40 <__NVIC_GetPriorityGrouping>
 8001cc0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	68b9      	ldr	r1, [r7, #8]
 8001cc6:	6978      	ldr	r0, [r7, #20]
 8001cc8:	f7ff ff90 	bl	8001bec <NVIC_EncodePriority>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001cd2:	4611      	mov	r1, r2
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7ff ff5f 	bl	8001b98 <__NVIC_SetPriority>
}
 8001cda:	bf00      	nop
 8001cdc:	3718      	adds	r7, #24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b082      	sub	sp, #8
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	4603      	mov	r3, r0
 8001cea:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7ff ff33 	bl	8001b5c <__NVIC_EnableIRQ>
}
 8001cf6:	bf00      	nop
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b082      	sub	sp, #8
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f7ff ffa4 	bl	8001c54 <SysTick_Config>
 8001d0c:	4603      	mov	r3, r0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
	...

08001d18 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001d20:	f7ff feb0 	bl	8001a84 <HAL_GetTick>
 8001d24:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d101      	bne.n	8001d30 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e316      	b.n	800235e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a66      	ldr	r2, [pc, #408]	; (8001ed0 <HAL_DMA_Init+0x1b8>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d04a      	beq.n	8001dd0 <HAL_DMA_Init+0xb8>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a65      	ldr	r2, [pc, #404]	; (8001ed4 <HAL_DMA_Init+0x1bc>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d045      	beq.n	8001dd0 <HAL_DMA_Init+0xb8>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a63      	ldr	r2, [pc, #396]	; (8001ed8 <HAL_DMA_Init+0x1c0>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d040      	beq.n	8001dd0 <HAL_DMA_Init+0xb8>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a62      	ldr	r2, [pc, #392]	; (8001edc <HAL_DMA_Init+0x1c4>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d03b      	beq.n	8001dd0 <HAL_DMA_Init+0xb8>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a60      	ldr	r2, [pc, #384]	; (8001ee0 <HAL_DMA_Init+0x1c8>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d036      	beq.n	8001dd0 <HAL_DMA_Init+0xb8>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a5f      	ldr	r2, [pc, #380]	; (8001ee4 <HAL_DMA_Init+0x1cc>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d031      	beq.n	8001dd0 <HAL_DMA_Init+0xb8>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a5d      	ldr	r2, [pc, #372]	; (8001ee8 <HAL_DMA_Init+0x1d0>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d02c      	beq.n	8001dd0 <HAL_DMA_Init+0xb8>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a5c      	ldr	r2, [pc, #368]	; (8001eec <HAL_DMA_Init+0x1d4>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d027      	beq.n	8001dd0 <HAL_DMA_Init+0xb8>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a5a      	ldr	r2, [pc, #360]	; (8001ef0 <HAL_DMA_Init+0x1d8>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d022      	beq.n	8001dd0 <HAL_DMA_Init+0xb8>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a59      	ldr	r2, [pc, #356]	; (8001ef4 <HAL_DMA_Init+0x1dc>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d01d      	beq.n	8001dd0 <HAL_DMA_Init+0xb8>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a57      	ldr	r2, [pc, #348]	; (8001ef8 <HAL_DMA_Init+0x1e0>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d018      	beq.n	8001dd0 <HAL_DMA_Init+0xb8>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a56      	ldr	r2, [pc, #344]	; (8001efc <HAL_DMA_Init+0x1e4>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d013      	beq.n	8001dd0 <HAL_DMA_Init+0xb8>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a54      	ldr	r2, [pc, #336]	; (8001f00 <HAL_DMA_Init+0x1e8>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d00e      	beq.n	8001dd0 <HAL_DMA_Init+0xb8>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a53      	ldr	r2, [pc, #332]	; (8001f04 <HAL_DMA_Init+0x1ec>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d009      	beq.n	8001dd0 <HAL_DMA_Init+0xb8>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a51      	ldr	r2, [pc, #324]	; (8001f08 <HAL_DMA_Init+0x1f0>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d004      	beq.n	8001dd0 <HAL_DMA_Init+0xb8>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a50      	ldr	r2, [pc, #320]	; (8001f0c <HAL_DMA_Init+0x1f4>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d101      	bne.n	8001dd4 <HAL_DMA_Init+0xbc>
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e000      	b.n	8001dd6 <HAL_DMA_Init+0xbe>
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f000 813b 	beq.w	8002052 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2202      	movs	r2, #2
 8001de8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a37      	ldr	r2, [pc, #220]	; (8001ed0 <HAL_DMA_Init+0x1b8>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d04a      	beq.n	8001e8c <HAL_DMA_Init+0x174>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a36      	ldr	r2, [pc, #216]	; (8001ed4 <HAL_DMA_Init+0x1bc>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d045      	beq.n	8001e8c <HAL_DMA_Init+0x174>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a34      	ldr	r2, [pc, #208]	; (8001ed8 <HAL_DMA_Init+0x1c0>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d040      	beq.n	8001e8c <HAL_DMA_Init+0x174>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a33      	ldr	r2, [pc, #204]	; (8001edc <HAL_DMA_Init+0x1c4>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d03b      	beq.n	8001e8c <HAL_DMA_Init+0x174>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a31      	ldr	r2, [pc, #196]	; (8001ee0 <HAL_DMA_Init+0x1c8>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d036      	beq.n	8001e8c <HAL_DMA_Init+0x174>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a30      	ldr	r2, [pc, #192]	; (8001ee4 <HAL_DMA_Init+0x1cc>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d031      	beq.n	8001e8c <HAL_DMA_Init+0x174>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a2e      	ldr	r2, [pc, #184]	; (8001ee8 <HAL_DMA_Init+0x1d0>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d02c      	beq.n	8001e8c <HAL_DMA_Init+0x174>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a2d      	ldr	r2, [pc, #180]	; (8001eec <HAL_DMA_Init+0x1d4>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d027      	beq.n	8001e8c <HAL_DMA_Init+0x174>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a2b      	ldr	r2, [pc, #172]	; (8001ef0 <HAL_DMA_Init+0x1d8>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d022      	beq.n	8001e8c <HAL_DMA_Init+0x174>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a2a      	ldr	r2, [pc, #168]	; (8001ef4 <HAL_DMA_Init+0x1dc>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d01d      	beq.n	8001e8c <HAL_DMA_Init+0x174>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a28      	ldr	r2, [pc, #160]	; (8001ef8 <HAL_DMA_Init+0x1e0>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d018      	beq.n	8001e8c <HAL_DMA_Init+0x174>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a27      	ldr	r2, [pc, #156]	; (8001efc <HAL_DMA_Init+0x1e4>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d013      	beq.n	8001e8c <HAL_DMA_Init+0x174>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a25      	ldr	r2, [pc, #148]	; (8001f00 <HAL_DMA_Init+0x1e8>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d00e      	beq.n	8001e8c <HAL_DMA_Init+0x174>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a24      	ldr	r2, [pc, #144]	; (8001f04 <HAL_DMA_Init+0x1ec>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d009      	beq.n	8001e8c <HAL_DMA_Init+0x174>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a22      	ldr	r2, [pc, #136]	; (8001f08 <HAL_DMA_Init+0x1f0>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d004      	beq.n	8001e8c <HAL_DMA_Init+0x174>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a21      	ldr	r2, [pc, #132]	; (8001f0c <HAL_DMA_Init+0x1f4>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d108      	bne.n	8001e9e <HAL_DMA_Init+0x186>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f022 0201 	bic.w	r2, r2, #1
 8001e9a:	601a      	str	r2, [r3, #0]
 8001e9c:	e007      	b.n	8001eae <HAL_DMA_Init+0x196>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f022 0201 	bic.w	r2, r2, #1
 8001eac:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001eae:	e02f      	b.n	8001f10 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001eb0:	f7ff fde8 	bl	8001a84 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b05      	cmp	r3, #5
 8001ebc:	d928      	bls.n	8001f10 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2220      	movs	r2, #32
 8001ec2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2203      	movs	r2, #3
 8001ec8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e246      	b.n	800235e <HAL_DMA_Init+0x646>
 8001ed0:	40020010 	.word	0x40020010
 8001ed4:	40020028 	.word	0x40020028
 8001ed8:	40020040 	.word	0x40020040
 8001edc:	40020058 	.word	0x40020058
 8001ee0:	40020070 	.word	0x40020070
 8001ee4:	40020088 	.word	0x40020088
 8001ee8:	400200a0 	.word	0x400200a0
 8001eec:	400200b8 	.word	0x400200b8
 8001ef0:	40020410 	.word	0x40020410
 8001ef4:	40020428 	.word	0x40020428
 8001ef8:	40020440 	.word	0x40020440
 8001efc:	40020458 	.word	0x40020458
 8001f00:	40020470 	.word	0x40020470
 8001f04:	40020488 	.word	0x40020488
 8001f08:	400204a0 	.word	0x400204a0
 8001f0c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d1c8      	bne.n	8001eb0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f26:	697a      	ldr	r2, [r7, #20]
 8001f28:	4b83      	ldr	r3, [pc, #524]	; (8002138 <HAL_DMA_Init+0x420>)
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001f36:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	691b      	ldr	r3, [r3, #16]
 8001f3c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f42:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f4e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a1b      	ldr	r3, [r3, #32]
 8001f54:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001f56:	697a      	ldr	r2, [r7, #20]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f60:	2b04      	cmp	r3, #4
 8001f62:	d107      	bne.n	8001f74 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	697a      	ldr	r2, [r7, #20]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001f74:	4b71      	ldr	r3, [pc, #452]	; (800213c <HAL_DMA_Init+0x424>)
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	4b71      	ldr	r3, [pc, #452]	; (8002140 <HAL_DMA_Init+0x428>)
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f80:	d328      	bcc.n	8001fd4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	2b28      	cmp	r3, #40	; 0x28
 8001f88:	d903      	bls.n	8001f92 <HAL_DMA_Init+0x27a>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	2b2e      	cmp	r3, #46	; 0x2e
 8001f90:	d917      	bls.n	8001fc2 <HAL_DMA_Init+0x2aa>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	2b3e      	cmp	r3, #62	; 0x3e
 8001f98:	d903      	bls.n	8001fa2 <HAL_DMA_Init+0x28a>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	2b42      	cmp	r3, #66	; 0x42
 8001fa0:	d90f      	bls.n	8001fc2 <HAL_DMA_Init+0x2aa>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	2b46      	cmp	r3, #70	; 0x46
 8001fa8:	d903      	bls.n	8001fb2 <HAL_DMA_Init+0x29a>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	2b48      	cmp	r3, #72	; 0x48
 8001fb0:	d907      	bls.n	8001fc2 <HAL_DMA_Init+0x2aa>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	2b4e      	cmp	r3, #78	; 0x4e
 8001fb8:	d905      	bls.n	8001fc6 <HAL_DMA_Init+0x2ae>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	2b52      	cmp	r3, #82	; 0x52
 8001fc0:	d801      	bhi.n	8001fc6 <HAL_DMA_Init+0x2ae>
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e000      	b.n	8001fc8 <HAL_DMA_Init+0x2b0>
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d003      	beq.n	8001fd4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001fd2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	697a      	ldr	r2, [r7, #20]
 8001fda:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	695b      	ldr	r3, [r3, #20]
 8001fe2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	f023 0307 	bic.w	r3, r3, #7
 8001fea:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff0:	697a      	ldr	r2, [r7, #20]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffa:	2b04      	cmp	r3, #4
 8001ffc:	d117      	bne.n	800202e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002002:	697a      	ldr	r2, [r7, #20]
 8002004:	4313      	orrs	r3, r2
 8002006:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800200c:	2b00      	cmp	r3, #0
 800200e:	d00e      	beq.n	800202e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f001 f9b9 	bl	8003388 <DMA_CheckFifoParam>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d008      	beq.n	800202e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2240      	movs	r2, #64	; 0x40
 8002020:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2201      	movs	r2, #1
 8002026:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e197      	b.n	800235e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	697a      	ldr	r2, [r7, #20]
 8002034:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f001 f8f4 	bl	8003224 <DMA_CalcBaseAndBitshift>
 800203c:	4603      	mov	r3, r0
 800203e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002044:	f003 031f 	and.w	r3, r3, #31
 8002048:	223f      	movs	r2, #63	; 0x3f
 800204a:	409a      	lsls	r2, r3
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	609a      	str	r2, [r3, #8]
 8002050:	e0cd      	b.n	80021ee <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a3b      	ldr	r2, [pc, #236]	; (8002144 <HAL_DMA_Init+0x42c>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d022      	beq.n	80020a2 <HAL_DMA_Init+0x38a>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a39      	ldr	r2, [pc, #228]	; (8002148 <HAL_DMA_Init+0x430>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d01d      	beq.n	80020a2 <HAL_DMA_Init+0x38a>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a38      	ldr	r2, [pc, #224]	; (800214c <HAL_DMA_Init+0x434>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d018      	beq.n	80020a2 <HAL_DMA_Init+0x38a>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a36      	ldr	r2, [pc, #216]	; (8002150 <HAL_DMA_Init+0x438>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d013      	beq.n	80020a2 <HAL_DMA_Init+0x38a>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a35      	ldr	r2, [pc, #212]	; (8002154 <HAL_DMA_Init+0x43c>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d00e      	beq.n	80020a2 <HAL_DMA_Init+0x38a>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a33      	ldr	r2, [pc, #204]	; (8002158 <HAL_DMA_Init+0x440>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d009      	beq.n	80020a2 <HAL_DMA_Init+0x38a>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a32      	ldr	r2, [pc, #200]	; (800215c <HAL_DMA_Init+0x444>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d004      	beq.n	80020a2 <HAL_DMA_Init+0x38a>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a30      	ldr	r2, [pc, #192]	; (8002160 <HAL_DMA_Init+0x448>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d101      	bne.n	80020a6 <HAL_DMA_Init+0x38e>
 80020a2:	2301      	movs	r3, #1
 80020a4:	e000      	b.n	80020a8 <HAL_DMA_Init+0x390>
 80020a6:	2300      	movs	r3, #0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	f000 8097 	beq.w	80021dc <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a24      	ldr	r2, [pc, #144]	; (8002144 <HAL_DMA_Init+0x42c>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d021      	beq.n	80020fc <HAL_DMA_Init+0x3e4>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a22      	ldr	r2, [pc, #136]	; (8002148 <HAL_DMA_Init+0x430>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d01c      	beq.n	80020fc <HAL_DMA_Init+0x3e4>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a21      	ldr	r2, [pc, #132]	; (800214c <HAL_DMA_Init+0x434>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d017      	beq.n	80020fc <HAL_DMA_Init+0x3e4>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a1f      	ldr	r2, [pc, #124]	; (8002150 <HAL_DMA_Init+0x438>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d012      	beq.n	80020fc <HAL_DMA_Init+0x3e4>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a1e      	ldr	r2, [pc, #120]	; (8002154 <HAL_DMA_Init+0x43c>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d00d      	beq.n	80020fc <HAL_DMA_Init+0x3e4>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a1c      	ldr	r2, [pc, #112]	; (8002158 <HAL_DMA_Init+0x440>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d008      	beq.n	80020fc <HAL_DMA_Init+0x3e4>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a1b      	ldr	r2, [pc, #108]	; (800215c <HAL_DMA_Init+0x444>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d003      	beq.n	80020fc <HAL_DMA_Init+0x3e4>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a19      	ldr	r2, [pc, #100]	; (8002160 <HAL_DMA_Init+0x448>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2202      	movs	r2, #2
 800210a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002116:	697a      	ldr	r2, [r7, #20]
 8002118:	4b12      	ldr	r3, [pc, #72]	; (8002164 <HAL_DMA_Init+0x44c>)
 800211a:	4013      	ands	r3, r2
 800211c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	2b40      	cmp	r3, #64	; 0x40
 8002124:	d020      	beq.n	8002168 <HAL_DMA_Init+0x450>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	2b80      	cmp	r3, #128	; 0x80
 800212c:	d102      	bne.n	8002134 <HAL_DMA_Init+0x41c>
 800212e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002132:	e01a      	b.n	800216a <HAL_DMA_Init+0x452>
 8002134:	2300      	movs	r3, #0
 8002136:	e018      	b.n	800216a <HAL_DMA_Init+0x452>
 8002138:	fe10803f 	.word	0xfe10803f
 800213c:	5c001000 	.word	0x5c001000
 8002140:	ffff0000 	.word	0xffff0000
 8002144:	58025408 	.word	0x58025408
 8002148:	5802541c 	.word	0x5802541c
 800214c:	58025430 	.word	0x58025430
 8002150:	58025444 	.word	0x58025444
 8002154:	58025458 	.word	0x58025458
 8002158:	5802546c 	.word	0x5802546c
 800215c:	58025480 	.word	0x58025480
 8002160:	58025494 	.word	0x58025494
 8002164:	fffe000f 	.word	0xfffe000f
 8002168:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	68d2      	ldr	r2, [r2, #12]
 800216e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002170:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002178:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	695b      	ldr	r3, [r3, #20]
 800217e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002180:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002188:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	69db      	ldr	r3, [r3, #28]
 800218e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002190:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a1b      	ldr	r3, [r3, #32]
 8002196:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002198:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800219a:	697a      	ldr	r2, [r7, #20]
 800219c:	4313      	orrs	r3, r2
 800219e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	697a      	ldr	r2, [r7, #20]
 80021a6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	461a      	mov	r2, r3
 80021ae:	4b6e      	ldr	r3, [pc, #440]	; (8002368 <HAL_DMA_Init+0x650>)
 80021b0:	4413      	add	r3, r2
 80021b2:	4a6e      	ldr	r2, [pc, #440]	; (800236c <HAL_DMA_Init+0x654>)
 80021b4:	fba2 2303 	umull	r2, r3, r2, r3
 80021b8:	091b      	lsrs	r3, r3, #4
 80021ba:	009a      	lsls	r2, r3, #2
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f001 f82f 	bl	8003224 <DMA_CalcBaseAndBitshift>
 80021c6:	4603      	mov	r3, r0
 80021c8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ce:	f003 031f 	and.w	r3, r3, #31
 80021d2:	2201      	movs	r2, #1
 80021d4:	409a      	lsls	r2, r3
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	605a      	str	r2, [r3, #4]
 80021da:	e008      	b.n	80021ee <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2240      	movs	r2, #64	; 0x40
 80021e0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2203      	movs	r2, #3
 80021e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e0b7      	b.n	800235e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a5f      	ldr	r2, [pc, #380]	; (8002370 <HAL_DMA_Init+0x658>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d072      	beq.n	80022de <HAL_DMA_Init+0x5c6>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a5d      	ldr	r2, [pc, #372]	; (8002374 <HAL_DMA_Init+0x65c>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d06d      	beq.n	80022de <HAL_DMA_Init+0x5c6>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a5c      	ldr	r2, [pc, #368]	; (8002378 <HAL_DMA_Init+0x660>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d068      	beq.n	80022de <HAL_DMA_Init+0x5c6>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a5a      	ldr	r2, [pc, #360]	; (800237c <HAL_DMA_Init+0x664>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d063      	beq.n	80022de <HAL_DMA_Init+0x5c6>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a59      	ldr	r2, [pc, #356]	; (8002380 <HAL_DMA_Init+0x668>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d05e      	beq.n	80022de <HAL_DMA_Init+0x5c6>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a57      	ldr	r2, [pc, #348]	; (8002384 <HAL_DMA_Init+0x66c>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d059      	beq.n	80022de <HAL_DMA_Init+0x5c6>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a56      	ldr	r2, [pc, #344]	; (8002388 <HAL_DMA_Init+0x670>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d054      	beq.n	80022de <HAL_DMA_Init+0x5c6>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a54      	ldr	r2, [pc, #336]	; (800238c <HAL_DMA_Init+0x674>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d04f      	beq.n	80022de <HAL_DMA_Init+0x5c6>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a53      	ldr	r2, [pc, #332]	; (8002390 <HAL_DMA_Init+0x678>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d04a      	beq.n	80022de <HAL_DMA_Init+0x5c6>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a51      	ldr	r2, [pc, #324]	; (8002394 <HAL_DMA_Init+0x67c>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d045      	beq.n	80022de <HAL_DMA_Init+0x5c6>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a50      	ldr	r2, [pc, #320]	; (8002398 <HAL_DMA_Init+0x680>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d040      	beq.n	80022de <HAL_DMA_Init+0x5c6>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a4e      	ldr	r2, [pc, #312]	; (800239c <HAL_DMA_Init+0x684>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d03b      	beq.n	80022de <HAL_DMA_Init+0x5c6>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a4d      	ldr	r2, [pc, #308]	; (80023a0 <HAL_DMA_Init+0x688>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d036      	beq.n	80022de <HAL_DMA_Init+0x5c6>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a4b      	ldr	r2, [pc, #300]	; (80023a4 <HAL_DMA_Init+0x68c>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d031      	beq.n	80022de <HAL_DMA_Init+0x5c6>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a4a      	ldr	r2, [pc, #296]	; (80023a8 <HAL_DMA_Init+0x690>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d02c      	beq.n	80022de <HAL_DMA_Init+0x5c6>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a48      	ldr	r2, [pc, #288]	; (80023ac <HAL_DMA_Init+0x694>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d027      	beq.n	80022de <HAL_DMA_Init+0x5c6>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a47      	ldr	r2, [pc, #284]	; (80023b0 <HAL_DMA_Init+0x698>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d022      	beq.n	80022de <HAL_DMA_Init+0x5c6>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a45      	ldr	r2, [pc, #276]	; (80023b4 <HAL_DMA_Init+0x69c>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d01d      	beq.n	80022de <HAL_DMA_Init+0x5c6>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a44      	ldr	r2, [pc, #272]	; (80023b8 <HAL_DMA_Init+0x6a0>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d018      	beq.n	80022de <HAL_DMA_Init+0x5c6>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a42      	ldr	r2, [pc, #264]	; (80023bc <HAL_DMA_Init+0x6a4>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d013      	beq.n	80022de <HAL_DMA_Init+0x5c6>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a41      	ldr	r2, [pc, #260]	; (80023c0 <HAL_DMA_Init+0x6a8>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d00e      	beq.n	80022de <HAL_DMA_Init+0x5c6>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a3f      	ldr	r2, [pc, #252]	; (80023c4 <HAL_DMA_Init+0x6ac>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d009      	beq.n	80022de <HAL_DMA_Init+0x5c6>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a3e      	ldr	r2, [pc, #248]	; (80023c8 <HAL_DMA_Init+0x6b0>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d004      	beq.n	80022de <HAL_DMA_Init+0x5c6>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a3c      	ldr	r2, [pc, #240]	; (80023cc <HAL_DMA_Init+0x6b4>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d101      	bne.n	80022e2 <HAL_DMA_Init+0x5ca>
 80022de:	2301      	movs	r3, #1
 80022e0:	e000      	b.n	80022e4 <HAL_DMA_Init+0x5cc>
 80022e2:	2300      	movs	r3, #0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d032      	beq.n	800234e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f001 f8c9 	bl	8003480 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	2b80      	cmp	r3, #128	; 0x80
 80022f4:	d102      	bne.n	80022fc <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685a      	ldr	r2, [r3, #4]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002304:	b2d2      	uxtb	r2, r2
 8002306:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002310:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d010      	beq.n	800233c <HAL_DMA_Init+0x624>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	2b08      	cmp	r3, #8
 8002320:	d80c      	bhi.n	800233c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f001 f946 	bl	80035b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002338:	605a      	str	r2, [r3, #4]
 800233a:	e008      	b.n	800234e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2200      	movs	r2, #0
 800234c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3718      	adds	r7, #24
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	a7fdabf8 	.word	0xa7fdabf8
 800236c:	cccccccd 	.word	0xcccccccd
 8002370:	40020010 	.word	0x40020010
 8002374:	40020028 	.word	0x40020028
 8002378:	40020040 	.word	0x40020040
 800237c:	40020058 	.word	0x40020058
 8002380:	40020070 	.word	0x40020070
 8002384:	40020088 	.word	0x40020088
 8002388:	400200a0 	.word	0x400200a0
 800238c:	400200b8 	.word	0x400200b8
 8002390:	40020410 	.word	0x40020410
 8002394:	40020428 	.word	0x40020428
 8002398:	40020440 	.word	0x40020440
 800239c:	40020458 	.word	0x40020458
 80023a0:	40020470 	.word	0x40020470
 80023a4:	40020488 	.word	0x40020488
 80023a8:	400204a0 	.word	0x400204a0
 80023ac:	400204b8 	.word	0x400204b8
 80023b0:	58025408 	.word	0x58025408
 80023b4:	5802541c 	.word	0x5802541c
 80023b8:	58025430 	.word	0x58025430
 80023bc:	58025444 	.word	0x58025444
 80023c0:	58025458 	.word	0x58025458
 80023c4:	5802546c 	.word	0x5802546c
 80023c8:	58025480 	.word	0x58025480
 80023cc:	58025494 	.word	0x58025494

080023d0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b08a      	sub	sp, #40	; 0x28
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80023d8:	2300      	movs	r3, #0
 80023da:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80023dc:	4b67      	ldr	r3, [pc, #412]	; (800257c <HAL_DMA_IRQHandler+0x1ac>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a67      	ldr	r2, [pc, #412]	; (8002580 <HAL_DMA_IRQHandler+0x1b0>)
 80023e2:	fba2 2303 	umull	r2, r3, r2, r3
 80023e6:	0a9b      	lsrs	r3, r3, #10
 80023e8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ee:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80023f6:	6a3b      	ldr	r3, [r7, #32]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a5f      	ldr	r2, [pc, #380]	; (8002584 <HAL_DMA_IRQHandler+0x1b4>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d04a      	beq.n	80024a2 <HAL_DMA_IRQHandler+0xd2>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a5d      	ldr	r2, [pc, #372]	; (8002588 <HAL_DMA_IRQHandler+0x1b8>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d045      	beq.n	80024a2 <HAL_DMA_IRQHandler+0xd2>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a5c      	ldr	r2, [pc, #368]	; (800258c <HAL_DMA_IRQHandler+0x1bc>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d040      	beq.n	80024a2 <HAL_DMA_IRQHandler+0xd2>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a5a      	ldr	r2, [pc, #360]	; (8002590 <HAL_DMA_IRQHandler+0x1c0>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d03b      	beq.n	80024a2 <HAL_DMA_IRQHandler+0xd2>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a59      	ldr	r2, [pc, #356]	; (8002594 <HAL_DMA_IRQHandler+0x1c4>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d036      	beq.n	80024a2 <HAL_DMA_IRQHandler+0xd2>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a57      	ldr	r2, [pc, #348]	; (8002598 <HAL_DMA_IRQHandler+0x1c8>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d031      	beq.n	80024a2 <HAL_DMA_IRQHandler+0xd2>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a56      	ldr	r2, [pc, #344]	; (800259c <HAL_DMA_IRQHandler+0x1cc>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d02c      	beq.n	80024a2 <HAL_DMA_IRQHandler+0xd2>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a54      	ldr	r2, [pc, #336]	; (80025a0 <HAL_DMA_IRQHandler+0x1d0>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d027      	beq.n	80024a2 <HAL_DMA_IRQHandler+0xd2>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a53      	ldr	r2, [pc, #332]	; (80025a4 <HAL_DMA_IRQHandler+0x1d4>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d022      	beq.n	80024a2 <HAL_DMA_IRQHandler+0xd2>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a51      	ldr	r2, [pc, #324]	; (80025a8 <HAL_DMA_IRQHandler+0x1d8>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d01d      	beq.n	80024a2 <HAL_DMA_IRQHandler+0xd2>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a50      	ldr	r2, [pc, #320]	; (80025ac <HAL_DMA_IRQHandler+0x1dc>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d018      	beq.n	80024a2 <HAL_DMA_IRQHandler+0xd2>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a4e      	ldr	r2, [pc, #312]	; (80025b0 <HAL_DMA_IRQHandler+0x1e0>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d013      	beq.n	80024a2 <HAL_DMA_IRQHandler+0xd2>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a4d      	ldr	r2, [pc, #308]	; (80025b4 <HAL_DMA_IRQHandler+0x1e4>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d00e      	beq.n	80024a2 <HAL_DMA_IRQHandler+0xd2>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a4b      	ldr	r2, [pc, #300]	; (80025b8 <HAL_DMA_IRQHandler+0x1e8>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d009      	beq.n	80024a2 <HAL_DMA_IRQHandler+0xd2>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a4a      	ldr	r2, [pc, #296]	; (80025bc <HAL_DMA_IRQHandler+0x1ec>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d004      	beq.n	80024a2 <HAL_DMA_IRQHandler+0xd2>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a48      	ldr	r2, [pc, #288]	; (80025c0 <HAL_DMA_IRQHandler+0x1f0>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d101      	bne.n	80024a6 <HAL_DMA_IRQHandler+0xd6>
 80024a2:	2301      	movs	r3, #1
 80024a4:	e000      	b.n	80024a8 <HAL_DMA_IRQHandler+0xd8>
 80024a6:	2300      	movs	r3, #0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	f000 842b 	beq.w	8002d04 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b2:	f003 031f 	and.w	r3, r3, #31
 80024b6:	2208      	movs	r2, #8
 80024b8:	409a      	lsls	r2, r3
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	4013      	ands	r3, r2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	f000 80a2 	beq.w	8002608 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a2e      	ldr	r2, [pc, #184]	; (8002584 <HAL_DMA_IRQHandler+0x1b4>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d04a      	beq.n	8002564 <HAL_DMA_IRQHandler+0x194>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a2d      	ldr	r2, [pc, #180]	; (8002588 <HAL_DMA_IRQHandler+0x1b8>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d045      	beq.n	8002564 <HAL_DMA_IRQHandler+0x194>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a2b      	ldr	r2, [pc, #172]	; (800258c <HAL_DMA_IRQHandler+0x1bc>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d040      	beq.n	8002564 <HAL_DMA_IRQHandler+0x194>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a2a      	ldr	r2, [pc, #168]	; (8002590 <HAL_DMA_IRQHandler+0x1c0>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d03b      	beq.n	8002564 <HAL_DMA_IRQHandler+0x194>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a28      	ldr	r2, [pc, #160]	; (8002594 <HAL_DMA_IRQHandler+0x1c4>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d036      	beq.n	8002564 <HAL_DMA_IRQHandler+0x194>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a27      	ldr	r2, [pc, #156]	; (8002598 <HAL_DMA_IRQHandler+0x1c8>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d031      	beq.n	8002564 <HAL_DMA_IRQHandler+0x194>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a25      	ldr	r2, [pc, #148]	; (800259c <HAL_DMA_IRQHandler+0x1cc>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d02c      	beq.n	8002564 <HAL_DMA_IRQHandler+0x194>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a24      	ldr	r2, [pc, #144]	; (80025a0 <HAL_DMA_IRQHandler+0x1d0>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d027      	beq.n	8002564 <HAL_DMA_IRQHandler+0x194>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a22      	ldr	r2, [pc, #136]	; (80025a4 <HAL_DMA_IRQHandler+0x1d4>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d022      	beq.n	8002564 <HAL_DMA_IRQHandler+0x194>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a21      	ldr	r2, [pc, #132]	; (80025a8 <HAL_DMA_IRQHandler+0x1d8>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d01d      	beq.n	8002564 <HAL_DMA_IRQHandler+0x194>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a1f      	ldr	r2, [pc, #124]	; (80025ac <HAL_DMA_IRQHandler+0x1dc>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d018      	beq.n	8002564 <HAL_DMA_IRQHandler+0x194>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a1e      	ldr	r2, [pc, #120]	; (80025b0 <HAL_DMA_IRQHandler+0x1e0>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d013      	beq.n	8002564 <HAL_DMA_IRQHandler+0x194>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a1c      	ldr	r2, [pc, #112]	; (80025b4 <HAL_DMA_IRQHandler+0x1e4>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d00e      	beq.n	8002564 <HAL_DMA_IRQHandler+0x194>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a1b      	ldr	r2, [pc, #108]	; (80025b8 <HAL_DMA_IRQHandler+0x1e8>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d009      	beq.n	8002564 <HAL_DMA_IRQHandler+0x194>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a19      	ldr	r2, [pc, #100]	; (80025bc <HAL_DMA_IRQHandler+0x1ec>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d004      	beq.n	8002564 <HAL_DMA_IRQHandler+0x194>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a18      	ldr	r2, [pc, #96]	; (80025c0 <HAL_DMA_IRQHandler+0x1f0>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d12f      	bne.n	80025c4 <HAL_DMA_IRQHandler+0x1f4>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0304 	and.w	r3, r3, #4
 800256e:	2b00      	cmp	r3, #0
 8002570:	bf14      	ite	ne
 8002572:	2301      	movne	r3, #1
 8002574:	2300      	moveq	r3, #0
 8002576:	b2db      	uxtb	r3, r3
 8002578:	e02e      	b.n	80025d8 <HAL_DMA_IRQHandler+0x208>
 800257a:	bf00      	nop
 800257c:	24000000 	.word	0x24000000
 8002580:	1b4e81b5 	.word	0x1b4e81b5
 8002584:	40020010 	.word	0x40020010
 8002588:	40020028 	.word	0x40020028
 800258c:	40020040 	.word	0x40020040
 8002590:	40020058 	.word	0x40020058
 8002594:	40020070 	.word	0x40020070
 8002598:	40020088 	.word	0x40020088
 800259c:	400200a0 	.word	0x400200a0
 80025a0:	400200b8 	.word	0x400200b8
 80025a4:	40020410 	.word	0x40020410
 80025a8:	40020428 	.word	0x40020428
 80025ac:	40020440 	.word	0x40020440
 80025b0:	40020458 	.word	0x40020458
 80025b4:	40020470 	.word	0x40020470
 80025b8:	40020488 	.word	0x40020488
 80025bc:	400204a0 	.word	0x400204a0
 80025c0:	400204b8 	.word	0x400204b8
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0308 	and.w	r3, r3, #8
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	bf14      	ite	ne
 80025d2:	2301      	movne	r3, #1
 80025d4:	2300      	moveq	r3, #0
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d015      	beq.n	8002608 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f022 0204 	bic.w	r2, r2, #4
 80025ea:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f0:	f003 031f 	and.w	r3, r3, #31
 80025f4:	2208      	movs	r2, #8
 80025f6:	409a      	lsls	r2, r3
 80025f8:	6a3b      	ldr	r3, [r7, #32]
 80025fa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002600:	f043 0201 	orr.w	r2, r3, #1
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800260c:	f003 031f 	and.w	r3, r3, #31
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	fa22 f303 	lsr.w	r3, r2, r3
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	2b00      	cmp	r3, #0
 800261c:	d06e      	beq.n	80026fc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a69      	ldr	r2, [pc, #420]	; (80027c8 <HAL_DMA_IRQHandler+0x3f8>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d04a      	beq.n	80026be <HAL_DMA_IRQHandler+0x2ee>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a67      	ldr	r2, [pc, #412]	; (80027cc <HAL_DMA_IRQHandler+0x3fc>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d045      	beq.n	80026be <HAL_DMA_IRQHandler+0x2ee>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a66      	ldr	r2, [pc, #408]	; (80027d0 <HAL_DMA_IRQHandler+0x400>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d040      	beq.n	80026be <HAL_DMA_IRQHandler+0x2ee>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a64      	ldr	r2, [pc, #400]	; (80027d4 <HAL_DMA_IRQHandler+0x404>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d03b      	beq.n	80026be <HAL_DMA_IRQHandler+0x2ee>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a63      	ldr	r2, [pc, #396]	; (80027d8 <HAL_DMA_IRQHandler+0x408>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d036      	beq.n	80026be <HAL_DMA_IRQHandler+0x2ee>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a61      	ldr	r2, [pc, #388]	; (80027dc <HAL_DMA_IRQHandler+0x40c>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d031      	beq.n	80026be <HAL_DMA_IRQHandler+0x2ee>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a60      	ldr	r2, [pc, #384]	; (80027e0 <HAL_DMA_IRQHandler+0x410>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d02c      	beq.n	80026be <HAL_DMA_IRQHandler+0x2ee>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a5e      	ldr	r2, [pc, #376]	; (80027e4 <HAL_DMA_IRQHandler+0x414>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d027      	beq.n	80026be <HAL_DMA_IRQHandler+0x2ee>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a5d      	ldr	r2, [pc, #372]	; (80027e8 <HAL_DMA_IRQHandler+0x418>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d022      	beq.n	80026be <HAL_DMA_IRQHandler+0x2ee>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a5b      	ldr	r2, [pc, #364]	; (80027ec <HAL_DMA_IRQHandler+0x41c>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d01d      	beq.n	80026be <HAL_DMA_IRQHandler+0x2ee>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a5a      	ldr	r2, [pc, #360]	; (80027f0 <HAL_DMA_IRQHandler+0x420>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d018      	beq.n	80026be <HAL_DMA_IRQHandler+0x2ee>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a58      	ldr	r2, [pc, #352]	; (80027f4 <HAL_DMA_IRQHandler+0x424>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d013      	beq.n	80026be <HAL_DMA_IRQHandler+0x2ee>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a57      	ldr	r2, [pc, #348]	; (80027f8 <HAL_DMA_IRQHandler+0x428>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d00e      	beq.n	80026be <HAL_DMA_IRQHandler+0x2ee>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a55      	ldr	r2, [pc, #340]	; (80027fc <HAL_DMA_IRQHandler+0x42c>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d009      	beq.n	80026be <HAL_DMA_IRQHandler+0x2ee>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a54      	ldr	r2, [pc, #336]	; (8002800 <HAL_DMA_IRQHandler+0x430>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d004      	beq.n	80026be <HAL_DMA_IRQHandler+0x2ee>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a52      	ldr	r2, [pc, #328]	; (8002804 <HAL_DMA_IRQHandler+0x434>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d10a      	bne.n	80026d4 <HAL_DMA_IRQHandler+0x304>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	695b      	ldr	r3, [r3, #20]
 80026c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	bf14      	ite	ne
 80026cc:	2301      	movne	r3, #1
 80026ce:	2300      	moveq	r3, #0
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	e003      	b.n	80026dc <HAL_DMA_IRQHandler+0x30c>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2300      	movs	r3, #0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d00d      	beq.n	80026fc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026e4:	f003 031f 	and.w	r3, r3, #31
 80026e8:	2201      	movs	r2, #1
 80026ea:	409a      	lsls	r2, r3
 80026ec:	6a3b      	ldr	r3, [r7, #32]
 80026ee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f4:	f043 0202 	orr.w	r2, r3, #2
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002700:	f003 031f 	and.w	r3, r3, #31
 8002704:	2204      	movs	r2, #4
 8002706:	409a      	lsls	r2, r3
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	4013      	ands	r3, r2
 800270c:	2b00      	cmp	r3, #0
 800270e:	f000 808f 	beq.w	8002830 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a2c      	ldr	r2, [pc, #176]	; (80027c8 <HAL_DMA_IRQHandler+0x3f8>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d04a      	beq.n	80027b2 <HAL_DMA_IRQHandler+0x3e2>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a2a      	ldr	r2, [pc, #168]	; (80027cc <HAL_DMA_IRQHandler+0x3fc>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d045      	beq.n	80027b2 <HAL_DMA_IRQHandler+0x3e2>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a29      	ldr	r2, [pc, #164]	; (80027d0 <HAL_DMA_IRQHandler+0x400>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d040      	beq.n	80027b2 <HAL_DMA_IRQHandler+0x3e2>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a27      	ldr	r2, [pc, #156]	; (80027d4 <HAL_DMA_IRQHandler+0x404>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d03b      	beq.n	80027b2 <HAL_DMA_IRQHandler+0x3e2>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a26      	ldr	r2, [pc, #152]	; (80027d8 <HAL_DMA_IRQHandler+0x408>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d036      	beq.n	80027b2 <HAL_DMA_IRQHandler+0x3e2>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a24      	ldr	r2, [pc, #144]	; (80027dc <HAL_DMA_IRQHandler+0x40c>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d031      	beq.n	80027b2 <HAL_DMA_IRQHandler+0x3e2>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a23      	ldr	r2, [pc, #140]	; (80027e0 <HAL_DMA_IRQHandler+0x410>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d02c      	beq.n	80027b2 <HAL_DMA_IRQHandler+0x3e2>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a21      	ldr	r2, [pc, #132]	; (80027e4 <HAL_DMA_IRQHandler+0x414>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d027      	beq.n	80027b2 <HAL_DMA_IRQHandler+0x3e2>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a20      	ldr	r2, [pc, #128]	; (80027e8 <HAL_DMA_IRQHandler+0x418>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d022      	beq.n	80027b2 <HAL_DMA_IRQHandler+0x3e2>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a1e      	ldr	r2, [pc, #120]	; (80027ec <HAL_DMA_IRQHandler+0x41c>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d01d      	beq.n	80027b2 <HAL_DMA_IRQHandler+0x3e2>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a1d      	ldr	r2, [pc, #116]	; (80027f0 <HAL_DMA_IRQHandler+0x420>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d018      	beq.n	80027b2 <HAL_DMA_IRQHandler+0x3e2>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a1b      	ldr	r2, [pc, #108]	; (80027f4 <HAL_DMA_IRQHandler+0x424>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d013      	beq.n	80027b2 <HAL_DMA_IRQHandler+0x3e2>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a1a      	ldr	r2, [pc, #104]	; (80027f8 <HAL_DMA_IRQHandler+0x428>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d00e      	beq.n	80027b2 <HAL_DMA_IRQHandler+0x3e2>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a18      	ldr	r2, [pc, #96]	; (80027fc <HAL_DMA_IRQHandler+0x42c>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d009      	beq.n	80027b2 <HAL_DMA_IRQHandler+0x3e2>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a17      	ldr	r2, [pc, #92]	; (8002800 <HAL_DMA_IRQHandler+0x430>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d004      	beq.n	80027b2 <HAL_DMA_IRQHandler+0x3e2>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a15      	ldr	r2, [pc, #84]	; (8002804 <HAL_DMA_IRQHandler+0x434>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d12a      	bne.n	8002808 <HAL_DMA_IRQHandler+0x438>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0302 	and.w	r3, r3, #2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	bf14      	ite	ne
 80027c0:	2301      	movne	r3, #1
 80027c2:	2300      	moveq	r3, #0
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	e023      	b.n	8002810 <HAL_DMA_IRQHandler+0x440>
 80027c8:	40020010 	.word	0x40020010
 80027cc:	40020028 	.word	0x40020028
 80027d0:	40020040 	.word	0x40020040
 80027d4:	40020058 	.word	0x40020058
 80027d8:	40020070 	.word	0x40020070
 80027dc:	40020088 	.word	0x40020088
 80027e0:	400200a0 	.word	0x400200a0
 80027e4:	400200b8 	.word	0x400200b8
 80027e8:	40020410 	.word	0x40020410
 80027ec:	40020428 	.word	0x40020428
 80027f0:	40020440 	.word	0x40020440
 80027f4:	40020458 	.word	0x40020458
 80027f8:	40020470 	.word	0x40020470
 80027fc:	40020488 	.word	0x40020488
 8002800:	400204a0 	.word	0x400204a0
 8002804:	400204b8 	.word	0x400204b8
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2300      	movs	r3, #0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d00d      	beq.n	8002830 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002818:	f003 031f 	and.w	r3, r3, #31
 800281c:	2204      	movs	r2, #4
 800281e:	409a      	lsls	r2, r3
 8002820:	6a3b      	ldr	r3, [r7, #32]
 8002822:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002828:	f043 0204 	orr.w	r2, r3, #4
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002834:	f003 031f 	and.w	r3, r3, #31
 8002838:	2210      	movs	r2, #16
 800283a:	409a      	lsls	r2, r3
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	4013      	ands	r3, r2
 8002840:	2b00      	cmp	r3, #0
 8002842:	f000 80a6 	beq.w	8002992 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a85      	ldr	r2, [pc, #532]	; (8002a60 <HAL_DMA_IRQHandler+0x690>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d04a      	beq.n	80028e6 <HAL_DMA_IRQHandler+0x516>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a83      	ldr	r2, [pc, #524]	; (8002a64 <HAL_DMA_IRQHandler+0x694>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d045      	beq.n	80028e6 <HAL_DMA_IRQHandler+0x516>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a82      	ldr	r2, [pc, #520]	; (8002a68 <HAL_DMA_IRQHandler+0x698>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d040      	beq.n	80028e6 <HAL_DMA_IRQHandler+0x516>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a80      	ldr	r2, [pc, #512]	; (8002a6c <HAL_DMA_IRQHandler+0x69c>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d03b      	beq.n	80028e6 <HAL_DMA_IRQHandler+0x516>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a7f      	ldr	r2, [pc, #508]	; (8002a70 <HAL_DMA_IRQHandler+0x6a0>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d036      	beq.n	80028e6 <HAL_DMA_IRQHandler+0x516>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a7d      	ldr	r2, [pc, #500]	; (8002a74 <HAL_DMA_IRQHandler+0x6a4>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d031      	beq.n	80028e6 <HAL_DMA_IRQHandler+0x516>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a7c      	ldr	r2, [pc, #496]	; (8002a78 <HAL_DMA_IRQHandler+0x6a8>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d02c      	beq.n	80028e6 <HAL_DMA_IRQHandler+0x516>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a7a      	ldr	r2, [pc, #488]	; (8002a7c <HAL_DMA_IRQHandler+0x6ac>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d027      	beq.n	80028e6 <HAL_DMA_IRQHandler+0x516>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a79      	ldr	r2, [pc, #484]	; (8002a80 <HAL_DMA_IRQHandler+0x6b0>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d022      	beq.n	80028e6 <HAL_DMA_IRQHandler+0x516>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a77      	ldr	r2, [pc, #476]	; (8002a84 <HAL_DMA_IRQHandler+0x6b4>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d01d      	beq.n	80028e6 <HAL_DMA_IRQHandler+0x516>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a76      	ldr	r2, [pc, #472]	; (8002a88 <HAL_DMA_IRQHandler+0x6b8>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d018      	beq.n	80028e6 <HAL_DMA_IRQHandler+0x516>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a74      	ldr	r2, [pc, #464]	; (8002a8c <HAL_DMA_IRQHandler+0x6bc>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d013      	beq.n	80028e6 <HAL_DMA_IRQHandler+0x516>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a73      	ldr	r2, [pc, #460]	; (8002a90 <HAL_DMA_IRQHandler+0x6c0>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d00e      	beq.n	80028e6 <HAL_DMA_IRQHandler+0x516>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a71      	ldr	r2, [pc, #452]	; (8002a94 <HAL_DMA_IRQHandler+0x6c4>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d009      	beq.n	80028e6 <HAL_DMA_IRQHandler+0x516>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a70      	ldr	r2, [pc, #448]	; (8002a98 <HAL_DMA_IRQHandler+0x6c8>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d004      	beq.n	80028e6 <HAL_DMA_IRQHandler+0x516>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a6e      	ldr	r2, [pc, #440]	; (8002a9c <HAL_DMA_IRQHandler+0x6cc>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d10a      	bne.n	80028fc <HAL_DMA_IRQHandler+0x52c>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0308 	and.w	r3, r3, #8
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	bf14      	ite	ne
 80028f4:	2301      	movne	r3, #1
 80028f6:	2300      	moveq	r3, #0
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	e009      	b.n	8002910 <HAL_DMA_IRQHandler+0x540>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0304 	and.w	r3, r3, #4
 8002906:	2b00      	cmp	r3, #0
 8002908:	bf14      	ite	ne
 800290a:	2301      	movne	r3, #1
 800290c:	2300      	moveq	r3, #0
 800290e:	b2db      	uxtb	r3, r3
 8002910:	2b00      	cmp	r3, #0
 8002912:	d03e      	beq.n	8002992 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002918:	f003 031f 	and.w	r3, r3, #31
 800291c:	2210      	movs	r2, #16
 800291e:	409a      	lsls	r2, r3
 8002920:	6a3b      	ldr	r3, [r7, #32]
 8002922:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d018      	beq.n	8002964 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d108      	bne.n	8002952 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002944:	2b00      	cmp	r3, #0
 8002946:	d024      	beq.n	8002992 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	4798      	blx	r3
 8002950:	e01f      	b.n	8002992 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002956:	2b00      	cmp	r3, #0
 8002958:	d01b      	beq.n	8002992 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	4798      	blx	r3
 8002962:	e016      	b.n	8002992 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800296e:	2b00      	cmp	r3, #0
 8002970:	d107      	bne.n	8002982 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f022 0208 	bic.w	r2, r2, #8
 8002980:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002986:	2b00      	cmp	r3, #0
 8002988:	d003      	beq.n	8002992 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002996:	f003 031f 	and.w	r3, r3, #31
 800299a:	2220      	movs	r2, #32
 800299c:	409a      	lsls	r2, r3
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	4013      	ands	r3, r2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	f000 8110 	beq.w	8002bc8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a2c      	ldr	r2, [pc, #176]	; (8002a60 <HAL_DMA_IRQHandler+0x690>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d04a      	beq.n	8002a48 <HAL_DMA_IRQHandler+0x678>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a2b      	ldr	r2, [pc, #172]	; (8002a64 <HAL_DMA_IRQHandler+0x694>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d045      	beq.n	8002a48 <HAL_DMA_IRQHandler+0x678>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a29      	ldr	r2, [pc, #164]	; (8002a68 <HAL_DMA_IRQHandler+0x698>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d040      	beq.n	8002a48 <HAL_DMA_IRQHandler+0x678>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a28      	ldr	r2, [pc, #160]	; (8002a6c <HAL_DMA_IRQHandler+0x69c>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d03b      	beq.n	8002a48 <HAL_DMA_IRQHandler+0x678>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a26      	ldr	r2, [pc, #152]	; (8002a70 <HAL_DMA_IRQHandler+0x6a0>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d036      	beq.n	8002a48 <HAL_DMA_IRQHandler+0x678>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a25      	ldr	r2, [pc, #148]	; (8002a74 <HAL_DMA_IRQHandler+0x6a4>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d031      	beq.n	8002a48 <HAL_DMA_IRQHandler+0x678>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a23      	ldr	r2, [pc, #140]	; (8002a78 <HAL_DMA_IRQHandler+0x6a8>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d02c      	beq.n	8002a48 <HAL_DMA_IRQHandler+0x678>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a22      	ldr	r2, [pc, #136]	; (8002a7c <HAL_DMA_IRQHandler+0x6ac>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d027      	beq.n	8002a48 <HAL_DMA_IRQHandler+0x678>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a20      	ldr	r2, [pc, #128]	; (8002a80 <HAL_DMA_IRQHandler+0x6b0>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d022      	beq.n	8002a48 <HAL_DMA_IRQHandler+0x678>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a1f      	ldr	r2, [pc, #124]	; (8002a84 <HAL_DMA_IRQHandler+0x6b4>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d01d      	beq.n	8002a48 <HAL_DMA_IRQHandler+0x678>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a1d      	ldr	r2, [pc, #116]	; (8002a88 <HAL_DMA_IRQHandler+0x6b8>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d018      	beq.n	8002a48 <HAL_DMA_IRQHandler+0x678>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a1c      	ldr	r2, [pc, #112]	; (8002a8c <HAL_DMA_IRQHandler+0x6bc>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d013      	beq.n	8002a48 <HAL_DMA_IRQHandler+0x678>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a1a      	ldr	r2, [pc, #104]	; (8002a90 <HAL_DMA_IRQHandler+0x6c0>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d00e      	beq.n	8002a48 <HAL_DMA_IRQHandler+0x678>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a19      	ldr	r2, [pc, #100]	; (8002a94 <HAL_DMA_IRQHandler+0x6c4>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d009      	beq.n	8002a48 <HAL_DMA_IRQHandler+0x678>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a17      	ldr	r2, [pc, #92]	; (8002a98 <HAL_DMA_IRQHandler+0x6c8>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d004      	beq.n	8002a48 <HAL_DMA_IRQHandler+0x678>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a16      	ldr	r2, [pc, #88]	; (8002a9c <HAL_DMA_IRQHandler+0x6cc>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d12b      	bne.n	8002aa0 <HAL_DMA_IRQHandler+0x6d0>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0310 	and.w	r3, r3, #16
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	bf14      	ite	ne
 8002a56:	2301      	movne	r3, #1
 8002a58:	2300      	moveq	r3, #0
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	e02a      	b.n	8002ab4 <HAL_DMA_IRQHandler+0x6e4>
 8002a5e:	bf00      	nop
 8002a60:	40020010 	.word	0x40020010
 8002a64:	40020028 	.word	0x40020028
 8002a68:	40020040 	.word	0x40020040
 8002a6c:	40020058 	.word	0x40020058
 8002a70:	40020070 	.word	0x40020070
 8002a74:	40020088 	.word	0x40020088
 8002a78:	400200a0 	.word	0x400200a0
 8002a7c:	400200b8 	.word	0x400200b8
 8002a80:	40020410 	.word	0x40020410
 8002a84:	40020428 	.word	0x40020428
 8002a88:	40020440 	.word	0x40020440
 8002a8c:	40020458 	.word	0x40020458
 8002a90:	40020470 	.word	0x40020470
 8002a94:	40020488 	.word	0x40020488
 8002a98:	400204a0 	.word	0x400204a0
 8002a9c:	400204b8 	.word	0x400204b8
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	bf14      	ite	ne
 8002aae:	2301      	movne	r3, #1
 8002ab0:	2300      	moveq	r3, #0
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f000 8087 	beq.w	8002bc8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002abe:	f003 031f 	and.w	r3, r3, #31
 8002ac2:	2220      	movs	r2, #32
 8002ac4:	409a      	lsls	r2, r3
 8002ac6:	6a3b      	ldr	r3, [r7, #32]
 8002ac8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b04      	cmp	r3, #4
 8002ad4:	d139      	bne.n	8002b4a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f022 0216 	bic.w	r2, r2, #22
 8002ae4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	695a      	ldr	r2, [r3, #20]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002af4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d103      	bne.n	8002b06 <HAL_DMA_IRQHandler+0x736>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d007      	beq.n	8002b16 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f022 0208 	bic.w	r2, r2, #8
 8002b14:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b1a:	f003 031f 	and.w	r3, r3, #31
 8002b1e:	223f      	movs	r2, #63	; 0x3f
 8002b20:	409a      	lsls	r2, r3
 8002b22:	6a3b      	ldr	r3, [r7, #32]
 8002b24:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2201      	movs	r2, #1
 8002b32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	f000 834a 	beq.w	80031d4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	4798      	blx	r3
          }
          return;
 8002b48:	e344      	b.n	80031d4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d018      	beq.n	8002b8a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d108      	bne.n	8002b78 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d02c      	beq.n	8002bc8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	4798      	blx	r3
 8002b76:	e027      	b.n	8002bc8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d023      	beq.n	8002bc8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	4798      	blx	r3
 8002b88:	e01e      	b.n	8002bc8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d10f      	bne.n	8002bb8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f022 0210 	bic.w	r2, r2, #16
 8002ba6:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d003      	beq.n	8002bc8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	f000 8306 	beq.w	80031de <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	f000 8088 	beq.w	8002cf0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2204      	movs	r2, #4
 8002be4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a7a      	ldr	r2, [pc, #488]	; (8002dd8 <HAL_DMA_IRQHandler+0xa08>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d04a      	beq.n	8002c88 <HAL_DMA_IRQHandler+0x8b8>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a79      	ldr	r2, [pc, #484]	; (8002ddc <HAL_DMA_IRQHandler+0xa0c>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d045      	beq.n	8002c88 <HAL_DMA_IRQHandler+0x8b8>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a77      	ldr	r2, [pc, #476]	; (8002de0 <HAL_DMA_IRQHandler+0xa10>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d040      	beq.n	8002c88 <HAL_DMA_IRQHandler+0x8b8>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a76      	ldr	r2, [pc, #472]	; (8002de4 <HAL_DMA_IRQHandler+0xa14>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d03b      	beq.n	8002c88 <HAL_DMA_IRQHandler+0x8b8>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a74      	ldr	r2, [pc, #464]	; (8002de8 <HAL_DMA_IRQHandler+0xa18>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d036      	beq.n	8002c88 <HAL_DMA_IRQHandler+0x8b8>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a73      	ldr	r2, [pc, #460]	; (8002dec <HAL_DMA_IRQHandler+0xa1c>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d031      	beq.n	8002c88 <HAL_DMA_IRQHandler+0x8b8>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a71      	ldr	r2, [pc, #452]	; (8002df0 <HAL_DMA_IRQHandler+0xa20>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d02c      	beq.n	8002c88 <HAL_DMA_IRQHandler+0x8b8>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a70      	ldr	r2, [pc, #448]	; (8002df4 <HAL_DMA_IRQHandler+0xa24>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d027      	beq.n	8002c88 <HAL_DMA_IRQHandler+0x8b8>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a6e      	ldr	r2, [pc, #440]	; (8002df8 <HAL_DMA_IRQHandler+0xa28>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d022      	beq.n	8002c88 <HAL_DMA_IRQHandler+0x8b8>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a6d      	ldr	r2, [pc, #436]	; (8002dfc <HAL_DMA_IRQHandler+0xa2c>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d01d      	beq.n	8002c88 <HAL_DMA_IRQHandler+0x8b8>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a6b      	ldr	r2, [pc, #428]	; (8002e00 <HAL_DMA_IRQHandler+0xa30>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d018      	beq.n	8002c88 <HAL_DMA_IRQHandler+0x8b8>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a6a      	ldr	r2, [pc, #424]	; (8002e04 <HAL_DMA_IRQHandler+0xa34>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d013      	beq.n	8002c88 <HAL_DMA_IRQHandler+0x8b8>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a68      	ldr	r2, [pc, #416]	; (8002e08 <HAL_DMA_IRQHandler+0xa38>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d00e      	beq.n	8002c88 <HAL_DMA_IRQHandler+0x8b8>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a67      	ldr	r2, [pc, #412]	; (8002e0c <HAL_DMA_IRQHandler+0xa3c>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d009      	beq.n	8002c88 <HAL_DMA_IRQHandler+0x8b8>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a65      	ldr	r2, [pc, #404]	; (8002e10 <HAL_DMA_IRQHandler+0xa40>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d004      	beq.n	8002c88 <HAL_DMA_IRQHandler+0x8b8>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a64      	ldr	r2, [pc, #400]	; (8002e14 <HAL_DMA_IRQHandler+0xa44>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d108      	bne.n	8002c9a <HAL_DMA_IRQHandler+0x8ca>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f022 0201 	bic.w	r2, r2, #1
 8002c96:	601a      	str	r2, [r3, #0]
 8002c98:	e007      	b.n	8002caa <HAL_DMA_IRQHandler+0x8da>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f022 0201 	bic.w	r2, r2, #1
 8002ca8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	3301      	adds	r3, #1
 8002cae:	60fb      	str	r3, [r7, #12]
 8002cb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d307      	bcc.n	8002cc6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0301 	and.w	r3, r3, #1
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d1f2      	bne.n	8002caa <HAL_DMA_IRQHandler+0x8da>
 8002cc4:	e000      	b.n	8002cc8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8002cc6:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0301 	and.w	r3, r3, #1
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d004      	beq.n	8002ce8 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2203      	movs	r2, #3
 8002ce2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8002ce6:	e003      	b.n	8002cf0 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	f000 8272 	beq.w	80031de <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	4798      	blx	r3
 8002d02:	e26c      	b.n	80031de <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a43      	ldr	r2, [pc, #268]	; (8002e18 <HAL_DMA_IRQHandler+0xa48>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d022      	beq.n	8002d54 <HAL_DMA_IRQHandler+0x984>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a42      	ldr	r2, [pc, #264]	; (8002e1c <HAL_DMA_IRQHandler+0xa4c>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d01d      	beq.n	8002d54 <HAL_DMA_IRQHandler+0x984>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a40      	ldr	r2, [pc, #256]	; (8002e20 <HAL_DMA_IRQHandler+0xa50>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d018      	beq.n	8002d54 <HAL_DMA_IRQHandler+0x984>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a3f      	ldr	r2, [pc, #252]	; (8002e24 <HAL_DMA_IRQHandler+0xa54>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d013      	beq.n	8002d54 <HAL_DMA_IRQHandler+0x984>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a3d      	ldr	r2, [pc, #244]	; (8002e28 <HAL_DMA_IRQHandler+0xa58>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d00e      	beq.n	8002d54 <HAL_DMA_IRQHandler+0x984>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a3c      	ldr	r2, [pc, #240]	; (8002e2c <HAL_DMA_IRQHandler+0xa5c>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d009      	beq.n	8002d54 <HAL_DMA_IRQHandler+0x984>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a3a      	ldr	r2, [pc, #232]	; (8002e30 <HAL_DMA_IRQHandler+0xa60>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d004      	beq.n	8002d54 <HAL_DMA_IRQHandler+0x984>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a39      	ldr	r2, [pc, #228]	; (8002e34 <HAL_DMA_IRQHandler+0xa64>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d101      	bne.n	8002d58 <HAL_DMA_IRQHandler+0x988>
 8002d54:	2301      	movs	r3, #1
 8002d56:	e000      	b.n	8002d5a <HAL_DMA_IRQHandler+0x98a>
 8002d58:	2300      	movs	r3, #0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	f000 823f 	beq.w	80031de <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d6c:	f003 031f 	and.w	r3, r3, #31
 8002d70:	2204      	movs	r2, #4
 8002d72:	409a      	lsls	r2, r3
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	4013      	ands	r3, r2
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	f000 80cd 	beq.w	8002f18 <HAL_DMA_IRQHandler+0xb48>
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	f003 0304 	and.w	r3, r3, #4
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	f000 80c7 	beq.w	8002f18 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d8e:	f003 031f 	and.w	r3, r3, #31
 8002d92:	2204      	movs	r2, #4
 8002d94:	409a      	lsls	r2, r3
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d049      	beq.n	8002e38 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d109      	bne.n	8002dc2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	f000 8210 	beq.w	80031d8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002dc0:	e20a      	b.n	80031d8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	f000 8206 	beq.w	80031d8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002dd4:	e200      	b.n	80031d8 <HAL_DMA_IRQHandler+0xe08>
 8002dd6:	bf00      	nop
 8002dd8:	40020010 	.word	0x40020010
 8002ddc:	40020028 	.word	0x40020028
 8002de0:	40020040 	.word	0x40020040
 8002de4:	40020058 	.word	0x40020058
 8002de8:	40020070 	.word	0x40020070
 8002dec:	40020088 	.word	0x40020088
 8002df0:	400200a0 	.word	0x400200a0
 8002df4:	400200b8 	.word	0x400200b8
 8002df8:	40020410 	.word	0x40020410
 8002dfc:	40020428 	.word	0x40020428
 8002e00:	40020440 	.word	0x40020440
 8002e04:	40020458 	.word	0x40020458
 8002e08:	40020470 	.word	0x40020470
 8002e0c:	40020488 	.word	0x40020488
 8002e10:	400204a0 	.word	0x400204a0
 8002e14:	400204b8 	.word	0x400204b8
 8002e18:	58025408 	.word	0x58025408
 8002e1c:	5802541c 	.word	0x5802541c
 8002e20:	58025430 	.word	0x58025430
 8002e24:	58025444 	.word	0x58025444
 8002e28:	58025458 	.word	0x58025458
 8002e2c:	5802546c 	.word	0x5802546c
 8002e30:	58025480 	.word	0x58025480
 8002e34:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	f003 0320 	and.w	r3, r3, #32
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d160      	bne.n	8002f04 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a8c      	ldr	r2, [pc, #560]	; (8003078 <HAL_DMA_IRQHandler+0xca8>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d04a      	beq.n	8002ee2 <HAL_DMA_IRQHandler+0xb12>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a8a      	ldr	r2, [pc, #552]	; (800307c <HAL_DMA_IRQHandler+0xcac>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d045      	beq.n	8002ee2 <HAL_DMA_IRQHandler+0xb12>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a89      	ldr	r2, [pc, #548]	; (8003080 <HAL_DMA_IRQHandler+0xcb0>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d040      	beq.n	8002ee2 <HAL_DMA_IRQHandler+0xb12>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a87      	ldr	r2, [pc, #540]	; (8003084 <HAL_DMA_IRQHandler+0xcb4>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d03b      	beq.n	8002ee2 <HAL_DMA_IRQHandler+0xb12>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a86      	ldr	r2, [pc, #536]	; (8003088 <HAL_DMA_IRQHandler+0xcb8>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d036      	beq.n	8002ee2 <HAL_DMA_IRQHandler+0xb12>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a84      	ldr	r2, [pc, #528]	; (800308c <HAL_DMA_IRQHandler+0xcbc>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d031      	beq.n	8002ee2 <HAL_DMA_IRQHandler+0xb12>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a83      	ldr	r2, [pc, #524]	; (8003090 <HAL_DMA_IRQHandler+0xcc0>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d02c      	beq.n	8002ee2 <HAL_DMA_IRQHandler+0xb12>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a81      	ldr	r2, [pc, #516]	; (8003094 <HAL_DMA_IRQHandler+0xcc4>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d027      	beq.n	8002ee2 <HAL_DMA_IRQHandler+0xb12>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a80      	ldr	r2, [pc, #512]	; (8003098 <HAL_DMA_IRQHandler+0xcc8>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d022      	beq.n	8002ee2 <HAL_DMA_IRQHandler+0xb12>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a7e      	ldr	r2, [pc, #504]	; (800309c <HAL_DMA_IRQHandler+0xccc>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d01d      	beq.n	8002ee2 <HAL_DMA_IRQHandler+0xb12>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a7d      	ldr	r2, [pc, #500]	; (80030a0 <HAL_DMA_IRQHandler+0xcd0>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d018      	beq.n	8002ee2 <HAL_DMA_IRQHandler+0xb12>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a7b      	ldr	r2, [pc, #492]	; (80030a4 <HAL_DMA_IRQHandler+0xcd4>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d013      	beq.n	8002ee2 <HAL_DMA_IRQHandler+0xb12>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a7a      	ldr	r2, [pc, #488]	; (80030a8 <HAL_DMA_IRQHandler+0xcd8>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d00e      	beq.n	8002ee2 <HAL_DMA_IRQHandler+0xb12>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a78      	ldr	r2, [pc, #480]	; (80030ac <HAL_DMA_IRQHandler+0xcdc>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d009      	beq.n	8002ee2 <HAL_DMA_IRQHandler+0xb12>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a77      	ldr	r2, [pc, #476]	; (80030b0 <HAL_DMA_IRQHandler+0xce0>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d004      	beq.n	8002ee2 <HAL_DMA_IRQHandler+0xb12>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a75      	ldr	r2, [pc, #468]	; (80030b4 <HAL_DMA_IRQHandler+0xce4>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d108      	bne.n	8002ef4 <HAL_DMA_IRQHandler+0xb24>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f022 0208 	bic.w	r2, r2, #8
 8002ef0:	601a      	str	r2, [r3, #0]
 8002ef2:	e007      	b.n	8002f04 <HAL_DMA_IRQHandler+0xb34>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f022 0204 	bic.w	r2, r2, #4
 8002f02:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	f000 8165 	beq.w	80031d8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f16:	e15f      	b.n	80031d8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f1c:	f003 031f 	and.w	r3, r3, #31
 8002f20:	2202      	movs	r2, #2
 8002f22:	409a      	lsls	r2, r3
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	4013      	ands	r3, r2
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	f000 80c5 	beq.w	80030b8 <HAL_DMA_IRQHandler+0xce8>
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	f003 0302 	and.w	r3, r3, #2
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	f000 80bf 	beq.w	80030b8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f3e:	f003 031f 	and.w	r3, r3, #31
 8002f42:	2202      	movs	r2, #2
 8002f44:	409a      	lsls	r2, r3
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d018      	beq.n	8002f86 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d109      	bne.n	8002f72 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	f000 813a 	beq.w	80031dc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f70:	e134      	b.n	80031dc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	f000 8130 	beq.w	80031dc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f84:	e12a      	b.n	80031dc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	f003 0320 	and.w	r3, r3, #32
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d168      	bne.n	8003062 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a38      	ldr	r2, [pc, #224]	; (8003078 <HAL_DMA_IRQHandler+0xca8>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d04a      	beq.n	8003030 <HAL_DMA_IRQHandler+0xc60>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a37      	ldr	r2, [pc, #220]	; (800307c <HAL_DMA_IRQHandler+0xcac>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d045      	beq.n	8003030 <HAL_DMA_IRQHandler+0xc60>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a35      	ldr	r2, [pc, #212]	; (8003080 <HAL_DMA_IRQHandler+0xcb0>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d040      	beq.n	8003030 <HAL_DMA_IRQHandler+0xc60>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a34      	ldr	r2, [pc, #208]	; (8003084 <HAL_DMA_IRQHandler+0xcb4>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d03b      	beq.n	8003030 <HAL_DMA_IRQHandler+0xc60>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a32      	ldr	r2, [pc, #200]	; (8003088 <HAL_DMA_IRQHandler+0xcb8>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d036      	beq.n	8003030 <HAL_DMA_IRQHandler+0xc60>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a31      	ldr	r2, [pc, #196]	; (800308c <HAL_DMA_IRQHandler+0xcbc>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d031      	beq.n	8003030 <HAL_DMA_IRQHandler+0xc60>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a2f      	ldr	r2, [pc, #188]	; (8003090 <HAL_DMA_IRQHandler+0xcc0>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d02c      	beq.n	8003030 <HAL_DMA_IRQHandler+0xc60>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a2e      	ldr	r2, [pc, #184]	; (8003094 <HAL_DMA_IRQHandler+0xcc4>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d027      	beq.n	8003030 <HAL_DMA_IRQHandler+0xc60>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a2c      	ldr	r2, [pc, #176]	; (8003098 <HAL_DMA_IRQHandler+0xcc8>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d022      	beq.n	8003030 <HAL_DMA_IRQHandler+0xc60>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a2b      	ldr	r2, [pc, #172]	; (800309c <HAL_DMA_IRQHandler+0xccc>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d01d      	beq.n	8003030 <HAL_DMA_IRQHandler+0xc60>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a29      	ldr	r2, [pc, #164]	; (80030a0 <HAL_DMA_IRQHandler+0xcd0>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d018      	beq.n	8003030 <HAL_DMA_IRQHandler+0xc60>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a28      	ldr	r2, [pc, #160]	; (80030a4 <HAL_DMA_IRQHandler+0xcd4>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d013      	beq.n	8003030 <HAL_DMA_IRQHandler+0xc60>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a26      	ldr	r2, [pc, #152]	; (80030a8 <HAL_DMA_IRQHandler+0xcd8>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d00e      	beq.n	8003030 <HAL_DMA_IRQHandler+0xc60>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a25      	ldr	r2, [pc, #148]	; (80030ac <HAL_DMA_IRQHandler+0xcdc>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d009      	beq.n	8003030 <HAL_DMA_IRQHandler+0xc60>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a23      	ldr	r2, [pc, #140]	; (80030b0 <HAL_DMA_IRQHandler+0xce0>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d004      	beq.n	8003030 <HAL_DMA_IRQHandler+0xc60>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a22      	ldr	r2, [pc, #136]	; (80030b4 <HAL_DMA_IRQHandler+0xce4>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d108      	bne.n	8003042 <HAL_DMA_IRQHandler+0xc72>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f022 0214 	bic.w	r2, r2, #20
 800303e:	601a      	str	r2, [r3, #0]
 8003040:	e007      	b.n	8003052 <HAL_DMA_IRQHandler+0xc82>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f022 020a 	bic.w	r2, r2, #10
 8003050:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2201      	movs	r2, #1
 800305e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003066:	2b00      	cmp	r3, #0
 8003068:	f000 80b8 	beq.w	80031dc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003074:	e0b2      	b.n	80031dc <HAL_DMA_IRQHandler+0xe0c>
 8003076:	bf00      	nop
 8003078:	40020010 	.word	0x40020010
 800307c:	40020028 	.word	0x40020028
 8003080:	40020040 	.word	0x40020040
 8003084:	40020058 	.word	0x40020058
 8003088:	40020070 	.word	0x40020070
 800308c:	40020088 	.word	0x40020088
 8003090:	400200a0 	.word	0x400200a0
 8003094:	400200b8 	.word	0x400200b8
 8003098:	40020410 	.word	0x40020410
 800309c:	40020428 	.word	0x40020428
 80030a0:	40020440 	.word	0x40020440
 80030a4:	40020458 	.word	0x40020458
 80030a8:	40020470 	.word	0x40020470
 80030ac:	40020488 	.word	0x40020488
 80030b0:	400204a0 	.word	0x400204a0
 80030b4:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030bc:	f003 031f 	and.w	r3, r3, #31
 80030c0:	2208      	movs	r2, #8
 80030c2:	409a      	lsls	r2, r3
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	4013      	ands	r3, r2
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	f000 8088 	beq.w	80031de <HAL_DMA_IRQHandler+0xe0e>
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	f003 0308 	and.w	r3, r3, #8
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	f000 8082 	beq.w	80031de <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a41      	ldr	r2, [pc, #260]	; (80031e4 <HAL_DMA_IRQHandler+0xe14>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d04a      	beq.n	800317a <HAL_DMA_IRQHandler+0xdaa>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a3f      	ldr	r2, [pc, #252]	; (80031e8 <HAL_DMA_IRQHandler+0xe18>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d045      	beq.n	800317a <HAL_DMA_IRQHandler+0xdaa>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a3e      	ldr	r2, [pc, #248]	; (80031ec <HAL_DMA_IRQHandler+0xe1c>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d040      	beq.n	800317a <HAL_DMA_IRQHandler+0xdaa>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a3c      	ldr	r2, [pc, #240]	; (80031f0 <HAL_DMA_IRQHandler+0xe20>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d03b      	beq.n	800317a <HAL_DMA_IRQHandler+0xdaa>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a3b      	ldr	r2, [pc, #236]	; (80031f4 <HAL_DMA_IRQHandler+0xe24>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d036      	beq.n	800317a <HAL_DMA_IRQHandler+0xdaa>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a39      	ldr	r2, [pc, #228]	; (80031f8 <HAL_DMA_IRQHandler+0xe28>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d031      	beq.n	800317a <HAL_DMA_IRQHandler+0xdaa>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a38      	ldr	r2, [pc, #224]	; (80031fc <HAL_DMA_IRQHandler+0xe2c>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d02c      	beq.n	800317a <HAL_DMA_IRQHandler+0xdaa>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a36      	ldr	r2, [pc, #216]	; (8003200 <HAL_DMA_IRQHandler+0xe30>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d027      	beq.n	800317a <HAL_DMA_IRQHandler+0xdaa>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a35      	ldr	r2, [pc, #212]	; (8003204 <HAL_DMA_IRQHandler+0xe34>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d022      	beq.n	800317a <HAL_DMA_IRQHandler+0xdaa>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a33      	ldr	r2, [pc, #204]	; (8003208 <HAL_DMA_IRQHandler+0xe38>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d01d      	beq.n	800317a <HAL_DMA_IRQHandler+0xdaa>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a32      	ldr	r2, [pc, #200]	; (800320c <HAL_DMA_IRQHandler+0xe3c>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d018      	beq.n	800317a <HAL_DMA_IRQHandler+0xdaa>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a30      	ldr	r2, [pc, #192]	; (8003210 <HAL_DMA_IRQHandler+0xe40>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d013      	beq.n	800317a <HAL_DMA_IRQHandler+0xdaa>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a2f      	ldr	r2, [pc, #188]	; (8003214 <HAL_DMA_IRQHandler+0xe44>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d00e      	beq.n	800317a <HAL_DMA_IRQHandler+0xdaa>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a2d      	ldr	r2, [pc, #180]	; (8003218 <HAL_DMA_IRQHandler+0xe48>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d009      	beq.n	800317a <HAL_DMA_IRQHandler+0xdaa>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a2c      	ldr	r2, [pc, #176]	; (800321c <HAL_DMA_IRQHandler+0xe4c>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d004      	beq.n	800317a <HAL_DMA_IRQHandler+0xdaa>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a2a      	ldr	r2, [pc, #168]	; (8003220 <HAL_DMA_IRQHandler+0xe50>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d108      	bne.n	800318c <HAL_DMA_IRQHandler+0xdbc>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f022 021c 	bic.w	r2, r2, #28
 8003188:	601a      	str	r2, [r3, #0]
 800318a:	e007      	b.n	800319c <HAL_DMA_IRQHandler+0xdcc>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f022 020e 	bic.w	r2, r2, #14
 800319a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031a0:	f003 031f 	and.w	r3, r3, #31
 80031a4:	2201      	movs	r2, #1
 80031a6:	409a      	lsls	r2, r3
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2201      	movs	r2, #1
 80031be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d009      	beq.n	80031de <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	4798      	blx	r3
 80031d2:	e004      	b.n	80031de <HAL_DMA_IRQHandler+0xe0e>
          return;
 80031d4:	bf00      	nop
 80031d6:	e002      	b.n	80031de <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80031d8:	bf00      	nop
 80031da:	e000      	b.n	80031de <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80031dc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80031de:	3728      	adds	r7, #40	; 0x28
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	40020010 	.word	0x40020010
 80031e8:	40020028 	.word	0x40020028
 80031ec:	40020040 	.word	0x40020040
 80031f0:	40020058 	.word	0x40020058
 80031f4:	40020070 	.word	0x40020070
 80031f8:	40020088 	.word	0x40020088
 80031fc:	400200a0 	.word	0x400200a0
 8003200:	400200b8 	.word	0x400200b8
 8003204:	40020410 	.word	0x40020410
 8003208:	40020428 	.word	0x40020428
 800320c:	40020440 	.word	0x40020440
 8003210:	40020458 	.word	0x40020458
 8003214:	40020470 	.word	0x40020470
 8003218:	40020488 	.word	0x40020488
 800321c:	400204a0 	.word	0x400204a0
 8003220:	400204b8 	.word	0x400204b8

08003224 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003224:	b480      	push	{r7}
 8003226:	b085      	sub	sp, #20
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a42      	ldr	r2, [pc, #264]	; (800333c <DMA_CalcBaseAndBitshift+0x118>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d04a      	beq.n	80032cc <DMA_CalcBaseAndBitshift+0xa8>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a41      	ldr	r2, [pc, #260]	; (8003340 <DMA_CalcBaseAndBitshift+0x11c>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d045      	beq.n	80032cc <DMA_CalcBaseAndBitshift+0xa8>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a3f      	ldr	r2, [pc, #252]	; (8003344 <DMA_CalcBaseAndBitshift+0x120>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d040      	beq.n	80032cc <DMA_CalcBaseAndBitshift+0xa8>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a3e      	ldr	r2, [pc, #248]	; (8003348 <DMA_CalcBaseAndBitshift+0x124>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d03b      	beq.n	80032cc <DMA_CalcBaseAndBitshift+0xa8>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a3c      	ldr	r2, [pc, #240]	; (800334c <DMA_CalcBaseAndBitshift+0x128>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d036      	beq.n	80032cc <DMA_CalcBaseAndBitshift+0xa8>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a3b      	ldr	r2, [pc, #236]	; (8003350 <DMA_CalcBaseAndBitshift+0x12c>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d031      	beq.n	80032cc <DMA_CalcBaseAndBitshift+0xa8>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a39      	ldr	r2, [pc, #228]	; (8003354 <DMA_CalcBaseAndBitshift+0x130>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d02c      	beq.n	80032cc <DMA_CalcBaseAndBitshift+0xa8>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a38      	ldr	r2, [pc, #224]	; (8003358 <DMA_CalcBaseAndBitshift+0x134>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d027      	beq.n	80032cc <DMA_CalcBaseAndBitshift+0xa8>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a36      	ldr	r2, [pc, #216]	; (800335c <DMA_CalcBaseAndBitshift+0x138>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d022      	beq.n	80032cc <DMA_CalcBaseAndBitshift+0xa8>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a35      	ldr	r2, [pc, #212]	; (8003360 <DMA_CalcBaseAndBitshift+0x13c>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d01d      	beq.n	80032cc <DMA_CalcBaseAndBitshift+0xa8>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a33      	ldr	r2, [pc, #204]	; (8003364 <DMA_CalcBaseAndBitshift+0x140>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d018      	beq.n	80032cc <DMA_CalcBaseAndBitshift+0xa8>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a32      	ldr	r2, [pc, #200]	; (8003368 <DMA_CalcBaseAndBitshift+0x144>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d013      	beq.n	80032cc <DMA_CalcBaseAndBitshift+0xa8>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a30      	ldr	r2, [pc, #192]	; (800336c <DMA_CalcBaseAndBitshift+0x148>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d00e      	beq.n	80032cc <DMA_CalcBaseAndBitshift+0xa8>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a2f      	ldr	r2, [pc, #188]	; (8003370 <DMA_CalcBaseAndBitshift+0x14c>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d009      	beq.n	80032cc <DMA_CalcBaseAndBitshift+0xa8>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a2d      	ldr	r2, [pc, #180]	; (8003374 <DMA_CalcBaseAndBitshift+0x150>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d004      	beq.n	80032cc <DMA_CalcBaseAndBitshift+0xa8>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a2c      	ldr	r2, [pc, #176]	; (8003378 <DMA_CalcBaseAndBitshift+0x154>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d101      	bne.n	80032d0 <DMA_CalcBaseAndBitshift+0xac>
 80032cc:	2301      	movs	r3, #1
 80032ce:	e000      	b.n	80032d2 <DMA_CalcBaseAndBitshift+0xae>
 80032d0:	2300      	movs	r3, #0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d024      	beq.n	8003320 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	3b10      	subs	r3, #16
 80032de:	4a27      	ldr	r2, [pc, #156]	; (800337c <DMA_CalcBaseAndBitshift+0x158>)
 80032e0:	fba2 2303 	umull	r2, r3, r2, r3
 80032e4:	091b      	lsrs	r3, r3, #4
 80032e6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f003 0307 	and.w	r3, r3, #7
 80032ee:	4a24      	ldr	r2, [pc, #144]	; (8003380 <DMA_CalcBaseAndBitshift+0x15c>)
 80032f0:	5cd3      	ldrb	r3, [r2, r3]
 80032f2:	461a      	mov	r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2b03      	cmp	r3, #3
 80032fc:	d908      	bls.n	8003310 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	461a      	mov	r2, r3
 8003304:	4b1f      	ldr	r3, [pc, #124]	; (8003384 <DMA_CalcBaseAndBitshift+0x160>)
 8003306:	4013      	ands	r3, r2
 8003308:	1d1a      	adds	r2, r3, #4
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	659a      	str	r2, [r3, #88]	; 0x58
 800330e:	e00d      	b.n	800332c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	461a      	mov	r2, r3
 8003316:	4b1b      	ldr	r3, [pc, #108]	; (8003384 <DMA_CalcBaseAndBitshift+0x160>)
 8003318:	4013      	ands	r3, r2
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	6593      	str	r3, [r2, #88]	; 0x58
 800331e:	e005      	b.n	800332c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003330:	4618      	mov	r0, r3
 8003332:	3714      	adds	r7, #20
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr
 800333c:	40020010 	.word	0x40020010
 8003340:	40020028 	.word	0x40020028
 8003344:	40020040 	.word	0x40020040
 8003348:	40020058 	.word	0x40020058
 800334c:	40020070 	.word	0x40020070
 8003350:	40020088 	.word	0x40020088
 8003354:	400200a0 	.word	0x400200a0
 8003358:	400200b8 	.word	0x400200b8
 800335c:	40020410 	.word	0x40020410
 8003360:	40020428 	.word	0x40020428
 8003364:	40020440 	.word	0x40020440
 8003368:	40020458 	.word	0x40020458
 800336c:	40020470 	.word	0x40020470
 8003370:	40020488 	.word	0x40020488
 8003374:	400204a0 	.word	0x400204a0
 8003378:	400204b8 	.word	0x400204b8
 800337c:	aaaaaaab 	.word	0xaaaaaaab
 8003380:	08015714 	.word	0x08015714
 8003384:	fffffc00 	.word	0xfffffc00

08003388 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003388:	b480      	push	{r7}
 800338a:	b085      	sub	sp, #20
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003390:	2300      	movs	r3, #0
 8003392:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d120      	bne.n	80033de <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a0:	2b03      	cmp	r3, #3
 80033a2:	d858      	bhi.n	8003456 <DMA_CheckFifoParam+0xce>
 80033a4:	a201      	add	r2, pc, #4	; (adr r2, 80033ac <DMA_CheckFifoParam+0x24>)
 80033a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033aa:	bf00      	nop
 80033ac:	080033bd 	.word	0x080033bd
 80033b0:	080033cf 	.word	0x080033cf
 80033b4:	080033bd 	.word	0x080033bd
 80033b8:	08003457 	.word	0x08003457
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d048      	beq.n	800345a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80033cc:	e045      	b.n	800345a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80033d6:	d142      	bne.n	800345e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80033dc:	e03f      	b.n	800345e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	699b      	ldr	r3, [r3, #24]
 80033e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033e6:	d123      	bne.n	8003430 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ec:	2b03      	cmp	r3, #3
 80033ee:	d838      	bhi.n	8003462 <DMA_CheckFifoParam+0xda>
 80033f0:	a201      	add	r2, pc, #4	; (adr r2, 80033f8 <DMA_CheckFifoParam+0x70>)
 80033f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033f6:	bf00      	nop
 80033f8:	08003409 	.word	0x08003409
 80033fc:	0800340f 	.word	0x0800340f
 8003400:	08003409 	.word	0x08003409
 8003404:	08003421 	.word	0x08003421
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	73fb      	strb	r3, [r7, #15]
        break;
 800340c:	e030      	b.n	8003470 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003412:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d025      	beq.n	8003466 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800341e:	e022      	b.n	8003466 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003424:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003428:	d11f      	bne.n	800346a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800342e:	e01c      	b.n	800346a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003434:	2b02      	cmp	r3, #2
 8003436:	d902      	bls.n	800343e <DMA_CheckFifoParam+0xb6>
 8003438:	2b03      	cmp	r3, #3
 800343a:	d003      	beq.n	8003444 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800343c:	e018      	b.n	8003470 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	73fb      	strb	r3, [r7, #15]
        break;
 8003442:	e015      	b.n	8003470 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003448:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d00e      	beq.n	800346e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	73fb      	strb	r3, [r7, #15]
    break;
 8003454:	e00b      	b.n	800346e <DMA_CheckFifoParam+0xe6>
        break;
 8003456:	bf00      	nop
 8003458:	e00a      	b.n	8003470 <DMA_CheckFifoParam+0xe8>
        break;
 800345a:	bf00      	nop
 800345c:	e008      	b.n	8003470 <DMA_CheckFifoParam+0xe8>
        break;
 800345e:	bf00      	nop
 8003460:	e006      	b.n	8003470 <DMA_CheckFifoParam+0xe8>
        break;
 8003462:	bf00      	nop
 8003464:	e004      	b.n	8003470 <DMA_CheckFifoParam+0xe8>
        break;
 8003466:	bf00      	nop
 8003468:	e002      	b.n	8003470 <DMA_CheckFifoParam+0xe8>
        break;
 800346a:	bf00      	nop
 800346c:	e000      	b.n	8003470 <DMA_CheckFifoParam+0xe8>
    break;
 800346e:	bf00      	nop
    }
  }

  return status;
 8003470:	7bfb      	ldrb	r3, [r7, #15]
}
 8003472:	4618      	mov	r0, r3
 8003474:	3714      	adds	r7, #20
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop

08003480 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003480:	b480      	push	{r7}
 8003482:	b085      	sub	sp, #20
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a38      	ldr	r2, [pc, #224]	; (8003574 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d022      	beq.n	80034de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a36      	ldr	r2, [pc, #216]	; (8003578 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d01d      	beq.n	80034de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a35      	ldr	r2, [pc, #212]	; (800357c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d018      	beq.n	80034de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a33      	ldr	r2, [pc, #204]	; (8003580 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d013      	beq.n	80034de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a32      	ldr	r2, [pc, #200]	; (8003584 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d00e      	beq.n	80034de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a30      	ldr	r2, [pc, #192]	; (8003588 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d009      	beq.n	80034de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a2f      	ldr	r2, [pc, #188]	; (800358c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d004      	beq.n	80034de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a2d      	ldr	r2, [pc, #180]	; (8003590 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d101      	bne.n	80034e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80034de:	2301      	movs	r3, #1
 80034e0:	e000      	b.n	80034e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80034e2:	2300      	movs	r3, #0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d01a      	beq.n	800351e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	3b08      	subs	r3, #8
 80034f0:	4a28      	ldr	r2, [pc, #160]	; (8003594 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80034f2:	fba2 2303 	umull	r2, r3, r2, r3
 80034f6:	091b      	lsrs	r3, r3, #4
 80034f8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80034fa:	68fa      	ldr	r2, [r7, #12]
 80034fc:	4b26      	ldr	r3, [pc, #152]	; (8003598 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80034fe:	4413      	add	r3, r2
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	461a      	mov	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a24      	ldr	r2, [pc, #144]	; (800359c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800350c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f003 031f 	and.w	r3, r3, #31
 8003514:	2201      	movs	r2, #1
 8003516:	409a      	lsls	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800351c:	e024      	b.n	8003568 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	b2db      	uxtb	r3, r3
 8003524:	3b10      	subs	r3, #16
 8003526:	4a1e      	ldr	r2, [pc, #120]	; (80035a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003528:	fba2 2303 	umull	r2, r3, r2, r3
 800352c:	091b      	lsrs	r3, r3, #4
 800352e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	4a1c      	ldr	r2, [pc, #112]	; (80035a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d806      	bhi.n	8003546 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	4a1b      	ldr	r2, [pc, #108]	; (80035a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d902      	bls.n	8003546 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	3308      	adds	r3, #8
 8003544:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	4b18      	ldr	r3, [pc, #96]	; (80035ac <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800354a:	4413      	add	r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	461a      	mov	r2, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4a16      	ldr	r2, [pc, #88]	; (80035b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003558:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f003 031f 	and.w	r3, r3, #31
 8003560:	2201      	movs	r2, #1
 8003562:	409a      	lsls	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003568:	bf00      	nop
 800356a:	3714      	adds	r7, #20
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr
 8003574:	58025408 	.word	0x58025408
 8003578:	5802541c 	.word	0x5802541c
 800357c:	58025430 	.word	0x58025430
 8003580:	58025444 	.word	0x58025444
 8003584:	58025458 	.word	0x58025458
 8003588:	5802546c 	.word	0x5802546c
 800358c:	58025480 	.word	0x58025480
 8003590:	58025494 	.word	0x58025494
 8003594:	cccccccd 	.word	0xcccccccd
 8003598:	16009600 	.word	0x16009600
 800359c:	58025880 	.word	0x58025880
 80035a0:	aaaaaaab 	.word	0xaaaaaaab
 80035a4:	400204b8 	.word	0x400204b8
 80035a8:	4002040f 	.word	0x4002040f
 80035ac:	10008200 	.word	0x10008200
 80035b0:	40020880 	.word	0x40020880

080035b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b085      	sub	sp, #20
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d04a      	beq.n	8003660 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2b08      	cmp	r3, #8
 80035ce:	d847      	bhi.n	8003660 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a25      	ldr	r2, [pc, #148]	; (800366c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d022      	beq.n	8003620 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a24      	ldr	r2, [pc, #144]	; (8003670 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d01d      	beq.n	8003620 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a22      	ldr	r2, [pc, #136]	; (8003674 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d018      	beq.n	8003620 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a21      	ldr	r2, [pc, #132]	; (8003678 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d013      	beq.n	8003620 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a1f      	ldr	r2, [pc, #124]	; (800367c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d00e      	beq.n	8003620 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a1e      	ldr	r2, [pc, #120]	; (8003680 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d009      	beq.n	8003620 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a1c      	ldr	r2, [pc, #112]	; (8003684 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d004      	beq.n	8003620 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a1b      	ldr	r2, [pc, #108]	; (8003688 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d101      	bne.n	8003624 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003620:	2301      	movs	r3, #1
 8003622:	e000      	b.n	8003626 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003624:	2300      	movs	r3, #0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00a      	beq.n	8003640 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800362a:	68fa      	ldr	r2, [r7, #12]
 800362c:	4b17      	ldr	r3, [pc, #92]	; (800368c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800362e:	4413      	add	r3, r2
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	461a      	mov	r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	4a15      	ldr	r2, [pc, #84]	; (8003690 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800363c:	671a      	str	r2, [r3, #112]	; 0x70
 800363e:	e009      	b.n	8003654 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003640:	68fa      	ldr	r2, [r7, #12]
 8003642:	4b14      	ldr	r3, [pc, #80]	; (8003694 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003644:	4413      	add	r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	461a      	mov	r2, r3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a11      	ldr	r2, [pc, #68]	; (8003698 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003652:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	3b01      	subs	r3, #1
 8003658:	2201      	movs	r2, #1
 800365a:	409a      	lsls	r2, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003660:	bf00      	nop
 8003662:	3714      	adds	r7, #20
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr
 800366c:	58025408 	.word	0x58025408
 8003670:	5802541c 	.word	0x5802541c
 8003674:	58025430 	.word	0x58025430
 8003678:	58025444 	.word	0x58025444
 800367c:	58025458 	.word	0x58025458
 8003680:	5802546c 	.word	0x5802546c
 8003684:	58025480 	.word	0x58025480
 8003688:	58025494 	.word	0x58025494
 800368c:	1600963f 	.word	0x1600963f
 8003690:	58025940 	.word	0x58025940
 8003694:	1000823f 	.word	0x1000823f
 8003698:	40020940 	.word	0x40020940

0800369c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b098      	sub	sp, #96	; 0x60
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80036a4:	4a84      	ldr	r2, [pc, #528]	; (80038b8 <HAL_FDCAN_Init+0x21c>)
 80036a6:	f107 030c 	add.w	r3, r7, #12
 80036aa:	4611      	mov	r1, r2
 80036ac:	224c      	movs	r2, #76	; 0x4c
 80036ae:	4618      	mov	r0, r3
 80036b0:	f010 ff88 	bl	80145c4 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d101      	bne.n	80036be <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e1ca      	b.n	8003a54 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a7e      	ldr	r2, [pc, #504]	; (80038bc <HAL_FDCAN_Init+0x220>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d106      	bne.n	80036d6 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80036d0:	461a      	mov	r2, r3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d106      	bne.n	80036f0 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f7fd fd8c 	bl	8001208 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	699a      	ldr	r2, [r3, #24]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f022 0210 	bic.w	r2, r2, #16
 80036fe:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003700:	f7fe f9c0 	bl	8001a84 <HAL_GetTick>
 8003704:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003706:	e014      	b.n	8003732 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003708:	f7fe f9bc 	bl	8001a84 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b0a      	cmp	r3, #10
 8003714:	d90d      	bls.n	8003732 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800371c:	f043 0201 	orr.w	r2, r3, #1
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2203      	movs	r2, #3
 800372a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e190      	b.n	8003a54 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	699b      	ldr	r3, [r3, #24]
 8003738:	f003 0308 	and.w	r3, r3, #8
 800373c:	2b08      	cmp	r3, #8
 800373e:	d0e3      	beq.n	8003708 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	699a      	ldr	r2, [r3, #24]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f042 0201 	orr.w	r2, r2, #1
 800374e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003750:	f7fe f998 	bl	8001a84 <HAL_GetTick>
 8003754:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003756:	e014      	b.n	8003782 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003758:	f7fe f994 	bl	8001a84 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b0a      	cmp	r3, #10
 8003764:	d90d      	bls.n	8003782 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800376c:	f043 0201 	orr.w	r2, r3, #1
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2203      	movs	r2, #3
 800377a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e168      	b.n	8003a54 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	699b      	ldr	r3, [r3, #24]
 8003788:	f003 0301 	and.w	r3, r3, #1
 800378c:	2b00      	cmp	r3, #0
 800378e:	d0e3      	beq.n	8003758 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	699a      	ldr	r2, [r3, #24]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f042 0202 	orr.w	r2, r2, #2
 800379e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	7c1b      	ldrb	r3, [r3, #16]
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d108      	bne.n	80037ba <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	699a      	ldr	r2, [r3, #24]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037b6:	619a      	str	r2, [r3, #24]
 80037b8:	e007      	b.n	80037ca <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	699a      	ldr	r2, [r3, #24]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037c8:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	7c5b      	ldrb	r3, [r3, #17]
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d108      	bne.n	80037e4 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	699a      	ldr	r2, [r3, #24]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037e0:	619a      	str	r2, [r3, #24]
 80037e2:	e007      	b.n	80037f4 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	699a      	ldr	r2, [r3, #24]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80037f2:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	7c9b      	ldrb	r3, [r3, #18]
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d108      	bne.n	800380e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	699a      	ldr	r2, [r3, #24]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800380a:	619a      	str	r2, [r3, #24]
 800380c:	e007      	b.n	800381e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	699a      	ldr	r2, [r3, #24]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800381c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	699b      	ldr	r3, [r3, #24]
 8003824:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	689a      	ldr	r2, [r3, #8]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	430a      	orrs	r2, r1
 8003832:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	699a      	ldr	r2, [r3, #24]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8003842:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	691a      	ldr	r2, [r3, #16]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f022 0210 	bic.w	r2, r2, #16
 8003852:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d108      	bne.n	800386e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	699a      	ldr	r2, [r3, #24]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f042 0204 	orr.w	r2, r2, #4
 800386a:	619a      	str	r2, [r3, #24]
 800386c:	e030      	b.n	80038d0 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d02c      	beq.n	80038d0 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	2b02      	cmp	r3, #2
 800387c:	d020      	beq.n	80038c0 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	699a      	ldr	r2, [r3, #24]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800388c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	691a      	ldr	r2, [r3, #16]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f042 0210 	orr.w	r2, r2, #16
 800389c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	2b03      	cmp	r3, #3
 80038a4:	d114      	bne.n	80038d0 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	699a      	ldr	r2, [r3, #24]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f042 0220 	orr.w	r2, r2, #32
 80038b4:	619a      	str	r2, [r3, #24]
 80038b6:	e00b      	b.n	80038d0 <HAL_FDCAN_Init+0x234>
 80038b8:	08015620 	.word	0x08015620
 80038bc:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	699a      	ldr	r2, [r3, #24]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f042 0220 	orr.w	r2, r2, #32
 80038ce:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	699b      	ldr	r3, [r3, #24]
 80038d4:	3b01      	subs	r3, #1
 80038d6:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	69db      	ldr	r3, [r3, #28]
 80038dc:	3b01      	subs	r3, #1
 80038de:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80038e0:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a1b      	ldr	r3, [r3, #32]
 80038e6:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80038e8:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	695b      	ldr	r3, [r3, #20]
 80038f0:	3b01      	subs	r3, #1
 80038f2:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80038f8:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80038fa:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003904:	d115      	bne.n	8003932 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003910:	3b01      	subs	r3, #1
 8003912:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003914:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391a:	3b01      	subs	r3, #1
 800391c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800391e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003926:	3b01      	subs	r3, #1
 8003928:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800392e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003930:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00a      	beq.n	8003950 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	430a      	orrs	r2, r1
 800394c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003958:	4413      	add	r3, r2
 800395a:	2b00      	cmp	r3, #0
 800395c:	d012      	beq.n	8003984 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003966:	f023 0107 	bic.w	r1, r3, #7
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003974:	4413      	add	r3, r2
 8003976:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	430a      	orrs	r2, r1
 8003980:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003988:	2b00      	cmp	r3, #0
 800398a:	d012      	beq.n	80039b2 <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003994:	f023 0107 	bic.w	r1, r3, #7
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80039a2:	4413      	add	r3, r2
 80039a4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	430a      	orrs	r2, r1
 80039ae:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d013      	beq.n	80039e2 <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80039c2:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80039d0:	4413      	add	r3, r2
 80039d2:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80039d6:	011a      	lsls	r2, r3, #4
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	430a      	orrs	r2, r1
 80039de:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d013      	beq.n	8003a12 <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80039f2:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003a00:	4413      	add	r3, r2
 8003a02:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003a06:	021a      	lsls	r2, r3, #8
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	430a      	orrs	r2, r1
 8003a0e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a11      	ldr	r2, [pc, #68]	; (8003a5c <HAL_FDCAN_Init+0x3c0>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d107      	bne.n	8003a2c <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	689a      	ldr	r2, [r3, #8]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f022 0203 	bic.w	r2, r2, #3
 8003a2a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f000 fddf 	bl	8004608 <FDCAN_CalcultateRamBlockAddresses>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8003a50:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3760      	adds	r7, #96	; 0x60
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	4000a000 	.word	0x4000a000

08003a60 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b087      	sub	sp, #28
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003a70:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003a72:	7bfb      	ldrb	r3, [r7, #15]
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d002      	beq.n	8003a7e <HAL_FDCAN_ConfigFilter+0x1e>
 8003a78:	7bfb      	ldrb	r3, [r7, #15]
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d157      	bne.n	8003b2e <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d12b      	bne.n	8003ade <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	2b07      	cmp	r3, #7
 8003a8c:	d10d      	bne.n	8003aaa <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	69db      	ldr	r3, [r3, #28]
 8003a98:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8003a9a:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8003aa0:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8003aa2:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 8003aa6:	617b      	str	r3, [r7, #20]
 8003aa8:	e00e      	b.n	8003ac8 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003ab6:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	691b      	ldr	r3, [r3, #16]
 8003abc:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8003abe:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	4413      	add	r3, r2
 8003ad4:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	697a      	ldr	r2, [r7, #20]
 8003ada:	601a      	str	r2, [r3, #0]
 8003adc:	e025      	b.n	8003b2a <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	075a      	lsls	r2, r3, #29
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	691b      	ldr	r3, [r3, #16]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	2b07      	cmp	r3, #7
 8003af2:	d103      	bne.n	8003afc <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	699b      	ldr	r3, [r3, #24]
 8003af8:	613b      	str	r3, [r7, #16]
 8003afa:	e006      	b.n	8003b0a <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	079a      	lsls	r2, r3, #30
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	695b      	ldr	r3, [r3, #20]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	00db      	lsls	r3, r3, #3
 8003b14:	4413      	add	r3, r2
 8003b16:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	697a      	ldr	r2, [r7, #20]
 8003b1c:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	3304      	adds	r3, #4
 8003b22:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	e008      	b.n	8003b40 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b34:	f043 0202 	orr.w	r2, r3, #2
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
  }
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	371c      	adds	r7, #28
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b085      	sub	sp, #20
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	60b9      	str	r1, [r7, #8]
 8003b56:	607a      	str	r2, [r7, #4]
 8003b58:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d110      	bne.n	8003b88 <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8003b6e:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8003b74:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8003b7c:	69ba      	ldr	r2, [r7, #24]
 8003b7e:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8003b80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 8003b84:	2300      	movs	r3, #0
 8003b86:	e008      	b.n	8003b9a <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b8e:	f043 0204 	orr.w	r2, r3, #4
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
  }
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3714      	adds	r7, #20
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr

08003ba6 <HAL_FDCAN_EnableTxDelayCompensation>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan)
{
 8003ba6:	b480      	push	{r7}
 8003ba8:	b083      	sub	sp, #12
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d109      	bne.n	8003bce <HAL_FDCAN_EnableTxDelayCompensation+0x28>
  {
    /* Enable transmitter delay compensation */
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68da      	ldr	r2, [r3, #12]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003bc8:	60da      	str	r2, [r3, #12]

    /* Return function status */
    return HAL_OK;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	e008      	b.n	8003be0 <HAL_FDCAN_EnableTxDelayCompensation+0x3a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003bd4:	f043 0204 	orr.w	r2, r3, #4
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
  }
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d111      	bne.n	8003c24 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2202      	movs	r2, #2
 8003c04:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	699a      	ldr	r2, [r3, #24]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f022 0201 	bic.w	r2, r2, #1
 8003c16:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8003c20:	2300      	movs	r3, #0
 8003c22:	e008      	b.n	8003c36 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c2a:	f043 0204 	orr.w	r2, r3, #4
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
  }
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	370c      	adds	r7, #12
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
	...

08003c44 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b08b      	sub	sp, #44	; 0x2c
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	607a      	str	r2, [r7, #4]
 8003c50:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8003c52:	2300      	movs	r3, #0
 8003c54:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003c5c:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8003c5e:	7efb      	ldrb	r3, [r7, #27]
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	f040 813b 	bne.w	8003edc <HAL_FDCAN_GetRxMessage+0x298>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	2b40      	cmp	r3, #64	; 0x40
 8003c6a:	d145      	bne.n	8003cf8 <HAL_FDCAN_GetRxMessage+0xb4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003c74:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d109      	bne.n	8003c90 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c82:	f043 0220 	orr.w	r2, r3, #32
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e12e      	b.n	8003eee <HAL_FDCAN_GetRxMessage+0x2aa>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003c98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d109      	bne.n	8003cb4 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ca6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e11c      	b.n	8003eee <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003cbc:	0e1b      	lsrs	r3, r3, #24
 8003cbe:	f003 0301 	and.w	r3, r3, #1
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d103      	bne.n	8003cce <HAL_FDCAN_GetRxMessage+0x8a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
            GetIndex = 1U;
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003cd6:	0a1b      	lsrs	r3, r3, #8
 8003cd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cdc:	69fa      	ldr	r2, [r7, #28]
 8003cde:	4413      	add	r3, r2
 8003ce0:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cea:	69f9      	ldr	r1, [r7, #28]
 8003cec:	fb01 f303 	mul.w	r3, r1, r3
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	4413      	add	r3, r2
 8003cf4:	627b      	str	r3, [r7, #36]	; 0x24
 8003cf6:	e061      	b.n	8003dbc <HAL_FDCAN_GetRxMessage+0x178>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	2b41      	cmp	r3, #65	; 0x41
 8003cfc:	d145      	bne.n	8003d8a <HAL_FDCAN_GetRxMessage+0x146>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d06:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d109      	bne.n	8003d22 <HAL_FDCAN_GetRxMessage+0xde>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d14:	f043 0220 	orr.w	r2, r3, #32
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e0e5      	b.n	8003eee <HAL_FDCAN_GetRxMessage+0x2aa>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003d2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d109      	bne.n	8003d46 <HAL_FDCAN_GetRxMessage+0x102>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d38:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e0d3      	b.n	8003eee <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003d4e:	0e1b      	lsrs	r3, r3, #24
 8003d50:	f003 0301 	and.w	r3, r3, #1
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d103      	bne.n	8003d60 <HAL_FDCAN_GetRxMessage+0x11c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
            GetIndex = 1U;
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003d68:	0a1b      	lsrs	r3, r3, #8
 8003d6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d6e:	69fa      	ldr	r2, [r7, #28]
 8003d70:	4413      	add	r3, r2
 8003d72:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d7c:	69f9      	ldr	r1, [r7, #28]
 8003d7e:	fb01 f303 	mul.w	r3, r1, r3
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	4413      	add	r3, r2
 8003d86:	627b      	str	r3, [r7, #36]	; 0x24
 8003d88:	e018      	b.n	8003dbc <HAL_FDCAN_GetRxMessage+0x178>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d8e:	68ba      	ldr	r2, [r7, #8]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d309      	bcc.n	8003da8 <HAL_FDCAN_GetRxMessage+0x164>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d9a:	f043 0220 	orr.w	r2, r3, #32
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e0a2      	b.n	8003eee <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003db0:	68b9      	ldr	r1, [r7, #8]
 8003db2:	fb01 f303 	mul.w	r3, r1, r3
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	4413      	add	r3, r2
 8003dba:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8003dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d107      	bne.n	8003de0 <HAL_FDCAN_GetRxMessage+0x19c>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8003dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	0c9b      	lsrs	r3, r3, #18
 8003dd6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	601a      	str	r2, [r3, #0]
 8003dde:	e005      	b.n	8003dec <HAL_FDCAN_GetRxMessage+0x1a8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8003de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8003dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8003df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8003e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e06:	3304      	adds	r3, #4
 8003e08:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8003e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	b29a      	uxth	r2, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8003e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8003e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8003e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8003e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	0e1b      	lsrs	r3, r3, #24
 8003e3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8003e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	0fda      	lsrs	r2, r3, #31
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8003e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e52:	3304      	adds	r3, #4
 8003e54:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8003e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e58:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	623b      	str	r3, [r7, #32]
 8003e5e:	e00a      	b.n	8003e76 <HAL_FDCAN_GetRxMessage+0x232>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8003e60:	697a      	ldr	r2, [r7, #20]
 8003e62:	6a3b      	ldr	r3, [r7, #32]
 8003e64:	441a      	add	r2, r3
 8003e66:	6839      	ldr	r1, [r7, #0]
 8003e68:	6a3b      	ldr	r3, [r7, #32]
 8003e6a:	440b      	add	r3, r1
 8003e6c:	7812      	ldrb	r2, [r2, #0]
 8003e6e:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8003e70:	6a3b      	ldr	r3, [r7, #32]
 8003e72:	3301      	adds	r3, #1
 8003e74:	623b      	str	r3, [r7, #32]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	0c1b      	lsrs	r3, r3, #16
 8003e7c:	4a1f      	ldr	r2, [pc, #124]	; (8003efc <HAL_FDCAN_GetRxMessage+0x2b8>)
 8003e7e:	5cd3      	ldrb	r3, [r2, r3]
 8003e80:	461a      	mov	r2, r3
 8003e82:	6a3b      	ldr	r3, [r7, #32]
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d3eb      	bcc.n	8003e60 <HAL_FDCAN_GetRxMessage+0x21c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	2b40      	cmp	r3, #64	; 0x40
 8003e8c:	d105      	bne.n	8003e9a <HAL_FDCAN_GetRxMessage+0x256>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	69fa      	ldr	r2, [r7, #28]
 8003e94:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8003e98:	e01e      	b.n	8003ed8 <HAL_FDCAN_GetRxMessage+0x294>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	2b41      	cmp	r3, #65	; 0x41
 8003e9e:	d105      	bne.n	8003eac <HAL_FDCAN_GetRxMessage+0x268>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	69fa      	ldr	r2, [r7, #28]
 8003ea6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8003eaa:	e015      	b.n	8003ed8 <HAL_FDCAN_GetRxMessage+0x294>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	2b1f      	cmp	r3, #31
 8003eb0:	d808      	bhi.n	8003ec4 <HAL_FDCAN_GetRxMessage+0x280>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2101      	movs	r1, #1
 8003eb8:	68ba      	ldr	r2, [r7, #8]
 8003eba:	fa01 f202 	lsl.w	r2, r1, r2
 8003ebe:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8003ec2:	e009      	b.n	8003ed8 <HAL_FDCAN_GetRxMessage+0x294>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	f003 021f 	and.w	r2, r3, #31
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	2101      	movs	r1, #1
 8003ed0:	fa01 f202 	lsl.w	r2, r1, r2
 8003ed4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	e008      	b.n	8003eee <HAL_FDCAN_GetRxMessage+0x2aa>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ee2:	f043 0208 	orr.w	r2, r3, #8
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
  }
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	372c      	adds	r7, #44	; 0x2c
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	0801571c 	.word	0x0801571c

08003f00 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b087      	sub	sp, #28
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003f12:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003f14:	7dfb      	ldrb	r3, [r7, #23]
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d002      	beq.n	8003f20 <HAL_FDCAN_ActivateNotification+0x20>
 8003f1a:	7dfb      	ldrb	r3, [r7, #23]
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	d155      	bne.n	8003fcc <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	4013      	ands	r3, r2
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d108      	bne.n	8003f40 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f042 0201 	orr.w	r2, r2, #1
 8003f3c:	65da      	str	r2, [r3, #92]	; 0x5c
 8003f3e:	e014      	b.n	8003f6a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	4013      	ands	r3, r2
 8003f4a:	68ba      	ldr	r2, [r7, #8]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d108      	bne.n	8003f62 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f042 0202 	orr.w	r2, r2, #2
 8003f5e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003f60:	e003      	b.n	8003f6a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2203      	movs	r2, #3
 8003f68:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d009      	beq.n	8003f88 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occure if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	430a      	orrs	r2, r1
 8003f84:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d009      	beq.n	8003fa6 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occure if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	430a      	orrs	r2, r1
 8003fa2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003fac:	68ba      	ldr	r2, [r7, #8]
 8003fae:	4b0f      	ldr	r3, [pc, #60]	; (8003fec <HAL_FDCAN_ActivateNotification+0xec>)
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	68fa      	ldr	r2, [r7, #12]
 8003fb4:	6812      	ldr	r2, [r2, #0]
 8003fb6:	430b      	orrs	r3, r1
 8003fb8:	6553      	str	r3, [r2, #84]	; 0x54
 8003fba:	4b0d      	ldr	r3, [pc, #52]	; (8003ff0 <HAL_FDCAN_ActivateNotification+0xf0>)
 8003fbc:	695a      	ldr	r2, [r3, #20]
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	0f9b      	lsrs	r3, r3, #30
 8003fc2:	490b      	ldr	r1, [pc, #44]	; (8003ff0 <HAL_FDCAN_ActivateNotification+0xf0>)
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	e008      	b.n	8003fde <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003fd2:	f043 0202 	orr.w	r2, r3, #2
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
  }
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	371c      	adds	r7, #28
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	3fcfffff 	.word	0x3fcfffff
 8003ff0:	4000a800 	.word	0x4000a800

08003ff4 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b092      	sub	sp, #72	; 0x48
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8003ffc:	4b90      	ldr	r3, [pc, #576]	; (8004240 <HAL_FDCAN_IRQHandler+0x24c>)
 8003ffe:	691b      	ldr	r3, [r3, #16]
 8004000:	079b      	lsls	r3, r3, #30
 8004002:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8004004:	4b8e      	ldr	r3, [pc, #568]	; (8004240 <HAL_FDCAN_IRQHandler+0x24c>)
 8004006:	695b      	ldr	r3, [r3, #20]
 8004008:	079b      	lsls	r3, r3, #30
 800400a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800400c:	4013      	ands	r3, r2
 800400e:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004016:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800401a:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004022:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004024:	4013      	ands	r3, r2
 8004026:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800402e:	f003 030f 	and.w	r3, r3, #15
 8004032:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800403a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800403c:	4013      	ands	r3, r2
 800403e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004046:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800404a:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004052:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004054:	4013      	ands	r3, r2
 8004056:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800405e:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 8004062:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800406a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800406c:	4013      	ands	r3, r2
 800406e:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004076:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 800407a:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004082:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004084:	4013      	ands	r3, r2
 8004086:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800408e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004092:	2b00      	cmp	r3, #0
 8004094:	d011      	beq.n	80040ba <HAL_FDCAN_IRQHandler+0xc6>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800409c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00a      	beq.n	80040ba <HAL_FDCAN_IRQHandler+0xc6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80040ac:	651a      	str	r2, [r3, #80]	; 0x50
 80040ae:	4b64      	ldr	r3, [pc, #400]	; (8004240 <HAL_FDCAN_IRQHandler+0x24c>)
 80040b0:	2200      	movs	r2, #0
 80040b2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f000 fa5a 	bl	800456e <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d01e      	beq.n	8004106 <HAL_FDCAN_IRQHandler+0x112>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d017      	beq.n	8004106 <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80040de:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80040e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040ea:	4013      	ands	r3, r2
 80040ec:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80040f6:	651a      	str	r2, [r3, #80]	; 0x50
 80040f8:	4b51      	ldr	r3, [pc, #324]	; (8004240 <HAL_FDCAN_IRQHandler+0x24c>)
 80040fa:	2200      	movs	r2, #0
 80040fc:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80040fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f000 fa0b 	bl	800451c <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8004106:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004108:	2b00      	cmp	r3, #0
 800410a:	d00d      	beq.n	8004128 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004112:	4b4c      	ldr	r3, [pc, #304]	; (8004244 <HAL_FDCAN_IRQHandler+0x250>)
 8004114:	400b      	ands	r3, r1
 8004116:	6513      	str	r3, [r2, #80]	; 0x50
 8004118:	4a49      	ldr	r2, [pc, #292]	; (8004240 <HAL_FDCAN_IRQHandler+0x24c>)
 800411a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800411c:	0f9b      	lsrs	r3, r3, #30
 800411e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8004120:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 f9c4 	bl	80044b0 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8004128:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00d      	beq.n	800414a <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004134:	4b43      	ldr	r3, [pc, #268]	; (8004244 <HAL_FDCAN_IRQHandler+0x250>)
 8004136:	400b      	ands	r3, r1
 8004138:	6513      	str	r3, [r2, #80]	; 0x50
 800413a:	4a41      	ldr	r2, [pc, #260]	; (8004240 <HAL_FDCAN_IRQHandler+0x24c>)
 800413c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800413e:	0f9b      	lsrs	r3, r3, #30
 8004140:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8004142:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f000 f9be 	bl	80044c6 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800414a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800414c:	2b00      	cmp	r3, #0
 800414e:	d00d      	beq.n	800416c <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004156:	4b3b      	ldr	r3, [pc, #236]	; (8004244 <HAL_FDCAN_IRQHandler+0x250>)
 8004158:	400b      	ands	r3, r1
 800415a:	6513      	str	r3, [r2, #80]	; 0x50
 800415c:	4a38      	ldr	r2, [pc, #224]	; (8004240 <HAL_FDCAN_IRQHandler+0x24c>)
 800415e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004160:	0f9b      	lsrs	r3, r3, #30
 8004162:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8004164:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f7fd f808 	bl	800117c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 800416c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00d      	beq.n	800418e <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004178:	4b32      	ldr	r3, [pc, #200]	; (8004244 <HAL_FDCAN_IRQHandler+0x250>)
 800417a:	400b      	ands	r3, r1
 800417c:	6513      	str	r3, [r2, #80]	; 0x50
 800417e:	4a30      	ldr	r2, [pc, #192]	; (8004240 <HAL_FDCAN_IRQHandler+0x24c>)
 8004180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004182:	0f9b      	lsrs	r3, r3, #30
 8004184:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8004186:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f000 f9a7 	bl	80044dc <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004194:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004198:	2b00      	cmp	r3, #0
 800419a:	d011      	beq.n	80041c0 <HAL_FDCAN_IRQHandler+0x1cc>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d00a      	beq.n	80041c0 <HAL_FDCAN_IRQHandler+0x1cc>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041b2:	651a      	str	r2, [r3, #80]	; 0x50
 80041b4:	4b22      	ldr	r3, [pc, #136]	; (8004240 <HAL_FDCAN_IRQHandler+0x24c>)
 80041b6:	2200      	movs	r2, #0
 80041b8:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 f999 	bl	80044f2 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d01e      	beq.n	800420c <HAL_FDCAN_IRQHandler+0x218>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d017      	beq.n	800420c <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80041e4:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041f0:	4013      	ands	r3, r2
 80041f2:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041fc:	651a      	str	r2, [r3, #80]	; 0x50
 80041fe:	4b10      	ldr	r3, [pc, #64]	; (8004240 <HAL_FDCAN_IRQHandler+0x24c>)
 8004200:	2200      	movs	r2, #0
 8004202:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8004204:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 f97d 	bl	8004506 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004212:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d016      	beq.n	8004248 <HAL_FDCAN_IRQHandler+0x254>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004220:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00f      	beq.n	8004248 <HAL_FDCAN_IRQHandler+0x254>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004230:	651a      	str	r2, [r3, #80]	; 0x50
 8004232:	4b03      	ldr	r3, [pc, #12]	; (8004240 <HAL_FDCAN_IRQHandler+0x24c>)
 8004234:	2200      	movs	r2, #0
 8004236:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f000 f97a 	bl	8004532 <HAL_FDCAN_RxBufferNewMessageCallback>
 800423e:	e003      	b.n	8004248 <HAL_FDCAN_IRQHandler+0x254>
 8004240:	4000a800 	.word	0x4000a800
 8004244:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800424e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d011      	beq.n	800427a <HAL_FDCAN_IRQHandler+0x286>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800425c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d00a      	beq.n	800427a <HAL_FDCAN_IRQHandler+0x286>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800426c:	651a      	str	r2, [r3, #80]	; 0x50
 800426e:	4b8d      	ldr	r3, [pc, #564]	; (80044a4 <HAL_FDCAN_IRQHandler+0x4b0>)
 8004270:	2200      	movs	r2, #0
 8004272:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f000 f966 	bl	8004546 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004280:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d011      	beq.n	80042ac <HAL_FDCAN_IRQHandler+0x2b8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800428e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00a      	beq.n	80042ac <HAL_FDCAN_IRQHandler+0x2b8>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800429e:	651a      	str	r2, [r3, #80]	; 0x50
 80042a0:	4b80      	ldr	r3, [pc, #512]	; (80044a4 <HAL_FDCAN_IRQHandler+0x4b0>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 f957 	bl	800455a <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d016      	beq.n	80042e8 <HAL_FDCAN_IRQHandler+0x2f4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d00f      	beq.n	80042e8 <HAL_FDCAN_IRQHandler+0x2f4>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80042d0:	651a      	str	r2, [r3, #80]	; 0x50
 80042d2:	4b74      	ldr	r3, [pc, #464]	; (80044a4 <HAL_FDCAN_IRQHandler+0x4b0>)
 80042d4:	2200      	movs	r2, #0
 80042d6:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042de:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80042e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00d      	beq.n	800430a <HAL_FDCAN_IRQHandler+0x316>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80042f4:	4b6c      	ldr	r3, [pc, #432]	; (80044a8 <HAL_FDCAN_IRQHandler+0x4b4>)
 80042f6:	400b      	ands	r3, r1
 80042f8:	6513      	str	r3, [r2, #80]	; 0x50
 80042fa:	4a6a      	ldr	r2, [pc, #424]	; (80044a4 <HAL_FDCAN_IRQHandler+0x4b0>)
 80042fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042fe:	0f9b      	lsrs	r3, r3, #30
 8004300:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8004302:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f000 f946 	bl	8004596 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800430a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800430c:	2b00      	cmp	r3, #0
 800430e:	d011      	beq.n	8004334 <HAL_FDCAN_IRQHandler+0x340>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004316:	4b64      	ldr	r3, [pc, #400]	; (80044a8 <HAL_FDCAN_IRQHandler+0x4b4>)
 8004318:	400b      	ands	r3, r1
 800431a:	6513      	str	r3, [r2, #80]	; 0x50
 800431c:	4a61      	ldr	r2, [pc, #388]	; (80044a4 <HAL_FDCAN_IRQHandler+0x4b0>)
 800431e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004320:	0f9b      	lsrs	r3, r3, #30
 8004322:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800432a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800432c:	431a      	orrs	r2, r3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a5c      	ldr	r2, [pc, #368]	; (80044ac <HAL_FDCAN_IRQHandler+0x4b8>)
 800433a:	4293      	cmp	r3, r2
 800433c:	f040 80a6 	bne.w	800448c <HAL_FDCAN_IRQHandler+0x498>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	f003 0303 	and.w	r3, r3, #3
 800434a:	2b00      	cmp	r3, #0
 800434c:	f000 809e 	beq.w	800448c <HAL_FDCAN_IRQHandler+0x498>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	6a1b      	ldr	r3, [r3, #32]
 8004356:	f003 030f 	and.w	r3, r3, #15
 800435a:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004362:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004364:	4013      	ands	r3, r2
 8004366:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	6a1b      	ldr	r3, [r3, #32]
 800436e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004372:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437a:	6a3a      	ldr	r2, [r7, #32]
 800437c:	4013      	ands	r3, r2
 800437e:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	6a1b      	ldr	r3, [r3, #32]
 8004386:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800438a:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004392:	69fa      	ldr	r2, [r7, #28]
 8004394:	4013      	ands	r3, r2
 8004396:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	6a1b      	ldr	r3, [r3, #32]
 800439e:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 80043a2:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043aa:	69ba      	ldr	r2, [r7, #24]
 80043ac:	4013      	ands	r3, r2
 80043ae:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	6a1b      	ldr	r3, [r3, #32]
 80043b6:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 80043ba:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c2:	697a      	ldr	r2, [r7, #20]
 80043c4:	4013      	ands	r3, r2
 80043c6:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 80043c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d007      	beq.n	80043de <HAL_FDCAN_IRQHandler+0x3ea>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043d4:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 80043d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f000 f8e7 	bl	80045ac <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 80043de:	6a3b      	ldr	r3, [r7, #32]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d007      	beq.n	80043f4 <HAL_FDCAN_IRQHandler+0x400>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	6a3a      	ldr	r2, [r7, #32]
 80043ea:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 80043ec:	6a39      	ldr	r1, [r7, #32]
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 f8e7 	bl	80045c2 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d01b      	beq.n	800443a <HAL_FDCAN_IRQHandler+0x446>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	6a1b      	ldr	r3, [r3, #32]
 8004408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800440c:	2b00      	cmp	r3, #0
 800440e:	d014      	beq.n	800443a <HAL_FDCAN_IRQHandler+0x446>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004416:	0c1b      	lsrs	r3, r3, #16
 8004418:	b29b      	uxth	r3, r3
 800441a:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004422:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004426:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	2240      	movs	r2, #64	; 0x40
 800442e:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8004430:	68fa      	ldr	r2, [r7, #12]
 8004432:	6939      	ldr	r1, [r7, #16]
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f000 f8cf 	bl	80045d8 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d007      	beq.n	8004450 <HAL_FDCAN_IRQHandler+0x45c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	69fa      	ldr	r2, [r7, #28]
 8004446:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8004448:	69f9      	ldr	r1, [r7, #28]
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 f8d0 	bl	80045f0 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d00b      	beq.n	800446e <HAL_FDCAN_IRQHandler+0x47a>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	69ba      	ldr	r2, [r7, #24]
 800445c:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	431a      	orrs	r2, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d00b      	beq.n	800448c <HAL_FDCAN_IRQHandler+0x498>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	697a      	ldr	r2, [r7, #20]
 800447a:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	431a      	orrs	r2, r3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004492:	2b00      	cmp	r3, #0
 8004494:	d002      	beq.n	800449c <HAL_FDCAN_IRQHandler+0x4a8>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 f873 	bl	8004582 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800449c:	bf00      	nop
 800449e:	3748      	adds	r7, #72	; 0x48
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	4000a800 	.word	0x4000a800
 80044a8:	3fcfffff 	.word	0x3fcfffff
 80044ac:	4000a000 	.word	0x4000a000

080044b0 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 80044ba:	bf00      	nop
 80044bc:	370c      	adds	r7, #12
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr

080044c6 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80044c6:	b480      	push	{r7}
 80044c8:	b083      	sub	sp, #12
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
 80044ce:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80044d0:	bf00      	nop
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80044e6:	bf00      	nop
 80044e8:	370c      	adds	r7, #12
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr

080044f2 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80044f2:	b480      	push	{r7}
 80044f4:	b083      	sub	sp, #12
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80044fa:	bf00      	nop
 80044fc:	370c      	adds	r7, #12
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr

08004506 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004506:	b480      	push	{r7}
 8004508:	b083      	sub	sp, #12
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
 800450e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8004510:	bf00      	nop
 8004512:	370c      	adds	r7, #12
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8004526:	bf00      	nop
 8004528:	370c      	adds	r7, #12
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr

08004532 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004532:	b480      	push	{r7}
 8004534:	b083      	sub	sp, #12
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 800453a:	bf00      	nop
 800453c:	370c      	adds	r7, #12
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr

08004546 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004546:	b480      	push	{r7}
 8004548:	b083      	sub	sp, #12
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800454e:	bf00      	nop
 8004550:	370c      	adds	r7, #12
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr

0800455a <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800455a:	b480      	push	{r7}
 800455c:	b083      	sub	sp, #12
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8004562:	bf00      	nop
 8004564:	370c      	adds	r7, #12
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr

0800456e <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800456e:	b480      	push	{r7}
 8004570:	b083      	sub	sp, #12
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8004576:	bf00      	nop
 8004578:	370c      	adds	r7, #12
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr

08004582 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004582:	b480      	push	{r7}
 8004584:	b083      	sub	sp, #12
 8004586:	af00      	add	r7, sp, #0
 8004588:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800458a:	bf00      	nop
 800458c:	370c      	adds	r7, #12
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr

08004596 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8004596:	b480      	push	{r7}
 8004598:	b083      	sub	sp, #12
 800459a:	af00      	add	r7, sp, #0
 800459c:	6078      	str	r0, [r7, #4]
 800459e:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80045a0:	bf00      	nop
 80045a2:	370c      	adds	r7, #12
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr

080045ac <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 80045b6:	bf00      	nop
 80045b8:	370c      	adds	r7, #12
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr

080045c2 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 80045c2:	b480      	push	{r7}
 80045c4:	b083      	sub	sp, #12
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
 80045ca:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 80045cc:	bf00      	nop
 80045ce:	370c      	adds	r7, #12
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr

080045d8 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 80045d8:	b480      	push	{r7}
 80045da:	b085      	sub	sp, #20
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 80045e4:	bf00      	nop
 80045e6:	3714      	adds	r7, #20
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 80045fa:	bf00      	nop
 80045fc:	370c      	adds	r7, #12
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr
	...

08004608 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004608:	b480      	push	{r7}
 800460a:	b085      	sub	sp, #20
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004614:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800461e:	4ba7      	ldr	r3, [pc, #668]	; (80048bc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004620:	4013      	ands	r3, r2
 8004622:	68ba      	ldr	r2, [r7, #8]
 8004624:	0091      	lsls	r1, r2, #2
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	6812      	ldr	r2, [r2, #0]
 800462a:	430b      	orrs	r3, r1
 800462c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004638:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004640:	041a      	lsls	r2, r3, #16
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	430a      	orrs	r2, r1
 8004648:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004650:	68ba      	ldr	r2, [r7, #8]
 8004652:	4413      	add	r3, r2
 8004654:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800465e:	4b97      	ldr	r3, [pc, #604]	; (80048bc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004660:	4013      	ands	r3, r2
 8004662:	68ba      	ldr	r2, [r7, #8]
 8004664:	0091      	lsls	r1, r2, #2
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	6812      	ldr	r2, [r2, #0]
 800466a:	430b      	orrs	r3, r1
 800466c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004678:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004680:	041a      	lsls	r2, r3, #16
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	430a      	orrs	r2, r1
 8004688:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004690:	005b      	lsls	r3, r3, #1
 8004692:	68ba      	ldr	r2, [r7, #8]
 8004694:	4413      	add	r3, r2
 8004696:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80046a0:	4b86      	ldr	r3, [pc, #536]	; (80048bc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80046a2:	4013      	ands	r3, r2
 80046a4:	68ba      	ldr	r2, [r7, #8]
 80046a6:	0091      	lsls	r1, r2, #2
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	6812      	ldr	r2, [r2, #0]
 80046ac:	430b      	orrs	r3, r1
 80046ae:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80046ba:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c2:	041a      	lsls	r2, r3, #16
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	430a      	orrs	r2, r1
 80046ca:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80046d6:	fb02 f303 	mul.w	r3, r2, r3
 80046da:	68ba      	ldr	r2, [r7, #8]
 80046dc:	4413      	add	r3, r2
 80046de:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80046e8:	4b74      	ldr	r3, [pc, #464]	; (80048bc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80046ea:	4013      	ands	r3, r2
 80046ec:	68ba      	ldr	r2, [r7, #8]
 80046ee:	0091      	lsls	r1, r2, #2
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	6812      	ldr	r2, [r2, #0]
 80046f4:	430b      	orrs	r3, r1
 80046f6:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004702:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800470a:	041a      	lsls	r2, r3, #16
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	430a      	orrs	r2, r1
 8004712:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800471e:	fb02 f303 	mul.w	r3, r2, r3
 8004722:	68ba      	ldr	r2, [r7, #8]
 8004724:	4413      	add	r3, r2
 8004726:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004730:	4b62      	ldr	r3, [pc, #392]	; (80048bc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004732:	4013      	ands	r3, r2
 8004734:	68ba      	ldr	r2, [r7, #8]
 8004736:	0091      	lsls	r1, r2, #2
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	6812      	ldr	r2, [r2, #0]
 800473c:	430b      	orrs	r3, r1
 800473e:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800474a:	fb02 f303 	mul.w	r3, r2, r3
 800474e:	68ba      	ldr	r2, [r7, #8]
 8004750:	4413      	add	r3, r2
 8004752:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800475c:	4b57      	ldr	r3, [pc, #348]	; (80048bc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800475e:	4013      	ands	r3, r2
 8004760:	68ba      	ldr	r2, [r7, #8]
 8004762:	0091      	lsls	r1, r2, #2
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	6812      	ldr	r2, [r2, #0]
 8004768:	430b      	orrs	r3, r1
 800476a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004776:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800477e:	041a      	lsls	r2, r3, #16
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	430a      	orrs	r2, r1
 8004786:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800478e:	005b      	lsls	r3, r3, #1
 8004790:	68ba      	ldr	r2, [r7, #8]
 8004792:	4413      	add	r3, r2
 8004794:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800479e:	4b47      	ldr	r3, [pc, #284]	; (80048bc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80047a0:	4013      	ands	r3, r2
 80047a2:	68ba      	ldr	r2, [r7, #8]
 80047a4:	0091      	lsls	r1, r2, #2
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	6812      	ldr	r2, [r2, #0]
 80047aa:	430b      	orrs	r3, r1
 80047ac:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80047b8:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047c0:	041a      	lsls	r2, r3, #16
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	430a      	orrs	r2, r1
 80047c8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80047d4:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047dc:	061a      	lsls	r2, r3, #24
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	430a      	orrs	r2, r1
 80047e4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047ec:	4b34      	ldr	r3, [pc, #208]	; (80048c0 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80047ee:	4413      	add	r3, r2
 80047f0:	009a      	lsls	r2, r3, #2
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	441a      	add	r2, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800480e:	00db      	lsls	r3, r3, #3
 8004810:	441a      	add	r2, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481e:	6879      	ldr	r1, [r7, #4]
 8004820:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8004822:	fb01 f303 	mul.w	r3, r1, r3
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	441a      	add	r2, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004836:	6879      	ldr	r1, [r7, #4]
 8004838:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 800483a:	fb01 f303 	mul.w	r3, r1, r3
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	441a      	add	r2, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800484e:	6879      	ldr	r1, [r7, #4]
 8004850:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8004852:	fb01 f303 	mul.w	r3, r1, r3
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	441a      	add	r2, r3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800486a:	00db      	lsls	r3, r3, #3
 800486c:	441a      	add	r2, r3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800487e:	6879      	ldr	r1, [r7, #4]
 8004880:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8004882:	fb01 f303 	mul.w	r3, r1, r3
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	441a      	add	r2, r3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800489a:	6879      	ldr	r1, [r7, #4]
 800489c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800489e:	fb01 f303 	mul.w	r3, r1, r3
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	441a      	add	r2, r3
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048b2:	4a04      	ldr	r2, [pc, #16]	; (80048c4 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d915      	bls.n	80048e4 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80048b8:	e006      	b.n	80048c8 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80048ba:	bf00      	nop
 80048bc:	ffff0003 	.word	0xffff0003
 80048c0:	10002b00 	.word	0x10002b00
 80048c4:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80048ce:	f043 0220 	orr.w	r2, r3, #32
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2203      	movs	r2, #3
 80048dc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e010      	b.n	8004906 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048e8:	60fb      	str	r3, [r7, #12]
 80048ea:	e005      	b.n	80048f8 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2200      	movs	r2, #0
 80048f0:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	3304      	adds	r3, #4
 80048f6:	60fb      	str	r3, [r7, #12]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048fe:	68fa      	ldr	r2, [r7, #12]
 8004900:	429a      	cmp	r2, r3
 8004902:	d3f3      	bcc.n	80048ec <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3714      	adds	r7, #20
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop

08004914 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004914:	b480      	push	{r7}
 8004916:	b089      	sub	sp, #36	; 0x24
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800491e:	2300      	movs	r3, #0
 8004920:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004922:	4b89      	ldr	r3, [pc, #548]	; (8004b48 <HAL_GPIO_Init+0x234>)
 8004924:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004926:	e194      	b.n	8004c52 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	2101      	movs	r1, #1
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	fa01 f303 	lsl.w	r3, r1, r3
 8004934:	4013      	ands	r3, r2
 8004936:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	2b00      	cmp	r3, #0
 800493c:	f000 8186 	beq.w	8004c4c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	2b01      	cmp	r3, #1
 8004946:	d00b      	beq.n	8004960 <HAL_GPIO_Init+0x4c>
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	2b02      	cmp	r3, #2
 800494e:	d007      	beq.n	8004960 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004954:	2b11      	cmp	r3, #17
 8004956:	d003      	beq.n	8004960 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	2b12      	cmp	r3, #18
 800495e:	d130      	bne.n	80049c2 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004966:	69fb      	ldr	r3, [r7, #28]
 8004968:	005b      	lsls	r3, r3, #1
 800496a:	2203      	movs	r2, #3
 800496c:	fa02 f303 	lsl.w	r3, r2, r3
 8004970:	43db      	mvns	r3, r3
 8004972:	69ba      	ldr	r2, [r7, #24]
 8004974:	4013      	ands	r3, r2
 8004976:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	68da      	ldr	r2, [r3, #12]
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	005b      	lsls	r3, r3, #1
 8004980:	fa02 f303 	lsl.w	r3, r2, r3
 8004984:	69ba      	ldr	r2, [r7, #24]
 8004986:	4313      	orrs	r3, r2
 8004988:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	69ba      	ldr	r2, [r7, #24]
 800498e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004996:	2201      	movs	r2, #1
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	fa02 f303 	lsl.w	r3, r2, r3
 800499e:	43db      	mvns	r3, r3
 80049a0:	69ba      	ldr	r2, [r7, #24]
 80049a2:	4013      	ands	r3, r2
 80049a4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	091b      	lsrs	r3, r3, #4
 80049ac:	f003 0201 	and.w	r2, r3, #1
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	fa02 f303 	lsl.w	r3, r2, r3
 80049b6:	69ba      	ldr	r2, [r7, #24]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	69ba      	ldr	r2, [r7, #24]
 80049c0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	005b      	lsls	r3, r3, #1
 80049cc:	2203      	movs	r2, #3
 80049ce:	fa02 f303 	lsl.w	r3, r2, r3
 80049d2:	43db      	mvns	r3, r3
 80049d4:	69ba      	ldr	r2, [r7, #24]
 80049d6:	4013      	ands	r3, r2
 80049d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	689a      	ldr	r2, [r3, #8]
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	005b      	lsls	r3, r3, #1
 80049e2:	fa02 f303 	lsl.w	r3, r2, r3
 80049e6:	69ba      	ldr	r2, [r7, #24]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	69ba      	ldr	r2, [r7, #24]
 80049f0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	d003      	beq.n	8004a02 <HAL_GPIO_Init+0xee>
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	2b12      	cmp	r3, #18
 8004a00:	d123      	bne.n	8004a4a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	08da      	lsrs	r2, r3, #3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	3208      	adds	r2, #8
 8004a0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	f003 0307 	and.w	r3, r3, #7
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	220f      	movs	r2, #15
 8004a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a1e:	43db      	mvns	r3, r3
 8004a20:	69ba      	ldr	r2, [r7, #24]
 8004a22:	4013      	ands	r3, r2
 8004a24:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	691a      	ldr	r2, [r3, #16]
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	f003 0307 	and.w	r3, r3, #7
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	fa02 f303 	lsl.w	r3, r2, r3
 8004a36:	69ba      	ldr	r2, [r7, #24]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004a3c:	69fb      	ldr	r3, [r7, #28]
 8004a3e:	08da      	lsrs	r2, r3, #3
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	3208      	adds	r2, #8
 8004a44:	69b9      	ldr	r1, [r7, #24]
 8004a46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	005b      	lsls	r3, r3, #1
 8004a54:	2203      	movs	r2, #3
 8004a56:	fa02 f303 	lsl.w	r3, r2, r3
 8004a5a:	43db      	mvns	r3, r3
 8004a5c:	69ba      	ldr	r2, [r7, #24]
 8004a5e:	4013      	ands	r3, r2
 8004a60:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	f003 0203 	and.w	r2, r3, #3
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	005b      	lsls	r3, r3, #1
 8004a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a72:	69ba      	ldr	r2, [r7, #24]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	69ba      	ldr	r2, [r7, #24]
 8004a7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	f000 80e0 	beq.w	8004c4c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a8c:	4b2f      	ldr	r3, [pc, #188]	; (8004b4c <HAL_GPIO_Init+0x238>)
 8004a8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004a92:	4a2e      	ldr	r2, [pc, #184]	; (8004b4c <HAL_GPIO_Init+0x238>)
 8004a94:	f043 0302 	orr.w	r3, r3, #2
 8004a98:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004a9c:	4b2b      	ldr	r3, [pc, #172]	; (8004b4c <HAL_GPIO_Init+0x238>)
 8004a9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004aa2:	f003 0302 	and.w	r3, r3, #2
 8004aa6:	60fb      	str	r3, [r7, #12]
 8004aa8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004aaa:	4a29      	ldr	r2, [pc, #164]	; (8004b50 <HAL_GPIO_Init+0x23c>)
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	089b      	lsrs	r3, r3, #2
 8004ab0:	3302      	adds	r3, #2
 8004ab2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	f003 0303 	and.w	r3, r3, #3
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	220f      	movs	r2, #15
 8004ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac6:	43db      	mvns	r3, r3
 8004ac8:	69ba      	ldr	r2, [r7, #24]
 8004aca:	4013      	ands	r3, r2
 8004acc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4a20      	ldr	r2, [pc, #128]	; (8004b54 <HAL_GPIO_Init+0x240>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d052      	beq.n	8004b7c <HAL_GPIO_Init+0x268>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a1f      	ldr	r2, [pc, #124]	; (8004b58 <HAL_GPIO_Init+0x244>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d031      	beq.n	8004b42 <HAL_GPIO_Init+0x22e>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4a1e      	ldr	r2, [pc, #120]	; (8004b5c <HAL_GPIO_Init+0x248>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d02b      	beq.n	8004b3e <HAL_GPIO_Init+0x22a>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a1d      	ldr	r2, [pc, #116]	; (8004b60 <HAL_GPIO_Init+0x24c>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d025      	beq.n	8004b3a <HAL_GPIO_Init+0x226>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a1c      	ldr	r2, [pc, #112]	; (8004b64 <HAL_GPIO_Init+0x250>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d01f      	beq.n	8004b36 <HAL_GPIO_Init+0x222>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a1b      	ldr	r2, [pc, #108]	; (8004b68 <HAL_GPIO_Init+0x254>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d019      	beq.n	8004b32 <HAL_GPIO_Init+0x21e>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a1a      	ldr	r2, [pc, #104]	; (8004b6c <HAL_GPIO_Init+0x258>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d013      	beq.n	8004b2e <HAL_GPIO_Init+0x21a>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a19      	ldr	r2, [pc, #100]	; (8004b70 <HAL_GPIO_Init+0x25c>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d00d      	beq.n	8004b2a <HAL_GPIO_Init+0x216>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a18      	ldr	r2, [pc, #96]	; (8004b74 <HAL_GPIO_Init+0x260>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d007      	beq.n	8004b26 <HAL_GPIO_Init+0x212>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a17      	ldr	r2, [pc, #92]	; (8004b78 <HAL_GPIO_Init+0x264>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d101      	bne.n	8004b22 <HAL_GPIO_Init+0x20e>
 8004b1e:	2309      	movs	r3, #9
 8004b20:	e02d      	b.n	8004b7e <HAL_GPIO_Init+0x26a>
 8004b22:	230a      	movs	r3, #10
 8004b24:	e02b      	b.n	8004b7e <HAL_GPIO_Init+0x26a>
 8004b26:	2308      	movs	r3, #8
 8004b28:	e029      	b.n	8004b7e <HAL_GPIO_Init+0x26a>
 8004b2a:	2307      	movs	r3, #7
 8004b2c:	e027      	b.n	8004b7e <HAL_GPIO_Init+0x26a>
 8004b2e:	2306      	movs	r3, #6
 8004b30:	e025      	b.n	8004b7e <HAL_GPIO_Init+0x26a>
 8004b32:	2305      	movs	r3, #5
 8004b34:	e023      	b.n	8004b7e <HAL_GPIO_Init+0x26a>
 8004b36:	2304      	movs	r3, #4
 8004b38:	e021      	b.n	8004b7e <HAL_GPIO_Init+0x26a>
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e01f      	b.n	8004b7e <HAL_GPIO_Init+0x26a>
 8004b3e:	2302      	movs	r3, #2
 8004b40:	e01d      	b.n	8004b7e <HAL_GPIO_Init+0x26a>
 8004b42:	2301      	movs	r3, #1
 8004b44:	e01b      	b.n	8004b7e <HAL_GPIO_Init+0x26a>
 8004b46:	bf00      	nop
 8004b48:	58000080 	.word	0x58000080
 8004b4c:	58024400 	.word	0x58024400
 8004b50:	58000400 	.word	0x58000400
 8004b54:	58020000 	.word	0x58020000
 8004b58:	58020400 	.word	0x58020400
 8004b5c:	58020800 	.word	0x58020800
 8004b60:	58020c00 	.word	0x58020c00
 8004b64:	58021000 	.word	0x58021000
 8004b68:	58021400 	.word	0x58021400
 8004b6c:	58021800 	.word	0x58021800
 8004b70:	58021c00 	.word	0x58021c00
 8004b74:	58022000 	.word	0x58022000
 8004b78:	58022400 	.word	0x58022400
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	69fa      	ldr	r2, [r7, #28]
 8004b80:	f002 0203 	and.w	r2, r2, #3
 8004b84:	0092      	lsls	r2, r2, #2
 8004b86:	4093      	lsls	r3, r2
 8004b88:	69ba      	ldr	r2, [r7, #24]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b8e:	4938      	ldr	r1, [pc, #224]	; (8004c70 <HAL_GPIO_Init+0x35c>)
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	089b      	lsrs	r3, r3, #2
 8004b94:	3302      	adds	r3, #2
 8004b96:	69ba      	ldr	r2, [r7, #24]
 8004b98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	43db      	mvns	r3, r3
 8004ba6:	69ba      	ldr	r2, [r7, #24]
 8004ba8:	4013      	ands	r3, r2
 8004baa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d003      	beq.n	8004bc0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004bb8:	69ba      	ldr	r2, [r7, #24]
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	69ba      	ldr	r2, [r7, #24]
 8004bc4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	43db      	mvns	r3, r3
 8004bd0:	69ba      	ldr	r2, [r7, #24]
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d003      	beq.n	8004bea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004be2:	69ba      	ldr	r2, [r7, #24]
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	69ba      	ldr	r2, [r7, #24]
 8004bee:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004bf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	43db      	mvns	r3, r3
 8004bfc:	69ba      	ldr	r2, [r7, #24]
 8004bfe:	4013      	ands	r3, r2
 8004c00:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d003      	beq.n	8004c16 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8004c0e:	69ba      	ldr	r2, [r7, #24]
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004c16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004c1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	43db      	mvns	r3, r3
 8004c2a:	69ba      	ldr	r2, [r7, #24]
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d003      	beq.n	8004c44 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8004c3c:	69ba      	ldr	r2, [r7, #24]
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004c44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c48:	69bb      	ldr	r3, [r7, #24]
 8004c4a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	3301      	adds	r3, #1
 8004c50:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	fa22 f303 	lsr.w	r3, r2, r3
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	f47f ae63 	bne.w	8004928 <HAL_GPIO_Init+0x14>
  }
}
 8004c62:	bf00      	nop
 8004c64:	3724      	adds	r7, #36	; 0x24
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr
 8004c6e:	bf00      	nop
 8004c70:	58000400 	.word	0x58000400

08004c74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b085      	sub	sp, #20
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	460b      	mov	r3, r1
 8004c7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	691a      	ldr	r2, [r3, #16]
 8004c84:	887b      	ldrh	r3, [r7, #2]
 8004c86:	4013      	ands	r3, r2
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d002      	beq.n	8004c92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	73fb      	strb	r3, [r7, #15]
 8004c90:	e001      	b.n	8004c96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004c92:	2300      	movs	r3, #0
 8004c94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3714      	adds	r7, #20
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	460b      	mov	r3, r1
 8004cae:	807b      	strh	r3, [r7, #2]
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004cb4:	787b      	ldrb	r3, [r7, #1]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d003      	beq.n	8004cc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004cba:	887a      	ldrh	r2, [r7, #2]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004cc0:	e003      	b.n	8004cca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004cc2:	887b      	ldrh	r3, [r7, #2]
 8004cc4:	041a      	lsls	r2, r3, #16
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	619a      	str	r2, [r3, #24]
}
 8004cca:	bf00      	nop
 8004ccc:	370c      	adds	r7, #12
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr

08004cd6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004cd6:	b480      	push	{r7}
 8004cd8:	b083      	sub	sp, #12
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]
 8004cde:	460b      	mov	r3, r1
 8004ce0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	695a      	ldr	r2, [r3, #20]
 8004ce6:	887b      	ldrh	r3, [r7, #2]
 8004ce8:	401a      	ands	r2, r3
 8004cea:	887b      	ldrh	r3, [r7, #2]
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d104      	bne.n	8004cfa <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004cf0:	887b      	ldrh	r3, [r7, #2]
 8004cf2:	041a      	lsls	r2, r3, #16
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8004cf8:	e002      	b.n	8004d00 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8004cfa:	887a      	ldrh	r2, [r7, #2]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	619a      	str	r2, [r3, #24]
}
 8004d00:	bf00      	nop
 8004d02:	370c      	adds	r7, #12
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr

08004d0c <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b085      	sub	sp, #20
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d14:	4b0d      	ldr	r3, [pc, #52]	; (8004d4c <HAL_I2CEx_EnableFastModePlus+0x40>)
 8004d16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004d1a:	4a0c      	ldr	r2, [pc, #48]	; (8004d4c <HAL_I2CEx_EnableFastModePlus+0x40>)
 8004d1c:	f043 0302 	orr.w	r3, r3, #2
 8004d20:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004d24:	4b09      	ldr	r3, [pc, #36]	; (8004d4c <HAL_I2CEx_EnableFastModePlus+0x40>)
 8004d26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004d2a:	f003 0302 	and.w	r3, r3, #2
 8004d2e:	60fb      	str	r3, [r7, #12]
 8004d30:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 8004d32:	4b07      	ldr	r3, [pc, #28]	; (8004d50 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8004d34:	685a      	ldr	r2, [r3, #4]
 8004d36:	4906      	ldr	r1, [pc, #24]	; (8004d50 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	604b      	str	r3, [r1, #4]
}
 8004d3e:	bf00      	nop
 8004d40:	3714      	adds	r7, #20
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr
 8004d4a:	bf00      	nop
 8004d4c:	58024400 	.word	0x58024400
 8004d50:	58000400 	.word	0x58000400

08004d54 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004d54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d56:	b08f      	sub	sp, #60	; 0x3c
 8004d58:	af0a      	add	r7, sp, #40	; 0x28
 8004d5a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d101      	bne.n	8004d66 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e116      	b.n	8004f94 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d106      	bne.n	8004d86 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f00f f8c7 	bl	8013f14 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2203      	movs	r2, #3
 8004d8a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d102      	bne.n	8004da0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4618      	mov	r0, r3
 8004da6:	f008 f8cc 	bl	800cf42 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	603b      	str	r3, [r7, #0]
 8004db0:	687e      	ldr	r6, [r7, #4]
 8004db2:	466d      	mov	r5, sp
 8004db4:	f106 0410 	add.w	r4, r6, #16
 8004db8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004dba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004dbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004dbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004dc0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004dc4:	e885 0003 	stmia.w	r5, {r0, r1}
 8004dc8:	1d33      	adds	r3, r6, #4
 8004dca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004dcc:	6838      	ldr	r0, [r7, #0]
 8004dce:	f007 ffa3 	bl	800cd18 <USB_CoreInit>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d005      	beq.n	8004de4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2202      	movs	r2, #2
 8004ddc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e0d7      	b.n	8004f94 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2100      	movs	r1, #0
 8004dea:	4618      	mov	r0, r3
 8004dec:	f008 f8ba 	bl	800cf64 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004df0:	2300      	movs	r3, #0
 8004df2:	73fb      	strb	r3, [r7, #15]
 8004df4:	e04a      	b.n	8004e8c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004df6:	7bfa      	ldrb	r2, [r7, #15]
 8004df8:	6879      	ldr	r1, [r7, #4]
 8004dfa:	4613      	mov	r3, r2
 8004dfc:	00db      	lsls	r3, r3, #3
 8004dfe:	1a9b      	subs	r3, r3, r2
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	440b      	add	r3, r1
 8004e04:	333d      	adds	r3, #61	; 0x3d
 8004e06:	2201      	movs	r2, #1
 8004e08:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004e0a:	7bfa      	ldrb	r2, [r7, #15]
 8004e0c:	6879      	ldr	r1, [r7, #4]
 8004e0e:	4613      	mov	r3, r2
 8004e10:	00db      	lsls	r3, r3, #3
 8004e12:	1a9b      	subs	r3, r3, r2
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	440b      	add	r3, r1
 8004e18:	333c      	adds	r3, #60	; 0x3c
 8004e1a:	7bfa      	ldrb	r2, [r7, #15]
 8004e1c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004e1e:	7bfa      	ldrb	r2, [r7, #15]
 8004e20:	7bfb      	ldrb	r3, [r7, #15]
 8004e22:	b298      	uxth	r0, r3
 8004e24:	6879      	ldr	r1, [r7, #4]
 8004e26:	4613      	mov	r3, r2
 8004e28:	00db      	lsls	r3, r3, #3
 8004e2a:	1a9b      	subs	r3, r3, r2
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	440b      	add	r3, r1
 8004e30:	3342      	adds	r3, #66	; 0x42
 8004e32:	4602      	mov	r2, r0
 8004e34:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004e36:	7bfa      	ldrb	r2, [r7, #15]
 8004e38:	6879      	ldr	r1, [r7, #4]
 8004e3a:	4613      	mov	r3, r2
 8004e3c:	00db      	lsls	r3, r3, #3
 8004e3e:	1a9b      	subs	r3, r3, r2
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	440b      	add	r3, r1
 8004e44:	333f      	adds	r3, #63	; 0x3f
 8004e46:	2200      	movs	r2, #0
 8004e48:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004e4a:	7bfa      	ldrb	r2, [r7, #15]
 8004e4c:	6879      	ldr	r1, [r7, #4]
 8004e4e:	4613      	mov	r3, r2
 8004e50:	00db      	lsls	r3, r3, #3
 8004e52:	1a9b      	subs	r3, r3, r2
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	440b      	add	r3, r1
 8004e58:	3344      	adds	r3, #68	; 0x44
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004e5e:	7bfa      	ldrb	r2, [r7, #15]
 8004e60:	6879      	ldr	r1, [r7, #4]
 8004e62:	4613      	mov	r3, r2
 8004e64:	00db      	lsls	r3, r3, #3
 8004e66:	1a9b      	subs	r3, r3, r2
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	440b      	add	r3, r1
 8004e6c:	3348      	adds	r3, #72	; 0x48
 8004e6e:	2200      	movs	r2, #0
 8004e70:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004e72:	7bfa      	ldrb	r2, [r7, #15]
 8004e74:	6879      	ldr	r1, [r7, #4]
 8004e76:	4613      	mov	r3, r2
 8004e78:	00db      	lsls	r3, r3, #3
 8004e7a:	1a9b      	subs	r3, r3, r2
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	440b      	add	r3, r1
 8004e80:	3350      	adds	r3, #80	; 0x50
 8004e82:	2200      	movs	r2, #0
 8004e84:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e86:	7bfb      	ldrb	r3, [r7, #15]
 8004e88:	3301      	adds	r3, #1
 8004e8a:	73fb      	strb	r3, [r7, #15]
 8004e8c:	7bfa      	ldrb	r2, [r7, #15]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d3af      	bcc.n	8004df6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e96:	2300      	movs	r3, #0
 8004e98:	73fb      	strb	r3, [r7, #15]
 8004e9a:	e044      	b.n	8004f26 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004e9c:	7bfa      	ldrb	r2, [r7, #15]
 8004e9e:	6879      	ldr	r1, [r7, #4]
 8004ea0:	4613      	mov	r3, r2
 8004ea2:	00db      	lsls	r3, r3, #3
 8004ea4:	1a9b      	subs	r3, r3, r2
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	440b      	add	r3, r1
 8004eaa:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004eae:	2200      	movs	r2, #0
 8004eb0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004eb2:	7bfa      	ldrb	r2, [r7, #15]
 8004eb4:	6879      	ldr	r1, [r7, #4]
 8004eb6:	4613      	mov	r3, r2
 8004eb8:	00db      	lsls	r3, r3, #3
 8004eba:	1a9b      	subs	r3, r3, r2
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	440b      	add	r3, r1
 8004ec0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004ec4:	7bfa      	ldrb	r2, [r7, #15]
 8004ec6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004ec8:	7bfa      	ldrb	r2, [r7, #15]
 8004eca:	6879      	ldr	r1, [r7, #4]
 8004ecc:	4613      	mov	r3, r2
 8004ece:	00db      	lsls	r3, r3, #3
 8004ed0:	1a9b      	subs	r3, r3, r2
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	440b      	add	r3, r1
 8004ed6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004eda:	2200      	movs	r2, #0
 8004edc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004ede:	7bfa      	ldrb	r2, [r7, #15]
 8004ee0:	6879      	ldr	r1, [r7, #4]
 8004ee2:	4613      	mov	r3, r2
 8004ee4:	00db      	lsls	r3, r3, #3
 8004ee6:	1a9b      	subs	r3, r3, r2
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	440b      	add	r3, r1
 8004eec:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004ef4:	7bfa      	ldrb	r2, [r7, #15]
 8004ef6:	6879      	ldr	r1, [r7, #4]
 8004ef8:	4613      	mov	r3, r2
 8004efa:	00db      	lsls	r3, r3, #3
 8004efc:	1a9b      	subs	r3, r3, r2
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	440b      	add	r3, r1
 8004f02:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004f06:	2200      	movs	r2, #0
 8004f08:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004f0a:	7bfa      	ldrb	r2, [r7, #15]
 8004f0c:	6879      	ldr	r1, [r7, #4]
 8004f0e:	4613      	mov	r3, r2
 8004f10:	00db      	lsls	r3, r3, #3
 8004f12:	1a9b      	subs	r3, r3, r2
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	440b      	add	r3, r1
 8004f18:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f20:	7bfb      	ldrb	r3, [r7, #15]
 8004f22:	3301      	adds	r3, #1
 8004f24:	73fb      	strb	r3, [r7, #15]
 8004f26:	7bfa      	ldrb	r2, [r7, #15]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d3b5      	bcc.n	8004e9c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	603b      	str	r3, [r7, #0]
 8004f36:	687e      	ldr	r6, [r7, #4]
 8004f38:	466d      	mov	r5, sp
 8004f3a:	f106 0410 	add.w	r4, r6, #16
 8004f3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f46:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004f4a:	e885 0003 	stmia.w	r5, {r0, r1}
 8004f4e:	1d33      	adds	r3, r6, #4
 8004f50:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f52:	6838      	ldr	r0, [r7, #0]
 8004f54:	f008 f830 	bl	800cfb8 <USB_DevInit>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d005      	beq.n	8004f6a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2202      	movs	r2, #2
 8004f62:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e014      	b.n	8004f94 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2201      	movs	r2, #1
 8004f76:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d102      	bne.n	8004f88 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f001 f8be 	bl	8006104 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f009 f86f 	bl	800e070 <USB_DevDisconnect>

  return HAL_OK;
 8004f92:	2300      	movs	r3, #0
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3714      	adds	r7, #20
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004f9c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d101      	bne.n	8004fb8 <HAL_PCD_Start+0x1c>
 8004fb4:	2302      	movs	r3, #2
 8004fb6:	e020      	b.n	8004ffa <HAL_PCD_Start+0x5e>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d109      	bne.n	8004fdc <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d005      	beq.n	8004fdc <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f009 f82d 	bl	800e040 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4618      	mov	r0, r3
 8004fec:	f007 ff98 	bl	800cf20 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004ff8:	2300      	movs	r3, #0
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3710      	adds	r7, #16
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}

08005002 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005002:	b590      	push	{r4, r7, lr}
 8005004:	b08d      	sub	sp, #52	; 0x34
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005010:	6a3b      	ldr	r3, [r7, #32]
 8005012:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4618      	mov	r0, r3
 800501a:	f009 f8d4 	bl	800e1c6 <USB_GetMode>
 800501e:	4603      	mov	r3, r0
 8005020:	2b00      	cmp	r3, #0
 8005022:	f040 83ca 	bne.w	80057ba <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4618      	mov	r0, r3
 800502c:	f009 f838 	bl	800e0a0 <USB_ReadInterrupts>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	f000 83c0 	beq.w	80057b8 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4618      	mov	r0, r3
 800503e:	f009 f82f 	bl	800e0a0 <USB_ReadInterrupts>
 8005042:	4603      	mov	r3, r0
 8005044:	f003 0302 	and.w	r3, r3, #2
 8005048:	2b02      	cmp	r3, #2
 800504a:	d107      	bne.n	800505c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	695a      	ldr	r2, [r3, #20]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f002 0202 	and.w	r2, r2, #2
 800505a:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4618      	mov	r0, r3
 8005062:	f009 f81d 	bl	800e0a0 <USB_ReadInterrupts>
 8005066:	4603      	mov	r3, r0
 8005068:	f003 0310 	and.w	r3, r3, #16
 800506c:	2b10      	cmp	r3, #16
 800506e:	d161      	bne.n	8005134 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	699a      	ldr	r2, [r3, #24]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f022 0210 	bic.w	r2, r2, #16
 800507e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8005080:	6a3b      	ldr	r3, [r7, #32]
 8005082:	6a1b      	ldr	r3, [r3, #32]
 8005084:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	f003 020f 	and.w	r2, r3, #15
 800508c:	4613      	mov	r3, r2
 800508e:	00db      	lsls	r3, r3, #3
 8005090:	1a9b      	subs	r3, r3, r2
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005098:	687a      	ldr	r2, [r7, #4]
 800509a:	4413      	add	r3, r2
 800509c:	3304      	adds	r3, #4
 800509e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80050a0:	69bb      	ldr	r3, [r7, #24]
 80050a2:	0c5b      	lsrs	r3, r3, #17
 80050a4:	f003 030f 	and.w	r3, r3, #15
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	d124      	bne.n	80050f6 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80050ac:	69ba      	ldr	r2, [r7, #24]
 80050ae:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80050b2:	4013      	ands	r3, r2
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d035      	beq.n	8005124 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80050bc:	69bb      	ldr	r3, [r7, #24]
 80050be:	091b      	lsrs	r3, r3, #4
 80050c0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80050c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	461a      	mov	r2, r3
 80050ca:	6a38      	ldr	r0, [r7, #32]
 80050cc:	f008 fe95 	bl	800ddfa <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	68da      	ldr	r2, [r3, #12]
 80050d4:	69bb      	ldr	r3, [r7, #24]
 80050d6:	091b      	lsrs	r3, r3, #4
 80050d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80050dc:	441a      	add	r2, r3
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	699a      	ldr	r2, [r3, #24]
 80050e6:	69bb      	ldr	r3, [r7, #24]
 80050e8:	091b      	lsrs	r3, r3, #4
 80050ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80050ee:	441a      	add	r2, r3
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	619a      	str	r2, [r3, #24]
 80050f4:	e016      	b.n	8005124 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	0c5b      	lsrs	r3, r3, #17
 80050fa:	f003 030f 	and.w	r3, r3, #15
 80050fe:	2b06      	cmp	r3, #6
 8005100:	d110      	bne.n	8005124 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005108:	2208      	movs	r2, #8
 800510a:	4619      	mov	r1, r3
 800510c:	6a38      	ldr	r0, [r7, #32]
 800510e:	f008 fe74 	bl	800ddfa <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	699a      	ldr	r2, [r3, #24]
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	091b      	lsrs	r3, r3, #4
 800511a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800511e:	441a      	add	r2, r3
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	699a      	ldr	r2, [r3, #24]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f042 0210 	orr.w	r2, r2, #16
 8005132:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4618      	mov	r0, r3
 800513a:	f008 ffb1 	bl	800e0a0 <USB_ReadInterrupts>
 800513e:	4603      	mov	r3, r0
 8005140:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005144:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005148:	d16e      	bne.n	8005228 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800514a:	2300      	movs	r3, #0
 800514c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4618      	mov	r0, r3
 8005154:	f008 ffb7 	bl	800e0c6 <USB_ReadDevAllOutEpInterrupt>
 8005158:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800515a:	e062      	b.n	8005222 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800515c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800515e:	f003 0301 	and.w	r3, r3, #1
 8005162:	2b00      	cmp	r3, #0
 8005164:	d057      	beq.n	8005216 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800516c:	b2d2      	uxtb	r2, r2
 800516e:	4611      	mov	r1, r2
 8005170:	4618      	mov	r0, r3
 8005172:	f008 ffdc 	bl	800e12e <USB_ReadDevOutEPInterrupt>
 8005176:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	f003 0301 	and.w	r3, r3, #1
 800517e:	2b00      	cmp	r3, #0
 8005180:	d00c      	beq.n	800519c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005184:	015a      	lsls	r2, r3, #5
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	4413      	add	r3, r2
 800518a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800518e:	461a      	mov	r2, r3
 8005190:	2301      	movs	r3, #1
 8005192:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005194:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 fe0a 	bl	8005db0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	f003 0308 	and.w	r3, r3, #8
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00c      	beq.n	80051c0 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80051a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a8:	015a      	lsls	r2, r3, #5
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	4413      	add	r3, r2
 80051ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051b2:	461a      	mov	r2, r3
 80051b4:	2308      	movs	r3, #8
 80051b6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80051b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f000 ff04 	bl	8005fc8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	f003 0310 	and.w	r3, r3, #16
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d008      	beq.n	80051dc <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80051ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051cc:	015a      	lsls	r2, r3, #5
 80051ce:	69fb      	ldr	r3, [r7, #28]
 80051d0:	4413      	add	r3, r2
 80051d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051d6:	461a      	mov	r2, r3
 80051d8:	2310      	movs	r3, #16
 80051da:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	f003 0320 	and.w	r3, r3, #32
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d008      	beq.n	80051f8 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80051e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e8:	015a      	lsls	r2, r3, #5
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	4413      	add	r3, r2
 80051ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051f2:	461a      	mov	r2, r3
 80051f4:	2320      	movs	r3, #32
 80051f6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d009      	beq.n	8005216 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005204:	015a      	lsls	r2, r3, #5
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	4413      	add	r3, r2
 800520a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800520e:	461a      	mov	r2, r3
 8005210:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005214:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005218:	3301      	adds	r3, #1
 800521a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800521c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800521e:	085b      	lsrs	r3, r3, #1
 8005220:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005224:	2b00      	cmp	r3, #0
 8005226:	d199      	bne.n	800515c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4618      	mov	r0, r3
 800522e:	f008 ff37 	bl	800e0a0 <USB_ReadInterrupts>
 8005232:	4603      	mov	r3, r0
 8005234:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005238:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800523c:	f040 80c0 	bne.w	80053c0 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4618      	mov	r0, r3
 8005246:	f008 ff58 	bl	800e0fa <USB_ReadDevAllInEpInterrupt>
 800524a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800524c:	2300      	movs	r3, #0
 800524e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005250:	e0b2      	b.n	80053b8 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005254:	f003 0301 	and.w	r3, r3, #1
 8005258:	2b00      	cmp	r3, #0
 800525a:	f000 80a7 	beq.w	80053ac <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005264:	b2d2      	uxtb	r2, r2
 8005266:	4611      	mov	r1, r2
 8005268:	4618      	mov	r0, r3
 800526a:	f008 ff7e 	bl	800e16a <USB_ReadDevInEPInterrupt>
 800526e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	f003 0301 	and.w	r3, r3, #1
 8005276:	2b00      	cmp	r3, #0
 8005278:	d057      	beq.n	800532a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800527a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527c:	f003 030f 	and.w	r3, r3, #15
 8005280:	2201      	movs	r2, #1
 8005282:	fa02 f303 	lsl.w	r3, r2, r3
 8005286:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800528e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	43db      	mvns	r3, r3
 8005294:	69f9      	ldr	r1, [r7, #28]
 8005296:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800529a:	4013      	ands	r3, r2
 800529c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800529e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a0:	015a      	lsls	r2, r3, #5
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	4413      	add	r3, r2
 80052a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052aa:	461a      	mov	r2, r3
 80052ac:	2301      	movs	r3, #1
 80052ae:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	691b      	ldr	r3, [r3, #16]
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d132      	bne.n	800531e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80052b8:	6879      	ldr	r1, [r7, #4]
 80052ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052bc:	4613      	mov	r3, r2
 80052be:	00db      	lsls	r3, r3, #3
 80052c0:	1a9b      	subs	r3, r3, r2
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	440b      	add	r3, r1
 80052c6:	3348      	adds	r3, #72	; 0x48
 80052c8:	6819      	ldr	r1, [r3, #0]
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052ce:	4613      	mov	r3, r2
 80052d0:	00db      	lsls	r3, r3, #3
 80052d2:	1a9b      	subs	r3, r3, r2
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	4403      	add	r3, r0
 80052d8:	3344      	adds	r3, #68	; 0x44
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4419      	add	r1, r3
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052e2:	4613      	mov	r3, r2
 80052e4:	00db      	lsls	r3, r3, #3
 80052e6:	1a9b      	subs	r3, r3, r2
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	4403      	add	r3, r0
 80052ec:	3348      	adds	r3, #72	; 0x48
 80052ee:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80052f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d113      	bne.n	800531e <HAL_PCD_IRQHandler+0x31c>
 80052f6:	6879      	ldr	r1, [r7, #4]
 80052f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052fa:	4613      	mov	r3, r2
 80052fc:	00db      	lsls	r3, r3, #3
 80052fe:	1a9b      	subs	r3, r3, r2
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	440b      	add	r3, r1
 8005304:	3350      	adds	r3, #80	; 0x50
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d108      	bne.n	800531e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6818      	ldr	r0, [r3, #0]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005316:	461a      	mov	r2, r3
 8005318:	2101      	movs	r1, #1
 800531a:	f008 ff87 	bl	800e22c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800531e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005320:	b2db      	uxtb	r3, r3
 8005322:	4619      	mov	r1, r3
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f00e fe74 	bl	8014012 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	f003 0308 	and.w	r3, r3, #8
 8005330:	2b00      	cmp	r3, #0
 8005332:	d008      	beq.n	8005346 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005336:	015a      	lsls	r2, r3, #5
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	4413      	add	r3, r2
 800533c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005340:	461a      	mov	r2, r3
 8005342:	2308      	movs	r3, #8
 8005344:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	f003 0310 	and.w	r3, r3, #16
 800534c:	2b00      	cmp	r3, #0
 800534e:	d008      	beq.n	8005362 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005352:	015a      	lsls	r2, r3, #5
 8005354:	69fb      	ldr	r3, [r7, #28]
 8005356:	4413      	add	r3, r2
 8005358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800535c:	461a      	mov	r2, r3
 800535e:	2310      	movs	r3, #16
 8005360:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005368:	2b00      	cmp	r3, #0
 800536a:	d008      	beq.n	800537e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800536c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536e:	015a      	lsls	r2, r3, #5
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	4413      	add	r3, r2
 8005374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005378:	461a      	mov	r2, r3
 800537a:	2340      	movs	r3, #64	; 0x40
 800537c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	f003 0302 	and.w	r3, r3, #2
 8005384:	2b00      	cmp	r3, #0
 8005386:	d008      	beq.n	800539a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538a:	015a      	lsls	r2, r3, #5
 800538c:	69fb      	ldr	r3, [r7, #28]
 800538e:	4413      	add	r3, r2
 8005390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005394:	461a      	mov	r2, r3
 8005396:	2302      	movs	r3, #2
 8005398:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d003      	beq.n	80053ac <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80053a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 fc75 	bl	8005c96 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80053ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ae:	3301      	adds	r3, #1
 80053b0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80053b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b4:	085b      	lsrs	r3, r3, #1
 80053b6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80053b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	f47f af49 	bne.w	8005252 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4618      	mov	r0, r3
 80053c6:	f008 fe6b 	bl	800e0a0 <USB_ReadInterrupts>
 80053ca:	4603      	mov	r3, r0
 80053cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053d4:	d122      	bne.n	800541c <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	69fa      	ldr	r2, [r7, #28]
 80053e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053e4:	f023 0301 	bic.w	r3, r3, #1
 80053e8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d108      	bne.n	8005406 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80053fc:	2100      	movs	r1, #0
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f000 fea4 	bl	800614c <HAL_PCDEx_LPM_Callback>
 8005404:	e002      	b.n	800540c <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f00e fe7a 	bl	8014100 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	695a      	ldr	r2, [r3, #20]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800541a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4618      	mov	r0, r3
 8005422:	f008 fe3d 	bl	800e0a0 <USB_ReadInterrupts>
 8005426:	4603      	mov	r3, r0
 8005428:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800542c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005430:	d112      	bne.n	8005458 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	f003 0301 	and.w	r3, r3, #1
 800543e:	2b01      	cmp	r3, #1
 8005440:	d102      	bne.n	8005448 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f00e fe36 	bl	80140b4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	695a      	ldr	r2, [r3, #20]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005456:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4618      	mov	r0, r3
 800545e:	f008 fe1f 	bl	800e0a0 <USB_ReadInterrupts>
 8005462:	4603      	mov	r3, r0
 8005464:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005468:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800546c:	d121      	bne.n	80054b2 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	695a      	ldr	r2, [r3, #20]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800547c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005484:	2b00      	cmp	r3, #0
 8005486:	d111      	bne.n	80054ac <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005496:	089b      	lsrs	r3, r3, #2
 8005498:	f003 020f 	and.w	r2, r3, #15
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80054a2:	2101      	movs	r1, #1
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f000 fe51 	bl	800614c <HAL_PCDEx_LPM_Callback>
 80054aa:	e002      	b.n	80054b2 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f00e fe01 	bl	80140b4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4618      	mov	r0, r3
 80054b8:	f008 fdf2 	bl	800e0a0 <USB_ReadInterrupts>
 80054bc:	4603      	mov	r3, r0
 80054be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054c6:	f040 80c7 	bne.w	8005658 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	69fa      	ldr	r2, [r7, #28]
 80054d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054d8:	f023 0301 	bic.w	r3, r3, #1
 80054dc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2110      	movs	r1, #16
 80054e4:	4618      	mov	r0, r3
 80054e6:	f007 fec5 	bl	800d274 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80054ea:	2300      	movs	r3, #0
 80054ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054ee:	e056      	b.n	800559e <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80054f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054f2:	015a      	lsls	r2, r3, #5
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	4413      	add	r3, r2
 80054f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054fc:	461a      	mov	r2, r3
 80054fe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005502:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005506:	015a      	lsls	r2, r3, #5
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	4413      	add	r3, r2
 800550c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005514:	0151      	lsls	r1, r2, #5
 8005516:	69fa      	ldr	r2, [r7, #28]
 8005518:	440a      	add	r2, r1
 800551a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800551e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005522:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005526:	015a      	lsls	r2, r3, #5
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	4413      	add	r3, r2
 800552c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005534:	0151      	lsls	r1, r2, #5
 8005536:	69fa      	ldr	r2, [r7, #28]
 8005538:	440a      	add	r2, r1
 800553a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800553e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005542:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005546:	015a      	lsls	r2, r3, #5
 8005548:	69fb      	ldr	r3, [r7, #28]
 800554a:	4413      	add	r3, r2
 800554c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005550:	461a      	mov	r2, r3
 8005552:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005556:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800555a:	015a      	lsls	r2, r3, #5
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	4413      	add	r3, r2
 8005560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005568:	0151      	lsls	r1, r2, #5
 800556a:	69fa      	ldr	r2, [r7, #28]
 800556c:	440a      	add	r2, r1
 800556e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005572:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005576:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800557a:	015a      	lsls	r2, r3, #5
 800557c:	69fb      	ldr	r3, [r7, #28]
 800557e:	4413      	add	r3, r2
 8005580:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005588:	0151      	lsls	r1, r2, #5
 800558a:	69fa      	ldr	r2, [r7, #28]
 800558c:	440a      	add	r2, r1
 800558e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005592:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005596:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800559a:	3301      	adds	r3, #1
 800559c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d3a3      	bcc.n	80054f0 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ae:	69db      	ldr	r3, [r3, #28]
 80055b0:	69fa      	ldr	r2, [r7, #28]
 80055b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055b6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80055ba:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d016      	beq.n	80055f2 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80055c4:	69fb      	ldr	r3, [r7, #28]
 80055c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055ce:	69fa      	ldr	r2, [r7, #28]
 80055d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055d4:	f043 030b 	orr.w	r3, r3, #11
 80055d8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055e4:	69fa      	ldr	r2, [r7, #28]
 80055e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055ea:	f043 030b 	orr.w	r3, r3, #11
 80055ee:	6453      	str	r3, [r2, #68]	; 0x44
 80055f0:	e015      	b.n	800561e <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80055f2:	69fb      	ldr	r3, [r7, #28]
 80055f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055f8:	695a      	ldr	r2, [r3, #20]
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005600:	4619      	mov	r1, r3
 8005602:	f242 032b 	movw	r3, #8235	; 0x202b
 8005606:	4313      	orrs	r3, r2
 8005608:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800560a:	69fb      	ldr	r3, [r7, #28]
 800560c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	69fa      	ldr	r2, [r7, #28]
 8005614:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005618:	f043 030b 	orr.w	r3, r3, #11
 800561c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800561e:	69fb      	ldr	r3, [r7, #28]
 8005620:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	69fa      	ldr	r2, [r7, #28]
 8005628:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800562c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005630:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6818      	ldr	r0, [r3, #0]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	691b      	ldr	r3, [r3, #16]
 800563a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005642:	461a      	mov	r2, r3
 8005644:	f008 fdf2 	bl	800e22c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	695a      	ldr	r2, [r3, #20]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005656:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4618      	mov	r0, r3
 800565e:	f008 fd1f 	bl	800e0a0 <USB_ReadInterrupts>
 8005662:	4603      	mov	r3, r0
 8005664:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005668:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800566c:	d124      	bne.n	80056b8 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4618      	mov	r0, r3
 8005674:	f008 fdb6 	bl	800e1e4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4618      	mov	r0, r3
 800567e:	f007 fe5a 	bl	800d336 <USB_GetDevSpeed>
 8005682:	4603      	mov	r3, r0
 8005684:	461a      	mov	r2, r3
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681c      	ldr	r4, [r3, #0]
 800568e:	f001 fcfb 	bl	8007088 <HAL_RCC_GetHCLKFreq>
 8005692:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005698:	b2db      	uxtb	r3, r3
 800569a:	461a      	mov	r2, r3
 800569c:	4620      	mov	r0, r4
 800569e:	f007 fb9d 	bl	800cddc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f00e fcdd 	bl	8014062 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	695a      	ldr	r2, [r3, #20]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80056b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4618      	mov	r0, r3
 80056be:	f008 fcef 	bl	800e0a0 <USB_ReadInterrupts>
 80056c2:	4603      	mov	r3, r0
 80056c4:	f003 0308 	and.w	r3, r3, #8
 80056c8:	2b08      	cmp	r3, #8
 80056ca:	d10a      	bne.n	80056e2 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f00e fcba 	bl	8014046 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	695a      	ldr	r2, [r3, #20]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f002 0208 	and.w	r2, r2, #8
 80056e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4618      	mov	r0, r3
 80056e8:	f008 fcda 	bl	800e0a0 <USB_ReadInterrupts>
 80056ec:	4603      	mov	r3, r0
 80056ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056f6:	d10f      	bne.n	8005718 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80056f8:	2300      	movs	r3, #0
 80056fa:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80056fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	4619      	mov	r1, r3
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f00e fd1c 	bl	8014140 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	695a      	ldr	r2, [r3, #20]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005716:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4618      	mov	r0, r3
 800571e:	f008 fcbf 	bl	800e0a0 <USB_ReadInterrupts>
 8005722:	4603      	mov	r3, r0
 8005724:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005728:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800572c:	d10f      	bne.n	800574e <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800572e:	2300      	movs	r3, #0
 8005730:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005734:	b2db      	uxtb	r3, r3
 8005736:	4619      	mov	r1, r3
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f00e fcef 	bl	801411c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	695a      	ldr	r2, [r3, #20]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800574c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4618      	mov	r0, r3
 8005754:	f008 fca4 	bl	800e0a0 <USB_ReadInterrupts>
 8005758:	4603      	mov	r3, r0
 800575a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800575e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005762:	d10a      	bne.n	800577a <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f00e fcfd 	bl	8014164 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	695a      	ldr	r2, [r3, #20]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005778:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4618      	mov	r0, r3
 8005780:	f008 fc8e 	bl	800e0a0 <USB_ReadInterrupts>
 8005784:	4603      	mov	r3, r0
 8005786:	f003 0304 	and.w	r3, r3, #4
 800578a:	2b04      	cmp	r3, #4
 800578c:	d115      	bne.n	80057ba <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	f003 0304 	and.w	r3, r3, #4
 800579c:	2b00      	cmp	r3, #0
 800579e:	d002      	beq.n	80057a6 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f00e fced 	bl	8014180 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	6859      	ldr	r1, [r3, #4]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	69ba      	ldr	r2, [r7, #24]
 80057b2:	430a      	orrs	r2, r1
 80057b4:	605a      	str	r2, [r3, #4]
 80057b6:	e000      	b.n	80057ba <HAL_PCD_IRQHandler+0x7b8>
      return;
 80057b8:	bf00      	nop
    }
  }
}
 80057ba:	3734      	adds	r7, #52	; 0x34
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd90      	pop	{r4, r7, pc}

080057c0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b082      	sub	sp, #8
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	460b      	mov	r3, r1
 80057ca:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d101      	bne.n	80057da <HAL_PCD_SetAddress+0x1a>
 80057d6:	2302      	movs	r3, #2
 80057d8:	e013      	b.n	8005802 <HAL_PCD_SetAddress+0x42>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2201      	movs	r2, #1
 80057de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	78fa      	ldrb	r2, [r7, #3]
 80057e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	78fa      	ldrb	r2, [r7, #3]
 80057f0:	4611      	mov	r1, r2
 80057f2:	4618      	mov	r0, r3
 80057f4:	f008 fbfe 	bl	800dff4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005800:	2300      	movs	r3, #0
}
 8005802:	4618      	mov	r0, r3
 8005804:	3708      	adds	r7, #8
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}

0800580a <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800580a:	b580      	push	{r7, lr}
 800580c:	b084      	sub	sp, #16
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
 8005812:	4608      	mov	r0, r1
 8005814:	4611      	mov	r1, r2
 8005816:	461a      	mov	r2, r3
 8005818:	4603      	mov	r3, r0
 800581a:	70fb      	strb	r3, [r7, #3]
 800581c:	460b      	mov	r3, r1
 800581e:	803b      	strh	r3, [r7, #0]
 8005820:	4613      	mov	r3, r2
 8005822:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005824:	2300      	movs	r3, #0
 8005826:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005828:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800582c:	2b00      	cmp	r3, #0
 800582e:	da0f      	bge.n	8005850 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005830:	78fb      	ldrb	r3, [r7, #3]
 8005832:	f003 020f 	and.w	r2, r3, #15
 8005836:	4613      	mov	r3, r2
 8005838:	00db      	lsls	r3, r3, #3
 800583a:	1a9b      	subs	r3, r3, r2
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	3338      	adds	r3, #56	; 0x38
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	4413      	add	r3, r2
 8005844:	3304      	adds	r3, #4
 8005846:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2201      	movs	r2, #1
 800584c:	705a      	strb	r2, [r3, #1]
 800584e:	e00f      	b.n	8005870 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005850:	78fb      	ldrb	r3, [r7, #3]
 8005852:	f003 020f 	and.w	r2, r3, #15
 8005856:	4613      	mov	r3, r2
 8005858:	00db      	lsls	r3, r3, #3
 800585a:	1a9b      	subs	r3, r3, r2
 800585c:	009b      	lsls	r3, r3, #2
 800585e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	4413      	add	r3, r2
 8005866:	3304      	adds	r3, #4
 8005868:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2200      	movs	r2, #0
 800586e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005870:	78fb      	ldrb	r3, [r7, #3]
 8005872:	f003 030f 	and.w	r3, r3, #15
 8005876:	b2da      	uxtb	r2, r3
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800587c:	883a      	ldrh	r2, [r7, #0]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	78ba      	ldrb	r2, [r7, #2]
 8005886:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	785b      	ldrb	r3, [r3, #1]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d004      	beq.n	800589a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	b29a      	uxth	r2, r3
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800589a:	78bb      	ldrb	r3, [r7, #2]
 800589c:	2b02      	cmp	r3, #2
 800589e:	d102      	bne.n	80058a6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2200      	movs	r2, #0
 80058a4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d101      	bne.n	80058b4 <HAL_PCD_EP_Open+0xaa>
 80058b0:	2302      	movs	r3, #2
 80058b2:	e00e      	b.n	80058d2 <HAL_PCD_EP_Open+0xc8>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	68f9      	ldr	r1, [r7, #12]
 80058c2:	4618      	mov	r0, r3
 80058c4:	f007 fd5c 	bl	800d380 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80058d0:	7afb      	ldrb	r3, [r7, #11]
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3710      	adds	r7, #16
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}

080058da <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80058da:	b580      	push	{r7, lr}
 80058dc:	b084      	sub	sp, #16
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6078      	str	r0, [r7, #4]
 80058e2:	460b      	mov	r3, r1
 80058e4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80058e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	da0f      	bge.n	800590e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80058ee:	78fb      	ldrb	r3, [r7, #3]
 80058f0:	f003 020f 	and.w	r2, r3, #15
 80058f4:	4613      	mov	r3, r2
 80058f6:	00db      	lsls	r3, r3, #3
 80058f8:	1a9b      	subs	r3, r3, r2
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	3338      	adds	r3, #56	; 0x38
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	4413      	add	r3, r2
 8005902:	3304      	adds	r3, #4
 8005904:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2201      	movs	r2, #1
 800590a:	705a      	strb	r2, [r3, #1]
 800590c:	e00f      	b.n	800592e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800590e:	78fb      	ldrb	r3, [r7, #3]
 8005910:	f003 020f 	and.w	r2, r3, #15
 8005914:	4613      	mov	r3, r2
 8005916:	00db      	lsls	r3, r3, #3
 8005918:	1a9b      	subs	r3, r3, r2
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005920:	687a      	ldr	r2, [r7, #4]
 8005922:	4413      	add	r3, r2
 8005924:	3304      	adds	r3, #4
 8005926:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2200      	movs	r2, #0
 800592c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800592e:	78fb      	ldrb	r3, [r7, #3]
 8005930:	f003 030f 	and.w	r3, r3, #15
 8005934:	b2da      	uxtb	r2, r3
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005940:	2b01      	cmp	r3, #1
 8005942:	d101      	bne.n	8005948 <HAL_PCD_EP_Close+0x6e>
 8005944:	2302      	movs	r3, #2
 8005946:	e00e      	b.n	8005966 <HAL_PCD_EP_Close+0x8c>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	68f9      	ldr	r1, [r7, #12]
 8005956:	4618      	mov	r0, r3
 8005958:	f007 fd9a 	bl	800d490 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005964:	2300      	movs	r3, #0
}
 8005966:	4618      	mov	r0, r3
 8005968:	3710      	adds	r7, #16
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}

0800596e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800596e:	b580      	push	{r7, lr}
 8005970:	b086      	sub	sp, #24
 8005972:	af00      	add	r7, sp, #0
 8005974:	60f8      	str	r0, [r7, #12]
 8005976:	607a      	str	r2, [r7, #4]
 8005978:	603b      	str	r3, [r7, #0]
 800597a:	460b      	mov	r3, r1
 800597c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800597e:	7afb      	ldrb	r3, [r7, #11]
 8005980:	f003 020f 	and.w	r2, r3, #15
 8005984:	4613      	mov	r3, r2
 8005986:	00db      	lsls	r3, r3, #3
 8005988:	1a9b      	subs	r3, r3, r2
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	4413      	add	r3, r2
 8005994:	3304      	adds	r3, #4
 8005996:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	683a      	ldr	r2, [r7, #0]
 80059a2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	2200      	movs	r2, #0
 80059a8:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	2200      	movs	r2, #0
 80059ae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80059b0:	7afb      	ldrb	r3, [r7, #11]
 80059b2:	f003 030f 	and.w	r3, r3, #15
 80059b6:	b2da      	uxtb	r2, r3
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	691b      	ldr	r3, [r3, #16]
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d102      	bne.n	80059ca <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80059ca:	7afb      	ldrb	r3, [r7, #11]
 80059cc:	f003 030f 	and.w	r3, r3, #15
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d109      	bne.n	80059e8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	6818      	ldr	r0, [r3, #0]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	691b      	ldr	r3, [r3, #16]
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	461a      	mov	r2, r3
 80059e0:	6979      	ldr	r1, [r7, #20]
 80059e2:	f008 f87d 	bl	800dae0 <USB_EP0StartXfer>
 80059e6:	e008      	b.n	80059fa <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6818      	ldr	r0, [r3, #0]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	691b      	ldr	r3, [r3, #16]
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	461a      	mov	r2, r3
 80059f4:	6979      	ldr	r1, [r7, #20]
 80059f6:	f007 fe27 	bl	800d648 <USB_EPStartXfer>
  }

  return HAL_OK;
 80059fa:	2300      	movs	r3, #0
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3718      	adds	r7, #24
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b083      	sub	sp, #12
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	460b      	mov	r3, r1
 8005a0e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005a10:	78fb      	ldrb	r3, [r7, #3]
 8005a12:	f003 020f 	and.w	r2, r3, #15
 8005a16:	6879      	ldr	r1, [r7, #4]
 8005a18:	4613      	mov	r3, r2
 8005a1a:	00db      	lsls	r3, r3, #3
 8005a1c:	1a9b      	subs	r3, r3, r2
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	440b      	add	r3, r1
 8005a22:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005a26:	681b      	ldr	r3, [r3, #0]
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b086      	sub	sp, #24
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	60f8      	str	r0, [r7, #12]
 8005a3c:	607a      	str	r2, [r7, #4]
 8005a3e:	603b      	str	r3, [r7, #0]
 8005a40:	460b      	mov	r3, r1
 8005a42:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a44:	7afb      	ldrb	r3, [r7, #11]
 8005a46:	f003 020f 	and.w	r2, r3, #15
 8005a4a:	4613      	mov	r3, r2
 8005a4c:	00db      	lsls	r3, r3, #3
 8005a4e:	1a9b      	subs	r3, r3, r2
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	3338      	adds	r3, #56	; 0x38
 8005a54:	68fa      	ldr	r2, [r7, #12]
 8005a56:	4413      	add	r3, r2
 8005a58:	3304      	adds	r3, #4
 8005a5a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	683a      	ldr	r2, [r7, #0]
 8005a66:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	2201      	movs	r2, #1
 8005a72:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a74:	7afb      	ldrb	r3, [r7, #11]
 8005a76:	f003 030f 	and.w	r3, r3, #15
 8005a7a:	b2da      	uxtb	r2, r3
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	691b      	ldr	r3, [r3, #16]
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d102      	bne.n	8005a8e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005a8e:	7afb      	ldrb	r3, [r7, #11]
 8005a90:	f003 030f 	and.w	r3, r3, #15
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d109      	bne.n	8005aac <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	6818      	ldr	r0, [r3, #0]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	691b      	ldr	r3, [r3, #16]
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	6979      	ldr	r1, [r7, #20]
 8005aa6:	f008 f81b 	bl	800dae0 <USB_EP0StartXfer>
 8005aaa:	e008      	b.n	8005abe <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	6818      	ldr	r0, [r3, #0]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	691b      	ldr	r3, [r3, #16]
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	6979      	ldr	r1, [r7, #20]
 8005aba:	f007 fdc5 	bl	800d648 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005abe:	2300      	movs	r3, #0
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3718      	adds	r7, #24
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b084      	sub	sp, #16
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	460b      	mov	r3, r1
 8005ad2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005ad4:	78fb      	ldrb	r3, [r7, #3]
 8005ad6:	f003 020f 	and.w	r2, r3, #15
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d901      	bls.n	8005ae6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e050      	b.n	8005b88 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005ae6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	da0f      	bge.n	8005b0e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005aee:	78fb      	ldrb	r3, [r7, #3]
 8005af0:	f003 020f 	and.w	r2, r3, #15
 8005af4:	4613      	mov	r3, r2
 8005af6:	00db      	lsls	r3, r3, #3
 8005af8:	1a9b      	subs	r3, r3, r2
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	3338      	adds	r3, #56	; 0x38
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	4413      	add	r3, r2
 8005b02:	3304      	adds	r3, #4
 8005b04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2201      	movs	r2, #1
 8005b0a:	705a      	strb	r2, [r3, #1]
 8005b0c:	e00d      	b.n	8005b2a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005b0e:	78fa      	ldrb	r2, [r7, #3]
 8005b10:	4613      	mov	r3, r2
 8005b12:	00db      	lsls	r3, r3, #3
 8005b14:	1a9b      	subs	r3, r3, r2
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005b1c:	687a      	ldr	r2, [r7, #4]
 8005b1e:	4413      	add	r3, r2
 8005b20:	3304      	adds	r3, #4
 8005b22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2200      	movs	r2, #0
 8005b28:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b30:	78fb      	ldrb	r3, [r7, #3]
 8005b32:	f003 030f 	and.w	r3, r3, #15
 8005b36:	b2da      	uxtb	r2, r3
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d101      	bne.n	8005b4a <HAL_PCD_EP_SetStall+0x82>
 8005b46:	2302      	movs	r3, #2
 8005b48:	e01e      	b.n	8005b88 <HAL_PCD_EP_SetStall+0xc0>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	68f9      	ldr	r1, [r7, #12]
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f008 f977 	bl	800de4c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005b5e:	78fb      	ldrb	r3, [r7, #3]
 8005b60:	f003 030f 	and.w	r3, r3, #15
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d10a      	bne.n	8005b7e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6818      	ldr	r0, [r3, #0]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	691b      	ldr	r3, [r3, #16]
 8005b70:	b2d9      	uxtb	r1, r3
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005b78:	461a      	mov	r2, r3
 8005b7a:	f008 fb57 	bl	800e22c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2200      	movs	r2, #0
 8005b82:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005b86:	2300      	movs	r3, #0
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3710      	adds	r7, #16
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b084      	sub	sp, #16
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	460b      	mov	r3, r1
 8005b9a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005b9c:	78fb      	ldrb	r3, [r7, #3]
 8005b9e:	f003 020f 	and.w	r2, r3, #15
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d901      	bls.n	8005bae <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	e042      	b.n	8005c34 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005bae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	da0f      	bge.n	8005bd6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005bb6:	78fb      	ldrb	r3, [r7, #3]
 8005bb8:	f003 020f 	and.w	r2, r3, #15
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	00db      	lsls	r3, r3, #3
 8005bc0:	1a9b      	subs	r3, r3, r2
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	3338      	adds	r3, #56	; 0x38
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	4413      	add	r3, r2
 8005bca:	3304      	adds	r3, #4
 8005bcc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	705a      	strb	r2, [r3, #1]
 8005bd4:	e00f      	b.n	8005bf6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005bd6:	78fb      	ldrb	r3, [r7, #3]
 8005bd8:	f003 020f 	and.w	r2, r3, #15
 8005bdc:	4613      	mov	r3, r2
 8005bde:	00db      	lsls	r3, r3, #3
 8005be0:	1a9b      	subs	r3, r3, r2
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005be8:	687a      	ldr	r2, [r7, #4]
 8005bea:	4413      	add	r3, r2
 8005bec:	3304      	adds	r3, #4
 8005bee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005bfc:	78fb      	ldrb	r3, [r7, #3]
 8005bfe:	f003 030f 	and.w	r3, r3, #15
 8005c02:	b2da      	uxtb	r2, r3
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d101      	bne.n	8005c16 <HAL_PCD_EP_ClrStall+0x86>
 8005c12:	2302      	movs	r3, #2
 8005c14:	e00e      	b.n	8005c34 <HAL_PCD_EP_ClrStall+0xa4>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2201      	movs	r2, #1
 8005c1a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	68f9      	ldr	r1, [r7, #12]
 8005c24:	4618      	mov	r0, r3
 8005c26:	f008 f97f 	bl	800df28 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005c32:	2300      	movs	r3, #0
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3710      	adds	r7, #16
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}

08005c3c <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b082      	sub	sp, #8
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	460b      	mov	r3, r1
 8005c46:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d101      	bne.n	8005c56 <HAL_PCD_EP_Flush+0x1a>
 8005c52:	2302      	movs	r3, #2
 8005c54:	e01b      	b.n	8005c8e <HAL_PCD_EP_Flush+0x52>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2201      	movs	r2, #1
 8005c5a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 8005c5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	da09      	bge.n	8005c7a <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681a      	ldr	r2, [r3, #0]
 8005c6a:	78fb      	ldrb	r3, [r7, #3]
 8005c6c:	f003 030f 	and.w	r3, r3, #15
 8005c70:	4619      	mov	r1, r3
 8005c72:	4610      	mov	r0, r2
 8005c74:	f007 fafe 	bl	800d274 <USB_FlushTxFifo>
 8005c78:	e004      	b.n	8005c84 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f007 fb1e 	bl	800d2c0 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3708      	adds	r7, #8
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}

08005c96 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005c96:	b580      	push	{r7, lr}
 8005c98:	b08a      	sub	sp, #40	; 0x28
 8005c9a:	af02      	add	r7, sp, #8
 8005c9c:	6078      	str	r0, [r7, #4]
 8005c9e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005caa:	683a      	ldr	r2, [r7, #0]
 8005cac:	4613      	mov	r3, r2
 8005cae:	00db      	lsls	r3, r3, #3
 8005cb0:	1a9b      	subs	r3, r3, r2
 8005cb2:	009b      	lsls	r3, r3, #2
 8005cb4:	3338      	adds	r3, #56	; 0x38
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	4413      	add	r3, r2
 8005cba:	3304      	adds	r3, #4
 8005cbc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	699a      	ldr	r2, [r3, #24]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	695b      	ldr	r3, [r3, #20]
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d901      	bls.n	8005cce <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e06c      	b.n	8005da8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	695a      	ldr	r2, [r3, #20]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	699b      	ldr	r3, [r3, #24]
 8005cd6:	1ad3      	subs	r3, r2, r3
 8005cd8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	69fa      	ldr	r2, [r7, #28]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d902      	bls.n	8005cea <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005cea:	69fb      	ldr	r3, [r7, #28]
 8005cec:	3303      	adds	r3, #3
 8005cee:	089b      	lsrs	r3, r3, #2
 8005cf0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005cf2:	e02b      	b.n	8005d4c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	695a      	ldr	r2, [r3, #20]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	699b      	ldr	r3, [r3, #24]
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	69fa      	ldr	r2, [r7, #28]
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d902      	bls.n	8005d10 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005d10:	69fb      	ldr	r3, [r7, #28]
 8005d12:	3303      	adds	r3, #3
 8005d14:	089b      	lsrs	r3, r3, #2
 8005d16:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	68d9      	ldr	r1, [r3, #12]
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	b2da      	uxtb	r2, r3
 8005d20:	69fb      	ldr	r3, [r7, #28]
 8005d22:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	9300      	str	r3, [sp, #0]
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	6978      	ldr	r0, [r7, #20]
 8005d30:	f008 f82e 	bl	800dd90 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	68da      	ldr	r2, [r3, #12]
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	441a      	add	r2, r3
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	699a      	ldr	r2, [r3, #24]
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	441a      	add	r2, r3
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	015a      	lsls	r2, r3, #5
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	4413      	add	r3, r2
 8005d54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d58:	699b      	ldr	r3, [r3, #24]
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	69ba      	ldr	r2, [r7, #24]
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d809      	bhi.n	8005d76 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	699a      	ldr	r2, [r3, #24]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d203      	bcs.n	8005d76 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	695b      	ldr	r3, [r3, #20]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d1be      	bne.n	8005cf4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	695a      	ldr	r2, [r3, #20]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	699b      	ldr	r3, [r3, #24]
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d811      	bhi.n	8005da6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	f003 030f 	and.w	r3, r3, #15
 8005d88:	2201      	movs	r2, #1
 8005d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d8e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	43db      	mvns	r3, r3
 8005d9c:	6939      	ldr	r1, [r7, #16]
 8005d9e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005da2:	4013      	ands	r3, r2
 8005da4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005da6:	2300      	movs	r3, #0
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3720      	adds	r7, #32
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}

08005db0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b086      	sub	sp, #24
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	333c      	adds	r3, #60	; 0x3c
 8005dc8:	3304      	adds	r3, #4
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	015a      	lsls	r2, r3, #5
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	4413      	add	r3, r2
 8005dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	691b      	ldr	r3, [r3, #16]
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	f040 80a0 	bne.w	8005f28 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	f003 0308 	and.w	r3, r3, #8
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d015      	beq.n	8005e1e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	4a72      	ldr	r2, [pc, #456]	; (8005fc0 <PCD_EP_OutXfrComplete_int+0x210>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	f240 80dd 	bls.w	8005fb6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	f000 80d7 	beq.w	8005fb6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	015a      	lsls	r2, r3, #5
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	4413      	add	r3, r2
 8005e10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e14:	461a      	mov	r2, r3
 8005e16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e1a:	6093      	str	r3, [r2, #8]
 8005e1c:	e0cb      	b.n	8005fb6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	f003 0320 	and.w	r3, r3, #32
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d009      	beq.n	8005e3c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	015a      	lsls	r2, r3, #5
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	4413      	add	r3, r2
 8005e30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e34:	461a      	mov	r2, r3
 8005e36:	2320      	movs	r3, #32
 8005e38:	6093      	str	r3, [r2, #8]
 8005e3a:	e0bc      	b.n	8005fb6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	f040 80b7 	bne.w	8005fb6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	4a5d      	ldr	r2, [pc, #372]	; (8005fc0 <PCD_EP_OutXfrComplete_int+0x210>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d90f      	bls.n	8005e70 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d00a      	beq.n	8005e70 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	015a      	lsls	r2, r3, #5
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	4413      	add	r3, r2
 8005e62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e66:	461a      	mov	r2, r3
 8005e68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e6c:	6093      	str	r3, [r2, #8]
 8005e6e:	e0a2      	b.n	8005fb6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8005e70:	6879      	ldr	r1, [r7, #4]
 8005e72:	683a      	ldr	r2, [r7, #0]
 8005e74:	4613      	mov	r3, r2
 8005e76:	00db      	lsls	r3, r3, #3
 8005e78:	1a9b      	subs	r3, r3, r2
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	440b      	add	r3, r1
 8005e7e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005e82:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	0159      	lsls	r1, r3, #5
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	440b      	add	r3, r1
 8005e8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e90:	691b      	ldr	r3, [r3, #16]
 8005e92:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8005e96:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	683a      	ldr	r2, [r7, #0]
 8005e9c:	4613      	mov	r3, r2
 8005e9e:	00db      	lsls	r3, r3, #3
 8005ea0:	1a9b      	subs	r3, r3, r2
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	4403      	add	r3, r0
 8005ea6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005eaa:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8005eac:	6879      	ldr	r1, [r7, #4]
 8005eae:	683a      	ldr	r2, [r7, #0]
 8005eb0:	4613      	mov	r3, r2
 8005eb2:	00db      	lsls	r3, r3, #3
 8005eb4:	1a9b      	subs	r3, r3, r2
 8005eb6:	009b      	lsls	r3, r3, #2
 8005eb8:	440b      	add	r3, r1
 8005eba:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005ebe:	6819      	ldr	r1, [r3, #0]
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	683a      	ldr	r2, [r7, #0]
 8005ec4:	4613      	mov	r3, r2
 8005ec6:	00db      	lsls	r3, r3, #3
 8005ec8:	1a9b      	subs	r3, r3, r2
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	4403      	add	r3, r0
 8005ece:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4419      	add	r1, r3
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	683a      	ldr	r2, [r7, #0]
 8005eda:	4613      	mov	r3, r2
 8005edc:	00db      	lsls	r3, r3, #3
 8005ede:	1a9b      	subs	r3, r3, r2
 8005ee0:	009b      	lsls	r3, r3, #2
 8005ee2:	4403      	add	r3, r0
 8005ee4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005ee8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d114      	bne.n	8005f1a <PCD_EP_OutXfrComplete_int+0x16a>
 8005ef0:	6879      	ldr	r1, [r7, #4]
 8005ef2:	683a      	ldr	r2, [r7, #0]
 8005ef4:	4613      	mov	r3, r2
 8005ef6:	00db      	lsls	r3, r3, #3
 8005ef8:	1a9b      	subs	r3, r3, r2
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	440b      	add	r3, r1
 8005efe:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d108      	bne.n	8005f1a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6818      	ldr	r0, [r3, #0]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005f12:	461a      	mov	r2, r3
 8005f14:	2101      	movs	r1, #1
 8005f16:	f008 f989 	bl	800e22c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	4619      	mov	r1, r3
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f00e f85b 	bl	8013fdc <HAL_PCD_DataOutStageCallback>
 8005f26:	e046      	b.n	8005fb6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	4a26      	ldr	r2, [pc, #152]	; (8005fc4 <PCD_EP_OutXfrComplete_int+0x214>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d124      	bne.n	8005f7a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d00a      	beq.n	8005f50 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	015a      	lsls	r2, r3, #5
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	4413      	add	r3, r2
 8005f42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f46:	461a      	mov	r2, r3
 8005f48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f4c:	6093      	str	r3, [r2, #8]
 8005f4e:	e032      	b.n	8005fb6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	f003 0320 	and.w	r3, r3, #32
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d008      	beq.n	8005f6c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	015a      	lsls	r2, r3, #5
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	4413      	add	r3, r2
 8005f62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f66:	461a      	mov	r2, r3
 8005f68:	2320      	movs	r3, #32
 8005f6a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	4619      	mov	r1, r3
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f00e f832 	bl	8013fdc <HAL_PCD_DataOutStageCallback>
 8005f78:	e01d      	b.n	8005fb6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d114      	bne.n	8005faa <PCD_EP_OutXfrComplete_int+0x1fa>
 8005f80:	6879      	ldr	r1, [r7, #4]
 8005f82:	683a      	ldr	r2, [r7, #0]
 8005f84:	4613      	mov	r3, r2
 8005f86:	00db      	lsls	r3, r3, #3
 8005f88:	1a9b      	subs	r3, r3, r2
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	440b      	add	r3, r1
 8005f8e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d108      	bne.n	8005faa <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6818      	ldr	r0, [r3, #0]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	2100      	movs	r1, #0
 8005fa6:	f008 f941 	bl	800e22c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	4619      	mov	r1, r3
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f00e f813 	bl	8013fdc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005fb6:	2300      	movs	r3, #0
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3718      	adds	r7, #24
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}
 8005fc0:	4f54300a 	.word	0x4f54300a
 8005fc4:	4f54310a 	.word	0x4f54310a

08005fc8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b086      	sub	sp, #24
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	333c      	adds	r3, #60	; 0x3c
 8005fe0:	3304      	adds	r3, #4
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	015a      	lsls	r2, r3, #5
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	4413      	add	r3, r2
 8005fee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	4a15      	ldr	r2, [pc, #84]	; (8006050 <PCD_EP_OutSetupPacket_int+0x88>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d90e      	bls.n	800601c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006004:	2b00      	cmp	r3, #0
 8006006:	d009      	beq.n	800601c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	015a      	lsls	r2, r3, #5
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	4413      	add	r3, r2
 8006010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006014:	461a      	mov	r2, r3
 8006016:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800601a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f00d ffcb 	bl	8013fb8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	4a0a      	ldr	r2, [pc, #40]	; (8006050 <PCD_EP_OutSetupPacket_int+0x88>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d90c      	bls.n	8006044 <PCD_EP_OutSetupPacket_int+0x7c>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	691b      	ldr	r3, [r3, #16]
 800602e:	2b01      	cmp	r3, #1
 8006030:	d108      	bne.n	8006044 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6818      	ldr	r0, [r3, #0]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800603c:	461a      	mov	r2, r3
 800603e:	2101      	movs	r1, #1
 8006040:	f008 f8f4 	bl	800e22c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006044:	2300      	movs	r3, #0
}
 8006046:	4618      	mov	r0, r3
 8006048:	3718      	adds	r7, #24
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}
 800604e:	bf00      	nop
 8006050:	4f54300a 	.word	0x4f54300a

08006054 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006054:	b480      	push	{r7}
 8006056:	b085      	sub	sp, #20
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	460b      	mov	r3, r1
 800605e:	70fb      	strb	r3, [r7, #3]
 8006060:	4613      	mov	r3, r2
 8006062:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800606c:	78fb      	ldrb	r3, [r7, #3]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d107      	bne.n	8006082 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006072:	883b      	ldrh	r3, [r7, #0]
 8006074:	0419      	lsls	r1, r3, #16
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	68ba      	ldr	r2, [r7, #8]
 800607c:	430a      	orrs	r2, r1
 800607e:	629a      	str	r2, [r3, #40]	; 0x28
 8006080:	e028      	b.n	80060d4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006088:	0c1b      	lsrs	r3, r3, #16
 800608a:	68ba      	ldr	r2, [r7, #8]
 800608c:	4413      	add	r3, r2
 800608e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006090:	2300      	movs	r3, #0
 8006092:	73fb      	strb	r3, [r7, #15]
 8006094:	e00d      	b.n	80060b2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	7bfb      	ldrb	r3, [r7, #15]
 800609c:	3340      	adds	r3, #64	; 0x40
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	4413      	add	r3, r2
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	0c1b      	lsrs	r3, r3, #16
 80060a6:	68ba      	ldr	r2, [r7, #8]
 80060a8:	4413      	add	r3, r2
 80060aa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80060ac:	7bfb      	ldrb	r3, [r7, #15]
 80060ae:	3301      	adds	r3, #1
 80060b0:	73fb      	strb	r3, [r7, #15]
 80060b2:	7bfa      	ldrb	r2, [r7, #15]
 80060b4:	78fb      	ldrb	r3, [r7, #3]
 80060b6:	3b01      	subs	r3, #1
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d3ec      	bcc.n	8006096 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80060bc:	883b      	ldrh	r3, [r7, #0]
 80060be:	0418      	lsls	r0, r3, #16
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6819      	ldr	r1, [r3, #0]
 80060c4:	78fb      	ldrb	r3, [r7, #3]
 80060c6:	3b01      	subs	r3, #1
 80060c8:	68ba      	ldr	r2, [r7, #8]
 80060ca:	4302      	orrs	r2, r0
 80060cc:	3340      	adds	r3, #64	; 0x40
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	440b      	add	r3, r1
 80060d2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80060d4:	2300      	movs	r3, #0
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3714      	adds	r7, #20
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr

080060e2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80060e2:	b480      	push	{r7}
 80060e4:	b083      	sub	sp, #12
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	6078      	str	r0, [r7, #4]
 80060ea:	460b      	mov	r3, r1
 80060ec:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	887a      	ldrh	r2, [r7, #2]
 80060f4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80060f6:	2300      	movs	r3, #0
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	370c      	adds	r7, #12
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr

08006104 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006104:	b480      	push	{r7}
 8006106:	b085      	sub	sp, #20
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2201      	movs	r2, #1
 8006116:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	699b      	ldr	r3, [r3, #24]
 8006126:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006132:	4b05      	ldr	r3, [pc, #20]	; (8006148 <HAL_PCDEx_ActivateLPM+0x44>)
 8006134:	4313      	orrs	r3, r2
 8006136:	68fa      	ldr	r2, [r7, #12]
 8006138:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800613a:	2300      	movs	r3, #0
}
 800613c:	4618      	mov	r0, r3
 800613e:	3714      	adds	r7, #20
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr
 8006148:	10000003 	.word	0x10000003

0800614c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800614c:	b480      	push	{r7}
 800614e:	b083      	sub	sp, #12
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	460b      	mov	r3, r1
 8006156:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006158:	bf00      	nop
 800615a:	370c      	adds	r7, #12
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr

08006164 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b084      	sub	sp, #16
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800616c:	4b19      	ldr	r3, [pc, #100]	; (80061d4 <HAL_PWREx_ConfigSupply+0x70>)
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	f003 0304 	and.w	r3, r3, #4
 8006174:	2b04      	cmp	r3, #4
 8006176:	d00a      	beq.n	800618e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006178:	4b16      	ldr	r3, [pc, #88]	; (80061d4 <HAL_PWREx_ConfigSupply+0x70>)
 800617a:	68db      	ldr	r3, [r3, #12]
 800617c:	f003 0307 	and.w	r3, r3, #7
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	429a      	cmp	r2, r3
 8006184:	d001      	beq.n	800618a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006186:	2301      	movs	r3, #1
 8006188:	e01f      	b.n	80061ca <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800618a:	2300      	movs	r3, #0
 800618c:	e01d      	b.n	80061ca <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800618e:	4b11      	ldr	r3, [pc, #68]	; (80061d4 <HAL_PWREx_ConfigSupply+0x70>)
 8006190:	68db      	ldr	r3, [r3, #12]
 8006192:	f023 0207 	bic.w	r2, r3, #7
 8006196:	490f      	ldr	r1, [pc, #60]	; (80061d4 <HAL_PWREx_ConfigSupply+0x70>)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	4313      	orrs	r3, r2
 800619c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800619e:	f7fb fc71 	bl	8001a84 <HAL_GetTick>
 80061a2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80061a4:	e009      	b.n	80061ba <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80061a6:	f7fb fc6d 	bl	8001a84 <HAL_GetTick>
 80061aa:	4602      	mov	r2, r0
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	1ad3      	subs	r3, r2, r3
 80061b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80061b4:	d901      	bls.n	80061ba <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e007      	b.n	80061ca <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80061ba:	4b06      	ldr	r3, [pc, #24]	; (80061d4 <HAL_PWREx_ConfigSupply+0x70>)
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80061c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061c6:	d1ee      	bne.n	80061a6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80061c8:	2300      	movs	r3, #0
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3710      	adds	r7, #16
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
 80061d2:	bf00      	nop
 80061d4:	58024800 	.word	0x58024800

080061d8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80061d8:	b480      	push	{r7}
 80061da:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80061dc:	4b05      	ldr	r3, [pc, #20]	; (80061f4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80061de:	68db      	ldr	r3, [r3, #12]
 80061e0:	4a04      	ldr	r2, [pc, #16]	; (80061f4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80061e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80061e6:	60d3      	str	r3, [r2, #12]
}
 80061e8:	bf00      	nop
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr
 80061f2:	bf00      	nop
 80061f4:	58024800 	.word	0x58024800

080061f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b08c      	sub	sp, #48	; 0x30
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d101      	bne.n	800620a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	e3ff      	b.n	8006a0a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f003 0301 	and.w	r3, r3, #1
 8006212:	2b00      	cmp	r3, #0
 8006214:	f000 8087 	beq.w	8006326 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006218:	4b99      	ldr	r3, [pc, #612]	; (8006480 <HAL_RCC_OscConfig+0x288>)
 800621a:	691b      	ldr	r3, [r3, #16]
 800621c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006220:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006222:	4b97      	ldr	r3, [pc, #604]	; (8006480 <HAL_RCC_OscConfig+0x288>)
 8006224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006226:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800622a:	2b10      	cmp	r3, #16
 800622c:	d007      	beq.n	800623e <HAL_RCC_OscConfig+0x46>
 800622e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006230:	2b18      	cmp	r3, #24
 8006232:	d110      	bne.n	8006256 <HAL_RCC_OscConfig+0x5e>
 8006234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006236:	f003 0303 	and.w	r3, r3, #3
 800623a:	2b02      	cmp	r3, #2
 800623c:	d10b      	bne.n	8006256 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800623e:	4b90      	ldr	r3, [pc, #576]	; (8006480 <HAL_RCC_OscConfig+0x288>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006246:	2b00      	cmp	r3, #0
 8006248:	d06c      	beq.n	8006324 <HAL_RCC_OscConfig+0x12c>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d168      	bne.n	8006324 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e3d9      	b.n	8006a0a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800625e:	d106      	bne.n	800626e <HAL_RCC_OscConfig+0x76>
 8006260:	4b87      	ldr	r3, [pc, #540]	; (8006480 <HAL_RCC_OscConfig+0x288>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a86      	ldr	r2, [pc, #536]	; (8006480 <HAL_RCC_OscConfig+0x288>)
 8006266:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800626a:	6013      	str	r3, [r2, #0]
 800626c:	e02e      	b.n	80062cc <HAL_RCC_OscConfig+0xd4>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d10c      	bne.n	8006290 <HAL_RCC_OscConfig+0x98>
 8006276:	4b82      	ldr	r3, [pc, #520]	; (8006480 <HAL_RCC_OscConfig+0x288>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a81      	ldr	r2, [pc, #516]	; (8006480 <HAL_RCC_OscConfig+0x288>)
 800627c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006280:	6013      	str	r3, [r2, #0]
 8006282:	4b7f      	ldr	r3, [pc, #508]	; (8006480 <HAL_RCC_OscConfig+0x288>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a7e      	ldr	r2, [pc, #504]	; (8006480 <HAL_RCC_OscConfig+0x288>)
 8006288:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800628c:	6013      	str	r3, [r2, #0]
 800628e:	e01d      	b.n	80062cc <HAL_RCC_OscConfig+0xd4>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006298:	d10c      	bne.n	80062b4 <HAL_RCC_OscConfig+0xbc>
 800629a:	4b79      	ldr	r3, [pc, #484]	; (8006480 <HAL_RCC_OscConfig+0x288>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a78      	ldr	r2, [pc, #480]	; (8006480 <HAL_RCC_OscConfig+0x288>)
 80062a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80062a4:	6013      	str	r3, [r2, #0]
 80062a6:	4b76      	ldr	r3, [pc, #472]	; (8006480 <HAL_RCC_OscConfig+0x288>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a75      	ldr	r2, [pc, #468]	; (8006480 <HAL_RCC_OscConfig+0x288>)
 80062ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062b0:	6013      	str	r3, [r2, #0]
 80062b2:	e00b      	b.n	80062cc <HAL_RCC_OscConfig+0xd4>
 80062b4:	4b72      	ldr	r3, [pc, #456]	; (8006480 <HAL_RCC_OscConfig+0x288>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a71      	ldr	r2, [pc, #452]	; (8006480 <HAL_RCC_OscConfig+0x288>)
 80062ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062be:	6013      	str	r3, [r2, #0]
 80062c0:	4b6f      	ldr	r3, [pc, #444]	; (8006480 <HAL_RCC_OscConfig+0x288>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a6e      	ldr	r2, [pc, #440]	; (8006480 <HAL_RCC_OscConfig+0x288>)
 80062c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80062ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d013      	beq.n	80062fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062d4:	f7fb fbd6 	bl	8001a84 <HAL_GetTick>
 80062d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80062da:	e008      	b.n	80062ee <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062dc:	f7fb fbd2 	bl	8001a84 <HAL_GetTick>
 80062e0:	4602      	mov	r2, r0
 80062e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e4:	1ad3      	subs	r3, r2, r3
 80062e6:	2b64      	cmp	r3, #100	; 0x64
 80062e8:	d901      	bls.n	80062ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80062ea:	2303      	movs	r3, #3
 80062ec:	e38d      	b.n	8006a0a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80062ee:	4b64      	ldr	r3, [pc, #400]	; (8006480 <HAL_RCC_OscConfig+0x288>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d0f0      	beq.n	80062dc <HAL_RCC_OscConfig+0xe4>
 80062fa:	e014      	b.n	8006326 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062fc:	f7fb fbc2 	bl	8001a84 <HAL_GetTick>
 8006300:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006302:	e008      	b.n	8006316 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006304:	f7fb fbbe 	bl	8001a84 <HAL_GetTick>
 8006308:	4602      	mov	r2, r0
 800630a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630c:	1ad3      	subs	r3, r2, r3
 800630e:	2b64      	cmp	r3, #100	; 0x64
 8006310:	d901      	bls.n	8006316 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006312:	2303      	movs	r3, #3
 8006314:	e379      	b.n	8006a0a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006316:	4b5a      	ldr	r3, [pc, #360]	; (8006480 <HAL_RCC_OscConfig+0x288>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800631e:	2b00      	cmp	r3, #0
 8006320:	d1f0      	bne.n	8006304 <HAL_RCC_OscConfig+0x10c>
 8006322:	e000      	b.n	8006326 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006324:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f003 0302 	and.w	r3, r3, #2
 800632e:	2b00      	cmp	r3, #0
 8006330:	f000 80ae 	beq.w	8006490 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006334:	4b52      	ldr	r3, [pc, #328]	; (8006480 <HAL_RCC_OscConfig+0x288>)
 8006336:	691b      	ldr	r3, [r3, #16]
 8006338:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800633c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800633e:	4b50      	ldr	r3, [pc, #320]	; (8006480 <HAL_RCC_OscConfig+0x288>)
 8006340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006342:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006344:	6a3b      	ldr	r3, [r7, #32]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d007      	beq.n	800635a <HAL_RCC_OscConfig+0x162>
 800634a:	6a3b      	ldr	r3, [r7, #32]
 800634c:	2b18      	cmp	r3, #24
 800634e:	d13a      	bne.n	80063c6 <HAL_RCC_OscConfig+0x1ce>
 8006350:	69fb      	ldr	r3, [r7, #28]
 8006352:	f003 0303 	and.w	r3, r3, #3
 8006356:	2b00      	cmp	r3, #0
 8006358:	d135      	bne.n	80063c6 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800635a:	4b49      	ldr	r3, [pc, #292]	; (8006480 <HAL_RCC_OscConfig+0x288>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f003 0304 	and.w	r3, r3, #4
 8006362:	2b00      	cmp	r3, #0
 8006364:	d005      	beq.n	8006372 <HAL_RCC_OscConfig+0x17a>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d101      	bne.n	8006372 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	e34b      	b.n	8006a0a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006372:	f7fb fbb5 	bl	8001ae0 <HAL_GetREVID>
 8006376:	4602      	mov	r2, r0
 8006378:	f241 0303 	movw	r3, #4099	; 0x1003
 800637c:	429a      	cmp	r2, r3
 800637e:	d817      	bhi.n	80063b0 <HAL_RCC_OscConfig+0x1b8>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	691b      	ldr	r3, [r3, #16]
 8006384:	2b40      	cmp	r3, #64	; 0x40
 8006386:	d108      	bne.n	800639a <HAL_RCC_OscConfig+0x1a2>
 8006388:	4b3d      	ldr	r3, [pc, #244]	; (8006480 <HAL_RCC_OscConfig+0x288>)
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006390:	4a3b      	ldr	r2, [pc, #236]	; (8006480 <HAL_RCC_OscConfig+0x288>)
 8006392:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006396:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006398:	e07a      	b.n	8006490 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800639a:	4b39      	ldr	r3, [pc, #228]	; (8006480 <HAL_RCC_OscConfig+0x288>)
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	691b      	ldr	r3, [r3, #16]
 80063a6:	031b      	lsls	r3, r3, #12
 80063a8:	4935      	ldr	r1, [pc, #212]	; (8006480 <HAL_RCC_OscConfig+0x288>)
 80063aa:	4313      	orrs	r3, r2
 80063ac:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80063ae:	e06f      	b.n	8006490 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063b0:	4b33      	ldr	r3, [pc, #204]	; (8006480 <HAL_RCC_OscConfig+0x288>)
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	691b      	ldr	r3, [r3, #16]
 80063bc:	061b      	lsls	r3, r3, #24
 80063be:	4930      	ldr	r1, [pc, #192]	; (8006480 <HAL_RCC_OscConfig+0x288>)
 80063c0:	4313      	orrs	r3, r2
 80063c2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80063c4:	e064      	b.n	8006490 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d045      	beq.n	800645a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80063ce:	4b2c      	ldr	r3, [pc, #176]	; (8006480 <HAL_RCC_OscConfig+0x288>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f023 0219 	bic.w	r2, r3, #25
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	68db      	ldr	r3, [r3, #12]
 80063da:	4929      	ldr	r1, [pc, #164]	; (8006480 <HAL_RCC_OscConfig+0x288>)
 80063dc:	4313      	orrs	r3, r2
 80063de:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063e0:	f7fb fb50 	bl	8001a84 <HAL_GetTick>
 80063e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80063e6:	e008      	b.n	80063fa <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80063e8:	f7fb fb4c 	bl	8001a84 <HAL_GetTick>
 80063ec:	4602      	mov	r2, r0
 80063ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f0:	1ad3      	subs	r3, r2, r3
 80063f2:	2b02      	cmp	r3, #2
 80063f4:	d901      	bls.n	80063fa <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80063f6:	2303      	movs	r3, #3
 80063f8:	e307      	b.n	8006a0a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80063fa:	4b21      	ldr	r3, [pc, #132]	; (8006480 <HAL_RCC_OscConfig+0x288>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f003 0304 	and.w	r3, r3, #4
 8006402:	2b00      	cmp	r3, #0
 8006404:	d0f0      	beq.n	80063e8 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006406:	f7fb fb6b 	bl	8001ae0 <HAL_GetREVID>
 800640a:	4602      	mov	r2, r0
 800640c:	f241 0303 	movw	r3, #4099	; 0x1003
 8006410:	429a      	cmp	r2, r3
 8006412:	d817      	bhi.n	8006444 <HAL_RCC_OscConfig+0x24c>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	691b      	ldr	r3, [r3, #16]
 8006418:	2b40      	cmp	r3, #64	; 0x40
 800641a:	d108      	bne.n	800642e <HAL_RCC_OscConfig+0x236>
 800641c:	4b18      	ldr	r3, [pc, #96]	; (8006480 <HAL_RCC_OscConfig+0x288>)
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006424:	4a16      	ldr	r2, [pc, #88]	; (8006480 <HAL_RCC_OscConfig+0x288>)
 8006426:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800642a:	6053      	str	r3, [r2, #4]
 800642c:	e030      	b.n	8006490 <HAL_RCC_OscConfig+0x298>
 800642e:	4b14      	ldr	r3, [pc, #80]	; (8006480 <HAL_RCC_OscConfig+0x288>)
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	691b      	ldr	r3, [r3, #16]
 800643a:	031b      	lsls	r3, r3, #12
 800643c:	4910      	ldr	r1, [pc, #64]	; (8006480 <HAL_RCC_OscConfig+0x288>)
 800643e:	4313      	orrs	r3, r2
 8006440:	604b      	str	r3, [r1, #4]
 8006442:	e025      	b.n	8006490 <HAL_RCC_OscConfig+0x298>
 8006444:	4b0e      	ldr	r3, [pc, #56]	; (8006480 <HAL_RCC_OscConfig+0x288>)
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	691b      	ldr	r3, [r3, #16]
 8006450:	061b      	lsls	r3, r3, #24
 8006452:	490b      	ldr	r1, [pc, #44]	; (8006480 <HAL_RCC_OscConfig+0x288>)
 8006454:	4313      	orrs	r3, r2
 8006456:	604b      	str	r3, [r1, #4]
 8006458:	e01a      	b.n	8006490 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800645a:	4b09      	ldr	r3, [pc, #36]	; (8006480 <HAL_RCC_OscConfig+0x288>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a08      	ldr	r2, [pc, #32]	; (8006480 <HAL_RCC_OscConfig+0x288>)
 8006460:	f023 0301 	bic.w	r3, r3, #1
 8006464:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006466:	f7fb fb0d 	bl	8001a84 <HAL_GetTick>
 800646a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800646c:	e00a      	b.n	8006484 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800646e:	f7fb fb09 	bl	8001a84 <HAL_GetTick>
 8006472:	4602      	mov	r2, r0
 8006474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006476:	1ad3      	subs	r3, r2, r3
 8006478:	2b02      	cmp	r3, #2
 800647a:	d903      	bls.n	8006484 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 800647c:	2303      	movs	r3, #3
 800647e:	e2c4      	b.n	8006a0a <HAL_RCC_OscConfig+0x812>
 8006480:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006484:	4ba4      	ldr	r3, [pc, #656]	; (8006718 <HAL_RCC_OscConfig+0x520>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f003 0304 	and.w	r3, r3, #4
 800648c:	2b00      	cmp	r3, #0
 800648e:	d1ee      	bne.n	800646e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f003 0310 	and.w	r3, r3, #16
 8006498:	2b00      	cmp	r3, #0
 800649a:	f000 80a9 	beq.w	80065f0 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800649e:	4b9e      	ldr	r3, [pc, #632]	; (8006718 <HAL_RCC_OscConfig+0x520>)
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80064a6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80064a8:	4b9b      	ldr	r3, [pc, #620]	; (8006718 <HAL_RCC_OscConfig+0x520>)
 80064aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ac:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80064ae:	69bb      	ldr	r3, [r7, #24]
 80064b0:	2b08      	cmp	r3, #8
 80064b2:	d007      	beq.n	80064c4 <HAL_RCC_OscConfig+0x2cc>
 80064b4:	69bb      	ldr	r3, [r7, #24]
 80064b6:	2b18      	cmp	r3, #24
 80064b8:	d13a      	bne.n	8006530 <HAL_RCC_OscConfig+0x338>
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	f003 0303 	and.w	r3, r3, #3
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d135      	bne.n	8006530 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80064c4:	4b94      	ldr	r3, [pc, #592]	; (8006718 <HAL_RCC_OscConfig+0x520>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d005      	beq.n	80064dc <HAL_RCC_OscConfig+0x2e4>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	69db      	ldr	r3, [r3, #28]
 80064d4:	2b80      	cmp	r3, #128	; 0x80
 80064d6:	d001      	beq.n	80064dc <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	e296      	b.n	8006a0a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80064dc:	f7fb fb00 	bl	8001ae0 <HAL_GetREVID>
 80064e0:	4602      	mov	r2, r0
 80064e2:	f241 0303 	movw	r3, #4099	; 0x1003
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d817      	bhi.n	800651a <HAL_RCC_OscConfig+0x322>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6a1b      	ldr	r3, [r3, #32]
 80064ee:	2b20      	cmp	r3, #32
 80064f0:	d108      	bne.n	8006504 <HAL_RCC_OscConfig+0x30c>
 80064f2:	4b89      	ldr	r3, [pc, #548]	; (8006718 <HAL_RCC_OscConfig+0x520>)
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80064fa:	4a87      	ldr	r2, [pc, #540]	; (8006718 <HAL_RCC_OscConfig+0x520>)
 80064fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006500:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006502:	e075      	b.n	80065f0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006504:	4b84      	ldr	r3, [pc, #528]	; (8006718 <HAL_RCC_OscConfig+0x520>)
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6a1b      	ldr	r3, [r3, #32]
 8006510:	069b      	lsls	r3, r3, #26
 8006512:	4981      	ldr	r1, [pc, #516]	; (8006718 <HAL_RCC_OscConfig+0x520>)
 8006514:	4313      	orrs	r3, r2
 8006516:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006518:	e06a      	b.n	80065f0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800651a:	4b7f      	ldr	r3, [pc, #508]	; (8006718 <HAL_RCC_OscConfig+0x520>)
 800651c:	68db      	ldr	r3, [r3, #12]
 800651e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6a1b      	ldr	r3, [r3, #32]
 8006526:	061b      	lsls	r3, r3, #24
 8006528:	497b      	ldr	r1, [pc, #492]	; (8006718 <HAL_RCC_OscConfig+0x520>)
 800652a:	4313      	orrs	r3, r2
 800652c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800652e:	e05f      	b.n	80065f0 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	69db      	ldr	r3, [r3, #28]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d042      	beq.n	80065be <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006538:	4b77      	ldr	r3, [pc, #476]	; (8006718 <HAL_RCC_OscConfig+0x520>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a76      	ldr	r2, [pc, #472]	; (8006718 <HAL_RCC_OscConfig+0x520>)
 800653e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006542:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006544:	f7fb fa9e 	bl	8001a84 <HAL_GetTick>
 8006548:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800654a:	e008      	b.n	800655e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800654c:	f7fb fa9a 	bl	8001a84 <HAL_GetTick>
 8006550:	4602      	mov	r2, r0
 8006552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006554:	1ad3      	subs	r3, r2, r3
 8006556:	2b02      	cmp	r3, #2
 8006558:	d901      	bls.n	800655e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800655a:	2303      	movs	r3, #3
 800655c:	e255      	b.n	8006a0a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800655e:	4b6e      	ldr	r3, [pc, #440]	; (8006718 <HAL_RCC_OscConfig+0x520>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006566:	2b00      	cmp	r3, #0
 8006568:	d0f0      	beq.n	800654c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800656a:	f7fb fab9 	bl	8001ae0 <HAL_GetREVID>
 800656e:	4602      	mov	r2, r0
 8006570:	f241 0303 	movw	r3, #4099	; 0x1003
 8006574:	429a      	cmp	r2, r3
 8006576:	d817      	bhi.n	80065a8 <HAL_RCC_OscConfig+0x3b0>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6a1b      	ldr	r3, [r3, #32]
 800657c:	2b20      	cmp	r3, #32
 800657e:	d108      	bne.n	8006592 <HAL_RCC_OscConfig+0x39a>
 8006580:	4b65      	ldr	r3, [pc, #404]	; (8006718 <HAL_RCC_OscConfig+0x520>)
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006588:	4a63      	ldr	r2, [pc, #396]	; (8006718 <HAL_RCC_OscConfig+0x520>)
 800658a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800658e:	6053      	str	r3, [r2, #4]
 8006590:	e02e      	b.n	80065f0 <HAL_RCC_OscConfig+0x3f8>
 8006592:	4b61      	ldr	r3, [pc, #388]	; (8006718 <HAL_RCC_OscConfig+0x520>)
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6a1b      	ldr	r3, [r3, #32]
 800659e:	069b      	lsls	r3, r3, #26
 80065a0:	495d      	ldr	r1, [pc, #372]	; (8006718 <HAL_RCC_OscConfig+0x520>)
 80065a2:	4313      	orrs	r3, r2
 80065a4:	604b      	str	r3, [r1, #4]
 80065a6:	e023      	b.n	80065f0 <HAL_RCC_OscConfig+0x3f8>
 80065a8:	4b5b      	ldr	r3, [pc, #364]	; (8006718 <HAL_RCC_OscConfig+0x520>)
 80065aa:	68db      	ldr	r3, [r3, #12]
 80065ac:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6a1b      	ldr	r3, [r3, #32]
 80065b4:	061b      	lsls	r3, r3, #24
 80065b6:	4958      	ldr	r1, [pc, #352]	; (8006718 <HAL_RCC_OscConfig+0x520>)
 80065b8:	4313      	orrs	r3, r2
 80065ba:	60cb      	str	r3, [r1, #12]
 80065bc:	e018      	b.n	80065f0 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80065be:	4b56      	ldr	r3, [pc, #344]	; (8006718 <HAL_RCC_OscConfig+0x520>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a55      	ldr	r2, [pc, #340]	; (8006718 <HAL_RCC_OscConfig+0x520>)
 80065c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065ca:	f7fb fa5b 	bl	8001a84 <HAL_GetTick>
 80065ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80065d0:	e008      	b.n	80065e4 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80065d2:	f7fb fa57 	bl	8001a84 <HAL_GetTick>
 80065d6:	4602      	mov	r2, r0
 80065d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065da:	1ad3      	subs	r3, r2, r3
 80065dc:	2b02      	cmp	r3, #2
 80065de:	d901      	bls.n	80065e4 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80065e0:	2303      	movs	r3, #3
 80065e2:	e212      	b.n	8006a0a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80065e4:	4b4c      	ldr	r3, [pc, #304]	; (8006718 <HAL_RCC_OscConfig+0x520>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d1f0      	bne.n	80065d2 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f003 0308 	and.w	r3, r3, #8
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d036      	beq.n	800666a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	695b      	ldr	r3, [r3, #20]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d019      	beq.n	8006638 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006604:	4b44      	ldr	r3, [pc, #272]	; (8006718 <HAL_RCC_OscConfig+0x520>)
 8006606:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006608:	4a43      	ldr	r2, [pc, #268]	; (8006718 <HAL_RCC_OscConfig+0x520>)
 800660a:	f043 0301 	orr.w	r3, r3, #1
 800660e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006610:	f7fb fa38 	bl	8001a84 <HAL_GetTick>
 8006614:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006616:	e008      	b.n	800662a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006618:	f7fb fa34 	bl	8001a84 <HAL_GetTick>
 800661c:	4602      	mov	r2, r0
 800661e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006620:	1ad3      	subs	r3, r2, r3
 8006622:	2b02      	cmp	r3, #2
 8006624:	d901      	bls.n	800662a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8006626:	2303      	movs	r3, #3
 8006628:	e1ef      	b.n	8006a0a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800662a:	4b3b      	ldr	r3, [pc, #236]	; (8006718 <HAL_RCC_OscConfig+0x520>)
 800662c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800662e:	f003 0302 	and.w	r3, r3, #2
 8006632:	2b00      	cmp	r3, #0
 8006634:	d0f0      	beq.n	8006618 <HAL_RCC_OscConfig+0x420>
 8006636:	e018      	b.n	800666a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006638:	4b37      	ldr	r3, [pc, #220]	; (8006718 <HAL_RCC_OscConfig+0x520>)
 800663a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800663c:	4a36      	ldr	r2, [pc, #216]	; (8006718 <HAL_RCC_OscConfig+0x520>)
 800663e:	f023 0301 	bic.w	r3, r3, #1
 8006642:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006644:	f7fb fa1e 	bl	8001a84 <HAL_GetTick>
 8006648:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800664a:	e008      	b.n	800665e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800664c:	f7fb fa1a 	bl	8001a84 <HAL_GetTick>
 8006650:	4602      	mov	r2, r0
 8006652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006654:	1ad3      	subs	r3, r2, r3
 8006656:	2b02      	cmp	r3, #2
 8006658:	d901      	bls.n	800665e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800665a:	2303      	movs	r3, #3
 800665c:	e1d5      	b.n	8006a0a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800665e:	4b2e      	ldr	r3, [pc, #184]	; (8006718 <HAL_RCC_OscConfig+0x520>)
 8006660:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006662:	f003 0302 	and.w	r3, r3, #2
 8006666:	2b00      	cmp	r3, #0
 8006668:	d1f0      	bne.n	800664c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f003 0320 	and.w	r3, r3, #32
 8006672:	2b00      	cmp	r3, #0
 8006674:	d036      	beq.n	80066e4 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	699b      	ldr	r3, [r3, #24]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d019      	beq.n	80066b2 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800667e:	4b26      	ldr	r3, [pc, #152]	; (8006718 <HAL_RCC_OscConfig+0x520>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a25      	ldr	r2, [pc, #148]	; (8006718 <HAL_RCC_OscConfig+0x520>)
 8006684:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006688:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800668a:	f7fb f9fb 	bl	8001a84 <HAL_GetTick>
 800668e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006690:	e008      	b.n	80066a4 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006692:	f7fb f9f7 	bl	8001a84 <HAL_GetTick>
 8006696:	4602      	mov	r2, r0
 8006698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669a:	1ad3      	subs	r3, r2, r3
 800669c:	2b02      	cmp	r3, #2
 800669e:	d901      	bls.n	80066a4 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80066a0:	2303      	movs	r3, #3
 80066a2:	e1b2      	b.n	8006a0a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80066a4:	4b1c      	ldr	r3, [pc, #112]	; (8006718 <HAL_RCC_OscConfig+0x520>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d0f0      	beq.n	8006692 <HAL_RCC_OscConfig+0x49a>
 80066b0:	e018      	b.n	80066e4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80066b2:	4b19      	ldr	r3, [pc, #100]	; (8006718 <HAL_RCC_OscConfig+0x520>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a18      	ldr	r2, [pc, #96]	; (8006718 <HAL_RCC_OscConfig+0x520>)
 80066b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80066bc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80066be:	f7fb f9e1 	bl	8001a84 <HAL_GetTick>
 80066c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80066c4:	e008      	b.n	80066d8 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80066c6:	f7fb f9dd 	bl	8001a84 <HAL_GetTick>
 80066ca:	4602      	mov	r2, r0
 80066cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ce:	1ad3      	subs	r3, r2, r3
 80066d0:	2b02      	cmp	r3, #2
 80066d2:	d901      	bls.n	80066d8 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80066d4:	2303      	movs	r3, #3
 80066d6:	e198      	b.n	8006a0a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80066d8:	4b0f      	ldr	r3, [pc, #60]	; (8006718 <HAL_RCC_OscConfig+0x520>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d1f0      	bne.n	80066c6 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f003 0304 	and.w	r3, r3, #4
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	f000 8085 	beq.w	80067fc <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80066f2:	4b0a      	ldr	r3, [pc, #40]	; (800671c <HAL_RCC_OscConfig+0x524>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a09      	ldr	r2, [pc, #36]	; (800671c <HAL_RCC_OscConfig+0x524>)
 80066f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80066fe:	f7fb f9c1 	bl	8001a84 <HAL_GetTick>
 8006702:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006704:	e00c      	b.n	8006720 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006706:	f7fb f9bd 	bl	8001a84 <HAL_GetTick>
 800670a:	4602      	mov	r2, r0
 800670c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670e:	1ad3      	subs	r3, r2, r3
 8006710:	2b64      	cmp	r3, #100	; 0x64
 8006712:	d905      	bls.n	8006720 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8006714:	2303      	movs	r3, #3
 8006716:	e178      	b.n	8006a0a <HAL_RCC_OscConfig+0x812>
 8006718:	58024400 	.word	0x58024400
 800671c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006720:	4b96      	ldr	r3, [pc, #600]	; (800697c <HAL_RCC_OscConfig+0x784>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006728:	2b00      	cmp	r3, #0
 800672a:	d0ec      	beq.n	8006706 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	2b01      	cmp	r3, #1
 8006732:	d106      	bne.n	8006742 <HAL_RCC_OscConfig+0x54a>
 8006734:	4b92      	ldr	r3, [pc, #584]	; (8006980 <HAL_RCC_OscConfig+0x788>)
 8006736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006738:	4a91      	ldr	r2, [pc, #580]	; (8006980 <HAL_RCC_OscConfig+0x788>)
 800673a:	f043 0301 	orr.w	r3, r3, #1
 800673e:	6713      	str	r3, [r2, #112]	; 0x70
 8006740:	e02d      	b.n	800679e <HAL_RCC_OscConfig+0x5a6>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d10c      	bne.n	8006764 <HAL_RCC_OscConfig+0x56c>
 800674a:	4b8d      	ldr	r3, [pc, #564]	; (8006980 <HAL_RCC_OscConfig+0x788>)
 800674c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800674e:	4a8c      	ldr	r2, [pc, #560]	; (8006980 <HAL_RCC_OscConfig+0x788>)
 8006750:	f023 0301 	bic.w	r3, r3, #1
 8006754:	6713      	str	r3, [r2, #112]	; 0x70
 8006756:	4b8a      	ldr	r3, [pc, #552]	; (8006980 <HAL_RCC_OscConfig+0x788>)
 8006758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800675a:	4a89      	ldr	r2, [pc, #548]	; (8006980 <HAL_RCC_OscConfig+0x788>)
 800675c:	f023 0304 	bic.w	r3, r3, #4
 8006760:	6713      	str	r3, [r2, #112]	; 0x70
 8006762:	e01c      	b.n	800679e <HAL_RCC_OscConfig+0x5a6>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	2b05      	cmp	r3, #5
 800676a:	d10c      	bne.n	8006786 <HAL_RCC_OscConfig+0x58e>
 800676c:	4b84      	ldr	r3, [pc, #528]	; (8006980 <HAL_RCC_OscConfig+0x788>)
 800676e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006770:	4a83      	ldr	r2, [pc, #524]	; (8006980 <HAL_RCC_OscConfig+0x788>)
 8006772:	f043 0304 	orr.w	r3, r3, #4
 8006776:	6713      	str	r3, [r2, #112]	; 0x70
 8006778:	4b81      	ldr	r3, [pc, #516]	; (8006980 <HAL_RCC_OscConfig+0x788>)
 800677a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800677c:	4a80      	ldr	r2, [pc, #512]	; (8006980 <HAL_RCC_OscConfig+0x788>)
 800677e:	f043 0301 	orr.w	r3, r3, #1
 8006782:	6713      	str	r3, [r2, #112]	; 0x70
 8006784:	e00b      	b.n	800679e <HAL_RCC_OscConfig+0x5a6>
 8006786:	4b7e      	ldr	r3, [pc, #504]	; (8006980 <HAL_RCC_OscConfig+0x788>)
 8006788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800678a:	4a7d      	ldr	r2, [pc, #500]	; (8006980 <HAL_RCC_OscConfig+0x788>)
 800678c:	f023 0301 	bic.w	r3, r3, #1
 8006790:	6713      	str	r3, [r2, #112]	; 0x70
 8006792:	4b7b      	ldr	r3, [pc, #492]	; (8006980 <HAL_RCC_OscConfig+0x788>)
 8006794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006796:	4a7a      	ldr	r2, [pc, #488]	; (8006980 <HAL_RCC_OscConfig+0x788>)
 8006798:	f023 0304 	bic.w	r3, r3, #4
 800679c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d015      	beq.n	80067d2 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067a6:	f7fb f96d 	bl	8001a84 <HAL_GetTick>
 80067aa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80067ac:	e00a      	b.n	80067c4 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80067ae:	f7fb f969 	bl	8001a84 <HAL_GetTick>
 80067b2:	4602      	mov	r2, r0
 80067b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b6:	1ad3      	subs	r3, r2, r3
 80067b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80067bc:	4293      	cmp	r3, r2
 80067be:	d901      	bls.n	80067c4 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80067c0:	2303      	movs	r3, #3
 80067c2:	e122      	b.n	8006a0a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80067c4:	4b6e      	ldr	r3, [pc, #440]	; (8006980 <HAL_RCC_OscConfig+0x788>)
 80067c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067c8:	f003 0302 	and.w	r3, r3, #2
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d0ee      	beq.n	80067ae <HAL_RCC_OscConfig+0x5b6>
 80067d0:	e014      	b.n	80067fc <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067d2:	f7fb f957 	bl	8001a84 <HAL_GetTick>
 80067d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80067d8:	e00a      	b.n	80067f0 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80067da:	f7fb f953 	bl	8001a84 <HAL_GetTick>
 80067de:	4602      	mov	r2, r0
 80067e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e2:	1ad3      	subs	r3, r2, r3
 80067e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d901      	bls.n	80067f0 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80067ec:	2303      	movs	r3, #3
 80067ee:	e10c      	b.n	8006a0a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80067f0:	4b63      	ldr	r3, [pc, #396]	; (8006980 <HAL_RCC_OscConfig+0x788>)
 80067f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067f4:	f003 0302 	and.w	r3, r3, #2
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d1ee      	bne.n	80067da <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006800:	2b00      	cmp	r3, #0
 8006802:	f000 8101 	beq.w	8006a08 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006806:	4b5e      	ldr	r3, [pc, #376]	; (8006980 <HAL_RCC_OscConfig+0x788>)
 8006808:	691b      	ldr	r3, [r3, #16]
 800680a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800680e:	2b18      	cmp	r3, #24
 8006810:	f000 80bc 	beq.w	800698c <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006818:	2b02      	cmp	r3, #2
 800681a:	f040 8095 	bne.w	8006948 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800681e:	4b58      	ldr	r3, [pc, #352]	; (8006980 <HAL_RCC_OscConfig+0x788>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a57      	ldr	r2, [pc, #348]	; (8006980 <HAL_RCC_OscConfig+0x788>)
 8006824:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006828:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800682a:	f7fb f92b 	bl	8001a84 <HAL_GetTick>
 800682e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006830:	e008      	b.n	8006844 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006832:	f7fb f927 	bl	8001a84 <HAL_GetTick>
 8006836:	4602      	mov	r2, r0
 8006838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683a:	1ad3      	subs	r3, r2, r3
 800683c:	2b02      	cmp	r3, #2
 800683e:	d901      	bls.n	8006844 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8006840:	2303      	movs	r3, #3
 8006842:	e0e2      	b.n	8006a0a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006844:	4b4e      	ldr	r3, [pc, #312]	; (8006980 <HAL_RCC_OscConfig+0x788>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800684c:	2b00      	cmp	r3, #0
 800684e:	d1f0      	bne.n	8006832 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006850:	4b4b      	ldr	r3, [pc, #300]	; (8006980 <HAL_RCC_OscConfig+0x788>)
 8006852:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006854:	4b4b      	ldr	r3, [pc, #300]	; (8006984 <HAL_RCC_OscConfig+0x78c>)
 8006856:	4013      	ands	r3, r2
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800685c:	687a      	ldr	r2, [r7, #4]
 800685e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006860:	0112      	lsls	r2, r2, #4
 8006862:	430a      	orrs	r2, r1
 8006864:	4946      	ldr	r1, [pc, #280]	; (8006980 <HAL_RCC_OscConfig+0x788>)
 8006866:	4313      	orrs	r3, r2
 8006868:	628b      	str	r3, [r1, #40]	; 0x28
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800686e:	3b01      	subs	r3, #1
 8006870:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006878:	3b01      	subs	r3, #1
 800687a:	025b      	lsls	r3, r3, #9
 800687c:	b29b      	uxth	r3, r3
 800687e:	431a      	orrs	r2, r3
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006884:	3b01      	subs	r3, #1
 8006886:	041b      	lsls	r3, r3, #16
 8006888:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800688c:	431a      	orrs	r2, r3
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006892:	3b01      	subs	r3, #1
 8006894:	061b      	lsls	r3, r3, #24
 8006896:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800689a:	4939      	ldr	r1, [pc, #228]	; (8006980 <HAL_RCC_OscConfig+0x788>)
 800689c:	4313      	orrs	r3, r2
 800689e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80068a0:	4b37      	ldr	r3, [pc, #220]	; (8006980 <HAL_RCC_OscConfig+0x788>)
 80068a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a4:	4a36      	ldr	r2, [pc, #216]	; (8006980 <HAL_RCC_OscConfig+0x788>)
 80068a6:	f023 0301 	bic.w	r3, r3, #1
 80068aa:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80068ac:	4b34      	ldr	r3, [pc, #208]	; (8006980 <HAL_RCC_OscConfig+0x788>)
 80068ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068b0:	4b35      	ldr	r3, [pc, #212]	; (8006988 <HAL_RCC_OscConfig+0x790>)
 80068b2:	4013      	ands	r3, r2
 80068b4:	687a      	ldr	r2, [r7, #4]
 80068b6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80068b8:	00d2      	lsls	r2, r2, #3
 80068ba:	4931      	ldr	r1, [pc, #196]	; (8006980 <HAL_RCC_OscConfig+0x788>)
 80068bc:	4313      	orrs	r3, r2
 80068be:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80068c0:	4b2f      	ldr	r3, [pc, #188]	; (8006980 <HAL_RCC_OscConfig+0x788>)
 80068c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068c4:	f023 020c 	bic.w	r2, r3, #12
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068cc:	492c      	ldr	r1, [pc, #176]	; (8006980 <HAL_RCC_OscConfig+0x788>)
 80068ce:	4313      	orrs	r3, r2
 80068d0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80068d2:	4b2b      	ldr	r3, [pc, #172]	; (8006980 <HAL_RCC_OscConfig+0x788>)
 80068d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068d6:	f023 0202 	bic.w	r2, r3, #2
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068de:	4928      	ldr	r1, [pc, #160]	; (8006980 <HAL_RCC_OscConfig+0x788>)
 80068e0:	4313      	orrs	r3, r2
 80068e2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80068e4:	4b26      	ldr	r3, [pc, #152]	; (8006980 <HAL_RCC_OscConfig+0x788>)
 80068e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e8:	4a25      	ldr	r2, [pc, #148]	; (8006980 <HAL_RCC_OscConfig+0x788>)
 80068ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068f0:	4b23      	ldr	r3, [pc, #140]	; (8006980 <HAL_RCC_OscConfig+0x788>)
 80068f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068f4:	4a22      	ldr	r2, [pc, #136]	; (8006980 <HAL_RCC_OscConfig+0x788>)
 80068f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80068fc:	4b20      	ldr	r3, [pc, #128]	; (8006980 <HAL_RCC_OscConfig+0x788>)
 80068fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006900:	4a1f      	ldr	r2, [pc, #124]	; (8006980 <HAL_RCC_OscConfig+0x788>)
 8006902:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006906:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006908:	4b1d      	ldr	r3, [pc, #116]	; (8006980 <HAL_RCC_OscConfig+0x788>)
 800690a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800690c:	4a1c      	ldr	r2, [pc, #112]	; (8006980 <HAL_RCC_OscConfig+0x788>)
 800690e:	f043 0301 	orr.w	r3, r3, #1
 8006912:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006914:	4b1a      	ldr	r3, [pc, #104]	; (8006980 <HAL_RCC_OscConfig+0x788>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a19      	ldr	r2, [pc, #100]	; (8006980 <HAL_RCC_OscConfig+0x788>)
 800691a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800691e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006920:	f7fb f8b0 	bl	8001a84 <HAL_GetTick>
 8006924:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006926:	e008      	b.n	800693a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006928:	f7fb f8ac 	bl	8001a84 <HAL_GetTick>
 800692c:	4602      	mov	r2, r0
 800692e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006930:	1ad3      	subs	r3, r2, r3
 8006932:	2b02      	cmp	r3, #2
 8006934:	d901      	bls.n	800693a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8006936:	2303      	movs	r3, #3
 8006938:	e067      	b.n	8006a0a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800693a:	4b11      	ldr	r3, [pc, #68]	; (8006980 <HAL_RCC_OscConfig+0x788>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006942:	2b00      	cmp	r3, #0
 8006944:	d0f0      	beq.n	8006928 <HAL_RCC_OscConfig+0x730>
 8006946:	e05f      	b.n	8006a08 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006948:	4b0d      	ldr	r3, [pc, #52]	; (8006980 <HAL_RCC_OscConfig+0x788>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a0c      	ldr	r2, [pc, #48]	; (8006980 <HAL_RCC_OscConfig+0x788>)
 800694e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006952:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006954:	f7fb f896 	bl	8001a84 <HAL_GetTick>
 8006958:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800695a:	e008      	b.n	800696e <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800695c:	f7fb f892 	bl	8001a84 <HAL_GetTick>
 8006960:	4602      	mov	r2, r0
 8006962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006964:	1ad3      	subs	r3, r2, r3
 8006966:	2b02      	cmp	r3, #2
 8006968:	d901      	bls.n	800696e <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800696a:	2303      	movs	r3, #3
 800696c:	e04d      	b.n	8006a0a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800696e:	4b04      	ldr	r3, [pc, #16]	; (8006980 <HAL_RCC_OscConfig+0x788>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006976:	2b00      	cmp	r3, #0
 8006978:	d1f0      	bne.n	800695c <HAL_RCC_OscConfig+0x764>
 800697a:	e045      	b.n	8006a08 <HAL_RCC_OscConfig+0x810>
 800697c:	58024800 	.word	0x58024800
 8006980:	58024400 	.word	0x58024400
 8006984:	fffffc0c 	.word	0xfffffc0c
 8006988:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800698c:	4b21      	ldr	r3, [pc, #132]	; (8006a14 <HAL_RCC_OscConfig+0x81c>)
 800698e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006990:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006992:	4b20      	ldr	r3, [pc, #128]	; (8006a14 <HAL_RCC_OscConfig+0x81c>)
 8006994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006996:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800699c:	2b01      	cmp	r3, #1
 800699e:	d031      	beq.n	8006a04 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	f003 0203 	and.w	r2, r3, #3
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d12a      	bne.n	8006a04 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	091b      	lsrs	r3, r3, #4
 80069b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d122      	bne.n	8006a04 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069c8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d11a      	bne.n	8006a04 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	0a5b      	lsrs	r3, r3, #9
 80069d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069da:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80069dc:	429a      	cmp	r2, r3
 80069de:	d111      	bne.n	8006a04 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	0c1b      	lsrs	r3, r3, #16
 80069e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ec:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d108      	bne.n	8006a04 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	0e1b      	lsrs	r3, r3, #24
 80069f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069fe:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d001      	beq.n	8006a08 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8006a04:	2301      	movs	r3, #1
 8006a06:	e000      	b.n	8006a0a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8006a08:	2300      	movs	r3, #0
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3730      	adds	r7, #48	; 0x30
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	bf00      	nop
 8006a14:	58024400 	.word	0x58024400

08006a18 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b086      	sub	sp, #24
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d101      	bne.n	8006a2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	e19c      	b.n	8006d66 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006a2c:	4b8a      	ldr	r3, [pc, #552]	; (8006c58 <HAL_RCC_ClockConfig+0x240>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f003 030f 	and.w	r3, r3, #15
 8006a34:	683a      	ldr	r2, [r7, #0]
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d910      	bls.n	8006a5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a3a:	4b87      	ldr	r3, [pc, #540]	; (8006c58 <HAL_RCC_ClockConfig+0x240>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f023 020f 	bic.w	r2, r3, #15
 8006a42:	4985      	ldr	r1, [pc, #532]	; (8006c58 <HAL_RCC_ClockConfig+0x240>)
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	4313      	orrs	r3, r2
 8006a48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a4a:	4b83      	ldr	r3, [pc, #524]	; (8006c58 <HAL_RCC_ClockConfig+0x240>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f003 030f 	and.w	r3, r3, #15
 8006a52:	683a      	ldr	r2, [r7, #0]
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d001      	beq.n	8006a5c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	e184      	b.n	8006d66 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f003 0304 	and.w	r3, r3, #4
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d010      	beq.n	8006a8a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	691a      	ldr	r2, [r3, #16]
 8006a6c:	4b7b      	ldr	r3, [pc, #492]	; (8006c5c <HAL_RCC_ClockConfig+0x244>)
 8006a6e:	699b      	ldr	r3, [r3, #24]
 8006a70:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d908      	bls.n	8006a8a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006a78:	4b78      	ldr	r3, [pc, #480]	; (8006c5c <HAL_RCC_ClockConfig+0x244>)
 8006a7a:	699b      	ldr	r3, [r3, #24]
 8006a7c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	691b      	ldr	r3, [r3, #16]
 8006a84:	4975      	ldr	r1, [pc, #468]	; (8006c5c <HAL_RCC_ClockConfig+0x244>)
 8006a86:	4313      	orrs	r3, r2
 8006a88:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f003 0308 	and.w	r3, r3, #8
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d010      	beq.n	8006ab8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	695a      	ldr	r2, [r3, #20]
 8006a9a:	4b70      	ldr	r3, [pc, #448]	; (8006c5c <HAL_RCC_ClockConfig+0x244>)
 8006a9c:	69db      	ldr	r3, [r3, #28]
 8006a9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	d908      	bls.n	8006ab8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006aa6:	4b6d      	ldr	r3, [pc, #436]	; (8006c5c <HAL_RCC_ClockConfig+0x244>)
 8006aa8:	69db      	ldr	r3, [r3, #28]
 8006aaa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	695b      	ldr	r3, [r3, #20]
 8006ab2:	496a      	ldr	r1, [pc, #424]	; (8006c5c <HAL_RCC_ClockConfig+0x244>)
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f003 0310 	and.w	r3, r3, #16
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d010      	beq.n	8006ae6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	699a      	ldr	r2, [r3, #24]
 8006ac8:	4b64      	ldr	r3, [pc, #400]	; (8006c5c <HAL_RCC_ClockConfig+0x244>)
 8006aca:	69db      	ldr	r3, [r3, #28]
 8006acc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d908      	bls.n	8006ae6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006ad4:	4b61      	ldr	r3, [pc, #388]	; (8006c5c <HAL_RCC_ClockConfig+0x244>)
 8006ad6:	69db      	ldr	r3, [r3, #28]
 8006ad8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	699b      	ldr	r3, [r3, #24]
 8006ae0:	495e      	ldr	r1, [pc, #376]	; (8006c5c <HAL_RCC_ClockConfig+0x244>)
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f003 0320 	and.w	r3, r3, #32
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d010      	beq.n	8006b14 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	69da      	ldr	r2, [r3, #28]
 8006af6:	4b59      	ldr	r3, [pc, #356]	; (8006c5c <HAL_RCC_ClockConfig+0x244>)
 8006af8:	6a1b      	ldr	r3, [r3, #32]
 8006afa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d908      	bls.n	8006b14 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006b02:	4b56      	ldr	r3, [pc, #344]	; (8006c5c <HAL_RCC_ClockConfig+0x244>)
 8006b04:	6a1b      	ldr	r3, [r3, #32]
 8006b06:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	69db      	ldr	r3, [r3, #28]
 8006b0e:	4953      	ldr	r1, [pc, #332]	; (8006c5c <HAL_RCC_ClockConfig+0x244>)
 8006b10:	4313      	orrs	r3, r2
 8006b12:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f003 0302 	and.w	r3, r3, #2
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d010      	beq.n	8006b42 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	68da      	ldr	r2, [r3, #12]
 8006b24:	4b4d      	ldr	r3, [pc, #308]	; (8006c5c <HAL_RCC_ClockConfig+0x244>)
 8006b26:	699b      	ldr	r3, [r3, #24]
 8006b28:	f003 030f 	and.w	r3, r3, #15
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	d908      	bls.n	8006b42 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b30:	4b4a      	ldr	r3, [pc, #296]	; (8006c5c <HAL_RCC_ClockConfig+0x244>)
 8006b32:	699b      	ldr	r3, [r3, #24]
 8006b34:	f023 020f 	bic.w	r2, r3, #15
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	68db      	ldr	r3, [r3, #12]
 8006b3c:	4947      	ldr	r1, [pc, #284]	; (8006c5c <HAL_RCC_ClockConfig+0x244>)
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f003 0301 	and.w	r3, r3, #1
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d055      	beq.n	8006bfa <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006b4e:	4b43      	ldr	r3, [pc, #268]	; (8006c5c <HAL_RCC_ClockConfig+0x244>)
 8006b50:	699b      	ldr	r3, [r3, #24]
 8006b52:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	4940      	ldr	r1, [pc, #256]	; (8006c5c <HAL_RCC_ClockConfig+0x244>)
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	2b02      	cmp	r3, #2
 8006b66:	d107      	bne.n	8006b78 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006b68:	4b3c      	ldr	r3, [pc, #240]	; (8006c5c <HAL_RCC_ClockConfig+0x244>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d121      	bne.n	8006bb8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006b74:	2301      	movs	r3, #1
 8006b76:	e0f6      	b.n	8006d66 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	2b03      	cmp	r3, #3
 8006b7e:	d107      	bne.n	8006b90 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006b80:	4b36      	ldr	r3, [pc, #216]	; (8006c5c <HAL_RCC_ClockConfig+0x244>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d115      	bne.n	8006bb8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	e0ea      	b.n	8006d66 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d107      	bne.n	8006ba8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006b98:	4b30      	ldr	r3, [pc, #192]	; (8006c5c <HAL_RCC_ClockConfig+0x244>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d109      	bne.n	8006bb8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	e0de      	b.n	8006d66 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006ba8:	4b2c      	ldr	r3, [pc, #176]	; (8006c5c <HAL_RCC_ClockConfig+0x244>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f003 0304 	and.w	r3, r3, #4
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d101      	bne.n	8006bb8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	e0d6      	b.n	8006d66 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006bb8:	4b28      	ldr	r3, [pc, #160]	; (8006c5c <HAL_RCC_ClockConfig+0x244>)
 8006bba:	691b      	ldr	r3, [r3, #16]
 8006bbc:	f023 0207 	bic.w	r2, r3, #7
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	4925      	ldr	r1, [pc, #148]	; (8006c5c <HAL_RCC_ClockConfig+0x244>)
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bca:	f7fa ff5b 	bl	8001a84 <HAL_GetTick>
 8006bce:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bd0:	e00a      	b.n	8006be8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006bd2:	f7fa ff57 	bl	8001a84 <HAL_GetTick>
 8006bd6:	4602      	mov	r2, r0
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	1ad3      	subs	r3, r2, r3
 8006bdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d901      	bls.n	8006be8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006be4:	2303      	movs	r3, #3
 8006be6:	e0be      	b.n	8006d66 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006be8:	4b1c      	ldr	r3, [pc, #112]	; (8006c5c <HAL_RCC_ClockConfig+0x244>)
 8006bea:	691b      	ldr	r3, [r3, #16]
 8006bec:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	00db      	lsls	r3, r3, #3
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d1eb      	bne.n	8006bd2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f003 0302 	and.w	r3, r3, #2
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d010      	beq.n	8006c28 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	68da      	ldr	r2, [r3, #12]
 8006c0a:	4b14      	ldr	r3, [pc, #80]	; (8006c5c <HAL_RCC_ClockConfig+0x244>)
 8006c0c:	699b      	ldr	r3, [r3, #24]
 8006c0e:	f003 030f 	and.w	r3, r3, #15
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d208      	bcs.n	8006c28 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c16:	4b11      	ldr	r3, [pc, #68]	; (8006c5c <HAL_RCC_ClockConfig+0x244>)
 8006c18:	699b      	ldr	r3, [r3, #24]
 8006c1a:	f023 020f 	bic.w	r2, r3, #15
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	68db      	ldr	r3, [r3, #12]
 8006c22:	490e      	ldr	r1, [pc, #56]	; (8006c5c <HAL_RCC_ClockConfig+0x244>)
 8006c24:	4313      	orrs	r3, r2
 8006c26:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006c28:	4b0b      	ldr	r3, [pc, #44]	; (8006c58 <HAL_RCC_ClockConfig+0x240>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f003 030f 	and.w	r3, r3, #15
 8006c30:	683a      	ldr	r2, [r7, #0]
 8006c32:	429a      	cmp	r2, r3
 8006c34:	d214      	bcs.n	8006c60 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c36:	4b08      	ldr	r3, [pc, #32]	; (8006c58 <HAL_RCC_ClockConfig+0x240>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f023 020f 	bic.w	r2, r3, #15
 8006c3e:	4906      	ldr	r1, [pc, #24]	; (8006c58 <HAL_RCC_ClockConfig+0x240>)
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	4313      	orrs	r3, r2
 8006c44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c46:	4b04      	ldr	r3, [pc, #16]	; (8006c58 <HAL_RCC_ClockConfig+0x240>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f003 030f 	and.w	r3, r3, #15
 8006c4e:	683a      	ldr	r2, [r7, #0]
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d005      	beq.n	8006c60 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006c54:	2301      	movs	r3, #1
 8006c56:	e086      	b.n	8006d66 <HAL_RCC_ClockConfig+0x34e>
 8006c58:	52002000 	.word	0x52002000
 8006c5c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f003 0304 	and.w	r3, r3, #4
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d010      	beq.n	8006c8e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	691a      	ldr	r2, [r3, #16]
 8006c70:	4b3f      	ldr	r3, [pc, #252]	; (8006d70 <HAL_RCC_ClockConfig+0x358>)
 8006c72:	699b      	ldr	r3, [r3, #24]
 8006c74:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d208      	bcs.n	8006c8e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006c7c:	4b3c      	ldr	r3, [pc, #240]	; (8006d70 <HAL_RCC_ClockConfig+0x358>)
 8006c7e:	699b      	ldr	r3, [r3, #24]
 8006c80:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	691b      	ldr	r3, [r3, #16]
 8006c88:	4939      	ldr	r1, [pc, #228]	; (8006d70 <HAL_RCC_ClockConfig+0x358>)
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f003 0308 	and.w	r3, r3, #8
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d010      	beq.n	8006cbc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	695a      	ldr	r2, [r3, #20]
 8006c9e:	4b34      	ldr	r3, [pc, #208]	; (8006d70 <HAL_RCC_ClockConfig+0x358>)
 8006ca0:	69db      	ldr	r3, [r3, #28]
 8006ca2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d208      	bcs.n	8006cbc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006caa:	4b31      	ldr	r3, [pc, #196]	; (8006d70 <HAL_RCC_ClockConfig+0x358>)
 8006cac:	69db      	ldr	r3, [r3, #28]
 8006cae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	695b      	ldr	r3, [r3, #20]
 8006cb6:	492e      	ldr	r1, [pc, #184]	; (8006d70 <HAL_RCC_ClockConfig+0x358>)
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f003 0310 	and.w	r3, r3, #16
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d010      	beq.n	8006cea <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	699a      	ldr	r2, [r3, #24]
 8006ccc:	4b28      	ldr	r3, [pc, #160]	; (8006d70 <HAL_RCC_ClockConfig+0x358>)
 8006cce:	69db      	ldr	r3, [r3, #28]
 8006cd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d208      	bcs.n	8006cea <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006cd8:	4b25      	ldr	r3, [pc, #148]	; (8006d70 <HAL_RCC_ClockConfig+0x358>)
 8006cda:	69db      	ldr	r3, [r3, #28]
 8006cdc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	699b      	ldr	r3, [r3, #24]
 8006ce4:	4922      	ldr	r1, [pc, #136]	; (8006d70 <HAL_RCC_ClockConfig+0x358>)
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f003 0320 	and.w	r3, r3, #32
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d010      	beq.n	8006d18 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	69da      	ldr	r2, [r3, #28]
 8006cfa:	4b1d      	ldr	r3, [pc, #116]	; (8006d70 <HAL_RCC_ClockConfig+0x358>)
 8006cfc:	6a1b      	ldr	r3, [r3, #32]
 8006cfe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d208      	bcs.n	8006d18 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006d06:	4b1a      	ldr	r3, [pc, #104]	; (8006d70 <HAL_RCC_ClockConfig+0x358>)
 8006d08:	6a1b      	ldr	r3, [r3, #32]
 8006d0a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	69db      	ldr	r3, [r3, #28]
 8006d12:	4917      	ldr	r1, [pc, #92]	; (8006d70 <HAL_RCC_ClockConfig+0x358>)
 8006d14:	4313      	orrs	r3, r2
 8006d16:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006d18:	f000 f844 	bl	8006da4 <HAL_RCC_GetSysClockFreq>
 8006d1c:	4601      	mov	r1, r0
 8006d1e:	4b14      	ldr	r3, [pc, #80]	; (8006d70 <HAL_RCC_ClockConfig+0x358>)
 8006d20:	699b      	ldr	r3, [r3, #24]
 8006d22:	0a1b      	lsrs	r3, r3, #8
 8006d24:	f003 030f 	and.w	r3, r3, #15
 8006d28:	4a12      	ldr	r2, [pc, #72]	; (8006d74 <HAL_RCC_ClockConfig+0x35c>)
 8006d2a:	5cd3      	ldrb	r3, [r2, r3]
 8006d2c:	f003 031f 	and.w	r3, r3, #31
 8006d30:	fa21 f303 	lsr.w	r3, r1, r3
 8006d34:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006d36:	4b0e      	ldr	r3, [pc, #56]	; (8006d70 <HAL_RCC_ClockConfig+0x358>)
 8006d38:	699b      	ldr	r3, [r3, #24]
 8006d3a:	f003 030f 	and.w	r3, r3, #15
 8006d3e:	4a0d      	ldr	r2, [pc, #52]	; (8006d74 <HAL_RCC_ClockConfig+0x35c>)
 8006d40:	5cd3      	ldrb	r3, [r2, r3]
 8006d42:	f003 031f 	and.w	r3, r3, #31
 8006d46:	693a      	ldr	r2, [r7, #16]
 8006d48:	fa22 f303 	lsr.w	r3, r2, r3
 8006d4c:	4a0a      	ldr	r2, [pc, #40]	; (8006d78 <HAL_RCC_ClockConfig+0x360>)
 8006d4e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006d50:	4a0a      	ldr	r2, [pc, #40]	; (8006d7c <HAL_RCC_ClockConfig+0x364>)
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006d56:	4b0a      	ldr	r3, [pc, #40]	; (8006d80 <HAL_RCC_ClockConfig+0x368>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f7fa fe48 	bl	80019f0 <HAL_InitTick>
 8006d60:	4603      	mov	r3, r0
 8006d62:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3718      	adds	r7, #24
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}
 8006d6e:	bf00      	nop
 8006d70:	58024400 	.word	0x58024400
 8006d74:	08015704 	.word	0x08015704
 8006d78:	24000004 	.word	0x24000004
 8006d7c:	24000000 	.word	0x24000000
 8006d80:	24000008 	.word	0x24000008

08006d84 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8006d84:	b480      	push	{r7}
 8006d86:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 8006d88:	4b05      	ldr	r3, [pc, #20]	; (8006da0 <HAL_RCC_EnableCSS+0x1c>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a04      	ldr	r2, [pc, #16]	; (8006da0 <HAL_RCC_EnableCSS+0x1c>)
 8006d8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d92:	6013      	str	r3, [r2, #0]
}
 8006d94:	bf00      	nop
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr
 8006d9e:	bf00      	nop
 8006da0:	58024400 	.word	0x58024400

08006da4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b089      	sub	sp, #36	; 0x24
 8006da8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006daa:	4baf      	ldr	r3, [pc, #700]	; (8007068 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006dac:	691b      	ldr	r3, [r3, #16]
 8006dae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006db2:	2b18      	cmp	r3, #24
 8006db4:	f200 814e 	bhi.w	8007054 <HAL_RCC_GetSysClockFreq+0x2b0>
 8006db8:	a201      	add	r2, pc, #4	; (adr r2, 8006dc0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dbe:	bf00      	nop
 8006dc0:	08006e25 	.word	0x08006e25
 8006dc4:	08007055 	.word	0x08007055
 8006dc8:	08007055 	.word	0x08007055
 8006dcc:	08007055 	.word	0x08007055
 8006dd0:	08007055 	.word	0x08007055
 8006dd4:	08007055 	.word	0x08007055
 8006dd8:	08007055 	.word	0x08007055
 8006ddc:	08007055 	.word	0x08007055
 8006de0:	08006e4b 	.word	0x08006e4b
 8006de4:	08007055 	.word	0x08007055
 8006de8:	08007055 	.word	0x08007055
 8006dec:	08007055 	.word	0x08007055
 8006df0:	08007055 	.word	0x08007055
 8006df4:	08007055 	.word	0x08007055
 8006df8:	08007055 	.word	0x08007055
 8006dfc:	08007055 	.word	0x08007055
 8006e00:	08006e51 	.word	0x08006e51
 8006e04:	08007055 	.word	0x08007055
 8006e08:	08007055 	.word	0x08007055
 8006e0c:	08007055 	.word	0x08007055
 8006e10:	08007055 	.word	0x08007055
 8006e14:	08007055 	.word	0x08007055
 8006e18:	08007055 	.word	0x08007055
 8006e1c:	08007055 	.word	0x08007055
 8006e20:	08006e57 	.word	0x08006e57
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e24:	4b90      	ldr	r3, [pc, #576]	; (8007068 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f003 0320 	and.w	r3, r3, #32
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d009      	beq.n	8006e44 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006e30:	4b8d      	ldr	r3, [pc, #564]	; (8007068 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	08db      	lsrs	r3, r3, #3
 8006e36:	f003 0303 	and.w	r3, r3, #3
 8006e3a:	4a8c      	ldr	r2, [pc, #560]	; (800706c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006e3c:	fa22 f303 	lsr.w	r3, r2, r3
 8006e40:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006e42:	e10a      	b.n	800705a <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006e44:	4b89      	ldr	r3, [pc, #548]	; (800706c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006e46:	61bb      	str	r3, [r7, #24]
    break;
 8006e48:	e107      	b.n	800705a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006e4a:	4b89      	ldr	r3, [pc, #548]	; (8007070 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8006e4c:	61bb      	str	r3, [r7, #24]
    break;
 8006e4e:	e104      	b.n	800705a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006e50:	4b88      	ldr	r3, [pc, #544]	; (8007074 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8006e52:	61bb      	str	r3, [r7, #24]
    break;
 8006e54:	e101      	b.n	800705a <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006e56:	4b84      	ldr	r3, [pc, #528]	; (8007068 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e5a:	f003 0303 	and.w	r3, r3, #3
 8006e5e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006e60:	4b81      	ldr	r3, [pc, #516]	; (8007068 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e64:	091b      	lsrs	r3, r3, #4
 8006e66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e6a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006e6c:	4b7e      	ldr	r3, [pc, #504]	; (8007068 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e70:	f003 0301 	and.w	r3, r3, #1
 8006e74:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006e76:	4b7c      	ldr	r3, [pc, #496]	; (8007068 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e7a:	08db      	lsrs	r3, r3, #3
 8006e7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e80:	68fa      	ldr	r2, [r7, #12]
 8006e82:	fb02 f303 	mul.w	r3, r2, r3
 8006e86:	ee07 3a90 	vmov	s15, r3
 8006e8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e8e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	f000 80da 	beq.w	800704e <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d05a      	beq.n	8006f56 <HAL_RCC_GetSysClockFreq+0x1b2>
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	d302      	bcc.n	8006eaa <HAL_RCC_GetSysClockFreq+0x106>
 8006ea4:	2b02      	cmp	r3, #2
 8006ea6:	d078      	beq.n	8006f9a <HAL_RCC_GetSysClockFreq+0x1f6>
 8006ea8:	e099      	b.n	8006fde <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006eaa:	4b6f      	ldr	r3, [pc, #444]	; (8007068 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f003 0320 	and.w	r3, r3, #32
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d02d      	beq.n	8006f12 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006eb6:	4b6c      	ldr	r3, [pc, #432]	; (8007068 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	08db      	lsrs	r3, r3, #3
 8006ebc:	f003 0303 	and.w	r3, r3, #3
 8006ec0:	4a6a      	ldr	r2, [pc, #424]	; (800706c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006ec2:	fa22 f303 	lsr.w	r3, r2, r3
 8006ec6:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	ee07 3a90 	vmov	s15, r3
 8006ece:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	ee07 3a90 	vmov	s15, r3
 8006ed8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006edc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ee0:	4b61      	ldr	r3, [pc, #388]	; (8007068 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ee4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ee8:	ee07 3a90 	vmov	s15, r3
 8006eec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ef0:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ef4:	eddf 5a60 	vldr	s11, [pc, #384]	; 8007078 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006ef8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006efc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f0c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006f10:	e087      	b.n	8007022 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	ee07 3a90 	vmov	s15, r3
 8006f18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f1c:	eddf 6a57 	vldr	s13, [pc, #348]	; 800707c <HAL_RCC_GetSysClockFreq+0x2d8>
 8006f20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f24:	4b50      	ldr	r3, [pc, #320]	; (8007068 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f2c:	ee07 3a90 	vmov	s15, r3
 8006f30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f34:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f38:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8007078 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006f3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f50:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f54:	e065      	b.n	8007022 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	ee07 3a90 	vmov	s15, r3
 8006f5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f60:	eddf 6a47 	vldr	s13, [pc, #284]	; 8007080 <HAL_RCC_GetSysClockFreq+0x2dc>
 8006f64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f68:	4b3f      	ldr	r3, [pc, #252]	; (8007068 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f70:	ee07 3a90 	vmov	s15, r3
 8006f74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f78:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f7c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8007078 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006f80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f94:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f98:	e043      	b.n	8007022 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	ee07 3a90 	vmov	s15, r3
 8006fa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fa4:	eddf 6a37 	vldr	s13, [pc, #220]	; 8007084 <HAL_RCC_GetSysClockFreq+0x2e0>
 8006fa8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fac:	4b2e      	ldr	r3, [pc, #184]	; (8007068 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fb4:	ee07 3a90 	vmov	s15, r3
 8006fb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fbc:	ed97 6a02 	vldr	s12, [r7, #8]
 8006fc0:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8007078 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006fc4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fc8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fcc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fd0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fd8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006fdc:	e021      	b.n	8007022 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	ee07 3a90 	vmov	s15, r3
 8006fe4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fe8:	eddf 6a25 	vldr	s13, [pc, #148]	; 8007080 <HAL_RCC_GetSysClockFreq+0x2dc>
 8006fec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ff0:	4b1d      	ldr	r3, [pc, #116]	; (8007068 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ff4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ff8:	ee07 3a90 	vmov	s15, r3
 8006ffc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007000:	ed97 6a02 	vldr	s12, [r7, #8]
 8007004:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8007078 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007008:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800700c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007010:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007014:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007018:	ee67 7a27 	vmul.f32	s15, s14, s15
 800701c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007020:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007022:	4b11      	ldr	r3, [pc, #68]	; (8007068 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007026:	0a5b      	lsrs	r3, r3, #9
 8007028:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800702c:	3301      	adds	r3, #1
 800702e:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	ee07 3a90 	vmov	s15, r3
 8007036:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800703a:	edd7 6a07 	vldr	s13, [r7, #28]
 800703e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007042:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007046:	ee17 3a90 	vmov	r3, s15
 800704a:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800704c:	e005      	b.n	800705a <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 800704e:	2300      	movs	r3, #0
 8007050:	61bb      	str	r3, [r7, #24]
    break;
 8007052:	e002      	b.n	800705a <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8007054:	4b06      	ldr	r3, [pc, #24]	; (8007070 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8007056:	61bb      	str	r3, [r7, #24]
    break;
 8007058:	bf00      	nop
  }

  return sysclockfreq;
 800705a:	69bb      	ldr	r3, [r7, #24]
}
 800705c:	4618      	mov	r0, r3
 800705e:	3724      	adds	r7, #36	; 0x24
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr
 8007068:	58024400 	.word	0x58024400
 800706c:	03d09000 	.word	0x03d09000
 8007070:	003d0900 	.word	0x003d0900
 8007074:	017d7840 	.word	0x017d7840
 8007078:	46000000 	.word	0x46000000
 800707c:	4c742400 	.word	0x4c742400
 8007080:	4a742400 	.word	0x4a742400
 8007084:	4bbebc20 	.word	0x4bbebc20

08007088 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b082      	sub	sp, #8
 800708c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800708e:	f7ff fe89 	bl	8006da4 <HAL_RCC_GetSysClockFreq>
 8007092:	4601      	mov	r1, r0
 8007094:	4b10      	ldr	r3, [pc, #64]	; (80070d8 <HAL_RCC_GetHCLKFreq+0x50>)
 8007096:	699b      	ldr	r3, [r3, #24]
 8007098:	0a1b      	lsrs	r3, r3, #8
 800709a:	f003 030f 	and.w	r3, r3, #15
 800709e:	4a0f      	ldr	r2, [pc, #60]	; (80070dc <HAL_RCC_GetHCLKFreq+0x54>)
 80070a0:	5cd3      	ldrb	r3, [r2, r3]
 80070a2:	f003 031f 	and.w	r3, r3, #31
 80070a6:	fa21 f303 	lsr.w	r3, r1, r3
 80070aa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80070ac:	4b0a      	ldr	r3, [pc, #40]	; (80070d8 <HAL_RCC_GetHCLKFreq+0x50>)
 80070ae:	699b      	ldr	r3, [r3, #24]
 80070b0:	f003 030f 	and.w	r3, r3, #15
 80070b4:	4a09      	ldr	r2, [pc, #36]	; (80070dc <HAL_RCC_GetHCLKFreq+0x54>)
 80070b6:	5cd3      	ldrb	r3, [r2, r3]
 80070b8:	f003 031f 	and.w	r3, r3, #31
 80070bc:	687a      	ldr	r2, [r7, #4]
 80070be:	fa22 f303 	lsr.w	r3, r2, r3
 80070c2:	4a07      	ldr	r2, [pc, #28]	; (80070e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80070c4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80070c6:	4a07      	ldr	r2, [pc, #28]	; (80070e4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80070cc:	4b04      	ldr	r3, [pc, #16]	; (80070e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80070ce:	681b      	ldr	r3, [r3, #0]
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3708      	adds	r7, #8
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}
 80070d8:	58024400 	.word	0x58024400
 80070dc:	08015704 	.word	0x08015704
 80070e0:	24000004 	.word	0x24000004
 80070e4:	24000000 	.word	0x24000000

080070e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80070ec:	f7ff ffcc 	bl	8007088 <HAL_RCC_GetHCLKFreq>
 80070f0:	4601      	mov	r1, r0
 80070f2:	4b06      	ldr	r3, [pc, #24]	; (800710c <HAL_RCC_GetPCLK1Freq+0x24>)
 80070f4:	69db      	ldr	r3, [r3, #28]
 80070f6:	091b      	lsrs	r3, r3, #4
 80070f8:	f003 0307 	and.w	r3, r3, #7
 80070fc:	4a04      	ldr	r2, [pc, #16]	; (8007110 <HAL_RCC_GetPCLK1Freq+0x28>)
 80070fe:	5cd3      	ldrb	r3, [r2, r3]
 8007100:	f003 031f 	and.w	r3, r3, #31
 8007104:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007108:	4618      	mov	r0, r3
 800710a:	bd80      	pop	{r7, pc}
 800710c:	58024400 	.word	0x58024400
 8007110:	08015704 	.word	0x08015704

08007114 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007118:	f7ff ffb6 	bl	8007088 <HAL_RCC_GetHCLKFreq>
 800711c:	4601      	mov	r1, r0
 800711e:	4b06      	ldr	r3, [pc, #24]	; (8007138 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007120:	69db      	ldr	r3, [r3, #28]
 8007122:	0a1b      	lsrs	r3, r3, #8
 8007124:	f003 0307 	and.w	r3, r3, #7
 8007128:	4a04      	ldr	r2, [pc, #16]	; (800713c <HAL_RCC_GetPCLK2Freq+0x28>)
 800712a:	5cd3      	ldrb	r3, [r2, r3]
 800712c:	f003 031f 	and.w	r3, r3, #31
 8007130:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007134:	4618      	mov	r0, r3
 8007136:	bd80      	pop	{r7, pc}
 8007138:	58024400 	.word	0x58024400
 800713c:	08015704 	.word	0x08015704

08007140 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8007144:	4b07      	ldr	r3, [pc, #28]	; (8007164 <HAL_RCC_NMI_IRQHandler+0x24>)
 8007146:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800714c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007150:	d105      	bne.n	800715e <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CCSCallback();
 8007152:	f000 f809 	bl	8007168 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8007156:	4b03      	ldr	r3, [pc, #12]	; (8007164 <HAL_RCC_NMI_IRQHandler+0x24>)
 8007158:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800715c:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 800715e:	bf00      	nop
 8007160:	bd80      	pop	{r7, pc}
 8007162:	bf00      	nop
 8007164:	58024400 	.word	0x58024400

08007168 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CCSCallback(void)
{
 8007168:	b480      	push	{r7}
 800716a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CCSCallback could be implemented in the user file
   */
}
 800716c:	bf00      	nop
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr
	...

08007178 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b086      	sub	sp, #24
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007180:	2300      	movs	r3, #0
 8007182:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007184:	2300      	movs	r3, #0
 8007186:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007190:	2b00      	cmp	r3, #0
 8007192:	d03d      	beq.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007198:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800719c:	d013      	beq.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800719e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071a2:	d802      	bhi.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0x32>
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d007      	beq.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80071a8:	e01f      	b.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x72>
 80071aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80071ae:	d013      	beq.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80071b0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80071b4:	d01c      	beq.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80071b6:	e018      	b.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071b8:	4baf      	ldr	r3, [pc, #700]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80071ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071bc:	4aae      	ldr	r2, [pc, #696]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80071be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80071c4:	e015      	b.n	80071f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	3304      	adds	r3, #4
 80071ca:	2102      	movs	r1, #2
 80071cc:	4618      	mov	r0, r3
 80071ce:	f001 fd33 	bl	8008c38 <RCCEx_PLL2_Config>
 80071d2:	4603      	mov	r3, r0
 80071d4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80071d6:	e00c      	b.n	80071f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	3324      	adds	r3, #36	; 0x24
 80071dc:	2102      	movs	r1, #2
 80071de:	4618      	mov	r0, r3
 80071e0:	f001 fddc 	bl	8008d9c <RCCEx_PLL3_Config>
 80071e4:	4603      	mov	r3, r0
 80071e6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80071e8:	e003      	b.n	80071f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80071ea:	2301      	movs	r3, #1
 80071ec:	75fb      	strb	r3, [r7, #23]
      break;
 80071ee:	e000      	b.n	80071f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80071f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071f2:	7dfb      	ldrb	r3, [r7, #23]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d109      	bne.n	800720c <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80071f8:	4b9f      	ldr	r3, [pc, #636]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80071fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007204:	499c      	ldr	r1, [pc, #624]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007206:	4313      	orrs	r3, r2
 8007208:	650b      	str	r3, [r1, #80]	; 0x50
 800720a:	e001      	b.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800720c:	7dfb      	ldrb	r3, [r7, #23]
 800720e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007218:	2b00      	cmp	r3, #0
 800721a:	d03d      	beq.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007220:	2b04      	cmp	r3, #4
 8007222:	d826      	bhi.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8007224:	a201      	add	r2, pc, #4	; (adr r2, 800722c <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8007226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800722a:	bf00      	nop
 800722c:	08007241 	.word	0x08007241
 8007230:	0800724f 	.word	0x0800724f
 8007234:	08007261 	.word	0x08007261
 8007238:	08007279 	.word	0x08007279
 800723c:	08007279 	.word	0x08007279
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007240:	4b8d      	ldr	r3, [pc, #564]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007244:	4a8c      	ldr	r2, [pc, #560]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007246:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800724a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800724c:	e015      	b.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	3304      	adds	r3, #4
 8007252:	2100      	movs	r1, #0
 8007254:	4618      	mov	r0, r3
 8007256:	f001 fcef 	bl	8008c38 <RCCEx_PLL2_Config>
 800725a:	4603      	mov	r3, r0
 800725c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800725e:	e00c      	b.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	3324      	adds	r3, #36	; 0x24
 8007264:	2100      	movs	r1, #0
 8007266:	4618      	mov	r0, r3
 8007268:	f001 fd98 	bl	8008d9c <RCCEx_PLL3_Config>
 800726c:	4603      	mov	r3, r0
 800726e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007270:	e003      	b.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007272:	2301      	movs	r3, #1
 8007274:	75fb      	strb	r3, [r7, #23]
      break;
 8007276:	e000      	b.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8007278:	bf00      	nop
    }

    if(ret == HAL_OK)
 800727a:	7dfb      	ldrb	r3, [r7, #23]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d109      	bne.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007280:	4b7d      	ldr	r3, [pc, #500]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007282:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007284:	f023 0207 	bic.w	r2, r3, #7
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800728c:	497a      	ldr	r1, [pc, #488]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800728e:	4313      	orrs	r3, r2
 8007290:	650b      	str	r3, [r1, #80]	; 0x50
 8007292:	e001      	b.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007294:	7dfb      	ldrb	r3, [r7, #23]
 8007296:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d03e      	beq.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072a8:	2b80      	cmp	r3, #128	; 0x80
 80072aa:	d01c      	beq.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80072ac:	2b80      	cmp	r3, #128	; 0x80
 80072ae:	d804      	bhi.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x142>
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d008      	beq.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80072b4:	2b40      	cmp	r3, #64	; 0x40
 80072b6:	d00d      	beq.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80072b8:	e01e      	b.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80072ba:	2bc0      	cmp	r3, #192	; 0xc0
 80072bc:	d01f      	beq.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x186>
 80072be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072c2:	d01e      	beq.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80072c4:	e018      	b.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072c6:	4b6c      	ldr	r3, [pc, #432]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80072c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ca:	4a6b      	ldr	r2, [pc, #428]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80072cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80072d2:	e017      	b.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	3304      	adds	r3, #4
 80072d8:	2100      	movs	r1, #0
 80072da:	4618      	mov	r0, r3
 80072dc:	f001 fcac 	bl	8008c38 <RCCEx_PLL2_Config>
 80072e0:	4603      	mov	r3, r0
 80072e2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80072e4:	e00e      	b.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	3324      	adds	r3, #36	; 0x24
 80072ea:	2100      	movs	r1, #0
 80072ec:	4618      	mov	r0, r3
 80072ee:	f001 fd55 	bl	8008d9c <RCCEx_PLL3_Config>
 80072f2:	4603      	mov	r3, r0
 80072f4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80072f6:	e005      	b.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80072f8:	2301      	movs	r3, #1
 80072fa:	75fb      	strb	r3, [r7, #23]
      break;
 80072fc:	e002      	b.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80072fe:	bf00      	nop
 8007300:	e000      	b.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8007302:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007304:	7dfb      	ldrb	r3, [r7, #23]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d109      	bne.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800730a:	4b5b      	ldr	r3, [pc, #364]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800730c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800730e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007316:	4958      	ldr	r1, [pc, #352]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007318:	4313      	orrs	r3, r2
 800731a:	650b      	str	r3, [r1, #80]	; 0x50
 800731c:	e001      	b.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800731e:	7dfb      	ldrb	r3, [r7, #23]
 8007320:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800732a:	2b00      	cmp	r3, #0
 800732c:	d044      	beq.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007334:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007338:	d01f      	beq.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x202>
 800733a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800733e:	d805      	bhi.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8007340:	2b00      	cmp	r3, #0
 8007342:	d00a      	beq.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007344:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007348:	d00e      	beq.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 800734a:	e01f      	b.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x214>
 800734c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007350:	d01f      	beq.n	8007392 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8007352:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007356:	d01e      	beq.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8007358:	e018      	b.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800735a:	4b47      	ldr	r3, [pc, #284]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800735c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800735e:	4a46      	ldr	r2, [pc, #280]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007360:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007364:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007366:	e017      	b.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	3304      	adds	r3, #4
 800736c:	2100      	movs	r1, #0
 800736e:	4618      	mov	r0, r3
 8007370:	f001 fc62 	bl	8008c38 <RCCEx_PLL2_Config>
 8007374:	4603      	mov	r3, r0
 8007376:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007378:	e00e      	b.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	3324      	adds	r3, #36	; 0x24
 800737e:	2100      	movs	r1, #0
 8007380:	4618      	mov	r0, r3
 8007382:	f001 fd0b 	bl	8008d9c <RCCEx_PLL3_Config>
 8007386:	4603      	mov	r3, r0
 8007388:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800738a:	e005      	b.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800738c:	2301      	movs	r3, #1
 800738e:	75fb      	strb	r3, [r7, #23]
      break;
 8007390:	e002      	b.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8007392:	bf00      	nop
 8007394:	e000      	b.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8007396:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007398:	7dfb      	ldrb	r3, [r7, #23]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d10a      	bne.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800739e:	4b36      	ldr	r3, [pc, #216]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80073a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073a2:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80073ac:	4932      	ldr	r1, [pc, #200]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80073ae:	4313      	orrs	r3, r2
 80073b0:	658b      	str	r3, [r1, #88]	; 0x58
 80073b2:	e001      	b.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073b4:	7dfb      	ldrb	r3, [r7, #23]
 80073b6:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d044      	beq.n	800744e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80073ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80073ce:	d01f      	beq.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80073d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80073d4:	d805      	bhi.n	80073e2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d00a      	beq.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x278>
 80073da:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80073de:	d00e      	beq.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x286>
 80073e0:	e01f      	b.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 80073e2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80073e6:	d01f      	beq.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80073e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80073ec:	d01e      	beq.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80073ee:	e018      	b.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073f0:	4b21      	ldr	r3, [pc, #132]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80073f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073f4:	4a20      	ldr	r2, [pc, #128]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80073f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80073fc:	e017      	b.n	800742e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	3304      	adds	r3, #4
 8007402:	2100      	movs	r1, #0
 8007404:	4618      	mov	r0, r3
 8007406:	f001 fc17 	bl	8008c38 <RCCEx_PLL2_Config>
 800740a:	4603      	mov	r3, r0
 800740c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800740e:	e00e      	b.n	800742e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	3324      	adds	r3, #36	; 0x24
 8007414:	2100      	movs	r1, #0
 8007416:	4618      	mov	r0, r3
 8007418:	f001 fcc0 	bl	8008d9c <RCCEx_PLL3_Config>
 800741c:	4603      	mov	r3, r0
 800741e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007420:	e005      	b.n	800742e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007422:	2301      	movs	r3, #1
 8007424:	75fb      	strb	r3, [r7, #23]
      break;
 8007426:	e002      	b.n	800742e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8007428:	bf00      	nop
 800742a:	e000      	b.n	800742e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 800742c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800742e:	7dfb      	ldrb	r3, [r7, #23]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d10a      	bne.n	800744a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007434:	4b10      	ldr	r3, [pc, #64]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007438:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007442:	490d      	ldr	r1, [pc, #52]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007444:	4313      	orrs	r3, r2
 8007446:	658b      	str	r3, [r1, #88]	; 0x58
 8007448:	e001      	b.n	800744e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800744a:	7dfb      	ldrb	r3, [r7, #23]
 800744c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007456:	2b00      	cmp	r3, #0
 8007458:	d035      	beq.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800745e:	2b10      	cmp	r3, #16
 8007460:	d00c      	beq.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x304>
 8007462:	2b10      	cmp	r3, #16
 8007464:	d802      	bhi.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8007466:	2b00      	cmp	r3, #0
 8007468:	d01b      	beq.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800746a:	e017      	b.n	800749c <HAL_RCCEx_PeriphCLKConfig+0x324>
 800746c:	2b20      	cmp	r3, #32
 800746e:	d00c      	beq.n	800748a <HAL_RCCEx_PeriphCLKConfig+0x312>
 8007470:	2b30      	cmp	r3, #48	; 0x30
 8007472:	d018      	beq.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8007474:	e012      	b.n	800749c <HAL_RCCEx_PeriphCLKConfig+0x324>
 8007476:	bf00      	nop
 8007478:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800747c:	4baf      	ldr	r3, [pc, #700]	; (800773c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800747e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007480:	4aae      	ldr	r2, [pc, #696]	; (800773c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007482:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007486:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007488:	e00e      	b.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	3304      	adds	r3, #4
 800748e:	2102      	movs	r1, #2
 8007490:	4618      	mov	r0, r3
 8007492:	f001 fbd1 	bl	8008c38 <RCCEx_PLL2_Config>
 8007496:	4603      	mov	r3, r0
 8007498:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800749a:	e005      	b.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800749c:	2301      	movs	r3, #1
 800749e:	75fb      	strb	r3, [r7, #23]
      break;
 80074a0:	e002      	b.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80074a2:	bf00      	nop
 80074a4:	e000      	b.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80074a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074a8:	7dfb      	ldrb	r3, [r7, #23]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d109      	bne.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80074ae:	4ba3      	ldr	r3, [pc, #652]	; (800773c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80074b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074b2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074ba:	49a0      	ldr	r1, [pc, #640]	; (800773c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80074bc:	4313      	orrs	r3, r2
 80074be:	64cb      	str	r3, [r1, #76]	; 0x4c
 80074c0:	e001      	b.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074c2:	7dfb      	ldrb	r3, [r7, #23]
 80074c4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d042      	beq.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074da:	d01f      	beq.n	800751c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80074dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074e0:	d805      	bhi.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0x376>
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d00a      	beq.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0x384>
 80074e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074ea:	d00e      	beq.n	800750a <HAL_RCCEx_PeriphCLKConfig+0x392>
 80074ec:	e01f      	b.n	800752e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 80074ee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80074f2:	d01f      	beq.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80074f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80074f8:	d01e      	beq.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80074fa:	e018      	b.n	800752e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074fc:	4b8f      	ldr	r3, [pc, #572]	; (800773c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80074fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007500:	4a8e      	ldr	r2, [pc, #568]	; (800773c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007502:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007506:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007508:	e017      	b.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	3304      	adds	r3, #4
 800750e:	2100      	movs	r1, #0
 8007510:	4618      	mov	r0, r3
 8007512:	f001 fb91 	bl	8008c38 <RCCEx_PLL2_Config>
 8007516:	4603      	mov	r3, r0
 8007518:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800751a:	e00e      	b.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	3324      	adds	r3, #36	; 0x24
 8007520:	2100      	movs	r1, #0
 8007522:	4618      	mov	r0, r3
 8007524:	f001 fc3a 	bl	8008d9c <RCCEx_PLL3_Config>
 8007528:	4603      	mov	r3, r0
 800752a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800752c:	e005      	b.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800752e:	2301      	movs	r3, #1
 8007530:	75fb      	strb	r3, [r7, #23]
      break;
 8007532:	e002      	b.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8007534:	bf00      	nop
 8007536:	e000      	b.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8007538:	bf00      	nop
    }

    if(ret == HAL_OK)
 800753a:	7dfb      	ldrb	r3, [r7, #23]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d109      	bne.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007540:	4b7e      	ldr	r3, [pc, #504]	; (800773c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007542:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007544:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800754c:	497b      	ldr	r1, [pc, #492]	; (800773c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800754e:	4313      	orrs	r3, r2
 8007550:	650b      	str	r3, [r1, #80]	; 0x50
 8007552:	e001      	b.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007554:	7dfb      	ldrb	r3, [r7, #23]
 8007556:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007560:	2b00      	cmp	r3, #0
 8007562:	d042      	beq.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007568:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800756c:	d01b      	beq.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800756e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007572:	d805      	bhi.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8007574:	2b00      	cmp	r3, #0
 8007576:	d022      	beq.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x446>
 8007578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800757c:	d00a      	beq.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800757e:	e01b      	b.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8007580:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007584:	d01d      	beq.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8007586:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800758a:	d01c      	beq.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 800758c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007590:	d01b      	beq.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0x452>
 8007592:	e011      	b.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	3304      	adds	r3, #4
 8007598:	2101      	movs	r1, #1
 800759a:	4618      	mov	r0, r3
 800759c:	f001 fb4c 	bl	8008c38 <RCCEx_PLL2_Config>
 80075a0:	4603      	mov	r3, r0
 80075a2:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80075a4:	e012      	b.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	3324      	adds	r3, #36	; 0x24
 80075aa:	2101      	movs	r1, #1
 80075ac:	4618      	mov	r0, r3
 80075ae:	f001 fbf5 	bl	8008d9c <RCCEx_PLL3_Config>
 80075b2:	4603      	mov	r3, r0
 80075b4:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80075b6:	e009      	b.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80075b8:	2301      	movs	r3, #1
 80075ba:	75fb      	strb	r3, [r7, #23]
      break;
 80075bc:	e006      	b.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80075be:	bf00      	nop
 80075c0:	e004      	b.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80075c2:	bf00      	nop
 80075c4:	e002      	b.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80075c6:	bf00      	nop
 80075c8:	e000      	b.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80075ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075cc:	7dfb      	ldrb	r3, [r7, #23]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d109      	bne.n	80075e6 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80075d2:	4b5a      	ldr	r3, [pc, #360]	; (800773c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80075d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075d6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075de:	4957      	ldr	r1, [pc, #348]	; (800773c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80075e0:	4313      	orrs	r3, r2
 80075e2:	650b      	str	r3, [r1, #80]	; 0x50
 80075e4:	e001      	b.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075e6:	7dfb      	ldrb	r3, [r7, #23]
 80075e8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d044      	beq.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80075fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007600:	d01b      	beq.n	800763a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8007602:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007606:	d805      	bhi.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8007608:	2b00      	cmp	r3, #0
 800760a:	d022      	beq.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800760c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007610:	d00a      	beq.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8007612:	e01b      	b.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8007614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007618:	d01d      	beq.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800761a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800761e:	d01c      	beq.n	800765a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8007620:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007624:	d01b      	beq.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8007626:	e011      	b.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	3304      	adds	r3, #4
 800762c:	2101      	movs	r1, #1
 800762e:	4618      	mov	r0, r3
 8007630:	f001 fb02 	bl	8008c38 <RCCEx_PLL2_Config>
 8007634:	4603      	mov	r3, r0
 8007636:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007638:	e012      	b.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	3324      	adds	r3, #36	; 0x24
 800763e:	2101      	movs	r1, #1
 8007640:	4618      	mov	r0, r3
 8007642:	f001 fbab 	bl	8008d9c <RCCEx_PLL3_Config>
 8007646:	4603      	mov	r3, r0
 8007648:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800764a:	e009      	b.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800764c:	2301      	movs	r3, #1
 800764e:	75fb      	strb	r3, [r7, #23]
      break;
 8007650:	e006      	b.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8007652:	bf00      	nop
 8007654:	e004      	b.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8007656:	bf00      	nop
 8007658:	e002      	b.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800765a:	bf00      	nop
 800765c:	e000      	b.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800765e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007660:	7dfb      	ldrb	r3, [r7, #23]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d10a      	bne.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007666:	4b35      	ldr	r3, [pc, #212]	; (800773c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800766a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007674:	4931      	ldr	r1, [pc, #196]	; (800773c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007676:	4313      	orrs	r3, r2
 8007678:	658b      	str	r3, [r1, #88]	; 0x58
 800767a:	e001      	b.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800767c:	7dfb      	ldrb	r3, [r7, #23]
 800767e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007688:	2b00      	cmp	r3, #0
 800768a:	d02d      	beq.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007690:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007694:	d005      	beq.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8007696:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800769a:	d009      	beq.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0x538>
 800769c:	2b00      	cmp	r3, #0
 800769e:	d013      	beq.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80076a0:	e00f      	b.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076a2:	4b26      	ldr	r3, [pc, #152]	; (800773c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80076a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076a6:	4a25      	ldr	r2, [pc, #148]	; (800773c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80076a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076ac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80076ae:	e00c      	b.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	3304      	adds	r3, #4
 80076b4:	2101      	movs	r1, #1
 80076b6:	4618      	mov	r0, r3
 80076b8:	f001 fabe 	bl	8008c38 <RCCEx_PLL2_Config>
 80076bc:	4603      	mov	r3, r0
 80076be:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80076c0:	e003      	b.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80076c2:	2301      	movs	r3, #1
 80076c4:	75fb      	strb	r3, [r7, #23]
      break;
 80076c6:	e000      	b.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 80076c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076ca:	7dfb      	ldrb	r3, [r7, #23]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d109      	bne.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80076d0:	4b1a      	ldr	r3, [pc, #104]	; (800773c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80076d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076d4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076dc:	4917      	ldr	r1, [pc, #92]	; (800773c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80076de:	4313      	orrs	r3, r2
 80076e0:	650b      	str	r3, [r1, #80]	; 0x50
 80076e2:	e001      	b.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076e4:	7dfb      	ldrb	r3, [r7, #23]
 80076e6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d035      	beq.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076f8:	2b03      	cmp	r3, #3
 80076fa:	d81b      	bhi.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80076fc:	a201      	add	r2, pc, #4	; (adr r2, 8007704 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80076fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007702:	bf00      	nop
 8007704:	08007741 	.word	0x08007741
 8007708:	08007715 	.word	0x08007715
 800770c:	08007723 	.word	0x08007723
 8007710:	08007741 	.word	0x08007741
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007714:	4b09      	ldr	r3, [pc, #36]	; (800773c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007718:	4a08      	ldr	r2, [pc, #32]	; (800773c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800771a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800771e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007720:	e00f      	b.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	3304      	adds	r3, #4
 8007726:	2102      	movs	r1, #2
 8007728:	4618      	mov	r0, r3
 800772a:	f001 fa85 	bl	8008c38 <RCCEx_PLL2_Config>
 800772e:	4603      	mov	r3, r0
 8007730:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007732:	e006      	b.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007734:	2301      	movs	r3, #1
 8007736:	75fb      	strb	r3, [r7, #23]
      break;
 8007738:	e003      	b.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 800773a:	bf00      	nop
 800773c:	58024400 	.word	0x58024400
      break;
 8007740:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007742:	7dfb      	ldrb	r3, [r7, #23]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d109      	bne.n	800775c <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007748:	4bba      	ldr	r3, [pc, #744]	; (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800774a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800774c:	f023 0203 	bic.w	r2, r3, #3
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007754:	49b7      	ldr	r1, [pc, #732]	; (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007756:	4313      	orrs	r3, r2
 8007758:	64cb      	str	r3, [r1, #76]	; 0x4c
 800775a:	e001      	b.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800775c:	7dfb      	ldrb	r3, [r7, #23]
 800775e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007768:	2b00      	cmp	r3, #0
 800776a:	f000 8086 	beq.w	800787a <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800776e:	4bb2      	ldr	r3, [pc, #712]	; (8007a38 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4ab1      	ldr	r2, [pc, #708]	; (8007a38 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007774:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007778:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800777a:	f7fa f983 	bl	8001a84 <HAL_GetTick>
 800777e:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007780:	e009      	b.n	8007796 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007782:	f7fa f97f 	bl	8001a84 <HAL_GetTick>
 8007786:	4602      	mov	r2, r0
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	1ad3      	subs	r3, r2, r3
 800778c:	2b64      	cmp	r3, #100	; 0x64
 800778e:	d902      	bls.n	8007796 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8007790:	2303      	movs	r3, #3
 8007792:	75fb      	strb	r3, [r7, #23]
        break;
 8007794:	e005      	b.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007796:	4ba8      	ldr	r3, [pc, #672]	; (8007a38 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d0ef      	beq.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 80077a2:	7dfb      	ldrb	r3, [r7, #23]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d166      	bne.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80077a8:	4ba2      	ldr	r3, [pc, #648]	; (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80077aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80077b2:	4053      	eors	r3, r2
 80077b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d013      	beq.n	80077e4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80077bc:	4b9d      	ldr	r3, [pc, #628]	; (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80077be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077c4:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80077c6:	4b9b      	ldr	r3, [pc, #620]	; (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80077c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077ca:	4a9a      	ldr	r2, [pc, #616]	; (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80077cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077d0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80077d2:	4b98      	ldr	r3, [pc, #608]	; (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80077d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077d6:	4a97      	ldr	r2, [pc, #604]	; (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80077d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077dc:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80077de:	4a95      	ldr	r2, [pc, #596]	; (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80077ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077ee:	d115      	bne.n	800781c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077f0:	f7fa f948 	bl	8001a84 <HAL_GetTick>
 80077f4:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80077f6:	e00b      	b.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80077f8:	f7fa f944 	bl	8001a84 <HAL_GetTick>
 80077fc:	4602      	mov	r2, r0
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	1ad3      	subs	r3, r2, r3
 8007802:	f241 3288 	movw	r2, #5000	; 0x1388
 8007806:	4293      	cmp	r3, r2
 8007808:	d902      	bls.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 800780a:	2303      	movs	r3, #3
 800780c:	75fb      	strb	r3, [r7, #23]
            break;
 800780e:	e005      	b.n	800781c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007810:	4b88      	ldr	r3, [pc, #544]	; (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007814:	f003 0302 	and.w	r3, r3, #2
 8007818:	2b00      	cmp	r3, #0
 800781a:	d0ed      	beq.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 800781c:	7dfb      	ldrb	r3, [r7, #23]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d126      	bne.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007828:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800782c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007830:	d10d      	bne.n	800784e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8007832:	4b80      	ldr	r3, [pc, #512]	; (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007834:	691b      	ldr	r3, [r3, #16]
 8007836:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007840:	0919      	lsrs	r1, r3, #4
 8007842:	4b7e      	ldr	r3, [pc, #504]	; (8007a3c <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8007844:	400b      	ands	r3, r1
 8007846:	497b      	ldr	r1, [pc, #492]	; (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007848:	4313      	orrs	r3, r2
 800784a:	610b      	str	r3, [r1, #16]
 800784c:	e005      	b.n	800785a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800784e:	4b79      	ldr	r3, [pc, #484]	; (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007850:	691b      	ldr	r3, [r3, #16]
 8007852:	4a78      	ldr	r2, [pc, #480]	; (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007854:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007858:	6113      	str	r3, [r2, #16]
 800785a:	4b76      	ldr	r3, [pc, #472]	; (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800785c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007864:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007868:	4972      	ldr	r1, [pc, #456]	; (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800786a:	4313      	orrs	r3, r2
 800786c:	670b      	str	r3, [r1, #112]	; 0x70
 800786e:	e004      	b.n	800787a <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007870:	7dfb      	ldrb	r3, [r7, #23]
 8007872:	75bb      	strb	r3, [r7, #22]
 8007874:	e001      	b.n	800787a <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007876:	7dfb      	ldrb	r3, [r7, #23]
 8007878:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f003 0301 	and.w	r3, r3, #1
 8007882:	2b00      	cmp	r3, #0
 8007884:	d07d      	beq.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800788a:	2b28      	cmp	r3, #40	; 0x28
 800788c:	d866      	bhi.n	800795c <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 800788e:	a201      	add	r2, pc, #4	; (adr r2, 8007894 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007894:	08007963 	.word	0x08007963
 8007898:	0800795d 	.word	0x0800795d
 800789c:	0800795d 	.word	0x0800795d
 80078a0:	0800795d 	.word	0x0800795d
 80078a4:	0800795d 	.word	0x0800795d
 80078a8:	0800795d 	.word	0x0800795d
 80078ac:	0800795d 	.word	0x0800795d
 80078b0:	0800795d 	.word	0x0800795d
 80078b4:	08007939 	.word	0x08007939
 80078b8:	0800795d 	.word	0x0800795d
 80078bc:	0800795d 	.word	0x0800795d
 80078c0:	0800795d 	.word	0x0800795d
 80078c4:	0800795d 	.word	0x0800795d
 80078c8:	0800795d 	.word	0x0800795d
 80078cc:	0800795d 	.word	0x0800795d
 80078d0:	0800795d 	.word	0x0800795d
 80078d4:	0800794b 	.word	0x0800794b
 80078d8:	0800795d 	.word	0x0800795d
 80078dc:	0800795d 	.word	0x0800795d
 80078e0:	0800795d 	.word	0x0800795d
 80078e4:	0800795d 	.word	0x0800795d
 80078e8:	0800795d 	.word	0x0800795d
 80078ec:	0800795d 	.word	0x0800795d
 80078f0:	0800795d 	.word	0x0800795d
 80078f4:	08007963 	.word	0x08007963
 80078f8:	0800795d 	.word	0x0800795d
 80078fc:	0800795d 	.word	0x0800795d
 8007900:	0800795d 	.word	0x0800795d
 8007904:	0800795d 	.word	0x0800795d
 8007908:	0800795d 	.word	0x0800795d
 800790c:	0800795d 	.word	0x0800795d
 8007910:	0800795d 	.word	0x0800795d
 8007914:	08007963 	.word	0x08007963
 8007918:	0800795d 	.word	0x0800795d
 800791c:	0800795d 	.word	0x0800795d
 8007920:	0800795d 	.word	0x0800795d
 8007924:	0800795d 	.word	0x0800795d
 8007928:	0800795d 	.word	0x0800795d
 800792c:	0800795d 	.word	0x0800795d
 8007930:	0800795d 	.word	0x0800795d
 8007934:	08007963 	.word	0x08007963
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	3304      	adds	r3, #4
 800793c:	2101      	movs	r1, #1
 800793e:	4618      	mov	r0, r3
 8007940:	f001 f97a 	bl	8008c38 <RCCEx_PLL2_Config>
 8007944:	4603      	mov	r3, r0
 8007946:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007948:	e00c      	b.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	3324      	adds	r3, #36	; 0x24
 800794e:	2101      	movs	r1, #1
 8007950:	4618      	mov	r0, r3
 8007952:	f001 fa23 	bl	8008d9c <RCCEx_PLL3_Config>
 8007956:	4603      	mov	r3, r0
 8007958:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800795a:	e003      	b.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800795c:	2301      	movs	r3, #1
 800795e:	75fb      	strb	r3, [r7, #23]
      break;
 8007960:	e000      	b.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8007962:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007964:	7dfb      	ldrb	r3, [r7, #23]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d109      	bne.n	800797e <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800796a:	4b32      	ldr	r3, [pc, #200]	; (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800796c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800796e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007976:	492f      	ldr	r1, [pc, #188]	; (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007978:	4313      	orrs	r3, r2
 800797a:	654b      	str	r3, [r1, #84]	; 0x54
 800797c:	e001      	b.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800797e:	7dfb      	ldrb	r3, [r7, #23]
 8007980:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f003 0302 	and.w	r3, r3, #2
 800798a:	2b00      	cmp	r3, #0
 800798c:	d037      	beq.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007992:	2b05      	cmp	r3, #5
 8007994:	d820      	bhi.n	80079d8 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8007996:	a201      	add	r2, pc, #4	; (adr r2, 800799c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8007998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800799c:	080079df 	.word	0x080079df
 80079a0:	080079b5 	.word	0x080079b5
 80079a4:	080079c7 	.word	0x080079c7
 80079a8:	080079df 	.word	0x080079df
 80079ac:	080079df 	.word	0x080079df
 80079b0:	080079df 	.word	0x080079df
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	3304      	adds	r3, #4
 80079b8:	2101      	movs	r1, #1
 80079ba:	4618      	mov	r0, r3
 80079bc:	f001 f93c 	bl	8008c38 <RCCEx_PLL2_Config>
 80079c0:	4603      	mov	r3, r0
 80079c2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80079c4:	e00c      	b.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	3324      	adds	r3, #36	; 0x24
 80079ca:	2101      	movs	r1, #1
 80079cc:	4618      	mov	r0, r3
 80079ce:	f001 f9e5 	bl	8008d9c <RCCEx_PLL3_Config>
 80079d2:	4603      	mov	r3, r0
 80079d4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80079d6:	e003      	b.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80079d8:	2301      	movs	r3, #1
 80079da:	75fb      	strb	r3, [r7, #23]
      break;
 80079dc:	e000      	b.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 80079de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079e0:	7dfb      	ldrb	r3, [r7, #23]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d109      	bne.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80079e6:	4b13      	ldr	r3, [pc, #76]	; (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80079e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079ea:	f023 0207 	bic.w	r2, r3, #7
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079f2:	4910      	ldr	r1, [pc, #64]	; (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80079f4:	4313      	orrs	r3, r2
 80079f6:	654b      	str	r3, [r1, #84]	; 0x54
 80079f8:	e001      	b.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079fa:	7dfb      	ldrb	r3, [r7, #23]
 80079fc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f003 0304 	and.w	r3, r3, #4
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d040      	beq.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a10:	2b05      	cmp	r3, #5
 8007a12:	d827      	bhi.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8007a14:	a201      	add	r2, pc, #4	; (adr r2, 8007a1c <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8007a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a1a:	bf00      	nop
 8007a1c:	08007a6b 	.word	0x08007a6b
 8007a20:	08007a41 	.word	0x08007a41
 8007a24:	08007a53 	.word	0x08007a53
 8007a28:	08007a6b 	.word	0x08007a6b
 8007a2c:	08007a6b 	.word	0x08007a6b
 8007a30:	08007a6b 	.word	0x08007a6b
 8007a34:	58024400 	.word	0x58024400
 8007a38:	58024800 	.word	0x58024800
 8007a3c:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	3304      	adds	r3, #4
 8007a44:	2101      	movs	r1, #1
 8007a46:	4618      	mov	r0, r3
 8007a48:	f001 f8f6 	bl	8008c38 <RCCEx_PLL2_Config>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007a50:	e00c      	b.n	8007a6c <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	3324      	adds	r3, #36	; 0x24
 8007a56:	2101      	movs	r1, #1
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f001 f99f 	bl	8008d9c <RCCEx_PLL3_Config>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007a62:	e003      	b.n	8007a6c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a64:	2301      	movs	r3, #1
 8007a66:	75fb      	strb	r3, [r7, #23]
      break;
 8007a68:	e000      	b.n	8007a6c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8007a6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a6c:	7dfb      	ldrb	r3, [r7, #23]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d10a      	bne.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007a72:	4bb2      	ldr	r3, [pc, #712]	; (8007d3c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a76:	f023 0207 	bic.w	r2, r3, #7
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a80:	49ae      	ldr	r1, [pc, #696]	; (8007d3c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007a82:	4313      	orrs	r3, r2
 8007a84:	658b      	str	r3, [r1, #88]	; 0x58
 8007a86:	e001      	b.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a88:	7dfb      	ldrb	r3, [r7, #23]
 8007a8a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f003 0320 	and.w	r3, r3, #32
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d044      	beq.n	8007b22 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007aa2:	d01b      	beq.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0x964>
 8007aa4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007aa8:	d805      	bhi.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d022      	beq.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8007aae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ab2:	d00a      	beq.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0x952>
 8007ab4:	e01b      	b.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x976>
 8007ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007aba:	d01d      	beq.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8007abc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ac0:	d01c      	beq.n	8007afc <HAL_RCCEx_PeriphCLKConfig+0x984>
 8007ac2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007ac6:	d01b      	beq.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8007ac8:	e011      	b.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	3304      	adds	r3, #4
 8007ace:	2100      	movs	r1, #0
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f001 f8b1 	bl	8008c38 <RCCEx_PLL2_Config>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007ada:	e012      	b.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	3324      	adds	r3, #36	; 0x24
 8007ae0:	2102      	movs	r1, #2
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f001 f95a 	bl	8008d9c <RCCEx_PLL3_Config>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007aec:	e009      	b.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007aee:	2301      	movs	r3, #1
 8007af0:	75fb      	strb	r3, [r7, #23]
      break;
 8007af2:	e006      	b.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007af4:	bf00      	nop
 8007af6:	e004      	b.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007af8:	bf00      	nop
 8007afa:	e002      	b.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007afc:	bf00      	nop
 8007afe:	e000      	b.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007b00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b02:	7dfb      	ldrb	r3, [r7, #23]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d10a      	bne.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007b08:	4b8c      	ldr	r3, [pc, #560]	; (8007d3c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b0c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b16:	4989      	ldr	r1, [pc, #548]	; (8007d3c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	654b      	str	r3, [r1, #84]	; 0x54
 8007b1c:	e001      	b.n	8007b22 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b1e:	7dfb      	ldrb	r3, [r7, #23]
 8007b20:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d044      	beq.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007b34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b38:	d01b      	beq.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8007b3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b3e:	d805      	bhi.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d022      	beq.n	8007b8a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8007b44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b48:	d00a      	beq.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8007b4a:	e01b      	b.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8007b4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b50:	d01d      	beq.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8007b52:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007b56:	d01c      	beq.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8007b58:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007b5c:	d01b      	beq.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8007b5e:	e011      	b.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	3304      	adds	r3, #4
 8007b64:	2100      	movs	r1, #0
 8007b66:	4618      	mov	r0, r3
 8007b68:	f001 f866 	bl	8008c38 <RCCEx_PLL2_Config>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007b70:	e012      	b.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	3324      	adds	r3, #36	; 0x24
 8007b76:	2102      	movs	r1, #2
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f001 f90f 	bl	8008d9c <RCCEx_PLL3_Config>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007b82:	e009      	b.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b84:	2301      	movs	r3, #1
 8007b86:	75fb      	strb	r3, [r7, #23]
      break;
 8007b88:	e006      	b.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007b8a:	bf00      	nop
 8007b8c:	e004      	b.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007b8e:	bf00      	nop
 8007b90:	e002      	b.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007b92:	bf00      	nop
 8007b94:	e000      	b.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007b96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b98:	7dfb      	ldrb	r3, [r7, #23]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d10a      	bne.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007b9e:	4b67      	ldr	r3, [pc, #412]	; (8007d3c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ba2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007bac:	4963      	ldr	r1, [pc, #396]	; (8007d3c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	658b      	str	r3, [r1, #88]	; 0x58
 8007bb2:	e001      	b.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bb4:	7dfb      	ldrb	r3, [r7, #23]
 8007bb6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d044      	beq.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007bca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007bce:	d01b      	beq.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8007bd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007bd4:	d805      	bhi.n	8007be2 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d022      	beq.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8007bda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007bde:	d00a      	beq.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007be0:	e01b      	b.n	8007c1a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8007be2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007be6:	d01d      	beq.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8007be8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007bec:	d01c      	beq.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8007bee:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007bf2:	d01b      	beq.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8007bf4:	e011      	b.n	8007c1a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	3304      	adds	r3, #4
 8007bfa:	2100      	movs	r1, #0
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f001 f81b 	bl	8008c38 <RCCEx_PLL2_Config>
 8007c02:	4603      	mov	r3, r0
 8007c04:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007c06:	e012      	b.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	3324      	adds	r3, #36	; 0x24
 8007c0c:	2102      	movs	r1, #2
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f001 f8c4 	bl	8008d9c <RCCEx_PLL3_Config>
 8007c14:	4603      	mov	r3, r0
 8007c16:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007c18:	e009      	b.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	75fb      	strb	r3, [r7, #23]
      break;
 8007c1e:	e006      	b.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007c20:	bf00      	nop
 8007c22:	e004      	b.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007c24:	bf00      	nop
 8007c26:	e002      	b.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007c28:	bf00      	nop
 8007c2a:	e000      	b.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007c2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c2e:	7dfb      	ldrb	r3, [r7, #23]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d10a      	bne.n	8007c4a <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007c34:	4b41      	ldr	r3, [pc, #260]	; (8007d3c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c38:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007c42:	493e      	ldr	r1, [pc, #248]	; (8007d3c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007c44:	4313      	orrs	r3, r2
 8007c46:	658b      	str	r3, [r1, #88]	; 0x58
 8007c48:	e001      	b.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c4a:	7dfb      	ldrb	r3, [r7, #23]
 8007c4c:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f003 0308 	and.w	r3, r3, #8
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d01a      	beq.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c64:	d10a      	bne.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	3324      	adds	r3, #36	; 0x24
 8007c6a:	2102      	movs	r1, #2
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f001 f895 	bl	8008d9c <RCCEx_PLL3_Config>
 8007c72:	4603      	mov	r3, r0
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d001      	beq.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8007c78:	2301      	movs	r3, #1
 8007c7a:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007c7c:	4b2f      	ldr	r3, [pc, #188]	; (8007d3c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007c7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c80:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c8a:	492c      	ldr	r1, [pc, #176]	; (8007d3c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f003 0310 	and.w	r3, r3, #16
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d01a      	beq.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007ca2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ca6:	d10a      	bne.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	3324      	adds	r3, #36	; 0x24
 8007cac:	2102      	movs	r1, #2
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f001 f874 	bl	8008d9c <RCCEx_PLL3_Config>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d001      	beq.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8007cba:	2301      	movs	r3, #1
 8007cbc:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007cbe:	4b1f      	ldr	r3, [pc, #124]	; (8007d3c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cc2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007ccc:	491b      	ldr	r1, [pc, #108]	; (8007d3c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d032      	beq.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007ce4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ce8:	d00d      	beq.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8007cea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007cee:	d016      	beq.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d111      	bne.n	8007d18 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	3304      	adds	r3, #4
 8007cf8:	2100      	movs	r1, #0
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f000 ff9c 	bl	8008c38 <RCCEx_PLL2_Config>
 8007d00:	4603      	mov	r3, r0
 8007d02:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007d04:	e00c      	b.n	8007d20 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	3324      	adds	r3, #36	; 0x24
 8007d0a:	2102      	movs	r1, #2
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f001 f845 	bl	8008d9c <RCCEx_PLL3_Config>
 8007d12:	4603      	mov	r3, r0
 8007d14:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007d16:	e003      	b.n	8007d20 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d18:	2301      	movs	r3, #1
 8007d1a:	75fb      	strb	r3, [r7, #23]
      break;
 8007d1c:	e000      	b.n	8007d20 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8007d1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d20:	7dfb      	ldrb	r3, [r7, #23]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d10c      	bne.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007d26:	4b05      	ldr	r3, [pc, #20]	; (8007d3c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d2a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007d34:	4901      	ldr	r1, [pc, #4]	; (8007d3c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007d36:	4313      	orrs	r3, r2
 8007d38:	658b      	str	r3, [r1, #88]	; 0x58
 8007d3a:	e003      	b.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8007d3c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d40:	7dfb      	ldrb	r3, [r7, #23]
 8007d42:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d02f      	beq.n	8007db0 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d56:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007d5a:	d00c      	beq.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8007d5c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007d60:	d015      	beq.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8007d62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d66:	d10f      	bne.n	8007d88 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d68:	4b79      	ldr	r3, [pc, #484]	; (8007f50 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d6c:	4a78      	ldr	r2, [pc, #480]	; (8007f50 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007d6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d72:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007d74:	e00c      	b.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	3324      	adds	r3, #36	; 0x24
 8007d7a:	2101      	movs	r1, #1
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f001 f80d 	bl	8008d9c <RCCEx_PLL3_Config>
 8007d82:	4603      	mov	r3, r0
 8007d84:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007d86:	e003      	b.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d88:	2301      	movs	r3, #1
 8007d8a:	75fb      	strb	r3, [r7, #23]
      break;
 8007d8c:	e000      	b.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8007d8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d90:	7dfb      	ldrb	r3, [r7, #23]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d10a      	bne.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007d96:	4b6e      	ldr	r3, [pc, #440]	; (8007f50 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d9a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007da4:	496a      	ldr	r1, [pc, #424]	; (8007f50 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007da6:	4313      	orrs	r3, r2
 8007da8:	654b      	str	r3, [r1, #84]	; 0x54
 8007daa:	e001      	b.n	8007db0 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dac:	7dfb      	ldrb	r3, [r7, #23]
 8007dae:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d029      	beq.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d003      	beq.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8007dc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007dc8:	d007      	beq.n	8007dda <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8007dca:	e00f      	b.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007dcc:	4b60      	ldr	r3, [pc, #384]	; (8007f50 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dd0:	4a5f      	ldr	r2, [pc, #380]	; (8007f50 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007dd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007dd6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007dd8:	e00b      	b.n	8007df2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	3304      	adds	r3, #4
 8007dde:	2102      	movs	r1, #2
 8007de0:	4618      	mov	r0, r3
 8007de2:	f000 ff29 	bl	8008c38 <RCCEx_PLL2_Config>
 8007de6:	4603      	mov	r3, r0
 8007de8:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007dea:	e002      	b.n	8007df2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8007dec:	2301      	movs	r3, #1
 8007dee:	75fb      	strb	r3, [r7, #23]
      break;
 8007df0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007df2:	7dfb      	ldrb	r3, [r7, #23]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d109      	bne.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007df8:	4b55      	ldr	r3, [pc, #340]	; (8007f50 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007dfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dfc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e04:	4952      	ldr	r1, [pc, #328]	; (8007f50 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007e06:	4313      	orrs	r3, r2
 8007e08:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007e0a:	e001      	b.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e0c:	7dfb      	ldrb	r3, [r7, #23]
 8007e0e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d00a      	beq.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	3324      	adds	r3, #36	; 0x24
 8007e20:	2102      	movs	r1, #2
 8007e22:	4618      	mov	r0, r3
 8007e24:	f000 ffba 	bl	8008d9c <RCCEx_PLL3_Config>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d001      	beq.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8007e2e:	2301      	movs	r3, #1
 8007e30:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d02f      	beq.n	8007e9e <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e46:	d00c      	beq.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007e48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e4c:	d802      	bhi.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d011      	beq.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8007e52:	e00d      	b.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8007e54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e58:	d00f      	beq.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8007e5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e5e:	d00e      	beq.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8007e60:	e006      	b.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e62:	4b3b      	ldr	r3, [pc, #236]	; (8007f50 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e66:	4a3a      	ldr	r2, [pc, #232]	; (8007f50 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007e68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e6c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007e6e:	e007      	b.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e70:	2301      	movs	r3, #1
 8007e72:	75fb      	strb	r3, [r7, #23]
      break;
 8007e74:	e004      	b.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007e76:	bf00      	nop
 8007e78:	e002      	b.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007e7a:	bf00      	nop
 8007e7c:	e000      	b.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007e7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e80:	7dfb      	ldrb	r3, [r7, #23]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d109      	bne.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007e86:	4b32      	ldr	r3, [pc, #200]	; (8007f50 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e8a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e92:	492f      	ldr	r1, [pc, #188]	; (8007f50 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007e94:	4313      	orrs	r3, r2
 8007e96:	654b      	str	r3, [r1, #84]	; 0x54
 8007e98:	e001      	b.n	8007e9e <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e9a:	7dfb      	ldrb	r3, [r7, #23]
 8007e9c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d008      	beq.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007eaa:	4b29      	ldr	r3, [pc, #164]	; (8007f50 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007eac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007eae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007eb6:	4926      	ldr	r1, [pc, #152]	; (8007f50 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d009      	beq.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007ec8:	4b21      	ldr	r3, [pc, #132]	; (8007f50 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007eca:	691b      	ldr	r3, [r3, #16]
 8007ecc:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007ed6:	491e      	ldr	r1, [pc, #120]	; (8007f50 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d008      	beq.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007ee8:	4b19      	ldr	r3, [pc, #100]	; (8007f50 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007eea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007eec:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ef4:	4916      	ldr	r1, [pc, #88]	; (8007f50 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d00d      	beq.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007f06:	4b12      	ldr	r3, [pc, #72]	; (8007f50 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007f08:	691b      	ldr	r3, [r3, #16]
 8007f0a:	4a11      	ldr	r2, [pc, #68]	; (8007f50 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007f0c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007f10:	6113      	str	r3, [r2, #16]
 8007f12:	4b0f      	ldr	r3, [pc, #60]	; (8007f50 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007f14:	691a      	ldr	r2, [r3, #16]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007f1c:	490c      	ldr	r1, [pc, #48]	; (8007f50 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	da08      	bge.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007f2a:	4b09      	ldr	r3, [pc, #36]	; (8007f50 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f2e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f36:	4906      	ldr	r1, [pc, #24]	; (8007f50 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007f38:	4313      	orrs	r3, r2
 8007f3a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8007f3c:	7dbb      	ldrb	r3, [r7, #22]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d101      	bne.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8007f42:	2300      	movs	r3, #0
 8007f44:	e000      	b.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 8007f46:	2301      	movs	r3, #1
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3718      	adds	r7, #24
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}
 8007f50:	58024400 	.word	0x58024400

08007f54 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b090      	sub	sp, #64	; 0x40
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f62:	d150      	bne.n	8008006 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8007f64:	4ba1      	ldr	r3, [pc, #644]	; (80081ec <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007f66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f68:	f003 0307 	and.w	r3, r3, #7
 8007f6c:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f70:	2b04      	cmp	r3, #4
 8007f72:	d844      	bhi.n	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8007f74:	a201      	add	r2, pc, #4	; (adr r2, 8007f7c <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8007f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f7a:	bf00      	nop
 8007f7c:	08007f91 	.word	0x08007f91
 8007f80:	08007fa1 	.word	0x08007fa1
 8007f84:	08007fb1 	.word	0x08007fb1
 8007f88:	08007ff9 	.word	0x08007ff9
 8007f8c:	08007fc1 	.word	0x08007fc1
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f94:	4618      	mov	r0, r3
 8007f96:	f000 fd03 	bl	80089a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f9e:	e241      	b.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007fa0:	f107 0318 	add.w	r3, r7, #24
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f000 fa63 	bl	8008470 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007faa:	69bb      	ldr	r3, [r7, #24]
 8007fac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007fae:	e239      	b.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007fb0:	f107 030c 	add.w	r3, r7, #12
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f000 fba7 	bl	8008708 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007fbe:	e231      	b.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007fc0:	4b8a      	ldr	r3, [pc, #552]	; (80081ec <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007fc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fc4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007fc8:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007fca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d102      	bne.n	8007fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007fd0:	4b87      	ldr	r3, [pc, #540]	; (80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007fd4:	e226      	b.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fd8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007fdc:	d102      	bne.n	8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8007fde:	4b85      	ldr	r3, [pc, #532]	; (80081f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007fe2:	e21f      	b.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fe6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fea:	d102      	bne.n	8007ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8007fec:	4b82      	ldr	r3, [pc, #520]	; (80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007fee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ff0:	e218      	b.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ff6:	e215      	b.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007ff8:	4b80      	ldr	r3, [pc, #512]	; (80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8007ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ffc:	e212      	b.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8007ffe:	2300      	movs	r3, #0
 8008000:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008002:	bf00      	nop
 8008004:	e20e      	b.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800800c:	d14f      	bne.n	80080ae <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800800e:	4b77      	ldr	r3, [pc, #476]	; (80081ec <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008010:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008012:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8008016:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800801a:	2b80      	cmp	r3, #128	; 0x80
 800801c:	d01c      	beq.n	8008058 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800801e:	2b80      	cmp	r3, #128	; 0x80
 8008020:	d804      	bhi.n	800802c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8008022:	2b00      	cmp	r3, #0
 8008024:	d008      	beq.n	8008038 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8008026:	2b40      	cmp	r3, #64	; 0x40
 8008028:	d00e      	beq.n	8008048 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800802a:	e03c      	b.n	80080a6 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 800802c:	2bc0      	cmp	r3, #192	; 0xc0
 800802e:	d037      	beq.n	80080a0 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8008030:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008034:	d018      	beq.n	8008068 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8008036:	e036      	b.n	80080a6 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008038:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800803c:	4618      	mov	r0, r3
 800803e:	f000 fcaf 	bl	80089a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008044:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008046:	e1ed      	b.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008048:	f107 0318 	add.w	r3, r7, #24
 800804c:	4618      	mov	r0, r3
 800804e:	f000 fa0f 	bl	8008470 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008052:	69bb      	ldr	r3, [r7, #24]
 8008054:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008056:	e1e5      	b.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008058:	f107 030c 	add.w	r3, r7, #12
 800805c:	4618      	mov	r0, r3
 800805e:	f000 fb53 	bl	8008708 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008066:	e1dd      	b.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008068:	4b60      	ldr	r3, [pc, #384]	; (80081ec <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800806a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800806c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008070:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008074:	2b00      	cmp	r3, #0
 8008076:	d102      	bne.n	800807e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008078:	4b5d      	ldr	r3, [pc, #372]	; (80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800807a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800807c:	e1d2      	b.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800807e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008080:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008084:	d102      	bne.n	800808c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 8008086:	4b5b      	ldr	r3, [pc, #364]	; (80081f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008088:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800808a:	e1cb      	b.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800808c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800808e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008092:	d102      	bne.n	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8008094:	4b58      	ldr	r3, [pc, #352]	; (80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008096:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008098:	e1c4      	b.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800809a:	2300      	movs	r3, #0
 800809c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800809e:	e1c1      	b.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80080a0:	4b56      	ldr	r3, [pc, #344]	; (80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80080a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080a4:	e1be      	b.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 80080a6:	2300      	movs	r3, #0
 80080a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080aa:	bf00      	nop
 80080ac:	e1ba      	b.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080b4:	d153      	bne.n	800815e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80080b6:	4b4d      	ldr	r3, [pc, #308]	; (80081ec <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80080b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080ba:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80080be:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80080c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80080c6:	d01f      	beq.n	8008108 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 80080c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80080cc:	d805      	bhi.n	80080da <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d00a      	beq.n	80080e8 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 80080d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80080d6:	d00f      	beq.n	80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 80080d8:	e03d      	b.n	8008156 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 80080da:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80080de:	d037      	beq.n	8008150 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 80080e0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80080e4:	d018      	beq.n	8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 80080e6:	e036      	b.n	8008156 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80080e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80080ec:	4618      	mov	r0, r3
 80080ee:	f000 fc57 	bl	80089a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80080f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080f6:	e195      	b.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080f8:	f107 0318 	add.w	r3, r7, #24
 80080fc:	4618      	mov	r0, r3
 80080fe:	f000 f9b7 	bl	8008470 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008102:	69bb      	ldr	r3, [r7, #24]
 8008104:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008106:	e18d      	b.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008108:	f107 030c 	add.w	r3, r7, #12
 800810c:	4618      	mov	r0, r3
 800810e:	f000 fafb 	bl	8008708 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008116:	e185      	b.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008118:	4b34      	ldr	r3, [pc, #208]	; (80081ec <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800811a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800811c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008120:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008124:	2b00      	cmp	r3, #0
 8008126:	d102      	bne.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008128:	4b31      	ldr	r3, [pc, #196]	; (80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800812a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800812c:	e17a      	b.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800812e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008130:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008134:	d102      	bne.n	800813c <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 8008136:	4b2f      	ldr	r3, [pc, #188]	; (80081f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008138:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800813a:	e173      	b.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800813c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800813e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008142:	d102      	bne.n	800814a <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 8008144:	4b2c      	ldr	r3, [pc, #176]	; (80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008146:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008148:	e16c      	b.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800814a:	2300      	movs	r3, #0
 800814c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800814e:	e169      	b.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008150:	4b2a      	ldr	r3, [pc, #168]	; (80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8008152:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008154:	e166      	b.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8008156:	2300      	movs	r3, #0
 8008158:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800815a:	bf00      	nop
 800815c:	e162      	b.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008164:	d15d      	bne.n	8008222 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8008166:	4b21      	ldr	r3, [pc, #132]	; (80081ec <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800816a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800816e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008172:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008176:	d01f      	beq.n	80081b8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8008178:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800817c:	d805      	bhi.n	800818a <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 800817e:	2b00      	cmp	r3, #0
 8008180:	d00a      	beq.n	8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8008182:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008186:	d00f      	beq.n	80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8008188:	e047      	b.n	800821a <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 800818a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800818e:	d041      	beq.n	8008214 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8008190:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008194:	d018      	beq.n	80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8008196:	e040      	b.n	800821a <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008198:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800819c:	4618      	mov	r0, r3
 800819e:	f000 fbff 	bl	80089a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80081a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081a6:	e13d      	b.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80081a8:	f107 0318 	add.w	r3, r7, #24
 80081ac:	4618      	mov	r0, r3
 80081ae:	f000 f95f 	bl	8008470 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80081b2:	69bb      	ldr	r3, [r7, #24]
 80081b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081b6:	e135      	b.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80081b8:	f107 030c 	add.w	r3, r7, #12
 80081bc:	4618      	mov	r0, r3
 80081be:	f000 faa3 	bl	8008708 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081c6:	e12d      	b.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80081c8:	4b08      	ldr	r3, [pc, #32]	; (80081ec <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80081ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80081d0:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80081d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d102      	bne.n	80081de <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80081d8:	4b05      	ldr	r3, [pc, #20]	; (80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80081da:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80081dc:	e122      	b.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80081de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80081e4:	d10c      	bne.n	8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 80081e6:	4b03      	ldr	r3, [pc, #12]	; (80081f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80081e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081ea:	e11b      	b.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 80081ec:	58024400 	.word	0x58024400
 80081f0:	03d09000 	.word	0x03d09000
 80081f4:	003d0900 	.word	0x003d0900
 80081f8:	017d7840 	.word	0x017d7840
 80081fc:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008202:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008206:	d102      	bne.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8008208:	4b89      	ldr	r3, [pc, #548]	; (8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800820a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800820c:	e10a      	b.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800820e:	2300      	movs	r3, #0
 8008210:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008212:	e107      	b.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008214:	4b87      	ldr	r3, [pc, #540]	; (8008434 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8008216:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008218:	e104      	b.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800821a:	2300      	movs	r3, #0
 800821c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800821e:	bf00      	nop
 8008220:	e100      	b.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008228:	d153      	bne.n	80082d2 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800822a:	4b83      	ldr	r3, [pc, #524]	; (8008438 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800822c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800822e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008232:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008236:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800823a:	d01f      	beq.n	800827c <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800823c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008240:	d805      	bhi.n	800824e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8008242:	2b00      	cmp	r3, #0
 8008244:	d00a      	beq.n	800825c <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8008246:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800824a:	d00f      	beq.n	800826c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 800824c:	e03d      	b.n	80082ca <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 800824e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008252:	d037      	beq.n	80082c4 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8008254:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008258:	d018      	beq.n	800828c <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800825a:	e036      	b.n	80082ca <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800825c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008260:	4618      	mov	r0, r3
 8008262:	f000 fb9d 	bl	80089a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008268:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800826a:	e0db      	b.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800826c:	f107 0318 	add.w	r3, r7, #24
 8008270:	4618      	mov	r0, r3
 8008272:	f000 f8fd 	bl	8008470 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008276:	69bb      	ldr	r3, [r7, #24]
 8008278:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800827a:	e0d3      	b.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800827c:	f107 030c 	add.w	r3, r7, #12
 8008280:	4618      	mov	r0, r3
 8008282:	f000 fa41 	bl	8008708 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800828a:	e0cb      	b.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800828c:	4b6a      	ldr	r3, [pc, #424]	; (8008438 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800828e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008290:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008294:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008298:	2b00      	cmp	r3, #0
 800829a:	d102      	bne.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800829c:	4b67      	ldr	r3, [pc, #412]	; (800843c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800829e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80082a0:	e0c0      	b.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80082a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80082a8:	d102      	bne.n	80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 80082aa:	4b65      	ldr	r3, [pc, #404]	; (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80082ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80082ae:	e0b9      	b.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80082b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082b6:	d102      	bne.n	80082be <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 80082b8:	4b5d      	ldr	r3, [pc, #372]	; (8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80082ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80082bc:	e0b2      	b.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80082be:	2300      	movs	r3, #0
 80082c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80082c2:	e0af      	b.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80082c4:	4b5b      	ldr	r3, [pc, #364]	; (8008434 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 80082c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80082c8:	e0ac      	b.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 80082ca:	2300      	movs	r3, #0
 80082cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80082ce:	bf00      	nop
 80082d0:	e0a8      	b.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80082d8:	d13d      	bne.n	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80082da:	4b57      	ldr	r3, [pc, #348]	; (8008438 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80082dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80082e2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80082e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082ea:	d00c      	beq.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80082ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80082f0:	d011      	beq.n	8008316 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d12b      	bne.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80082f6:	f107 0318 	add.w	r3, r7, #24
 80082fa:	4618      	mov	r0, r3
 80082fc:	f000 f8b8 	bl	8008470 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008300:	69bb      	ldr	r3, [r7, #24]
 8008302:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008304:	e08e      	b.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008306:	f107 030c 	add.w	r3, r7, #12
 800830a:	4618      	mov	r0, r3
 800830c:	f000 f9fc 	bl	8008708 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008314:	e086      	b.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008316:	4b48      	ldr	r3, [pc, #288]	; (8008438 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800831a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800831e:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008322:	2b00      	cmp	r3, #0
 8008324:	d102      	bne.n	800832c <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008326:	4b45      	ldr	r3, [pc, #276]	; (800843c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8008328:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800832a:	e07b      	b.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800832c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800832e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008332:	d102      	bne.n	800833a <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 8008334:	4b42      	ldr	r3, [pc, #264]	; (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008336:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008338:	e074      	b.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800833a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800833c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008340:	d102      	bne.n	8008348 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 8008342:	4b3b      	ldr	r3, [pc, #236]	; (8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8008344:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008346:	e06d      	b.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008348:	2300      	movs	r3, #0
 800834a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800834c:	e06a      	b.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800834e:	2300      	movs	r3, #0
 8008350:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008352:	bf00      	nop
 8008354:	e066      	b.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800835c:	d11f      	bne.n	800839e <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800835e:	4b36      	ldr	r3, [pc, #216]	; (8008438 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008362:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008366:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800836a:	2b00      	cmp	r3, #0
 800836c:	d003      	beq.n	8008376 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800836e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008372:	d008      	beq.n	8008386 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8008374:	e00f      	b.n	8008396 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008376:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800837a:	4618      	mov	r0, r3
 800837c:	f000 fb10 	bl	80089a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008382:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008384:	e04e      	b.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008386:	f107 0318 	add.w	r3, r7, #24
 800838a:	4618      	mov	r0, r3
 800838c:	f000 f870 	bl	8008470 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008390:	6a3b      	ldr	r3, [r7, #32]
 8008392:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008394:	e046      	b.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8008396:	2300      	movs	r3, #0
 8008398:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800839a:	bf00      	nop
 800839c:	e042      	b.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80083a4:	d13c      	bne.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80083a6:	4b24      	ldr	r3, [pc, #144]	; (8008438 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80083a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083aa:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80083ae:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80083b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083b6:	d01e      	beq.n	80083f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 80083b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083bc:	d805      	bhi.n	80083ca <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d00d      	beq.n	80083de <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80083c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80083c6:	d00e      	beq.n	80083e6 <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 80083c8:	e026      	b.n	8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 80083ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083ce:	d01d      	beq.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 80083d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80083d4:	d01d      	beq.n	8008412 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 80083d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80083da:	d014      	beq.n	8008406 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 80083dc:	e01c      	b.n	8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80083de:	f000 f831 	bl	8008444 <HAL_RCCEx_GetD3PCLK1Freq>
 80083e2:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 80083e4:	e01e      	b.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083e6:	f107 0318 	add.w	r3, r7, #24
 80083ea:	4618      	mov	r0, r3
 80083ec:	f000 f840 	bl	8008470 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80083f0:	69fb      	ldr	r3, [r7, #28]
 80083f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083f4:	e016      	b.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083f6:	f107 030c 	add.w	r3, r7, #12
 80083fa:	4618      	mov	r0, r3
 80083fc:	f000 f984 	bl	8008708 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008404:	e00e      	b.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 8008406:	4b0d      	ldr	r3, [pc, #52]	; (800843c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8008408:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800840a:	e00b      	b.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 800840c:	4b0c      	ldr	r3, [pc, #48]	; (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800840e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008410:	e008      	b.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 8008412:	4b07      	ldr	r3, [pc, #28]	; (8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8008414:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008416:	e005      	b.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8008418:	2300      	movs	r3, #0
 800841a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800841c:	bf00      	nop
 800841e:	e001      	b.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 8008420:	2300      	movs	r3, #0
 8008422:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8008424:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008426:	4618      	mov	r0, r3
 8008428:	3740      	adds	r7, #64	; 0x40
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}
 800842e:	bf00      	nop
 8008430:	017d7840 	.word	0x017d7840
 8008434:	00bb8000 	.word	0x00bb8000
 8008438:	58024400 	.word	0x58024400
 800843c:	03d09000 	.word	0x03d09000
 8008440:	003d0900 	.word	0x003d0900

08008444 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008448:	f7fe fe1e 	bl	8007088 <HAL_RCC_GetHCLKFreq>
 800844c:	4601      	mov	r1, r0
 800844e:	4b06      	ldr	r3, [pc, #24]	; (8008468 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008450:	6a1b      	ldr	r3, [r3, #32]
 8008452:	091b      	lsrs	r3, r3, #4
 8008454:	f003 0307 	and.w	r3, r3, #7
 8008458:	4a04      	ldr	r2, [pc, #16]	; (800846c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800845a:	5cd3      	ldrb	r3, [r2, r3]
 800845c:	f003 031f 	and.w	r3, r3, #31
 8008460:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008464:	4618      	mov	r0, r3
 8008466:	bd80      	pop	{r7, pc}
 8008468:	58024400 	.word	0x58024400
 800846c:	08015704 	.word	0x08015704

08008470 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8008470:	b480      	push	{r7}
 8008472:	b089      	sub	sp, #36	; 0x24
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008478:	4b9d      	ldr	r3, [pc, #628]	; (80086f0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800847a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800847c:	f003 0303 	and.w	r3, r3, #3
 8008480:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008482:	4b9b      	ldr	r3, [pc, #620]	; (80086f0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008486:	0b1b      	lsrs	r3, r3, #12
 8008488:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800848c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800848e:	4b98      	ldr	r3, [pc, #608]	; (80086f0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008492:	091b      	lsrs	r3, r3, #4
 8008494:	f003 0301 	and.w	r3, r3, #1
 8008498:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800849a:	4b95      	ldr	r3, [pc, #596]	; (80086f0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800849c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800849e:	08db      	lsrs	r3, r3, #3
 80084a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80084a4:	693a      	ldr	r2, [r7, #16]
 80084a6:	fb02 f303 	mul.w	r3, r2, r3
 80084aa:	ee07 3a90 	vmov	s15, r3
 80084ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084b2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	f000 810a 	beq.w	80086d2 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 80084be:	69bb      	ldr	r3, [r7, #24]
 80084c0:	2b01      	cmp	r3, #1
 80084c2:	d05a      	beq.n	800857a <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d302      	bcc.n	80084ce <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 80084c8:	2b02      	cmp	r3, #2
 80084ca:	d078      	beq.n	80085be <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 80084cc:	e099      	b.n	8008602 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80084ce:	4b88      	ldr	r3, [pc, #544]	; (80086f0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f003 0320 	and.w	r3, r3, #32
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d02d      	beq.n	8008536 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80084da:	4b85      	ldr	r3, [pc, #532]	; (80086f0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	08db      	lsrs	r3, r3, #3
 80084e0:	f003 0303 	and.w	r3, r3, #3
 80084e4:	4a83      	ldr	r2, [pc, #524]	; (80086f4 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 80084e6:	fa22 f303 	lsr.w	r3, r2, r3
 80084ea:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	ee07 3a90 	vmov	s15, r3
 80084f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	ee07 3a90 	vmov	s15, r3
 80084fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008500:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008504:	4b7a      	ldr	r3, [pc, #488]	; (80086f0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008508:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800850c:	ee07 3a90 	vmov	s15, r3
 8008510:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008514:	ed97 6a03 	vldr	s12, [r7, #12]
 8008518:	eddf 5a77 	vldr	s11, [pc, #476]	; 80086f8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800851c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008520:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008524:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008528:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800852c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008530:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008534:	e087      	b.n	8008646 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	ee07 3a90 	vmov	s15, r3
 800853c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008540:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80086fc <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8008544:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008548:	4b69      	ldr	r3, [pc, #420]	; (80086f0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800854a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800854c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008550:	ee07 3a90 	vmov	s15, r3
 8008554:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008558:	ed97 6a03 	vldr	s12, [r7, #12]
 800855c:	eddf 5a66 	vldr	s11, [pc, #408]	; 80086f8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008560:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008564:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008568:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800856c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008570:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008574:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008578:	e065      	b.n	8008646 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	ee07 3a90 	vmov	s15, r3
 8008580:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008584:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008700 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8008588:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800858c:	4b58      	ldr	r3, [pc, #352]	; (80086f0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800858e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008590:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008594:	ee07 3a90 	vmov	s15, r3
 8008598:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800859c:	ed97 6a03 	vldr	s12, [r7, #12]
 80085a0:	eddf 5a55 	vldr	s11, [pc, #340]	; 80086f8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80085a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085b8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80085bc:	e043      	b.n	8008646 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	ee07 3a90 	vmov	s15, r3
 80085c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085c8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008704 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 80085cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085d0:	4b47      	ldr	r3, [pc, #284]	; (80086f0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80085d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085d8:	ee07 3a90 	vmov	s15, r3
 80085dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085e0:	ed97 6a03 	vldr	s12, [r7, #12]
 80085e4:	eddf 5a44 	vldr	s11, [pc, #272]	; 80086f8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80085e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085fc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008600:	e021      	b.n	8008646 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	ee07 3a90 	vmov	s15, r3
 8008608:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800860c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8008700 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8008610:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008614:	4b36      	ldr	r3, [pc, #216]	; (80086f0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008618:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800861c:	ee07 3a90 	vmov	s15, r3
 8008620:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008624:	ed97 6a03 	vldr	s12, [r7, #12]
 8008628:	eddf 5a33 	vldr	s11, [pc, #204]	; 80086f8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800862c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008630:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008634:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008638:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800863c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008640:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008644:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008646:	4b2a      	ldr	r3, [pc, #168]	; (80086f0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800864a:	0a5b      	lsrs	r3, r3, #9
 800864c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008650:	ee07 3a90 	vmov	s15, r3
 8008654:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008658:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800865c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008660:	edd7 6a07 	vldr	s13, [r7, #28]
 8008664:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008668:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800866c:	ee17 2a90 	vmov	r2, s15
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008674:	4b1e      	ldr	r3, [pc, #120]	; (80086f0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008678:	0c1b      	lsrs	r3, r3, #16
 800867a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800867e:	ee07 3a90 	vmov	s15, r3
 8008682:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008686:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800868a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800868e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008692:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008696:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800869a:	ee17 2a90 	vmov	r2, s15
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80086a2:	4b13      	ldr	r3, [pc, #76]	; (80086f0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80086a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086a6:	0e1b      	lsrs	r3, r3, #24
 80086a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086ac:	ee07 3a90 	vmov	s15, r3
 80086b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80086b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80086bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80086c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086c8:	ee17 2a90 	vmov	r2, s15
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80086d0:	e008      	b.n	80086e4 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2200      	movs	r2, #0
 80086d6:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2200      	movs	r2, #0
 80086dc:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2200      	movs	r2, #0
 80086e2:	609a      	str	r2, [r3, #8]
}
 80086e4:	bf00      	nop
 80086e6:	3724      	adds	r7, #36	; 0x24
 80086e8:	46bd      	mov	sp, r7
 80086ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ee:	4770      	bx	lr
 80086f0:	58024400 	.word	0x58024400
 80086f4:	03d09000 	.word	0x03d09000
 80086f8:	46000000 	.word	0x46000000
 80086fc:	4c742400 	.word	0x4c742400
 8008700:	4a742400 	.word	0x4a742400
 8008704:	4bbebc20 	.word	0x4bbebc20

08008708 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008708:	b480      	push	{r7}
 800870a:	b089      	sub	sp, #36	; 0x24
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008710:	4b9d      	ldr	r3, [pc, #628]	; (8008988 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008714:	f003 0303 	and.w	r3, r3, #3
 8008718:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800871a:	4b9b      	ldr	r3, [pc, #620]	; (8008988 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800871c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800871e:	0d1b      	lsrs	r3, r3, #20
 8008720:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008724:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008726:	4b98      	ldr	r3, [pc, #608]	; (8008988 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800872a:	0a1b      	lsrs	r3, r3, #8
 800872c:	f003 0301 	and.w	r3, r3, #1
 8008730:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008732:	4b95      	ldr	r3, [pc, #596]	; (8008988 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008736:	08db      	lsrs	r3, r3, #3
 8008738:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800873c:	693a      	ldr	r2, [r7, #16]
 800873e:	fb02 f303 	mul.w	r3, r2, r3
 8008742:	ee07 3a90 	vmov	s15, r3
 8008746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800874a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	2b00      	cmp	r3, #0
 8008752:	f000 810a 	beq.w	800896a <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8008756:	69bb      	ldr	r3, [r7, #24]
 8008758:	2b01      	cmp	r3, #1
 800875a:	d05a      	beq.n	8008812 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 800875c:	2b01      	cmp	r3, #1
 800875e:	d302      	bcc.n	8008766 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8008760:	2b02      	cmp	r3, #2
 8008762:	d078      	beq.n	8008856 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8008764:	e099      	b.n	800889a <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008766:	4b88      	ldr	r3, [pc, #544]	; (8008988 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f003 0320 	and.w	r3, r3, #32
 800876e:	2b00      	cmp	r3, #0
 8008770:	d02d      	beq.n	80087ce <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008772:	4b85      	ldr	r3, [pc, #532]	; (8008988 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	08db      	lsrs	r3, r3, #3
 8008778:	f003 0303 	and.w	r3, r3, #3
 800877c:	4a83      	ldr	r2, [pc, #524]	; (800898c <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 800877e:	fa22 f303 	lsr.w	r3, r2, r3
 8008782:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	ee07 3a90 	vmov	s15, r3
 800878a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	ee07 3a90 	vmov	s15, r3
 8008794:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008798:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800879c:	4b7a      	ldr	r3, [pc, #488]	; (8008988 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800879e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087a4:	ee07 3a90 	vmov	s15, r3
 80087a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087ac:	ed97 6a03 	vldr	s12, [r7, #12]
 80087b0:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008990 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80087b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087c8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80087cc:	e087      	b.n	80088de <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	ee07 3a90 	vmov	s15, r3
 80087d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087d8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008994 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 80087dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087e0:	4b69      	ldr	r3, [pc, #420]	; (8008988 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80087e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087e8:	ee07 3a90 	vmov	s15, r3
 80087ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087f0:	ed97 6a03 	vldr	s12, [r7, #12]
 80087f4:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008990 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80087f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008800:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008804:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008808:	ee67 7a27 	vmul.f32	s15, s14, s15
 800880c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008810:	e065      	b.n	80088de <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	ee07 3a90 	vmov	s15, r3
 8008818:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800881c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008998 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8008820:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008824:	4b58      	ldr	r3, [pc, #352]	; (8008988 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008828:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800882c:	ee07 3a90 	vmov	s15, r3
 8008830:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008834:	ed97 6a03 	vldr	s12, [r7, #12]
 8008838:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008990 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800883c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008840:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008844:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008848:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800884c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008850:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008854:	e043      	b.n	80088de <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	ee07 3a90 	vmov	s15, r3
 800885c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008860:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800899c <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8008864:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008868:	4b47      	ldr	r3, [pc, #284]	; (8008988 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800886a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800886c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008870:	ee07 3a90 	vmov	s15, r3
 8008874:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008878:	ed97 6a03 	vldr	s12, [r7, #12]
 800887c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008990 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008880:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008884:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008888:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800888c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008890:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008894:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008898:	e021      	b.n	80088de <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	ee07 3a90 	vmov	s15, r3
 80088a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088a4:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8008998 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80088a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088ac:	4b36      	ldr	r3, [pc, #216]	; (8008988 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80088ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088b4:	ee07 3a90 	vmov	s15, r3
 80088b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088bc:	ed97 6a03 	vldr	s12, [r7, #12]
 80088c0:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008990 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80088c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088d8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80088dc:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80088de:	4b2a      	ldr	r3, [pc, #168]	; (8008988 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80088e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088e2:	0a5b      	lsrs	r3, r3, #9
 80088e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088e8:	ee07 3a90 	vmov	s15, r3
 80088ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80088f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80088f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80088fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008900:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008904:	ee17 2a90 	vmov	r2, s15
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800890c:	4b1e      	ldr	r3, [pc, #120]	; (8008988 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800890e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008910:	0c1b      	lsrs	r3, r3, #16
 8008912:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008916:	ee07 3a90 	vmov	s15, r3
 800891a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800891e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008922:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008926:	edd7 6a07 	vldr	s13, [r7, #28]
 800892a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800892e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008932:	ee17 2a90 	vmov	r2, s15
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800893a:	4b13      	ldr	r3, [pc, #76]	; (8008988 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800893c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800893e:	0e1b      	lsrs	r3, r3, #24
 8008940:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008944:	ee07 3a90 	vmov	s15, r3
 8008948:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800894c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008950:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008954:	edd7 6a07 	vldr	s13, [r7, #28]
 8008958:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800895c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008960:	ee17 2a90 	vmov	r2, s15
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008968:	e008      	b.n	800897c <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2200      	movs	r2, #0
 800896e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2200      	movs	r2, #0
 8008974:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2200      	movs	r2, #0
 800897a:	609a      	str	r2, [r3, #8]
}
 800897c:	bf00      	nop
 800897e:	3724      	adds	r7, #36	; 0x24
 8008980:	46bd      	mov	sp, r7
 8008982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008986:	4770      	bx	lr
 8008988:	58024400 	.word	0x58024400
 800898c:	03d09000 	.word	0x03d09000
 8008990:	46000000 	.word	0x46000000
 8008994:	4c742400 	.word	0x4c742400
 8008998:	4a742400 	.word	0x4a742400
 800899c:	4bbebc20 	.word	0x4bbebc20

080089a0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80089a0:	b480      	push	{r7}
 80089a2:	b089      	sub	sp, #36	; 0x24
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80089a8:	4b9d      	ldr	r3, [pc, #628]	; (8008c20 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80089aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089ac:	f003 0303 	and.w	r3, r3, #3
 80089b0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80089b2:	4b9b      	ldr	r3, [pc, #620]	; (8008c20 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80089b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089b6:	091b      	lsrs	r3, r3, #4
 80089b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80089bc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80089be:	4b98      	ldr	r3, [pc, #608]	; (8008c20 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80089c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089c2:	f003 0301 	and.w	r3, r3, #1
 80089c6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80089c8:	4b95      	ldr	r3, [pc, #596]	; (8008c20 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80089ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089cc:	08db      	lsrs	r3, r3, #3
 80089ce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80089d2:	693a      	ldr	r2, [r7, #16]
 80089d4:	fb02 f303 	mul.w	r3, r2, r3
 80089d8:	ee07 3a90 	vmov	s15, r3
 80089dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089e0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80089e4:	697b      	ldr	r3, [r7, #20]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	f000 810a 	beq.w	8008c00 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 80089ec:	69bb      	ldr	r3, [r7, #24]
 80089ee:	2b01      	cmp	r3, #1
 80089f0:	d05a      	beq.n	8008aa8 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 80089f2:	2b01      	cmp	r3, #1
 80089f4:	d302      	bcc.n	80089fc <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 80089f6:	2b02      	cmp	r3, #2
 80089f8:	d078      	beq.n	8008aec <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 80089fa:	e099      	b.n	8008b30 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80089fc:	4b88      	ldr	r3, [pc, #544]	; (8008c20 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f003 0320 	and.w	r3, r3, #32
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d02d      	beq.n	8008a64 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008a08:	4b85      	ldr	r3, [pc, #532]	; (8008c20 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	08db      	lsrs	r3, r3, #3
 8008a0e:	f003 0303 	and.w	r3, r3, #3
 8008a12:	4a84      	ldr	r2, [pc, #528]	; (8008c24 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8008a14:	fa22 f303 	lsr.w	r3, r2, r3
 8008a18:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	ee07 3a90 	vmov	s15, r3
 8008a20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	ee07 3a90 	vmov	s15, r3
 8008a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a32:	4b7b      	ldr	r3, [pc, #492]	; (8008c20 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a3a:	ee07 3a90 	vmov	s15, r3
 8008a3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a42:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a46:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008c28 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008a4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a5e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008a62:	e087      	b.n	8008b74 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008a64:	697b      	ldr	r3, [r7, #20]
 8008a66:	ee07 3a90 	vmov	s15, r3
 8008a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a6e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008c2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 8008a72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a76:	4b6a      	ldr	r3, [pc, #424]	; (8008c20 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a7e:	ee07 3a90 	vmov	s15, r3
 8008a82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a86:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a8a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008c28 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008a8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008aa2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008aa6:	e065      	b.n	8008b74 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008aa8:	697b      	ldr	r3, [r7, #20]
 8008aaa:	ee07 3a90 	vmov	s15, r3
 8008aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ab2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008c30 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8008ab6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008aba:	4b59      	ldr	r3, [pc, #356]	; (8008c20 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ac2:	ee07 3a90 	vmov	s15, r3
 8008ac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008aca:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ace:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008c28 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008ad2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ada:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ade:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ae6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008aea:	e043      	b.n	8008b74 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008aec:	697b      	ldr	r3, [r7, #20]
 8008aee:	ee07 3a90 	vmov	s15, r3
 8008af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008af6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008c34 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008afa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008afe:	4b48      	ldr	r3, [pc, #288]	; (8008c20 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b06:	ee07 3a90 	vmov	s15, r3
 8008b0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b12:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008c28 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008b16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b2a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008b2e:	e021      	b.n	8008b74 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	ee07 3a90 	vmov	s15, r3
 8008b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b3a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008c30 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8008b3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b42:	4b37      	ldr	r3, [pc, #220]	; (8008c20 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b4a:	ee07 3a90 	vmov	s15, r3
 8008b4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b52:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b56:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008c28 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008b5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b6e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008b72:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8008b74:	4b2a      	ldr	r3, [pc, #168]	; (8008c20 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b78:	0a5b      	lsrs	r3, r3, #9
 8008b7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b7e:	ee07 3a90 	vmov	s15, r3
 8008b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008b8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b9a:	ee17 2a90 	vmov	r2, s15
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8008ba2:	4b1f      	ldr	r3, [pc, #124]	; (8008c20 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ba6:	0c1b      	lsrs	r3, r3, #16
 8008ba8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bac:	ee07 3a90 	vmov	s15, r3
 8008bb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bb4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008bb8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008bbc:	edd7 6a07 	vldr	s13, [r7, #28]
 8008bc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008bc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008bc8:	ee17 2a90 	vmov	r2, s15
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8008bd0:	4b13      	ldr	r3, [pc, #76]	; (8008c20 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bd4:	0e1b      	lsrs	r3, r3, #24
 8008bd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bda:	ee07 3a90 	vmov	s15, r3
 8008bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008be2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008be6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008bea:	edd7 6a07 	vldr	s13, [r7, #28]
 8008bee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008bf2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008bf6:	ee17 2a90 	vmov	r2, s15
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008bfe:	e008      	b.n	8008c12 <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2200      	movs	r2, #0
 8008c04:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	609a      	str	r2, [r3, #8]
}
 8008c12:	bf00      	nop
 8008c14:	3724      	adds	r7, #36	; 0x24
 8008c16:	46bd      	mov	sp, r7
 8008c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1c:	4770      	bx	lr
 8008c1e:	bf00      	nop
 8008c20:	58024400 	.word	0x58024400
 8008c24:	03d09000 	.word	0x03d09000
 8008c28:	46000000 	.word	0x46000000
 8008c2c:	4c742400 	.word	0x4c742400
 8008c30:	4a742400 	.word	0x4a742400
 8008c34:	4bbebc20 	.word	0x4bbebc20

08008c38 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b084      	sub	sp, #16
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
 8008c40:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008c42:	2300      	movs	r3, #0
 8008c44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008c46:	4b53      	ldr	r3, [pc, #332]	; (8008d94 <RCCEx_PLL2_Config+0x15c>)
 8008c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c4a:	f003 0303 	and.w	r3, r3, #3
 8008c4e:	2b03      	cmp	r3, #3
 8008c50:	d101      	bne.n	8008c56 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008c52:	2301      	movs	r3, #1
 8008c54:	e099      	b.n	8008d8a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008c56:	4b4f      	ldr	r3, [pc, #316]	; (8008d94 <RCCEx_PLL2_Config+0x15c>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	4a4e      	ldr	r2, [pc, #312]	; (8008d94 <RCCEx_PLL2_Config+0x15c>)
 8008c5c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008c60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c62:	f7f8 ff0f 	bl	8001a84 <HAL_GetTick>
 8008c66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008c68:	e008      	b.n	8008c7c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008c6a:	f7f8 ff0b 	bl	8001a84 <HAL_GetTick>
 8008c6e:	4602      	mov	r2, r0
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	1ad3      	subs	r3, r2, r3
 8008c74:	2b02      	cmp	r3, #2
 8008c76:	d901      	bls.n	8008c7c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008c78:	2303      	movs	r3, #3
 8008c7a:	e086      	b.n	8008d8a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008c7c:	4b45      	ldr	r3, [pc, #276]	; (8008d94 <RCCEx_PLL2_Config+0x15c>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d1f0      	bne.n	8008c6a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008c88:	4b42      	ldr	r3, [pc, #264]	; (8008d94 <RCCEx_PLL2_Config+0x15c>)
 8008c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c8c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	031b      	lsls	r3, r3, #12
 8008c96:	493f      	ldr	r1, [pc, #252]	; (8008d94 <RCCEx_PLL2_Config+0x15c>)
 8008c98:	4313      	orrs	r3, r2
 8008c9a:	628b      	str	r3, [r1, #40]	; 0x28
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	685b      	ldr	r3, [r3, #4]
 8008ca0:	3b01      	subs	r3, #1
 8008ca2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	689b      	ldr	r3, [r3, #8]
 8008caa:	3b01      	subs	r3, #1
 8008cac:	025b      	lsls	r3, r3, #9
 8008cae:	b29b      	uxth	r3, r3
 8008cb0:	431a      	orrs	r2, r3
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	68db      	ldr	r3, [r3, #12]
 8008cb6:	3b01      	subs	r3, #1
 8008cb8:	041b      	lsls	r3, r3, #16
 8008cba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008cbe:	431a      	orrs	r2, r3
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	691b      	ldr	r3, [r3, #16]
 8008cc4:	3b01      	subs	r3, #1
 8008cc6:	061b      	lsls	r3, r3, #24
 8008cc8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008ccc:	4931      	ldr	r1, [pc, #196]	; (8008d94 <RCCEx_PLL2_Config+0x15c>)
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008cd2:	4b30      	ldr	r3, [pc, #192]	; (8008d94 <RCCEx_PLL2_Config+0x15c>)
 8008cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cd6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	695b      	ldr	r3, [r3, #20]
 8008cde:	492d      	ldr	r1, [pc, #180]	; (8008d94 <RCCEx_PLL2_Config+0x15c>)
 8008ce0:	4313      	orrs	r3, r2
 8008ce2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008ce4:	4b2b      	ldr	r3, [pc, #172]	; (8008d94 <RCCEx_PLL2_Config+0x15c>)
 8008ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ce8:	f023 0220 	bic.w	r2, r3, #32
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	699b      	ldr	r3, [r3, #24]
 8008cf0:	4928      	ldr	r1, [pc, #160]	; (8008d94 <RCCEx_PLL2_Config+0x15c>)
 8008cf2:	4313      	orrs	r3, r2
 8008cf4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008cf6:	4b27      	ldr	r3, [pc, #156]	; (8008d94 <RCCEx_PLL2_Config+0x15c>)
 8008cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cfa:	4a26      	ldr	r2, [pc, #152]	; (8008d94 <RCCEx_PLL2_Config+0x15c>)
 8008cfc:	f023 0310 	bic.w	r3, r3, #16
 8008d00:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008d02:	4b24      	ldr	r3, [pc, #144]	; (8008d94 <RCCEx_PLL2_Config+0x15c>)
 8008d04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d06:	4b24      	ldr	r3, [pc, #144]	; (8008d98 <RCCEx_PLL2_Config+0x160>)
 8008d08:	4013      	ands	r3, r2
 8008d0a:	687a      	ldr	r2, [r7, #4]
 8008d0c:	69d2      	ldr	r2, [r2, #28]
 8008d0e:	00d2      	lsls	r2, r2, #3
 8008d10:	4920      	ldr	r1, [pc, #128]	; (8008d94 <RCCEx_PLL2_Config+0x15c>)
 8008d12:	4313      	orrs	r3, r2
 8008d14:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008d16:	4b1f      	ldr	r3, [pc, #124]	; (8008d94 <RCCEx_PLL2_Config+0x15c>)
 8008d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d1a:	4a1e      	ldr	r2, [pc, #120]	; (8008d94 <RCCEx_PLL2_Config+0x15c>)
 8008d1c:	f043 0310 	orr.w	r3, r3, #16
 8008d20:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d106      	bne.n	8008d36 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008d28:	4b1a      	ldr	r3, [pc, #104]	; (8008d94 <RCCEx_PLL2_Config+0x15c>)
 8008d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d2c:	4a19      	ldr	r2, [pc, #100]	; (8008d94 <RCCEx_PLL2_Config+0x15c>)
 8008d2e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008d32:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008d34:	e00f      	b.n	8008d56 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	2b01      	cmp	r3, #1
 8008d3a:	d106      	bne.n	8008d4a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008d3c:	4b15      	ldr	r3, [pc, #84]	; (8008d94 <RCCEx_PLL2_Config+0x15c>)
 8008d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d40:	4a14      	ldr	r2, [pc, #80]	; (8008d94 <RCCEx_PLL2_Config+0x15c>)
 8008d42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008d46:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008d48:	e005      	b.n	8008d56 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008d4a:	4b12      	ldr	r3, [pc, #72]	; (8008d94 <RCCEx_PLL2_Config+0x15c>)
 8008d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d4e:	4a11      	ldr	r2, [pc, #68]	; (8008d94 <RCCEx_PLL2_Config+0x15c>)
 8008d50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008d54:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008d56:	4b0f      	ldr	r3, [pc, #60]	; (8008d94 <RCCEx_PLL2_Config+0x15c>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	4a0e      	ldr	r2, [pc, #56]	; (8008d94 <RCCEx_PLL2_Config+0x15c>)
 8008d5c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008d60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d62:	f7f8 fe8f 	bl	8001a84 <HAL_GetTick>
 8008d66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008d68:	e008      	b.n	8008d7c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008d6a:	f7f8 fe8b 	bl	8001a84 <HAL_GetTick>
 8008d6e:	4602      	mov	r2, r0
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	1ad3      	subs	r3, r2, r3
 8008d74:	2b02      	cmp	r3, #2
 8008d76:	d901      	bls.n	8008d7c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008d78:	2303      	movs	r3, #3
 8008d7a:	e006      	b.n	8008d8a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008d7c:	4b05      	ldr	r3, [pc, #20]	; (8008d94 <RCCEx_PLL2_Config+0x15c>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d0f0      	beq.n	8008d6a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3710      	adds	r7, #16
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}
 8008d92:	bf00      	nop
 8008d94:	58024400 	.word	0x58024400
 8008d98:	ffff0007 	.word	0xffff0007

08008d9c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b084      	sub	sp, #16
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
 8008da4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008da6:	2300      	movs	r3, #0
 8008da8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008daa:	4b53      	ldr	r3, [pc, #332]	; (8008ef8 <RCCEx_PLL3_Config+0x15c>)
 8008dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dae:	f003 0303 	and.w	r3, r3, #3
 8008db2:	2b03      	cmp	r3, #3
 8008db4:	d101      	bne.n	8008dba <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008db6:	2301      	movs	r3, #1
 8008db8:	e099      	b.n	8008eee <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008dba:	4b4f      	ldr	r3, [pc, #316]	; (8008ef8 <RCCEx_PLL3_Config+0x15c>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	4a4e      	ldr	r2, [pc, #312]	; (8008ef8 <RCCEx_PLL3_Config+0x15c>)
 8008dc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008dc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008dc6:	f7f8 fe5d 	bl	8001a84 <HAL_GetTick>
 8008dca:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008dcc:	e008      	b.n	8008de0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008dce:	f7f8 fe59 	bl	8001a84 <HAL_GetTick>
 8008dd2:	4602      	mov	r2, r0
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	1ad3      	subs	r3, r2, r3
 8008dd8:	2b02      	cmp	r3, #2
 8008dda:	d901      	bls.n	8008de0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008ddc:	2303      	movs	r3, #3
 8008dde:	e086      	b.n	8008eee <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008de0:	4b45      	ldr	r3, [pc, #276]	; (8008ef8 <RCCEx_PLL3_Config+0x15c>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d1f0      	bne.n	8008dce <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008dec:	4b42      	ldr	r3, [pc, #264]	; (8008ef8 <RCCEx_PLL3_Config+0x15c>)
 8008dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008df0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	051b      	lsls	r3, r3, #20
 8008dfa:	493f      	ldr	r1, [pc, #252]	; (8008ef8 <RCCEx_PLL3_Config+0x15c>)
 8008dfc:	4313      	orrs	r3, r2
 8008dfe:	628b      	str	r3, [r1, #40]	; 0x28
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	685b      	ldr	r3, [r3, #4]
 8008e04:	3b01      	subs	r3, #1
 8008e06:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	689b      	ldr	r3, [r3, #8]
 8008e0e:	3b01      	subs	r3, #1
 8008e10:	025b      	lsls	r3, r3, #9
 8008e12:	b29b      	uxth	r3, r3
 8008e14:	431a      	orrs	r2, r3
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	68db      	ldr	r3, [r3, #12]
 8008e1a:	3b01      	subs	r3, #1
 8008e1c:	041b      	lsls	r3, r3, #16
 8008e1e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008e22:	431a      	orrs	r2, r3
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	691b      	ldr	r3, [r3, #16]
 8008e28:	3b01      	subs	r3, #1
 8008e2a:	061b      	lsls	r3, r3, #24
 8008e2c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008e30:	4931      	ldr	r1, [pc, #196]	; (8008ef8 <RCCEx_PLL3_Config+0x15c>)
 8008e32:	4313      	orrs	r3, r2
 8008e34:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008e36:	4b30      	ldr	r3, [pc, #192]	; (8008ef8 <RCCEx_PLL3_Config+0x15c>)
 8008e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e3a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	695b      	ldr	r3, [r3, #20]
 8008e42:	492d      	ldr	r1, [pc, #180]	; (8008ef8 <RCCEx_PLL3_Config+0x15c>)
 8008e44:	4313      	orrs	r3, r2
 8008e46:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008e48:	4b2b      	ldr	r3, [pc, #172]	; (8008ef8 <RCCEx_PLL3_Config+0x15c>)
 8008e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e4c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	699b      	ldr	r3, [r3, #24]
 8008e54:	4928      	ldr	r1, [pc, #160]	; (8008ef8 <RCCEx_PLL3_Config+0x15c>)
 8008e56:	4313      	orrs	r3, r2
 8008e58:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008e5a:	4b27      	ldr	r3, [pc, #156]	; (8008ef8 <RCCEx_PLL3_Config+0x15c>)
 8008e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e5e:	4a26      	ldr	r2, [pc, #152]	; (8008ef8 <RCCEx_PLL3_Config+0x15c>)
 8008e60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e64:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008e66:	4b24      	ldr	r3, [pc, #144]	; (8008ef8 <RCCEx_PLL3_Config+0x15c>)
 8008e68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e6a:	4b24      	ldr	r3, [pc, #144]	; (8008efc <RCCEx_PLL3_Config+0x160>)
 8008e6c:	4013      	ands	r3, r2
 8008e6e:	687a      	ldr	r2, [r7, #4]
 8008e70:	69d2      	ldr	r2, [r2, #28]
 8008e72:	00d2      	lsls	r2, r2, #3
 8008e74:	4920      	ldr	r1, [pc, #128]	; (8008ef8 <RCCEx_PLL3_Config+0x15c>)
 8008e76:	4313      	orrs	r3, r2
 8008e78:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008e7a:	4b1f      	ldr	r3, [pc, #124]	; (8008ef8 <RCCEx_PLL3_Config+0x15c>)
 8008e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e7e:	4a1e      	ldr	r2, [pc, #120]	; (8008ef8 <RCCEx_PLL3_Config+0x15c>)
 8008e80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e84:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d106      	bne.n	8008e9a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008e8c:	4b1a      	ldr	r3, [pc, #104]	; (8008ef8 <RCCEx_PLL3_Config+0x15c>)
 8008e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e90:	4a19      	ldr	r2, [pc, #100]	; (8008ef8 <RCCEx_PLL3_Config+0x15c>)
 8008e92:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008e96:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008e98:	e00f      	b.n	8008eba <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	2b01      	cmp	r3, #1
 8008e9e:	d106      	bne.n	8008eae <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008ea0:	4b15      	ldr	r3, [pc, #84]	; (8008ef8 <RCCEx_PLL3_Config+0x15c>)
 8008ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ea4:	4a14      	ldr	r2, [pc, #80]	; (8008ef8 <RCCEx_PLL3_Config+0x15c>)
 8008ea6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008eaa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008eac:	e005      	b.n	8008eba <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008eae:	4b12      	ldr	r3, [pc, #72]	; (8008ef8 <RCCEx_PLL3_Config+0x15c>)
 8008eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eb2:	4a11      	ldr	r2, [pc, #68]	; (8008ef8 <RCCEx_PLL3_Config+0x15c>)
 8008eb4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008eb8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008eba:	4b0f      	ldr	r3, [pc, #60]	; (8008ef8 <RCCEx_PLL3_Config+0x15c>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	4a0e      	ldr	r2, [pc, #56]	; (8008ef8 <RCCEx_PLL3_Config+0x15c>)
 8008ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ec4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ec6:	f7f8 fddd 	bl	8001a84 <HAL_GetTick>
 8008eca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008ecc:	e008      	b.n	8008ee0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008ece:	f7f8 fdd9 	bl	8001a84 <HAL_GetTick>
 8008ed2:	4602      	mov	r2, r0
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	1ad3      	subs	r3, r2, r3
 8008ed8:	2b02      	cmp	r3, #2
 8008eda:	d901      	bls.n	8008ee0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008edc:	2303      	movs	r3, #3
 8008ede:	e006      	b.n	8008eee <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008ee0:	4b05      	ldr	r3, [pc, #20]	; (8008ef8 <RCCEx_PLL3_Config+0x15c>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d0f0      	beq.n	8008ece <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3710      	adds	r7, #16
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}
 8008ef6:	bf00      	nop
 8008ef8:	58024400 	.word	0x58024400
 8008efc:	ffff0007 	.word	0xffff0007

08008f00 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b08a      	sub	sp, #40	; 0x28
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d101      	bne.n	8008f12 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008f0e:	2301      	movs	r3, #1
 8008f10:	e07c      	b.n	800900c <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008f18:	b2db      	uxtb	r3, r3
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d10c      	bne.n	8008f38 <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2200      	movs	r2, #0
 8008f22:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	699b      	ldr	r3, [r3, #24]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d102      	bne.n	8008f32 <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2202      	movs	r2, #2
 8008f30:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f7f8 fa12 	bl	800135c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2203      	movs	r2, #3
 8008f3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f000 f867 	bl	8009014 <HAL_SD_InitCard>
 8008f46:	4603      	mov	r3, r0
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d001      	beq.n	8008f50 <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	e05d      	b.n	800900c <HAL_SD_Init+0x10c>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8008f50:	f107 0308 	add.w	r3, r7, #8
 8008f54:	4619      	mov	r1, r3
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f001 f8ce 	bl	800a0f8 <HAL_SD_GetCardStatus>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d001      	beq.n	8008f66 <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 8008f62:	2301      	movs	r3, #1
 8008f64:	e052      	b.n	800900c <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8008f66:	7e3b      	ldrb	r3, [r7, #24]
 8008f68:	b2db      	uxtb	r3, r3
 8008f6a:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8008f6c:	7e7b      	ldrb	r3, [r7, #25]
 8008f6e:	b2db      	uxtb	r3, r3
 8008f70:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f76:	2b01      	cmp	r3, #1
 8008f78:	d10a      	bne.n	8008f90 <HAL_SD_Init+0x90>
 8008f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d102      	bne.n	8008f86 <HAL_SD_Init+0x86>
 8008f80:	6a3b      	ldr	r3, [r7, #32]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d004      	beq.n	8008f90 <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f8c:	65da      	str	r2, [r3, #92]	; 0x5c
 8008f8e:	e00b      	b.n	8008fa8 <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f94:	2b01      	cmp	r3, #1
 8008f96:	d104      	bne.n	8008fa2 <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008f9e:	65da      	str	r2, [r3, #92]	; 0x5c
 8008fa0:	e002      	b.n	8008fa8 <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	68db      	ldr	r3, [r3, #12]
 8008fac:	4619      	mov	r1, r3
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f001 f984 	bl	800a2bc <HAL_SD_ConfigWideBusOperation>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d001      	beq.n	8008fbe <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 8008fba:	2301      	movs	r3, #1
 8008fbc:	e026      	b.n	800900c <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8008fbe:	f7f8 fd61 	bl	8001a84 <HAL_GetTick>
 8008fc2:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008fc4:	e011      	b.n	8008fea <HAL_SD_Init+0xea>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8008fc6:	f7f8 fd5d 	bl	8001a84 <HAL_GetTick>
 8008fca:	4602      	mov	r2, r0
 8008fcc:	69fb      	ldr	r3, [r7, #28]
 8008fce:	1ad3      	subs	r3, r2, r3
 8008fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fd4:	d109      	bne.n	8008fea <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008fdc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2201      	movs	r2, #1
 8008fe2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 8008fe6:	2303      	movs	r3, #3
 8008fe8:	e010      	b.n	800900c <HAL_SD_Init+0x10c>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f001 fa10 	bl	800a410 <HAL_SD_GetCardState>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	2b04      	cmp	r3, #4
 8008ff4:	d1e7      	bne.n	8008fc6 <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2200      	movs	r2, #0
 8009000:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2201      	movs	r2, #1
 8009006:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800900a:	2300      	movs	r3, #0
}
 800900c:	4618      	mov	r0, r3
 800900e:	3728      	adds	r7, #40	; 0x28
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}

08009014 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009014:	b5b0      	push	{r4, r5, r7, lr}
 8009016:	b08e      	sub	sp, #56	; 0x38
 8009018:	af04      	add	r7, sp, #16
 800901a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800901c:	2300      	movs	r3, #0
 800901e:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8009020:	2300      	movs	r3, #0
 8009022:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8009024:	2300      	movs	r3, #0
 8009026:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8009028:	2300      	movs	r3, #0
 800902a:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800902c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8009030:	f7fe ff90 	bl	8007f54 <HAL_RCCEx_GetPeriphCLKFreq>
 8009034:	6278      	str	r0, [r7, #36]	; 0x24
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 8009036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009038:	0a1b      	lsrs	r3, r3, #8
 800903a:	4a40      	ldr	r2, [pc, #256]	; (800913c <HAL_SD_InitCard+0x128>)
 800903c:	fba2 2303 	umull	r2, r3, r2, r3
 8009040:	091b      	lsrs	r3, r3, #4
 8009042:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	699b      	ldr	r3, [r3, #24]
 8009048:	2b02      	cmp	r3, #2
 800904a:	d107      	bne.n	800905c <HAL_SD_InitCard+0x48>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	681a      	ldr	r2, [r3, #0]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f042 0210 	orr.w	r2, r2, #16
 800905a:	601a      	str	r2, [r3, #0]
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681d      	ldr	r5, [r3, #0]
 8009060:	466c      	mov	r4, sp
 8009062:	f107 0314 	add.w	r3, r7, #20
 8009066:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800906a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800906e:	f107 0308 	add.w	r3, r7, #8
 8009072:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009074:	4628      	mov	r0, r5
 8009076:	f003 f863 	bl	800c140 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	4618      	mov	r0, r3
 8009080:	f003 f8a6 	bl	800c1d0 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 8009084:	69bb      	ldr	r3, [r7, #24]
 8009086:	005b      	lsls	r3, r3, #1
 8009088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800908a:	fbb2 f3f3 	udiv	r3, r2, r3
 800908e:	627b      	str	r3, [r7, #36]	; 0x24

  if(sdmmc_clk != 0U)
 8009090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009092:	2b00      	cmp	r3, #0
 8009094:	d008      	beq.n	80090a8 <HAL_SD_InitCard+0x94>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8009096:	4a2a      	ldr	r2, [pc, #168]	; (8009140 <HAL_SD_InitCard+0x12c>)
 8009098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800909a:	fbb2 f3f3 	udiv	r3, r2, r3
 800909e:	3301      	adds	r3, #1
 80090a0:	4618      	mov	r0, r3
 80090a2:	f7f8 fcfb 	bl	8001a9c <HAL_Delay>
 80090a6:	e002      	b.n	80090ae <HAL_SD_InitCard+0x9a>
  }
  else
  {
    HAL_Delay(2U);
 80090a8:	2002      	movs	r0, #2
 80090aa:	f7f8 fcf7 	bl	8001a9c <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f001 fa8c 	bl	800a5cc <SD_PowerON>
 80090b4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80090b6:	6a3b      	ldr	r3, [r7, #32]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d00b      	beq.n	80090d4 <HAL_SD_InitCard+0xc0>
  {
    hsd->State = HAL_SD_STATE_READY;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2201      	movs	r2, #1
 80090c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090c8:	6a3b      	ldr	r3, [r7, #32]
 80090ca:	431a      	orrs	r2, r3
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80090d0:	2301      	movs	r3, #1
 80090d2:	e02e      	b.n	8009132 <HAL_SD_InitCard+0x11e>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f001 f9bb 	bl	800a450 <SD_InitCard>
 80090da:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80090dc:	6a3b      	ldr	r3, [r7, #32]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d00b      	beq.n	80090fa <HAL_SD_InitCard+0xe6>
  {
    hsd->State = HAL_SD_STATE_READY;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2201      	movs	r2, #1
 80090e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090ee:	6a3b      	ldr	r3, [r7, #32]
 80090f0:	431a      	orrs	r2, r3
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80090f6:	2301      	movs	r3, #1
 80090f8:	e01b      	b.n	8009132 <HAL_SD_InitCard+0x11e>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009102:	4618      	mov	r0, r3
 8009104:	f003 f8fa 	bl	800c2fc <SDMMC_CmdBlockLength>
 8009108:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800910a:	6a3b      	ldr	r3, [r7, #32]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d00f      	beq.n	8009130 <HAL_SD_InitCard+0x11c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	4a0b      	ldr	r2, [pc, #44]	; (8009144 <HAL_SD_InitCard+0x130>)
 8009116:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800911c:	6a3b      	ldr	r3, [r7, #32]
 800911e:	431a      	orrs	r2, r3
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2201      	movs	r2, #1
 8009128:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800912c:	2301      	movs	r3, #1
 800912e:	e000      	b.n	8009132 <HAL_SD_InitCard+0x11e>
  }

  return HAL_OK;
 8009130:	2300      	movs	r3, #0
}
 8009132:	4618      	mov	r0, r3
 8009134:	3728      	adds	r7, #40	; 0x28
 8009136:	46bd      	mov	sp, r7
 8009138:	bdb0      	pop	{r4, r5, r7, pc}
 800913a:	bf00      	nop
 800913c:	014f8b59 	.word	0x014f8b59
 8009140:	00012110 	.word	0x00012110
 8009144:	1fe00fff 	.word	0x1fe00fff

08009148 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b092      	sub	sp, #72	; 0x48
 800914c:	af00      	add	r7, sp, #0
 800914e:	60f8      	str	r0, [r7, #12]
 8009150:	60b9      	str	r1, [r7, #8]
 8009152:	607a      	str	r2, [r7, #4]
 8009154:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009156:	f7f8 fc95 	bl	8001a84 <HAL_GetTick>
 800915a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d107      	bne.n	800917a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800916e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009176:	2301      	movs	r3, #1
 8009178:	e167      	b.n	800944a <HAL_SD_ReadBlocks+0x302>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009180:	b2db      	uxtb	r3, r3
 8009182:	2b01      	cmp	r3, #1
 8009184:	f040 815a 	bne.w	800943c <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	2200      	movs	r2, #0
 800918c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800918e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	441a      	add	r2, r3
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009198:	429a      	cmp	r2, r3
 800919a:	d907      	bls.n	80091ac <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091a0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80091a8:	2301      	movs	r3, #1
 80091aa:	e14e      	b.n	800944a <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	2203      	movs	r2, #3
 80091b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	2200      	movs	r2, #0
 80091ba:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091c0:	2b01      	cmp	r3, #1
 80091c2:	d002      	beq.n	80091ca <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80091c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091c6:	025b      	lsls	r3, r3, #9
 80091c8:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80091ca:	f04f 33ff 	mov.w	r3, #4294967295
 80091ce:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	025b      	lsls	r3, r3, #9
 80091d4:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80091d6:	2390      	movs	r3, #144	; 0x90
 80091d8:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80091da:	2302      	movs	r3, #2
 80091dc:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80091de:	2300      	movs	r3, #0
 80091e0:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80091e2:	2300      	movs	r3, #0
 80091e4:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f107 0214 	add.w	r2, r7, #20
 80091ee:	4611      	mov	r1, r2
 80091f0:	4618      	mov	r0, r3
 80091f2:	f003 f857 	bl	800c2a4 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	68da      	ldr	r2, [r3, #12]
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009204:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	2b01      	cmp	r3, #1
 800920a:	d90a      	bls.n	8009222 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	2202      	movs	r2, #2
 8009210:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009218:	4618      	mov	r0, r3
 800921a:	f003 f8b5 	bl	800c388 <SDMMC_CmdReadMultiBlock>
 800921e:	6478      	str	r0, [r7, #68]	; 0x44
 8009220:	e009      	b.n	8009236 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	2201      	movs	r2, #1
 8009226:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800922e:	4618      	mov	r0, r3
 8009230:	f003 f887 	bl	800c342 <SDMMC_CmdReadSingleBlock>
 8009234:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009236:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009238:	2b00      	cmp	r3, #0
 800923a:	d012      	beq.n	8009262 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	4a84      	ldr	r2, [pc, #528]	; (8009454 <HAL_SD_ReadBlocks+0x30c>)
 8009242:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009248:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800924a:	431a      	orrs	r2, r3
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	2201      	movs	r2, #1
 8009254:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	2200      	movs	r2, #0
 800925c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800925e:	2301      	movs	r3, #1
 8009260:	e0f3      	b.n	800944a <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8009262:	69bb      	ldr	r3, [r7, #24]
 8009264:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009266:	e058      	b.n	800931a <HAL_SD_ReadBlocks+0x1d2>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800926e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009272:	2b00      	cmp	r3, #0
 8009274:	d033      	beq.n	80092de <HAL_SD_ReadBlocks+0x196>
 8009276:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009278:	2b1f      	cmp	r3, #31
 800927a:	d930      	bls.n	80092de <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800927c:	2300      	movs	r3, #0
 800927e:	643b      	str	r3, [r7, #64]	; 0x40
 8009280:	e027      	b.n	80092d2 <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	4618      	mov	r0, r3
 8009288:	f002 ff84 	bl	800c194 <SDMMC_ReadFIFO>
 800928c:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800928e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009290:	b2da      	uxtb	r2, r3
 8009292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009294:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009298:	3301      	adds	r3, #1
 800929a:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800929c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800929e:	0a1b      	lsrs	r3, r3, #8
 80092a0:	b2da      	uxtb	r2, r3
 80092a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092a4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80092a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092a8:	3301      	adds	r3, #1
 80092aa:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80092ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ae:	0c1b      	lsrs	r3, r3, #16
 80092b0:	b2da      	uxtb	r2, r3
 80092b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092b4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80092b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092b8:	3301      	adds	r3, #1
 80092ba:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80092bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092be:	0e1b      	lsrs	r3, r3, #24
 80092c0:	b2da      	uxtb	r2, r3
 80092c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092c4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80092c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092c8:	3301      	adds	r3, #1
 80092ca:	637b      	str	r3, [r7, #52]	; 0x34
        for(count = 0U; count < 8U; count++)
 80092cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092ce:	3301      	adds	r3, #1
 80092d0:	643b      	str	r3, [r7, #64]	; 0x40
 80092d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092d4:	2b07      	cmp	r3, #7
 80092d6:	d9d4      	bls.n	8009282 <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 80092d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092da:	3b20      	subs	r3, #32
 80092dc:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80092de:	f7f8 fbd1 	bl	8001a84 <HAL_GetTick>
 80092e2:	4602      	mov	r2, r0
 80092e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092e6:	1ad3      	subs	r3, r2, r3
 80092e8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80092ea:	429a      	cmp	r2, r3
 80092ec:	d902      	bls.n	80092f4 <HAL_SD_ReadBlocks+0x1ac>
 80092ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d112      	bne.n	800931a <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	4a56      	ldr	r2, [pc, #344]	; (8009454 <HAL_SD_ReadBlocks+0x30c>)
 80092fa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009300:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	2201      	movs	r2, #1
 800930c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	2200      	movs	r2, #0
 8009314:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8009316:	2303      	movs	r3, #3
 8009318:	e097      	b.n	800944a <HAL_SD_ReadBlocks+0x302>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009320:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8009324:	2b00      	cmp	r3, #0
 8009326:	d09f      	beq.n	8009268 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	68da      	ldr	r2, [r3, #12]
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009336:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800933e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009342:	2b00      	cmp	r3, #0
 8009344:	d022      	beq.n	800938c <HAL_SD_ReadBlocks+0x244>
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	2b01      	cmp	r3, #1
 800934a:	d91f      	bls.n	800938c <HAL_SD_ReadBlocks+0x244>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009350:	2b03      	cmp	r3, #3
 8009352:	d01b      	beq.n	800938c <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	4618      	mov	r0, r3
 800935a:	f003 f87f 	bl	800c45c <SDMMC_CmdStopTransfer>
 800935e:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8009360:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009362:	2b00      	cmp	r3, #0
 8009364:	d012      	beq.n	800938c <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	4a3a      	ldr	r2, [pc, #232]	; (8009454 <HAL_SD_ReadBlocks+0x30c>)
 800936c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009372:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009374:	431a      	orrs	r2, r3
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	2201      	movs	r2, #1
 800937e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	2200      	movs	r2, #0
 8009386:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8009388:	2301      	movs	r3, #1
 800938a:	e05e      	b.n	800944a <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009392:	f003 0308 	and.w	r3, r3, #8
 8009396:	2b00      	cmp	r3, #0
 8009398:	d012      	beq.n	80093c0 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	4a2d      	ldr	r2, [pc, #180]	; (8009454 <HAL_SD_ReadBlocks+0x30c>)
 80093a0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093a6:	f043 0208 	orr.w	r2, r3, #8
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	2201      	movs	r2, #1
 80093b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	2200      	movs	r2, #0
 80093ba:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80093bc:	2301      	movs	r3, #1
 80093be:	e044      	b.n	800944a <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093c6:	f003 0302 	and.w	r3, r3, #2
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d012      	beq.n	80093f4 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	4a20      	ldr	r2, [pc, #128]	; (8009454 <HAL_SD_ReadBlocks+0x30c>)
 80093d4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093da:	f043 0202 	orr.w	r2, r3, #2
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	2201      	movs	r2, #1
 80093e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	2200      	movs	r2, #0
 80093ee:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80093f0:	2301      	movs	r3, #1
 80093f2:	e02a      	b.n	800944a <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093fa:	f003 0320 	and.w	r3, r3, #32
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d012      	beq.n	8009428 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	4a13      	ldr	r2, [pc, #76]	; (8009454 <HAL_SD_ReadBlocks+0x30c>)
 8009408:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800940e:	f043 0220 	orr.w	r2, r3, #32
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	2201      	movs	r2, #1
 800941a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	2200      	movs	r2, #0
 8009422:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009424:	2301      	movs	r3, #1
 8009426:	e010      	b.n	800944a <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	4a0a      	ldr	r2, [pc, #40]	; (8009458 <HAL_SD_ReadBlocks+0x310>)
 800942e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	2201      	movs	r2, #1
 8009434:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8009438:	2300      	movs	r3, #0
 800943a:	e006      	b.n	800944a <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009440:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009448:	2301      	movs	r3, #1
  }
}
 800944a:	4618      	mov	r0, r3
 800944c:	3748      	adds	r7, #72	; 0x48
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}
 8009452:	bf00      	nop
 8009454:	1fe00fff 	.word	0x1fe00fff
 8009458:	18000f3a 	.word	0x18000f3a

0800945c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b092      	sub	sp, #72	; 0x48
 8009460:	af00      	add	r7, sp, #0
 8009462:	60f8      	str	r0, [r7, #12]
 8009464:	60b9      	str	r1, [r7, #8]
 8009466:	607a      	str	r2, [r7, #4]
 8009468:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800946a:	f7f8 fb0b 	bl	8001a84 <HAL_GetTick>
 800946e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d107      	bne.n	800948e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009482:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800948a:	2301      	movs	r3, #1
 800948c:	e16b      	b.n	8009766 <HAL_SD_WriteBlocks+0x30a>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009494:	b2db      	uxtb	r3, r3
 8009496:	2b01      	cmp	r3, #1
 8009498:	f040 815e 	bne.w	8009758 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	2200      	movs	r2, #0
 80094a0:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80094a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	441a      	add	r2, r3
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094ac:	429a      	cmp	r2, r3
 80094ae:	d907      	bls.n	80094c0 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094b4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80094bc:	2301      	movs	r3, #1
 80094be:	e152      	b.n	8009766 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	2203      	movs	r2, #3
 80094c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	2200      	movs	r2, #0
 80094ce:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094d4:	2b01      	cmp	r3, #1
 80094d6:	d002      	beq.n	80094de <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80094d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094da:	025b      	lsls	r3, r3, #9
 80094dc:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80094de:	f04f 33ff 	mov.w	r3, #4294967295
 80094e2:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	025b      	lsls	r3, r3, #9
 80094e8:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80094ea:	2390      	movs	r3, #144	; 0x90
 80094ec:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80094ee:	2300      	movs	r3, #0
 80094f0:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80094f2:	2300      	movs	r3, #0
 80094f4:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80094f6:	2300      	movs	r3, #0
 80094f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f107 0218 	add.w	r2, r7, #24
 8009502:	4611      	mov	r1, r2
 8009504:	4618      	mov	r0, r3
 8009506:	f002 fecd 	bl	800c2a4 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	68da      	ldr	r2, [r3, #12]
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009518:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	2b01      	cmp	r3, #1
 800951e:	d90a      	bls.n	8009536 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	2220      	movs	r2, #32
 8009524:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800952c:	4618      	mov	r0, r3
 800952e:	f002 ff71 	bl	800c414 <SDMMC_CmdWriteMultiBlock>
 8009532:	6478      	str	r0, [r7, #68]	; 0x44
 8009534:	e009      	b.n	800954a <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	2210      	movs	r2, #16
 800953a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009542:	4618      	mov	r0, r3
 8009544:	f002 ff43 	bl	800c3ce <SDMMC_CmdWriteSingleBlock>
 8009548:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800954a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800954c:	2b00      	cmp	r3, #0
 800954e:	d012      	beq.n	8009576 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	4a86      	ldr	r2, [pc, #536]	; (8009770 <HAL_SD_WriteBlocks+0x314>)
 8009556:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800955c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800955e:	431a      	orrs	r2, r3
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	2201      	movs	r2, #1
 8009568:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	2200      	movs	r2, #0
 8009570:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009572:	2301      	movs	r3, #1
 8009574:	e0f7      	b.n	8009766 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8009576:	69fb      	ldr	r3, [r7, #28]
 8009578:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800957a:	e05c      	b.n	8009636 <HAL_SD_WriteBlocks+0x1da>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009582:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009586:	2b00      	cmp	r3, #0
 8009588:	d037      	beq.n	80095fa <HAL_SD_WriteBlocks+0x19e>
 800958a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800958c:	2b1f      	cmp	r3, #31
 800958e:	d934      	bls.n	80095fa <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8009590:	2300      	movs	r3, #0
 8009592:	643b      	str	r3, [r7, #64]	; 0x40
 8009594:	e02b      	b.n	80095ee <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 8009596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009598:	781b      	ldrb	r3, [r3, #0]
 800959a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800959c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800959e:	3301      	adds	r3, #1
 80095a0:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 80095a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095a4:	781b      	ldrb	r3, [r3, #0]
 80095a6:	021a      	lsls	r2, r3, #8
 80095a8:	697b      	ldr	r3, [r7, #20]
 80095aa:	4313      	orrs	r3, r2
 80095ac:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80095ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095b0:	3301      	adds	r3, #1
 80095b2:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 80095b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095b6:	781b      	ldrb	r3, [r3, #0]
 80095b8:	041a      	lsls	r2, r3, #16
 80095ba:	697b      	ldr	r3, [r7, #20]
 80095bc:	4313      	orrs	r3, r2
 80095be:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80095c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095c2:	3301      	adds	r3, #1
 80095c4:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 80095c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095c8:	781b      	ldrb	r3, [r3, #0]
 80095ca:	061a      	lsls	r2, r3, #24
 80095cc:	697b      	ldr	r3, [r7, #20]
 80095ce:	4313      	orrs	r3, r2
 80095d0:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80095d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095d4:	3301      	adds	r3, #1
 80095d6:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f107 0214 	add.w	r2, r7, #20
 80095e0:	4611      	mov	r1, r2
 80095e2:	4618      	mov	r0, r3
 80095e4:	f002 fde3 	bl	800c1ae <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80095e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80095ea:	3301      	adds	r3, #1
 80095ec:	643b      	str	r3, [r7, #64]	; 0x40
 80095ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80095f0:	2b07      	cmp	r3, #7
 80095f2:	d9d0      	bls.n	8009596 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 80095f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095f6:	3b20      	subs	r3, #32
 80095f8:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80095fa:	f7f8 fa43 	bl	8001a84 <HAL_GetTick>
 80095fe:	4602      	mov	r2, r0
 8009600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009602:	1ad3      	subs	r3, r2, r3
 8009604:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009606:	429a      	cmp	r2, r3
 8009608:	d902      	bls.n	8009610 <HAL_SD_WriteBlocks+0x1b4>
 800960a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800960c:	2b00      	cmp	r3, #0
 800960e:	d112      	bne.n	8009636 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	4a56      	ldr	r2, [pc, #344]	; (8009770 <HAL_SD_WriteBlocks+0x314>)
 8009616:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800961c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800961e:	431a      	orrs	r2, r3
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	2201      	movs	r2, #1
 8009628:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	2200      	movs	r2, #0
 8009630:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8009632:	2303      	movs	r3, #3
 8009634:	e097      	b.n	8009766 <HAL_SD_WriteBlocks+0x30a>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800963c:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8009640:	2b00      	cmp	r3, #0
 8009642:	d09b      	beq.n	800957c <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	68da      	ldr	r2, [r3, #12]
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009652:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800965a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800965e:	2b00      	cmp	r3, #0
 8009660:	d022      	beq.n	80096a8 <HAL_SD_WriteBlocks+0x24c>
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	2b01      	cmp	r3, #1
 8009666:	d91f      	bls.n	80096a8 <HAL_SD_WriteBlocks+0x24c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800966c:	2b03      	cmp	r3, #3
 800966e:	d01b      	beq.n	80096a8 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	4618      	mov	r0, r3
 8009676:	f002 fef1 	bl	800c45c <SDMMC_CmdStopTransfer>
 800967a:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800967c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800967e:	2b00      	cmp	r3, #0
 8009680:	d012      	beq.n	80096a8 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	4a3a      	ldr	r2, [pc, #232]	; (8009770 <HAL_SD_WriteBlocks+0x314>)
 8009688:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800968e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009690:	431a      	orrs	r2, r3
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	2201      	movs	r2, #1
 800969a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	2200      	movs	r2, #0
 80096a2:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80096a4:	2301      	movs	r3, #1
 80096a6:	e05e      	b.n	8009766 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096ae:	f003 0308 	and.w	r3, r3, #8
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d012      	beq.n	80096dc <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	4a2d      	ldr	r2, [pc, #180]	; (8009770 <HAL_SD_WriteBlocks+0x314>)
 80096bc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096c2:	f043 0208 	orr.w	r2, r3, #8
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	2201      	movs	r2, #1
 80096ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	2200      	movs	r2, #0
 80096d6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80096d8:	2301      	movs	r3, #1
 80096da:	e044      	b.n	8009766 <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096e2:	f003 0302 	and.w	r3, r3, #2
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d012      	beq.n	8009710 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	4a20      	ldr	r2, [pc, #128]	; (8009770 <HAL_SD_WriteBlocks+0x314>)
 80096f0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096f6:	f043 0202 	orr.w	r2, r3, #2
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	2201      	movs	r2, #1
 8009702:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	2200      	movs	r2, #0
 800970a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800970c:	2301      	movs	r3, #1
 800970e:	e02a      	b.n	8009766 <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009716:	f003 0310 	and.w	r3, r3, #16
 800971a:	2b00      	cmp	r3, #0
 800971c:	d012      	beq.n	8009744 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	4a13      	ldr	r2, [pc, #76]	; (8009770 <HAL_SD_WriteBlocks+0x314>)
 8009724:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800972a:	f043 0210 	orr.w	r2, r3, #16
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	2201      	movs	r2, #1
 8009736:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	2200      	movs	r2, #0
 800973e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009740:	2301      	movs	r3, #1
 8009742:	e010      	b.n	8009766 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	4a0a      	ldr	r2, [pc, #40]	; (8009774 <HAL_SD_WriteBlocks+0x318>)
 800974a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	2201      	movs	r2, #1
 8009750:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8009754:	2300      	movs	r3, #0
 8009756:	e006      	b.n	8009766 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800975c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009764:	2301      	movs	r3, #1
  }
}
 8009766:	4618      	mov	r0, r3
 8009768:	3748      	adds	r7, #72	; 0x48
 800976a:	46bd      	mov	sp, r7
 800976c:	bd80      	pop	{r7, pc}
 800976e:	bf00      	nop
 8009770:	1fe00fff 	.word	0x1fe00fff
 8009774:	18000f3a 	.word	0x18000f3a

08009778 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b08c      	sub	sp, #48	; 0x30
 800977c:	af00      	add	r7, sp, #0
 800977e:	60f8      	str	r0, [r7, #12]
 8009780:	60b9      	str	r1, [r7, #8]
 8009782:	607a      	str	r2, [r7, #4]
 8009784:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800978a:	68bb      	ldr	r3, [r7, #8]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d107      	bne.n	80097a0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009794:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800979c:	2301      	movs	r3, #1
 800979e:	e08d      	b.n	80098bc <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80097a6:	b2db      	uxtb	r3, r3
 80097a8:	2b01      	cmp	r3, #1
 80097aa:	f040 8086 	bne.w	80098ba <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	2200      	movs	r2, #0
 80097b2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80097b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	441a      	add	r2, r3
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097be:	429a      	cmp	r2, r3
 80097c0:	d907      	bls.n	80097d2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097c6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80097ce:	2301      	movs	r3, #1
 80097d0:	e074      	b.n	80098bc <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	2203      	movs	r2, #3
 80097d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	2200      	movs	r2, #0
 80097e0:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	68ba      	ldr	r2, [r7, #8]
 80097e6:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	025a      	lsls	r2, r3, #9
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097f4:	2b01      	cmp	r3, #1
 80097f6:	d002      	beq.n	80097fe <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 80097f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097fa:	025b      	lsls	r3, r3, #9
 80097fc:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80097fe:	f04f 33ff 	mov.w	r3, #4294967295
 8009802:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	025b      	lsls	r3, r3, #9
 8009808:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800980a:	2390      	movs	r3, #144	; 0x90
 800980c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800980e:	2302      	movs	r3, #2
 8009810:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009812:	2300      	movs	r3, #0
 8009814:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8009816:	2300      	movs	r3, #0
 8009818:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f107 0210 	add.w	r2, r7, #16
 8009822:	4611      	mov	r1, r2
 8009824:	4618      	mov	r0, r3
 8009826:	f002 fd3d 	bl	800c2a4 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	68da      	ldr	r2, [r3, #12]
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009838:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	68ba      	ldr	r2, [r7, #8]
 8009840:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	2201      	movs	r2, #1
 8009848:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if(NumberOfBlocks > 1U)
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	2b01      	cmp	r3, #1
 800984e:	d90a      	bls.n	8009866 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	2282      	movs	r2, #130	; 0x82
 8009854:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800985c:	4618      	mov	r0, r3
 800985e:	f002 fd93 	bl	800c388 <SDMMC_CmdReadMultiBlock>
 8009862:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009864:	e009      	b.n	800987a <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	2281      	movs	r2, #129	; 0x81
 800986a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009872:	4618      	mov	r0, r3
 8009874:	f002 fd65 	bl	800c342 <SDMMC_CmdReadSingleBlock>
 8009878:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800987a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800987c:	2b00      	cmp	r3, #0
 800987e:	d012      	beq.n	80098a6 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	4a0f      	ldr	r2, [pc, #60]	; (80098c4 <HAL_SD_ReadBlocks_DMA+0x14c>)
 8009886:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800988c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800988e:	431a      	orrs	r2, r3
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	2201      	movs	r2, #1
 8009898:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	2200      	movs	r2, #0
 80098a0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80098a2:	2301      	movs	r3, #1
 80098a4:	e00a      	b.n	80098bc <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 80098b4:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 80098b6:	2300      	movs	r3, #0
 80098b8:	e000      	b.n	80098bc <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 80098ba:	2302      	movs	r3, #2
  }
}
 80098bc:	4618      	mov	r0, r3
 80098be:	3730      	adds	r7, #48	; 0x30
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}
 80098c4:	1fe00fff 	.word	0x1fe00fff

080098c8 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b08c      	sub	sp, #48	; 0x30
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	60f8      	str	r0, [r7, #12]
 80098d0:	60b9      	str	r1, [r7, #8]
 80098d2:	607a      	str	r2, [r7, #4]
 80098d4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d107      	bne.n	80098f0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098e4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80098ec:	2301      	movs	r3, #1
 80098ee:	e08d      	b.n	8009a0c <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80098f6:	b2db      	uxtb	r3, r3
 80098f8:	2b01      	cmp	r3, #1
 80098fa:	f040 8086 	bne.w	8009a0a <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	2200      	movs	r2, #0
 8009902:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009904:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	441a      	add	r2, r3
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800990e:	429a      	cmp	r2, r3
 8009910:	d907      	bls.n	8009922 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009916:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800991e:	2301      	movs	r3, #1
 8009920:	e074      	b.n	8009a0c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	2203      	movs	r2, #3
 8009926:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	2200      	movs	r2, #0
 8009930:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	68ba      	ldr	r2, [r7, #8]
 8009936:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	025a      	lsls	r2, r3, #9
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	625a      	str	r2, [r3, #36]	; 0x24

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009944:	2b01      	cmp	r3, #1
 8009946:	d002      	beq.n	800994e <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8009948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800994a:	025b      	lsls	r3, r3, #9
 800994c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800994e:	f04f 33ff 	mov.w	r3, #4294967295
 8009952:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	025b      	lsls	r3, r3, #9
 8009958:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800995a:	2390      	movs	r3, #144	; 0x90
 800995c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800995e:	2300      	movs	r3, #0
 8009960:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009962:	2300      	movs	r3, #0
 8009964:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8009966:	2300      	movs	r3, #0
 8009968:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	f107 0210 	add.w	r2, r7, #16
 8009972:	4611      	mov	r1, r2
 8009974:	4618      	mov	r0, r3
 8009976:	f002 fc95 	bl	800c2a4 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	68da      	ldr	r2, [r3, #12]
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009988:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	68ba      	ldr	r2, [r7, #8]
 8009990:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	2201      	movs	r2, #1
 8009998:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	2b01      	cmp	r3, #1
 800999e:	d90a      	bls.n	80099b6 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	22a0      	movs	r2, #160	; 0xa0
 80099a4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80099ac:	4618      	mov	r0, r3
 80099ae:	f002 fd31 	bl	800c414 <SDMMC_CmdWriteMultiBlock>
 80099b2:	62f8      	str	r0, [r7, #44]	; 0x2c
 80099b4:	e009      	b.n	80099ca <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	2290      	movs	r2, #144	; 0x90
 80099ba:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80099c2:	4618      	mov	r0, r3
 80099c4:	f002 fd03 	bl	800c3ce <SDMMC_CmdWriteSingleBlock>
 80099c8:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80099ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d012      	beq.n	80099f6 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	4a0f      	ldr	r2, [pc, #60]	; (8009a14 <HAL_SD_WriteBlocks_DMA+0x14c>)
 80099d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80099dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099de:	431a      	orrs	r2, r3
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	2201      	movs	r2, #1
 80099e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	2200      	movs	r2, #0
 80099f0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80099f2:	2301      	movs	r3, #1
 80099f4:	e00a      	b.n	8009a0c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 8009a04:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009a06:	2300      	movs	r3, #0
 8009a08:	e000      	b.n	8009a0c <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8009a0a:	2302      	movs	r3, #2
  }
}
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	3730      	adds	r7, #48	; 0x30
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd80      	pop	{r7, pc}
 8009a14:	1fe00fff 	.word	0x1fe00fff

08009a18 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b084      	sub	sp, #16
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a24:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d008      	beq.n	8009a46 <HAL_SD_IRQHandler+0x2e>
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	f003 0308 	and.w	r3, r3, #8
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d003      	beq.n	8009a46 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f001 f92a 	bl	800ac98 <SD_Read_IT>
 8009a44:	e19a      	b.n	8009d7c <HAL_SD_IRQHandler+0x364>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	f000 80ac 	beq.w	8009bae <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009a5e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681a      	ldr	r2, [r3, #0]
 8009a6a:	4b9d      	ldr	r3, [pc, #628]	; (8009ce0 <HAL_SD_IRQHandler+0x2c8>)
 8009a6c:	400b      	ands	r3, r1
 8009a6e:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8009a7e:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	68da      	ldr	r2, [r3, #12]
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a8e:	60da      	str	r2, [r3, #12]

    if((context & SD_CONTEXT_IT) != 0U)
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	f003 0308 	and.w	r3, r3, #8
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d038      	beq.n	8009b0c <HAL_SD_IRQHandler+0xf4>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	f003 0302 	and.w	r3, r3, #2
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d104      	bne.n	8009aae <HAL_SD_IRQHandler+0x96>
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	f003 0320 	and.w	r3, r3, #32
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d011      	beq.n	8009ad2 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f002 fcd2 	bl	800c45c <SDMMC_CmdStopTransfer>
 8009ab8:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d008      	beq.n	8009ad2 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	431a      	orrs	r2, r3
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f000 f959 	bl	8009d84 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	4a83      	ldr	r2, [pc, #524]	; (8009ce4 <HAL_SD_IRQHandler+0x2cc>)
 8009ad8:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2201      	movs	r2, #1
 8009ade:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	f003 0301 	and.w	r3, r3, #1
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d104      	bne.n	8009afc <HAL_SD_IRQHandler+0xe4>
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	f003 0302 	and.w	r3, r3, #2
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d003      	beq.n	8009b04 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f004 fcc3 	bl	800e488 <HAL_SD_RxCpltCallback>
 8009b02:	e13b      	b.n	8009d7c <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	f004 fcb5 	bl	800e474 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009b0a:	e137      	b.n	8009d7c <HAL_SD_IRQHandler+0x364>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	f000 8132 	beq.w	8009d7c <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	2200      	movs	r2, #0
 8009b26:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	651a      	str	r2, [r3, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	f003 0302 	and.w	r3, r3, #2
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d104      	bne.n	8009b44 <HAL_SD_IRQHandler+0x12c>
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	f003 0320 	and.w	r3, r3, #32
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d011      	beq.n	8009b68 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	4618      	mov	r0, r3
 8009b4a:	f002 fc87 	bl	800c45c <SDMMC_CmdStopTransfer>
 8009b4e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d008      	beq.n	8009b68 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	431a      	orrs	r2, r3
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f000 f90e 	bl	8009d84 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2201      	movs	r2, #1
 8009b6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2200      	movs	r2, #0
 8009b74:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	f003 0310 	and.w	r3, r3, #16
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d104      	bne.n	8009b8a <HAL_SD_IRQHandler+0x172>
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	f003 0320 	and.w	r3, r3, #32
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d002      	beq.n	8009b90 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f004 fc72 	bl	800e474 <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	f003 0301 	and.w	r3, r3, #1
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d105      	bne.n	8009ba6 <HAL_SD_IRQHandler+0x18e>
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	f003 0302 	and.w	r3, r3, #2
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	f000 80eb 	beq.w	8009d7c <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f004 fc6e 	bl	800e488 <HAL_SD_RxCpltCallback>
}
 8009bac:	e0e6      	b.n	8009d7c <HAL_SD_IRQHandler+0x364>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d008      	beq.n	8009bce <HAL_SD_IRQHandler+0x1b6>
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	f003 0308 	and.w	r3, r3, #8
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d003      	beq.n	8009bce <HAL_SD_IRQHandler+0x1b6>
    SD_Write_IT(hsd);
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f001 f8ac 	bl	800ad24 <SD_Write_IT>
 8009bcc:	e0d6      	b.n	8009d7c <HAL_SD_IRQHandler+0x364>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bd4:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	f000 80a2 	beq.w	8009d22 <HAL_SD_IRQHandler+0x30a>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009be4:	f003 0302 	and.w	r3, r3, #2
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d005      	beq.n	8009bf8 <HAL_SD_IRQHandler+0x1e0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bf0:	f043 0202 	orr.w	r2, r3, #2
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bfe:	f003 0308 	and.w	r3, r3, #8
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d005      	beq.n	8009c12 <HAL_SD_IRQHandler+0x1fa>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c0a:	f043 0208 	orr.w	r2, r3, #8
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c18:	f003 0320 	and.w	r3, r3, #32
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d005      	beq.n	8009c2c <HAL_SD_IRQHandler+0x214>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c24:	f043 0220 	orr.w	r2, r3, #32
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c32:	f003 0310 	and.w	r3, r3, #16
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d005      	beq.n	8009c46 <HAL_SD_IRQHandler+0x22e>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c3e:	f043 0210 	orr.w	r2, r3, #16
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	4a26      	ldr	r2, [pc, #152]	; (8009ce4 <HAL_SD_IRQHandler+0x2cc>)
 8009c4c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8009c5c:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	68da      	ldr	r2, [r3, #12]
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009c6c:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009c7c:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	68da      	ldr	r2, [r3, #12]
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009c8c:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	4618      	mov	r0, r3
 8009c94:	f002 fbe2 	bl	800c45c <SDMMC_CmdStopTransfer>
 8009c98:	4602      	mov	r2, r0
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c9e:	431a      	orrs	r2, r3
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	68da      	ldr	r2, [r3, #12]
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009cb2:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009cbc:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	f003 0308 	and.w	r3, r3, #8
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d00f      	beq.n	8009ce8 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2201      	movs	r2, #1
 8009ccc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	f000 f854 	bl	8009d84 <HAL_SD_ErrorCallback>
}
 8009cdc:	e04e      	b.n	8009d7c <HAL_SD_IRQHandler+0x364>
 8009cde:	bf00      	nop
 8009ce0:	ffff3ec5 	.word	0xffff3ec5
 8009ce4:	18000f3a 	.word	0x18000f3a
    else if((context & SD_CONTEXT_DMA) != 0U)
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d044      	beq.n	8009d7c <HAL_SD_IRQHandler+0x364>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d040      	beq.n	8009d7c <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8009d08:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	2200      	movs	r2, #0
 8009d10:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2201      	movs	r2, #1
 8009d16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f000 f832 	bl	8009d84 <HAL_SD_ErrorCallback>
}
 8009d20:	e02c      	b.n	8009d7c <HAL_SD_IRQHandler+0x364>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d025      	beq.n	8009d7c <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d38:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d40:	f003 0304 	and.w	r3, r3, #4
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d10c      	bne.n	8009d62 <HAL_SD_IRQHandler+0x34a>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	f003 0320 	and.w	r3, r3, #32
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d003      	beq.n	8009d5a <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f001 f84e 	bl	800adf4 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8009d58:	e010      	b.n	8009d7c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f001 f836 	bl	800adcc <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8009d60:	e00c      	b.n	8009d7c <HAL_SD_IRQHandler+0x364>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	f003 0320 	and.w	r3, r3, #32
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d003      	beq.n	8009d74 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8009d6c:	6878      	ldr	r0, [r7, #4]
 8009d6e:	f001 f837 	bl	800ade0 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 8009d72:	e003      	b.n	8009d7c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8009d74:	6878      	ldr	r0, [r7, #4]
 8009d76:	f001 f81f 	bl	800adb8 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8009d7a:	e7ff      	b.n	8009d7c <HAL_SD_IRQHandler+0x364>
 8009d7c:	bf00      	nop
 8009d7e:	3710      	adds	r7, #16
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}

08009d84 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8009d84:	b480      	push	{r7}
 8009d86:	b083      	sub	sp, #12
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8009d8c:	bf00      	nop
 8009d8e:	370c      	adds	r7, #12
 8009d90:	46bd      	mov	sp, r7
 8009d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d96:	4770      	bx	lr

08009d98 <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b083      	sub	sp, #12
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	4603      	mov	r3, r0
 8009da0:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 8009da2:	bf00      	nop
 8009da4:	370c      	adds	r7, #12
 8009da6:	46bd      	mov	sp, r7
 8009da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dac:	4770      	bx	lr
	...

08009db0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009db0:	b480      	push	{r7}
 8009db2:	b083      	sub	sp, #12
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
 8009db8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009dbe:	0f9b      	lsrs	r3, r3, #30
 8009dc0:	b2da      	uxtb	r2, r3
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009dca:	0e9b      	lsrs	r3, r3, #26
 8009dcc:	b2db      	uxtb	r3, r3
 8009dce:	f003 030f 	and.w	r3, r3, #15
 8009dd2:	b2da      	uxtb	r2, r3
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ddc:	0e1b      	lsrs	r3, r3, #24
 8009dde:	b2db      	uxtb	r3, r3
 8009de0:	f003 0303 	and.w	r3, r3, #3
 8009de4:	b2da      	uxtb	r2, r3
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009dee:	0c1b      	lsrs	r3, r3, #16
 8009df0:	b2da      	uxtb	r2, r3
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009dfa:	0a1b      	lsrs	r3, r3, #8
 8009dfc:	b2da      	uxtb	r2, r3
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e06:	b2da      	uxtb	r2, r3
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009e10:	0d1b      	lsrs	r3, r3, #20
 8009e12:	b29a      	uxth	r2, r3
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009e1c:	0c1b      	lsrs	r3, r3, #16
 8009e1e:	b2db      	uxtb	r3, r3
 8009e20:	f003 030f 	and.w	r3, r3, #15
 8009e24:	b2da      	uxtb	r2, r3
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009e2e:	0bdb      	lsrs	r3, r3, #15
 8009e30:	b2db      	uxtb	r3, r3
 8009e32:	f003 0301 	and.w	r3, r3, #1
 8009e36:	b2da      	uxtb	r2, r3
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009e40:	0b9b      	lsrs	r3, r3, #14
 8009e42:	b2db      	uxtb	r3, r3
 8009e44:	f003 0301 	and.w	r3, r3, #1
 8009e48:	b2da      	uxtb	r2, r3
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009e52:	0b5b      	lsrs	r3, r3, #13
 8009e54:	b2db      	uxtb	r3, r3
 8009e56:	f003 0301 	and.w	r3, r3, #1
 8009e5a:	b2da      	uxtb	r2, r3
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009e64:	0b1b      	lsrs	r3, r3, #12
 8009e66:	b2db      	uxtb	r3, r3
 8009e68:	f003 0301 	and.w	r3, r3, #1
 8009e6c:	b2da      	uxtb	r2, r3
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	2200      	movs	r2, #0
 8009e76:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d163      	bne.n	8009f48 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009e84:	009a      	lsls	r2, r3, #2
 8009e86:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009e8a:	4013      	ands	r3, r2
 8009e8c:	687a      	ldr	r2, [r7, #4]
 8009e8e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009e90:	0f92      	lsrs	r2, r2, #30
 8009e92:	431a      	orrs	r2, r3
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009e9c:	0edb      	lsrs	r3, r3, #27
 8009e9e:	b2db      	uxtb	r3, r3
 8009ea0:	f003 0307 	and.w	r3, r3, #7
 8009ea4:	b2da      	uxtb	r2, r3
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009eae:	0e1b      	lsrs	r3, r3, #24
 8009eb0:	b2db      	uxtb	r3, r3
 8009eb2:	f003 0307 	and.w	r3, r3, #7
 8009eb6:	b2da      	uxtb	r2, r3
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009ec0:	0d5b      	lsrs	r3, r3, #21
 8009ec2:	b2db      	uxtb	r3, r3
 8009ec4:	f003 0307 	and.w	r3, r3, #7
 8009ec8:	b2da      	uxtb	r2, r3
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009ed2:	0c9b      	lsrs	r3, r3, #18
 8009ed4:	b2db      	uxtb	r3, r3
 8009ed6:	f003 0307 	and.w	r3, r3, #7
 8009eda:	b2da      	uxtb	r2, r3
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009ee4:	0bdb      	lsrs	r3, r3, #15
 8009ee6:	b2db      	uxtb	r3, r3
 8009ee8:	f003 0307 	and.w	r3, r3, #7
 8009eec:	b2da      	uxtb	r2, r3
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	691b      	ldr	r3, [r3, #16]
 8009ef6:	1c5a      	adds	r2, r3, #1
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	7e1b      	ldrb	r3, [r3, #24]
 8009f00:	b2db      	uxtb	r3, r3
 8009f02:	f003 0307 	and.w	r3, r3, #7
 8009f06:	3302      	adds	r3, #2
 8009f08:	2201      	movs	r2, #1
 8009f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8009f0e:	687a      	ldr	r2, [r7, #4]
 8009f10:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8009f12:	fb02 f203 	mul.w	r2, r2, r3
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	7a1b      	ldrb	r3, [r3, #8]
 8009f1e:	b2db      	uxtb	r3, r3
 8009f20:	f003 030f 	and.w	r3, r3, #15
 8009f24:	2201      	movs	r2, #1
 8009f26:	409a      	lsls	r2, r3
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f30:	687a      	ldr	r2, [r7, #4]
 8009f32:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009f34:	0a52      	lsrs	r2, r2, #9
 8009f36:	fb02 f203 	mul.w	r2, r2, r3
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009f44:	659a      	str	r2, [r3, #88]	; 0x58
 8009f46:	e031      	b.n	8009fac <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f4c:	2b01      	cmp	r3, #1
 8009f4e:	d11d      	bne.n	8009f8c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f54:	041b      	lsls	r3, r3, #16
 8009f56:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009f5e:	0c1b      	lsrs	r3, r3, #16
 8009f60:	431a      	orrs	r2, r3
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	691b      	ldr	r3, [r3, #16]
 8009f6a:	3301      	adds	r3, #1
 8009f6c:	029a      	lsls	r2, r3, #10
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009f80:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	659a      	str	r2, [r3, #88]	; 0x58
 8009f8a:	e00f      	b.n	8009fac <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	4a58      	ldr	r2, [pc, #352]	; (800a0f4 <HAL_SD_GetCardCSD+0x344>)
 8009f92:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f98:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2201      	movs	r2, #1
 8009fa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009fa8:	2301      	movs	r3, #1
 8009faa:	e09d      	b.n	800a0e8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009fb0:	0b9b      	lsrs	r3, r3, #14
 8009fb2:	b2db      	uxtb	r3, r3
 8009fb4:	f003 0301 	and.w	r3, r3, #1
 8009fb8:	b2da      	uxtb	r2, r3
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009fc2:	09db      	lsrs	r3, r3, #7
 8009fc4:	b2db      	uxtb	r3, r3
 8009fc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009fca:	b2da      	uxtb	r2, r3
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009fd4:	b2db      	uxtb	r3, r3
 8009fd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009fda:	b2da      	uxtb	r2, r3
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009fe4:	0fdb      	lsrs	r3, r3, #31
 8009fe6:	b2da      	uxtb	r2, r3
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ff0:	0f5b      	lsrs	r3, r3, #29
 8009ff2:	b2db      	uxtb	r3, r3
 8009ff4:	f003 0303 	and.w	r3, r3, #3
 8009ff8:	b2da      	uxtb	r2, r3
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a002:	0e9b      	lsrs	r3, r3, #26
 800a004:	b2db      	uxtb	r3, r3
 800a006:	f003 0307 	and.w	r3, r3, #7
 800a00a:	b2da      	uxtb	r2, r3
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a014:	0d9b      	lsrs	r3, r3, #22
 800a016:	b2db      	uxtb	r3, r3
 800a018:	f003 030f 	and.w	r3, r3, #15
 800a01c:	b2da      	uxtb	r2, r3
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a026:	0d5b      	lsrs	r3, r3, #21
 800a028:	b2db      	uxtb	r3, r3
 800a02a:	f003 0301 	and.w	r3, r3, #1
 800a02e:	b2da      	uxtb	r2, r3
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	2200      	movs	r2, #0
 800a03a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a042:	0c1b      	lsrs	r3, r3, #16
 800a044:	b2db      	uxtb	r3, r3
 800a046:	f003 0301 	and.w	r3, r3, #1
 800a04a:	b2da      	uxtb	r2, r3
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a056:	0bdb      	lsrs	r3, r3, #15
 800a058:	b2db      	uxtb	r3, r3
 800a05a:	f003 0301 	and.w	r3, r3, #1
 800a05e:	b2da      	uxtb	r2, r3
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a06a:	0b9b      	lsrs	r3, r3, #14
 800a06c:	b2db      	uxtb	r3, r3
 800a06e:	f003 0301 	and.w	r3, r3, #1
 800a072:	b2da      	uxtb	r2, r3
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a07e:	0b5b      	lsrs	r3, r3, #13
 800a080:	b2db      	uxtb	r3, r3
 800a082:	f003 0301 	and.w	r3, r3, #1
 800a086:	b2da      	uxtb	r2, r3
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a092:	0b1b      	lsrs	r3, r3, #12
 800a094:	b2db      	uxtb	r3, r3
 800a096:	f003 0301 	and.w	r3, r3, #1
 800a09a:	b2da      	uxtb	r2, r3
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0a6:	0a9b      	lsrs	r3, r3, #10
 800a0a8:	b2db      	uxtb	r3, r3
 800a0aa:	f003 0303 	and.w	r3, r3, #3
 800a0ae:	b2da      	uxtb	r2, r3
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0ba:	0a1b      	lsrs	r3, r3, #8
 800a0bc:	b2db      	uxtb	r3, r3
 800a0be:	f003 0303 	and.w	r3, r3, #3
 800a0c2:	b2da      	uxtb	r2, r3
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0ce:	085b      	lsrs	r3, r3, #1
 800a0d0:	b2db      	uxtb	r3, r3
 800a0d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0d6:	b2da      	uxtb	r2, r3
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	2201      	movs	r2, #1
 800a0e2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800a0e6:	2300      	movs	r3, #0
}
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	370c      	adds	r7, #12
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f2:	4770      	bx	lr
 800a0f4:	1fe00fff 	.word	0x1fe00fff

0800a0f8 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b094      	sub	sp, #80	; 0x50
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
 800a100:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800a102:	2300      	movs	r3, #0
 800a104:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800a108:	f107 0308 	add.w	r3, r7, #8
 800a10c:	4619      	mov	r1, r3
 800a10e:	6878      	ldr	r0, [r7, #4]
 800a110:	f000 fb64 	bl	800a7dc <SD_SendSDStatus>
 800a114:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800a116:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d011      	beq.n	800a140 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	4a4f      	ldr	r2, [pc, #316]	; (800a260 <HAL_SD_GetCardStatus+0x168>)
 800a122:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a128:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a12a:	431a      	orrs	r2, r3
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2201      	movs	r2, #1
 800a134:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800a138:	2301      	movs	r3, #1
 800a13a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800a13e:	e070      	b.n	800a222 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800a140:	68bb      	ldr	r3, [r7, #8]
 800a142:	099b      	lsrs	r3, r3, #6
 800a144:	b2db      	uxtb	r3, r3
 800a146:	f003 0303 	and.w	r3, r3, #3
 800a14a:	b2da      	uxtb	r2, r3
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	095b      	lsrs	r3, r3, #5
 800a154:	b2db      	uxtb	r3, r3
 800a156:	f003 0301 	and.w	r3, r3, #1
 800a15a:	b2da      	uxtb	r2, r3
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	0a1b      	lsrs	r3, r3, #8
 800a164:	b29b      	uxth	r3, r3
 800a166:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a16a:	b29a      	uxth	r2, r3
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	0e1b      	lsrs	r3, r3, #24
 800a170:	b29b      	uxth	r3, r3
 800a172:	4313      	orrs	r3, r2
 800a174:	b29a      	uxth	r2, r3
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	061a      	lsls	r2, r3, #24
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	021b      	lsls	r3, r3, #8
 800a182:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a186:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	0a1b      	lsrs	r3, r3, #8
 800a18c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a190:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	0e1b      	lsrs	r3, r3, #24
 800a196:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800a19c:	693b      	ldr	r3, [r7, #16]
 800a19e:	b2da      	uxtb	r2, r3
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800a1a4:	693b      	ldr	r3, [r7, #16]
 800a1a6:	0a1b      	lsrs	r3, r3, #8
 800a1a8:	b2da      	uxtb	r2, r3
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800a1ae:	693b      	ldr	r3, [r7, #16]
 800a1b0:	0d1b      	lsrs	r3, r3, #20
 800a1b2:	b2db      	uxtb	r3, r3
 800a1b4:	f003 030f 	and.w	r3, r3, #15
 800a1b8:	b2da      	uxtb	r2, r3
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800a1be:	693b      	ldr	r3, [r7, #16]
 800a1c0:	0c1b      	lsrs	r3, r3, #16
 800a1c2:	b29b      	uxth	r3, r3
 800a1c4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a1c8:	b29a      	uxth	r2, r3
 800a1ca:	697b      	ldr	r3, [r7, #20]
 800a1cc:	b29b      	uxth	r3, r3
 800a1ce:	b2db      	uxtb	r3, r3
 800a1d0:	b29b      	uxth	r3, r3
 800a1d2:	4313      	orrs	r3, r2
 800a1d4:	b29a      	uxth	r2, r3
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800a1da:	697b      	ldr	r3, [r7, #20]
 800a1dc:	0a9b      	lsrs	r3, r3, #10
 800a1de:	b2db      	uxtb	r3, r3
 800a1e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a1e4:	b2da      	uxtb	r2, r3
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800a1ea:	697b      	ldr	r3, [r7, #20]
 800a1ec:	0a1b      	lsrs	r3, r3, #8
 800a1ee:	b2db      	uxtb	r3, r3
 800a1f0:	f003 0303 	and.w	r3, r3, #3
 800a1f4:	b2da      	uxtb	r2, r3
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800a1fa:	697b      	ldr	r3, [r7, #20]
 800a1fc:	091b      	lsrs	r3, r3, #4
 800a1fe:	b2db      	uxtb	r3, r3
 800a200:	f003 030f 	and.w	r3, r3, #15
 800a204:	b2da      	uxtb	r2, r3
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800a20a:	697b      	ldr	r3, [r7, #20]
 800a20c:	b2db      	uxtb	r3, r3
 800a20e:	f003 030f 	and.w	r3, r3, #15
 800a212:	b2da      	uxtb	r2, r3
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800a218:	69bb      	ldr	r3, [r7, #24]
 800a21a:	0e1b      	lsrs	r3, r3, #24
 800a21c:	b2da      	uxtb	r2, r3
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a22a:	4618      	mov	r0, r3
 800a22c:	f002 f866 	bl	800c2fc <SDMMC_CmdBlockLength>
 800a230:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800a232:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a234:	2b00      	cmp	r3, #0
 800a236:	d00d      	beq.n	800a254 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	4a08      	ldr	r2, [pc, #32]	; (800a260 <HAL_SD_GetCardStatus+0x168>)
 800a23e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a244:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2201      	movs	r2, #1
 800a24a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800a24e:	2301      	movs	r3, #1
 800a250:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 800a254:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800a258:	4618      	mov	r0, r3
 800a25a:	3750      	adds	r7, #80	; 0x50
 800a25c:	46bd      	mov	sp, r7
 800a25e:	bd80      	pop	{r7, pc}
 800a260:	1fe00fff 	.word	0x1fe00fff

0800a264 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800a264:	b480      	push	{r7}
 800a266:	b083      	sub	sp, #12
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
 800a26c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800a2ae:	2300      	movs	r3, #0
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	370c      	adds	r7, #12
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ba:	4770      	bx	lr

0800a2bc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800a2bc:	b5b0      	push	{r4, r5, r7, lr}
 800a2be:	b08e      	sub	sp, #56	; 0x38
 800a2c0:	af04      	add	r7, sp, #16
 800a2c2:	6078      	str	r0, [r7, #4]
 800a2c4:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2203      	movs	r2, #3
 800a2d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2d8:	2b03      	cmp	r3, #3
 800a2da:	d02e      	beq.n	800a33a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a2e2:	d106      	bne.n	800a2f2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2e8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	639a      	str	r2, [r3, #56]	; 0x38
 800a2f0:	e029      	b.n	800a346 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a2f8:	d10a      	bne.n	800a310 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800a2fa:	6878      	ldr	r0, [r7, #4]
 800a2fc:	f000 fb66 	bl	800a9cc <SD_WideBus_Enable>
 800a300:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a306:	6a3b      	ldr	r3, [r7, #32]
 800a308:	431a      	orrs	r2, r3
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	639a      	str	r2, [r3, #56]	; 0x38
 800a30e:	e01a      	b.n	800a346 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d10a      	bne.n	800a32c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800a316:	6878      	ldr	r0, [r7, #4]
 800a318:	f000 fba3 	bl	800aa62 <SD_WideBus_Disable>
 800a31c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a322:	6a3b      	ldr	r3, [r7, #32]
 800a324:	431a      	orrs	r2, r3
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	639a      	str	r2, [r3, #56]	; 0x38
 800a32a:	e00c      	b.n	800a346 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a330:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	639a      	str	r2, [r3, #56]	; 0x38
 800a338:	e005      	b.n	800a346 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a33e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d007      	beq.n	800a35e <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	4a2e      	ldr	r2, [pc, #184]	; (800a40c <HAL_SD_ConfigWideBusOperation+0x150>)
 800a354:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800a356:	2301      	movs	r3, #1
 800a358:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a35c:	e034      	b.n	800a3c8 <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	685b      	ldr	r3, [r3, #4]
 800a362:	60bb      	str	r3, [r7, #8]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	689b      	ldr	r3, [r3, #8]
 800a368:	60fb      	str	r3, [r7, #12]
    Init.BusWide             = WideMode;
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	613b      	str	r3, [r7, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	691b      	ldr	r3, [r3, #16]
 800a372:	617b      	str	r3, [r7, #20]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	695b      	ldr	r3, [r3, #20]
 800a378:	2b03      	cmp	r3, #3
 800a37a:	d903      	bls.n	800a384 <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	695b      	ldr	r3, [r3, #20]
 800a380:	61bb      	str	r3, [r7, #24]
 800a382:	e012      	b.n	800a3aa <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a388:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a38c:	d103      	bne.n	800a396 <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	695b      	ldr	r3, [r3, #20]
 800a392:	61bb      	str	r3, [r7, #24]
 800a394:	e009      	b.n	800a3aa <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a39a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a39e:	d102      	bne.n	800a3a6 <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 800a3a0:	2302      	movs	r3, #2
 800a3a2:	61bb      	str	r3, [r7, #24]
 800a3a4:	e001      	b.n	800a3aa <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 800a3a6:	2304      	movs	r3, #4
 800a3a8:	61bb      	str	r3, [r7, #24]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681d      	ldr	r5, [r3, #0]
 800a3ae:	466c      	mov	r4, sp
 800a3b0:	f107 0314 	add.w	r3, r7, #20
 800a3b4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a3b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a3bc:	f107 0308 	add.w	r3, r7, #8
 800a3c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a3c2:	4628      	mov	r0, r5
 800a3c4:	f001 febc 	bl	800c140 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	f001 ff93 	bl	800c2fc <SDMMC_CmdBlockLength>
 800a3d6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a3d8:	6a3b      	ldr	r3, [r7, #32]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d00c      	beq.n	800a3f8 <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	4a0a      	ldr	r2, [pc, #40]	; (800a40c <HAL_SD_ConfigWideBusOperation+0x150>)
 800a3e4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a3ea:	6a3b      	ldr	r3, [r7, #32]
 800a3ec:	431a      	orrs	r2, r3
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800a3f2:	2301      	movs	r3, #1
 800a3f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2201      	movs	r2, #1
 800a3fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800a400:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a404:	4618      	mov	r0, r3
 800a406:	3728      	adds	r7, #40	; 0x28
 800a408:	46bd      	mov	sp, r7
 800a40a:	bdb0      	pop	{r4, r5, r7, pc}
 800a40c:	1fe00fff 	.word	0x1fe00fff

0800a410 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b086      	sub	sp, #24
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800a418:	2300      	movs	r3, #0
 800a41a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800a41c:	f107 030c 	add.w	r3, r7, #12
 800a420:	4619      	mov	r1, r3
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	f000 faaa 	bl	800a97c <SD_SendStatus>
 800a428:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a42a:	697b      	ldr	r3, [r7, #20]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d005      	beq.n	800a43c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a434:	697b      	ldr	r3, [r7, #20]
 800a436:	431a      	orrs	r2, r3
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	0a5b      	lsrs	r3, r3, #9
 800a440:	f003 030f 	and.w	r3, r3, #15
 800a444:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800a446:	693b      	ldr	r3, [r7, #16]
}
 800a448:	4618      	mov	r0, r3
 800a44a:	3718      	adds	r7, #24
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bd80      	pop	{r7, pc}

0800a450 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a450:	b590      	push	{r4, r7, lr}
 800a452:	b091      	sub	sp, #68	; 0x44
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800a458:	2301      	movs	r3, #1
 800a45a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	4618      	mov	r0, r3
 800a462:	f001 fec6 	bl	800c1f2 <SDMMC_GetPowerState>
 800a466:	4603      	mov	r3, r0
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d102      	bne.n	800a472 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a46c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800a470:	e0a8      	b.n	800a5c4 <SD_InitCard+0x174>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a476:	2b03      	cmp	r3, #3
 800a478:	d02e      	beq.n	800a4d8 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	4618      	mov	r0, r3
 800a480:	f002 f912 	bl	800c6a8 <SDMMC_CmdSendCID>
 800a484:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d001      	beq.n	800a490 <SD_InitCard+0x40>
    {
      return errorstate;
 800a48c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a48e:	e099      	b.n	800a5c4 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	2100      	movs	r1, #0
 800a496:	4618      	mov	r0, r3
 800a498:	f001 fef1 	bl	800c27e <SDMMC_GetResponse>
 800a49c:	4602      	mov	r2, r0
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	2104      	movs	r1, #4
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	f001 fee8 	bl	800c27e <SDMMC_GetResponse>
 800a4ae:	4602      	mov	r2, r0
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	2108      	movs	r1, #8
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	f001 fedf 	bl	800c27e <SDMMC_GetResponse>
 800a4c0:	4602      	mov	r2, r0
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	210c      	movs	r1, #12
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	f001 fed6 	bl	800c27e <SDMMC_GetResponse>
 800a4d2:	4602      	mov	r2, r0
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4dc:	2b03      	cmp	r3, #3
 800a4de:	d00d      	beq.n	800a4fc <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	f107 020e 	add.w	r2, r7, #14
 800a4e8:	4611      	mov	r1, r2
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	f002 f91b 	bl	800c726 <SDMMC_CmdSetRelAdd>
 800a4f0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a4f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d001      	beq.n	800a4fc <SD_InitCard+0xac>
    {
      return errorstate;
 800a4f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4fa:	e063      	b.n	800a5c4 <SD_InitCard+0x174>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a500:	2b03      	cmp	r3, #3
 800a502:	d036      	beq.n	800a572 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800a504:	89fb      	ldrh	r3, [r7, #14]
 800a506:	461a      	mov	r2, r3
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681a      	ldr	r2, [r3, #0]
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a514:	041b      	lsls	r3, r3, #16
 800a516:	4619      	mov	r1, r3
 800a518:	4610      	mov	r0, r2
 800a51a:	f002 f8e4 	bl	800c6e6 <SDMMC_CmdSendCSD>
 800a51e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a520:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a522:	2b00      	cmp	r3, #0
 800a524:	d001      	beq.n	800a52a <SD_InitCard+0xda>
    {
      return errorstate;
 800a526:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a528:	e04c      	b.n	800a5c4 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	2100      	movs	r1, #0
 800a530:	4618      	mov	r0, r3
 800a532:	f001 fea4 	bl	800c27e <SDMMC_GetResponse>
 800a536:	4602      	mov	r2, r0
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	2104      	movs	r1, #4
 800a542:	4618      	mov	r0, r3
 800a544:	f001 fe9b 	bl	800c27e <SDMMC_GetResponse>
 800a548:	4602      	mov	r2, r0
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	2108      	movs	r1, #8
 800a554:	4618      	mov	r0, r3
 800a556:	f001 fe92 	bl	800c27e <SDMMC_GetResponse>
 800a55a:	4602      	mov	r2, r0
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	210c      	movs	r1, #12
 800a566:	4618      	mov	r0, r3
 800a568:	f001 fe89 	bl	800c27e <SDMMC_GetResponse>
 800a56c:	4602      	mov	r2, r0
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	2104      	movs	r1, #4
 800a578:	4618      	mov	r0, r3
 800a57a:	f001 fe80 	bl	800c27e <SDMMC_GetResponse>
 800a57e:	4603      	mov	r3, r0
 800a580:	0d1a      	lsrs	r2, r3, #20
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a586:	f107 0310 	add.w	r3, r7, #16
 800a58a:	4619      	mov	r1, r3
 800a58c:	6878      	ldr	r0, [r7, #4]
 800a58e:	f7ff fc0f 	bl	8009db0 <HAL_SD_GetCardCSD>
 800a592:	4603      	mov	r3, r0
 800a594:	2b00      	cmp	r3, #0
 800a596:	d002      	beq.n	800a59e <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a598:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a59c:	e012      	b.n	800a5c4 <SD_InitCard+0x174>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6819      	ldr	r1, [r3, #0]
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a5a6:	041b      	lsls	r3, r3, #16
 800a5a8:	f04f 0400 	mov.w	r4, #0
 800a5ac:	461a      	mov	r2, r3
 800a5ae:	4623      	mov	r3, r4
 800a5b0:	4608      	mov	r0, r1
 800a5b2:	f001 ff8f 	bl	800c4d4 <SDMMC_CmdSelDesel>
 800a5b6:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800a5b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d001      	beq.n	800a5c2 <SD_InitCard+0x172>
  {
    return errorstate;
 800a5be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5c0:	e000      	b.n	800a5c4 <SD_InitCard+0x174>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800a5c2:	2300      	movs	r3, #0
}
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	3744      	adds	r7, #68	; 0x44
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	bd90      	pop	{r4, r7, pc}

0800a5cc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b088      	sub	sp, #32
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 800a5d8:	2300      	movs	r3, #0
 800a5da:	61fb      	str	r3, [r7, #28]
 800a5dc:	2300      	movs	r3, #0
 800a5de:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 800a5e0:	f7f7 fa50 	bl	8001a84 <HAL_GetTick>
 800a5e4:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	f001 ff96 	bl	800c51c <SDMMC_CmdGoIdleState>
 800a5f0:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a5f2:	693b      	ldr	r3, [r7, #16]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d001      	beq.n	800a5fc <SD_PowerON+0x30>
  {
    return errorstate;
 800a5f8:	693b      	ldr	r3, [r7, #16]
 800a5fa:	e0e9      	b.n	800a7d0 <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	4618      	mov	r0, r3
 800a602:	f001 ffa9 	bl	800c558 <SDMMC_CmdOperCond>
 800a606:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a608:	693b      	ldr	r3, [r7, #16]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d00d      	beq.n	800a62a <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	2200      	movs	r2, #0
 800a612:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	4618      	mov	r0, r3
 800a61a:	f001 ff7f 	bl	800c51c <SDMMC_CmdGoIdleState>
 800a61e:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a620:	693b      	ldr	r3, [r7, #16]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d004      	beq.n	800a630 <SD_PowerON+0x64>
    {
      return errorstate;
 800a626:	693b      	ldr	r3, [r7, #16]
 800a628:	e0d2      	b.n	800a7d0 <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	2201      	movs	r2, #1
 800a62e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a634:	2b01      	cmp	r3, #1
 800a636:	d137      	bne.n	800a6a8 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	2100      	movs	r1, #0
 800a63e:	4618      	mov	r0, r3
 800a640:	f001 ffaa 	bl	800c598 <SDMMC_CmdAppCommand>
 800a644:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a646:	693b      	ldr	r3, [r7, #16]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d02d      	beq.n	800a6a8 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a64c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a650:	e0be      	b.n	800a7d0 <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	2100      	movs	r1, #0
 800a658:	4618      	mov	r0, r3
 800a65a:	f001 ff9d 	bl	800c598 <SDMMC_CmdAppCommand>
 800a65e:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a660:	693b      	ldr	r3, [r7, #16]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d001      	beq.n	800a66a <SD_PowerON+0x9e>
    {
      return errorstate;
 800a666:	693b      	ldr	r3, [r7, #16]
 800a668:	e0b2      	b.n	800a7d0 <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	495a      	ldr	r1, [pc, #360]	; (800a7d8 <SD_PowerON+0x20c>)
 800a670:	4618      	mov	r0, r3
 800a672:	f001 ffb4 	bl	800c5de <SDMMC_CmdAppOperCommand>
 800a676:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a678:	693b      	ldr	r3, [r7, #16]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d002      	beq.n	800a684 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a67e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a682:	e0a5      	b.n	800a7d0 <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	2100      	movs	r1, #0
 800a68a:	4618      	mov	r0, r3
 800a68c:	f001 fdf7 	bl	800c27e <SDMMC_GetResponse>
 800a690:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800a692:	69fb      	ldr	r3, [r7, #28]
 800a694:	0fdb      	lsrs	r3, r3, #31
 800a696:	2b01      	cmp	r3, #1
 800a698:	d101      	bne.n	800a69e <SD_PowerON+0xd2>
 800a69a:	2301      	movs	r3, #1
 800a69c:	e000      	b.n	800a6a0 <SD_PowerON+0xd4>
 800a69e:	2300      	movs	r3, #0
 800a6a0:	61bb      	str	r3, [r7, #24]

    count++;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	3301      	adds	r3, #1
 800a6a6:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a6ae:	4293      	cmp	r3, r2
 800a6b0:	d802      	bhi.n	800a6b8 <SD_PowerON+0xec>
 800a6b2:	69bb      	ldr	r3, [r7, #24]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d0cc      	beq.n	800a652 <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a6be:	4293      	cmp	r3, r2
 800a6c0:	d902      	bls.n	800a6c8 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a6c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a6c6:	e083      	b.n	800a7d0 <SD_PowerON+0x204>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800a6c8:	69fb      	ldr	r3, [r7, #28]
 800a6ca:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d07d      	beq.n	800a7ce <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	2201      	movs	r2, #1
 800a6d6:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	699b      	ldr	r3, [r3, #24]
 800a6dc:	2b02      	cmp	r3, #2
 800a6de:	d176      	bne.n	800a7ce <SD_PowerON+0x202>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800a6e0:	69fb      	ldr	r3, [r7, #28]
 800a6e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d071      	beq.n	800a7ce <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a6f0:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	681a      	ldr	r2, [r3, #0]
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	f042 0208 	orr.w	r2, r2, #8
 800a700:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	4618      	mov	r0, r3
 800a708:	f002 f874 	bl	800c7f4 <SDMMC_CmdVoltageSwitch>
 800a70c:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 800a70e:	693b      	ldr	r3, [r7, #16]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d00c      	beq.n	800a72e <SD_PowerON+0x162>
        {
          return errorstate;
 800a714:	693b      	ldr	r3, [r7, #16]
 800a716:	e05b      	b.n	800a7d0 <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a718:	f7f7 f9b4 	bl	8001a84 <HAL_GetTick>
 800a71c:	4602      	mov	r2, r0
 800a71e:	697b      	ldr	r3, [r7, #20]
 800a720:	1ad3      	subs	r3, r2, r3
 800a722:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a726:	d102      	bne.n	800a72e <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 800a728:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a72c:	e050      	b.n	800a7d0 <SD_PowerON+0x204>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a734:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a738:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a73c:	d1ec      	bne.n	800a718 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800a746:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a74e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a752:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a756:	d002      	beq.n	800a75e <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 800a758:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a75c:	e038      	b.n	800a7d0 <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 800a75e:	2001      	movs	r0, #1
 800a760:	f7ff fb1a 	bl	8009d98 <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	681a      	ldr	r2, [r3, #0]
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	f042 0204 	orr.w	r2, r2, #4
 800a772:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800a774:	e00a      	b.n	800a78c <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a776:	f7f7 f985 	bl	8001a84 <HAL_GetTick>
 800a77a:	4602      	mov	r2, r0
 800a77c:	697b      	ldr	r3, [r7, #20]
 800a77e:	1ad3      	subs	r3, r2, r3
 800a780:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a784:	d102      	bne.n	800a78c <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 800a786:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a78a:	e021      	b.n	800a7d0 <SD_PowerON+0x204>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a796:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a79a:	d1ec      	bne.n	800a776 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800a7a4:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a7b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a7b4:	d102      	bne.n	800a7bc <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a7b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a7ba:	e009      	b.n	800a7d0 <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	2213      	movs	r2, #19
 800a7c2:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	f04f 32ff 	mov.w	r2, #4294967295
 800a7cc:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800a7ce:	2300      	movs	r3, #0
}
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	3720      	adds	r7, #32
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bd80      	pop	{r7, pc}
 800a7d8:	c1100000 	.word	0xc1100000

0800a7dc <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b08c      	sub	sp, #48	; 0x30
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
 800a7e4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a7e6:	f7f7 f94d 	bl	8001a84 <HAL_GetTick>
 800a7ea:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	2100      	movs	r1, #0
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	f001 fd41 	bl	800c27e <SDMMC_GetResponse>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a802:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a806:	d102      	bne.n	800a80e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a808:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a80c:	e0b0      	b.n	800a970 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	2140      	movs	r1, #64	; 0x40
 800a814:	4618      	mov	r0, r3
 800a816:	f001 fd71 	bl	800c2fc <SDMMC_CmdBlockLength>
 800a81a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a81c:	6a3b      	ldr	r3, [r7, #32]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d005      	beq.n	800a82e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800a82a:	6a3b      	ldr	r3, [r7, #32]
 800a82c:	e0a0      	b.n	800a970 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681a      	ldr	r2, [r3, #0]
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a836:	041b      	lsls	r3, r3, #16
 800a838:	4619      	mov	r1, r3
 800a83a:	4610      	mov	r0, r2
 800a83c:	f001 feac 	bl	800c598 <SDMMC_CmdAppCommand>
 800a840:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a842:	6a3b      	ldr	r3, [r7, #32]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d005      	beq.n	800a854 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800a850:	6a3b      	ldr	r3, [r7, #32]
 800a852:	e08d      	b.n	800a970 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a854:	f04f 33ff 	mov.w	r3, #4294967295
 800a858:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800a85a:	2340      	movs	r3, #64	; 0x40
 800a85c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800a85e:	2360      	movs	r3, #96	; 0x60
 800a860:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a862:	2302      	movs	r3, #2
 800a864:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a866:	2300      	movs	r3, #0
 800a868:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a86a:	2301      	movs	r3, #1
 800a86c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	f107 0208 	add.w	r2, r7, #8
 800a876:	4611      	mov	r1, r2
 800a878:	4618      	mov	r0, r3
 800a87a:	f001 fd13 	bl	800c2a4 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	4618      	mov	r0, r3
 800a884:	f001 ff94 	bl	800c7b0 <SDMMC_CmdStatusRegister>
 800a888:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a88a:	6a3b      	ldr	r3, [r7, #32]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d02b      	beq.n	800a8e8 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800a898:	6a3b      	ldr	r3, [r7, #32]
 800a89a:	e069      	b.n	800a970 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d013      	beq.n	800a8d2 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a8ae:	e00d      	b.n	800a8cc <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f001 fc6d 	bl	800c194 <SDMMC_ReadFIFO>
 800a8ba:	4602      	mov	r2, r0
 800a8bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8be:	601a      	str	r2, [r3, #0]
        pData++;
 800a8c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8c2:	3304      	adds	r3, #4
 800a8c4:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 800a8c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8c8:	3301      	adds	r3, #1
 800a8ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a8cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8ce:	2b07      	cmp	r3, #7
 800a8d0:	d9ee      	bls.n	800a8b0 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a8d2:	f7f7 f8d7 	bl	8001a84 <HAL_GetTick>
 800a8d6:	4602      	mov	r2, r0
 800a8d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8da:	1ad3      	subs	r3, r2, r3
 800a8dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8e0:	d102      	bne.n	800a8e8 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a8e2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a8e6:	e043      	b.n	800a970 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8ee:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d0d2      	beq.n	800a89c <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8fc:	f003 0308 	and.w	r3, r3, #8
 800a900:	2b00      	cmp	r3, #0
 800a902:	d001      	beq.n	800a908 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a904:	2308      	movs	r3, #8
 800a906:	e033      	b.n	800a970 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a90e:	f003 0302 	and.w	r3, r3, #2
 800a912:	2b00      	cmp	r3, #0
 800a914:	d001      	beq.n	800a91a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a916:	2302      	movs	r3, #2
 800a918:	e02a      	b.n	800a970 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a920:	f003 0320 	and.w	r3, r3, #32
 800a924:	2b00      	cmp	r3, #0
 800a926:	d017      	beq.n	800a958 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800a928:	2320      	movs	r3, #32
 800a92a:	e021      	b.n	800a970 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	4618      	mov	r0, r3
 800a932:	f001 fc2f 	bl	800c194 <SDMMC_ReadFIFO>
 800a936:	4602      	mov	r2, r0
 800a938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a93a:	601a      	str	r2, [r3, #0]
    pData++;
 800a93c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a93e:	3304      	adds	r3, #4
 800a940:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a942:	f7f7 f89f 	bl	8001a84 <HAL_GetTick>
 800a946:	4602      	mov	r2, r0
 800a948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a94a:	1ad3      	subs	r3, r2, r3
 800a94c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a950:	d102      	bne.n	800a958 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a952:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a956:	e00b      	b.n	800a970 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a95e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a962:	2b00      	cmp	r3, #0
 800a964:	d1e2      	bne.n	800a92c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	4a03      	ldr	r2, [pc, #12]	; (800a978 <SD_SendSDStatus+0x19c>)
 800a96c:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800a96e:	2300      	movs	r3, #0
}
 800a970:	4618      	mov	r0, r3
 800a972:	3730      	adds	r7, #48	; 0x30
 800a974:	46bd      	mov	sp, r7
 800a976:	bd80      	pop	{r7, pc}
 800a978:	18000f3a 	.word	0x18000f3a

0800a97c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b084      	sub	sp, #16
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
 800a984:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d102      	bne.n	800a992 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800a98c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a990:	e018      	b.n	800a9c4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681a      	ldr	r2, [r3, #0]
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a99a:	041b      	lsls	r3, r3, #16
 800a99c:	4619      	mov	r1, r3
 800a99e:	4610      	mov	r0, r2
 800a9a0:	f001 fee3 	bl	800c76a <SDMMC_CmdSendStatus>
 800a9a4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d001      	beq.n	800a9b0 <SD_SendStatus+0x34>
  {
    return errorstate;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	e009      	b.n	800a9c4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	2100      	movs	r1, #0
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	f001 fc61 	bl	800c27e <SDMMC_GetResponse>
 800a9bc:	4602      	mov	r2, r0
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800a9c2:	2300      	movs	r3, #0
}
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	3710      	adds	r7, #16
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	bd80      	pop	{r7, pc}

0800a9cc <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b086      	sub	sp, #24
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	60fb      	str	r3, [r7, #12]
 800a9d8:	2300      	movs	r3, #0
 800a9da:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	2100      	movs	r1, #0
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	f001 fc4b 	bl	800c27e <SDMMC_GetResponse>
 800a9e8:	4603      	mov	r3, r0
 800a9ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a9ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a9f2:	d102      	bne.n	800a9fa <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a9f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a9f8:	e02f      	b.n	800aa5a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a9fa:	f107 030c 	add.w	r3, r7, #12
 800a9fe:	4619      	mov	r1, r3
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	f000 f879 	bl	800aaf8 <SD_FindSCR>
 800aa06:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800aa08:	697b      	ldr	r3, [r7, #20]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d001      	beq.n	800aa12 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800aa0e:	697b      	ldr	r3, [r7, #20]
 800aa10:	e023      	b.n	800aa5a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800aa12:	693b      	ldr	r3, [r7, #16]
 800aa14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d01c      	beq.n	800aa56 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681a      	ldr	r2, [r3, #0]
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aa24:	041b      	lsls	r3, r3, #16
 800aa26:	4619      	mov	r1, r3
 800aa28:	4610      	mov	r0, r2
 800aa2a:	f001 fdb5 	bl	800c598 <SDMMC_CmdAppCommand>
 800aa2e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800aa30:	697b      	ldr	r3, [r7, #20]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d001      	beq.n	800aa3a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800aa36:	697b      	ldr	r3, [r7, #20]
 800aa38:	e00f      	b.n	800aa5a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	2102      	movs	r1, #2
 800aa40:	4618      	mov	r0, r3
 800aa42:	f001 fdec 	bl	800c61e <SDMMC_CmdBusWidth>
 800aa46:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800aa48:	697b      	ldr	r3, [r7, #20]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d001      	beq.n	800aa52 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800aa4e:	697b      	ldr	r3, [r7, #20]
 800aa50:	e003      	b.n	800aa5a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800aa52:	2300      	movs	r3, #0
 800aa54:	e001      	b.n	800aa5a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800aa56:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	3718      	adds	r7, #24
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	bd80      	pop	{r7, pc}

0800aa62 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800aa62:	b580      	push	{r7, lr}
 800aa64:	b086      	sub	sp, #24
 800aa66:	af00      	add	r7, sp, #0
 800aa68:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	60fb      	str	r3, [r7, #12]
 800aa6e:	2300      	movs	r3, #0
 800aa70:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	2100      	movs	r1, #0
 800aa78:	4618      	mov	r0, r3
 800aa7a:	f001 fc00 	bl	800c27e <SDMMC_GetResponse>
 800aa7e:	4603      	mov	r3, r0
 800aa80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aa88:	d102      	bne.n	800aa90 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800aa8a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800aa8e:	e02f      	b.n	800aaf0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800aa90:	f107 030c 	add.w	r3, r7, #12
 800aa94:	4619      	mov	r1, r3
 800aa96:	6878      	ldr	r0, [r7, #4]
 800aa98:	f000 f82e 	bl	800aaf8 <SD_FindSCR>
 800aa9c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800aa9e:	697b      	ldr	r3, [r7, #20]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d001      	beq.n	800aaa8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800aaa4:	697b      	ldr	r3, [r7, #20]
 800aaa6:	e023      	b.n	800aaf0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800aaa8:	693b      	ldr	r3, [r7, #16]
 800aaaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d01c      	beq.n	800aaec <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681a      	ldr	r2, [r3, #0]
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aaba:	041b      	lsls	r3, r3, #16
 800aabc:	4619      	mov	r1, r3
 800aabe:	4610      	mov	r0, r2
 800aac0:	f001 fd6a 	bl	800c598 <SDMMC_CmdAppCommand>
 800aac4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800aac6:	697b      	ldr	r3, [r7, #20]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d001      	beq.n	800aad0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800aacc:	697b      	ldr	r3, [r7, #20]
 800aace:	e00f      	b.n	800aaf0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	2100      	movs	r1, #0
 800aad6:	4618      	mov	r0, r3
 800aad8:	f001 fda1 	bl	800c61e <SDMMC_CmdBusWidth>
 800aadc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800aade:	697b      	ldr	r3, [r7, #20]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d001      	beq.n	800aae8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800aae4:	697b      	ldr	r3, [r7, #20]
 800aae6:	e003      	b.n	800aaf0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800aae8:	2300      	movs	r3, #0
 800aaea:	e001      	b.n	800aaf0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800aaec:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	3718      	adds	r7, #24
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	bd80      	pop	{r7, pc}

0800aaf8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b08e      	sub	sp, #56	; 0x38
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
 800ab00:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ab02:	f7f6 ffbf 	bl	8001a84 <HAL_GetTick>
 800ab06:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800ab08:	2300      	movs	r3, #0
 800ab0a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	60bb      	str	r3, [r7, #8]
 800ab10:	2300      	movs	r3, #0
 800ab12:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	2108      	movs	r1, #8
 800ab1e:	4618      	mov	r0, r3
 800ab20:	f001 fbec 	bl	800c2fc <SDMMC_CmdBlockLength>
 800ab24:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800ab26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d001      	beq.n	800ab30 <SD_FindSCR+0x38>
  {
    return errorstate;
 800ab2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab2e:	e0ad      	b.n	800ac8c <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681a      	ldr	r2, [r3, #0]
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab38:	041b      	lsls	r3, r3, #16
 800ab3a:	4619      	mov	r1, r3
 800ab3c:	4610      	mov	r0, r2
 800ab3e:	f001 fd2b 	bl	800c598 <SDMMC_CmdAppCommand>
 800ab42:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800ab44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d001      	beq.n	800ab4e <SD_FindSCR+0x56>
  {
    return errorstate;
 800ab4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab4c:	e09e      	b.n	800ac8c <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ab4e:	f04f 33ff 	mov.w	r3, #4294967295
 800ab52:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800ab54:	2308      	movs	r3, #8
 800ab56:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800ab58:	2330      	movs	r3, #48	; 0x30
 800ab5a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800ab5c:	2302      	movs	r3, #2
 800ab5e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ab60:	2300      	movs	r3, #0
 800ab62:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800ab64:	2301      	movs	r3, #1
 800ab66:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	f107 0210 	add.w	r2, r7, #16
 800ab70:	4611      	mov	r1, r2
 800ab72:	4618      	mov	r0, r3
 800ab74:	f001 fb96 	bl	800c2a4 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	f001 fd71 	bl	800c664 <SDMMC_CmdSendSCR>
 800ab82:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800ab84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d027      	beq.n	800abda <SD_FindSCR+0xe2>
  {
    return errorstate;
 800ab8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab8c:	e07e      	b.n	800ac8c <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d113      	bne.n	800abc4 <SD_FindSCR+0xcc>
 800ab9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d110      	bne.n	800abc4 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	4618      	mov	r0, r3
 800aba8:	f001 faf4 	bl	800c194 <SDMMC_ReadFIFO>
 800abac:	4603      	mov	r3, r0
 800abae:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	4618      	mov	r0, r3
 800abb6:	f001 faed 	bl	800c194 <SDMMC_ReadFIFO>
 800abba:	4603      	mov	r3, r0
 800abbc:	60fb      	str	r3, [r7, #12]
      index++;
 800abbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abc0:	3301      	adds	r3, #1
 800abc2:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800abc4:	f7f6 ff5e 	bl	8001a84 <HAL_GetTick>
 800abc8:	4602      	mov	r2, r0
 800abca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abcc:	1ad3      	subs	r3, r2, r3
 800abce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abd2:	d102      	bne.n	800abda <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800abd4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800abd8:	e058      	b.n	800ac8c <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800abe0:	f240 532a 	movw	r3, #1322	; 0x52a
 800abe4:	4013      	ands	r3, r2
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d0d1      	beq.n	800ab8e <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abf0:	f003 0308 	and.w	r3, r3, #8
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d005      	beq.n	800ac04 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	2208      	movs	r2, #8
 800abfe:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800ac00:	2308      	movs	r3, #8
 800ac02:	e043      	b.n	800ac8c <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac0a:	f003 0302 	and.w	r3, r3, #2
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d005      	beq.n	800ac1e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	2202      	movs	r2, #2
 800ac18:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800ac1a:	2302      	movs	r3, #2
 800ac1c:	e036      	b.n	800ac8c <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac24:	f003 0320 	and.w	r3, r3, #32
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d005      	beq.n	800ac38 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	2220      	movs	r2, #32
 800ac32:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800ac34:	2320      	movs	r3, #32
 800ac36:	e029      	b.n	800ac8c <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	4a15      	ldr	r2, [pc, #84]	; (800ac94 <SD_FindSCR+0x19c>)
 800ac3e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	061a      	lsls	r2, r3, #24
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	021b      	lsls	r3, r3, #8
 800ac48:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ac4c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	0a1b      	lsrs	r3, r3, #8
 800ac52:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800ac56:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	0e1b      	lsrs	r3, r3, #24
 800ac5c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800ac5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac60:	601a      	str	r2, [r3, #0]
    scr++;
 800ac62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac64:	3304      	adds	r3, #4
 800ac66:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800ac68:	68bb      	ldr	r3, [r7, #8]
 800ac6a:	061a      	lsls	r2, r3, #24
 800ac6c:	68bb      	ldr	r3, [r7, #8]
 800ac6e:	021b      	lsls	r3, r3, #8
 800ac70:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ac74:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ac76:	68bb      	ldr	r3, [r7, #8]
 800ac78:	0a1b      	lsrs	r3, r3, #8
 800ac7a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800ac7e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ac80:	68bb      	ldr	r3, [r7, #8]
 800ac82:	0e1b      	lsrs	r3, r3, #24
 800ac84:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800ac86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac88:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800ac8a:	2300      	movs	r3, #0
}
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	3738      	adds	r7, #56	; 0x38
 800ac90:	46bd      	mov	sp, r7
 800ac92:	bd80      	pop	{r7, pc}
 800ac94:	18000f3a 	.word	0x18000f3a

0800ac98 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b086      	sub	sp, #24
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aca4:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acaa:	2b1f      	cmp	r3, #31
 800acac:	d936      	bls.n	800ad1c <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800acae:	2300      	movs	r3, #0
 800acb0:	617b      	str	r3, [r7, #20]
 800acb2:	e027      	b.n	800ad04 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	4618      	mov	r0, r3
 800acba:	f001 fa6b 	bl	800c194 <SDMMC_ReadFIFO>
 800acbe:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	b2da      	uxtb	r2, r3
 800acc4:	693b      	ldr	r3, [r7, #16]
 800acc6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800acc8:	693b      	ldr	r3, [r7, #16]
 800acca:	3301      	adds	r3, #1
 800accc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	0a1b      	lsrs	r3, r3, #8
 800acd2:	b2da      	uxtb	r2, r3
 800acd4:	693b      	ldr	r3, [r7, #16]
 800acd6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800acd8:	693b      	ldr	r3, [r7, #16]
 800acda:	3301      	adds	r3, #1
 800acdc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	0c1b      	lsrs	r3, r3, #16
 800ace2:	b2da      	uxtb	r2, r3
 800ace4:	693b      	ldr	r3, [r7, #16]
 800ace6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ace8:	693b      	ldr	r3, [r7, #16]
 800acea:	3301      	adds	r3, #1
 800acec:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	0e1b      	lsrs	r3, r3, #24
 800acf2:	b2da      	uxtb	r2, r3
 800acf4:	693b      	ldr	r3, [r7, #16]
 800acf6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800acf8:	693b      	ldr	r3, [r7, #16]
 800acfa:	3301      	adds	r3, #1
 800acfc:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800acfe:	697b      	ldr	r3, [r7, #20]
 800ad00:	3301      	adds	r3, #1
 800ad02:	617b      	str	r3, [r7, #20]
 800ad04:	697b      	ldr	r3, [r7, #20]
 800ad06:	2b07      	cmp	r3, #7
 800ad08:	d9d4      	bls.n	800acb4 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	693a      	ldr	r2, [r7, #16]
 800ad0e:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize -= 32U;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad14:	f1a3 0220 	sub.w	r2, r3, #32
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800ad1c:	bf00      	nop
 800ad1e:	3718      	adds	r7, #24
 800ad20:	46bd      	mov	sp, r7
 800ad22:	bd80      	pop	{r7, pc}

0800ad24 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b086      	sub	sp, #24
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	6a1b      	ldr	r3, [r3, #32]
 800ad30:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad36:	2b1f      	cmp	r3, #31
 800ad38:	d93a      	bls.n	800adb0 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	617b      	str	r3, [r7, #20]
 800ad3e:	e02b      	b.n	800ad98 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800ad40:	693b      	ldr	r3, [r7, #16]
 800ad42:	781b      	ldrb	r3, [r3, #0]
 800ad44:	60fb      	str	r3, [r7, #12]
      tmp++;
 800ad46:	693b      	ldr	r3, [r7, #16]
 800ad48:	3301      	adds	r3, #1
 800ad4a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800ad4c:	693b      	ldr	r3, [r7, #16]
 800ad4e:	781b      	ldrb	r3, [r3, #0]
 800ad50:	021a      	lsls	r2, r3, #8
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	4313      	orrs	r3, r2
 800ad56:	60fb      	str	r3, [r7, #12]
      tmp++;
 800ad58:	693b      	ldr	r3, [r7, #16]
 800ad5a:	3301      	adds	r3, #1
 800ad5c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800ad5e:	693b      	ldr	r3, [r7, #16]
 800ad60:	781b      	ldrb	r3, [r3, #0]
 800ad62:	041a      	lsls	r2, r3, #16
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	4313      	orrs	r3, r2
 800ad68:	60fb      	str	r3, [r7, #12]
      tmp++;
 800ad6a:	693b      	ldr	r3, [r7, #16]
 800ad6c:	3301      	adds	r3, #1
 800ad6e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800ad70:	693b      	ldr	r3, [r7, #16]
 800ad72:	781b      	ldrb	r3, [r3, #0]
 800ad74:	061a      	lsls	r2, r3, #24
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	4313      	orrs	r3, r2
 800ad7a:	60fb      	str	r3, [r7, #12]
      tmp++;
 800ad7c:	693b      	ldr	r3, [r7, #16]
 800ad7e:	3301      	adds	r3, #1
 800ad80:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	f107 020c 	add.w	r2, r7, #12
 800ad8a:	4611      	mov	r1, r2
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	f001 fa0e 	bl	800c1ae <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800ad92:	697b      	ldr	r3, [r7, #20]
 800ad94:	3301      	adds	r3, #1
 800ad96:	617b      	str	r3, [r7, #20]
 800ad98:	697b      	ldr	r3, [r7, #20]
 800ad9a:	2b07      	cmp	r3, #7
 800ad9c:	d9d0      	bls.n	800ad40 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	693a      	ldr	r2, [r7, #16]
 800ada2:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize -= 32U;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ada8:	f1a3 0220 	sub.w	r2, r3, #32
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800adb0:	bf00      	nop
 800adb2:	3718      	adds	r7, #24
 800adb4:	46bd      	mov	sp, r7
 800adb6:	bd80      	pop	{r7, pc}

0800adb8 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800adb8:	b480      	push	{r7}
 800adba:	b083      	sub	sp, #12
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800adc0:	bf00      	nop
 800adc2:	370c      	adds	r7, #12
 800adc4:	46bd      	mov	sp, r7
 800adc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adca:	4770      	bx	lr

0800adcc <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800adcc:	b480      	push	{r7}
 800adce:	b083      	sub	sp, #12
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800add4:	bf00      	nop
 800add6:	370c      	adds	r7, #12
 800add8:	46bd      	mov	sp, r7
 800adda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adde:	4770      	bx	lr

0800ade0 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800ade0:	b480      	push	{r7}
 800ade2:	b083      	sub	sp, #12
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800ade8:	bf00      	nop
 800adea:	370c      	adds	r7, #12
 800adec:	46bd      	mov	sp, r7
 800adee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf2:	4770      	bx	lr

0800adf4 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800adf4:	b480      	push	{r7}
 800adf6:	b083      	sub	sp, #12
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800adfc:	bf00      	nop
 800adfe:	370c      	adds	r7, #12
 800ae00:	46bd      	mov	sp, r7
 800ae02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae06:	4770      	bx	lr

0800ae08 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b084      	sub	sp, #16
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 800ae10:	2300      	movs	r3, #0
 800ae12:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d101      	bne.n	800ae1e <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800ae1a:	2301      	movs	r3, #1
 800ae1c:	e0e2      	b.n	800afe4 <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	2200      	movs	r2, #0
 800ae22:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	4a70      	ldr	r2, [pc, #448]	; (800afec <HAL_SPI_Init+0x1e4>)
 800ae2a:	4293      	cmp	r3, r2
 800ae2c:	d00f      	beq.n	800ae4e <HAL_SPI_Init+0x46>
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	4a6f      	ldr	r2, [pc, #444]	; (800aff0 <HAL_SPI_Init+0x1e8>)
 800ae34:	4293      	cmp	r3, r2
 800ae36:	d00a      	beq.n	800ae4e <HAL_SPI_Init+0x46>
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	4a6d      	ldr	r2, [pc, #436]	; (800aff4 <HAL_SPI_Init+0x1ec>)
 800ae3e:	4293      	cmp	r3, r2
 800ae40:	d005      	beq.n	800ae4e <HAL_SPI_Init+0x46>
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	68db      	ldr	r3, [r3, #12]
 800ae46:	2b0f      	cmp	r3, #15
 800ae48:	d901      	bls.n	800ae4e <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800ae4a:	2301      	movs	r3, #1
 800ae4c:	e0ca      	b.n	800afe4 <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800ae4e:	6878      	ldr	r0, [r7, #4]
 800ae50:	f000 f8d2 	bl	800aff8 <SPI_GetPacketSize>
 800ae54:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	4a64      	ldr	r2, [pc, #400]	; (800afec <HAL_SPI_Init+0x1e4>)
 800ae5c:	4293      	cmp	r3, r2
 800ae5e:	d00c      	beq.n	800ae7a <HAL_SPI_Init+0x72>
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	4a62      	ldr	r2, [pc, #392]	; (800aff0 <HAL_SPI_Init+0x1e8>)
 800ae66:	4293      	cmp	r3, r2
 800ae68:	d007      	beq.n	800ae7a <HAL_SPI_Init+0x72>
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	4a61      	ldr	r2, [pc, #388]	; (800aff4 <HAL_SPI_Init+0x1ec>)
 800ae70:	4293      	cmp	r3, r2
 800ae72:	d002      	beq.n	800ae7a <HAL_SPI_Init+0x72>
 800ae74:	68bb      	ldr	r3, [r7, #8]
 800ae76:	2b08      	cmp	r3, #8
 800ae78:	d811      	bhi.n	800ae9e <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ae7e:	4a5b      	ldr	r2, [pc, #364]	; (800afec <HAL_SPI_Init+0x1e4>)
 800ae80:	4293      	cmp	r3, r2
 800ae82:	d009      	beq.n	800ae98 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	4a59      	ldr	r2, [pc, #356]	; (800aff0 <HAL_SPI_Init+0x1e8>)
 800ae8a:	4293      	cmp	r3, r2
 800ae8c:	d004      	beq.n	800ae98 <HAL_SPI_Init+0x90>
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	4a58      	ldr	r2, [pc, #352]	; (800aff4 <HAL_SPI_Init+0x1ec>)
 800ae94:	4293      	cmp	r3, r2
 800ae96:	d104      	bne.n	800aea2 <HAL_SPI_Init+0x9a>
 800ae98:	68bb      	ldr	r3, [r7, #8]
 800ae9a:	2b10      	cmp	r3, #16
 800ae9c:	d901      	bls.n	800aea2 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800ae9e:	2301      	movs	r3, #1
 800aea0:	e0a0      	b.n	800afe4 <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800aea8:	b2db      	uxtb	r3, r3
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d106      	bne.n	800aebc <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	f7f6 fac4 	bl	8001444 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2202      	movs	r2, #2
 800aec0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	681a      	ldr	r2, [r3, #0]
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	f022 0201 	bic.w	r2, r2, #1
 800aed2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	699b      	ldr	r3, [r3, #24]
 800aed8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aedc:	d110      	bne.n	800af00 <HAL_SPI_Init+0xf8>
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	685b      	ldr	r3, [r3, #4]
 800aee2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aee6:	d10b      	bne.n	800af00 <HAL_SPI_Init+0xf8>
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d107      	bne.n	800af00 <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	681a      	ldr	r2, [r3, #0]
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800aefe:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	69da      	ldr	r2, [r3, #28]
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af08:	431a      	orrs	r2, r3
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	431a      	orrs	r2, r3
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af12:	ea42 0103 	orr.w	r1, r2, r3
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	68da      	ldr	r2, [r3, #12]
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	430a      	orrs	r2, r1
 800af20:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af2a:	431a      	orrs	r2, r3
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af30:	431a      	orrs	r2, r3
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	699b      	ldr	r3, [r3, #24]
 800af36:	431a      	orrs	r2, r3
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	691b      	ldr	r3, [r3, #16]
 800af3c:	431a      	orrs	r2, r3
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	695b      	ldr	r3, [r3, #20]
 800af42:	431a      	orrs	r2, r3
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	6a1b      	ldr	r3, [r3, #32]
 800af48:	431a      	orrs	r2, r3
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	685b      	ldr	r3, [r3, #4]
 800af4e:	431a      	orrs	r2, r3
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af54:	431a      	orrs	r2, r3
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	689b      	ldr	r3, [r3, #8]
 800af5a:	431a      	orrs	r2, r3
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af60:	ea42 0103 	orr.w	r1, r2, r3
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	430a      	orrs	r2, r1
 800af6e:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	685b      	ldr	r3, [r3, #4]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d113      	bne.n	800afa0 <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	689b      	ldr	r3, [r3, #8]
 800af7e:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800af8a:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	689b      	ldr	r3, [r3, #8]
 800af92:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800af9e:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	f022 0201 	bic.w	r2, r2, #1
 800afae:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	685b      	ldr	r3, [r3, #4]
 800afb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d00a      	beq.n	800afd2 <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	68db      	ldr	r3, [r3, #12]
 800afc2:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	430a      	orrs	r2, r1
 800afd0:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	2200      	movs	r2, #0
 800afd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	2201      	movs	r2, #1
 800afde:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800afe2:	2300      	movs	r3, #0
}
 800afe4:	4618      	mov	r0, r3
 800afe6:	3710      	adds	r7, #16
 800afe8:	46bd      	mov	sp, r7
 800afea:	bd80      	pop	{r7, pc}
 800afec:	40013000 	.word	0x40013000
 800aff0:	40003800 	.word	0x40003800
 800aff4:	40003c00 	.word	0x40003c00

0800aff8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800aff8:	b480      	push	{r7}
 800affa:	b085      	sub	sp, #20
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b004:	095b      	lsrs	r3, r3, #5
 800b006:	3301      	adds	r3, #1
 800b008:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	68db      	ldr	r3, [r3, #12]
 800b00e:	3301      	adds	r3, #1
 800b010:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b012:	68bb      	ldr	r3, [r7, #8]
 800b014:	3307      	adds	r3, #7
 800b016:	08db      	lsrs	r3, r3, #3
 800b018:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b01a:	68bb      	ldr	r3, [r7, #8]
 800b01c:	68fa      	ldr	r2, [r7, #12]
 800b01e:	fb02 f303 	mul.w	r3, r2, r3
}
 800b022:	4618      	mov	r0, r3
 800b024:	3714      	adds	r7, #20
 800b026:	46bd      	mov	sp, r7
 800b028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02c:	4770      	bx	lr

0800b02e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b02e:	b580      	push	{r7, lr}
 800b030:	b082      	sub	sp, #8
 800b032:	af00      	add	r7, sp, #0
 800b034:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d101      	bne.n	800b040 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b03c:	2301      	movs	r3, #1
 800b03e:	e042      	b.n	800b0c6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b046:	2b00      	cmp	r3, #0
 800b048:	d106      	bne.n	800b058 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	2200      	movs	r2, #0
 800b04e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b052:	6878      	ldr	r0, [r7, #4]
 800b054:	f7f6 fa40 	bl	80014d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2224      	movs	r2, #36	; 0x24
 800b05c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	681a      	ldr	r2, [r3, #0]
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	f022 0201 	bic.w	r2, r2, #1
 800b06e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b070:	6878      	ldr	r0, [r7, #4]
 800b072:	f000 f82d 	bl	800b0d0 <UART_SetConfig>
 800b076:	4603      	mov	r3, r0
 800b078:	2b01      	cmp	r3, #1
 800b07a:	d101      	bne.n	800b080 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b07c:	2301      	movs	r3, #1
 800b07e:	e022      	b.n	800b0c6 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b084:	2b00      	cmp	r3, #0
 800b086:	d002      	beq.n	800b08e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b088:	6878      	ldr	r0, [r7, #4]
 800b08a:	f000 fdd1 	bl	800bc30 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	685a      	ldr	r2, [r3, #4]
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b09c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	689a      	ldr	r2, [r3, #8]
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b0ac:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	681a      	ldr	r2, [r3, #0]
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	f042 0201 	orr.w	r2, r2, #1
 800b0bc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b0be:	6878      	ldr	r0, [r7, #4]
 800b0c0:	f000 fe58 	bl	800bd74 <UART_CheckIdleState>
 800b0c4:	4603      	mov	r3, r0
}
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	3708      	adds	r7, #8
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}
	...

0800b0d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b0d0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800b0d4:	b08e      	sub	sp, #56	; 0x38
 800b0d6:	af00      	add	r7, sp, #0
 800b0d8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b0da:	2300      	movs	r3, #0
 800b0dc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	689a      	ldr	r2, [r3, #8]
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	691b      	ldr	r3, [r3, #16]
 800b0e8:	431a      	orrs	r2, r3
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	695b      	ldr	r3, [r3, #20]
 800b0ee:	431a      	orrs	r2, r3
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	69db      	ldr	r3, [r3, #28]
 800b0f4:	4313      	orrs	r3, r2
 800b0f6:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b0fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b0fe:	4313      	orrs	r3, r2
 800b100:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	681a      	ldr	r2, [r3, #0]
 800b108:	4bc1      	ldr	r3, [pc, #772]	; (800b410 <UART_SetConfig+0x340>)
 800b10a:	4013      	ands	r3, r2
 800b10c:	687a      	ldr	r2, [r7, #4]
 800b10e:	6812      	ldr	r2, [r2, #0]
 800b110:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b112:	430b      	orrs	r3, r1
 800b114:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	685b      	ldr	r3, [r3, #4]
 800b11c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	68da      	ldr	r2, [r3, #12]
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	430a      	orrs	r2, r1
 800b12a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	699b      	ldr	r3, [r3, #24]
 800b130:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	4ab7      	ldr	r2, [pc, #732]	; (800b414 <UART_SetConfig+0x344>)
 800b138:	4293      	cmp	r3, r2
 800b13a:	d004      	beq.n	800b146 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	6a1b      	ldr	r3, [r3, #32]
 800b140:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b142:	4313      	orrs	r3, r2
 800b144:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	689a      	ldr	r2, [r3, #8]
 800b14c:	4bb2      	ldr	r3, [pc, #712]	; (800b418 <UART_SetConfig+0x348>)
 800b14e:	4013      	ands	r3, r2
 800b150:	687a      	ldr	r2, [r7, #4]
 800b152:	6812      	ldr	r2, [r2, #0]
 800b154:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b156:	430b      	orrs	r3, r1
 800b158:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b160:	f023 010f 	bic.w	r1, r3, #15
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	430a      	orrs	r2, r1
 800b16e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	4aa9      	ldr	r2, [pc, #676]	; (800b41c <UART_SetConfig+0x34c>)
 800b176:	4293      	cmp	r3, r2
 800b178:	d177      	bne.n	800b26a <UART_SetConfig+0x19a>
 800b17a:	4ba9      	ldr	r3, [pc, #676]	; (800b420 <UART_SetConfig+0x350>)
 800b17c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b17e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b182:	2b28      	cmp	r3, #40	; 0x28
 800b184:	d86c      	bhi.n	800b260 <UART_SetConfig+0x190>
 800b186:	a201      	add	r2, pc, #4	; (adr r2, 800b18c <UART_SetConfig+0xbc>)
 800b188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b18c:	0800b231 	.word	0x0800b231
 800b190:	0800b261 	.word	0x0800b261
 800b194:	0800b261 	.word	0x0800b261
 800b198:	0800b261 	.word	0x0800b261
 800b19c:	0800b261 	.word	0x0800b261
 800b1a0:	0800b261 	.word	0x0800b261
 800b1a4:	0800b261 	.word	0x0800b261
 800b1a8:	0800b261 	.word	0x0800b261
 800b1ac:	0800b239 	.word	0x0800b239
 800b1b0:	0800b261 	.word	0x0800b261
 800b1b4:	0800b261 	.word	0x0800b261
 800b1b8:	0800b261 	.word	0x0800b261
 800b1bc:	0800b261 	.word	0x0800b261
 800b1c0:	0800b261 	.word	0x0800b261
 800b1c4:	0800b261 	.word	0x0800b261
 800b1c8:	0800b261 	.word	0x0800b261
 800b1cc:	0800b241 	.word	0x0800b241
 800b1d0:	0800b261 	.word	0x0800b261
 800b1d4:	0800b261 	.word	0x0800b261
 800b1d8:	0800b261 	.word	0x0800b261
 800b1dc:	0800b261 	.word	0x0800b261
 800b1e0:	0800b261 	.word	0x0800b261
 800b1e4:	0800b261 	.word	0x0800b261
 800b1e8:	0800b261 	.word	0x0800b261
 800b1ec:	0800b249 	.word	0x0800b249
 800b1f0:	0800b261 	.word	0x0800b261
 800b1f4:	0800b261 	.word	0x0800b261
 800b1f8:	0800b261 	.word	0x0800b261
 800b1fc:	0800b261 	.word	0x0800b261
 800b200:	0800b261 	.word	0x0800b261
 800b204:	0800b261 	.word	0x0800b261
 800b208:	0800b261 	.word	0x0800b261
 800b20c:	0800b251 	.word	0x0800b251
 800b210:	0800b261 	.word	0x0800b261
 800b214:	0800b261 	.word	0x0800b261
 800b218:	0800b261 	.word	0x0800b261
 800b21c:	0800b261 	.word	0x0800b261
 800b220:	0800b261 	.word	0x0800b261
 800b224:	0800b261 	.word	0x0800b261
 800b228:	0800b261 	.word	0x0800b261
 800b22c:	0800b259 	.word	0x0800b259
 800b230:	2301      	movs	r3, #1
 800b232:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b236:	e233      	b.n	800b6a0 <UART_SetConfig+0x5d0>
 800b238:	2304      	movs	r3, #4
 800b23a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b23e:	e22f      	b.n	800b6a0 <UART_SetConfig+0x5d0>
 800b240:	2308      	movs	r3, #8
 800b242:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b246:	e22b      	b.n	800b6a0 <UART_SetConfig+0x5d0>
 800b248:	2310      	movs	r3, #16
 800b24a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b24e:	e227      	b.n	800b6a0 <UART_SetConfig+0x5d0>
 800b250:	2320      	movs	r3, #32
 800b252:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b256:	e223      	b.n	800b6a0 <UART_SetConfig+0x5d0>
 800b258:	2340      	movs	r3, #64	; 0x40
 800b25a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b25e:	e21f      	b.n	800b6a0 <UART_SetConfig+0x5d0>
 800b260:	2380      	movs	r3, #128	; 0x80
 800b262:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b266:	bf00      	nop
 800b268:	e21a      	b.n	800b6a0 <UART_SetConfig+0x5d0>
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	4a6d      	ldr	r2, [pc, #436]	; (800b424 <UART_SetConfig+0x354>)
 800b270:	4293      	cmp	r3, r2
 800b272:	d132      	bne.n	800b2da <UART_SetConfig+0x20a>
 800b274:	4b6a      	ldr	r3, [pc, #424]	; (800b420 <UART_SetConfig+0x350>)
 800b276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b278:	f003 0307 	and.w	r3, r3, #7
 800b27c:	2b05      	cmp	r3, #5
 800b27e:	d827      	bhi.n	800b2d0 <UART_SetConfig+0x200>
 800b280:	a201      	add	r2, pc, #4	; (adr r2, 800b288 <UART_SetConfig+0x1b8>)
 800b282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b286:	bf00      	nop
 800b288:	0800b2a1 	.word	0x0800b2a1
 800b28c:	0800b2a9 	.word	0x0800b2a9
 800b290:	0800b2b1 	.word	0x0800b2b1
 800b294:	0800b2b9 	.word	0x0800b2b9
 800b298:	0800b2c1 	.word	0x0800b2c1
 800b29c:	0800b2c9 	.word	0x0800b2c9
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2a6:	e1fb      	b.n	800b6a0 <UART_SetConfig+0x5d0>
 800b2a8:	2304      	movs	r3, #4
 800b2aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2ae:	e1f7      	b.n	800b6a0 <UART_SetConfig+0x5d0>
 800b2b0:	2308      	movs	r3, #8
 800b2b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2b6:	e1f3      	b.n	800b6a0 <UART_SetConfig+0x5d0>
 800b2b8:	2310      	movs	r3, #16
 800b2ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2be:	e1ef      	b.n	800b6a0 <UART_SetConfig+0x5d0>
 800b2c0:	2320      	movs	r3, #32
 800b2c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2c6:	e1eb      	b.n	800b6a0 <UART_SetConfig+0x5d0>
 800b2c8:	2340      	movs	r3, #64	; 0x40
 800b2ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2ce:	e1e7      	b.n	800b6a0 <UART_SetConfig+0x5d0>
 800b2d0:	2380      	movs	r3, #128	; 0x80
 800b2d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2d6:	bf00      	nop
 800b2d8:	e1e2      	b.n	800b6a0 <UART_SetConfig+0x5d0>
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	4a52      	ldr	r2, [pc, #328]	; (800b428 <UART_SetConfig+0x358>)
 800b2e0:	4293      	cmp	r3, r2
 800b2e2:	d132      	bne.n	800b34a <UART_SetConfig+0x27a>
 800b2e4:	4b4e      	ldr	r3, [pc, #312]	; (800b420 <UART_SetConfig+0x350>)
 800b2e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2e8:	f003 0307 	and.w	r3, r3, #7
 800b2ec:	2b05      	cmp	r3, #5
 800b2ee:	d827      	bhi.n	800b340 <UART_SetConfig+0x270>
 800b2f0:	a201      	add	r2, pc, #4	; (adr r2, 800b2f8 <UART_SetConfig+0x228>)
 800b2f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2f6:	bf00      	nop
 800b2f8:	0800b311 	.word	0x0800b311
 800b2fc:	0800b319 	.word	0x0800b319
 800b300:	0800b321 	.word	0x0800b321
 800b304:	0800b329 	.word	0x0800b329
 800b308:	0800b331 	.word	0x0800b331
 800b30c:	0800b339 	.word	0x0800b339
 800b310:	2300      	movs	r3, #0
 800b312:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b316:	e1c3      	b.n	800b6a0 <UART_SetConfig+0x5d0>
 800b318:	2304      	movs	r3, #4
 800b31a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b31e:	e1bf      	b.n	800b6a0 <UART_SetConfig+0x5d0>
 800b320:	2308      	movs	r3, #8
 800b322:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b326:	e1bb      	b.n	800b6a0 <UART_SetConfig+0x5d0>
 800b328:	2310      	movs	r3, #16
 800b32a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b32e:	e1b7      	b.n	800b6a0 <UART_SetConfig+0x5d0>
 800b330:	2320      	movs	r3, #32
 800b332:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b336:	e1b3      	b.n	800b6a0 <UART_SetConfig+0x5d0>
 800b338:	2340      	movs	r3, #64	; 0x40
 800b33a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b33e:	e1af      	b.n	800b6a0 <UART_SetConfig+0x5d0>
 800b340:	2380      	movs	r3, #128	; 0x80
 800b342:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b346:	bf00      	nop
 800b348:	e1aa      	b.n	800b6a0 <UART_SetConfig+0x5d0>
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	4a37      	ldr	r2, [pc, #220]	; (800b42c <UART_SetConfig+0x35c>)
 800b350:	4293      	cmp	r3, r2
 800b352:	d132      	bne.n	800b3ba <UART_SetConfig+0x2ea>
 800b354:	4b32      	ldr	r3, [pc, #200]	; (800b420 <UART_SetConfig+0x350>)
 800b356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b358:	f003 0307 	and.w	r3, r3, #7
 800b35c:	2b05      	cmp	r3, #5
 800b35e:	d827      	bhi.n	800b3b0 <UART_SetConfig+0x2e0>
 800b360:	a201      	add	r2, pc, #4	; (adr r2, 800b368 <UART_SetConfig+0x298>)
 800b362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b366:	bf00      	nop
 800b368:	0800b381 	.word	0x0800b381
 800b36c:	0800b389 	.word	0x0800b389
 800b370:	0800b391 	.word	0x0800b391
 800b374:	0800b399 	.word	0x0800b399
 800b378:	0800b3a1 	.word	0x0800b3a1
 800b37c:	0800b3a9 	.word	0x0800b3a9
 800b380:	2300      	movs	r3, #0
 800b382:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b386:	e18b      	b.n	800b6a0 <UART_SetConfig+0x5d0>
 800b388:	2304      	movs	r3, #4
 800b38a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b38e:	e187      	b.n	800b6a0 <UART_SetConfig+0x5d0>
 800b390:	2308      	movs	r3, #8
 800b392:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b396:	e183      	b.n	800b6a0 <UART_SetConfig+0x5d0>
 800b398:	2310      	movs	r3, #16
 800b39a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b39e:	e17f      	b.n	800b6a0 <UART_SetConfig+0x5d0>
 800b3a0:	2320      	movs	r3, #32
 800b3a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3a6:	e17b      	b.n	800b6a0 <UART_SetConfig+0x5d0>
 800b3a8:	2340      	movs	r3, #64	; 0x40
 800b3aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3ae:	e177      	b.n	800b6a0 <UART_SetConfig+0x5d0>
 800b3b0:	2380      	movs	r3, #128	; 0x80
 800b3b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3b6:	bf00      	nop
 800b3b8:	e172      	b.n	800b6a0 <UART_SetConfig+0x5d0>
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	4a1c      	ldr	r2, [pc, #112]	; (800b430 <UART_SetConfig+0x360>)
 800b3c0:	4293      	cmp	r3, r2
 800b3c2:	d144      	bne.n	800b44e <UART_SetConfig+0x37e>
 800b3c4:	4b16      	ldr	r3, [pc, #88]	; (800b420 <UART_SetConfig+0x350>)
 800b3c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3c8:	f003 0307 	and.w	r3, r3, #7
 800b3cc:	2b05      	cmp	r3, #5
 800b3ce:	d839      	bhi.n	800b444 <UART_SetConfig+0x374>
 800b3d0:	a201      	add	r2, pc, #4	; (adr r2, 800b3d8 <UART_SetConfig+0x308>)
 800b3d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3d6:	bf00      	nop
 800b3d8:	0800b3f1 	.word	0x0800b3f1
 800b3dc:	0800b3f9 	.word	0x0800b3f9
 800b3e0:	0800b401 	.word	0x0800b401
 800b3e4:	0800b409 	.word	0x0800b409
 800b3e8:	0800b435 	.word	0x0800b435
 800b3ec:	0800b43d 	.word	0x0800b43d
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3f6:	e153      	b.n	800b6a0 <UART_SetConfig+0x5d0>
 800b3f8:	2304      	movs	r3, #4
 800b3fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3fe:	e14f      	b.n	800b6a0 <UART_SetConfig+0x5d0>
 800b400:	2308      	movs	r3, #8
 800b402:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b406:	e14b      	b.n	800b6a0 <UART_SetConfig+0x5d0>
 800b408:	2310      	movs	r3, #16
 800b40a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b40e:	e147      	b.n	800b6a0 <UART_SetConfig+0x5d0>
 800b410:	cfff69f3 	.word	0xcfff69f3
 800b414:	58000c00 	.word	0x58000c00
 800b418:	11fff4ff 	.word	0x11fff4ff
 800b41c:	40011000 	.word	0x40011000
 800b420:	58024400 	.word	0x58024400
 800b424:	40004400 	.word	0x40004400
 800b428:	40004800 	.word	0x40004800
 800b42c:	40004c00 	.word	0x40004c00
 800b430:	40005000 	.word	0x40005000
 800b434:	2320      	movs	r3, #32
 800b436:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b43a:	e131      	b.n	800b6a0 <UART_SetConfig+0x5d0>
 800b43c:	2340      	movs	r3, #64	; 0x40
 800b43e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b442:	e12d      	b.n	800b6a0 <UART_SetConfig+0x5d0>
 800b444:	2380      	movs	r3, #128	; 0x80
 800b446:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b44a:	bf00      	nop
 800b44c:	e128      	b.n	800b6a0 <UART_SetConfig+0x5d0>
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	4ab6      	ldr	r2, [pc, #728]	; (800b72c <UART_SetConfig+0x65c>)
 800b454:	4293      	cmp	r3, r2
 800b456:	d178      	bne.n	800b54a <UART_SetConfig+0x47a>
 800b458:	4bb5      	ldr	r3, [pc, #724]	; (800b730 <UART_SetConfig+0x660>)
 800b45a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b45c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b460:	2b28      	cmp	r3, #40	; 0x28
 800b462:	d86d      	bhi.n	800b540 <UART_SetConfig+0x470>
 800b464:	a201      	add	r2, pc, #4	; (adr r2, 800b46c <UART_SetConfig+0x39c>)
 800b466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b46a:	bf00      	nop
 800b46c:	0800b511 	.word	0x0800b511
 800b470:	0800b541 	.word	0x0800b541
 800b474:	0800b541 	.word	0x0800b541
 800b478:	0800b541 	.word	0x0800b541
 800b47c:	0800b541 	.word	0x0800b541
 800b480:	0800b541 	.word	0x0800b541
 800b484:	0800b541 	.word	0x0800b541
 800b488:	0800b541 	.word	0x0800b541
 800b48c:	0800b519 	.word	0x0800b519
 800b490:	0800b541 	.word	0x0800b541
 800b494:	0800b541 	.word	0x0800b541
 800b498:	0800b541 	.word	0x0800b541
 800b49c:	0800b541 	.word	0x0800b541
 800b4a0:	0800b541 	.word	0x0800b541
 800b4a4:	0800b541 	.word	0x0800b541
 800b4a8:	0800b541 	.word	0x0800b541
 800b4ac:	0800b521 	.word	0x0800b521
 800b4b0:	0800b541 	.word	0x0800b541
 800b4b4:	0800b541 	.word	0x0800b541
 800b4b8:	0800b541 	.word	0x0800b541
 800b4bc:	0800b541 	.word	0x0800b541
 800b4c0:	0800b541 	.word	0x0800b541
 800b4c4:	0800b541 	.word	0x0800b541
 800b4c8:	0800b541 	.word	0x0800b541
 800b4cc:	0800b529 	.word	0x0800b529
 800b4d0:	0800b541 	.word	0x0800b541
 800b4d4:	0800b541 	.word	0x0800b541
 800b4d8:	0800b541 	.word	0x0800b541
 800b4dc:	0800b541 	.word	0x0800b541
 800b4e0:	0800b541 	.word	0x0800b541
 800b4e4:	0800b541 	.word	0x0800b541
 800b4e8:	0800b541 	.word	0x0800b541
 800b4ec:	0800b531 	.word	0x0800b531
 800b4f0:	0800b541 	.word	0x0800b541
 800b4f4:	0800b541 	.word	0x0800b541
 800b4f8:	0800b541 	.word	0x0800b541
 800b4fc:	0800b541 	.word	0x0800b541
 800b500:	0800b541 	.word	0x0800b541
 800b504:	0800b541 	.word	0x0800b541
 800b508:	0800b541 	.word	0x0800b541
 800b50c:	0800b539 	.word	0x0800b539
 800b510:	2301      	movs	r3, #1
 800b512:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b516:	e0c3      	b.n	800b6a0 <UART_SetConfig+0x5d0>
 800b518:	2304      	movs	r3, #4
 800b51a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b51e:	e0bf      	b.n	800b6a0 <UART_SetConfig+0x5d0>
 800b520:	2308      	movs	r3, #8
 800b522:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b526:	e0bb      	b.n	800b6a0 <UART_SetConfig+0x5d0>
 800b528:	2310      	movs	r3, #16
 800b52a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b52e:	e0b7      	b.n	800b6a0 <UART_SetConfig+0x5d0>
 800b530:	2320      	movs	r3, #32
 800b532:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b536:	e0b3      	b.n	800b6a0 <UART_SetConfig+0x5d0>
 800b538:	2340      	movs	r3, #64	; 0x40
 800b53a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b53e:	e0af      	b.n	800b6a0 <UART_SetConfig+0x5d0>
 800b540:	2380      	movs	r3, #128	; 0x80
 800b542:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b546:	bf00      	nop
 800b548:	e0aa      	b.n	800b6a0 <UART_SetConfig+0x5d0>
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	4a79      	ldr	r2, [pc, #484]	; (800b734 <UART_SetConfig+0x664>)
 800b550:	4293      	cmp	r3, r2
 800b552:	d132      	bne.n	800b5ba <UART_SetConfig+0x4ea>
 800b554:	4b76      	ldr	r3, [pc, #472]	; (800b730 <UART_SetConfig+0x660>)
 800b556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b558:	f003 0307 	and.w	r3, r3, #7
 800b55c:	2b05      	cmp	r3, #5
 800b55e:	d827      	bhi.n	800b5b0 <UART_SetConfig+0x4e0>
 800b560:	a201      	add	r2, pc, #4	; (adr r2, 800b568 <UART_SetConfig+0x498>)
 800b562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b566:	bf00      	nop
 800b568:	0800b581 	.word	0x0800b581
 800b56c:	0800b589 	.word	0x0800b589
 800b570:	0800b591 	.word	0x0800b591
 800b574:	0800b599 	.word	0x0800b599
 800b578:	0800b5a1 	.word	0x0800b5a1
 800b57c:	0800b5a9 	.word	0x0800b5a9
 800b580:	2300      	movs	r3, #0
 800b582:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b586:	e08b      	b.n	800b6a0 <UART_SetConfig+0x5d0>
 800b588:	2304      	movs	r3, #4
 800b58a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b58e:	e087      	b.n	800b6a0 <UART_SetConfig+0x5d0>
 800b590:	2308      	movs	r3, #8
 800b592:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b596:	e083      	b.n	800b6a0 <UART_SetConfig+0x5d0>
 800b598:	2310      	movs	r3, #16
 800b59a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b59e:	e07f      	b.n	800b6a0 <UART_SetConfig+0x5d0>
 800b5a0:	2320      	movs	r3, #32
 800b5a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b5a6:	e07b      	b.n	800b6a0 <UART_SetConfig+0x5d0>
 800b5a8:	2340      	movs	r3, #64	; 0x40
 800b5aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b5ae:	e077      	b.n	800b6a0 <UART_SetConfig+0x5d0>
 800b5b0:	2380      	movs	r3, #128	; 0x80
 800b5b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b5b6:	bf00      	nop
 800b5b8:	e072      	b.n	800b6a0 <UART_SetConfig+0x5d0>
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	4a5e      	ldr	r2, [pc, #376]	; (800b738 <UART_SetConfig+0x668>)
 800b5c0:	4293      	cmp	r3, r2
 800b5c2:	d132      	bne.n	800b62a <UART_SetConfig+0x55a>
 800b5c4:	4b5a      	ldr	r3, [pc, #360]	; (800b730 <UART_SetConfig+0x660>)
 800b5c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5c8:	f003 0307 	and.w	r3, r3, #7
 800b5cc:	2b05      	cmp	r3, #5
 800b5ce:	d827      	bhi.n	800b620 <UART_SetConfig+0x550>
 800b5d0:	a201      	add	r2, pc, #4	; (adr r2, 800b5d8 <UART_SetConfig+0x508>)
 800b5d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5d6:	bf00      	nop
 800b5d8:	0800b5f1 	.word	0x0800b5f1
 800b5dc:	0800b5f9 	.word	0x0800b5f9
 800b5e0:	0800b601 	.word	0x0800b601
 800b5e4:	0800b609 	.word	0x0800b609
 800b5e8:	0800b611 	.word	0x0800b611
 800b5ec:	0800b619 	.word	0x0800b619
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b5f6:	e053      	b.n	800b6a0 <UART_SetConfig+0x5d0>
 800b5f8:	2304      	movs	r3, #4
 800b5fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b5fe:	e04f      	b.n	800b6a0 <UART_SetConfig+0x5d0>
 800b600:	2308      	movs	r3, #8
 800b602:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b606:	e04b      	b.n	800b6a0 <UART_SetConfig+0x5d0>
 800b608:	2310      	movs	r3, #16
 800b60a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b60e:	e047      	b.n	800b6a0 <UART_SetConfig+0x5d0>
 800b610:	2320      	movs	r3, #32
 800b612:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b616:	e043      	b.n	800b6a0 <UART_SetConfig+0x5d0>
 800b618:	2340      	movs	r3, #64	; 0x40
 800b61a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b61e:	e03f      	b.n	800b6a0 <UART_SetConfig+0x5d0>
 800b620:	2380      	movs	r3, #128	; 0x80
 800b622:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b626:	bf00      	nop
 800b628:	e03a      	b.n	800b6a0 <UART_SetConfig+0x5d0>
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	4a43      	ldr	r2, [pc, #268]	; (800b73c <UART_SetConfig+0x66c>)
 800b630:	4293      	cmp	r3, r2
 800b632:	d132      	bne.n	800b69a <UART_SetConfig+0x5ca>
 800b634:	4b3e      	ldr	r3, [pc, #248]	; (800b730 <UART_SetConfig+0x660>)
 800b636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b638:	f003 0307 	and.w	r3, r3, #7
 800b63c:	2b05      	cmp	r3, #5
 800b63e:	d827      	bhi.n	800b690 <UART_SetConfig+0x5c0>
 800b640:	a201      	add	r2, pc, #4	; (adr r2, 800b648 <UART_SetConfig+0x578>)
 800b642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b646:	bf00      	nop
 800b648:	0800b661 	.word	0x0800b661
 800b64c:	0800b669 	.word	0x0800b669
 800b650:	0800b671 	.word	0x0800b671
 800b654:	0800b679 	.word	0x0800b679
 800b658:	0800b681 	.word	0x0800b681
 800b65c:	0800b689 	.word	0x0800b689
 800b660:	2302      	movs	r3, #2
 800b662:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b666:	e01b      	b.n	800b6a0 <UART_SetConfig+0x5d0>
 800b668:	2304      	movs	r3, #4
 800b66a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b66e:	e017      	b.n	800b6a0 <UART_SetConfig+0x5d0>
 800b670:	2308      	movs	r3, #8
 800b672:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b676:	e013      	b.n	800b6a0 <UART_SetConfig+0x5d0>
 800b678:	2310      	movs	r3, #16
 800b67a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b67e:	e00f      	b.n	800b6a0 <UART_SetConfig+0x5d0>
 800b680:	2320      	movs	r3, #32
 800b682:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b686:	e00b      	b.n	800b6a0 <UART_SetConfig+0x5d0>
 800b688:	2340      	movs	r3, #64	; 0x40
 800b68a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b68e:	e007      	b.n	800b6a0 <UART_SetConfig+0x5d0>
 800b690:	2380      	movs	r3, #128	; 0x80
 800b692:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b696:	bf00      	nop
 800b698:	e002      	b.n	800b6a0 <UART_SetConfig+0x5d0>
 800b69a:	2380      	movs	r3, #128	; 0x80
 800b69c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	4a25      	ldr	r2, [pc, #148]	; (800b73c <UART_SetConfig+0x66c>)
 800b6a6:	4293      	cmp	r3, r2
 800b6a8:	f040 80b8 	bne.w	800b81c <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b6ac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b6b0:	2b08      	cmp	r3, #8
 800b6b2:	d019      	beq.n	800b6e8 <UART_SetConfig+0x618>
 800b6b4:	2b08      	cmp	r3, #8
 800b6b6:	dc04      	bgt.n	800b6c2 <UART_SetConfig+0x5f2>
 800b6b8:	2b02      	cmp	r3, #2
 800b6ba:	d009      	beq.n	800b6d0 <UART_SetConfig+0x600>
 800b6bc:	2b04      	cmp	r3, #4
 800b6be:	d00b      	beq.n	800b6d8 <UART_SetConfig+0x608>
 800b6c0:	e042      	b.n	800b748 <UART_SetConfig+0x678>
 800b6c2:	2b20      	cmp	r3, #32
 800b6c4:	d02b      	beq.n	800b71e <UART_SetConfig+0x64e>
 800b6c6:	2b40      	cmp	r3, #64	; 0x40
 800b6c8:	d02c      	beq.n	800b724 <UART_SetConfig+0x654>
 800b6ca:	2b10      	cmp	r3, #16
 800b6cc:	d014      	beq.n	800b6f8 <UART_SetConfig+0x628>
 800b6ce:	e03b      	b.n	800b748 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b6d0:	f7fc feb8 	bl	8008444 <HAL_RCCEx_GetD3PCLK1Freq>
 800b6d4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b6d6:	e03d      	b.n	800b754 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b6d8:	f107 0314 	add.w	r3, r7, #20
 800b6dc:	4618      	mov	r0, r3
 800b6de:	f7fc fec7 	bl	8008470 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b6e2:	69bb      	ldr	r3, [r7, #24]
 800b6e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b6e6:	e035      	b.n	800b754 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b6e8:	f107 0308 	add.w	r3, r7, #8
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	f7fd f80b 	bl	8008708 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b6f6:	e02d      	b.n	800b754 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b6f8:	4b0d      	ldr	r3, [pc, #52]	; (800b730 <UART_SetConfig+0x660>)
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	f003 0320 	and.w	r3, r3, #32
 800b700:	2b00      	cmp	r3, #0
 800b702:	d009      	beq.n	800b718 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b704:	4b0a      	ldr	r3, [pc, #40]	; (800b730 <UART_SetConfig+0x660>)
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	08db      	lsrs	r3, r3, #3
 800b70a:	f003 0303 	and.w	r3, r3, #3
 800b70e:	4a0c      	ldr	r2, [pc, #48]	; (800b740 <UART_SetConfig+0x670>)
 800b710:	fa22 f303 	lsr.w	r3, r2, r3
 800b714:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b716:	e01d      	b.n	800b754 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 800b718:	4b09      	ldr	r3, [pc, #36]	; (800b740 <UART_SetConfig+0x670>)
 800b71a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b71c:	e01a      	b.n	800b754 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b71e:	4b09      	ldr	r3, [pc, #36]	; (800b744 <UART_SetConfig+0x674>)
 800b720:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b722:	e017      	b.n	800b754 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b724:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b728:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b72a:	e013      	b.n	800b754 <UART_SetConfig+0x684>
 800b72c:	40011400 	.word	0x40011400
 800b730:	58024400 	.word	0x58024400
 800b734:	40007800 	.word	0x40007800
 800b738:	40007c00 	.word	0x40007c00
 800b73c:	58000c00 	.word	0x58000c00
 800b740:	03d09000 	.word	0x03d09000
 800b744:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800b748:	2300      	movs	r3, #0
 800b74a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b74c:	2301      	movs	r3, #1
 800b74e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b752:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b756:	2b00      	cmp	r3, #0
 800b758:	f000 824d 	beq.w	800bbf6 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b760:	4aad      	ldr	r2, [pc, #692]	; (800ba18 <UART_SetConfig+0x948>)
 800b762:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b766:	461a      	mov	r2, r3
 800b768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b76a:	fbb3 f3f2 	udiv	r3, r3, r2
 800b76e:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	685a      	ldr	r2, [r3, #4]
 800b774:	4613      	mov	r3, r2
 800b776:	005b      	lsls	r3, r3, #1
 800b778:	4413      	add	r3, r2
 800b77a:	6a3a      	ldr	r2, [r7, #32]
 800b77c:	429a      	cmp	r2, r3
 800b77e:	d305      	bcc.n	800b78c <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	685b      	ldr	r3, [r3, #4]
 800b784:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b786:	6a3a      	ldr	r2, [r7, #32]
 800b788:	429a      	cmp	r2, r3
 800b78a:	d903      	bls.n	800b794 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 800b78c:	2301      	movs	r3, #1
 800b78e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b792:	e230      	b.n	800bbf6 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b796:	4618      	mov	r0, r3
 800b798:	f04f 0100 	mov.w	r1, #0
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7a0:	4a9d      	ldr	r2, [pc, #628]	; (800ba18 <UART_SetConfig+0x948>)
 800b7a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b7a6:	b29b      	uxth	r3, r3
 800b7a8:	f04f 0400 	mov.w	r4, #0
 800b7ac:	461a      	mov	r2, r3
 800b7ae:	4623      	mov	r3, r4
 800b7b0:	f7f4 fdee 	bl	8000390 <__aeabi_uldivmod>
 800b7b4:	4603      	mov	r3, r0
 800b7b6:	460c      	mov	r4, r1
 800b7b8:	4619      	mov	r1, r3
 800b7ba:	4622      	mov	r2, r4
 800b7bc:	f04f 0300 	mov.w	r3, #0
 800b7c0:	f04f 0400 	mov.w	r4, #0
 800b7c4:	0214      	lsls	r4, r2, #8
 800b7c6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800b7ca:	020b      	lsls	r3, r1, #8
 800b7cc:	687a      	ldr	r2, [r7, #4]
 800b7ce:	6852      	ldr	r2, [r2, #4]
 800b7d0:	0852      	lsrs	r2, r2, #1
 800b7d2:	4611      	mov	r1, r2
 800b7d4:	f04f 0200 	mov.w	r2, #0
 800b7d8:	eb13 0b01 	adds.w	fp, r3, r1
 800b7dc:	eb44 0c02 	adc.w	ip, r4, r2
 800b7e0:	4658      	mov	r0, fp
 800b7e2:	4661      	mov	r1, ip
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	685b      	ldr	r3, [r3, #4]
 800b7e8:	f04f 0400 	mov.w	r4, #0
 800b7ec:	461a      	mov	r2, r3
 800b7ee:	4623      	mov	r3, r4
 800b7f0:	f7f4 fdce 	bl	8000390 <__aeabi_uldivmod>
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	460c      	mov	r4, r1
 800b7f8:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b7fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b800:	d308      	bcc.n	800b814 <UART_SetConfig+0x744>
 800b802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b804:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b808:	d204      	bcs.n	800b814 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b810:	60da      	str	r2, [r3, #12]
 800b812:	e1f0      	b.n	800bbf6 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 800b814:	2301      	movs	r3, #1
 800b816:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b81a:	e1ec      	b.n	800bbf6 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	69db      	ldr	r3, [r3, #28]
 800b820:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b824:	f040 8100 	bne.w	800ba28 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 800b828:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b82c:	2b40      	cmp	r3, #64	; 0x40
 800b82e:	f200 80b7 	bhi.w	800b9a0 <UART_SetConfig+0x8d0>
 800b832:	a201      	add	r2, pc, #4	; (adr r2, 800b838 <UART_SetConfig+0x768>)
 800b834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b838:	0800b93d 	.word	0x0800b93d
 800b83c:	0800b945 	.word	0x0800b945
 800b840:	0800b9a1 	.word	0x0800b9a1
 800b844:	0800b9a1 	.word	0x0800b9a1
 800b848:	0800b94d 	.word	0x0800b94d
 800b84c:	0800b9a1 	.word	0x0800b9a1
 800b850:	0800b9a1 	.word	0x0800b9a1
 800b854:	0800b9a1 	.word	0x0800b9a1
 800b858:	0800b95d 	.word	0x0800b95d
 800b85c:	0800b9a1 	.word	0x0800b9a1
 800b860:	0800b9a1 	.word	0x0800b9a1
 800b864:	0800b9a1 	.word	0x0800b9a1
 800b868:	0800b9a1 	.word	0x0800b9a1
 800b86c:	0800b9a1 	.word	0x0800b9a1
 800b870:	0800b9a1 	.word	0x0800b9a1
 800b874:	0800b9a1 	.word	0x0800b9a1
 800b878:	0800b96d 	.word	0x0800b96d
 800b87c:	0800b9a1 	.word	0x0800b9a1
 800b880:	0800b9a1 	.word	0x0800b9a1
 800b884:	0800b9a1 	.word	0x0800b9a1
 800b888:	0800b9a1 	.word	0x0800b9a1
 800b88c:	0800b9a1 	.word	0x0800b9a1
 800b890:	0800b9a1 	.word	0x0800b9a1
 800b894:	0800b9a1 	.word	0x0800b9a1
 800b898:	0800b9a1 	.word	0x0800b9a1
 800b89c:	0800b9a1 	.word	0x0800b9a1
 800b8a0:	0800b9a1 	.word	0x0800b9a1
 800b8a4:	0800b9a1 	.word	0x0800b9a1
 800b8a8:	0800b9a1 	.word	0x0800b9a1
 800b8ac:	0800b9a1 	.word	0x0800b9a1
 800b8b0:	0800b9a1 	.word	0x0800b9a1
 800b8b4:	0800b9a1 	.word	0x0800b9a1
 800b8b8:	0800b993 	.word	0x0800b993
 800b8bc:	0800b9a1 	.word	0x0800b9a1
 800b8c0:	0800b9a1 	.word	0x0800b9a1
 800b8c4:	0800b9a1 	.word	0x0800b9a1
 800b8c8:	0800b9a1 	.word	0x0800b9a1
 800b8cc:	0800b9a1 	.word	0x0800b9a1
 800b8d0:	0800b9a1 	.word	0x0800b9a1
 800b8d4:	0800b9a1 	.word	0x0800b9a1
 800b8d8:	0800b9a1 	.word	0x0800b9a1
 800b8dc:	0800b9a1 	.word	0x0800b9a1
 800b8e0:	0800b9a1 	.word	0x0800b9a1
 800b8e4:	0800b9a1 	.word	0x0800b9a1
 800b8e8:	0800b9a1 	.word	0x0800b9a1
 800b8ec:	0800b9a1 	.word	0x0800b9a1
 800b8f0:	0800b9a1 	.word	0x0800b9a1
 800b8f4:	0800b9a1 	.word	0x0800b9a1
 800b8f8:	0800b9a1 	.word	0x0800b9a1
 800b8fc:	0800b9a1 	.word	0x0800b9a1
 800b900:	0800b9a1 	.word	0x0800b9a1
 800b904:	0800b9a1 	.word	0x0800b9a1
 800b908:	0800b9a1 	.word	0x0800b9a1
 800b90c:	0800b9a1 	.word	0x0800b9a1
 800b910:	0800b9a1 	.word	0x0800b9a1
 800b914:	0800b9a1 	.word	0x0800b9a1
 800b918:	0800b9a1 	.word	0x0800b9a1
 800b91c:	0800b9a1 	.word	0x0800b9a1
 800b920:	0800b9a1 	.word	0x0800b9a1
 800b924:	0800b9a1 	.word	0x0800b9a1
 800b928:	0800b9a1 	.word	0x0800b9a1
 800b92c:	0800b9a1 	.word	0x0800b9a1
 800b930:	0800b9a1 	.word	0x0800b9a1
 800b934:	0800b9a1 	.word	0x0800b9a1
 800b938:	0800b999 	.word	0x0800b999
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b93c:	f7fb fbd4 	bl	80070e8 <HAL_RCC_GetPCLK1Freq>
 800b940:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b942:	e033      	b.n	800b9ac <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b944:	f7fb fbe6 	bl	8007114 <HAL_RCC_GetPCLK2Freq>
 800b948:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b94a:	e02f      	b.n	800b9ac <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b94c:	f107 0314 	add.w	r3, r7, #20
 800b950:	4618      	mov	r0, r3
 800b952:	f7fc fd8d 	bl	8008470 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b956:	69bb      	ldr	r3, [r7, #24]
 800b958:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b95a:	e027      	b.n	800b9ac <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b95c:	f107 0308 	add.w	r3, r7, #8
 800b960:	4618      	mov	r0, r3
 800b962:	f7fc fed1 	bl	8008708 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b96a:	e01f      	b.n	800b9ac <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b96c:	4b2b      	ldr	r3, [pc, #172]	; (800ba1c <UART_SetConfig+0x94c>)
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	f003 0320 	and.w	r3, r3, #32
 800b974:	2b00      	cmp	r3, #0
 800b976:	d009      	beq.n	800b98c <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b978:	4b28      	ldr	r3, [pc, #160]	; (800ba1c <UART_SetConfig+0x94c>)
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	08db      	lsrs	r3, r3, #3
 800b97e:	f003 0303 	and.w	r3, r3, #3
 800b982:	4a27      	ldr	r2, [pc, #156]	; (800ba20 <UART_SetConfig+0x950>)
 800b984:	fa22 f303 	lsr.w	r3, r2, r3
 800b988:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b98a:	e00f      	b.n	800b9ac <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 800b98c:	4b24      	ldr	r3, [pc, #144]	; (800ba20 <UART_SetConfig+0x950>)
 800b98e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b990:	e00c      	b.n	800b9ac <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b992:	4b24      	ldr	r3, [pc, #144]	; (800ba24 <UART_SetConfig+0x954>)
 800b994:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b996:	e009      	b.n	800b9ac <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b998:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b99c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b99e:	e005      	b.n	800b9ac <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b9a4:	2301      	movs	r3, #1
 800b9a6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b9aa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b9ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	f000 8121 	beq.w	800bbf6 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9b8:	4a17      	ldr	r2, [pc, #92]	; (800ba18 <UART_SetConfig+0x948>)
 800b9ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b9be:	461a      	mov	r2, r3
 800b9c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9c2:	fbb3 f3f2 	udiv	r3, r3, r2
 800b9c6:	005a      	lsls	r2, r3, #1
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	685b      	ldr	r3, [r3, #4]
 800b9cc:	085b      	lsrs	r3, r3, #1
 800b9ce:	441a      	add	r2, r3
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	685b      	ldr	r3, [r3, #4]
 800b9d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9d8:	b29b      	uxth	r3, r3
 800b9da:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b9dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9de:	2b0f      	cmp	r3, #15
 800b9e0:	d916      	bls.n	800ba10 <UART_SetConfig+0x940>
 800b9e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b9e8:	d212      	bcs.n	800ba10 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b9ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ec:	b29b      	uxth	r3, r3
 800b9ee:	f023 030f 	bic.w	r3, r3, #15
 800b9f2:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b9f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9f6:	085b      	lsrs	r3, r3, #1
 800b9f8:	b29b      	uxth	r3, r3
 800b9fa:	f003 0307 	and.w	r3, r3, #7
 800b9fe:	b29a      	uxth	r2, r3
 800ba00:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ba02:	4313      	orrs	r3, r2
 800ba04:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ba0c:	60da      	str	r2, [r3, #12]
 800ba0e:	e0f2      	b.n	800bbf6 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800ba10:	2301      	movs	r3, #1
 800ba12:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800ba16:	e0ee      	b.n	800bbf6 <UART_SetConfig+0xb26>
 800ba18:	0801572c 	.word	0x0801572c
 800ba1c:	58024400 	.word	0x58024400
 800ba20:	03d09000 	.word	0x03d09000
 800ba24:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 800ba28:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ba2c:	2b40      	cmp	r3, #64	; 0x40
 800ba2e:	f200 80b7 	bhi.w	800bba0 <UART_SetConfig+0xad0>
 800ba32:	a201      	add	r2, pc, #4	; (adr r2, 800ba38 <UART_SetConfig+0x968>)
 800ba34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba38:	0800bb3d 	.word	0x0800bb3d
 800ba3c:	0800bb45 	.word	0x0800bb45
 800ba40:	0800bba1 	.word	0x0800bba1
 800ba44:	0800bba1 	.word	0x0800bba1
 800ba48:	0800bb4d 	.word	0x0800bb4d
 800ba4c:	0800bba1 	.word	0x0800bba1
 800ba50:	0800bba1 	.word	0x0800bba1
 800ba54:	0800bba1 	.word	0x0800bba1
 800ba58:	0800bb5d 	.word	0x0800bb5d
 800ba5c:	0800bba1 	.word	0x0800bba1
 800ba60:	0800bba1 	.word	0x0800bba1
 800ba64:	0800bba1 	.word	0x0800bba1
 800ba68:	0800bba1 	.word	0x0800bba1
 800ba6c:	0800bba1 	.word	0x0800bba1
 800ba70:	0800bba1 	.word	0x0800bba1
 800ba74:	0800bba1 	.word	0x0800bba1
 800ba78:	0800bb6d 	.word	0x0800bb6d
 800ba7c:	0800bba1 	.word	0x0800bba1
 800ba80:	0800bba1 	.word	0x0800bba1
 800ba84:	0800bba1 	.word	0x0800bba1
 800ba88:	0800bba1 	.word	0x0800bba1
 800ba8c:	0800bba1 	.word	0x0800bba1
 800ba90:	0800bba1 	.word	0x0800bba1
 800ba94:	0800bba1 	.word	0x0800bba1
 800ba98:	0800bba1 	.word	0x0800bba1
 800ba9c:	0800bba1 	.word	0x0800bba1
 800baa0:	0800bba1 	.word	0x0800bba1
 800baa4:	0800bba1 	.word	0x0800bba1
 800baa8:	0800bba1 	.word	0x0800bba1
 800baac:	0800bba1 	.word	0x0800bba1
 800bab0:	0800bba1 	.word	0x0800bba1
 800bab4:	0800bba1 	.word	0x0800bba1
 800bab8:	0800bb93 	.word	0x0800bb93
 800babc:	0800bba1 	.word	0x0800bba1
 800bac0:	0800bba1 	.word	0x0800bba1
 800bac4:	0800bba1 	.word	0x0800bba1
 800bac8:	0800bba1 	.word	0x0800bba1
 800bacc:	0800bba1 	.word	0x0800bba1
 800bad0:	0800bba1 	.word	0x0800bba1
 800bad4:	0800bba1 	.word	0x0800bba1
 800bad8:	0800bba1 	.word	0x0800bba1
 800badc:	0800bba1 	.word	0x0800bba1
 800bae0:	0800bba1 	.word	0x0800bba1
 800bae4:	0800bba1 	.word	0x0800bba1
 800bae8:	0800bba1 	.word	0x0800bba1
 800baec:	0800bba1 	.word	0x0800bba1
 800baf0:	0800bba1 	.word	0x0800bba1
 800baf4:	0800bba1 	.word	0x0800bba1
 800baf8:	0800bba1 	.word	0x0800bba1
 800bafc:	0800bba1 	.word	0x0800bba1
 800bb00:	0800bba1 	.word	0x0800bba1
 800bb04:	0800bba1 	.word	0x0800bba1
 800bb08:	0800bba1 	.word	0x0800bba1
 800bb0c:	0800bba1 	.word	0x0800bba1
 800bb10:	0800bba1 	.word	0x0800bba1
 800bb14:	0800bba1 	.word	0x0800bba1
 800bb18:	0800bba1 	.word	0x0800bba1
 800bb1c:	0800bba1 	.word	0x0800bba1
 800bb20:	0800bba1 	.word	0x0800bba1
 800bb24:	0800bba1 	.word	0x0800bba1
 800bb28:	0800bba1 	.word	0x0800bba1
 800bb2c:	0800bba1 	.word	0x0800bba1
 800bb30:	0800bba1 	.word	0x0800bba1
 800bb34:	0800bba1 	.word	0x0800bba1
 800bb38:	0800bb99 	.word	0x0800bb99
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bb3c:	f7fb fad4 	bl	80070e8 <HAL_RCC_GetPCLK1Freq>
 800bb40:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800bb42:	e033      	b.n	800bbac <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bb44:	f7fb fae6 	bl	8007114 <HAL_RCC_GetPCLK2Freq>
 800bb48:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800bb4a:	e02f      	b.n	800bbac <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bb4c:	f107 0314 	add.w	r3, r7, #20
 800bb50:	4618      	mov	r0, r3
 800bb52:	f7fc fc8d 	bl	8008470 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bb56:	69bb      	ldr	r3, [r7, #24]
 800bb58:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bb5a:	e027      	b.n	800bbac <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bb5c:	f107 0308 	add.w	r3, r7, #8
 800bb60:	4618      	mov	r0, r3
 800bb62:	f7fc fdd1 	bl	8008708 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bb6a:	e01f      	b.n	800bbac <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bb6c:	4b2c      	ldr	r3, [pc, #176]	; (800bc20 <UART_SetConfig+0xb50>)
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	f003 0320 	and.w	r3, r3, #32
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d009      	beq.n	800bb8c <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bb78:	4b29      	ldr	r3, [pc, #164]	; (800bc20 <UART_SetConfig+0xb50>)
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	08db      	lsrs	r3, r3, #3
 800bb7e:	f003 0303 	and.w	r3, r3, #3
 800bb82:	4a28      	ldr	r2, [pc, #160]	; (800bc24 <UART_SetConfig+0xb54>)
 800bb84:	fa22 f303 	lsr.w	r3, r2, r3
 800bb88:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bb8a:	e00f      	b.n	800bbac <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 800bb8c:	4b25      	ldr	r3, [pc, #148]	; (800bc24 <UART_SetConfig+0xb54>)
 800bb8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bb90:	e00c      	b.n	800bbac <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bb92:	4b25      	ldr	r3, [pc, #148]	; (800bc28 <UART_SetConfig+0xb58>)
 800bb94:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bb96:	e009      	b.n	800bbac <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bb98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bb9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bb9e:	e005      	b.n	800bbac <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 800bba0:	2300      	movs	r3, #0
 800bba2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800bba4:	2301      	movs	r3, #1
 800bba6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800bbaa:	bf00      	nop
    }

    if (pclk != 0U)
 800bbac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d021      	beq.n	800bbf6 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbb6:	4a1d      	ldr	r2, [pc, #116]	; (800bc2c <UART_SetConfig+0xb5c>)
 800bbb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bbbc:	461a      	mov	r2, r3
 800bbbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbc0:	fbb3 f2f2 	udiv	r2, r3, r2
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	685b      	ldr	r3, [r3, #4]
 800bbc8:	085b      	lsrs	r3, r3, #1
 800bbca:	441a      	add	r2, r3
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	685b      	ldr	r3, [r3, #4]
 800bbd0:	fbb2 f3f3 	udiv	r3, r2, r3
 800bbd4:	b29b      	uxth	r3, r3
 800bbd6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bbd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbda:	2b0f      	cmp	r3, #15
 800bbdc:	d908      	bls.n	800bbf0 <UART_SetConfig+0xb20>
 800bbde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bbe4:	d204      	bcs.n	800bbf0 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bbec:	60da      	str	r2, [r3, #12]
 800bbee:	e002      	b.n	800bbf6 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800bbf0:	2301      	movs	r3, #1
 800bbf2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	2201      	movs	r2, #1
 800bbfa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	2201      	movs	r2, #1
 800bc02:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	2200      	movs	r2, #0
 800bc0a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	2200      	movs	r2, #0
 800bc10:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800bc12:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800bc16:	4618      	mov	r0, r3
 800bc18:	3738      	adds	r7, #56	; 0x38
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800bc20:	58024400 	.word	0x58024400
 800bc24:	03d09000 	.word	0x03d09000
 800bc28:	003d0900 	.word	0x003d0900
 800bc2c:	0801572c 	.word	0x0801572c

0800bc30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bc30:	b480      	push	{r7}
 800bc32:	b083      	sub	sp, #12
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc3c:	f003 0301 	and.w	r3, r3, #1
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d00a      	beq.n	800bc5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	685b      	ldr	r3, [r3, #4]
 800bc4a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	430a      	orrs	r2, r1
 800bc58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc5e:	f003 0302 	and.w	r3, r3, #2
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d00a      	beq.n	800bc7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	685b      	ldr	r3, [r3, #4]
 800bc6c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	430a      	orrs	r2, r1
 800bc7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc80:	f003 0304 	and.w	r3, r3, #4
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d00a      	beq.n	800bc9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	685b      	ldr	r3, [r3, #4]
 800bc8e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	430a      	orrs	r2, r1
 800bc9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bca2:	f003 0308 	and.w	r3, r3, #8
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d00a      	beq.n	800bcc0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	685b      	ldr	r3, [r3, #4]
 800bcb0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	430a      	orrs	r2, r1
 800bcbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcc4:	f003 0310 	and.w	r3, r3, #16
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d00a      	beq.n	800bce2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	689b      	ldr	r3, [r3, #8]
 800bcd2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	430a      	orrs	r2, r1
 800bce0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bce6:	f003 0320 	and.w	r3, r3, #32
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d00a      	beq.n	800bd04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	689b      	ldr	r3, [r3, #8]
 800bcf4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	430a      	orrs	r2, r1
 800bd02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d01a      	beq.n	800bd46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	685b      	ldr	r3, [r3, #4]
 800bd16:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	430a      	orrs	r2, r1
 800bd24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bd2e:	d10a      	bne.n	800bd46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	685b      	ldr	r3, [r3, #4]
 800bd36:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	430a      	orrs	r2, r1
 800bd44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d00a      	beq.n	800bd68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	685b      	ldr	r3, [r3, #4]
 800bd58:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	430a      	orrs	r2, r1
 800bd66:	605a      	str	r2, [r3, #4]
  }
}
 800bd68:	bf00      	nop
 800bd6a:	370c      	adds	r7, #12
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd72:	4770      	bx	lr

0800bd74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b086      	sub	sp, #24
 800bd78:	af02      	add	r7, sp, #8
 800bd7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	2200      	movs	r2, #0
 800bd80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800bd84:	f7f5 fe7e 	bl	8001a84 <HAL_GetTick>
 800bd88:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	f003 0308 	and.w	r3, r3, #8
 800bd94:	2b08      	cmp	r3, #8
 800bd96:	d10e      	bne.n	800bdb6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bd98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bd9c:	9300      	str	r3, [sp, #0]
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	2200      	movs	r2, #0
 800bda2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bda6:	6878      	ldr	r0, [r7, #4]
 800bda8:	f000 f82c 	bl	800be04 <UART_WaitOnFlagUntilTimeout>
 800bdac:	4603      	mov	r3, r0
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d001      	beq.n	800bdb6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bdb2:	2303      	movs	r3, #3
 800bdb4:	e022      	b.n	800bdfc <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	f003 0304 	and.w	r3, r3, #4
 800bdc0:	2b04      	cmp	r3, #4
 800bdc2:	d10e      	bne.n	800bde2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bdc4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bdc8:	9300      	str	r3, [sp, #0]
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	2200      	movs	r2, #0
 800bdce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bdd2:	6878      	ldr	r0, [r7, #4]
 800bdd4:	f000 f816 	bl	800be04 <UART_WaitOnFlagUntilTimeout>
 800bdd8:	4603      	mov	r3, r0
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d001      	beq.n	800bde2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bdde:	2303      	movs	r3, #3
 800bde0:	e00c      	b.n	800bdfc <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	2220      	movs	r2, #32
 800bde6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	2220      	movs	r2, #32
 800bdee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800bdfa:	2300      	movs	r3, #0
}
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	3710      	adds	r7, #16
 800be00:	46bd      	mov	sp, r7
 800be02:	bd80      	pop	{r7, pc}

0800be04 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800be04:	b580      	push	{r7, lr}
 800be06:	b084      	sub	sp, #16
 800be08:	af00      	add	r7, sp, #0
 800be0a:	60f8      	str	r0, [r7, #12]
 800be0c:	60b9      	str	r1, [r7, #8]
 800be0e:	603b      	str	r3, [r7, #0]
 800be10:	4613      	mov	r3, r2
 800be12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800be14:	e062      	b.n	800bedc <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800be16:	69bb      	ldr	r3, [r7, #24]
 800be18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be1c:	d05e      	beq.n	800bedc <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800be1e:	f7f5 fe31 	bl	8001a84 <HAL_GetTick>
 800be22:	4602      	mov	r2, r0
 800be24:	683b      	ldr	r3, [r7, #0]
 800be26:	1ad3      	subs	r3, r2, r3
 800be28:	69ba      	ldr	r2, [r7, #24]
 800be2a:	429a      	cmp	r2, r3
 800be2c:	d302      	bcc.n	800be34 <UART_WaitOnFlagUntilTimeout+0x30>
 800be2e:	69bb      	ldr	r3, [r7, #24]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d11d      	bne.n	800be70 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	681a      	ldr	r2, [r3, #0]
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800be42:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	689a      	ldr	r2, [r3, #8]
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	f022 0201 	bic.w	r2, r2, #1
 800be52:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	2220      	movs	r2, #32
 800be58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	2220      	movs	r2, #32
 800be60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	2200      	movs	r2, #0
 800be68:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800be6c:	2303      	movs	r3, #3
 800be6e:	e045      	b.n	800befc <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	f003 0304 	and.w	r3, r3, #4
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d02e      	beq.n	800bedc <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	69db      	ldr	r3, [r3, #28]
 800be84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800be88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800be8c:	d126      	bne.n	800bedc <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800be96:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	681a      	ldr	r2, [r3, #0]
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800bea6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	689a      	ldr	r2, [r3, #8]
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	f022 0201 	bic.w	r2, r2, #1
 800beb6:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	2220      	movs	r2, #32
 800bebc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	2220      	movs	r2, #32
 800bec4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	2220      	movs	r2, #32
 800becc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	2200      	movs	r2, #0
 800bed4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800bed8:	2303      	movs	r3, #3
 800beda:	e00f      	b.n	800befc <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	69da      	ldr	r2, [r3, #28]
 800bee2:	68bb      	ldr	r3, [r7, #8]
 800bee4:	4013      	ands	r3, r2
 800bee6:	68ba      	ldr	r2, [r7, #8]
 800bee8:	429a      	cmp	r2, r3
 800beea:	bf0c      	ite	eq
 800beec:	2301      	moveq	r3, #1
 800beee:	2300      	movne	r3, #0
 800bef0:	b2db      	uxtb	r3, r3
 800bef2:	461a      	mov	r2, r3
 800bef4:	79fb      	ldrb	r3, [r7, #7]
 800bef6:	429a      	cmp	r2, r3
 800bef8:	d08d      	beq.n	800be16 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800befa:	2300      	movs	r3, #0
}
 800befc:	4618      	mov	r0, r3
 800befe:	3710      	adds	r7, #16
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd80      	pop	{r7, pc}

0800bf04 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bf04:	b480      	push	{r7}
 800bf06:	b085      	sub	sp, #20
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800bf12:	2b01      	cmp	r3, #1
 800bf14:	d101      	bne.n	800bf1a <HAL_UARTEx_DisableFifoMode+0x16>
 800bf16:	2302      	movs	r3, #2
 800bf18:	e027      	b.n	800bf6a <HAL_UARTEx_DisableFifoMode+0x66>
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	2201      	movs	r2, #1
 800bf1e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	2224      	movs	r2, #36	; 0x24
 800bf26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	681a      	ldr	r2, [r3, #0]
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	f022 0201 	bic.w	r2, r2, #1
 800bf40:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800bf48:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	68fa      	ldr	r2, [r7, #12]
 800bf56:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	2220      	movs	r2, #32
 800bf5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2200      	movs	r2, #0
 800bf64:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800bf68:	2300      	movs	r3, #0
}
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	3714      	adds	r7, #20
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf74:	4770      	bx	lr

0800bf76 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bf76:	b580      	push	{r7, lr}
 800bf78:	b084      	sub	sp, #16
 800bf7a:	af00      	add	r7, sp, #0
 800bf7c:	6078      	str	r0, [r7, #4]
 800bf7e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800bf86:	2b01      	cmp	r3, #1
 800bf88:	d101      	bne.n	800bf8e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bf8a:	2302      	movs	r3, #2
 800bf8c:	e02d      	b.n	800bfea <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	2201      	movs	r2, #1
 800bf92:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	2224      	movs	r2, #36	; 0x24
 800bf9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	681a      	ldr	r2, [r3, #0]
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	f022 0201 	bic.w	r2, r2, #1
 800bfb4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	689b      	ldr	r3, [r3, #8]
 800bfbc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	683a      	ldr	r2, [r7, #0]
 800bfc6:	430a      	orrs	r2, r1
 800bfc8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bfca:	6878      	ldr	r0, [r7, #4]
 800bfcc:	f000 f850 	bl	800c070 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	68fa      	ldr	r2, [r7, #12]
 800bfd6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	2220      	movs	r2, #32
 800bfdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800bfe8:	2300      	movs	r3, #0
}
 800bfea:	4618      	mov	r0, r3
 800bfec:	3710      	adds	r7, #16
 800bfee:	46bd      	mov	sp, r7
 800bff0:	bd80      	pop	{r7, pc}

0800bff2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bff2:	b580      	push	{r7, lr}
 800bff4:	b084      	sub	sp, #16
 800bff6:	af00      	add	r7, sp, #0
 800bff8:	6078      	str	r0, [r7, #4]
 800bffa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c002:	2b01      	cmp	r3, #1
 800c004:	d101      	bne.n	800c00a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c006:	2302      	movs	r3, #2
 800c008:	e02d      	b.n	800c066 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	2201      	movs	r2, #1
 800c00e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	2224      	movs	r2, #36	; 0x24
 800c016:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	681a      	ldr	r2, [r3, #0]
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	f022 0201 	bic.w	r2, r2, #1
 800c030:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	689b      	ldr	r3, [r3, #8]
 800c038:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	683a      	ldr	r2, [r7, #0]
 800c042:	430a      	orrs	r2, r1
 800c044:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c046:	6878      	ldr	r0, [r7, #4]
 800c048:	f000 f812 	bl	800c070 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	68fa      	ldr	r2, [r7, #12]
 800c052:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	2220      	movs	r2, #32
 800c058:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	2200      	movs	r2, #0
 800c060:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c064:	2300      	movs	r3, #0
}
 800c066:	4618      	mov	r0, r3
 800c068:	3710      	adds	r7, #16
 800c06a:	46bd      	mov	sp, r7
 800c06c:	bd80      	pop	{r7, pc}
	...

0800c070 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c070:	b480      	push	{r7}
 800c072:	b089      	sub	sp, #36	; 0x24
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800c078:	4a2f      	ldr	r2, [pc, #188]	; (800c138 <UARTEx_SetNbDataToProcess+0xc8>)
 800c07a:	f107 0314 	add.w	r3, r7, #20
 800c07e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c082:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800c086:	4a2d      	ldr	r2, [pc, #180]	; (800c13c <UARTEx_SetNbDataToProcess+0xcc>)
 800c088:	f107 030c 	add.w	r3, r7, #12
 800c08c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c090:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d108      	bne.n	800c0ae <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	2201      	movs	r2, #1
 800c0a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	2201      	movs	r2, #1
 800c0a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c0ac:	e03d      	b.n	800c12a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c0ae:	2310      	movs	r3, #16
 800c0b0:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c0b2:	2310      	movs	r3, #16
 800c0b4:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	689b      	ldr	r3, [r3, #8]
 800c0bc:	0e5b      	lsrs	r3, r3, #25
 800c0be:	b2db      	uxtb	r3, r3
 800c0c0:	f003 0307 	and.w	r3, r3, #7
 800c0c4:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	689b      	ldr	r3, [r3, #8]
 800c0cc:	0f5b      	lsrs	r3, r3, #29
 800c0ce:	b2db      	uxtb	r3, r3
 800c0d0:	f003 0307 	and.w	r3, r3, #7
 800c0d4:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800c0d6:	7fbb      	ldrb	r3, [r7, #30]
 800c0d8:	7f3a      	ldrb	r2, [r7, #28]
 800c0da:	f107 0120 	add.w	r1, r7, #32
 800c0de:	440a      	add	r2, r1
 800c0e0:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800c0e4:	fb02 f303 	mul.w	r3, r2, r3
 800c0e8:	7f3a      	ldrb	r2, [r7, #28]
 800c0ea:	f107 0120 	add.w	r1, r7, #32
 800c0ee:	440a      	add	r2, r1
 800c0f0:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800c0f4:	fb93 f3f2 	sdiv	r3, r3, r2
 800c0f8:	b29a      	uxth	r2, r3
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800c100:	7ffb      	ldrb	r3, [r7, #31]
 800c102:	7f7a      	ldrb	r2, [r7, #29]
 800c104:	f107 0120 	add.w	r1, r7, #32
 800c108:	440a      	add	r2, r1
 800c10a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800c10e:	fb02 f303 	mul.w	r3, r2, r3
 800c112:	7f7a      	ldrb	r2, [r7, #29]
 800c114:	f107 0120 	add.w	r1, r7, #32
 800c118:	440a      	add	r2, r1
 800c11a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800c11e:	fb93 f3f2 	sdiv	r3, r3, r2
 800c122:	b29a      	uxth	r2, r3
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c12a:	bf00      	nop
 800c12c:	3724      	adds	r7, #36	; 0x24
 800c12e:	46bd      	mov	sp, r7
 800c130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c134:	4770      	bx	lr
 800c136:	bf00      	nop
 800c138:	0801566c 	.word	0x0801566c
 800c13c:	08015674 	.word	0x08015674

0800c140 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800c140:	b084      	sub	sp, #16
 800c142:	b480      	push	{r7}
 800c144:	b085      	sub	sp, #20
 800c146:	af00      	add	r7, sp, #0
 800c148:	6078      	str	r0, [r7, #4]
 800c14a:	f107 001c 	add.w	r0, r7, #28
 800c14e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800c152:	2300      	movs	r3, #0
 800c154:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800c156:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800c158:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800c15a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800c15c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800c15e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800c160:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800c162:	431a      	orrs	r2, r3
             Init.ClockDiv
 800c164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800c166:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800c168:	68fa      	ldr	r2, [r7, #12]
 800c16a:	4313      	orrs	r3, r2
 800c16c:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	685a      	ldr	r2, [r3, #4]
 800c172:	4b07      	ldr	r3, [pc, #28]	; (800c190 <SDMMC_Init+0x50>)
 800c174:	4013      	ands	r3, r2
 800c176:	68fa      	ldr	r2, [r7, #12]
 800c178:	431a      	orrs	r2, r3
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800c17e:	2300      	movs	r3, #0
}
 800c180:	4618      	mov	r0, r3
 800c182:	3714      	adds	r7, #20
 800c184:	46bd      	mov	sp, r7
 800c186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18a:	b004      	add	sp, #16
 800c18c:	4770      	bx	lr
 800c18e:	bf00      	nop
 800c190:	ffc02c00 	.word	0xffc02c00

0800c194 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800c194:	b480      	push	{r7}
 800c196:	b083      	sub	sp, #12
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	370c      	adds	r7, #12
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ac:	4770      	bx	lr

0800c1ae <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800c1ae:	b480      	push	{r7}
 800c1b0:	b083      	sub	sp, #12
 800c1b2:	af00      	add	r7, sp, #0
 800c1b4:	6078      	str	r0, [r7, #4]
 800c1b6:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800c1b8:	683b      	ldr	r3, [r7, #0]
 800c1ba:	681a      	ldr	r2, [r3, #0]
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c1c2:	2300      	movs	r3, #0
}
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	370c      	adds	r7, #12
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ce:	4770      	bx	lr

0800c1d0 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800c1d0:	b480      	push	{r7}
 800c1d2:	b083      	sub	sp, #12
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	f043 0203 	orr.w	r2, r3, #3
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800c1e4:	2300      	movs	r3, #0
}
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	370c      	adds	r7, #12
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f0:	4770      	bx	lr

0800c1f2 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800c1f2:	b480      	push	{r7}
 800c1f4:	b083      	sub	sp, #12
 800c1f6:	af00      	add	r7, sp, #0
 800c1f8:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	f003 0303 	and.w	r3, r3, #3
}
 800c202:	4618      	mov	r0, r3
 800c204:	370c      	adds	r7, #12
 800c206:	46bd      	mov	sp, r7
 800c208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20c:	4770      	bx	lr
	...

0800c210 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800c210:	b480      	push	{r7}
 800c212:	b085      	sub	sp, #20
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
 800c218:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c21a:	2300      	movs	r3, #0
 800c21c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800c21e:	683b      	ldr	r3, [r7, #0]
 800c220:	681a      	ldr	r2, [r3, #0]
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c226:	683b      	ldr	r3, [r7, #0]
 800c228:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800c22a:	683b      	ldr	r3, [r7, #0]
 800c22c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c22e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800c230:	683b      	ldr	r3, [r7, #0]
 800c232:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800c234:	431a      	orrs	r2, r3
                       Command->CPSM);
 800c236:	683b      	ldr	r3, [r7, #0]
 800c238:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800c23a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c23c:	68fa      	ldr	r2, [r7, #12]
 800c23e:	4313      	orrs	r3, r2
 800c240:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	68da      	ldr	r2, [r3, #12]
 800c246:	4b06      	ldr	r3, [pc, #24]	; (800c260 <SDMMC_SendCommand+0x50>)
 800c248:	4013      	ands	r3, r2
 800c24a:	68fa      	ldr	r2, [r7, #12]
 800c24c:	431a      	orrs	r2, r3
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c252:	2300      	movs	r3, #0
}
 800c254:	4618      	mov	r0, r3
 800c256:	3714      	adds	r7, #20
 800c258:	46bd      	mov	sp, r7
 800c25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25e:	4770      	bx	lr
 800c260:	fffee0c0 	.word	0xfffee0c0

0800c264 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800c264:	b480      	push	{r7}
 800c266:	b083      	sub	sp, #12
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	691b      	ldr	r3, [r3, #16]
 800c270:	b2db      	uxtb	r3, r3
}
 800c272:	4618      	mov	r0, r3
 800c274:	370c      	adds	r7, #12
 800c276:	46bd      	mov	sp, r7
 800c278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27c:	4770      	bx	lr

0800c27e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800c27e:	b480      	push	{r7}
 800c280:	b085      	sub	sp, #20
 800c282:	af00      	add	r7, sp, #0
 800c284:	6078      	str	r0, [r7, #4]
 800c286:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	3314      	adds	r3, #20
 800c28c:	461a      	mov	r2, r3
 800c28e:	683b      	ldr	r3, [r7, #0]
 800c290:	4413      	add	r3, r2
 800c292:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	681b      	ldr	r3, [r3, #0]
}
 800c298:	4618      	mov	r0, r3
 800c29a:	3714      	adds	r7, #20
 800c29c:	46bd      	mov	sp, r7
 800c29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a2:	4770      	bx	lr

0800c2a4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800c2a4:	b480      	push	{r7}
 800c2a6:	b085      	sub	sp, #20
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
 800c2ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800c2b2:	683b      	ldr	r3, [r7, #0]
 800c2b4:	681a      	ldr	r2, [r3, #0]
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800c2ba:	683b      	ldr	r3, [r7, #0]
 800c2bc:	685a      	ldr	r2, [r3, #4]
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c2c2:	683b      	ldr	r3, [r7, #0]
 800c2c4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800c2c6:	683b      	ldr	r3, [r7, #0]
 800c2c8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c2ca:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800c2cc:	683b      	ldr	r3, [r7, #0]
 800c2ce:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800c2d0:	431a      	orrs	r2, r3
                       Data->DPSM);
 800c2d2:	683b      	ldr	r3, [r7, #0]
 800c2d4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800c2d6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c2d8:	68fa      	ldr	r2, [r7, #12]
 800c2da:	4313      	orrs	r3, r2
 800c2dc:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2e2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	431a      	orrs	r2, r3
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800c2ee:	2300      	movs	r3, #0

}
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	3714      	adds	r7, #20
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fa:	4770      	bx	lr

0800c2fc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b088      	sub	sp, #32
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
 800c304:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800c306:	683b      	ldr	r3, [r7, #0]
 800c308:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800c30a:	2310      	movs	r3, #16
 800c30c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c30e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c312:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c314:	2300      	movs	r3, #0
 800c316:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c318:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c31c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c31e:	f107 0308 	add.w	r3, r7, #8
 800c322:	4619      	mov	r1, r3
 800c324:	6878      	ldr	r0, [r7, #4]
 800c326:	f7ff ff73 	bl	800c210 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800c32a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c32e:	2110      	movs	r1, #16
 800c330:	6878      	ldr	r0, [r7, #4]
 800c332:	f000 faaf 	bl	800c894 <SDMMC_GetCmdResp1>
 800c336:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c338:	69fb      	ldr	r3, [r7, #28]
}
 800c33a:	4618      	mov	r0, r3
 800c33c:	3720      	adds	r7, #32
 800c33e:	46bd      	mov	sp, r7
 800c340:	bd80      	pop	{r7, pc}

0800c342 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800c342:	b580      	push	{r7, lr}
 800c344:	b088      	sub	sp, #32
 800c346:	af00      	add	r7, sp, #0
 800c348:	6078      	str	r0, [r7, #4]
 800c34a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c34c:	683b      	ldr	r3, [r7, #0]
 800c34e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800c350:	2311      	movs	r3, #17
 800c352:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c354:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c358:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c35a:	2300      	movs	r3, #0
 800c35c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c35e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c362:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c364:	f107 0308 	add.w	r3, r7, #8
 800c368:	4619      	mov	r1, r3
 800c36a:	6878      	ldr	r0, [r7, #4]
 800c36c:	f7ff ff50 	bl	800c210 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800c370:	f241 3288 	movw	r2, #5000	; 0x1388
 800c374:	2111      	movs	r1, #17
 800c376:	6878      	ldr	r0, [r7, #4]
 800c378:	f000 fa8c 	bl	800c894 <SDMMC_GetCmdResp1>
 800c37c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c37e:	69fb      	ldr	r3, [r7, #28]
}
 800c380:	4618      	mov	r0, r3
 800c382:	3720      	adds	r7, #32
 800c384:	46bd      	mov	sp, r7
 800c386:	bd80      	pop	{r7, pc}

0800c388 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	b088      	sub	sp, #32
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
 800c390:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c392:	683b      	ldr	r3, [r7, #0]
 800c394:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800c396:	2312      	movs	r3, #18
 800c398:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c39a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c39e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c3a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c3a8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c3aa:	f107 0308 	add.w	r3, r7, #8
 800c3ae:	4619      	mov	r1, r3
 800c3b0:	6878      	ldr	r0, [r7, #4]
 800c3b2:	f7ff ff2d 	bl	800c210 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800c3b6:	f241 3288 	movw	r2, #5000	; 0x1388
 800c3ba:	2112      	movs	r1, #18
 800c3bc:	6878      	ldr	r0, [r7, #4]
 800c3be:	f000 fa69 	bl	800c894 <SDMMC_GetCmdResp1>
 800c3c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c3c4:	69fb      	ldr	r3, [r7, #28]
}
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	3720      	adds	r7, #32
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	bd80      	pop	{r7, pc}

0800c3ce <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800c3ce:	b580      	push	{r7, lr}
 800c3d0:	b088      	sub	sp, #32
 800c3d2:	af00      	add	r7, sp, #0
 800c3d4:	6078      	str	r0, [r7, #4]
 800c3d6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c3d8:	683b      	ldr	r3, [r7, #0]
 800c3da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800c3dc:	2318      	movs	r3, #24
 800c3de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c3e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c3e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c3ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c3ee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c3f0:	f107 0308 	add.w	r3, r7, #8
 800c3f4:	4619      	mov	r1, r3
 800c3f6:	6878      	ldr	r0, [r7, #4]
 800c3f8:	f7ff ff0a 	bl	800c210 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800c3fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800c400:	2118      	movs	r1, #24
 800c402:	6878      	ldr	r0, [r7, #4]
 800c404:	f000 fa46 	bl	800c894 <SDMMC_GetCmdResp1>
 800c408:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c40a:	69fb      	ldr	r3, [r7, #28]
}
 800c40c:	4618      	mov	r0, r3
 800c40e:	3720      	adds	r7, #32
 800c410:	46bd      	mov	sp, r7
 800c412:	bd80      	pop	{r7, pc}

0800c414 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800c414:	b580      	push	{r7, lr}
 800c416:	b088      	sub	sp, #32
 800c418:	af00      	add	r7, sp, #0
 800c41a:	6078      	str	r0, [r7, #4]
 800c41c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c41e:	683b      	ldr	r3, [r7, #0]
 800c420:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800c422:	2319      	movs	r3, #25
 800c424:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c426:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c42a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c42c:	2300      	movs	r3, #0
 800c42e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c430:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c434:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c436:	f107 0308 	add.w	r3, r7, #8
 800c43a:	4619      	mov	r1, r3
 800c43c:	6878      	ldr	r0, [r7, #4]
 800c43e:	f7ff fee7 	bl	800c210 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800c442:	f241 3288 	movw	r2, #5000	; 0x1388
 800c446:	2119      	movs	r1, #25
 800c448:	6878      	ldr	r0, [r7, #4]
 800c44a:	f000 fa23 	bl	800c894 <SDMMC_GetCmdResp1>
 800c44e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c450:	69fb      	ldr	r3, [r7, #28]
}
 800c452:	4618      	mov	r0, r3
 800c454:	3720      	adds	r7, #32
 800c456:	46bd      	mov	sp, r7
 800c458:	bd80      	pop	{r7, pc}
	...

0800c45c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b088      	sub	sp, #32
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800c464:	2300      	movs	r3, #0
 800c466:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800c468:	230c      	movs	r3, #12
 800c46a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c46c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c470:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c472:	2300      	movs	r3, #0
 800c474:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c476:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c47a:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	68db      	ldr	r3, [r3, #12]
 800c480:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	68db      	ldr	r3, [r3, #12]
 800c48c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c494:	f107 0308 	add.w	r3, r7, #8
 800c498:	4619      	mov	r1, r3
 800c49a:	6878      	ldr	r0, [r7, #4]
 800c49c:	f7ff feb8 	bl	800c210 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800c4a0:	4a0b      	ldr	r2, [pc, #44]	; (800c4d0 <SDMMC_CmdStopTransfer+0x74>)
 800c4a2:	210c      	movs	r1, #12
 800c4a4:	6878      	ldr	r0, [r7, #4]
 800c4a6:	f000 f9f5 	bl	800c894 <SDMMC_GetCmdResp1>
 800c4aa:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	68db      	ldr	r3, [r3, #12]
 800c4b0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800c4b8:	69fb      	ldr	r3, [r7, #28]
 800c4ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c4be:	d101      	bne.n	800c4c4 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800c4c4:	69fb      	ldr	r3, [r7, #28]
}
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	3720      	adds	r7, #32
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	bd80      	pop	{r7, pc}
 800c4ce:	bf00      	nop
 800c4d0:	05f5e100 	.word	0x05f5e100

0800c4d4 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b08a      	sub	sp, #40	; 0x28
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	60f8      	str	r0, [r7, #12]
 800c4dc:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800c4e0:	683b      	ldr	r3, [r7, #0]
 800c4e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800c4e4:	2307      	movs	r3, #7
 800c4e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c4e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c4ec:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c4f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c4f6:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c4f8:	f107 0310 	add.w	r3, r7, #16
 800c4fc:	4619      	mov	r1, r3
 800c4fe:	68f8      	ldr	r0, [r7, #12]
 800c500:	f7ff fe86 	bl	800c210 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800c504:	f241 3288 	movw	r2, #5000	; 0x1388
 800c508:	2107      	movs	r1, #7
 800c50a:	68f8      	ldr	r0, [r7, #12]
 800c50c:	f000 f9c2 	bl	800c894 <SDMMC_GetCmdResp1>
 800c510:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800c512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c514:	4618      	mov	r0, r3
 800c516:	3728      	adds	r7, #40	; 0x28
 800c518:	46bd      	mov	sp, r7
 800c51a:	bd80      	pop	{r7, pc}

0800c51c <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b088      	sub	sp, #32
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800c524:	2300      	movs	r3, #0
 800c526:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800c528:	2300      	movs	r3, #0
 800c52a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800c52c:	2300      	movs	r3, #0
 800c52e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c530:	2300      	movs	r3, #0
 800c532:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c534:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c538:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c53a:	f107 0308 	add.w	r3, r7, #8
 800c53e:	4619      	mov	r1, r3
 800c540:	6878      	ldr	r0, [r7, #4]
 800c542:	f7ff fe65 	bl	800c210 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800c546:	6878      	ldr	r0, [r7, #4]
 800c548:	f000 f976 	bl	800c838 <SDMMC_GetCmdError>
 800c54c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c54e:	69fb      	ldr	r3, [r7, #28]
}
 800c550:	4618      	mov	r0, r3
 800c552:	3720      	adds	r7, #32
 800c554:	46bd      	mov	sp, r7
 800c556:	bd80      	pop	{r7, pc}

0800c558 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	b088      	sub	sp, #32
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800c560:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800c564:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c566:	2308      	movs	r3, #8
 800c568:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c56a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c56e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c570:	2300      	movs	r3, #0
 800c572:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c574:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c578:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c57a:	f107 0308 	add.w	r3, r7, #8
 800c57e:	4619      	mov	r1, r3
 800c580:	6878      	ldr	r0, [r7, #4]
 800c582:	f7ff fe45 	bl	800c210 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800c586:	6878      	ldr	r0, [r7, #4]
 800c588:	f000 fb78 	bl	800cc7c <SDMMC_GetCmdResp7>
 800c58c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c58e:	69fb      	ldr	r3, [r7, #28]
}
 800c590:	4618      	mov	r0, r3
 800c592:	3720      	adds	r7, #32
 800c594:	46bd      	mov	sp, r7
 800c596:	bd80      	pop	{r7, pc}

0800c598 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b088      	sub	sp, #32
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
 800c5a0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c5a2:	683b      	ldr	r3, [r7, #0]
 800c5a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800c5a6:	2337      	movs	r3, #55	; 0x37
 800c5a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c5aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c5ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c5b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c5b8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c5ba:	f107 0308 	add.w	r3, r7, #8
 800c5be:	4619      	mov	r1, r3
 800c5c0:	6878      	ldr	r0, [r7, #4]
 800c5c2:	f7ff fe25 	bl	800c210 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800c5c6:	f241 3288 	movw	r2, #5000	; 0x1388
 800c5ca:	2137      	movs	r1, #55	; 0x37
 800c5cc:	6878      	ldr	r0, [r7, #4]
 800c5ce:	f000 f961 	bl	800c894 <SDMMC_GetCmdResp1>
 800c5d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c5d4:	69fb      	ldr	r3, [r7, #28]
}
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	3720      	adds	r7, #32
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	bd80      	pop	{r7, pc}

0800c5de <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c5de:	b580      	push	{r7, lr}
 800c5e0:	b088      	sub	sp, #32
 800c5e2:	af00      	add	r7, sp, #0
 800c5e4:	6078      	str	r0, [r7, #4]
 800c5e6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800c5e8:	683b      	ldr	r3, [r7, #0]
 800c5ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800c5ec:	2329      	movs	r3, #41	; 0x29
 800c5ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c5f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c5f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c5fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c5fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c600:	f107 0308 	add.w	r3, r7, #8
 800c604:	4619      	mov	r1, r3
 800c606:	6878      	ldr	r0, [r7, #4]
 800c608:	f7ff fe02 	bl	800c210 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800c60c:	6878      	ldr	r0, [r7, #4]
 800c60e:	f000 fa7d 	bl	800cb0c <SDMMC_GetCmdResp3>
 800c612:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c614:	69fb      	ldr	r3, [r7, #28]
}
 800c616:	4618      	mov	r0, r3
 800c618:	3720      	adds	r7, #32
 800c61a:	46bd      	mov	sp, r7
 800c61c:	bd80      	pop	{r7, pc}

0800c61e <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800c61e:	b580      	push	{r7, lr}
 800c620:	b088      	sub	sp, #32
 800c622:	af00      	add	r7, sp, #0
 800c624:	6078      	str	r0, [r7, #4]
 800c626:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800c628:	683b      	ldr	r3, [r7, #0]
 800c62a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800c62c:	2306      	movs	r3, #6
 800c62e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c630:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c634:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c636:	2300      	movs	r3, #0
 800c638:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c63a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c63e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c640:	f107 0308 	add.w	r3, r7, #8
 800c644:	4619      	mov	r1, r3
 800c646:	6878      	ldr	r0, [r7, #4]
 800c648:	f7ff fde2 	bl	800c210 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800c64c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c650:	2106      	movs	r1, #6
 800c652:	6878      	ldr	r0, [r7, #4]
 800c654:	f000 f91e 	bl	800c894 <SDMMC_GetCmdResp1>
 800c658:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c65a:	69fb      	ldr	r3, [r7, #28]
}
 800c65c:	4618      	mov	r0, r3
 800c65e:	3720      	adds	r7, #32
 800c660:	46bd      	mov	sp, r7
 800c662:	bd80      	pop	{r7, pc}

0800c664 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800c664:	b580      	push	{r7, lr}
 800c666:	b088      	sub	sp, #32
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800c66c:	2300      	movs	r3, #0
 800c66e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800c670:	2333      	movs	r3, #51	; 0x33
 800c672:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c674:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c678:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c67a:	2300      	movs	r3, #0
 800c67c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c67e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c682:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c684:	f107 0308 	add.w	r3, r7, #8
 800c688:	4619      	mov	r1, r3
 800c68a:	6878      	ldr	r0, [r7, #4]
 800c68c:	f7ff fdc0 	bl	800c210 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800c690:	f241 3288 	movw	r2, #5000	; 0x1388
 800c694:	2133      	movs	r1, #51	; 0x33
 800c696:	6878      	ldr	r0, [r7, #4]
 800c698:	f000 f8fc 	bl	800c894 <SDMMC_GetCmdResp1>
 800c69c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c69e:	69fb      	ldr	r3, [r7, #28]
}
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	3720      	adds	r7, #32
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	bd80      	pop	{r7, pc}

0800c6a8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b088      	sub	sp, #32
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c6b4:	2302      	movs	r3, #2
 800c6b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c6b8:	f44f 7340 	mov.w	r3, #768	; 0x300
 800c6bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c6be:	2300      	movs	r3, #0
 800c6c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c6c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c6c6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c6c8:	f107 0308 	add.w	r3, r7, #8
 800c6cc:	4619      	mov	r1, r3
 800c6ce:	6878      	ldr	r0, [r7, #4]
 800c6d0:	f7ff fd9e 	bl	800c210 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c6d4:	6878      	ldr	r0, [r7, #4]
 800c6d6:	f000 f9cf 	bl	800ca78 <SDMMC_GetCmdResp2>
 800c6da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c6dc:	69fb      	ldr	r3, [r7, #28]
}
 800c6de:	4618      	mov	r0, r3
 800c6e0:	3720      	adds	r7, #32
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	bd80      	pop	{r7, pc}

0800c6e6 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c6e6:	b580      	push	{r7, lr}
 800c6e8:	b088      	sub	sp, #32
 800c6ea:	af00      	add	r7, sp, #0
 800c6ec:	6078      	str	r0, [r7, #4]
 800c6ee:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c6f0:	683b      	ldr	r3, [r7, #0]
 800c6f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c6f4:	2309      	movs	r3, #9
 800c6f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c6f8:	f44f 7340 	mov.w	r3, #768	; 0x300
 800c6fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c6fe:	2300      	movs	r3, #0
 800c700:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c702:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c706:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c708:	f107 0308 	add.w	r3, r7, #8
 800c70c:	4619      	mov	r1, r3
 800c70e:	6878      	ldr	r0, [r7, #4]
 800c710:	f7ff fd7e 	bl	800c210 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c714:	6878      	ldr	r0, [r7, #4]
 800c716:	f000 f9af 	bl	800ca78 <SDMMC_GetCmdResp2>
 800c71a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c71c:	69fb      	ldr	r3, [r7, #28]
}
 800c71e:	4618      	mov	r0, r3
 800c720:	3720      	adds	r7, #32
 800c722:	46bd      	mov	sp, r7
 800c724:	bd80      	pop	{r7, pc}

0800c726 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800c726:	b580      	push	{r7, lr}
 800c728:	b088      	sub	sp, #32
 800c72a:	af00      	add	r7, sp, #0
 800c72c:	6078      	str	r0, [r7, #4]
 800c72e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800c730:	2300      	movs	r3, #0
 800c732:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c734:	2303      	movs	r3, #3
 800c736:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c738:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c73c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c73e:	2300      	movs	r3, #0
 800c740:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c742:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c746:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c748:	f107 0308 	add.w	r3, r7, #8
 800c74c:	4619      	mov	r1, r3
 800c74e:	6878      	ldr	r0, [r7, #4]
 800c750:	f7ff fd5e 	bl	800c210 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800c754:	683a      	ldr	r2, [r7, #0]
 800c756:	2103      	movs	r1, #3
 800c758:	6878      	ldr	r0, [r7, #4]
 800c75a:	f000 fa17 	bl	800cb8c <SDMMC_GetCmdResp6>
 800c75e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c760:	69fb      	ldr	r3, [r7, #28]
}
 800c762:	4618      	mov	r0, r3
 800c764:	3720      	adds	r7, #32
 800c766:	46bd      	mov	sp, r7
 800c768:	bd80      	pop	{r7, pc}

0800c76a <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c76a:	b580      	push	{r7, lr}
 800c76c:	b088      	sub	sp, #32
 800c76e:	af00      	add	r7, sp, #0
 800c770:	6078      	str	r0, [r7, #4]
 800c772:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800c774:	683b      	ldr	r3, [r7, #0]
 800c776:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800c778:	230d      	movs	r3, #13
 800c77a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c77c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c780:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c782:	2300      	movs	r3, #0
 800c784:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c786:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c78a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c78c:	f107 0308 	add.w	r3, r7, #8
 800c790:	4619      	mov	r1, r3
 800c792:	6878      	ldr	r0, [r7, #4]
 800c794:	f7ff fd3c 	bl	800c210 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800c798:	f241 3288 	movw	r2, #5000	; 0x1388
 800c79c:	210d      	movs	r1, #13
 800c79e:	6878      	ldr	r0, [r7, #4]
 800c7a0:	f000 f878 	bl	800c894 <SDMMC_GetCmdResp1>
 800c7a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c7a6:	69fb      	ldr	r3, [r7, #28]
}
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	3720      	adds	r7, #32
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	bd80      	pop	{r7, pc}

0800c7b0 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b088      	sub	sp, #32
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800c7bc:	230d      	movs	r3, #13
 800c7be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c7c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c7c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c7ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c7ce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c7d0:	f107 0308 	add.w	r3, r7, #8
 800c7d4:	4619      	mov	r1, r3
 800c7d6:	6878      	ldr	r0, [r7, #4]
 800c7d8:	f7ff fd1a 	bl	800c210 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800c7dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800c7e0:	210d      	movs	r1, #13
 800c7e2:	6878      	ldr	r0, [r7, #4]
 800c7e4:	f000 f856 	bl	800c894 <SDMMC_GetCmdResp1>
 800c7e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c7ea:	69fb      	ldr	r3, [r7, #28]
}
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	3720      	adds	r7, #32
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	bd80      	pop	{r7, pc}

0800c7f4 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b088      	sub	sp, #32
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800c800:	230b      	movs	r3, #11
 800c802:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c804:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c808:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c80a:	2300      	movs	r3, #0
 800c80c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c80e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c812:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c814:	f107 0308 	add.w	r3, r7, #8
 800c818:	4619      	mov	r1, r3
 800c81a:	6878      	ldr	r0, [r7, #4]
 800c81c:	f7ff fcf8 	bl	800c210 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800c820:	f241 3288 	movw	r2, #5000	; 0x1388
 800c824:	210b      	movs	r1, #11
 800c826:	6878      	ldr	r0, [r7, #4]
 800c828:	f000 f834 	bl	800c894 <SDMMC_GetCmdResp1>
 800c82c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c82e:	69fb      	ldr	r3, [r7, #28]
}
 800c830:	4618      	mov	r0, r3
 800c832:	3720      	adds	r7, #32
 800c834:	46bd      	mov	sp, r7
 800c836:	bd80      	pop	{r7, pc}

0800c838 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800c838:	b480      	push	{r7}
 800c83a:	b085      	sub	sp, #20
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c840:	4b11      	ldr	r3, [pc, #68]	; (800c888 <SDMMC_GetCmdError+0x50>)
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	4a11      	ldr	r2, [pc, #68]	; (800c88c <SDMMC_GetCmdError+0x54>)
 800c846:	fba2 2303 	umull	r2, r3, r2, r3
 800c84a:	0a5b      	lsrs	r3, r3, #9
 800c84c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c850:	fb02 f303 	mul.w	r3, r2, r3
 800c854:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	1e5a      	subs	r2, r3, #1
 800c85a:	60fa      	str	r2, [r7, #12]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d102      	bne.n	800c866 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c860:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c864:	e009      	b.n	800c87a <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c86a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d0f1      	beq.n	800c856 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	4a06      	ldr	r2, [pc, #24]	; (800c890 <SDMMC_GetCmdError+0x58>)
 800c876:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800c878:	2300      	movs	r3, #0
}
 800c87a:	4618      	mov	r0, r3
 800c87c:	3714      	adds	r7, #20
 800c87e:	46bd      	mov	sp, r7
 800c880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c884:	4770      	bx	lr
 800c886:	bf00      	nop
 800c888:	24000000 	.word	0x24000000
 800c88c:	10624dd3 	.word	0x10624dd3
 800c890:	002000c5 	.word	0x002000c5

0800c894 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c894:	b580      	push	{r7, lr}
 800c896:	b088      	sub	sp, #32
 800c898:	af00      	add	r7, sp, #0
 800c89a:	60f8      	str	r0, [r7, #12]
 800c89c:	460b      	mov	r3, r1
 800c89e:	607a      	str	r2, [r7, #4]
 800c8a0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c8a2:	4b70      	ldr	r3, [pc, #448]	; (800ca64 <SDMMC_GetCmdResp1+0x1d0>)
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	4a70      	ldr	r2, [pc, #448]	; (800ca68 <SDMMC_GetCmdResp1+0x1d4>)
 800c8a8:	fba2 2303 	umull	r2, r3, r2, r3
 800c8ac:	0a5a      	lsrs	r2, r3, #9
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	fb02 f303 	mul.w	r3, r2, r3
 800c8b4:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800c8b6:	69fb      	ldr	r3, [r7, #28]
 800c8b8:	1e5a      	subs	r2, r3, #1
 800c8ba:	61fa      	str	r2, [r7, #28]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d102      	bne.n	800c8c6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c8c0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c8c4:	e0c9      	b.n	800ca5a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8ca:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800c8cc:	69ba      	ldr	r2, [r7, #24]
 800c8ce:	4b67      	ldr	r3, [pc, #412]	; (800ca6c <SDMMC_GetCmdResp1+0x1d8>)
 800c8d0:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d0ef      	beq.n	800c8b6 <SDMMC_GetCmdResp1+0x22>
 800c8d6:	69bb      	ldr	r3, [r7, #24]
 800c8d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d1ea      	bne.n	800c8b6 <SDMMC_GetCmdResp1+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8e4:	f003 0304 	and.w	r3, r3, #4
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d004      	beq.n	800c8f6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	2204      	movs	r2, #4
 800c8f0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c8f2:	2304      	movs	r3, #4
 800c8f4:	e0b1      	b.n	800ca5a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8fa:	f003 0301 	and.w	r3, r3, #1
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d004      	beq.n	800c90c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	2201      	movs	r2, #1
 800c906:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c908:	2301      	movs	r3, #1
 800c90a:	e0a6      	b.n	800ca5a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	4a58      	ldr	r2, [pc, #352]	; (800ca70 <SDMMC_GetCmdResp1+0x1dc>)
 800c910:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c912:	68f8      	ldr	r0, [r7, #12]
 800c914:	f7ff fca6 	bl	800c264 <SDMMC_GetCommandResponse>
 800c918:	4603      	mov	r3, r0
 800c91a:	461a      	mov	r2, r3
 800c91c:	7afb      	ldrb	r3, [r7, #11]
 800c91e:	4293      	cmp	r3, r2
 800c920:	d001      	beq.n	800c926 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c922:	2301      	movs	r3, #1
 800c924:	e099      	b.n	800ca5a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c926:	2100      	movs	r1, #0
 800c928:	68f8      	ldr	r0, [r7, #12]
 800c92a:	f7ff fca8 	bl	800c27e <SDMMC_GetResponse>
 800c92e:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c930:	697a      	ldr	r2, [r7, #20]
 800c932:	4b50      	ldr	r3, [pc, #320]	; (800ca74 <SDMMC_GetCmdResp1+0x1e0>)
 800c934:	4013      	ands	r3, r2
 800c936:	2b00      	cmp	r3, #0
 800c938:	d101      	bne.n	800c93e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800c93a:	2300      	movs	r3, #0
 800c93c:	e08d      	b.n	800ca5a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c93e:	697b      	ldr	r3, [r7, #20]
 800c940:	2b00      	cmp	r3, #0
 800c942:	da02      	bge.n	800c94a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c944:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c948:	e087      	b.n	800ca5a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c94a:	697b      	ldr	r3, [r7, #20]
 800c94c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c950:	2b00      	cmp	r3, #0
 800c952:	d001      	beq.n	800c958 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c954:	2340      	movs	r3, #64	; 0x40
 800c956:	e080      	b.n	800ca5a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c958:	697b      	ldr	r3, [r7, #20]
 800c95a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d001      	beq.n	800c966 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c962:	2380      	movs	r3, #128	; 0x80
 800c964:	e079      	b.n	800ca5a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c966:	697b      	ldr	r3, [r7, #20]
 800c968:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d002      	beq.n	800c976 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c970:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c974:	e071      	b.n	800ca5a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c976:	697b      	ldr	r3, [r7, #20]
 800c978:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d002      	beq.n	800c986 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c980:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c984:	e069      	b.n	800ca5a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c986:	697b      	ldr	r3, [r7, #20]
 800c988:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d002      	beq.n	800c996 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c990:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c994:	e061      	b.n	800ca5a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c996:	697b      	ldr	r3, [r7, #20]
 800c998:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d002      	beq.n	800c9a6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c9a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c9a4:	e059      	b.n	800ca5a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c9a6:	697b      	ldr	r3, [r7, #20]
 800c9a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d002      	beq.n	800c9b6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c9b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c9b4:	e051      	b.n	800ca5a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c9b6:	697b      	ldr	r3, [r7, #20]
 800c9b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d002      	beq.n	800c9c6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c9c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c9c4:	e049      	b.n	800ca5a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c9c6:	697b      	ldr	r3, [r7, #20]
 800c9c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d002      	beq.n	800c9d6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c9d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c9d4:	e041      	b.n	800ca5a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c9d6:	697b      	ldr	r3, [r7, #20]
 800c9d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d002      	beq.n	800c9e6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800c9e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c9e4:	e039      	b.n	800ca5a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c9e6:	697b      	ldr	r3, [r7, #20]
 800c9e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d002      	beq.n	800c9f6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c9f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c9f4:	e031      	b.n	800ca5a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c9f6:	697b      	ldr	r3, [r7, #20]
 800c9f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d002      	beq.n	800ca06 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ca00:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ca04:	e029      	b.n	800ca5a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800ca06:	697b      	ldr	r3, [r7, #20]
 800ca08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d002      	beq.n	800ca16 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800ca10:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ca14:	e021      	b.n	800ca5a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ca16:	697b      	ldr	r3, [r7, #20]
 800ca18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d002      	beq.n	800ca26 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800ca20:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ca24:	e019      	b.n	800ca5a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ca26:	697b      	ldr	r3, [r7, #20]
 800ca28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d002      	beq.n	800ca36 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800ca30:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ca34:	e011      	b.n	800ca5a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800ca36:	697b      	ldr	r3, [r7, #20]
 800ca38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d002      	beq.n	800ca46 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800ca40:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ca44:	e009      	b.n	800ca5a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800ca46:	697b      	ldr	r3, [r7, #20]
 800ca48:	f003 0308 	and.w	r3, r3, #8
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d002      	beq.n	800ca56 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800ca50:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ca54:	e001      	b.n	800ca5a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ca56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	3720      	adds	r7, #32
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	bd80      	pop	{r7, pc}
 800ca62:	bf00      	nop
 800ca64:	24000000 	.word	0x24000000
 800ca68:	10624dd3 	.word	0x10624dd3
 800ca6c:	00200045 	.word	0x00200045
 800ca70:	002000c5 	.word	0x002000c5
 800ca74:	fdffe008 	.word	0xfdffe008

0800ca78 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800ca78:	b480      	push	{r7}
 800ca7a:	b085      	sub	sp, #20
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ca80:	4b1f      	ldr	r3, [pc, #124]	; (800cb00 <SDMMC_GetCmdResp2+0x88>)
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	4a1f      	ldr	r2, [pc, #124]	; (800cb04 <SDMMC_GetCmdResp2+0x8c>)
 800ca86:	fba2 2303 	umull	r2, r3, r2, r3
 800ca8a:	0a5b      	lsrs	r3, r3, #9
 800ca8c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca90:	fb02 f303 	mul.w	r3, r2, r3
 800ca94:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	1e5a      	subs	r2, r3, #1
 800ca9a:	60fa      	str	r2, [r7, #12]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d102      	bne.n	800caa6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800caa0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800caa4:	e026      	b.n	800caf4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800caaa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800caac:	68bb      	ldr	r3, [r7, #8]
 800caae:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d0ef      	beq.n	800ca96 <SDMMC_GetCmdResp2+0x1e>
 800cab6:	68bb      	ldr	r3, [r7, #8]
 800cab8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d1ea      	bne.n	800ca96 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cac4:	f003 0304 	and.w	r3, r3, #4
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d004      	beq.n	800cad6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	2204      	movs	r2, #4
 800cad0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cad2:	2304      	movs	r3, #4
 800cad4:	e00e      	b.n	800caf4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cada:	f003 0301 	and.w	r3, r3, #1
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d004      	beq.n	800caec <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	2201      	movs	r2, #1
 800cae6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cae8:	2301      	movs	r3, #1
 800caea:	e003      	b.n	800caf4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	4a06      	ldr	r2, [pc, #24]	; (800cb08 <SDMMC_GetCmdResp2+0x90>)
 800caf0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800caf2:	2300      	movs	r3, #0
}
 800caf4:	4618      	mov	r0, r3
 800caf6:	3714      	adds	r7, #20
 800caf8:	46bd      	mov	sp, r7
 800cafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafe:	4770      	bx	lr
 800cb00:	24000000 	.word	0x24000000
 800cb04:	10624dd3 	.word	0x10624dd3
 800cb08:	002000c5 	.word	0x002000c5

0800cb0c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800cb0c:	b480      	push	{r7}
 800cb0e:	b085      	sub	sp, #20
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cb14:	4b1a      	ldr	r3, [pc, #104]	; (800cb80 <SDMMC_GetCmdResp3+0x74>)
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	4a1a      	ldr	r2, [pc, #104]	; (800cb84 <SDMMC_GetCmdResp3+0x78>)
 800cb1a:	fba2 2303 	umull	r2, r3, r2, r3
 800cb1e:	0a5b      	lsrs	r3, r3, #9
 800cb20:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb24:	fb02 f303 	mul.w	r3, r2, r3
 800cb28:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	1e5a      	subs	r2, r3, #1
 800cb2e:	60fa      	str	r2, [r7, #12]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d102      	bne.n	800cb3a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cb34:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cb38:	e01b      	b.n	800cb72 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb3e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cb40:	68bb      	ldr	r3, [r7, #8]
 800cb42:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d0ef      	beq.n	800cb2a <SDMMC_GetCmdResp3+0x1e>
 800cb4a:	68bb      	ldr	r3, [r7, #8]
 800cb4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d1ea      	bne.n	800cb2a <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb58:	f003 0304 	and.w	r3, r3, #4
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d004      	beq.n	800cb6a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	2204      	movs	r2, #4
 800cb64:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cb66:	2304      	movs	r3, #4
 800cb68:	e003      	b.n	800cb72 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	4a06      	ldr	r2, [pc, #24]	; (800cb88 <SDMMC_GetCmdResp3+0x7c>)
 800cb6e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800cb70:	2300      	movs	r3, #0
}
 800cb72:	4618      	mov	r0, r3
 800cb74:	3714      	adds	r7, #20
 800cb76:	46bd      	mov	sp, r7
 800cb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7c:	4770      	bx	lr
 800cb7e:	bf00      	nop
 800cb80:	24000000 	.word	0x24000000
 800cb84:	10624dd3 	.word	0x10624dd3
 800cb88:	002000c5 	.word	0x002000c5

0800cb8c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	b088      	sub	sp, #32
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	60f8      	str	r0, [r7, #12]
 800cb94:	460b      	mov	r3, r1
 800cb96:	607a      	str	r2, [r7, #4]
 800cb98:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cb9a:	4b35      	ldr	r3, [pc, #212]	; (800cc70 <SDMMC_GetCmdResp6+0xe4>)
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	4a35      	ldr	r2, [pc, #212]	; (800cc74 <SDMMC_GetCmdResp6+0xe8>)
 800cba0:	fba2 2303 	umull	r2, r3, r2, r3
 800cba4:	0a5b      	lsrs	r3, r3, #9
 800cba6:	f241 3288 	movw	r2, #5000	; 0x1388
 800cbaa:	fb02 f303 	mul.w	r3, r2, r3
 800cbae:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800cbb0:	69fb      	ldr	r3, [r7, #28]
 800cbb2:	1e5a      	subs	r2, r3, #1
 800cbb4:	61fa      	str	r2, [r7, #28]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d102      	bne.n	800cbc0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cbba:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cbbe:	e052      	b.n	800cc66 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbc4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cbc6:	69bb      	ldr	r3, [r7, #24]
 800cbc8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d0ef      	beq.n	800cbb0 <SDMMC_GetCmdResp6+0x24>
 800cbd0:	69bb      	ldr	r3, [r7, #24]
 800cbd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d1ea      	bne.n	800cbb0 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbde:	f003 0304 	and.w	r3, r3, #4
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d004      	beq.n	800cbf0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	2204      	movs	r2, #4
 800cbea:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cbec:	2304      	movs	r3, #4
 800cbee:	e03a      	b.n	800cc66 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbf4:	f003 0301 	and.w	r3, r3, #1
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d004      	beq.n	800cc06 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	2201      	movs	r2, #1
 800cc00:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cc02:	2301      	movs	r3, #1
 800cc04:	e02f      	b.n	800cc66 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800cc06:	68f8      	ldr	r0, [r7, #12]
 800cc08:	f7ff fb2c 	bl	800c264 <SDMMC_GetCommandResponse>
 800cc0c:	4603      	mov	r3, r0
 800cc0e:	461a      	mov	r2, r3
 800cc10:	7afb      	ldrb	r3, [r7, #11]
 800cc12:	4293      	cmp	r3, r2
 800cc14:	d001      	beq.n	800cc1a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cc16:	2301      	movs	r3, #1
 800cc18:	e025      	b.n	800cc66 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	4a16      	ldr	r2, [pc, #88]	; (800cc78 <SDMMC_GetCmdResp6+0xec>)
 800cc1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800cc20:	2100      	movs	r1, #0
 800cc22:	68f8      	ldr	r0, [r7, #12]
 800cc24:	f7ff fb2b 	bl	800c27e <SDMMC_GetResponse>
 800cc28:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800cc2a:	697b      	ldr	r3, [r7, #20]
 800cc2c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d106      	bne.n	800cc42 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800cc34:	697b      	ldr	r3, [r7, #20]
 800cc36:	0c1b      	lsrs	r3, r3, #16
 800cc38:	b29a      	uxth	r2, r3
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800cc3e:	2300      	movs	r3, #0
 800cc40:	e011      	b.n	800cc66 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800cc42:	697b      	ldr	r3, [r7, #20]
 800cc44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d002      	beq.n	800cc52 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cc4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cc50:	e009      	b.n	800cc66 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800cc52:	697b      	ldr	r3, [r7, #20]
 800cc54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d002      	beq.n	800cc62 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800cc5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cc60:	e001      	b.n	800cc66 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800cc62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800cc66:	4618      	mov	r0, r3
 800cc68:	3720      	adds	r7, #32
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	bd80      	pop	{r7, pc}
 800cc6e:	bf00      	nop
 800cc70:	24000000 	.word	0x24000000
 800cc74:	10624dd3 	.word	0x10624dd3
 800cc78:	002000c5 	.word	0x002000c5

0800cc7c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800cc7c:	b480      	push	{r7}
 800cc7e:	b085      	sub	sp, #20
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cc84:	4b22      	ldr	r3, [pc, #136]	; (800cd10 <SDMMC_GetCmdResp7+0x94>)
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	4a22      	ldr	r2, [pc, #136]	; (800cd14 <SDMMC_GetCmdResp7+0x98>)
 800cc8a:	fba2 2303 	umull	r2, r3, r2, r3
 800cc8e:	0a5b      	lsrs	r3, r3, #9
 800cc90:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc94:	fb02 f303 	mul.w	r3, r2, r3
 800cc98:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	1e5a      	subs	r2, r3, #1
 800cc9e:	60fa      	str	r2, [r7, #12]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d102      	bne.n	800ccaa <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cca4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cca8:	e02c      	b.n	800cd04 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ccae:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ccb0:	68bb      	ldr	r3, [r7, #8]
 800ccb2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d0ef      	beq.n	800cc9a <SDMMC_GetCmdResp7+0x1e>
 800ccba:	68bb      	ldr	r3, [r7, #8]
 800ccbc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d1ea      	bne.n	800cc9a <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ccc8:	f003 0304 	and.w	r3, r3, #4
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d004      	beq.n	800ccda <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	2204      	movs	r2, #4
 800ccd4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ccd6:	2304      	movs	r3, #4
 800ccd8:	e014      	b.n	800cd04 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ccde:	f003 0301 	and.w	r3, r3, #1
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d004      	beq.n	800ccf0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	2201      	movs	r2, #1
 800ccea:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ccec:	2301      	movs	r3, #1
 800ccee:	e009      	b.n	800cd04 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ccf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d002      	beq.n	800cd02 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	2240      	movs	r2, #64	; 0x40
 800cd00:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800cd02:	2300      	movs	r3, #0

}
 800cd04:	4618      	mov	r0, r3
 800cd06:	3714      	adds	r7, #20
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0e:	4770      	bx	lr
 800cd10:	24000000 	.word	0x24000000
 800cd14:	10624dd3 	.word	0x10624dd3

0800cd18 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cd18:	b084      	sub	sp, #16
 800cd1a:	b580      	push	{r7, lr}
 800cd1c:	b084      	sub	sp, #16
 800cd1e:	af00      	add	r7, sp, #0
 800cd20:	6078      	str	r0, [r7, #4]
 800cd22:	f107 001c 	add.w	r0, r7, #28
 800cd26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800cd2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd2c:	2b01      	cmp	r3, #1
 800cd2e:	d120      	bne.n	800cd72 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd34:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	68da      	ldr	r2, [r3, #12]
 800cd40:	4b25      	ldr	r3, [pc, #148]	; (800cdd8 <USB_CoreInit+0xc0>)
 800cd42:	4013      	ands	r3, r2
 800cd44:	687a      	ldr	r2, [r7, #4]
 800cd46:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	68db      	ldr	r3, [r3, #12]
 800cd4c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800cd54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd56:	2b01      	cmp	r3, #1
 800cd58:	d105      	bne.n	800cd66 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	68db      	ldr	r3, [r3, #12]
 800cd5e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800cd66:	6878      	ldr	r0, [r7, #4]
 800cd68:	f001 fabe 	bl	800e2e8 <USB_CoreReset>
 800cd6c:	4603      	mov	r3, r0
 800cd6e:	73fb      	strb	r3, [r7, #15]
 800cd70:	e01a      	b.n	800cda8 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	68db      	ldr	r3, [r3, #12]
 800cd76:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800cd7e:	6878      	ldr	r0, [r7, #4]
 800cd80:	f001 fab2 	bl	800e2e8 <USB_CoreReset>
 800cd84:	4603      	mov	r3, r0
 800cd86:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800cd88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d106      	bne.n	800cd9c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd92:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	639a      	str	r2, [r3, #56]	; 0x38
 800cd9a:	e005      	b.n	800cda8 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cda0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800cda8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdaa:	2b01      	cmp	r3, #1
 800cdac:	d10b      	bne.n	800cdc6 <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	689b      	ldr	r3, [r3, #8]
 800cdb2:	f043 0206 	orr.w	r2, r3, #6
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	689b      	ldr	r3, [r3, #8]
 800cdbe:	f043 0220 	orr.w	r2, r3, #32
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800cdc6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdc8:	4618      	mov	r0, r3
 800cdca:	3710      	adds	r7, #16
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cdd2:	b004      	add	sp, #16
 800cdd4:	4770      	bx	lr
 800cdd6:	bf00      	nop
 800cdd8:	ffbdffbf 	.word	0xffbdffbf

0800cddc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800cddc:	b480      	push	{r7}
 800cdde:	b087      	sub	sp, #28
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	60f8      	str	r0, [r7, #12]
 800cde4:	60b9      	str	r1, [r7, #8]
 800cde6:	4613      	mov	r3, r2
 800cde8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800cdea:	79fb      	ldrb	r3, [r7, #7]
 800cdec:	2b02      	cmp	r3, #2
 800cdee:	d165      	bne.n	800cebc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800cdf0:	68bb      	ldr	r3, [r7, #8]
 800cdf2:	4a41      	ldr	r2, [pc, #260]	; (800cef8 <USB_SetTurnaroundTime+0x11c>)
 800cdf4:	4293      	cmp	r3, r2
 800cdf6:	d906      	bls.n	800ce06 <USB_SetTurnaroundTime+0x2a>
 800cdf8:	68bb      	ldr	r3, [r7, #8]
 800cdfa:	4a40      	ldr	r2, [pc, #256]	; (800cefc <USB_SetTurnaroundTime+0x120>)
 800cdfc:	4293      	cmp	r3, r2
 800cdfe:	d802      	bhi.n	800ce06 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800ce00:	230f      	movs	r3, #15
 800ce02:	617b      	str	r3, [r7, #20]
 800ce04:	e062      	b.n	800cecc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800ce06:	68bb      	ldr	r3, [r7, #8]
 800ce08:	4a3c      	ldr	r2, [pc, #240]	; (800cefc <USB_SetTurnaroundTime+0x120>)
 800ce0a:	4293      	cmp	r3, r2
 800ce0c:	d906      	bls.n	800ce1c <USB_SetTurnaroundTime+0x40>
 800ce0e:	68bb      	ldr	r3, [r7, #8]
 800ce10:	4a3b      	ldr	r2, [pc, #236]	; (800cf00 <USB_SetTurnaroundTime+0x124>)
 800ce12:	4293      	cmp	r3, r2
 800ce14:	d802      	bhi.n	800ce1c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800ce16:	230e      	movs	r3, #14
 800ce18:	617b      	str	r3, [r7, #20]
 800ce1a:	e057      	b.n	800cecc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800ce1c:	68bb      	ldr	r3, [r7, #8]
 800ce1e:	4a38      	ldr	r2, [pc, #224]	; (800cf00 <USB_SetTurnaroundTime+0x124>)
 800ce20:	4293      	cmp	r3, r2
 800ce22:	d906      	bls.n	800ce32 <USB_SetTurnaroundTime+0x56>
 800ce24:	68bb      	ldr	r3, [r7, #8]
 800ce26:	4a37      	ldr	r2, [pc, #220]	; (800cf04 <USB_SetTurnaroundTime+0x128>)
 800ce28:	4293      	cmp	r3, r2
 800ce2a:	d802      	bhi.n	800ce32 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800ce2c:	230d      	movs	r3, #13
 800ce2e:	617b      	str	r3, [r7, #20]
 800ce30:	e04c      	b.n	800cecc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800ce32:	68bb      	ldr	r3, [r7, #8]
 800ce34:	4a33      	ldr	r2, [pc, #204]	; (800cf04 <USB_SetTurnaroundTime+0x128>)
 800ce36:	4293      	cmp	r3, r2
 800ce38:	d906      	bls.n	800ce48 <USB_SetTurnaroundTime+0x6c>
 800ce3a:	68bb      	ldr	r3, [r7, #8]
 800ce3c:	4a32      	ldr	r2, [pc, #200]	; (800cf08 <USB_SetTurnaroundTime+0x12c>)
 800ce3e:	4293      	cmp	r3, r2
 800ce40:	d802      	bhi.n	800ce48 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800ce42:	230c      	movs	r3, #12
 800ce44:	617b      	str	r3, [r7, #20]
 800ce46:	e041      	b.n	800cecc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800ce48:	68bb      	ldr	r3, [r7, #8]
 800ce4a:	4a2f      	ldr	r2, [pc, #188]	; (800cf08 <USB_SetTurnaroundTime+0x12c>)
 800ce4c:	4293      	cmp	r3, r2
 800ce4e:	d906      	bls.n	800ce5e <USB_SetTurnaroundTime+0x82>
 800ce50:	68bb      	ldr	r3, [r7, #8]
 800ce52:	4a2e      	ldr	r2, [pc, #184]	; (800cf0c <USB_SetTurnaroundTime+0x130>)
 800ce54:	4293      	cmp	r3, r2
 800ce56:	d802      	bhi.n	800ce5e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800ce58:	230b      	movs	r3, #11
 800ce5a:	617b      	str	r3, [r7, #20]
 800ce5c:	e036      	b.n	800cecc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800ce5e:	68bb      	ldr	r3, [r7, #8]
 800ce60:	4a2a      	ldr	r2, [pc, #168]	; (800cf0c <USB_SetTurnaroundTime+0x130>)
 800ce62:	4293      	cmp	r3, r2
 800ce64:	d906      	bls.n	800ce74 <USB_SetTurnaroundTime+0x98>
 800ce66:	68bb      	ldr	r3, [r7, #8]
 800ce68:	4a29      	ldr	r2, [pc, #164]	; (800cf10 <USB_SetTurnaroundTime+0x134>)
 800ce6a:	4293      	cmp	r3, r2
 800ce6c:	d802      	bhi.n	800ce74 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800ce6e:	230a      	movs	r3, #10
 800ce70:	617b      	str	r3, [r7, #20]
 800ce72:	e02b      	b.n	800cecc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800ce74:	68bb      	ldr	r3, [r7, #8]
 800ce76:	4a26      	ldr	r2, [pc, #152]	; (800cf10 <USB_SetTurnaroundTime+0x134>)
 800ce78:	4293      	cmp	r3, r2
 800ce7a:	d906      	bls.n	800ce8a <USB_SetTurnaroundTime+0xae>
 800ce7c:	68bb      	ldr	r3, [r7, #8]
 800ce7e:	4a25      	ldr	r2, [pc, #148]	; (800cf14 <USB_SetTurnaroundTime+0x138>)
 800ce80:	4293      	cmp	r3, r2
 800ce82:	d802      	bhi.n	800ce8a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800ce84:	2309      	movs	r3, #9
 800ce86:	617b      	str	r3, [r7, #20]
 800ce88:	e020      	b.n	800cecc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800ce8a:	68bb      	ldr	r3, [r7, #8]
 800ce8c:	4a21      	ldr	r2, [pc, #132]	; (800cf14 <USB_SetTurnaroundTime+0x138>)
 800ce8e:	4293      	cmp	r3, r2
 800ce90:	d906      	bls.n	800cea0 <USB_SetTurnaroundTime+0xc4>
 800ce92:	68bb      	ldr	r3, [r7, #8]
 800ce94:	4a20      	ldr	r2, [pc, #128]	; (800cf18 <USB_SetTurnaroundTime+0x13c>)
 800ce96:	4293      	cmp	r3, r2
 800ce98:	d802      	bhi.n	800cea0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800ce9a:	2308      	movs	r3, #8
 800ce9c:	617b      	str	r3, [r7, #20]
 800ce9e:	e015      	b.n	800cecc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800cea0:	68bb      	ldr	r3, [r7, #8]
 800cea2:	4a1d      	ldr	r2, [pc, #116]	; (800cf18 <USB_SetTurnaroundTime+0x13c>)
 800cea4:	4293      	cmp	r3, r2
 800cea6:	d906      	bls.n	800ceb6 <USB_SetTurnaroundTime+0xda>
 800cea8:	68bb      	ldr	r3, [r7, #8]
 800ceaa:	4a1c      	ldr	r2, [pc, #112]	; (800cf1c <USB_SetTurnaroundTime+0x140>)
 800ceac:	4293      	cmp	r3, r2
 800ceae:	d802      	bhi.n	800ceb6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800ceb0:	2307      	movs	r3, #7
 800ceb2:	617b      	str	r3, [r7, #20]
 800ceb4:	e00a      	b.n	800cecc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800ceb6:	2306      	movs	r3, #6
 800ceb8:	617b      	str	r3, [r7, #20]
 800ceba:	e007      	b.n	800cecc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800cebc:	79fb      	ldrb	r3, [r7, #7]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d102      	bne.n	800cec8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800cec2:	2309      	movs	r3, #9
 800cec4:	617b      	str	r3, [r7, #20]
 800cec6:	e001      	b.n	800cecc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800cec8:	2309      	movs	r3, #9
 800ceca:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	68db      	ldr	r3, [r3, #12]
 800ced0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	68da      	ldr	r2, [r3, #12]
 800cedc:	697b      	ldr	r3, [r7, #20]
 800cede:	029b      	lsls	r3, r3, #10
 800cee0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800cee4:	431a      	orrs	r2, r3
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ceea:	2300      	movs	r3, #0
}
 800ceec:	4618      	mov	r0, r3
 800ceee:	371c      	adds	r7, #28
 800cef0:	46bd      	mov	sp, r7
 800cef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef6:	4770      	bx	lr
 800cef8:	00d8acbf 	.word	0x00d8acbf
 800cefc:	00e4e1bf 	.word	0x00e4e1bf
 800cf00:	00f423ff 	.word	0x00f423ff
 800cf04:	0106737f 	.word	0x0106737f
 800cf08:	011a499f 	.word	0x011a499f
 800cf0c:	01312cff 	.word	0x01312cff
 800cf10:	014ca43f 	.word	0x014ca43f
 800cf14:	016e35ff 	.word	0x016e35ff
 800cf18:	01a6ab1f 	.word	0x01a6ab1f
 800cf1c:	01e847ff 	.word	0x01e847ff

0800cf20 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cf20:	b480      	push	{r7}
 800cf22:	b083      	sub	sp, #12
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	689b      	ldr	r3, [r3, #8]
 800cf2c:	f043 0201 	orr.w	r2, r3, #1
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800cf34:	2300      	movs	r3, #0
}
 800cf36:	4618      	mov	r0, r3
 800cf38:	370c      	adds	r7, #12
 800cf3a:	46bd      	mov	sp, r7
 800cf3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf40:	4770      	bx	lr

0800cf42 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cf42:	b480      	push	{r7}
 800cf44:	b083      	sub	sp, #12
 800cf46:	af00      	add	r7, sp, #0
 800cf48:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	689b      	ldr	r3, [r3, #8]
 800cf4e:	f023 0201 	bic.w	r2, r3, #1
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800cf56:	2300      	movs	r3, #0
}
 800cf58:	4618      	mov	r0, r3
 800cf5a:	370c      	adds	r7, #12
 800cf5c:	46bd      	mov	sp, r7
 800cf5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf62:	4770      	bx	lr

0800cf64 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800cf64:	b580      	push	{r7, lr}
 800cf66:	b082      	sub	sp, #8
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
 800cf6c:	460b      	mov	r3, r1
 800cf6e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	68db      	ldr	r3, [r3, #12]
 800cf74:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800cf7c:	78fb      	ldrb	r3, [r7, #3]
 800cf7e:	2b01      	cmp	r3, #1
 800cf80:	d106      	bne.n	800cf90 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	68db      	ldr	r3, [r3, #12]
 800cf86:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	60da      	str	r2, [r3, #12]
 800cf8e:	e00b      	b.n	800cfa8 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800cf90:	78fb      	ldrb	r3, [r7, #3]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d106      	bne.n	800cfa4 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	68db      	ldr	r3, [r3, #12]
 800cf9a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	60da      	str	r2, [r3, #12]
 800cfa2:	e001      	b.n	800cfa8 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800cfa4:	2301      	movs	r3, #1
 800cfa6:	e003      	b.n	800cfb0 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800cfa8:	2032      	movs	r0, #50	; 0x32
 800cfaa:	f7f4 fd77 	bl	8001a9c <HAL_Delay>

  return HAL_OK;
 800cfae:	2300      	movs	r3, #0
}
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	3708      	adds	r7, #8
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	bd80      	pop	{r7, pc}

0800cfb8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cfb8:	b084      	sub	sp, #16
 800cfba:	b580      	push	{r7, lr}
 800cfbc:	b086      	sub	sp, #24
 800cfbe:	af00      	add	r7, sp, #0
 800cfc0:	6078      	str	r0, [r7, #4]
 800cfc2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800cfc6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800cfca:	2300      	movs	r3, #0
 800cfcc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	613b      	str	r3, [r7, #16]
 800cfd6:	e009      	b.n	800cfec <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800cfd8:	687a      	ldr	r2, [r7, #4]
 800cfda:	693b      	ldr	r3, [r7, #16]
 800cfdc:	3340      	adds	r3, #64	; 0x40
 800cfde:	009b      	lsls	r3, r3, #2
 800cfe0:	4413      	add	r3, r2
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800cfe6:	693b      	ldr	r3, [r7, #16]
 800cfe8:	3301      	adds	r3, #1
 800cfea:	613b      	str	r3, [r7, #16]
 800cfec:	693b      	ldr	r3, [r7, #16]
 800cfee:	2b0e      	cmp	r3, #14
 800cff0:	d9f2      	bls.n	800cfd8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800cff2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d11c      	bne.n	800d032 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cffe:	685b      	ldr	r3, [r3, #4]
 800d000:	68fa      	ldr	r2, [r7, #12]
 800d002:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d006:	f043 0302 	orr.w	r3, r3, #2
 800d00a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d010:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	601a      	str	r2, [r3, #0]
 800d030:	e005      	b.n	800d03e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d036:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d044:	461a      	mov	r2, r3
 800d046:	2300      	movs	r3, #0
 800d048:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d050:	4619      	mov	r1, r3
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d058:	461a      	mov	r2, r3
 800d05a:	680b      	ldr	r3, [r1, #0]
 800d05c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d05e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d060:	2b01      	cmp	r3, #1
 800d062:	d10c      	bne.n	800d07e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800d064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d066:	2b00      	cmp	r3, #0
 800d068:	d104      	bne.n	800d074 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800d06a:	2100      	movs	r1, #0
 800d06c:	6878      	ldr	r0, [r7, #4]
 800d06e:	f000 f949 	bl	800d304 <USB_SetDevSpeed>
 800d072:	e008      	b.n	800d086 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800d074:	2101      	movs	r1, #1
 800d076:	6878      	ldr	r0, [r7, #4]
 800d078:	f000 f944 	bl	800d304 <USB_SetDevSpeed>
 800d07c:	e003      	b.n	800d086 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d07e:	2103      	movs	r1, #3
 800d080:	6878      	ldr	r0, [r7, #4]
 800d082:	f000 f93f 	bl	800d304 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d086:	2110      	movs	r1, #16
 800d088:	6878      	ldr	r0, [r7, #4]
 800d08a:	f000 f8f3 	bl	800d274 <USB_FlushTxFifo>
 800d08e:	4603      	mov	r3, r0
 800d090:	2b00      	cmp	r3, #0
 800d092:	d001      	beq.n	800d098 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800d094:	2301      	movs	r3, #1
 800d096:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d098:	6878      	ldr	r0, [r7, #4]
 800d09a:	f000 f911 	bl	800d2c0 <USB_FlushRxFifo>
 800d09e:	4603      	mov	r3, r0
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d001      	beq.n	800d0a8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800d0a4:	2301      	movs	r3, #1
 800d0a6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0ae:	461a      	mov	r2, r3
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0ba:	461a      	mov	r2, r3
 800d0bc:	2300      	movs	r3, #0
 800d0be:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0c6:	461a      	mov	r2, r3
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d0cc:	2300      	movs	r3, #0
 800d0ce:	613b      	str	r3, [r7, #16]
 800d0d0:	e043      	b.n	800d15a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d0d2:	693b      	ldr	r3, [r7, #16]
 800d0d4:	015a      	lsls	r2, r3, #5
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	4413      	add	r3, r2
 800d0da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d0e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d0e8:	d118      	bne.n	800d11c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800d0ea:	693b      	ldr	r3, [r7, #16]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d10a      	bne.n	800d106 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d0f0:	693b      	ldr	r3, [r7, #16]
 800d0f2:	015a      	lsls	r2, r3, #5
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	4413      	add	r3, r2
 800d0f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0fc:	461a      	mov	r2, r3
 800d0fe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d102:	6013      	str	r3, [r2, #0]
 800d104:	e013      	b.n	800d12e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d106:	693b      	ldr	r3, [r7, #16]
 800d108:	015a      	lsls	r2, r3, #5
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	4413      	add	r3, r2
 800d10e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d112:	461a      	mov	r2, r3
 800d114:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d118:	6013      	str	r3, [r2, #0]
 800d11a:	e008      	b.n	800d12e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d11c:	693b      	ldr	r3, [r7, #16]
 800d11e:	015a      	lsls	r2, r3, #5
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	4413      	add	r3, r2
 800d124:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d128:	461a      	mov	r2, r3
 800d12a:	2300      	movs	r3, #0
 800d12c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d12e:	693b      	ldr	r3, [r7, #16]
 800d130:	015a      	lsls	r2, r3, #5
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	4413      	add	r3, r2
 800d136:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d13a:	461a      	mov	r2, r3
 800d13c:	2300      	movs	r3, #0
 800d13e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d140:	693b      	ldr	r3, [r7, #16]
 800d142:	015a      	lsls	r2, r3, #5
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	4413      	add	r3, r2
 800d148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d14c:	461a      	mov	r2, r3
 800d14e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d152:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d154:	693b      	ldr	r3, [r7, #16]
 800d156:	3301      	adds	r3, #1
 800d158:	613b      	str	r3, [r7, #16]
 800d15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d15c:	693a      	ldr	r2, [r7, #16]
 800d15e:	429a      	cmp	r2, r3
 800d160:	d3b7      	bcc.n	800d0d2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d162:	2300      	movs	r3, #0
 800d164:	613b      	str	r3, [r7, #16]
 800d166:	e043      	b.n	800d1f0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d168:	693b      	ldr	r3, [r7, #16]
 800d16a:	015a      	lsls	r2, r3, #5
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	4413      	add	r3, r2
 800d170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d17a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d17e:	d118      	bne.n	800d1b2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800d180:	693b      	ldr	r3, [r7, #16]
 800d182:	2b00      	cmp	r3, #0
 800d184:	d10a      	bne.n	800d19c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d186:	693b      	ldr	r3, [r7, #16]
 800d188:	015a      	lsls	r2, r3, #5
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	4413      	add	r3, r2
 800d18e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d192:	461a      	mov	r2, r3
 800d194:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d198:	6013      	str	r3, [r2, #0]
 800d19a:	e013      	b.n	800d1c4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d19c:	693b      	ldr	r3, [r7, #16]
 800d19e:	015a      	lsls	r2, r3, #5
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	4413      	add	r3, r2
 800d1a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1a8:	461a      	mov	r2, r3
 800d1aa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d1ae:	6013      	str	r3, [r2, #0]
 800d1b0:	e008      	b.n	800d1c4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d1b2:	693b      	ldr	r3, [r7, #16]
 800d1b4:	015a      	lsls	r2, r3, #5
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	4413      	add	r3, r2
 800d1ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1be:	461a      	mov	r2, r3
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d1c4:	693b      	ldr	r3, [r7, #16]
 800d1c6:	015a      	lsls	r2, r3, #5
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	4413      	add	r3, r2
 800d1cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1d0:	461a      	mov	r2, r3
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d1d6:	693b      	ldr	r3, [r7, #16]
 800d1d8:	015a      	lsls	r2, r3, #5
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	4413      	add	r3, r2
 800d1de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1e2:	461a      	mov	r2, r3
 800d1e4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d1e8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d1ea:	693b      	ldr	r3, [r7, #16]
 800d1ec:	3301      	adds	r3, #1
 800d1ee:	613b      	str	r3, [r7, #16]
 800d1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1f2:	693a      	ldr	r2, [r7, #16]
 800d1f4:	429a      	cmp	r2, r3
 800d1f6:	d3b7      	bcc.n	800d168 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1fe:	691b      	ldr	r3, [r3, #16]
 800d200:	68fa      	ldr	r2, [r7, #12]
 800d202:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d206:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d20a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	2200      	movs	r2, #0
 800d210:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800d218:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d21a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d105      	bne.n	800d22c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	699b      	ldr	r3, [r3, #24]
 800d224:	f043 0210 	orr.w	r2, r3, #16
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	699a      	ldr	r2, [r3, #24]
 800d230:	4b0e      	ldr	r3, [pc, #56]	; (800d26c <USB_DevInit+0x2b4>)
 800d232:	4313      	orrs	r3, r2
 800d234:	687a      	ldr	r2, [r7, #4]
 800d236:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d005      	beq.n	800d24a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	699b      	ldr	r3, [r3, #24]
 800d242:	f043 0208 	orr.w	r2, r3, #8
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800d24a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d24c:	2b01      	cmp	r3, #1
 800d24e:	d105      	bne.n	800d25c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	699a      	ldr	r2, [r3, #24]
 800d254:	4b06      	ldr	r3, [pc, #24]	; (800d270 <USB_DevInit+0x2b8>)
 800d256:	4313      	orrs	r3, r2
 800d258:	687a      	ldr	r2, [r7, #4]
 800d25a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d25c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d25e:	4618      	mov	r0, r3
 800d260:	3718      	adds	r7, #24
 800d262:	46bd      	mov	sp, r7
 800d264:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d268:	b004      	add	sp, #16
 800d26a:	4770      	bx	lr
 800d26c:	803c3800 	.word	0x803c3800
 800d270:	40000004 	.word	0x40000004

0800d274 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d274:	b480      	push	{r7}
 800d276:	b085      	sub	sp, #20
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
 800d27c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800d27e:	2300      	movs	r3, #0
 800d280:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d282:	683b      	ldr	r3, [r7, #0]
 800d284:	019b      	lsls	r3, r3, #6
 800d286:	f043 0220 	orr.w	r2, r3, #32
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	3301      	adds	r3, #1
 800d292:	60fb      	str	r3, [r7, #12]
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	4a09      	ldr	r2, [pc, #36]	; (800d2bc <USB_FlushTxFifo+0x48>)
 800d298:	4293      	cmp	r3, r2
 800d29a:	d901      	bls.n	800d2a0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800d29c:	2303      	movs	r3, #3
 800d29e:	e006      	b.n	800d2ae <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	691b      	ldr	r3, [r3, #16]
 800d2a4:	f003 0320 	and.w	r3, r3, #32
 800d2a8:	2b20      	cmp	r3, #32
 800d2aa:	d0f0      	beq.n	800d28e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800d2ac:	2300      	movs	r3, #0
}
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	3714      	adds	r7, #20
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b8:	4770      	bx	lr
 800d2ba:	bf00      	nop
 800d2bc:	00030d40 	.word	0x00030d40

0800d2c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d2c0:	b480      	push	{r7}
 800d2c2:	b085      	sub	sp, #20
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800d2c8:	2300      	movs	r3, #0
 800d2ca:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	2210      	movs	r2, #16
 800d2d0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	3301      	adds	r3, #1
 800d2d6:	60fb      	str	r3, [r7, #12]
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	4a09      	ldr	r2, [pc, #36]	; (800d300 <USB_FlushRxFifo+0x40>)
 800d2dc:	4293      	cmp	r3, r2
 800d2de:	d901      	bls.n	800d2e4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800d2e0:	2303      	movs	r3, #3
 800d2e2:	e006      	b.n	800d2f2 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	691b      	ldr	r3, [r3, #16]
 800d2e8:	f003 0310 	and.w	r3, r3, #16
 800d2ec:	2b10      	cmp	r3, #16
 800d2ee:	d0f0      	beq.n	800d2d2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800d2f0:	2300      	movs	r3, #0
}
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	3714      	adds	r7, #20
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2fc:	4770      	bx	lr
 800d2fe:	bf00      	nop
 800d300:	00030d40 	.word	0x00030d40

0800d304 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d304:	b480      	push	{r7}
 800d306:	b085      	sub	sp, #20
 800d308:	af00      	add	r7, sp, #0
 800d30a:	6078      	str	r0, [r7, #4]
 800d30c:	460b      	mov	r3, r1
 800d30e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d31a:	681a      	ldr	r2, [r3, #0]
 800d31c:	78fb      	ldrb	r3, [r7, #3]
 800d31e:	68f9      	ldr	r1, [r7, #12]
 800d320:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d324:	4313      	orrs	r3, r2
 800d326:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d328:	2300      	movs	r3, #0
}
 800d32a:	4618      	mov	r0, r3
 800d32c:	3714      	adds	r7, #20
 800d32e:	46bd      	mov	sp, r7
 800d330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d334:	4770      	bx	lr

0800d336 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800d336:	b480      	push	{r7}
 800d338:	b087      	sub	sp, #28
 800d33a:	af00      	add	r7, sp, #0
 800d33c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800d342:	693b      	ldr	r3, [r7, #16]
 800d344:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d348:	689b      	ldr	r3, [r3, #8]
 800d34a:	f003 0306 	and.w	r3, r3, #6
 800d34e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	2b00      	cmp	r3, #0
 800d354:	d102      	bne.n	800d35c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800d356:	2300      	movs	r3, #0
 800d358:	75fb      	strb	r3, [r7, #23]
 800d35a:	e00a      	b.n	800d372 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	2b02      	cmp	r3, #2
 800d360:	d002      	beq.n	800d368 <USB_GetDevSpeed+0x32>
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	2b06      	cmp	r3, #6
 800d366:	d102      	bne.n	800d36e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800d368:	2302      	movs	r3, #2
 800d36a:	75fb      	strb	r3, [r7, #23]
 800d36c:	e001      	b.n	800d372 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800d36e:	230f      	movs	r3, #15
 800d370:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800d372:	7dfb      	ldrb	r3, [r7, #23]
}
 800d374:	4618      	mov	r0, r3
 800d376:	371c      	adds	r7, #28
 800d378:	46bd      	mov	sp, r7
 800d37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d37e:	4770      	bx	lr

0800d380 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d380:	b480      	push	{r7}
 800d382:	b085      	sub	sp, #20
 800d384:	af00      	add	r7, sp, #0
 800d386:	6078      	str	r0, [r7, #4]
 800d388:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d38e:	683b      	ldr	r3, [r7, #0]
 800d390:	781b      	ldrb	r3, [r3, #0]
 800d392:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d394:	683b      	ldr	r3, [r7, #0]
 800d396:	785b      	ldrb	r3, [r3, #1]
 800d398:	2b01      	cmp	r3, #1
 800d39a:	d139      	bne.n	800d410 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d3a2:	69da      	ldr	r2, [r3, #28]
 800d3a4:	683b      	ldr	r3, [r7, #0]
 800d3a6:	781b      	ldrb	r3, [r3, #0]
 800d3a8:	f003 030f 	and.w	r3, r3, #15
 800d3ac:	2101      	movs	r1, #1
 800d3ae:	fa01 f303 	lsl.w	r3, r1, r3
 800d3b2:	b29b      	uxth	r3, r3
 800d3b4:	68f9      	ldr	r1, [r7, #12]
 800d3b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d3ba:	4313      	orrs	r3, r2
 800d3bc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800d3be:	68bb      	ldr	r3, [r7, #8]
 800d3c0:	015a      	lsls	r2, r3, #5
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	4413      	add	r3, r2
 800d3c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d153      	bne.n	800d47c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d3d4:	68bb      	ldr	r3, [r7, #8]
 800d3d6:	015a      	lsls	r2, r3, #5
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	4413      	add	r3, r2
 800d3dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3e0:	681a      	ldr	r2, [r3, #0]
 800d3e2:	683b      	ldr	r3, [r7, #0]
 800d3e4:	689b      	ldr	r3, [r3, #8]
 800d3e6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d3ea:	683b      	ldr	r3, [r7, #0]
 800d3ec:	78db      	ldrb	r3, [r3, #3]
 800d3ee:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d3f0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d3f2:	68bb      	ldr	r3, [r7, #8]
 800d3f4:	059b      	lsls	r3, r3, #22
 800d3f6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d3f8:	431a      	orrs	r2, r3
 800d3fa:	68bb      	ldr	r3, [r7, #8]
 800d3fc:	0159      	lsls	r1, r3, #5
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	440b      	add	r3, r1
 800d402:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d406:	4619      	mov	r1, r3
 800d408:	4b20      	ldr	r3, [pc, #128]	; (800d48c <USB_ActivateEndpoint+0x10c>)
 800d40a:	4313      	orrs	r3, r2
 800d40c:	600b      	str	r3, [r1, #0]
 800d40e:	e035      	b.n	800d47c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d416:	69da      	ldr	r2, [r3, #28]
 800d418:	683b      	ldr	r3, [r7, #0]
 800d41a:	781b      	ldrb	r3, [r3, #0]
 800d41c:	f003 030f 	and.w	r3, r3, #15
 800d420:	2101      	movs	r1, #1
 800d422:	fa01 f303 	lsl.w	r3, r1, r3
 800d426:	041b      	lsls	r3, r3, #16
 800d428:	68f9      	ldr	r1, [r7, #12]
 800d42a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d42e:	4313      	orrs	r3, r2
 800d430:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800d432:	68bb      	ldr	r3, [r7, #8]
 800d434:	015a      	lsls	r2, r3, #5
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	4413      	add	r3, r2
 800d43a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d444:	2b00      	cmp	r3, #0
 800d446:	d119      	bne.n	800d47c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d448:	68bb      	ldr	r3, [r7, #8]
 800d44a:	015a      	lsls	r2, r3, #5
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	4413      	add	r3, r2
 800d450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d454:	681a      	ldr	r2, [r3, #0]
 800d456:	683b      	ldr	r3, [r7, #0]
 800d458:	689b      	ldr	r3, [r3, #8]
 800d45a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800d45e:	683b      	ldr	r3, [r7, #0]
 800d460:	78db      	ldrb	r3, [r3, #3]
 800d462:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d464:	430b      	orrs	r3, r1
 800d466:	431a      	orrs	r2, r3
 800d468:	68bb      	ldr	r3, [r7, #8]
 800d46a:	0159      	lsls	r1, r3, #5
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	440b      	add	r3, r1
 800d470:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d474:	4619      	mov	r1, r3
 800d476:	4b05      	ldr	r3, [pc, #20]	; (800d48c <USB_ActivateEndpoint+0x10c>)
 800d478:	4313      	orrs	r3, r2
 800d47a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800d47c:	2300      	movs	r3, #0
}
 800d47e:	4618      	mov	r0, r3
 800d480:	3714      	adds	r7, #20
 800d482:	46bd      	mov	sp, r7
 800d484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d488:	4770      	bx	lr
 800d48a:	bf00      	nop
 800d48c:	10008000 	.word	0x10008000

0800d490 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d490:	b480      	push	{r7}
 800d492:	b085      	sub	sp, #20
 800d494:	af00      	add	r7, sp, #0
 800d496:	6078      	str	r0, [r7, #4]
 800d498:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d49e:	683b      	ldr	r3, [r7, #0]
 800d4a0:	781b      	ldrb	r3, [r3, #0]
 800d4a2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800d4a4:	683b      	ldr	r3, [r7, #0]
 800d4a6:	785b      	ldrb	r3, [r3, #1]
 800d4a8:	2b01      	cmp	r3, #1
 800d4aa:	d161      	bne.n	800d570 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d4ac:	68bb      	ldr	r3, [r7, #8]
 800d4ae:	015a      	lsls	r2, r3, #5
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	4413      	add	r3, r2
 800d4b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d4be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d4c2:	d11f      	bne.n	800d504 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800d4c4:	68bb      	ldr	r3, [r7, #8]
 800d4c6:	015a      	lsls	r2, r3, #5
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	4413      	add	r3, r2
 800d4cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	68ba      	ldr	r2, [r7, #8]
 800d4d4:	0151      	lsls	r1, r2, #5
 800d4d6:	68fa      	ldr	r2, [r7, #12]
 800d4d8:	440a      	add	r2, r1
 800d4da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d4de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d4e2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800d4e4:	68bb      	ldr	r3, [r7, #8]
 800d4e6:	015a      	lsls	r2, r3, #5
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	4413      	add	r3, r2
 800d4ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	68ba      	ldr	r2, [r7, #8]
 800d4f4:	0151      	lsls	r1, r2, #5
 800d4f6:	68fa      	ldr	r2, [r7, #12]
 800d4f8:	440a      	add	r2, r1
 800d4fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d4fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d502:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d50a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d50c:	683b      	ldr	r3, [r7, #0]
 800d50e:	781b      	ldrb	r3, [r3, #0]
 800d510:	f003 030f 	and.w	r3, r3, #15
 800d514:	2101      	movs	r1, #1
 800d516:	fa01 f303 	lsl.w	r3, r1, r3
 800d51a:	b29b      	uxth	r3, r3
 800d51c:	43db      	mvns	r3, r3
 800d51e:	68f9      	ldr	r1, [r7, #12]
 800d520:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d524:	4013      	ands	r3, r2
 800d526:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d52e:	69da      	ldr	r2, [r3, #28]
 800d530:	683b      	ldr	r3, [r7, #0]
 800d532:	781b      	ldrb	r3, [r3, #0]
 800d534:	f003 030f 	and.w	r3, r3, #15
 800d538:	2101      	movs	r1, #1
 800d53a:	fa01 f303 	lsl.w	r3, r1, r3
 800d53e:	b29b      	uxth	r3, r3
 800d540:	43db      	mvns	r3, r3
 800d542:	68f9      	ldr	r1, [r7, #12]
 800d544:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d548:	4013      	ands	r3, r2
 800d54a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800d54c:	68bb      	ldr	r3, [r7, #8]
 800d54e:	015a      	lsls	r2, r3, #5
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	4413      	add	r3, r2
 800d554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d558:	681a      	ldr	r2, [r3, #0]
 800d55a:	68bb      	ldr	r3, [r7, #8]
 800d55c:	0159      	lsls	r1, r3, #5
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	440b      	add	r3, r1
 800d562:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d566:	4619      	mov	r1, r3
 800d568:	4b35      	ldr	r3, [pc, #212]	; (800d640 <USB_DeactivateEndpoint+0x1b0>)
 800d56a:	4013      	ands	r3, r2
 800d56c:	600b      	str	r3, [r1, #0]
 800d56e:	e060      	b.n	800d632 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d570:	68bb      	ldr	r3, [r7, #8]
 800d572:	015a      	lsls	r2, r3, #5
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	4413      	add	r3, r2
 800d578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d582:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d586:	d11f      	bne.n	800d5c8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800d588:	68bb      	ldr	r3, [r7, #8]
 800d58a:	015a      	lsls	r2, r3, #5
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	4413      	add	r3, r2
 800d590:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	68ba      	ldr	r2, [r7, #8]
 800d598:	0151      	lsls	r1, r2, #5
 800d59a:	68fa      	ldr	r2, [r7, #12]
 800d59c:	440a      	add	r2, r1
 800d59e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d5a2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d5a6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800d5a8:	68bb      	ldr	r3, [r7, #8]
 800d5aa:	015a      	lsls	r2, r3, #5
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	4413      	add	r3, r2
 800d5b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	68ba      	ldr	r2, [r7, #8]
 800d5b8:	0151      	lsls	r1, r2, #5
 800d5ba:	68fa      	ldr	r2, [r7, #12]
 800d5bc:	440a      	add	r2, r1
 800d5be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d5c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d5c6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d5ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d5d0:	683b      	ldr	r3, [r7, #0]
 800d5d2:	781b      	ldrb	r3, [r3, #0]
 800d5d4:	f003 030f 	and.w	r3, r3, #15
 800d5d8:	2101      	movs	r1, #1
 800d5da:	fa01 f303 	lsl.w	r3, r1, r3
 800d5de:	041b      	lsls	r3, r3, #16
 800d5e0:	43db      	mvns	r3, r3
 800d5e2:	68f9      	ldr	r1, [r7, #12]
 800d5e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d5e8:	4013      	ands	r3, r2
 800d5ea:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d5f2:	69da      	ldr	r2, [r3, #28]
 800d5f4:	683b      	ldr	r3, [r7, #0]
 800d5f6:	781b      	ldrb	r3, [r3, #0]
 800d5f8:	f003 030f 	and.w	r3, r3, #15
 800d5fc:	2101      	movs	r1, #1
 800d5fe:	fa01 f303 	lsl.w	r3, r1, r3
 800d602:	041b      	lsls	r3, r3, #16
 800d604:	43db      	mvns	r3, r3
 800d606:	68f9      	ldr	r1, [r7, #12]
 800d608:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d60c:	4013      	ands	r3, r2
 800d60e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800d610:	68bb      	ldr	r3, [r7, #8]
 800d612:	015a      	lsls	r2, r3, #5
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	4413      	add	r3, r2
 800d618:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d61c:	681a      	ldr	r2, [r3, #0]
 800d61e:	68bb      	ldr	r3, [r7, #8]
 800d620:	0159      	lsls	r1, r3, #5
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	440b      	add	r3, r1
 800d626:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d62a:	4619      	mov	r1, r3
 800d62c:	4b05      	ldr	r3, [pc, #20]	; (800d644 <USB_DeactivateEndpoint+0x1b4>)
 800d62e:	4013      	ands	r3, r2
 800d630:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800d632:	2300      	movs	r3, #0
}
 800d634:	4618      	mov	r0, r3
 800d636:	3714      	adds	r7, #20
 800d638:	46bd      	mov	sp, r7
 800d63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d63e:	4770      	bx	lr
 800d640:	ec337800 	.word	0xec337800
 800d644:	eff37800 	.word	0xeff37800

0800d648 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800d648:	b580      	push	{r7, lr}
 800d64a:	b08a      	sub	sp, #40	; 0x28
 800d64c:	af02      	add	r7, sp, #8
 800d64e:	60f8      	str	r0, [r7, #12]
 800d650:	60b9      	str	r1, [r7, #8]
 800d652:	4613      	mov	r3, r2
 800d654:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800d65a:	68bb      	ldr	r3, [r7, #8]
 800d65c:	781b      	ldrb	r3, [r3, #0]
 800d65e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d660:	68bb      	ldr	r3, [r7, #8]
 800d662:	785b      	ldrb	r3, [r3, #1]
 800d664:	2b01      	cmp	r3, #1
 800d666:	f040 8163 	bne.w	800d930 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d66a:	68bb      	ldr	r3, [r7, #8]
 800d66c:	695b      	ldr	r3, [r3, #20]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d132      	bne.n	800d6d8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d672:	69bb      	ldr	r3, [r7, #24]
 800d674:	015a      	lsls	r2, r3, #5
 800d676:	69fb      	ldr	r3, [r7, #28]
 800d678:	4413      	add	r3, r2
 800d67a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d67e:	691a      	ldr	r2, [r3, #16]
 800d680:	69bb      	ldr	r3, [r7, #24]
 800d682:	0159      	lsls	r1, r3, #5
 800d684:	69fb      	ldr	r3, [r7, #28]
 800d686:	440b      	add	r3, r1
 800d688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d68c:	4619      	mov	r1, r3
 800d68e:	4ba5      	ldr	r3, [pc, #660]	; (800d924 <USB_EPStartXfer+0x2dc>)
 800d690:	4013      	ands	r3, r2
 800d692:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d694:	69bb      	ldr	r3, [r7, #24]
 800d696:	015a      	lsls	r2, r3, #5
 800d698:	69fb      	ldr	r3, [r7, #28]
 800d69a:	4413      	add	r3, r2
 800d69c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6a0:	691b      	ldr	r3, [r3, #16]
 800d6a2:	69ba      	ldr	r2, [r7, #24]
 800d6a4:	0151      	lsls	r1, r2, #5
 800d6a6:	69fa      	ldr	r2, [r7, #28]
 800d6a8:	440a      	add	r2, r1
 800d6aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d6ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d6b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d6b4:	69bb      	ldr	r3, [r7, #24]
 800d6b6:	015a      	lsls	r2, r3, #5
 800d6b8:	69fb      	ldr	r3, [r7, #28]
 800d6ba:	4413      	add	r3, r2
 800d6bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6c0:	691a      	ldr	r2, [r3, #16]
 800d6c2:	69bb      	ldr	r3, [r7, #24]
 800d6c4:	0159      	lsls	r1, r3, #5
 800d6c6:	69fb      	ldr	r3, [r7, #28]
 800d6c8:	440b      	add	r3, r1
 800d6ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6ce:	4619      	mov	r1, r3
 800d6d0:	4b95      	ldr	r3, [pc, #596]	; (800d928 <USB_EPStartXfer+0x2e0>)
 800d6d2:	4013      	ands	r3, r2
 800d6d4:	610b      	str	r3, [r1, #16]
 800d6d6:	e074      	b.n	800d7c2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d6d8:	69bb      	ldr	r3, [r7, #24]
 800d6da:	015a      	lsls	r2, r3, #5
 800d6dc:	69fb      	ldr	r3, [r7, #28]
 800d6de:	4413      	add	r3, r2
 800d6e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6e4:	691a      	ldr	r2, [r3, #16]
 800d6e6:	69bb      	ldr	r3, [r7, #24]
 800d6e8:	0159      	lsls	r1, r3, #5
 800d6ea:	69fb      	ldr	r3, [r7, #28]
 800d6ec:	440b      	add	r3, r1
 800d6ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6f2:	4619      	mov	r1, r3
 800d6f4:	4b8c      	ldr	r3, [pc, #560]	; (800d928 <USB_EPStartXfer+0x2e0>)
 800d6f6:	4013      	ands	r3, r2
 800d6f8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d6fa:	69bb      	ldr	r3, [r7, #24]
 800d6fc:	015a      	lsls	r2, r3, #5
 800d6fe:	69fb      	ldr	r3, [r7, #28]
 800d700:	4413      	add	r3, r2
 800d702:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d706:	691a      	ldr	r2, [r3, #16]
 800d708:	69bb      	ldr	r3, [r7, #24]
 800d70a:	0159      	lsls	r1, r3, #5
 800d70c:	69fb      	ldr	r3, [r7, #28]
 800d70e:	440b      	add	r3, r1
 800d710:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d714:	4619      	mov	r1, r3
 800d716:	4b83      	ldr	r3, [pc, #524]	; (800d924 <USB_EPStartXfer+0x2dc>)
 800d718:	4013      	ands	r3, r2
 800d71a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800d71c:	69bb      	ldr	r3, [r7, #24]
 800d71e:	015a      	lsls	r2, r3, #5
 800d720:	69fb      	ldr	r3, [r7, #28]
 800d722:	4413      	add	r3, r2
 800d724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d728:	691a      	ldr	r2, [r3, #16]
 800d72a:	68bb      	ldr	r3, [r7, #8]
 800d72c:	6959      	ldr	r1, [r3, #20]
 800d72e:	68bb      	ldr	r3, [r7, #8]
 800d730:	689b      	ldr	r3, [r3, #8]
 800d732:	440b      	add	r3, r1
 800d734:	1e59      	subs	r1, r3, #1
 800d736:	68bb      	ldr	r3, [r7, #8]
 800d738:	689b      	ldr	r3, [r3, #8]
 800d73a:	fbb1 f3f3 	udiv	r3, r1, r3
 800d73e:	04d9      	lsls	r1, r3, #19
 800d740:	4b7a      	ldr	r3, [pc, #488]	; (800d92c <USB_EPStartXfer+0x2e4>)
 800d742:	400b      	ands	r3, r1
 800d744:	69b9      	ldr	r1, [r7, #24]
 800d746:	0148      	lsls	r0, r1, #5
 800d748:	69f9      	ldr	r1, [r7, #28]
 800d74a:	4401      	add	r1, r0
 800d74c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d750:	4313      	orrs	r3, r2
 800d752:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d754:	69bb      	ldr	r3, [r7, #24]
 800d756:	015a      	lsls	r2, r3, #5
 800d758:	69fb      	ldr	r3, [r7, #28]
 800d75a:	4413      	add	r3, r2
 800d75c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d760:	691a      	ldr	r2, [r3, #16]
 800d762:	68bb      	ldr	r3, [r7, #8]
 800d764:	695b      	ldr	r3, [r3, #20]
 800d766:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d76a:	69b9      	ldr	r1, [r7, #24]
 800d76c:	0148      	lsls	r0, r1, #5
 800d76e:	69f9      	ldr	r1, [r7, #28]
 800d770:	4401      	add	r1, r0
 800d772:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d776:	4313      	orrs	r3, r2
 800d778:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800d77a:	68bb      	ldr	r3, [r7, #8]
 800d77c:	78db      	ldrb	r3, [r3, #3]
 800d77e:	2b01      	cmp	r3, #1
 800d780:	d11f      	bne.n	800d7c2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800d782:	69bb      	ldr	r3, [r7, #24]
 800d784:	015a      	lsls	r2, r3, #5
 800d786:	69fb      	ldr	r3, [r7, #28]
 800d788:	4413      	add	r3, r2
 800d78a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d78e:	691b      	ldr	r3, [r3, #16]
 800d790:	69ba      	ldr	r2, [r7, #24]
 800d792:	0151      	lsls	r1, r2, #5
 800d794:	69fa      	ldr	r2, [r7, #28]
 800d796:	440a      	add	r2, r1
 800d798:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d79c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800d7a0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800d7a2:	69bb      	ldr	r3, [r7, #24]
 800d7a4:	015a      	lsls	r2, r3, #5
 800d7a6:	69fb      	ldr	r3, [r7, #28]
 800d7a8:	4413      	add	r3, r2
 800d7aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d7ae:	691b      	ldr	r3, [r3, #16]
 800d7b0:	69ba      	ldr	r2, [r7, #24]
 800d7b2:	0151      	lsls	r1, r2, #5
 800d7b4:	69fa      	ldr	r2, [r7, #28]
 800d7b6:	440a      	add	r2, r1
 800d7b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d7bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d7c0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800d7c2:	79fb      	ldrb	r3, [r7, #7]
 800d7c4:	2b01      	cmp	r3, #1
 800d7c6:	d14b      	bne.n	800d860 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800d7c8:	68bb      	ldr	r3, [r7, #8]
 800d7ca:	691b      	ldr	r3, [r3, #16]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d009      	beq.n	800d7e4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d7d0:	69bb      	ldr	r3, [r7, #24]
 800d7d2:	015a      	lsls	r2, r3, #5
 800d7d4:	69fb      	ldr	r3, [r7, #28]
 800d7d6:	4413      	add	r3, r2
 800d7d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d7dc:	461a      	mov	r2, r3
 800d7de:	68bb      	ldr	r3, [r7, #8]
 800d7e0:	691b      	ldr	r3, [r3, #16]
 800d7e2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800d7e4:	68bb      	ldr	r3, [r7, #8]
 800d7e6:	78db      	ldrb	r3, [r3, #3]
 800d7e8:	2b01      	cmp	r3, #1
 800d7ea:	d128      	bne.n	800d83e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d7ec:	69fb      	ldr	r3, [r7, #28]
 800d7ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d7f2:	689b      	ldr	r3, [r3, #8]
 800d7f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d110      	bne.n	800d81e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d7fc:	69bb      	ldr	r3, [r7, #24]
 800d7fe:	015a      	lsls	r2, r3, #5
 800d800:	69fb      	ldr	r3, [r7, #28]
 800d802:	4413      	add	r3, r2
 800d804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	69ba      	ldr	r2, [r7, #24]
 800d80c:	0151      	lsls	r1, r2, #5
 800d80e:	69fa      	ldr	r2, [r7, #28]
 800d810:	440a      	add	r2, r1
 800d812:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d816:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d81a:	6013      	str	r3, [r2, #0]
 800d81c:	e00f      	b.n	800d83e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d81e:	69bb      	ldr	r3, [r7, #24]
 800d820:	015a      	lsls	r2, r3, #5
 800d822:	69fb      	ldr	r3, [r7, #28]
 800d824:	4413      	add	r3, r2
 800d826:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	69ba      	ldr	r2, [r7, #24]
 800d82e:	0151      	lsls	r1, r2, #5
 800d830:	69fa      	ldr	r2, [r7, #28]
 800d832:	440a      	add	r2, r1
 800d834:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d83c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d83e:	69bb      	ldr	r3, [r7, #24]
 800d840:	015a      	lsls	r2, r3, #5
 800d842:	69fb      	ldr	r3, [r7, #28]
 800d844:	4413      	add	r3, r2
 800d846:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	69ba      	ldr	r2, [r7, #24]
 800d84e:	0151      	lsls	r1, r2, #5
 800d850:	69fa      	ldr	r2, [r7, #28]
 800d852:	440a      	add	r2, r1
 800d854:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d858:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d85c:	6013      	str	r3, [r2, #0]
 800d85e:	e133      	b.n	800dac8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d860:	69bb      	ldr	r3, [r7, #24]
 800d862:	015a      	lsls	r2, r3, #5
 800d864:	69fb      	ldr	r3, [r7, #28]
 800d866:	4413      	add	r3, r2
 800d868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	69ba      	ldr	r2, [r7, #24]
 800d870:	0151      	lsls	r1, r2, #5
 800d872:	69fa      	ldr	r2, [r7, #28]
 800d874:	440a      	add	r2, r1
 800d876:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d87a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d87e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d880:	68bb      	ldr	r3, [r7, #8]
 800d882:	78db      	ldrb	r3, [r3, #3]
 800d884:	2b01      	cmp	r3, #1
 800d886:	d015      	beq.n	800d8b4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800d888:	68bb      	ldr	r3, [r7, #8]
 800d88a:	695b      	ldr	r3, [r3, #20]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	f000 811b 	beq.w	800dac8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d892:	69fb      	ldr	r3, [r7, #28]
 800d894:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d898:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d89a:	68bb      	ldr	r3, [r7, #8]
 800d89c:	781b      	ldrb	r3, [r3, #0]
 800d89e:	f003 030f 	and.w	r3, r3, #15
 800d8a2:	2101      	movs	r1, #1
 800d8a4:	fa01 f303 	lsl.w	r3, r1, r3
 800d8a8:	69f9      	ldr	r1, [r7, #28]
 800d8aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d8ae:	4313      	orrs	r3, r2
 800d8b0:	634b      	str	r3, [r1, #52]	; 0x34
 800d8b2:	e109      	b.n	800dac8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d8b4:	69fb      	ldr	r3, [r7, #28]
 800d8b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d8ba:	689b      	ldr	r3, [r3, #8]
 800d8bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d110      	bne.n	800d8e6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d8c4:	69bb      	ldr	r3, [r7, #24]
 800d8c6:	015a      	lsls	r2, r3, #5
 800d8c8:	69fb      	ldr	r3, [r7, #28]
 800d8ca:	4413      	add	r3, r2
 800d8cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	69ba      	ldr	r2, [r7, #24]
 800d8d4:	0151      	lsls	r1, r2, #5
 800d8d6:	69fa      	ldr	r2, [r7, #28]
 800d8d8:	440a      	add	r2, r1
 800d8da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d8de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d8e2:	6013      	str	r3, [r2, #0]
 800d8e4:	e00f      	b.n	800d906 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d8e6:	69bb      	ldr	r3, [r7, #24]
 800d8e8:	015a      	lsls	r2, r3, #5
 800d8ea:	69fb      	ldr	r3, [r7, #28]
 800d8ec:	4413      	add	r3, r2
 800d8ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	69ba      	ldr	r2, [r7, #24]
 800d8f6:	0151      	lsls	r1, r2, #5
 800d8f8:	69fa      	ldr	r2, [r7, #28]
 800d8fa:	440a      	add	r2, r1
 800d8fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d904:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800d906:	68bb      	ldr	r3, [r7, #8]
 800d908:	68d9      	ldr	r1, [r3, #12]
 800d90a:	68bb      	ldr	r3, [r7, #8]
 800d90c:	781a      	ldrb	r2, [r3, #0]
 800d90e:	68bb      	ldr	r3, [r7, #8]
 800d910:	695b      	ldr	r3, [r3, #20]
 800d912:	b298      	uxth	r0, r3
 800d914:	79fb      	ldrb	r3, [r7, #7]
 800d916:	9300      	str	r3, [sp, #0]
 800d918:	4603      	mov	r3, r0
 800d91a:	68f8      	ldr	r0, [r7, #12]
 800d91c:	f000 fa38 	bl	800dd90 <USB_WritePacket>
 800d920:	e0d2      	b.n	800dac8 <USB_EPStartXfer+0x480>
 800d922:	bf00      	nop
 800d924:	e007ffff 	.word	0xe007ffff
 800d928:	fff80000 	.word	0xfff80000
 800d92c:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d930:	69bb      	ldr	r3, [r7, #24]
 800d932:	015a      	lsls	r2, r3, #5
 800d934:	69fb      	ldr	r3, [r7, #28]
 800d936:	4413      	add	r3, r2
 800d938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d93c:	691a      	ldr	r2, [r3, #16]
 800d93e:	69bb      	ldr	r3, [r7, #24]
 800d940:	0159      	lsls	r1, r3, #5
 800d942:	69fb      	ldr	r3, [r7, #28]
 800d944:	440b      	add	r3, r1
 800d946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d94a:	4619      	mov	r1, r3
 800d94c:	4b61      	ldr	r3, [pc, #388]	; (800dad4 <USB_EPStartXfer+0x48c>)
 800d94e:	4013      	ands	r3, r2
 800d950:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d952:	69bb      	ldr	r3, [r7, #24]
 800d954:	015a      	lsls	r2, r3, #5
 800d956:	69fb      	ldr	r3, [r7, #28]
 800d958:	4413      	add	r3, r2
 800d95a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d95e:	691a      	ldr	r2, [r3, #16]
 800d960:	69bb      	ldr	r3, [r7, #24]
 800d962:	0159      	lsls	r1, r3, #5
 800d964:	69fb      	ldr	r3, [r7, #28]
 800d966:	440b      	add	r3, r1
 800d968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d96c:	4619      	mov	r1, r3
 800d96e:	4b5a      	ldr	r3, [pc, #360]	; (800dad8 <USB_EPStartXfer+0x490>)
 800d970:	4013      	ands	r3, r2
 800d972:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800d974:	68bb      	ldr	r3, [r7, #8]
 800d976:	695b      	ldr	r3, [r3, #20]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d123      	bne.n	800d9c4 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800d97c:	69bb      	ldr	r3, [r7, #24]
 800d97e:	015a      	lsls	r2, r3, #5
 800d980:	69fb      	ldr	r3, [r7, #28]
 800d982:	4413      	add	r3, r2
 800d984:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d988:	691a      	ldr	r2, [r3, #16]
 800d98a:	68bb      	ldr	r3, [r7, #8]
 800d98c:	689b      	ldr	r3, [r3, #8]
 800d98e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d992:	69b9      	ldr	r1, [r7, #24]
 800d994:	0148      	lsls	r0, r1, #5
 800d996:	69f9      	ldr	r1, [r7, #28]
 800d998:	4401      	add	r1, r0
 800d99a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d99e:	4313      	orrs	r3, r2
 800d9a0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d9a2:	69bb      	ldr	r3, [r7, #24]
 800d9a4:	015a      	lsls	r2, r3, #5
 800d9a6:	69fb      	ldr	r3, [r7, #28]
 800d9a8:	4413      	add	r3, r2
 800d9aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9ae:	691b      	ldr	r3, [r3, #16]
 800d9b0:	69ba      	ldr	r2, [r7, #24]
 800d9b2:	0151      	lsls	r1, r2, #5
 800d9b4:	69fa      	ldr	r2, [r7, #28]
 800d9b6:	440a      	add	r2, r1
 800d9b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d9bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d9c0:	6113      	str	r3, [r2, #16]
 800d9c2:	e033      	b.n	800da2c <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d9c4:	68bb      	ldr	r3, [r7, #8]
 800d9c6:	695a      	ldr	r2, [r3, #20]
 800d9c8:	68bb      	ldr	r3, [r7, #8]
 800d9ca:	689b      	ldr	r3, [r3, #8]
 800d9cc:	4413      	add	r3, r2
 800d9ce:	1e5a      	subs	r2, r3, #1
 800d9d0:	68bb      	ldr	r3, [r7, #8]
 800d9d2:	689b      	ldr	r3, [r3, #8]
 800d9d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800d9d8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d9da:	69bb      	ldr	r3, [r7, #24]
 800d9dc:	015a      	lsls	r2, r3, #5
 800d9de:	69fb      	ldr	r3, [r7, #28]
 800d9e0:	4413      	add	r3, r2
 800d9e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9e6:	691a      	ldr	r2, [r3, #16]
 800d9e8:	8afb      	ldrh	r3, [r7, #22]
 800d9ea:	04d9      	lsls	r1, r3, #19
 800d9ec:	4b3b      	ldr	r3, [pc, #236]	; (800dadc <USB_EPStartXfer+0x494>)
 800d9ee:	400b      	ands	r3, r1
 800d9f0:	69b9      	ldr	r1, [r7, #24]
 800d9f2:	0148      	lsls	r0, r1, #5
 800d9f4:	69f9      	ldr	r1, [r7, #28]
 800d9f6:	4401      	add	r1, r0
 800d9f8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d9fc:	4313      	orrs	r3, r2
 800d9fe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800da00:	69bb      	ldr	r3, [r7, #24]
 800da02:	015a      	lsls	r2, r3, #5
 800da04:	69fb      	ldr	r3, [r7, #28]
 800da06:	4413      	add	r3, r2
 800da08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da0c:	691a      	ldr	r2, [r3, #16]
 800da0e:	68bb      	ldr	r3, [r7, #8]
 800da10:	689b      	ldr	r3, [r3, #8]
 800da12:	8af9      	ldrh	r1, [r7, #22]
 800da14:	fb01 f303 	mul.w	r3, r1, r3
 800da18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800da1c:	69b9      	ldr	r1, [r7, #24]
 800da1e:	0148      	lsls	r0, r1, #5
 800da20:	69f9      	ldr	r1, [r7, #28]
 800da22:	4401      	add	r1, r0
 800da24:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800da28:	4313      	orrs	r3, r2
 800da2a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800da2c:	79fb      	ldrb	r3, [r7, #7]
 800da2e:	2b01      	cmp	r3, #1
 800da30:	d10d      	bne.n	800da4e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800da32:	68bb      	ldr	r3, [r7, #8]
 800da34:	68db      	ldr	r3, [r3, #12]
 800da36:	2b00      	cmp	r3, #0
 800da38:	d009      	beq.n	800da4e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800da3a:	68bb      	ldr	r3, [r7, #8]
 800da3c:	68d9      	ldr	r1, [r3, #12]
 800da3e:	69bb      	ldr	r3, [r7, #24]
 800da40:	015a      	lsls	r2, r3, #5
 800da42:	69fb      	ldr	r3, [r7, #28]
 800da44:	4413      	add	r3, r2
 800da46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da4a:	460a      	mov	r2, r1
 800da4c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800da4e:	68bb      	ldr	r3, [r7, #8]
 800da50:	78db      	ldrb	r3, [r3, #3]
 800da52:	2b01      	cmp	r3, #1
 800da54:	d128      	bne.n	800daa8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800da56:	69fb      	ldr	r3, [r7, #28]
 800da58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da5c:	689b      	ldr	r3, [r3, #8]
 800da5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800da62:	2b00      	cmp	r3, #0
 800da64:	d110      	bne.n	800da88 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800da66:	69bb      	ldr	r3, [r7, #24]
 800da68:	015a      	lsls	r2, r3, #5
 800da6a:	69fb      	ldr	r3, [r7, #28]
 800da6c:	4413      	add	r3, r2
 800da6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	69ba      	ldr	r2, [r7, #24]
 800da76:	0151      	lsls	r1, r2, #5
 800da78:	69fa      	ldr	r2, [r7, #28]
 800da7a:	440a      	add	r2, r1
 800da7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800da80:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800da84:	6013      	str	r3, [r2, #0]
 800da86:	e00f      	b.n	800daa8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800da88:	69bb      	ldr	r3, [r7, #24]
 800da8a:	015a      	lsls	r2, r3, #5
 800da8c:	69fb      	ldr	r3, [r7, #28]
 800da8e:	4413      	add	r3, r2
 800da90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	69ba      	ldr	r2, [r7, #24]
 800da98:	0151      	lsls	r1, r2, #5
 800da9a:	69fa      	ldr	r2, [r7, #28]
 800da9c:	440a      	add	r2, r1
 800da9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800daa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800daa6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800daa8:	69bb      	ldr	r3, [r7, #24]
 800daaa:	015a      	lsls	r2, r3, #5
 800daac:	69fb      	ldr	r3, [r7, #28]
 800daae:	4413      	add	r3, r2
 800dab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	69ba      	ldr	r2, [r7, #24]
 800dab8:	0151      	lsls	r1, r2, #5
 800daba:	69fa      	ldr	r2, [r7, #28]
 800dabc:	440a      	add	r2, r1
 800dabe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dac2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800dac6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800dac8:	2300      	movs	r3, #0
}
 800daca:	4618      	mov	r0, r3
 800dacc:	3720      	adds	r7, #32
 800dace:	46bd      	mov	sp, r7
 800dad0:	bd80      	pop	{r7, pc}
 800dad2:	bf00      	nop
 800dad4:	fff80000 	.word	0xfff80000
 800dad8:	e007ffff 	.word	0xe007ffff
 800dadc:	1ff80000 	.word	0x1ff80000

0800dae0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800dae0:	b480      	push	{r7}
 800dae2:	b087      	sub	sp, #28
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	60f8      	str	r0, [r7, #12]
 800dae8:	60b9      	str	r1, [r7, #8]
 800daea:	4613      	mov	r3, r2
 800daec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800daf2:	68bb      	ldr	r3, [r7, #8]
 800daf4:	781b      	ldrb	r3, [r3, #0]
 800daf6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800daf8:	68bb      	ldr	r3, [r7, #8]
 800dafa:	785b      	ldrb	r3, [r3, #1]
 800dafc:	2b01      	cmp	r3, #1
 800dafe:	f040 80cd 	bne.w	800dc9c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800db02:	68bb      	ldr	r3, [r7, #8]
 800db04:	695b      	ldr	r3, [r3, #20]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d132      	bne.n	800db70 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800db0a:	693b      	ldr	r3, [r7, #16]
 800db0c:	015a      	lsls	r2, r3, #5
 800db0e:	697b      	ldr	r3, [r7, #20]
 800db10:	4413      	add	r3, r2
 800db12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db16:	691a      	ldr	r2, [r3, #16]
 800db18:	693b      	ldr	r3, [r7, #16]
 800db1a:	0159      	lsls	r1, r3, #5
 800db1c:	697b      	ldr	r3, [r7, #20]
 800db1e:	440b      	add	r3, r1
 800db20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db24:	4619      	mov	r1, r3
 800db26:	4b98      	ldr	r3, [pc, #608]	; (800dd88 <USB_EP0StartXfer+0x2a8>)
 800db28:	4013      	ands	r3, r2
 800db2a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800db2c:	693b      	ldr	r3, [r7, #16]
 800db2e:	015a      	lsls	r2, r3, #5
 800db30:	697b      	ldr	r3, [r7, #20]
 800db32:	4413      	add	r3, r2
 800db34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db38:	691b      	ldr	r3, [r3, #16]
 800db3a:	693a      	ldr	r2, [r7, #16]
 800db3c:	0151      	lsls	r1, r2, #5
 800db3e:	697a      	ldr	r2, [r7, #20]
 800db40:	440a      	add	r2, r1
 800db42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800db46:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800db4a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800db4c:	693b      	ldr	r3, [r7, #16]
 800db4e:	015a      	lsls	r2, r3, #5
 800db50:	697b      	ldr	r3, [r7, #20]
 800db52:	4413      	add	r3, r2
 800db54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db58:	691a      	ldr	r2, [r3, #16]
 800db5a:	693b      	ldr	r3, [r7, #16]
 800db5c:	0159      	lsls	r1, r3, #5
 800db5e:	697b      	ldr	r3, [r7, #20]
 800db60:	440b      	add	r3, r1
 800db62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db66:	4619      	mov	r1, r3
 800db68:	4b88      	ldr	r3, [pc, #544]	; (800dd8c <USB_EP0StartXfer+0x2ac>)
 800db6a:	4013      	ands	r3, r2
 800db6c:	610b      	str	r3, [r1, #16]
 800db6e:	e04e      	b.n	800dc0e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800db70:	693b      	ldr	r3, [r7, #16]
 800db72:	015a      	lsls	r2, r3, #5
 800db74:	697b      	ldr	r3, [r7, #20]
 800db76:	4413      	add	r3, r2
 800db78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db7c:	691a      	ldr	r2, [r3, #16]
 800db7e:	693b      	ldr	r3, [r7, #16]
 800db80:	0159      	lsls	r1, r3, #5
 800db82:	697b      	ldr	r3, [r7, #20]
 800db84:	440b      	add	r3, r1
 800db86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db8a:	4619      	mov	r1, r3
 800db8c:	4b7f      	ldr	r3, [pc, #508]	; (800dd8c <USB_EP0StartXfer+0x2ac>)
 800db8e:	4013      	ands	r3, r2
 800db90:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800db92:	693b      	ldr	r3, [r7, #16]
 800db94:	015a      	lsls	r2, r3, #5
 800db96:	697b      	ldr	r3, [r7, #20]
 800db98:	4413      	add	r3, r2
 800db9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db9e:	691a      	ldr	r2, [r3, #16]
 800dba0:	693b      	ldr	r3, [r7, #16]
 800dba2:	0159      	lsls	r1, r3, #5
 800dba4:	697b      	ldr	r3, [r7, #20]
 800dba6:	440b      	add	r3, r1
 800dba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dbac:	4619      	mov	r1, r3
 800dbae:	4b76      	ldr	r3, [pc, #472]	; (800dd88 <USB_EP0StartXfer+0x2a8>)
 800dbb0:	4013      	ands	r3, r2
 800dbb2:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800dbb4:	68bb      	ldr	r3, [r7, #8]
 800dbb6:	695a      	ldr	r2, [r3, #20]
 800dbb8:	68bb      	ldr	r3, [r7, #8]
 800dbba:	689b      	ldr	r3, [r3, #8]
 800dbbc:	429a      	cmp	r2, r3
 800dbbe:	d903      	bls.n	800dbc8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800dbc0:	68bb      	ldr	r3, [r7, #8]
 800dbc2:	689a      	ldr	r2, [r3, #8]
 800dbc4:	68bb      	ldr	r3, [r7, #8]
 800dbc6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800dbc8:	693b      	ldr	r3, [r7, #16]
 800dbca:	015a      	lsls	r2, r3, #5
 800dbcc:	697b      	ldr	r3, [r7, #20]
 800dbce:	4413      	add	r3, r2
 800dbd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dbd4:	691b      	ldr	r3, [r3, #16]
 800dbd6:	693a      	ldr	r2, [r7, #16]
 800dbd8:	0151      	lsls	r1, r2, #5
 800dbda:	697a      	ldr	r2, [r7, #20]
 800dbdc:	440a      	add	r2, r1
 800dbde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dbe2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dbe6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800dbe8:	693b      	ldr	r3, [r7, #16]
 800dbea:	015a      	lsls	r2, r3, #5
 800dbec:	697b      	ldr	r3, [r7, #20]
 800dbee:	4413      	add	r3, r2
 800dbf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dbf4:	691a      	ldr	r2, [r3, #16]
 800dbf6:	68bb      	ldr	r3, [r7, #8]
 800dbf8:	695b      	ldr	r3, [r3, #20]
 800dbfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800dbfe:	6939      	ldr	r1, [r7, #16]
 800dc00:	0148      	lsls	r0, r1, #5
 800dc02:	6979      	ldr	r1, [r7, #20]
 800dc04:	4401      	add	r1, r0
 800dc06:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800dc0a:	4313      	orrs	r3, r2
 800dc0c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800dc0e:	79fb      	ldrb	r3, [r7, #7]
 800dc10:	2b01      	cmp	r3, #1
 800dc12:	d11e      	bne.n	800dc52 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800dc14:	68bb      	ldr	r3, [r7, #8]
 800dc16:	691b      	ldr	r3, [r3, #16]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d009      	beq.n	800dc30 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800dc1c:	693b      	ldr	r3, [r7, #16]
 800dc1e:	015a      	lsls	r2, r3, #5
 800dc20:	697b      	ldr	r3, [r7, #20]
 800dc22:	4413      	add	r3, r2
 800dc24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc28:	461a      	mov	r2, r3
 800dc2a:	68bb      	ldr	r3, [r7, #8]
 800dc2c:	691b      	ldr	r3, [r3, #16]
 800dc2e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800dc30:	693b      	ldr	r3, [r7, #16]
 800dc32:	015a      	lsls	r2, r3, #5
 800dc34:	697b      	ldr	r3, [r7, #20]
 800dc36:	4413      	add	r3, r2
 800dc38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	693a      	ldr	r2, [r7, #16]
 800dc40:	0151      	lsls	r1, r2, #5
 800dc42:	697a      	ldr	r2, [r7, #20]
 800dc44:	440a      	add	r2, r1
 800dc46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dc4a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800dc4e:	6013      	str	r3, [r2, #0]
 800dc50:	e092      	b.n	800dd78 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800dc52:	693b      	ldr	r3, [r7, #16]
 800dc54:	015a      	lsls	r2, r3, #5
 800dc56:	697b      	ldr	r3, [r7, #20]
 800dc58:	4413      	add	r3, r2
 800dc5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	693a      	ldr	r2, [r7, #16]
 800dc62:	0151      	lsls	r1, r2, #5
 800dc64:	697a      	ldr	r2, [r7, #20]
 800dc66:	440a      	add	r2, r1
 800dc68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dc6c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800dc70:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800dc72:	68bb      	ldr	r3, [r7, #8]
 800dc74:	695b      	ldr	r3, [r3, #20]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d07e      	beq.n	800dd78 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800dc7a:	697b      	ldr	r3, [r7, #20]
 800dc7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dc82:	68bb      	ldr	r3, [r7, #8]
 800dc84:	781b      	ldrb	r3, [r3, #0]
 800dc86:	f003 030f 	and.w	r3, r3, #15
 800dc8a:	2101      	movs	r1, #1
 800dc8c:	fa01 f303 	lsl.w	r3, r1, r3
 800dc90:	6979      	ldr	r1, [r7, #20]
 800dc92:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dc96:	4313      	orrs	r3, r2
 800dc98:	634b      	str	r3, [r1, #52]	; 0x34
 800dc9a:	e06d      	b.n	800dd78 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800dc9c:	693b      	ldr	r3, [r7, #16]
 800dc9e:	015a      	lsls	r2, r3, #5
 800dca0:	697b      	ldr	r3, [r7, #20]
 800dca2:	4413      	add	r3, r2
 800dca4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dca8:	691a      	ldr	r2, [r3, #16]
 800dcaa:	693b      	ldr	r3, [r7, #16]
 800dcac:	0159      	lsls	r1, r3, #5
 800dcae:	697b      	ldr	r3, [r7, #20]
 800dcb0:	440b      	add	r3, r1
 800dcb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dcb6:	4619      	mov	r1, r3
 800dcb8:	4b34      	ldr	r3, [pc, #208]	; (800dd8c <USB_EP0StartXfer+0x2ac>)
 800dcba:	4013      	ands	r3, r2
 800dcbc:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800dcbe:	693b      	ldr	r3, [r7, #16]
 800dcc0:	015a      	lsls	r2, r3, #5
 800dcc2:	697b      	ldr	r3, [r7, #20]
 800dcc4:	4413      	add	r3, r2
 800dcc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dcca:	691a      	ldr	r2, [r3, #16]
 800dccc:	693b      	ldr	r3, [r7, #16]
 800dcce:	0159      	lsls	r1, r3, #5
 800dcd0:	697b      	ldr	r3, [r7, #20]
 800dcd2:	440b      	add	r3, r1
 800dcd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dcd8:	4619      	mov	r1, r3
 800dcda:	4b2b      	ldr	r3, [pc, #172]	; (800dd88 <USB_EP0StartXfer+0x2a8>)
 800dcdc:	4013      	ands	r3, r2
 800dcde:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800dce0:	68bb      	ldr	r3, [r7, #8]
 800dce2:	695b      	ldr	r3, [r3, #20]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d003      	beq.n	800dcf0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800dce8:	68bb      	ldr	r3, [r7, #8]
 800dcea:	689a      	ldr	r2, [r3, #8]
 800dcec:	68bb      	ldr	r3, [r7, #8]
 800dcee:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800dcf0:	693b      	ldr	r3, [r7, #16]
 800dcf2:	015a      	lsls	r2, r3, #5
 800dcf4:	697b      	ldr	r3, [r7, #20]
 800dcf6:	4413      	add	r3, r2
 800dcf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dcfc:	691b      	ldr	r3, [r3, #16]
 800dcfe:	693a      	ldr	r2, [r7, #16]
 800dd00:	0151      	lsls	r1, r2, #5
 800dd02:	697a      	ldr	r2, [r7, #20]
 800dd04:	440a      	add	r2, r1
 800dd06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dd0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dd0e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800dd10:	693b      	ldr	r3, [r7, #16]
 800dd12:	015a      	lsls	r2, r3, #5
 800dd14:	697b      	ldr	r3, [r7, #20]
 800dd16:	4413      	add	r3, r2
 800dd18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd1c:	691a      	ldr	r2, [r3, #16]
 800dd1e:	68bb      	ldr	r3, [r7, #8]
 800dd20:	689b      	ldr	r3, [r3, #8]
 800dd22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800dd26:	6939      	ldr	r1, [r7, #16]
 800dd28:	0148      	lsls	r0, r1, #5
 800dd2a:	6979      	ldr	r1, [r7, #20]
 800dd2c:	4401      	add	r1, r0
 800dd2e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800dd32:	4313      	orrs	r3, r2
 800dd34:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800dd36:	79fb      	ldrb	r3, [r7, #7]
 800dd38:	2b01      	cmp	r3, #1
 800dd3a:	d10d      	bne.n	800dd58 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800dd3c:	68bb      	ldr	r3, [r7, #8]
 800dd3e:	68db      	ldr	r3, [r3, #12]
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d009      	beq.n	800dd58 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800dd44:	68bb      	ldr	r3, [r7, #8]
 800dd46:	68d9      	ldr	r1, [r3, #12]
 800dd48:	693b      	ldr	r3, [r7, #16]
 800dd4a:	015a      	lsls	r2, r3, #5
 800dd4c:	697b      	ldr	r3, [r7, #20]
 800dd4e:	4413      	add	r3, r2
 800dd50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd54:	460a      	mov	r2, r1
 800dd56:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800dd58:	693b      	ldr	r3, [r7, #16]
 800dd5a:	015a      	lsls	r2, r3, #5
 800dd5c:	697b      	ldr	r3, [r7, #20]
 800dd5e:	4413      	add	r3, r2
 800dd60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	693a      	ldr	r2, [r7, #16]
 800dd68:	0151      	lsls	r1, r2, #5
 800dd6a:	697a      	ldr	r2, [r7, #20]
 800dd6c:	440a      	add	r2, r1
 800dd6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dd72:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800dd76:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800dd78:	2300      	movs	r3, #0
}
 800dd7a:	4618      	mov	r0, r3
 800dd7c:	371c      	adds	r7, #28
 800dd7e:	46bd      	mov	sp, r7
 800dd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd84:	4770      	bx	lr
 800dd86:	bf00      	nop
 800dd88:	e007ffff 	.word	0xe007ffff
 800dd8c:	fff80000 	.word	0xfff80000

0800dd90 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800dd90:	b480      	push	{r7}
 800dd92:	b089      	sub	sp, #36	; 0x24
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	60f8      	str	r0, [r7, #12]
 800dd98:	60b9      	str	r1, [r7, #8]
 800dd9a:	4611      	mov	r1, r2
 800dd9c:	461a      	mov	r2, r3
 800dd9e:	460b      	mov	r3, r1
 800dda0:	71fb      	strb	r3, [r7, #7]
 800dda2:	4613      	mov	r3, r2
 800dda4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800ddaa:	68bb      	ldr	r3, [r7, #8]
 800ddac:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800ddae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d11a      	bne.n	800ddec <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800ddb6:	88bb      	ldrh	r3, [r7, #4]
 800ddb8:	3303      	adds	r3, #3
 800ddba:	089b      	lsrs	r3, r3, #2
 800ddbc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	61bb      	str	r3, [r7, #24]
 800ddc2:	e00f      	b.n	800dde4 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ddc4:	79fb      	ldrb	r3, [r7, #7]
 800ddc6:	031a      	lsls	r2, r3, #12
 800ddc8:	697b      	ldr	r3, [r7, #20]
 800ddca:	4413      	add	r3, r2
 800ddcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ddd0:	461a      	mov	r2, r3
 800ddd2:	69fb      	ldr	r3, [r7, #28]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	6013      	str	r3, [r2, #0]
      pSrc++;
 800ddd8:	69fb      	ldr	r3, [r7, #28]
 800ddda:	3304      	adds	r3, #4
 800dddc:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800ddde:	69bb      	ldr	r3, [r7, #24]
 800dde0:	3301      	adds	r3, #1
 800dde2:	61bb      	str	r3, [r7, #24]
 800dde4:	69ba      	ldr	r2, [r7, #24]
 800dde6:	693b      	ldr	r3, [r7, #16]
 800dde8:	429a      	cmp	r2, r3
 800ddea:	d3eb      	bcc.n	800ddc4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ddec:	2300      	movs	r3, #0
}
 800ddee:	4618      	mov	r0, r3
 800ddf0:	3724      	adds	r7, #36	; 0x24
 800ddf2:	46bd      	mov	sp, r7
 800ddf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf8:	4770      	bx	lr

0800ddfa <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ddfa:	b480      	push	{r7}
 800ddfc:	b089      	sub	sp, #36	; 0x24
 800ddfe:	af00      	add	r7, sp, #0
 800de00:	60f8      	str	r0, [r7, #12]
 800de02:	60b9      	str	r1, [r7, #8]
 800de04:	4613      	mov	r3, r2
 800de06:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800de0c:	68bb      	ldr	r3, [r7, #8]
 800de0e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800de10:	88fb      	ldrh	r3, [r7, #6]
 800de12:	3303      	adds	r3, #3
 800de14:	089b      	lsrs	r3, r3, #2
 800de16:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800de18:	2300      	movs	r3, #0
 800de1a:	61bb      	str	r3, [r7, #24]
 800de1c:	e00b      	b.n	800de36 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800de1e:	697b      	ldr	r3, [r7, #20]
 800de20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800de24:	681a      	ldr	r2, [r3, #0]
 800de26:	69fb      	ldr	r3, [r7, #28]
 800de28:	601a      	str	r2, [r3, #0]
    pDest++;
 800de2a:	69fb      	ldr	r3, [r7, #28]
 800de2c:	3304      	adds	r3, #4
 800de2e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800de30:	69bb      	ldr	r3, [r7, #24]
 800de32:	3301      	adds	r3, #1
 800de34:	61bb      	str	r3, [r7, #24]
 800de36:	69ba      	ldr	r2, [r7, #24]
 800de38:	693b      	ldr	r3, [r7, #16]
 800de3a:	429a      	cmp	r2, r3
 800de3c:	d3ef      	bcc.n	800de1e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800de3e:	69fb      	ldr	r3, [r7, #28]
}
 800de40:	4618      	mov	r0, r3
 800de42:	3724      	adds	r7, #36	; 0x24
 800de44:	46bd      	mov	sp, r7
 800de46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de4a:	4770      	bx	lr

0800de4c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800de4c:	b480      	push	{r7}
 800de4e:	b085      	sub	sp, #20
 800de50:	af00      	add	r7, sp, #0
 800de52:	6078      	str	r0, [r7, #4]
 800de54:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800de5a:	683b      	ldr	r3, [r7, #0]
 800de5c:	781b      	ldrb	r3, [r3, #0]
 800de5e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800de60:	683b      	ldr	r3, [r7, #0]
 800de62:	785b      	ldrb	r3, [r3, #1]
 800de64:	2b01      	cmp	r3, #1
 800de66:	d12c      	bne.n	800dec2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800de68:	68bb      	ldr	r3, [r7, #8]
 800de6a:	015a      	lsls	r2, r3, #5
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	4413      	add	r3, r2
 800de70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	2b00      	cmp	r3, #0
 800de78:	db12      	blt.n	800dea0 <USB_EPSetStall+0x54>
 800de7a:	68bb      	ldr	r3, [r7, #8]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d00f      	beq.n	800dea0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800de80:	68bb      	ldr	r3, [r7, #8]
 800de82:	015a      	lsls	r2, r3, #5
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	4413      	add	r3, r2
 800de88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	68ba      	ldr	r2, [r7, #8]
 800de90:	0151      	lsls	r1, r2, #5
 800de92:	68fa      	ldr	r2, [r7, #12]
 800de94:	440a      	add	r2, r1
 800de96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800de9a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800de9e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800dea0:	68bb      	ldr	r3, [r7, #8]
 800dea2:	015a      	lsls	r2, r3, #5
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	4413      	add	r3, r2
 800dea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	68ba      	ldr	r2, [r7, #8]
 800deb0:	0151      	lsls	r1, r2, #5
 800deb2:	68fa      	ldr	r2, [r7, #12]
 800deb4:	440a      	add	r2, r1
 800deb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800deba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800debe:	6013      	str	r3, [r2, #0]
 800dec0:	e02b      	b.n	800df1a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800dec2:	68bb      	ldr	r3, [r7, #8]
 800dec4:	015a      	lsls	r2, r3, #5
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	4413      	add	r3, r2
 800deca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	db12      	blt.n	800defa <USB_EPSetStall+0xae>
 800ded4:	68bb      	ldr	r3, [r7, #8]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d00f      	beq.n	800defa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800deda:	68bb      	ldr	r3, [r7, #8]
 800dedc:	015a      	lsls	r2, r3, #5
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	4413      	add	r3, r2
 800dee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	68ba      	ldr	r2, [r7, #8]
 800deea:	0151      	lsls	r1, r2, #5
 800deec:	68fa      	ldr	r2, [r7, #12]
 800deee:	440a      	add	r2, r1
 800def0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800def4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800def8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800defa:	68bb      	ldr	r3, [r7, #8]
 800defc:	015a      	lsls	r2, r3, #5
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	4413      	add	r3, r2
 800df02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	68ba      	ldr	r2, [r7, #8]
 800df0a:	0151      	lsls	r1, r2, #5
 800df0c:	68fa      	ldr	r2, [r7, #12]
 800df0e:	440a      	add	r2, r1
 800df10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800df14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800df18:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800df1a:	2300      	movs	r3, #0
}
 800df1c:	4618      	mov	r0, r3
 800df1e:	3714      	adds	r7, #20
 800df20:	46bd      	mov	sp, r7
 800df22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df26:	4770      	bx	lr

0800df28 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800df28:	b480      	push	{r7}
 800df2a:	b085      	sub	sp, #20
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	6078      	str	r0, [r7, #4]
 800df30:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800df36:	683b      	ldr	r3, [r7, #0]
 800df38:	781b      	ldrb	r3, [r3, #0]
 800df3a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800df3c:	683b      	ldr	r3, [r7, #0]
 800df3e:	785b      	ldrb	r3, [r3, #1]
 800df40:	2b01      	cmp	r3, #1
 800df42:	d128      	bne.n	800df96 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800df44:	68bb      	ldr	r3, [r7, #8]
 800df46:	015a      	lsls	r2, r3, #5
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	4413      	add	r3, r2
 800df4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	68ba      	ldr	r2, [r7, #8]
 800df54:	0151      	lsls	r1, r2, #5
 800df56:	68fa      	ldr	r2, [r7, #12]
 800df58:	440a      	add	r2, r1
 800df5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800df5e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800df62:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800df64:	683b      	ldr	r3, [r7, #0]
 800df66:	78db      	ldrb	r3, [r3, #3]
 800df68:	2b03      	cmp	r3, #3
 800df6a:	d003      	beq.n	800df74 <USB_EPClearStall+0x4c>
 800df6c:	683b      	ldr	r3, [r7, #0]
 800df6e:	78db      	ldrb	r3, [r3, #3]
 800df70:	2b02      	cmp	r3, #2
 800df72:	d138      	bne.n	800dfe6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800df74:	68bb      	ldr	r3, [r7, #8]
 800df76:	015a      	lsls	r2, r3, #5
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	4413      	add	r3, r2
 800df7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	68ba      	ldr	r2, [r7, #8]
 800df84:	0151      	lsls	r1, r2, #5
 800df86:	68fa      	ldr	r2, [r7, #12]
 800df88:	440a      	add	r2, r1
 800df8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800df8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800df92:	6013      	str	r3, [r2, #0]
 800df94:	e027      	b.n	800dfe6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800df96:	68bb      	ldr	r3, [r7, #8]
 800df98:	015a      	lsls	r2, r3, #5
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	4413      	add	r3, r2
 800df9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	68ba      	ldr	r2, [r7, #8]
 800dfa6:	0151      	lsls	r1, r2, #5
 800dfa8:	68fa      	ldr	r2, [r7, #12]
 800dfaa:	440a      	add	r2, r1
 800dfac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dfb0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800dfb4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800dfb6:	683b      	ldr	r3, [r7, #0]
 800dfb8:	78db      	ldrb	r3, [r3, #3]
 800dfba:	2b03      	cmp	r3, #3
 800dfbc:	d003      	beq.n	800dfc6 <USB_EPClearStall+0x9e>
 800dfbe:	683b      	ldr	r3, [r7, #0]
 800dfc0:	78db      	ldrb	r3, [r3, #3]
 800dfc2:	2b02      	cmp	r3, #2
 800dfc4:	d10f      	bne.n	800dfe6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800dfc6:	68bb      	ldr	r3, [r7, #8]
 800dfc8:	015a      	lsls	r2, r3, #5
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	4413      	add	r3, r2
 800dfce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	68ba      	ldr	r2, [r7, #8]
 800dfd6:	0151      	lsls	r1, r2, #5
 800dfd8:	68fa      	ldr	r2, [r7, #12]
 800dfda:	440a      	add	r2, r1
 800dfdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dfe0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dfe4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800dfe6:	2300      	movs	r3, #0
}
 800dfe8:	4618      	mov	r0, r3
 800dfea:	3714      	adds	r7, #20
 800dfec:	46bd      	mov	sp, r7
 800dfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff2:	4770      	bx	lr

0800dff4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800dff4:	b480      	push	{r7}
 800dff6:	b085      	sub	sp, #20
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	6078      	str	r0, [r7, #4]
 800dffc:	460b      	mov	r3, r1
 800dffe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	68fa      	ldr	r2, [r7, #12]
 800e00e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e012:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800e016:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e01e:	681a      	ldr	r2, [r3, #0]
 800e020:	78fb      	ldrb	r3, [r7, #3]
 800e022:	011b      	lsls	r3, r3, #4
 800e024:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800e028:	68f9      	ldr	r1, [r7, #12]
 800e02a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e02e:	4313      	orrs	r3, r2
 800e030:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800e032:	2300      	movs	r3, #0
}
 800e034:	4618      	mov	r0, r3
 800e036:	3714      	adds	r7, #20
 800e038:	46bd      	mov	sp, r7
 800e03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e03e:	4770      	bx	lr

0800e040 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e040:	b580      	push	{r7, lr}
 800e042:	b084      	sub	sp, #16
 800e044:	af00      	add	r7, sp, #0
 800e046:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e052:	685b      	ldr	r3, [r3, #4]
 800e054:	68fa      	ldr	r2, [r7, #12]
 800e056:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e05a:	f023 0302 	bic.w	r3, r3, #2
 800e05e:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800e060:	2003      	movs	r0, #3
 800e062:	f7f3 fd1b 	bl	8001a9c <HAL_Delay>

  return HAL_OK;
 800e066:	2300      	movs	r3, #0
}
 800e068:	4618      	mov	r0, r3
 800e06a:	3710      	adds	r7, #16
 800e06c:	46bd      	mov	sp, r7
 800e06e:	bd80      	pop	{r7, pc}

0800e070 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e070:	b580      	push	{r7, lr}
 800e072:	b084      	sub	sp, #16
 800e074:	af00      	add	r7, sp, #0
 800e076:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e082:	685b      	ldr	r3, [r3, #4]
 800e084:	68fa      	ldr	r2, [r7, #12]
 800e086:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e08a:	f043 0302 	orr.w	r3, r3, #2
 800e08e:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800e090:	2003      	movs	r0, #3
 800e092:	f7f3 fd03 	bl	8001a9c <HAL_Delay>

  return HAL_OK;
 800e096:	2300      	movs	r3, #0
}
 800e098:	4618      	mov	r0, r3
 800e09a:	3710      	adds	r7, #16
 800e09c:	46bd      	mov	sp, r7
 800e09e:	bd80      	pop	{r7, pc}

0800e0a0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800e0a0:	b480      	push	{r7}
 800e0a2:	b085      	sub	sp, #20
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	695b      	ldr	r3, [r3, #20]
 800e0ac:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	699b      	ldr	r3, [r3, #24]
 800e0b2:	68fa      	ldr	r2, [r7, #12]
 800e0b4:	4013      	ands	r3, r2
 800e0b6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800e0b8:	68fb      	ldr	r3, [r7, #12]
}
 800e0ba:	4618      	mov	r0, r3
 800e0bc:	3714      	adds	r7, #20
 800e0be:	46bd      	mov	sp, r7
 800e0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c4:	4770      	bx	lr

0800e0c6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e0c6:	b480      	push	{r7}
 800e0c8:	b085      	sub	sp, #20
 800e0ca:	af00      	add	r7, sp, #0
 800e0cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e0d8:	699b      	ldr	r3, [r3, #24]
 800e0da:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e0e2:	69db      	ldr	r3, [r3, #28]
 800e0e4:	68ba      	ldr	r2, [r7, #8]
 800e0e6:	4013      	ands	r3, r2
 800e0e8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800e0ea:	68bb      	ldr	r3, [r7, #8]
 800e0ec:	0c1b      	lsrs	r3, r3, #16
}
 800e0ee:	4618      	mov	r0, r3
 800e0f0:	3714      	adds	r7, #20
 800e0f2:	46bd      	mov	sp, r7
 800e0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f8:	4770      	bx	lr

0800e0fa <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e0fa:	b480      	push	{r7}
 800e0fc:	b085      	sub	sp, #20
 800e0fe:	af00      	add	r7, sp, #0
 800e100:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e10c:	699b      	ldr	r3, [r3, #24]
 800e10e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e116:	69db      	ldr	r3, [r3, #28]
 800e118:	68ba      	ldr	r2, [r7, #8]
 800e11a:	4013      	ands	r3, r2
 800e11c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800e11e:	68bb      	ldr	r3, [r7, #8]
 800e120:	b29b      	uxth	r3, r3
}
 800e122:	4618      	mov	r0, r3
 800e124:	3714      	adds	r7, #20
 800e126:	46bd      	mov	sp, r7
 800e128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e12c:	4770      	bx	lr

0800e12e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e12e:	b480      	push	{r7}
 800e130:	b085      	sub	sp, #20
 800e132:	af00      	add	r7, sp, #0
 800e134:	6078      	str	r0, [r7, #4]
 800e136:	460b      	mov	r3, r1
 800e138:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800e13e:	78fb      	ldrb	r3, [r7, #3]
 800e140:	015a      	lsls	r2, r3, #5
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	4413      	add	r3, r2
 800e146:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e14a:	689b      	ldr	r3, [r3, #8]
 800e14c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e154:	695b      	ldr	r3, [r3, #20]
 800e156:	68ba      	ldr	r2, [r7, #8]
 800e158:	4013      	ands	r3, r2
 800e15a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e15c:	68bb      	ldr	r3, [r7, #8]
}
 800e15e:	4618      	mov	r0, r3
 800e160:	3714      	adds	r7, #20
 800e162:	46bd      	mov	sp, r7
 800e164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e168:	4770      	bx	lr

0800e16a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e16a:	b480      	push	{r7}
 800e16c:	b087      	sub	sp, #28
 800e16e:	af00      	add	r7, sp, #0
 800e170:	6078      	str	r0, [r7, #4]
 800e172:	460b      	mov	r3, r1
 800e174:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800e17a:	697b      	ldr	r3, [r7, #20]
 800e17c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e180:	691b      	ldr	r3, [r3, #16]
 800e182:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800e184:	697b      	ldr	r3, [r7, #20]
 800e186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e18a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e18c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800e18e:	78fb      	ldrb	r3, [r7, #3]
 800e190:	f003 030f 	and.w	r3, r3, #15
 800e194:	68fa      	ldr	r2, [r7, #12]
 800e196:	fa22 f303 	lsr.w	r3, r2, r3
 800e19a:	01db      	lsls	r3, r3, #7
 800e19c:	b2db      	uxtb	r3, r3
 800e19e:	693a      	ldr	r2, [r7, #16]
 800e1a0:	4313      	orrs	r3, r2
 800e1a2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800e1a4:	78fb      	ldrb	r3, [r7, #3]
 800e1a6:	015a      	lsls	r2, r3, #5
 800e1a8:	697b      	ldr	r3, [r7, #20]
 800e1aa:	4413      	add	r3, r2
 800e1ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e1b0:	689b      	ldr	r3, [r3, #8]
 800e1b2:	693a      	ldr	r2, [r7, #16]
 800e1b4:	4013      	ands	r3, r2
 800e1b6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e1b8:	68bb      	ldr	r3, [r7, #8]
}
 800e1ba:	4618      	mov	r0, r3
 800e1bc:	371c      	adds	r7, #28
 800e1be:	46bd      	mov	sp, r7
 800e1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c4:	4770      	bx	lr

0800e1c6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800e1c6:	b480      	push	{r7}
 800e1c8:	b083      	sub	sp, #12
 800e1ca:	af00      	add	r7, sp, #0
 800e1cc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	695b      	ldr	r3, [r3, #20]
 800e1d2:	f003 0301 	and.w	r3, r3, #1
}
 800e1d6:	4618      	mov	r0, r3
 800e1d8:	370c      	adds	r7, #12
 800e1da:	46bd      	mov	sp, r7
 800e1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e0:	4770      	bx	lr
	...

0800e1e4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800e1e4:	b480      	push	{r7}
 800e1e6:	b085      	sub	sp, #20
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e1f6:	681a      	ldr	r2, [r3, #0]
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e1fe:	4619      	mov	r1, r3
 800e200:	4b09      	ldr	r3, [pc, #36]	; (800e228 <USB_ActivateSetup+0x44>)
 800e202:	4013      	ands	r3, r2
 800e204:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e20c:	685b      	ldr	r3, [r3, #4]
 800e20e:	68fa      	ldr	r2, [r7, #12]
 800e210:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e214:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e218:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e21a:	2300      	movs	r3, #0
}
 800e21c:	4618      	mov	r0, r3
 800e21e:	3714      	adds	r7, #20
 800e220:	46bd      	mov	sp, r7
 800e222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e226:	4770      	bx	lr
 800e228:	fffff800 	.word	0xfffff800

0800e22c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800e22c:	b480      	push	{r7}
 800e22e:	b087      	sub	sp, #28
 800e230:	af00      	add	r7, sp, #0
 800e232:	60f8      	str	r0, [r7, #12]
 800e234:	460b      	mov	r3, r1
 800e236:	607a      	str	r2, [r7, #4]
 800e238:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	333c      	adds	r3, #60	; 0x3c
 800e242:	3304      	adds	r3, #4
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800e248:	693b      	ldr	r3, [r7, #16]
 800e24a:	4a26      	ldr	r2, [pc, #152]	; (800e2e4 <USB_EP0_OutStart+0xb8>)
 800e24c:	4293      	cmp	r3, r2
 800e24e:	d90a      	bls.n	800e266 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e250:	697b      	ldr	r3, [r7, #20]
 800e252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e25c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e260:	d101      	bne.n	800e266 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800e262:	2300      	movs	r3, #0
 800e264:	e037      	b.n	800e2d6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800e266:	697b      	ldr	r3, [r7, #20]
 800e268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e26c:	461a      	mov	r2, r3
 800e26e:	2300      	movs	r3, #0
 800e270:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e272:	697b      	ldr	r3, [r7, #20]
 800e274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e278:	691b      	ldr	r3, [r3, #16]
 800e27a:	697a      	ldr	r2, [r7, #20]
 800e27c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e280:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e284:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800e286:	697b      	ldr	r3, [r7, #20]
 800e288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e28c:	691b      	ldr	r3, [r3, #16]
 800e28e:	697a      	ldr	r2, [r7, #20]
 800e290:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e294:	f043 0318 	orr.w	r3, r3, #24
 800e298:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800e29a:	697b      	ldr	r3, [r7, #20]
 800e29c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2a0:	691b      	ldr	r3, [r3, #16]
 800e2a2:	697a      	ldr	r2, [r7, #20]
 800e2a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e2a8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800e2ac:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800e2ae:	7afb      	ldrb	r3, [r7, #11]
 800e2b0:	2b01      	cmp	r3, #1
 800e2b2:	d10f      	bne.n	800e2d4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800e2b4:	697b      	ldr	r3, [r7, #20]
 800e2b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2ba:	461a      	mov	r2, r3
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800e2c0:	697b      	ldr	r3, [r7, #20]
 800e2c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	697a      	ldr	r2, [r7, #20]
 800e2ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e2ce:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800e2d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e2d4:	2300      	movs	r3, #0
}
 800e2d6:	4618      	mov	r0, r3
 800e2d8:	371c      	adds	r7, #28
 800e2da:	46bd      	mov	sp, r7
 800e2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e0:	4770      	bx	lr
 800e2e2:	bf00      	nop
 800e2e4:	4f54300a 	.word	0x4f54300a

0800e2e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800e2e8:	b480      	push	{r7}
 800e2ea:	b085      	sub	sp, #20
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800e2f0:	2300      	movs	r3, #0
 800e2f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	3301      	adds	r3, #1
 800e2f8:	60fb      	str	r3, [r7, #12]
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	4a13      	ldr	r2, [pc, #76]	; (800e34c <USB_CoreReset+0x64>)
 800e2fe:	4293      	cmp	r3, r2
 800e300:	d901      	bls.n	800e306 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800e302:	2303      	movs	r3, #3
 800e304:	e01b      	b.n	800e33e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	691b      	ldr	r3, [r3, #16]
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	daf2      	bge.n	800e2f4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800e30e:	2300      	movs	r3, #0
 800e310:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	691b      	ldr	r3, [r3, #16]
 800e316:	f043 0201 	orr.w	r2, r3, #1
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	3301      	adds	r3, #1
 800e322:	60fb      	str	r3, [r7, #12]
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	4a09      	ldr	r2, [pc, #36]	; (800e34c <USB_CoreReset+0x64>)
 800e328:	4293      	cmp	r3, r2
 800e32a:	d901      	bls.n	800e330 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800e32c:	2303      	movs	r3, #3
 800e32e:	e006      	b.n	800e33e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	691b      	ldr	r3, [r3, #16]
 800e334:	f003 0301 	and.w	r3, r3, #1
 800e338:	2b01      	cmp	r3, #1
 800e33a:	d0f0      	beq.n	800e31e <USB_CoreReset+0x36>

  return HAL_OK;
 800e33c:	2300      	movs	r3, #0
}
 800e33e:	4618      	mov	r0, r3
 800e340:	3714      	adds	r7, #20
 800e342:	46bd      	mov	sp, r7
 800e344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e348:	4770      	bx	lr
 800e34a:	bf00      	nop
 800e34c:	00030d40 	.word	0x00030d40

0800e350 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800e350:	b580      	push	{r7, lr}
 800e352:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800e354:	4904      	ldr	r1, [pc, #16]	; (800e368 <MX_FATFS_Init+0x18>)
 800e356:	4805      	ldr	r0, [pc, #20]	; (800e36c <MX_FATFS_Init+0x1c>)
 800e358:	f005 fbec 	bl	8013b34 <FATFS_LinkDriver>
 800e35c:	4603      	mov	r3, r0
 800e35e:	461a      	mov	r2, r3
 800e360:	4b03      	ldr	r3, [pc, #12]	; (800e370 <MX_FATFS_Init+0x20>)
 800e362:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800e364:	bf00      	nop
 800e366:	bd80      	pop	{r7, pc}
 800e368:	24040d7c 	.word	0x24040d7c
 800e36c:	08015744 	.word	0x08015744
 800e370:	24040d78 	.word	0x24040d78

0800e374 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800e374:	b480      	push	{r7}
 800e376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800e378:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800e37a:	4618      	mov	r0, r3
 800e37c:	46bd      	mov	sp, r7
 800e37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e382:	4770      	bx	lr

0800e384 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800e384:	b580      	push	{r7, lr}
 800e386:	b082      	sub	sp, #8
 800e388:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800e38a:	2300      	movs	r3, #0
 800e38c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800e38e:	f000 f885 	bl	800e49c <BSP_SD_IsDetected>
 800e392:	4603      	mov	r3, r0
 800e394:	2b01      	cmp	r3, #1
 800e396:	d001      	beq.n	800e39c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800e398:	2302      	movs	r3, #2
 800e39a:	e012      	b.n	800e3c2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800e39c:	480b      	ldr	r0, [pc, #44]	; (800e3cc <BSP_SD_Init+0x48>)
 800e39e:	f7fa fdaf 	bl	8008f00 <HAL_SD_Init>
 800e3a2:	4603      	mov	r3, r0
 800e3a4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800e3a6:	79fb      	ldrb	r3, [r7, #7]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d109      	bne.n	800e3c0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800e3ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800e3b0:	4806      	ldr	r0, [pc, #24]	; (800e3cc <BSP_SD_Init+0x48>)
 800e3b2:	f7fb ff83 	bl	800a2bc <HAL_SD_ConfigWideBusOperation>
 800e3b6:	4603      	mov	r3, r0
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d001      	beq.n	800e3c0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800e3bc:	2301      	movs	r3, #1
 800e3be:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800e3c0:	79fb      	ldrb	r3, [r7, #7]
}
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	3708      	adds	r7, #8
 800e3c6:	46bd      	mov	sp, r7
 800e3c8:	bd80      	pop	{r7, pc}
 800e3ca:	bf00      	nop
 800e3cc:	24040574 	.word	0x24040574

0800e3d0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800e3d0:	b580      	push	{r7, lr}
 800e3d2:	b086      	sub	sp, #24
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	60f8      	str	r0, [r7, #12]
 800e3d8:	60b9      	str	r1, [r7, #8]
 800e3da:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800e3dc:	2300      	movs	r3, #0
 800e3de:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	68ba      	ldr	r2, [r7, #8]
 800e3e4:	68f9      	ldr	r1, [r7, #12]
 800e3e6:	4806      	ldr	r0, [pc, #24]	; (800e400 <BSP_SD_ReadBlocks_DMA+0x30>)
 800e3e8:	f7fb f9c6 	bl	8009778 <HAL_SD_ReadBlocks_DMA>
 800e3ec:	4603      	mov	r3, r0
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d001      	beq.n	800e3f6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800e3f2:	2301      	movs	r3, #1
 800e3f4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e3f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	3718      	adds	r7, #24
 800e3fc:	46bd      	mov	sp, r7
 800e3fe:	bd80      	pop	{r7, pc}
 800e400:	24040574 	.word	0x24040574

0800e404 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800e404:	b580      	push	{r7, lr}
 800e406:	b086      	sub	sp, #24
 800e408:	af00      	add	r7, sp, #0
 800e40a:	60f8      	str	r0, [r7, #12]
 800e40c:	60b9      	str	r1, [r7, #8]
 800e40e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800e410:	2300      	movs	r3, #0
 800e412:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	68ba      	ldr	r2, [r7, #8]
 800e418:	68f9      	ldr	r1, [r7, #12]
 800e41a:	4806      	ldr	r0, [pc, #24]	; (800e434 <BSP_SD_WriteBlocks_DMA+0x30>)
 800e41c:	f7fb fa54 	bl	80098c8 <HAL_SD_WriteBlocks_DMA>
 800e420:	4603      	mov	r3, r0
 800e422:	2b00      	cmp	r3, #0
 800e424:	d001      	beq.n	800e42a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800e426:	2301      	movs	r3, #1
 800e428:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e42a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e42c:	4618      	mov	r0, r3
 800e42e:	3718      	adds	r7, #24
 800e430:	46bd      	mov	sp, r7
 800e432:	bd80      	pop	{r7, pc}
 800e434:	24040574 	.word	0x24040574

0800e438 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800e438:	b580      	push	{r7, lr}
 800e43a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800e43c:	4805      	ldr	r0, [pc, #20]	; (800e454 <BSP_SD_GetCardState+0x1c>)
 800e43e:	f7fb ffe7 	bl	800a410 <HAL_SD_GetCardState>
 800e442:	4603      	mov	r3, r0
 800e444:	2b04      	cmp	r3, #4
 800e446:	bf14      	ite	ne
 800e448:	2301      	movne	r3, #1
 800e44a:	2300      	moveq	r3, #0
 800e44c:	b2db      	uxtb	r3, r3
}
 800e44e:	4618      	mov	r0, r3
 800e450:	bd80      	pop	{r7, pc}
 800e452:	bf00      	nop
 800e454:	24040574 	.word	0x24040574

0800e458 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800e458:	b580      	push	{r7, lr}
 800e45a:	b082      	sub	sp, #8
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800e460:	6879      	ldr	r1, [r7, #4]
 800e462:	4803      	ldr	r0, [pc, #12]	; (800e470 <BSP_SD_GetCardInfo+0x18>)
 800e464:	f7fb fefe 	bl	800a264 <HAL_SD_GetCardInfo>
}
 800e468:	bf00      	nop
 800e46a:	3708      	adds	r7, #8
 800e46c:	46bd      	mov	sp, r7
 800e46e:	bd80      	pop	{r7, pc}
 800e470:	24040574 	.word	0x24040574

0800e474 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800e474:	b580      	push	{r7, lr}
 800e476:	b082      	sub	sp, #8
 800e478:	af00      	add	r7, sp, #0
 800e47a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800e47c:	f000 f9a0 	bl	800e7c0 <BSP_SD_WriteCpltCallback>
}
 800e480:	bf00      	nop
 800e482:	3708      	adds	r7, #8
 800e484:	46bd      	mov	sp, r7
 800e486:	bd80      	pop	{r7, pc}

0800e488 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800e488:	b580      	push	{r7, lr}
 800e48a:	b082      	sub	sp, #8
 800e48c:	af00      	add	r7, sp, #0
 800e48e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800e490:	f000 f9a2 	bl	800e7d8 <BSP_SD_ReadCpltCallback>
}
 800e494:	bf00      	nop
 800e496:	3708      	adds	r7, #8
 800e498:	46bd      	mov	sp, r7
 800e49a:	bd80      	pop	{r7, pc}

0800e49c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800e49c:	b580      	push	{r7, lr}
 800e49e:	b082      	sub	sp, #8
 800e4a0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800e4a2:	2301      	movs	r3, #1
 800e4a4:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800e4a6:	f000 f80b 	bl	800e4c0 <BSP_PlatformIsDetected>
 800e4aa:	4603      	mov	r3, r0
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d101      	bne.n	800e4b4 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800e4b0:	2300      	movs	r3, #0
 800e4b2:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800e4b4:	79fb      	ldrb	r3, [r7, #7]
 800e4b6:	b2db      	uxtb	r3, r3
}
 800e4b8:	4618      	mov	r0, r3
 800e4ba:	3708      	adds	r7, #8
 800e4bc:	46bd      	mov	sp, r7
 800e4be:	bd80      	pop	{r7, pc}

0800e4c0 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800e4c0:	b580      	push	{r7, lr}
 800e4c2:	b082      	sub	sp, #8
 800e4c4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800e4c6:	2301      	movs	r3, #1
 800e4c8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800e4ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800e4ce:	4806      	ldr	r0, [pc, #24]	; (800e4e8 <BSP_PlatformIsDetected+0x28>)
 800e4d0:	f7f6 fbd0 	bl	8004c74 <HAL_GPIO_ReadPin>
 800e4d4:	4603      	mov	r3, r0
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d001      	beq.n	800e4de <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800e4da:	2300      	movs	r3, #0
 800e4dc:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800e4de:	79fb      	ldrb	r3, [r7, #7]
}
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	3708      	adds	r7, #8
 800e4e4:	46bd      	mov	sp, r7
 800e4e6:	bd80      	pop	{r7, pc}
 800e4e8:	58020000 	.word	0x58020000

0800e4ec <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800e4ec:	b580      	push	{r7, lr}
 800e4ee:	b084      	sub	sp, #16
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800e4f4:	f7f3 fac6 	bl	8001a84 <HAL_GetTick>
 800e4f8:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800e4fa:	e006      	b.n	800e50a <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e4fc:	f7ff ff9c 	bl	800e438 <BSP_SD_GetCardState>
 800e500:	4603      	mov	r3, r0
 800e502:	2b00      	cmp	r3, #0
 800e504:	d101      	bne.n	800e50a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800e506:	2300      	movs	r3, #0
 800e508:	e009      	b.n	800e51e <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800e50a:	f7f3 fabb 	bl	8001a84 <HAL_GetTick>
 800e50e:	4602      	mov	r2, r0
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	1ad3      	subs	r3, r2, r3
 800e514:	687a      	ldr	r2, [r7, #4]
 800e516:	429a      	cmp	r2, r3
 800e518:	d8f0      	bhi.n	800e4fc <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800e51a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e51e:	4618      	mov	r0, r3
 800e520:	3710      	adds	r7, #16
 800e522:	46bd      	mov	sp, r7
 800e524:	bd80      	pop	{r7, pc}
	...

0800e528 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800e528:	b580      	push	{r7, lr}
 800e52a:	b082      	sub	sp, #8
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	4603      	mov	r3, r0
 800e530:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800e532:	4b0b      	ldr	r3, [pc, #44]	; (800e560 <SD_CheckStatus+0x38>)
 800e534:	2201      	movs	r2, #1
 800e536:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800e538:	f7ff ff7e 	bl	800e438 <BSP_SD_GetCardState>
 800e53c:	4603      	mov	r3, r0
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d107      	bne.n	800e552 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800e542:	4b07      	ldr	r3, [pc, #28]	; (800e560 <SD_CheckStatus+0x38>)
 800e544:	781b      	ldrb	r3, [r3, #0]
 800e546:	b2db      	uxtb	r3, r3
 800e548:	f023 0301 	bic.w	r3, r3, #1
 800e54c:	b2da      	uxtb	r2, r3
 800e54e:	4b04      	ldr	r3, [pc, #16]	; (800e560 <SD_CheckStatus+0x38>)
 800e550:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800e552:	4b03      	ldr	r3, [pc, #12]	; (800e560 <SD_CheckStatus+0x38>)
 800e554:	781b      	ldrb	r3, [r3, #0]
 800e556:	b2db      	uxtb	r3, r3
}
 800e558:	4618      	mov	r0, r3
 800e55a:	3708      	adds	r7, #8
 800e55c:	46bd      	mov	sp, r7
 800e55e:	bd80      	pop	{r7, pc}
 800e560:	2400000d 	.word	0x2400000d

0800e564 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800e564:	b580      	push	{r7, lr}
 800e566:	b082      	sub	sp, #8
 800e568:	af00      	add	r7, sp, #0
 800e56a:	4603      	mov	r3, r0
 800e56c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800e56e:	f7ff ff09 	bl	800e384 <BSP_SD_Init>
 800e572:	4603      	mov	r3, r0
 800e574:	2b00      	cmp	r3, #0
 800e576:	d107      	bne.n	800e588 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800e578:	79fb      	ldrb	r3, [r7, #7]
 800e57a:	4618      	mov	r0, r3
 800e57c:	f7ff ffd4 	bl	800e528 <SD_CheckStatus>
 800e580:	4603      	mov	r3, r0
 800e582:	461a      	mov	r2, r3
 800e584:	4b04      	ldr	r3, [pc, #16]	; (800e598 <SD_initialize+0x34>)
 800e586:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800e588:	4b03      	ldr	r3, [pc, #12]	; (800e598 <SD_initialize+0x34>)
 800e58a:	781b      	ldrb	r3, [r3, #0]
 800e58c:	b2db      	uxtb	r3, r3
}
 800e58e:	4618      	mov	r0, r3
 800e590:	3708      	adds	r7, #8
 800e592:	46bd      	mov	sp, r7
 800e594:	bd80      	pop	{r7, pc}
 800e596:	bf00      	nop
 800e598:	2400000d 	.word	0x2400000d

0800e59c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800e59c:	b580      	push	{r7, lr}
 800e59e:	b082      	sub	sp, #8
 800e5a0:	af00      	add	r7, sp, #0
 800e5a2:	4603      	mov	r3, r0
 800e5a4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800e5a6:	79fb      	ldrb	r3, [r7, #7]
 800e5a8:	4618      	mov	r0, r3
 800e5aa:	f7ff ffbd 	bl	800e528 <SD_CheckStatus>
 800e5ae:	4603      	mov	r3, r0
}
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	3708      	adds	r7, #8
 800e5b4:	46bd      	mov	sp, r7
 800e5b6:	bd80      	pop	{r7, pc}

0800e5b8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800e5b8:	b580      	push	{r7, lr}
 800e5ba:	b086      	sub	sp, #24
 800e5bc:	af00      	add	r7, sp, #0
 800e5be:	60b9      	str	r1, [r7, #8]
 800e5c0:	607a      	str	r2, [r7, #4]
 800e5c2:	603b      	str	r3, [r7, #0]
 800e5c4:	4603      	mov	r3, r0
 800e5c6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e5c8:	2301      	movs	r3, #1
 800e5ca:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800e5cc:	f247 5030 	movw	r0, #30000	; 0x7530
 800e5d0:	f7ff ff8c 	bl	800e4ec <SD_CheckStatusWithTimeout>
 800e5d4:	4603      	mov	r3, r0
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	da01      	bge.n	800e5de <SD_read+0x26>
  {
    return res;
 800e5da:	7dfb      	ldrb	r3, [r7, #23]
 800e5dc:	e03b      	b.n	800e656 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800e5de:	683a      	ldr	r2, [r7, #0]
 800e5e0:	6879      	ldr	r1, [r7, #4]
 800e5e2:	68b8      	ldr	r0, [r7, #8]
 800e5e4:	f7ff fef4 	bl	800e3d0 <BSP_SD_ReadBlocks_DMA>
 800e5e8:	4603      	mov	r3, r0
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d132      	bne.n	800e654 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800e5ee:	4b1c      	ldr	r3, [pc, #112]	; (800e660 <SD_read+0xa8>)
 800e5f0:	2200      	movs	r2, #0
 800e5f2:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800e5f4:	f7f3 fa46 	bl	8001a84 <HAL_GetTick>
 800e5f8:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800e5fa:	bf00      	nop
 800e5fc:	4b18      	ldr	r3, [pc, #96]	; (800e660 <SD_read+0xa8>)
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	2b00      	cmp	r3, #0
 800e602:	d108      	bne.n	800e616 <SD_read+0x5e>
 800e604:	f7f3 fa3e 	bl	8001a84 <HAL_GetTick>
 800e608:	4602      	mov	r2, r0
 800e60a:	693b      	ldr	r3, [r7, #16]
 800e60c:	1ad3      	subs	r3, r2, r3
 800e60e:	f247 522f 	movw	r2, #29999	; 0x752f
 800e612:	4293      	cmp	r3, r2
 800e614:	d9f2      	bls.n	800e5fc <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 800e616:	4b12      	ldr	r3, [pc, #72]	; (800e660 <SD_read+0xa8>)
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d102      	bne.n	800e624 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800e61e:	2301      	movs	r3, #1
 800e620:	75fb      	strb	r3, [r7, #23]
 800e622:	e017      	b.n	800e654 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800e624:	4b0e      	ldr	r3, [pc, #56]	; (800e660 <SD_read+0xa8>)
 800e626:	2200      	movs	r2, #0
 800e628:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800e62a:	f7f3 fa2b 	bl	8001a84 <HAL_GetTick>
 800e62e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e630:	e007      	b.n	800e642 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e632:	f7ff ff01 	bl	800e438 <BSP_SD_GetCardState>
 800e636:	4603      	mov	r3, r0
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d102      	bne.n	800e642 <SD_read+0x8a>
          {
            res = RES_OK;
 800e63c:	2300      	movs	r3, #0
 800e63e:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800e640:	e008      	b.n	800e654 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e642:	f7f3 fa1f 	bl	8001a84 <HAL_GetTick>
 800e646:	4602      	mov	r2, r0
 800e648:	693b      	ldr	r3, [r7, #16]
 800e64a:	1ad3      	subs	r3, r2, r3
 800e64c:	f247 522f 	movw	r2, #29999	; 0x752f
 800e650:	4293      	cmp	r3, r2
 800e652:	d9ee      	bls.n	800e632 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800e654:	7dfb      	ldrb	r3, [r7, #23]
}
 800e656:	4618      	mov	r0, r3
 800e658:	3718      	adds	r7, #24
 800e65a:	46bd      	mov	sp, r7
 800e65c:	bd80      	pop	{r7, pc}
 800e65e:	bf00      	nop
 800e660:	240401fc 	.word	0x240401fc

0800e664 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800e664:	b580      	push	{r7, lr}
 800e666:	b086      	sub	sp, #24
 800e668:	af00      	add	r7, sp, #0
 800e66a:	60b9      	str	r1, [r7, #8]
 800e66c:	607a      	str	r2, [r7, #4]
 800e66e:	603b      	str	r3, [r7, #0]
 800e670:	4603      	mov	r3, r0
 800e672:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e674:	2301      	movs	r3, #1
 800e676:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800e678:	4b24      	ldr	r3, [pc, #144]	; (800e70c <SD_write+0xa8>)
 800e67a:	2200      	movs	r2, #0
 800e67c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800e67e:	f247 5030 	movw	r0, #30000	; 0x7530
 800e682:	f7ff ff33 	bl	800e4ec <SD_CheckStatusWithTimeout>
 800e686:	4603      	mov	r3, r0
 800e688:	2b00      	cmp	r3, #0
 800e68a:	da01      	bge.n	800e690 <SD_write+0x2c>
  {
    return res;
 800e68c:	7dfb      	ldrb	r3, [r7, #23]
 800e68e:	e038      	b.n	800e702 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800e690:	683a      	ldr	r2, [r7, #0]
 800e692:	6879      	ldr	r1, [r7, #4]
 800e694:	68b8      	ldr	r0, [r7, #8]
 800e696:	f7ff feb5 	bl	800e404 <BSP_SD_WriteBlocks_DMA>
 800e69a:	4603      	mov	r3, r0
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d12f      	bne.n	800e700 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800e6a0:	f7f3 f9f0 	bl	8001a84 <HAL_GetTick>
 800e6a4:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800e6a6:	bf00      	nop
 800e6a8:	4b18      	ldr	r3, [pc, #96]	; (800e70c <SD_write+0xa8>)
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d108      	bne.n	800e6c2 <SD_write+0x5e>
 800e6b0:	f7f3 f9e8 	bl	8001a84 <HAL_GetTick>
 800e6b4:	4602      	mov	r2, r0
 800e6b6:	693b      	ldr	r3, [r7, #16]
 800e6b8:	1ad3      	subs	r3, r2, r3
 800e6ba:	f247 522f 	movw	r2, #29999	; 0x752f
 800e6be:	4293      	cmp	r3, r2
 800e6c0:	d9f2      	bls.n	800e6a8 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800e6c2:	4b12      	ldr	r3, [pc, #72]	; (800e70c <SD_write+0xa8>)
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d102      	bne.n	800e6d0 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800e6ca:	2301      	movs	r3, #1
 800e6cc:	75fb      	strb	r3, [r7, #23]
 800e6ce:	e017      	b.n	800e700 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800e6d0:	4b0e      	ldr	r3, [pc, #56]	; (800e70c <SD_write+0xa8>)
 800e6d2:	2200      	movs	r2, #0
 800e6d4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800e6d6:	f7f3 f9d5 	bl	8001a84 <HAL_GetTick>
 800e6da:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e6dc:	e007      	b.n	800e6ee <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e6de:	f7ff feab 	bl	800e438 <BSP_SD_GetCardState>
 800e6e2:	4603      	mov	r3, r0
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d102      	bne.n	800e6ee <SD_write+0x8a>
          {
            res = RES_OK;
 800e6e8:	2300      	movs	r3, #0
 800e6ea:	75fb      	strb	r3, [r7, #23]
            break;
 800e6ec:	e008      	b.n	800e700 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e6ee:	f7f3 f9c9 	bl	8001a84 <HAL_GetTick>
 800e6f2:	4602      	mov	r2, r0
 800e6f4:	693b      	ldr	r3, [r7, #16]
 800e6f6:	1ad3      	subs	r3, r2, r3
 800e6f8:	f247 522f 	movw	r2, #29999	; 0x752f
 800e6fc:	4293      	cmp	r3, r2
 800e6fe:	d9ee      	bls.n	800e6de <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800e700:	7dfb      	ldrb	r3, [r7, #23]
}
 800e702:	4618      	mov	r0, r3
 800e704:	3718      	adds	r7, #24
 800e706:	46bd      	mov	sp, r7
 800e708:	bd80      	pop	{r7, pc}
 800e70a:	bf00      	nop
 800e70c:	240401f8 	.word	0x240401f8

0800e710 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800e710:	b580      	push	{r7, lr}
 800e712:	b08c      	sub	sp, #48	; 0x30
 800e714:	af00      	add	r7, sp, #0
 800e716:	4603      	mov	r3, r0
 800e718:	603a      	str	r2, [r7, #0]
 800e71a:	71fb      	strb	r3, [r7, #7]
 800e71c:	460b      	mov	r3, r1
 800e71e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800e720:	2301      	movs	r3, #1
 800e722:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800e726:	4b25      	ldr	r3, [pc, #148]	; (800e7bc <SD_ioctl+0xac>)
 800e728:	781b      	ldrb	r3, [r3, #0]
 800e72a:	b2db      	uxtb	r3, r3
 800e72c:	f003 0301 	and.w	r3, r3, #1
 800e730:	2b00      	cmp	r3, #0
 800e732:	d001      	beq.n	800e738 <SD_ioctl+0x28>
 800e734:	2303      	movs	r3, #3
 800e736:	e03c      	b.n	800e7b2 <SD_ioctl+0xa2>

  switch (cmd)
 800e738:	79bb      	ldrb	r3, [r7, #6]
 800e73a:	2b03      	cmp	r3, #3
 800e73c:	d834      	bhi.n	800e7a8 <SD_ioctl+0x98>
 800e73e:	a201      	add	r2, pc, #4	; (adr r2, 800e744 <SD_ioctl+0x34>)
 800e740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e744:	0800e755 	.word	0x0800e755
 800e748:	0800e75d 	.word	0x0800e75d
 800e74c:	0800e775 	.word	0x0800e775
 800e750:	0800e78f 	.word	0x0800e78f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800e754:	2300      	movs	r3, #0
 800e756:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e75a:	e028      	b.n	800e7ae <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800e75c:	f107 0308 	add.w	r3, r7, #8
 800e760:	4618      	mov	r0, r3
 800e762:	f7ff fe79 	bl	800e458 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800e766:	6a3a      	ldr	r2, [r7, #32]
 800e768:	683b      	ldr	r3, [r7, #0]
 800e76a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e76c:	2300      	movs	r3, #0
 800e76e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e772:	e01c      	b.n	800e7ae <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e774:	f107 0308 	add.w	r3, r7, #8
 800e778:	4618      	mov	r0, r3
 800e77a:	f7ff fe6d 	bl	800e458 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800e77e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e780:	b29a      	uxth	r2, r3
 800e782:	683b      	ldr	r3, [r7, #0]
 800e784:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800e786:	2300      	movs	r3, #0
 800e788:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e78c:	e00f      	b.n	800e7ae <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e78e:	f107 0308 	add.w	r3, r7, #8
 800e792:	4618      	mov	r0, r3
 800e794:	f7ff fe60 	bl	800e458 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800e798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e79a:	0a5a      	lsrs	r2, r3, #9
 800e79c:	683b      	ldr	r3, [r7, #0]
 800e79e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e7a0:	2300      	movs	r3, #0
 800e7a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e7a6:	e002      	b.n	800e7ae <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800e7a8:	2304      	movs	r3, #4
 800e7aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800e7ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e7b2:	4618      	mov	r0, r3
 800e7b4:	3730      	adds	r7, #48	; 0x30
 800e7b6:	46bd      	mov	sp, r7
 800e7b8:	bd80      	pop	{r7, pc}
 800e7ba:	bf00      	nop
 800e7bc:	2400000d 	.word	0x2400000d

0800e7c0 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800e7c0:	b480      	push	{r7}
 800e7c2:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800e7c4:	4b03      	ldr	r3, [pc, #12]	; (800e7d4 <BSP_SD_WriteCpltCallback+0x14>)
 800e7c6:	2201      	movs	r2, #1
 800e7c8:	601a      	str	r2, [r3, #0]
}
 800e7ca:	bf00      	nop
 800e7cc:	46bd      	mov	sp, r7
 800e7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d2:	4770      	bx	lr
 800e7d4:	240401f8 	.word	0x240401f8

0800e7d8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800e7d8:	b480      	push	{r7}
 800e7da:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800e7dc:	4b03      	ldr	r3, [pc, #12]	; (800e7ec <BSP_SD_ReadCpltCallback+0x14>)
 800e7de:	2201      	movs	r2, #1
 800e7e0:	601a      	str	r2, [r3, #0]
}
 800e7e2:	bf00      	nop
 800e7e4:	46bd      	mov	sp, r7
 800e7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ea:	4770      	bx	lr
 800e7ec:	240401fc 	.word	0x240401fc

0800e7f0 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e7f0:	b580      	push	{r7, lr}
 800e7f2:	b084      	sub	sp, #16
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	6078      	str	r0, [r7, #4]
 800e7f8:	460b      	mov	r3, r1
 800e7fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 800e7fc:	f248 0074 	movw	r0, #32884	; 0x8074
 800e800:	f005 fed0 	bl	80145a4 <malloc>
 800e804:	4603      	mov	r3, r0
 800e806:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d105      	bne.n	800e81a <USBD_MSC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	2200      	movs	r2, #0
 800e812:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800e816:	2302      	movs	r3, #2
 800e818:	e034      	b.n	800e884 <USBD_MSC_Init+0x94>
  }

  pdev->pClassData = (void *)hmsc;
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	68fa      	ldr	r2, [r7, #12]
 800e81e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	7c1b      	ldrb	r3, [r3, #16]
 800e826:	2b00      	cmp	r3, #0
 800e828:	d115      	bne.n	800e856 <USBD_MSC_Init+0x66>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800e82a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e82e:	2202      	movs	r2, #2
 800e830:	2101      	movs	r1, #1
 800e832:	6878      	ldr	r0, [r7, #4]
 800e834:	f005 fd1d 	bl	8014272 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	2201      	movs	r2, #1
 800e83c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800e840:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e844:	2202      	movs	r2, #2
 800e846:	2181      	movs	r1, #129	; 0x81
 800e848:	6878      	ldr	r0, [r7, #4]
 800e84a:	f005 fd12 	bl	8014272 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	2201      	movs	r2, #1
 800e852:	871a      	strh	r2, [r3, #56]	; 0x38
 800e854:	e012      	b.n	800e87c <USBD_MSC_Init+0x8c>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800e856:	2340      	movs	r3, #64	; 0x40
 800e858:	2202      	movs	r2, #2
 800e85a:	2101      	movs	r1, #1
 800e85c:	6878      	ldr	r0, [r7, #4]
 800e85e:	f005 fd08 	bl	8014272 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	2201      	movs	r2, #1
 800e866:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800e86a:	2340      	movs	r3, #64	; 0x40
 800e86c:	2202      	movs	r2, #2
 800e86e:	2181      	movs	r1, #129	; 0x81
 800e870:	6878      	ldr	r0, [r7, #4]
 800e872:	f005 fcfe 	bl	8014272 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	2201      	movs	r2, #1
 800e87a:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 800e87c:	6878      	ldr	r0, [r7, #4]
 800e87e:	f000 f98e 	bl	800eb9e <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 800e882:	2300      	movs	r3, #0
}
 800e884:	4618      	mov	r0, r3
 800e886:	3710      	adds	r7, #16
 800e888:	46bd      	mov	sp, r7
 800e88a:	bd80      	pop	{r7, pc}

0800e88c <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e88c:	b580      	push	{r7, lr}
 800e88e:	b082      	sub	sp, #8
 800e890:	af00      	add	r7, sp, #0
 800e892:	6078      	str	r0, [r7, #4]
 800e894:	460b      	mov	r3, r1
 800e896:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 800e898:	2101      	movs	r1, #1
 800e89a:	6878      	ldr	r0, [r7, #4]
 800e89c:	f005 fd0f 	bl	80142be <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	2200      	movs	r2, #0
 800e8a4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 800e8a8:	2181      	movs	r1, #129	; 0x81
 800e8aa:	6878      	ldr	r0, [r7, #4]
 800e8ac:	f005 fd07 	bl	80142be <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	2200      	movs	r2, #0
 800e8b4:	871a      	strh	r2, [r3, #56]	; 0x38

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 800e8b6:	6878      	ldr	r0, [r7, #4]
 800e8b8:	f000 f9cf 	bl	800ec5a <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d009      	beq.n	800e8da <USBD_MSC_DeInit+0x4e>
  {
    (void)USBD_free(pdev->pClassData);
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e8cc:	4618      	mov	r0, r3
 800e8ce:	f005 fe71 	bl	80145b4 <free>
    pdev->pClassData = NULL;
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	2200      	movs	r2, #0
 800e8d6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800e8da:	2300      	movs	r3, #0
}
 800e8dc:	4618      	mov	r0, r3
 800e8de:	3708      	adds	r7, #8
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	bd80      	pop	{r7, pc}

0800e8e4 <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e8e4:	b580      	push	{r7, lr}
 800e8e6:	b086      	sub	sp, #24
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	6078      	str	r0, [r7, #4]
 800e8ec:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e8f4:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800e8f6:	2300      	movs	r3, #0
 800e8f8:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 800e8fa:	2300      	movs	r3, #0
 800e8fc:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e8fe:	683b      	ldr	r3, [r7, #0]
 800e900:	781b      	ldrb	r3, [r3, #0]
 800e902:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e906:	2b00      	cmp	r3, #0
 800e908:	d04d      	beq.n	800e9a6 <USBD_MSC_Setup+0xc2>
 800e90a:	2b20      	cmp	r3, #32
 800e90c:	f040 80c6 	bne.w	800ea9c <USBD_MSC_Setup+0x1b8>
  {
    /* Class request */
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 800e910:	683b      	ldr	r3, [r7, #0]
 800e912:	785b      	ldrb	r3, [r3, #1]
 800e914:	2bfe      	cmp	r3, #254	; 0xfe
 800e916:	d002      	beq.n	800e91e <USBD_MSC_Setup+0x3a>
 800e918:	2bff      	cmp	r3, #255	; 0xff
 800e91a:	d024      	beq.n	800e966 <USBD_MSC_Setup+0x82>
 800e91c:	e03b      	b.n	800e996 <USBD_MSC_Setup+0xb2>
    {
    case BOT_GET_MAX_LUN:
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800e91e:	683b      	ldr	r3, [r7, #0]
 800e920:	885b      	ldrh	r3, [r3, #2]
 800e922:	2b00      	cmp	r3, #0
 800e924:	d118      	bne.n	800e958 <USBD_MSC_Setup+0x74>
 800e926:	683b      	ldr	r3, [r7, #0]
 800e928:	88db      	ldrh	r3, [r3, #6]
 800e92a:	2b01      	cmp	r3, #1
 800e92c:	d114      	bne.n	800e958 <USBD_MSC_Setup+0x74>
          ((req->bmRequest & 0x80U) == 0x80U))
 800e92e:	683b      	ldr	r3, [r7, #0]
 800e930:	781b      	ldrb	r3, [r3, #0]
 800e932:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800e934:	2b00      	cmp	r3, #0
 800e936:	da0f      	bge.n	800e958 <USBD_MSC_Setup+0x74>
      {
        hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e93e:	699b      	ldr	r3, [r3, #24]
 800e940:	4798      	blx	r3
 800e942:	4603      	mov	r3, r0
 800e944:	461a      	mov	r2, r3
 800e946:	693b      	ldr	r3, [r7, #16]
 800e948:	601a      	str	r2, [r3, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 800e94a:	693b      	ldr	r3, [r7, #16]
 800e94c:	2201      	movs	r2, #1
 800e94e:	4619      	mov	r1, r3
 800e950:	6878      	ldr	r0, [r7, #4]
 800e952:	f002 fdaa 	bl	80114aa <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800e956:	e025      	b.n	800e9a4 <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 800e958:	6839      	ldr	r1, [r7, #0]
 800e95a:	6878      	ldr	r0, [r7, #4]
 800e95c:	f002 fd34 	bl	80113c8 <USBD_CtlError>
        ret = USBD_FAIL;
 800e960:	2303      	movs	r3, #3
 800e962:	75fb      	strb	r3, [r7, #23]
      break;
 800e964:	e01e      	b.n	800e9a4 <USBD_MSC_Setup+0xc0>

    case BOT_RESET :
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800e966:	683b      	ldr	r3, [r7, #0]
 800e968:	885b      	ldrh	r3, [r3, #2]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d10c      	bne.n	800e988 <USBD_MSC_Setup+0xa4>
 800e96e:	683b      	ldr	r3, [r7, #0]
 800e970:	88db      	ldrh	r3, [r3, #6]
 800e972:	2b00      	cmp	r3, #0
 800e974:	d108      	bne.n	800e988 <USBD_MSC_Setup+0xa4>
          ((req->bmRequest & 0x80U) != 0x80U))
 800e976:	683b      	ldr	r3, [r7, #0]
 800e978:	781b      	ldrb	r3, [r3, #0]
 800e97a:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	db03      	blt.n	800e988 <USBD_MSC_Setup+0xa4>
      {
        MSC_BOT_Reset(pdev);
 800e980:	6878      	ldr	r0, [r7, #4]
 800e982:	f000 f947 	bl	800ec14 <MSC_BOT_Reset>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800e986:	e00d      	b.n	800e9a4 <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 800e988:	6839      	ldr	r1, [r7, #0]
 800e98a:	6878      	ldr	r0, [r7, #4]
 800e98c:	f002 fd1c 	bl	80113c8 <USBD_CtlError>
        ret = USBD_FAIL;
 800e990:	2303      	movs	r3, #3
 800e992:	75fb      	strb	r3, [r7, #23]
      break;
 800e994:	e006      	b.n	800e9a4 <USBD_MSC_Setup+0xc0>

    default:
      USBD_CtlError(pdev, req);
 800e996:	6839      	ldr	r1, [r7, #0]
 800e998:	6878      	ldr	r0, [r7, #4]
 800e99a:	f002 fd15 	bl	80113c8 <USBD_CtlError>
      ret = USBD_FAIL;
 800e99e:	2303      	movs	r3, #3
 800e9a0:	75fb      	strb	r3, [r7, #23]
      break;
 800e9a2:	bf00      	nop
    }
    break;
 800e9a4:	e081      	b.n	800eaaa <USBD_MSC_Setup+0x1c6>
    /* Interface & Endpoint request */
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800e9a6:	683b      	ldr	r3, [r7, #0]
 800e9a8:	785b      	ldrb	r3, [r3, #1]
 800e9aa:	2b0b      	cmp	r3, #11
 800e9ac:	d86d      	bhi.n	800ea8a <USBD_MSC_Setup+0x1a6>
 800e9ae:	a201      	add	r2, pc, #4	; (adr r2, 800e9b4 <USBD_MSC_Setup+0xd0>)
 800e9b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9b4:	0800e9e5 	.word	0x0800e9e5
 800e9b8:	0800ea5b 	.word	0x0800ea5b
 800e9bc:	0800ea8b 	.word	0x0800ea8b
 800e9c0:	0800ea8b 	.word	0x0800ea8b
 800e9c4:	0800ea8b 	.word	0x0800ea8b
 800e9c8:	0800ea8b 	.word	0x0800ea8b
 800e9cc:	0800ea8b 	.word	0x0800ea8b
 800e9d0:	0800ea8b 	.word	0x0800ea8b
 800e9d4:	0800ea8b 	.word	0x0800ea8b
 800e9d8:	0800ea8b 	.word	0x0800ea8b
 800e9dc:	0800ea0d 	.word	0x0800ea0d
 800e9e0:	0800ea35 	.word	0x0800ea35
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e9ea:	2b03      	cmp	r3, #3
 800e9ec:	d107      	bne.n	800e9fe <USBD_MSC_Setup+0x11a>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e9ee:	f107 030e 	add.w	r3, r7, #14
 800e9f2:	2202      	movs	r2, #2
 800e9f4:	4619      	mov	r1, r3
 800e9f6:	6878      	ldr	r0, [r7, #4]
 800e9f8:	f002 fd57 	bl	80114aa <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800e9fc:	e04d      	b.n	800ea9a <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 800e9fe:	6839      	ldr	r1, [r7, #0]
 800ea00:	6878      	ldr	r0, [r7, #4]
 800ea02:	f002 fce1 	bl	80113c8 <USBD_CtlError>
        ret = USBD_FAIL;
 800ea06:	2303      	movs	r3, #3
 800ea08:	75fb      	strb	r3, [r7, #23]
      break;
 800ea0a:	e046      	b.n	800ea9a <USBD_MSC_Setup+0x1b6>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ea12:	2b03      	cmp	r3, #3
 800ea14:	d107      	bne.n	800ea26 <USBD_MSC_Setup+0x142>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 800ea16:	693b      	ldr	r3, [r7, #16]
 800ea18:	3304      	adds	r3, #4
 800ea1a:	2201      	movs	r2, #1
 800ea1c:	4619      	mov	r1, r3
 800ea1e:	6878      	ldr	r0, [r7, #4]
 800ea20:	f002 fd43 	bl	80114aa <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800ea24:	e039      	b.n	800ea9a <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 800ea26:	6839      	ldr	r1, [r7, #0]
 800ea28:	6878      	ldr	r0, [r7, #4]
 800ea2a:	f002 fccd 	bl	80113c8 <USBD_CtlError>
        ret = USBD_FAIL;
 800ea2e:	2303      	movs	r3, #3
 800ea30:	75fb      	strb	r3, [r7, #23]
      break;
 800ea32:	e032      	b.n	800ea9a <USBD_MSC_Setup+0x1b6>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ea3a:	2b03      	cmp	r3, #3
 800ea3c:	d106      	bne.n	800ea4c <USBD_MSC_Setup+0x168>
      {
        hmsc->interface = (uint8_t)(req->wValue);
 800ea3e:	683b      	ldr	r3, [r7, #0]
 800ea40:	885b      	ldrh	r3, [r3, #2]
 800ea42:	b2db      	uxtb	r3, r3
 800ea44:	461a      	mov	r2, r3
 800ea46:	693b      	ldr	r3, [r7, #16]
 800ea48:	605a      	str	r2, [r3, #4]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800ea4a:	e026      	b.n	800ea9a <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 800ea4c:	6839      	ldr	r1, [r7, #0]
 800ea4e:	6878      	ldr	r0, [r7, #4]
 800ea50:	f002 fcba 	bl	80113c8 <USBD_CtlError>
        ret = USBD_FAIL;
 800ea54:	2303      	movs	r3, #3
 800ea56:	75fb      	strb	r3, [r7, #23]
      break;
 800ea58:	e01f      	b.n	800ea9a <USBD_MSC_Setup+0x1b6>

    case USB_REQ_CLEAR_FEATURE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ea60:	2b03      	cmp	r3, #3
 800ea62:	d119      	bne.n	800ea98 <USBD_MSC_Setup+0x1b4>
      {
        if (req->wValue == USB_FEATURE_EP_HALT)
 800ea64:	683b      	ldr	r3, [r7, #0]
 800ea66:	885b      	ldrh	r3, [r3, #2]
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d115      	bne.n	800ea98 <USBD_MSC_Setup+0x1b4>
        {
          /* Flush the FIFO */
          (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800ea6c:	683b      	ldr	r3, [r7, #0]
 800ea6e:	889b      	ldrh	r3, [r3, #4]
 800ea70:	b2db      	uxtb	r3, r3
 800ea72:	4619      	mov	r1, r3
 800ea74:	6878      	ldr	r0, [r7, #4]
 800ea76:	f005 fc41 	bl	80142fc <USBD_LL_FlushEP>

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800ea7a:	683b      	ldr	r3, [r7, #0]
 800ea7c:	889b      	ldrh	r3, [r3, #4]
 800ea7e:	b2db      	uxtb	r3, r3
 800ea80:	4619      	mov	r1, r3
 800ea82:	6878      	ldr	r0, [r7, #4]
 800ea84:	f000 fa90 	bl	800efa8 <MSC_BOT_CplClrFeature>
        }
      }
      break;
 800ea88:	e006      	b.n	800ea98 <USBD_MSC_Setup+0x1b4>

    default:
      USBD_CtlError(pdev, req);
 800ea8a:	6839      	ldr	r1, [r7, #0]
 800ea8c:	6878      	ldr	r0, [r7, #4]
 800ea8e:	f002 fc9b 	bl	80113c8 <USBD_CtlError>
      ret = USBD_FAIL;
 800ea92:	2303      	movs	r3, #3
 800ea94:	75fb      	strb	r3, [r7, #23]
      break;
 800ea96:	e000      	b.n	800ea9a <USBD_MSC_Setup+0x1b6>
      break;
 800ea98:	bf00      	nop
    }
    break;
 800ea9a:	e006      	b.n	800eaaa <USBD_MSC_Setup+0x1c6>

  default:
    USBD_CtlError(pdev, req);
 800ea9c:	6839      	ldr	r1, [r7, #0]
 800ea9e:	6878      	ldr	r0, [r7, #4]
 800eaa0:	f002 fc92 	bl	80113c8 <USBD_CtlError>
    ret = USBD_FAIL;
 800eaa4:	2303      	movs	r3, #3
 800eaa6:	75fb      	strb	r3, [r7, #23]
    break;
 800eaa8:	bf00      	nop
  }

  return (uint8_t)ret;
 800eaaa:	7dfb      	ldrb	r3, [r7, #23]
}
 800eaac:	4618      	mov	r0, r3
 800eaae:	3718      	adds	r7, #24
 800eab0:	46bd      	mov	sp, r7
 800eab2:	bd80      	pop	{r7, pc}

0800eab4 <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800eab4:	b580      	push	{r7, lr}
 800eab6:	b082      	sub	sp, #8
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	6078      	str	r0, [r7, #4]
 800eabc:	460b      	mov	r3, r1
 800eabe:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 800eac0:	78fb      	ldrb	r3, [r7, #3]
 800eac2:	4619      	mov	r1, r3
 800eac4:	6878      	ldr	r0, [r7, #4]
 800eac6:	f000 f8d9 	bl	800ec7c <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 800eaca:	2300      	movs	r3, #0
}
 800eacc:	4618      	mov	r0, r3
 800eace:	3708      	adds	r7, #8
 800ead0:	46bd      	mov	sp, r7
 800ead2:	bd80      	pop	{r7, pc}

0800ead4 <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ead4:	b580      	push	{r7, lr}
 800ead6:	b082      	sub	sp, #8
 800ead8:	af00      	add	r7, sp, #0
 800eada:	6078      	str	r0, [r7, #4]
 800eadc:	460b      	mov	r3, r1
 800eade:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 800eae0:	78fb      	ldrb	r3, [r7, #3]
 800eae2:	4619      	mov	r1, r3
 800eae4:	6878      	ldr	r0, [r7, #4]
 800eae6:	f000 f8fd 	bl	800ece4 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 800eaea:	2300      	movs	r3, #0
}
 800eaec:	4618      	mov	r0, r3
 800eaee:	3708      	adds	r7, #8
 800eaf0:	46bd      	mov	sp, r7
 800eaf2:	bd80      	pop	{r7, pc}

0800eaf4 <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 800eaf4:	b480      	push	{r7}
 800eaf6:	b083      	sub	sp, #12
 800eaf8:	af00      	add	r7, sp, #0
 800eafa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	2220      	movs	r2, #32
 800eb00:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 800eb02:	4b03      	ldr	r3, [pc, #12]	; (800eb10 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 800eb04:	4618      	mov	r0, r3
 800eb06:	370c      	adds	r7, #12
 800eb08:	46bd      	mov	sp, r7
 800eb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb0e:	4770      	bx	lr
 800eb10:	24000048 	.word	0x24000048

0800eb14 <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 800eb14:	b480      	push	{r7}
 800eb16:	b083      	sub	sp, #12
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	2220      	movs	r2, #32
 800eb20:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 800eb22:	4b03      	ldr	r3, [pc, #12]	; (800eb30 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 800eb24:	4618      	mov	r0, r3
 800eb26:	370c      	adds	r7, #12
 800eb28:	46bd      	mov	sp, r7
 800eb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb2e:	4770      	bx	lr
 800eb30:	24000068 	.word	0x24000068

0800eb34 <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800eb34:	b480      	push	{r7}
 800eb36:	b083      	sub	sp, #12
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	2220      	movs	r2, #32
 800eb40:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 800eb42:	4b03      	ldr	r3, [pc, #12]	; (800eb50 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 800eb44:	4618      	mov	r0, r3
 800eb46:	370c      	adds	r7, #12
 800eb48:	46bd      	mov	sp, r7
 800eb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb4e:	4770      	bx	lr
 800eb50:	24000088 	.word	0x24000088

0800eb54 <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800eb54:	b480      	push	{r7}
 800eb56:	b083      	sub	sp, #12
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	220a      	movs	r2, #10
 800eb60:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 800eb62:	4b03      	ldr	r3, [pc, #12]	; (800eb70 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 800eb64:	4618      	mov	r0, r3
 800eb66:	370c      	adds	r7, #12
 800eb68:	46bd      	mov	sp, r7
 800eb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb6e:	4770      	bx	lr
 800eb70:	240000a8 	.word	0x240000a8

0800eb74 <USBD_MSC_RegisterStorage>:
* @brief  USBD_MSC_RegisterStorage
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 800eb74:	b480      	push	{r7}
 800eb76:	b083      	sub	sp, #12
 800eb78:	af00      	add	r7, sp, #0
 800eb7a:	6078      	str	r0, [r7, #4]
 800eb7c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800eb7e:	683b      	ldr	r3, [r7, #0]
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d101      	bne.n	800eb88 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800eb84:	2303      	movs	r3, #3
 800eb86:	e004      	b.n	800eb92 <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	683a      	ldr	r2, [r7, #0]
 800eb8c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800eb90:	2300      	movs	r3, #0
}
 800eb92:	4618      	mov	r0, r3
 800eb94:	370c      	adds	r7, #12
 800eb96:	46bd      	mov	sp, r7
 800eb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb9c:	4770      	bx	lr

0800eb9e <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 800eb9e:	b580      	push	{r7, lr}
 800eba0:	b084      	sub	sp, #16
 800eba2:	af00      	add	r7, sp, #0
 800eba4:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ebac:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	2200      	movs	r2, #0
 800ebb2:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	2200      	movs	r2, #0
 800ebb8:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800ebba:	68fa      	ldr	r2, [r7, #12]
 800ebbc:	f248 0361 	movw	r3, #32865	; 0x8061
 800ebc0:	4413      	add	r3, r2
 800ebc2:	2200      	movs	r2, #0
 800ebc4:	701a      	strb	r2, [r3, #0]
  hmsc->scsi_sense_head = 0U;
 800ebc6:	68fa      	ldr	r2, [r7, #12]
 800ebc8:	f248 0360 	movw	r3, #32864	; 0x8060
 800ebcc:	4413      	add	r3, r2
 800ebce:	2200      	movs	r2, #0
 800ebd0:	701a      	strb	r2, [r3, #0]
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800ebd2:	68fa      	ldr	r2, [r7, #12]
 800ebd4:	f248 0362 	movw	r3, #32866	; 0x8062
 800ebd8:	4413      	add	r3, r2
 800ebda:	2200      	movs	r2, #0
 800ebdc:	701a      	strb	r2, [r3, #0]

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	2000      	movs	r0, #0
 800ebe8:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 800ebea:	2101      	movs	r1, #1
 800ebec:	6878      	ldr	r0, [r7, #4]
 800ebee:	f005 fb85 	bl	80142fc <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 800ebf2:	2181      	movs	r1, #129	; 0x81
 800ebf4:	6878      	ldr	r0, [r7, #4]
 800ebf6:	f005 fb81 	bl	80142fc <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	f248 0210 	movw	r2, #32784	; 0x8010
 800ec00:	441a      	add	r2, r3
 800ec02:	231f      	movs	r3, #31
 800ec04:	2101      	movs	r1, #1
 800ec06:	6878      	ldr	r0, [r7, #4]
 800ec08:	f005 fc41 	bl	801448e <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 800ec0c:	bf00      	nop
 800ec0e:	3710      	adds	r7, #16
 800ec10:	46bd      	mov	sp, r7
 800ec12:	bd80      	pop	{r7, pc}

0800ec14 <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 800ec14:	b580      	push	{r7, lr}
 800ec16:	b084      	sub	sp, #16
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ec22:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	2200      	movs	r2, #0
 800ec28:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	2201      	movs	r2, #1
 800ec2e:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 800ec30:	2181      	movs	r1, #129	; 0x81
 800ec32:	6878      	ldr	r0, [r7, #4]
 800ec34:	f005 fba0 	bl	8014378 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 800ec38:	2101      	movs	r1, #1
 800ec3a:	6878      	ldr	r0, [r7, #4]
 800ec3c:	f005 fb9c 	bl	8014378 <USBD_LL_ClearStallEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	f248 0210 	movw	r2, #32784	; 0x8010
 800ec46:	441a      	add	r2, r3
 800ec48:	231f      	movs	r3, #31
 800ec4a:	2101      	movs	r1, #1
 800ec4c:	6878      	ldr	r0, [r7, #4]
 800ec4e:	f005 fc1e 	bl	801448e <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 800ec52:	bf00      	nop
 800ec54:	3710      	adds	r7, #16
 800ec56:	46bd      	mov	sp, r7
 800ec58:	bd80      	pop	{r7, pc}

0800ec5a <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 800ec5a:	b480      	push	{r7}
 800ec5c:	b085      	sub	sp, #20
 800ec5e:	af00      	add	r7, sp, #0
 800ec60:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ec68:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	2200      	movs	r2, #0
 800ec6e:	721a      	strb	r2, [r3, #8]
}
 800ec70:	bf00      	nop
 800ec72:	3714      	adds	r7, #20
 800ec74:	46bd      	mov	sp, r7
 800ec76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec7a:	4770      	bx	lr

0800ec7c <MSC_BOT_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ec7c:	b580      	push	{r7, lr}
 800ec7e:	b084      	sub	sp, #16
 800ec80:	af00      	add	r7, sp, #0
 800ec82:	6078      	str	r0, [r7, #4]
 800ec84:	460b      	mov	r3, r1
 800ec86:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ec8e:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	7a1b      	ldrb	r3, [r3, #8]
 800ec94:	2b02      	cmp	r3, #2
 800ec96:	d004      	beq.n	800eca2 <MSC_BOT_DataIn+0x26>
 800ec98:	2b02      	cmp	r3, #2
 800ec9a:	db1c      	blt.n	800ecd6 <MSC_BOT_DataIn+0x5a>
 800ec9c:	2b04      	cmp	r3, #4
 800ec9e:	dc1a      	bgt.n	800ecd6 <MSC_BOT_DataIn+0x5a>
 800eca0:	e014      	b.n	800eccc <MSC_BOT_DataIn+0x50>
  {
  case USBD_BOT_DATA_IN:
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800eca2:	68fa      	ldr	r2, [r7, #12]
 800eca4:	f248 031d 	movw	r3, #32797	; 0x801d
 800eca8:	4413      	add	r3, r2
 800ecaa:	7819      	ldrb	r1, [r3, #0]
 800ecac:	68fa      	ldr	r2, [r7, #12]
 800ecae:	f248 031f 	movw	r3, #32799	; 0x801f
 800ecb2:	4413      	add	r3, r2
 800ecb4:	461a      	mov	r2, r3
 800ecb6:	6878      	ldr	r0, [r7, #4]
 800ecb8:	f000 f99e 	bl	800eff8 <SCSI_ProcessCmd>
 800ecbc:	4603      	mov	r3, r0
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	da0b      	bge.n	800ecda <MSC_BOT_DataIn+0x5e>
    {
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800ecc2:	2101      	movs	r1, #1
 800ecc4:	6878      	ldr	r0, [r7, #4]
 800ecc6:	f000 f90b 	bl	800eee0 <MSC_BOT_SendCSW>
    }
    break;
 800ecca:	e006      	b.n	800ecda <MSC_BOT_DataIn+0x5e>

  case USBD_BOT_SEND_DATA:
  case USBD_BOT_LAST_DATA_IN:
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800eccc:	2100      	movs	r1, #0
 800ecce:	6878      	ldr	r0, [r7, #4]
 800ecd0:	f000 f906 	bl	800eee0 <MSC_BOT_SendCSW>
    break;
 800ecd4:	e002      	b.n	800ecdc <MSC_BOT_DataIn+0x60>

  default:
    break;
 800ecd6:	bf00      	nop
 800ecd8:	e000      	b.n	800ecdc <MSC_BOT_DataIn+0x60>
    break;
 800ecda:	bf00      	nop
  }
}
 800ecdc:	bf00      	nop
 800ecde:	3710      	adds	r7, #16
 800ece0:	46bd      	mov	sp, r7
 800ece2:	bd80      	pop	{r7, pc}

0800ece4 <MSC_BOT_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ece4:	b580      	push	{r7, lr}
 800ece6:	b084      	sub	sp, #16
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	6078      	str	r0, [r7, #4]
 800ecec:	460b      	mov	r3, r1
 800ecee:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ecf6:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	7a1b      	ldrb	r3, [r3, #8]
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d002      	beq.n	800ed06 <MSC_BOT_DataOut+0x22>
 800ed00:	2b01      	cmp	r3, #1
 800ed02:	d004      	beq.n	800ed0e <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 800ed04:	e018      	b.n	800ed38 <MSC_BOT_DataOut+0x54>
      MSC_BOT_CBW_Decode(pdev);
 800ed06:	6878      	ldr	r0, [r7, #4]
 800ed08:	f000 f81a 	bl	800ed40 <MSC_BOT_CBW_Decode>
      break;
 800ed0c:	e014      	b.n	800ed38 <MSC_BOT_DataOut+0x54>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800ed0e:	68fa      	ldr	r2, [r7, #12]
 800ed10:	f248 031d 	movw	r3, #32797	; 0x801d
 800ed14:	4413      	add	r3, r2
 800ed16:	7819      	ldrb	r1, [r3, #0]
 800ed18:	68fa      	ldr	r2, [r7, #12]
 800ed1a:	f248 031f 	movw	r3, #32799	; 0x801f
 800ed1e:	4413      	add	r3, r2
 800ed20:	461a      	mov	r2, r3
 800ed22:	6878      	ldr	r0, [r7, #4]
 800ed24:	f000 f968 	bl	800eff8 <SCSI_ProcessCmd>
 800ed28:	4603      	mov	r3, r0
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	da03      	bge.n	800ed36 <MSC_BOT_DataOut+0x52>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800ed2e:	2101      	movs	r1, #1
 800ed30:	6878      	ldr	r0, [r7, #4]
 800ed32:	f000 f8d5 	bl	800eee0 <MSC_BOT_SendCSW>
      break;
 800ed36:	bf00      	nop
  }
}
 800ed38:	bf00      	nop
 800ed3a:	3710      	adds	r7, #16
 800ed3c:	46bd      	mov	sp, r7
 800ed3e:	bd80      	pop	{r7, pc}

0800ed40 <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 800ed40:	b580      	push	{r7, lr}
 800ed42:	b084      	sub	sp, #16
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ed4e:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 800ed50:	68fa      	ldr	r2, [r7, #12]
 800ed52:	f248 0314 	movw	r3, #32788	; 0x8014
 800ed56:	4413      	add	r3, r2
 800ed58:	681a      	ldr	r2, [r3, #0]
 800ed5a:	68f9      	ldr	r1, [r7, #12]
 800ed5c:	f248 0334 	movw	r3, #32820	; 0x8034
 800ed60:	440b      	add	r3, r1
 800ed62:	601a      	str	r2, [r3, #0]
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800ed64:	68fa      	ldr	r2, [r7, #12]
 800ed66:	f248 0318 	movw	r3, #32792	; 0x8018
 800ed6a:	4413      	add	r3, r2
 800ed6c:	681a      	ldr	r2, [r3, #0]
 800ed6e:	68f9      	ldr	r1, [r7, #12]
 800ed70:	f248 0338 	movw	r3, #32824	; 0x8038
 800ed74:	440b      	add	r3, r1
 800ed76:	601a      	str	r2, [r3, #0]

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800ed78:	2101      	movs	r1, #1
 800ed7a:	6878      	ldr	r0, [r7, #4]
 800ed7c:	f005 fba8 	bl	80144d0 <USBD_LL_GetRxDataSize>
 800ed80:	4603      	mov	r3, r0
 800ed82:	2b1f      	cmp	r3, #31
 800ed84:	d11c      	bne.n	800edc0 <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800ed86:	68fa      	ldr	r2, [r7, #12]
 800ed88:	f248 0310 	movw	r3, #32784	; 0x8010
 800ed8c:	4413      	add	r3, r2
 800ed8e:	681b      	ldr	r3, [r3, #0]
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800ed90:	4a38      	ldr	r2, [pc, #224]	; (800ee74 <MSC_BOT_CBW_Decode+0x134>)
 800ed92:	4293      	cmp	r3, r2
 800ed94:	d114      	bne.n	800edc0 <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800ed96:	68fa      	ldr	r2, [r7, #12]
 800ed98:	f248 031d 	movw	r3, #32797	; 0x801d
 800ed9c:	4413      	add	r3, r2
 800ed9e:	781b      	ldrb	r3, [r3, #0]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800eda0:	2b01      	cmp	r3, #1
 800eda2:	d80d      	bhi.n	800edc0 <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800eda4:	68fa      	ldr	r2, [r7, #12]
 800eda6:	f248 031e 	movw	r3, #32798	; 0x801e
 800edaa:	4413      	add	r3, r2
 800edac:	781b      	ldrb	r3, [r3, #0]
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d006      	beq.n	800edc0 <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.bCBLength > 16U))
 800edb2:	68fa      	ldr	r2, [r7, #12]
 800edb4:	f248 031e 	movw	r3, #32798	; 0x801e
 800edb8:	4413      	add	r3, r2
 800edba:	781b      	ldrb	r3, [r3, #0]
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800edbc:	2b10      	cmp	r3, #16
 800edbe:	d910      	bls.n	800ede2 <MSC_BOT_CBW_Decode+0xa2>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800edc0:	68fa      	ldr	r2, [r7, #12]
 800edc2:	f248 031d 	movw	r3, #32797	; 0x801d
 800edc6:	4413      	add	r3, r2
 800edc8:	7819      	ldrb	r1, [r3, #0]
 800edca:	2320      	movs	r3, #32
 800edcc:	2205      	movs	r2, #5
 800edce:	6878      	ldr	r0, [r7, #4]
 800edd0:	f000 fd36 	bl	800f840 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	2202      	movs	r2, #2
 800edd8:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800edda:	6878      	ldr	r0, [r7, #4]
 800eddc:	f000 f8b2 	bl	800ef44 <MSC_BOT_Abort>
 800ede0:	e044      	b.n	800ee6c <MSC_BOT_CBW_Decode+0x12c>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800ede2:	68fa      	ldr	r2, [r7, #12]
 800ede4:	f248 031d 	movw	r3, #32797	; 0x801d
 800ede8:	4413      	add	r3, r2
 800edea:	7819      	ldrb	r1, [r3, #0]
 800edec:	68fa      	ldr	r2, [r7, #12]
 800edee:	f248 031f 	movw	r3, #32799	; 0x801f
 800edf2:	4413      	add	r3, r2
 800edf4:	461a      	mov	r2, r3
 800edf6:	6878      	ldr	r0, [r7, #4]
 800edf8:	f000 f8fe 	bl	800eff8 <SCSI_ProcessCmd>
 800edfc:	4603      	mov	r3, r0
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	da0c      	bge.n	800ee1c <MSC_BOT_CBW_Decode+0xdc>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	7a1b      	ldrb	r3, [r3, #8]
 800ee06:	2b05      	cmp	r3, #5
 800ee08:	d104      	bne.n	800ee14 <MSC_BOT_CBW_Decode+0xd4>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800ee0a:	2101      	movs	r1, #1
 800ee0c:	6878      	ldr	r0, [r7, #4]
 800ee0e:	f000 f867 	bl	800eee0 <MSC_BOT_SendCSW>
 800ee12:	e02b      	b.n	800ee6c <MSC_BOT_CBW_Decode+0x12c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800ee14:	6878      	ldr	r0, [r7, #4]
 800ee16:	f000 f895 	bl	800ef44 <MSC_BOT_Abort>
 800ee1a:	e027      	b.n	800ee6c <MSC_BOT_CBW_Decode+0x12c>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	7a1b      	ldrb	r3, [r3, #8]
 800ee20:	2b02      	cmp	r3, #2
 800ee22:	d022      	beq.n	800ee6a <MSC_BOT_CBW_Decode+0x12a>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800ee28:	2b01      	cmp	r3, #1
 800ee2a:	d01e      	beq.n	800ee6a <MSC_BOT_CBW_Decode+0x12a>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800ee30:	2b03      	cmp	r3, #3
 800ee32:	d01a      	beq.n	800ee6a <MSC_BOT_CBW_Decode+0x12a>
    {
      if (hmsc->bot_data_length > 0U)
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	68db      	ldr	r3, [r3, #12]
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d009      	beq.n	800ee50 <MSC_BOT_CBW_Decode+0x110>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	f103 0110 	add.w	r1, r3, #16
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	68db      	ldr	r3, [r3, #12]
 800ee46:	461a      	mov	r2, r3
 800ee48:	6878      	ldr	r0, [r7, #4]
 800ee4a:	f000 f815 	bl	800ee78 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 800ee4e:	e00d      	b.n	800ee6c <MSC_BOT_CBW_Decode+0x12c>
      }
      else if (hmsc->bot_data_length == 0U)
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	68db      	ldr	r3, [r3, #12]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d104      	bne.n	800ee62 <MSC_BOT_CBW_Decode+0x122>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800ee58:	2100      	movs	r1, #0
 800ee5a:	6878      	ldr	r0, [r7, #4]
 800ee5c:	f000 f840 	bl	800eee0 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 800ee60:	e004      	b.n	800ee6c <MSC_BOT_CBW_Decode+0x12c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800ee62:	6878      	ldr	r0, [r7, #4]
 800ee64:	f000 f86e 	bl	800ef44 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 800ee68:	e000      	b.n	800ee6c <MSC_BOT_CBW_Decode+0x12c>
      }
    }
    else
    {
      return;
 800ee6a:	bf00      	nop
    }
  }
}
 800ee6c:	3710      	adds	r7, #16
 800ee6e:	46bd      	mov	sp, r7
 800ee70:	bd80      	pop	{r7, pc}
 800ee72:	bf00      	nop
 800ee74:	43425355 	.word	0x43425355

0800ee78 <MSC_BOT_SendData>:
* @param  buf: pointer to data buffer
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 800ee78:	b580      	push	{r7, lr}
 800ee7a:	b086      	sub	sp, #24
 800ee7c:	af00      	add	r7, sp, #0
 800ee7e:	60f8      	str	r0, [r7, #12]
 800ee80:	60b9      	str	r1, [r7, #8]
 800ee82:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ee8a:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 800ee8c:	697a      	ldr	r2, [r7, #20]
 800ee8e:	f248 0318 	movw	r3, #32792	; 0x8018
 800ee92:	4413      	add	r3, r2
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	687a      	ldr	r2, [r7, #4]
 800ee98:	4293      	cmp	r3, r2
 800ee9a:	bf28      	it	cs
 800ee9c:	4613      	movcs	r3, r2
 800ee9e:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 800eea0:	697a      	ldr	r2, [r7, #20]
 800eea2:	f248 0338 	movw	r3, #32824	; 0x8038
 800eea6:	4413      	add	r3, r2
 800eea8:	681a      	ldr	r2, [r3, #0]
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	1ad2      	subs	r2, r2, r3
 800eeae:	6979      	ldr	r1, [r7, #20]
 800eeb0:	f248 0338 	movw	r3, #32824	; 0x8038
 800eeb4:	440b      	add	r3, r1
 800eeb6:	601a      	str	r2, [r3, #0]
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 800eeb8:	697a      	ldr	r2, [r7, #20]
 800eeba:	f248 033c 	movw	r3, #32828	; 0x803c
 800eebe:	4413      	add	r3, r2
 800eec0:	2200      	movs	r2, #0
 800eec2:	701a      	strb	r2, [r3, #0]
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800eec4:	697b      	ldr	r3, [r7, #20]
 800eec6:	2204      	movs	r2, #4
 800eec8:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 800eeca:	693b      	ldr	r3, [r7, #16]
 800eecc:	68ba      	ldr	r2, [r7, #8]
 800eece:	2181      	movs	r1, #129	; 0x81
 800eed0:	68f8      	ldr	r0, [r7, #12]
 800eed2:	f005 fabb 	bl	801444c <USBD_LL_Transmit>
}
 800eed6:	bf00      	nop
 800eed8:	3718      	adds	r7, #24
 800eeda:	46bd      	mov	sp, r7
 800eedc:	bd80      	pop	{r7, pc}
	...

0800eee0 <MSC_BOT_SendCSW>:
* @param  pdev: device instance
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 800eee0:	b580      	push	{r7, lr}
 800eee2:	b084      	sub	sp, #16
 800eee4:	af00      	add	r7, sp, #0
 800eee6:	6078      	str	r0, [r7, #4]
 800eee8:	460b      	mov	r3, r1
 800eeea:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eef2:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800eef4:	68fa      	ldr	r2, [r7, #12]
 800eef6:	f248 0330 	movw	r3, #32816	; 0x8030
 800eefa:	4413      	add	r3, r2
 800eefc:	4a10      	ldr	r2, [pc, #64]	; (800ef40 <MSC_BOT_SendCSW+0x60>)
 800eefe:	601a      	str	r2, [r3, #0]
  hmsc->csw.bStatus = CSW_Status;
 800ef00:	68fa      	ldr	r2, [r7, #12]
 800ef02:	f248 033c 	movw	r3, #32828	; 0x803c
 800ef06:	4413      	add	r3, r2
 800ef08:	78fa      	ldrb	r2, [r7, #3]
 800ef0a:	701a      	strb	r2, [r3, #0]
  hmsc->bot_state = USBD_BOT_IDLE;
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	2200      	movs	r2, #0
 800ef10:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	f248 0230 	movw	r2, #32816	; 0x8030
 800ef18:	441a      	add	r2, r3
 800ef1a:	230d      	movs	r3, #13
 800ef1c:	2181      	movs	r1, #129	; 0x81
 800ef1e:	6878      	ldr	r0, [r7, #4]
 800ef20:	f005 fa94 	bl	801444c <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	f248 0210 	movw	r2, #32784	; 0x8010
 800ef2a:	441a      	add	r2, r3
 800ef2c:	231f      	movs	r3, #31
 800ef2e:	2101      	movs	r1, #1
 800ef30:	6878      	ldr	r0, [r7, #4]
 800ef32:	f005 faac 	bl	801448e <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 800ef36:	bf00      	nop
 800ef38:	3710      	adds	r7, #16
 800ef3a:	46bd      	mov	sp, r7
 800ef3c:	bd80      	pop	{r7, pc}
 800ef3e:	bf00      	nop
 800ef40:	53425355 	.word	0x53425355

0800ef44 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 800ef44:	b580      	push	{r7, lr}
 800ef46:	b084      	sub	sp, #16
 800ef48:	af00      	add	r7, sp, #0
 800ef4a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ef52:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 800ef54:	68fa      	ldr	r2, [r7, #12]
 800ef56:	f248 031c 	movw	r3, #32796	; 0x801c
 800ef5a:	4413      	add	r3, r2
 800ef5c:	781b      	ldrb	r3, [r3, #0]
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d10e      	bne.n	800ef80 <MSC_BOT_Abort+0x3c>
      (hmsc->cbw.dDataLength != 0U) &&
 800ef62:	68fa      	ldr	r2, [r7, #12]
 800ef64:	f248 0318 	movw	r3, #32792	; 0x8018
 800ef68:	4413      	add	r3, r2
 800ef6a:	681b      	ldr	r3, [r3, #0]
  if ((hmsc->cbw.bmFlags == 0U) &&
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d007      	beq.n	800ef80 <MSC_BOT_Abort+0x3c>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d103      	bne.n	800ef80 <MSC_BOT_Abort+0x3c>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800ef78:	2101      	movs	r1, #1
 800ef7a:	6878      	ldr	r0, [r7, #4]
 800ef7c:	f005 f9dd 	bl	801433a <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800ef80:	2181      	movs	r1, #129	; 0x81
 800ef82:	6878      	ldr	r0, [r7, #4]
 800ef84:	f005 f9d9 	bl	801433a <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	7a5b      	ldrb	r3, [r3, #9]
 800ef8c:	2b02      	cmp	r3, #2
 800ef8e:	d107      	bne.n	800efa0 <MSC_BOT_Abort+0x5c>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800ef90:	2181      	movs	r1, #129	; 0x81
 800ef92:	6878      	ldr	r0, [r7, #4]
 800ef94:	f005 f9d1 	bl	801433a <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800ef98:	2101      	movs	r1, #1
 800ef9a:	6878      	ldr	r0, [r7, #4]
 800ef9c:	f005 f9cd 	bl	801433a <USBD_LL_StallEP>
  }
}
 800efa0:	bf00      	nop
 800efa2:	3710      	adds	r7, #16
 800efa4:	46bd      	mov	sp, r7
 800efa6:	bd80      	pop	{r7, pc}

0800efa8 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800efa8:	b580      	push	{r7, lr}
 800efaa:	b084      	sub	sp, #16
 800efac:	af00      	add	r7, sp, #0
 800efae:	6078      	str	r0, [r7, #4]
 800efb0:	460b      	mov	r3, r1
 800efb2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800efba:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	7a5b      	ldrb	r3, [r3, #9]
 800efc0:	2b02      	cmp	r3, #2
 800efc2:	d108      	bne.n	800efd6 <MSC_BOT_CplClrFeature+0x2e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800efc4:	2181      	movs	r1, #129	; 0x81
 800efc6:	6878      	ldr	r0, [r7, #4]
 800efc8:	f005 f9b7 	bl	801433a <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800efcc:	2101      	movs	r1, #1
 800efce:	6878      	ldr	r0, [r7, #4]
 800efd0:	f005 f9b3 	bl	801433a <USBD_LL_StallEP>
 800efd4:	e00d      	b.n	800eff2 <MSC_BOT_CplClrFeature+0x4a>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800efd6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800efda:	2b00      	cmp	r3, #0
 800efdc:	da08      	bge.n	800eff0 <MSC_BOT_CplClrFeature+0x48>
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	7a5b      	ldrb	r3, [r3, #9]
 800efe2:	2b01      	cmp	r3, #1
 800efe4:	d004      	beq.n	800eff0 <MSC_BOT_CplClrFeature+0x48>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800efe6:	2101      	movs	r1, #1
 800efe8:	6878      	ldr	r0, [r7, #4]
 800efea:	f7ff ff79 	bl	800eee0 <MSC_BOT_SendCSW>
 800efee:	e000      	b.n	800eff2 <MSC_BOT_CplClrFeature+0x4a>
  }
  else
  {
    return;
 800eff0:	bf00      	nop
  }
}
 800eff2:	3710      	adds	r7, #16
 800eff4:	46bd      	mov	sp, r7
 800eff6:	bd80      	pop	{r7, pc}

0800eff8 <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 800eff8:	b580      	push	{r7, lr}
 800effa:	b086      	sub	sp, #24
 800effc:	af00      	add	r7, sp, #0
 800effe:	60f8      	str	r0, [r7, #12]
 800f000:	460b      	mov	r3, r1
 800f002:	607a      	str	r2, [r7, #4]
 800f004:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f00c:	613b      	str	r3, [r7, #16]

  switch (cmd[0])
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	781b      	ldrb	r3, [r3, #0]
 800f012:	2b25      	cmp	r3, #37	; 0x25
 800f014:	d06e      	beq.n	800f0f4 <SCSI_ProcessCmd+0xfc>
 800f016:	2b25      	cmp	r3, #37	; 0x25
 800f018:	dc11      	bgt.n	800f03e <SCSI_ProcessCmd+0x46>
 800f01a:	2b1a      	cmp	r3, #26
 800f01c:	d04f      	beq.n	800f0be <SCSI_ProcessCmd+0xc6>
 800f01e:	2b1a      	cmp	r3, #26
 800f020:	dc06      	bgt.n	800f030 <SCSI_ProcessCmd+0x38>
 800f022:	2b03      	cmp	r3, #3
 800f024:	d027      	beq.n	800f076 <SCSI_ProcessCmd+0x7e>
 800f026:	2b12      	cmp	r3, #18
 800f028:	d02e      	beq.n	800f088 <SCSI_ProcessCmd+0x90>
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d01a      	beq.n	800f064 <SCSI_ProcessCmd+0x6c>
 800f02e:	e0a0      	b.n	800f172 <SCSI_ProcessCmd+0x17a>
 800f030:	2b1e      	cmp	r3, #30
 800f032:	d03b      	beq.n	800f0ac <SCSI_ProcessCmd+0xb4>
 800f034:	2b23      	cmp	r3, #35	; 0x23
 800f036:	d054      	beq.n	800f0e2 <SCSI_ProcessCmd+0xea>
 800f038:	2b1b      	cmp	r3, #27
 800f03a:	d02e      	beq.n	800f09a <SCSI_ProcessCmd+0xa2>
 800f03c:	e099      	b.n	800f172 <SCSI_ProcessCmd+0x17a>
 800f03e:	2b5a      	cmp	r3, #90	; 0x5a
 800f040:	d046      	beq.n	800f0d0 <SCSI_ProcessCmd+0xd8>
 800f042:	2b5a      	cmp	r3, #90	; 0x5a
 800f044:	dc07      	bgt.n	800f056 <SCSI_ProcessCmd+0x5e>
 800f046:	2b2a      	cmp	r3, #42	; 0x2a
 800f048:	d078      	beq.n	800f13c <SCSI_ProcessCmd+0x144>
 800f04a:	2b2f      	cmp	r3, #47	; 0x2f
 800f04c:	f000 8088 	beq.w	800f160 <SCSI_ProcessCmd+0x168>
 800f050:	2b28      	cmp	r3, #40	; 0x28
 800f052:	d061      	beq.n	800f118 <SCSI_ProcessCmd+0x120>
 800f054:	e08d      	b.n	800f172 <SCSI_ProcessCmd+0x17a>
 800f056:	2ba8      	cmp	r3, #168	; 0xa8
 800f058:	d067      	beq.n	800f12a <SCSI_ProcessCmd+0x132>
 800f05a:	2baa      	cmp	r3, #170	; 0xaa
 800f05c:	d077      	beq.n	800f14e <SCSI_ProcessCmd+0x156>
 800f05e:	2b9e      	cmp	r3, #158	; 0x9e
 800f060:	d051      	beq.n	800f106 <SCSI_ProcessCmd+0x10e>
 800f062:	e086      	b.n	800f172 <SCSI_ProcessCmd+0x17a>
  {
  case SCSI_TEST_UNIT_READY:
    ret = SCSI_TestUnitReady(pdev, lun, cmd);
 800f064:	7afb      	ldrb	r3, [r7, #11]
 800f066:	687a      	ldr	r2, [r7, #4]
 800f068:	4619      	mov	r1, r3
 800f06a:	68f8      	ldr	r0, [r7, #12]
 800f06c:	f000 f893 	bl	800f196 <SCSI_TestUnitReady>
 800f070:	4603      	mov	r3, r0
 800f072:	75fb      	strb	r3, [r7, #23]
    break;
 800f074:	e089      	b.n	800f18a <SCSI_ProcessCmd+0x192>

  case SCSI_REQUEST_SENSE:
    ret = SCSI_RequestSense(pdev, lun, cmd);
 800f076:	7afb      	ldrb	r3, [r7, #11]
 800f078:	687a      	ldr	r2, [r7, #4]
 800f07a:	4619      	mov	r1, r3
 800f07c:	68f8      	ldr	r0, [r7, #12]
 800f07e:	f000 fb47 	bl	800f710 <SCSI_RequestSense>
 800f082:	4603      	mov	r3, r0
 800f084:	75fb      	strb	r3, [r7, #23]
    break;
 800f086:	e080      	b.n	800f18a <SCSI_ProcessCmd+0x192>

  case SCSI_INQUIRY:
    ret = SCSI_Inquiry(pdev, lun, cmd);
 800f088:	7afb      	ldrb	r3, [r7, #11]
 800f08a:	687a      	ldr	r2, [r7, #4]
 800f08c:	4619      	mov	r1, r3
 800f08e:	68f8      	ldr	r0, [r7, #12]
 800f090:	f000 f8d2 	bl	800f238 <SCSI_Inquiry>
 800f094:	4603      	mov	r3, r0
 800f096:	75fb      	strb	r3, [r7, #23]
    break;
 800f098:	e077      	b.n	800f18a <SCSI_ProcessCmd+0x192>

  case SCSI_START_STOP_UNIT:
    ret = SCSI_StartStopUnit(pdev, lun, cmd);
 800f09a:	7afb      	ldrb	r3, [r7, #11]
 800f09c:	687a      	ldr	r2, [r7, #4]
 800f09e:	4619      	mov	r1, r3
 800f0a0:	68f8      	ldr	r0, [r7, #12]
 800f0a2:	f000 fc27 	bl	800f8f4 <SCSI_StartStopUnit>
 800f0a6:	4603      	mov	r3, r0
 800f0a8:	75fb      	strb	r3, [r7, #23]
    break;
 800f0aa:	e06e      	b.n	800f18a <SCSI_ProcessCmd+0x192>

  case SCSI_ALLOW_MEDIUM_REMOVAL:
    ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 800f0ac:	7afb      	ldrb	r3, [r7, #11]
 800f0ae:	687a      	ldr	r2, [r7, #4]
 800f0b0:	4619      	mov	r1, r3
 800f0b2:	68f8      	ldr	r0, [r7, #12]
 800f0b4:	f000 fc71 	bl	800f99a <SCSI_AllowPreventRemovable>
 800f0b8:	4603      	mov	r3, r0
 800f0ba:	75fb      	strb	r3, [r7, #23]
    break;
 800f0bc:	e065      	b.n	800f18a <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE6:
    ret = SCSI_ModeSense6(pdev, lun, cmd);
 800f0be:	7afb      	ldrb	r3, [r7, #11]
 800f0c0:	687a      	ldr	r2, [r7, #4]
 800f0c2:	4619      	mov	r1, r3
 800f0c4:	68f8      	ldr	r0, [r7, #12]
 800f0c6:	f000 fad7 	bl	800f678 <SCSI_ModeSense6>
 800f0ca:	4603      	mov	r3, r0
 800f0cc:	75fb      	strb	r3, [r7, #23]
    break;
 800f0ce:	e05c      	b.n	800f18a <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE10:
    ret = SCSI_ModeSense10(pdev, lun, cmd);
 800f0d0:	7afb      	ldrb	r3, [r7, #11]
 800f0d2:	687a      	ldr	r2, [r7, #4]
 800f0d4:	4619      	mov	r1, r3
 800f0d6:	68f8      	ldr	r0, [r7, #12]
 800f0d8:	f000 faf4 	bl	800f6c4 <SCSI_ModeSense10>
 800f0dc:	4603      	mov	r3, r0
 800f0de:	75fb      	strb	r3, [r7, #23]
    break;
 800f0e0:	e053      	b.n	800f18a <SCSI_ProcessCmd+0x192>

  case SCSI_READ_FORMAT_CAPACITIES:
    ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800f0e2:	7afb      	ldrb	r3, [r7, #11]
 800f0e4:	687a      	ldr	r2, [r7, #4]
 800f0e6:	4619      	mov	r1, r3
 800f0e8:	68f8      	ldr	r0, [r7, #12]
 800f0ea:	f000 fa56 	bl	800f59a <SCSI_ReadFormatCapacity>
 800f0ee:	4603      	mov	r3, r0
 800f0f0:	75fb      	strb	r3, [r7, #23]
    break;
 800f0f2:	e04a      	b.n	800f18a <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY10:
    ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 800f0f4:	7afb      	ldrb	r3, [r7, #11]
 800f0f6:	687a      	ldr	r2, [r7, #4]
 800f0f8:	4619      	mov	r1, r3
 800f0fa:	68f8      	ldr	r0, [r7, #12]
 800f0fc:	f000 f910 	bl	800f320 <SCSI_ReadCapacity10>
 800f100:	4603      	mov	r3, r0
 800f102:	75fb      	strb	r3, [r7, #23]
    break;
 800f104:	e041      	b.n	800f18a <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY16:
    ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 800f106:	7afb      	ldrb	r3, [r7, #11]
 800f108:	687a      	ldr	r2, [r7, #4]
 800f10a:	4619      	mov	r1, r3
 800f10c:	68f8      	ldr	r0, [r7, #12]
 800f10e:	f000 f98b 	bl	800f428 <SCSI_ReadCapacity16>
 800f112:	4603      	mov	r3, r0
 800f114:	75fb      	strb	r3, [r7, #23]
    break;
 800f116:	e038      	b.n	800f18a <SCSI_ProcessCmd+0x192>

  case SCSI_READ10:
    ret = SCSI_Read10(pdev, lun, cmd);
 800f118:	7afb      	ldrb	r3, [r7, #11]
 800f11a:	687a      	ldr	r2, [r7, #4]
 800f11c:	4619      	mov	r1, r3
 800f11e:	68f8      	ldr	r0, [r7, #12]
 800f120:	f000 fc62 	bl	800f9e8 <SCSI_Read10>
 800f124:	4603      	mov	r3, r0
 800f126:	75fb      	strb	r3, [r7, #23]
    break;
 800f128:	e02f      	b.n	800f18a <SCSI_ProcessCmd+0x192>

  case SCSI_READ12:
    ret = SCSI_Read12(pdev, lun, cmd);
 800f12a:	7afb      	ldrb	r3, [r7, #11]
 800f12c:	687a      	ldr	r2, [r7, #4]
 800f12e:	4619      	mov	r1, r3
 800f130:	68f8      	ldr	r0, [r7, #12]
 800f132:	f000 fd0b 	bl	800fb4c <SCSI_Read12>
 800f136:	4603      	mov	r3, r0
 800f138:	75fb      	strb	r3, [r7, #23]
    break;
 800f13a:	e026      	b.n	800f18a <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE10:
    ret = SCSI_Write10(pdev, lun, cmd);
 800f13c:	7afb      	ldrb	r3, [r7, #11]
 800f13e:	687a      	ldr	r2, [r7, #4]
 800f140:	4619      	mov	r1, r3
 800f142:	68f8      	ldr	r0, [r7, #12]
 800f144:	f000 fdbe 	bl	800fcc4 <SCSI_Write10>
 800f148:	4603      	mov	r3, r0
 800f14a:	75fb      	strb	r3, [r7, #23]
    break;
 800f14c:	e01d      	b.n	800f18a <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE12:
    ret = SCSI_Write12(pdev, lun, cmd);
 800f14e:	7afb      	ldrb	r3, [r7, #11]
 800f150:	687a      	ldr	r2, [r7, #4]
 800f152:	4619      	mov	r1, r3
 800f154:	68f8      	ldr	r0, [r7, #12]
 800f156:	f000 fe8d 	bl	800fe74 <SCSI_Write12>
 800f15a:	4603      	mov	r3, r0
 800f15c:	75fb      	strb	r3, [r7, #23]
    break;
 800f15e:	e014      	b.n	800f18a <SCSI_ProcessCmd+0x192>

  case SCSI_VERIFY10:
    ret = SCSI_Verify10(pdev, lun, cmd);
 800f160:	7afb      	ldrb	r3, [r7, #11]
 800f162:	687a      	ldr	r2, [r7, #4]
 800f164:	4619      	mov	r1, r3
 800f166:	68f8      	ldr	r0, [r7, #12]
 800f168:	f000 ff6c 	bl	8010044 <SCSI_Verify10>
 800f16c:	4603      	mov	r3, r0
 800f16e:	75fb      	strb	r3, [r7, #23]
    break;
 800f170:	e00b      	b.n	800f18a <SCSI_ProcessCmd+0x192>

  default:
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 800f172:	7af9      	ldrb	r1, [r7, #11]
 800f174:	2320      	movs	r3, #32
 800f176:	2205      	movs	r2, #5
 800f178:	68f8      	ldr	r0, [r7, #12]
 800f17a:	f000 fb61 	bl	800f840 <SCSI_SenseCode>
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800f17e:	693b      	ldr	r3, [r7, #16]
 800f180:	2202      	movs	r2, #2
 800f182:	725a      	strb	r2, [r3, #9]
    ret = -1;
 800f184:	23ff      	movs	r3, #255	; 0xff
 800f186:	75fb      	strb	r3, [r7, #23]
    break;
 800f188:	bf00      	nop
  }

  return ret;
 800f18a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f18e:	4618      	mov	r0, r3
 800f190:	3718      	adds	r7, #24
 800f192:	46bd      	mov	sp, r7
 800f194:	bd80      	pop	{r7, pc}

0800f196 <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800f196:	b580      	push	{r7, lr}
 800f198:	b086      	sub	sp, #24
 800f19a:	af00      	add	r7, sp, #0
 800f19c:	60f8      	str	r0, [r7, #12]
 800f19e:	460b      	mov	r3, r1
 800f1a0:	607a      	str	r2, [r7, #4]
 800f1a2:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f1aa:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 800f1ac:	697a      	ldr	r2, [r7, #20]
 800f1ae:	f248 0318 	movw	r3, #32792	; 0x8018
 800f1b2:	4413      	add	r3, r2
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d00c      	beq.n	800f1d4 <SCSI_TestUnitReady+0x3e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f1ba:	697a      	ldr	r2, [r7, #20]
 800f1bc:	f248 031d 	movw	r3, #32797	; 0x801d
 800f1c0:	4413      	add	r3, r2
 800f1c2:	7819      	ldrb	r1, [r3, #0]
 800f1c4:	2320      	movs	r3, #32
 800f1c6:	2205      	movs	r2, #5
 800f1c8:	68f8      	ldr	r0, [r7, #12]
 800f1ca:	f000 fb39 	bl	800f840 <SCSI_SenseCode>

    return -1;
 800f1ce:	f04f 33ff 	mov.w	r3, #4294967295
 800f1d2:	e02c      	b.n	800f22e <SCSI_TestUnitReady+0x98>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800f1d4:	697a      	ldr	r2, [r7, #20]
 800f1d6:	f248 0362 	movw	r3, #32866	; 0x8062
 800f1da:	4413      	add	r3, r2
 800f1dc:	781b      	ldrb	r3, [r3, #0]
 800f1de:	2b02      	cmp	r3, #2
 800f1e0:	d10b      	bne.n	800f1fa <SCSI_TestUnitReady+0x64>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800f1e2:	7af9      	ldrb	r1, [r7, #11]
 800f1e4:	233a      	movs	r3, #58	; 0x3a
 800f1e6:	2202      	movs	r2, #2
 800f1e8:	68f8      	ldr	r0, [r7, #12]
 800f1ea:	f000 fb29 	bl	800f840 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800f1ee:	697b      	ldr	r3, [r7, #20]
 800f1f0:	2205      	movs	r2, #5
 800f1f2:	721a      	strb	r2, [r3, #8]
    return -1;
 800f1f4:	f04f 33ff 	mov.w	r3, #4294967295
 800f1f8:	e019      	b.n	800f22e <SCSI_TestUnitReady+0x98>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f200:	689b      	ldr	r3, [r3, #8]
 800f202:	7afa      	ldrb	r2, [r7, #11]
 800f204:	4610      	mov	r0, r2
 800f206:	4798      	blx	r3
 800f208:	4603      	mov	r3, r0
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d00b      	beq.n	800f226 <SCSI_TestUnitReady+0x90>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800f20e:	7af9      	ldrb	r1, [r7, #11]
 800f210:	233a      	movs	r3, #58	; 0x3a
 800f212:	2202      	movs	r2, #2
 800f214:	68f8      	ldr	r0, [r7, #12]
 800f216:	f000 fb13 	bl	800f840 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800f21a:	697b      	ldr	r3, [r7, #20]
 800f21c:	2205      	movs	r2, #5
 800f21e:	721a      	strb	r2, [r3, #8]

    return -1;
 800f220:	f04f 33ff 	mov.w	r3, #4294967295
 800f224:	e003      	b.n	800f22e <SCSI_TestUnitReady+0x98>
  }
  hmsc->bot_data_length = 0U;
 800f226:	697b      	ldr	r3, [r7, #20]
 800f228:	2200      	movs	r2, #0
 800f22a:	60da      	str	r2, [r3, #12]

  return 0;
 800f22c:	2300      	movs	r3, #0
}
 800f22e:	4618      	mov	r0, r3
 800f230:	3718      	adds	r7, #24
 800f232:	46bd      	mov	sp, r7
 800f234:	bd80      	pop	{r7, pc}
	...

0800f238 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800f238:	b580      	push	{r7, lr}
 800f23a:	b088      	sub	sp, #32
 800f23c:	af00      	add	r7, sp, #0
 800f23e:	60f8      	str	r0, [r7, #12]
 800f240:	460b      	mov	r3, r1
 800f242:	607a      	str	r2, [r7, #4]
 800f244:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f24c:	61bb      	str	r3, [r7, #24]

  if (hmsc->cbw.dDataLength == 0U)
 800f24e:	69ba      	ldr	r2, [r7, #24]
 800f250:	f248 0318 	movw	r3, #32792	; 0x8018
 800f254:	4413      	add	r3, r2
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d10c      	bne.n	800f276 <SCSI_Inquiry+0x3e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f25c:	69ba      	ldr	r2, [r7, #24]
 800f25e:	f248 031d 	movw	r3, #32797	; 0x801d
 800f262:	4413      	add	r3, r2
 800f264:	7819      	ldrb	r1, [r3, #0]
 800f266:	2320      	movs	r3, #32
 800f268:	2205      	movs	r2, #5
 800f26a:	68f8      	ldr	r0, [r7, #12]
 800f26c:	f000 fae8 	bl	800f840 <SCSI_SenseCode>
    return -1;
 800f270:	f04f 33ff 	mov.w	r3, #4294967295
 800f274:	e04c      	b.n	800f310 <SCSI_Inquiry+0xd8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	3301      	adds	r3, #1
 800f27a:	781b      	ldrb	r3, [r3, #0]
 800f27c:	f003 0301 	and.w	r3, r3, #1
 800f280:	2b00      	cmp	r3, #0
 800f282:	d022      	beq.n	800f2ca <SCSI_Inquiry+0x92>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	3302      	adds	r3, #2
 800f288:	781b      	ldrb	r3, [r3, #0]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d105      	bne.n	800f29a <SCSI_Inquiry+0x62>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 800f28e:	2206      	movs	r2, #6
 800f290:	4921      	ldr	r1, [pc, #132]	; (800f318 <SCSI_Inquiry+0xe0>)
 800f292:	69b8      	ldr	r0, [r7, #24]
 800f294:	f001 f862 	bl	801035c <SCSI_UpdateBotData>
 800f298:	e039      	b.n	800f30e <SCSI_Inquiry+0xd6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	3302      	adds	r3, #2
 800f29e:	781b      	ldrb	r3, [r3, #0]
 800f2a0:	2b80      	cmp	r3, #128	; 0x80
 800f2a2:	d105      	bne.n	800f2b0 <SCSI_Inquiry+0x78>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 800f2a4:	2208      	movs	r2, #8
 800f2a6:	491d      	ldr	r1, [pc, #116]	; (800f31c <SCSI_Inquiry+0xe4>)
 800f2a8:	69b8      	ldr	r0, [r7, #24]
 800f2aa:	f001 f857 	bl	801035c <SCSI_UpdateBotData>
 800f2ae:	e02e      	b.n	800f30e <SCSI_Inquiry+0xd6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 800f2b0:	69ba      	ldr	r2, [r7, #24]
 800f2b2:	f248 031d 	movw	r3, #32797	; 0x801d
 800f2b6:	4413      	add	r3, r2
 800f2b8:	7819      	ldrb	r1, [r3, #0]
 800f2ba:	2324      	movs	r3, #36	; 0x24
 800f2bc:	2205      	movs	r2, #5
 800f2be:	68f8      	ldr	r0, [r7, #12]
 800f2c0:	f000 fabe 	bl	800f840 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 800f2c4:	f04f 33ff 	mov.w	r3, #4294967295
 800f2c8:	e022      	b.n	800f310 <SCSI_Inquiry+0xd8>
    }
  }
  else
  {
    pPage = (uint8_t *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f2d0:	69d9      	ldr	r1, [r3, #28]
 800f2d2:	7afa      	ldrb	r2, [r7, #11]
 800f2d4:	4613      	mov	r3, r2
 800f2d6:	00db      	lsls	r3, r3, #3
 800f2d8:	4413      	add	r3, r2
 800f2da:	009b      	lsls	r3, r3, #2
 800f2dc:	440b      	add	r3, r1
 800f2de:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 800f2e0:	697b      	ldr	r3, [r7, #20]
 800f2e2:	3304      	adds	r3, #4
 800f2e4:	781b      	ldrb	r3, [r3, #0]
 800f2e6:	b29b      	uxth	r3, r3
 800f2e8:	3305      	adds	r3, #5
 800f2ea:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	3304      	adds	r3, #4
 800f2f0:	781b      	ldrb	r3, [r3, #0]
 800f2f2:	b29b      	uxth	r3, r3
 800f2f4:	8bfa      	ldrh	r2, [r7, #30]
 800f2f6:	429a      	cmp	r2, r3
 800f2f8:	d303      	bcc.n	800f302 <SCSI_Inquiry+0xca>
    {
      len = params[4];
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	3304      	adds	r3, #4
 800f2fe:	781b      	ldrb	r3, [r3, #0]
 800f300:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 800f302:	8bfb      	ldrh	r3, [r7, #30]
 800f304:	461a      	mov	r2, r3
 800f306:	6979      	ldr	r1, [r7, #20]
 800f308:	69b8      	ldr	r0, [r7, #24]
 800f30a:	f001 f827 	bl	801035c <SCSI_UpdateBotData>
  }

  return 0;
 800f30e:	2300      	movs	r3, #0
}
 800f310:	4618      	mov	r0, r3
 800f312:	3720      	adds	r7, #32
 800f314:	46bd      	mov	sp, r7
 800f316:	bd80      	pop	{r7, pc}
 800f318:	240000b4 	.word	0x240000b4
 800f31c:	240000bc 	.word	0x240000bc

0800f320 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800f320:	b590      	push	{r4, r7, lr}
 800f322:	b087      	sub	sp, #28
 800f324:	af00      	add	r7, sp, #0
 800f326:	60f8      	str	r0, [r7, #12]
 800f328:	460b      	mov	r3, r1
 800f32a:	607a      	str	r2, [r7, #4]
 800f32c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f334:	617b      	str	r3, [r7, #20]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f33c:	685c      	ldr	r4, [r3, #4]
 800f33e:	697a      	ldr	r2, [r7, #20]
 800f340:	f248 0368 	movw	r3, #32872	; 0x8068
 800f344:	4413      	add	r3, r2
 800f346:	6979      	ldr	r1, [r7, #20]
 800f348:	f248 0264 	movw	r2, #32868	; 0x8064
 800f34c:	440a      	add	r2, r1
 800f34e:	7af8      	ldrb	r0, [r7, #11]
 800f350:	4619      	mov	r1, r3
 800f352:	47a0      	blx	r4
 800f354:	4603      	mov	r3, r0
 800f356:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800f358:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d106      	bne.n	800f36e <SCSI_ReadCapacity10+0x4e>
 800f360:	697a      	ldr	r2, [r7, #20]
 800f362:	f248 0362 	movw	r3, #32866	; 0x8062
 800f366:	4413      	add	r3, r2
 800f368:	781b      	ldrb	r3, [r3, #0]
 800f36a:	2b02      	cmp	r3, #2
 800f36c:	d108      	bne.n	800f380 <SCSI_ReadCapacity10+0x60>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800f36e:	7af9      	ldrb	r1, [r7, #11]
 800f370:	233a      	movs	r3, #58	; 0x3a
 800f372:	2202      	movs	r2, #2
 800f374:	68f8      	ldr	r0, [r7, #12]
 800f376:	f000 fa63 	bl	800f840 <SCSI_SenseCode>
    return -1;
 800f37a:	f04f 33ff 	mov.w	r3, #4294967295
 800f37e:	e04f      	b.n	800f420 <SCSI_ReadCapacity10+0x100>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800f380:	697a      	ldr	r2, [r7, #20]
 800f382:	f248 0368 	movw	r3, #32872	; 0x8068
 800f386:	4413      	add	r3, r2
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	3b01      	subs	r3, #1
 800f38c:	0e1b      	lsrs	r3, r3, #24
 800f38e:	b2da      	uxtb	r2, r3
 800f390:	697b      	ldr	r3, [r7, #20]
 800f392:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800f394:	697a      	ldr	r2, [r7, #20]
 800f396:	f248 0368 	movw	r3, #32872	; 0x8068
 800f39a:	4413      	add	r3, r2
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	3b01      	subs	r3, #1
 800f3a0:	0c1b      	lsrs	r3, r3, #16
 800f3a2:	b2da      	uxtb	r2, r3
 800f3a4:	697b      	ldr	r3, [r7, #20]
 800f3a6:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800f3a8:	697a      	ldr	r2, [r7, #20]
 800f3aa:	f248 0368 	movw	r3, #32872	; 0x8068
 800f3ae:	4413      	add	r3, r2
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	3b01      	subs	r3, #1
 800f3b4:	0a1b      	lsrs	r3, r3, #8
 800f3b6:	b2da      	uxtb	r2, r3
 800f3b8:	697b      	ldr	r3, [r7, #20]
 800f3ba:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800f3bc:	697a      	ldr	r2, [r7, #20]
 800f3be:	f248 0368 	movw	r3, #32872	; 0x8068
 800f3c2:	4413      	add	r3, r2
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	b2db      	uxtb	r3, r3
 800f3c8:	3b01      	subs	r3, #1
 800f3ca:	b2da      	uxtb	r2, r3
 800f3cc:	697b      	ldr	r3, [r7, #20]
 800f3ce:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800f3d0:	697a      	ldr	r2, [r7, #20]
 800f3d2:	f248 0364 	movw	r3, #32868	; 0x8064
 800f3d6:	4413      	add	r3, r2
 800f3d8:	881b      	ldrh	r3, [r3, #0]
 800f3da:	161b      	asrs	r3, r3, #24
 800f3dc:	b2da      	uxtb	r2, r3
 800f3de:	697b      	ldr	r3, [r7, #20]
 800f3e0:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800f3e2:	697a      	ldr	r2, [r7, #20]
 800f3e4:	f248 0364 	movw	r3, #32868	; 0x8064
 800f3e8:	4413      	add	r3, r2
 800f3ea:	881b      	ldrh	r3, [r3, #0]
 800f3ec:	141b      	asrs	r3, r3, #16
 800f3ee:	b2da      	uxtb	r2, r3
 800f3f0:	697b      	ldr	r3, [r7, #20]
 800f3f2:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800f3f4:	697a      	ldr	r2, [r7, #20]
 800f3f6:	f248 0364 	movw	r3, #32868	; 0x8064
 800f3fa:	4413      	add	r3, r2
 800f3fc:	881b      	ldrh	r3, [r3, #0]
 800f3fe:	0a1b      	lsrs	r3, r3, #8
 800f400:	b29b      	uxth	r3, r3
 800f402:	b2da      	uxtb	r2, r3
 800f404:	697b      	ldr	r3, [r7, #20]
 800f406:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800f408:	697a      	ldr	r2, [r7, #20]
 800f40a:	f248 0364 	movw	r3, #32868	; 0x8064
 800f40e:	4413      	add	r3, r2
 800f410:	881b      	ldrh	r3, [r3, #0]
 800f412:	b2da      	uxtb	r2, r3
 800f414:	697b      	ldr	r3, [r7, #20]
 800f416:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 800f418:	697b      	ldr	r3, [r7, #20]
 800f41a:	2208      	movs	r2, #8
 800f41c:	60da      	str	r2, [r3, #12]

  return 0;
 800f41e:	2300      	movs	r3, #0

}
 800f420:	4618      	mov	r0, r3
 800f422:	371c      	adds	r7, #28
 800f424:	46bd      	mov	sp, r7
 800f426:	bd90      	pop	{r4, r7, pc}

0800f428 <SCSI_ReadCapacity16>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800f428:	b590      	push	{r4, r7, lr}
 800f42a:	b089      	sub	sp, #36	; 0x24
 800f42c:	af00      	add	r7, sp, #0
 800f42e:	60f8      	str	r0, [r7, #12]
 800f430:	460b      	mov	r3, r1
 800f432:	607a      	str	r2, [r7, #4]
 800f434:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f43c:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f444:	685c      	ldr	r4, [r3, #4]
 800f446:	69ba      	ldr	r2, [r7, #24]
 800f448:	f248 0368 	movw	r3, #32872	; 0x8068
 800f44c:	4413      	add	r3, r2
 800f44e:	69b9      	ldr	r1, [r7, #24]
 800f450:	f248 0264 	movw	r2, #32868	; 0x8064
 800f454:	440a      	add	r2, r1
 800f456:	7af8      	ldrb	r0, [r7, #11]
 800f458:	4619      	mov	r1, r3
 800f45a:	47a0      	blx	r4
 800f45c:	4603      	mov	r3, r0
 800f45e:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800f460:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f464:	2b00      	cmp	r3, #0
 800f466:	d106      	bne.n	800f476 <SCSI_ReadCapacity16+0x4e>
 800f468:	69ba      	ldr	r2, [r7, #24]
 800f46a:	f248 0362 	movw	r3, #32866	; 0x8062
 800f46e:	4413      	add	r3, r2
 800f470:	781b      	ldrb	r3, [r3, #0]
 800f472:	2b02      	cmp	r3, #2
 800f474:	d108      	bne.n	800f488 <SCSI_ReadCapacity16+0x60>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800f476:	7af9      	ldrb	r1, [r7, #11]
 800f478:	233a      	movs	r3, #58	; 0x3a
 800f47a:	2202      	movs	r2, #2
 800f47c:	68f8      	ldr	r0, [r7, #12]
 800f47e:	f000 f9df 	bl	800f840 <SCSI_SenseCode>
    return -1;
 800f482:	f04f 33ff 	mov.w	r3, #4294967295
 800f486:	e084      	b.n	800f592 <SCSI_ReadCapacity16+0x16a>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	330a      	adds	r3, #10
 800f48c:	781b      	ldrb	r3, [r3, #0]
 800f48e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	330b      	adds	r3, #11
 800f494:	781b      	ldrb	r3, [r3, #0]
 800f496:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800f498:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	330c      	adds	r3, #12
 800f49e:	781b      	ldrb	r3, [r3, #0]
 800f4a0:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800f4a2:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 800f4a4:	687a      	ldr	r2, [r7, #4]
 800f4a6:	320d      	adds	r2, #13
 800f4a8:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800f4aa:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800f4ac:	69bb      	ldr	r3, [r7, #24]
 800f4ae:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800f4b0:	2300      	movs	r3, #0
 800f4b2:	77fb      	strb	r3, [r7, #31]
 800f4b4:	e007      	b.n	800f4c6 <SCSI_ReadCapacity16+0x9e>
  {
    hmsc->bot_data[idx] = 0U;
 800f4b6:	7ffb      	ldrb	r3, [r7, #31]
 800f4b8:	69ba      	ldr	r2, [r7, #24]
 800f4ba:	4413      	add	r3, r2
 800f4bc:	2200      	movs	r2, #0
 800f4be:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800f4c0:	7ffb      	ldrb	r3, [r7, #31]
 800f4c2:	3301      	adds	r3, #1
 800f4c4:	77fb      	strb	r3, [r7, #31]
 800f4c6:	7ffa      	ldrb	r2, [r7, #31]
 800f4c8:	69bb      	ldr	r3, [r7, #24]
 800f4ca:	68db      	ldr	r3, [r3, #12]
 800f4cc:	429a      	cmp	r2, r3
 800f4ce:	d3f2      	bcc.n	800f4b6 <SCSI_ReadCapacity16+0x8e>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800f4d0:	69ba      	ldr	r2, [r7, #24]
 800f4d2:	f248 0368 	movw	r3, #32872	; 0x8068
 800f4d6:	4413      	add	r3, r2
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	3b01      	subs	r3, #1
 800f4dc:	0e1b      	lsrs	r3, r3, #24
 800f4de:	b2da      	uxtb	r2, r3
 800f4e0:	69bb      	ldr	r3, [r7, #24]
 800f4e2:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800f4e4:	69ba      	ldr	r2, [r7, #24]
 800f4e6:	f248 0368 	movw	r3, #32872	; 0x8068
 800f4ea:	4413      	add	r3, r2
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	3b01      	subs	r3, #1
 800f4f0:	0c1b      	lsrs	r3, r3, #16
 800f4f2:	b2da      	uxtb	r2, r3
 800f4f4:	69bb      	ldr	r3, [r7, #24]
 800f4f6:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800f4f8:	69ba      	ldr	r2, [r7, #24]
 800f4fa:	f248 0368 	movw	r3, #32872	; 0x8068
 800f4fe:	4413      	add	r3, r2
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	3b01      	subs	r3, #1
 800f504:	0a1b      	lsrs	r3, r3, #8
 800f506:	b2da      	uxtb	r2, r3
 800f508:	69bb      	ldr	r3, [r7, #24]
 800f50a:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800f50c:	69ba      	ldr	r2, [r7, #24]
 800f50e:	f248 0368 	movw	r3, #32872	; 0x8068
 800f512:	4413      	add	r3, r2
 800f514:	681b      	ldr	r3, [r3, #0]
 800f516:	b2db      	uxtb	r3, r3
 800f518:	3b01      	subs	r3, #1
 800f51a:	b2da      	uxtb	r2, r3
 800f51c:	69bb      	ldr	r3, [r7, #24]
 800f51e:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800f520:	69ba      	ldr	r2, [r7, #24]
 800f522:	f248 0364 	movw	r3, #32868	; 0x8064
 800f526:	4413      	add	r3, r2
 800f528:	881b      	ldrh	r3, [r3, #0]
 800f52a:	161b      	asrs	r3, r3, #24
 800f52c:	b2da      	uxtb	r2, r3
 800f52e:	69bb      	ldr	r3, [r7, #24]
 800f530:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800f532:	69ba      	ldr	r2, [r7, #24]
 800f534:	f248 0364 	movw	r3, #32868	; 0x8064
 800f538:	4413      	add	r3, r2
 800f53a:	881b      	ldrh	r3, [r3, #0]
 800f53c:	141b      	asrs	r3, r3, #16
 800f53e:	b2da      	uxtb	r2, r3
 800f540:	69bb      	ldr	r3, [r7, #24]
 800f542:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800f544:	69ba      	ldr	r2, [r7, #24]
 800f546:	f248 0364 	movw	r3, #32868	; 0x8064
 800f54a:	4413      	add	r3, r2
 800f54c:	881b      	ldrh	r3, [r3, #0]
 800f54e:	0a1b      	lsrs	r3, r3, #8
 800f550:	b29b      	uxth	r3, r3
 800f552:	b2da      	uxtb	r2, r3
 800f554:	69bb      	ldr	r3, [r7, #24]
 800f556:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 800f558:	69ba      	ldr	r2, [r7, #24]
 800f55a:	f248 0364 	movw	r3, #32868	; 0x8064
 800f55e:	4413      	add	r3, r2
 800f560:	881b      	ldrh	r3, [r3, #0]
 800f562:	b2da      	uxtb	r2, r3
 800f564:	69bb      	ldr	r3, [r7, #24]
 800f566:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	330a      	adds	r3, #10
 800f56c:	781b      	ldrb	r3, [r3, #0]
 800f56e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	330b      	adds	r3, #11
 800f574:	781b      	ldrb	r3, [r3, #0]
 800f576:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800f578:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	330c      	adds	r3, #12
 800f57e:	781b      	ldrb	r3, [r3, #0]
 800f580:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800f582:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 800f584:	687a      	ldr	r2, [r7, #4]
 800f586:	320d      	adds	r2, #13
 800f588:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800f58a:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800f58c:	69bb      	ldr	r3, [r7, #24]
 800f58e:	60da      	str	r2, [r3, #12]

  return 0;
 800f590:	2300      	movs	r3, #0
}
 800f592:	4618      	mov	r0, r3
 800f594:	3724      	adds	r7, #36	; 0x24
 800f596:	46bd      	mov	sp, r7
 800f598:	bd90      	pop	{r4, r7, pc}

0800f59a <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800f59a:	b580      	push	{r7, lr}
 800f59c:	b088      	sub	sp, #32
 800f59e:	af00      	add	r7, sp, #0
 800f5a0:	60f8      	str	r0, [r7, #12]
 800f5a2:	460b      	mov	r3, r1
 800f5a4:	607a      	str	r2, [r7, #4]
 800f5a6:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f5ae:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f5b6:	685b      	ldr	r3, [r3, #4]
 800f5b8:	f107 0214 	add.w	r2, r7, #20
 800f5bc:	f107 0110 	add.w	r1, r7, #16
 800f5c0:	7af8      	ldrb	r0, [r7, #11]
 800f5c2:	4798      	blx	r3
 800f5c4:	4603      	mov	r3, r0
 800f5c6:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800f5c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d106      	bne.n	800f5de <SCSI_ReadFormatCapacity+0x44>
 800f5d0:	69ba      	ldr	r2, [r7, #24]
 800f5d2:	f248 0362 	movw	r3, #32866	; 0x8062
 800f5d6:	4413      	add	r3, r2
 800f5d8:	781b      	ldrb	r3, [r3, #0]
 800f5da:	2b02      	cmp	r3, #2
 800f5dc:	d108      	bne.n	800f5f0 <SCSI_ReadFormatCapacity+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800f5de:	7af9      	ldrb	r1, [r7, #11]
 800f5e0:	233a      	movs	r3, #58	; 0x3a
 800f5e2:	2202      	movs	r2, #2
 800f5e4:	68f8      	ldr	r0, [r7, #12]
 800f5e6:	f000 f92b 	bl	800f840 <SCSI_SenseCode>
    return -1;
 800f5ea:	f04f 33ff 	mov.w	r3, #4294967295
 800f5ee:	e03e      	b.n	800f66e <SCSI_ReadFormatCapacity+0xd4>
  }

  for (i = 0U; i < 12U ; i++)
 800f5f0:	2300      	movs	r3, #0
 800f5f2:	83fb      	strh	r3, [r7, #30]
 800f5f4:	e007      	b.n	800f606 <SCSI_ReadFormatCapacity+0x6c>
  {
    hmsc->bot_data[i] = 0U;
 800f5f6:	8bfb      	ldrh	r3, [r7, #30]
 800f5f8:	69ba      	ldr	r2, [r7, #24]
 800f5fa:	4413      	add	r3, r2
 800f5fc:	2200      	movs	r2, #0
 800f5fe:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 800f600:	8bfb      	ldrh	r3, [r7, #30]
 800f602:	3301      	adds	r3, #1
 800f604:	83fb      	strh	r3, [r7, #30]
 800f606:	8bfb      	ldrh	r3, [r7, #30]
 800f608:	2b0b      	cmp	r3, #11
 800f60a:	d9f4      	bls.n	800f5f6 <SCSI_ReadFormatCapacity+0x5c>
  }

  hmsc->bot_data[3] = 0x08U;
 800f60c:	69bb      	ldr	r3, [r7, #24]
 800f60e:	2208      	movs	r2, #8
 800f610:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800f612:	693b      	ldr	r3, [r7, #16]
 800f614:	3b01      	subs	r3, #1
 800f616:	0e1b      	lsrs	r3, r3, #24
 800f618:	b2da      	uxtb	r2, r3
 800f61a:	69bb      	ldr	r3, [r7, #24]
 800f61c:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800f61e:	693b      	ldr	r3, [r7, #16]
 800f620:	3b01      	subs	r3, #1
 800f622:	0c1b      	lsrs	r3, r3, #16
 800f624:	b2da      	uxtb	r2, r3
 800f626:	69bb      	ldr	r3, [r7, #24]
 800f628:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800f62a:	693b      	ldr	r3, [r7, #16]
 800f62c:	3b01      	subs	r3, #1
 800f62e:	0a1b      	lsrs	r3, r3, #8
 800f630:	b2da      	uxtb	r2, r3
 800f632:	69bb      	ldr	r3, [r7, #24]
 800f634:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800f636:	693b      	ldr	r3, [r7, #16]
 800f638:	b2db      	uxtb	r3, r3
 800f63a:	3b01      	subs	r3, #1
 800f63c:	b2da      	uxtb	r2, r3
 800f63e:	69bb      	ldr	r3, [r7, #24]
 800f640:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 800f642:	69bb      	ldr	r3, [r7, #24]
 800f644:	2202      	movs	r2, #2
 800f646:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 800f648:	8abb      	ldrh	r3, [r7, #20]
 800f64a:	141b      	asrs	r3, r3, #16
 800f64c:	b2da      	uxtb	r2, r3
 800f64e:	69bb      	ldr	r3, [r7, #24]
 800f650:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800f652:	8abb      	ldrh	r3, [r7, #20]
 800f654:	0a1b      	lsrs	r3, r3, #8
 800f656:	b29b      	uxth	r3, r3
 800f658:	b2da      	uxtb	r2, r3
 800f65a:	69bb      	ldr	r3, [r7, #24]
 800f65c:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 800f65e:	8abb      	ldrh	r3, [r7, #20]
 800f660:	b2da      	uxtb	r2, r3
 800f662:	69bb      	ldr	r3, [r7, #24]
 800f664:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 800f666:	69bb      	ldr	r3, [r7, #24]
 800f668:	220c      	movs	r2, #12
 800f66a:	60da      	str	r2, [r3, #12]

  return 0;
 800f66c:	2300      	movs	r3, #0
}
 800f66e:	4618      	mov	r0, r3
 800f670:	3720      	adds	r7, #32
 800f672:	46bd      	mov	sp, r7
 800f674:	bd80      	pop	{r7, pc}
	...

0800f678 <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800f678:	b580      	push	{r7, lr}
 800f67a:	b086      	sub	sp, #24
 800f67c:	af00      	add	r7, sp, #0
 800f67e:	60f8      	str	r0, [r7, #12]
 800f680:	460b      	mov	r3, r1
 800f682:	607a      	str	r2, [r7, #4]
 800f684:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f68c:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 800f68e:	2317      	movs	r3, #23
 800f690:	82fb      	strh	r3, [r7, #22]

  if (params[4] <= len)
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	3304      	adds	r3, #4
 800f696:	781b      	ldrb	r3, [r3, #0]
 800f698:	b29b      	uxth	r3, r3
 800f69a:	8afa      	ldrh	r2, [r7, #22]
 800f69c:	429a      	cmp	r2, r3
 800f69e:	d303      	bcc.n	800f6a8 <SCSI_ModeSense6+0x30>
  {
    len = params[4];
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	3304      	adds	r3, #4
 800f6a4:	781b      	ldrb	r3, [r3, #0]
 800f6a6:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 800f6a8:	8afb      	ldrh	r3, [r7, #22]
 800f6aa:	461a      	mov	r2, r3
 800f6ac:	4904      	ldr	r1, [pc, #16]	; (800f6c0 <SCSI_ModeSense6+0x48>)
 800f6ae:	6938      	ldr	r0, [r7, #16]
 800f6b0:	f000 fe54 	bl	801035c <SCSI_UpdateBotData>

  return 0;
 800f6b4:	2300      	movs	r3, #0
}
 800f6b6:	4618      	mov	r0, r3
 800f6b8:	3718      	adds	r7, #24
 800f6ba:	46bd      	mov	sp, r7
 800f6bc:	bd80      	pop	{r7, pc}
 800f6be:	bf00      	nop
 800f6c0:	240000c4 	.word	0x240000c4

0800f6c4 <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800f6c4:	b580      	push	{r7, lr}
 800f6c6:	b086      	sub	sp, #24
 800f6c8:	af00      	add	r7, sp, #0
 800f6ca:	60f8      	str	r0, [r7, #12]
 800f6cc:	460b      	mov	r3, r1
 800f6ce:	607a      	str	r2, [r7, #4]
 800f6d0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f6d8:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 800f6da:	231b      	movs	r3, #27
 800f6dc:	82fb      	strh	r3, [r7, #22]

  if (params[8] <= len)
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	3308      	adds	r3, #8
 800f6e2:	781b      	ldrb	r3, [r3, #0]
 800f6e4:	b29b      	uxth	r3, r3
 800f6e6:	8afa      	ldrh	r2, [r7, #22]
 800f6e8:	429a      	cmp	r2, r3
 800f6ea:	d303      	bcc.n	800f6f4 <SCSI_ModeSense10+0x30>
  {
    len = params[8];
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	3308      	adds	r3, #8
 800f6f0:	781b      	ldrb	r3, [r3, #0]
 800f6f2:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 800f6f4:	8afb      	ldrh	r3, [r7, #22]
 800f6f6:	461a      	mov	r2, r3
 800f6f8:	4904      	ldr	r1, [pc, #16]	; (800f70c <SCSI_ModeSense10+0x48>)
 800f6fa:	6938      	ldr	r0, [r7, #16]
 800f6fc:	f000 fe2e 	bl	801035c <SCSI_UpdateBotData>

  return 0;
 800f700:	2300      	movs	r3, #0
}
 800f702:	4618      	mov	r0, r3
 800f704:	3718      	adds	r7, #24
 800f706:	46bd      	mov	sp, r7
 800f708:	bd80      	pop	{r7, pc}
 800f70a:	bf00      	nop
 800f70c:	240000dc 	.word	0x240000dc

0800f710 <SCSI_RequestSense>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800f710:	b580      	push	{r7, lr}
 800f712:	b086      	sub	sp, #24
 800f714:	af00      	add	r7, sp, #0
 800f716:	60f8      	str	r0, [r7, #12]
 800f718:	460b      	mov	r3, r1
 800f71a:	607a      	str	r2, [r7, #4]
 800f71c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f724:	613b      	str	r3, [r7, #16]

  if (hmsc->cbw.dDataLength == 0U)
 800f726:	693a      	ldr	r2, [r7, #16]
 800f728:	f248 0318 	movw	r3, #32792	; 0x8018
 800f72c:	4413      	add	r3, r2
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	2b00      	cmp	r3, #0
 800f732:	d10c      	bne.n	800f74e <SCSI_RequestSense+0x3e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f734:	693a      	ldr	r2, [r7, #16]
 800f736:	f248 031d 	movw	r3, #32797	; 0x801d
 800f73a:	4413      	add	r3, r2
 800f73c:	7819      	ldrb	r1, [r3, #0]
 800f73e:	2320      	movs	r3, #32
 800f740:	2205      	movs	r2, #5
 800f742:	68f8      	ldr	r0, [r7, #12]
 800f744:	f000 f87c 	bl	800f840 <SCSI_SenseCode>
    return -1;
 800f748:	f04f 33ff 	mov.w	r3, #4294967295
 800f74c:	e074      	b.n	800f838 <SCSI_RequestSense+0x128>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800f74e:	2300      	movs	r3, #0
 800f750:	75fb      	strb	r3, [r7, #23]
 800f752:	e007      	b.n	800f764 <SCSI_RequestSense+0x54>
  {
    hmsc->bot_data[i] = 0U;
 800f754:	7dfb      	ldrb	r3, [r7, #23]
 800f756:	693a      	ldr	r2, [r7, #16]
 800f758:	4413      	add	r3, r2
 800f75a:	2200      	movs	r2, #0
 800f75c:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800f75e:	7dfb      	ldrb	r3, [r7, #23]
 800f760:	3301      	adds	r3, #1
 800f762:	75fb      	strb	r3, [r7, #23]
 800f764:	7dfb      	ldrb	r3, [r7, #23]
 800f766:	2b11      	cmp	r3, #17
 800f768:	d9f4      	bls.n	800f754 <SCSI_RequestSense+0x44>
  }

  hmsc->bot_data[0] = 0x70U;
 800f76a:	693b      	ldr	r3, [r7, #16]
 800f76c:	2270      	movs	r2, #112	; 0x70
 800f76e:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800f770:	693b      	ldr	r3, [r7, #16]
 800f772:	220c      	movs	r2, #12
 800f774:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800f776:	693a      	ldr	r2, [r7, #16]
 800f778:	f248 0360 	movw	r3, #32864	; 0x8060
 800f77c:	4413      	add	r3, r2
 800f77e:	781a      	ldrb	r2, [r3, #0]
 800f780:	6939      	ldr	r1, [r7, #16]
 800f782:	f248 0361 	movw	r3, #32865	; 0x8061
 800f786:	440b      	add	r3, r1
 800f788:	781b      	ldrb	r3, [r3, #0]
 800f78a:	429a      	cmp	r2, r3
 800f78c:	d045      	beq.n	800f81a <SCSI_RequestSense+0x10a>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800f78e:	693a      	ldr	r2, [r7, #16]
 800f790:	f248 0360 	movw	r3, #32864	; 0x8060
 800f794:	4413      	add	r3, r2
 800f796:	781b      	ldrb	r3, [r3, #0]
 800f798:	4619      	mov	r1, r3
 800f79a:	693a      	ldr	r2, [r7, #16]
 800f79c:	f241 0308 	movw	r3, #4104	; 0x1008
 800f7a0:	440b      	add	r3, r1
 800f7a2:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 800f7a6:	693b      	ldr	r3, [r7, #16]
 800f7a8:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800f7aa:	693a      	ldr	r2, [r7, #16]
 800f7ac:	f248 0360 	movw	r3, #32864	; 0x8060
 800f7b0:	4413      	add	r3, r2
 800f7b2:	781b      	ldrb	r3, [r3, #0]
 800f7b4:	4619      	mov	r1, r3
 800f7b6:	693a      	ldr	r2, [r7, #16]
 800f7b8:	f241 0308 	movw	r3, #4104	; 0x1008
 800f7bc:	440b      	add	r3, r1
 800f7be:	00db      	lsls	r3, r3, #3
 800f7c0:	4413      	add	r3, r2
 800f7c2:	791a      	ldrb	r2, [r3, #4]
 800f7c4:	693b      	ldr	r3, [r7, #16]
 800f7c6:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800f7c8:	693a      	ldr	r2, [r7, #16]
 800f7ca:	f248 0360 	movw	r3, #32864	; 0x8060
 800f7ce:	4413      	add	r3, r2
 800f7d0:	781b      	ldrb	r3, [r3, #0]
 800f7d2:	4619      	mov	r1, r3
 800f7d4:	693a      	ldr	r2, [r7, #16]
 800f7d6:	f241 0308 	movw	r3, #4104	; 0x1008
 800f7da:	440b      	add	r3, r1
 800f7dc:	00db      	lsls	r3, r3, #3
 800f7de:	4413      	add	r3, r2
 800f7e0:	795a      	ldrb	r2, [r3, #5]
 800f7e2:	693b      	ldr	r3, [r7, #16]
 800f7e4:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 800f7e6:	693a      	ldr	r2, [r7, #16]
 800f7e8:	f248 0360 	movw	r3, #32864	; 0x8060
 800f7ec:	4413      	add	r3, r2
 800f7ee:	781b      	ldrb	r3, [r3, #0]
 800f7f0:	3301      	adds	r3, #1
 800f7f2:	b2d9      	uxtb	r1, r3
 800f7f4:	693a      	ldr	r2, [r7, #16]
 800f7f6:	f248 0360 	movw	r3, #32864	; 0x8060
 800f7fa:	4413      	add	r3, r2
 800f7fc:	460a      	mov	r2, r1
 800f7fe:	701a      	strb	r2, [r3, #0]

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800f800:	693a      	ldr	r2, [r7, #16]
 800f802:	f248 0360 	movw	r3, #32864	; 0x8060
 800f806:	4413      	add	r3, r2
 800f808:	781b      	ldrb	r3, [r3, #0]
 800f80a:	2b04      	cmp	r3, #4
 800f80c:	d105      	bne.n	800f81a <SCSI_RequestSense+0x10a>
    {
      hmsc->scsi_sense_head = 0U;
 800f80e:	693a      	ldr	r2, [r7, #16]
 800f810:	f248 0360 	movw	r3, #32864	; 0x8060
 800f814:	4413      	add	r3, r2
 800f816:	2200      	movs	r2, #0
 800f818:	701a      	strb	r2, [r3, #0]
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800f81a:	693b      	ldr	r3, [r7, #16]
 800f81c:	2212      	movs	r2, #18
 800f81e:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	3304      	adds	r3, #4
 800f824:	781b      	ldrb	r3, [r3, #0]
 800f826:	2b12      	cmp	r3, #18
 800f828:	d805      	bhi.n	800f836 <SCSI_RequestSense+0x126>
  {
    hmsc->bot_data_length = params[4];
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	3304      	adds	r3, #4
 800f82e:	781b      	ldrb	r3, [r3, #0]
 800f830:	461a      	mov	r2, r3
 800f832:	693b      	ldr	r3, [r7, #16]
 800f834:	60da      	str	r2, [r3, #12]
  }

  return 0;
 800f836:	2300      	movs	r3, #0
}
 800f838:	4618      	mov	r0, r3
 800f83a:	3718      	adds	r7, #24
 800f83c:	46bd      	mov	sp, r7
 800f83e:	bd80      	pop	{r7, pc}

0800f840 <SCSI_SenseCode>:
* @param  ASC: Additional Sense Code
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800f840:	b480      	push	{r7}
 800f842:	b085      	sub	sp, #20
 800f844:	af00      	add	r7, sp, #0
 800f846:	6078      	str	r0, [r7, #4]
 800f848:	4608      	mov	r0, r1
 800f84a:	4611      	mov	r1, r2
 800f84c:	461a      	mov	r2, r3
 800f84e:	4603      	mov	r3, r0
 800f850:	70fb      	strb	r3, [r7, #3]
 800f852:	460b      	mov	r3, r1
 800f854:	70bb      	strb	r3, [r7, #2]
 800f856:	4613      	mov	r3, r2
 800f858:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f860:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800f862:	68fa      	ldr	r2, [r7, #12]
 800f864:	f248 0361 	movw	r3, #32865	; 0x8061
 800f868:	4413      	add	r3, r2
 800f86a:	781b      	ldrb	r3, [r3, #0]
 800f86c:	4619      	mov	r1, r3
 800f86e:	68fa      	ldr	r2, [r7, #12]
 800f870:	f241 0308 	movw	r3, #4104	; 0x1008
 800f874:	440b      	add	r3, r1
 800f876:	78b9      	ldrb	r1, [r7, #2]
 800f878:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800f87c:	68fa      	ldr	r2, [r7, #12]
 800f87e:	f248 0361 	movw	r3, #32865	; 0x8061
 800f882:	4413      	add	r3, r2
 800f884:	781b      	ldrb	r3, [r3, #0]
 800f886:	4619      	mov	r1, r3
 800f888:	68fa      	ldr	r2, [r7, #12]
 800f88a:	f241 0308 	movw	r3, #4104	; 0x1008
 800f88e:	440b      	add	r3, r1
 800f890:	00db      	lsls	r3, r3, #3
 800f892:	4413      	add	r3, r2
 800f894:	787a      	ldrb	r2, [r7, #1]
 800f896:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 800f898:	68fa      	ldr	r2, [r7, #12]
 800f89a:	f248 0361 	movw	r3, #32865	; 0x8061
 800f89e:	4413      	add	r3, r2
 800f8a0:	781b      	ldrb	r3, [r3, #0]
 800f8a2:	4619      	mov	r1, r3
 800f8a4:	68fa      	ldr	r2, [r7, #12]
 800f8a6:	f241 0308 	movw	r3, #4104	; 0x1008
 800f8aa:	440b      	add	r3, r1
 800f8ac:	00db      	lsls	r3, r3, #3
 800f8ae:	4413      	add	r3, r2
 800f8b0:	2200      	movs	r2, #0
 800f8b2:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 800f8b4:	68fa      	ldr	r2, [r7, #12]
 800f8b6:	f248 0361 	movw	r3, #32865	; 0x8061
 800f8ba:	4413      	add	r3, r2
 800f8bc:	781b      	ldrb	r3, [r3, #0]
 800f8be:	3301      	adds	r3, #1
 800f8c0:	b2d9      	uxtb	r1, r3
 800f8c2:	68fa      	ldr	r2, [r7, #12]
 800f8c4:	f248 0361 	movw	r3, #32865	; 0x8061
 800f8c8:	4413      	add	r3, r2
 800f8ca:	460a      	mov	r2, r1
 800f8cc:	701a      	strb	r2, [r3, #0]

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800f8ce:	68fa      	ldr	r2, [r7, #12]
 800f8d0:	f248 0361 	movw	r3, #32865	; 0x8061
 800f8d4:	4413      	add	r3, r2
 800f8d6:	781b      	ldrb	r3, [r3, #0]
 800f8d8:	2b04      	cmp	r3, #4
 800f8da:	d105      	bne.n	800f8e8 <SCSI_SenseCode+0xa8>
  {
    hmsc->scsi_sense_tail = 0U;
 800f8dc:	68fa      	ldr	r2, [r7, #12]
 800f8de:	f248 0361 	movw	r3, #32865	; 0x8061
 800f8e2:	4413      	add	r3, r2
 800f8e4:	2200      	movs	r2, #0
 800f8e6:	701a      	strb	r2, [r3, #0]
  }
}
 800f8e8:	bf00      	nop
 800f8ea:	3714      	adds	r7, #20
 800f8ec:	46bd      	mov	sp, r7
 800f8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f2:	4770      	bx	lr

0800f8f4 <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800f8f4:	b580      	push	{r7, lr}
 800f8f6:	b086      	sub	sp, #24
 800f8f8:	af00      	add	r7, sp, #0
 800f8fa:	60f8      	str	r0, [r7, #12]
 800f8fc:	460b      	mov	r3, r1
 800f8fe:	607a      	str	r2, [r7, #4]
 800f900:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f908:	617b      	str	r3, [r7, #20]

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800f90a:	697a      	ldr	r2, [r7, #20]
 800f90c:	f248 0362 	movw	r3, #32866	; 0x8062
 800f910:	4413      	add	r3, r2
 800f912:	781b      	ldrb	r3, [r3, #0]
 800f914:	2b01      	cmp	r3, #1
 800f916:	d10f      	bne.n	800f938 <SCSI_StartStopUnit+0x44>
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	3304      	adds	r3, #4
 800f91c:	781b      	ldrb	r3, [r3, #0]
 800f91e:	f003 0303 	and.w	r3, r3, #3
 800f922:	2b02      	cmp	r3, #2
 800f924:	d108      	bne.n	800f938 <SCSI_StartStopUnit+0x44>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800f926:	7af9      	ldrb	r1, [r7, #11]
 800f928:	2324      	movs	r3, #36	; 0x24
 800f92a:	2205      	movs	r2, #5
 800f92c:	68f8      	ldr	r0, [r7, #12]
 800f92e:	f7ff ff87 	bl	800f840 <SCSI_SenseCode>

    return -1;
 800f932:	f04f 33ff 	mov.w	r3, #4294967295
 800f936:	e02c      	b.n	800f992 <SCSI_StartStopUnit+0x9e>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	3304      	adds	r3, #4
 800f93c:	781b      	ldrb	r3, [r3, #0]
 800f93e:	f003 0303 	and.w	r3, r3, #3
 800f942:	2b01      	cmp	r3, #1
 800f944:	d106      	bne.n	800f954 <SCSI_StartStopUnit+0x60>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800f946:	697a      	ldr	r2, [r7, #20]
 800f948:	f248 0362 	movw	r3, #32866	; 0x8062
 800f94c:	4413      	add	r3, r2
 800f94e:	2200      	movs	r2, #0
 800f950:	701a      	strb	r2, [r3, #0]
 800f952:	e01a      	b.n	800f98a <SCSI_StartStopUnit+0x96>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	3304      	adds	r3, #4
 800f958:	781b      	ldrb	r3, [r3, #0]
 800f95a:	f003 0303 	and.w	r3, r3, #3
 800f95e:	2b02      	cmp	r3, #2
 800f960:	d106      	bne.n	800f970 <SCSI_StartStopUnit+0x7c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 800f962:	697a      	ldr	r2, [r7, #20]
 800f964:	f248 0362 	movw	r3, #32866	; 0x8062
 800f968:	4413      	add	r3, r2
 800f96a:	2202      	movs	r2, #2
 800f96c:	701a      	strb	r2, [r3, #0]
 800f96e:	e00c      	b.n	800f98a <SCSI_StartStopUnit+0x96>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	3304      	adds	r3, #4
 800f974:	781b      	ldrb	r3, [r3, #0]
 800f976:	f003 0303 	and.w	r3, r3, #3
 800f97a:	2b03      	cmp	r3, #3
 800f97c:	d105      	bne.n	800f98a <SCSI_StartStopUnit+0x96>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800f97e:	697a      	ldr	r2, [r7, #20]
 800f980:	f248 0362 	movw	r3, #32866	; 0x8062
 800f984:	4413      	add	r3, r2
 800f986:	2200      	movs	r2, #0
 800f988:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 800f98a:	697b      	ldr	r3, [r7, #20]
 800f98c:	2200      	movs	r2, #0
 800f98e:	60da      	str	r2, [r3, #12]

  return 0;
 800f990:	2300      	movs	r3, #0
}
 800f992:	4618      	mov	r0, r3
 800f994:	3718      	adds	r7, #24
 800f996:	46bd      	mov	sp, r7
 800f998:	bd80      	pop	{r7, pc}

0800f99a <SCSI_AllowPreventRemovable>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800f99a:	b480      	push	{r7}
 800f99c:	b087      	sub	sp, #28
 800f99e:	af00      	add	r7, sp, #0
 800f9a0:	60f8      	str	r0, [r7, #12]
 800f9a2:	460b      	mov	r3, r1
 800f9a4:	607a      	str	r2, [r7, #4]
 800f9a6:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f9ae:	617b      	str	r3, [r7, #20]

  if (params[4] == 0U)
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	3304      	adds	r3, #4
 800f9b4:	781b      	ldrb	r3, [r3, #0]
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d106      	bne.n	800f9c8 <SCSI_AllowPreventRemovable+0x2e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800f9ba:	697a      	ldr	r2, [r7, #20]
 800f9bc:	f248 0362 	movw	r3, #32866	; 0x8062
 800f9c0:	4413      	add	r3, r2
 800f9c2:	2200      	movs	r2, #0
 800f9c4:	701a      	strb	r2, [r3, #0]
 800f9c6:	e005      	b.n	800f9d4 <SCSI_AllowPreventRemovable+0x3a>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 800f9c8:	697a      	ldr	r2, [r7, #20]
 800f9ca:	f248 0362 	movw	r3, #32866	; 0x8062
 800f9ce:	4413      	add	r3, r2
 800f9d0:	2201      	movs	r2, #1
 800f9d2:	701a      	strb	r2, [r3, #0]
  }

  hmsc->bot_data_length = 0U;
 800f9d4:	697b      	ldr	r3, [r7, #20]
 800f9d6:	2200      	movs	r2, #0
 800f9d8:	60da      	str	r2, [r3, #12]

  return 0;
 800f9da:	2300      	movs	r3, #0
}
 800f9dc:	4618      	mov	r0, r3
 800f9de:	371c      	adds	r7, #28
 800f9e0:	46bd      	mov	sp, r7
 800f9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e6:	4770      	bx	lr

0800f9e8 <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800f9e8:	b580      	push	{r7, lr}
 800f9ea:	b086      	sub	sp, #24
 800f9ec:	af00      	add	r7, sp, #0
 800f9ee:	60f8      	str	r0, [r7, #12]
 800f9f0:	460b      	mov	r3, r1
 800f9f2:	607a      	str	r2, [r7, #4]
 800f9f4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f9fc:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800f9fe:	697b      	ldr	r3, [r7, #20]
 800fa00:	7a1b      	ldrb	r3, [r3, #8]
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	f040 8094 	bne.w	800fb30 <SCSI_Read10+0x148>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800fa08:	697a      	ldr	r2, [r7, #20]
 800fa0a:	f248 031c 	movw	r3, #32796	; 0x801c
 800fa0e:	4413      	add	r3, r2
 800fa10:	781b      	ldrb	r3, [r3, #0]
 800fa12:	b25b      	sxtb	r3, r3
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	db0c      	blt.n	800fa32 <SCSI_Read10+0x4a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800fa18:	697a      	ldr	r2, [r7, #20]
 800fa1a:	f248 031d 	movw	r3, #32797	; 0x801d
 800fa1e:	4413      	add	r3, r2
 800fa20:	7819      	ldrb	r1, [r3, #0]
 800fa22:	2320      	movs	r3, #32
 800fa24:	2205      	movs	r2, #5
 800fa26:	68f8      	ldr	r0, [r7, #12]
 800fa28:	f7ff ff0a 	bl	800f840 <SCSI_SenseCode>
      return -1;
 800fa2c:	f04f 33ff 	mov.w	r3, #4294967295
 800fa30:	e088      	b.n	800fb44 <SCSI_Read10+0x15c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800fa32:	697a      	ldr	r2, [r7, #20]
 800fa34:	f248 0362 	movw	r3, #32866	; 0x8062
 800fa38:	4413      	add	r3, r2
 800fa3a:	781b      	ldrb	r3, [r3, #0]
 800fa3c:	2b02      	cmp	r3, #2
 800fa3e:	d108      	bne.n	800fa52 <SCSI_Read10+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800fa40:	7af9      	ldrb	r1, [r7, #11]
 800fa42:	233a      	movs	r3, #58	; 0x3a
 800fa44:	2202      	movs	r2, #2
 800fa46:	68f8      	ldr	r0, [r7, #12]
 800fa48:	f7ff fefa 	bl	800f840 <SCSI_SenseCode>

      return -1;
 800fa4c:	f04f 33ff 	mov.w	r3, #4294967295
 800fa50:	e078      	b.n	800fb44 <SCSI_Read10+0x15c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fa58:	689b      	ldr	r3, [r3, #8]
 800fa5a:	7afa      	ldrb	r2, [r7, #11]
 800fa5c:	4610      	mov	r0, r2
 800fa5e:	4798      	blx	r3
 800fa60:	4603      	mov	r3, r0
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d008      	beq.n	800fa78 <SCSI_Read10+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800fa66:	7af9      	ldrb	r1, [r7, #11]
 800fa68:	233a      	movs	r3, #58	; 0x3a
 800fa6a:	2202      	movs	r2, #2
 800fa6c:	68f8      	ldr	r0, [r7, #12]
 800fa6e:	f7ff fee7 	bl	800f840 <SCSI_SenseCode>
      return -1;
 800fa72:	f04f 33ff 	mov.w	r3, #4294967295
 800fa76:	e065      	b.n	800fb44 <SCSI_Read10+0x15c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	3302      	adds	r3, #2
 800fa7c:	781b      	ldrb	r3, [r3, #0]
 800fa7e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	3303      	adds	r3, #3
 800fa84:	781b      	ldrb	r3, [r3, #0]
 800fa86:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800fa88:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	3304      	adds	r3, #4
 800fa8e:	781b      	ldrb	r3, [r3, #0]
 800fa90:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800fa92:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800fa94:	687a      	ldr	r2, [r7, #4]
 800fa96:	3205      	adds	r2, #5
 800fa98:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800fa9a:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800fa9c:	6979      	ldr	r1, [r7, #20]
 800fa9e:	f248 036c 	movw	r3, #32876	; 0x806c
 800faa2:	440b      	add	r3, r1
 800faa4:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	3307      	adds	r3, #7
 800faaa:	781b      	ldrb	r3, [r3, #0]
 800faac:	021b      	lsls	r3, r3, #8
 800faae:	687a      	ldr	r2, [r7, #4]
 800fab0:	3208      	adds	r2, #8
 800fab2:	7812      	ldrb	r2, [r2, #0]
 800fab4:	431a      	orrs	r2, r3
 800fab6:	6979      	ldr	r1, [r7, #20]
 800fab8:	f248 0370 	movw	r3, #32880	; 0x8070
 800fabc:	440b      	add	r3, r1
 800fabe:	601a      	str	r2, [r3, #0]

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800fac0:	697a      	ldr	r2, [r7, #20]
 800fac2:	f248 036c 	movw	r3, #32876	; 0x806c
 800fac6:	4413      	add	r3, r2
 800fac8:	6818      	ldr	r0, [r3, #0]
 800faca:	697a      	ldr	r2, [r7, #20]
 800facc:	f248 0370 	movw	r3, #32880	; 0x8070
 800fad0:	4413      	add	r3, r2
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	7af9      	ldrb	r1, [r7, #11]
 800fad6:	4602      	mov	r2, r0
 800fad8:	68f8      	ldr	r0, [r7, #12]
 800fada:	f000 faeb 	bl	80100b4 <SCSI_CheckAddressRange>
 800fade:	4603      	mov	r3, r0
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	da02      	bge.n	800faea <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800fae4:	f04f 33ff 	mov.w	r3, #4294967295
 800fae8:	e02c      	b.n	800fb44 <SCSI_Read10+0x15c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800faea:	697a      	ldr	r2, [r7, #20]
 800faec:	f248 0318 	movw	r3, #32792	; 0x8018
 800faf0:	4413      	add	r3, r2
 800faf2:	681a      	ldr	r2, [r3, #0]
 800faf4:	6979      	ldr	r1, [r7, #20]
 800faf6:	f248 0370 	movw	r3, #32880	; 0x8070
 800fafa:	440b      	add	r3, r1
 800fafc:	6819      	ldr	r1, [r3, #0]
 800fafe:	6978      	ldr	r0, [r7, #20]
 800fb00:	f248 0364 	movw	r3, #32868	; 0x8064
 800fb04:	4403      	add	r3, r0
 800fb06:	881b      	ldrh	r3, [r3, #0]
 800fb08:	fb03 f301 	mul.w	r3, r3, r1
 800fb0c:	429a      	cmp	r2, r3
 800fb0e:	d00c      	beq.n	800fb2a <SCSI_Read10+0x142>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800fb10:	697a      	ldr	r2, [r7, #20]
 800fb12:	f248 031d 	movw	r3, #32797	; 0x801d
 800fb16:	4413      	add	r3, r2
 800fb18:	7819      	ldrb	r1, [r3, #0]
 800fb1a:	2320      	movs	r3, #32
 800fb1c:	2205      	movs	r2, #5
 800fb1e:	68f8      	ldr	r0, [r7, #12]
 800fb20:	f7ff fe8e 	bl	800f840 <SCSI_SenseCode>
      return -1;
 800fb24:	f04f 33ff 	mov.w	r3, #4294967295
 800fb28:	e00c      	b.n	800fb44 <SCSI_Read10+0x15c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800fb2a:	697b      	ldr	r3, [r7, #20]
 800fb2c:	2202      	movs	r2, #2
 800fb2e:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800fb30:	697b      	ldr	r3, [r7, #20]
 800fb32:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800fb36:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800fb38:	7afb      	ldrb	r3, [r7, #11]
 800fb3a:	4619      	mov	r1, r3
 800fb3c:	68f8      	ldr	r0, [r7, #12]
 800fb3e:	f000 fadd 	bl	80100fc <SCSI_ProcessRead>
 800fb42:	4603      	mov	r3, r0
}
 800fb44:	4618      	mov	r0, r3
 800fb46:	3718      	adds	r7, #24
 800fb48:	46bd      	mov	sp, r7
 800fb4a:	bd80      	pop	{r7, pc}

0800fb4c <SCSI_Read12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800fb4c:	b580      	push	{r7, lr}
 800fb4e:	b086      	sub	sp, #24
 800fb50:	af00      	add	r7, sp, #0
 800fb52:	60f8      	str	r0, [r7, #12]
 800fb54:	460b      	mov	r3, r1
 800fb56:	607a      	str	r2, [r7, #4]
 800fb58:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fb60:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800fb62:	697b      	ldr	r3, [r7, #20]
 800fb64:	7a1b      	ldrb	r3, [r3, #8]
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	f040 809e 	bne.w	800fca8 <SCSI_Read12+0x15c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800fb6c:	697a      	ldr	r2, [r7, #20]
 800fb6e:	f248 031c 	movw	r3, #32796	; 0x801c
 800fb72:	4413      	add	r3, r2
 800fb74:	781b      	ldrb	r3, [r3, #0]
 800fb76:	b25b      	sxtb	r3, r3
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	db0c      	blt.n	800fb96 <SCSI_Read12+0x4a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800fb7c:	697a      	ldr	r2, [r7, #20]
 800fb7e:	f248 031d 	movw	r3, #32797	; 0x801d
 800fb82:	4413      	add	r3, r2
 800fb84:	7819      	ldrb	r1, [r3, #0]
 800fb86:	2320      	movs	r3, #32
 800fb88:	2205      	movs	r2, #5
 800fb8a:	68f8      	ldr	r0, [r7, #12]
 800fb8c:	f7ff fe58 	bl	800f840 <SCSI_SenseCode>
      return -1;
 800fb90:	f04f 33ff 	mov.w	r3, #4294967295
 800fb94:	e092      	b.n	800fcbc <SCSI_Read12+0x170>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800fb96:	697a      	ldr	r2, [r7, #20]
 800fb98:	f248 0362 	movw	r3, #32866	; 0x8062
 800fb9c:	4413      	add	r3, r2
 800fb9e:	781b      	ldrb	r3, [r3, #0]
 800fba0:	2b02      	cmp	r3, #2
 800fba2:	d108      	bne.n	800fbb6 <SCSI_Read12+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800fba4:	7af9      	ldrb	r1, [r7, #11]
 800fba6:	233a      	movs	r3, #58	; 0x3a
 800fba8:	2202      	movs	r2, #2
 800fbaa:	68f8      	ldr	r0, [r7, #12]
 800fbac:	f7ff fe48 	bl	800f840 <SCSI_SenseCode>
      return -1;
 800fbb0:	f04f 33ff 	mov.w	r3, #4294967295
 800fbb4:	e082      	b.n	800fcbc <SCSI_Read12+0x170>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fbbc:	689b      	ldr	r3, [r3, #8]
 800fbbe:	7afa      	ldrb	r2, [r7, #11]
 800fbc0:	4610      	mov	r0, r2
 800fbc2:	4798      	blx	r3
 800fbc4:	4603      	mov	r3, r0
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d008      	beq.n	800fbdc <SCSI_Read12+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800fbca:	7af9      	ldrb	r1, [r7, #11]
 800fbcc:	233a      	movs	r3, #58	; 0x3a
 800fbce:	2202      	movs	r2, #2
 800fbd0:	68f8      	ldr	r0, [r7, #12]
 800fbd2:	f7ff fe35 	bl	800f840 <SCSI_SenseCode>
      return -1;
 800fbd6:	f04f 33ff 	mov.w	r3, #4294967295
 800fbda:	e06f      	b.n	800fcbc <SCSI_Read12+0x170>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	3302      	adds	r3, #2
 800fbe0:	781b      	ldrb	r3, [r3, #0]
 800fbe2:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	3303      	adds	r3, #3
 800fbe8:	781b      	ldrb	r3, [r3, #0]
 800fbea:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800fbec:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	3304      	adds	r3, #4
 800fbf2:	781b      	ldrb	r3, [r3, #0]
 800fbf4:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800fbf6:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800fbf8:	687a      	ldr	r2, [r7, #4]
 800fbfa:	3205      	adds	r2, #5
 800fbfc:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800fbfe:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800fc00:	6979      	ldr	r1, [r7, #20]
 800fc02:	f248 036c 	movw	r3, #32876	; 0x806c
 800fc06:	440b      	add	r3, r1
 800fc08:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	3306      	adds	r3, #6
 800fc0e:	781b      	ldrb	r3, [r3, #0]
 800fc10:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	3307      	adds	r3, #7
 800fc16:	781b      	ldrb	r3, [r3, #0]
 800fc18:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800fc1a:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	3308      	adds	r3, #8
 800fc20:	781b      	ldrb	r3, [r3, #0]
 800fc22:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800fc24:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800fc26:	687a      	ldr	r2, [r7, #4]
 800fc28:	3209      	adds	r2, #9
 800fc2a:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800fc2c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800fc2e:	6979      	ldr	r1, [r7, #20]
 800fc30:	f248 0370 	movw	r3, #32880	; 0x8070
 800fc34:	440b      	add	r3, r1
 800fc36:	601a      	str	r2, [r3, #0]

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800fc38:	697a      	ldr	r2, [r7, #20]
 800fc3a:	f248 036c 	movw	r3, #32876	; 0x806c
 800fc3e:	4413      	add	r3, r2
 800fc40:	6818      	ldr	r0, [r3, #0]
 800fc42:	697a      	ldr	r2, [r7, #20]
 800fc44:	f248 0370 	movw	r3, #32880	; 0x8070
 800fc48:	4413      	add	r3, r2
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	7af9      	ldrb	r1, [r7, #11]
 800fc4e:	4602      	mov	r2, r0
 800fc50:	68f8      	ldr	r0, [r7, #12]
 800fc52:	f000 fa2f 	bl	80100b4 <SCSI_CheckAddressRange>
 800fc56:	4603      	mov	r3, r0
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	da02      	bge.n	800fc62 <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800fc5c:	f04f 33ff 	mov.w	r3, #4294967295
 800fc60:	e02c      	b.n	800fcbc <SCSI_Read12+0x170>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800fc62:	697a      	ldr	r2, [r7, #20]
 800fc64:	f248 0318 	movw	r3, #32792	; 0x8018
 800fc68:	4413      	add	r3, r2
 800fc6a:	681a      	ldr	r2, [r3, #0]
 800fc6c:	6979      	ldr	r1, [r7, #20]
 800fc6e:	f248 0370 	movw	r3, #32880	; 0x8070
 800fc72:	440b      	add	r3, r1
 800fc74:	6819      	ldr	r1, [r3, #0]
 800fc76:	6978      	ldr	r0, [r7, #20]
 800fc78:	f248 0364 	movw	r3, #32868	; 0x8064
 800fc7c:	4403      	add	r3, r0
 800fc7e:	881b      	ldrh	r3, [r3, #0]
 800fc80:	fb03 f301 	mul.w	r3, r3, r1
 800fc84:	429a      	cmp	r2, r3
 800fc86:	d00c      	beq.n	800fca2 <SCSI_Read12+0x156>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800fc88:	697a      	ldr	r2, [r7, #20]
 800fc8a:	f248 031d 	movw	r3, #32797	; 0x801d
 800fc8e:	4413      	add	r3, r2
 800fc90:	7819      	ldrb	r1, [r3, #0]
 800fc92:	2320      	movs	r3, #32
 800fc94:	2205      	movs	r2, #5
 800fc96:	68f8      	ldr	r0, [r7, #12]
 800fc98:	f7ff fdd2 	bl	800f840 <SCSI_SenseCode>
      return -1;
 800fc9c:	f04f 33ff 	mov.w	r3, #4294967295
 800fca0:	e00c      	b.n	800fcbc <SCSI_Read12+0x170>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800fca2:	697b      	ldr	r3, [r7, #20]
 800fca4:	2202      	movs	r2, #2
 800fca6:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800fca8:	697b      	ldr	r3, [r7, #20]
 800fcaa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800fcae:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800fcb0:	7afb      	ldrb	r3, [r7, #11]
 800fcb2:	4619      	mov	r1, r3
 800fcb4:	68f8      	ldr	r0, [r7, #12]
 800fcb6:	f000 fa21 	bl	80100fc <SCSI_ProcessRead>
 800fcba:	4603      	mov	r3, r0
}
 800fcbc:	4618      	mov	r0, r3
 800fcbe:	3718      	adds	r7, #24
 800fcc0:	46bd      	mov	sp, r7
 800fcc2:	bd80      	pop	{r7, pc}

0800fcc4 <SCSI_Write10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800fcc4:	b580      	push	{r7, lr}
 800fcc6:	b086      	sub	sp, #24
 800fcc8:	af00      	add	r7, sp, #0
 800fcca:	60f8      	str	r0, [r7, #12]
 800fccc:	460b      	mov	r3, r1
 800fcce:	607a      	str	r2, [r7, #4]
 800fcd0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fcd8:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800fcda:	697b      	ldr	r3, [r7, #20]
 800fcdc:	7a1b      	ldrb	r3, [r3, #8]
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	f040 80be 	bne.w	800fe60 <SCSI_Write10+0x19c>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800fce4:	697a      	ldr	r2, [r7, #20]
 800fce6:	f248 0318 	movw	r3, #32792	; 0x8018
 800fcea:	4413      	add	r3, r2
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d10c      	bne.n	800fd0c <SCSI_Write10+0x48>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800fcf2:	697a      	ldr	r2, [r7, #20]
 800fcf4:	f248 031d 	movw	r3, #32797	; 0x801d
 800fcf8:	4413      	add	r3, r2
 800fcfa:	7819      	ldrb	r1, [r3, #0]
 800fcfc:	2320      	movs	r3, #32
 800fcfe:	2205      	movs	r2, #5
 800fd00:	68f8      	ldr	r0, [r7, #12]
 800fd02:	f7ff fd9d 	bl	800f840 <SCSI_SenseCode>
      return -1;
 800fd06:	f04f 33ff 	mov.w	r3, #4294967295
 800fd0a:	e0af      	b.n	800fe6c <SCSI_Write10+0x1a8>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800fd0c:	697a      	ldr	r2, [r7, #20]
 800fd0e:	f248 031c 	movw	r3, #32796	; 0x801c
 800fd12:	4413      	add	r3, r2
 800fd14:	781b      	ldrb	r3, [r3, #0]
 800fd16:	b25b      	sxtb	r3, r3
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	da0c      	bge.n	800fd36 <SCSI_Write10+0x72>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800fd1c:	697a      	ldr	r2, [r7, #20]
 800fd1e:	f248 031d 	movw	r3, #32797	; 0x801d
 800fd22:	4413      	add	r3, r2
 800fd24:	7819      	ldrb	r1, [r3, #0]
 800fd26:	2320      	movs	r3, #32
 800fd28:	2205      	movs	r2, #5
 800fd2a:	68f8      	ldr	r0, [r7, #12]
 800fd2c:	f7ff fd88 	bl	800f840 <SCSI_SenseCode>
      return -1;
 800fd30:	f04f 33ff 	mov.w	r3, #4294967295
 800fd34:	e09a      	b.n	800fe6c <SCSI_Write10+0x1a8>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fd3c:	689b      	ldr	r3, [r3, #8]
 800fd3e:	7afa      	ldrb	r2, [r7, #11]
 800fd40:	4610      	mov	r0, r2
 800fd42:	4798      	blx	r3
 800fd44:	4603      	mov	r3, r0
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d008      	beq.n	800fd5c <SCSI_Write10+0x98>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800fd4a:	7af9      	ldrb	r1, [r7, #11]
 800fd4c:	233a      	movs	r3, #58	; 0x3a
 800fd4e:	2202      	movs	r2, #2
 800fd50:	68f8      	ldr	r0, [r7, #12]
 800fd52:	f7ff fd75 	bl	800f840 <SCSI_SenseCode>
      return -1;
 800fd56:	f04f 33ff 	mov.w	r3, #4294967295
 800fd5a:	e087      	b.n	800fe6c <SCSI_Write10+0x1a8>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fd62:	68db      	ldr	r3, [r3, #12]
 800fd64:	7afa      	ldrb	r2, [r7, #11]
 800fd66:	4610      	mov	r0, r2
 800fd68:	4798      	blx	r3
 800fd6a:	4603      	mov	r3, r0
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d008      	beq.n	800fd82 <SCSI_Write10+0xbe>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800fd70:	7af9      	ldrb	r1, [r7, #11]
 800fd72:	2327      	movs	r3, #39	; 0x27
 800fd74:	2202      	movs	r2, #2
 800fd76:	68f8      	ldr	r0, [r7, #12]
 800fd78:	f7ff fd62 	bl	800f840 <SCSI_SenseCode>
      return -1;
 800fd7c:	f04f 33ff 	mov.w	r3, #4294967295
 800fd80:	e074      	b.n	800fe6c <SCSI_Write10+0x1a8>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	3302      	adds	r3, #2
 800fd86:	781b      	ldrb	r3, [r3, #0]
 800fd88:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	3303      	adds	r3, #3
 800fd8e:	781b      	ldrb	r3, [r3, #0]
 800fd90:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800fd92:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	3304      	adds	r3, #4
 800fd98:	781b      	ldrb	r3, [r3, #0]
 800fd9a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800fd9c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800fd9e:	687a      	ldr	r2, [r7, #4]
 800fda0:	3205      	adds	r2, #5
 800fda2:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800fda4:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800fda6:	6979      	ldr	r1, [r7, #20]
 800fda8:	f248 036c 	movw	r3, #32876	; 0x806c
 800fdac:	440b      	add	r3, r1
 800fdae:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	3307      	adds	r3, #7
 800fdb4:	781b      	ldrb	r3, [r3, #0]
 800fdb6:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800fdb8:	687a      	ldr	r2, [r7, #4]
 800fdba:	3208      	adds	r2, #8
 800fdbc:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800fdbe:	431a      	orrs	r2, r3
 800fdc0:	6979      	ldr	r1, [r7, #20]
 800fdc2:	f248 0370 	movw	r3, #32880	; 0x8070
 800fdc6:	440b      	add	r3, r1
 800fdc8:	601a      	str	r2, [r3, #0]

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800fdca:	697a      	ldr	r2, [r7, #20]
 800fdcc:	f248 036c 	movw	r3, #32876	; 0x806c
 800fdd0:	4413      	add	r3, r2
 800fdd2:	6818      	ldr	r0, [r3, #0]
 800fdd4:	697a      	ldr	r2, [r7, #20]
 800fdd6:	f248 0370 	movw	r3, #32880	; 0x8070
 800fdda:	4413      	add	r3, r2
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	7af9      	ldrb	r1, [r7, #11]
 800fde0:	4602      	mov	r2, r0
 800fde2:	68f8      	ldr	r0, [r7, #12]
 800fde4:	f000 f966 	bl	80100b4 <SCSI_CheckAddressRange>
 800fde8:	4603      	mov	r3, r0
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	da02      	bge.n	800fdf4 <SCSI_Write10+0x130>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800fdee:	f04f 33ff 	mov.w	r3, #4294967295
 800fdf2:	e03b      	b.n	800fe6c <SCSI_Write10+0x1a8>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800fdf4:	697a      	ldr	r2, [r7, #20]
 800fdf6:	f248 0370 	movw	r3, #32880	; 0x8070
 800fdfa:	4413      	add	r3, r2
 800fdfc:	681a      	ldr	r2, [r3, #0]
 800fdfe:	6979      	ldr	r1, [r7, #20]
 800fe00:	f248 0364 	movw	r3, #32868	; 0x8064
 800fe04:	440b      	add	r3, r1
 800fe06:	881b      	ldrh	r3, [r3, #0]
 800fe08:	fb03 f302 	mul.w	r3, r3, r2
 800fe0c:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800fe0e:	697a      	ldr	r2, [r7, #20]
 800fe10:	f248 0318 	movw	r3, #32792	; 0x8018
 800fe14:	4413      	add	r3, r2
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	693a      	ldr	r2, [r7, #16]
 800fe1a:	429a      	cmp	r2, r3
 800fe1c:	d00c      	beq.n	800fe38 <SCSI_Write10+0x174>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800fe1e:	697a      	ldr	r2, [r7, #20]
 800fe20:	f248 031d 	movw	r3, #32797	; 0x801d
 800fe24:	4413      	add	r3, r2
 800fe26:	7819      	ldrb	r1, [r3, #0]
 800fe28:	2320      	movs	r3, #32
 800fe2a:	2205      	movs	r2, #5
 800fe2c:	68f8      	ldr	r0, [r7, #12]
 800fe2e:	f7ff fd07 	bl	800f840 <SCSI_SenseCode>
      return -1;
 800fe32:	f04f 33ff 	mov.w	r3, #4294967295
 800fe36:	e019      	b.n	800fe6c <SCSI_Write10+0x1a8>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800fe38:	693b      	ldr	r3, [r7, #16]
 800fe3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fe3e:	bf28      	it	cs
 800fe40:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 800fe44:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800fe46:	697b      	ldr	r3, [r7, #20]
 800fe48:	2201      	movs	r2, #1
 800fe4a:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800fe4c:	697b      	ldr	r3, [r7, #20]
 800fe4e:	f103 0210 	add.w	r2, r3, #16
 800fe52:	693b      	ldr	r3, [r7, #16]
 800fe54:	2101      	movs	r1, #1
 800fe56:	68f8      	ldr	r0, [r7, #12]
 800fe58:	f004 fb19 	bl	801448e <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800fe5c:	2300      	movs	r3, #0
 800fe5e:	e005      	b.n	800fe6c <SCSI_Write10+0x1a8>
    return SCSI_ProcessWrite(pdev, lun);
 800fe60:	7afb      	ldrb	r3, [r7, #11]
 800fe62:	4619      	mov	r1, r3
 800fe64:	68f8      	ldr	r0, [r7, #12]
 800fe66:	f000 f9d7 	bl	8010218 <SCSI_ProcessWrite>
 800fe6a:	4603      	mov	r3, r0
}
 800fe6c:	4618      	mov	r0, r3
 800fe6e:	3718      	adds	r7, #24
 800fe70:	46bd      	mov	sp, r7
 800fe72:	bd80      	pop	{r7, pc}

0800fe74 <SCSI_Write12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800fe74:	b580      	push	{r7, lr}
 800fe76:	b086      	sub	sp, #24
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	60f8      	str	r0, [r7, #12]
 800fe7c:	460b      	mov	r3, r1
 800fe7e:	607a      	str	r2, [r7, #4]
 800fe80:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fe88:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800fe8a:	697b      	ldr	r3, [r7, #20]
 800fe8c:	7a1b      	ldrb	r3, [r3, #8]
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	f040 80ce 	bne.w	8010030 <SCSI_Write12+0x1bc>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800fe94:	697a      	ldr	r2, [r7, #20]
 800fe96:	f248 0318 	movw	r3, #32792	; 0x8018
 800fe9a:	4413      	add	r3, r2
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d10c      	bne.n	800febc <SCSI_Write12+0x48>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800fea2:	697a      	ldr	r2, [r7, #20]
 800fea4:	f248 031d 	movw	r3, #32797	; 0x801d
 800fea8:	4413      	add	r3, r2
 800feaa:	7819      	ldrb	r1, [r3, #0]
 800feac:	2320      	movs	r3, #32
 800feae:	2205      	movs	r2, #5
 800feb0:	68f8      	ldr	r0, [r7, #12]
 800feb2:	f7ff fcc5 	bl	800f840 <SCSI_SenseCode>
      return -1;
 800feb6:	f04f 33ff 	mov.w	r3, #4294967295
 800feba:	e0bf      	b.n	801003c <SCSI_Write12+0x1c8>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800febc:	697a      	ldr	r2, [r7, #20]
 800febe:	f248 031c 	movw	r3, #32796	; 0x801c
 800fec2:	4413      	add	r3, r2
 800fec4:	781b      	ldrb	r3, [r3, #0]
 800fec6:	b25b      	sxtb	r3, r3
 800fec8:	2b00      	cmp	r3, #0
 800feca:	da0c      	bge.n	800fee6 <SCSI_Write12+0x72>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800fecc:	697a      	ldr	r2, [r7, #20]
 800fece:	f248 031d 	movw	r3, #32797	; 0x801d
 800fed2:	4413      	add	r3, r2
 800fed4:	7819      	ldrb	r1, [r3, #0]
 800fed6:	2320      	movs	r3, #32
 800fed8:	2205      	movs	r2, #5
 800feda:	68f8      	ldr	r0, [r7, #12]
 800fedc:	f7ff fcb0 	bl	800f840 <SCSI_SenseCode>
      return -1;
 800fee0:	f04f 33ff 	mov.w	r3, #4294967295
 800fee4:	e0aa      	b.n	801003c <SCSI_Write12+0x1c8>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800fee6:	68fb      	ldr	r3, [r7, #12]
 800fee8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800feec:	689b      	ldr	r3, [r3, #8]
 800feee:	7afa      	ldrb	r2, [r7, #11]
 800fef0:	4610      	mov	r0, r2
 800fef2:	4798      	blx	r3
 800fef4:	4603      	mov	r3, r0
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d00b      	beq.n	800ff12 <SCSI_Write12+0x9e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800fefa:	7af9      	ldrb	r1, [r7, #11]
 800fefc:	233a      	movs	r3, #58	; 0x3a
 800fefe:	2202      	movs	r2, #2
 800ff00:	68f8      	ldr	r0, [r7, #12]
 800ff02:	f7ff fc9d 	bl	800f840 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800ff06:	697b      	ldr	r3, [r7, #20]
 800ff08:	2205      	movs	r2, #5
 800ff0a:	721a      	strb	r2, [r3, #8]
      return -1;
 800ff0c:	f04f 33ff 	mov.w	r3, #4294967295
 800ff10:	e094      	b.n	801003c <SCSI_Write12+0x1c8>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ff18:	68db      	ldr	r3, [r3, #12]
 800ff1a:	7afa      	ldrb	r2, [r7, #11]
 800ff1c:	4610      	mov	r0, r2
 800ff1e:	4798      	blx	r3
 800ff20:	4603      	mov	r3, r0
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d00b      	beq.n	800ff3e <SCSI_Write12+0xca>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800ff26:	7af9      	ldrb	r1, [r7, #11]
 800ff28:	2327      	movs	r3, #39	; 0x27
 800ff2a:	2202      	movs	r2, #2
 800ff2c:	68f8      	ldr	r0, [r7, #12]
 800ff2e:	f7ff fc87 	bl	800f840 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800ff32:	697b      	ldr	r3, [r7, #20]
 800ff34:	2205      	movs	r2, #5
 800ff36:	721a      	strb	r2, [r3, #8]
      return -1;
 800ff38:	f04f 33ff 	mov.w	r3, #4294967295
 800ff3c:	e07e      	b.n	801003c <SCSI_Write12+0x1c8>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	3302      	adds	r3, #2
 800ff42:	781b      	ldrb	r3, [r3, #0]
 800ff44:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	3303      	adds	r3, #3
 800ff4a:	781b      	ldrb	r3, [r3, #0]
 800ff4c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ff4e:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	3304      	adds	r3, #4
 800ff54:	781b      	ldrb	r3, [r3, #0]
 800ff56:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800ff58:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800ff5a:	687a      	ldr	r2, [r7, #4]
 800ff5c:	3205      	adds	r2, #5
 800ff5e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800ff60:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ff62:	6979      	ldr	r1, [r7, #20]
 800ff64:	f248 036c 	movw	r3, #32876	; 0x806c
 800ff68:	440b      	add	r3, r1
 800ff6a:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	3306      	adds	r3, #6
 800ff70:	781b      	ldrb	r3, [r3, #0]
 800ff72:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	3307      	adds	r3, #7
 800ff78:	781b      	ldrb	r3, [r3, #0]
 800ff7a:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800ff7c:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	3308      	adds	r3, #8
 800ff82:	781b      	ldrb	r3, [r3, #0]
 800ff84:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800ff86:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800ff88:	687a      	ldr	r2, [r7, #4]
 800ff8a:	3209      	adds	r2, #9
 800ff8c:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800ff8e:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800ff90:	6979      	ldr	r1, [r7, #20]
 800ff92:	f248 0370 	movw	r3, #32880	; 0x8070
 800ff96:	440b      	add	r3, r1
 800ff98:	601a      	str	r2, [r3, #0]

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800ff9a:	697a      	ldr	r2, [r7, #20]
 800ff9c:	f248 036c 	movw	r3, #32876	; 0x806c
 800ffa0:	4413      	add	r3, r2
 800ffa2:	6818      	ldr	r0, [r3, #0]
 800ffa4:	697a      	ldr	r2, [r7, #20]
 800ffa6:	f248 0370 	movw	r3, #32880	; 0x8070
 800ffaa:	4413      	add	r3, r2
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	7af9      	ldrb	r1, [r7, #11]
 800ffb0:	4602      	mov	r2, r0
 800ffb2:	68f8      	ldr	r0, [r7, #12]
 800ffb4:	f000 f87e 	bl	80100b4 <SCSI_CheckAddressRange>
 800ffb8:	4603      	mov	r3, r0
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	da02      	bge.n	800ffc4 <SCSI_Write12+0x150>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800ffbe:	f04f 33ff 	mov.w	r3, #4294967295
 800ffc2:	e03b      	b.n	801003c <SCSI_Write12+0x1c8>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800ffc4:	697a      	ldr	r2, [r7, #20]
 800ffc6:	f248 0370 	movw	r3, #32880	; 0x8070
 800ffca:	4413      	add	r3, r2
 800ffcc:	681a      	ldr	r2, [r3, #0]
 800ffce:	6979      	ldr	r1, [r7, #20]
 800ffd0:	f248 0364 	movw	r3, #32868	; 0x8064
 800ffd4:	440b      	add	r3, r1
 800ffd6:	881b      	ldrh	r3, [r3, #0]
 800ffd8:	fb03 f302 	mul.w	r3, r3, r2
 800ffdc:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800ffde:	697a      	ldr	r2, [r7, #20]
 800ffe0:	f248 0318 	movw	r3, #32792	; 0x8018
 800ffe4:	4413      	add	r3, r2
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	693a      	ldr	r2, [r7, #16]
 800ffea:	429a      	cmp	r2, r3
 800ffec:	d00c      	beq.n	8010008 <SCSI_Write12+0x194>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ffee:	697a      	ldr	r2, [r7, #20]
 800fff0:	f248 031d 	movw	r3, #32797	; 0x801d
 800fff4:	4413      	add	r3, r2
 800fff6:	7819      	ldrb	r1, [r3, #0]
 800fff8:	2320      	movs	r3, #32
 800fffa:	2205      	movs	r2, #5
 800fffc:	68f8      	ldr	r0, [r7, #12]
 800fffe:	f7ff fc1f 	bl	800f840 <SCSI_SenseCode>
      return -1;
 8010002:	f04f 33ff 	mov.w	r3, #4294967295
 8010006:	e019      	b.n	801003c <SCSI_Write12+0x1c8>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8010008:	693b      	ldr	r3, [r7, #16]
 801000a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801000e:	bf28      	it	cs
 8010010:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8010014:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8010016:	697b      	ldr	r3, [r7, #20]
 8010018:	2201      	movs	r2, #1
 801001a:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 801001c:	697b      	ldr	r3, [r7, #20]
 801001e:	f103 0210 	add.w	r2, r3, #16
 8010022:	693b      	ldr	r3, [r7, #16]
 8010024:	2101      	movs	r1, #1
 8010026:	68f8      	ldr	r0, [r7, #12]
 8010028:	f004 fa31 	bl	801448e <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 801002c:	2300      	movs	r3, #0
 801002e:	e005      	b.n	801003c <SCSI_Write12+0x1c8>
    return SCSI_ProcessWrite(pdev, lun);
 8010030:	7afb      	ldrb	r3, [r7, #11]
 8010032:	4619      	mov	r1, r3
 8010034:	68f8      	ldr	r0, [r7, #12]
 8010036:	f000 f8ef 	bl	8010218 <SCSI_ProcessWrite>
 801003a:	4603      	mov	r3, r0
}
 801003c:	4618      	mov	r0, r3
 801003e:	3718      	adds	r7, #24
 8010040:	46bd      	mov	sp, r7
 8010042:	bd80      	pop	{r7, pc}

08010044 <SCSI_Verify10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8010044:	b580      	push	{r7, lr}
 8010046:	b086      	sub	sp, #24
 8010048:	af00      	add	r7, sp, #0
 801004a:	60f8      	str	r0, [r7, #12]
 801004c:	460b      	mov	r3, r1
 801004e:	607a      	str	r2, [r7, #4]
 8010050:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010058:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	3301      	adds	r3, #1
 801005e:	781b      	ldrb	r3, [r3, #0]
 8010060:	f003 0302 	and.w	r3, r3, #2
 8010064:	2b00      	cmp	r3, #0
 8010066:	d008      	beq.n	801007a <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8010068:	7af9      	ldrb	r1, [r7, #11]
 801006a:	2324      	movs	r3, #36	; 0x24
 801006c:	2205      	movs	r2, #5
 801006e:	68f8      	ldr	r0, [r7, #12]
 8010070:	f7ff fbe6 	bl	800f840 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8010074:	f04f 33ff 	mov.w	r3, #4294967295
 8010078:	e018      	b.n	80100ac <SCSI_Verify10+0x68>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 801007a:	697a      	ldr	r2, [r7, #20]
 801007c:	f248 036c 	movw	r3, #32876	; 0x806c
 8010080:	4413      	add	r3, r2
 8010082:	6818      	ldr	r0, [r3, #0]
 8010084:	697a      	ldr	r2, [r7, #20]
 8010086:	f248 0370 	movw	r3, #32880	; 0x8070
 801008a:	4413      	add	r3, r2
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	7af9      	ldrb	r1, [r7, #11]
 8010090:	4602      	mov	r2, r0
 8010092:	68f8      	ldr	r0, [r7, #12]
 8010094:	f000 f80e 	bl	80100b4 <SCSI_CheckAddressRange>
 8010098:	4603      	mov	r3, r0
 801009a:	2b00      	cmp	r3, #0
 801009c:	da02      	bge.n	80100a4 <SCSI_Verify10+0x60>
  {
    return -1; /* error */
 801009e:	f04f 33ff 	mov.w	r3, #4294967295
 80100a2:	e003      	b.n	80100ac <SCSI_Verify10+0x68>
  }

  hmsc->bot_data_length = 0U;
 80100a4:	697b      	ldr	r3, [r7, #20]
 80100a6:	2200      	movs	r2, #0
 80100a8:	60da      	str	r2, [r3, #12]

  return 0;
 80100aa:	2300      	movs	r3, #0
}
 80100ac:	4618      	mov	r0, r3
 80100ae:	3718      	adds	r7, #24
 80100b0:	46bd      	mov	sp, r7
 80100b2:	bd80      	pop	{r7, pc}

080100b4 <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 80100b4:	b580      	push	{r7, lr}
 80100b6:	b086      	sub	sp, #24
 80100b8:	af00      	add	r7, sp, #0
 80100ba:	60f8      	str	r0, [r7, #12]
 80100bc:	607a      	str	r2, [r7, #4]
 80100be:	603b      	str	r3, [r7, #0]
 80100c0:	460b      	mov	r3, r1
 80100c2:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80100ca:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 80100cc:	687a      	ldr	r2, [r7, #4]
 80100ce:	683b      	ldr	r3, [r7, #0]
 80100d0:	441a      	add	r2, r3
 80100d2:	6979      	ldr	r1, [r7, #20]
 80100d4:	f248 0368 	movw	r3, #32872	; 0x8068
 80100d8:	440b      	add	r3, r1
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	429a      	cmp	r2, r3
 80100de:	d908      	bls.n	80100f2 <SCSI_CheckAddressRange+0x3e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 80100e0:	7af9      	ldrb	r1, [r7, #11]
 80100e2:	2321      	movs	r3, #33	; 0x21
 80100e4:	2205      	movs	r2, #5
 80100e6:	68f8      	ldr	r0, [r7, #12]
 80100e8:	f7ff fbaa 	bl	800f840 <SCSI_SenseCode>
    return -1;
 80100ec:	f04f 33ff 	mov.w	r3, #4294967295
 80100f0:	e000      	b.n	80100f4 <SCSI_CheckAddressRange+0x40>
  }

  return 0;
 80100f2:	2300      	movs	r3, #0
}
 80100f4:	4618      	mov	r0, r3
 80100f6:	3718      	adds	r7, #24
 80100f8:	46bd      	mov	sp, r7
 80100fa:	bd80      	pop	{r7, pc}

080100fc <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 80100fc:	b5b0      	push	{r4, r5, r7, lr}
 80100fe:	b084      	sub	sp, #16
 8010100:	af00      	add	r7, sp, #0
 8010102:	6078      	str	r0, [r7, #4]
 8010104:	460b      	mov	r3, r1
 8010106:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801010e:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8010110:	68fa      	ldr	r2, [r7, #12]
 8010112:	f248 0370 	movw	r3, #32880	; 0x8070
 8010116:	4413      	add	r3, r2
 8010118:	681a      	ldr	r2, [r3, #0]
 801011a:	68f9      	ldr	r1, [r7, #12]
 801011c:	f248 0364 	movw	r3, #32868	; 0x8064
 8010120:	440b      	add	r3, r1
 8010122:	881b      	ldrh	r3, [r3, #0]
 8010124:	fb03 f302 	mul.w	r3, r3, r2
 8010128:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 801012a:	68bb      	ldr	r3, [r7, #8]
 801012c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010130:	bf28      	it	cs
 8010132:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8010136:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801013e:	691c      	ldr	r4, [r3, #16]
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	f103 0110 	add.w	r1, r3, #16
 8010146:	68fa      	ldr	r2, [r7, #12]
 8010148:	f248 036c 	movw	r3, #32876	; 0x806c
 801014c:	4413      	add	r3, r2
 801014e:	681d      	ldr	r5, [r3, #0]
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 8010150:	68fa      	ldr	r2, [r7, #12]
 8010152:	f248 0364 	movw	r3, #32868	; 0x8064
 8010156:	4413      	add	r3, r2
 8010158:	881b      	ldrh	r3, [r3, #0]
 801015a:	461a      	mov	r2, r3
 801015c:	68bb      	ldr	r3, [r7, #8]
 801015e:	fbb3 f3f2 	udiv	r3, r3, r2
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8010162:	b29b      	uxth	r3, r3
 8010164:	78f8      	ldrb	r0, [r7, #3]
 8010166:	462a      	mov	r2, r5
 8010168:	47a0      	blx	r4
 801016a:	4603      	mov	r3, r0
 801016c:	2b00      	cmp	r3, #0
 801016e:	da08      	bge.n	8010182 <SCSI_ProcessRead+0x86>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8010170:	78f9      	ldrb	r1, [r7, #3]
 8010172:	2311      	movs	r3, #17
 8010174:	2204      	movs	r2, #4
 8010176:	6878      	ldr	r0, [r7, #4]
 8010178:	f7ff fb62 	bl	800f840 <SCSI_SenseCode>
    return -1;
 801017c:	f04f 33ff 	mov.w	r3, #4294967295
 8010180:	e046      	b.n	8010210 <SCSI_ProcessRead+0x114>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	f103 0210 	add.w	r2, r3, #16
 8010188:	68bb      	ldr	r3, [r7, #8]
 801018a:	2181      	movs	r1, #129	; 0x81
 801018c:	6878      	ldr	r0, [r7, #4]
 801018e:	f004 f95d 	bl	801444c <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8010192:	68fa      	ldr	r2, [r7, #12]
 8010194:	f248 036c 	movw	r3, #32876	; 0x806c
 8010198:	4413      	add	r3, r2
 801019a:	681a      	ldr	r2, [r3, #0]
 801019c:	68f9      	ldr	r1, [r7, #12]
 801019e:	f248 0364 	movw	r3, #32868	; 0x8064
 80101a2:	440b      	add	r3, r1
 80101a4:	881b      	ldrh	r3, [r3, #0]
 80101a6:	4619      	mov	r1, r3
 80101a8:	68bb      	ldr	r3, [r7, #8]
 80101aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80101ae:	441a      	add	r2, r3
 80101b0:	68f9      	ldr	r1, [r7, #12]
 80101b2:	f248 036c 	movw	r3, #32876	; 0x806c
 80101b6:	440b      	add	r3, r1
 80101b8:	601a      	str	r2, [r3, #0]
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 80101ba:	68fa      	ldr	r2, [r7, #12]
 80101bc:	f248 0370 	movw	r3, #32880	; 0x8070
 80101c0:	4413      	add	r3, r2
 80101c2:	681a      	ldr	r2, [r3, #0]
 80101c4:	68f9      	ldr	r1, [r7, #12]
 80101c6:	f248 0364 	movw	r3, #32868	; 0x8064
 80101ca:	440b      	add	r3, r1
 80101cc:	881b      	ldrh	r3, [r3, #0]
 80101ce:	4619      	mov	r1, r3
 80101d0:	68bb      	ldr	r3, [r7, #8]
 80101d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80101d6:	1ad2      	subs	r2, r2, r3
 80101d8:	68f9      	ldr	r1, [r7, #12]
 80101da:	f248 0370 	movw	r3, #32880	; 0x8070
 80101de:	440b      	add	r3, r1
 80101e0:	601a      	str	r2, [r3, #0]

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 80101e2:	68fa      	ldr	r2, [r7, #12]
 80101e4:	f248 0338 	movw	r3, #32824	; 0x8038
 80101e8:	4413      	add	r3, r2
 80101ea:	681a      	ldr	r2, [r3, #0]
 80101ec:	68bb      	ldr	r3, [r7, #8]
 80101ee:	1ad2      	subs	r2, r2, r3
 80101f0:	68f9      	ldr	r1, [r7, #12]
 80101f2:	f248 0338 	movw	r3, #32824	; 0x8038
 80101f6:	440b      	add	r3, r1
 80101f8:	601a      	str	r2, [r3, #0]

  if (hmsc->scsi_blk_len == 0U)
 80101fa:	68fa      	ldr	r2, [r7, #12]
 80101fc:	f248 0370 	movw	r3, #32880	; 0x8070
 8010200:	4413      	add	r3, r2
 8010202:	681b      	ldr	r3, [r3, #0]
 8010204:	2b00      	cmp	r3, #0
 8010206:	d102      	bne.n	801020e <SCSI_ProcessRead+0x112>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	2203      	movs	r2, #3
 801020c:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 801020e:	2300      	movs	r3, #0
}
 8010210:	4618      	mov	r0, r3
 8010212:	3710      	adds	r7, #16
 8010214:	46bd      	mov	sp, r7
 8010216:	bdb0      	pop	{r4, r5, r7, pc}

08010218 <SCSI_ProcessWrite>:
*         Handle Write Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8010218:	b5b0      	push	{r4, r5, r7, lr}
 801021a:	b084      	sub	sp, #16
 801021c:	af00      	add	r7, sp, #0
 801021e:	6078      	str	r0, [r7, #4]
 8010220:	460b      	mov	r3, r1
 8010222:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801022a:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 801022c:	68fa      	ldr	r2, [r7, #12]
 801022e:	f248 0370 	movw	r3, #32880	; 0x8070
 8010232:	4413      	add	r3, r2
 8010234:	681a      	ldr	r2, [r3, #0]
 8010236:	68f9      	ldr	r1, [r7, #12]
 8010238:	f248 0364 	movw	r3, #32868	; 0x8064
 801023c:	440b      	add	r3, r1
 801023e:	881b      	ldrh	r3, [r3, #0]
 8010240:	fb03 f302 	mul.w	r3, r3, r2
 8010244:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 8010246:	68bb      	ldr	r3, [r7, #8]
 8010248:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801024c:	bf28      	it	cs
 801024e:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8010252:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801025a:	695c      	ldr	r4, [r3, #20]
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	f103 0110 	add.w	r1, r3, #16
 8010262:	68fa      	ldr	r2, [r7, #12]
 8010264:	f248 036c 	movw	r3, #32876	; 0x806c
 8010268:	4413      	add	r3, r2
 801026a:	681d      	ldr	r5, [r3, #0]
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 801026c:	68fa      	ldr	r2, [r7, #12]
 801026e:	f248 0364 	movw	r3, #32868	; 0x8064
 8010272:	4413      	add	r3, r2
 8010274:	881b      	ldrh	r3, [r3, #0]
 8010276:	461a      	mov	r2, r3
 8010278:	68bb      	ldr	r3, [r7, #8]
 801027a:	fbb3 f3f2 	udiv	r3, r3, r2
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 801027e:	b29b      	uxth	r3, r3
 8010280:	78f8      	ldrb	r0, [r7, #3]
 8010282:	462a      	mov	r2, r5
 8010284:	47a0      	blx	r4
 8010286:	4603      	mov	r3, r0
 8010288:	2b00      	cmp	r3, #0
 801028a:	da08      	bge.n	801029e <SCSI_ProcessWrite+0x86>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 801028c:	78f9      	ldrb	r1, [r7, #3]
 801028e:	2303      	movs	r3, #3
 8010290:	2204      	movs	r2, #4
 8010292:	6878      	ldr	r0, [r7, #4]
 8010294:	f7ff fad4 	bl	800f840 <SCSI_SenseCode>
    return -1;
 8010298:	f04f 33ff 	mov.w	r3, #4294967295
 801029c:	e05a      	b.n	8010354 <SCSI_ProcessWrite+0x13c>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 801029e:	68fa      	ldr	r2, [r7, #12]
 80102a0:	f248 036c 	movw	r3, #32876	; 0x806c
 80102a4:	4413      	add	r3, r2
 80102a6:	681a      	ldr	r2, [r3, #0]
 80102a8:	68f9      	ldr	r1, [r7, #12]
 80102aa:	f248 0364 	movw	r3, #32868	; 0x8064
 80102ae:	440b      	add	r3, r1
 80102b0:	881b      	ldrh	r3, [r3, #0]
 80102b2:	4619      	mov	r1, r3
 80102b4:	68bb      	ldr	r3, [r7, #8]
 80102b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80102ba:	441a      	add	r2, r3
 80102bc:	68f9      	ldr	r1, [r7, #12]
 80102be:	f248 036c 	movw	r3, #32876	; 0x806c
 80102c2:	440b      	add	r3, r1
 80102c4:	601a      	str	r2, [r3, #0]
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 80102c6:	68fa      	ldr	r2, [r7, #12]
 80102c8:	f248 0370 	movw	r3, #32880	; 0x8070
 80102cc:	4413      	add	r3, r2
 80102ce:	681a      	ldr	r2, [r3, #0]
 80102d0:	68f9      	ldr	r1, [r7, #12]
 80102d2:	f248 0364 	movw	r3, #32868	; 0x8064
 80102d6:	440b      	add	r3, r1
 80102d8:	881b      	ldrh	r3, [r3, #0]
 80102da:	4619      	mov	r1, r3
 80102dc:	68bb      	ldr	r3, [r7, #8]
 80102de:	fbb3 f3f1 	udiv	r3, r3, r1
 80102e2:	1ad2      	subs	r2, r2, r3
 80102e4:	68f9      	ldr	r1, [r7, #12]
 80102e6:	f248 0370 	movw	r3, #32880	; 0x8070
 80102ea:	440b      	add	r3, r1
 80102ec:	601a      	str	r2, [r3, #0]

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 80102ee:	68fa      	ldr	r2, [r7, #12]
 80102f0:	f248 0338 	movw	r3, #32824	; 0x8038
 80102f4:	4413      	add	r3, r2
 80102f6:	681a      	ldr	r2, [r3, #0]
 80102f8:	68bb      	ldr	r3, [r7, #8]
 80102fa:	1ad2      	subs	r2, r2, r3
 80102fc:	68f9      	ldr	r1, [r7, #12]
 80102fe:	f248 0338 	movw	r3, #32824	; 0x8038
 8010302:	440b      	add	r3, r1
 8010304:	601a      	str	r2, [r3, #0]

  if (hmsc->scsi_blk_len == 0U)
 8010306:	68fa      	ldr	r2, [r7, #12]
 8010308:	f248 0370 	movw	r3, #32880	; 0x8070
 801030c:	4413      	add	r3, r2
 801030e:	681b      	ldr	r3, [r3, #0]
 8010310:	2b00      	cmp	r3, #0
 8010312:	d104      	bne.n	801031e <SCSI_ProcessWrite+0x106>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8010314:	2100      	movs	r1, #0
 8010316:	6878      	ldr	r0, [r7, #4]
 8010318:	f7fe fde2 	bl	800eee0 <MSC_BOT_SendCSW>
 801031c:	e019      	b.n	8010352 <SCSI_ProcessWrite+0x13a>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 801031e:	68fa      	ldr	r2, [r7, #12]
 8010320:	f248 0370 	movw	r3, #32880	; 0x8070
 8010324:	4413      	add	r3, r2
 8010326:	681a      	ldr	r2, [r3, #0]
 8010328:	68f9      	ldr	r1, [r7, #12]
 801032a:	f248 0364 	movw	r3, #32868	; 0x8064
 801032e:	440b      	add	r3, r1
 8010330:	881b      	ldrh	r3, [r3, #0]
 8010332:	fb03 f302 	mul.w	r3, r3, r2
 8010336:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801033a:	bf28      	it	cs
 801033c:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8010340:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	f103 0210 	add.w	r2, r3, #16
 8010348:	68bb      	ldr	r3, [r7, #8]
 801034a:	2101      	movs	r1, #1
 801034c:	6878      	ldr	r0, [r7, #4]
 801034e:	f004 f89e 	bl	801448e <USBD_LL_PrepareReceive>
  }

  return 0;
 8010352:	2300      	movs	r3, #0
}
 8010354:	4618      	mov	r0, r3
 8010356:	3710      	adds	r7, #16
 8010358:	46bd      	mov	sp, r7
 801035a:	bdb0      	pop	{r4, r5, r7, pc}

0801035c <SCSI_UpdateBotData>:
* @param  length: Data length
* @retval status
*/
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 801035c:	b480      	push	{r7}
 801035e:	b087      	sub	sp, #28
 8010360:	af00      	add	r7, sp, #0
 8010362:	60f8      	str	r0, [r7, #12]
 8010364:	60b9      	str	r1, [r7, #8]
 8010366:	4613      	mov	r3, r2
 8010368:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 801036a:	88fb      	ldrh	r3, [r7, #6]
 801036c:	82fb      	strh	r3, [r7, #22]

  hmsc->bot_data_length = len;
 801036e:	8afa      	ldrh	r2, [r7, #22]
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8010374:	e00b      	b.n	801038e <SCSI_UpdateBotData+0x32>
  {
    len--;
 8010376:	8afb      	ldrh	r3, [r7, #22]
 8010378:	3b01      	subs	r3, #1
 801037a:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 801037c:	8afb      	ldrh	r3, [r7, #22]
 801037e:	68ba      	ldr	r2, [r7, #8]
 8010380:	441a      	add	r2, r3
 8010382:	8afb      	ldrh	r3, [r7, #22]
 8010384:	7811      	ldrb	r1, [r2, #0]
 8010386:	68fa      	ldr	r2, [r7, #12]
 8010388:	4413      	add	r3, r2
 801038a:	460a      	mov	r2, r1
 801038c:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 801038e:	8afb      	ldrh	r3, [r7, #22]
 8010390:	2b00      	cmp	r3, #0
 8010392:	d1f0      	bne.n	8010376 <SCSI_UpdateBotData+0x1a>
  }

  return 0;
 8010394:	2300      	movs	r3, #0
}
 8010396:	4618      	mov	r0, r3
 8010398:	371c      	adds	r7, #28
 801039a:	46bd      	mov	sp, r7
 801039c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103a0:	4770      	bx	lr

080103a2 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80103a2:	b580      	push	{r7, lr}
 80103a4:	b086      	sub	sp, #24
 80103a6:	af00      	add	r7, sp, #0
 80103a8:	60f8      	str	r0, [r7, #12]
 80103aa:	60b9      	str	r1, [r7, #8]
 80103ac:	4613      	mov	r3, r2
 80103ae:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d101      	bne.n	80103ba <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80103b6:	2303      	movs	r3, #3
 80103b8:	e025      	b.n	8010406 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d003      	beq.n	80103cc <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80103c4:	68fb      	ldr	r3, [r7, #12]
 80103c6:	2200      	movs	r2, #0
 80103c8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d003      	beq.n	80103de <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 80103d6:	68fb      	ldr	r3, [r7, #12]
 80103d8:	2200      	movs	r2, #0
 80103da:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80103de:	68bb      	ldr	r3, [r7, #8]
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d003      	beq.n	80103ec <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	68ba      	ldr	r2, [r7, #8]
 80103e8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	2201      	movs	r2, #1
 80103f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80103f4:	68fb      	ldr	r3, [r7, #12]
 80103f6:	79fa      	ldrb	r2, [r7, #7]
 80103f8:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80103fa:	68f8      	ldr	r0, [r7, #12]
 80103fc:	f003 fece 	bl	801419c <USBD_LL_Init>
 8010400:	4603      	mov	r3, r0
 8010402:	75fb      	strb	r3, [r7, #23]

  return ret;
 8010404:	7dfb      	ldrb	r3, [r7, #23]
}
 8010406:	4618      	mov	r0, r3
 8010408:	3718      	adds	r7, #24
 801040a:	46bd      	mov	sp, r7
 801040c:	bd80      	pop	{r7, pc}

0801040e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801040e:	b580      	push	{r7, lr}
 8010410:	b084      	sub	sp, #16
 8010412:	af00      	add	r7, sp, #0
 8010414:	6078      	str	r0, [r7, #4]
 8010416:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010418:	2300      	movs	r3, #0
 801041a:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801041c:	683b      	ldr	r3, [r7, #0]
 801041e:	2b00      	cmp	r3, #0
 8010420:	d101      	bne.n	8010426 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8010422:	2303      	movs	r3, #3
 8010424:	e010      	b.n	8010448 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	683a      	ldr	r2, [r7, #0]
 801042a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010436:	f107 020e 	add.w	r2, r7, #14
 801043a:	4610      	mov	r0, r2
 801043c:	4798      	blx	r3
 801043e:	4602      	mov	r2, r0
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8010446:	2300      	movs	r3, #0
}
 8010448:	4618      	mov	r0, r3
 801044a:	3710      	adds	r7, #16
 801044c:	46bd      	mov	sp, r7
 801044e:	bd80      	pop	{r7, pc}

08010450 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8010450:	b580      	push	{r7, lr}
 8010452:	b082      	sub	sp, #8
 8010454:	af00      	add	r7, sp, #0
 8010456:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8010458:	6878      	ldr	r0, [r7, #4]
 801045a:	f003 feef 	bl	801423c <USBD_LL_Start>
 801045e:	4603      	mov	r3, r0
}
 8010460:	4618      	mov	r0, r3
 8010462:	3708      	adds	r7, #8
 8010464:	46bd      	mov	sp, r7
 8010466:	bd80      	pop	{r7, pc}

08010468 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8010468:	b480      	push	{r7}
 801046a:	b083      	sub	sp, #12
 801046c:	af00      	add	r7, sp, #0
 801046e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010470:	2300      	movs	r3, #0
}
 8010472:	4618      	mov	r0, r3
 8010474:	370c      	adds	r7, #12
 8010476:	46bd      	mov	sp, r7
 8010478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801047c:	4770      	bx	lr

0801047e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801047e:	b580      	push	{r7, lr}
 8010480:	b084      	sub	sp, #16
 8010482:	af00      	add	r7, sp, #0
 8010484:	6078      	str	r0, [r7, #4]
 8010486:	460b      	mov	r3, r1
 8010488:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801048a:	2303      	movs	r3, #3
 801048c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010494:	2b00      	cmp	r3, #0
 8010496:	d009      	beq.n	80104ac <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801049e:	681b      	ldr	r3, [r3, #0]
 80104a0:	78fa      	ldrb	r2, [r7, #3]
 80104a2:	4611      	mov	r1, r2
 80104a4:	6878      	ldr	r0, [r7, #4]
 80104a6:	4798      	blx	r3
 80104a8:	4603      	mov	r3, r0
 80104aa:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80104ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80104ae:	4618      	mov	r0, r3
 80104b0:	3710      	adds	r7, #16
 80104b2:	46bd      	mov	sp, r7
 80104b4:	bd80      	pop	{r7, pc}

080104b6 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80104b6:	b580      	push	{r7, lr}
 80104b8:	b082      	sub	sp, #8
 80104ba:	af00      	add	r7, sp, #0
 80104bc:	6078      	str	r0, [r7, #4]
 80104be:	460b      	mov	r3, r1
 80104c0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d007      	beq.n	80104dc <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80104d2:	685b      	ldr	r3, [r3, #4]
 80104d4:	78fa      	ldrb	r2, [r7, #3]
 80104d6:	4611      	mov	r1, r2
 80104d8:	6878      	ldr	r0, [r7, #4]
 80104da:	4798      	blx	r3
  }

  return USBD_OK;
 80104dc:	2300      	movs	r3, #0
}
 80104de:	4618      	mov	r0, r3
 80104e0:	3708      	adds	r7, #8
 80104e2:	46bd      	mov	sp, r7
 80104e4:	bd80      	pop	{r7, pc}

080104e6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80104e6:	b580      	push	{r7, lr}
 80104e8:	b084      	sub	sp, #16
 80104ea:	af00      	add	r7, sp, #0
 80104ec:	6078      	str	r0, [r7, #4]
 80104ee:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80104f6:	6839      	ldr	r1, [r7, #0]
 80104f8:	4618      	mov	r0, r3
 80104fa:	f000 ff2b 	bl	8011354 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	2201      	movs	r2, #1
 8010502:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 801050c:	461a      	mov	r2, r3
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801051a:	f003 031f 	and.w	r3, r3, #31
 801051e:	2b01      	cmp	r3, #1
 8010520:	d00e      	beq.n	8010540 <USBD_LL_SetupStage+0x5a>
 8010522:	2b01      	cmp	r3, #1
 8010524:	d302      	bcc.n	801052c <USBD_LL_SetupStage+0x46>
 8010526:	2b02      	cmp	r3, #2
 8010528:	d014      	beq.n	8010554 <USBD_LL_SetupStage+0x6e>
 801052a:	e01d      	b.n	8010568 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010532:	4619      	mov	r1, r3
 8010534:	6878      	ldr	r0, [r7, #4]
 8010536:	f000 fa17 	bl	8010968 <USBD_StdDevReq>
 801053a:	4603      	mov	r3, r0
 801053c:	73fb      	strb	r3, [r7, #15]
      break;
 801053e:	e020      	b.n	8010582 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010546:	4619      	mov	r1, r3
 8010548:	6878      	ldr	r0, [r7, #4]
 801054a:	f000 fa7b 	bl	8010a44 <USBD_StdItfReq>
 801054e:	4603      	mov	r3, r0
 8010550:	73fb      	strb	r3, [r7, #15]
      break;
 8010552:	e016      	b.n	8010582 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801055a:	4619      	mov	r1, r3
 801055c:	6878      	ldr	r0, [r7, #4]
 801055e:	f000 fab7 	bl	8010ad0 <USBD_StdEPReq>
 8010562:	4603      	mov	r3, r0
 8010564:	73fb      	strb	r3, [r7, #15]
      break;
 8010566:	e00c      	b.n	8010582 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801056e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8010572:	b2db      	uxtb	r3, r3
 8010574:	4619      	mov	r1, r3
 8010576:	6878      	ldr	r0, [r7, #4]
 8010578:	f003 fedf 	bl	801433a <USBD_LL_StallEP>
 801057c:	4603      	mov	r3, r0
 801057e:	73fb      	strb	r3, [r7, #15]
      break;
 8010580:	bf00      	nop
  }

  return ret;
 8010582:	7bfb      	ldrb	r3, [r7, #15]
}
 8010584:	4618      	mov	r0, r3
 8010586:	3710      	adds	r7, #16
 8010588:	46bd      	mov	sp, r7
 801058a:	bd80      	pop	{r7, pc}

0801058c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801058c:	b580      	push	{r7, lr}
 801058e:	b086      	sub	sp, #24
 8010590:	af00      	add	r7, sp, #0
 8010592:	60f8      	str	r0, [r7, #12]
 8010594:	460b      	mov	r3, r1
 8010596:	607a      	str	r2, [r7, #4]
 8010598:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 801059a:	7afb      	ldrb	r3, [r7, #11]
 801059c:	2b00      	cmp	r3, #0
 801059e:	d137      	bne.n	8010610 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80105a6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80105ae:	2b03      	cmp	r3, #3
 80105b0:	d14a      	bne.n	8010648 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80105b2:	693b      	ldr	r3, [r7, #16]
 80105b4:	689a      	ldr	r2, [r3, #8]
 80105b6:	693b      	ldr	r3, [r7, #16]
 80105b8:	68db      	ldr	r3, [r3, #12]
 80105ba:	429a      	cmp	r2, r3
 80105bc:	d913      	bls.n	80105e6 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80105be:	693b      	ldr	r3, [r7, #16]
 80105c0:	689a      	ldr	r2, [r3, #8]
 80105c2:	693b      	ldr	r3, [r7, #16]
 80105c4:	68db      	ldr	r3, [r3, #12]
 80105c6:	1ad2      	subs	r2, r2, r3
 80105c8:	693b      	ldr	r3, [r7, #16]
 80105ca:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80105cc:	693b      	ldr	r3, [r7, #16]
 80105ce:	68da      	ldr	r2, [r3, #12]
 80105d0:	693b      	ldr	r3, [r7, #16]
 80105d2:	689b      	ldr	r3, [r3, #8]
 80105d4:	4293      	cmp	r3, r2
 80105d6:	bf28      	it	cs
 80105d8:	4613      	movcs	r3, r2
 80105da:	461a      	mov	r2, r3
 80105dc:	6879      	ldr	r1, [r7, #4]
 80105de:	68f8      	ldr	r0, [r7, #12]
 80105e0:	f000 ff8f 	bl	8011502 <USBD_CtlContinueRx>
 80105e4:	e030      	b.n	8010648 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80105ec:	691b      	ldr	r3, [r3, #16]
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d00a      	beq.n	8010608 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80105f8:	2b03      	cmp	r3, #3
 80105fa:	d105      	bne.n	8010608 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80105fc:	68fb      	ldr	r3, [r7, #12]
 80105fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010602:	691b      	ldr	r3, [r3, #16]
 8010604:	68f8      	ldr	r0, [r7, #12]
 8010606:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8010608:	68f8      	ldr	r0, [r7, #12]
 801060a:	f000 ff8b 	bl	8011524 <USBD_CtlSendStatus>
 801060e:	e01b      	b.n	8010648 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010616:	699b      	ldr	r3, [r3, #24]
 8010618:	2b00      	cmp	r3, #0
 801061a:	d013      	beq.n	8010644 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8010622:	2b03      	cmp	r3, #3
 8010624:	d10e      	bne.n	8010644 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801062c:	699b      	ldr	r3, [r3, #24]
 801062e:	7afa      	ldrb	r2, [r7, #11]
 8010630:	4611      	mov	r1, r2
 8010632:	68f8      	ldr	r0, [r7, #12]
 8010634:	4798      	blx	r3
 8010636:	4603      	mov	r3, r0
 8010638:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 801063a:	7dfb      	ldrb	r3, [r7, #23]
 801063c:	2b00      	cmp	r3, #0
 801063e:	d003      	beq.n	8010648 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8010640:	7dfb      	ldrb	r3, [r7, #23]
 8010642:	e002      	b.n	801064a <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8010644:	2303      	movs	r3, #3
 8010646:	e000      	b.n	801064a <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8010648:	2300      	movs	r3, #0
}
 801064a:	4618      	mov	r0, r3
 801064c:	3718      	adds	r7, #24
 801064e:	46bd      	mov	sp, r7
 8010650:	bd80      	pop	{r7, pc}

08010652 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8010652:	b580      	push	{r7, lr}
 8010654:	b086      	sub	sp, #24
 8010656:	af00      	add	r7, sp, #0
 8010658:	60f8      	str	r0, [r7, #12]
 801065a:	460b      	mov	r3, r1
 801065c:	607a      	str	r2, [r7, #4]
 801065e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8010660:	7afb      	ldrb	r3, [r7, #11]
 8010662:	2b00      	cmp	r3, #0
 8010664:	d16a      	bne.n	801073c <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	3314      	adds	r3, #20
 801066a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8010672:	2b02      	cmp	r3, #2
 8010674:	d155      	bne.n	8010722 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8010676:	693b      	ldr	r3, [r7, #16]
 8010678:	689a      	ldr	r2, [r3, #8]
 801067a:	693b      	ldr	r3, [r7, #16]
 801067c:	68db      	ldr	r3, [r3, #12]
 801067e:	429a      	cmp	r2, r3
 8010680:	d914      	bls.n	80106ac <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8010682:	693b      	ldr	r3, [r7, #16]
 8010684:	689a      	ldr	r2, [r3, #8]
 8010686:	693b      	ldr	r3, [r7, #16]
 8010688:	68db      	ldr	r3, [r3, #12]
 801068a:	1ad2      	subs	r2, r2, r3
 801068c:	693b      	ldr	r3, [r7, #16]
 801068e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8010690:	693b      	ldr	r3, [r7, #16]
 8010692:	689b      	ldr	r3, [r3, #8]
 8010694:	461a      	mov	r2, r3
 8010696:	6879      	ldr	r1, [r7, #4]
 8010698:	68f8      	ldr	r0, [r7, #12]
 801069a:	f000 ff21 	bl	80114e0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801069e:	2300      	movs	r3, #0
 80106a0:	2200      	movs	r2, #0
 80106a2:	2100      	movs	r1, #0
 80106a4:	68f8      	ldr	r0, [r7, #12]
 80106a6:	f003 fef2 	bl	801448e <USBD_LL_PrepareReceive>
 80106aa:	e03a      	b.n	8010722 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80106ac:	693b      	ldr	r3, [r7, #16]
 80106ae:	68da      	ldr	r2, [r3, #12]
 80106b0:	693b      	ldr	r3, [r7, #16]
 80106b2:	689b      	ldr	r3, [r3, #8]
 80106b4:	429a      	cmp	r2, r3
 80106b6:	d11c      	bne.n	80106f2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80106b8:	693b      	ldr	r3, [r7, #16]
 80106ba:	685a      	ldr	r2, [r3, #4]
 80106bc:	693b      	ldr	r3, [r7, #16]
 80106be:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80106c0:	429a      	cmp	r2, r3
 80106c2:	d316      	bcc.n	80106f2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80106c4:	693b      	ldr	r3, [r7, #16]
 80106c6:	685a      	ldr	r2, [r3, #4]
 80106c8:	68fb      	ldr	r3, [r7, #12]
 80106ca:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80106ce:	429a      	cmp	r2, r3
 80106d0:	d20f      	bcs.n	80106f2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80106d2:	2200      	movs	r2, #0
 80106d4:	2100      	movs	r1, #0
 80106d6:	68f8      	ldr	r0, [r7, #12]
 80106d8:	f000 ff02 	bl	80114e0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80106dc:	68fb      	ldr	r3, [r7, #12]
 80106de:	2200      	movs	r2, #0
 80106e0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80106e4:	2300      	movs	r3, #0
 80106e6:	2200      	movs	r2, #0
 80106e8:	2100      	movs	r1, #0
 80106ea:	68f8      	ldr	r0, [r7, #12]
 80106ec:	f003 fecf 	bl	801448e <USBD_LL_PrepareReceive>
 80106f0:	e017      	b.n	8010722 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80106f2:	68fb      	ldr	r3, [r7, #12]
 80106f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80106f8:	68db      	ldr	r3, [r3, #12]
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d00a      	beq.n	8010714 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8010704:	2b03      	cmp	r3, #3
 8010706:	d105      	bne.n	8010714 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8010708:	68fb      	ldr	r3, [r7, #12]
 801070a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801070e:	68db      	ldr	r3, [r3, #12]
 8010710:	68f8      	ldr	r0, [r7, #12]
 8010712:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8010714:	2180      	movs	r1, #128	; 0x80
 8010716:	68f8      	ldr	r0, [r7, #12]
 8010718:	f003 fe0f 	bl	801433a <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801071c:	68f8      	ldr	r0, [r7, #12]
 801071e:	f000 ff14 	bl	801154a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8010728:	2b01      	cmp	r3, #1
 801072a:	d123      	bne.n	8010774 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 801072c:	68f8      	ldr	r0, [r7, #12]
 801072e:	f7ff fe9b 	bl	8010468 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	2200      	movs	r2, #0
 8010736:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 801073a:	e01b      	b.n	8010774 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010742:	695b      	ldr	r3, [r3, #20]
 8010744:	2b00      	cmp	r3, #0
 8010746:	d013      	beq.n	8010770 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 801074e:	2b03      	cmp	r3, #3
 8010750:	d10e      	bne.n	8010770 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8010752:	68fb      	ldr	r3, [r7, #12]
 8010754:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010758:	695b      	ldr	r3, [r3, #20]
 801075a:	7afa      	ldrb	r2, [r7, #11]
 801075c:	4611      	mov	r1, r2
 801075e:	68f8      	ldr	r0, [r7, #12]
 8010760:	4798      	blx	r3
 8010762:	4603      	mov	r3, r0
 8010764:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8010766:	7dfb      	ldrb	r3, [r7, #23]
 8010768:	2b00      	cmp	r3, #0
 801076a:	d003      	beq.n	8010774 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 801076c:	7dfb      	ldrb	r3, [r7, #23]
 801076e:	e002      	b.n	8010776 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8010770:	2303      	movs	r3, #3
 8010772:	e000      	b.n	8010776 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8010774:	2300      	movs	r3, #0
}
 8010776:	4618      	mov	r0, r3
 8010778:	3718      	adds	r7, #24
 801077a:	46bd      	mov	sp, r7
 801077c:	bd80      	pop	{r7, pc}

0801077e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801077e:	b580      	push	{r7, lr}
 8010780:	b082      	sub	sp, #8
 8010782:	af00      	add	r7, sp, #0
 8010784:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	2201      	movs	r2, #1
 801078a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	2200      	movs	r2, #0
 8010792:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	2200      	movs	r2, #0
 801079a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	2200      	movs	r2, #0
 80107a0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d009      	beq.n	80107c2 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80107b4:	685b      	ldr	r3, [r3, #4]
 80107b6:	687a      	ldr	r2, [r7, #4]
 80107b8:	6852      	ldr	r2, [r2, #4]
 80107ba:	b2d2      	uxtb	r2, r2
 80107bc:	4611      	mov	r1, r2
 80107be:	6878      	ldr	r0, [r7, #4]
 80107c0:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80107c2:	2340      	movs	r3, #64	; 0x40
 80107c4:	2200      	movs	r2, #0
 80107c6:	2100      	movs	r1, #0
 80107c8:	6878      	ldr	r0, [r7, #4]
 80107ca:	f003 fd52 	bl	8014272 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	2201      	movs	r2, #1
 80107d2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	2240      	movs	r2, #64	; 0x40
 80107da:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80107de:	2340      	movs	r3, #64	; 0x40
 80107e0:	2200      	movs	r2, #0
 80107e2:	2180      	movs	r1, #128	; 0x80
 80107e4:	6878      	ldr	r0, [r7, #4]
 80107e6:	f003 fd44 	bl	8014272 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	2201      	movs	r2, #1
 80107ee:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	2240      	movs	r2, #64	; 0x40
 80107f4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80107f6:	2300      	movs	r3, #0
}
 80107f8:	4618      	mov	r0, r3
 80107fa:	3708      	adds	r7, #8
 80107fc:	46bd      	mov	sp, r7
 80107fe:	bd80      	pop	{r7, pc}

08010800 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8010800:	b480      	push	{r7}
 8010802:	b083      	sub	sp, #12
 8010804:	af00      	add	r7, sp, #0
 8010806:	6078      	str	r0, [r7, #4]
 8010808:	460b      	mov	r3, r1
 801080a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	78fa      	ldrb	r2, [r7, #3]
 8010810:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8010812:	2300      	movs	r3, #0
}
 8010814:	4618      	mov	r0, r3
 8010816:	370c      	adds	r7, #12
 8010818:	46bd      	mov	sp, r7
 801081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801081e:	4770      	bx	lr

08010820 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8010820:	b480      	push	{r7}
 8010822:	b083      	sub	sp, #12
 8010824:	af00      	add	r7, sp, #0
 8010826:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	2204      	movs	r2, #4
 8010838:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 801083c:	2300      	movs	r3, #0
}
 801083e:	4618      	mov	r0, r3
 8010840:	370c      	adds	r7, #12
 8010842:	46bd      	mov	sp, r7
 8010844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010848:	4770      	bx	lr

0801084a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801084a:	b480      	push	{r7}
 801084c:	b083      	sub	sp, #12
 801084e:	af00      	add	r7, sp, #0
 8010850:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010858:	2b04      	cmp	r3, #4
 801085a:	d105      	bne.n	8010868 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8010868:	2300      	movs	r3, #0
}
 801086a:	4618      	mov	r0, r3
 801086c:	370c      	adds	r7, #12
 801086e:	46bd      	mov	sp, r7
 8010870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010874:	4770      	bx	lr

08010876 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8010876:	b580      	push	{r7, lr}
 8010878:	b082      	sub	sp, #8
 801087a:	af00      	add	r7, sp, #0
 801087c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010884:	2b03      	cmp	r3, #3
 8010886:	d10b      	bne.n	80108a0 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801088e:	69db      	ldr	r3, [r3, #28]
 8010890:	2b00      	cmp	r3, #0
 8010892:	d005      	beq.n	80108a0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801089a:	69db      	ldr	r3, [r3, #28]
 801089c:	6878      	ldr	r0, [r7, #4]
 801089e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80108a0:	2300      	movs	r3, #0
}
 80108a2:	4618      	mov	r0, r3
 80108a4:	3708      	adds	r7, #8
 80108a6:	46bd      	mov	sp, r7
 80108a8:	bd80      	pop	{r7, pc}

080108aa <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80108aa:	b480      	push	{r7}
 80108ac:	b083      	sub	sp, #12
 80108ae:	af00      	add	r7, sp, #0
 80108b0:	6078      	str	r0, [r7, #4]
 80108b2:	460b      	mov	r3, r1
 80108b4:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80108b6:	2300      	movs	r3, #0
}
 80108b8:	4618      	mov	r0, r3
 80108ba:	370c      	adds	r7, #12
 80108bc:	46bd      	mov	sp, r7
 80108be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108c2:	4770      	bx	lr

080108c4 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80108c4:	b480      	push	{r7}
 80108c6:	b083      	sub	sp, #12
 80108c8:	af00      	add	r7, sp, #0
 80108ca:	6078      	str	r0, [r7, #4]
 80108cc:	460b      	mov	r3, r1
 80108ce:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80108d0:	2300      	movs	r3, #0
}
 80108d2:	4618      	mov	r0, r3
 80108d4:	370c      	adds	r7, #12
 80108d6:	46bd      	mov	sp, r7
 80108d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108dc:	4770      	bx	lr

080108de <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80108de:	b480      	push	{r7}
 80108e0:	b083      	sub	sp, #12
 80108e2:	af00      	add	r7, sp, #0
 80108e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80108e6:	2300      	movs	r3, #0
}
 80108e8:	4618      	mov	r0, r3
 80108ea:	370c      	adds	r7, #12
 80108ec:	46bd      	mov	sp, r7
 80108ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108f2:	4770      	bx	lr

080108f4 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80108f4:	b580      	push	{r7, lr}
 80108f6:	b082      	sub	sp, #8
 80108f8:	af00      	add	r7, sp, #0
 80108fa:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	2201      	movs	r2, #1
 8010900:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801090a:	2b00      	cmp	r3, #0
 801090c:	d009      	beq.n	8010922 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010914:	685b      	ldr	r3, [r3, #4]
 8010916:	687a      	ldr	r2, [r7, #4]
 8010918:	6852      	ldr	r2, [r2, #4]
 801091a:	b2d2      	uxtb	r2, r2
 801091c:	4611      	mov	r1, r2
 801091e:	6878      	ldr	r0, [r7, #4]
 8010920:	4798      	blx	r3
  }

  return USBD_OK;
 8010922:	2300      	movs	r3, #0
}
 8010924:	4618      	mov	r0, r3
 8010926:	3708      	adds	r7, #8
 8010928:	46bd      	mov	sp, r7
 801092a:	bd80      	pop	{r7, pc}

0801092c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801092c:	b480      	push	{r7}
 801092e:	b087      	sub	sp, #28
 8010930:	af00      	add	r7, sp, #0
 8010932:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8010938:	697b      	ldr	r3, [r7, #20]
 801093a:	781b      	ldrb	r3, [r3, #0]
 801093c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801093e:	697b      	ldr	r3, [r7, #20]
 8010940:	3301      	adds	r3, #1
 8010942:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8010944:	697b      	ldr	r3, [r7, #20]
 8010946:	781b      	ldrb	r3, [r3, #0]
 8010948:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801094a:	8a3b      	ldrh	r3, [r7, #16]
 801094c:	021b      	lsls	r3, r3, #8
 801094e:	b21a      	sxth	r2, r3
 8010950:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010954:	4313      	orrs	r3, r2
 8010956:	b21b      	sxth	r3, r3
 8010958:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801095a:	89fb      	ldrh	r3, [r7, #14]
}
 801095c:	4618      	mov	r0, r3
 801095e:	371c      	adds	r7, #28
 8010960:	46bd      	mov	sp, r7
 8010962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010966:	4770      	bx	lr

08010968 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010968:	b580      	push	{r7, lr}
 801096a:	b084      	sub	sp, #16
 801096c:	af00      	add	r7, sp, #0
 801096e:	6078      	str	r0, [r7, #4]
 8010970:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010972:	2300      	movs	r3, #0
 8010974:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010976:	683b      	ldr	r3, [r7, #0]
 8010978:	781b      	ldrb	r3, [r3, #0]
 801097a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801097e:	2b20      	cmp	r3, #32
 8010980:	d004      	beq.n	801098c <USBD_StdDevReq+0x24>
 8010982:	2b40      	cmp	r3, #64	; 0x40
 8010984:	d002      	beq.n	801098c <USBD_StdDevReq+0x24>
 8010986:	2b00      	cmp	r3, #0
 8010988:	d00a      	beq.n	80109a0 <USBD_StdDevReq+0x38>
 801098a:	e050      	b.n	8010a2e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010992:	689b      	ldr	r3, [r3, #8]
 8010994:	6839      	ldr	r1, [r7, #0]
 8010996:	6878      	ldr	r0, [r7, #4]
 8010998:	4798      	blx	r3
 801099a:	4603      	mov	r3, r0
 801099c:	73fb      	strb	r3, [r7, #15]
    break;
 801099e:	e04b      	b.n	8010a38 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80109a0:	683b      	ldr	r3, [r7, #0]
 80109a2:	785b      	ldrb	r3, [r3, #1]
 80109a4:	2b09      	cmp	r3, #9
 80109a6:	d83c      	bhi.n	8010a22 <USBD_StdDevReq+0xba>
 80109a8:	a201      	add	r2, pc, #4	; (adr r2, 80109b0 <USBD_StdDevReq+0x48>)
 80109aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109ae:	bf00      	nop
 80109b0:	08010a05 	.word	0x08010a05
 80109b4:	08010a19 	.word	0x08010a19
 80109b8:	08010a23 	.word	0x08010a23
 80109bc:	08010a0f 	.word	0x08010a0f
 80109c0:	08010a23 	.word	0x08010a23
 80109c4:	080109e3 	.word	0x080109e3
 80109c8:	080109d9 	.word	0x080109d9
 80109cc:	08010a23 	.word	0x08010a23
 80109d0:	080109fb 	.word	0x080109fb
 80109d4:	080109ed 	.word	0x080109ed
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80109d8:	6839      	ldr	r1, [r7, #0]
 80109da:	6878      	ldr	r0, [r7, #4]
 80109dc:	f000 f9ce 	bl	8010d7c <USBD_GetDescriptor>
      break;
 80109e0:	e024      	b.n	8010a2c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80109e2:	6839      	ldr	r1, [r7, #0]
 80109e4:	6878      	ldr	r0, [r7, #4]
 80109e6:	f000 fb33 	bl	8011050 <USBD_SetAddress>
      break;
 80109ea:	e01f      	b.n	8010a2c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80109ec:	6839      	ldr	r1, [r7, #0]
 80109ee:	6878      	ldr	r0, [r7, #4]
 80109f0:	f000 fb70 	bl	80110d4 <USBD_SetConfig>
 80109f4:	4603      	mov	r3, r0
 80109f6:	73fb      	strb	r3, [r7, #15]
      break;
 80109f8:	e018      	b.n	8010a2c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80109fa:	6839      	ldr	r1, [r7, #0]
 80109fc:	6878      	ldr	r0, [r7, #4]
 80109fe:	f000 fc0d 	bl	801121c <USBD_GetConfig>
      break;
 8010a02:	e013      	b.n	8010a2c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8010a04:	6839      	ldr	r1, [r7, #0]
 8010a06:	6878      	ldr	r0, [r7, #4]
 8010a08:	f000 fc3c 	bl	8011284 <USBD_GetStatus>
      break;
 8010a0c:	e00e      	b.n	8010a2c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8010a0e:	6839      	ldr	r1, [r7, #0]
 8010a10:	6878      	ldr	r0, [r7, #4]
 8010a12:	f000 fc6a 	bl	80112ea <USBD_SetFeature>
      break;
 8010a16:	e009      	b.n	8010a2c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8010a18:	6839      	ldr	r1, [r7, #0]
 8010a1a:	6878      	ldr	r0, [r7, #4]
 8010a1c:	f000 fc79 	bl	8011312 <USBD_ClrFeature>
      break;
 8010a20:	e004      	b.n	8010a2c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8010a22:	6839      	ldr	r1, [r7, #0]
 8010a24:	6878      	ldr	r0, [r7, #4]
 8010a26:	f000 fccf 	bl	80113c8 <USBD_CtlError>
      break;
 8010a2a:	bf00      	nop
    }
    break;
 8010a2c:	e004      	b.n	8010a38 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8010a2e:	6839      	ldr	r1, [r7, #0]
 8010a30:	6878      	ldr	r0, [r7, #4]
 8010a32:	f000 fcc9 	bl	80113c8 <USBD_CtlError>
    break;
 8010a36:	bf00      	nop
  }

  return ret;
 8010a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a3a:	4618      	mov	r0, r3
 8010a3c:	3710      	adds	r7, #16
 8010a3e:	46bd      	mov	sp, r7
 8010a40:	bd80      	pop	{r7, pc}
 8010a42:	bf00      	nop

08010a44 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010a44:	b580      	push	{r7, lr}
 8010a46:	b084      	sub	sp, #16
 8010a48:	af00      	add	r7, sp, #0
 8010a4a:	6078      	str	r0, [r7, #4]
 8010a4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010a4e:	2300      	movs	r3, #0
 8010a50:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010a52:	683b      	ldr	r3, [r7, #0]
 8010a54:	781b      	ldrb	r3, [r3, #0]
 8010a56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010a5a:	2b20      	cmp	r3, #32
 8010a5c:	d003      	beq.n	8010a66 <USBD_StdItfReq+0x22>
 8010a5e:	2b40      	cmp	r3, #64	; 0x40
 8010a60:	d001      	beq.n	8010a66 <USBD_StdItfReq+0x22>
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d12a      	bne.n	8010abc <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010a6c:	3b01      	subs	r3, #1
 8010a6e:	2b02      	cmp	r3, #2
 8010a70:	d81d      	bhi.n	8010aae <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8010a72:	683b      	ldr	r3, [r7, #0]
 8010a74:	889b      	ldrh	r3, [r3, #4]
 8010a76:	b2db      	uxtb	r3, r3
 8010a78:	2b01      	cmp	r3, #1
 8010a7a:	d813      	bhi.n	8010aa4 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010a82:	689b      	ldr	r3, [r3, #8]
 8010a84:	6839      	ldr	r1, [r7, #0]
 8010a86:	6878      	ldr	r0, [r7, #4]
 8010a88:	4798      	blx	r3
 8010a8a:	4603      	mov	r3, r0
 8010a8c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8010a8e:	683b      	ldr	r3, [r7, #0]
 8010a90:	88db      	ldrh	r3, [r3, #6]
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d110      	bne.n	8010ab8 <USBD_StdItfReq+0x74>
 8010a96:	7bfb      	ldrb	r3, [r7, #15]
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d10d      	bne.n	8010ab8 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8010a9c:	6878      	ldr	r0, [r7, #4]
 8010a9e:	f000 fd41 	bl	8011524 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8010aa2:	e009      	b.n	8010ab8 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8010aa4:	6839      	ldr	r1, [r7, #0]
 8010aa6:	6878      	ldr	r0, [r7, #4]
 8010aa8:	f000 fc8e 	bl	80113c8 <USBD_CtlError>
      break;
 8010aac:	e004      	b.n	8010ab8 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8010aae:	6839      	ldr	r1, [r7, #0]
 8010ab0:	6878      	ldr	r0, [r7, #4]
 8010ab2:	f000 fc89 	bl	80113c8 <USBD_CtlError>
      break;
 8010ab6:	e000      	b.n	8010aba <USBD_StdItfReq+0x76>
      break;
 8010ab8:	bf00      	nop
    }
    break;
 8010aba:	e004      	b.n	8010ac6 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8010abc:	6839      	ldr	r1, [r7, #0]
 8010abe:	6878      	ldr	r0, [r7, #4]
 8010ac0:	f000 fc82 	bl	80113c8 <USBD_CtlError>
    break;
 8010ac4:	bf00      	nop
  }

  return ret;
 8010ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ac8:	4618      	mov	r0, r3
 8010aca:	3710      	adds	r7, #16
 8010acc:	46bd      	mov	sp, r7
 8010ace:	bd80      	pop	{r7, pc}

08010ad0 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010ad0:	b580      	push	{r7, lr}
 8010ad2:	b084      	sub	sp, #16
 8010ad4:	af00      	add	r7, sp, #0
 8010ad6:	6078      	str	r0, [r7, #4]
 8010ad8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8010ada:	2300      	movs	r3, #0
 8010adc:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8010ade:	683b      	ldr	r3, [r7, #0]
 8010ae0:	889b      	ldrh	r3, [r3, #4]
 8010ae2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010ae4:	683b      	ldr	r3, [r7, #0]
 8010ae6:	781b      	ldrb	r3, [r3, #0]
 8010ae8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010aec:	2b20      	cmp	r3, #32
 8010aee:	d004      	beq.n	8010afa <USBD_StdEPReq+0x2a>
 8010af0:	2b40      	cmp	r3, #64	; 0x40
 8010af2:	d002      	beq.n	8010afa <USBD_StdEPReq+0x2a>
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d00a      	beq.n	8010b0e <USBD_StdEPReq+0x3e>
 8010af8:	e135      	b.n	8010d66 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010b00:	689b      	ldr	r3, [r3, #8]
 8010b02:	6839      	ldr	r1, [r7, #0]
 8010b04:	6878      	ldr	r0, [r7, #4]
 8010b06:	4798      	blx	r3
 8010b08:	4603      	mov	r3, r0
 8010b0a:	73fb      	strb	r3, [r7, #15]
    break;
 8010b0c:	e130      	b.n	8010d70 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8010b0e:	683b      	ldr	r3, [r7, #0]
 8010b10:	785b      	ldrb	r3, [r3, #1]
 8010b12:	2b01      	cmp	r3, #1
 8010b14:	d03e      	beq.n	8010b94 <USBD_StdEPReq+0xc4>
 8010b16:	2b03      	cmp	r3, #3
 8010b18:	d002      	beq.n	8010b20 <USBD_StdEPReq+0x50>
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d077      	beq.n	8010c0e <USBD_StdEPReq+0x13e>
 8010b1e:	e11c      	b.n	8010d5a <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010b26:	2b02      	cmp	r3, #2
 8010b28:	d002      	beq.n	8010b30 <USBD_StdEPReq+0x60>
 8010b2a:	2b03      	cmp	r3, #3
 8010b2c:	d015      	beq.n	8010b5a <USBD_StdEPReq+0x8a>
 8010b2e:	e02b      	b.n	8010b88 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010b30:	7bbb      	ldrb	r3, [r7, #14]
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d00c      	beq.n	8010b50 <USBD_StdEPReq+0x80>
 8010b36:	7bbb      	ldrb	r3, [r7, #14]
 8010b38:	2b80      	cmp	r3, #128	; 0x80
 8010b3a:	d009      	beq.n	8010b50 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8010b3c:	7bbb      	ldrb	r3, [r7, #14]
 8010b3e:	4619      	mov	r1, r3
 8010b40:	6878      	ldr	r0, [r7, #4]
 8010b42:	f003 fbfa 	bl	801433a <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8010b46:	2180      	movs	r1, #128	; 0x80
 8010b48:	6878      	ldr	r0, [r7, #4]
 8010b4a:	f003 fbf6 	bl	801433a <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8010b4e:	e020      	b.n	8010b92 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8010b50:	6839      	ldr	r1, [r7, #0]
 8010b52:	6878      	ldr	r0, [r7, #4]
 8010b54:	f000 fc38 	bl	80113c8 <USBD_CtlError>
        break;
 8010b58:	e01b      	b.n	8010b92 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8010b5a:	683b      	ldr	r3, [r7, #0]
 8010b5c:	885b      	ldrh	r3, [r3, #2]
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d10e      	bne.n	8010b80 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8010b62:	7bbb      	ldrb	r3, [r7, #14]
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d00b      	beq.n	8010b80 <USBD_StdEPReq+0xb0>
 8010b68:	7bbb      	ldrb	r3, [r7, #14]
 8010b6a:	2b80      	cmp	r3, #128	; 0x80
 8010b6c:	d008      	beq.n	8010b80 <USBD_StdEPReq+0xb0>
 8010b6e:	683b      	ldr	r3, [r7, #0]
 8010b70:	88db      	ldrh	r3, [r3, #6]
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d104      	bne.n	8010b80 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8010b76:	7bbb      	ldrb	r3, [r7, #14]
 8010b78:	4619      	mov	r1, r3
 8010b7a:	6878      	ldr	r0, [r7, #4]
 8010b7c:	f003 fbdd 	bl	801433a <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8010b80:	6878      	ldr	r0, [r7, #4]
 8010b82:	f000 fccf 	bl	8011524 <USBD_CtlSendStatus>

        break;
 8010b86:	e004      	b.n	8010b92 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8010b88:	6839      	ldr	r1, [r7, #0]
 8010b8a:	6878      	ldr	r0, [r7, #4]
 8010b8c:	f000 fc1c 	bl	80113c8 <USBD_CtlError>
        break;
 8010b90:	bf00      	nop
      }
      break;
 8010b92:	e0e7      	b.n	8010d64 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010b9a:	2b02      	cmp	r3, #2
 8010b9c:	d002      	beq.n	8010ba4 <USBD_StdEPReq+0xd4>
 8010b9e:	2b03      	cmp	r3, #3
 8010ba0:	d015      	beq.n	8010bce <USBD_StdEPReq+0xfe>
 8010ba2:	e02d      	b.n	8010c00 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010ba4:	7bbb      	ldrb	r3, [r7, #14]
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d00c      	beq.n	8010bc4 <USBD_StdEPReq+0xf4>
 8010baa:	7bbb      	ldrb	r3, [r7, #14]
 8010bac:	2b80      	cmp	r3, #128	; 0x80
 8010bae:	d009      	beq.n	8010bc4 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8010bb0:	7bbb      	ldrb	r3, [r7, #14]
 8010bb2:	4619      	mov	r1, r3
 8010bb4:	6878      	ldr	r0, [r7, #4]
 8010bb6:	f003 fbc0 	bl	801433a <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8010bba:	2180      	movs	r1, #128	; 0x80
 8010bbc:	6878      	ldr	r0, [r7, #4]
 8010bbe:	f003 fbbc 	bl	801433a <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8010bc2:	e023      	b.n	8010c0c <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8010bc4:	6839      	ldr	r1, [r7, #0]
 8010bc6:	6878      	ldr	r0, [r7, #4]
 8010bc8:	f000 fbfe 	bl	80113c8 <USBD_CtlError>
        break;
 8010bcc:	e01e      	b.n	8010c0c <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8010bce:	683b      	ldr	r3, [r7, #0]
 8010bd0:	885b      	ldrh	r3, [r3, #2]
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d119      	bne.n	8010c0a <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8010bd6:	7bbb      	ldrb	r3, [r7, #14]
 8010bd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d004      	beq.n	8010bea <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8010be0:	7bbb      	ldrb	r3, [r7, #14]
 8010be2:	4619      	mov	r1, r3
 8010be4:	6878      	ldr	r0, [r7, #4]
 8010be6:	f003 fbc7 	bl	8014378 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8010bea:	6878      	ldr	r0, [r7, #4]
 8010bec:	f000 fc9a 	bl	8011524 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010bf6:	689b      	ldr	r3, [r3, #8]
 8010bf8:	6839      	ldr	r1, [r7, #0]
 8010bfa:	6878      	ldr	r0, [r7, #4]
 8010bfc:	4798      	blx	r3
        }
        break;
 8010bfe:	e004      	b.n	8010c0a <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8010c00:	6839      	ldr	r1, [r7, #0]
 8010c02:	6878      	ldr	r0, [r7, #4]
 8010c04:	f000 fbe0 	bl	80113c8 <USBD_CtlError>
        break;
 8010c08:	e000      	b.n	8010c0c <USBD_StdEPReq+0x13c>
        break;
 8010c0a:	bf00      	nop
      }
      break;
 8010c0c:	e0aa      	b.n	8010d64 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010c14:	2b02      	cmp	r3, #2
 8010c16:	d002      	beq.n	8010c1e <USBD_StdEPReq+0x14e>
 8010c18:	2b03      	cmp	r3, #3
 8010c1a:	d032      	beq.n	8010c82 <USBD_StdEPReq+0x1b2>
 8010c1c:	e097      	b.n	8010d4e <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010c1e:	7bbb      	ldrb	r3, [r7, #14]
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d007      	beq.n	8010c34 <USBD_StdEPReq+0x164>
 8010c24:	7bbb      	ldrb	r3, [r7, #14]
 8010c26:	2b80      	cmp	r3, #128	; 0x80
 8010c28:	d004      	beq.n	8010c34 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8010c2a:	6839      	ldr	r1, [r7, #0]
 8010c2c:	6878      	ldr	r0, [r7, #4]
 8010c2e:	f000 fbcb 	bl	80113c8 <USBD_CtlError>
          break;
 8010c32:	e091      	b.n	8010d58 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010c34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	da0b      	bge.n	8010c54 <USBD_StdEPReq+0x184>
 8010c3c:	7bbb      	ldrb	r3, [r7, #14]
 8010c3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010c42:	4613      	mov	r3, r2
 8010c44:	009b      	lsls	r3, r3, #2
 8010c46:	4413      	add	r3, r2
 8010c48:	009b      	lsls	r3, r3, #2
 8010c4a:	3310      	adds	r3, #16
 8010c4c:	687a      	ldr	r2, [r7, #4]
 8010c4e:	4413      	add	r3, r2
 8010c50:	3304      	adds	r3, #4
 8010c52:	e00b      	b.n	8010c6c <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8010c54:	7bbb      	ldrb	r3, [r7, #14]
 8010c56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010c5a:	4613      	mov	r3, r2
 8010c5c:	009b      	lsls	r3, r3, #2
 8010c5e:	4413      	add	r3, r2
 8010c60:	009b      	lsls	r3, r3, #2
 8010c62:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8010c66:	687a      	ldr	r2, [r7, #4]
 8010c68:	4413      	add	r3, r2
 8010c6a:	3304      	adds	r3, #4
 8010c6c:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8010c6e:	68bb      	ldr	r3, [r7, #8]
 8010c70:	2200      	movs	r2, #0
 8010c72:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010c74:	68bb      	ldr	r3, [r7, #8]
 8010c76:	2202      	movs	r2, #2
 8010c78:	4619      	mov	r1, r3
 8010c7a:	6878      	ldr	r0, [r7, #4]
 8010c7c:	f000 fc15 	bl	80114aa <USBD_CtlSendData>
        break;
 8010c80:	e06a      	b.n	8010d58 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8010c82:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	da11      	bge.n	8010cae <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8010c8a:	7bbb      	ldrb	r3, [r7, #14]
 8010c8c:	f003 020f 	and.w	r2, r3, #15
 8010c90:	6879      	ldr	r1, [r7, #4]
 8010c92:	4613      	mov	r3, r2
 8010c94:	009b      	lsls	r3, r3, #2
 8010c96:	4413      	add	r3, r2
 8010c98:	009b      	lsls	r3, r3, #2
 8010c9a:	440b      	add	r3, r1
 8010c9c:	3324      	adds	r3, #36	; 0x24
 8010c9e:	881b      	ldrh	r3, [r3, #0]
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d117      	bne.n	8010cd4 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8010ca4:	6839      	ldr	r1, [r7, #0]
 8010ca6:	6878      	ldr	r0, [r7, #4]
 8010ca8:	f000 fb8e 	bl	80113c8 <USBD_CtlError>
            break;
 8010cac:	e054      	b.n	8010d58 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8010cae:	7bbb      	ldrb	r3, [r7, #14]
 8010cb0:	f003 020f 	and.w	r2, r3, #15
 8010cb4:	6879      	ldr	r1, [r7, #4]
 8010cb6:	4613      	mov	r3, r2
 8010cb8:	009b      	lsls	r3, r3, #2
 8010cba:	4413      	add	r3, r2
 8010cbc:	009b      	lsls	r3, r3, #2
 8010cbe:	440b      	add	r3, r1
 8010cc0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8010cc4:	881b      	ldrh	r3, [r3, #0]
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d104      	bne.n	8010cd4 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8010cca:	6839      	ldr	r1, [r7, #0]
 8010ccc:	6878      	ldr	r0, [r7, #4]
 8010cce:	f000 fb7b 	bl	80113c8 <USBD_CtlError>
            break;
 8010cd2:	e041      	b.n	8010d58 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010cd4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	da0b      	bge.n	8010cf4 <USBD_StdEPReq+0x224>
 8010cdc:	7bbb      	ldrb	r3, [r7, #14]
 8010cde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010ce2:	4613      	mov	r3, r2
 8010ce4:	009b      	lsls	r3, r3, #2
 8010ce6:	4413      	add	r3, r2
 8010ce8:	009b      	lsls	r3, r3, #2
 8010cea:	3310      	adds	r3, #16
 8010cec:	687a      	ldr	r2, [r7, #4]
 8010cee:	4413      	add	r3, r2
 8010cf0:	3304      	adds	r3, #4
 8010cf2:	e00b      	b.n	8010d0c <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8010cf4:	7bbb      	ldrb	r3, [r7, #14]
 8010cf6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010cfa:	4613      	mov	r3, r2
 8010cfc:	009b      	lsls	r3, r3, #2
 8010cfe:	4413      	add	r3, r2
 8010d00:	009b      	lsls	r3, r3, #2
 8010d02:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8010d06:	687a      	ldr	r2, [r7, #4]
 8010d08:	4413      	add	r3, r2
 8010d0a:	3304      	adds	r3, #4
 8010d0c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8010d0e:	7bbb      	ldrb	r3, [r7, #14]
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d002      	beq.n	8010d1a <USBD_StdEPReq+0x24a>
 8010d14:	7bbb      	ldrb	r3, [r7, #14]
 8010d16:	2b80      	cmp	r3, #128	; 0x80
 8010d18:	d103      	bne.n	8010d22 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8010d1a:	68bb      	ldr	r3, [r7, #8]
 8010d1c:	2200      	movs	r2, #0
 8010d1e:	601a      	str	r2, [r3, #0]
 8010d20:	e00e      	b.n	8010d40 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8010d22:	7bbb      	ldrb	r3, [r7, #14]
 8010d24:	4619      	mov	r1, r3
 8010d26:	6878      	ldr	r0, [r7, #4]
 8010d28:	f003 fb45 	bl	80143b6 <USBD_LL_IsStallEP>
 8010d2c:	4603      	mov	r3, r0
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d003      	beq.n	8010d3a <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8010d32:	68bb      	ldr	r3, [r7, #8]
 8010d34:	2201      	movs	r2, #1
 8010d36:	601a      	str	r2, [r3, #0]
 8010d38:	e002      	b.n	8010d40 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8010d3a:	68bb      	ldr	r3, [r7, #8]
 8010d3c:	2200      	movs	r2, #0
 8010d3e:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010d40:	68bb      	ldr	r3, [r7, #8]
 8010d42:	2202      	movs	r2, #2
 8010d44:	4619      	mov	r1, r3
 8010d46:	6878      	ldr	r0, [r7, #4]
 8010d48:	f000 fbaf 	bl	80114aa <USBD_CtlSendData>
          break;
 8010d4c:	e004      	b.n	8010d58 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8010d4e:	6839      	ldr	r1, [r7, #0]
 8010d50:	6878      	ldr	r0, [r7, #4]
 8010d52:	f000 fb39 	bl	80113c8 <USBD_CtlError>
        break;
 8010d56:	bf00      	nop
      }
      break;
 8010d58:	e004      	b.n	8010d64 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8010d5a:	6839      	ldr	r1, [r7, #0]
 8010d5c:	6878      	ldr	r0, [r7, #4]
 8010d5e:	f000 fb33 	bl	80113c8 <USBD_CtlError>
      break;
 8010d62:	bf00      	nop
    }
    break;
 8010d64:	e004      	b.n	8010d70 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8010d66:	6839      	ldr	r1, [r7, #0]
 8010d68:	6878      	ldr	r0, [r7, #4]
 8010d6a:	f000 fb2d 	bl	80113c8 <USBD_CtlError>
    break;
 8010d6e:	bf00      	nop
  }

  return ret;
 8010d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d72:	4618      	mov	r0, r3
 8010d74:	3710      	adds	r7, #16
 8010d76:	46bd      	mov	sp, r7
 8010d78:	bd80      	pop	{r7, pc}
	...

08010d7c <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010d7c:	b580      	push	{r7, lr}
 8010d7e:	b084      	sub	sp, #16
 8010d80:	af00      	add	r7, sp, #0
 8010d82:	6078      	str	r0, [r7, #4]
 8010d84:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010d86:	2300      	movs	r3, #0
 8010d88:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8010d8a:	2300      	movs	r3, #0
 8010d8c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8010d8e:	2300      	movs	r3, #0
 8010d90:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8010d92:	683b      	ldr	r3, [r7, #0]
 8010d94:	885b      	ldrh	r3, [r3, #2]
 8010d96:	0a1b      	lsrs	r3, r3, #8
 8010d98:	b29b      	uxth	r3, r3
 8010d9a:	3b01      	subs	r3, #1
 8010d9c:	2b06      	cmp	r3, #6
 8010d9e:	f200 8128 	bhi.w	8010ff2 <USBD_GetDescriptor+0x276>
 8010da2:	a201      	add	r2, pc, #4	; (adr r2, 8010da8 <USBD_GetDescriptor+0x2c>)
 8010da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010da8:	08010dc5 	.word	0x08010dc5
 8010dac:	08010ddd 	.word	0x08010ddd
 8010db0:	08010e1d 	.word	0x08010e1d
 8010db4:	08010ff3 	.word	0x08010ff3
 8010db8:	08010ff3 	.word	0x08010ff3
 8010dbc:	08010f93 	.word	0x08010f93
 8010dc0:	08010fbf 	.word	0x08010fbf
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	687a      	ldr	r2, [r7, #4]
 8010dce:	7c12      	ldrb	r2, [r2, #16]
 8010dd0:	f107 0108 	add.w	r1, r7, #8
 8010dd4:	4610      	mov	r0, r2
 8010dd6:	4798      	blx	r3
 8010dd8:	60f8      	str	r0, [r7, #12]
    break;
 8010dda:	e112      	b.n	8011002 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	7c1b      	ldrb	r3, [r3, #16]
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d10d      	bne.n	8010e00 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010dec:	f107 0208 	add.w	r2, r7, #8
 8010df0:	4610      	mov	r0, r2
 8010df2:	4798      	blx	r3
 8010df4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010df6:	68fb      	ldr	r3, [r7, #12]
 8010df8:	3301      	adds	r3, #1
 8010dfa:	2202      	movs	r2, #2
 8010dfc:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8010dfe:	e100      	b.n	8011002 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e08:	f107 0208 	add.w	r2, r7, #8
 8010e0c:	4610      	mov	r0, r2
 8010e0e:	4798      	blx	r3
 8010e10:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010e12:	68fb      	ldr	r3, [r7, #12]
 8010e14:	3301      	adds	r3, #1
 8010e16:	2202      	movs	r2, #2
 8010e18:	701a      	strb	r2, [r3, #0]
    break;
 8010e1a:	e0f2      	b.n	8011002 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8010e1c:	683b      	ldr	r3, [r7, #0]
 8010e1e:	885b      	ldrh	r3, [r3, #2]
 8010e20:	b2db      	uxtb	r3, r3
 8010e22:	2b05      	cmp	r3, #5
 8010e24:	f200 80ac 	bhi.w	8010f80 <USBD_GetDescriptor+0x204>
 8010e28:	a201      	add	r2, pc, #4	; (adr r2, 8010e30 <USBD_GetDescriptor+0xb4>)
 8010e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e2e:	bf00      	nop
 8010e30:	08010e49 	.word	0x08010e49
 8010e34:	08010e7d 	.word	0x08010e7d
 8010e38:	08010eb1 	.word	0x08010eb1
 8010e3c:	08010ee5 	.word	0x08010ee5
 8010e40:	08010f19 	.word	0x08010f19
 8010e44:	08010f4d 	.word	0x08010f4d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010e4e:	685b      	ldr	r3, [r3, #4]
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d00b      	beq.n	8010e6c <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010e5a:	685b      	ldr	r3, [r3, #4]
 8010e5c:	687a      	ldr	r2, [r7, #4]
 8010e5e:	7c12      	ldrb	r2, [r2, #16]
 8010e60:	f107 0108 	add.w	r1, r7, #8
 8010e64:	4610      	mov	r0, r2
 8010e66:	4798      	blx	r3
 8010e68:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010e6a:	e091      	b.n	8010f90 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8010e6c:	6839      	ldr	r1, [r7, #0]
 8010e6e:	6878      	ldr	r0, [r7, #4]
 8010e70:	f000 faaa 	bl	80113c8 <USBD_CtlError>
        err++;
 8010e74:	7afb      	ldrb	r3, [r7, #11]
 8010e76:	3301      	adds	r3, #1
 8010e78:	72fb      	strb	r3, [r7, #11]
      break;
 8010e7a:	e089      	b.n	8010f90 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010e82:	689b      	ldr	r3, [r3, #8]
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d00b      	beq.n	8010ea0 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010e8e:	689b      	ldr	r3, [r3, #8]
 8010e90:	687a      	ldr	r2, [r7, #4]
 8010e92:	7c12      	ldrb	r2, [r2, #16]
 8010e94:	f107 0108 	add.w	r1, r7, #8
 8010e98:	4610      	mov	r0, r2
 8010e9a:	4798      	blx	r3
 8010e9c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010e9e:	e077      	b.n	8010f90 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8010ea0:	6839      	ldr	r1, [r7, #0]
 8010ea2:	6878      	ldr	r0, [r7, #4]
 8010ea4:	f000 fa90 	bl	80113c8 <USBD_CtlError>
        err++;
 8010ea8:	7afb      	ldrb	r3, [r7, #11]
 8010eaa:	3301      	adds	r3, #1
 8010eac:	72fb      	strb	r3, [r7, #11]
      break;
 8010eae:	e06f      	b.n	8010f90 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010eb6:	68db      	ldr	r3, [r3, #12]
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d00b      	beq.n	8010ed4 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010ec2:	68db      	ldr	r3, [r3, #12]
 8010ec4:	687a      	ldr	r2, [r7, #4]
 8010ec6:	7c12      	ldrb	r2, [r2, #16]
 8010ec8:	f107 0108 	add.w	r1, r7, #8
 8010ecc:	4610      	mov	r0, r2
 8010ece:	4798      	blx	r3
 8010ed0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010ed2:	e05d      	b.n	8010f90 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8010ed4:	6839      	ldr	r1, [r7, #0]
 8010ed6:	6878      	ldr	r0, [r7, #4]
 8010ed8:	f000 fa76 	bl	80113c8 <USBD_CtlError>
        err++;
 8010edc:	7afb      	ldrb	r3, [r7, #11]
 8010ede:	3301      	adds	r3, #1
 8010ee0:	72fb      	strb	r3, [r7, #11]
      break;
 8010ee2:	e055      	b.n	8010f90 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010eea:	691b      	ldr	r3, [r3, #16]
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d00b      	beq.n	8010f08 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010ef6:	691b      	ldr	r3, [r3, #16]
 8010ef8:	687a      	ldr	r2, [r7, #4]
 8010efa:	7c12      	ldrb	r2, [r2, #16]
 8010efc:	f107 0108 	add.w	r1, r7, #8
 8010f00:	4610      	mov	r0, r2
 8010f02:	4798      	blx	r3
 8010f04:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010f06:	e043      	b.n	8010f90 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8010f08:	6839      	ldr	r1, [r7, #0]
 8010f0a:	6878      	ldr	r0, [r7, #4]
 8010f0c:	f000 fa5c 	bl	80113c8 <USBD_CtlError>
        err++;
 8010f10:	7afb      	ldrb	r3, [r7, #11]
 8010f12:	3301      	adds	r3, #1
 8010f14:	72fb      	strb	r3, [r7, #11]
      break;
 8010f16:	e03b      	b.n	8010f90 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010f1e:	695b      	ldr	r3, [r3, #20]
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d00b      	beq.n	8010f3c <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010f2a:	695b      	ldr	r3, [r3, #20]
 8010f2c:	687a      	ldr	r2, [r7, #4]
 8010f2e:	7c12      	ldrb	r2, [r2, #16]
 8010f30:	f107 0108 	add.w	r1, r7, #8
 8010f34:	4610      	mov	r0, r2
 8010f36:	4798      	blx	r3
 8010f38:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010f3a:	e029      	b.n	8010f90 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8010f3c:	6839      	ldr	r1, [r7, #0]
 8010f3e:	6878      	ldr	r0, [r7, #4]
 8010f40:	f000 fa42 	bl	80113c8 <USBD_CtlError>
        err++;
 8010f44:	7afb      	ldrb	r3, [r7, #11]
 8010f46:	3301      	adds	r3, #1
 8010f48:	72fb      	strb	r3, [r7, #11]
      break;
 8010f4a:	e021      	b.n	8010f90 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010f52:	699b      	ldr	r3, [r3, #24]
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d00b      	beq.n	8010f70 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010f5e:	699b      	ldr	r3, [r3, #24]
 8010f60:	687a      	ldr	r2, [r7, #4]
 8010f62:	7c12      	ldrb	r2, [r2, #16]
 8010f64:	f107 0108 	add.w	r1, r7, #8
 8010f68:	4610      	mov	r0, r2
 8010f6a:	4798      	blx	r3
 8010f6c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010f6e:	e00f      	b.n	8010f90 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8010f70:	6839      	ldr	r1, [r7, #0]
 8010f72:	6878      	ldr	r0, [r7, #4]
 8010f74:	f000 fa28 	bl	80113c8 <USBD_CtlError>
        err++;
 8010f78:	7afb      	ldrb	r3, [r7, #11]
 8010f7a:	3301      	adds	r3, #1
 8010f7c:	72fb      	strb	r3, [r7, #11]
      break;
 8010f7e:	e007      	b.n	8010f90 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8010f80:	6839      	ldr	r1, [r7, #0]
 8010f82:	6878      	ldr	r0, [r7, #4]
 8010f84:	f000 fa20 	bl	80113c8 <USBD_CtlError>
      err++;
 8010f88:	7afb      	ldrb	r3, [r7, #11]
 8010f8a:	3301      	adds	r3, #1
 8010f8c:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8010f8e:	bf00      	nop
    }
    break;
 8010f90:	e037      	b.n	8011002 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	7c1b      	ldrb	r3, [r3, #16]
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d109      	bne.n	8010fae <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010fa2:	f107 0208 	add.w	r2, r7, #8
 8010fa6:	4610      	mov	r0, r2
 8010fa8:	4798      	blx	r3
 8010faa:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8010fac:	e029      	b.n	8011002 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8010fae:	6839      	ldr	r1, [r7, #0]
 8010fb0:	6878      	ldr	r0, [r7, #4]
 8010fb2:	f000 fa09 	bl	80113c8 <USBD_CtlError>
      err++;
 8010fb6:	7afb      	ldrb	r3, [r7, #11]
 8010fb8:	3301      	adds	r3, #1
 8010fba:	72fb      	strb	r3, [r7, #11]
    break;
 8010fbc:	e021      	b.n	8011002 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	7c1b      	ldrb	r3, [r3, #16]
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d10d      	bne.n	8010fe2 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010fce:	f107 0208 	add.w	r2, r7, #8
 8010fd2:	4610      	mov	r0, r2
 8010fd4:	4798      	blx	r3
 8010fd6:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8010fd8:	68fb      	ldr	r3, [r7, #12]
 8010fda:	3301      	adds	r3, #1
 8010fdc:	2207      	movs	r2, #7
 8010fde:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8010fe0:	e00f      	b.n	8011002 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8010fe2:	6839      	ldr	r1, [r7, #0]
 8010fe4:	6878      	ldr	r0, [r7, #4]
 8010fe6:	f000 f9ef 	bl	80113c8 <USBD_CtlError>
      err++;
 8010fea:	7afb      	ldrb	r3, [r7, #11]
 8010fec:	3301      	adds	r3, #1
 8010fee:	72fb      	strb	r3, [r7, #11]
    break;
 8010ff0:	e007      	b.n	8011002 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8010ff2:	6839      	ldr	r1, [r7, #0]
 8010ff4:	6878      	ldr	r0, [r7, #4]
 8010ff6:	f000 f9e7 	bl	80113c8 <USBD_CtlError>
    err++;
 8010ffa:	7afb      	ldrb	r3, [r7, #11]
 8010ffc:	3301      	adds	r3, #1
 8010ffe:	72fb      	strb	r3, [r7, #11]
    break;
 8011000:	bf00      	nop
  }

  if (err != 0U)
 8011002:	7afb      	ldrb	r3, [r7, #11]
 8011004:	2b00      	cmp	r3, #0
 8011006:	d11e      	bne.n	8011046 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8011008:	683b      	ldr	r3, [r7, #0]
 801100a:	88db      	ldrh	r3, [r3, #6]
 801100c:	2b00      	cmp	r3, #0
 801100e:	d016      	beq.n	801103e <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8011010:	893b      	ldrh	r3, [r7, #8]
 8011012:	2b00      	cmp	r3, #0
 8011014:	d00e      	beq.n	8011034 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8011016:	683b      	ldr	r3, [r7, #0]
 8011018:	88da      	ldrh	r2, [r3, #6]
 801101a:	893b      	ldrh	r3, [r7, #8]
 801101c:	4293      	cmp	r3, r2
 801101e:	bf28      	it	cs
 8011020:	4613      	movcs	r3, r2
 8011022:	b29b      	uxth	r3, r3
 8011024:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8011026:	893b      	ldrh	r3, [r7, #8]
 8011028:	461a      	mov	r2, r3
 801102a:	68f9      	ldr	r1, [r7, #12]
 801102c:	6878      	ldr	r0, [r7, #4]
 801102e:	f000 fa3c 	bl	80114aa <USBD_CtlSendData>
 8011032:	e009      	b.n	8011048 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8011034:	6839      	ldr	r1, [r7, #0]
 8011036:	6878      	ldr	r0, [r7, #4]
 8011038:	f000 f9c6 	bl	80113c8 <USBD_CtlError>
 801103c:	e004      	b.n	8011048 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 801103e:	6878      	ldr	r0, [r7, #4]
 8011040:	f000 fa70 	bl	8011524 <USBD_CtlSendStatus>
 8011044:	e000      	b.n	8011048 <USBD_GetDescriptor+0x2cc>
    return;
 8011046:	bf00      	nop
    }
  }
}
 8011048:	3710      	adds	r7, #16
 801104a:	46bd      	mov	sp, r7
 801104c:	bd80      	pop	{r7, pc}
 801104e:	bf00      	nop

08011050 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011050:	b580      	push	{r7, lr}
 8011052:	b084      	sub	sp, #16
 8011054:	af00      	add	r7, sp, #0
 8011056:	6078      	str	r0, [r7, #4]
 8011058:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801105a:	683b      	ldr	r3, [r7, #0]
 801105c:	889b      	ldrh	r3, [r3, #4]
 801105e:	2b00      	cmp	r3, #0
 8011060:	d130      	bne.n	80110c4 <USBD_SetAddress+0x74>
 8011062:	683b      	ldr	r3, [r7, #0]
 8011064:	88db      	ldrh	r3, [r3, #6]
 8011066:	2b00      	cmp	r3, #0
 8011068:	d12c      	bne.n	80110c4 <USBD_SetAddress+0x74>
 801106a:	683b      	ldr	r3, [r7, #0]
 801106c:	885b      	ldrh	r3, [r3, #2]
 801106e:	2b7f      	cmp	r3, #127	; 0x7f
 8011070:	d828      	bhi.n	80110c4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8011072:	683b      	ldr	r3, [r7, #0]
 8011074:	885b      	ldrh	r3, [r3, #2]
 8011076:	b2db      	uxtb	r3, r3
 8011078:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801107c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011084:	2b03      	cmp	r3, #3
 8011086:	d104      	bne.n	8011092 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8011088:	6839      	ldr	r1, [r7, #0]
 801108a:	6878      	ldr	r0, [r7, #4]
 801108c:	f000 f99c 	bl	80113c8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011090:	e01c      	b.n	80110cc <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	7bfa      	ldrb	r2, [r7, #15]
 8011096:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801109a:	7bfb      	ldrb	r3, [r7, #15]
 801109c:	4619      	mov	r1, r3
 801109e:	6878      	ldr	r0, [r7, #4]
 80110a0:	f003 f9b5 	bl	801440e <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80110a4:	6878      	ldr	r0, [r7, #4]
 80110a6:	f000 fa3d 	bl	8011524 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80110aa:	7bfb      	ldrb	r3, [r7, #15]
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d004      	beq.n	80110ba <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	2202      	movs	r2, #2
 80110b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80110b8:	e008      	b.n	80110cc <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	2201      	movs	r2, #1
 80110be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80110c2:	e003      	b.n	80110cc <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80110c4:	6839      	ldr	r1, [r7, #0]
 80110c6:	6878      	ldr	r0, [r7, #4]
 80110c8:	f000 f97e 	bl	80113c8 <USBD_CtlError>
  }
}
 80110cc:	bf00      	nop
 80110ce:	3710      	adds	r7, #16
 80110d0:	46bd      	mov	sp, r7
 80110d2:	bd80      	pop	{r7, pc}

080110d4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80110d4:	b580      	push	{r7, lr}
 80110d6:	b084      	sub	sp, #16
 80110d8:	af00      	add	r7, sp, #0
 80110da:	6078      	str	r0, [r7, #4]
 80110dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80110de:	2300      	movs	r3, #0
 80110e0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80110e2:	683b      	ldr	r3, [r7, #0]
 80110e4:	885b      	ldrh	r3, [r3, #2]
 80110e6:	b2da      	uxtb	r2, r3
 80110e8:	4b4b      	ldr	r3, [pc, #300]	; (8011218 <USBD_SetConfig+0x144>)
 80110ea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80110ec:	4b4a      	ldr	r3, [pc, #296]	; (8011218 <USBD_SetConfig+0x144>)
 80110ee:	781b      	ldrb	r3, [r3, #0]
 80110f0:	2b01      	cmp	r3, #1
 80110f2:	d905      	bls.n	8011100 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80110f4:	6839      	ldr	r1, [r7, #0]
 80110f6:	6878      	ldr	r0, [r7, #4]
 80110f8:	f000 f966 	bl	80113c8 <USBD_CtlError>
    return USBD_FAIL;
 80110fc:	2303      	movs	r3, #3
 80110fe:	e087      	b.n	8011210 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011106:	2b02      	cmp	r3, #2
 8011108:	d002      	beq.n	8011110 <USBD_SetConfig+0x3c>
 801110a:	2b03      	cmp	r3, #3
 801110c:	d025      	beq.n	801115a <USBD_SetConfig+0x86>
 801110e:	e071      	b.n	80111f4 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8011110:	4b41      	ldr	r3, [pc, #260]	; (8011218 <USBD_SetConfig+0x144>)
 8011112:	781b      	ldrb	r3, [r3, #0]
 8011114:	2b00      	cmp	r3, #0
 8011116:	d01c      	beq.n	8011152 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8011118:	4b3f      	ldr	r3, [pc, #252]	; (8011218 <USBD_SetConfig+0x144>)
 801111a:	781b      	ldrb	r3, [r3, #0]
 801111c:	461a      	mov	r2, r3
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8011122:	4b3d      	ldr	r3, [pc, #244]	; (8011218 <USBD_SetConfig+0x144>)
 8011124:	781b      	ldrb	r3, [r3, #0]
 8011126:	4619      	mov	r1, r3
 8011128:	6878      	ldr	r0, [r7, #4]
 801112a:	f7ff f9a8 	bl	801047e <USBD_SetClassConfig>
 801112e:	4603      	mov	r3, r0
 8011130:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8011132:	7bfb      	ldrb	r3, [r7, #15]
 8011134:	2b00      	cmp	r3, #0
 8011136:	d004      	beq.n	8011142 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8011138:	6839      	ldr	r1, [r7, #0]
 801113a:	6878      	ldr	r0, [r7, #4]
 801113c:	f000 f944 	bl	80113c8 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8011140:	e065      	b.n	801120e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8011142:	6878      	ldr	r0, [r7, #4]
 8011144:	f000 f9ee 	bl	8011524 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	2203      	movs	r2, #3
 801114c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8011150:	e05d      	b.n	801120e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8011152:	6878      	ldr	r0, [r7, #4]
 8011154:	f000 f9e6 	bl	8011524 <USBD_CtlSendStatus>
    break;
 8011158:	e059      	b.n	801120e <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 801115a:	4b2f      	ldr	r3, [pc, #188]	; (8011218 <USBD_SetConfig+0x144>)
 801115c:	781b      	ldrb	r3, [r3, #0]
 801115e:	2b00      	cmp	r3, #0
 8011160:	d112      	bne.n	8011188 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	2202      	movs	r2, #2
 8011166:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 801116a:	4b2b      	ldr	r3, [pc, #172]	; (8011218 <USBD_SetConfig+0x144>)
 801116c:	781b      	ldrb	r3, [r3, #0]
 801116e:	461a      	mov	r2, r3
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011174:	4b28      	ldr	r3, [pc, #160]	; (8011218 <USBD_SetConfig+0x144>)
 8011176:	781b      	ldrb	r3, [r3, #0]
 8011178:	4619      	mov	r1, r3
 801117a:	6878      	ldr	r0, [r7, #4]
 801117c:	f7ff f99b 	bl	80104b6 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8011180:	6878      	ldr	r0, [r7, #4]
 8011182:	f000 f9cf 	bl	8011524 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8011186:	e042      	b.n	801120e <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8011188:	4b23      	ldr	r3, [pc, #140]	; (8011218 <USBD_SetConfig+0x144>)
 801118a:	781b      	ldrb	r3, [r3, #0]
 801118c:	461a      	mov	r2, r3
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	685b      	ldr	r3, [r3, #4]
 8011192:	429a      	cmp	r2, r3
 8011194:	d02a      	beq.n	80111ec <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	685b      	ldr	r3, [r3, #4]
 801119a:	b2db      	uxtb	r3, r3
 801119c:	4619      	mov	r1, r3
 801119e:	6878      	ldr	r0, [r7, #4]
 80111a0:	f7ff f989 	bl	80104b6 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80111a4:	4b1c      	ldr	r3, [pc, #112]	; (8011218 <USBD_SetConfig+0x144>)
 80111a6:	781b      	ldrb	r3, [r3, #0]
 80111a8:	461a      	mov	r2, r3
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80111ae:	4b1a      	ldr	r3, [pc, #104]	; (8011218 <USBD_SetConfig+0x144>)
 80111b0:	781b      	ldrb	r3, [r3, #0]
 80111b2:	4619      	mov	r1, r3
 80111b4:	6878      	ldr	r0, [r7, #4]
 80111b6:	f7ff f962 	bl	801047e <USBD_SetClassConfig>
 80111ba:	4603      	mov	r3, r0
 80111bc:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 80111be:	7bfb      	ldrb	r3, [r7, #15]
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d00f      	beq.n	80111e4 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 80111c4:	6839      	ldr	r1, [r7, #0]
 80111c6:	6878      	ldr	r0, [r7, #4]
 80111c8:	f000 f8fe 	bl	80113c8 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	685b      	ldr	r3, [r3, #4]
 80111d0:	b2db      	uxtb	r3, r3
 80111d2:	4619      	mov	r1, r3
 80111d4:	6878      	ldr	r0, [r7, #4]
 80111d6:	f7ff f96e 	bl	80104b6 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	2202      	movs	r2, #2
 80111de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80111e2:	e014      	b.n	801120e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80111e4:	6878      	ldr	r0, [r7, #4]
 80111e6:	f000 f99d 	bl	8011524 <USBD_CtlSendStatus>
    break;
 80111ea:	e010      	b.n	801120e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80111ec:	6878      	ldr	r0, [r7, #4]
 80111ee:	f000 f999 	bl	8011524 <USBD_CtlSendStatus>
    break;
 80111f2:	e00c      	b.n	801120e <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 80111f4:	6839      	ldr	r1, [r7, #0]
 80111f6:	6878      	ldr	r0, [r7, #4]
 80111f8:	f000 f8e6 	bl	80113c8 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80111fc:	4b06      	ldr	r3, [pc, #24]	; (8011218 <USBD_SetConfig+0x144>)
 80111fe:	781b      	ldrb	r3, [r3, #0]
 8011200:	4619      	mov	r1, r3
 8011202:	6878      	ldr	r0, [r7, #4]
 8011204:	f7ff f957 	bl	80104b6 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8011208:	2303      	movs	r3, #3
 801120a:	73fb      	strb	r3, [r7, #15]
    break;
 801120c:	bf00      	nop
  }

  return ret;
 801120e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011210:	4618      	mov	r0, r3
 8011212:	3710      	adds	r7, #16
 8011214:	46bd      	mov	sp, r7
 8011216:	bd80      	pop	{r7, pc}
 8011218:	24040200 	.word	0x24040200

0801121c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801121c:	b580      	push	{r7, lr}
 801121e:	b082      	sub	sp, #8
 8011220:	af00      	add	r7, sp, #0
 8011222:	6078      	str	r0, [r7, #4]
 8011224:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8011226:	683b      	ldr	r3, [r7, #0]
 8011228:	88db      	ldrh	r3, [r3, #6]
 801122a:	2b01      	cmp	r3, #1
 801122c:	d004      	beq.n	8011238 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801122e:	6839      	ldr	r1, [r7, #0]
 8011230:	6878      	ldr	r0, [r7, #4]
 8011232:	f000 f8c9 	bl	80113c8 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8011236:	e021      	b.n	801127c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801123e:	2b01      	cmp	r3, #1
 8011240:	db17      	blt.n	8011272 <USBD_GetConfig+0x56>
 8011242:	2b02      	cmp	r3, #2
 8011244:	dd02      	ble.n	801124c <USBD_GetConfig+0x30>
 8011246:	2b03      	cmp	r3, #3
 8011248:	d00b      	beq.n	8011262 <USBD_GetConfig+0x46>
 801124a:	e012      	b.n	8011272 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	2200      	movs	r2, #0
 8011250:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	3308      	adds	r3, #8
 8011256:	2201      	movs	r2, #1
 8011258:	4619      	mov	r1, r3
 801125a:	6878      	ldr	r0, [r7, #4]
 801125c:	f000 f925 	bl	80114aa <USBD_CtlSendData>
      break;
 8011260:	e00c      	b.n	801127c <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	3304      	adds	r3, #4
 8011266:	2201      	movs	r2, #1
 8011268:	4619      	mov	r1, r3
 801126a:	6878      	ldr	r0, [r7, #4]
 801126c:	f000 f91d 	bl	80114aa <USBD_CtlSendData>
      break;
 8011270:	e004      	b.n	801127c <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8011272:	6839      	ldr	r1, [r7, #0]
 8011274:	6878      	ldr	r0, [r7, #4]
 8011276:	f000 f8a7 	bl	80113c8 <USBD_CtlError>
      break;
 801127a:	bf00      	nop
}
 801127c:	bf00      	nop
 801127e:	3708      	adds	r7, #8
 8011280:	46bd      	mov	sp, r7
 8011282:	bd80      	pop	{r7, pc}

08011284 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011284:	b580      	push	{r7, lr}
 8011286:	b082      	sub	sp, #8
 8011288:	af00      	add	r7, sp, #0
 801128a:	6078      	str	r0, [r7, #4]
 801128c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011294:	3b01      	subs	r3, #1
 8011296:	2b02      	cmp	r3, #2
 8011298:	d81e      	bhi.n	80112d8 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 801129a:	683b      	ldr	r3, [r7, #0]
 801129c:	88db      	ldrh	r3, [r3, #6]
 801129e:	2b02      	cmp	r3, #2
 80112a0:	d004      	beq.n	80112ac <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80112a2:	6839      	ldr	r1, [r7, #0]
 80112a4:	6878      	ldr	r0, [r7, #4]
 80112a6:	f000 f88f 	bl	80113c8 <USBD_CtlError>
      break;
 80112aa:	e01a      	b.n	80112e2 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	2201      	movs	r2, #1
 80112b0:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	d005      	beq.n	80112c8 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	68db      	ldr	r3, [r3, #12]
 80112c0:	f043 0202 	orr.w	r2, r3, #2
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	330c      	adds	r3, #12
 80112cc:	2202      	movs	r2, #2
 80112ce:	4619      	mov	r1, r3
 80112d0:	6878      	ldr	r0, [r7, #4]
 80112d2:	f000 f8ea 	bl	80114aa <USBD_CtlSendData>
    break;
 80112d6:	e004      	b.n	80112e2 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80112d8:	6839      	ldr	r1, [r7, #0]
 80112da:	6878      	ldr	r0, [r7, #4]
 80112dc:	f000 f874 	bl	80113c8 <USBD_CtlError>
    break;
 80112e0:	bf00      	nop
  }
}
 80112e2:	bf00      	nop
 80112e4:	3708      	adds	r7, #8
 80112e6:	46bd      	mov	sp, r7
 80112e8:	bd80      	pop	{r7, pc}

080112ea <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80112ea:	b580      	push	{r7, lr}
 80112ec:	b082      	sub	sp, #8
 80112ee:	af00      	add	r7, sp, #0
 80112f0:	6078      	str	r0, [r7, #4]
 80112f2:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80112f4:	683b      	ldr	r3, [r7, #0]
 80112f6:	885b      	ldrh	r3, [r3, #2]
 80112f8:	2b01      	cmp	r3, #1
 80112fa:	d106      	bne.n	801130a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	2201      	movs	r2, #1
 8011300:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8011304:	6878      	ldr	r0, [r7, #4]
 8011306:	f000 f90d 	bl	8011524 <USBD_CtlSendStatus>
  }
}
 801130a:	bf00      	nop
 801130c:	3708      	adds	r7, #8
 801130e:	46bd      	mov	sp, r7
 8011310:	bd80      	pop	{r7, pc}

08011312 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011312:	b580      	push	{r7, lr}
 8011314:	b082      	sub	sp, #8
 8011316:	af00      	add	r7, sp, #0
 8011318:	6078      	str	r0, [r7, #4]
 801131a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011322:	3b01      	subs	r3, #1
 8011324:	2b02      	cmp	r3, #2
 8011326:	d80b      	bhi.n	8011340 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011328:	683b      	ldr	r3, [r7, #0]
 801132a:	885b      	ldrh	r3, [r3, #2]
 801132c:	2b01      	cmp	r3, #1
 801132e:	d10c      	bne.n	801134a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	2200      	movs	r2, #0
 8011334:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8011338:	6878      	ldr	r0, [r7, #4]
 801133a:	f000 f8f3 	bl	8011524 <USBD_CtlSendStatus>
      }
      break;
 801133e:	e004      	b.n	801134a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8011340:	6839      	ldr	r1, [r7, #0]
 8011342:	6878      	ldr	r0, [r7, #4]
 8011344:	f000 f840 	bl	80113c8 <USBD_CtlError>
      break;
 8011348:	e000      	b.n	801134c <USBD_ClrFeature+0x3a>
      break;
 801134a:	bf00      	nop
  }
}
 801134c:	bf00      	nop
 801134e:	3708      	adds	r7, #8
 8011350:	46bd      	mov	sp, r7
 8011352:	bd80      	pop	{r7, pc}

08011354 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8011354:	b580      	push	{r7, lr}
 8011356:	b084      	sub	sp, #16
 8011358:	af00      	add	r7, sp, #0
 801135a:	6078      	str	r0, [r7, #4]
 801135c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801135e:	683b      	ldr	r3, [r7, #0]
 8011360:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8011362:	68fb      	ldr	r3, [r7, #12]
 8011364:	781a      	ldrb	r2, [r3, #0]
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801136a:	68fb      	ldr	r3, [r7, #12]
 801136c:	3301      	adds	r3, #1
 801136e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8011370:	68fb      	ldr	r3, [r7, #12]
 8011372:	781a      	ldrb	r2, [r3, #0]
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	3301      	adds	r3, #1
 801137c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801137e:	68f8      	ldr	r0, [r7, #12]
 8011380:	f7ff fad4 	bl	801092c <SWAPBYTE>
 8011384:	4603      	mov	r3, r0
 8011386:	461a      	mov	r2, r3
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801138c:	68fb      	ldr	r3, [r7, #12]
 801138e:	3301      	adds	r3, #1
 8011390:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011392:	68fb      	ldr	r3, [r7, #12]
 8011394:	3301      	adds	r3, #1
 8011396:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8011398:	68f8      	ldr	r0, [r7, #12]
 801139a:	f7ff fac7 	bl	801092c <SWAPBYTE>
 801139e:	4603      	mov	r3, r0
 80113a0:	461a      	mov	r2, r3
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	3301      	adds	r3, #1
 80113aa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80113ac:	68fb      	ldr	r3, [r7, #12]
 80113ae:	3301      	adds	r3, #1
 80113b0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80113b2:	68f8      	ldr	r0, [r7, #12]
 80113b4:	f7ff faba 	bl	801092c <SWAPBYTE>
 80113b8:	4603      	mov	r3, r0
 80113ba:	461a      	mov	r2, r3
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	80da      	strh	r2, [r3, #6]
}
 80113c0:	bf00      	nop
 80113c2:	3710      	adds	r7, #16
 80113c4:	46bd      	mov	sp, r7
 80113c6:	bd80      	pop	{r7, pc}

080113c8 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80113c8:	b580      	push	{r7, lr}
 80113ca:	b082      	sub	sp, #8
 80113cc:	af00      	add	r7, sp, #0
 80113ce:	6078      	str	r0, [r7, #4]
 80113d0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80113d2:	2180      	movs	r1, #128	; 0x80
 80113d4:	6878      	ldr	r0, [r7, #4]
 80113d6:	f002 ffb0 	bl	801433a <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80113da:	2100      	movs	r1, #0
 80113dc:	6878      	ldr	r0, [r7, #4]
 80113de:	f002 ffac 	bl	801433a <USBD_LL_StallEP>
}
 80113e2:	bf00      	nop
 80113e4:	3708      	adds	r7, #8
 80113e6:	46bd      	mov	sp, r7
 80113e8:	bd80      	pop	{r7, pc}

080113ea <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80113ea:	b580      	push	{r7, lr}
 80113ec:	b086      	sub	sp, #24
 80113ee:	af00      	add	r7, sp, #0
 80113f0:	60f8      	str	r0, [r7, #12]
 80113f2:	60b9      	str	r1, [r7, #8]
 80113f4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80113f6:	2300      	movs	r3, #0
 80113f8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80113fa:	68fb      	ldr	r3, [r7, #12]
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d036      	beq.n	801146e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8011400:	68fb      	ldr	r3, [r7, #12]
 8011402:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8011404:	6938      	ldr	r0, [r7, #16]
 8011406:	f000 f836 	bl	8011476 <USBD_GetLen>
 801140a:	4603      	mov	r3, r0
 801140c:	3301      	adds	r3, #1
 801140e:	b29b      	uxth	r3, r3
 8011410:	005b      	lsls	r3, r3, #1
 8011412:	b29a      	uxth	r2, r3
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8011418:	7dfb      	ldrb	r3, [r7, #23]
 801141a:	68ba      	ldr	r2, [r7, #8]
 801141c:	4413      	add	r3, r2
 801141e:	687a      	ldr	r2, [r7, #4]
 8011420:	7812      	ldrb	r2, [r2, #0]
 8011422:	701a      	strb	r2, [r3, #0]
  idx++;
 8011424:	7dfb      	ldrb	r3, [r7, #23]
 8011426:	3301      	adds	r3, #1
 8011428:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801142a:	7dfb      	ldrb	r3, [r7, #23]
 801142c:	68ba      	ldr	r2, [r7, #8]
 801142e:	4413      	add	r3, r2
 8011430:	2203      	movs	r2, #3
 8011432:	701a      	strb	r2, [r3, #0]
  idx++;
 8011434:	7dfb      	ldrb	r3, [r7, #23]
 8011436:	3301      	adds	r3, #1
 8011438:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801143a:	e013      	b.n	8011464 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801143c:	7dfb      	ldrb	r3, [r7, #23]
 801143e:	68ba      	ldr	r2, [r7, #8]
 8011440:	4413      	add	r3, r2
 8011442:	693a      	ldr	r2, [r7, #16]
 8011444:	7812      	ldrb	r2, [r2, #0]
 8011446:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8011448:	693b      	ldr	r3, [r7, #16]
 801144a:	3301      	adds	r3, #1
 801144c:	613b      	str	r3, [r7, #16]
    idx++;
 801144e:	7dfb      	ldrb	r3, [r7, #23]
 8011450:	3301      	adds	r3, #1
 8011452:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8011454:	7dfb      	ldrb	r3, [r7, #23]
 8011456:	68ba      	ldr	r2, [r7, #8]
 8011458:	4413      	add	r3, r2
 801145a:	2200      	movs	r2, #0
 801145c:	701a      	strb	r2, [r3, #0]
    idx++;
 801145e:	7dfb      	ldrb	r3, [r7, #23]
 8011460:	3301      	adds	r3, #1
 8011462:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8011464:	693b      	ldr	r3, [r7, #16]
 8011466:	781b      	ldrb	r3, [r3, #0]
 8011468:	2b00      	cmp	r3, #0
 801146a:	d1e7      	bne.n	801143c <USBD_GetString+0x52>
 801146c:	e000      	b.n	8011470 <USBD_GetString+0x86>
    return;
 801146e:	bf00      	nop
  }
}
 8011470:	3718      	adds	r7, #24
 8011472:	46bd      	mov	sp, r7
 8011474:	bd80      	pop	{r7, pc}

08011476 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8011476:	b480      	push	{r7}
 8011478:	b085      	sub	sp, #20
 801147a:	af00      	add	r7, sp, #0
 801147c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801147e:	2300      	movs	r3, #0
 8011480:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8011486:	e005      	b.n	8011494 <USBD_GetLen+0x1e>
  {
    len++;
 8011488:	7bfb      	ldrb	r3, [r7, #15]
 801148a:	3301      	adds	r3, #1
 801148c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801148e:	68bb      	ldr	r3, [r7, #8]
 8011490:	3301      	adds	r3, #1
 8011492:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8011494:	68bb      	ldr	r3, [r7, #8]
 8011496:	781b      	ldrb	r3, [r3, #0]
 8011498:	2b00      	cmp	r3, #0
 801149a:	d1f5      	bne.n	8011488 <USBD_GetLen+0x12>
  }

  return len;
 801149c:	7bfb      	ldrb	r3, [r7, #15]
}
 801149e:	4618      	mov	r0, r3
 80114a0:	3714      	adds	r7, #20
 80114a2:	46bd      	mov	sp, r7
 80114a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114a8:	4770      	bx	lr

080114aa <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80114aa:	b580      	push	{r7, lr}
 80114ac:	b084      	sub	sp, #16
 80114ae:	af00      	add	r7, sp, #0
 80114b0:	60f8      	str	r0, [r7, #12]
 80114b2:	60b9      	str	r1, [r7, #8]
 80114b4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80114b6:	68fb      	ldr	r3, [r7, #12]
 80114b8:	2202      	movs	r2, #2
 80114ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80114be:	68fb      	ldr	r3, [r7, #12]
 80114c0:	687a      	ldr	r2, [r7, #4]
 80114c2:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	687a      	ldr	r2, [r7, #4]
 80114c8:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	68ba      	ldr	r2, [r7, #8]
 80114ce:	2100      	movs	r1, #0
 80114d0:	68f8      	ldr	r0, [r7, #12]
 80114d2:	f002 ffbb 	bl	801444c <USBD_LL_Transmit>

  return USBD_OK;
 80114d6:	2300      	movs	r3, #0
}
 80114d8:	4618      	mov	r0, r3
 80114da:	3710      	adds	r7, #16
 80114dc:	46bd      	mov	sp, r7
 80114de:	bd80      	pop	{r7, pc}

080114e0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80114e0:	b580      	push	{r7, lr}
 80114e2:	b084      	sub	sp, #16
 80114e4:	af00      	add	r7, sp, #0
 80114e6:	60f8      	str	r0, [r7, #12]
 80114e8:	60b9      	str	r1, [r7, #8]
 80114ea:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	68ba      	ldr	r2, [r7, #8]
 80114f0:	2100      	movs	r1, #0
 80114f2:	68f8      	ldr	r0, [r7, #12]
 80114f4:	f002 ffaa 	bl	801444c <USBD_LL_Transmit>

  return USBD_OK;
 80114f8:	2300      	movs	r3, #0
}
 80114fa:	4618      	mov	r0, r3
 80114fc:	3710      	adds	r7, #16
 80114fe:	46bd      	mov	sp, r7
 8011500:	bd80      	pop	{r7, pc}

08011502 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8011502:	b580      	push	{r7, lr}
 8011504:	b084      	sub	sp, #16
 8011506:	af00      	add	r7, sp, #0
 8011508:	60f8      	str	r0, [r7, #12]
 801150a:	60b9      	str	r1, [r7, #8]
 801150c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	68ba      	ldr	r2, [r7, #8]
 8011512:	2100      	movs	r1, #0
 8011514:	68f8      	ldr	r0, [r7, #12]
 8011516:	f002 ffba 	bl	801448e <USBD_LL_PrepareReceive>

  return USBD_OK;
 801151a:	2300      	movs	r3, #0
}
 801151c:	4618      	mov	r0, r3
 801151e:	3710      	adds	r7, #16
 8011520:	46bd      	mov	sp, r7
 8011522:	bd80      	pop	{r7, pc}

08011524 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8011524:	b580      	push	{r7, lr}
 8011526:	b082      	sub	sp, #8
 8011528:	af00      	add	r7, sp, #0
 801152a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	2204      	movs	r2, #4
 8011530:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8011534:	2300      	movs	r3, #0
 8011536:	2200      	movs	r2, #0
 8011538:	2100      	movs	r1, #0
 801153a:	6878      	ldr	r0, [r7, #4]
 801153c:	f002 ff86 	bl	801444c <USBD_LL_Transmit>

  return USBD_OK;
 8011540:	2300      	movs	r3, #0
}
 8011542:	4618      	mov	r0, r3
 8011544:	3708      	adds	r7, #8
 8011546:	46bd      	mov	sp, r7
 8011548:	bd80      	pop	{r7, pc}

0801154a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801154a:	b580      	push	{r7, lr}
 801154c:	b082      	sub	sp, #8
 801154e:	af00      	add	r7, sp, #0
 8011550:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	2205      	movs	r2, #5
 8011556:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801155a:	2300      	movs	r3, #0
 801155c:	2200      	movs	r2, #0
 801155e:	2100      	movs	r1, #0
 8011560:	6878      	ldr	r0, [r7, #4]
 8011562:	f002 ff94 	bl	801448e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011566:	2300      	movs	r3, #0
}
 8011568:	4618      	mov	r0, r3
 801156a:	3708      	adds	r7, #8
 801156c:	46bd      	mov	sp, r7
 801156e:	bd80      	pop	{r7, pc}

08011570 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8011570:	b580      	push	{r7, lr}
 8011572:	b084      	sub	sp, #16
 8011574:	af00      	add	r7, sp, #0
 8011576:	4603      	mov	r3, r0
 8011578:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801157a:	79fb      	ldrb	r3, [r7, #7]
 801157c:	4a08      	ldr	r2, [pc, #32]	; (80115a0 <disk_status+0x30>)
 801157e:	009b      	lsls	r3, r3, #2
 8011580:	4413      	add	r3, r2
 8011582:	685b      	ldr	r3, [r3, #4]
 8011584:	685b      	ldr	r3, [r3, #4]
 8011586:	79fa      	ldrb	r2, [r7, #7]
 8011588:	4905      	ldr	r1, [pc, #20]	; (80115a0 <disk_status+0x30>)
 801158a:	440a      	add	r2, r1
 801158c:	7a12      	ldrb	r2, [r2, #8]
 801158e:	4610      	mov	r0, r2
 8011590:	4798      	blx	r3
 8011592:	4603      	mov	r3, r0
 8011594:	73fb      	strb	r3, [r7, #15]
  return stat;
 8011596:	7bfb      	ldrb	r3, [r7, #15]
}
 8011598:	4618      	mov	r0, r3
 801159a:	3710      	adds	r7, #16
 801159c:	46bd      	mov	sp, r7
 801159e:	bd80      	pop	{r7, pc}
 80115a0:	2404022c 	.word	0x2404022c

080115a4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80115a4:	b580      	push	{r7, lr}
 80115a6:	b084      	sub	sp, #16
 80115a8:	af00      	add	r7, sp, #0
 80115aa:	4603      	mov	r3, r0
 80115ac:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80115ae:	2300      	movs	r3, #0
 80115b0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80115b2:	79fb      	ldrb	r3, [r7, #7]
 80115b4:	4a0d      	ldr	r2, [pc, #52]	; (80115ec <disk_initialize+0x48>)
 80115b6:	5cd3      	ldrb	r3, [r2, r3]
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d111      	bne.n	80115e0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80115bc:	79fb      	ldrb	r3, [r7, #7]
 80115be:	4a0b      	ldr	r2, [pc, #44]	; (80115ec <disk_initialize+0x48>)
 80115c0:	2101      	movs	r1, #1
 80115c2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80115c4:	79fb      	ldrb	r3, [r7, #7]
 80115c6:	4a09      	ldr	r2, [pc, #36]	; (80115ec <disk_initialize+0x48>)
 80115c8:	009b      	lsls	r3, r3, #2
 80115ca:	4413      	add	r3, r2
 80115cc:	685b      	ldr	r3, [r3, #4]
 80115ce:	681b      	ldr	r3, [r3, #0]
 80115d0:	79fa      	ldrb	r2, [r7, #7]
 80115d2:	4906      	ldr	r1, [pc, #24]	; (80115ec <disk_initialize+0x48>)
 80115d4:	440a      	add	r2, r1
 80115d6:	7a12      	ldrb	r2, [r2, #8]
 80115d8:	4610      	mov	r0, r2
 80115da:	4798      	blx	r3
 80115dc:	4603      	mov	r3, r0
 80115de:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80115e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80115e2:	4618      	mov	r0, r3
 80115e4:	3710      	adds	r7, #16
 80115e6:	46bd      	mov	sp, r7
 80115e8:	bd80      	pop	{r7, pc}
 80115ea:	bf00      	nop
 80115ec:	2404022c 	.word	0x2404022c

080115f0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80115f0:	b590      	push	{r4, r7, lr}
 80115f2:	b087      	sub	sp, #28
 80115f4:	af00      	add	r7, sp, #0
 80115f6:	60b9      	str	r1, [r7, #8]
 80115f8:	607a      	str	r2, [r7, #4]
 80115fa:	603b      	str	r3, [r7, #0]
 80115fc:	4603      	mov	r3, r0
 80115fe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8011600:	7bfb      	ldrb	r3, [r7, #15]
 8011602:	4a0a      	ldr	r2, [pc, #40]	; (801162c <disk_read+0x3c>)
 8011604:	009b      	lsls	r3, r3, #2
 8011606:	4413      	add	r3, r2
 8011608:	685b      	ldr	r3, [r3, #4]
 801160a:	689c      	ldr	r4, [r3, #8]
 801160c:	7bfb      	ldrb	r3, [r7, #15]
 801160e:	4a07      	ldr	r2, [pc, #28]	; (801162c <disk_read+0x3c>)
 8011610:	4413      	add	r3, r2
 8011612:	7a18      	ldrb	r0, [r3, #8]
 8011614:	683b      	ldr	r3, [r7, #0]
 8011616:	687a      	ldr	r2, [r7, #4]
 8011618:	68b9      	ldr	r1, [r7, #8]
 801161a:	47a0      	blx	r4
 801161c:	4603      	mov	r3, r0
 801161e:	75fb      	strb	r3, [r7, #23]
  return res;
 8011620:	7dfb      	ldrb	r3, [r7, #23]
}
 8011622:	4618      	mov	r0, r3
 8011624:	371c      	adds	r7, #28
 8011626:	46bd      	mov	sp, r7
 8011628:	bd90      	pop	{r4, r7, pc}
 801162a:	bf00      	nop
 801162c:	2404022c 	.word	0x2404022c

08011630 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8011630:	b590      	push	{r4, r7, lr}
 8011632:	b087      	sub	sp, #28
 8011634:	af00      	add	r7, sp, #0
 8011636:	60b9      	str	r1, [r7, #8]
 8011638:	607a      	str	r2, [r7, #4]
 801163a:	603b      	str	r3, [r7, #0]
 801163c:	4603      	mov	r3, r0
 801163e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8011640:	7bfb      	ldrb	r3, [r7, #15]
 8011642:	4a0a      	ldr	r2, [pc, #40]	; (801166c <disk_write+0x3c>)
 8011644:	009b      	lsls	r3, r3, #2
 8011646:	4413      	add	r3, r2
 8011648:	685b      	ldr	r3, [r3, #4]
 801164a:	68dc      	ldr	r4, [r3, #12]
 801164c:	7bfb      	ldrb	r3, [r7, #15]
 801164e:	4a07      	ldr	r2, [pc, #28]	; (801166c <disk_write+0x3c>)
 8011650:	4413      	add	r3, r2
 8011652:	7a18      	ldrb	r0, [r3, #8]
 8011654:	683b      	ldr	r3, [r7, #0]
 8011656:	687a      	ldr	r2, [r7, #4]
 8011658:	68b9      	ldr	r1, [r7, #8]
 801165a:	47a0      	blx	r4
 801165c:	4603      	mov	r3, r0
 801165e:	75fb      	strb	r3, [r7, #23]
  return res;
 8011660:	7dfb      	ldrb	r3, [r7, #23]
}
 8011662:	4618      	mov	r0, r3
 8011664:	371c      	adds	r7, #28
 8011666:	46bd      	mov	sp, r7
 8011668:	bd90      	pop	{r4, r7, pc}
 801166a:	bf00      	nop
 801166c:	2404022c 	.word	0x2404022c

08011670 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8011670:	b580      	push	{r7, lr}
 8011672:	b084      	sub	sp, #16
 8011674:	af00      	add	r7, sp, #0
 8011676:	4603      	mov	r3, r0
 8011678:	603a      	str	r2, [r7, #0]
 801167a:	71fb      	strb	r3, [r7, #7]
 801167c:	460b      	mov	r3, r1
 801167e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8011680:	79fb      	ldrb	r3, [r7, #7]
 8011682:	4a09      	ldr	r2, [pc, #36]	; (80116a8 <disk_ioctl+0x38>)
 8011684:	009b      	lsls	r3, r3, #2
 8011686:	4413      	add	r3, r2
 8011688:	685b      	ldr	r3, [r3, #4]
 801168a:	691b      	ldr	r3, [r3, #16]
 801168c:	79fa      	ldrb	r2, [r7, #7]
 801168e:	4906      	ldr	r1, [pc, #24]	; (80116a8 <disk_ioctl+0x38>)
 8011690:	440a      	add	r2, r1
 8011692:	7a10      	ldrb	r0, [r2, #8]
 8011694:	79b9      	ldrb	r1, [r7, #6]
 8011696:	683a      	ldr	r2, [r7, #0]
 8011698:	4798      	blx	r3
 801169a:	4603      	mov	r3, r0
 801169c:	73fb      	strb	r3, [r7, #15]
  return res;
 801169e:	7bfb      	ldrb	r3, [r7, #15]
}
 80116a0:	4618      	mov	r0, r3
 80116a2:	3710      	adds	r7, #16
 80116a4:	46bd      	mov	sp, r7
 80116a6:	bd80      	pop	{r7, pc}
 80116a8:	2404022c 	.word	0x2404022c

080116ac <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80116ac:	b480      	push	{r7}
 80116ae:	b085      	sub	sp, #20
 80116b0:	af00      	add	r7, sp, #0
 80116b2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	3301      	adds	r3, #1
 80116b8:	781b      	ldrb	r3, [r3, #0]
 80116ba:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80116bc:	89fb      	ldrh	r3, [r7, #14]
 80116be:	021b      	lsls	r3, r3, #8
 80116c0:	b21a      	sxth	r2, r3
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	781b      	ldrb	r3, [r3, #0]
 80116c6:	b21b      	sxth	r3, r3
 80116c8:	4313      	orrs	r3, r2
 80116ca:	b21b      	sxth	r3, r3
 80116cc:	81fb      	strh	r3, [r7, #14]
	return rv;
 80116ce:	89fb      	ldrh	r3, [r7, #14]
}
 80116d0:	4618      	mov	r0, r3
 80116d2:	3714      	adds	r7, #20
 80116d4:	46bd      	mov	sp, r7
 80116d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116da:	4770      	bx	lr

080116dc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80116dc:	b480      	push	{r7}
 80116de:	b085      	sub	sp, #20
 80116e0:	af00      	add	r7, sp, #0
 80116e2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	3303      	adds	r3, #3
 80116e8:	781b      	ldrb	r3, [r3, #0]
 80116ea:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	021b      	lsls	r3, r3, #8
 80116f0:	687a      	ldr	r2, [r7, #4]
 80116f2:	3202      	adds	r2, #2
 80116f4:	7812      	ldrb	r2, [r2, #0]
 80116f6:	4313      	orrs	r3, r2
 80116f8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80116fa:	68fb      	ldr	r3, [r7, #12]
 80116fc:	021b      	lsls	r3, r3, #8
 80116fe:	687a      	ldr	r2, [r7, #4]
 8011700:	3201      	adds	r2, #1
 8011702:	7812      	ldrb	r2, [r2, #0]
 8011704:	4313      	orrs	r3, r2
 8011706:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8011708:	68fb      	ldr	r3, [r7, #12]
 801170a:	021b      	lsls	r3, r3, #8
 801170c:	687a      	ldr	r2, [r7, #4]
 801170e:	7812      	ldrb	r2, [r2, #0]
 8011710:	4313      	orrs	r3, r2
 8011712:	60fb      	str	r3, [r7, #12]
	return rv;
 8011714:	68fb      	ldr	r3, [r7, #12]
}
 8011716:	4618      	mov	r0, r3
 8011718:	3714      	adds	r7, #20
 801171a:	46bd      	mov	sp, r7
 801171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011720:	4770      	bx	lr

08011722 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8011722:	b480      	push	{r7}
 8011724:	b083      	sub	sp, #12
 8011726:	af00      	add	r7, sp, #0
 8011728:	6078      	str	r0, [r7, #4]
 801172a:	460b      	mov	r3, r1
 801172c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	1c5a      	adds	r2, r3, #1
 8011732:	607a      	str	r2, [r7, #4]
 8011734:	887a      	ldrh	r2, [r7, #2]
 8011736:	b2d2      	uxtb	r2, r2
 8011738:	701a      	strb	r2, [r3, #0]
 801173a:	887b      	ldrh	r3, [r7, #2]
 801173c:	0a1b      	lsrs	r3, r3, #8
 801173e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	1c5a      	adds	r2, r3, #1
 8011744:	607a      	str	r2, [r7, #4]
 8011746:	887a      	ldrh	r2, [r7, #2]
 8011748:	b2d2      	uxtb	r2, r2
 801174a:	701a      	strb	r2, [r3, #0]
}
 801174c:	bf00      	nop
 801174e:	370c      	adds	r7, #12
 8011750:	46bd      	mov	sp, r7
 8011752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011756:	4770      	bx	lr

08011758 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8011758:	b480      	push	{r7}
 801175a:	b083      	sub	sp, #12
 801175c:	af00      	add	r7, sp, #0
 801175e:	6078      	str	r0, [r7, #4]
 8011760:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	1c5a      	adds	r2, r3, #1
 8011766:	607a      	str	r2, [r7, #4]
 8011768:	683a      	ldr	r2, [r7, #0]
 801176a:	b2d2      	uxtb	r2, r2
 801176c:	701a      	strb	r2, [r3, #0]
 801176e:	683b      	ldr	r3, [r7, #0]
 8011770:	0a1b      	lsrs	r3, r3, #8
 8011772:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	1c5a      	adds	r2, r3, #1
 8011778:	607a      	str	r2, [r7, #4]
 801177a:	683a      	ldr	r2, [r7, #0]
 801177c:	b2d2      	uxtb	r2, r2
 801177e:	701a      	strb	r2, [r3, #0]
 8011780:	683b      	ldr	r3, [r7, #0]
 8011782:	0a1b      	lsrs	r3, r3, #8
 8011784:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	1c5a      	adds	r2, r3, #1
 801178a:	607a      	str	r2, [r7, #4]
 801178c:	683a      	ldr	r2, [r7, #0]
 801178e:	b2d2      	uxtb	r2, r2
 8011790:	701a      	strb	r2, [r3, #0]
 8011792:	683b      	ldr	r3, [r7, #0]
 8011794:	0a1b      	lsrs	r3, r3, #8
 8011796:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	1c5a      	adds	r2, r3, #1
 801179c:	607a      	str	r2, [r7, #4]
 801179e:	683a      	ldr	r2, [r7, #0]
 80117a0:	b2d2      	uxtb	r2, r2
 80117a2:	701a      	strb	r2, [r3, #0]
}
 80117a4:	bf00      	nop
 80117a6:	370c      	adds	r7, #12
 80117a8:	46bd      	mov	sp, r7
 80117aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ae:	4770      	bx	lr

080117b0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80117b0:	b480      	push	{r7}
 80117b2:	b087      	sub	sp, #28
 80117b4:	af00      	add	r7, sp, #0
 80117b6:	60f8      	str	r0, [r7, #12]
 80117b8:	60b9      	str	r1, [r7, #8]
 80117ba:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80117bc:	68fb      	ldr	r3, [r7, #12]
 80117be:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80117c0:	68bb      	ldr	r3, [r7, #8]
 80117c2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d00d      	beq.n	80117e6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80117ca:	693a      	ldr	r2, [r7, #16]
 80117cc:	1c53      	adds	r3, r2, #1
 80117ce:	613b      	str	r3, [r7, #16]
 80117d0:	697b      	ldr	r3, [r7, #20]
 80117d2:	1c59      	adds	r1, r3, #1
 80117d4:	6179      	str	r1, [r7, #20]
 80117d6:	7812      	ldrb	r2, [r2, #0]
 80117d8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	3b01      	subs	r3, #1
 80117de:	607b      	str	r3, [r7, #4]
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	d1f1      	bne.n	80117ca <mem_cpy+0x1a>
	}
}
 80117e6:	bf00      	nop
 80117e8:	371c      	adds	r7, #28
 80117ea:	46bd      	mov	sp, r7
 80117ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117f0:	4770      	bx	lr

080117f2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80117f2:	b480      	push	{r7}
 80117f4:	b087      	sub	sp, #28
 80117f6:	af00      	add	r7, sp, #0
 80117f8:	60f8      	str	r0, [r7, #12]
 80117fa:	60b9      	str	r1, [r7, #8]
 80117fc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80117fe:	68fb      	ldr	r3, [r7, #12]
 8011800:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8011802:	697b      	ldr	r3, [r7, #20]
 8011804:	1c5a      	adds	r2, r3, #1
 8011806:	617a      	str	r2, [r7, #20]
 8011808:	68ba      	ldr	r2, [r7, #8]
 801180a:	b2d2      	uxtb	r2, r2
 801180c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	3b01      	subs	r3, #1
 8011812:	607b      	str	r3, [r7, #4]
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	2b00      	cmp	r3, #0
 8011818:	d1f3      	bne.n	8011802 <mem_set+0x10>
}
 801181a:	bf00      	nop
 801181c:	371c      	adds	r7, #28
 801181e:	46bd      	mov	sp, r7
 8011820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011824:	4770      	bx	lr

08011826 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8011826:	b480      	push	{r7}
 8011828:	b089      	sub	sp, #36	; 0x24
 801182a:	af00      	add	r7, sp, #0
 801182c:	60f8      	str	r0, [r7, #12]
 801182e:	60b9      	str	r1, [r7, #8]
 8011830:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8011832:	68fb      	ldr	r3, [r7, #12]
 8011834:	61fb      	str	r3, [r7, #28]
 8011836:	68bb      	ldr	r3, [r7, #8]
 8011838:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801183a:	2300      	movs	r3, #0
 801183c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801183e:	69fb      	ldr	r3, [r7, #28]
 8011840:	1c5a      	adds	r2, r3, #1
 8011842:	61fa      	str	r2, [r7, #28]
 8011844:	781b      	ldrb	r3, [r3, #0]
 8011846:	4619      	mov	r1, r3
 8011848:	69bb      	ldr	r3, [r7, #24]
 801184a:	1c5a      	adds	r2, r3, #1
 801184c:	61ba      	str	r2, [r7, #24]
 801184e:	781b      	ldrb	r3, [r3, #0]
 8011850:	1acb      	subs	r3, r1, r3
 8011852:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	3b01      	subs	r3, #1
 8011858:	607b      	str	r3, [r7, #4]
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	2b00      	cmp	r3, #0
 801185e:	d002      	beq.n	8011866 <mem_cmp+0x40>
 8011860:	697b      	ldr	r3, [r7, #20]
 8011862:	2b00      	cmp	r3, #0
 8011864:	d0eb      	beq.n	801183e <mem_cmp+0x18>

	return r;
 8011866:	697b      	ldr	r3, [r7, #20]
}
 8011868:	4618      	mov	r0, r3
 801186a:	3724      	adds	r7, #36	; 0x24
 801186c:	46bd      	mov	sp, r7
 801186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011872:	4770      	bx	lr

08011874 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8011874:	b480      	push	{r7}
 8011876:	b083      	sub	sp, #12
 8011878:	af00      	add	r7, sp, #0
 801187a:	6078      	str	r0, [r7, #4]
 801187c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801187e:	e002      	b.n	8011886 <chk_chr+0x12>
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	3301      	adds	r3, #1
 8011884:	607b      	str	r3, [r7, #4]
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	781b      	ldrb	r3, [r3, #0]
 801188a:	2b00      	cmp	r3, #0
 801188c:	d005      	beq.n	801189a <chk_chr+0x26>
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	781b      	ldrb	r3, [r3, #0]
 8011892:	461a      	mov	r2, r3
 8011894:	683b      	ldr	r3, [r7, #0]
 8011896:	4293      	cmp	r3, r2
 8011898:	d1f2      	bne.n	8011880 <chk_chr+0xc>
	return *str;
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	781b      	ldrb	r3, [r3, #0]
}
 801189e:	4618      	mov	r0, r3
 80118a0:	370c      	adds	r7, #12
 80118a2:	46bd      	mov	sp, r7
 80118a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118a8:	4770      	bx	lr
	...

080118ac <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80118ac:	b480      	push	{r7}
 80118ae:	b085      	sub	sp, #20
 80118b0:	af00      	add	r7, sp, #0
 80118b2:	6078      	str	r0, [r7, #4]
 80118b4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80118b6:	2300      	movs	r3, #0
 80118b8:	60bb      	str	r3, [r7, #8]
 80118ba:	68bb      	ldr	r3, [r7, #8]
 80118bc:	60fb      	str	r3, [r7, #12]
 80118be:	e029      	b.n	8011914 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80118c0:	4a27      	ldr	r2, [pc, #156]	; (8011960 <chk_lock+0xb4>)
 80118c2:	68fb      	ldr	r3, [r7, #12]
 80118c4:	011b      	lsls	r3, r3, #4
 80118c6:	4413      	add	r3, r2
 80118c8:	681b      	ldr	r3, [r3, #0]
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d01d      	beq.n	801190a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80118ce:	4a24      	ldr	r2, [pc, #144]	; (8011960 <chk_lock+0xb4>)
 80118d0:	68fb      	ldr	r3, [r7, #12]
 80118d2:	011b      	lsls	r3, r3, #4
 80118d4:	4413      	add	r3, r2
 80118d6:	681a      	ldr	r2, [r3, #0]
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	681b      	ldr	r3, [r3, #0]
 80118dc:	429a      	cmp	r2, r3
 80118de:	d116      	bne.n	801190e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80118e0:	4a1f      	ldr	r2, [pc, #124]	; (8011960 <chk_lock+0xb4>)
 80118e2:	68fb      	ldr	r3, [r7, #12]
 80118e4:	011b      	lsls	r3, r3, #4
 80118e6:	4413      	add	r3, r2
 80118e8:	3304      	adds	r3, #4
 80118ea:	681a      	ldr	r2, [r3, #0]
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80118f0:	429a      	cmp	r2, r3
 80118f2:	d10c      	bne.n	801190e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80118f4:	4a1a      	ldr	r2, [pc, #104]	; (8011960 <chk_lock+0xb4>)
 80118f6:	68fb      	ldr	r3, [r7, #12]
 80118f8:	011b      	lsls	r3, r3, #4
 80118fa:	4413      	add	r3, r2
 80118fc:	3308      	adds	r3, #8
 80118fe:	681a      	ldr	r2, [r3, #0]
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8011904:	429a      	cmp	r2, r3
 8011906:	d102      	bne.n	801190e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011908:	e007      	b.n	801191a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801190a:	2301      	movs	r3, #1
 801190c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801190e:	68fb      	ldr	r3, [r7, #12]
 8011910:	3301      	adds	r3, #1
 8011912:	60fb      	str	r3, [r7, #12]
 8011914:	68fb      	ldr	r3, [r7, #12]
 8011916:	2b01      	cmp	r3, #1
 8011918:	d9d2      	bls.n	80118c0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801191a:	68fb      	ldr	r3, [r7, #12]
 801191c:	2b02      	cmp	r3, #2
 801191e:	d109      	bne.n	8011934 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8011920:	68bb      	ldr	r3, [r7, #8]
 8011922:	2b00      	cmp	r3, #0
 8011924:	d102      	bne.n	801192c <chk_lock+0x80>
 8011926:	683b      	ldr	r3, [r7, #0]
 8011928:	2b02      	cmp	r3, #2
 801192a:	d101      	bne.n	8011930 <chk_lock+0x84>
 801192c:	2300      	movs	r3, #0
 801192e:	e010      	b.n	8011952 <chk_lock+0xa6>
 8011930:	2312      	movs	r3, #18
 8011932:	e00e      	b.n	8011952 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8011934:	683b      	ldr	r3, [r7, #0]
 8011936:	2b00      	cmp	r3, #0
 8011938:	d108      	bne.n	801194c <chk_lock+0xa0>
 801193a:	4a09      	ldr	r2, [pc, #36]	; (8011960 <chk_lock+0xb4>)
 801193c:	68fb      	ldr	r3, [r7, #12]
 801193e:	011b      	lsls	r3, r3, #4
 8011940:	4413      	add	r3, r2
 8011942:	330c      	adds	r3, #12
 8011944:	881b      	ldrh	r3, [r3, #0]
 8011946:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801194a:	d101      	bne.n	8011950 <chk_lock+0xa4>
 801194c:	2310      	movs	r3, #16
 801194e:	e000      	b.n	8011952 <chk_lock+0xa6>
 8011950:	2300      	movs	r3, #0
}
 8011952:	4618      	mov	r0, r3
 8011954:	3714      	adds	r7, #20
 8011956:	46bd      	mov	sp, r7
 8011958:	f85d 7b04 	ldr.w	r7, [sp], #4
 801195c:	4770      	bx	lr
 801195e:	bf00      	nop
 8011960:	2404020c 	.word	0x2404020c

08011964 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8011964:	b480      	push	{r7}
 8011966:	b083      	sub	sp, #12
 8011968:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801196a:	2300      	movs	r3, #0
 801196c:	607b      	str	r3, [r7, #4]
 801196e:	e002      	b.n	8011976 <enq_lock+0x12>
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	3301      	adds	r3, #1
 8011974:	607b      	str	r3, [r7, #4]
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	2b01      	cmp	r3, #1
 801197a:	d806      	bhi.n	801198a <enq_lock+0x26>
 801197c:	4a09      	ldr	r2, [pc, #36]	; (80119a4 <enq_lock+0x40>)
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	011b      	lsls	r3, r3, #4
 8011982:	4413      	add	r3, r2
 8011984:	681b      	ldr	r3, [r3, #0]
 8011986:	2b00      	cmp	r3, #0
 8011988:	d1f2      	bne.n	8011970 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	2b02      	cmp	r3, #2
 801198e:	bf14      	ite	ne
 8011990:	2301      	movne	r3, #1
 8011992:	2300      	moveq	r3, #0
 8011994:	b2db      	uxtb	r3, r3
}
 8011996:	4618      	mov	r0, r3
 8011998:	370c      	adds	r7, #12
 801199a:	46bd      	mov	sp, r7
 801199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119a0:	4770      	bx	lr
 80119a2:	bf00      	nop
 80119a4:	2404020c 	.word	0x2404020c

080119a8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80119a8:	b480      	push	{r7}
 80119aa:	b085      	sub	sp, #20
 80119ac:	af00      	add	r7, sp, #0
 80119ae:	6078      	str	r0, [r7, #4]
 80119b0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80119b2:	2300      	movs	r3, #0
 80119b4:	60fb      	str	r3, [r7, #12]
 80119b6:	e01f      	b.n	80119f8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80119b8:	4a41      	ldr	r2, [pc, #260]	; (8011ac0 <inc_lock+0x118>)
 80119ba:	68fb      	ldr	r3, [r7, #12]
 80119bc:	011b      	lsls	r3, r3, #4
 80119be:	4413      	add	r3, r2
 80119c0:	681a      	ldr	r2, [r3, #0]
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	681b      	ldr	r3, [r3, #0]
 80119c6:	429a      	cmp	r2, r3
 80119c8:	d113      	bne.n	80119f2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80119ca:	4a3d      	ldr	r2, [pc, #244]	; (8011ac0 <inc_lock+0x118>)
 80119cc:	68fb      	ldr	r3, [r7, #12]
 80119ce:	011b      	lsls	r3, r3, #4
 80119d0:	4413      	add	r3, r2
 80119d2:	3304      	adds	r3, #4
 80119d4:	681a      	ldr	r2, [r3, #0]
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80119da:	429a      	cmp	r2, r3
 80119dc:	d109      	bne.n	80119f2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80119de:	4a38      	ldr	r2, [pc, #224]	; (8011ac0 <inc_lock+0x118>)
 80119e0:	68fb      	ldr	r3, [r7, #12]
 80119e2:	011b      	lsls	r3, r3, #4
 80119e4:	4413      	add	r3, r2
 80119e6:	3308      	adds	r3, #8
 80119e8:	681a      	ldr	r2, [r3, #0]
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80119ee:	429a      	cmp	r2, r3
 80119f0:	d006      	beq.n	8011a00 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80119f2:	68fb      	ldr	r3, [r7, #12]
 80119f4:	3301      	adds	r3, #1
 80119f6:	60fb      	str	r3, [r7, #12]
 80119f8:	68fb      	ldr	r3, [r7, #12]
 80119fa:	2b01      	cmp	r3, #1
 80119fc:	d9dc      	bls.n	80119b8 <inc_lock+0x10>
 80119fe:	e000      	b.n	8011a02 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8011a00:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8011a02:	68fb      	ldr	r3, [r7, #12]
 8011a04:	2b02      	cmp	r3, #2
 8011a06:	d132      	bne.n	8011a6e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011a08:	2300      	movs	r3, #0
 8011a0a:	60fb      	str	r3, [r7, #12]
 8011a0c:	e002      	b.n	8011a14 <inc_lock+0x6c>
 8011a0e:	68fb      	ldr	r3, [r7, #12]
 8011a10:	3301      	adds	r3, #1
 8011a12:	60fb      	str	r3, [r7, #12]
 8011a14:	68fb      	ldr	r3, [r7, #12]
 8011a16:	2b01      	cmp	r3, #1
 8011a18:	d806      	bhi.n	8011a28 <inc_lock+0x80>
 8011a1a:	4a29      	ldr	r2, [pc, #164]	; (8011ac0 <inc_lock+0x118>)
 8011a1c:	68fb      	ldr	r3, [r7, #12]
 8011a1e:	011b      	lsls	r3, r3, #4
 8011a20:	4413      	add	r3, r2
 8011a22:	681b      	ldr	r3, [r3, #0]
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d1f2      	bne.n	8011a0e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8011a28:	68fb      	ldr	r3, [r7, #12]
 8011a2a:	2b02      	cmp	r3, #2
 8011a2c:	d101      	bne.n	8011a32 <inc_lock+0x8a>
 8011a2e:	2300      	movs	r3, #0
 8011a30:	e040      	b.n	8011ab4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	681a      	ldr	r2, [r3, #0]
 8011a36:	4922      	ldr	r1, [pc, #136]	; (8011ac0 <inc_lock+0x118>)
 8011a38:	68fb      	ldr	r3, [r7, #12]
 8011a3a:	011b      	lsls	r3, r3, #4
 8011a3c:	440b      	add	r3, r1
 8011a3e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	689a      	ldr	r2, [r3, #8]
 8011a44:	491e      	ldr	r1, [pc, #120]	; (8011ac0 <inc_lock+0x118>)
 8011a46:	68fb      	ldr	r3, [r7, #12]
 8011a48:	011b      	lsls	r3, r3, #4
 8011a4a:	440b      	add	r3, r1
 8011a4c:	3304      	adds	r3, #4
 8011a4e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	695a      	ldr	r2, [r3, #20]
 8011a54:	491a      	ldr	r1, [pc, #104]	; (8011ac0 <inc_lock+0x118>)
 8011a56:	68fb      	ldr	r3, [r7, #12]
 8011a58:	011b      	lsls	r3, r3, #4
 8011a5a:	440b      	add	r3, r1
 8011a5c:	3308      	adds	r3, #8
 8011a5e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8011a60:	4a17      	ldr	r2, [pc, #92]	; (8011ac0 <inc_lock+0x118>)
 8011a62:	68fb      	ldr	r3, [r7, #12]
 8011a64:	011b      	lsls	r3, r3, #4
 8011a66:	4413      	add	r3, r2
 8011a68:	330c      	adds	r3, #12
 8011a6a:	2200      	movs	r2, #0
 8011a6c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8011a6e:	683b      	ldr	r3, [r7, #0]
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d009      	beq.n	8011a88 <inc_lock+0xe0>
 8011a74:	4a12      	ldr	r2, [pc, #72]	; (8011ac0 <inc_lock+0x118>)
 8011a76:	68fb      	ldr	r3, [r7, #12]
 8011a78:	011b      	lsls	r3, r3, #4
 8011a7a:	4413      	add	r3, r2
 8011a7c:	330c      	adds	r3, #12
 8011a7e:	881b      	ldrh	r3, [r3, #0]
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d001      	beq.n	8011a88 <inc_lock+0xe0>
 8011a84:	2300      	movs	r3, #0
 8011a86:	e015      	b.n	8011ab4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8011a88:	683b      	ldr	r3, [r7, #0]
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	d108      	bne.n	8011aa0 <inc_lock+0xf8>
 8011a8e:	4a0c      	ldr	r2, [pc, #48]	; (8011ac0 <inc_lock+0x118>)
 8011a90:	68fb      	ldr	r3, [r7, #12]
 8011a92:	011b      	lsls	r3, r3, #4
 8011a94:	4413      	add	r3, r2
 8011a96:	330c      	adds	r3, #12
 8011a98:	881b      	ldrh	r3, [r3, #0]
 8011a9a:	3301      	adds	r3, #1
 8011a9c:	b29a      	uxth	r2, r3
 8011a9e:	e001      	b.n	8011aa4 <inc_lock+0xfc>
 8011aa0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011aa4:	4906      	ldr	r1, [pc, #24]	; (8011ac0 <inc_lock+0x118>)
 8011aa6:	68fb      	ldr	r3, [r7, #12]
 8011aa8:	011b      	lsls	r3, r3, #4
 8011aaa:	440b      	add	r3, r1
 8011aac:	330c      	adds	r3, #12
 8011aae:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8011ab0:	68fb      	ldr	r3, [r7, #12]
 8011ab2:	3301      	adds	r3, #1
}
 8011ab4:	4618      	mov	r0, r3
 8011ab6:	3714      	adds	r7, #20
 8011ab8:	46bd      	mov	sp, r7
 8011aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011abe:	4770      	bx	lr
 8011ac0:	2404020c 	.word	0x2404020c

08011ac4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8011ac4:	b480      	push	{r7}
 8011ac6:	b085      	sub	sp, #20
 8011ac8:	af00      	add	r7, sp, #0
 8011aca:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	3b01      	subs	r3, #1
 8011ad0:	607b      	str	r3, [r7, #4]
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	2b01      	cmp	r3, #1
 8011ad6:	d825      	bhi.n	8011b24 <dec_lock+0x60>
		n = Files[i].ctr;
 8011ad8:	4a17      	ldr	r2, [pc, #92]	; (8011b38 <dec_lock+0x74>)
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	011b      	lsls	r3, r3, #4
 8011ade:	4413      	add	r3, r2
 8011ae0:	330c      	adds	r3, #12
 8011ae2:	881b      	ldrh	r3, [r3, #0]
 8011ae4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8011ae6:	89fb      	ldrh	r3, [r7, #14]
 8011ae8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011aec:	d101      	bne.n	8011af2 <dec_lock+0x2e>
 8011aee:	2300      	movs	r3, #0
 8011af0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8011af2:	89fb      	ldrh	r3, [r7, #14]
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d002      	beq.n	8011afe <dec_lock+0x3a>
 8011af8:	89fb      	ldrh	r3, [r7, #14]
 8011afa:	3b01      	subs	r3, #1
 8011afc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8011afe:	4a0e      	ldr	r2, [pc, #56]	; (8011b38 <dec_lock+0x74>)
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	011b      	lsls	r3, r3, #4
 8011b04:	4413      	add	r3, r2
 8011b06:	330c      	adds	r3, #12
 8011b08:	89fa      	ldrh	r2, [r7, #14]
 8011b0a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8011b0c:	89fb      	ldrh	r3, [r7, #14]
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d105      	bne.n	8011b1e <dec_lock+0x5a>
 8011b12:	4a09      	ldr	r2, [pc, #36]	; (8011b38 <dec_lock+0x74>)
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	011b      	lsls	r3, r3, #4
 8011b18:	4413      	add	r3, r2
 8011b1a:	2200      	movs	r2, #0
 8011b1c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8011b1e:	2300      	movs	r3, #0
 8011b20:	737b      	strb	r3, [r7, #13]
 8011b22:	e001      	b.n	8011b28 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8011b24:	2302      	movs	r3, #2
 8011b26:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8011b28:	7b7b      	ldrb	r3, [r7, #13]
}
 8011b2a:	4618      	mov	r0, r3
 8011b2c:	3714      	adds	r7, #20
 8011b2e:	46bd      	mov	sp, r7
 8011b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b34:	4770      	bx	lr
 8011b36:	bf00      	nop
 8011b38:	2404020c 	.word	0x2404020c

08011b3c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8011b3c:	b480      	push	{r7}
 8011b3e:	b085      	sub	sp, #20
 8011b40:	af00      	add	r7, sp, #0
 8011b42:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8011b44:	2300      	movs	r3, #0
 8011b46:	60fb      	str	r3, [r7, #12]
 8011b48:	e010      	b.n	8011b6c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8011b4a:	4a0d      	ldr	r2, [pc, #52]	; (8011b80 <clear_lock+0x44>)
 8011b4c:	68fb      	ldr	r3, [r7, #12]
 8011b4e:	011b      	lsls	r3, r3, #4
 8011b50:	4413      	add	r3, r2
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	687a      	ldr	r2, [r7, #4]
 8011b56:	429a      	cmp	r2, r3
 8011b58:	d105      	bne.n	8011b66 <clear_lock+0x2a>
 8011b5a:	4a09      	ldr	r2, [pc, #36]	; (8011b80 <clear_lock+0x44>)
 8011b5c:	68fb      	ldr	r3, [r7, #12]
 8011b5e:	011b      	lsls	r3, r3, #4
 8011b60:	4413      	add	r3, r2
 8011b62:	2200      	movs	r2, #0
 8011b64:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8011b66:	68fb      	ldr	r3, [r7, #12]
 8011b68:	3301      	adds	r3, #1
 8011b6a:	60fb      	str	r3, [r7, #12]
 8011b6c:	68fb      	ldr	r3, [r7, #12]
 8011b6e:	2b01      	cmp	r3, #1
 8011b70:	d9eb      	bls.n	8011b4a <clear_lock+0xe>
	}
}
 8011b72:	bf00      	nop
 8011b74:	3714      	adds	r7, #20
 8011b76:	46bd      	mov	sp, r7
 8011b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b7c:	4770      	bx	lr
 8011b7e:	bf00      	nop
 8011b80:	2404020c 	.word	0x2404020c

08011b84 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8011b84:	b580      	push	{r7, lr}
 8011b86:	b086      	sub	sp, #24
 8011b88:	af00      	add	r7, sp, #0
 8011b8a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8011b8c:	2300      	movs	r3, #0
 8011b8e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	78db      	ldrb	r3, [r3, #3]
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d034      	beq.n	8011c02 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b9c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	7858      	ldrb	r0, [r3, #1]
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011ba8:	2301      	movs	r3, #1
 8011baa:	697a      	ldr	r2, [r7, #20]
 8011bac:	f7ff fd40 	bl	8011630 <disk_write>
 8011bb0:	4603      	mov	r3, r0
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d002      	beq.n	8011bbc <sync_window+0x38>
			res = FR_DISK_ERR;
 8011bb6:	2301      	movs	r3, #1
 8011bb8:	73fb      	strb	r3, [r7, #15]
 8011bba:	e022      	b.n	8011c02 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	2200      	movs	r2, #0
 8011bc0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	6a1b      	ldr	r3, [r3, #32]
 8011bc6:	697a      	ldr	r2, [r7, #20]
 8011bc8:	1ad2      	subs	r2, r2, r3
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	699b      	ldr	r3, [r3, #24]
 8011bce:	429a      	cmp	r2, r3
 8011bd0:	d217      	bcs.n	8011c02 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	789b      	ldrb	r3, [r3, #2]
 8011bd6:	613b      	str	r3, [r7, #16]
 8011bd8:	e010      	b.n	8011bfc <sync_window+0x78>
					wsect += fs->fsize;
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	699b      	ldr	r3, [r3, #24]
 8011bde:	697a      	ldr	r2, [r7, #20]
 8011be0:	4413      	add	r3, r2
 8011be2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	7858      	ldrb	r0, [r3, #1]
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011bee:	2301      	movs	r3, #1
 8011bf0:	697a      	ldr	r2, [r7, #20]
 8011bf2:	f7ff fd1d 	bl	8011630 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011bf6:	693b      	ldr	r3, [r7, #16]
 8011bf8:	3b01      	subs	r3, #1
 8011bfa:	613b      	str	r3, [r7, #16]
 8011bfc:	693b      	ldr	r3, [r7, #16]
 8011bfe:	2b01      	cmp	r3, #1
 8011c00:	d8eb      	bhi.n	8011bda <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8011c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c04:	4618      	mov	r0, r3
 8011c06:	3718      	adds	r7, #24
 8011c08:	46bd      	mov	sp, r7
 8011c0a:	bd80      	pop	{r7, pc}

08011c0c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8011c0c:	b580      	push	{r7, lr}
 8011c0e:	b084      	sub	sp, #16
 8011c10:	af00      	add	r7, sp, #0
 8011c12:	6078      	str	r0, [r7, #4]
 8011c14:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8011c16:	2300      	movs	r3, #0
 8011c18:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c1e:	683a      	ldr	r2, [r7, #0]
 8011c20:	429a      	cmp	r2, r3
 8011c22:	d01b      	beq.n	8011c5c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8011c24:	6878      	ldr	r0, [r7, #4]
 8011c26:	f7ff ffad 	bl	8011b84 <sync_window>
 8011c2a:	4603      	mov	r3, r0
 8011c2c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8011c2e:	7bfb      	ldrb	r3, [r7, #15]
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d113      	bne.n	8011c5c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	7858      	ldrb	r0, [r3, #1]
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011c3e:	2301      	movs	r3, #1
 8011c40:	683a      	ldr	r2, [r7, #0]
 8011c42:	f7ff fcd5 	bl	80115f0 <disk_read>
 8011c46:	4603      	mov	r3, r0
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	d004      	beq.n	8011c56 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8011c4c:	f04f 33ff 	mov.w	r3, #4294967295
 8011c50:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8011c52:	2301      	movs	r3, #1
 8011c54:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	683a      	ldr	r2, [r7, #0]
 8011c5a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8011c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c5e:	4618      	mov	r0, r3
 8011c60:	3710      	adds	r7, #16
 8011c62:	46bd      	mov	sp, r7
 8011c64:	bd80      	pop	{r7, pc}
	...

08011c68 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8011c68:	b580      	push	{r7, lr}
 8011c6a:	b084      	sub	sp, #16
 8011c6c:	af00      	add	r7, sp, #0
 8011c6e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8011c70:	6878      	ldr	r0, [r7, #4]
 8011c72:	f7ff ff87 	bl	8011b84 <sync_window>
 8011c76:	4603      	mov	r3, r0
 8011c78:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011c7a:	7bfb      	ldrb	r3, [r7, #15]
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	d158      	bne.n	8011d32 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	781b      	ldrb	r3, [r3, #0]
 8011c84:	2b03      	cmp	r3, #3
 8011c86:	d148      	bne.n	8011d1a <sync_fs+0xb2>
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	791b      	ldrb	r3, [r3, #4]
 8011c8c:	2b01      	cmp	r3, #1
 8011c8e:	d144      	bne.n	8011d1a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	3330      	adds	r3, #48	; 0x30
 8011c94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011c98:	2100      	movs	r1, #0
 8011c9a:	4618      	mov	r0, r3
 8011c9c:	f7ff fda9 	bl	80117f2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	3330      	adds	r3, #48	; 0x30
 8011ca4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011ca8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8011cac:	4618      	mov	r0, r3
 8011cae:	f7ff fd38 	bl	8011722 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	3330      	adds	r3, #48	; 0x30
 8011cb6:	4921      	ldr	r1, [pc, #132]	; (8011d3c <sync_fs+0xd4>)
 8011cb8:	4618      	mov	r0, r3
 8011cba:	f7ff fd4d 	bl	8011758 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	3330      	adds	r3, #48	; 0x30
 8011cc2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8011cc6:	491e      	ldr	r1, [pc, #120]	; (8011d40 <sync_fs+0xd8>)
 8011cc8:	4618      	mov	r0, r3
 8011cca:	f7ff fd45 	bl	8011758 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	3330      	adds	r3, #48	; 0x30
 8011cd2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	691b      	ldr	r3, [r3, #16]
 8011cda:	4619      	mov	r1, r3
 8011cdc:	4610      	mov	r0, r2
 8011cde:	f7ff fd3b 	bl	8011758 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	3330      	adds	r3, #48	; 0x30
 8011ce6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	68db      	ldr	r3, [r3, #12]
 8011cee:	4619      	mov	r1, r3
 8011cf0:	4610      	mov	r0, r2
 8011cf2:	f7ff fd31 	bl	8011758 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	69db      	ldr	r3, [r3, #28]
 8011cfa:	1c5a      	adds	r2, r3, #1
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	7858      	ldrb	r0, [r3, #1]
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d0e:	2301      	movs	r3, #1
 8011d10:	f7ff fc8e 	bl	8011630 <disk_write>
			fs->fsi_flag = 0;
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	2200      	movs	r2, #0
 8011d18:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	785b      	ldrb	r3, [r3, #1]
 8011d1e:	2200      	movs	r2, #0
 8011d20:	2100      	movs	r1, #0
 8011d22:	4618      	mov	r0, r3
 8011d24:	f7ff fca4 	bl	8011670 <disk_ioctl>
 8011d28:	4603      	mov	r3, r0
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	d001      	beq.n	8011d32 <sync_fs+0xca>
 8011d2e:	2301      	movs	r3, #1
 8011d30:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8011d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d34:	4618      	mov	r0, r3
 8011d36:	3710      	adds	r7, #16
 8011d38:	46bd      	mov	sp, r7
 8011d3a:	bd80      	pop	{r7, pc}
 8011d3c:	41615252 	.word	0x41615252
 8011d40:	61417272 	.word	0x61417272

08011d44 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8011d44:	b480      	push	{r7}
 8011d46:	b083      	sub	sp, #12
 8011d48:	af00      	add	r7, sp, #0
 8011d4a:	6078      	str	r0, [r7, #4]
 8011d4c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8011d4e:	683b      	ldr	r3, [r7, #0]
 8011d50:	3b02      	subs	r3, #2
 8011d52:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	695b      	ldr	r3, [r3, #20]
 8011d58:	3b02      	subs	r3, #2
 8011d5a:	683a      	ldr	r2, [r7, #0]
 8011d5c:	429a      	cmp	r2, r3
 8011d5e:	d301      	bcc.n	8011d64 <clust2sect+0x20>
 8011d60:	2300      	movs	r3, #0
 8011d62:	e008      	b.n	8011d76 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	895b      	ldrh	r3, [r3, #10]
 8011d68:	461a      	mov	r2, r3
 8011d6a:	683b      	ldr	r3, [r7, #0]
 8011d6c:	fb03 f202 	mul.w	r2, r3, r2
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d74:	4413      	add	r3, r2
}
 8011d76:	4618      	mov	r0, r3
 8011d78:	370c      	adds	r7, #12
 8011d7a:	46bd      	mov	sp, r7
 8011d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d80:	4770      	bx	lr

08011d82 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8011d82:	b580      	push	{r7, lr}
 8011d84:	b086      	sub	sp, #24
 8011d86:	af00      	add	r7, sp, #0
 8011d88:	6078      	str	r0, [r7, #4]
 8011d8a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	681b      	ldr	r3, [r3, #0]
 8011d90:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8011d92:	683b      	ldr	r3, [r7, #0]
 8011d94:	2b01      	cmp	r3, #1
 8011d96:	d904      	bls.n	8011da2 <get_fat+0x20>
 8011d98:	693b      	ldr	r3, [r7, #16]
 8011d9a:	695b      	ldr	r3, [r3, #20]
 8011d9c:	683a      	ldr	r2, [r7, #0]
 8011d9e:	429a      	cmp	r2, r3
 8011da0:	d302      	bcc.n	8011da8 <get_fat+0x26>
		val = 1;	/* Internal error */
 8011da2:	2301      	movs	r3, #1
 8011da4:	617b      	str	r3, [r7, #20]
 8011da6:	e08c      	b.n	8011ec2 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8011da8:	f04f 33ff 	mov.w	r3, #4294967295
 8011dac:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8011dae:	693b      	ldr	r3, [r7, #16]
 8011db0:	781b      	ldrb	r3, [r3, #0]
 8011db2:	2b02      	cmp	r3, #2
 8011db4:	d045      	beq.n	8011e42 <get_fat+0xc0>
 8011db6:	2b03      	cmp	r3, #3
 8011db8:	d05d      	beq.n	8011e76 <get_fat+0xf4>
 8011dba:	2b01      	cmp	r3, #1
 8011dbc:	d177      	bne.n	8011eae <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8011dbe:	683b      	ldr	r3, [r7, #0]
 8011dc0:	60fb      	str	r3, [r7, #12]
 8011dc2:	68fb      	ldr	r3, [r7, #12]
 8011dc4:	085b      	lsrs	r3, r3, #1
 8011dc6:	68fa      	ldr	r2, [r7, #12]
 8011dc8:	4413      	add	r3, r2
 8011dca:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011dcc:	693b      	ldr	r3, [r7, #16]
 8011dce:	6a1a      	ldr	r2, [r3, #32]
 8011dd0:	68fb      	ldr	r3, [r7, #12]
 8011dd2:	0a5b      	lsrs	r3, r3, #9
 8011dd4:	4413      	add	r3, r2
 8011dd6:	4619      	mov	r1, r3
 8011dd8:	6938      	ldr	r0, [r7, #16]
 8011dda:	f7ff ff17 	bl	8011c0c <move_window>
 8011dde:	4603      	mov	r3, r0
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	d167      	bne.n	8011eb4 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 8011de4:	68fb      	ldr	r3, [r7, #12]
 8011de6:	1c5a      	adds	r2, r3, #1
 8011de8:	60fa      	str	r2, [r7, #12]
 8011dea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011dee:	693a      	ldr	r2, [r7, #16]
 8011df0:	4413      	add	r3, r2
 8011df2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011df6:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011df8:	693b      	ldr	r3, [r7, #16]
 8011dfa:	6a1a      	ldr	r2, [r3, #32]
 8011dfc:	68fb      	ldr	r3, [r7, #12]
 8011dfe:	0a5b      	lsrs	r3, r3, #9
 8011e00:	4413      	add	r3, r2
 8011e02:	4619      	mov	r1, r3
 8011e04:	6938      	ldr	r0, [r7, #16]
 8011e06:	f7ff ff01 	bl	8011c0c <move_window>
 8011e0a:	4603      	mov	r3, r0
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d153      	bne.n	8011eb8 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8011e10:	68fb      	ldr	r3, [r7, #12]
 8011e12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011e16:	693a      	ldr	r2, [r7, #16]
 8011e18:	4413      	add	r3, r2
 8011e1a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011e1e:	021b      	lsls	r3, r3, #8
 8011e20:	461a      	mov	r2, r3
 8011e22:	68bb      	ldr	r3, [r7, #8]
 8011e24:	4313      	orrs	r3, r2
 8011e26:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8011e28:	683b      	ldr	r3, [r7, #0]
 8011e2a:	f003 0301 	and.w	r3, r3, #1
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d002      	beq.n	8011e38 <get_fat+0xb6>
 8011e32:	68bb      	ldr	r3, [r7, #8]
 8011e34:	091b      	lsrs	r3, r3, #4
 8011e36:	e002      	b.n	8011e3e <get_fat+0xbc>
 8011e38:	68bb      	ldr	r3, [r7, #8]
 8011e3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011e3e:	617b      	str	r3, [r7, #20]
			break;
 8011e40:	e03f      	b.n	8011ec2 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011e42:	693b      	ldr	r3, [r7, #16]
 8011e44:	6a1a      	ldr	r2, [r3, #32]
 8011e46:	683b      	ldr	r3, [r7, #0]
 8011e48:	0a1b      	lsrs	r3, r3, #8
 8011e4a:	4413      	add	r3, r2
 8011e4c:	4619      	mov	r1, r3
 8011e4e:	6938      	ldr	r0, [r7, #16]
 8011e50:	f7ff fedc 	bl	8011c0c <move_window>
 8011e54:	4603      	mov	r3, r0
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d130      	bne.n	8011ebc <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8011e5a:	693b      	ldr	r3, [r7, #16]
 8011e5c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011e60:	683b      	ldr	r3, [r7, #0]
 8011e62:	005b      	lsls	r3, r3, #1
 8011e64:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8011e68:	4413      	add	r3, r2
 8011e6a:	4618      	mov	r0, r3
 8011e6c:	f7ff fc1e 	bl	80116ac <ld_word>
 8011e70:	4603      	mov	r3, r0
 8011e72:	617b      	str	r3, [r7, #20]
			break;
 8011e74:	e025      	b.n	8011ec2 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011e76:	693b      	ldr	r3, [r7, #16]
 8011e78:	6a1a      	ldr	r2, [r3, #32]
 8011e7a:	683b      	ldr	r3, [r7, #0]
 8011e7c:	09db      	lsrs	r3, r3, #7
 8011e7e:	4413      	add	r3, r2
 8011e80:	4619      	mov	r1, r3
 8011e82:	6938      	ldr	r0, [r7, #16]
 8011e84:	f7ff fec2 	bl	8011c0c <move_window>
 8011e88:	4603      	mov	r3, r0
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d118      	bne.n	8011ec0 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8011e8e:	693b      	ldr	r3, [r7, #16]
 8011e90:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011e94:	683b      	ldr	r3, [r7, #0]
 8011e96:	009b      	lsls	r3, r3, #2
 8011e98:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8011e9c:	4413      	add	r3, r2
 8011e9e:	4618      	mov	r0, r3
 8011ea0:	f7ff fc1c 	bl	80116dc <ld_dword>
 8011ea4:	4603      	mov	r3, r0
 8011ea6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8011eaa:	617b      	str	r3, [r7, #20]
			break;
 8011eac:	e009      	b.n	8011ec2 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8011eae:	2301      	movs	r3, #1
 8011eb0:	617b      	str	r3, [r7, #20]
 8011eb2:	e006      	b.n	8011ec2 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011eb4:	bf00      	nop
 8011eb6:	e004      	b.n	8011ec2 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011eb8:	bf00      	nop
 8011eba:	e002      	b.n	8011ec2 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011ebc:	bf00      	nop
 8011ebe:	e000      	b.n	8011ec2 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011ec0:	bf00      	nop
		}
	}

	return val;
 8011ec2:	697b      	ldr	r3, [r7, #20]
}
 8011ec4:	4618      	mov	r0, r3
 8011ec6:	3718      	adds	r7, #24
 8011ec8:	46bd      	mov	sp, r7
 8011eca:	bd80      	pop	{r7, pc}

08011ecc <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8011ecc:	b590      	push	{r4, r7, lr}
 8011ece:	b089      	sub	sp, #36	; 0x24
 8011ed0:	af00      	add	r7, sp, #0
 8011ed2:	60f8      	str	r0, [r7, #12]
 8011ed4:	60b9      	str	r1, [r7, #8]
 8011ed6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8011ed8:	2302      	movs	r3, #2
 8011eda:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8011edc:	68bb      	ldr	r3, [r7, #8]
 8011ede:	2b01      	cmp	r3, #1
 8011ee0:	f240 80d6 	bls.w	8012090 <put_fat+0x1c4>
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	695b      	ldr	r3, [r3, #20]
 8011ee8:	68ba      	ldr	r2, [r7, #8]
 8011eea:	429a      	cmp	r2, r3
 8011eec:	f080 80d0 	bcs.w	8012090 <put_fat+0x1c4>
		switch (fs->fs_type) {
 8011ef0:	68fb      	ldr	r3, [r7, #12]
 8011ef2:	781b      	ldrb	r3, [r3, #0]
 8011ef4:	2b02      	cmp	r3, #2
 8011ef6:	d073      	beq.n	8011fe0 <put_fat+0x114>
 8011ef8:	2b03      	cmp	r3, #3
 8011efa:	f000 8091 	beq.w	8012020 <put_fat+0x154>
 8011efe:	2b01      	cmp	r3, #1
 8011f00:	f040 80c6 	bne.w	8012090 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8011f04:	68bb      	ldr	r3, [r7, #8]
 8011f06:	61bb      	str	r3, [r7, #24]
 8011f08:	69bb      	ldr	r3, [r7, #24]
 8011f0a:	085b      	lsrs	r3, r3, #1
 8011f0c:	69ba      	ldr	r2, [r7, #24]
 8011f0e:	4413      	add	r3, r2
 8011f10:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011f12:	68fb      	ldr	r3, [r7, #12]
 8011f14:	6a1a      	ldr	r2, [r3, #32]
 8011f16:	69bb      	ldr	r3, [r7, #24]
 8011f18:	0a5b      	lsrs	r3, r3, #9
 8011f1a:	4413      	add	r3, r2
 8011f1c:	4619      	mov	r1, r3
 8011f1e:	68f8      	ldr	r0, [r7, #12]
 8011f20:	f7ff fe74 	bl	8011c0c <move_window>
 8011f24:	4603      	mov	r3, r0
 8011f26:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011f28:	7ffb      	ldrb	r3, [r7, #31]
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	f040 80a9 	bne.w	8012082 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8011f30:	68fb      	ldr	r3, [r7, #12]
 8011f32:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011f36:	69bb      	ldr	r3, [r7, #24]
 8011f38:	1c59      	adds	r1, r3, #1
 8011f3a:	61b9      	str	r1, [r7, #24]
 8011f3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011f40:	4413      	add	r3, r2
 8011f42:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8011f44:	68bb      	ldr	r3, [r7, #8]
 8011f46:	f003 0301 	and.w	r3, r3, #1
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d00d      	beq.n	8011f6a <put_fat+0x9e>
 8011f4e:	697b      	ldr	r3, [r7, #20]
 8011f50:	781b      	ldrb	r3, [r3, #0]
 8011f52:	b25b      	sxtb	r3, r3
 8011f54:	f003 030f 	and.w	r3, r3, #15
 8011f58:	b25a      	sxtb	r2, r3
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	b2db      	uxtb	r3, r3
 8011f5e:	011b      	lsls	r3, r3, #4
 8011f60:	b25b      	sxtb	r3, r3
 8011f62:	4313      	orrs	r3, r2
 8011f64:	b25b      	sxtb	r3, r3
 8011f66:	b2db      	uxtb	r3, r3
 8011f68:	e001      	b.n	8011f6e <put_fat+0xa2>
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	b2db      	uxtb	r3, r3
 8011f6e:	697a      	ldr	r2, [r7, #20]
 8011f70:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011f72:	68fb      	ldr	r3, [r7, #12]
 8011f74:	2201      	movs	r2, #1
 8011f76:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	6a1a      	ldr	r2, [r3, #32]
 8011f7c:	69bb      	ldr	r3, [r7, #24]
 8011f7e:	0a5b      	lsrs	r3, r3, #9
 8011f80:	4413      	add	r3, r2
 8011f82:	4619      	mov	r1, r3
 8011f84:	68f8      	ldr	r0, [r7, #12]
 8011f86:	f7ff fe41 	bl	8011c0c <move_window>
 8011f8a:	4603      	mov	r3, r0
 8011f8c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011f8e:	7ffb      	ldrb	r3, [r7, #31]
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d178      	bne.n	8012086 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8011f94:	68fb      	ldr	r3, [r7, #12]
 8011f96:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011f9a:	69bb      	ldr	r3, [r7, #24]
 8011f9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011fa0:	4413      	add	r3, r2
 8011fa2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8011fa4:	68bb      	ldr	r3, [r7, #8]
 8011fa6:	f003 0301 	and.w	r3, r3, #1
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	d003      	beq.n	8011fb6 <put_fat+0xea>
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	091b      	lsrs	r3, r3, #4
 8011fb2:	b2db      	uxtb	r3, r3
 8011fb4:	e00e      	b.n	8011fd4 <put_fat+0x108>
 8011fb6:	697b      	ldr	r3, [r7, #20]
 8011fb8:	781b      	ldrb	r3, [r3, #0]
 8011fba:	b25b      	sxtb	r3, r3
 8011fbc:	f023 030f 	bic.w	r3, r3, #15
 8011fc0:	b25a      	sxtb	r2, r3
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	0a1b      	lsrs	r3, r3, #8
 8011fc6:	b25b      	sxtb	r3, r3
 8011fc8:	f003 030f 	and.w	r3, r3, #15
 8011fcc:	b25b      	sxtb	r3, r3
 8011fce:	4313      	orrs	r3, r2
 8011fd0:	b25b      	sxtb	r3, r3
 8011fd2:	b2db      	uxtb	r3, r3
 8011fd4:	697a      	ldr	r2, [r7, #20]
 8011fd6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011fd8:	68fb      	ldr	r3, [r7, #12]
 8011fda:	2201      	movs	r2, #1
 8011fdc:	70da      	strb	r2, [r3, #3]
			break;
 8011fde:	e057      	b.n	8012090 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8011fe0:	68fb      	ldr	r3, [r7, #12]
 8011fe2:	6a1a      	ldr	r2, [r3, #32]
 8011fe4:	68bb      	ldr	r3, [r7, #8]
 8011fe6:	0a1b      	lsrs	r3, r3, #8
 8011fe8:	4413      	add	r3, r2
 8011fea:	4619      	mov	r1, r3
 8011fec:	68f8      	ldr	r0, [r7, #12]
 8011fee:	f7ff fe0d 	bl	8011c0c <move_window>
 8011ff2:	4603      	mov	r3, r0
 8011ff4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011ff6:	7ffb      	ldrb	r3, [r7, #31]
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	d146      	bne.n	801208a <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8011ffc:	68fb      	ldr	r3, [r7, #12]
 8011ffe:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012002:	68bb      	ldr	r3, [r7, #8]
 8012004:	005b      	lsls	r3, r3, #1
 8012006:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 801200a:	4413      	add	r3, r2
 801200c:	687a      	ldr	r2, [r7, #4]
 801200e:	b292      	uxth	r2, r2
 8012010:	4611      	mov	r1, r2
 8012012:	4618      	mov	r0, r3
 8012014:	f7ff fb85 	bl	8011722 <st_word>
			fs->wflag = 1;
 8012018:	68fb      	ldr	r3, [r7, #12]
 801201a:	2201      	movs	r2, #1
 801201c:	70da      	strb	r2, [r3, #3]
			break;
 801201e:	e037      	b.n	8012090 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8012020:	68fb      	ldr	r3, [r7, #12]
 8012022:	6a1a      	ldr	r2, [r3, #32]
 8012024:	68bb      	ldr	r3, [r7, #8]
 8012026:	09db      	lsrs	r3, r3, #7
 8012028:	4413      	add	r3, r2
 801202a:	4619      	mov	r1, r3
 801202c:	68f8      	ldr	r0, [r7, #12]
 801202e:	f7ff fded 	bl	8011c0c <move_window>
 8012032:	4603      	mov	r3, r0
 8012034:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012036:	7ffb      	ldrb	r3, [r7, #31]
 8012038:	2b00      	cmp	r3, #0
 801203a:	d128      	bne.n	801208e <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8012042:	68fb      	ldr	r3, [r7, #12]
 8012044:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012048:	68bb      	ldr	r3, [r7, #8]
 801204a:	009b      	lsls	r3, r3, #2
 801204c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8012050:	4413      	add	r3, r2
 8012052:	4618      	mov	r0, r3
 8012054:	f7ff fb42 	bl	80116dc <ld_dword>
 8012058:	4603      	mov	r3, r0
 801205a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801205e:	4323      	orrs	r3, r4
 8012060:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8012062:	68fb      	ldr	r3, [r7, #12]
 8012064:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012068:	68bb      	ldr	r3, [r7, #8]
 801206a:	009b      	lsls	r3, r3, #2
 801206c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8012070:	4413      	add	r3, r2
 8012072:	6879      	ldr	r1, [r7, #4]
 8012074:	4618      	mov	r0, r3
 8012076:	f7ff fb6f 	bl	8011758 <st_dword>
			fs->wflag = 1;
 801207a:	68fb      	ldr	r3, [r7, #12]
 801207c:	2201      	movs	r2, #1
 801207e:	70da      	strb	r2, [r3, #3]
			break;
 8012080:	e006      	b.n	8012090 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8012082:	bf00      	nop
 8012084:	e004      	b.n	8012090 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8012086:	bf00      	nop
 8012088:	e002      	b.n	8012090 <put_fat+0x1c4>
			if (res != FR_OK) break;
 801208a:	bf00      	nop
 801208c:	e000      	b.n	8012090 <put_fat+0x1c4>
			if (res != FR_OK) break;
 801208e:	bf00      	nop
		}
	}
	return res;
 8012090:	7ffb      	ldrb	r3, [r7, #31]
}
 8012092:	4618      	mov	r0, r3
 8012094:	3724      	adds	r7, #36	; 0x24
 8012096:	46bd      	mov	sp, r7
 8012098:	bd90      	pop	{r4, r7, pc}

0801209a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801209a:	b580      	push	{r7, lr}
 801209c:	b088      	sub	sp, #32
 801209e:	af00      	add	r7, sp, #0
 80120a0:	60f8      	str	r0, [r7, #12]
 80120a2:	60b9      	str	r1, [r7, #8]
 80120a4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80120a6:	2300      	movs	r3, #0
 80120a8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80120aa:	68fb      	ldr	r3, [r7, #12]
 80120ac:	681b      	ldr	r3, [r3, #0]
 80120ae:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80120b0:	68bb      	ldr	r3, [r7, #8]
 80120b2:	2b01      	cmp	r3, #1
 80120b4:	d904      	bls.n	80120c0 <remove_chain+0x26>
 80120b6:	69bb      	ldr	r3, [r7, #24]
 80120b8:	695b      	ldr	r3, [r3, #20]
 80120ba:	68ba      	ldr	r2, [r7, #8]
 80120bc:	429a      	cmp	r2, r3
 80120be:	d301      	bcc.n	80120c4 <remove_chain+0x2a>
 80120c0:	2302      	movs	r3, #2
 80120c2:	e04b      	b.n	801215c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d00c      	beq.n	80120e4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80120ca:	f04f 32ff 	mov.w	r2, #4294967295
 80120ce:	6879      	ldr	r1, [r7, #4]
 80120d0:	69b8      	ldr	r0, [r7, #24]
 80120d2:	f7ff fefb 	bl	8011ecc <put_fat>
 80120d6:	4603      	mov	r3, r0
 80120d8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80120da:	7ffb      	ldrb	r3, [r7, #31]
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d001      	beq.n	80120e4 <remove_chain+0x4a>
 80120e0:	7ffb      	ldrb	r3, [r7, #31]
 80120e2:	e03b      	b.n	801215c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80120e4:	68b9      	ldr	r1, [r7, #8]
 80120e6:	68f8      	ldr	r0, [r7, #12]
 80120e8:	f7ff fe4b 	bl	8011d82 <get_fat>
 80120ec:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80120ee:	697b      	ldr	r3, [r7, #20]
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d031      	beq.n	8012158 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80120f4:	697b      	ldr	r3, [r7, #20]
 80120f6:	2b01      	cmp	r3, #1
 80120f8:	d101      	bne.n	80120fe <remove_chain+0x64>
 80120fa:	2302      	movs	r3, #2
 80120fc:	e02e      	b.n	801215c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80120fe:	697b      	ldr	r3, [r7, #20]
 8012100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012104:	d101      	bne.n	801210a <remove_chain+0x70>
 8012106:	2301      	movs	r3, #1
 8012108:	e028      	b.n	801215c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801210a:	2200      	movs	r2, #0
 801210c:	68b9      	ldr	r1, [r7, #8]
 801210e:	69b8      	ldr	r0, [r7, #24]
 8012110:	f7ff fedc 	bl	8011ecc <put_fat>
 8012114:	4603      	mov	r3, r0
 8012116:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8012118:	7ffb      	ldrb	r3, [r7, #31]
 801211a:	2b00      	cmp	r3, #0
 801211c:	d001      	beq.n	8012122 <remove_chain+0x88>
 801211e:	7ffb      	ldrb	r3, [r7, #31]
 8012120:	e01c      	b.n	801215c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8012122:	69bb      	ldr	r3, [r7, #24]
 8012124:	691a      	ldr	r2, [r3, #16]
 8012126:	69bb      	ldr	r3, [r7, #24]
 8012128:	695b      	ldr	r3, [r3, #20]
 801212a:	3b02      	subs	r3, #2
 801212c:	429a      	cmp	r2, r3
 801212e:	d20b      	bcs.n	8012148 <remove_chain+0xae>
			fs->free_clst++;
 8012130:	69bb      	ldr	r3, [r7, #24]
 8012132:	691b      	ldr	r3, [r3, #16]
 8012134:	1c5a      	adds	r2, r3, #1
 8012136:	69bb      	ldr	r3, [r7, #24]
 8012138:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 801213a:	69bb      	ldr	r3, [r7, #24]
 801213c:	791b      	ldrb	r3, [r3, #4]
 801213e:	f043 0301 	orr.w	r3, r3, #1
 8012142:	b2da      	uxtb	r2, r3
 8012144:	69bb      	ldr	r3, [r7, #24]
 8012146:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8012148:	697b      	ldr	r3, [r7, #20]
 801214a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801214c:	69bb      	ldr	r3, [r7, #24]
 801214e:	695b      	ldr	r3, [r3, #20]
 8012150:	68ba      	ldr	r2, [r7, #8]
 8012152:	429a      	cmp	r2, r3
 8012154:	d3c6      	bcc.n	80120e4 <remove_chain+0x4a>
 8012156:	e000      	b.n	801215a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8012158:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801215a:	2300      	movs	r3, #0
}
 801215c:	4618      	mov	r0, r3
 801215e:	3720      	adds	r7, #32
 8012160:	46bd      	mov	sp, r7
 8012162:	bd80      	pop	{r7, pc}

08012164 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8012164:	b580      	push	{r7, lr}
 8012166:	b088      	sub	sp, #32
 8012168:	af00      	add	r7, sp, #0
 801216a:	6078      	str	r0, [r7, #4]
 801216c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	681b      	ldr	r3, [r3, #0]
 8012172:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8012174:	683b      	ldr	r3, [r7, #0]
 8012176:	2b00      	cmp	r3, #0
 8012178:	d10d      	bne.n	8012196 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801217a:	693b      	ldr	r3, [r7, #16]
 801217c:	68db      	ldr	r3, [r3, #12]
 801217e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8012180:	69bb      	ldr	r3, [r7, #24]
 8012182:	2b00      	cmp	r3, #0
 8012184:	d004      	beq.n	8012190 <create_chain+0x2c>
 8012186:	693b      	ldr	r3, [r7, #16]
 8012188:	695b      	ldr	r3, [r3, #20]
 801218a:	69ba      	ldr	r2, [r7, #24]
 801218c:	429a      	cmp	r2, r3
 801218e:	d31b      	bcc.n	80121c8 <create_chain+0x64>
 8012190:	2301      	movs	r3, #1
 8012192:	61bb      	str	r3, [r7, #24]
 8012194:	e018      	b.n	80121c8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8012196:	6839      	ldr	r1, [r7, #0]
 8012198:	6878      	ldr	r0, [r7, #4]
 801219a:	f7ff fdf2 	bl	8011d82 <get_fat>
 801219e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80121a0:	68fb      	ldr	r3, [r7, #12]
 80121a2:	2b01      	cmp	r3, #1
 80121a4:	d801      	bhi.n	80121aa <create_chain+0x46>
 80121a6:	2301      	movs	r3, #1
 80121a8:	e070      	b.n	801228c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80121aa:	68fb      	ldr	r3, [r7, #12]
 80121ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80121b0:	d101      	bne.n	80121b6 <create_chain+0x52>
 80121b2:	68fb      	ldr	r3, [r7, #12]
 80121b4:	e06a      	b.n	801228c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80121b6:	693b      	ldr	r3, [r7, #16]
 80121b8:	695b      	ldr	r3, [r3, #20]
 80121ba:	68fa      	ldr	r2, [r7, #12]
 80121bc:	429a      	cmp	r2, r3
 80121be:	d201      	bcs.n	80121c4 <create_chain+0x60>
 80121c0:	68fb      	ldr	r3, [r7, #12]
 80121c2:	e063      	b.n	801228c <create_chain+0x128>
		scl = clst;
 80121c4:	683b      	ldr	r3, [r7, #0]
 80121c6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80121c8:	69bb      	ldr	r3, [r7, #24]
 80121ca:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80121cc:	69fb      	ldr	r3, [r7, #28]
 80121ce:	3301      	adds	r3, #1
 80121d0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80121d2:	693b      	ldr	r3, [r7, #16]
 80121d4:	695b      	ldr	r3, [r3, #20]
 80121d6:	69fa      	ldr	r2, [r7, #28]
 80121d8:	429a      	cmp	r2, r3
 80121da:	d307      	bcc.n	80121ec <create_chain+0x88>
				ncl = 2;
 80121dc:	2302      	movs	r3, #2
 80121de:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80121e0:	69fa      	ldr	r2, [r7, #28]
 80121e2:	69bb      	ldr	r3, [r7, #24]
 80121e4:	429a      	cmp	r2, r3
 80121e6:	d901      	bls.n	80121ec <create_chain+0x88>
 80121e8:	2300      	movs	r3, #0
 80121ea:	e04f      	b.n	801228c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80121ec:	69f9      	ldr	r1, [r7, #28]
 80121ee:	6878      	ldr	r0, [r7, #4]
 80121f0:	f7ff fdc7 	bl	8011d82 <get_fat>
 80121f4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80121f6:	68fb      	ldr	r3, [r7, #12]
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d00e      	beq.n	801221a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80121fc:	68fb      	ldr	r3, [r7, #12]
 80121fe:	2b01      	cmp	r3, #1
 8012200:	d003      	beq.n	801220a <create_chain+0xa6>
 8012202:	68fb      	ldr	r3, [r7, #12]
 8012204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012208:	d101      	bne.n	801220e <create_chain+0xaa>
 801220a:	68fb      	ldr	r3, [r7, #12]
 801220c:	e03e      	b.n	801228c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801220e:	69fa      	ldr	r2, [r7, #28]
 8012210:	69bb      	ldr	r3, [r7, #24]
 8012212:	429a      	cmp	r2, r3
 8012214:	d1da      	bne.n	80121cc <create_chain+0x68>
 8012216:	2300      	movs	r3, #0
 8012218:	e038      	b.n	801228c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801221a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801221c:	f04f 32ff 	mov.w	r2, #4294967295
 8012220:	69f9      	ldr	r1, [r7, #28]
 8012222:	6938      	ldr	r0, [r7, #16]
 8012224:	f7ff fe52 	bl	8011ecc <put_fat>
 8012228:	4603      	mov	r3, r0
 801222a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801222c:	7dfb      	ldrb	r3, [r7, #23]
 801222e:	2b00      	cmp	r3, #0
 8012230:	d109      	bne.n	8012246 <create_chain+0xe2>
 8012232:	683b      	ldr	r3, [r7, #0]
 8012234:	2b00      	cmp	r3, #0
 8012236:	d006      	beq.n	8012246 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8012238:	69fa      	ldr	r2, [r7, #28]
 801223a:	6839      	ldr	r1, [r7, #0]
 801223c:	6938      	ldr	r0, [r7, #16]
 801223e:	f7ff fe45 	bl	8011ecc <put_fat>
 8012242:	4603      	mov	r3, r0
 8012244:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8012246:	7dfb      	ldrb	r3, [r7, #23]
 8012248:	2b00      	cmp	r3, #0
 801224a:	d116      	bne.n	801227a <create_chain+0x116>
		fs->last_clst = ncl;
 801224c:	693b      	ldr	r3, [r7, #16]
 801224e:	69fa      	ldr	r2, [r7, #28]
 8012250:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8012252:	693b      	ldr	r3, [r7, #16]
 8012254:	691a      	ldr	r2, [r3, #16]
 8012256:	693b      	ldr	r3, [r7, #16]
 8012258:	695b      	ldr	r3, [r3, #20]
 801225a:	3b02      	subs	r3, #2
 801225c:	429a      	cmp	r2, r3
 801225e:	d804      	bhi.n	801226a <create_chain+0x106>
 8012260:	693b      	ldr	r3, [r7, #16]
 8012262:	691b      	ldr	r3, [r3, #16]
 8012264:	1e5a      	subs	r2, r3, #1
 8012266:	693b      	ldr	r3, [r7, #16]
 8012268:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 801226a:	693b      	ldr	r3, [r7, #16]
 801226c:	791b      	ldrb	r3, [r3, #4]
 801226e:	f043 0301 	orr.w	r3, r3, #1
 8012272:	b2da      	uxtb	r2, r3
 8012274:	693b      	ldr	r3, [r7, #16]
 8012276:	711a      	strb	r2, [r3, #4]
 8012278:	e007      	b.n	801228a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801227a:	7dfb      	ldrb	r3, [r7, #23]
 801227c:	2b01      	cmp	r3, #1
 801227e:	d102      	bne.n	8012286 <create_chain+0x122>
 8012280:	f04f 33ff 	mov.w	r3, #4294967295
 8012284:	e000      	b.n	8012288 <create_chain+0x124>
 8012286:	2301      	movs	r3, #1
 8012288:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801228a:	69fb      	ldr	r3, [r7, #28]
}
 801228c:	4618      	mov	r0, r3
 801228e:	3720      	adds	r7, #32
 8012290:	46bd      	mov	sp, r7
 8012292:	bd80      	pop	{r7, pc}

08012294 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8012294:	b480      	push	{r7}
 8012296:	b087      	sub	sp, #28
 8012298:	af00      	add	r7, sp, #0
 801229a:	6078      	str	r0, [r7, #4]
 801229c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	681b      	ldr	r3, [r3, #0]
 80122a2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80122a8:	3304      	adds	r3, #4
 80122aa:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80122ac:	683b      	ldr	r3, [r7, #0]
 80122ae:	0a5b      	lsrs	r3, r3, #9
 80122b0:	68fa      	ldr	r2, [r7, #12]
 80122b2:	8952      	ldrh	r2, [r2, #10]
 80122b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80122b8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80122ba:	693b      	ldr	r3, [r7, #16]
 80122bc:	1d1a      	adds	r2, r3, #4
 80122be:	613a      	str	r2, [r7, #16]
 80122c0:	681b      	ldr	r3, [r3, #0]
 80122c2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80122c4:	68bb      	ldr	r3, [r7, #8]
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d101      	bne.n	80122ce <clmt_clust+0x3a>
 80122ca:	2300      	movs	r3, #0
 80122cc:	e010      	b.n	80122f0 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80122ce:	697a      	ldr	r2, [r7, #20]
 80122d0:	68bb      	ldr	r3, [r7, #8]
 80122d2:	429a      	cmp	r2, r3
 80122d4:	d307      	bcc.n	80122e6 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80122d6:	697a      	ldr	r2, [r7, #20]
 80122d8:	68bb      	ldr	r3, [r7, #8]
 80122da:	1ad3      	subs	r3, r2, r3
 80122dc:	617b      	str	r3, [r7, #20]
 80122de:	693b      	ldr	r3, [r7, #16]
 80122e0:	3304      	adds	r3, #4
 80122e2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80122e4:	e7e9      	b.n	80122ba <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80122e6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80122e8:	693b      	ldr	r3, [r7, #16]
 80122ea:	681a      	ldr	r2, [r3, #0]
 80122ec:	697b      	ldr	r3, [r7, #20]
 80122ee:	4413      	add	r3, r2
}
 80122f0:	4618      	mov	r0, r3
 80122f2:	371c      	adds	r7, #28
 80122f4:	46bd      	mov	sp, r7
 80122f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122fa:	4770      	bx	lr

080122fc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80122fc:	b580      	push	{r7, lr}
 80122fe:	b086      	sub	sp, #24
 8012300:	af00      	add	r7, sp, #0
 8012302:	6078      	str	r0, [r7, #4]
 8012304:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	681b      	ldr	r3, [r3, #0]
 801230a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801230c:	683b      	ldr	r3, [r7, #0]
 801230e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012312:	d204      	bcs.n	801231e <dir_sdi+0x22>
 8012314:	683b      	ldr	r3, [r7, #0]
 8012316:	f003 031f 	and.w	r3, r3, #31
 801231a:	2b00      	cmp	r3, #0
 801231c:	d001      	beq.n	8012322 <dir_sdi+0x26>
		return FR_INT_ERR;
 801231e:	2302      	movs	r3, #2
 8012320:	e063      	b.n	80123ea <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	683a      	ldr	r2, [r7, #0]
 8012326:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	689b      	ldr	r3, [r3, #8]
 801232c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801232e:	697b      	ldr	r3, [r7, #20]
 8012330:	2b00      	cmp	r3, #0
 8012332:	d106      	bne.n	8012342 <dir_sdi+0x46>
 8012334:	693b      	ldr	r3, [r7, #16]
 8012336:	781b      	ldrb	r3, [r3, #0]
 8012338:	2b02      	cmp	r3, #2
 801233a:	d902      	bls.n	8012342 <dir_sdi+0x46>
		clst = fs->dirbase;
 801233c:	693b      	ldr	r3, [r7, #16]
 801233e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012340:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8012342:	697b      	ldr	r3, [r7, #20]
 8012344:	2b00      	cmp	r3, #0
 8012346:	d10c      	bne.n	8012362 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8012348:	683b      	ldr	r3, [r7, #0]
 801234a:	095b      	lsrs	r3, r3, #5
 801234c:	693a      	ldr	r2, [r7, #16]
 801234e:	8912      	ldrh	r2, [r2, #8]
 8012350:	4293      	cmp	r3, r2
 8012352:	d301      	bcc.n	8012358 <dir_sdi+0x5c>
 8012354:	2302      	movs	r3, #2
 8012356:	e048      	b.n	80123ea <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8012358:	693b      	ldr	r3, [r7, #16]
 801235a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	61da      	str	r2, [r3, #28]
 8012360:	e029      	b.n	80123b6 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8012362:	693b      	ldr	r3, [r7, #16]
 8012364:	895b      	ldrh	r3, [r3, #10]
 8012366:	025b      	lsls	r3, r3, #9
 8012368:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801236a:	e019      	b.n	80123a0 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	6979      	ldr	r1, [r7, #20]
 8012370:	4618      	mov	r0, r3
 8012372:	f7ff fd06 	bl	8011d82 <get_fat>
 8012376:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8012378:	697b      	ldr	r3, [r7, #20]
 801237a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801237e:	d101      	bne.n	8012384 <dir_sdi+0x88>
 8012380:	2301      	movs	r3, #1
 8012382:	e032      	b.n	80123ea <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8012384:	697b      	ldr	r3, [r7, #20]
 8012386:	2b01      	cmp	r3, #1
 8012388:	d904      	bls.n	8012394 <dir_sdi+0x98>
 801238a:	693b      	ldr	r3, [r7, #16]
 801238c:	695b      	ldr	r3, [r3, #20]
 801238e:	697a      	ldr	r2, [r7, #20]
 8012390:	429a      	cmp	r2, r3
 8012392:	d301      	bcc.n	8012398 <dir_sdi+0x9c>
 8012394:	2302      	movs	r3, #2
 8012396:	e028      	b.n	80123ea <dir_sdi+0xee>
			ofs -= csz;
 8012398:	683a      	ldr	r2, [r7, #0]
 801239a:	68fb      	ldr	r3, [r7, #12]
 801239c:	1ad3      	subs	r3, r2, r3
 801239e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80123a0:	683a      	ldr	r2, [r7, #0]
 80123a2:	68fb      	ldr	r3, [r7, #12]
 80123a4:	429a      	cmp	r2, r3
 80123a6:	d2e1      	bcs.n	801236c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80123a8:	6979      	ldr	r1, [r7, #20]
 80123aa:	6938      	ldr	r0, [r7, #16]
 80123ac:	f7ff fcca 	bl	8011d44 <clust2sect>
 80123b0:	4602      	mov	r2, r0
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	697a      	ldr	r2, [r7, #20]
 80123ba:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	69db      	ldr	r3, [r3, #28]
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	d101      	bne.n	80123c8 <dir_sdi+0xcc>
 80123c4:	2302      	movs	r3, #2
 80123c6:	e010      	b.n	80123ea <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	69da      	ldr	r2, [r3, #28]
 80123cc:	683b      	ldr	r3, [r7, #0]
 80123ce:	0a5b      	lsrs	r3, r3, #9
 80123d0:	441a      	add	r2, r3
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80123d6:	693b      	ldr	r3, [r7, #16]
 80123d8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80123dc:	683b      	ldr	r3, [r7, #0]
 80123de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80123e2:	441a      	add	r2, r3
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80123e8:	2300      	movs	r3, #0
}
 80123ea:	4618      	mov	r0, r3
 80123ec:	3718      	adds	r7, #24
 80123ee:	46bd      	mov	sp, r7
 80123f0:	bd80      	pop	{r7, pc}

080123f2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80123f2:	b580      	push	{r7, lr}
 80123f4:	b086      	sub	sp, #24
 80123f6:	af00      	add	r7, sp, #0
 80123f8:	6078      	str	r0, [r7, #4]
 80123fa:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	681b      	ldr	r3, [r3, #0]
 8012400:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	695b      	ldr	r3, [r3, #20]
 8012406:	3320      	adds	r3, #32
 8012408:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	69db      	ldr	r3, [r3, #28]
 801240e:	2b00      	cmp	r3, #0
 8012410:	d003      	beq.n	801241a <dir_next+0x28>
 8012412:	68bb      	ldr	r3, [r7, #8]
 8012414:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012418:	d301      	bcc.n	801241e <dir_next+0x2c>
 801241a:	2304      	movs	r3, #4
 801241c:	e0aa      	b.n	8012574 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801241e:	68bb      	ldr	r3, [r7, #8]
 8012420:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012424:	2b00      	cmp	r3, #0
 8012426:	f040 8098 	bne.w	801255a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	69db      	ldr	r3, [r3, #28]
 801242e:	1c5a      	adds	r2, r3, #1
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	699b      	ldr	r3, [r3, #24]
 8012438:	2b00      	cmp	r3, #0
 801243a:	d10b      	bne.n	8012454 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801243c:	68bb      	ldr	r3, [r7, #8]
 801243e:	095b      	lsrs	r3, r3, #5
 8012440:	68fa      	ldr	r2, [r7, #12]
 8012442:	8912      	ldrh	r2, [r2, #8]
 8012444:	4293      	cmp	r3, r2
 8012446:	f0c0 8088 	bcc.w	801255a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	2200      	movs	r2, #0
 801244e:	61da      	str	r2, [r3, #28]
 8012450:	2304      	movs	r3, #4
 8012452:	e08f      	b.n	8012574 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8012454:	68bb      	ldr	r3, [r7, #8]
 8012456:	0a5b      	lsrs	r3, r3, #9
 8012458:	68fa      	ldr	r2, [r7, #12]
 801245a:	8952      	ldrh	r2, [r2, #10]
 801245c:	3a01      	subs	r2, #1
 801245e:	4013      	ands	r3, r2
 8012460:	2b00      	cmp	r3, #0
 8012462:	d17a      	bne.n	801255a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8012464:	687a      	ldr	r2, [r7, #4]
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	699b      	ldr	r3, [r3, #24]
 801246a:	4619      	mov	r1, r3
 801246c:	4610      	mov	r0, r2
 801246e:	f7ff fc88 	bl	8011d82 <get_fat>
 8012472:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8012474:	697b      	ldr	r3, [r7, #20]
 8012476:	2b01      	cmp	r3, #1
 8012478:	d801      	bhi.n	801247e <dir_next+0x8c>
 801247a:	2302      	movs	r3, #2
 801247c:	e07a      	b.n	8012574 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801247e:	697b      	ldr	r3, [r7, #20]
 8012480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012484:	d101      	bne.n	801248a <dir_next+0x98>
 8012486:	2301      	movs	r3, #1
 8012488:	e074      	b.n	8012574 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801248a:	68fb      	ldr	r3, [r7, #12]
 801248c:	695b      	ldr	r3, [r3, #20]
 801248e:	697a      	ldr	r2, [r7, #20]
 8012490:	429a      	cmp	r2, r3
 8012492:	d358      	bcc.n	8012546 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8012494:	683b      	ldr	r3, [r7, #0]
 8012496:	2b00      	cmp	r3, #0
 8012498:	d104      	bne.n	80124a4 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	2200      	movs	r2, #0
 801249e:	61da      	str	r2, [r3, #28]
 80124a0:	2304      	movs	r3, #4
 80124a2:	e067      	b.n	8012574 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80124a4:	687a      	ldr	r2, [r7, #4]
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	699b      	ldr	r3, [r3, #24]
 80124aa:	4619      	mov	r1, r3
 80124ac:	4610      	mov	r0, r2
 80124ae:	f7ff fe59 	bl	8012164 <create_chain>
 80124b2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80124b4:	697b      	ldr	r3, [r7, #20]
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	d101      	bne.n	80124be <dir_next+0xcc>
 80124ba:	2307      	movs	r3, #7
 80124bc:	e05a      	b.n	8012574 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80124be:	697b      	ldr	r3, [r7, #20]
 80124c0:	2b01      	cmp	r3, #1
 80124c2:	d101      	bne.n	80124c8 <dir_next+0xd6>
 80124c4:	2302      	movs	r3, #2
 80124c6:	e055      	b.n	8012574 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80124c8:	697b      	ldr	r3, [r7, #20]
 80124ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124ce:	d101      	bne.n	80124d4 <dir_next+0xe2>
 80124d0:	2301      	movs	r3, #1
 80124d2:	e04f      	b.n	8012574 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80124d4:	68f8      	ldr	r0, [r7, #12]
 80124d6:	f7ff fb55 	bl	8011b84 <sync_window>
 80124da:	4603      	mov	r3, r0
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d001      	beq.n	80124e4 <dir_next+0xf2>
 80124e0:	2301      	movs	r3, #1
 80124e2:	e047      	b.n	8012574 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80124e4:	68fb      	ldr	r3, [r7, #12]
 80124e6:	3330      	adds	r3, #48	; 0x30
 80124e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80124ec:	2100      	movs	r1, #0
 80124ee:	4618      	mov	r0, r3
 80124f0:	f7ff f97f 	bl	80117f2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80124f4:	2300      	movs	r3, #0
 80124f6:	613b      	str	r3, [r7, #16]
 80124f8:	6979      	ldr	r1, [r7, #20]
 80124fa:	68f8      	ldr	r0, [r7, #12]
 80124fc:	f7ff fc22 	bl	8011d44 <clust2sect>
 8012500:	4602      	mov	r2, r0
 8012502:	68fb      	ldr	r3, [r7, #12]
 8012504:	62da      	str	r2, [r3, #44]	; 0x2c
 8012506:	e012      	b.n	801252e <dir_next+0x13c>
						fs->wflag = 1;
 8012508:	68fb      	ldr	r3, [r7, #12]
 801250a:	2201      	movs	r2, #1
 801250c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801250e:	68f8      	ldr	r0, [r7, #12]
 8012510:	f7ff fb38 	bl	8011b84 <sync_window>
 8012514:	4603      	mov	r3, r0
 8012516:	2b00      	cmp	r3, #0
 8012518:	d001      	beq.n	801251e <dir_next+0x12c>
 801251a:	2301      	movs	r3, #1
 801251c:	e02a      	b.n	8012574 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801251e:	693b      	ldr	r3, [r7, #16]
 8012520:	3301      	adds	r3, #1
 8012522:	613b      	str	r3, [r7, #16]
 8012524:	68fb      	ldr	r3, [r7, #12]
 8012526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012528:	1c5a      	adds	r2, r3, #1
 801252a:	68fb      	ldr	r3, [r7, #12]
 801252c:	62da      	str	r2, [r3, #44]	; 0x2c
 801252e:	68fb      	ldr	r3, [r7, #12]
 8012530:	895b      	ldrh	r3, [r3, #10]
 8012532:	461a      	mov	r2, r3
 8012534:	693b      	ldr	r3, [r7, #16]
 8012536:	4293      	cmp	r3, r2
 8012538:	d3e6      	bcc.n	8012508 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 801253a:	68fb      	ldr	r3, [r7, #12]
 801253c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801253e:	693b      	ldr	r3, [r7, #16]
 8012540:	1ad2      	subs	r2, r2, r3
 8012542:	68fb      	ldr	r3, [r7, #12]
 8012544:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	697a      	ldr	r2, [r7, #20]
 801254a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801254c:	6979      	ldr	r1, [r7, #20]
 801254e:	68f8      	ldr	r0, [r7, #12]
 8012550:	f7ff fbf8 	bl	8011d44 <clust2sect>
 8012554:	4602      	mov	r2, r0
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	68ba      	ldr	r2, [r7, #8]
 801255e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8012560:	68fb      	ldr	r3, [r7, #12]
 8012562:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012566:	68bb      	ldr	r3, [r7, #8]
 8012568:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801256c:	441a      	add	r2, r3
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8012572:	2300      	movs	r3, #0
}
 8012574:	4618      	mov	r0, r3
 8012576:	3718      	adds	r7, #24
 8012578:	46bd      	mov	sp, r7
 801257a:	bd80      	pop	{r7, pc}

0801257c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801257c:	b580      	push	{r7, lr}
 801257e:	b086      	sub	sp, #24
 8012580:	af00      	add	r7, sp, #0
 8012582:	6078      	str	r0, [r7, #4]
 8012584:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	681b      	ldr	r3, [r3, #0]
 801258a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801258c:	2100      	movs	r1, #0
 801258e:	6878      	ldr	r0, [r7, #4]
 8012590:	f7ff feb4 	bl	80122fc <dir_sdi>
 8012594:	4603      	mov	r3, r0
 8012596:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012598:	7dfb      	ldrb	r3, [r7, #23]
 801259a:	2b00      	cmp	r3, #0
 801259c:	d12b      	bne.n	80125f6 <dir_alloc+0x7a>
		n = 0;
 801259e:	2300      	movs	r3, #0
 80125a0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	69db      	ldr	r3, [r3, #28]
 80125a6:	4619      	mov	r1, r3
 80125a8:	68f8      	ldr	r0, [r7, #12]
 80125aa:	f7ff fb2f 	bl	8011c0c <move_window>
 80125ae:	4603      	mov	r3, r0
 80125b0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80125b2:	7dfb      	ldrb	r3, [r7, #23]
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d11d      	bne.n	80125f4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	6a1b      	ldr	r3, [r3, #32]
 80125bc:	781b      	ldrb	r3, [r3, #0]
 80125be:	2be5      	cmp	r3, #229	; 0xe5
 80125c0:	d004      	beq.n	80125cc <dir_alloc+0x50>
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	6a1b      	ldr	r3, [r3, #32]
 80125c6:	781b      	ldrb	r3, [r3, #0]
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d107      	bne.n	80125dc <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80125cc:	693b      	ldr	r3, [r7, #16]
 80125ce:	3301      	adds	r3, #1
 80125d0:	613b      	str	r3, [r7, #16]
 80125d2:	693a      	ldr	r2, [r7, #16]
 80125d4:	683b      	ldr	r3, [r7, #0]
 80125d6:	429a      	cmp	r2, r3
 80125d8:	d102      	bne.n	80125e0 <dir_alloc+0x64>
 80125da:	e00c      	b.n	80125f6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80125dc:	2300      	movs	r3, #0
 80125de:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80125e0:	2101      	movs	r1, #1
 80125e2:	6878      	ldr	r0, [r7, #4]
 80125e4:	f7ff ff05 	bl	80123f2 <dir_next>
 80125e8:	4603      	mov	r3, r0
 80125ea:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80125ec:	7dfb      	ldrb	r3, [r7, #23]
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d0d7      	beq.n	80125a2 <dir_alloc+0x26>
 80125f2:	e000      	b.n	80125f6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80125f4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80125f6:	7dfb      	ldrb	r3, [r7, #23]
 80125f8:	2b04      	cmp	r3, #4
 80125fa:	d101      	bne.n	8012600 <dir_alloc+0x84>
 80125fc:	2307      	movs	r3, #7
 80125fe:	75fb      	strb	r3, [r7, #23]
	return res;
 8012600:	7dfb      	ldrb	r3, [r7, #23]
}
 8012602:	4618      	mov	r0, r3
 8012604:	3718      	adds	r7, #24
 8012606:	46bd      	mov	sp, r7
 8012608:	bd80      	pop	{r7, pc}

0801260a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801260a:	b580      	push	{r7, lr}
 801260c:	b084      	sub	sp, #16
 801260e:	af00      	add	r7, sp, #0
 8012610:	6078      	str	r0, [r7, #4]
 8012612:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8012614:	683b      	ldr	r3, [r7, #0]
 8012616:	331a      	adds	r3, #26
 8012618:	4618      	mov	r0, r3
 801261a:	f7ff f847 	bl	80116ac <ld_word>
 801261e:	4603      	mov	r3, r0
 8012620:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	781b      	ldrb	r3, [r3, #0]
 8012626:	2b03      	cmp	r3, #3
 8012628:	d109      	bne.n	801263e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801262a:	683b      	ldr	r3, [r7, #0]
 801262c:	3314      	adds	r3, #20
 801262e:	4618      	mov	r0, r3
 8012630:	f7ff f83c 	bl	80116ac <ld_word>
 8012634:	4603      	mov	r3, r0
 8012636:	041b      	lsls	r3, r3, #16
 8012638:	68fa      	ldr	r2, [r7, #12]
 801263a:	4313      	orrs	r3, r2
 801263c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801263e:	68fb      	ldr	r3, [r7, #12]
}
 8012640:	4618      	mov	r0, r3
 8012642:	3710      	adds	r7, #16
 8012644:	46bd      	mov	sp, r7
 8012646:	bd80      	pop	{r7, pc}

08012648 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8012648:	b580      	push	{r7, lr}
 801264a:	b084      	sub	sp, #16
 801264c:	af00      	add	r7, sp, #0
 801264e:	60f8      	str	r0, [r7, #12]
 8012650:	60b9      	str	r1, [r7, #8]
 8012652:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8012654:	68bb      	ldr	r3, [r7, #8]
 8012656:	331a      	adds	r3, #26
 8012658:	687a      	ldr	r2, [r7, #4]
 801265a:	b292      	uxth	r2, r2
 801265c:	4611      	mov	r1, r2
 801265e:	4618      	mov	r0, r3
 8012660:	f7ff f85f 	bl	8011722 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8012664:	68fb      	ldr	r3, [r7, #12]
 8012666:	781b      	ldrb	r3, [r3, #0]
 8012668:	2b03      	cmp	r3, #3
 801266a:	d109      	bne.n	8012680 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801266c:	68bb      	ldr	r3, [r7, #8]
 801266e:	f103 0214 	add.w	r2, r3, #20
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	0c1b      	lsrs	r3, r3, #16
 8012676:	b29b      	uxth	r3, r3
 8012678:	4619      	mov	r1, r3
 801267a:	4610      	mov	r0, r2
 801267c:	f7ff f851 	bl	8011722 <st_word>
	}
}
 8012680:	bf00      	nop
 8012682:	3710      	adds	r7, #16
 8012684:	46bd      	mov	sp, r7
 8012686:	bd80      	pop	{r7, pc}

08012688 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8012688:	b580      	push	{r7, lr}
 801268a:	b086      	sub	sp, #24
 801268c:	af00      	add	r7, sp, #0
 801268e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	681b      	ldr	r3, [r3, #0]
 8012694:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8012696:	2100      	movs	r1, #0
 8012698:	6878      	ldr	r0, [r7, #4]
 801269a:	f7ff fe2f 	bl	80122fc <dir_sdi>
 801269e:	4603      	mov	r3, r0
 80126a0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80126a2:	7dfb      	ldrb	r3, [r7, #23]
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	d001      	beq.n	80126ac <dir_find+0x24>
 80126a8:	7dfb      	ldrb	r3, [r7, #23]
 80126aa:	e03e      	b.n	801272a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	69db      	ldr	r3, [r3, #28]
 80126b0:	4619      	mov	r1, r3
 80126b2:	6938      	ldr	r0, [r7, #16]
 80126b4:	f7ff faaa 	bl	8011c0c <move_window>
 80126b8:	4603      	mov	r3, r0
 80126ba:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80126bc:	7dfb      	ldrb	r3, [r7, #23]
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d12f      	bne.n	8012722 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	6a1b      	ldr	r3, [r3, #32]
 80126c6:	781b      	ldrb	r3, [r3, #0]
 80126c8:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80126ca:	7bfb      	ldrb	r3, [r7, #15]
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d102      	bne.n	80126d6 <dir_find+0x4e>
 80126d0:	2304      	movs	r3, #4
 80126d2:	75fb      	strb	r3, [r7, #23]
 80126d4:	e028      	b.n	8012728 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	6a1b      	ldr	r3, [r3, #32]
 80126da:	330b      	adds	r3, #11
 80126dc:	781b      	ldrb	r3, [r3, #0]
 80126de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80126e2:	b2da      	uxtb	r2, r3
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	6a1b      	ldr	r3, [r3, #32]
 80126ec:	330b      	adds	r3, #11
 80126ee:	781b      	ldrb	r3, [r3, #0]
 80126f0:	f003 0308 	and.w	r3, r3, #8
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	d10a      	bne.n	801270e <dir_find+0x86>
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	6a18      	ldr	r0, [r3, #32]
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	3324      	adds	r3, #36	; 0x24
 8012700:	220b      	movs	r2, #11
 8012702:	4619      	mov	r1, r3
 8012704:	f7ff f88f 	bl	8011826 <mem_cmp>
 8012708:	4603      	mov	r3, r0
 801270a:	2b00      	cmp	r3, #0
 801270c:	d00b      	beq.n	8012726 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801270e:	2100      	movs	r1, #0
 8012710:	6878      	ldr	r0, [r7, #4]
 8012712:	f7ff fe6e 	bl	80123f2 <dir_next>
 8012716:	4603      	mov	r3, r0
 8012718:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801271a:	7dfb      	ldrb	r3, [r7, #23]
 801271c:	2b00      	cmp	r3, #0
 801271e:	d0c5      	beq.n	80126ac <dir_find+0x24>
 8012720:	e002      	b.n	8012728 <dir_find+0xa0>
		if (res != FR_OK) break;
 8012722:	bf00      	nop
 8012724:	e000      	b.n	8012728 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8012726:	bf00      	nop

	return res;
 8012728:	7dfb      	ldrb	r3, [r7, #23]
}
 801272a:	4618      	mov	r0, r3
 801272c:	3718      	adds	r7, #24
 801272e:	46bd      	mov	sp, r7
 8012730:	bd80      	pop	{r7, pc}

08012732 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8012732:	b580      	push	{r7, lr}
 8012734:	b084      	sub	sp, #16
 8012736:	af00      	add	r7, sp, #0
 8012738:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	681b      	ldr	r3, [r3, #0]
 801273e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8012740:	2101      	movs	r1, #1
 8012742:	6878      	ldr	r0, [r7, #4]
 8012744:	f7ff ff1a 	bl	801257c <dir_alloc>
 8012748:	4603      	mov	r3, r0
 801274a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801274c:	7bfb      	ldrb	r3, [r7, #15]
 801274e:	2b00      	cmp	r3, #0
 8012750:	d11c      	bne.n	801278c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	69db      	ldr	r3, [r3, #28]
 8012756:	4619      	mov	r1, r3
 8012758:	68b8      	ldr	r0, [r7, #8]
 801275a:	f7ff fa57 	bl	8011c0c <move_window>
 801275e:	4603      	mov	r3, r0
 8012760:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8012762:	7bfb      	ldrb	r3, [r7, #15]
 8012764:	2b00      	cmp	r3, #0
 8012766:	d111      	bne.n	801278c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	6a1b      	ldr	r3, [r3, #32]
 801276c:	2220      	movs	r2, #32
 801276e:	2100      	movs	r1, #0
 8012770:	4618      	mov	r0, r3
 8012772:	f7ff f83e 	bl	80117f2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	6a18      	ldr	r0, [r3, #32]
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	3324      	adds	r3, #36	; 0x24
 801277e:	220b      	movs	r2, #11
 8012780:	4619      	mov	r1, r3
 8012782:	f7ff f815 	bl	80117b0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8012786:	68bb      	ldr	r3, [r7, #8]
 8012788:	2201      	movs	r2, #1
 801278a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801278c:	7bfb      	ldrb	r3, [r7, #15]
}
 801278e:	4618      	mov	r0, r3
 8012790:	3710      	adds	r7, #16
 8012792:	46bd      	mov	sp, r7
 8012794:	bd80      	pop	{r7, pc}
	...

08012798 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8012798:	b580      	push	{r7, lr}
 801279a:	b088      	sub	sp, #32
 801279c:	af00      	add	r7, sp, #0
 801279e:	6078      	str	r0, [r7, #4]
 80127a0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80127a2:	683b      	ldr	r3, [r7, #0]
 80127a4:	681b      	ldr	r3, [r3, #0]
 80127a6:	60fb      	str	r3, [r7, #12]
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	3324      	adds	r3, #36	; 0x24
 80127ac:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80127ae:	220b      	movs	r2, #11
 80127b0:	2120      	movs	r1, #32
 80127b2:	68b8      	ldr	r0, [r7, #8]
 80127b4:	f7ff f81d 	bl	80117f2 <mem_set>
	si = i = 0; ni = 8;
 80127b8:	2300      	movs	r3, #0
 80127ba:	613b      	str	r3, [r7, #16]
 80127bc:	693b      	ldr	r3, [r7, #16]
 80127be:	617b      	str	r3, [r7, #20]
 80127c0:	2308      	movs	r3, #8
 80127c2:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80127c4:	697b      	ldr	r3, [r7, #20]
 80127c6:	1c5a      	adds	r2, r3, #1
 80127c8:	617a      	str	r2, [r7, #20]
 80127ca:	68fa      	ldr	r2, [r7, #12]
 80127cc:	4413      	add	r3, r2
 80127ce:	781b      	ldrb	r3, [r3, #0]
 80127d0:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80127d2:	7ffb      	ldrb	r3, [r7, #31]
 80127d4:	2b20      	cmp	r3, #32
 80127d6:	d94e      	bls.n	8012876 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80127d8:	7ffb      	ldrb	r3, [r7, #31]
 80127da:	2b2f      	cmp	r3, #47	; 0x2f
 80127dc:	d006      	beq.n	80127ec <create_name+0x54>
 80127de:	7ffb      	ldrb	r3, [r7, #31]
 80127e0:	2b5c      	cmp	r3, #92	; 0x5c
 80127e2:	d110      	bne.n	8012806 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80127e4:	e002      	b.n	80127ec <create_name+0x54>
 80127e6:	697b      	ldr	r3, [r7, #20]
 80127e8:	3301      	adds	r3, #1
 80127ea:	617b      	str	r3, [r7, #20]
 80127ec:	68fa      	ldr	r2, [r7, #12]
 80127ee:	697b      	ldr	r3, [r7, #20]
 80127f0:	4413      	add	r3, r2
 80127f2:	781b      	ldrb	r3, [r3, #0]
 80127f4:	2b2f      	cmp	r3, #47	; 0x2f
 80127f6:	d0f6      	beq.n	80127e6 <create_name+0x4e>
 80127f8:	68fa      	ldr	r2, [r7, #12]
 80127fa:	697b      	ldr	r3, [r7, #20]
 80127fc:	4413      	add	r3, r2
 80127fe:	781b      	ldrb	r3, [r3, #0]
 8012800:	2b5c      	cmp	r3, #92	; 0x5c
 8012802:	d0f0      	beq.n	80127e6 <create_name+0x4e>
			break;
 8012804:	e038      	b.n	8012878 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8012806:	7ffb      	ldrb	r3, [r7, #31]
 8012808:	2b2e      	cmp	r3, #46	; 0x2e
 801280a:	d003      	beq.n	8012814 <create_name+0x7c>
 801280c:	693a      	ldr	r2, [r7, #16]
 801280e:	69bb      	ldr	r3, [r7, #24]
 8012810:	429a      	cmp	r2, r3
 8012812:	d30c      	bcc.n	801282e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8012814:	69bb      	ldr	r3, [r7, #24]
 8012816:	2b0b      	cmp	r3, #11
 8012818:	d002      	beq.n	8012820 <create_name+0x88>
 801281a:	7ffb      	ldrb	r3, [r7, #31]
 801281c:	2b2e      	cmp	r3, #46	; 0x2e
 801281e:	d001      	beq.n	8012824 <create_name+0x8c>
 8012820:	2306      	movs	r3, #6
 8012822:	e044      	b.n	80128ae <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8012824:	2308      	movs	r3, #8
 8012826:	613b      	str	r3, [r7, #16]
 8012828:	230b      	movs	r3, #11
 801282a:	61bb      	str	r3, [r7, #24]
			continue;
 801282c:	e022      	b.n	8012874 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 801282e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012832:	2b00      	cmp	r3, #0
 8012834:	da04      	bge.n	8012840 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8012836:	7ffb      	ldrb	r3, [r7, #31]
 8012838:	3b80      	subs	r3, #128	; 0x80
 801283a:	4a1f      	ldr	r2, [pc, #124]	; (80128b8 <create_name+0x120>)
 801283c:	5cd3      	ldrb	r3, [r2, r3]
 801283e:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8012840:	7ffb      	ldrb	r3, [r7, #31]
 8012842:	4619      	mov	r1, r3
 8012844:	481d      	ldr	r0, [pc, #116]	; (80128bc <create_name+0x124>)
 8012846:	f7ff f815 	bl	8011874 <chk_chr>
 801284a:	4603      	mov	r3, r0
 801284c:	2b00      	cmp	r3, #0
 801284e:	d001      	beq.n	8012854 <create_name+0xbc>
 8012850:	2306      	movs	r3, #6
 8012852:	e02c      	b.n	80128ae <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8012854:	7ffb      	ldrb	r3, [r7, #31]
 8012856:	2b60      	cmp	r3, #96	; 0x60
 8012858:	d905      	bls.n	8012866 <create_name+0xce>
 801285a:	7ffb      	ldrb	r3, [r7, #31]
 801285c:	2b7a      	cmp	r3, #122	; 0x7a
 801285e:	d802      	bhi.n	8012866 <create_name+0xce>
 8012860:	7ffb      	ldrb	r3, [r7, #31]
 8012862:	3b20      	subs	r3, #32
 8012864:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8012866:	693b      	ldr	r3, [r7, #16]
 8012868:	1c5a      	adds	r2, r3, #1
 801286a:	613a      	str	r2, [r7, #16]
 801286c:	68ba      	ldr	r2, [r7, #8]
 801286e:	4413      	add	r3, r2
 8012870:	7ffa      	ldrb	r2, [r7, #31]
 8012872:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8012874:	e7a6      	b.n	80127c4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8012876:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8012878:	68fa      	ldr	r2, [r7, #12]
 801287a:	697b      	ldr	r3, [r7, #20]
 801287c:	441a      	add	r2, r3
 801287e:	683b      	ldr	r3, [r7, #0]
 8012880:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8012882:	693b      	ldr	r3, [r7, #16]
 8012884:	2b00      	cmp	r3, #0
 8012886:	d101      	bne.n	801288c <create_name+0xf4>
 8012888:	2306      	movs	r3, #6
 801288a:	e010      	b.n	80128ae <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801288c:	68bb      	ldr	r3, [r7, #8]
 801288e:	781b      	ldrb	r3, [r3, #0]
 8012890:	2be5      	cmp	r3, #229	; 0xe5
 8012892:	d102      	bne.n	801289a <create_name+0x102>
 8012894:	68bb      	ldr	r3, [r7, #8]
 8012896:	2205      	movs	r2, #5
 8012898:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801289a:	7ffb      	ldrb	r3, [r7, #31]
 801289c:	2b20      	cmp	r3, #32
 801289e:	d801      	bhi.n	80128a4 <create_name+0x10c>
 80128a0:	2204      	movs	r2, #4
 80128a2:	e000      	b.n	80128a6 <create_name+0x10e>
 80128a4:	2200      	movs	r2, #0
 80128a6:	68bb      	ldr	r3, [r7, #8]
 80128a8:	330b      	adds	r3, #11
 80128aa:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80128ac:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80128ae:	4618      	mov	r0, r3
 80128b0:	3720      	adds	r7, #32
 80128b2:	46bd      	mov	sp, r7
 80128b4:	bd80      	pop	{r7, pc}
 80128b6:	bf00      	nop
 80128b8:	08015758 	.word	0x08015758
 80128bc:	0801567c 	.word	0x0801567c

080128c0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80128c0:	b580      	push	{r7, lr}
 80128c2:	b086      	sub	sp, #24
 80128c4:	af00      	add	r7, sp, #0
 80128c6:	6078      	str	r0, [r7, #4]
 80128c8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80128ce:	693b      	ldr	r3, [r7, #16]
 80128d0:	681b      	ldr	r3, [r3, #0]
 80128d2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80128d4:	e002      	b.n	80128dc <follow_path+0x1c>
 80128d6:	683b      	ldr	r3, [r7, #0]
 80128d8:	3301      	adds	r3, #1
 80128da:	603b      	str	r3, [r7, #0]
 80128dc:	683b      	ldr	r3, [r7, #0]
 80128de:	781b      	ldrb	r3, [r3, #0]
 80128e0:	2b2f      	cmp	r3, #47	; 0x2f
 80128e2:	d0f8      	beq.n	80128d6 <follow_path+0x16>
 80128e4:	683b      	ldr	r3, [r7, #0]
 80128e6:	781b      	ldrb	r3, [r3, #0]
 80128e8:	2b5c      	cmp	r3, #92	; 0x5c
 80128ea:	d0f4      	beq.n	80128d6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80128ec:	693b      	ldr	r3, [r7, #16]
 80128ee:	2200      	movs	r2, #0
 80128f0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80128f2:	683b      	ldr	r3, [r7, #0]
 80128f4:	781b      	ldrb	r3, [r3, #0]
 80128f6:	2b1f      	cmp	r3, #31
 80128f8:	d80a      	bhi.n	8012910 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	2280      	movs	r2, #128	; 0x80
 80128fe:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8012902:	2100      	movs	r1, #0
 8012904:	6878      	ldr	r0, [r7, #4]
 8012906:	f7ff fcf9 	bl	80122fc <dir_sdi>
 801290a:	4603      	mov	r3, r0
 801290c:	75fb      	strb	r3, [r7, #23]
 801290e:	e043      	b.n	8012998 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012910:	463b      	mov	r3, r7
 8012912:	4619      	mov	r1, r3
 8012914:	6878      	ldr	r0, [r7, #4]
 8012916:	f7ff ff3f 	bl	8012798 <create_name>
 801291a:	4603      	mov	r3, r0
 801291c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801291e:	7dfb      	ldrb	r3, [r7, #23]
 8012920:	2b00      	cmp	r3, #0
 8012922:	d134      	bne.n	801298e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8012924:	6878      	ldr	r0, [r7, #4]
 8012926:	f7ff feaf 	bl	8012688 <dir_find>
 801292a:	4603      	mov	r3, r0
 801292c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012934:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8012936:	7dfb      	ldrb	r3, [r7, #23]
 8012938:	2b00      	cmp	r3, #0
 801293a:	d00a      	beq.n	8012952 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801293c:	7dfb      	ldrb	r3, [r7, #23]
 801293e:	2b04      	cmp	r3, #4
 8012940:	d127      	bne.n	8012992 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8012942:	7afb      	ldrb	r3, [r7, #11]
 8012944:	f003 0304 	and.w	r3, r3, #4
 8012948:	2b00      	cmp	r3, #0
 801294a:	d122      	bne.n	8012992 <follow_path+0xd2>
 801294c:	2305      	movs	r3, #5
 801294e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8012950:	e01f      	b.n	8012992 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012952:	7afb      	ldrb	r3, [r7, #11]
 8012954:	f003 0304 	and.w	r3, r3, #4
 8012958:	2b00      	cmp	r3, #0
 801295a:	d11c      	bne.n	8012996 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801295c:	693b      	ldr	r3, [r7, #16]
 801295e:	799b      	ldrb	r3, [r3, #6]
 8012960:	f003 0310 	and.w	r3, r3, #16
 8012964:	2b00      	cmp	r3, #0
 8012966:	d102      	bne.n	801296e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8012968:	2305      	movs	r3, #5
 801296a:	75fb      	strb	r3, [r7, #23]
 801296c:	e014      	b.n	8012998 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801296e:	68fb      	ldr	r3, [r7, #12]
 8012970:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	695b      	ldr	r3, [r3, #20]
 8012978:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801297c:	4413      	add	r3, r2
 801297e:	4619      	mov	r1, r3
 8012980:	68f8      	ldr	r0, [r7, #12]
 8012982:	f7ff fe42 	bl	801260a <ld_clust>
 8012986:	4602      	mov	r2, r0
 8012988:	693b      	ldr	r3, [r7, #16]
 801298a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801298c:	e7c0      	b.n	8012910 <follow_path+0x50>
			if (res != FR_OK) break;
 801298e:	bf00      	nop
 8012990:	e002      	b.n	8012998 <follow_path+0xd8>
				break;
 8012992:	bf00      	nop
 8012994:	e000      	b.n	8012998 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012996:	bf00      	nop
			}
		}
	}

	return res;
 8012998:	7dfb      	ldrb	r3, [r7, #23]
}
 801299a:	4618      	mov	r0, r3
 801299c:	3718      	adds	r7, #24
 801299e:	46bd      	mov	sp, r7
 80129a0:	bd80      	pop	{r7, pc}

080129a2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80129a2:	b480      	push	{r7}
 80129a4:	b087      	sub	sp, #28
 80129a6:	af00      	add	r7, sp, #0
 80129a8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80129aa:	f04f 33ff 	mov.w	r3, #4294967295
 80129ae:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	681b      	ldr	r3, [r3, #0]
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d031      	beq.n	8012a1c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	681b      	ldr	r3, [r3, #0]
 80129bc:	617b      	str	r3, [r7, #20]
 80129be:	e002      	b.n	80129c6 <get_ldnumber+0x24>
 80129c0:	697b      	ldr	r3, [r7, #20]
 80129c2:	3301      	adds	r3, #1
 80129c4:	617b      	str	r3, [r7, #20]
 80129c6:	697b      	ldr	r3, [r7, #20]
 80129c8:	781b      	ldrb	r3, [r3, #0]
 80129ca:	2b20      	cmp	r3, #32
 80129cc:	d903      	bls.n	80129d6 <get_ldnumber+0x34>
 80129ce:	697b      	ldr	r3, [r7, #20]
 80129d0:	781b      	ldrb	r3, [r3, #0]
 80129d2:	2b3a      	cmp	r3, #58	; 0x3a
 80129d4:	d1f4      	bne.n	80129c0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80129d6:	697b      	ldr	r3, [r7, #20]
 80129d8:	781b      	ldrb	r3, [r3, #0]
 80129da:	2b3a      	cmp	r3, #58	; 0x3a
 80129dc:	d11c      	bne.n	8012a18 <get_ldnumber+0x76>
			tp = *path;
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	681b      	ldr	r3, [r3, #0]
 80129e2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80129e4:	68fb      	ldr	r3, [r7, #12]
 80129e6:	1c5a      	adds	r2, r3, #1
 80129e8:	60fa      	str	r2, [r7, #12]
 80129ea:	781b      	ldrb	r3, [r3, #0]
 80129ec:	3b30      	subs	r3, #48	; 0x30
 80129ee:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80129f0:	68bb      	ldr	r3, [r7, #8]
 80129f2:	2b09      	cmp	r3, #9
 80129f4:	d80e      	bhi.n	8012a14 <get_ldnumber+0x72>
 80129f6:	68fa      	ldr	r2, [r7, #12]
 80129f8:	697b      	ldr	r3, [r7, #20]
 80129fa:	429a      	cmp	r2, r3
 80129fc:	d10a      	bne.n	8012a14 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80129fe:	68bb      	ldr	r3, [r7, #8]
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d107      	bne.n	8012a14 <get_ldnumber+0x72>
					vol = (int)i;
 8012a04:	68bb      	ldr	r3, [r7, #8]
 8012a06:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8012a08:	697b      	ldr	r3, [r7, #20]
 8012a0a:	3301      	adds	r3, #1
 8012a0c:	617b      	str	r3, [r7, #20]
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	697a      	ldr	r2, [r7, #20]
 8012a12:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8012a14:	693b      	ldr	r3, [r7, #16]
 8012a16:	e002      	b.n	8012a1e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8012a18:	2300      	movs	r3, #0
 8012a1a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8012a1c:	693b      	ldr	r3, [r7, #16]
}
 8012a1e:	4618      	mov	r0, r3
 8012a20:	371c      	adds	r7, #28
 8012a22:	46bd      	mov	sp, r7
 8012a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a28:	4770      	bx	lr
	...

08012a2c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8012a2c:	b580      	push	{r7, lr}
 8012a2e:	b082      	sub	sp, #8
 8012a30:	af00      	add	r7, sp, #0
 8012a32:	6078      	str	r0, [r7, #4]
 8012a34:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	2200      	movs	r2, #0
 8012a3a:	70da      	strb	r2, [r3, #3]
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	f04f 32ff 	mov.w	r2, #4294967295
 8012a42:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8012a44:	6839      	ldr	r1, [r7, #0]
 8012a46:	6878      	ldr	r0, [r7, #4]
 8012a48:	f7ff f8e0 	bl	8011c0c <move_window>
 8012a4c:	4603      	mov	r3, r0
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d001      	beq.n	8012a56 <check_fs+0x2a>
 8012a52:	2304      	movs	r3, #4
 8012a54:	e038      	b.n	8012ac8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	3330      	adds	r3, #48	; 0x30
 8012a5a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012a5e:	4618      	mov	r0, r3
 8012a60:	f7fe fe24 	bl	80116ac <ld_word>
 8012a64:	4603      	mov	r3, r0
 8012a66:	461a      	mov	r2, r3
 8012a68:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012a6c:	429a      	cmp	r2, r3
 8012a6e:	d001      	beq.n	8012a74 <check_fs+0x48>
 8012a70:	2303      	movs	r3, #3
 8012a72:	e029      	b.n	8012ac8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012a7a:	2be9      	cmp	r3, #233	; 0xe9
 8012a7c:	d009      	beq.n	8012a92 <check_fs+0x66>
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012a84:	2beb      	cmp	r3, #235	; 0xeb
 8012a86:	d11e      	bne.n	8012ac6 <check_fs+0x9a>
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8012a8e:	2b90      	cmp	r3, #144	; 0x90
 8012a90:	d119      	bne.n	8012ac6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	3330      	adds	r3, #48	; 0x30
 8012a96:	3336      	adds	r3, #54	; 0x36
 8012a98:	4618      	mov	r0, r3
 8012a9a:	f7fe fe1f 	bl	80116dc <ld_dword>
 8012a9e:	4603      	mov	r3, r0
 8012aa0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8012aa4:	4a0a      	ldr	r2, [pc, #40]	; (8012ad0 <check_fs+0xa4>)
 8012aa6:	4293      	cmp	r3, r2
 8012aa8:	d101      	bne.n	8012aae <check_fs+0x82>
 8012aaa:	2300      	movs	r3, #0
 8012aac:	e00c      	b.n	8012ac8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	3330      	adds	r3, #48	; 0x30
 8012ab2:	3352      	adds	r3, #82	; 0x52
 8012ab4:	4618      	mov	r0, r3
 8012ab6:	f7fe fe11 	bl	80116dc <ld_dword>
 8012aba:	4602      	mov	r2, r0
 8012abc:	4b05      	ldr	r3, [pc, #20]	; (8012ad4 <check_fs+0xa8>)
 8012abe:	429a      	cmp	r2, r3
 8012ac0:	d101      	bne.n	8012ac6 <check_fs+0x9a>
 8012ac2:	2300      	movs	r3, #0
 8012ac4:	e000      	b.n	8012ac8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8012ac6:	2302      	movs	r3, #2
}
 8012ac8:	4618      	mov	r0, r3
 8012aca:	3708      	adds	r7, #8
 8012acc:	46bd      	mov	sp, r7
 8012ace:	bd80      	pop	{r7, pc}
 8012ad0:	00544146 	.word	0x00544146
 8012ad4:	33544146 	.word	0x33544146

08012ad8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8012ad8:	b580      	push	{r7, lr}
 8012ada:	b096      	sub	sp, #88	; 0x58
 8012adc:	af00      	add	r7, sp, #0
 8012ade:	60f8      	str	r0, [r7, #12]
 8012ae0:	60b9      	str	r1, [r7, #8]
 8012ae2:	4613      	mov	r3, r2
 8012ae4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8012ae6:	68bb      	ldr	r3, [r7, #8]
 8012ae8:	2200      	movs	r2, #0
 8012aea:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8012aec:	68f8      	ldr	r0, [r7, #12]
 8012aee:	f7ff ff58 	bl	80129a2 <get_ldnumber>
 8012af2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8012af4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	da01      	bge.n	8012afe <find_volume+0x26>
 8012afa:	230b      	movs	r3, #11
 8012afc:	e22e      	b.n	8012f5c <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8012afe:	4aa8      	ldr	r2, [pc, #672]	; (8012da0 <find_volume+0x2c8>)
 8012b00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012b06:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8012b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	d101      	bne.n	8012b12 <find_volume+0x3a>
 8012b0e:	230c      	movs	r3, #12
 8012b10:	e224      	b.n	8012f5c <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8012b12:	68bb      	ldr	r3, [r7, #8]
 8012b14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012b16:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8012b18:	79fb      	ldrb	r3, [r7, #7]
 8012b1a:	f023 0301 	bic.w	r3, r3, #1
 8012b1e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8012b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b22:	781b      	ldrb	r3, [r3, #0]
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	d01a      	beq.n	8012b5e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8012b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b2a:	785b      	ldrb	r3, [r3, #1]
 8012b2c:	4618      	mov	r0, r3
 8012b2e:	f7fe fd1f 	bl	8011570 <disk_status>
 8012b32:	4603      	mov	r3, r0
 8012b34:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8012b38:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012b3c:	f003 0301 	and.w	r3, r3, #1
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	d10c      	bne.n	8012b5e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8012b44:	79fb      	ldrb	r3, [r7, #7]
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d007      	beq.n	8012b5a <find_volume+0x82>
 8012b4a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012b4e:	f003 0304 	and.w	r3, r3, #4
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	d001      	beq.n	8012b5a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8012b56:	230a      	movs	r3, #10
 8012b58:	e200      	b.n	8012f5c <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 8012b5a:	2300      	movs	r3, #0
 8012b5c:	e1fe      	b.n	8012f5c <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8012b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b60:	2200      	movs	r2, #0
 8012b62:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8012b64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b66:	b2da      	uxtb	r2, r3
 8012b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b6a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8012b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b6e:	785b      	ldrb	r3, [r3, #1]
 8012b70:	4618      	mov	r0, r3
 8012b72:	f7fe fd17 	bl	80115a4 <disk_initialize>
 8012b76:	4603      	mov	r3, r0
 8012b78:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8012b7c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012b80:	f003 0301 	and.w	r3, r3, #1
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	d001      	beq.n	8012b8c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8012b88:	2303      	movs	r3, #3
 8012b8a:	e1e7      	b.n	8012f5c <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8012b8c:	79fb      	ldrb	r3, [r7, #7]
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	d007      	beq.n	8012ba2 <find_volume+0xca>
 8012b92:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012b96:	f003 0304 	and.w	r3, r3, #4
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	d001      	beq.n	8012ba2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8012b9e:	230a      	movs	r3, #10
 8012ba0:	e1dc      	b.n	8012f5c <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8012ba2:	2300      	movs	r3, #0
 8012ba4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8012ba6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012ba8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012baa:	f7ff ff3f 	bl	8012a2c <check_fs>
 8012bae:	4603      	mov	r3, r0
 8012bb0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8012bb4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012bb8:	2b02      	cmp	r3, #2
 8012bba:	d14b      	bne.n	8012c54 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012bbc:	2300      	movs	r3, #0
 8012bbe:	643b      	str	r3, [r7, #64]	; 0x40
 8012bc0:	e01f      	b.n	8012c02 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8012bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bc4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012bc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012bca:	011b      	lsls	r3, r3, #4
 8012bcc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8012bd0:	4413      	add	r3, r2
 8012bd2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8012bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bd6:	3304      	adds	r3, #4
 8012bd8:	781b      	ldrb	r3, [r3, #0]
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	d006      	beq.n	8012bec <find_volume+0x114>
 8012bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012be0:	3308      	adds	r3, #8
 8012be2:	4618      	mov	r0, r3
 8012be4:	f7fe fd7a 	bl	80116dc <ld_dword>
 8012be8:	4602      	mov	r2, r0
 8012bea:	e000      	b.n	8012bee <find_volume+0x116>
 8012bec:	2200      	movs	r2, #0
 8012bee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012bf0:	009b      	lsls	r3, r3, #2
 8012bf2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8012bf6:	440b      	add	r3, r1
 8012bf8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012bfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012bfe:	3301      	adds	r3, #1
 8012c00:	643b      	str	r3, [r7, #64]	; 0x40
 8012c02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c04:	2b03      	cmp	r3, #3
 8012c06:	d9dc      	bls.n	8012bc2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8012c08:	2300      	movs	r3, #0
 8012c0a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8012c0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d002      	beq.n	8012c18 <find_volume+0x140>
 8012c12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c14:	3b01      	subs	r3, #1
 8012c16:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8012c18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c1a:	009b      	lsls	r3, r3, #2
 8012c1c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8012c20:	4413      	add	r3, r2
 8012c22:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8012c26:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8012c28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012c2a:	2b00      	cmp	r3, #0
 8012c2c:	d005      	beq.n	8012c3a <find_volume+0x162>
 8012c2e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012c30:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012c32:	f7ff fefb 	bl	8012a2c <check_fs>
 8012c36:	4603      	mov	r3, r0
 8012c38:	e000      	b.n	8012c3c <find_volume+0x164>
 8012c3a:	2303      	movs	r3, #3
 8012c3c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8012c40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012c44:	2b01      	cmp	r3, #1
 8012c46:	d905      	bls.n	8012c54 <find_volume+0x17c>
 8012c48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c4a:	3301      	adds	r3, #1
 8012c4c:	643b      	str	r3, [r7, #64]	; 0x40
 8012c4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c50:	2b03      	cmp	r3, #3
 8012c52:	d9e1      	bls.n	8012c18 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8012c54:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012c58:	2b04      	cmp	r3, #4
 8012c5a:	d101      	bne.n	8012c60 <find_volume+0x188>
 8012c5c:	2301      	movs	r3, #1
 8012c5e:	e17d      	b.n	8012f5c <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8012c60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012c64:	2b01      	cmp	r3, #1
 8012c66:	d901      	bls.n	8012c6c <find_volume+0x194>
 8012c68:	230d      	movs	r3, #13
 8012c6a:	e177      	b.n	8012f5c <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8012c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c6e:	3330      	adds	r3, #48	; 0x30
 8012c70:	330b      	adds	r3, #11
 8012c72:	4618      	mov	r0, r3
 8012c74:	f7fe fd1a 	bl	80116ac <ld_word>
 8012c78:	4603      	mov	r3, r0
 8012c7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012c7e:	d001      	beq.n	8012c84 <find_volume+0x1ac>
 8012c80:	230d      	movs	r3, #13
 8012c82:	e16b      	b.n	8012f5c <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8012c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c86:	3330      	adds	r3, #48	; 0x30
 8012c88:	3316      	adds	r3, #22
 8012c8a:	4618      	mov	r0, r3
 8012c8c:	f7fe fd0e 	bl	80116ac <ld_word>
 8012c90:	4603      	mov	r3, r0
 8012c92:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8012c94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012c96:	2b00      	cmp	r3, #0
 8012c98:	d106      	bne.n	8012ca8 <find_volume+0x1d0>
 8012c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c9c:	3330      	adds	r3, #48	; 0x30
 8012c9e:	3324      	adds	r3, #36	; 0x24
 8012ca0:	4618      	mov	r0, r3
 8012ca2:	f7fe fd1b 	bl	80116dc <ld_dword>
 8012ca6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8012ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012caa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012cac:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8012cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cb0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8012cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cb6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8012cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cba:	789b      	ldrb	r3, [r3, #2]
 8012cbc:	2b01      	cmp	r3, #1
 8012cbe:	d005      	beq.n	8012ccc <find_volume+0x1f4>
 8012cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cc2:	789b      	ldrb	r3, [r3, #2]
 8012cc4:	2b02      	cmp	r3, #2
 8012cc6:	d001      	beq.n	8012ccc <find_volume+0x1f4>
 8012cc8:	230d      	movs	r3, #13
 8012cca:	e147      	b.n	8012f5c <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8012ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cce:	789b      	ldrb	r3, [r3, #2]
 8012cd0:	461a      	mov	r2, r3
 8012cd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012cd4:	fb02 f303 	mul.w	r3, r2, r3
 8012cd8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8012cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012ce0:	b29a      	uxth	r2, r3
 8012ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ce4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8012ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ce8:	895b      	ldrh	r3, [r3, #10]
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	d008      	beq.n	8012d00 <find_volume+0x228>
 8012cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cf0:	895b      	ldrh	r3, [r3, #10]
 8012cf2:	461a      	mov	r2, r3
 8012cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cf6:	895b      	ldrh	r3, [r3, #10]
 8012cf8:	3b01      	subs	r3, #1
 8012cfa:	4013      	ands	r3, r2
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	d001      	beq.n	8012d04 <find_volume+0x22c>
 8012d00:	230d      	movs	r3, #13
 8012d02:	e12b      	b.n	8012f5c <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8012d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d06:	3330      	adds	r3, #48	; 0x30
 8012d08:	3311      	adds	r3, #17
 8012d0a:	4618      	mov	r0, r3
 8012d0c:	f7fe fcce 	bl	80116ac <ld_word>
 8012d10:	4603      	mov	r3, r0
 8012d12:	461a      	mov	r2, r3
 8012d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d16:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8012d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d1a:	891b      	ldrh	r3, [r3, #8]
 8012d1c:	f003 030f 	and.w	r3, r3, #15
 8012d20:	b29b      	uxth	r3, r3
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d001      	beq.n	8012d2a <find_volume+0x252>
 8012d26:	230d      	movs	r3, #13
 8012d28:	e118      	b.n	8012f5c <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8012d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d2c:	3330      	adds	r3, #48	; 0x30
 8012d2e:	3313      	adds	r3, #19
 8012d30:	4618      	mov	r0, r3
 8012d32:	f7fe fcbb 	bl	80116ac <ld_word>
 8012d36:	4603      	mov	r3, r0
 8012d38:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8012d3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	d106      	bne.n	8012d4e <find_volume+0x276>
 8012d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d42:	3330      	adds	r3, #48	; 0x30
 8012d44:	3320      	adds	r3, #32
 8012d46:	4618      	mov	r0, r3
 8012d48:	f7fe fcc8 	bl	80116dc <ld_dword>
 8012d4c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8012d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d50:	3330      	adds	r3, #48	; 0x30
 8012d52:	330e      	adds	r3, #14
 8012d54:	4618      	mov	r0, r3
 8012d56:	f7fe fca9 	bl	80116ac <ld_word>
 8012d5a:	4603      	mov	r3, r0
 8012d5c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8012d5e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	d101      	bne.n	8012d68 <find_volume+0x290>
 8012d64:	230d      	movs	r3, #13
 8012d66:	e0f9      	b.n	8012f5c <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8012d68:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012d6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012d6c:	4413      	add	r3, r2
 8012d6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012d70:	8912      	ldrh	r2, [r2, #8]
 8012d72:	0912      	lsrs	r2, r2, #4
 8012d74:	b292      	uxth	r2, r2
 8012d76:	4413      	add	r3, r2
 8012d78:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8012d7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d7e:	429a      	cmp	r2, r3
 8012d80:	d201      	bcs.n	8012d86 <find_volume+0x2ae>
 8012d82:	230d      	movs	r3, #13
 8012d84:	e0ea      	b.n	8012f5c <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8012d86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d8a:	1ad3      	subs	r3, r2, r3
 8012d8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012d8e:	8952      	ldrh	r2, [r2, #10]
 8012d90:	fbb3 f3f2 	udiv	r3, r3, r2
 8012d94:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8012d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	d103      	bne.n	8012da4 <find_volume+0x2cc>
 8012d9c:	230d      	movs	r3, #13
 8012d9e:	e0dd      	b.n	8012f5c <find_volume+0x484>
 8012da0:	24040204 	.word	0x24040204
		fmt = FS_FAT32;
 8012da4:	2303      	movs	r3, #3
 8012da6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8012daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dac:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8012db0:	4293      	cmp	r3, r2
 8012db2:	d802      	bhi.n	8012dba <find_volume+0x2e2>
 8012db4:	2302      	movs	r3, #2
 8012db6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8012dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dbc:	f640 72f5 	movw	r2, #4085	; 0xff5
 8012dc0:	4293      	cmp	r3, r2
 8012dc2:	d802      	bhi.n	8012dca <find_volume+0x2f2>
 8012dc4:	2301      	movs	r3, #1
 8012dc6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8012dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dcc:	1c9a      	adds	r2, r3, #2
 8012dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dd0:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8012dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dd4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012dd6:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8012dd8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012dda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012ddc:	441a      	add	r2, r3
 8012dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012de0:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8012de2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012de6:	441a      	add	r2, r3
 8012de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dea:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8012dec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012df0:	2b03      	cmp	r3, #3
 8012df2:	d11e      	bne.n	8012e32 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8012df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012df6:	3330      	adds	r3, #48	; 0x30
 8012df8:	332a      	adds	r3, #42	; 0x2a
 8012dfa:	4618      	mov	r0, r3
 8012dfc:	f7fe fc56 	bl	80116ac <ld_word>
 8012e00:	4603      	mov	r3, r0
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	d001      	beq.n	8012e0a <find_volume+0x332>
 8012e06:	230d      	movs	r3, #13
 8012e08:	e0a8      	b.n	8012f5c <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8012e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e0c:	891b      	ldrh	r3, [r3, #8]
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	d001      	beq.n	8012e16 <find_volume+0x33e>
 8012e12:	230d      	movs	r3, #13
 8012e14:	e0a2      	b.n	8012f5c <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8012e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e18:	3330      	adds	r3, #48	; 0x30
 8012e1a:	332c      	adds	r3, #44	; 0x2c
 8012e1c:	4618      	mov	r0, r3
 8012e1e:	f7fe fc5d 	bl	80116dc <ld_dword>
 8012e22:	4602      	mov	r2, r0
 8012e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e26:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8012e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e2a:	695b      	ldr	r3, [r3, #20]
 8012e2c:	009b      	lsls	r3, r3, #2
 8012e2e:	647b      	str	r3, [r7, #68]	; 0x44
 8012e30:	e01f      	b.n	8012e72 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8012e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e34:	891b      	ldrh	r3, [r3, #8]
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d101      	bne.n	8012e3e <find_volume+0x366>
 8012e3a:	230d      	movs	r3, #13
 8012e3c:	e08e      	b.n	8012f5c <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8012e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e40:	6a1a      	ldr	r2, [r3, #32]
 8012e42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012e44:	441a      	add	r2, r3
 8012e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e48:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8012e4a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012e4e:	2b02      	cmp	r3, #2
 8012e50:	d103      	bne.n	8012e5a <find_volume+0x382>
 8012e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e54:	695b      	ldr	r3, [r3, #20]
 8012e56:	005b      	lsls	r3, r3, #1
 8012e58:	e00a      	b.n	8012e70 <find_volume+0x398>
 8012e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e5c:	695a      	ldr	r2, [r3, #20]
 8012e5e:	4613      	mov	r3, r2
 8012e60:	005b      	lsls	r3, r3, #1
 8012e62:	4413      	add	r3, r2
 8012e64:	085a      	lsrs	r2, r3, #1
 8012e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e68:	695b      	ldr	r3, [r3, #20]
 8012e6a:	f003 0301 	and.w	r3, r3, #1
 8012e6e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8012e70:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8012e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e74:	699a      	ldr	r2, [r3, #24]
 8012e76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012e78:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8012e7c:	0a5b      	lsrs	r3, r3, #9
 8012e7e:	429a      	cmp	r2, r3
 8012e80:	d201      	bcs.n	8012e86 <find_volume+0x3ae>
 8012e82:	230d      	movs	r3, #13
 8012e84:	e06a      	b.n	8012f5c <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8012e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e88:	f04f 32ff 	mov.w	r2, #4294967295
 8012e8c:	611a      	str	r2, [r3, #16]
 8012e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e90:	691a      	ldr	r2, [r3, #16]
 8012e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e94:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8012e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e98:	2280      	movs	r2, #128	; 0x80
 8012e9a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8012e9c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012ea0:	2b03      	cmp	r3, #3
 8012ea2:	d149      	bne.n	8012f38 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8012ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ea6:	3330      	adds	r3, #48	; 0x30
 8012ea8:	3330      	adds	r3, #48	; 0x30
 8012eaa:	4618      	mov	r0, r3
 8012eac:	f7fe fbfe 	bl	80116ac <ld_word>
 8012eb0:	4603      	mov	r3, r0
 8012eb2:	2b01      	cmp	r3, #1
 8012eb4:	d140      	bne.n	8012f38 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8012eb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012eb8:	3301      	adds	r3, #1
 8012eba:	4619      	mov	r1, r3
 8012ebc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012ebe:	f7fe fea5 	bl	8011c0c <move_window>
 8012ec2:	4603      	mov	r3, r0
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	d137      	bne.n	8012f38 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8012ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012eca:	2200      	movs	r2, #0
 8012ecc:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8012ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ed0:	3330      	adds	r3, #48	; 0x30
 8012ed2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012ed6:	4618      	mov	r0, r3
 8012ed8:	f7fe fbe8 	bl	80116ac <ld_word>
 8012edc:	4603      	mov	r3, r0
 8012ede:	461a      	mov	r2, r3
 8012ee0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012ee4:	429a      	cmp	r2, r3
 8012ee6:	d127      	bne.n	8012f38 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8012ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012eea:	3330      	adds	r3, #48	; 0x30
 8012eec:	4618      	mov	r0, r3
 8012eee:	f7fe fbf5 	bl	80116dc <ld_dword>
 8012ef2:	4602      	mov	r2, r0
 8012ef4:	4b1b      	ldr	r3, [pc, #108]	; (8012f64 <find_volume+0x48c>)
 8012ef6:	429a      	cmp	r2, r3
 8012ef8:	d11e      	bne.n	8012f38 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8012efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012efc:	3330      	adds	r3, #48	; 0x30
 8012efe:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8012f02:	4618      	mov	r0, r3
 8012f04:	f7fe fbea 	bl	80116dc <ld_dword>
 8012f08:	4602      	mov	r2, r0
 8012f0a:	4b17      	ldr	r3, [pc, #92]	; (8012f68 <find_volume+0x490>)
 8012f0c:	429a      	cmp	r2, r3
 8012f0e:	d113      	bne.n	8012f38 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8012f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f12:	3330      	adds	r3, #48	; 0x30
 8012f14:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8012f18:	4618      	mov	r0, r3
 8012f1a:	f7fe fbdf 	bl	80116dc <ld_dword>
 8012f1e:	4602      	mov	r2, r0
 8012f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f22:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8012f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f26:	3330      	adds	r3, #48	; 0x30
 8012f28:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8012f2c:	4618      	mov	r0, r3
 8012f2e:	f7fe fbd5 	bl	80116dc <ld_dword>
 8012f32:	4602      	mov	r2, r0
 8012f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f36:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8012f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f3a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8012f3e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8012f40:	4b0a      	ldr	r3, [pc, #40]	; (8012f6c <find_volume+0x494>)
 8012f42:	881b      	ldrh	r3, [r3, #0]
 8012f44:	3301      	adds	r3, #1
 8012f46:	b29a      	uxth	r2, r3
 8012f48:	4b08      	ldr	r3, [pc, #32]	; (8012f6c <find_volume+0x494>)
 8012f4a:	801a      	strh	r2, [r3, #0]
 8012f4c:	4b07      	ldr	r3, [pc, #28]	; (8012f6c <find_volume+0x494>)
 8012f4e:	881a      	ldrh	r2, [r3, #0]
 8012f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f52:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8012f54:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012f56:	f7fe fdf1 	bl	8011b3c <clear_lock>
#endif
	return FR_OK;
 8012f5a:	2300      	movs	r3, #0
}
 8012f5c:	4618      	mov	r0, r3
 8012f5e:	3758      	adds	r7, #88	; 0x58
 8012f60:	46bd      	mov	sp, r7
 8012f62:	bd80      	pop	{r7, pc}
 8012f64:	41615252 	.word	0x41615252
 8012f68:	61417272 	.word	0x61417272
 8012f6c:	24040208 	.word	0x24040208

08012f70 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8012f70:	b580      	push	{r7, lr}
 8012f72:	b084      	sub	sp, #16
 8012f74:	af00      	add	r7, sp, #0
 8012f76:	6078      	str	r0, [r7, #4]
 8012f78:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8012f7a:	2309      	movs	r3, #9
 8012f7c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	d01c      	beq.n	8012fbe <validate+0x4e>
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	681b      	ldr	r3, [r3, #0]
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	d018      	beq.n	8012fbe <validate+0x4e>
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	681b      	ldr	r3, [r3, #0]
 8012f90:	781b      	ldrb	r3, [r3, #0]
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	d013      	beq.n	8012fbe <validate+0x4e>
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	889a      	ldrh	r2, [r3, #4]
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	681b      	ldr	r3, [r3, #0]
 8012f9e:	88db      	ldrh	r3, [r3, #6]
 8012fa0:	429a      	cmp	r2, r3
 8012fa2:	d10c      	bne.n	8012fbe <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	681b      	ldr	r3, [r3, #0]
 8012fa8:	785b      	ldrb	r3, [r3, #1]
 8012faa:	4618      	mov	r0, r3
 8012fac:	f7fe fae0 	bl	8011570 <disk_status>
 8012fb0:	4603      	mov	r3, r0
 8012fb2:	f003 0301 	and.w	r3, r3, #1
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	d101      	bne.n	8012fbe <validate+0x4e>
			res = FR_OK;
 8012fba:	2300      	movs	r3, #0
 8012fbc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8012fbe:	7bfb      	ldrb	r3, [r7, #15]
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d102      	bne.n	8012fca <validate+0x5a>
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	681b      	ldr	r3, [r3, #0]
 8012fc8:	e000      	b.n	8012fcc <validate+0x5c>
 8012fca:	2300      	movs	r3, #0
 8012fcc:	683a      	ldr	r2, [r7, #0]
 8012fce:	6013      	str	r3, [r2, #0]
	return res;
 8012fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8012fd2:	4618      	mov	r0, r3
 8012fd4:	3710      	adds	r7, #16
 8012fd6:	46bd      	mov	sp, r7
 8012fd8:	bd80      	pop	{r7, pc}
	...

08012fdc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8012fdc:	b580      	push	{r7, lr}
 8012fde:	b088      	sub	sp, #32
 8012fe0:	af00      	add	r7, sp, #0
 8012fe2:	60f8      	str	r0, [r7, #12]
 8012fe4:	60b9      	str	r1, [r7, #8]
 8012fe6:	4613      	mov	r3, r2
 8012fe8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8012fea:	68bb      	ldr	r3, [r7, #8]
 8012fec:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8012fee:	f107 0310 	add.w	r3, r7, #16
 8012ff2:	4618      	mov	r0, r3
 8012ff4:	f7ff fcd5 	bl	80129a2 <get_ldnumber>
 8012ff8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8012ffa:	69fb      	ldr	r3, [r7, #28]
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	da01      	bge.n	8013004 <f_mount+0x28>
 8013000:	230b      	movs	r3, #11
 8013002:	e02b      	b.n	801305c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8013004:	4a17      	ldr	r2, [pc, #92]	; (8013064 <f_mount+0x88>)
 8013006:	69fb      	ldr	r3, [r7, #28]
 8013008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801300c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801300e:	69bb      	ldr	r3, [r7, #24]
 8013010:	2b00      	cmp	r3, #0
 8013012:	d005      	beq.n	8013020 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8013014:	69b8      	ldr	r0, [r7, #24]
 8013016:	f7fe fd91 	bl	8011b3c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801301a:	69bb      	ldr	r3, [r7, #24]
 801301c:	2200      	movs	r2, #0
 801301e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8013020:	68fb      	ldr	r3, [r7, #12]
 8013022:	2b00      	cmp	r3, #0
 8013024:	d002      	beq.n	801302c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8013026:	68fb      	ldr	r3, [r7, #12]
 8013028:	2200      	movs	r2, #0
 801302a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801302c:	68fa      	ldr	r2, [r7, #12]
 801302e:	490d      	ldr	r1, [pc, #52]	; (8013064 <f_mount+0x88>)
 8013030:	69fb      	ldr	r3, [r7, #28]
 8013032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8013036:	68fb      	ldr	r3, [r7, #12]
 8013038:	2b00      	cmp	r3, #0
 801303a:	d002      	beq.n	8013042 <f_mount+0x66>
 801303c:	79fb      	ldrb	r3, [r7, #7]
 801303e:	2b01      	cmp	r3, #1
 8013040:	d001      	beq.n	8013046 <f_mount+0x6a>
 8013042:	2300      	movs	r3, #0
 8013044:	e00a      	b.n	801305c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8013046:	f107 010c 	add.w	r1, r7, #12
 801304a:	f107 0308 	add.w	r3, r7, #8
 801304e:	2200      	movs	r2, #0
 8013050:	4618      	mov	r0, r3
 8013052:	f7ff fd41 	bl	8012ad8 <find_volume>
 8013056:	4603      	mov	r3, r0
 8013058:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801305a:	7dfb      	ldrb	r3, [r7, #23]
}
 801305c:	4618      	mov	r0, r3
 801305e:	3720      	adds	r7, #32
 8013060:	46bd      	mov	sp, r7
 8013062:	bd80      	pop	{r7, pc}
 8013064:	24040204 	.word	0x24040204

08013068 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8013068:	b580      	push	{r7, lr}
 801306a:	b098      	sub	sp, #96	; 0x60
 801306c:	af00      	add	r7, sp, #0
 801306e:	60f8      	str	r0, [r7, #12]
 8013070:	60b9      	str	r1, [r7, #8]
 8013072:	4613      	mov	r3, r2
 8013074:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8013076:	68fb      	ldr	r3, [r7, #12]
 8013078:	2b00      	cmp	r3, #0
 801307a:	d101      	bne.n	8013080 <f_open+0x18>
 801307c:	2309      	movs	r3, #9
 801307e:	e1ad      	b.n	80133dc <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8013080:	79fb      	ldrb	r3, [r7, #7]
 8013082:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013086:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8013088:	79fa      	ldrb	r2, [r7, #7]
 801308a:	f107 0110 	add.w	r1, r7, #16
 801308e:	f107 0308 	add.w	r3, r7, #8
 8013092:	4618      	mov	r0, r3
 8013094:	f7ff fd20 	bl	8012ad8 <find_volume>
 8013098:	4603      	mov	r3, r0
 801309a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 801309e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	f040 8191 	bne.w	80133ca <f_open+0x362>
		dj.obj.fs = fs;
 80130a8:	693b      	ldr	r3, [r7, #16]
 80130aa:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80130ac:	68ba      	ldr	r2, [r7, #8]
 80130ae:	f107 0314 	add.w	r3, r7, #20
 80130b2:	4611      	mov	r1, r2
 80130b4:	4618      	mov	r0, r3
 80130b6:	f7ff fc03 	bl	80128c0 <follow_path>
 80130ba:	4603      	mov	r3, r0
 80130bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80130c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80130c4:	2b00      	cmp	r3, #0
 80130c6:	d11a      	bne.n	80130fe <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80130c8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80130cc:	b25b      	sxtb	r3, r3
 80130ce:	2b00      	cmp	r3, #0
 80130d0:	da03      	bge.n	80130da <f_open+0x72>
				res = FR_INVALID_NAME;
 80130d2:	2306      	movs	r3, #6
 80130d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80130d8:	e011      	b.n	80130fe <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80130da:	79fb      	ldrb	r3, [r7, #7]
 80130dc:	f023 0301 	bic.w	r3, r3, #1
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	bf14      	ite	ne
 80130e4:	2301      	movne	r3, #1
 80130e6:	2300      	moveq	r3, #0
 80130e8:	b2db      	uxtb	r3, r3
 80130ea:	461a      	mov	r2, r3
 80130ec:	f107 0314 	add.w	r3, r7, #20
 80130f0:	4611      	mov	r1, r2
 80130f2:	4618      	mov	r0, r3
 80130f4:	f7fe fbda 	bl	80118ac <chk_lock>
 80130f8:	4603      	mov	r3, r0
 80130fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80130fe:	79fb      	ldrb	r3, [r7, #7]
 8013100:	f003 031c 	and.w	r3, r3, #28
 8013104:	2b00      	cmp	r3, #0
 8013106:	d07f      	beq.n	8013208 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8013108:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801310c:	2b00      	cmp	r3, #0
 801310e:	d017      	beq.n	8013140 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8013110:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013114:	2b04      	cmp	r3, #4
 8013116:	d10e      	bne.n	8013136 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8013118:	f7fe fc24 	bl	8011964 <enq_lock>
 801311c:	4603      	mov	r3, r0
 801311e:	2b00      	cmp	r3, #0
 8013120:	d006      	beq.n	8013130 <f_open+0xc8>
 8013122:	f107 0314 	add.w	r3, r7, #20
 8013126:	4618      	mov	r0, r3
 8013128:	f7ff fb03 	bl	8012732 <dir_register>
 801312c:	4603      	mov	r3, r0
 801312e:	e000      	b.n	8013132 <f_open+0xca>
 8013130:	2312      	movs	r3, #18
 8013132:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8013136:	79fb      	ldrb	r3, [r7, #7]
 8013138:	f043 0308 	orr.w	r3, r3, #8
 801313c:	71fb      	strb	r3, [r7, #7]
 801313e:	e010      	b.n	8013162 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8013140:	7ebb      	ldrb	r3, [r7, #26]
 8013142:	f003 0311 	and.w	r3, r3, #17
 8013146:	2b00      	cmp	r3, #0
 8013148:	d003      	beq.n	8013152 <f_open+0xea>
					res = FR_DENIED;
 801314a:	2307      	movs	r3, #7
 801314c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013150:	e007      	b.n	8013162 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8013152:	79fb      	ldrb	r3, [r7, #7]
 8013154:	f003 0304 	and.w	r3, r3, #4
 8013158:	2b00      	cmp	r3, #0
 801315a:	d002      	beq.n	8013162 <f_open+0xfa>
 801315c:	2308      	movs	r3, #8
 801315e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8013162:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013166:	2b00      	cmp	r3, #0
 8013168:	d168      	bne.n	801323c <f_open+0x1d4>
 801316a:	79fb      	ldrb	r3, [r7, #7]
 801316c:	f003 0308 	and.w	r3, r3, #8
 8013170:	2b00      	cmp	r3, #0
 8013172:	d063      	beq.n	801323c <f_open+0x1d4>
				dw = GET_FATTIME();
 8013174:	f7fb f8fe 	bl	800e374 <get_fattime>
 8013178:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801317a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801317c:	330e      	adds	r3, #14
 801317e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013180:	4618      	mov	r0, r3
 8013182:	f7fe fae9 	bl	8011758 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8013186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013188:	3316      	adds	r3, #22
 801318a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801318c:	4618      	mov	r0, r3
 801318e:	f7fe fae3 	bl	8011758 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8013192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013194:	330b      	adds	r3, #11
 8013196:	2220      	movs	r2, #32
 8013198:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801319a:	693b      	ldr	r3, [r7, #16]
 801319c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801319e:	4611      	mov	r1, r2
 80131a0:	4618      	mov	r0, r3
 80131a2:	f7ff fa32 	bl	801260a <ld_clust>
 80131a6:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80131a8:	693b      	ldr	r3, [r7, #16]
 80131aa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80131ac:	2200      	movs	r2, #0
 80131ae:	4618      	mov	r0, r3
 80131b0:	f7ff fa4a 	bl	8012648 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80131b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80131b6:	331c      	adds	r3, #28
 80131b8:	2100      	movs	r1, #0
 80131ba:	4618      	mov	r0, r3
 80131bc:	f7fe facc 	bl	8011758 <st_dword>
					fs->wflag = 1;
 80131c0:	693b      	ldr	r3, [r7, #16]
 80131c2:	2201      	movs	r2, #1
 80131c4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80131c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d037      	beq.n	801323c <f_open+0x1d4>
						dw = fs->winsect;
 80131cc:	693b      	ldr	r3, [r7, #16]
 80131ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80131d0:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80131d2:	f107 0314 	add.w	r3, r7, #20
 80131d6:	2200      	movs	r2, #0
 80131d8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80131da:	4618      	mov	r0, r3
 80131dc:	f7fe ff5d 	bl	801209a <remove_chain>
 80131e0:	4603      	mov	r3, r0
 80131e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80131e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d126      	bne.n	801323c <f_open+0x1d4>
							res = move_window(fs, dw);
 80131ee:	693b      	ldr	r3, [r7, #16]
 80131f0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80131f2:	4618      	mov	r0, r3
 80131f4:	f7fe fd0a 	bl	8011c0c <move_window>
 80131f8:	4603      	mov	r3, r0
 80131fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80131fe:	693b      	ldr	r3, [r7, #16]
 8013200:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013202:	3a01      	subs	r2, #1
 8013204:	60da      	str	r2, [r3, #12]
 8013206:	e019      	b.n	801323c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8013208:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801320c:	2b00      	cmp	r3, #0
 801320e:	d115      	bne.n	801323c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8013210:	7ebb      	ldrb	r3, [r7, #26]
 8013212:	f003 0310 	and.w	r3, r3, #16
 8013216:	2b00      	cmp	r3, #0
 8013218:	d003      	beq.n	8013222 <f_open+0x1ba>
					res = FR_NO_FILE;
 801321a:	2304      	movs	r3, #4
 801321c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013220:	e00c      	b.n	801323c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8013222:	79fb      	ldrb	r3, [r7, #7]
 8013224:	f003 0302 	and.w	r3, r3, #2
 8013228:	2b00      	cmp	r3, #0
 801322a:	d007      	beq.n	801323c <f_open+0x1d4>
 801322c:	7ebb      	ldrb	r3, [r7, #26]
 801322e:	f003 0301 	and.w	r3, r3, #1
 8013232:	2b00      	cmp	r3, #0
 8013234:	d002      	beq.n	801323c <f_open+0x1d4>
						res = FR_DENIED;
 8013236:	2307      	movs	r3, #7
 8013238:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 801323c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013240:	2b00      	cmp	r3, #0
 8013242:	d128      	bne.n	8013296 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8013244:	79fb      	ldrb	r3, [r7, #7]
 8013246:	f003 0308 	and.w	r3, r3, #8
 801324a:	2b00      	cmp	r3, #0
 801324c:	d003      	beq.n	8013256 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 801324e:	79fb      	ldrb	r3, [r7, #7]
 8013250:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013254:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8013256:	693b      	ldr	r3, [r7, #16]
 8013258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801325a:	68fb      	ldr	r3, [r7, #12]
 801325c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 801325e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013260:	68fb      	ldr	r3, [r7, #12]
 8013262:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013264:	79fb      	ldrb	r3, [r7, #7]
 8013266:	f023 0301 	bic.w	r3, r3, #1
 801326a:	2b00      	cmp	r3, #0
 801326c:	bf14      	ite	ne
 801326e:	2301      	movne	r3, #1
 8013270:	2300      	moveq	r3, #0
 8013272:	b2db      	uxtb	r3, r3
 8013274:	461a      	mov	r2, r3
 8013276:	f107 0314 	add.w	r3, r7, #20
 801327a:	4611      	mov	r1, r2
 801327c:	4618      	mov	r0, r3
 801327e:	f7fe fb93 	bl	80119a8 <inc_lock>
 8013282:	4602      	mov	r2, r0
 8013284:	68fb      	ldr	r3, [r7, #12]
 8013286:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8013288:	68fb      	ldr	r3, [r7, #12]
 801328a:	691b      	ldr	r3, [r3, #16]
 801328c:	2b00      	cmp	r3, #0
 801328e:	d102      	bne.n	8013296 <f_open+0x22e>
 8013290:	2302      	movs	r3, #2
 8013292:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8013296:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801329a:	2b00      	cmp	r3, #0
 801329c:	f040 8095 	bne.w	80133ca <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80132a0:	693b      	ldr	r3, [r7, #16]
 80132a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80132a4:	4611      	mov	r1, r2
 80132a6:	4618      	mov	r0, r3
 80132a8:	f7ff f9af 	bl	801260a <ld_clust>
 80132ac:	4602      	mov	r2, r0
 80132ae:	68fb      	ldr	r3, [r7, #12]
 80132b0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80132b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80132b4:	331c      	adds	r3, #28
 80132b6:	4618      	mov	r0, r3
 80132b8:	f7fe fa10 	bl	80116dc <ld_dword>
 80132bc:	4602      	mov	r2, r0
 80132be:	68fb      	ldr	r3, [r7, #12]
 80132c0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80132c2:	68fb      	ldr	r3, [r7, #12]
 80132c4:	2200      	movs	r2, #0
 80132c6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80132c8:	693a      	ldr	r2, [r7, #16]
 80132ca:	68fb      	ldr	r3, [r7, #12]
 80132cc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80132ce:	693b      	ldr	r3, [r7, #16]
 80132d0:	88da      	ldrh	r2, [r3, #6]
 80132d2:	68fb      	ldr	r3, [r7, #12]
 80132d4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80132d6:	68fb      	ldr	r3, [r7, #12]
 80132d8:	79fa      	ldrb	r2, [r7, #7]
 80132da:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80132dc:	68fb      	ldr	r3, [r7, #12]
 80132de:	2200      	movs	r2, #0
 80132e0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80132e2:	68fb      	ldr	r3, [r7, #12]
 80132e4:	2200      	movs	r2, #0
 80132e6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80132e8:	68fb      	ldr	r3, [r7, #12]
 80132ea:	2200      	movs	r2, #0
 80132ec:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80132ee:	68fb      	ldr	r3, [r7, #12]
 80132f0:	3330      	adds	r3, #48	; 0x30
 80132f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80132f6:	2100      	movs	r1, #0
 80132f8:	4618      	mov	r0, r3
 80132fa:	f7fe fa7a 	bl	80117f2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80132fe:	79fb      	ldrb	r3, [r7, #7]
 8013300:	f003 0320 	and.w	r3, r3, #32
 8013304:	2b00      	cmp	r3, #0
 8013306:	d060      	beq.n	80133ca <f_open+0x362>
 8013308:	68fb      	ldr	r3, [r7, #12]
 801330a:	68db      	ldr	r3, [r3, #12]
 801330c:	2b00      	cmp	r3, #0
 801330e:	d05c      	beq.n	80133ca <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8013310:	68fb      	ldr	r3, [r7, #12]
 8013312:	68da      	ldr	r2, [r3, #12]
 8013314:	68fb      	ldr	r3, [r7, #12]
 8013316:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8013318:	693b      	ldr	r3, [r7, #16]
 801331a:	895b      	ldrh	r3, [r3, #10]
 801331c:	025b      	lsls	r3, r3, #9
 801331e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8013320:	68fb      	ldr	r3, [r7, #12]
 8013322:	689b      	ldr	r3, [r3, #8]
 8013324:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013326:	68fb      	ldr	r3, [r7, #12]
 8013328:	68db      	ldr	r3, [r3, #12]
 801332a:	657b      	str	r3, [r7, #84]	; 0x54
 801332c:	e016      	b.n	801335c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 801332e:	68fb      	ldr	r3, [r7, #12]
 8013330:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013332:	4618      	mov	r0, r3
 8013334:	f7fe fd25 	bl	8011d82 <get_fat>
 8013338:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 801333a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801333c:	2b01      	cmp	r3, #1
 801333e:	d802      	bhi.n	8013346 <f_open+0x2de>
 8013340:	2302      	movs	r3, #2
 8013342:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8013346:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013348:	f1b3 3fff 	cmp.w	r3, #4294967295
 801334c:	d102      	bne.n	8013354 <f_open+0x2ec>
 801334e:	2301      	movs	r3, #1
 8013350:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013354:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013356:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013358:	1ad3      	subs	r3, r2, r3
 801335a:	657b      	str	r3, [r7, #84]	; 0x54
 801335c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013360:	2b00      	cmp	r3, #0
 8013362:	d103      	bne.n	801336c <f_open+0x304>
 8013364:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013366:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013368:	429a      	cmp	r2, r3
 801336a:	d8e0      	bhi.n	801332e <f_open+0x2c6>
				}
				fp->clust = clst;
 801336c:	68fb      	ldr	r3, [r7, #12]
 801336e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013370:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8013372:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013376:	2b00      	cmp	r3, #0
 8013378:	d127      	bne.n	80133ca <f_open+0x362>
 801337a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801337c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013380:	2b00      	cmp	r3, #0
 8013382:	d022      	beq.n	80133ca <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8013384:	693b      	ldr	r3, [r7, #16]
 8013386:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013388:	4618      	mov	r0, r3
 801338a:	f7fe fcdb 	bl	8011d44 <clust2sect>
 801338e:	6478      	str	r0, [r7, #68]	; 0x44
 8013390:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013392:	2b00      	cmp	r3, #0
 8013394:	d103      	bne.n	801339e <f_open+0x336>
						res = FR_INT_ERR;
 8013396:	2302      	movs	r3, #2
 8013398:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801339c:	e015      	b.n	80133ca <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801339e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80133a0:	0a5a      	lsrs	r2, r3, #9
 80133a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80133a4:	441a      	add	r2, r3
 80133a6:	68fb      	ldr	r3, [r7, #12]
 80133a8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80133aa:	693b      	ldr	r3, [r7, #16]
 80133ac:	7858      	ldrb	r0, [r3, #1]
 80133ae:	68fb      	ldr	r3, [r7, #12]
 80133b0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80133b4:	68fb      	ldr	r3, [r7, #12]
 80133b6:	6a1a      	ldr	r2, [r3, #32]
 80133b8:	2301      	movs	r3, #1
 80133ba:	f7fe f919 	bl	80115f0 <disk_read>
 80133be:	4603      	mov	r3, r0
 80133c0:	2b00      	cmp	r3, #0
 80133c2:	d002      	beq.n	80133ca <f_open+0x362>
 80133c4:	2301      	movs	r3, #1
 80133c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80133ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	d002      	beq.n	80133d8 <f_open+0x370>
 80133d2:	68fb      	ldr	r3, [r7, #12]
 80133d4:	2200      	movs	r2, #0
 80133d6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80133d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80133dc:	4618      	mov	r0, r3
 80133de:	3760      	adds	r7, #96	; 0x60
 80133e0:	46bd      	mov	sp, r7
 80133e2:	bd80      	pop	{r7, pc}

080133e4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80133e4:	b580      	push	{r7, lr}
 80133e6:	b08e      	sub	sp, #56	; 0x38
 80133e8:	af00      	add	r7, sp, #0
 80133ea:	60f8      	str	r0, [r7, #12]
 80133ec:	60b9      	str	r1, [r7, #8]
 80133ee:	607a      	str	r2, [r7, #4]
 80133f0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80133f2:	68bb      	ldr	r3, [r7, #8]
 80133f4:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80133f6:	683b      	ldr	r3, [r7, #0]
 80133f8:	2200      	movs	r2, #0
 80133fa:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80133fc:	68fb      	ldr	r3, [r7, #12]
 80133fe:	f107 0214 	add.w	r2, r7, #20
 8013402:	4611      	mov	r1, r2
 8013404:	4618      	mov	r0, r3
 8013406:	f7ff fdb3 	bl	8012f70 <validate>
 801340a:	4603      	mov	r3, r0
 801340c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8013410:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013414:	2b00      	cmp	r3, #0
 8013416:	d107      	bne.n	8013428 <f_read+0x44>
 8013418:	68fb      	ldr	r3, [r7, #12]
 801341a:	7d5b      	ldrb	r3, [r3, #21]
 801341c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013420:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013424:	2b00      	cmp	r3, #0
 8013426:	d002      	beq.n	801342e <f_read+0x4a>
 8013428:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801342c:	e115      	b.n	801365a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 801342e:	68fb      	ldr	r3, [r7, #12]
 8013430:	7d1b      	ldrb	r3, [r3, #20]
 8013432:	f003 0301 	and.w	r3, r3, #1
 8013436:	2b00      	cmp	r3, #0
 8013438:	d101      	bne.n	801343e <f_read+0x5a>
 801343a:	2307      	movs	r3, #7
 801343c:	e10d      	b.n	801365a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 801343e:	68fb      	ldr	r3, [r7, #12]
 8013440:	68da      	ldr	r2, [r3, #12]
 8013442:	68fb      	ldr	r3, [r7, #12]
 8013444:	699b      	ldr	r3, [r3, #24]
 8013446:	1ad3      	subs	r3, r2, r3
 8013448:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 801344a:	687a      	ldr	r2, [r7, #4]
 801344c:	6a3b      	ldr	r3, [r7, #32]
 801344e:	429a      	cmp	r2, r3
 8013450:	f240 80fe 	bls.w	8013650 <f_read+0x26c>
 8013454:	6a3b      	ldr	r3, [r7, #32]
 8013456:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8013458:	e0fa      	b.n	8013650 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801345a:	68fb      	ldr	r3, [r7, #12]
 801345c:	699b      	ldr	r3, [r3, #24]
 801345e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013462:	2b00      	cmp	r3, #0
 8013464:	f040 80c6 	bne.w	80135f4 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8013468:	68fb      	ldr	r3, [r7, #12]
 801346a:	699b      	ldr	r3, [r3, #24]
 801346c:	0a5b      	lsrs	r3, r3, #9
 801346e:	697a      	ldr	r2, [r7, #20]
 8013470:	8952      	ldrh	r2, [r2, #10]
 8013472:	3a01      	subs	r2, #1
 8013474:	4013      	ands	r3, r2
 8013476:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8013478:	69fb      	ldr	r3, [r7, #28]
 801347a:	2b00      	cmp	r3, #0
 801347c:	d12f      	bne.n	80134de <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 801347e:	68fb      	ldr	r3, [r7, #12]
 8013480:	699b      	ldr	r3, [r3, #24]
 8013482:	2b00      	cmp	r3, #0
 8013484:	d103      	bne.n	801348e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8013486:	68fb      	ldr	r3, [r7, #12]
 8013488:	689b      	ldr	r3, [r3, #8]
 801348a:	633b      	str	r3, [r7, #48]	; 0x30
 801348c:	e013      	b.n	80134b6 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801348e:	68fb      	ldr	r3, [r7, #12]
 8013490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013492:	2b00      	cmp	r3, #0
 8013494:	d007      	beq.n	80134a6 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8013496:	68fb      	ldr	r3, [r7, #12]
 8013498:	699b      	ldr	r3, [r3, #24]
 801349a:	4619      	mov	r1, r3
 801349c:	68f8      	ldr	r0, [r7, #12]
 801349e:	f7fe fef9 	bl	8012294 <clmt_clust>
 80134a2:	6338      	str	r0, [r7, #48]	; 0x30
 80134a4:	e007      	b.n	80134b6 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80134a6:	68fa      	ldr	r2, [r7, #12]
 80134a8:	68fb      	ldr	r3, [r7, #12]
 80134aa:	69db      	ldr	r3, [r3, #28]
 80134ac:	4619      	mov	r1, r3
 80134ae:	4610      	mov	r0, r2
 80134b0:	f7fe fc67 	bl	8011d82 <get_fat>
 80134b4:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80134b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134b8:	2b01      	cmp	r3, #1
 80134ba:	d804      	bhi.n	80134c6 <f_read+0xe2>
 80134bc:	68fb      	ldr	r3, [r7, #12]
 80134be:	2202      	movs	r2, #2
 80134c0:	755a      	strb	r2, [r3, #21]
 80134c2:	2302      	movs	r3, #2
 80134c4:	e0c9      	b.n	801365a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80134c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80134cc:	d104      	bne.n	80134d8 <f_read+0xf4>
 80134ce:	68fb      	ldr	r3, [r7, #12]
 80134d0:	2201      	movs	r2, #1
 80134d2:	755a      	strb	r2, [r3, #21]
 80134d4:	2301      	movs	r3, #1
 80134d6:	e0c0      	b.n	801365a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 80134d8:	68fb      	ldr	r3, [r7, #12]
 80134da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80134dc:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80134de:	697a      	ldr	r2, [r7, #20]
 80134e0:	68fb      	ldr	r3, [r7, #12]
 80134e2:	69db      	ldr	r3, [r3, #28]
 80134e4:	4619      	mov	r1, r3
 80134e6:	4610      	mov	r0, r2
 80134e8:	f7fe fc2c 	bl	8011d44 <clust2sect>
 80134ec:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80134ee:	69bb      	ldr	r3, [r7, #24]
 80134f0:	2b00      	cmp	r3, #0
 80134f2:	d104      	bne.n	80134fe <f_read+0x11a>
 80134f4:	68fb      	ldr	r3, [r7, #12]
 80134f6:	2202      	movs	r2, #2
 80134f8:	755a      	strb	r2, [r3, #21]
 80134fa:	2302      	movs	r3, #2
 80134fc:	e0ad      	b.n	801365a <f_read+0x276>
			sect += csect;
 80134fe:	69ba      	ldr	r2, [r7, #24]
 8013500:	69fb      	ldr	r3, [r7, #28]
 8013502:	4413      	add	r3, r2
 8013504:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	0a5b      	lsrs	r3, r3, #9
 801350a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 801350c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801350e:	2b00      	cmp	r3, #0
 8013510:	d039      	beq.n	8013586 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013512:	69fa      	ldr	r2, [r7, #28]
 8013514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013516:	4413      	add	r3, r2
 8013518:	697a      	ldr	r2, [r7, #20]
 801351a:	8952      	ldrh	r2, [r2, #10]
 801351c:	4293      	cmp	r3, r2
 801351e:	d905      	bls.n	801352c <f_read+0x148>
					cc = fs->csize - csect;
 8013520:	697b      	ldr	r3, [r7, #20]
 8013522:	895b      	ldrh	r3, [r3, #10]
 8013524:	461a      	mov	r2, r3
 8013526:	69fb      	ldr	r3, [r7, #28]
 8013528:	1ad3      	subs	r3, r2, r3
 801352a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801352c:	697b      	ldr	r3, [r7, #20]
 801352e:	7858      	ldrb	r0, [r3, #1]
 8013530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013532:	69ba      	ldr	r2, [r7, #24]
 8013534:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013536:	f7fe f85b 	bl	80115f0 <disk_read>
 801353a:	4603      	mov	r3, r0
 801353c:	2b00      	cmp	r3, #0
 801353e:	d004      	beq.n	801354a <f_read+0x166>
 8013540:	68fb      	ldr	r3, [r7, #12]
 8013542:	2201      	movs	r2, #1
 8013544:	755a      	strb	r2, [r3, #21]
 8013546:	2301      	movs	r3, #1
 8013548:	e087      	b.n	801365a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801354a:	68fb      	ldr	r3, [r7, #12]
 801354c:	7d1b      	ldrb	r3, [r3, #20]
 801354e:	b25b      	sxtb	r3, r3
 8013550:	2b00      	cmp	r3, #0
 8013552:	da14      	bge.n	801357e <f_read+0x19a>
 8013554:	68fb      	ldr	r3, [r7, #12]
 8013556:	6a1a      	ldr	r2, [r3, #32]
 8013558:	69bb      	ldr	r3, [r7, #24]
 801355a:	1ad3      	subs	r3, r2, r3
 801355c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801355e:	429a      	cmp	r2, r3
 8013560:	d90d      	bls.n	801357e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8013562:	68fb      	ldr	r3, [r7, #12]
 8013564:	6a1a      	ldr	r2, [r3, #32]
 8013566:	69bb      	ldr	r3, [r7, #24]
 8013568:	1ad3      	subs	r3, r2, r3
 801356a:	025b      	lsls	r3, r3, #9
 801356c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801356e:	18d0      	adds	r0, r2, r3
 8013570:	68fb      	ldr	r3, [r7, #12]
 8013572:	3330      	adds	r3, #48	; 0x30
 8013574:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013578:	4619      	mov	r1, r3
 801357a:	f7fe f919 	bl	80117b0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 801357e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013580:	025b      	lsls	r3, r3, #9
 8013582:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8013584:	e050      	b.n	8013628 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8013586:	68fb      	ldr	r3, [r7, #12]
 8013588:	6a1b      	ldr	r3, [r3, #32]
 801358a:	69ba      	ldr	r2, [r7, #24]
 801358c:	429a      	cmp	r2, r3
 801358e:	d02e      	beq.n	80135ee <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8013590:	68fb      	ldr	r3, [r7, #12]
 8013592:	7d1b      	ldrb	r3, [r3, #20]
 8013594:	b25b      	sxtb	r3, r3
 8013596:	2b00      	cmp	r3, #0
 8013598:	da18      	bge.n	80135cc <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801359a:	697b      	ldr	r3, [r7, #20]
 801359c:	7858      	ldrb	r0, [r3, #1]
 801359e:	68fb      	ldr	r3, [r7, #12]
 80135a0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80135a4:	68fb      	ldr	r3, [r7, #12]
 80135a6:	6a1a      	ldr	r2, [r3, #32]
 80135a8:	2301      	movs	r3, #1
 80135aa:	f7fe f841 	bl	8011630 <disk_write>
 80135ae:	4603      	mov	r3, r0
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	d004      	beq.n	80135be <f_read+0x1da>
 80135b4:	68fb      	ldr	r3, [r7, #12]
 80135b6:	2201      	movs	r2, #1
 80135b8:	755a      	strb	r2, [r3, #21]
 80135ba:	2301      	movs	r3, #1
 80135bc:	e04d      	b.n	801365a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 80135be:	68fb      	ldr	r3, [r7, #12]
 80135c0:	7d1b      	ldrb	r3, [r3, #20]
 80135c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80135c6:	b2da      	uxtb	r2, r3
 80135c8:	68fb      	ldr	r3, [r7, #12]
 80135ca:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80135cc:	697b      	ldr	r3, [r7, #20]
 80135ce:	7858      	ldrb	r0, [r3, #1]
 80135d0:	68fb      	ldr	r3, [r7, #12]
 80135d2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80135d6:	2301      	movs	r3, #1
 80135d8:	69ba      	ldr	r2, [r7, #24]
 80135da:	f7fe f809 	bl	80115f0 <disk_read>
 80135de:	4603      	mov	r3, r0
 80135e0:	2b00      	cmp	r3, #0
 80135e2:	d004      	beq.n	80135ee <f_read+0x20a>
 80135e4:	68fb      	ldr	r3, [r7, #12]
 80135e6:	2201      	movs	r2, #1
 80135e8:	755a      	strb	r2, [r3, #21]
 80135ea:	2301      	movs	r3, #1
 80135ec:	e035      	b.n	801365a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80135ee:	68fb      	ldr	r3, [r7, #12]
 80135f0:	69ba      	ldr	r2, [r7, #24]
 80135f2:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80135f4:	68fb      	ldr	r3, [r7, #12]
 80135f6:	699b      	ldr	r3, [r3, #24]
 80135f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80135fc:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8013600:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8013602:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	429a      	cmp	r2, r3
 8013608:	d901      	bls.n	801360e <f_read+0x22a>
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 801360e:	68fb      	ldr	r3, [r7, #12]
 8013610:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013614:	68fb      	ldr	r3, [r7, #12]
 8013616:	699b      	ldr	r3, [r3, #24]
 8013618:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801361c:	4413      	add	r3, r2
 801361e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013620:	4619      	mov	r1, r3
 8013622:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013624:	f7fe f8c4 	bl	80117b0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8013628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801362a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801362c:	4413      	add	r3, r2
 801362e:	627b      	str	r3, [r7, #36]	; 0x24
 8013630:	68fb      	ldr	r3, [r7, #12]
 8013632:	699a      	ldr	r2, [r3, #24]
 8013634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013636:	441a      	add	r2, r3
 8013638:	68fb      	ldr	r3, [r7, #12]
 801363a:	619a      	str	r2, [r3, #24]
 801363c:	683b      	ldr	r3, [r7, #0]
 801363e:	681a      	ldr	r2, [r3, #0]
 8013640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013642:	441a      	add	r2, r3
 8013644:	683b      	ldr	r3, [r7, #0]
 8013646:	601a      	str	r2, [r3, #0]
 8013648:	687a      	ldr	r2, [r7, #4]
 801364a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801364c:	1ad3      	subs	r3, r2, r3
 801364e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	2b00      	cmp	r3, #0
 8013654:	f47f af01 	bne.w	801345a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8013658:	2300      	movs	r3, #0
}
 801365a:	4618      	mov	r0, r3
 801365c:	3738      	adds	r7, #56	; 0x38
 801365e:	46bd      	mov	sp, r7
 8013660:	bd80      	pop	{r7, pc}

08013662 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8013662:	b580      	push	{r7, lr}
 8013664:	b08c      	sub	sp, #48	; 0x30
 8013666:	af00      	add	r7, sp, #0
 8013668:	60f8      	str	r0, [r7, #12]
 801366a:	60b9      	str	r1, [r7, #8]
 801366c:	607a      	str	r2, [r7, #4]
 801366e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8013670:	68bb      	ldr	r3, [r7, #8]
 8013672:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8013674:	683b      	ldr	r3, [r7, #0]
 8013676:	2200      	movs	r2, #0
 8013678:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801367a:	68fb      	ldr	r3, [r7, #12]
 801367c:	f107 0210 	add.w	r2, r7, #16
 8013680:	4611      	mov	r1, r2
 8013682:	4618      	mov	r0, r3
 8013684:	f7ff fc74 	bl	8012f70 <validate>
 8013688:	4603      	mov	r3, r0
 801368a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801368e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013692:	2b00      	cmp	r3, #0
 8013694:	d107      	bne.n	80136a6 <f_write+0x44>
 8013696:	68fb      	ldr	r3, [r7, #12]
 8013698:	7d5b      	ldrb	r3, [r3, #21]
 801369a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801369e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	d002      	beq.n	80136ac <f_write+0x4a>
 80136a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80136aa:	e14b      	b.n	8013944 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80136ac:	68fb      	ldr	r3, [r7, #12]
 80136ae:	7d1b      	ldrb	r3, [r3, #20]
 80136b0:	f003 0302 	and.w	r3, r3, #2
 80136b4:	2b00      	cmp	r3, #0
 80136b6:	d101      	bne.n	80136bc <f_write+0x5a>
 80136b8:	2307      	movs	r3, #7
 80136ba:	e143      	b.n	8013944 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80136bc:	68fb      	ldr	r3, [r7, #12]
 80136be:	699a      	ldr	r2, [r3, #24]
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	441a      	add	r2, r3
 80136c4:	68fb      	ldr	r3, [r7, #12]
 80136c6:	699b      	ldr	r3, [r3, #24]
 80136c8:	429a      	cmp	r2, r3
 80136ca:	f080 812d 	bcs.w	8013928 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80136ce:	68fb      	ldr	r3, [r7, #12]
 80136d0:	699b      	ldr	r3, [r3, #24]
 80136d2:	43db      	mvns	r3, r3
 80136d4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80136d6:	e127      	b.n	8013928 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80136d8:	68fb      	ldr	r3, [r7, #12]
 80136da:	699b      	ldr	r3, [r3, #24]
 80136dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80136e0:	2b00      	cmp	r3, #0
 80136e2:	f040 80e3 	bne.w	80138ac <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80136e6:	68fb      	ldr	r3, [r7, #12]
 80136e8:	699b      	ldr	r3, [r3, #24]
 80136ea:	0a5b      	lsrs	r3, r3, #9
 80136ec:	693a      	ldr	r2, [r7, #16]
 80136ee:	8952      	ldrh	r2, [r2, #10]
 80136f0:	3a01      	subs	r2, #1
 80136f2:	4013      	ands	r3, r2
 80136f4:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80136f6:	69bb      	ldr	r3, [r7, #24]
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	d143      	bne.n	8013784 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80136fc:	68fb      	ldr	r3, [r7, #12]
 80136fe:	699b      	ldr	r3, [r3, #24]
 8013700:	2b00      	cmp	r3, #0
 8013702:	d10c      	bne.n	801371e <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8013704:	68fb      	ldr	r3, [r7, #12]
 8013706:	689b      	ldr	r3, [r3, #8]
 8013708:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801370a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801370c:	2b00      	cmp	r3, #0
 801370e:	d11a      	bne.n	8013746 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8013710:	68fb      	ldr	r3, [r7, #12]
 8013712:	2100      	movs	r1, #0
 8013714:	4618      	mov	r0, r3
 8013716:	f7fe fd25 	bl	8012164 <create_chain>
 801371a:	62b8      	str	r0, [r7, #40]	; 0x28
 801371c:	e013      	b.n	8013746 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801371e:	68fb      	ldr	r3, [r7, #12]
 8013720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013722:	2b00      	cmp	r3, #0
 8013724:	d007      	beq.n	8013736 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8013726:	68fb      	ldr	r3, [r7, #12]
 8013728:	699b      	ldr	r3, [r3, #24]
 801372a:	4619      	mov	r1, r3
 801372c:	68f8      	ldr	r0, [r7, #12]
 801372e:	f7fe fdb1 	bl	8012294 <clmt_clust>
 8013732:	62b8      	str	r0, [r7, #40]	; 0x28
 8013734:	e007      	b.n	8013746 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8013736:	68fa      	ldr	r2, [r7, #12]
 8013738:	68fb      	ldr	r3, [r7, #12]
 801373a:	69db      	ldr	r3, [r3, #28]
 801373c:	4619      	mov	r1, r3
 801373e:	4610      	mov	r0, r2
 8013740:	f7fe fd10 	bl	8012164 <create_chain>
 8013744:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013748:	2b00      	cmp	r3, #0
 801374a:	f000 80f2 	beq.w	8013932 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801374e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013750:	2b01      	cmp	r3, #1
 8013752:	d104      	bne.n	801375e <f_write+0xfc>
 8013754:	68fb      	ldr	r3, [r7, #12]
 8013756:	2202      	movs	r2, #2
 8013758:	755a      	strb	r2, [r3, #21]
 801375a:	2302      	movs	r3, #2
 801375c:	e0f2      	b.n	8013944 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801375e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013764:	d104      	bne.n	8013770 <f_write+0x10e>
 8013766:	68fb      	ldr	r3, [r7, #12]
 8013768:	2201      	movs	r2, #1
 801376a:	755a      	strb	r2, [r3, #21]
 801376c:	2301      	movs	r3, #1
 801376e:	e0e9      	b.n	8013944 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8013770:	68fb      	ldr	r3, [r7, #12]
 8013772:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013774:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8013776:	68fb      	ldr	r3, [r7, #12]
 8013778:	689b      	ldr	r3, [r3, #8]
 801377a:	2b00      	cmp	r3, #0
 801377c:	d102      	bne.n	8013784 <f_write+0x122>
 801377e:	68fb      	ldr	r3, [r7, #12]
 8013780:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013782:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8013784:	68fb      	ldr	r3, [r7, #12]
 8013786:	7d1b      	ldrb	r3, [r3, #20]
 8013788:	b25b      	sxtb	r3, r3
 801378a:	2b00      	cmp	r3, #0
 801378c:	da18      	bge.n	80137c0 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801378e:	693b      	ldr	r3, [r7, #16]
 8013790:	7858      	ldrb	r0, [r3, #1]
 8013792:	68fb      	ldr	r3, [r7, #12]
 8013794:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013798:	68fb      	ldr	r3, [r7, #12]
 801379a:	6a1a      	ldr	r2, [r3, #32]
 801379c:	2301      	movs	r3, #1
 801379e:	f7fd ff47 	bl	8011630 <disk_write>
 80137a2:	4603      	mov	r3, r0
 80137a4:	2b00      	cmp	r3, #0
 80137a6:	d004      	beq.n	80137b2 <f_write+0x150>
 80137a8:	68fb      	ldr	r3, [r7, #12]
 80137aa:	2201      	movs	r2, #1
 80137ac:	755a      	strb	r2, [r3, #21]
 80137ae:	2301      	movs	r3, #1
 80137b0:	e0c8      	b.n	8013944 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80137b2:	68fb      	ldr	r3, [r7, #12]
 80137b4:	7d1b      	ldrb	r3, [r3, #20]
 80137b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80137ba:	b2da      	uxtb	r2, r3
 80137bc:	68fb      	ldr	r3, [r7, #12]
 80137be:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80137c0:	693a      	ldr	r2, [r7, #16]
 80137c2:	68fb      	ldr	r3, [r7, #12]
 80137c4:	69db      	ldr	r3, [r3, #28]
 80137c6:	4619      	mov	r1, r3
 80137c8:	4610      	mov	r0, r2
 80137ca:	f7fe fabb 	bl	8011d44 <clust2sect>
 80137ce:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80137d0:	697b      	ldr	r3, [r7, #20]
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	d104      	bne.n	80137e0 <f_write+0x17e>
 80137d6:	68fb      	ldr	r3, [r7, #12]
 80137d8:	2202      	movs	r2, #2
 80137da:	755a      	strb	r2, [r3, #21]
 80137dc:	2302      	movs	r3, #2
 80137de:	e0b1      	b.n	8013944 <f_write+0x2e2>
			sect += csect;
 80137e0:	697a      	ldr	r2, [r7, #20]
 80137e2:	69bb      	ldr	r3, [r7, #24]
 80137e4:	4413      	add	r3, r2
 80137e6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	0a5b      	lsrs	r3, r3, #9
 80137ec:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80137ee:	6a3b      	ldr	r3, [r7, #32]
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	d03c      	beq.n	801386e <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80137f4:	69ba      	ldr	r2, [r7, #24]
 80137f6:	6a3b      	ldr	r3, [r7, #32]
 80137f8:	4413      	add	r3, r2
 80137fa:	693a      	ldr	r2, [r7, #16]
 80137fc:	8952      	ldrh	r2, [r2, #10]
 80137fe:	4293      	cmp	r3, r2
 8013800:	d905      	bls.n	801380e <f_write+0x1ac>
					cc = fs->csize - csect;
 8013802:	693b      	ldr	r3, [r7, #16]
 8013804:	895b      	ldrh	r3, [r3, #10]
 8013806:	461a      	mov	r2, r3
 8013808:	69bb      	ldr	r3, [r7, #24]
 801380a:	1ad3      	subs	r3, r2, r3
 801380c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801380e:	693b      	ldr	r3, [r7, #16]
 8013810:	7858      	ldrb	r0, [r3, #1]
 8013812:	6a3b      	ldr	r3, [r7, #32]
 8013814:	697a      	ldr	r2, [r7, #20]
 8013816:	69f9      	ldr	r1, [r7, #28]
 8013818:	f7fd ff0a 	bl	8011630 <disk_write>
 801381c:	4603      	mov	r3, r0
 801381e:	2b00      	cmp	r3, #0
 8013820:	d004      	beq.n	801382c <f_write+0x1ca>
 8013822:	68fb      	ldr	r3, [r7, #12]
 8013824:	2201      	movs	r2, #1
 8013826:	755a      	strb	r2, [r3, #21]
 8013828:	2301      	movs	r3, #1
 801382a:	e08b      	b.n	8013944 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801382c:	68fb      	ldr	r3, [r7, #12]
 801382e:	6a1a      	ldr	r2, [r3, #32]
 8013830:	697b      	ldr	r3, [r7, #20]
 8013832:	1ad3      	subs	r3, r2, r3
 8013834:	6a3a      	ldr	r2, [r7, #32]
 8013836:	429a      	cmp	r2, r3
 8013838:	d915      	bls.n	8013866 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801383a:	68fb      	ldr	r3, [r7, #12]
 801383c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8013840:	68fb      	ldr	r3, [r7, #12]
 8013842:	6a1a      	ldr	r2, [r3, #32]
 8013844:	697b      	ldr	r3, [r7, #20]
 8013846:	1ad3      	subs	r3, r2, r3
 8013848:	025b      	lsls	r3, r3, #9
 801384a:	69fa      	ldr	r2, [r7, #28]
 801384c:	4413      	add	r3, r2
 801384e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013852:	4619      	mov	r1, r3
 8013854:	f7fd ffac 	bl	80117b0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013858:	68fb      	ldr	r3, [r7, #12]
 801385a:	7d1b      	ldrb	r3, [r3, #20]
 801385c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013860:	b2da      	uxtb	r2, r3
 8013862:	68fb      	ldr	r3, [r7, #12]
 8013864:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8013866:	6a3b      	ldr	r3, [r7, #32]
 8013868:	025b      	lsls	r3, r3, #9
 801386a:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 801386c:	e03f      	b.n	80138ee <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801386e:	68fb      	ldr	r3, [r7, #12]
 8013870:	6a1b      	ldr	r3, [r3, #32]
 8013872:	697a      	ldr	r2, [r7, #20]
 8013874:	429a      	cmp	r2, r3
 8013876:	d016      	beq.n	80138a6 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8013878:	68fb      	ldr	r3, [r7, #12]
 801387a:	699a      	ldr	r2, [r3, #24]
 801387c:	68fb      	ldr	r3, [r7, #12]
 801387e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013880:	429a      	cmp	r2, r3
 8013882:	d210      	bcs.n	80138a6 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8013884:	693b      	ldr	r3, [r7, #16]
 8013886:	7858      	ldrb	r0, [r3, #1]
 8013888:	68fb      	ldr	r3, [r7, #12]
 801388a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801388e:	2301      	movs	r3, #1
 8013890:	697a      	ldr	r2, [r7, #20]
 8013892:	f7fd fead 	bl	80115f0 <disk_read>
 8013896:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8013898:	2b00      	cmp	r3, #0
 801389a:	d004      	beq.n	80138a6 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 801389c:	68fb      	ldr	r3, [r7, #12]
 801389e:	2201      	movs	r2, #1
 80138a0:	755a      	strb	r2, [r3, #21]
 80138a2:	2301      	movs	r3, #1
 80138a4:	e04e      	b.n	8013944 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80138a6:	68fb      	ldr	r3, [r7, #12]
 80138a8:	697a      	ldr	r2, [r7, #20]
 80138aa:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80138ac:	68fb      	ldr	r3, [r7, #12]
 80138ae:	699b      	ldr	r3, [r3, #24]
 80138b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80138b4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80138b8:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80138ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	429a      	cmp	r2, r3
 80138c0:	d901      	bls.n	80138c6 <f_write+0x264>
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80138c6:	68fb      	ldr	r3, [r7, #12]
 80138c8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80138cc:	68fb      	ldr	r3, [r7, #12]
 80138ce:	699b      	ldr	r3, [r3, #24]
 80138d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80138d4:	4413      	add	r3, r2
 80138d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80138d8:	69f9      	ldr	r1, [r7, #28]
 80138da:	4618      	mov	r0, r3
 80138dc:	f7fd ff68 	bl	80117b0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80138e0:	68fb      	ldr	r3, [r7, #12]
 80138e2:	7d1b      	ldrb	r3, [r3, #20]
 80138e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80138e8:	b2da      	uxtb	r2, r3
 80138ea:	68fb      	ldr	r3, [r7, #12]
 80138ec:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80138ee:	69fa      	ldr	r2, [r7, #28]
 80138f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138f2:	4413      	add	r3, r2
 80138f4:	61fb      	str	r3, [r7, #28]
 80138f6:	68fb      	ldr	r3, [r7, #12]
 80138f8:	699a      	ldr	r2, [r3, #24]
 80138fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138fc:	441a      	add	r2, r3
 80138fe:	68fb      	ldr	r3, [r7, #12]
 8013900:	619a      	str	r2, [r3, #24]
 8013902:	68fb      	ldr	r3, [r7, #12]
 8013904:	68da      	ldr	r2, [r3, #12]
 8013906:	68fb      	ldr	r3, [r7, #12]
 8013908:	699b      	ldr	r3, [r3, #24]
 801390a:	429a      	cmp	r2, r3
 801390c:	bf38      	it	cc
 801390e:	461a      	movcc	r2, r3
 8013910:	68fb      	ldr	r3, [r7, #12]
 8013912:	60da      	str	r2, [r3, #12]
 8013914:	683b      	ldr	r3, [r7, #0]
 8013916:	681a      	ldr	r2, [r3, #0]
 8013918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801391a:	441a      	add	r2, r3
 801391c:	683b      	ldr	r3, [r7, #0]
 801391e:	601a      	str	r2, [r3, #0]
 8013920:	687a      	ldr	r2, [r7, #4]
 8013922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013924:	1ad3      	subs	r3, r2, r3
 8013926:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	2b00      	cmp	r3, #0
 801392c:	f47f aed4 	bne.w	80136d8 <f_write+0x76>
 8013930:	e000      	b.n	8013934 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013932:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8013934:	68fb      	ldr	r3, [r7, #12]
 8013936:	7d1b      	ldrb	r3, [r3, #20]
 8013938:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801393c:	b2da      	uxtb	r2, r3
 801393e:	68fb      	ldr	r3, [r7, #12]
 8013940:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8013942:	2300      	movs	r3, #0
}
 8013944:	4618      	mov	r0, r3
 8013946:	3730      	adds	r7, #48	; 0x30
 8013948:	46bd      	mov	sp, r7
 801394a:	bd80      	pop	{r7, pc}

0801394c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801394c:	b580      	push	{r7, lr}
 801394e:	b086      	sub	sp, #24
 8013950:	af00      	add	r7, sp, #0
 8013952:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	f107 0208 	add.w	r2, r7, #8
 801395a:	4611      	mov	r1, r2
 801395c:	4618      	mov	r0, r3
 801395e:	f7ff fb07 	bl	8012f70 <validate>
 8013962:	4603      	mov	r3, r0
 8013964:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013966:	7dfb      	ldrb	r3, [r7, #23]
 8013968:	2b00      	cmp	r3, #0
 801396a:	d168      	bne.n	8013a3e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	7d1b      	ldrb	r3, [r3, #20]
 8013970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013974:	2b00      	cmp	r3, #0
 8013976:	d062      	beq.n	8013a3e <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	7d1b      	ldrb	r3, [r3, #20]
 801397c:	b25b      	sxtb	r3, r3
 801397e:	2b00      	cmp	r3, #0
 8013980:	da15      	bge.n	80139ae <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8013982:	68bb      	ldr	r3, [r7, #8]
 8013984:	7858      	ldrb	r0, [r3, #1]
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	6a1a      	ldr	r2, [r3, #32]
 8013990:	2301      	movs	r3, #1
 8013992:	f7fd fe4d 	bl	8011630 <disk_write>
 8013996:	4603      	mov	r3, r0
 8013998:	2b00      	cmp	r3, #0
 801399a:	d001      	beq.n	80139a0 <f_sync+0x54>
 801399c:	2301      	movs	r3, #1
 801399e:	e04f      	b.n	8013a40 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	7d1b      	ldrb	r3, [r3, #20]
 80139a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80139a8:	b2da      	uxtb	r2, r3
 80139aa:	687b      	ldr	r3, [r7, #4]
 80139ac:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80139ae:	f7fa fce1 	bl	800e374 <get_fattime>
 80139b2:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80139b4:	68ba      	ldr	r2, [r7, #8]
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139ba:	4619      	mov	r1, r3
 80139bc:	4610      	mov	r0, r2
 80139be:	f7fe f925 	bl	8011c0c <move_window>
 80139c2:	4603      	mov	r3, r0
 80139c4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80139c6:	7dfb      	ldrb	r3, [r7, #23]
 80139c8:	2b00      	cmp	r3, #0
 80139ca:	d138      	bne.n	8013a3e <f_sync+0xf2>
					dir = fp->dir_ptr;
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80139d0:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80139d2:	68fb      	ldr	r3, [r7, #12]
 80139d4:	330b      	adds	r3, #11
 80139d6:	781a      	ldrb	r2, [r3, #0]
 80139d8:	68fb      	ldr	r3, [r7, #12]
 80139da:	330b      	adds	r3, #11
 80139dc:	f042 0220 	orr.w	r2, r2, #32
 80139e0:	b2d2      	uxtb	r2, r2
 80139e2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	6818      	ldr	r0, [r3, #0]
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	689b      	ldr	r3, [r3, #8]
 80139ec:	461a      	mov	r2, r3
 80139ee:	68f9      	ldr	r1, [r7, #12]
 80139f0:	f7fe fe2a 	bl	8012648 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80139f4:	68fb      	ldr	r3, [r7, #12]
 80139f6:	f103 021c 	add.w	r2, r3, #28
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	68db      	ldr	r3, [r3, #12]
 80139fe:	4619      	mov	r1, r3
 8013a00:	4610      	mov	r0, r2
 8013a02:	f7fd fea9 	bl	8011758 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8013a06:	68fb      	ldr	r3, [r7, #12]
 8013a08:	3316      	adds	r3, #22
 8013a0a:	6939      	ldr	r1, [r7, #16]
 8013a0c:	4618      	mov	r0, r3
 8013a0e:	f7fd fea3 	bl	8011758 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8013a12:	68fb      	ldr	r3, [r7, #12]
 8013a14:	3312      	adds	r3, #18
 8013a16:	2100      	movs	r1, #0
 8013a18:	4618      	mov	r0, r3
 8013a1a:	f7fd fe82 	bl	8011722 <st_word>
					fs->wflag = 1;
 8013a1e:	68bb      	ldr	r3, [r7, #8]
 8013a20:	2201      	movs	r2, #1
 8013a22:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8013a24:	68bb      	ldr	r3, [r7, #8]
 8013a26:	4618      	mov	r0, r3
 8013a28:	f7fe f91e 	bl	8011c68 <sync_fs>
 8013a2c:	4603      	mov	r3, r0
 8013a2e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	7d1b      	ldrb	r3, [r3, #20]
 8013a34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013a38:	b2da      	uxtb	r2, r3
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8013a3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013a40:	4618      	mov	r0, r3
 8013a42:	3718      	adds	r7, #24
 8013a44:	46bd      	mov	sp, r7
 8013a46:	bd80      	pop	{r7, pc}

08013a48 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8013a48:	b580      	push	{r7, lr}
 8013a4a:	b084      	sub	sp, #16
 8013a4c:	af00      	add	r7, sp, #0
 8013a4e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8013a50:	6878      	ldr	r0, [r7, #4]
 8013a52:	f7ff ff7b 	bl	801394c <f_sync>
 8013a56:	4603      	mov	r3, r0
 8013a58:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8013a5a:	7bfb      	ldrb	r3, [r7, #15]
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	d118      	bne.n	8013a92 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	f107 0208 	add.w	r2, r7, #8
 8013a66:	4611      	mov	r1, r2
 8013a68:	4618      	mov	r0, r3
 8013a6a:	f7ff fa81 	bl	8012f70 <validate>
 8013a6e:	4603      	mov	r3, r0
 8013a70:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8013a72:	7bfb      	ldrb	r3, [r7, #15]
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	d10c      	bne.n	8013a92 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	691b      	ldr	r3, [r3, #16]
 8013a7c:	4618      	mov	r0, r3
 8013a7e:	f7fe f821 	bl	8011ac4 <dec_lock>
 8013a82:	4603      	mov	r3, r0
 8013a84:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8013a86:	7bfb      	ldrb	r3, [r7, #15]
 8013a88:	2b00      	cmp	r3, #0
 8013a8a:	d102      	bne.n	8013a92 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	2200      	movs	r2, #0
 8013a90:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8013a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8013a94:	4618      	mov	r0, r3
 8013a96:	3710      	adds	r7, #16
 8013a98:	46bd      	mov	sp, r7
 8013a9a:	bd80      	pop	{r7, pc}

08013a9c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8013a9c:	b480      	push	{r7}
 8013a9e:	b087      	sub	sp, #28
 8013aa0:	af00      	add	r7, sp, #0
 8013aa2:	60f8      	str	r0, [r7, #12]
 8013aa4:	60b9      	str	r1, [r7, #8]
 8013aa6:	4613      	mov	r3, r2
 8013aa8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8013aaa:	2301      	movs	r3, #1
 8013aac:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8013aae:	2300      	movs	r3, #0
 8013ab0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8013ab2:	4b1f      	ldr	r3, [pc, #124]	; (8013b30 <FATFS_LinkDriverEx+0x94>)
 8013ab4:	7a5b      	ldrb	r3, [r3, #9]
 8013ab6:	b2db      	uxtb	r3, r3
 8013ab8:	2b00      	cmp	r3, #0
 8013aba:	d131      	bne.n	8013b20 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8013abc:	4b1c      	ldr	r3, [pc, #112]	; (8013b30 <FATFS_LinkDriverEx+0x94>)
 8013abe:	7a5b      	ldrb	r3, [r3, #9]
 8013ac0:	b2db      	uxtb	r3, r3
 8013ac2:	461a      	mov	r2, r3
 8013ac4:	4b1a      	ldr	r3, [pc, #104]	; (8013b30 <FATFS_LinkDriverEx+0x94>)
 8013ac6:	2100      	movs	r1, #0
 8013ac8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8013aca:	4b19      	ldr	r3, [pc, #100]	; (8013b30 <FATFS_LinkDriverEx+0x94>)
 8013acc:	7a5b      	ldrb	r3, [r3, #9]
 8013ace:	b2db      	uxtb	r3, r3
 8013ad0:	4a17      	ldr	r2, [pc, #92]	; (8013b30 <FATFS_LinkDriverEx+0x94>)
 8013ad2:	009b      	lsls	r3, r3, #2
 8013ad4:	4413      	add	r3, r2
 8013ad6:	68fa      	ldr	r2, [r7, #12]
 8013ad8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8013ada:	4b15      	ldr	r3, [pc, #84]	; (8013b30 <FATFS_LinkDriverEx+0x94>)
 8013adc:	7a5b      	ldrb	r3, [r3, #9]
 8013ade:	b2db      	uxtb	r3, r3
 8013ae0:	461a      	mov	r2, r3
 8013ae2:	4b13      	ldr	r3, [pc, #76]	; (8013b30 <FATFS_LinkDriverEx+0x94>)
 8013ae4:	4413      	add	r3, r2
 8013ae6:	79fa      	ldrb	r2, [r7, #7]
 8013ae8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8013aea:	4b11      	ldr	r3, [pc, #68]	; (8013b30 <FATFS_LinkDriverEx+0x94>)
 8013aec:	7a5b      	ldrb	r3, [r3, #9]
 8013aee:	b2db      	uxtb	r3, r3
 8013af0:	1c5a      	adds	r2, r3, #1
 8013af2:	b2d1      	uxtb	r1, r2
 8013af4:	4a0e      	ldr	r2, [pc, #56]	; (8013b30 <FATFS_LinkDriverEx+0x94>)
 8013af6:	7251      	strb	r1, [r2, #9]
 8013af8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8013afa:	7dbb      	ldrb	r3, [r7, #22]
 8013afc:	3330      	adds	r3, #48	; 0x30
 8013afe:	b2da      	uxtb	r2, r3
 8013b00:	68bb      	ldr	r3, [r7, #8]
 8013b02:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8013b04:	68bb      	ldr	r3, [r7, #8]
 8013b06:	3301      	adds	r3, #1
 8013b08:	223a      	movs	r2, #58	; 0x3a
 8013b0a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8013b0c:	68bb      	ldr	r3, [r7, #8]
 8013b0e:	3302      	adds	r3, #2
 8013b10:	222f      	movs	r2, #47	; 0x2f
 8013b12:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8013b14:	68bb      	ldr	r3, [r7, #8]
 8013b16:	3303      	adds	r3, #3
 8013b18:	2200      	movs	r2, #0
 8013b1a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8013b1c:	2300      	movs	r3, #0
 8013b1e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8013b20:	7dfb      	ldrb	r3, [r7, #23]
}
 8013b22:	4618      	mov	r0, r3
 8013b24:	371c      	adds	r7, #28
 8013b26:	46bd      	mov	sp, r7
 8013b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b2c:	4770      	bx	lr
 8013b2e:	bf00      	nop
 8013b30:	2404022c 	.word	0x2404022c

08013b34 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8013b34:	b580      	push	{r7, lr}
 8013b36:	b082      	sub	sp, #8
 8013b38:	af00      	add	r7, sp, #0
 8013b3a:	6078      	str	r0, [r7, #4]
 8013b3c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8013b3e:	2200      	movs	r2, #0
 8013b40:	6839      	ldr	r1, [r7, #0]
 8013b42:	6878      	ldr	r0, [r7, #4]
 8013b44:	f7ff ffaa 	bl	8013a9c <FATFS_LinkDriverEx>
 8013b48:	4603      	mov	r3, r0
}
 8013b4a:	4618      	mov	r0, r3
 8013b4c:	3708      	adds	r7, #8
 8013b4e:	46bd      	mov	sp, r7
 8013b50:	bd80      	pop	{r7, pc}
	...

08013b54 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8013b54:	b580      	push	{r7, lr}
 8013b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8013b58:	2200      	movs	r2, #0
 8013b5a:	4913      	ldr	r1, [pc, #76]	; (8013ba8 <MX_USB_DEVICE_Init+0x54>)
 8013b5c:	4813      	ldr	r0, [pc, #76]	; (8013bac <MX_USB_DEVICE_Init+0x58>)
 8013b5e:	f7fc fc20 	bl	80103a2 <USBD_Init>
 8013b62:	4603      	mov	r3, r0
 8013b64:	2b00      	cmp	r3, #0
 8013b66:	d001      	beq.n	8013b6c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8013b68:	f7ed fb2a 	bl	80011c0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8013b6c:	4910      	ldr	r1, [pc, #64]	; (8013bb0 <MX_USB_DEVICE_Init+0x5c>)
 8013b6e:	480f      	ldr	r0, [pc, #60]	; (8013bac <MX_USB_DEVICE_Init+0x58>)
 8013b70:	f7fc fc4d 	bl	801040e <USBD_RegisterClass>
 8013b74:	4603      	mov	r3, r0
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	d001      	beq.n	8013b7e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8013b7a:	f7ed fb21 	bl	80011c0 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8013b7e:	490d      	ldr	r1, [pc, #52]	; (8013bb4 <MX_USB_DEVICE_Init+0x60>)
 8013b80:	480a      	ldr	r0, [pc, #40]	; (8013bac <MX_USB_DEVICE_Init+0x58>)
 8013b82:	f7fa fff7 	bl	800eb74 <USBD_MSC_RegisterStorage>
 8013b86:	4603      	mov	r3, r0
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	d001      	beq.n	8013b90 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8013b8c:	f7ed fb18 	bl	80011c0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8013b90:	4806      	ldr	r0, [pc, #24]	; (8013bac <MX_USB_DEVICE_Init+0x58>)
 8013b92:	f7fc fc5d 	bl	8010450 <USBD_Start>
 8013b96:	4603      	mov	r3, r0
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	d001      	beq.n	8013ba0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8013b9c:	f7ed fb10 	bl	80011c0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8013ba0:	f7f2 fb1a 	bl	80061d8 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8013ba4:	bf00      	nop
 8013ba6:	bd80      	pop	{r7, pc}
 8013ba8:	240000f8 	.word	0x240000f8
 8013bac:	240411e0 	.word	0x240411e0
 8013bb0:	24000010 	.word	0x24000010
 8013bb4:	24000148 	.word	0x24000148

08013bb8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013bb8:	b480      	push	{r7}
 8013bba:	b083      	sub	sp, #12
 8013bbc:	af00      	add	r7, sp, #0
 8013bbe:	4603      	mov	r3, r0
 8013bc0:	6039      	str	r1, [r7, #0]
 8013bc2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8013bc4:	683b      	ldr	r3, [r7, #0]
 8013bc6:	2212      	movs	r2, #18
 8013bc8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8013bca:	4b03      	ldr	r3, [pc, #12]	; (8013bd8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8013bcc:	4618      	mov	r0, r3
 8013bce:	370c      	adds	r7, #12
 8013bd0:	46bd      	mov	sp, r7
 8013bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bd6:	4770      	bx	lr
 8013bd8:	24000114 	.word	0x24000114

08013bdc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013bdc:	b480      	push	{r7}
 8013bde:	b083      	sub	sp, #12
 8013be0:	af00      	add	r7, sp, #0
 8013be2:	4603      	mov	r3, r0
 8013be4:	6039      	str	r1, [r7, #0]
 8013be6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8013be8:	683b      	ldr	r3, [r7, #0]
 8013bea:	2204      	movs	r2, #4
 8013bec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8013bee:	4b03      	ldr	r3, [pc, #12]	; (8013bfc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8013bf0:	4618      	mov	r0, r3
 8013bf2:	370c      	adds	r7, #12
 8013bf4:	46bd      	mov	sp, r7
 8013bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bfa:	4770      	bx	lr
 8013bfc:	24000128 	.word	0x24000128

08013c00 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013c00:	b580      	push	{r7, lr}
 8013c02:	b082      	sub	sp, #8
 8013c04:	af00      	add	r7, sp, #0
 8013c06:	4603      	mov	r3, r0
 8013c08:	6039      	str	r1, [r7, #0]
 8013c0a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8013c0c:	79fb      	ldrb	r3, [r7, #7]
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	d105      	bne.n	8013c1e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8013c12:	683a      	ldr	r2, [r7, #0]
 8013c14:	4907      	ldr	r1, [pc, #28]	; (8013c34 <USBD_FS_ProductStrDescriptor+0x34>)
 8013c16:	4808      	ldr	r0, [pc, #32]	; (8013c38 <USBD_FS_ProductStrDescriptor+0x38>)
 8013c18:	f7fd fbe7 	bl	80113ea <USBD_GetString>
 8013c1c:	e004      	b.n	8013c28 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8013c1e:	683a      	ldr	r2, [r7, #0]
 8013c20:	4904      	ldr	r1, [pc, #16]	; (8013c34 <USBD_FS_ProductStrDescriptor+0x34>)
 8013c22:	4805      	ldr	r0, [pc, #20]	; (8013c38 <USBD_FS_ProductStrDescriptor+0x38>)
 8013c24:	f7fd fbe1 	bl	80113ea <USBD_GetString>
  }
  return USBD_StrDesc;
 8013c28:	4b02      	ldr	r3, [pc, #8]	; (8013c34 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8013c2a:	4618      	mov	r0, r3
 8013c2c:	3708      	adds	r7, #8
 8013c2e:	46bd      	mov	sp, r7
 8013c30:	bd80      	pop	{r7, pc}
 8013c32:	bf00      	nop
 8013c34:	240414b0 	.word	0x240414b0
 8013c38:	080156c0 	.word	0x080156c0

08013c3c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013c3c:	b580      	push	{r7, lr}
 8013c3e:	b082      	sub	sp, #8
 8013c40:	af00      	add	r7, sp, #0
 8013c42:	4603      	mov	r3, r0
 8013c44:	6039      	str	r1, [r7, #0]
 8013c46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8013c48:	683a      	ldr	r2, [r7, #0]
 8013c4a:	4904      	ldr	r1, [pc, #16]	; (8013c5c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8013c4c:	4804      	ldr	r0, [pc, #16]	; (8013c60 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8013c4e:	f7fd fbcc 	bl	80113ea <USBD_GetString>
  return USBD_StrDesc;
 8013c52:	4b02      	ldr	r3, [pc, #8]	; (8013c5c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8013c54:	4618      	mov	r0, r3
 8013c56:	3708      	adds	r7, #8
 8013c58:	46bd      	mov	sp, r7
 8013c5a:	bd80      	pop	{r7, pc}
 8013c5c:	240414b0 	.word	0x240414b0
 8013c60:	080156d4 	.word	0x080156d4

08013c64 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013c64:	b580      	push	{r7, lr}
 8013c66:	b082      	sub	sp, #8
 8013c68:	af00      	add	r7, sp, #0
 8013c6a:	4603      	mov	r3, r0
 8013c6c:	6039      	str	r1, [r7, #0]
 8013c6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8013c70:	683b      	ldr	r3, [r7, #0]
 8013c72:	221a      	movs	r2, #26
 8013c74:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8013c76:	f000 f843 	bl	8013d00 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8013c7a:	4b02      	ldr	r3, [pc, #8]	; (8013c84 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8013c7c:	4618      	mov	r0, r3
 8013c7e:	3708      	adds	r7, #8
 8013c80:	46bd      	mov	sp, r7
 8013c82:	bd80      	pop	{r7, pc}
 8013c84:	2400012c 	.word	0x2400012c

08013c88 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013c88:	b580      	push	{r7, lr}
 8013c8a:	b082      	sub	sp, #8
 8013c8c:	af00      	add	r7, sp, #0
 8013c8e:	4603      	mov	r3, r0
 8013c90:	6039      	str	r1, [r7, #0]
 8013c92:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8013c94:	79fb      	ldrb	r3, [r7, #7]
 8013c96:	2b00      	cmp	r3, #0
 8013c98:	d105      	bne.n	8013ca6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8013c9a:	683a      	ldr	r2, [r7, #0]
 8013c9c:	4907      	ldr	r1, [pc, #28]	; (8013cbc <USBD_FS_ConfigStrDescriptor+0x34>)
 8013c9e:	4808      	ldr	r0, [pc, #32]	; (8013cc0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8013ca0:	f7fd fba3 	bl	80113ea <USBD_GetString>
 8013ca4:	e004      	b.n	8013cb0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8013ca6:	683a      	ldr	r2, [r7, #0]
 8013ca8:	4904      	ldr	r1, [pc, #16]	; (8013cbc <USBD_FS_ConfigStrDescriptor+0x34>)
 8013caa:	4805      	ldr	r0, [pc, #20]	; (8013cc0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8013cac:	f7fd fb9d 	bl	80113ea <USBD_GetString>
  }
  return USBD_StrDesc;
 8013cb0:	4b02      	ldr	r3, [pc, #8]	; (8013cbc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8013cb2:	4618      	mov	r0, r3
 8013cb4:	3708      	adds	r7, #8
 8013cb6:	46bd      	mov	sp, r7
 8013cb8:	bd80      	pop	{r7, pc}
 8013cba:	bf00      	nop
 8013cbc:	240414b0 	.word	0x240414b0
 8013cc0:	080156e8 	.word	0x080156e8

08013cc4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013cc4:	b580      	push	{r7, lr}
 8013cc6:	b082      	sub	sp, #8
 8013cc8:	af00      	add	r7, sp, #0
 8013cca:	4603      	mov	r3, r0
 8013ccc:	6039      	str	r1, [r7, #0]
 8013cce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8013cd0:	79fb      	ldrb	r3, [r7, #7]
 8013cd2:	2b00      	cmp	r3, #0
 8013cd4:	d105      	bne.n	8013ce2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8013cd6:	683a      	ldr	r2, [r7, #0]
 8013cd8:	4907      	ldr	r1, [pc, #28]	; (8013cf8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8013cda:	4808      	ldr	r0, [pc, #32]	; (8013cfc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8013cdc:	f7fd fb85 	bl	80113ea <USBD_GetString>
 8013ce0:	e004      	b.n	8013cec <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8013ce2:	683a      	ldr	r2, [r7, #0]
 8013ce4:	4904      	ldr	r1, [pc, #16]	; (8013cf8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8013ce6:	4805      	ldr	r0, [pc, #20]	; (8013cfc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8013ce8:	f7fd fb7f 	bl	80113ea <USBD_GetString>
  }
  return USBD_StrDesc;
 8013cec:	4b02      	ldr	r3, [pc, #8]	; (8013cf8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8013cee:	4618      	mov	r0, r3
 8013cf0:	3708      	adds	r7, #8
 8013cf2:	46bd      	mov	sp, r7
 8013cf4:	bd80      	pop	{r7, pc}
 8013cf6:	bf00      	nop
 8013cf8:	240414b0 	.word	0x240414b0
 8013cfc:	080156f4 	.word	0x080156f4

08013d00 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8013d00:	b580      	push	{r7, lr}
 8013d02:	b084      	sub	sp, #16
 8013d04:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8013d06:	4b0f      	ldr	r3, [pc, #60]	; (8013d44 <Get_SerialNum+0x44>)
 8013d08:	681b      	ldr	r3, [r3, #0]
 8013d0a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8013d0c:	4b0e      	ldr	r3, [pc, #56]	; (8013d48 <Get_SerialNum+0x48>)
 8013d0e:	681b      	ldr	r3, [r3, #0]
 8013d10:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8013d12:	4b0e      	ldr	r3, [pc, #56]	; (8013d4c <Get_SerialNum+0x4c>)
 8013d14:	681b      	ldr	r3, [r3, #0]
 8013d16:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8013d18:	68fa      	ldr	r2, [r7, #12]
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	4413      	add	r3, r2
 8013d1e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8013d20:	68fb      	ldr	r3, [r7, #12]
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	d009      	beq.n	8013d3a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8013d26:	2208      	movs	r2, #8
 8013d28:	4909      	ldr	r1, [pc, #36]	; (8013d50 <Get_SerialNum+0x50>)
 8013d2a:	68f8      	ldr	r0, [r7, #12]
 8013d2c:	f000 f814 	bl	8013d58 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8013d30:	2204      	movs	r2, #4
 8013d32:	4908      	ldr	r1, [pc, #32]	; (8013d54 <Get_SerialNum+0x54>)
 8013d34:	68b8      	ldr	r0, [r7, #8]
 8013d36:	f000 f80f 	bl	8013d58 <IntToUnicode>
  }
}
 8013d3a:	bf00      	nop
 8013d3c:	3710      	adds	r7, #16
 8013d3e:	46bd      	mov	sp, r7
 8013d40:	bd80      	pop	{r7, pc}
 8013d42:	bf00      	nop
 8013d44:	1ff1e800 	.word	0x1ff1e800
 8013d48:	1ff1e804 	.word	0x1ff1e804
 8013d4c:	1ff1e808 	.word	0x1ff1e808
 8013d50:	2400012e 	.word	0x2400012e
 8013d54:	2400013e 	.word	0x2400013e

08013d58 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8013d58:	b480      	push	{r7}
 8013d5a:	b087      	sub	sp, #28
 8013d5c:	af00      	add	r7, sp, #0
 8013d5e:	60f8      	str	r0, [r7, #12]
 8013d60:	60b9      	str	r1, [r7, #8]
 8013d62:	4613      	mov	r3, r2
 8013d64:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8013d66:	2300      	movs	r3, #0
 8013d68:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8013d6a:	2300      	movs	r3, #0
 8013d6c:	75fb      	strb	r3, [r7, #23]
 8013d6e:	e027      	b.n	8013dc0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8013d70:	68fb      	ldr	r3, [r7, #12]
 8013d72:	0f1b      	lsrs	r3, r3, #28
 8013d74:	2b09      	cmp	r3, #9
 8013d76:	d80b      	bhi.n	8013d90 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8013d78:	68fb      	ldr	r3, [r7, #12]
 8013d7a:	0f1b      	lsrs	r3, r3, #28
 8013d7c:	b2da      	uxtb	r2, r3
 8013d7e:	7dfb      	ldrb	r3, [r7, #23]
 8013d80:	005b      	lsls	r3, r3, #1
 8013d82:	4619      	mov	r1, r3
 8013d84:	68bb      	ldr	r3, [r7, #8]
 8013d86:	440b      	add	r3, r1
 8013d88:	3230      	adds	r2, #48	; 0x30
 8013d8a:	b2d2      	uxtb	r2, r2
 8013d8c:	701a      	strb	r2, [r3, #0]
 8013d8e:	e00a      	b.n	8013da6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8013d90:	68fb      	ldr	r3, [r7, #12]
 8013d92:	0f1b      	lsrs	r3, r3, #28
 8013d94:	b2da      	uxtb	r2, r3
 8013d96:	7dfb      	ldrb	r3, [r7, #23]
 8013d98:	005b      	lsls	r3, r3, #1
 8013d9a:	4619      	mov	r1, r3
 8013d9c:	68bb      	ldr	r3, [r7, #8]
 8013d9e:	440b      	add	r3, r1
 8013da0:	3237      	adds	r2, #55	; 0x37
 8013da2:	b2d2      	uxtb	r2, r2
 8013da4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8013da6:	68fb      	ldr	r3, [r7, #12]
 8013da8:	011b      	lsls	r3, r3, #4
 8013daa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8013dac:	7dfb      	ldrb	r3, [r7, #23]
 8013dae:	005b      	lsls	r3, r3, #1
 8013db0:	3301      	adds	r3, #1
 8013db2:	68ba      	ldr	r2, [r7, #8]
 8013db4:	4413      	add	r3, r2
 8013db6:	2200      	movs	r2, #0
 8013db8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8013dba:	7dfb      	ldrb	r3, [r7, #23]
 8013dbc:	3301      	adds	r3, #1
 8013dbe:	75fb      	strb	r3, [r7, #23]
 8013dc0:	7dfa      	ldrb	r2, [r7, #23]
 8013dc2:	79fb      	ldrb	r3, [r7, #7]
 8013dc4:	429a      	cmp	r2, r3
 8013dc6:	d3d3      	bcc.n	8013d70 <IntToUnicode+0x18>
  }
}
 8013dc8:	bf00      	nop
 8013dca:	371c      	adds	r7, #28
 8013dcc:	46bd      	mov	sp, r7
 8013dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dd2:	4770      	bx	lr

08013dd4 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 8013dd4:	b480      	push	{r7}
 8013dd6:	b083      	sub	sp, #12
 8013dd8:	af00      	add	r7, sp, #0
 8013dda:	4603      	mov	r3, r0
 8013ddc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 8013dde:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8013de0:	4618      	mov	r0, r3
 8013de2:	370c      	adds	r7, #12
 8013de4:	46bd      	mov	sp, r7
 8013de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dea:	4770      	bx	lr

08013dec <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8013dec:	b580      	push	{r7, lr}
 8013dee:	b08e      	sub	sp, #56	; 0x38
 8013df0:	af00      	add	r7, sp, #0
 8013df2:	4603      	mov	r3, r0
 8013df4:	60b9      	str	r1, [r7, #8]
 8013df6:	607a      	str	r2, [r7, #4]
 8013df8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
	HAL_SD_CardInfoTypeDef info;
	  int8_t ret = -1;
 8013dfa:	23ff      	movs	r3, #255	; 0xff
 8013dfc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	  HAL_SD_GetCardInfo(&hsd1, &info);
 8013e00:	f107 0310 	add.w	r3, r7, #16
 8013e04:	4619      	mov	r1, r3
 8013e06:	480a      	ldr	r0, [pc, #40]	; (8013e30 <STORAGE_GetCapacity_FS+0x44>)
 8013e08:	f7f6 fa2c 	bl	800a264 <HAL_SD_GetCardInfo>

	  *block_num =  info.LogBlockNbr  - 1;
 8013e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e0e:	1e5a      	subs	r2, r3, #1
 8013e10:	68bb      	ldr	r3, [r7, #8]
 8013e12:	601a      	str	r2, [r3, #0]
	  *block_size = info.LogBlockSize;
 8013e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e16:	b29a      	uxth	r2, r3
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	801a      	strh	r2, [r3, #0]
	  ret = 0;
 8013e1c:	2300      	movs	r3, #0
 8013e1e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  return ret;
 8013e22:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
  /* USER CODE END 3 */
}
 8013e26:	4618      	mov	r0, r3
 8013e28:	3738      	adds	r7, #56	; 0x38
 8013e2a:	46bd      	mov	sp, r7
 8013e2c:	bd80      	pop	{r7, pc}
 8013e2e:	bf00      	nop
 8013e30:	24040574 	.word	0x24040574

08013e34 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8013e34:	b480      	push	{r7}
 8013e36:	b083      	sub	sp, #12
 8013e38:	af00      	add	r7, sp, #0
 8013e3a:	4603      	mov	r3, r0
 8013e3c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8013e3e:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8013e40:	4618      	mov	r0, r3
 8013e42:	370c      	adds	r7, #12
 8013e44:	46bd      	mov	sp, r7
 8013e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e4a:	4770      	bx	lr

08013e4c <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8013e4c:	b480      	push	{r7}
 8013e4e:	b083      	sub	sp, #12
 8013e50:	af00      	add	r7, sp, #0
 8013e52:	4603      	mov	r3, r0
 8013e54:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8013e56:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8013e58:	4618      	mov	r0, r3
 8013e5a:	370c      	adds	r7, #12
 8013e5c:	46bd      	mov	sp, r7
 8013e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e62:	4770      	bx	lr

08013e64 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8013e64:	b580      	push	{r7, lr}
 8013e66:	b088      	sub	sp, #32
 8013e68:	af02      	add	r7, sp, #8
 8013e6a:	60b9      	str	r1, [r7, #8]
 8013e6c:	607a      	str	r2, [r7, #4]
 8013e6e:	461a      	mov	r2, r3
 8013e70:	4603      	mov	r3, r0
 8013e72:	73fb      	strb	r3, [r7, #15]
 8013e74:	4613      	mov	r3, r2
 8013e76:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	int8_t ret = -1;
 8013e78:	23ff      	movs	r3, #255	; 0xff
 8013e7a:	75fb      	strb	r3, [r7, #23]

	HAL_SD_ReadBlocks(&hsd1, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8013e7c:	89ba      	ldrh	r2, [r7, #12]
 8013e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8013e82:	9300      	str	r3, [sp, #0]
 8013e84:	4613      	mov	r3, r2
 8013e86:	687a      	ldr	r2, [r7, #4]
 8013e88:	68b9      	ldr	r1, [r7, #8]
 8013e8a:	4809      	ldr	r0, [pc, #36]	; (8013eb0 <STORAGE_Read_FS+0x4c>)
 8013e8c:	f7f5 f95c 	bl	8009148 <HAL_SD_ReadBlocks>

	/* Wait until SD card is ready to use for new operation */
	while (HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER){}
 8013e90:	bf00      	nop
 8013e92:	4807      	ldr	r0, [pc, #28]	; (8013eb0 <STORAGE_Read_FS+0x4c>)
 8013e94:	f7f6 fabc 	bl	800a410 <HAL_SD_GetCardState>
 8013e98:	4603      	mov	r3, r0
 8013e9a:	2b04      	cmp	r3, #4
 8013e9c:	d1f9      	bne.n	8013e92 <STORAGE_Read_FS+0x2e>
	ret = 0;
 8013e9e:	2300      	movs	r3, #0
 8013ea0:	75fb      	strb	r3, [r7, #23]
	return ret;
 8013ea2:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 6 */
}
 8013ea6:	4618      	mov	r0, r3
 8013ea8:	3718      	adds	r7, #24
 8013eaa:	46bd      	mov	sp, r7
 8013eac:	bd80      	pop	{r7, pc}
 8013eae:	bf00      	nop
 8013eb0:	24040574 	.word	0x24040574

08013eb4 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8013eb4:	b580      	push	{r7, lr}
 8013eb6:	b088      	sub	sp, #32
 8013eb8:	af02      	add	r7, sp, #8
 8013eba:	60b9      	str	r1, [r7, #8]
 8013ebc:	607a      	str	r2, [r7, #4]
 8013ebe:	461a      	mov	r2, r3
 8013ec0:	4603      	mov	r3, r0
 8013ec2:	73fb      	strb	r3, [r7, #15]
 8013ec4:	4613      	mov	r3, r2
 8013ec6:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	int8_t ret = -1;
 8013ec8:	23ff      	movs	r3, #255	; 0xff
 8013eca:	75fb      	strb	r3, [r7, #23]

	HAL_SD_WriteBlocks(&hsd1, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8013ecc:	89ba      	ldrh	r2, [r7, #12]
 8013ece:	f04f 33ff 	mov.w	r3, #4294967295
 8013ed2:	9300      	str	r3, [sp, #0]
 8013ed4:	4613      	mov	r3, r2
 8013ed6:	687a      	ldr	r2, [r7, #4]
 8013ed8:	68b9      	ldr	r1, [r7, #8]
 8013eda:	4809      	ldr	r0, [pc, #36]	; (8013f00 <STORAGE_Write_FS+0x4c>)
 8013edc:	f7f5 fabe 	bl	800945c <HAL_SD_WriteBlocks>


	/* Wait until SD card is ready to use for new operation */
	while (HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER){}
 8013ee0:	bf00      	nop
 8013ee2:	4807      	ldr	r0, [pc, #28]	; (8013f00 <STORAGE_Write_FS+0x4c>)
 8013ee4:	f7f6 fa94 	bl	800a410 <HAL_SD_GetCardState>
 8013ee8:	4603      	mov	r3, r0
 8013eea:	2b04      	cmp	r3, #4
 8013eec:	d1f9      	bne.n	8013ee2 <STORAGE_Write_FS+0x2e>
	ret = 0;
 8013eee:	2300      	movs	r3, #0
 8013ef0:	75fb      	strb	r3, [r7, #23]
	return ret;
 8013ef2:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 7 */
}
 8013ef6:	4618      	mov	r0, r3
 8013ef8:	3718      	adds	r7, #24
 8013efa:	46bd      	mov	sp, r7
 8013efc:	bd80      	pop	{r7, pc}
 8013efe:	bf00      	nop
 8013f00:	24040574 	.word	0x24040574

08013f04 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8013f04:	b480      	push	{r7}
 8013f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8013f08:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8013f0a:	4618      	mov	r0, r3
 8013f0c:	46bd      	mov	sp, r7
 8013f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f12:	4770      	bx	lr

08013f14 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8013f14:	b580      	push	{r7, lr}
 8013f16:	b08a      	sub	sp, #40	; 0x28
 8013f18:	af00      	add	r7, sp, #0
 8013f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013f1c:	f107 0314 	add.w	r3, r7, #20
 8013f20:	2200      	movs	r2, #0
 8013f22:	601a      	str	r2, [r3, #0]
 8013f24:	605a      	str	r2, [r3, #4]
 8013f26:	609a      	str	r2, [r3, #8]
 8013f28:	60da      	str	r2, [r3, #12]
 8013f2a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	681b      	ldr	r3, [r3, #0]
 8013f30:	4a1e      	ldr	r2, [pc, #120]	; (8013fac <HAL_PCD_MspInit+0x98>)
 8013f32:	4293      	cmp	r3, r2
 8013f34:	d136      	bne.n	8013fa4 <HAL_PCD_MspInit+0x90>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013f36:	4b1e      	ldr	r3, [pc, #120]	; (8013fb0 <HAL_PCD_MspInit+0x9c>)
 8013f38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8013f3c:	4a1c      	ldr	r2, [pc, #112]	; (8013fb0 <HAL_PCD_MspInit+0x9c>)
 8013f3e:	f043 0301 	orr.w	r3, r3, #1
 8013f42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8013f46:	4b1a      	ldr	r3, [pc, #104]	; (8013fb0 <HAL_PCD_MspInit+0x9c>)
 8013f48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8013f4c:	f003 0301 	and.w	r3, r3, #1
 8013f50:	613b      	str	r3, [r7, #16]
 8013f52:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8013f54:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8013f58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013f5a:	2302      	movs	r3, #2
 8013f5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013f5e:	2300      	movs	r3, #0
 8013f60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013f62:	2300      	movs	r3, #0
 8013f64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8013f66:	230a      	movs	r3, #10
 8013f68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013f6a:	f107 0314 	add.w	r3, r7, #20
 8013f6e:	4619      	mov	r1, r3
 8013f70:	4810      	ldr	r0, [pc, #64]	; (8013fb4 <HAL_PCD_MspInit+0xa0>)
 8013f72:	f7f0 fccf 	bl	8004914 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8013f76:	4b0e      	ldr	r3, [pc, #56]	; (8013fb0 <HAL_PCD_MspInit+0x9c>)
 8013f78:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8013f7c:	4a0c      	ldr	r2, [pc, #48]	; (8013fb0 <HAL_PCD_MspInit+0x9c>)
 8013f7e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013f82:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8013f86:	4b0a      	ldr	r3, [pc, #40]	; (8013fb0 <HAL_PCD_MspInit+0x9c>)
 8013f88:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8013f8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8013f90:	60fb      	str	r3, [r7, #12]
 8013f92:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8013f94:	2200      	movs	r2, #0
 8013f96:	2100      	movs	r1, #0
 8013f98:	2065      	movs	r0, #101	; 0x65
 8013f9a:	f7ed fe88 	bl	8001cae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8013f9e:	2065      	movs	r0, #101	; 0x65
 8013fa0:	f7ed fe9f 	bl	8001ce2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8013fa4:	bf00      	nop
 8013fa6:	3728      	adds	r7, #40	; 0x28
 8013fa8:	46bd      	mov	sp, r7
 8013faa:	bd80      	pop	{r7, pc}
 8013fac:	40080000 	.word	0x40080000
 8013fb0:	58024400 	.word	0x58024400
 8013fb4:	58020000 	.word	0x58020000

08013fb8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013fb8:	b580      	push	{r7, lr}
 8013fba:	b082      	sub	sp, #8
 8013fbc:	af00      	add	r7, sp, #0
 8013fbe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8013fcc:	4619      	mov	r1, r3
 8013fce:	4610      	mov	r0, r2
 8013fd0:	f7fc fa89 	bl	80104e6 <USBD_LL_SetupStage>
}
 8013fd4:	bf00      	nop
 8013fd6:	3708      	adds	r7, #8
 8013fd8:	46bd      	mov	sp, r7
 8013fda:	bd80      	pop	{r7, pc}

08013fdc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013fdc:	b580      	push	{r7, lr}
 8013fde:	b082      	sub	sp, #8
 8013fe0:	af00      	add	r7, sp, #0
 8013fe2:	6078      	str	r0, [r7, #4]
 8013fe4:	460b      	mov	r3, r1
 8013fe6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8013fee:	78fa      	ldrb	r2, [r7, #3]
 8013ff0:	6879      	ldr	r1, [r7, #4]
 8013ff2:	4613      	mov	r3, r2
 8013ff4:	00db      	lsls	r3, r3, #3
 8013ff6:	1a9b      	subs	r3, r3, r2
 8013ff8:	009b      	lsls	r3, r3, #2
 8013ffa:	440b      	add	r3, r1
 8013ffc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8014000:	681a      	ldr	r2, [r3, #0]
 8014002:	78fb      	ldrb	r3, [r7, #3]
 8014004:	4619      	mov	r1, r3
 8014006:	f7fc fac1 	bl	801058c <USBD_LL_DataOutStage>
}
 801400a:	bf00      	nop
 801400c:	3708      	adds	r7, #8
 801400e:	46bd      	mov	sp, r7
 8014010:	bd80      	pop	{r7, pc}

08014012 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014012:	b580      	push	{r7, lr}
 8014014:	b082      	sub	sp, #8
 8014016:	af00      	add	r7, sp, #0
 8014018:	6078      	str	r0, [r7, #4]
 801401a:	460b      	mov	r3, r1
 801401c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8014024:	78fa      	ldrb	r2, [r7, #3]
 8014026:	6879      	ldr	r1, [r7, #4]
 8014028:	4613      	mov	r3, r2
 801402a:	00db      	lsls	r3, r3, #3
 801402c:	1a9b      	subs	r3, r3, r2
 801402e:	009b      	lsls	r3, r3, #2
 8014030:	440b      	add	r3, r1
 8014032:	3348      	adds	r3, #72	; 0x48
 8014034:	681a      	ldr	r2, [r3, #0]
 8014036:	78fb      	ldrb	r3, [r7, #3]
 8014038:	4619      	mov	r1, r3
 801403a:	f7fc fb0a 	bl	8010652 <USBD_LL_DataInStage>
}
 801403e:	bf00      	nop
 8014040:	3708      	adds	r7, #8
 8014042:	46bd      	mov	sp, r7
 8014044:	bd80      	pop	{r7, pc}

08014046 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014046:	b580      	push	{r7, lr}
 8014048:	b082      	sub	sp, #8
 801404a:	af00      	add	r7, sp, #0
 801404c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014054:	4618      	mov	r0, r3
 8014056:	f7fc fc0e 	bl	8010876 <USBD_LL_SOF>
}
 801405a:	bf00      	nop
 801405c:	3708      	adds	r7, #8
 801405e:	46bd      	mov	sp, r7
 8014060:	bd80      	pop	{r7, pc}

08014062 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014062:	b580      	push	{r7, lr}
 8014064:	b084      	sub	sp, #16
 8014066:	af00      	add	r7, sp, #0
 8014068:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801406a:	2301      	movs	r3, #1
 801406c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	68db      	ldr	r3, [r3, #12]
 8014072:	2b00      	cmp	r3, #0
 8014074:	d102      	bne.n	801407c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8014076:	2300      	movs	r3, #0
 8014078:	73fb      	strb	r3, [r7, #15]
 801407a:	e008      	b.n	801408e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801407c:	687b      	ldr	r3, [r7, #4]
 801407e:	68db      	ldr	r3, [r3, #12]
 8014080:	2b02      	cmp	r3, #2
 8014082:	d102      	bne.n	801408a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8014084:	2301      	movs	r3, #1
 8014086:	73fb      	strb	r3, [r7, #15]
 8014088:	e001      	b.n	801408e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801408a:	f7ed f899 	bl	80011c0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801408e:	687b      	ldr	r3, [r7, #4]
 8014090:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014094:	7bfa      	ldrb	r2, [r7, #15]
 8014096:	4611      	mov	r1, r2
 8014098:	4618      	mov	r0, r3
 801409a:	f7fc fbb1 	bl	8010800 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80140a4:	4618      	mov	r0, r3
 80140a6:	f7fc fb6a 	bl	801077e <USBD_LL_Reset>
}
 80140aa:	bf00      	nop
 80140ac:	3710      	adds	r7, #16
 80140ae:	46bd      	mov	sp, r7
 80140b0:	bd80      	pop	{r7, pc}
	...

080140b4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80140b4:	b580      	push	{r7, lr}
 80140b6:	b082      	sub	sp, #8
 80140b8:	af00      	add	r7, sp, #0
 80140ba:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80140c2:	4618      	mov	r0, r3
 80140c4:	f7fc fbac 	bl	8010820 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80140c8:	687b      	ldr	r3, [r7, #4]
 80140ca:	681b      	ldr	r3, [r3, #0]
 80140cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80140d0:	681b      	ldr	r3, [r3, #0]
 80140d2:	687a      	ldr	r2, [r7, #4]
 80140d4:	6812      	ldr	r2, [r2, #0]
 80140d6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80140da:	f043 0301 	orr.w	r3, r3, #1
 80140de:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80140e0:	687b      	ldr	r3, [r7, #4]
 80140e2:	6a1b      	ldr	r3, [r3, #32]
 80140e4:	2b00      	cmp	r3, #0
 80140e6:	d005      	beq.n	80140f4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80140e8:	4b04      	ldr	r3, [pc, #16]	; (80140fc <HAL_PCD_SuspendCallback+0x48>)
 80140ea:	691b      	ldr	r3, [r3, #16]
 80140ec:	4a03      	ldr	r2, [pc, #12]	; (80140fc <HAL_PCD_SuspendCallback+0x48>)
 80140ee:	f043 0306 	orr.w	r3, r3, #6
 80140f2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80140f4:	bf00      	nop
 80140f6:	3708      	adds	r7, #8
 80140f8:	46bd      	mov	sp, r7
 80140fa:	bd80      	pop	{r7, pc}
 80140fc:	e000ed00 	.word	0xe000ed00

08014100 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014100:	b580      	push	{r7, lr}
 8014102:	b082      	sub	sp, #8
 8014104:	af00      	add	r7, sp, #0
 8014106:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801410e:	4618      	mov	r0, r3
 8014110:	f7fc fb9b 	bl	801084a <USBD_LL_Resume>
}
 8014114:	bf00      	nop
 8014116:	3708      	adds	r7, #8
 8014118:	46bd      	mov	sp, r7
 801411a:	bd80      	pop	{r7, pc}

0801411c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801411c:	b580      	push	{r7, lr}
 801411e:	b082      	sub	sp, #8
 8014120:	af00      	add	r7, sp, #0
 8014122:	6078      	str	r0, [r7, #4]
 8014124:	460b      	mov	r3, r1
 8014126:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801412e:	78fa      	ldrb	r2, [r7, #3]
 8014130:	4611      	mov	r1, r2
 8014132:	4618      	mov	r0, r3
 8014134:	f7fc fbc6 	bl	80108c4 <USBD_LL_IsoOUTIncomplete>
}
 8014138:	bf00      	nop
 801413a:	3708      	adds	r7, #8
 801413c:	46bd      	mov	sp, r7
 801413e:	bd80      	pop	{r7, pc}

08014140 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014140:	b580      	push	{r7, lr}
 8014142:	b082      	sub	sp, #8
 8014144:	af00      	add	r7, sp, #0
 8014146:	6078      	str	r0, [r7, #4]
 8014148:	460b      	mov	r3, r1
 801414a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014152:	78fa      	ldrb	r2, [r7, #3]
 8014154:	4611      	mov	r1, r2
 8014156:	4618      	mov	r0, r3
 8014158:	f7fc fba7 	bl	80108aa <USBD_LL_IsoINIncomplete>
}
 801415c:	bf00      	nop
 801415e:	3708      	adds	r7, #8
 8014160:	46bd      	mov	sp, r7
 8014162:	bd80      	pop	{r7, pc}

08014164 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014164:	b580      	push	{r7, lr}
 8014166:	b082      	sub	sp, #8
 8014168:	af00      	add	r7, sp, #0
 801416a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014172:	4618      	mov	r0, r3
 8014174:	f7fc fbb3 	bl	80108de <USBD_LL_DevConnected>
}
 8014178:	bf00      	nop
 801417a:	3708      	adds	r7, #8
 801417c:	46bd      	mov	sp, r7
 801417e:	bd80      	pop	{r7, pc}

08014180 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014180:	b580      	push	{r7, lr}
 8014182:	b082      	sub	sp, #8
 8014184:	af00      	add	r7, sp, #0
 8014186:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801418e:	4618      	mov	r0, r3
 8014190:	f7fc fbb0 	bl	80108f4 <USBD_LL_DevDisconnected>
}
 8014194:	bf00      	nop
 8014196:	3708      	adds	r7, #8
 8014198:	46bd      	mov	sp, r7
 801419a:	bd80      	pop	{r7, pc}

0801419c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801419c:	b580      	push	{r7, lr}
 801419e:	b082      	sub	sp, #8
 80141a0:	af00      	add	r7, sp, #0
 80141a2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	781b      	ldrb	r3, [r3, #0]
 80141a8:	2b00      	cmp	r3, #0
 80141aa:	d13e      	bne.n	801422a <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80141ac:	4a21      	ldr	r2, [pc, #132]	; (8014234 <USBD_LL_Init+0x98>)
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	4a1f      	ldr	r2, [pc, #124]	; (8014234 <USBD_LL_Init+0x98>)
 80141b8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80141bc:	4b1d      	ldr	r3, [pc, #116]	; (8014234 <USBD_LL_Init+0x98>)
 80141be:	4a1e      	ldr	r2, [pc, #120]	; (8014238 <USBD_LL_Init+0x9c>)
 80141c0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80141c2:	4b1c      	ldr	r3, [pc, #112]	; (8014234 <USBD_LL_Init+0x98>)
 80141c4:	2209      	movs	r2, #9
 80141c6:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80141c8:	4b1a      	ldr	r3, [pc, #104]	; (8014234 <USBD_LL_Init+0x98>)
 80141ca:	2202      	movs	r2, #2
 80141cc:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80141ce:	4b19      	ldr	r3, [pc, #100]	; (8014234 <USBD_LL_Init+0x98>)
 80141d0:	2200      	movs	r2, #0
 80141d2:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80141d4:	4b17      	ldr	r3, [pc, #92]	; (8014234 <USBD_LL_Init+0x98>)
 80141d6:	2202      	movs	r2, #2
 80141d8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80141da:	4b16      	ldr	r3, [pc, #88]	; (8014234 <USBD_LL_Init+0x98>)
 80141dc:	2200      	movs	r2, #0
 80141de:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80141e0:	4b14      	ldr	r3, [pc, #80]	; (8014234 <USBD_LL_Init+0x98>)
 80141e2:	2200      	movs	r2, #0
 80141e4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80141e6:	4b13      	ldr	r3, [pc, #76]	; (8014234 <USBD_LL_Init+0x98>)
 80141e8:	2200      	movs	r2, #0
 80141ea:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80141ec:	4b11      	ldr	r3, [pc, #68]	; (8014234 <USBD_LL_Init+0x98>)
 80141ee:	2200      	movs	r2, #0
 80141f0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80141f2:	4b10      	ldr	r3, [pc, #64]	; (8014234 <USBD_LL_Init+0x98>)
 80141f4:	2200      	movs	r2, #0
 80141f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80141f8:	4b0e      	ldr	r3, [pc, #56]	; (8014234 <USBD_LL_Init+0x98>)
 80141fa:	2200      	movs	r2, #0
 80141fc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80141fe:	480d      	ldr	r0, [pc, #52]	; (8014234 <USBD_LL_Init+0x98>)
 8014200:	f7f0 fda8 	bl	8004d54 <HAL_PCD_Init>
 8014204:	4603      	mov	r3, r0
 8014206:	2b00      	cmp	r3, #0
 8014208:	d001      	beq.n	801420e <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801420a:	f7ec ffd9 	bl	80011c0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801420e:	2180      	movs	r1, #128	; 0x80
 8014210:	4808      	ldr	r0, [pc, #32]	; (8014234 <USBD_LL_Init+0x98>)
 8014212:	f7f1 ff66 	bl	80060e2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8014216:	2240      	movs	r2, #64	; 0x40
 8014218:	2100      	movs	r1, #0
 801421a:	4806      	ldr	r0, [pc, #24]	; (8014234 <USBD_LL_Init+0x98>)
 801421c:	f7f1 ff1a 	bl	8006054 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8014220:	2280      	movs	r2, #128	; 0x80
 8014222:	2101      	movs	r1, #1
 8014224:	4803      	ldr	r0, [pc, #12]	; (8014234 <USBD_LL_Init+0x98>)
 8014226:	f7f1 ff15 	bl	8006054 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801422a:	2300      	movs	r3, #0
}
 801422c:	4618      	mov	r0, r3
 801422e:	3708      	adds	r7, #8
 8014230:	46bd      	mov	sp, r7
 8014232:	bd80      	pop	{r7, pc}
 8014234:	240416b0 	.word	0x240416b0
 8014238:	40080000 	.word	0x40080000

0801423c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801423c:	b580      	push	{r7, lr}
 801423e:	b084      	sub	sp, #16
 8014240:	af00      	add	r7, sp, #0
 8014242:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014244:	2300      	movs	r3, #0
 8014246:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014248:	2300      	movs	r3, #0
 801424a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014252:	4618      	mov	r0, r3
 8014254:	f7f0 fea2 	bl	8004f9c <HAL_PCD_Start>
 8014258:	4603      	mov	r3, r0
 801425a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801425c:	7bfb      	ldrb	r3, [r7, #15]
 801425e:	4618      	mov	r0, r3
 8014260:	f000 f94a 	bl	80144f8 <USBD_Get_USB_Status>
 8014264:	4603      	mov	r3, r0
 8014266:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014268:	7bbb      	ldrb	r3, [r7, #14]
}
 801426a:	4618      	mov	r0, r3
 801426c:	3710      	adds	r7, #16
 801426e:	46bd      	mov	sp, r7
 8014270:	bd80      	pop	{r7, pc}

08014272 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8014272:	b580      	push	{r7, lr}
 8014274:	b084      	sub	sp, #16
 8014276:	af00      	add	r7, sp, #0
 8014278:	6078      	str	r0, [r7, #4]
 801427a:	4608      	mov	r0, r1
 801427c:	4611      	mov	r1, r2
 801427e:	461a      	mov	r2, r3
 8014280:	4603      	mov	r3, r0
 8014282:	70fb      	strb	r3, [r7, #3]
 8014284:	460b      	mov	r3, r1
 8014286:	70bb      	strb	r3, [r7, #2]
 8014288:	4613      	mov	r3, r2
 801428a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801428c:	2300      	movs	r3, #0
 801428e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014290:	2300      	movs	r3, #0
 8014292:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801429a:	78bb      	ldrb	r3, [r7, #2]
 801429c:	883a      	ldrh	r2, [r7, #0]
 801429e:	78f9      	ldrb	r1, [r7, #3]
 80142a0:	f7f1 fab3 	bl	800580a <HAL_PCD_EP_Open>
 80142a4:	4603      	mov	r3, r0
 80142a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80142a8:	7bfb      	ldrb	r3, [r7, #15]
 80142aa:	4618      	mov	r0, r3
 80142ac:	f000 f924 	bl	80144f8 <USBD_Get_USB_Status>
 80142b0:	4603      	mov	r3, r0
 80142b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80142b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80142b6:	4618      	mov	r0, r3
 80142b8:	3710      	adds	r7, #16
 80142ba:	46bd      	mov	sp, r7
 80142bc:	bd80      	pop	{r7, pc}

080142be <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80142be:	b580      	push	{r7, lr}
 80142c0:	b084      	sub	sp, #16
 80142c2:	af00      	add	r7, sp, #0
 80142c4:	6078      	str	r0, [r7, #4]
 80142c6:	460b      	mov	r3, r1
 80142c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80142ca:	2300      	movs	r3, #0
 80142cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80142ce:	2300      	movs	r3, #0
 80142d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80142d8:	78fa      	ldrb	r2, [r7, #3]
 80142da:	4611      	mov	r1, r2
 80142dc:	4618      	mov	r0, r3
 80142de:	f7f1 fafc 	bl	80058da <HAL_PCD_EP_Close>
 80142e2:	4603      	mov	r3, r0
 80142e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80142e6:	7bfb      	ldrb	r3, [r7, #15]
 80142e8:	4618      	mov	r0, r3
 80142ea:	f000 f905 	bl	80144f8 <USBD_Get_USB_Status>
 80142ee:	4603      	mov	r3, r0
 80142f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80142f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80142f4:	4618      	mov	r0, r3
 80142f6:	3710      	adds	r7, #16
 80142f8:	46bd      	mov	sp, r7
 80142fa:	bd80      	pop	{r7, pc}

080142fc <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80142fc:	b580      	push	{r7, lr}
 80142fe:	b084      	sub	sp, #16
 8014300:	af00      	add	r7, sp, #0
 8014302:	6078      	str	r0, [r7, #4]
 8014304:	460b      	mov	r3, r1
 8014306:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014308:	2300      	movs	r3, #0
 801430a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801430c:	2300      	movs	r3, #0
 801430e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014316:	78fa      	ldrb	r2, [r7, #3]
 8014318:	4611      	mov	r1, r2
 801431a:	4618      	mov	r0, r3
 801431c:	f7f1 fc8e 	bl	8005c3c <HAL_PCD_EP_Flush>
 8014320:	4603      	mov	r3, r0
 8014322:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014324:	7bfb      	ldrb	r3, [r7, #15]
 8014326:	4618      	mov	r0, r3
 8014328:	f000 f8e6 	bl	80144f8 <USBD_Get_USB_Status>
 801432c:	4603      	mov	r3, r0
 801432e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014330:	7bbb      	ldrb	r3, [r7, #14]
}
 8014332:	4618      	mov	r0, r3
 8014334:	3710      	adds	r7, #16
 8014336:	46bd      	mov	sp, r7
 8014338:	bd80      	pop	{r7, pc}

0801433a <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801433a:	b580      	push	{r7, lr}
 801433c:	b084      	sub	sp, #16
 801433e:	af00      	add	r7, sp, #0
 8014340:	6078      	str	r0, [r7, #4]
 8014342:	460b      	mov	r3, r1
 8014344:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014346:	2300      	movs	r3, #0
 8014348:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801434a:	2300      	movs	r3, #0
 801434c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014354:	78fa      	ldrb	r2, [r7, #3]
 8014356:	4611      	mov	r1, r2
 8014358:	4618      	mov	r0, r3
 801435a:	f7f1 fbb5 	bl	8005ac8 <HAL_PCD_EP_SetStall>
 801435e:	4603      	mov	r3, r0
 8014360:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014362:	7bfb      	ldrb	r3, [r7, #15]
 8014364:	4618      	mov	r0, r3
 8014366:	f000 f8c7 	bl	80144f8 <USBD_Get_USB_Status>
 801436a:	4603      	mov	r3, r0
 801436c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801436e:	7bbb      	ldrb	r3, [r7, #14]
}
 8014370:	4618      	mov	r0, r3
 8014372:	3710      	adds	r7, #16
 8014374:	46bd      	mov	sp, r7
 8014376:	bd80      	pop	{r7, pc}

08014378 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014378:	b580      	push	{r7, lr}
 801437a:	b084      	sub	sp, #16
 801437c:	af00      	add	r7, sp, #0
 801437e:	6078      	str	r0, [r7, #4]
 8014380:	460b      	mov	r3, r1
 8014382:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014384:	2300      	movs	r3, #0
 8014386:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014388:	2300      	movs	r3, #0
 801438a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014392:	78fa      	ldrb	r2, [r7, #3]
 8014394:	4611      	mov	r1, r2
 8014396:	4618      	mov	r0, r3
 8014398:	f7f1 fbfa 	bl	8005b90 <HAL_PCD_EP_ClrStall>
 801439c:	4603      	mov	r3, r0
 801439e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80143a0:	7bfb      	ldrb	r3, [r7, #15]
 80143a2:	4618      	mov	r0, r3
 80143a4:	f000 f8a8 	bl	80144f8 <USBD_Get_USB_Status>
 80143a8:	4603      	mov	r3, r0
 80143aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80143ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80143ae:	4618      	mov	r0, r3
 80143b0:	3710      	adds	r7, #16
 80143b2:	46bd      	mov	sp, r7
 80143b4:	bd80      	pop	{r7, pc}

080143b6 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80143b6:	b480      	push	{r7}
 80143b8:	b085      	sub	sp, #20
 80143ba:	af00      	add	r7, sp, #0
 80143bc:	6078      	str	r0, [r7, #4]
 80143be:	460b      	mov	r3, r1
 80143c0:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80143c8:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80143ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	da0b      	bge.n	80143ea <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80143d2:	78fb      	ldrb	r3, [r7, #3]
 80143d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80143d8:	68f9      	ldr	r1, [r7, #12]
 80143da:	4613      	mov	r3, r2
 80143dc:	00db      	lsls	r3, r3, #3
 80143de:	1a9b      	subs	r3, r3, r2
 80143e0:	009b      	lsls	r3, r3, #2
 80143e2:	440b      	add	r3, r1
 80143e4:	333e      	adds	r3, #62	; 0x3e
 80143e6:	781b      	ldrb	r3, [r3, #0]
 80143e8:	e00b      	b.n	8014402 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80143ea:	78fb      	ldrb	r3, [r7, #3]
 80143ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80143f0:	68f9      	ldr	r1, [r7, #12]
 80143f2:	4613      	mov	r3, r2
 80143f4:	00db      	lsls	r3, r3, #3
 80143f6:	1a9b      	subs	r3, r3, r2
 80143f8:	009b      	lsls	r3, r3, #2
 80143fa:	440b      	add	r3, r1
 80143fc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8014400:	781b      	ldrb	r3, [r3, #0]
  }
}
 8014402:	4618      	mov	r0, r3
 8014404:	3714      	adds	r7, #20
 8014406:	46bd      	mov	sp, r7
 8014408:	f85d 7b04 	ldr.w	r7, [sp], #4
 801440c:	4770      	bx	lr

0801440e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801440e:	b580      	push	{r7, lr}
 8014410:	b084      	sub	sp, #16
 8014412:	af00      	add	r7, sp, #0
 8014414:	6078      	str	r0, [r7, #4]
 8014416:	460b      	mov	r3, r1
 8014418:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801441a:	2300      	movs	r3, #0
 801441c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801441e:	2300      	movs	r3, #0
 8014420:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014428:	78fa      	ldrb	r2, [r7, #3]
 801442a:	4611      	mov	r1, r2
 801442c:	4618      	mov	r0, r3
 801442e:	f7f1 f9c7 	bl	80057c0 <HAL_PCD_SetAddress>
 8014432:	4603      	mov	r3, r0
 8014434:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014436:	7bfb      	ldrb	r3, [r7, #15]
 8014438:	4618      	mov	r0, r3
 801443a:	f000 f85d 	bl	80144f8 <USBD_Get_USB_Status>
 801443e:	4603      	mov	r3, r0
 8014440:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014442:	7bbb      	ldrb	r3, [r7, #14]
}
 8014444:	4618      	mov	r0, r3
 8014446:	3710      	adds	r7, #16
 8014448:	46bd      	mov	sp, r7
 801444a:	bd80      	pop	{r7, pc}

0801444c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801444c:	b580      	push	{r7, lr}
 801444e:	b086      	sub	sp, #24
 8014450:	af00      	add	r7, sp, #0
 8014452:	60f8      	str	r0, [r7, #12]
 8014454:	607a      	str	r2, [r7, #4]
 8014456:	603b      	str	r3, [r7, #0]
 8014458:	460b      	mov	r3, r1
 801445a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801445c:	2300      	movs	r3, #0
 801445e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014460:	2300      	movs	r3, #0
 8014462:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8014464:	68fb      	ldr	r3, [r7, #12]
 8014466:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801446a:	7af9      	ldrb	r1, [r7, #11]
 801446c:	683b      	ldr	r3, [r7, #0]
 801446e:	687a      	ldr	r2, [r7, #4]
 8014470:	f7f1 fae0 	bl	8005a34 <HAL_PCD_EP_Transmit>
 8014474:	4603      	mov	r3, r0
 8014476:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014478:	7dfb      	ldrb	r3, [r7, #23]
 801447a:	4618      	mov	r0, r3
 801447c:	f000 f83c 	bl	80144f8 <USBD_Get_USB_Status>
 8014480:	4603      	mov	r3, r0
 8014482:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8014484:	7dbb      	ldrb	r3, [r7, #22]
}
 8014486:	4618      	mov	r0, r3
 8014488:	3718      	adds	r7, #24
 801448a:	46bd      	mov	sp, r7
 801448c:	bd80      	pop	{r7, pc}

0801448e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801448e:	b580      	push	{r7, lr}
 8014490:	b086      	sub	sp, #24
 8014492:	af00      	add	r7, sp, #0
 8014494:	60f8      	str	r0, [r7, #12]
 8014496:	607a      	str	r2, [r7, #4]
 8014498:	603b      	str	r3, [r7, #0]
 801449a:	460b      	mov	r3, r1
 801449c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801449e:	2300      	movs	r3, #0
 80144a0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80144a2:	2300      	movs	r3, #0
 80144a4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80144a6:	68fb      	ldr	r3, [r7, #12]
 80144a8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80144ac:	7af9      	ldrb	r1, [r7, #11]
 80144ae:	683b      	ldr	r3, [r7, #0]
 80144b0:	687a      	ldr	r2, [r7, #4]
 80144b2:	f7f1 fa5c 	bl	800596e <HAL_PCD_EP_Receive>
 80144b6:	4603      	mov	r3, r0
 80144b8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80144ba:	7dfb      	ldrb	r3, [r7, #23]
 80144bc:	4618      	mov	r0, r3
 80144be:	f000 f81b 	bl	80144f8 <USBD_Get_USB_Status>
 80144c2:	4603      	mov	r3, r0
 80144c4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80144c6:	7dbb      	ldrb	r3, [r7, #22]
}
 80144c8:	4618      	mov	r0, r3
 80144ca:	3718      	adds	r7, #24
 80144cc:	46bd      	mov	sp, r7
 80144ce:	bd80      	pop	{r7, pc}

080144d0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80144d0:	b580      	push	{r7, lr}
 80144d2:	b082      	sub	sp, #8
 80144d4:	af00      	add	r7, sp, #0
 80144d6:	6078      	str	r0, [r7, #4]
 80144d8:	460b      	mov	r3, r1
 80144da:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80144e2:	78fa      	ldrb	r2, [r7, #3]
 80144e4:	4611      	mov	r1, r2
 80144e6:	4618      	mov	r0, r3
 80144e8:	f7f1 fa8c 	bl	8005a04 <HAL_PCD_EP_GetRxCount>
 80144ec:	4603      	mov	r3, r0
}
 80144ee:	4618      	mov	r0, r3
 80144f0:	3708      	adds	r7, #8
 80144f2:	46bd      	mov	sp, r7
 80144f4:	bd80      	pop	{r7, pc}
	...

080144f8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80144f8:	b480      	push	{r7}
 80144fa:	b085      	sub	sp, #20
 80144fc:	af00      	add	r7, sp, #0
 80144fe:	4603      	mov	r3, r0
 8014500:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014502:	2300      	movs	r3, #0
 8014504:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8014506:	79fb      	ldrb	r3, [r7, #7]
 8014508:	2b03      	cmp	r3, #3
 801450a:	d817      	bhi.n	801453c <USBD_Get_USB_Status+0x44>
 801450c:	a201      	add	r2, pc, #4	; (adr r2, 8014514 <USBD_Get_USB_Status+0x1c>)
 801450e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014512:	bf00      	nop
 8014514:	08014525 	.word	0x08014525
 8014518:	0801452b 	.word	0x0801452b
 801451c:	08014531 	.word	0x08014531
 8014520:	08014537 	.word	0x08014537
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8014524:	2300      	movs	r3, #0
 8014526:	73fb      	strb	r3, [r7, #15]
    break;
 8014528:	e00b      	b.n	8014542 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801452a:	2303      	movs	r3, #3
 801452c:	73fb      	strb	r3, [r7, #15]
    break;
 801452e:	e008      	b.n	8014542 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014530:	2301      	movs	r3, #1
 8014532:	73fb      	strb	r3, [r7, #15]
    break;
 8014534:	e005      	b.n	8014542 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8014536:	2303      	movs	r3, #3
 8014538:	73fb      	strb	r3, [r7, #15]
    break;
 801453a:	e002      	b.n	8014542 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801453c:	2303      	movs	r3, #3
 801453e:	73fb      	strb	r3, [r7, #15]
    break;
 8014540:	bf00      	nop
  }
  return usb_status;
 8014542:	7bfb      	ldrb	r3, [r7, #15]
}
 8014544:	4618      	mov	r0, r3
 8014546:	3714      	adds	r7, #20
 8014548:	46bd      	mov	sp, r7
 801454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801454e:	4770      	bx	lr

08014550 <__errno>:
 8014550:	4b01      	ldr	r3, [pc, #4]	; (8014558 <__errno+0x8>)
 8014552:	6818      	ldr	r0, [r3, #0]
 8014554:	4770      	bx	lr
 8014556:	bf00      	nop
 8014558:	24000168 	.word	0x24000168

0801455c <__libc_init_array>:
 801455c:	b570      	push	{r4, r5, r6, lr}
 801455e:	4e0d      	ldr	r6, [pc, #52]	; (8014594 <__libc_init_array+0x38>)
 8014560:	4c0d      	ldr	r4, [pc, #52]	; (8014598 <__libc_init_array+0x3c>)
 8014562:	1ba4      	subs	r4, r4, r6
 8014564:	10a4      	asrs	r4, r4, #2
 8014566:	2500      	movs	r5, #0
 8014568:	42a5      	cmp	r5, r4
 801456a:	d109      	bne.n	8014580 <__libc_init_array+0x24>
 801456c:	4e0b      	ldr	r6, [pc, #44]	; (801459c <__libc_init_array+0x40>)
 801456e:	4c0c      	ldr	r4, [pc, #48]	; (80145a0 <__libc_init_array+0x44>)
 8014570:	f000 ffe6 	bl	8015540 <_init>
 8014574:	1ba4      	subs	r4, r4, r6
 8014576:	10a4      	asrs	r4, r4, #2
 8014578:	2500      	movs	r5, #0
 801457a:	42a5      	cmp	r5, r4
 801457c:	d105      	bne.n	801458a <__libc_init_array+0x2e>
 801457e:	bd70      	pop	{r4, r5, r6, pc}
 8014580:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014584:	4798      	blx	r3
 8014586:	3501      	adds	r5, #1
 8014588:	e7ee      	b.n	8014568 <__libc_init_array+0xc>
 801458a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801458e:	4798      	blx	r3
 8014590:	3501      	adds	r5, #1
 8014592:	e7f2      	b.n	801457a <__libc_init_array+0x1e>
 8014594:	0801589c 	.word	0x0801589c
 8014598:	0801589c 	.word	0x0801589c
 801459c:	0801589c 	.word	0x0801589c
 80145a0:	080158a0 	.word	0x080158a0

080145a4 <malloc>:
 80145a4:	4b02      	ldr	r3, [pc, #8]	; (80145b0 <malloc+0xc>)
 80145a6:	4601      	mov	r1, r0
 80145a8:	6818      	ldr	r0, [r3, #0]
 80145aa:	f000 b86d 	b.w	8014688 <_malloc_r>
 80145ae:	bf00      	nop
 80145b0:	24000168 	.word	0x24000168

080145b4 <free>:
 80145b4:	4b02      	ldr	r3, [pc, #8]	; (80145c0 <free+0xc>)
 80145b6:	4601      	mov	r1, r0
 80145b8:	6818      	ldr	r0, [r3, #0]
 80145ba:	f000 b817 	b.w	80145ec <_free_r>
 80145be:	bf00      	nop
 80145c0:	24000168 	.word	0x24000168

080145c4 <memcpy>:
 80145c4:	b510      	push	{r4, lr}
 80145c6:	1e43      	subs	r3, r0, #1
 80145c8:	440a      	add	r2, r1
 80145ca:	4291      	cmp	r1, r2
 80145cc:	d100      	bne.n	80145d0 <memcpy+0xc>
 80145ce:	bd10      	pop	{r4, pc}
 80145d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80145d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80145d8:	e7f7      	b.n	80145ca <memcpy+0x6>

080145da <memset>:
 80145da:	4402      	add	r2, r0
 80145dc:	4603      	mov	r3, r0
 80145de:	4293      	cmp	r3, r2
 80145e0:	d100      	bne.n	80145e4 <memset+0xa>
 80145e2:	4770      	bx	lr
 80145e4:	f803 1b01 	strb.w	r1, [r3], #1
 80145e8:	e7f9      	b.n	80145de <memset+0x4>
	...

080145ec <_free_r>:
 80145ec:	b538      	push	{r3, r4, r5, lr}
 80145ee:	4605      	mov	r5, r0
 80145f0:	2900      	cmp	r1, #0
 80145f2:	d045      	beq.n	8014680 <_free_r+0x94>
 80145f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80145f8:	1f0c      	subs	r4, r1, #4
 80145fa:	2b00      	cmp	r3, #0
 80145fc:	bfb8      	it	lt
 80145fe:	18e4      	addlt	r4, r4, r3
 8014600:	f000 fbce 	bl	8014da0 <__malloc_lock>
 8014604:	4a1f      	ldr	r2, [pc, #124]	; (8014684 <_free_r+0x98>)
 8014606:	6813      	ldr	r3, [r2, #0]
 8014608:	4610      	mov	r0, r2
 801460a:	b933      	cbnz	r3, 801461a <_free_r+0x2e>
 801460c:	6063      	str	r3, [r4, #4]
 801460e:	6014      	str	r4, [r2, #0]
 8014610:	4628      	mov	r0, r5
 8014612:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014616:	f000 bbc4 	b.w	8014da2 <__malloc_unlock>
 801461a:	42a3      	cmp	r3, r4
 801461c:	d90c      	bls.n	8014638 <_free_r+0x4c>
 801461e:	6821      	ldr	r1, [r4, #0]
 8014620:	1862      	adds	r2, r4, r1
 8014622:	4293      	cmp	r3, r2
 8014624:	bf04      	itt	eq
 8014626:	681a      	ldreq	r2, [r3, #0]
 8014628:	685b      	ldreq	r3, [r3, #4]
 801462a:	6063      	str	r3, [r4, #4]
 801462c:	bf04      	itt	eq
 801462e:	1852      	addeq	r2, r2, r1
 8014630:	6022      	streq	r2, [r4, #0]
 8014632:	6004      	str	r4, [r0, #0]
 8014634:	e7ec      	b.n	8014610 <_free_r+0x24>
 8014636:	4613      	mov	r3, r2
 8014638:	685a      	ldr	r2, [r3, #4]
 801463a:	b10a      	cbz	r2, 8014640 <_free_r+0x54>
 801463c:	42a2      	cmp	r2, r4
 801463e:	d9fa      	bls.n	8014636 <_free_r+0x4a>
 8014640:	6819      	ldr	r1, [r3, #0]
 8014642:	1858      	adds	r0, r3, r1
 8014644:	42a0      	cmp	r0, r4
 8014646:	d10b      	bne.n	8014660 <_free_r+0x74>
 8014648:	6820      	ldr	r0, [r4, #0]
 801464a:	4401      	add	r1, r0
 801464c:	1858      	adds	r0, r3, r1
 801464e:	4282      	cmp	r2, r0
 8014650:	6019      	str	r1, [r3, #0]
 8014652:	d1dd      	bne.n	8014610 <_free_r+0x24>
 8014654:	6810      	ldr	r0, [r2, #0]
 8014656:	6852      	ldr	r2, [r2, #4]
 8014658:	605a      	str	r2, [r3, #4]
 801465a:	4401      	add	r1, r0
 801465c:	6019      	str	r1, [r3, #0]
 801465e:	e7d7      	b.n	8014610 <_free_r+0x24>
 8014660:	d902      	bls.n	8014668 <_free_r+0x7c>
 8014662:	230c      	movs	r3, #12
 8014664:	602b      	str	r3, [r5, #0]
 8014666:	e7d3      	b.n	8014610 <_free_r+0x24>
 8014668:	6820      	ldr	r0, [r4, #0]
 801466a:	1821      	adds	r1, r4, r0
 801466c:	428a      	cmp	r2, r1
 801466e:	bf04      	itt	eq
 8014670:	6811      	ldreq	r1, [r2, #0]
 8014672:	6852      	ldreq	r2, [r2, #4]
 8014674:	6062      	str	r2, [r4, #4]
 8014676:	bf04      	itt	eq
 8014678:	1809      	addeq	r1, r1, r0
 801467a:	6021      	streq	r1, [r4, #0]
 801467c:	605c      	str	r4, [r3, #4]
 801467e:	e7c7      	b.n	8014610 <_free_r+0x24>
 8014680:	bd38      	pop	{r3, r4, r5, pc}
 8014682:	bf00      	nop
 8014684:	24040238 	.word	0x24040238

08014688 <_malloc_r>:
 8014688:	b570      	push	{r4, r5, r6, lr}
 801468a:	1ccd      	adds	r5, r1, #3
 801468c:	f025 0503 	bic.w	r5, r5, #3
 8014690:	3508      	adds	r5, #8
 8014692:	2d0c      	cmp	r5, #12
 8014694:	bf38      	it	cc
 8014696:	250c      	movcc	r5, #12
 8014698:	2d00      	cmp	r5, #0
 801469a:	4606      	mov	r6, r0
 801469c:	db01      	blt.n	80146a2 <_malloc_r+0x1a>
 801469e:	42a9      	cmp	r1, r5
 80146a0:	d903      	bls.n	80146aa <_malloc_r+0x22>
 80146a2:	230c      	movs	r3, #12
 80146a4:	6033      	str	r3, [r6, #0]
 80146a6:	2000      	movs	r0, #0
 80146a8:	bd70      	pop	{r4, r5, r6, pc}
 80146aa:	f000 fb79 	bl	8014da0 <__malloc_lock>
 80146ae:	4a21      	ldr	r2, [pc, #132]	; (8014734 <_malloc_r+0xac>)
 80146b0:	6814      	ldr	r4, [r2, #0]
 80146b2:	4621      	mov	r1, r4
 80146b4:	b991      	cbnz	r1, 80146dc <_malloc_r+0x54>
 80146b6:	4c20      	ldr	r4, [pc, #128]	; (8014738 <_malloc_r+0xb0>)
 80146b8:	6823      	ldr	r3, [r4, #0]
 80146ba:	b91b      	cbnz	r3, 80146c4 <_malloc_r+0x3c>
 80146bc:	4630      	mov	r0, r6
 80146be:	f000 f8a1 	bl	8014804 <_sbrk_r>
 80146c2:	6020      	str	r0, [r4, #0]
 80146c4:	4629      	mov	r1, r5
 80146c6:	4630      	mov	r0, r6
 80146c8:	f000 f89c 	bl	8014804 <_sbrk_r>
 80146cc:	1c43      	adds	r3, r0, #1
 80146ce:	d124      	bne.n	801471a <_malloc_r+0x92>
 80146d0:	230c      	movs	r3, #12
 80146d2:	6033      	str	r3, [r6, #0]
 80146d4:	4630      	mov	r0, r6
 80146d6:	f000 fb64 	bl	8014da2 <__malloc_unlock>
 80146da:	e7e4      	b.n	80146a6 <_malloc_r+0x1e>
 80146dc:	680b      	ldr	r3, [r1, #0]
 80146de:	1b5b      	subs	r3, r3, r5
 80146e0:	d418      	bmi.n	8014714 <_malloc_r+0x8c>
 80146e2:	2b0b      	cmp	r3, #11
 80146e4:	d90f      	bls.n	8014706 <_malloc_r+0x7e>
 80146e6:	600b      	str	r3, [r1, #0]
 80146e8:	50cd      	str	r5, [r1, r3]
 80146ea:	18cc      	adds	r4, r1, r3
 80146ec:	4630      	mov	r0, r6
 80146ee:	f000 fb58 	bl	8014da2 <__malloc_unlock>
 80146f2:	f104 000b 	add.w	r0, r4, #11
 80146f6:	1d23      	adds	r3, r4, #4
 80146f8:	f020 0007 	bic.w	r0, r0, #7
 80146fc:	1ac3      	subs	r3, r0, r3
 80146fe:	d0d3      	beq.n	80146a8 <_malloc_r+0x20>
 8014700:	425a      	negs	r2, r3
 8014702:	50e2      	str	r2, [r4, r3]
 8014704:	e7d0      	b.n	80146a8 <_malloc_r+0x20>
 8014706:	428c      	cmp	r4, r1
 8014708:	684b      	ldr	r3, [r1, #4]
 801470a:	bf16      	itet	ne
 801470c:	6063      	strne	r3, [r4, #4]
 801470e:	6013      	streq	r3, [r2, #0]
 8014710:	460c      	movne	r4, r1
 8014712:	e7eb      	b.n	80146ec <_malloc_r+0x64>
 8014714:	460c      	mov	r4, r1
 8014716:	6849      	ldr	r1, [r1, #4]
 8014718:	e7cc      	b.n	80146b4 <_malloc_r+0x2c>
 801471a:	1cc4      	adds	r4, r0, #3
 801471c:	f024 0403 	bic.w	r4, r4, #3
 8014720:	42a0      	cmp	r0, r4
 8014722:	d005      	beq.n	8014730 <_malloc_r+0xa8>
 8014724:	1a21      	subs	r1, r4, r0
 8014726:	4630      	mov	r0, r6
 8014728:	f000 f86c 	bl	8014804 <_sbrk_r>
 801472c:	3001      	adds	r0, #1
 801472e:	d0cf      	beq.n	80146d0 <_malloc_r+0x48>
 8014730:	6025      	str	r5, [r4, #0]
 8014732:	e7db      	b.n	80146ec <_malloc_r+0x64>
 8014734:	24040238 	.word	0x24040238
 8014738:	2404023c 	.word	0x2404023c

0801473c <_puts_r>:
 801473c:	b570      	push	{r4, r5, r6, lr}
 801473e:	460e      	mov	r6, r1
 8014740:	4605      	mov	r5, r0
 8014742:	b118      	cbz	r0, 801474c <_puts_r+0x10>
 8014744:	6983      	ldr	r3, [r0, #24]
 8014746:	b90b      	cbnz	r3, 801474c <_puts_r+0x10>
 8014748:	f000 fa3c 	bl	8014bc4 <__sinit>
 801474c:	69ab      	ldr	r3, [r5, #24]
 801474e:	68ac      	ldr	r4, [r5, #8]
 8014750:	b913      	cbnz	r3, 8014758 <_puts_r+0x1c>
 8014752:	4628      	mov	r0, r5
 8014754:	f000 fa36 	bl	8014bc4 <__sinit>
 8014758:	4b23      	ldr	r3, [pc, #140]	; (80147e8 <_puts_r+0xac>)
 801475a:	429c      	cmp	r4, r3
 801475c:	d117      	bne.n	801478e <_puts_r+0x52>
 801475e:	686c      	ldr	r4, [r5, #4]
 8014760:	89a3      	ldrh	r3, [r4, #12]
 8014762:	071b      	lsls	r3, r3, #28
 8014764:	d51d      	bpl.n	80147a2 <_puts_r+0x66>
 8014766:	6923      	ldr	r3, [r4, #16]
 8014768:	b1db      	cbz	r3, 80147a2 <_puts_r+0x66>
 801476a:	3e01      	subs	r6, #1
 801476c:	68a3      	ldr	r3, [r4, #8]
 801476e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8014772:	3b01      	subs	r3, #1
 8014774:	60a3      	str	r3, [r4, #8]
 8014776:	b9e9      	cbnz	r1, 80147b4 <_puts_r+0x78>
 8014778:	2b00      	cmp	r3, #0
 801477a:	da2e      	bge.n	80147da <_puts_r+0x9e>
 801477c:	4622      	mov	r2, r4
 801477e:	210a      	movs	r1, #10
 8014780:	4628      	mov	r0, r5
 8014782:	f000 f86f 	bl	8014864 <__swbuf_r>
 8014786:	3001      	adds	r0, #1
 8014788:	d011      	beq.n	80147ae <_puts_r+0x72>
 801478a:	200a      	movs	r0, #10
 801478c:	e011      	b.n	80147b2 <_puts_r+0x76>
 801478e:	4b17      	ldr	r3, [pc, #92]	; (80147ec <_puts_r+0xb0>)
 8014790:	429c      	cmp	r4, r3
 8014792:	d101      	bne.n	8014798 <_puts_r+0x5c>
 8014794:	68ac      	ldr	r4, [r5, #8]
 8014796:	e7e3      	b.n	8014760 <_puts_r+0x24>
 8014798:	4b15      	ldr	r3, [pc, #84]	; (80147f0 <_puts_r+0xb4>)
 801479a:	429c      	cmp	r4, r3
 801479c:	bf08      	it	eq
 801479e:	68ec      	ldreq	r4, [r5, #12]
 80147a0:	e7de      	b.n	8014760 <_puts_r+0x24>
 80147a2:	4621      	mov	r1, r4
 80147a4:	4628      	mov	r0, r5
 80147a6:	f000 f8af 	bl	8014908 <__swsetup_r>
 80147aa:	2800      	cmp	r0, #0
 80147ac:	d0dd      	beq.n	801476a <_puts_r+0x2e>
 80147ae:	f04f 30ff 	mov.w	r0, #4294967295
 80147b2:	bd70      	pop	{r4, r5, r6, pc}
 80147b4:	2b00      	cmp	r3, #0
 80147b6:	da04      	bge.n	80147c2 <_puts_r+0x86>
 80147b8:	69a2      	ldr	r2, [r4, #24]
 80147ba:	429a      	cmp	r2, r3
 80147bc:	dc06      	bgt.n	80147cc <_puts_r+0x90>
 80147be:	290a      	cmp	r1, #10
 80147c0:	d004      	beq.n	80147cc <_puts_r+0x90>
 80147c2:	6823      	ldr	r3, [r4, #0]
 80147c4:	1c5a      	adds	r2, r3, #1
 80147c6:	6022      	str	r2, [r4, #0]
 80147c8:	7019      	strb	r1, [r3, #0]
 80147ca:	e7cf      	b.n	801476c <_puts_r+0x30>
 80147cc:	4622      	mov	r2, r4
 80147ce:	4628      	mov	r0, r5
 80147d0:	f000 f848 	bl	8014864 <__swbuf_r>
 80147d4:	3001      	adds	r0, #1
 80147d6:	d1c9      	bne.n	801476c <_puts_r+0x30>
 80147d8:	e7e9      	b.n	80147ae <_puts_r+0x72>
 80147da:	6823      	ldr	r3, [r4, #0]
 80147dc:	200a      	movs	r0, #10
 80147de:	1c5a      	adds	r2, r3, #1
 80147e0:	6022      	str	r2, [r4, #0]
 80147e2:	7018      	strb	r0, [r3, #0]
 80147e4:	e7e5      	b.n	80147b2 <_puts_r+0x76>
 80147e6:	bf00      	nop
 80147e8:	08015820 	.word	0x08015820
 80147ec:	08015840 	.word	0x08015840
 80147f0:	08015800 	.word	0x08015800

080147f4 <puts>:
 80147f4:	4b02      	ldr	r3, [pc, #8]	; (8014800 <puts+0xc>)
 80147f6:	4601      	mov	r1, r0
 80147f8:	6818      	ldr	r0, [r3, #0]
 80147fa:	f7ff bf9f 	b.w	801473c <_puts_r>
 80147fe:	bf00      	nop
 8014800:	24000168 	.word	0x24000168

08014804 <_sbrk_r>:
 8014804:	b538      	push	{r3, r4, r5, lr}
 8014806:	4c06      	ldr	r4, [pc, #24]	; (8014820 <_sbrk_r+0x1c>)
 8014808:	2300      	movs	r3, #0
 801480a:	4605      	mov	r5, r0
 801480c:	4608      	mov	r0, r1
 801480e:	6023      	str	r3, [r4, #0]
 8014810:	f7ec ffc6 	bl	80017a0 <_sbrk>
 8014814:	1c43      	adds	r3, r0, #1
 8014816:	d102      	bne.n	801481e <_sbrk_r+0x1a>
 8014818:	6823      	ldr	r3, [r4, #0]
 801481a:	b103      	cbz	r3, 801481e <_sbrk_r+0x1a>
 801481c:	602b      	str	r3, [r5, #0]
 801481e:	bd38      	pop	{r3, r4, r5, pc}
 8014820:	24041ab8 	.word	0x24041ab8

08014824 <siprintf>:
 8014824:	b40e      	push	{r1, r2, r3}
 8014826:	b500      	push	{lr}
 8014828:	b09c      	sub	sp, #112	; 0x70
 801482a:	ab1d      	add	r3, sp, #116	; 0x74
 801482c:	9002      	str	r0, [sp, #8]
 801482e:	9006      	str	r0, [sp, #24]
 8014830:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014834:	4809      	ldr	r0, [pc, #36]	; (801485c <siprintf+0x38>)
 8014836:	9107      	str	r1, [sp, #28]
 8014838:	9104      	str	r1, [sp, #16]
 801483a:	4909      	ldr	r1, [pc, #36]	; (8014860 <siprintf+0x3c>)
 801483c:	f853 2b04 	ldr.w	r2, [r3], #4
 8014840:	9105      	str	r1, [sp, #20]
 8014842:	6800      	ldr	r0, [r0, #0]
 8014844:	9301      	str	r3, [sp, #4]
 8014846:	a902      	add	r1, sp, #8
 8014848:	f000 fb06 	bl	8014e58 <_svfiprintf_r>
 801484c:	9b02      	ldr	r3, [sp, #8]
 801484e:	2200      	movs	r2, #0
 8014850:	701a      	strb	r2, [r3, #0]
 8014852:	b01c      	add	sp, #112	; 0x70
 8014854:	f85d eb04 	ldr.w	lr, [sp], #4
 8014858:	b003      	add	sp, #12
 801485a:	4770      	bx	lr
 801485c:	24000168 	.word	0x24000168
 8014860:	ffff0208 	.word	0xffff0208

08014864 <__swbuf_r>:
 8014864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014866:	460e      	mov	r6, r1
 8014868:	4614      	mov	r4, r2
 801486a:	4605      	mov	r5, r0
 801486c:	b118      	cbz	r0, 8014876 <__swbuf_r+0x12>
 801486e:	6983      	ldr	r3, [r0, #24]
 8014870:	b90b      	cbnz	r3, 8014876 <__swbuf_r+0x12>
 8014872:	f000 f9a7 	bl	8014bc4 <__sinit>
 8014876:	4b21      	ldr	r3, [pc, #132]	; (80148fc <__swbuf_r+0x98>)
 8014878:	429c      	cmp	r4, r3
 801487a:	d12a      	bne.n	80148d2 <__swbuf_r+0x6e>
 801487c:	686c      	ldr	r4, [r5, #4]
 801487e:	69a3      	ldr	r3, [r4, #24]
 8014880:	60a3      	str	r3, [r4, #8]
 8014882:	89a3      	ldrh	r3, [r4, #12]
 8014884:	071a      	lsls	r2, r3, #28
 8014886:	d52e      	bpl.n	80148e6 <__swbuf_r+0x82>
 8014888:	6923      	ldr	r3, [r4, #16]
 801488a:	b363      	cbz	r3, 80148e6 <__swbuf_r+0x82>
 801488c:	6923      	ldr	r3, [r4, #16]
 801488e:	6820      	ldr	r0, [r4, #0]
 8014890:	1ac0      	subs	r0, r0, r3
 8014892:	6963      	ldr	r3, [r4, #20]
 8014894:	b2f6      	uxtb	r6, r6
 8014896:	4283      	cmp	r3, r0
 8014898:	4637      	mov	r7, r6
 801489a:	dc04      	bgt.n	80148a6 <__swbuf_r+0x42>
 801489c:	4621      	mov	r1, r4
 801489e:	4628      	mov	r0, r5
 80148a0:	f000 f926 	bl	8014af0 <_fflush_r>
 80148a4:	bb28      	cbnz	r0, 80148f2 <__swbuf_r+0x8e>
 80148a6:	68a3      	ldr	r3, [r4, #8]
 80148a8:	3b01      	subs	r3, #1
 80148aa:	60a3      	str	r3, [r4, #8]
 80148ac:	6823      	ldr	r3, [r4, #0]
 80148ae:	1c5a      	adds	r2, r3, #1
 80148b0:	6022      	str	r2, [r4, #0]
 80148b2:	701e      	strb	r6, [r3, #0]
 80148b4:	6963      	ldr	r3, [r4, #20]
 80148b6:	3001      	adds	r0, #1
 80148b8:	4283      	cmp	r3, r0
 80148ba:	d004      	beq.n	80148c6 <__swbuf_r+0x62>
 80148bc:	89a3      	ldrh	r3, [r4, #12]
 80148be:	07db      	lsls	r3, r3, #31
 80148c0:	d519      	bpl.n	80148f6 <__swbuf_r+0x92>
 80148c2:	2e0a      	cmp	r6, #10
 80148c4:	d117      	bne.n	80148f6 <__swbuf_r+0x92>
 80148c6:	4621      	mov	r1, r4
 80148c8:	4628      	mov	r0, r5
 80148ca:	f000 f911 	bl	8014af0 <_fflush_r>
 80148ce:	b190      	cbz	r0, 80148f6 <__swbuf_r+0x92>
 80148d0:	e00f      	b.n	80148f2 <__swbuf_r+0x8e>
 80148d2:	4b0b      	ldr	r3, [pc, #44]	; (8014900 <__swbuf_r+0x9c>)
 80148d4:	429c      	cmp	r4, r3
 80148d6:	d101      	bne.n	80148dc <__swbuf_r+0x78>
 80148d8:	68ac      	ldr	r4, [r5, #8]
 80148da:	e7d0      	b.n	801487e <__swbuf_r+0x1a>
 80148dc:	4b09      	ldr	r3, [pc, #36]	; (8014904 <__swbuf_r+0xa0>)
 80148de:	429c      	cmp	r4, r3
 80148e0:	bf08      	it	eq
 80148e2:	68ec      	ldreq	r4, [r5, #12]
 80148e4:	e7cb      	b.n	801487e <__swbuf_r+0x1a>
 80148e6:	4621      	mov	r1, r4
 80148e8:	4628      	mov	r0, r5
 80148ea:	f000 f80d 	bl	8014908 <__swsetup_r>
 80148ee:	2800      	cmp	r0, #0
 80148f0:	d0cc      	beq.n	801488c <__swbuf_r+0x28>
 80148f2:	f04f 37ff 	mov.w	r7, #4294967295
 80148f6:	4638      	mov	r0, r7
 80148f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80148fa:	bf00      	nop
 80148fc:	08015820 	.word	0x08015820
 8014900:	08015840 	.word	0x08015840
 8014904:	08015800 	.word	0x08015800

08014908 <__swsetup_r>:
 8014908:	4b32      	ldr	r3, [pc, #200]	; (80149d4 <__swsetup_r+0xcc>)
 801490a:	b570      	push	{r4, r5, r6, lr}
 801490c:	681d      	ldr	r5, [r3, #0]
 801490e:	4606      	mov	r6, r0
 8014910:	460c      	mov	r4, r1
 8014912:	b125      	cbz	r5, 801491e <__swsetup_r+0x16>
 8014914:	69ab      	ldr	r3, [r5, #24]
 8014916:	b913      	cbnz	r3, 801491e <__swsetup_r+0x16>
 8014918:	4628      	mov	r0, r5
 801491a:	f000 f953 	bl	8014bc4 <__sinit>
 801491e:	4b2e      	ldr	r3, [pc, #184]	; (80149d8 <__swsetup_r+0xd0>)
 8014920:	429c      	cmp	r4, r3
 8014922:	d10f      	bne.n	8014944 <__swsetup_r+0x3c>
 8014924:	686c      	ldr	r4, [r5, #4]
 8014926:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801492a:	b29a      	uxth	r2, r3
 801492c:	0715      	lsls	r5, r2, #28
 801492e:	d42c      	bmi.n	801498a <__swsetup_r+0x82>
 8014930:	06d0      	lsls	r0, r2, #27
 8014932:	d411      	bmi.n	8014958 <__swsetup_r+0x50>
 8014934:	2209      	movs	r2, #9
 8014936:	6032      	str	r2, [r6, #0]
 8014938:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801493c:	81a3      	strh	r3, [r4, #12]
 801493e:	f04f 30ff 	mov.w	r0, #4294967295
 8014942:	e03e      	b.n	80149c2 <__swsetup_r+0xba>
 8014944:	4b25      	ldr	r3, [pc, #148]	; (80149dc <__swsetup_r+0xd4>)
 8014946:	429c      	cmp	r4, r3
 8014948:	d101      	bne.n	801494e <__swsetup_r+0x46>
 801494a:	68ac      	ldr	r4, [r5, #8]
 801494c:	e7eb      	b.n	8014926 <__swsetup_r+0x1e>
 801494e:	4b24      	ldr	r3, [pc, #144]	; (80149e0 <__swsetup_r+0xd8>)
 8014950:	429c      	cmp	r4, r3
 8014952:	bf08      	it	eq
 8014954:	68ec      	ldreq	r4, [r5, #12]
 8014956:	e7e6      	b.n	8014926 <__swsetup_r+0x1e>
 8014958:	0751      	lsls	r1, r2, #29
 801495a:	d512      	bpl.n	8014982 <__swsetup_r+0x7a>
 801495c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801495e:	b141      	cbz	r1, 8014972 <__swsetup_r+0x6a>
 8014960:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014964:	4299      	cmp	r1, r3
 8014966:	d002      	beq.n	801496e <__swsetup_r+0x66>
 8014968:	4630      	mov	r0, r6
 801496a:	f7ff fe3f 	bl	80145ec <_free_r>
 801496e:	2300      	movs	r3, #0
 8014970:	6363      	str	r3, [r4, #52]	; 0x34
 8014972:	89a3      	ldrh	r3, [r4, #12]
 8014974:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014978:	81a3      	strh	r3, [r4, #12]
 801497a:	2300      	movs	r3, #0
 801497c:	6063      	str	r3, [r4, #4]
 801497e:	6923      	ldr	r3, [r4, #16]
 8014980:	6023      	str	r3, [r4, #0]
 8014982:	89a3      	ldrh	r3, [r4, #12]
 8014984:	f043 0308 	orr.w	r3, r3, #8
 8014988:	81a3      	strh	r3, [r4, #12]
 801498a:	6923      	ldr	r3, [r4, #16]
 801498c:	b94b      	cbnz	r3, 80149a2 <__swsetup_r+0x9a>
 801498e:	89a3      	ldrh	r3, [r4, #12]
 8014990:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014994:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014998:	d003      	beq.n	80149a2 <__swsetup_r+0x9a>
 801499a:	4621      	mov	r1, r4
 801499c:	4630      	mov	r0, r6
 801499e:	f000 f9bf 	bl	8014d20 <__smakebuf_r>
 80149a2:	89a2      	ldrh	r2, [r4, #12]
 80149a4:	f012 0301 	ands.w	r3, r2, #1
 80149a8:	d00c      	beq.n	80149c4 <__swsetup_r+0xbc>
 80149aa:	2300      	movs	r3, #0
 80149ac:	60a3      	str	r3, [r4, #8]
 80149ae:	6963      	ldr	r3, [r4, #20]
 80149b0:	425b      	negs	r3, r3
 80149b2:	61a3      	str	r3, [r4, #24]
 80149b4:	6923      	ldr	r3, [r4, #16]
 80149b6:	b953      	cbnz	r3, 80149ce <__swsetup_r+0xc6>
 80149b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80149bc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80149c0:	d1ba      	bne.n	8014938 <__swsetup_r+0x30>
 80149c2:	bd70      	pop	{r4, r5, r6, pc}
 80149c4:	0792      	lsls	r2, r2, #30
 80149c6:	bf58      	it	pl
 80149c8:	6963      	ldrpl	r3, [r4, #20]
 80149ca:	60a3      	str	r3, [r4, #8]
 80149cc:	e7f2      	b.n	80149b4 <__swsetup_r+0xac>
 80149ce:	2000      	movs	r0, #0
 80149d0:	e7f7      	b.n	80149c2 <__swsetup_r+0xba>
 80149d2:	bf00      	nop
 80149d4:	24000168 	.word	0x24000168
 80149d8:	08015820 	.word	0x08015820
 80149dc:	08015840 	.word	0x08015840
 80149e0:	08015800 	.word	0x08015800

080149e4 <__sflush_r>:
 80149e4:	898a      	ldrh	r2, [r1, #12]
 80149e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80149ea:	4605      	mov	r5, r0
 80149ec:	0710      	lsls	r0, r2, #28
 80149ee:	460c      	mov	r4, r1
 80149f0:	d458      	bmi.n	8014aa4 <__sflush_r+0xc0>
 80149f2:	684b      	ldr	r3, [r1, #4]
 80149f4:	2b00      	cmp	r3, #0
 80149f6:	dc05      	bgt.n	8014a04 <__sflush_r+0x20>
 80149f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80149fa:	2b00      	cmp	r3, #0
 80149fc:	dc02      	bgt.n	8014a04 <__sflush_r+0x20>
 80149fe:	2000      	movs	r0, #0
 8014a00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014a06:	2e00      	cmp	r6, #0
 8014a08:	d0f9      	beq.n	80149fe <__sflush_r+0x1a>
 8014a0a:	2300      	movs	r3, #0
 8014a0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014a10:	682f      	ldr	r7, [r5, #0]
 8014a12:	6a21      	ldr	r1, [r4, #32]
 8014a14:	602b      	str	r3, [r5, #0]
 8014a16:	d032      	beq.n	8014a7e <__sflush_r+0x9a>
 8014a18:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014a1a:	89a3      	ldrh	r3, [r4, #12]
 8014a1c:	075a      	lsls	r2, r3, #29
 8014a1e:	d505      	bpl.n	8014a2c <__sflush_r+0x48>
 8014a20:	6863      	ldr	r3, [r4, #4]
 8014a22:	1ac0      	subs	r0, r0, r3
 8014a24:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014a26:	b10b      	cbz	r3, 8014a2c <__sflush_r+0x48>
 8014a28:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014a2a:	1ac0      	subs	r0, r0, r3
 8014a2c:	2300      	movs	r3, #0
 8014a2e:	4602      	mov	r2, r0
 8014a30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014a32:	6a21      	ldr	r1, [r4, #32]
 8014a34:	4628      	mov	r0, r5
 8014a36:	47b0      	blx	r6
 8014a38:	1c43      	adds	r3, r0, #1
 8014a3a:	89a3      	ldrh	r3, [r4, #12]
 8014a3c:	d106      	bne.n	8014a4c <__sflush_r+0x68>
 8014a3e:	6829      	ldr	r1, [r5, #0]
 8014a40:	291d      	cmp	r1, #29
 8014a42:	d848      	bhi.n	8014ad6 <__sflush_r+0xf2>
 8014a44:	4a29      	ldr	r2, [pc, #164]	; (8014aec <__sflush_r+0x108>)
 8014a46:	40ca      	lsrs	r2, r1
 8014a48:	07d6      	lsls	r6, r2, #31
 8014a4a:	d544      	bpl.n	8014ad6 <__sflush_r+0xf2>
 8014a4c:	2200      	movs	r2, #0
 8014a4e:	6062      	str	r2, [r4, #4]
 8014a50:	04d9      	lsls	r1, r3, #19
 8014a52:	6922      	ldr	r2, [r4, #16]
 8014a54:	6022      	str	r2, [r4, #0]
 8014a56:	d504      	bpl.n	8014a62 <__sflush_r+0x7e>
 8014a58:	1c42      	adds	r2, r0, #1
 8014a5a:	d101      	bne.n	8014a60 <__sflush_r+0x7c>
 8014a5c:	682b      	ldr	r3, [r5, #0]
 8014a5e:	b903      	cbnz	r3, 8014a62 <__sflush_r+0x7e>
 8014a60:	6560      	str	r0, [r4, #84]	; 0x54
 8014a62:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014a64:	602f      	str	r7, [r5, #0]
 8014a66:	2900      	cmp	r1, #0
 8014a68:	d0c9      	beq.n	80149fe <__sflush_r+0x1a>
 8014a6a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014a6e:	4299      	cmp	r1, r3
 8014a70:	d002      	beq.n	8014a78 <__sflush_r+0x94>
 8014a72:	4628      	mov	r0, r5
 8014a74:	f7ff fdba 	bl	80145ec <_free_r>
 8014a78:	2000      	movs	r0, #0
 8014a7a:	6360      	str	r0, [r4, #52]	; 0x34
 8014a7c:	e7c0      	b.n	8014a00 <__sflush_r+0x1c>
 8014a7e:	2301      	movs	r3, #1
 8014a80:	4628      	mov	r0, r5
 8014a82:	47b0      	blx	r6
 8014a84:	1c41      	adds	r1, r0, #1
 8014a86:	d1c8      	bne.n	8014a1a <__sflush_r+0x36>
 8014a88:	682b      	ldr	r3, [r5, #0]
 8014a8a:	2b00      	cmp	r3, #0
 8014a8c:	d0c5      	beq.n	8014a1a <__sflush_r+0x36>
 8014a8e:	2b1d      	cmp	r3, #29
 8014a90:	d001      	beq.n	8014a96 <__sflush_r+0xb2>
 8014a92:	2b16      	cmp	r3, #22
 8014a94:	d101      	bne.n	8014a9a <__sflush_r+0xb6>
 8014a96:	602f      	str	r7, [r5, #0]
 8014a98:	e7b1      	b.n	80149fe <__sflush_r+0x1a>
 8014a9a:	89a3      	ldrh	r3, [r4, #12]
 8014a9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014aa0:	81a3      	strh	r3, [r4, #12]
 8014aa2:	e7ad      	b.n	8014a00 <__sflush_r+0x1c>
 8014aa4:	690f      	ldr	r7, [r1, #16]
 8014aa6:	2f00      	cmp	r7, #0
 8014aa8:	d0a9      	beq.n	80149fe <__sflush_r+0x1a>
 8014aaa:	0793      	lsls	r3, r2, #30
 8014aac:	680e      	ldr	r6, [r1, #0]
 8014aae:	bf08      	it	eq
 8014ab0:	694b      	ldreq	r3, [r1, #20]
 8014ab2:	600f      	str	r7, [r1, #0]
 8014ab4:	bf18      	it	ne
 8014ab6:	2300      	movne	r3, #0
 8014ab8:	eba6 0807 	sub.w	r8, r6, r7
 8014abc:	608b      	str	r3, [r1, #8]
 8014abe:	f1b8 0f00 	cmp.w	r8, #0
 8014ac2:	dd9c      	ble.n	80149fe <__sflush_r+0x1a>
 8014ac4:	4643      	mov	r3, r8
 8014ac6:	463a      	mov	r2, r7
 8014ac8:	6a21      	ldr	r1, [r4, #32]
 8014aca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014acc:	4628      	mov	r0, r5
 8014ace:	47b0      	blx	r6
 8014ad0:	2800      	cmp	r0, #0
 8014ad2:	dc06      	bgt.n	8014ae2 <__sflush_r+0xfe>
 8014ad4:	89a3      	ldrh	r3, [r4, #12]
 8014ad6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014ada:	81a3      	strh	r3, [r4, #12]
 8014adc:	f04f 30ff 	mov.w	r0, #4294967295
 8014ae0:	e78e      	b.n	8014a00 <__sflush_r+0x1c>
 8014ae2:	4407      	add	r7, r0
 8014ae4:	eba8 0800 	sub.w	r8, r8, r0
 8014ae8:	e7e9      	b.n	8014abe <__sflush_r+0xda>
 8014aea:	bf00      	nop
 8014aec:	20400001 	.word	0x20400001

08014af0 <_fflush_r>:
 8014af0:	b538      	push	{r3, r4, r5, lr}
 8014af2:	690b      	ldr	r3, [r1, #16]
 8014af4:	4605      	mov	r5, r0
 8014af6:	460c      	mov	r4, r1
 8014af8:	b1db      	cbz	r3, 8014b32 <_fflush_r+0x42>
 8014afa:	b118      	cbz	r0, 8014b04 <_fflush_r+0x14>
 8014afc:	6983      	ldr	r3, [r0, #24]
 8014afe:	b90b      	cbnz	r3, 8014b04 <_fflush_r+0x14>
 8014b00:	f000 f860 	bl	8014bc4 <__sinit>
 8014b04:	4b0c      	ldr	r3, [pc, #48]	; (8014b38 <_fflush_r+0x48>)
 8014b06:	429c      	cmp	r4, r3
 8014b08:	d109      	bne.n	8014b1e <_fflush_r+0x2e>
 8014b0a:	686c      	ldr	r4, [r5, #4]
 8014b0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014b10:	b17b      	cbz	r3, 8014b32 <_fflush_r+0x42>
 8014b12:	4621      	mov	r1, r4
 8014b14:	4628      	mov	r0, r5
 8014b16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014b1a:	f7ff bf63 	b.w	80149e4 <__sflush_r>
 8014b1e:	4b07      	ldr	r3, [pc, #28]	; (8014b3c <_fflush_r+0x4c>)
 8014b20:	429c      	cmp	r4, r3
 8014b22:	d101      	bne.n	8014b28 <_fflush_r+0x38>
 8014b24:	68ac      	ldr	r4, [r5, #8]
 8014b26:	e7f1      	b.n	8014b0c <_fflush_r+0x1c>
 8014b28:	4b05      	ldr	r3, [pc, #20]	; (8014b40 <_fflush_r+0x50>)
 8014b2a:	429c      	cmp	r4, r3
 8014b2c:	bf08      	it	eq
 8014b2e:	68ec      	ldreq	r4, [r5, #12]
 8014b30:	e7ec      	b.n	8014b0c <_fflush_r+0x1c>
 8014b32:	2000      	movs	r0, #0
 8014b34:	bd38      	pop	{r3, r4, r5, pc}
 8014b36:	bf00      	nop
 8014b38:	08015820 	.word	0x08015820
 8014b3c:	08015840 	.word	0x08015840
 8014b40:	08015800 	.word	0x08015800

08014b44 <std>:
 8014b44:	2300      	movs	r3, #0
 8014b46:	b510      	push	{r4, lr}
 8014b48:	4604      	mov	r4, r0
 8014b4a:	e9c0 3300 	strd	r3, r3, [r0]
 8014b4e:	6083      	str	r3, [r0, #8]
 8014b50:	8181      	strh	r1, [r0, #12]
 8014b52:	6643      	str	r3, [r0, #100]	; 0x64
 8014b54:	81c2      	strh	r2, [r0, #14]
 8014b56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014b5a:	6183      	str	r3, [r0, #24]
 8014b5c:	4619      	mov	r1, r3
 8014b5e:	2208      	movs	r2, #8
 8014b60:	305c      	adds	r0, #92	; 0x5c
 8014b62:	f7ff fd3a 	bl	80145da <memset>
 8014b66:	4b05      	ldr	r3, [pc, #20]	; (8014b7c <std+0x38>)
 8014b68:	6263      	str	r3, [r4, #36]	; 0x24
 8014b6a:	4b05      	ldr	r3, [pc, #20]	; (8014b80 <std+0x3c>)
 8014b6c:	62a3      	str	r3, [r4, #40]	; 0x28
 8014b6e:	4b05      	ldr	r3, [pc, #20]	; (8014b84 <std+0x40>)
 8014b70:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014b72:	4b05      	ldr	r3, [pc, #20]	; (8014b88 <std+0x44>)
 8014b74:	6224      	str	r4, [r4, #32]
 8014b76:	6323      	str	r3, [r4, #48]	; 0x30
 8014b78:	bd10      	pop	{r4, pc}
 8014b7a:	bf00      	nop
 8014b7c:	08015359 	.word	0x08015359
 8014b80:	0801537b 	.word	0x0801537b
 8014b84:	080153b3 	.word	0x080153b3
 8014b88:	080153d7 	.word	0x080153d7

08014b8c <_cleanup_r>:
 8014b8c:	4901      	ldr	r1, [pc, #4]	; (8014b94 <_cleanup_r+0x8>)
 8014b8e:	f000 b885 	b.w	8014c9c <_fwalk_reent>
 8014b92:	bf00      	nop
 8014b94:	08014af1 	.word	0x08014af1

08014b98 <__sfmoreglue>:
 8014b98:	b570      	push	{r4, r5, r6, lr}
 8014b9a:	1e4a      	subs	r2, r1, #1
 8014b9c:	2568      	movs	r5, #104	; 0x68
 8014b9e:	4355      	muls	r5, r2
 8014ba0:	460e      	mov	r6, r1
 8014ba2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014ba6:	f7ff fd6f 	bl	8014688 <_malloc_r>
 8014baa:	4604      	mov	r4, r0
 8014bac:	b140      	cbz	r0, 8014bc0 <__sfmoreglue+0x28>
 8014bae:	2100      	movs	r1, #0
 8014bb0:	e9c0 1600 	strd	r1, r6, [r0]
 8014bb4:	300c      	adds	r0, #12
 8014bb6:	60a0      	str	r0, [r4, #8]
 8014bb8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014bbc:	f7ff fd0d 	bl	80145da <memset>
 8014bc0:	4620      	mov	r0, r4
 8014bc2:	bd70      	pop	{r4, r5, r6, pc}

08014bc4 <__sinit>:
 8014bc4:	6983      	ldr	r3, [r0, #24]
 8014bc6:	b510      	push	{r4, lr}
 8014bc8:	4604      	mov	r4, r0
 8014bca:	bb33      	cbnz	r3, 8014c1a <__sinit+0x56>
 8014bcc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8014bd0:	6503      	str	r3, [r0, #80]	; 0x50
 8014bd2:	4b12      	ldr	r3, [pc, #72]	; (8014c1c <__sinit+0x58>)
 8014bd4:	4a12      	ldr	r2, [pc, #72]	; (8014c20 <__sinit+0x5c>)
 8014bd6:	681b      	ldr	r3, [r3, #0]
 8014bd8:	6282      	str	r2, [r0, #40]	; 0x28
 8014bda:	4298      	cmp	r0, r3
 8014bdc:	bf04      	itt	eq
 8014bde:	2301      	moveq	r3, #1
 8014be0:	6183      	streq	r3, [r0, #24]
 8014be2:	f000 f81f 	bl	8014c24 <__sfp>
 8014be6:	6060      	str	r0, [r4, #4]
 8014be8:	4620      	mov	r0, r4
 8014bea:	f000 f81b 	bl	8014c24 <__sfp>
 8014bee:	60a0      	str	r0, [r4, #8]
 8014bf0:	4620      	mov	r0, r4
 8014bf2:	f000 f817 	bl	8014c24 <__sfp>
 8014bf6:	2200      	movs	r2, #0
 8014bf8:	60e0      	str	r0, [r4, #12]
 8014bfa:	2104      	movs	r1, #4
 8014bfc:	6860      	ldr	r0, [r4, #4]
 8014bfe:	f7ff ffa1 	bl	8014b44 <std>
 8014c02:	2201      	movs	r2, #1
 8014c04:	2109      	movs	r1, #9
 8014c06:	68a0      	ldr	r0, [r4, #8]
 8014c08:	f7ff ff9c 	bl	8014b44 <std>
 8014c0c:	2202      	movs	r2, #2
 8014c0e:	2112      	movs	r1, #18
 8014c10:	68e0      	ldr	r0, [r4, #12]
 8014c12:	f7ff ff97 	bl	8014b44 <std>
 8014c16:	2301      	movs	r3, #1
 8014c18:	61a3      	str	r3, [r4, #24]
 8014c1a:	bd10      	pop	{r4, pc}
 8014c1c:	080157fc 	.word	0x080157fc
 8014c20:	08014b8d 	.word	0x08014b8d

08014c24 <__sfp>:
 8014c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c26:	4b1b      	ldr	r3, [pc, #108]	; (8014c94 <__sfp+0x70>)
 8014c28:	681e      	ldr	r6, [r3, #0]
 8014c2a:	69b3      	ldr	r3, [r6, #24]
 8014c2c:	4607      	mov	r7, r0
 8014c2e:	b913      	cbnz	r3, 8014c36 <__sfp+0x12>
 8014c30:	4630      	mov	r0, r6
 8014c32:	f7ff ffc7 	bl	8014bc4 <__sinit>
 8014c36:	3648      	adds	r6, #72	; 0x48
 8014c38:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014c3c:	3b01      	subs	r3, #1
 8014c3e:	d503      	bpl.n	8014c48 <__sfp+0x24>
 8014c40:	6833      	ldr	r3, [r6, #0]
 8014c42:	b133      	cbz	r3, 8014c52 <__sfp+0x2e>
 8014c44:	6836      	ldr	r6, [r6, #0]
 8014c46:	e7f7      	b.n	8014c38 <__sfp+0x14>
 8014c48:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014c4c:	b16d      	cbz	r5, 8014c6a <__sfp+0x46>
 8014c4e:	3468      	adds	r4, #104	; 0x68
 8014c50:	e7f4      	b.n	8014c3c <__sfp+0x18>
 8014c52:	2104      	movs	r1, #4
 8014c54:	4638      	mov	r0, r7
 8014c56:	f7ff ff9f 	bl	8014b98 <__sfmoreglue>
 8014c5a:	6030      	str	r0, [r6, #0]
 8014c5c:	2800      	cmp	r0, #0
 8014c5e:	d1f1      	bne.n	8014c44 <__sfp+0x20>
 8014c60:	230c      	movs	r3, #12
 8014c62:	603b      	str	r3, [r7, #0]
 8014c64:	4604      	mov	r4, r0
 8014c66:	4620      	mov	r0, r4
 8014c68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014c6a:	4b0b      	ldr	r3, [pc, #44]	; (8014c98 <__sfp+0x74>)
 8014c6c:	6665      	str	r5, [r4, #100]	; 0x64
 8014c6e:	e9c4 5500 	strd	r5, r5, [r4]
 8014c72:	60a5      	str	r5, [r4, #8]
 8014c74:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8014c78:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8014c7c:	2208      	movs	r2, #8
 8014c7e:	4629      	mov	r1, r5
 8014c80:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014c84:	f7ff fca9 	bl	80145da <memset>
 8014c88:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014c8c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014c90:	e7e9      	b.n	8014c66 <__sfp+0x42>
 8014c92:	bf00      	nop
 8014c94:	080157fc 	.word	0x080157fc
 8014c98:	ffff0001 	.word	0xffff0001

08014c9c <_fwalk_reent>:
 8014c9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014ca0:	4680      	mov	r8, r0
 8014ca2:	4689      	mov	r9, r1
 8014ca4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014ca8:	2600      	movs	r6, #0
 8014caa:	b914      	cbnz	r4, 8014cb2 <_fwalk_reent+0x16>
 8014cac:	4630      	mov	r0, r6
 8014cae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014cb2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8014cb6:	3f01      	subs	r7, #1
 8014cb8:	d501      	bpl.n	8014cbe <_fwalk_reent+0x22>
 8014cba:	6824      	ldr	r4, [r4, #0]
 8014cbc:	e7f5      	b.n	8014caa <_fwalk_reent+0xe>
 8014cbe:	89ab      	ldrh	r3, [r5, #12]
 8014cc0:	2b01      	cmp	r3, #1
 8014cc2:	d907      	bls.n	8014cd4 <_fwalk_reent+0x38>
 8014cc4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014cc8:	3301      	adds	r3, #1
 8014cca:	d003      	beq.n	8014cd4 <_fwalk_reent+0x38>
 8014ccc:	4629      	mov	r1, r5
 8014cce:	4640      	mov	r0, r8
 8014cd0:	47c8      	blx	r9
 8014cd2:	4306      	orrs	r6, r0
 8014cd4:	3568      	adds	r5, #104	; 0x68
 8014cd6:	e7ee      	b.n	8014cb6 <_fwalk_reent+0x1a>

08014cd8 <__swhatbuf_r>:
 8014cd8:	b570      	push	{r4, r5, r6, lr}
 8014cda:	460e      	mov	r6, r1
 8014cdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014ce0:	2900      	cmp	r1, #0
 8014ce2:	b096      	sub	sp, #88	; 0x58
 8014ce4:	4614      	mov	r4, r2
 8014ce6:	461d      	mov	r5, r3
 8014ce8:	da07      	bge.n	8014cfa <__swhatbuf_r+0x22>
 8014cea:	2300      	movs	r3, #0
 8014cec:	602b      	str	r3, [r5, #0]
 8014cee:	89b3      	ldrh	r3, [r6, #12]
 8014cf0:	061a      	lsls	r2, r3, #24
 8014cf2:	d410      	bmi.n	8014d16 <__swhatbuf_r+0x3e>
 8014cf4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014cf8:	e00e      	b.n	8014d18 <__swhatbuf_r+0x40>
 8014cfa:	466a      	mov	r2, sp
 8014cfc:	f000 fb92 	bl	8015424 <_fstat_r>
 8014d00:	2800      	cmp	r0, #0
 8014d02:	dbf2      	blt.n	8014cea <__swhatbuf_r+0x12>
 8014d04:	9a01      	ldr	r2, [sp, #4]
 8014d06:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014d0a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014d0e:	425a      	negs	r2, r3
 8014d10:	415a      	adcs	r2, r3
 8014d12:	602a      	str	r2, [r5, #0]
 8014d14:	e7ee      	b.n	8014cf4 <__swhatbuf_r+0x1c>
 8014d16:	2340      	movs	r3, #64	; 0x40
 8014d18:	2000      	movs	r0, #0
 8014d1a:	6023      	str	r3, [r4, #0]
 8014d1c:	b016      	add	sp, #88	; 0x58
 8014d1e:	bd70      	pop	{r4, r5, r6, pc}

08014d20 <__smakebuf_r>:
 8014d20:	898b      	ldrh	r3, [r1, #12]
 8014d22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014d24:	079d      	lsls	r5, r3, #30
 8014d26:	4606      	mov	r6, r0
 8014d28:	460c      	mov	r4, r1
 8014d2a:	d507      	bpl.n	8014d3c <__smakebuf_r+0x1c>
 8014d2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014d30:	6023      	str	r3, [r4, #0]
 8014d32:	6123      	str	r3, [r4, #16]
 8014d34:	2301      	movs	r3, #1
 8014d36:	6163      	str	r3, [r4, #20]
 8014d38:	b002      	add	sp, #8
 8014d3a:	bd70      	pop	{r4, r5, r6, pc}
 8014d3c:	ab01      	add	r3, sp, #4
 8014d3e:	466a      	mov	r2, sp
 8014d40:	f7ff ffca 	bl	8014cd8 <__swhatbuf_r>
 8014d44:	9900      	ldr	r1, [sp, #0]
 8014d46:	4605      	mov	r5, r0
 8014d48:	4630      	mov	r0, r6
 8014d4a:	f7ff fc9d 	bl	8014688 <_malloc_r>
 8014d4e:	b948      	cbnz	r0, 8014d64 <__smakebuf_r+0x44>
 8014d50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014d54:	059a      	lsls	r2, r3, #22
 8014d56:	d4ef      	bmi.n	8014d38 <__smakebuf_r+0x18>
 8014d58:	f023 0303 	bic.w	r3, r3, #3
 8014d5c:	f043 0302 	orr.w	r3, r3, #2
 8014d60:	81a3      	strh	r3, [r4, #12]
 8014d62:	e7e3      	b.n	8014d2c <__smakebuf_r+0xc>
 8014d64:	4b0d      	ldr	r3, [pc, #52]	; (8014d9c <__smakebuf_r+0x7c>)
 8014d66:	62b3      	str	r3, [r6, #40]	; 0x28
 8014d68:	89a3      	ldrh	r3, [r4, #12]
 8014d6a:	6020      	str	r0, [r4, #0]
 8014d6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014d70:	81a3      	strh	r3, [r4, #12]
 8014d72:	9b00      	ldr	r3, [sp, #0]
 8014d74:	6163      	str	r3, [r4, #20]
 8014d76:	9b01      	ldr	r3, [sp, #4]
 8014d78:	6120      	str	r0, [r4, #16]
 8014d7a:	b15b      	cbz	r3, 8014d94 <__smakebuf_r+0x74>
 8014d7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014d80:	4630      	mov	r0, r6
 8014d82:	f000 fb61 	bl	8015448 <_isatty_r>
 8014d86:	b128      	cbz	r0, 8014d94 <__smakebuf_r+0x74>
 8014d88:	89a3      	ldrh	r3, [r4, #12]
 8014d8a:	f023 0303 	bic.w	r3, r3, #3
 8014d8e:	f043 0301 	orr.w	r3, r3, #1
 8014d92:	81a3      	strh	r3, [r4, #12]
 8014d94:	89a3      	ldrh	r3, [r4, #12]
 8014d96:	431d      	orrs	r5, r3
 8014d98:	81a5      	strh	r5, [r4, #12]
 8014d9a:	e7cd      	b.n	8014d38 <__smakebuf_r+0x18>
 8014d9c:	08014b8d 	.word	0x08014b8d

08014da0 <__malloc_lock>:
 8014da0:	4770      	bx	lr

08014da2 <__malloc_unlock>:
 8014da2:	4770      	bx	lr

08014da4 <__ssputs_r>:
 8014da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014da8:	688e      	ldr	r6, [r1, #8]
 8014daa:	429e      	cmp	r6, r3
 8014dac:	4682      	mov	sl, r0
 8014dae:	460c      	mov	r4, r1
 8014db0:	4690      	mov	r8, r2
 8014db2:	4699      	mov	r9, r3
 8014db4:	d837      	bhi.n	8014e26 <__ssputs_r+0x82>
 8014db6:	898a      	ldrh	r2, [r1, #12]
 8014db8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014dbc:	d031      	beq.n	8014e22 <__ssputs_r+0x7e>
 8014dbe:	6825      	ldr	r5, [r4, #0]
 8014dc0:	6909      	ldr	r1, [r1, #16]
 8014dc2:	1a6f      	subs	r7, r5, r1
 8014dc4:	6965      	ldr	r5, [r4, #20]
 8014dc6:	2302      	movs	r3, #2
 8014dc8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014dcc:	fb95 f5f3 	sdiv	r5, r5, r3
 8014dd0:	f109 0301 	add.w	r3, r9, #1
 8014dd4:	443b      	add	r3, r7
 8014dd6:	429d      	cmp	r5, r3
 8014dd8:	bf38      	it	cc
 8014dda:	461d      	movcc	r5, r3
 8014ddc:	0553      	lsls	r3, r2, #21
 8014dde:	d530      	bpl.n	8014e42 <__ssputs_r+0x9e>
 8014de0:	4629      	mov	r1, r5
 8014de2:	f7ff fc51 	bl	8014688 <_malloc_r>
 8014de6:	4606      	mov	r6, r0
 8014de8:	b950      	cbnz	r0, 8014e00 <__ssputs_r+0x5c>
 8014dea:	230c      	movs	r3, #12
 8014dec:	f8ca 3000 	str.w	r3, [sl]
 8014df0:	89a3      	ldrh	r3, [r4, #12]
 8014df2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014df6:	81a3      	strh	r3, [r4, #12]
 8014df8:	f04f 30ff 	mov.w	r0, #4294967295
 8014dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014e00:	463a      	mov	r2, r7
 8014e02:	6921      	ldr	r1, [r4, #16]
 8014e04:	f7ff fbde 	bl	80145c4 <memcpy>
 8014e08:	89a3      	ldrh	r3, [r4, #12]
 8014e0a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014e0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014e12:	81a3      	strh	r3, [r4, #12]
 8014e14:	6126      	str	r6, [r4, #16]
 8014e16:	6165      	str	r5, [r4, #20]
 8014e18:	443e      	add	r6, r7
 8014e1a:	1bed      	subs	r5, r5, r7
 8014e1c:	6026      	str	r6, [r4, #0]
 8014e1e:	60a5      	str	r5, [r4, #8]
 8014e20:	464e      	mov	r6, r9
 8014e22:	454e      	cmp	r6, r9
 8014e24:	d900      	bls.n	8014e28 <__ssputs_r+0x84>
 8014e26:	464e      	mov	r6, r9
 8014e28:	4632      	mov	r2, r6
 8014e2a:	4641      	mov	r1, r8
 8014e2c:	6820      	ldr	r0, [r4, #0]
 8014e2e:	f000 fb2d 	bl	801548c <memmove>
 8014e32:	68a3      	ldr	r3, [r4, #8]
 8014e34:	1b9b      	subs	r3, r3, r6
 8014e36:	60a3      	str	r3, [r4, #8]
 8014e38:	6823      	ldr	r3, [r4, #0]
 8014e3a:	441e      	add	r6, r3
 8014e3c:	6026      	str	r6, [r4, #0]
 8014e3e:	2000      	movs	r0, #0
 8014e40:	e7dc      	b.n	8014dfc <__ssputs_r+0x58>
 8014e42:	462a      	mov	r2, r5
 8014e44:	f000 fb3b 	bl	80154be <_realloc_r>
 8014e48:	4606      	mov	r6, r0
 8014e4a:	2800      	cmp	r0, #0
 8014e4c:	d1e2      	bne.n	8014e14 <__ssputs_r+0x70>
 8014e4e:	6921      	ldr	r1, [r4, #16]
 8014e50:	4650      	mov	r0, sl
 8014e52:	f7ff fbcb 	bl	80145ec <_free_r>
 8014e56:	e7c8      	b.n	8014dea <__ssputs_r+0x46>

08014e58 <_svfiprintf_r>:
 8014e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e5c:	461d      	mov	r5, r3
 8014e5e:	898b      	ldrh	r3, [r1, #12]
 8014e60:	061f      	lsls	r7, r3, #24
 8014e62:	b09d      	sub	sp, #116	; 0x74
 8014e64:	4680      	mov	r8, r0
 8014e66:	460c      	mov	r4, r1
 8014e68:	4616      	mov	r6, r2
 8014e6a:	d50f      	bpl.n	8014e8c <_svfiprintf_r+0x34>
 8014e6c:	690b      	ldr	r3, [r1, #16]
 8014e6e:	b96b      	cbnz	r3, 8014e8c <_svfiprintf_r+0x34>
 8014e70:	2140      	movs	r1, #64	; 0x40
 8014e72:	f7ff fc09 	bl	8014688 <_malloc_r>
 8014e76:	6020      	str	r0, [r4, #0]
 8014e78:	6120      	str	r0, [r4, #16]
 8014e7a:	b928      	cbnz	r0, 8014e88 <_svfiprintf_r+0x30>
 8014e7c:	230c      	movs	r3, #12
 8014e7e:	f8c8 3000 	str.w	r3, [r8]
 8014e82:	f04f 30ff 	mov.w	r0, #4294967295
 8014e86:	e0c8      	b.n	801501a <_svfiprintf_r+0x1c2>
 8014e88:	2340      	movs	r3, #64	; 0x40
 8014e8a:	6163      	str	r3, [r4, #20]
 8014e8c:	2300      	movs	r3, #0
 8014e8e:	9309      	str	r3, [sp, #36]	; 0x24
 8014e90:	2320      	movs	r3, #32
 8014e92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014e96:	2330      	movs	r3, #48	; 0x30
 8014e98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014e9c:	9503      	str	r5, [sp, #12]
 8014e9e:	f04f 0b01 	mov.w	fp, #1
 8014ea2:	4637      	mov	r7, r6
 8014ea4:	463d      	mov	r5, r7
 8014ea6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8014eaa:	b10b      	cbz	r3, 8014eb0 <_svfiprintf_r+0x58>
 8014eac:	2b25      	cmp	r3, #37	; 0x25
 8014eae:	d13e      	bne.n	8014f2e <_svfiprintf_r+0xd6>
 8014eb0:	ebb7 0a06 	subs.w	sl, r7, r6
 8014eb4:	d00b      	beq.n	8014ece <_svfiprintf_r+0x76>
 8014eb6:	4653      	mov	r3, sl
 8014eb8:	4632      	mov	r2, r6
 8014eba:	4621      	mov	r1, r4
 8014ebc:	4640      	mov	r0, r8
 8014ebe:	f7ff ff71 	bl	8014da4 <__ssputs_r>
 8014ec2:	3001      	adds	r0, #1
 8014ec4:	f000 80a4 	beq.w	8015010 <_svfiprintf_r+0x1b8>
 8014ec8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014eca:	4453      	add	r3, sl
 8014ecc:	9309      	str	r3, [sp, #36]	; 0x24
 8014ece:	783b      	ldrb	r3, [r7, #0]
 8014ed0:	2b00      	cmp	r3, #0
 8014ed2:	f000 809d 	beq.w	8015010 <_svfiprintf_r+0x1b8>
 8014ed6:	2300      	movs	r3, #0
 8014ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8014edc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014ee0:	9304      	str	r3, [sp, #16]
 8014ee2:	9307      	str	r3, [sp, #28]
 8014ee4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014ee8:	931a      	str	r3, [sp, #104]	; 0x68
 8014eea:	462f      	mov	r7, r5
 8014eec:	2205      	movs	r2, #5
 8014eee:	f817 1b01 	ldrb.w	r1, [r7], #1
 8014ef2:	4850      	ldr	r0, [pc, #320]	; (8015034 <_svfiprintf_r+0x1dc>)
 8014ef4:	f7eb f9fc 	bl	80002f0 <memchr>
 8014ef8:	9b04      	ldr	r3, [sp, #16]
 8014efa:	b9d0      	cbnz	r0, 8014f32 <_svfiprintf_r+0xda>
 8014efc:	06d9      	lsls	r1, r3, #27
 8014efe:	bf44      	itt	mi
 8014f00:	2220      	movmi	r2, #32
 8014f02:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014f06:	071a      	lsls	r2, r3, #28
 8014f08:	bf44      	itt	mi
 8014f0a:	222b      	movmi	r2, #43	; 0x2b
 8014f0c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014f10:	782a      	ldrb	r2, [r5, #0]
 8014f12:	2a2a      	cmp	r2, #42	; 0x2a
 8014f14:	d015      	beq.n	8014f42 <_svfiprintf_r+0xea>
 8014f16:	9a07      	ldr	r2, [sp, #28]
 8014f18:	462f      	mov	r7, r5
 8014f1a:	2000      	movs	r0, #0
 8014f1c:	250a      	movs	r5, #10
 8014f1e:	4639      	mov	r1, r7
 8014f20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014f24:	3b30      	subs	r3, #48	; 0x30
 8014f26:	2b09      	cmp	r3, #9
 8014f28:	d94d      	bls.n	8014fc6 <_svfiprintf_r+0x16e>
 8014f2a:	b1b8      	cbz	r0, 8014f5c <_svfiprintf_r+0x104>
 8014f2c:	e00f      	b.n	8014f4e <_svfiprintf_r+0xf6>
 8014f2e:	462f      	mov	r7, r5
 8014f30:	e7b8      	b.n	8014ea4 <_svfiprintf_r+0x4c>
 8014f32:	4a40      	ldr	r2, [pc, #256]	; (8015034 <_svfiprintf_r+0x1dc>)
 8014f34:	1a80      	subs	r0, r0, r2
 8014f36:	fa0b f000 	lsl.w	r0, fp, r0
 8014f3a:	4318      	orrs	r0, r3
 8014f3c:	9004      	str	r0, [sp, #16]
 8014f3e:	463d      	mov	r5, r7
 8014f40:	e7d3      	b.n	8014eea <_svfiprintf_r+0x92>
 8014f42:	9a03      	ldr	r2, [sp, #12]
 8014f44:	1d11      	adds	r1, r2, #4
 8014f46:	6812      	ldr	r2, [r2, #0]
 8014f48:	9103      	str	r1, [sp, #12]
 8014f4a:	2a00      	cmp	r2, #0
 8014f4c:	db01      	blt.n	8014f52 <_svfiprintf_r+0xfa>
 8014f4e:	9207      	str	r2, [sp, #28]
 8014f50:	e004      	b.n	8014f5c <_svfiprintf_r+0x104>
 8014f52:	4252      	negs	r2, r2
 8014f54:	f043 0302 	orr.w	r3, r3, #2
 8014f58:	9207      	str	r2, [sp, #28]
 8014f5a:	9304      	str	r3, [sp, #16]
 8014f5c:	783b      	ldrb	r3, [r7, #0]
 8014f5e:	2b2e      	cmp	r3, #46	; 0x2e
 8014f60:	d10c      	bne.n	8014f7c <_svfiprintf_r+0x124>
 8014f62:	787b      	ldrb	r3, [r7, #1]
 8014f64:	2b2a      	cmp	r3, #42	; 0x2a
 8014f66:	d133      	bne.n	8014fd0 <_svfiprintf_r+0x178>
 8014f68:	9b03      	ldr	r3, [sp, #12]
 8014f6a:	1d1a      	adds	r2, r3, #4
 8014f6c:	681b      	ldr	r3, [r3, #0]
 8014f6e:	9203      	str	r2, [sp, #12]
 8014f70:	2b00      	cmp	r3, #0
 8014f72:	bfb8      	it	lt
 8014f74:	f04f 33ff 	movlt.w	r3, #4294967295
 8014f78:	3702      	adds	r7, #2
 8014f7a:	9305      	str	r3, [sp, #20]
 8014f7c:	4d2e      	ldr	r5, [pc, #184]	; (8015038 <_svfiprintf_r+0x1e0>)
 8014f7e:	7839      	ldrb	r1, [r7, #0]
 8014f80:	2203      	movs	r2, #3
 8014f82:	4628      	mov	r0, r5
 8014f84:	f7eb f9b4 	bl	80002f0 <memchr>
 8014f88:	b138      	cbz	r0, 8014f9a <_svfiprintf_r+0x142>
 8014f8a:	2340      	movs	r3, #64	; 0x40
 8014f8c:	1b40      	subs	r0, r0, r5
 8014f8e:	fa03 f000 	lsl.w	r0, r3, r0
 8014f92:	9b04      	ldr	r3, [sp, #16]
 8014f94:	4303      	orrs	r3, r0
 8014f96:	3701      	adds	r7, #1
 8014f98:	9304      	str	r3, [sp, #16]
 8014f9a:	7839      	ldrb	r1, [r7, #0]
 8014f9c:	4827      	ldr	r0, [pc, #156]	; (801503c <_svfiprintf_r+0x1e4>)
 8014f9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014fa2:	2206      	movs	r2, #6
 8014fa4:	1c7e      	adds	r6, r7, #1
 8014fa6:	f7eb f9a3 	bl	80002f0 <memchr>
 8014faa:	2800      	cmp	r0, #0
 8014fac:	d038      	beq.n	8015020 <_svfiprintf_r+0x1c8>
 8014fae:	4b24      	ldr	r3, [pc, #144]	; (8015040 <_svfiprintf_r+0x1e8>)
 8014fb0:	bb13      	cbnz	r3, 8014ff8 <_svfiprintf_r+0x1a0>
 8014fb2:	9b03      	ldr	r3, [sp, #12]
 8014fb4:	3307      	adds	r3, #7
 8014fb6:	f023 0307 	bic.w	r3, r3, #7
 8014fba:	3308      	adds	r3, #8
 8014fbc:	9303      	str	r3, [sp, #12]
 8014fbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014fc0:	444b      	add	r3, r9
 8014fc2:	9309      	str	r3, [sp, #36]	; 0x24
 8014fc4:	e76d      	b.n	8014ea2 <_svfiprintf_r+0x4a>
 8014fc6:	fb05 3202 	mla	r2, r5, r2, r3
 8014fca:	2001      	movs	r0, #1
 8014fcc:	460f      	mov	r7, r1
 8014fce:	e7a6      	b.n	8014f1e <_svfiprintf_r+0xc6>
 8014fd0:	2300      	movs	r3, #0
 8014fd2:	3701      	adds	r7, #1
 8014fd4:	9305      	str	r3, [sp, #20]
 8014fd6:	4619      	mov	r1, r3
 8014fd8:	250a      	movs	r5, #10
 8014fda:	4638      	mov	r0, r7
 8014fdc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014fe0:	3a30      	subs	r2, #48	; 0x30
 8014fe2:	2a09      	cmp	r2, #9
 8014fe4:	d903      	bls.n	8014fee <_svfiprintf_r+0x196>
 8014fe6:	2b00      	cmp	r3, #0
 8014fe8:	d0c8      	beq.n	8014f7c <_svfiprintf_r+0x124>
 8014fea:	9105      	str	r1, [sp, #20]
 8014fec:	e7c6      	b.n	8014f7c <_svfiprintf_r+0x124>
 8014fee:	fb05 2101 	mla	r1, r5, r1, r2
 8014ff2:	2301      	movs	r3, #1
 8014ff4:	4607      	mov	r7, r0
 8014ff6:	e7f0      	b.n	8014fda <_svfiprintf_r+0x182>
 8014ff8:	ab03      	add	r3, sp, #12
 8014ffa:	9300      	str	r3, [sp, #0]
 8014ffc:	4622      	mov	r2, r4
 8014ffe:	4b11      	ldr	r3, [pc, #68]	; (8015044 <_svfiprintf_r+0x1ec>)
 8015000:	a904      	add	r1, sp, #16
 8015002:	4640      	mov	r0, r8
 8015004:	f3af 8000 	nop.w
 8015008:	f1b0 3fff 	cmp.w	r0, #4294967295
 801500c:	4681      	mov	r9, r0
 801500e:	d1d6      	bne.n	8014fbe <_svfiprintf_r+0x166>
 8015010:	89a3      	ldrh	r3, [r4, #12]
 8015012:	065b      	lsls	r3, r3, #25
 8015014:	f53f af35 	bmi.w	8014e82 <_svfiprintf_r+0x2a>
 8015018:	9809      	ldr	r0, [sp, #36]	; 0x24
 801501a:	b01d      	add	sp, #116	; 0x74
 801501c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015020:	ab03      	add	r3, sp, #12
 8015022:	9300      	str	r3, [sp, #0]
 8015024:	4622      	mov	r2, r4
 8015026:	4b07      	ldr	r3, [pc, #28]	; (8015044 <_svfiprintf_r+0x1ec>)
 8015028:	a904      	add	r1, sp, #16
 801502a:	4640      	mov	r0, r8
 801502c:	f000 f882 	bl	8015134 <_printf_i>
 8015030:	e7ea      	b.n	8015008 <_svfiprintf_r+0x1b0>
 8015032:	bf00      	nop
 8015034:	08015860 	.word	0x08015860
 8015038:	08015866 	.word	0x08015866
 801503c:	0801586a 	.word	0x0801586a
 8015040:	00000000 	.word	0x00000000
 8015044:	08014da5 	.word	0x08014da5

08015048 <_printf_common>:
 8015048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801504c:	4691      	mov	r9, r2
 801504e:	461f      	mov	r7, r3
 8015050:	688a      	ldr	r2, [r1, #8]
 8015052:	690b      	ldr	r3, [r1, #16]
 8015054:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015058:	4293      	cmp	r3, r2
 801505a:	bfb8      	it	lt
 801505c:	4613      	movlt	r3, r2
 801505e:	f8c9 3000 	str.w	r3, [r9]
 8015062:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015066:	4606      	mov	r6, r0
 8015068:	460c      	mov	r4, r1
 801506a:	b112      	cbz	r2, 8015072 <_printf_common+0x2a>
 801506c:	3301      	adds	r3, #1
 801506e:	f8c9 3000 	str.w	r3, [r9]
 8015072:	6823      	ldr	r3, [r4, #0]
 8015074:	0699      	lsls	r1, r3, #26
 8015076:	bf42      	ittt	mi
 8015078:	f8d9 3000 	ldrmi.w	r3, [r9]
 801507c:	3302      	addmi	r3, #2
 801507e:	f8c9 3000 	strmi.w	r3, [r9]
 8015082:	6825      	ldr	r5, [r4, #0]
 8015084:	f015 0506 	ands.w	r5, r5, #6
 8015088:	d107      	bne.n	801509a <_printf_common+0x52>
 801508a:	f104 0a19 	add.w	sl, r4, #25
 801508e:	68e3      	ldr	r3, [r4, #12]
 8015090:	f8d9 2000 	ldr.w	r2, [r9]
 8015094:	1a9b      	subs	r3, r3, r2
 8015096:	42ab      	cmp	r3, r5
 8015098:	dc28      	bgt.n	80150ec <_printf_common+0xa4>
 801509a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801509e:	6822      	ldr	r2, [r4, #0]
 80150a0:	3300      	adds	r3, #0
 80150a2:	bf18      	it	ne
 80150a4:	2301      	movne	r3, #1
 80150a6:	0692      	lsls	r2, r2, #26
 80150a8:	d42d      	bmi.n	8015106 <_printf_common+0xbe>
 80150aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80150ae:	4639      	mov	r1, r7
 80150b0:	4630      	mov	r0, r6
 80150b2:	47c0      	blx	r8
 80150b4:	3001      	adds	r0, #1
 80150b6:	d020      	beq.n	80150fa <_printf_common+0xb2>
 80150b8:	6823      	ldr	r3, [r4, #0]
 80150ba:	68e5      	ldr	r5, [r4, #12]
 80150bc:	f8d9 2000 	ldr.w	r2, [r9]
 80150c0:	f003 0306 	and.w	r3, r3, #6
 80150c4:	2b04      	cmp	r3, #4
 80150c6:	bf08      	it	eq
 80150c8:	1aad      	subeq	r5, r5, r2
 80150ca:	68a3      	ldr	r3, [r4, #8]
 80150cc:	6922      	ldr	r2, [r4, #16]
 80150ce:	bf0c      	ite	eq
 80150d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80150d4:	2500      	movne	r5, #0
 80150d6:	4293      	cmp	r3, r2
 80150d8:	bfc4      	itt	gt
 80150da:	1a9b      	subgt	r3, r3, r2
 80150dc:	18ed      	addgt	r5, r5, r3
 80150de:	f04f 0900 	mov.w	r9, #0
 80150e2:	341a      	adds	r4, #26
 80150e4:	454d      	cmp	r5, r9
 80150e6:	d11a      	bne.n	801511e <_printf_common+0xd6>
 80150e8:	2000      	movs	r0, #0
 80150ea:	e008      	b.n	80150fe <_printf_common+0xb6>
 80150ec:	2301      	movs	r3, #1
 80150ee:	4652      	mov	r2, sl
 80150f0:	4639      	mov	r1, r7
 80150f2:	4630      	mov	r0, r6
 80150f4:	47c0      	blx	r8
 80150f6:	3001      	adds	r0, #1
 80150f8:	d103      	bne.n	8015102 <_printf_common+0xba>
 80150fa:	f04f 30ff 	mov.w	r0, #4294967295
 80150fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015102:	3501      	adds	r5, #1
 8015104:	e7c3      	b.n	801508e <_printf_common+0x46>
 8015106:	18e1      	adds	r1, r4, r3
 8015108:	1c5a      	adds	r2, r3, #1
 801510a:	2030      	movs	r0, #48	; 0x30
 801510c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015110:	4422      	add	r2, r4
 8015112:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015116:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801511a:	3302      	adds	r3, #2
 801511c:	e7c5      	b.n	80150aa <_printf_common+0x62>
 801511e:	2301      	movs	r3, #1
 8015120:	4622      	mov	r2, r4
 8015122:	4639      	mov	r1, r7
 8015124:	4630      	mov	r0, r6
 8015126:	47c0      	blx	r8
 8015128:	3001      	adds	r0, #1
 801512a:	d0e6      	beq.n	80150fa <_printf_common+0xb2>
 801512c:	f109 0901 	add.w	r9, r9, #1
 8015130:	e7d8      	b.n	80150e4 <_printf_common+0x9c>
	...

08015134 <_printf_i>:
 8015134:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015138:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801513c:	460c      	mov	r4, r1
 801513e:	7e09      	ldrb	r1, [r1, #24]
 8015140:	b085      	sub	sp, #20
 8015142:	296e      	cmp	r1, #110	; 0x6e
 8015144:	4617      	mov	r7, r2
 8015146:	4606      	mov	r6, r0
 8015148:	4698      	mov	r8, r3
 801514a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801514c:	f000 80b3 	beq.w	80152b6 <_printf_i+0x182>
 8015150:	d822      	bhi.n	8015198 <_printf_i+0x64>
 8015152:	2963      	cmp	r1, #99	; 0x63
 8015154:	d036      	beq.n	80151c4 <_printf_i+0x90>
 8015156:	d80a      	bhi.n	801516e <_printf_i+0x3a>
 8015158:	2900      	cmp	r1, #0
 801515a:	f000 80b9 	beq.w	80152d0 <_printf_i+0x19c>
 801515e:	2958      	cmp	r1, #88	; 0x58
 8015160:	f000 8083 	beq.w	801526a <_printf_i+0x136>
 8015164:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015168:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801516c:	e032      	b.n	80151d4 <_printf_i+0xa0>
 801516e:	2964      	cmp	r1, #100	; 0x64
 8015170:	d001      	beq.n	8015176 <_printf_i+0x42>
 8015172:	2969      	cmp	r1, #105	; 0x69
 8015174:	d1f6      	bne.n	8015164 <_printf_i+0x30>
 8015176:	6820      	ldr	r0, [r4, #0]
 8015178:	6813      	ldr	r3, [r2, #0]
 801517a:	0605      	lsls	r5, r0, #24
 801517c:	f103 0104 	add.w	r1, r3, #4
 8015180:	d52a      	bpl.n	80151d8 <_printf_i+0xa4>
 8015182:	681b      	ldr	r3, [r3, #0]
 8015184:	6011      	str	r1, [r2, #0]
 8015186:	2b00      	cmp	r3, #0
 8015188:	da03      	bge.n	8015192 <_printf_i+0x5e>
 801518a:	222d      	movs	r2, #45	; 0x2d
 801518c:	425b      	negs	r3, r3
 801518e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8015192:	486f      	ldr	r0, [pc, #444]	; (8015350 <_printf_i+0x21c>)
 8015194:	220a      	movs	r2, #10
 8015196:	e039      	b.n	801520c <_printf_i+0xd8>
 8015198:	2973      	cmp	r1, #115	; 0x73
 801519a:	f000 809d 	beq.w	80152d8 <_printf_i+0x1a4>
 801519e:	d808      	bhi.n	80151b2 <_printf_i+0x7e>
 80151a0:	296f      	cmp	r1, #111	; 0x6f
 80151a2:	d020      	beq.n	80151e6 <_printf_i+0xb2>
 80151a4:	2970      	cmp	r1, #112	; 0x70
 80151a6:	d1dd      	bne.n	8015164 <_printf_i+0x30>
 80151a8:	6823      	ldr	r3, [r4, #0]
 80151aa:	f043 0320 	orr.w	r3, r3, #32
 80151ae:	6023      	str	r3, [r4, #0]
 80151b0:	e003      	b.n	80151ba <_printf_i+0x86>
 80151b2:	2975      	cmp	r1, #117	; 0x75
 80151b4:	d017      	beq.n	80151e6 <_printf_i+0xb2>
 80151b6:	2978      	cmp	r1, #120	; 0x78
 80151b8:	d1d4      	bne.n	8015164 <_printf_i+0x30>
 80151ba:	2378      	movs	r3, #120	; 0x78
 80151bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80151c0:	4864      	ldr	r0, [pc, #400]	; (8015354 <_printf_i+0x220>)
 80151c2:	e055      	b.n	8015270 <_printf_i+0x13c>
 80151c4:	6813      	ldr	r3, [r2, #0]
 80151c6:	1d19      	adds	r1, r3, #4
 80151c8:	681b      	ldr	r3, [r3, #0]
 80151ca:	6011      	str	r1, [r2, #0]
 80151cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80151d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80151d4:	2301      	movs	r3, #1
 80151d6:	e08c      	b.n	80152f2 <_printf_i+0x1be>
 80151d8:	681b      	ldr	r3, [r3, #0]
 80151da:	6011      	str	r1, [r2, #0]
 80151dc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80151e0:	bf18      	it	ne
 80151e2:	b21b      	sxthne	r3, r3
 80151e4:	e7cf      	b.n	8015186 <_printf_i+0x52>
 80151e6:	6813      	ldr	r3, [r2, #0]
 80151e8:	6825      	ldr	r5, [r4, #0]
 80151ea:	1d18      	adds	r0, r3, #4
 80151ec:	6010      	str	r0, [r2, #0]
 80151ee:	0628      	lsls	r0, r5, #24
 80151f0:	d501      	bpl.n	80151f6 <_printf_i+0xc2>
 80151f2:	681b      	ldr	r3, [r3, #0]
 80151f4:	e002      	b.n	80151fc <_printf_i+0xc8>
 80151f6:	0668      	lsls	r0, r5, #25
 80151f8:	d5fb      	bpl.n	80151f2 <_printf_i+0xbe>
 80151fa:	881b      	ldrh	r3, [r3, #0]
 80151fc:	4854      	ldr	r0, [pc, #336]	; (8015350 <_printf_i+0x21c>)
 80151fe:	296f      	cmp	r1, #111	; 0x6f
 8015200:	bf14      	ite	ne
 8015202:	220a      	movne	r2, #10
 8015204:	2208      	moveq	r2, #8
 8015206:	2100      	movs	r1, #0
 8015208:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801520c:	6865      	ldr	r5, [r4, #4]
 801520e:	60a5      	str	r5, [r4, #8]
 8015210:	2d00      	cmp	r5, #0
 8015212:	f2c0 8095 	blt.w	8015340 <_printf_i+0x20c>
 8015216:	6821      	ldr	r1, [r4, #0]
 8015218:	f021 0104 	bic.w	r1, r1, #4
 801521c:	6021      	str	r1, [r4, #0]
 801521e:	2b00      	cmp	r3, #0
 8015220:	d13d      	bne.n	801529e <_printf_i+0x16a>
 8015222:	2d00      	cmp	r5, #0
 8015224:	f040 808e 	bne.w	8015344 <_printf_i+0x210>
 8015228:	4665      	mov	r5, ip
 801522a:	2a08      	cmp	r2, #8
 801522c:	d10b      	bne.n	8015246 <_printf_i+0x112>
 801522e:	6823      	ldr	r3, [r4, #0]
 8015230:	07db      	lsls	r3, r3, #31
 8015232:	d508      	bpl.n	8015246 <_printf_i+0x112>
 8015234:	6923      	ldr	r3, [r4, #16]
 8015236:	6862      	ldr	r2, [r4, #4]
 8015238:	429a      	cmp	r2, r3
 801523a:	bfde      	ittt	le
 801523c:	2330      	movle	r3, #48	; 0x30
 801523e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015242:	f105 35ff 	addle.w	r5, r5, #4294967295
 8015246:	ebac 0305 	sub.w	r3, ip, r5
 801524a:	6123      	str	r3, [r4, #16]
 801524c:	f8cd 8000 	str.w	r8, [sp]
 8015250:	463b      	mov	r3, r7
 8015252:	aa03      	add	r2, sp, #12
 8015254:	4621      	mov	r1, r4
 8015256:	4630      	mov	r0, r6
 8015258:	f7ff fef6 	bl	8015048 <_printf_common>
 801525c:	3001      	adds	r0, #1
 801525e:	d14d      	bne.n	80152fc <_printf_i+0x1c8>
 8015260:	f04f 30ff 	mov.w	r0, #4294967295
 8015264:	b005      	add	sp, #20
 8015266:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801526a:	4839      	ldr	r0, [pc, #228]	; (8015350 <_printf_i+0x21c>)
 801526c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8015270:	6813      	ldr	r3, [r2, #0]
 8015272:	6821      	ldr	r1, [r4, #0]
 8015274:	1d1d      	adds	r5, r3, #4
 8015276:	681b      	ldr	r3, [r3, #0]
 8015278:	6015      	str	r5, [r2, #0]
 801527a:	060a      	lsls	r2, r1, #24
 801527c:	d50b      	bpl.n	8015296 <_printf_i+0x162>
 801527e:	07ca      	lsls	r2, r1, #31
 8015280:	bf44      	itt	mi
 8015282:	f041 0120 	orrmi.w	r1, r1, #32
 8015286:	6021      	strmi	r1, [r4, #0]
 8015288:	b91b      	cbnz	r3, 8015292 <_printf_i+0x15e>
 801528a:	6822      	ldr	r2, [r4, #0]
 801528c:	f022 0220 	bic.w	r2, r2, #32
 8015290:	6022      	str	r2, [r4, #0]
 8015292:	2210      	movs	r2, #16
 8015294:	e7b7      	b.n	8015206 <_printf_i+0xd2>
 8015296:	064d      	lsls	r5, r1, #25
 8015298:	bf48      	it	mi
 801529a:	b29b      	uxthmi	r3, r3
 801529c:	e7ef      	b.n	801527e <_printf_i+0x14a>
 801529e:	4665      	mov	r5, ip
 80152a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80152a4:	fb02 3311 	mls	r3, r2, r1, r3
 80152a8:	5cc3      	ldrb	r3, [r0, r3]
 80152aa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80152ae:	460b      	mov	r3, r1
 80152b0:	2900      	cmp	r1, #0
 80152b2:	d1f5      	bne.n	80152a0 <_printf_i+0x16c>
 80152b4:	e7b9      	b.n	801522a <_printf_i+0xf6>
 80152b6:	6813      	ldr	r3, [r2, #0]
 80152b8:	6825      	ldr	r5, [r4, #0]
 80152ba:	6961      	ldr	r1, [r4, #20]
 80152bc:	1d18      	adds	r0, r3, #4
 80152be:	6010      	str	r0, [r2, #0]
 80152c0:	0628      	lsls	r0, r5, #24
 80152c2:	681b      	ldr	r3, [r3, #0]
 80152c4:	d501      	bpl.n	80152ca <_printf_i+0x196>
 80152c6:	6019      	str	r1, [r3, #0]
 80152c8:	e002      	b.n	80152d0 <_printf_i+0x19c>
 80152ca:	066a      	lsls	r2, r5, #25
 80152cc:	d5fb      	bpl.n	80152c6 <_printf_i+0x192>
 80152ce:	8019      	strh	r1, [r3, #0]
 80152d0:	2300      	movs	r3, #0
 80152d2:	6123      	str	r3, [r4, #16]
 80152d4:	4665      	mov	r5, ip
 80152d6:	e7b9      	b.n	801524c <_printf_i+0x118>
 80152d8:	6813      	ldr	r3, [r2, #0]
 80152da:	1d19      	adds	r1, r3, #4
 80152dc:	6011      	str	r1, [r2, #0]
 80152de:	681d      	ldr	r5, [r3, #0]
 80152e0:	6862      	ldr	r2, [r4, #4]
 80152e2:	2100      	movs	r1, #0
 80152e4:	4628      	mov	r0, r5
 80152e6:	f7eb f803 	bl	80002f0 <memchr>
 80152ea:	b108      	cbz	r0, 80152f0 <_printf_i+0x1bc>
 80152ec:	1b40      	subs	r0, r0, r5
 80152ee:	6060      	str	r0, [r4, #4]
 80152f0:	6863      	ldr	r3, [r4, #4]
 80152f2:	6123      	str	r3, [r4, #16]
 80152f4:	2300      	movs	r3, #0
 80152f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80152fa:	e7a7      	b.n	801524c <_printf_i+0x118>
 80152fc:	6923      	ldr	r3, [r4, #16]
 80152fe:	462a      	mov	r2, r5
 8015300:	4639      	mov	r1, r7
 8015302:	4630      	mov	r0, r6
 8015304:	47c0      	blx	r8
 8015306:	3001      	adds	r0, #1
 8015308:	d0aa      	beq.n	8015260 <_printf_i+0x12c>
 801530a:	6823      	ldr	r3, [r4, #0]
 801530c:	079b      	lsls	r3, r3, #30
 801530e:	d413      	bmi.n	8015338 <_printf_i+0x204>
 8015310:	68e0      	ldr	r0, [r4, #12]
 8015312:	9b03      	ldr	r3, [sp, #12]
 8015314:	4298      	cmp	r0, r3
 8015316:	bfb8      	it	lt
 8015318:	4618      	movlt	r0, r3
 801531a:	e7a3      	b.n	8015264 <_printf_i+0x130>
 801531c:	2301      	movs	r3, #1
 801531e:	464a      	mov	r2, r9
 8015320:	4639      	mov	r1, r7
 8015322:	4630      	mov	r0, r6
 8015324:	47c0      	blx	r8
 8015326:	3001      	adds	r0, #1
 8015328:	d09a      	beq.n	8015260 <_printf_i+0x12c>
 801532a:	3501      	adds	r5, #1
 801532c:	68e3      	ldr	r3, [r4, #12]
 801532e:	9a03      	ldr	r2, [sp, #12]
 8015330:	1a9b      	subs	r3, r3, r2
 8015332:	42ab      	cmp	r3, r5
 8015334:	dcf2      	bgt.n	801531c <_printf_i+0x1e8>
 8015336:	e7eb      	b.n	8015310 <_printf_i+0x1dc>
 8015338:	2500      	movs	r5, #0
 801533a:	f104 0919 	add.w	r9, r4, #25
 801533e:	e7f5      	b.n	801532c <_printf_i+0x1f8>
 8015340:	2b00      	cmp	r3, #0
 8015342:	d1ac      	bne.n	801529e <_printf_i+0x16a>
 8015344:	7803      	ldrb	r3, [r0, #0]
 8015346:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801534a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801534e:	e76c      	b.n	801522a <_printf_i+0xf6>
 8015350:	08015871 	.word	0x08015871
 8015354:	08015882 	.word	0x08015882

08015358 <__sread>:
 8015358:	b510      	push	{r4, lr}
 801535a:	460c      	mov	r4, r1
 801535c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015360:	f000 f8d4 	bl	801550c <_read_r>
 8015364:	2800      	cmp	r0, #0
 8015366:	bfab      	itete	ge
 8015368:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801536a:	89a3      	ldrhlt	r3, [r4, #12]
 801536c:	181b      	addge	r3, r3, r0
 801536e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015372:	bfac      	ite	ge
 8015374:	6563      	strge	r3, [r4, #84]	; 0x54
 8015376:	81a3      	strhlt	r3, [r4, #12]
 8015378:	bd10      	pop	{r4, pc}

0801537a <__swrite>:
 801537a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801537e:	461f      	mov	r7, r3
 8015380:	898b      	ldrh	r3, [r1, #12]
 8015382:	05db      	lsls	r3, r3, #23
 8015384:	4605      	mov	r5, r0
 8015386:	460c      	mov	r4, r1
 8015388:	4616      	mov	r6, r2
 801538a:	d505      	bpl.n	8015398 <__swrite+0x1e>
 801538c:	2302      	movs	r3, #2
 801538e:	2200      	movs	r2, #0
 8015390:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015394:	f000 f868 	bl	8015468 <_lseek_r>
 8015398:	89a3      	ldrh	r3, [r4, #12]
 801539a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801539e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80153a2:	81a3      	strh	r3, [r4, #12]
 80153a4:	4632      	mov	r2, r6
 80153a6:	463b      	mov	r3, r7
 80153a8:	4628      	mov	r0, r5
 80153aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80153ae:	f000 b817 	b.w	80153e0 <_write_r>

080153b2 <__sseek>:
 80153b2:	b510      	push	{r4, lr}
 80153b4:	460c      	mov	r4, r1
 80153b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80153ba:	f000 f855 	bl	8015468 <_lseek_r>
 80153be:	1c43      	adds	r3, r0, #1
 80153c0:	89a3      	ldrh	r3, [r4, #12]
 80153c2:	bf15      	itete	ne
 80153c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80153c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80153ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80153ce:	81a3      	strheq	r3, [r4, #12]
 80153d0:	bf18      	it	ne
 80153d2:	81a3      	strhne	r3, [r4, #12]
 80153d4:	bd10      	pop	{r4, pc}

080153d6 <__sclose>:
 80153d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80153da:	f000 b813 	b.w	8015404 <_close_r>
	...

080153e0 <_write_r>:
 80153e0:	b538      	push	{r3, r4, r5, lr}
 80153e2:	4c07      	ldr	r4, [pc, #28]	; (8015400 <_write_r+0x20>)
 80153e4:	4605      	mov	r5, r0
 80153e6:	4608      	mov	r0, r1
 80153e8:	4611      	mov	r1, r2
 80153ea:	2200      	movs	r2, #0
 80153ec:	6022      	str	r2, [r4, #0]
 80153ee:	461a      	mov	r2, r3
 80153f0:	f7eb f975 	bl	80006de <_write>
 80153f4:	1c43      	adds	r3, r0, #1
 80153f6:	d102      	bne.n	80153fe <_write_r+0x1e>
 80153f8:	6823      	ldr	r3, [r4, #0]
 80153fa:	b103      	cbz	r3, 80153fe <_write_r+0x1e>
 80153fc:	602b      	str	r3, [r5, #0]
 80153fe:	bd38      	pop	{r3, r4, r5, pc}
 8015400:	24041ab8 	.word	0x24041ab8

08015404 <_close_r>:
 8015404:	b538      	push	{r3, r4, r5, lr}
 8015406:	4c06      	ldr	r4, [pc, #24]	; (8015420 <_close_r+0x1c>)
 8015408:	2300      	movs	r3, #0
 801540a:	4605      	mov	r5, r0
 801540c:	4608      	mov	r0, r1
 801540e:	6023      	str	r3, [r4, #0]
 8015410:	f7ec f991 	bl	8001736 <_close>
 8015414:	1c43      	adds	r3, r0, #1
 8015416:	d102      	bne.n	801541e <_close_r+0x1a>
 8015418:	6823      	ldr	r3, [r4, #0]
 801541a:	b103      	cbz	r3, 801541e <_close_r+0x1a>
 801541c:	602b      	str	r3, [r5, #0]
 801541e:	bd38      	pop	{r3, r4, r5, pc}
 8015420:	24041ab8 	.word	0x24041ab8

08015424 <_fstat_r>:
 8015424:	b538      	push	{r3, r4, r5, lr}
 8015426:	4c07      	ldr	r4, [pc, #28]	; (8015444 <_fstat_r+0x20>)
 8015428:	2300      	movs	r3, #0
 801542a:	4605      	mov	r5, r0
 801542c:	4608      	mov	r0, r1
 801542e:	4611      	mov	r1, r2
 8015430:	6023      	str	r3, [r4, #0]
 8015432:	f7ec f98c 	bl	800174e <_fstat>
 8015436:	1c43      	adds	r3, r0, #1
 8015438:	d102      	bne.n	8015440 <_fstat_r+0x1c>
 801543a:	6823      	ldr	r3, [r4, #0]
 801543c:	b103      	cbz	r3, 8015440 <_fstat_r+0x1c>
 801543e:	602b      	str	r3, [r5, #0]
 8015440:	bd38      	pop	{r3, r4, r5, pc}
 8015442:	bf00      	nop
 8015444:	24041ab8 	.word	0x24041ab8

08015448 <_isatty_r>:
 8015448:	b538      	push	{r3, r4, r5, lr}
 801544a:	4c06      	ldr	r4, [pc, #24]	; (8015464 <_isatty_r+0x1c>)
 801544c:	2300      	movs	r3, #0
 801544e:	4605      	mov	r5, r0
 8015450:	4608      	mov	r0, r1
 8015452:	6023      	str	r3, [r4, #0]
 8015454:	f7ec f98b 	bl	800176e <_isatty>
 8015458:	1c43      	adds	r3, r0, #1
 801545a:	d102      	bne.n	8015462 <_isatty_r+0x1a>
 801545c:	6823      	ldr	r3, [r4, #0]
 801545e:	b103      	cbz	r3, 8015462 <_isatty_r+0x1a>
 8015460:	602b      	str	r3, [r5, #0]
 8015462:	bd38      	pop	{r3, r4, r5, pc}
 8015464:	24041ab8 	.word	0x24041ab8

08015468 <_lseek_r>:
 8015468:	b538      	push	{r3, r4, r5, lr}
 801546a:	4c07      	ldr	r4, [pc, #28]	; (8015488 <_lseek_r+0x20>)
 801546c:	4605      	mov	r5, r0
 801546e:	4608      	mov	r0, r1
 8015470:	4611      	mov	r1, r2
 8015472:	2200      	movs	r2, #0
 8015474:	6022      	str	r2, [r4, #0]
 8015476:	461a      	mov	r2, r3
 8015478:	f7ec f984 	bl	8001784 <_lseek>
 801547c:	1c43      	adds	r3, r0, #1
 801547e:	d102      	bne.n	8015486 <_lseek_r+0x1e>
 8015480:	6823      	ldr	r3, [r4, #0]
 8015482:	b103      	cbz	r3, 8015486 <_lseek_r+0x1e>
 8015484:	602b      	str	r3, [r5, #0]
 8015486:	bd38      	pop	{r3, r4, r5, pc}
 8015488:	24041ab8 	.word	0x24041ab8

0801548c <memmove>:
 801548c:	4288      	cmp	r0, r1
 801548e:	b510      	push	{r4, lr}
 8015490:	eb01 0302 	add.w	r3, r1, r2
 8015494:	d807      	bhi.n	80154a6 <memmove+0x1a>
 8015496:	1e42      	subs	r2, r0, #1
 8015498:	4299      	cmp	r1, r3
 801549a:	d00a      	beq.n	80154b2 <memmove+0x26>
 801549c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80154a0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80154a4:	e7f8      	b.n	8015498 <memmove+0xc>
 80154a6:	4283      	cmp	r3, r0
 80154a8:	d9f5      	bls.n	8015496 <memmove+0xa>
 80154aa:	1881      	adds	r1, r0, r2
 80154ac:	1ad2      	subs	r2, r2, r3
 80154ae:	42d3      	cmn	r3, r2
 80154b0:	d100      	bne.n	80154b4 <memmove+0x28>
 80154b2:	bd10      	pop	{r4, pc}
 80154b4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80154b8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80154bc:	e7f7      	b.n	80154ae <memmove+0x22>

080154be <_realloc_r>:
 80154be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80154c0:	4607      	mov	r7, r0
 80154c2:	4614      	mov	r4, r2
 80154c4:	460e      	mov	r6, r1
 80154c6:	b921      	cbnz	r1, 80154d2 <_realloc_r+0x14>
 80154c8:	4611      	mov	r1, r2
 80154ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80154ce:	f7ff b8db 	b.w	8014688 <_malloc_r>
 80154d2:	b922      	cbnz	r2, 80154de <_realloc_r+0x20>
 80154d4:	f7ff f88a 	bl	80145ec <_free_r>
 80154d8:	4625      	mov	r5, r4
 80154da:	4628      	mov	r0, r5
 80154dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80154de:	f000 f827 	bl	8015530 <_malloc_usable_size_r>
 80154e2:	42a0      	cmp	r0, r4
 80154e4:	d20f      	bcs.n	8015506 <_realloc_r+0x48>
 80154e6:	4621      	mov	r1, r4
 80154e8:	4638      	mov	r0, r7
 80154ea:	f7ff f8cd 	bl	8014688 <_malloc_r>
 80154ee:	4605      	mov	r5, r0
 80154f0:	2800      	cmp	r0, #0
 80154f2:	d0f2      	beq.n	80154da <_realloc_r+0x1c>
 80154f4:	4631      	mov	r1, r6
 80154f6:	4622      	mov	r2, r4
 80154f8:	f7ff f864 	bl	80145c4 <memcpy>
 80154fc:	4631      	mov	r1, r6
 80154fe:	4638      	mov	r0, r7
 8015500:	f7ff f874 	bl	80145ec <_free_r>
 8015504:	e7e9      	b.n	80154da <_realloc_r+0x1c>
 8015506:	4635      	mov	r5, r6
 8015508:	e7e7      	b.n	80154da <_realloc_r+0x1c>
	...

0801550c <_read_r>:
 801550c:	b538      	push	{r3, r4, r5, lr}
 801550e:	4c07      	ldr	r4, [pc, #28]	; (801552c <_read_r+0x20>)
 8015510:	4605      	mov	r5, r0
 8015512:	4608      	mov	r0, r1
 8015514:	4611      	mov	r1, r2
 8015516:	2200      	movs	r2, #0
 8015518:	6022      	str	r2, [r4, #0]
 801551a:	461a      	mov	r2, r3
 801551c:	f7ec f8ee 	bl	80016fc <_read>
 8015520:	1c43      	adds	r3, r0, #1
 8015522:	d102      	bne.n	801552a <_read_r+0x1e>
 8015524:	6823      	ldr	r3, [r4, #0]
 8015526:	b103      	cbz	r3, 801552a <_read_r+0x1e>
 8015528:	602b      	str	r3, [r5, #0]
 801552a:	bd38      	pop	{r3, r4, r5, pc}
 801552c:	24041ab8 	.word	0x24041ab8

08015530 <_malloc_usable_size_r>:
 8015530:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015534:	1f18      	subs	r0, r3, #4
 8015536:	2b00      	cmp	r3, #0
 8015538:	bfbc      	itt	lt
 801553a:	580b      	ldrlt	r3, [r1, r0]
 801553c:	18c0      	addlt	r0, r0, r3
 801553e:	4770      	bx	lr

08015540 <_init>:
 8015540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015542:	bf00      	nop
 8015544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015546:	bc08      	pop	{r3}
 8015548:	469e      	mov	lr, r3
 801554a:	4770      	bx	lr

0801554c <_fini>:
 801554c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801554e:	bf00      	nop
 8015550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015552:	bc08      	pop	{r3}
 8015554:	469e      	mov	lr, r3
 8015556:	4770      	bx	lr

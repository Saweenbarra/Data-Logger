
Data-Logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013374  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000280  08013614  08013614  00023614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013894  08013894  000301cc  2**0
                  CONTENTS
  4 .ARM          00000008  08013894  08013894  00023894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801389c  0801389c  000301cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801389c  0801389c  0002389c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080138a0  080138a0  000238a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001cc  24000000  080138a4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b87c  240001d0  08013a70  000301d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2400ba4c  08013a70  0003ba4c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003b513  00000000  00000000  000301fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006293  00000000  00000000  0006b70d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001ed8  00000000  00000000  000719a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001c68  00000000  00000000  00073878  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003ef69  00000000  00000000  000754e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00020750  00000000  00000000  000b4449  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0016f56f  00000000  00000000  000d4b99  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00244108  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000853c  00000000  00000000  00244184  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001d0 	.word	0x240001d0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080135fc 	.word	0x080135fc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001d4 	.word	0x240001d4
 80002dc:	080135fc 	.word	0x080135fc

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void){
 8000690:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000692:	f2ad 4ddc 	subw	sp, sp, #1244	; 0x4dc
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000698:	f001 f816 	bl	80016c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069c:	f000 f8f4 	bl	8000888 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a0:	f000 fbe0 	bl	8000e64 <MX_GPIO_Init>
  MX_DMA_Init();
 80006a4:	f000 fbbe 	bl	8000e24 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 80006a8:	f000 faac 	bl	8000c04 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 80006ac:	f00c fb20 	bl	800ccf0 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 80006b0:	f011 fe5c 	bl	801236c <MX_USB_DEVICE_Init>
  MX_FDCAN1_Init();
 80006b4:	f000 f9de 	bl	8000a74 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 80006b8:	f000 fa40 	bl	8000b3c <MX_FDCAN2_Init>
  MX_UART8_Init();
 80006bc:	f000 fb1a 	bl	8000cf4 <MX_UART8_Init>
  MX_USART3_UART_Init();
 80006c0:	f000 fb64 	bl	8000d8c <MX_USART3_UART_Init>
  MX_SPI1_Init();
 80006c4:	f000 fac0 	bl	8000c48 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  if(f_mount(&myFATAFS, SDPath, 1) == FR_OK){
 80006c8:	2201      	movs	r2, #1
 80006ca:	4961      	ldr	r1, [pc, #388]	; (8000850 <main+0x1c0>)
 80006cc:	4861      	ldr	r0, [pc, #388]	; (8000854 <main+0x1c4>)
 80006ce:	f011 f891 	bl	80117f4 <f_mount>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	f040 80b2 	bne.w	800083e <main+0x1ae>
  	  //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
  	  char myPath[] = "1buff.csv\0";
 80006da:	4a5f      	ldr	r2, [pc, #380]	; (8000858 <main+0x1c8>)
 80006dc:	f207 43bc 	addw	r3, r7, #1212	; 0x4bc
 80006e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80006e2:	c303      	stmia	r3!, {r0, r1}
 80006e4:	801a      	strh	r2, [r3, #0]
 80006e6:	3302      	adds	r3, #2
 80006e8:	0c12      	lsrs	r2, r2, #16
 80006ea:	701a      	strb	r2, [r3, #0]
      char ConfigPath[] ="Config.csv\0";
 80006ec:	4a5b      	ldr	r2, [pc, #364]	; (800085c <main+0x1cc>)
 80006ee:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 80006f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80006f4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      char ConfigParams[1000];

      //Tries to open config File
      if(f_open(&Config, ConfigPath, FA_READ) == FR_NO_FILE){
 80006f8:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 80006fc:	2201      	movs	r2, #1
 80006fe:	4619      	mov	r1, r3
 8000700:	4857      	ldr	r0, [pc, #348]	; (8000860 <main+0x1d0>)
 8000702:	f011 f8bd 	bl	8011880 <f_open>
 8000706:	4603      	mov	r3, r0
 8000708:	2b04      	cmp	r3, #4
 800070a:	d142      	bne.n	8000792 <main+0x102>
        //If file doesnt exist creates a file using hard coded defualts and passes those to internal config array
        f_open(&Config, ConfigPath, FA_WRITE | FA_CREATE_ALWAYS);
 800070c:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8000710:	220a      	movs	r2, #10
 8000712:	4619      	mov	r1, r3
 8000714:	4852      	ldr	r0, [pc, #328]	; (8000860 <main+0x1d0>)
 8000716:	f011 f8b3 	bl	8011880 <f_open>

        sprintf(ConfigParams, "ID,Device,Bytes,Type(Hz),Description\n");
 800071a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800071e:	4a51      	ldr	r2, [pc, #324]	; (8000864 <main+0x1d4>)
 8000720:	461c      	mov	r4, r3
 8000722:	4615      	mov	r5, r2
 8000724:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000726:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000728:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800072a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800072c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000730:	6020      	str	r0, [r4, #0]
 8000732:	3404      	adds	r4, #4
 8000734:	8021      	strh	r1, [r4, #0]
        sprintf(ConfigParams + strlen(ConfigParams),"0x50,Datalogger,8,0.20,uint32_t,HIGH:FileNO LOW:millis,\n");
 8000736:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800073a:	4618      	mov	r0, r3
 800073c:	f7ff fdd0 	bl	80002e0 <strlen>
 8000740:	4602      	mov	r2, r0
 8000742:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000746:	4413      	add	r3, r2
 8000748:	4a47      	ldr	r2, [pc, #284]	; (8000868 <main+0x1d8>)
 800074a:	4614      	mov	r4, r2
 800074c:	469c      	mov	ip, r3
 800074e:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000752:	4665      	mov	r5, ip
 8000754:	4626      	mov	r6, r4
 8000756:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000758:	6028      	str	r0, [r5, #0]
 800075a:	6069      	str	r1, [r5, #4]
 800075c:	60aa      	str	r2, [r5, #8]
 800075e:	60eb      	str	r3, [r5, #12]
 8000760:	3410      	adds	r4, #16
 8000762:	f10c 0c10 	add.w	ip, ip, #16
 8000766:	4574      	cmp	r4, lr
 8000768:	d1f3      	bne.n	8000752 <main+0xc2>
 800076a:	4662      	mov	r2, ip
 800076c:	4623      	mov	r3, r4
 800076e:	cb03      	ldmia	r3!, {r0, r1}
 8000770:	6010      	str	r0, [r2, #0]
 8000772:	6051      	str	r1, [r2, #4]
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	7213      	strb	r3, [r2, #8]

        f_write(&Config, ConfigParams, strlen(ConfigParams), &ConfByteW);
 8000778:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800077c:	4618      	mov	r0, r3
 800077e:	f7ff fdaf 	bl	80002e0 <strlen>
 8000782:	4602      	mov	r2, r0
 8000784:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8000788:	4b38      	ldr	r3, [pc, #224]	; (800086c <main+0x1dc>)
 800078a:	4835      	ldr	r0, [pc, #212]	; (8000860 <main+0x1d0>)
 800078c:	f011 fb75 	bl	8011e7a <f_write>
 8000790:	e00b      	b.n	80007aa <main+0x11a>
      }else{
        //If file does exist reads in config parameters to internal config array
        f_read(&Config, ConfigParams, strlen(ConfigParams), &ConfByteR);
 8000792:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000796:	4618      	mov	r0, r3
 8000798:	f7ff fda2 	bl	80002e0 <strlen>
 800079c:	4602      	mov	r2, r0
 800079e:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 80007a2:	4b33      	ldr	r3, [pc, #204]	; (8000870 <main+0x1e0>)
 80007a4:	482e      	ldr	r0, [pc, #184]	; (8000860 <main+0x1d0>)
 80007a6:	f011 fa29 	bl	8011bfc <f_read>
      }
      f_close(&Config);
 80007aa:	482d      	ldr	r0, [pc, #180]	; (8000860 <main+0x1d0>)
 80007ac:	f011 fd58 	bl	8012260 <f_close>
  	  f_open(&myFILE, myPath, FA_WRITE | FA_CREATE_ALWAYS);
 80007b0:	f207 43bc 	addw	r3, r7, #1212	; 0x4bc
 80007b4:	220a      	movs	r2, #10
 80007b6:	4619      	mov	r1, r3
 80007b8:	482e      	ldr	r0, [pc, #184]	; (8000874 <main+0x1e4>)
 80007ba:	f011 f861 	bl	8011880 <f_open>

  	  //write speed test
  	  	for(int i = 0; i<20480; i++){
 80007be:	2300      	movs	r3, #0
 80007c0:	f8c7 34d4 	str.w	r3, [r7, #1236]	; 0x4d4
 80007c4:	e00a      	b.n	80007dc <main+0x14c>
  		    DataBuffer.Data.DataBuff1[i] = 'A';
 80007c6:	4a2c      	ldr	r2, [pc, #176]	; (8000878 <main+0x1e8>)
 80007c8:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 80007cc:	4413      	add	r3, r2
 80007ce:	2241      	movs	r2, #65	; 0x41
 80007d0:	701a      	strb	r2, [r3, #0]
  	  	for(int i = 0; i<20480; i++){
 80007d2:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 80007d6:	3301      	adds	r3, #1
 80007d8:	f8c7 34d4 	str.w	r3, [r7, #1236]	; 0x4d4
 80007dc:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 80007e0:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80007e4:	dbef      	blt.n	80007c6 <main+0x136>
  	    }
  	    int start = HAL_GetTick();
 80007e6:	f000 fff5 	bl	80017d4 <HAL_GetTick>
 80007ea:	4603      	mov	r3, r0
 80007ec:	f8c7 34d0 	str.w	r3, [r7, #1232]	; 0x4d0
  	    //for(int i = 0; i<1; i++){
  		f_write(&myFILE, DataBuffer.Data.DataBuff1, sizeof(DataBuffer.Data.DataBuff1), &testByte);
 80007f0:	4b22      	ldr	r3, [pc, #136]	; (800087c <main+0x1ec>)
 80007f2:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 80007f6:	4920      	ldr	r1, [pc, #128]	; (8000878 <main+0x1e8>)
 80007f8:	481e      	ldr	r0, [pc, #120]	; (8000874 <main+0x1e4>)
 80007fa:	f011 fb3e 	bl	8011e7a <f_write>
        //}
  	    int end = HAL_GetTick();
 80007fe:	f000 ffe9 	bl	80017d4 <HAL_GetTick>
 8000802:	4603      	mov	r3, r0
 8000804:	f8c7 34cc 	str.w	r3, [r7, #1228]	; 0x4cc
  	    int duration = end - start;
 8000808:	f8d7 24cc 	ldr.w	r2, [r7, #1228]	; 0x4cc
 800080c:	f8d7 34d0 	ldr.w	r3, [r7, #1232]	; 0x4d0
 8000810:	1ad3      	subs	r3, r2, r3
 8000812:	f8c7 34c8 	str.w	r3, [r7, #1224]	; 0x4c8
  	    char myTime[200];
  	    sprintf(myTime, "\r%i", duration);
 8000816:	463b      	mov	r3, r7
 8000818:	f8d7 24c8 	ldr.w	r2, [r7, #1224]	; 0x4c8
 800081c:	4918      	ldr	r1, [pc, #96]	; (8000880 <main+0x1f0>)
 800081e:	4618      	mov	r0, r3
 8000820:	f012 fba8 	bl	8012f74 <siprintf>
  	    f_write(&myFILE, myTime, strlen(myTime), &testByte);
 8000824:	463b      	mov	r3, r7
 8000826:	4618      	mov	r0, r3
 8000828:	f7ff fd5a 	bl	80002e0 <strlen>
 800082c:	4602      	mov	r2, r0
 800082e:	4639      	mov	r1, r7
 8000830:	4b12      	ldr	r3, [pc, #72]	; (800087c <main+0x1ec>)
 8000832:	4810      	ldr	r0, [pc, #64]	; (8000874 <main+0x1e4>)
 8000834:	f011 fb21 	bl	8011e7a <f_write>
      f_close(&myFILE);
 8000838:	480e      	ldr	r0, [pc, #56]	; (8000874 <main+0x1e4>)
 800083a:	f011 fd11 	bl	8012260 <f_close>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800083e:	2101      	movs	r1, #1
 8000840:	4810      	ldr	r0, [pc, #64]	; (8000884 <main+0x1f4>)
 8000842:	f003 fb04 	bl	8003e4e <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000846:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800084a:	f000 ffcf 	bl	80017ec <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800084e:	e7f6      	b.n	800083e <main+0x1ae>
 8000850:	2400ad0c 	.word	0x2400ad0c
 8000854:	2400a7a8 	.word	0x2400a7a8
 8000858:	0801367c 	.word	0x0801367c
 800085c:	08013688 	.word	0x08013688
 8000860:	2400aad4 	.word	0x2400aad4
 8000864:	08013614 	.word	0x08013614
 8000868:	0801363c 	.word	0x0801363c
 800086c:	2400a71c 	.word	0x2400a71c
 8000870:	2400a5ec 	.word	0x2400a5ec
 8000874:	2400a33c 	.word	0x2400a33c
 8000878:	240001ec 	.word	0x240001ec
 800087c:	2400aad0 	.word	0x2400aad0
 8000880:	08013678 	.word	0x08013678
 8000884:	58020400 	.word	0x58020400

08000888 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b0cc      	sub	sp, #304	; 0x130
 800088c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800088e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000892:	224c      	movs	r2, #76	; 0x4c
 8000894:	2100      	movs	r1, #0
 8000896:	4618      	mov	r0, r3
 8000898:	f012 faab 	bl	8012df2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800089c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80008a0:	2220      	movs	r2, #32
 80008a2:	2100      	movs	r1, #0
 80008a4:	4618      	mov	r0, r3
 80008a6:	f012 faa4 	bl	8012df2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008aa:	f107 0308 	add.w	r3, r7, #8
 80008ae:	4618      	mov	r0, r3
 80008b0:	23bc      	movs	r3, #188	; 0xbc
 80008b2:	461a      	mov	r2, r3
 80008b4:	2100      	movs	r1, #0
 80008b6:	f012 fa9c 	bl	8012df2 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80008ba:	2002      	movs	r0, #2
 80008bc:	f004 fcea 	bl	8005294 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	4b67      	ldr	r3, [pc, #412]	; (8000a64 <SystemClock_Config+0x1dc>)
 80008c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008ca:	4a66      	ldr	r2, [pc, #408]	; (8000a64 <SystemClock_Config+0x1dc>)
 80008cc:	f023 0301 	bic.w	r3, r3, #1
 80008d0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80008d2:	4b64      	ldr	r3, [pc, #400]	; (8000a64 <SystemClock_Config+0x1dc>)
 80008d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008d6:	f003 0201 	and.w	r2, r3, #1
 80008da:	1d3b      	adds	r3, r7, #4
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	4b62      	ldr	r3, [pc, #392]	; (8000a68 <SystemClock_Config+0x1e0>)
 80008e0:	699b      	ldr	r3, [r3, #24]
 80008e2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008e6:	4a60      	ldr	r2, [pc, #384]	; (8000a68 <SystemClock_Config+0x1e0>)
 80008e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008ec:	6193      	str	r3, [r2, #24]
 80008ee:	4b5e      	ldr	r3, [pc, #376]	; (8000a68 <SystemClock_Config+0x1e0>)
 80008f0:	699b      	ldr	r3, [r3, #24]
 80008f2:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80008f6:	1d3b      	adds	r3, r7, #4
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	1d3b      	adds	r3, r7, #4
 80008fc:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008fe:	bf00      	nop
 8000900:	4b59      	ldr	r3, [pc, #356]	; (8000a68 <SystemClock_Config+0x1e0>)
 8000902:	699b      	ldr	r3, [r3, #24]
 8000904:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000908:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800090c:	d1f8      	bne.n	8000900 <SystemClock_Config+0x78>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800090e:	4b57      	ldr	r3, [pc, #348]	; (8000a6c <SystemClock_Config+0x1e4>)
 8000910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000912:	f023 0303 	bic.w	r3, r3, #3
 8000916:	4a55      	ldr	r2, [pc, #340]	; (8000a6c <SystemClock_Config+0x1e4>)
 8000918:	f043 0302 	orr.w	r3, r3, #2
 800091c:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800091e:	2321      	movs	r3, #33	; 0x21
 8000920:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000924:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000928:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800092c:	2301      	movs	r3, #1
 800092e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000932:	2302      	movs	r3, #2
 8000934:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000938:	2302      	movs	r3, #2
 800093a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 2;
 800093e:	2302      	movs	r3, #2
 8000940:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 38;
 8000944:	2326      	movs	r3, #38	; 0x26
 8000946:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 800094a:	2302      	movs	r3, #2
 800094c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 84;
 8000950:	2354      	movs	r3, #84	; 0x54
 8000952:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000956:	2302      	movs	r3, #2
 8000958:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800095c:	230c      	movs	r3, #12
 800095e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000962:	2300      	movs	r3, #0
 8000964:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000968:	2300      	movs	r3, #0
 800096a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800096e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000972:	4618      	mov	r0, r3
 8000974:	f004 fcd8 	bl	8005328 <HAL_RCC_OscConfig>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <SystemClock_Config+0xfa>
  {
    Error_Handler();
 800097e:	f000 fb5b 	bl	8001038 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000982:	233f      	movs	r3, #63	; 0x3f
 8000984:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000988:	2303      	movs	r3, #3
 800098a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800098e:	2300      	movs	r3, #0
 8000990:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000994:	2308      	movs	r3, #8
 8000996:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800099a:	2300      	movs	r3, #0
 800099c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80009a0:	2300      	movs	r3, #0
 80009a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80009a6:	2300      	movs	r3, #0
 80009a8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80009ac:	2300      	movs	r3, #0
 80009ae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009b2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80009b6:	2101      	movs	r1, #1
 80009b8:	4618      	mov	r0, r3
 80009ba:	f005 f8c5 	bl	8005b48 <HAL_RCC_ClockConfig>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <SystemClock_Config+0x140>
  {
    Error_Handler();
 80009c4:	f000 fb38 	bl	8001038 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_FDCAN
 80009c8:	f107 0308 	add.w	r3, r7, #8
 80009cc:	4a28      	ldr	r2, [pc, #160]	; (8000a70 <SystemClock_Config+0x1e8>)
 80009ce:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_UART8|RCC_PERIPHCLK_SPI1
                              |RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80009d0:	f107 0308 	add.w	r3, r7, #8
 80009d4:	2202      	movs	r2, #2
 80009d6:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 80009d8:	f107 0308 	add.w	r3, r7, #8
 80009dc:	220c      	movs	r2, #12
 80009de:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80009e0:	f107 0308 	add.w	r3, r7, #8
 80009e4:	2202      	movs	r2, #2
 80009e6:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80009e8:	f107 0308 	add.w	r3, r7, #8
 80009ec:	2202      	movs	r2, #2
 80009ee:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 3;
 80009f0:	f107 0308 	add.w	r3, r7, #8
 80009f4:	2203      	movs	r2, #3
 80009f6:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80009f8:	f107 0308 	add.w	r3, r7, #8
 80009fc:	22c0      	movs	r2, #192	; 0xc0
 80009fe:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000a00:	f107 0308 	add.w	r3, r7, #8
 8000a04:	2220      	movs	r2, #32
 8000a06:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000a08:	f107 0308 	add.w	r3, r7, #8
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8000a10:	f107 0308 	add.w	r3, r7, #8
 8000a14:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a18:	64da      	str	r2, [r3, #76]	; 0x4c
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000a1a:	f107 0308 	add.w	r3, r7, #8
 8000a1e:	2200      	movs	r2, #0
 8000a20:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8000a22:	f107 0308 	add.w	r3, r7, #8
 8000a26:	2200      	movs	r2, #0
 8000a28:	66da      	str	r2, [r3, #108]	; 0x6c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000a2a:	f107 0308 	add.w	r3, r7, #8
 8000a2e:	2200      	movs	r2, #0
 8000a30:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000a32:	f107 0308 	add.w	r3, r7, #8
 8000a36:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000a3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a3e:	f107 0308 	add.w	r3, r7, #8
 8000a42:	4618      	mov	r0, r3
 8000a44:	f005 fc30 	bl	80062a8 <HAL_RCCEx_PeriphCLKConfig>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <SystemClock_Config+0x1ca>
  {
    Error_Handler();
 8000a4e:	f000 faf3 	bl	8001038 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000a52:	f005 fa2f 	bl	8005eb4 <HAL_RCC_EnableCSS>
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8000a56:	f004 fc57 	bl	8005308 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8000a5a:	bf00      	nop
 8000a5c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	58000400 	.word	0x58000400
 8000a68:	58024800 	.word	0x58024800
 8000a6c:	58024400 	.word	0x58024400
 8000a70:	00059002 	.word	0x00059002

08000a74 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000a78:	4b2e      	ldr	r3, [pc, #184]	; (8000b34 <MX_FDCAN1_Init+0xc0>)
 8000a7a:	4a2f      	ldr	r2, [pc, #188]	; (8000b38 <MX_FDCAN1_Init+0xc4>)
 8000a7c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000a7e:	4b2d      	ldr	r3, [pc, #180]	; (8000b34 <MX_FDCAN1_Init+0xc0>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000a84:	4b2b      	ldr	r3, [pc, #172]	; (8000b34 <MX_FDCAN1_Init+0xc0>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000a8a:	4b2a      	ldr	r3, [pc, #168]	; (8000b34 <MX_FDCAN1_Init+0xc0>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000a90:	4b28      	ldr	r3, [pc, #160]	; (8000b34 <MX_FDCAN1_Init+0xc0>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000a96:	4b27      	ldr	r3, [pc, #156]	; (8000b34 <MX_FDCAN1_Init+0xc0>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000a9c:	4b25      	ldr	r3, [pc, #148]	; (8000b34 <MX_FDCAN1_Init+0xc0>)
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000aa2:	4b24      	ldr	r3, [pc, #144]	; (8000b34 <MX_FDCAN1_Init+0xc0>)
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000aa8:	4b22      	ldr	r3, [pc, #136]	; (8000b34 <MX_FDCAN1_Init+0xc0>)
 8000aaa:	2202      	movs	r2, #2
 8000aac:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000aae:	4b21      	ldr	r3, [pc, #132]	; (8000b34 <MX_FDCAN1_Init+0xc0>)
 8000ab0:	2202      	movs	r2, #2
 8000ab2:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000ab4:	4b1f      	ldr	r3, [pc, #124]	; (8000b34 <MX_FDCAN1_Init+0xc0>)
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000aba:	4b1e      	ldr	r3, [pc, #120]	; (8000b34 <MX_FDCAN1_Init+0xc0>)
 8000abc:	2201      	movs	r2, #1
 8000abe:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000ac0:	4b1c      	ldr	r3, [pc, #112]	; (8000b34 <MX_FDCAN1_Init+0xc0>)
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000ac6:	4b1b      	ldr	r3, [pc, #108]	; (8000b34 <MX_FDCAN1_Init+0xc0>)
 8000ac8:	2201      	movs	r2, #1
 8000aca:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000acc:	4b19      	ldr	r3, [pc, #100]	; (8000b34 <MX_FDCAN1_Init+0xc0>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000ad2:	4b18      	ldr	r3, [pc, #96]	; (8000b34 <MX_FDCAN1_Init+0xc0>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000ad8:	4b16      	ldr	r3, [pc, #88]	; (8000b34 <MX_FDCAN1_Init+0xc0>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000ade:	4b15      	ldr	r3, [pc, #84]	; (8000b34 <MX_FDCAN1_Init+0xc0>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000ae4:	4b13      	ldr	r3, [pc, #76]	; (8000b34 <MX_FDCAN1_Init+0xc0>)
 8000ae6:	2204      	movs	r2, #4
 8000ae8:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000aea:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <MX_FDCAN1_Init+0xc0>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000af0:	4b10      	ldr	r3, [pc, #64]	; (8000b34 <MX_FDCAN1_Init+0xc0>)
 8000af2:	2204      	movs	r2, #4
 8000af4:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000af6:	4b0f      	ldr	r3, [pc, #60]	; (8000b34 <MX_FDCAN1_Init+0xc0>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000afc:	4b0d      	ldr	r3, [pc, #52]	; (8000b34 <MX_FDCAN1_Init+0xc0>)
 8000afe:	2204      	movs	r2, #4
 8000b00:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000b02:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <MX_FDCAN1_Init+0xc0>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000b08:	4b0a      	ldr	r3, [pc, #40]	; (8000b34 <MX_FDCAN1_Init+0xc0>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000b0e:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <MX_FDCAN1_Init+0xc0>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000b14:	4b07      	ldr	r3, [pc, #28]	; (8000b34 <MX_FDCAN1_Init+0xc0>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000b1a:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <MX_FDCAN1_Init+0xc0>)
 8000b1c:	2204      	movs	r2, #4
 8000b1e:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000b20:	4804      	ldr	r0, [pc, #16]	; (8000b34 <MX_FDCAN1_Init+0xc0>)
 8000b22:	f002 fc63 	bl	80033ec <HAL_FDCAN_Init>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000b2c:	f000 fa84 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000b30:	bf00      	nop
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	2400a5f0 	.word	0x2400a5f0
 8000b38:	4000a000 	.word	0x4000a000

08000b3c <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000b40:	4b2e      	ldr	r3, [pc, #184]	; (8000bfc <MX_FDCAN2_Init+0xc0>)
 8000b42:	4a2f      	ldr	r2, [pc, #188]	; (8000c00 <MX_FDCAN2_Init+0xc4>)
 8000b44:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000b46:	4b2d      	ldr	r3, [pc, #180]	; (8000bfc <MX_FDCAN2_Init+0xc0>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000b4c:	4b2b      	ldr	r3, [pc, #172]	; (8000bfc <MX_FDCAN2_Init+0xc0>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000b52:	4b2a      	ldr	r3, [pc, #168]	; (8000bfc <MX_FDCAN2_Init+0xc0>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000b58:	4b28      	ldr	r3, [pc, #160]	; (8000bfc <MX_FDCAN2_Init+0xc0>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000b5e:	4b27      	ldr	r3, [pc, #156]	; (8000bfc <MX_FDCAN2_Init+0xc0>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8000b64:	4b25      	ldr	r3, [pc, #148]	; (8000bfc <MX_FDCAN2_Init+0xc0>)
 8000b66:	2201      	movs	r2, #1
 8000b68:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000b6a:	4b24      	ldr	r3, [pc, #144]	; (8000bfc <MX_FDCAN2_Init+0xc0>)
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000b70:	4b22      	ldr	r3, [pc, #136]	; (8000bfc <MX_FDCAN2_Init+0xc0>)
 8000b72:	2202      	movs	r2, #2
 8000b74:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000b76:	4b21      	ldr	r3, [pc, #132]	; (8000bfc <MX_FDCAN2_Init+0xc0>)
 8000b78:	2202      	movs	r2, #2
 8000b7a:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000b7c:	4b1f      	ldr	r3, [pc, #124]	; (8000bfc <MX_FDCAN2_Init+0xc0>)
 8000b7e:	2201      	movs	r2, #1
 8000b80:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000b82:	4b1e      	ldr	r3, [pc, #120]	; (8000bfc <MX_FDCAN2_Init+0xc0>)
 8000b84:	2201      	movs	r2, #1
 8000b86:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000b88:	4b1c      	ldr	r3, [pc, #112]	; (8000bfc <MX_FDCAN2_Init+0xc0>)
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000b8e:	4b1b      	ldr	r3, [pc, #108]	; (8000bfc <MX_FDCAN2_Init+0xc0>)
 8000b90:	2201      	movs	r2, #1
 8000b92:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000b94:	4b19      	ldr	r3, [pc, #100]	; (8000bfc <MX_FDCAN2_Init+0xc0>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000b9a:	4b18      	ldr	r3, [pc, #96]	; (8000bfc <MX_FDCAN2_Init+0xc0>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000ba0:	4b16      	ldr	r3, [pc, #88]	; (8000bfc <MX_FDCAN2_Init+0xc0>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000ba6:	4b15      	ldr	r3, [pc, #84]	; (8000bfc <MX_FDCAN2_Init+0xc0>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000bac:	4b13      	ldr	r3, [pc, #76]	; (8000bfc <MX_FDCAN2_Init+0xc0>)
 8000bae:	2204      	movs	r2, #4
 8000bb0:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000bb2:	4b12      	ldr	r3, [pc, #72]	; (8000bfc <MX_FDCAN2_Init+0xc0>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000bb8:	4b10      	ldr	r3, [pc, #64]	; (8000bfc <MX_FDCAN2_Init+0xc0>)
 8000bba:	2204      	movs	r2, #4
 8000bbc:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000bbe:	4b0f      	ldr	r3, [pc, #60]	; (8000bfc <MX_FDCAN2_Init+0xc0>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000bc4:	4b0d      	ldr	r3, [pc, #52]	; (8000bfc <MX_FDCAN2_Init+0xc0>)
 8000bc6:	2204      	movs	r2, #4
 8000bc8:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000bca:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <MX_FDCAN2_Init+0xc0>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000bd0:	4b0a      	ldr	r3, [pc, #40]	; (8000bfc <MX_FDCAN2_Init+0xc0>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000bd6:	4b09      	ldr	r3, [pc, #36]	; (8000bfc <MX_FDCAN2_Init+0xc0>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000bdc:	4b07      	ldr	r3, [pc, #28]	; (8000bfc <MX_FDCAN2_Init+0xc0>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000be2:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <MX_FDCAN2_Init+0xc0>)
 8000be4:	2204      	movs	r2, #4
 8000be6:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000be8:	4804      	ldr	r0, [pc, #16]	; (8000bfc <MX_FDCAN2_Init+0xc0>)
 8000bea:	f002 fbff 	bl	80033ec <HAL_FDCAN_Init>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000bf4:	f000 fa20 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000bf8:	bf00      	nop
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	2400aa20 	.word	0x2400aa20
 8000c00:	4000a400 	.word	0x4000a400

08000c04 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000c08:	4b0d      	ldr	r3, [pc, #52]	; (8000c40 <MX_SDMMC1_SD_Init+0x3c>)
 8000c0a:	4a0e      	ldr	r2, [pc, #56]	; (8000c44 <MX_SDMMC1_SD_Init+0x40>)
 8000c0c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000c0e:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <MX_SDMMC1_SD_Init+0x3c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000c14:	4b0a      	ldr	r3, [pc, #40]	; (8000c40 <MX_SDMMC1_SD_Init+0x3c>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000c1a:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <MX_SDMMC1_SD_Init+0x3c>)
 8000c1c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c20:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 8000c22:	4b07      	ldr	r3, [pc, #28]	; (8000c40 <MX_SDMMC1_SD_Init+0x3c>)
 8000c24:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c28:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000c2a:	4b05      	ldr	r3, [pc, #20]	; (8000c40 <MX_SDMMC1_SD_Init+0x3c>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 8000c30:	4b03      	ldr	r3, [pc, #12]	; (8000c40 <MX_SDMMC1_SD_Init+0x3c>)
 8000c32:	2201      	movs	r2, #1
 8000c34:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000c36:	bf00      	nop
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr
 8000c40:	2400a56c 	.word	0x2400a56c
 8000c44:	52007000 	.word	0x52007000

08000c48 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c4c:	4b27      	ldr	r3, [pc, #156]	; (8000cec <MX_SPI1_Init+0xa4>)
 8000c4e:	4a28      	ldr	r2, [pc, #160]	; (8000cf0 <MX_SPI1_Init+0xa8>)
 8000c50:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c52:	4b26      	ldr	r3, [pc, #152]	; (8000cec <MX_SPI1_Init+0xa4>)
 8000c54:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000c58:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c5a:	4b24      	ldr	r3, [pc, #144]	; (8000cec <MX_SPI1_Init+0xa4>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c60:	4b22      	ldr	r3, [pc, #136]	; (8000cec <MX_SPI1_Init+0xa4>)
 8000c62:	2207      	movs	r2, #7
 8000c64:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c66:	4b21      	ldr	r3, [pc, #132]	; (8000cec <MX_SPI1_Init+0xa4>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c6c:	4b1f      	ldr	r3, [pc, #124]	; (8000cec <MX_SPI1_Init+0xa4>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c72:	4b1e      	ldr	r3, [pc, #120]	; (8000cec <MX_SPI1_Init+0xa4>)
 8000c74:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000c78:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c7a:	4b1c      	ldr	r3, [pc, #112]	; (8000cec <MX_SPI1_Init+0xa4>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c80:	4b1a      	ldr	r3, [pc, #104]	; (8000cec <MX_SPI1_Init+0xa4>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c86:	4b19      	ldr	r3, [pc, #100]	; (8000cec <MX_SPI1_Init+0xa4>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c8c:	4b17      	ldr	r3, [pc, #92]	; (8000cec <MX_SPI1_Init+0xa4>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000c92:	4b16      	ldr	r3, [pc, #88]	; (8000cec <MX_SPI1_Init+0xa4>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c98:	4b14      	ldr	r3, [pc, #80]	; (8000cec <MX_SPI1_Init+0xa4>)
 8000c9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c9e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000ca0:	4b12      	ldr	r3, [pc, #72]	; (8000cec <MX_SPI1_Init+0xa4>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000ca6:	4b11      	ldr	r3, [pc, #68]	; (8000cec <MX_SPI1_Init+0xa4>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000cac:	4b0f      	ldr	r3, [pc, #60]	; (8000cec <MX_SPI1_Init+0xa4>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000cb2:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <MX_SPI1_Init+0xa4>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000cb8:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <MX_SPI1_Init+0xa4>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000cbe:	4b0b      	ldr	r3, [pc, #44]	; (8000cec <MX_SPI1_Init+0xa4>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000cc4:	4b09      	ldr	r3, [pc, #36]	; (8000cec <MX_SPI1_Init+0xa4>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000cca:	4b08      	ldr	r3, [pc, #32]	; (8000cec <MX_SPI1_Init+0xa4>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000cd0:	4b06      	ldr	r3, [pc, #24]	; (8000cec <MX_SPI1_Init+0xa4>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cd6:	4805      	ldr	r0, [pc, #20]	; (8000cec <MX_SPI1_Init+0xa4>)
 8000cd8:	f008 fd66 	bl	80097a8 <HAL_SPI_Init>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8000ce2:	f000 f9a9 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	2400a720 	.word	0x2400a720
 8000cf0:	40013000 	.word	0x40013000

08000cf4 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8000cf8:	4b22      	ldr	r3, [pc, #136]	; (8000d84 <MX_UART8_Init+0x90>)
 8000cfa:	4a23      	ldr	r2, [pc, #140]	; (8000d88 <MX_UART8_Init+0x94>)
 8000cfc:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8000cfe:	4b21      	ldr	r3, [pc, #132]	; (8000d84 <MX_UART8_Init+0x90>)
 8000d00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d04:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8000d06:	4b1f      	ldr	r3, [pc, #124]	; (8000d84 <MX_UART8_Init+0x90>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8000d0c:	4b1d      	ldr	r3, [pc, #116]	; (8000d84 <MX_UART8_Init+0x90>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8000d12:	4b1c      	ldr	r3, [pc, #112]	; (8000d84 <MX_UART8_Init+0x90>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8000d18:	4b1a      	ldr	r3, [pc, #104]	; (8000d84 <MX_UART8_Init+0x90>)
 8000d1a:	220c      	movs	r2, #12
 8000d1c:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d1e:	4b19      	ldr	r3, [pc, #100]	; (8000d84 <MX_UART8_Init+0x90>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d24:	4b17      	ldr	r3, [pc, #92]	; (8000d84 <MX_UART8_Init+0x90>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d2a:	4b16      	ldr	r3, [pc, #88]	; (8000d84 <MX_UART8_Init+0x90>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d30:	4b14      	ldr	r3, [pc, #80]	; (8000d84 <MX_UART8_Init+0x90>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d36:	4b13      	ldr	r3, [pc, #76]	; (8000d84 <MX_UART8_Init+0x90>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8000d3c:	4811      	ldr	r0, [pc, #68]	; (8000d84 <MX_UART8_Init+0x90>)
 8000d3e:	f008 fe46 	bl	80099ce <HAL_UART_Init>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8000d48:	f000 f976 	bl	8001038 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	480d      	ldr	r0, [pc, #52]	; (8000d84 <MX_UART8_Init+0x90>)
 8000d50:	f009 fde1 	bl	800a916 <HAL_UARTEx_SetTxFifoThreshold>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 8000d5a:	f000 f96d 	bl	8001038 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d5e:	2100      	movs	r1, #0
 8000d60:	4808      	ldr	r0, [pc, #32]	; (8000d84 <MX_UART8_Init+0x90>)
 8000d62:	f009 fe16 	bl	800a992 <HAL_UARTEx_SetRxFifoThreshold>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8000d6c:	f000 f964 	bl	8001038 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8000d70:	4804      	ldr	r0, [pc, #16]	; (8000d84 <MX_UART8_Init+0x90>)
 8000d72:	f009 fd97 	bl	800a8a4 <HAL_UARTEx_DisableFifoMode>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8000d7c:	f000 f95c 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8000d80:	bf00      	nop
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	2400a690 	.word	0x2400a690
 8000d88:	40007c00 	.word	0x40007c00

08000d8c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d90:	4b22      	ldr	r3, [pc, #136]	; (8000e1c <MX_USART3_UART_Init+0x90>)
 8000d92:	4a23      	ldr	r2, [pc, #140]	; (8000e20 <MX_USART3_UART_Init+0x94>)
 8000d94:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8000d96:	4b21      	ldr	r3, [pc, #132]	; (8000e1c <MX_USART3_UART_Init+0x90>)
 8000d98:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000d9c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d9e:	4b1f      	ldr	r3, [pc, #124]	; (8000e1c <MX_USART3_UART_Init+0x90>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000da4:	4b1d      	ldr	r3, [pc, #116]	; (8000e1c <MX_USART3_UART_Init+0x90>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000daa:	4b1c      	ldr	r3, [pc, #112]	; (8000e1c <MX_USART3_UART_Init+0x90>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000db0:	4b1a      	ldr	r3, [pc, #104]	; (8000e1c <MX_USART3_UART_Init+0x90>)
 8000db2:	220c      	movs	r2, #12
 8000db4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000db6:	4b19      	ldr	r3, [pc, #100]	; (8000e1c <MX_USART3_UART_Init+0x90>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dbc:	4b17      	ldr	r3, [pc, #92]	; (8000e1c <MX_USART3_UART_Init+0x90>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dc2:	4b16      	ldr	r3, [pc, #88]	; (8000e1c <MX_USART3_UART_Init+0x90>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000dc8:	4b14      	ldr	r3, [pc, #80]	; (8000e1c <MX_USART3_UART_Init+0x90>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dce:	4b13      	ldr	r3, [pc, #76]	; (8000e1c <MX_USART3_UART_Init+0x90>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000dd4:	4811      	ldr	r0, [pc, #68]	; (8000e1c <MX_USART3_UART_Init+0x90>)
 8000dd6:	f008 fdfa 	bl	80099ce <HAL_UART_Init>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000de0:	f000 f92a 	bl	8001038 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000de4:	2100      	movs	r1, #0
 8000de6:	480d      	ldr	r0, [pc, #52]	; (8000e1c <MX_USART3_UART_Init+0x90>)
 8000de8:	f009 fd95 	bl	800a916 <HAL_UARTEx_SetTxFifoThreshold>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000df2:	f000 f921 	bl	8001038 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000df6:	2100      	movs	r1, #0
 8000df8:	4808      	ldr	r0, [pc, #32]	; (8000e1c <MX_USART3_UART_Init+0x90>)
 8000dfa:	f009 fdca 	bl	800a992 <HAL_UARTEx_SetRxFifoThreshold>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000e04:	f000 f918 	bl	8001038 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000e08:	4804      	ldr	r0, [pc, #16]	; (8000e1c <MX_USART3_UART_Init+0x90>)
 8000e0a:	f009 fd4b 	bl	800a8a4 <HAL_UARTEx_DisableFifoMode>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000e14:	f000 f910 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e18:	bf00      	nop
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	2400a2b0 	.word	0x2400a2b0
 8000e20:	40004800 	.word	0x40004800

08000e24 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e2a:	4b0d      	ldr	r3, [pc, #52]	; (8000e60 <MX_DMA_Init+0x3c>)
 8000e2c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e30:	4a0b      	ldr	r2, [pc, #44]	; (8000e60 <MX_DMA_Init+0x3c>)
 8000e32:	f043 0301 	orr.w	r3, r3, #1
 8000e36:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e3a:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <MX_DMA_Init+0x3c>)
 8000e3c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e40:	f003 0301 	and.w	r3, r3, #1
 8000e44:	607b      	str	r3, [r7, #4]
 8000e46:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	200b      	movs	r0, #11
 8000e4e:	f000 fdd6 	bl	80019fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e52:	200b      	movs	r0, #11
 8000e54:	f000 fded 	bl	8001a32 <HAL_NVIC_EnableIRQ>

}
 8000e58:	bf00      	nop
 8000e5a:	3708      	adds	r7, #8
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	58024400 	.word	0x58024400

08000e64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08c      	sub	sp, #48	; 0x30
 8000e68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6a:	f107 031c 	add.w	r3, r7, #28
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	605a      	str	r2, [r3, #4]
 8000e74:	609a      	str	r2, [r3, #8]
 8000e76:	60da      	str	r2, [r3, #12]
 8000e78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e7a:	4b69      	ldr	r3, [pc, #420]	; (8001020 <MX_GPIO_Init+0x1bc>)
 8000e7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e80:	4a67      	ldr	r2, [pc, #412]	; (8001020 <MX_GPIO_Init+0x1bc>)
 8000e82:	f043 0310 	orr.w	r3, r3, #16
 8000e86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e8a:	4b65      	ldr	r3, [pc, #404]	; (8001020 <MX_GPIO_Init+0x1bc>)
 8000e8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e90:	f003 0310 	and.w	r3, r3, #16
 8000e94:	61bb      	str	r3, [r7, #24]
 8000e96:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e98:	4b61      	ldr	r3, [pc, #388]	; (8001020 <MX_GPIO_Init+0x1bc>)
 8000e9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e9e:	4a60      	ldr	r2, [pc, #384]	; (8001020 <MX_GPIO_Init+0x1bc>)
 8000ea0:	f043 0304 	orr.w	r3, r3, #4
 8000ea4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ea8:	4b5d      	ldr	r3, [pc, #372]	; (8001020 <MX_GPIO_Init+0x1bc>)
 8000eaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eae:	f003 0304 	and.w	r3, r3, #4
 8000eb2:	617b      	str	r3, [r7, #20]
 8000eb4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eb6:	4b5a      	ldr	r3, [pc, #360]	; (8001020 <MX_GPIO_Init+0x1bc>)
 8000eb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ebc:	4a58      	ldr	r2, [pc, #352]	; (8001020 <MX_GPIO_Init+0x1bc>)
 8000ebe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ec2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ec6:	4b56      	ldr	r3, [pc, #344]	; (8001020 <MX_GPIO_Init+0x1bc>)
 8000ec8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ecc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ed0:	613b      	str	r3, [r7, #16]
 8000ed2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed4:	4b52      	ldr	r3, [pc, #328]	; (8001020 <MX_GPIO_Init+0x1bc>)
 8000ed6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eda:	4a51      	ldr	r2, [pc, #324]	; (8001020 <MX_GPIO_Init+0x1bc>)
 8000edc:	f043 0301 	orr.w	r3, r3, #1
 8000ee0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ee4:	4b4e      	ldr	r3, [pc, #312]	; (8001020 <MX_GPIO_Init+0x1bc>)
 8000ee6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef2:	4b4b      	ldr	r3, [pc, #300]	; (8001020 <MX_GPIO_Init+0x1bc>)
 8000ef4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ef8:	4a49      	ldr	r2, [pc, #292]	; (8001020 <MX_GPIO_Init+0x1bc>)
 8000efa:	f043 0302 	orr.w	r3, r3, #2
 8000efe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f02:	4b47      	ldr	r3, [pc, #284]	; (8001020 <MX_GPIO_Init+0x1bc>)
 8000f04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f08:	f003 0302 	and.w	r3, r3, #2
 8000f0c:	60bb      	str	r3, [r7, #8]
 8000f0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f10:	4b43      	ldr	r3, [pc, #268]	; (8001020 <MX_GPIO_Init+0x1bc>)
 8000f12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f16:	4a42      	ldr	r2, [pc, #264]	; (8001020 <MX_GPIO_Init+0x1bc>)
 8000f18:	f043 0308 	orr.w	r3, r3, #8
 8000f1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f20:	4b3f      	ldr	r3, [pc, #252]	; (8001020 <MX_GPIO_Init+0x1bc>)
 8000f22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f26:	f003 0308 	and.w	r3, r3, #8
 8000f2a:	607b      	str	r3, [r7, #4]
 8000f2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RS_485_TX_EN_Pin|RS_485_RX_EN_Pin, GPIO_PIN_RESET);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	210c      	movs	r1, #12
 8000f32:	483c      	ldr	r0, [pc, #240]	; (8001024 <MX_GPIO_Init+0x1c0>)
 8000f34:	f002 ff72 	bl	8003e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TELE_CE_Pin|TELE_CS_Pin, GPIO_PIN_RESET);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	2103      	movs	r1, #3
 8000f3c:	483a      	ldr	r0, [pc, #232]	; (8001028 <MX_GPIO_Init+0x1c4>)
 8000f3e:	f002 ff6d 	bl	8003e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000f42:	2200      	movs	r2, #0
 8000f44:	2101      	movs	r1, #1
 8000f46:	4839      	ldr	r0, [pc, #228]	; (800102c <MX_GPIO_Init+0x1c8>)
 8000f48:	f002 ff68 	bl	8003e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPS_RST_GPIO_Port, GPS_RST_Pin, GPIO_PIN_RESET);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f52:	4837      	ldr	r0, [pc, #220]	; (8001030 <MX_GPIO_Init+0x1cc>)
 8000f54:	f002 ff62 	bl	8003e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RS_485_TX_EN_Pin RS_485_RX_EN_Pin */
  GPIO_InitStruct.Pin = RS_485_TX_EN_Pin|RS_485_RX_EN_Pin;
 8000f58:	230c      	movs	r3, #12
 8000f5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f64:	2300      	movs	r3, #0
 8000f66:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f68:	f107 031c 	add.w	r3, r7, #28
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	482d      	ldr	r0, [pc, #180]	; (8001024 <MX_GPIO_Init+0x1c0>)
 8000f70:	f002 fda4 	bl	8003abc <HAL_GPIO_Init>

  /*Configure GPIO pins : TELE_CE_Pin TELE_CS_Pin */
  GPIO_InitStruct.Pin = TELE_CE_Pin|TELE_CS_Pin;
 8000f74:	2303      	movs	r3, #3
 8000f76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f80:	2300      	movs	r3, #0
 8000f82:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f84:	f107 031c 	add.w	r3, r7, #28
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4827      	ldr	r0, [pc, #156]	; (8001028 <MX_GPIO_Init+0x1c4>)
 8000f8c:	f002 fd96 	bl	8003abc <HAL_GPIO_Init>

  /*Configure GPIO pin : TELE_IRQ_Pin */
  GPIO_InitStruct.Pin = TELE_IRQ_Pin;
 8000f90:	2304      	movs	r3, #4
 8000f92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f94:	4b27      	ldr	r3, [pc, #156]	; (8001034 <MX_GPIO_Init+0x1d0>)
 8000f96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TELE_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000f9c:	f107 031c 	add.w	r3, r7, #28
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4821      	ldr	r0, [pc, #132]	; (8001028 <MX_GPIO_Init+0x1c4>)
 8000fa4:	f002 fd8a 	bl	8003abc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fac:	2301      	movs	r3, #1
 8000fae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000fb8:	f107 031c 	add.w	r3, r7, #28
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	481b      	ldr	r0, [pc, #108]	; (800102c <MX_GPIO_Init+0x1c8>)
 8000fc0:	f002 fd7c 	bl	8003abc <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_INT_Pin */
  GPIO_InitStruct.Pin = BTN_INT_Pin;
 8000fc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fca:	4b1a      	ldr	r3, [pc, #104]	; (8001034 <MX_GPIO_Init+0x1d0>)
 8000fcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BTN_INT_GPIO_Port, &GPIO_InitStruct);
 8000fd2:	f107 031c 	add.w	r3, r7, #28
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4812      	ldr	r0, [pc, #72]	; (8001024 <MX_GPIO_Init+0x1c0>)
 8000fda:	f002 fd6f 	bl	8003abc <HAL_GPIO_Init>

  /*Configure GPIO pin : GPS_RST_Pin */
  GPIO_InitStruct.Pin = GPS_RST_Pin;
 8000fde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fe2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fec:	2300      	movs	r3, #0
 8000fee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPS_RST_GPIO_Port, &GPIO_InitStruct);
 8000ff0:	f107 031c 	add.w	r3, r7, #28
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	480e      	ldr	r0, [pc, #56]	; (8001030 <MX_GPIO_Init+0x1cc>)
 8000ff8:	f002 fd60 	bl	8003abc <HAL_GPIO_Init>

  /*Configure GPIO pin : CARD_DET_Pin */
  GPIO_InitStruct.Pin = CARD_DET_Pin;
 8000ffc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001000:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001002:	2300      	movs	r3, #0
 8001004:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CARD_DET_GPIO_Port, &GPIO_InitStruct);
 800100a:	f107 031c 	add.w	r3, r7, #28
 800100e:	4619      	mov	r1, r3
 8001010:	4805      	ldr	r0, [pc, #20]	; (8001028 <MX_GPIO_Init+0x1c4>)
 8001012:	f002 fd53 	bl	8003abc <HAL_GPIO_Init>

}
 8001016:	bf00      	nop
 8001018:	3730      	adds	r7, #48	; 0x30
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	58024400 	.word	0x58024400
 8001024:	58021000 	.word	0x58021000
 8001028:	58020000 	.word	0x58020000
 800102c:	58020400 	.word	0x58020400
 8001030:	58020c00 	.word	0x58020c00
 8001034:	11110000 	.word	0x11110000

08001038 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800103c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800103e:	e7fe      	b.n	800103e <Error_Handler+0x6>

08001040 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001046:	4b0a      	ldr	r3, [pc, #40]	; (8001070 <HAL_MspInit+0x30>)
 8001048:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800104c:	4a08      	ldr	r2, [pc, #32]	; (8001070 <HAL_MspInit+0x30>)
 800104e:	f043 0302 	orr.w	r3, r3, #2
 8001052:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001056:	4b06      	ldr	r3, [pc, #24]	; (8001070 <HAL_MspInit+0x30>)
 8001058:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800105c:	f003 0302 	and.w	r3, r3, #2
 8001060:	607b      	str	r3, [r7, #4]
 8001062:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001064:	bf00      	nop
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	58024400 	.word	0x58024400

08001074 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b08c      	sub	sp, #48	; 0x30
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107c:	f107 031c 	add.w	r3, r7, #28
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a3d      	ldr	r2, [pc, #244]	; (8001188 <HAL_FDCAN_MspInit+0x114>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d138      	bne.n	8001108 <HAL_FDCAN_MspInit+0x94>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001096:	4b3d      	ldr	r3, [pc, #244]	; (800118c <HAL_FDCAN_MspInit+0x118>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	3301      	adds	r3, #1
 800109c:	4a3b      	ldr	r2, [pc, #236]	; (800118c <HAL_FDCAN_MspInit+0x118>)
 800109e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80010a0:	4b3a      	ldr	r3, [pc, #232]	; (800118c <HAL_FDCAN_MspInit+0x118>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d10e      	bne.n	80010c6 <HAL_FDCAN_MspInit+0x52>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80010a8:	4b39      	ldr	r3, [pc, #228]	; (8001190 <HAL_FDCAN_MspInit+0x11c>)
 80010aa:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80010ae:	4a38      	ldr	r2, [pc, #224]	; (8001190 <HAL_FDCAN_MspInit+0x11c>)
 80010b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010b4:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80010b8:	4b35      	ldr	r3, [pc, #212]	; (8001190 <HAL_FDCAN_MspInit+0x11c>)
 80010ba:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80010be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010c2:	61bb      	str	r3, [r7, #24]
 80010c4:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c6:	4b32      	ldr	r3, [pc, #200]	; (8001190 <HAL_FDCAN_MspInit+0x11c>)
 80010c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010cc:	4a30      	ldr	r2, [pc, #192]	; (8001190 <HAL_FDCAN_MspInit+0x11c>)
 80010ce:	f043 0302 	orr.w	r3, r3, #2
 80010d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010d6:	4b2e      	ldr	r3, [pc, #184]	; (8001190 <HAL_FDCAN_MspInit+0x11c>)
 80010d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010dc:	f003 0302 	and.w	r3, r3, #2
 80010e0:	617b      	str	r3, [r7, #20]
 80010e2:	697b      	ldr	r3, [r7, #20]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010e4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ea:	2302      	movs	r3, #2
 80010ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f2:	2300      	movs	r3, #0
 80010f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80010f6:	2309      	movs	r3, #9
 80010f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010fa:	f107 031c 	add.w	r3, r7, #28
 80010fe:	4619      	mov	r1, r3
 8001100:	4824      	ldr	r0, [pc, #144]	; (8001194 <HAL_FDCAN_MspInit+0x120>)
 8001102:	f002 fcdb 	bl	8003abc <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8001106:	e03b      	b.n	8001180 <HAL_FDCAN_MspInit+0x10c>
  else if(hfdcan->Instance==FDCAN2)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a22      	ldr	r2, [pc, #136]	; (8001198 <HAL_FDCAN_MspInit+0x124>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d136      	bne.n	8001180 <HAL_FDCAN_MspInit+0x10c>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001112:	4b1e      	ldr	r3, [pc, #120]	; (800118c <HAL_FDCAN_MspInit+0x118>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	3301      	adds	r3, #1
 8001118:	4a1c      	ldr	r2, [pc, #112]	; (800118c <HAL_FDCAN_MspInit+0x118>)
 800111a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 800111c:	4b1b      	ldr	r3, [pc, #108]	; (800118c <HAL_FDCAN_MspInit+0x118>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2b01      	cmp	r3, #1
 8001122:	d10e      	bne.n	8001142 <HAL_FDCAN_MspInit+0xce>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001124:	4b1a      	ldr	r3, [pc, #104]	; (8001190 <HAL_FDCAN_MspInit+0x11c>)
 8001126:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800112a:	4a19      	ldr	r2, [pc, #100]	; (8001190 <HAL_FDCAN_MspInit+0x11c>)
 800112c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001130:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001134:	4b16      	ldr	r3, [pc, #88]	; (8001190 <HAL_FDCAN_MspInit+0x11c>)
 8001136:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800113a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800113e:	613b      	str	r3, [r7, #16]
 8001140:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001142:	4b13      	ldr	r3, [pc, #76]	; (8001190 <HAL_FDCAN_MspInit+0x11c>)
 8001144:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001148:	4a11      	ldr	r2, [pc, #68]	; (8001190 <HAL_FDCAN_MspInit+0x11c>)
 800114a:	f043 0302 	orr.w	r3, r3, #2
 800114e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001152:	4b0f      	ldr	r3, [pc, #60]	; (8001190 <HAL_FDCAN_MspInit+0x11c>)
 8001154:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001158:	f003 0302 	and.w	r3, r3, #2
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001160:	2360      	movs	r3, #96	; 0x60
 8001162:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001164:	2302      	movs	r3, #2
 8001166:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116c:	2300      	movs	r3, #0
 800116e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001170:	2309      	movs	r3, #9
 8001172:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001174:	f107 031c 	add.w	r3, r7, #28
 8001178:	4619      	mov	r1, r3
 800117a:	4806      	ldr	r0, [pc, #24]	; (8001194 <HAL_FDCAN_MspInit+0x120>)
 800117c:	f002 fc9e 	bl	8003abc <HAL_GPIO_Init>
}
 8001180:	bf00      	nop
 8001182:	3730      	adds	r7, #48	; 0x30
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	4000a000 	.word	0x4000a000
 800118c:	2400a1f0 	.word	0x2400a1f0
 8001190:	58024400 	.word	0x58024400
 8001194:	58020400 	.word	0x58020400
 8001198:	4000a400 	.word	0x4000a400

0800119c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08a      	sub	sp, #40	; 0x28
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a4:	f107 0314 	add.w	r3, r7, #20
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
 80011b2:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a2a      	ldr	r2, [pc, #168]	; (8001264 <HAL_SD_MspInit+0xc8>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d14d      	bne.n	800125a <HAL_SD_MspInit+0xbe>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80011be:	4b2a      	ldr	r3, [pc, #168]	; (8001268 <HAL_SD_MspInit+0xcc>)
 80011c0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80011c4:	4a28      	ldr	r2, [pc, #160]	; (8001268 <HAL_SD_MspInit+0xcc>)
 80011c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011ca:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80011ce:	4b26      	ldr	r3, [pc, #152]	; (8001268 <HAL_SD_MspInit+0xcc>)
 80011d0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80011d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011d8:	613b      	str	r3, [r7, #16]
 80011da:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011dc:	4b22      	ldr	r3, [pc, #136]	; (8001268 <HAL_SD_MspInit+0xcc>)
 80011de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011e2:	4a21      	ldr	r2, [pc, #132]	; (8001268 <HAL_SD_MspInit+0xcc>)
 80011e4:	f043 0304 	orr.w	r3, r3, #4
 80011e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011ec:	4b1e      	ldr	r3, [pc, #120]	; (8001268 <HAL_SD_MspInit+0xcc>)
 80011ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011f2:	f003 0304 	and.w	r3, r3, #4
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011fa:	4b1b      	ldr	r3, [pc, #108]	; (8001268 <HAL_SD_MspInit+0xcc>)
 80011fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001200:	4a19      	ldr	r2, [pc, #100]	; (8001268 <HAL_SD_MspInit+0xcc>)
 8001202:	f043 0308 	orr.w	r3, r3, #8
 8001206:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800120a:	4b17      	ldr	r3, [pc, #92]	; (8001268 <HAL_SD_MspInit+0xcc>)
 800120c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001210:	f003 0308 	and.w	r3, r3, #8
 8001214:	60bb      	str	r3, [r7, #8]
 8001216:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001218:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800121c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121e:	2302      	movs	r3, #2
 8001220:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001226:	2303      	movs	r3, #3
 8001228:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800122a:	230c      	movs	r3, #12
 800122c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800122e:	f107 0314 	add.w	r3, r7, #20
 8001232:	4619      	mov	r1, r3
 8001234:	480d      	ldr	r0, [pc, #52]	; (800126c <HAL_SD_MspInit+0xd0>)
 8001236:	f002 fc41 	bl	8003abc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800123a:	2304      	movs	r3, #4
 800123c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123e:	2302      	movs	r3, #2
 8001240:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	2300      	movs	r3, #0
 8001244:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001246:	2303      	movs	r3, #3
 8001248:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800124a:	230c      	movs	r3, #12
 800124c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800124e:	f107 0314 	add.w	r3, r7, #20
 8001252:	4619      	mov	r1, r3
 8001254:	4806      	ldr	r0, [pc, #24]	; (8001270 <HAL_SD_MspInit+0xd4>)
 8001256:	f002 fc31 	bl	8003abc <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800125a:	bf00      	nop
 800125c:	3728      	adds	r7, #40	; 0x28
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	52007000 	.word	0x52007000
 8001268:	58024400 	.word	0x58024400
 800126c:	58020800 	.word	0x58020800
 8001270:	58020c00 	.word	0x58020c00

08001274 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b08a      	sub	sp, #40	; 0x28
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127c:	f107 0314 	add.w	r3, r7, #20
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a1a      	ldr	r2, [pc, #104]	; (80012fc <HAL_SPI_MspInit+0x88>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d12d      	bne.n	80012f2 <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001296:	4b1a      	ldr	r3, [pc, #104]	; (8001300 <HAL_SPI_MspInit+0x8c>)
 8001298:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800129c:	4a18      	ldr	r2, [pc, #96]	; (8001300 <HAL_SPI_MspInit+0x8c>)
 800129e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012a2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80012a6:	4b16      	ldr	r3, [pc, #88]	; (8001300 <HAL_SPI_MspInit+0x8c>)
 80012a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80012ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012b0:	613b      	str	r3, [r7, #16]
 80012b2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b4:	4b12      	ldr	r3, [pc, #72]	; (8001300 <HAL_SPI_MspInit+0x8c>)
 80012b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ba:	4a11      	ldr	r2, [pc, #68]	; (8001300 <HAL_SPI_MspInit+0x8c>)
 80012bc:	f043 0301 	orr.w	r3, r3, #1
 80012c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012c4:	4b0e      	ldr	r3, [pc, #56]	; (8001300 <HAL_SPI_MspInit+0x8c>)
 80012c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ca:	f003 0301 	and.w	r3, r3, #1
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80012d2:	23e0      	movs	r3, #224	; 0xe0
 80012d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d6:	2302      	movs	r3, #2
 80012d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012de:	2300      	movs	r3, #0
 80012e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012e2:	2305      	movs	r3, #5
 80012e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e6:	f107 0314 	add.w	r3, r7, #20
 80012ea:	4619      	mov	r1, r3
 80012ec:	4805      	ldr	r0, [pc, #20]	; (8001304 <HAL_SPI_MspInit+0x90>)
 80012ee:	f002 fbe5 	bl	8003abc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80012f2:	bf00      	nop
 80012f4:	3728      	adds	r7, #40	; 0x28
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40013000 	.word	0x40013000
 8001300:	58024400 	.word	0x58024400
 8001304:	58020000 	.word	0x58020000

08001308 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08c      	sub	sp, #48	; 0x30
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	f107 031c 	add.w	r3, r7, #28
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a4b      	ldr	r2, [pc, #300]	; (8001454 <HAL_UART_MspInit+0x14c>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d12e      	bne.n	8001388 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 800132a:	4b4b      	ldr	r3, [pc, #300]	; (8001458 <HAL_UART_MspInit+0x150>)
 800132c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001330:	4a49      	ldr	r2, [pc, #292]	; (8001458 <HAL_UART_MspInit+0x150>)
 8001332:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001336:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800133a:	4b47      	ldr	r3, [pc, #284]	; (8001458 <HAL_UART_MspInit+0x150>)
 800133c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001340:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001344:	61bb      	str	r3, [r7, #24]
 8001346:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001348:	4b43      	ldr	r3, [pc, #268]	; (8001458 <HAL_UART_MspInit+0x150>)
 800134a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800134e:	4a42      	ldr	r2, [pc, #264]	; (8001458 <HAL_UART_MspInit+0x150>)
 8001350:	f043 0310 	orr.w	r3, r3, #16
 8001354:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001358:	4b3f      	ldr	r3, [pc, #252]	; (8001458 <HAL_UART_MspInit+0x150>)
 800135a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800135e:	f003 0310 	and.w	r3, r3, #16
 8001362:	617b      	str	r3, [r7, #20]
 8001364:	697b      	ldr	r3, [r7, #20]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001366:	2303      	movs	r3, #3
 8001368:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136a:	2302      	movs	r3, #2
 800136c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001372:	2300      	movs	r3, #0
 8001374:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8001376:	2308      	movs	r3, #8
 8001378:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800137a:	f107 031c 	add.w	r3, r7, #28
 800137e:	4619      	mov	r1, r3
 8001380:	4836      	ldr	r0, [pc, #216]	; (800145c <HAL_UART_MspInit+0x154>)
 8001382:	f002 fb9b 	bl	8003abc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001386:	e061      	b.n	800144c <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART3)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a34      	ldr	r2, [pc, #208]	; (8001460 <HAL_UART_MspInit+0x158>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d15c      	bne.n	800144c <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001392:	4b31      	ldr	r3, [pc, #196]	; (8001458 <HAL_UART_MspInit+0x150>)
 8001394:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001398:	4a2f      	ldr	r2, [pc, #188]	; (8001458 <HAL_UART_MspInit+0x150>)
 800139a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800139e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80013a2:	4b2d      	ldr	r3, [pc, #180]	; (8001458 <HAL_UART_MspInit+0x150>)
 80013a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013ac:	613b      	str	r3, [r7, #16]
 80013ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013b0:	4b29      	ldr	r3, [pc, #164]	; (8001458 <HAL_UART_MspInit+0x150>)
 80013b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013b6:	4a28      	ldr	r2, [pc, #160]	; (8001458 <HAL_UART_MspInit+0x150>)
 80013b8:	f043 0308 	orr.w	r3, r3, #8
 80013bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013c0:	4b25      	ldr	r3, [pc, #148]	; (8001458 <HAL_UART_MspInit+0x150>)
 80013c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013c6:	f003 0308 	and.w	r3, r3, #8
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80013ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d4:	2302      	movs	r3, #2
 80013d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d8:	2300      	movs	r3, #0
 80013da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013dc:	2300      	movs	r3, #0
 80013de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013e0:	2307      	movs	r3, #7
 80013e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013e4:	f107 031c 	add.w	r3, r7, #28
 80013e8:	4619      	mov	r1, r3
 80013ea:	481e      	ldr	r0, [pc, #120]	; (8001464 <HAL_UART_MspInit+0x15c>)
 80013ec:	f002 fb66 	bl	8003abc <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream0;
 80013f0:	4b1d      	ldr	r3, [pc, #116]	; (8001468 <HAL_UART_MspInit+0x160>)
 80013f2:	4a1e      	ldr	r2, [pc, #120]	; (800146c <HAL_UART_MspInit+0x164>)
 80013f4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80013f6:	4b1c      	ldr	r3, [pc, #112]	; (8001468 <HAL_UART_MspInit+0x160>)
 80013f8:	222d      	movs	r2, #45	; 0x2d
 80013fa:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013fc:	4b1a      	ldr	r3, [pc, #104]	; (8001468 <HAL_UART_MspInit+0x160>)
 80013fe:	2200      	movs	r2, #0
 8001400:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001402:	4b19      	ldr	r3, [pc, #100]	; (8001468 <HAL_UART_MspInit+0x160>)
 8001404:	2200      	movs	r2, #0
 8001406:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001408:	4b17      	ldr	r3, [pc, #92]	; (8001468 <HAL_UART_MspInit+0x160>)
 800140a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800140e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001410:	4b15      	ldr	r3, [pc, #84]	; (8001468 <HAL_UART_MspInit+0x160>)
 8001412:	2200      	movs	r2, #0
 8001414:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001416:	4b14      	ldr	r3, [pc, #80]	; (8001468 <HAL_UART_MspInit+0x160>)
 8001418:	2200      	movs	r2, #0
 800141a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800141c:	4b12      	ldr	r3, [pc, #72]	; (8001468 <HAL_UART_MspInit+0x160>)
 800141e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001422:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001424:	4b10      	ldr	r3, [pc, #64]	; (8001468 <HAL_UART_MspInit+0x160>)
 8001426:	2200      	movs	r2, #0
 8001428:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800142a:	4b0f      	ldr	r3, [pc, #60]	; (8001468 <HAL_UART_MspInit+0x160>)
 800142c:	2200      	movs	r2, #0
 800142e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001430:	480d      	ldr	r0, [pc, #52]	; (8001468 <HAL_UART_MspInit+0x160>)
 8001432:	f000 fb19 	bl	8001a68 <HAL_DMA_Init>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <HAL_UART_MspInit+0x138>
      Error_Handler();
 800143c:	f7ff fdfc 	bl	8001038 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	4a09      	ldr	r2, [pc, #36]	; (8001468 <HAL_UART_MspInit+0x160>)
 8001444:	679a      	str	r2, [r3, #120]	; 0x78
 8001446:	4a08      	ldr	r2, [pc, #32]	; (8001468 <HAL_UART_MspInit+0x160>)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800144c:	bf00      	nop
 800144e:	3730      	adds	r7, #48	; 0x30
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40007c00 	.word	0x40007c00
 8001458:	58024400 	.word	0x58024400
 800145c:	58021000 	.word	0x58021000
 8001460:	40004800 	.word	0x40004800
 8001464:	58020c00 	.word	0x58020c00
 8001468:	2400a238 	.word	0x2400a238
 800146c:	40020010 	.word	0x40020010

08001470 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001474:	f004 fefc 	bl	8006270 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001478:	e7fe      	b.n	8001478 <NMI_Handler+0x8>

0800147a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800147a:	b480      	push	{r7}
 800147c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800147e:	e7fe      	b.n	800147e <HardFault_Handler+0x4>

08001480 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001484:	e7fe      	b.n	8001484 <MemManage_Handler+0x4>

08001486 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001486:	b480      	push	{r7}
 8001488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800148a:	e7fe      	b.n	800148a <BusFault_Handler+0x4>

0800148c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001490:	e7fe      	b.n	8001490 <UsageFault_Handler+0x4>

08001492 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001492:	b480      	push	{r7}
 8001494:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ae:	b480      	push	{r7}
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014b2:	bf00      	nop
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014c0:	f000 f974 	bl	80017ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014c4:	bf00      	nop
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80014cc:	4802      	ldr	r0, [pc, #8]	; (80014d8 <DMA1_Stream0_IRQHandler+0x10>)
 80014ce:	f000 fe27 	bl	8002120 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	2400a238 	.word	0x2400a238

080014dc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80014e0:	4802      	ldr	r0, [pc, #8]	; (80014ec <OTG_FS_IRQHandler+0x10>)
 80014e2:	f002 fe26 	bl	8004132 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	2400b640 	.word	0x2400b640

080014f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014f8:	4a14      	ldr	r2, [pc, #80]	; (800154c <_sbrk+0x5c>)
 80014fa:	4b15      	ldr	r3, [pc, #84]	; (8001550 <_sbrk+0x60>)
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001504:	4b13      	ldr	r3, [pc, #76]	; (8001554 <_sbrk+0x64>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d102      	bne.n	8001512 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800150c:	4b11      	ldr	r3, [pc, #68]	; (8001554 <_sbrk+0x64>)
 800150e:	4a12      	ldr	r2, [pc, #72]	; (8001558 <_sbrk+0x68>)
 8001510:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001512:	4b10      	ldr	r3, [pc, #64]	; (8001554 <_sbrk+0x64>)
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4413      	add	r3, r2
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	429a      	cmp	r2, r3
 800151e:	d207      	bcs.n	8001530 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001520:	f011 fc22 	bl	8012d68 <__errno>
 8001524:	4602      	mov	r2, r0
 8001526:	230c      	movs	r3, #12
 8001528:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800152a:	f04f 33ff 	mov.w	r3, #4294967295
 800152e:	e009      	b.n	8001544 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001530:	4b08      	ldr	r3, [pc, #32]	; (8001554 <_sbrk+0x64>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001536:	4b07      	ldr	r3, [pc, #28]	; (8001554 <_sbrk+0x64>)
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4413      	add	r3, r2
 800153e:	4a05      	ldr	r2, [pc, #20]	; (8001554 <_sbrk+0x64>)
 8001540:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001542:	68fb      	ldr	r3, [r7, #12]
}
 8001544:	4618      	mov	r0, r3
 8001546:	3718      	adds	r7, #24
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	24080000 	.word	0x24080000
 8001550:	00000400 	.word	0x00000400
 8001554:	2400a1f4 	.word	0x2400a1f4
 8001558:	2400ba50 	.word	0x2400ba50

0800155c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001560:	4b39      	ldr	r3, [pc, #228]	; (8001648 <SystemInit+0xec>)
 8001562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001566:	4a38      	ldr	r2, [pc, #224]	; (8001648 <SystemInit+0xec>)
 8001568:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800156c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001570:	4b36      	ldr	r3, [pc, #216]	; (800164c <SystemInit+0xf0>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 030f 	and.w	r3, r3, #15
 8001578:	2b06      	cmp	r3, #6
 800157a:	d807      	bhi.n	800158c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800157c:	4b33      	ldr	r3, [pc, #204]	; (800164c <SystemInit+0xf0>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f023 030f 	bic.w	r3, r3, #15
 8001584:	4a31      	ldr	r2, [pc, #196]	; (800164c <SystemInit+0xf0>)
 8001586:	f043 0307 	orr.w	r3, r3, #7
 800158a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800158c:	4b30      	ldr	r3, [pc, #192]	; (8001650 <SystemInit+0xf4>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a2f      	ldr	r2, [pc, #188]	; (8001650 <SystemInit+0xf4>)
 8001592:	f043 0301 	orr.w	r3, r3, #1
 8001596:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001598:	4b2d      	ldr	r3, [pc, #180]	; (8001650 <SystemInit+0xf4>)
 800159a:	2200      	movs	r2, #0
 800159c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800159e:	4b2c      	ldr	r3, [pc, #176]	; (8001650 <SystemInit+0xf4>)
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	492b      	ldr	r1, [pc, #172]	; (8001650 <SystemInit+0xf4>)
 80015a4:	4b2b      	ldr	r3, [pc, #172]	; (8001654 <SystemInit+0xf8>)
 80015a6:	4013      	ands	r3, r2
 80015a8:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80015aa:	4b28      	ldr	r3, [pc, #160]	; (800164c <SystemInit+0xf0>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 030f 	and.w	r3, r3, #15
 80015b2:	2b07      	cmp	r3, #7
 80015b4:	d907      	bls.n	80015c6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80015b6:	4b25      	ldr	r3, [pc, #148]	; (800164c <SystemInit+0xf0>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f023 030f 	bic.w	r3, r3, #15
 80015be:	4a23      	ldr	r2, [pc, #140]	; (800164c <SystemInit+0xf0>)
 80015c0:	f043 0307 	orr.w	r3, r3, #7
 80015c4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80015c6:	4b22      	ldr	r3, [pc, #136]	; (8001650 <SystemInit+0xf4>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80015cc:	4b20      	ldr	r3, [pc, #128]	; (8001650 <SystemInit+0xf4>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80015d2:	4b1f      	ldr	r3, [pc, #124]	; (8001650 <SystemInit+0xf4>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80015d8:	4b1d      	ldr	r3, [pc, #116]	; (8001650 <SystemInit+0xf4>)
 80015da:	4a1f      	ldr	r2, [pc, #124]	; (8001658 <SystemInit+0xfc>)
 80015dc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80015de:	4b1c      	ldr	r3, [pc, #112]	; (8001650 <SystemInit+0xf4>)
 80015e0:	4a1e      	ldr	r2, [pc, #120]	; (800165c <SystemInit+0x100>)
 80015e2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80015e4:	4b1a      	ldr	r3, [pc, #104]	; (8001650 <SystemInit+0xf4>)
 80015e6:	4a1e      	ldr	r2, [pc, #120]	; (8001660 <SystemInit+0x104>)
 80015e8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80015ea:	4b19      	ldr	r3, [pc, #100]	; (8001650 <SystemInit+0xf4>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80015f0:	4b17      	ldr	r3, [pc, #92]	; (8001650 <SystemInit+0xf4>)
 80015f2:	4a1b      	ldr	r2, [pc, #108]	; (8001660 <SystemInit+0x104>)
 80015f4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80015f6:	4b16      	ldr	r3, [pc, #88]	; (8001650 <SystemInit+0xf4>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80015fc:	4b14      	ldr	r3, [pc, #80]	; (8001650 <SystemInit+0xf4>)
 80015fe:	4a18      	ldr	r2, [pc, #96]	; (8001660 <SystemInit+0x104>)
 8001600:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001602:	4b13      	ldr	r3, [pc, #76]	; (8001650 <SystemInit+0xf4>)
 8001604:	2200      	movs	r2, #0
 8001606:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001608:	4b11      	ldr	r3, [pc, #68]	; (8001650 <SystemInit+0xf4>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a10      	ldr	r2, [pc, #64]	; (8001650 <SystemInit+0xf4>)
 800160e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001612:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001614:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <SystemInit+0xf4>)
 8001616:	2200      	movs	r2, #0
 8001618:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800161a:	4b12      	ldr	r3, [pc, #72]	; (8001664 <SystemInit+0x108>)
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	4b12      	ldr	r3, [pc, #72]	; (8001668 <SystemInit+0x10c>)
 8001620:	4013      	ands	r3, r2
 8001622:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001626:	d202      	bcs.n	800162e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001628:	4b10      	ldr	r3, [pc, #64]	; (800166c <SystemInit+0x110>)
 800162a:	2201      	movs	r2, #1
 800162c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800162e:	4b10      	ldr	r3, [pc, #64]	; (8001670 <SystemInit+0x114>)
 8001630:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001634:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001636:	4b04      	ldr	r3, [pc, #16]	; (8001648 <SystemInit+0xec>)
 8001638:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800163c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800163e:	bf00      	nop
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	e000ed00 	.word	0xe000ed00
 800164c:	52002000 	.word	0x52002000
 8001650:	58024400 	.word	0x58024400
 8001654:	eaf6ed7f 	.word	0xeaf6ed7f
 8001658:	02020200 	.word	0x02020200
 800165c:	01ff0000 	.word	0x01ff0000
 8001660:	01010280 	.word	0x01010280
 8001664:	5c001000 	.word	0x5c001000
 8001668:	ffff0000 	.word	0xffff0000
 800166c:	51008108 	.word	0x51008108
 8001670:	52004000 	.word	0x52004000

08001674 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001674:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016ac <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001678:	f7ff ff70 	bl	800155c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800167c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800167e:	e003      	b.n	8001688 <LoopCopyDataInit>

08001680 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001680:	4b0b      	ldr	r3, [pc, #44]	; (80016b0 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8001682:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001684:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001686:	3104      	adds	r1, #4

08001688 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001688:	480a      	ldr	r0, [pc, #40]	; (80016b4 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 800168a:	4b0b      	ldr	r3, [pc, #44]	; (80016b8 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 800168c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800168e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001690:	d3f6      	bcc.n	8001680 <CopyDataInit>
  ldr  r2, =_sbss
 8001692:	4a0a      	ldr	r2, [pc, #40]	; (80016bc <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001694:	e002      	b.n	800169c <LoopFillZerobss>

08001696 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001696:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001698:	f842 3b04 	str.w	r3, [r2], #4

0800169c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800169c:	4b08      	ldr	r3, [pc, #32]	; (80016c0 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 800169e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80016a0:	d3f9      	bcc.n	8001696 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016a2:	f011 fb67 	bl	8012d74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016a6:	f7fe fff3 	bl	8000690 <main>
  bx  lr    
 80016aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016ac:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80016b0:	080138a4 	.word	0x080138a4
  ldr  r0, =_sdata
 80016b4:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80016b8:	240001cc 	.word	0x240001cc
  ldr  r2, =_sbss
 80016bc:	240001d0 	.word	0x240001d0
  ldr  r3, = _ebss
 80016c0:	2400ba4c 	.word	0x2400ba4c

080016c4 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016c4:	e7fe      	b.n	80016c4 <ADC3_IRQHandler>
	...

080016c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016ce:	2003      	movs	r0, #3
 80016d0:	f000 f98a 	bl	80019e8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80016d4:	f004 fbfe 	bl	8005ed4 <HAL_RCC_GetSysClockFreq>
 80016d8:	4601      	mov	r1, r0
 80016da:	4b15      	ldr	r3, [pc, #84]	; (8001730 <HAL_Init+0x68>)
 80016dc:	699b      	ldr	r3, [r3, #24]
 80016de:	0a1b      	lsrs	r3, r3, #8
 80016e0:	f003 030f 	and.w	r3, r3, #15
 80016e4:	4a13      	ldr	r2, [pc, #76]	; (8001734 <HAL_Init+0x6c>)
 80016e6:	5cd3      	ldrb	r3, [r2, r3]
 80016e8:	f003 031f 	and.w	r3, r3, #31
 80016ec:	fa21 f303 	lsr.w	r3, r1, r3
 80016f0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80016f2:	4b0f      	ldr	r3, [pc, #60]	; (8001730 <HAL_Init+0x68>)
 80016f4:	699b      	ldr	r3, [r3, #24]
 80016f6:	f003 030f 	and.w	r3, r3, #15
 80016fa:	4a0e      	ldr	r2, [pc, #56]	; (8001734 <HAL_Init+0x6c>)
 80016fc:	5cd3      	ldrb	r3, [r2, r3]
 80016fe:	f003 031f 	and.w	r3, r3, #31
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	fa22 f303 	lsr.w	r3, r2, r3
 8001708:	4a0b      	ldr	r2, [pc, #44]	; (8001738 <HAL_Init+0x70>)
 800170a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800170c:	4a0b      	ldr	r2, [pc, #44]	; (800173c <HAL_Init+0x74>)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001712:	2000      	movs	r0, #0
 8001714:	f000 f814 	bl	8001740 <HAL_InitTick>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e002      	b.n	8001728 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001722:	f7ff fc8d 	bl	8001040 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001726:	2300      	movs	r3, #0
}
 8001728:	4618      	mov	r0, r3
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	58024400 	.word	0x58024400
 8001734:	08013778 	.word	0x08013778
 8001738:	24000004 	.word	0x24000004
 800173c:	24000000 	.word	0x24000000

08001740 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001748:	4b15      	ldr	r3, [pc, #84]	; (80017a0 <HAL_InitTick+0x60>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d101      	bne.n	8001754 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e021      	b.n	8001798 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001754:	4b13      	ldr	r3, [pc, #76]	; (80017a4 <HAL_InitTick+0x64>)
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <HAL_InitTick+0x60>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	4619      	mov	r1, r3
 800175e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001762:	fbb3 f3f1 	udiv	r3, r3, r1
 8001766:	fbb2 f3f3 	udiv	r3, r2, r3
 800176a:	4618      	mov	r0, r3
 800176c:	f000 f96f 	bl	8001a4e <HAL_SYSTICK_Config>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e00e      	b.n	8001798 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2b0f      	cmp	r3, #15
 800177e:	d80a      	bhi.n	8001796 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001780:	2200      	movs	r2, #0
 8001782:	6879      	ldr	r1, [r7, #4]
 8001784:	f04f 30ff 	mov.w	r0, #4294967295
 8001788:	f000 f939 	bl	80019fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800178c:	4a06      	ldr	r2, [pc, #24]	; (80017a8 <HAL_InitTick+0x68>)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001792:	2300      	movs	r3, #0
 8001794:	e000      	b.n	8001798 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
}
 8001798:	4618      	mov	r0, r3
 800179a:	3708      	adds	r7, #8
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	2400000c 	.word	0x2400000c
 80017a4:	24000000 	.word	0x24000000
 80017a8:	24000008 	.word	0x24000008

080017ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017b0:	4b06      	ldr	r3, [pc, #24]	; (80017cc <HAL_IncTick+0x20>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	461a      	mov	r2, r3
 80017b6:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <HAL_IncTick+0x24>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4413      	add	r3, r2
 80017bc:	4a04      	ldr	r2, [pc, #16]	; (80017d0 <HAL_IncTick+0x24>)
 80017be:	6013      	str	r3, [r2, #0]
}
 80017c0:	bf00      	nop
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	2400000c 	.word	0x2400000c
 80017d0:	2400ad04 	.word	0x2400ad04

080017d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  return uwTick;
 80017d8:	4b03      	ldr	r3, [pc, #12]	; (80017e8 <HAL_GetTick+0x14>)
 80017da:	681b      	ldr	r3, [r3, #0]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	2400ad04 	.word	0x2400ad04

080017ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017f4:	f7ff ffee 	bl	80017d4 <HAL_GetTick>
 80017f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001804:	d005      	beq.n	8001812 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001806:	4b09      	ldr	r3, [pc, #36]	; (800182c <HAL_Delay+0x40>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	461a      	mov	r2, r3
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	4413      	add	r3, r2
 8001810:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001812:	bf00      	nop
 8001814:	f7ff ffde 	bl	80017d4 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	68fa      	ldr	r2, [r7, #12]
 8001820:	429a      	cmp	r2, r3
 8001822:	d8f7      	bhi.n	8001814 <HAL_Delay+0x28>
  {
  }
}
 8001824:	bf00      	nop
 8001826:	3710      	adds	r7, #16
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	2400000c 	.word	0x2400000c

08001830 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001834:	4b03      	ldr	r3, [pc, #12]	; (8001844 <HAL_GetREVID+0x14>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	0c1b      	lsrs	r3, r3, #16
}
 800183a:	4618      	mov	r0, r3
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	5c001000 	.word	0x5c001000

08001848 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f003 0307 	and.w	r3, r3, #7
 8001856:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001858:	4b0b      	ldr	r3, [pc, #44]	; (8001888 <__NVIC_SetPriorityGrouping+0x40>)
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800185e:	68ba      	ldr	r2, [r7, #8]
 8001860:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001864:	4013      	ands	r3, r2
 8001866:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001870:	4b06      	ldr	r3, [pc, #24]	; (800188c <__NVIC_SetPriorityGrouping+0x44>)
 8001872:	4313      	orrs	r3, r2
 8001874:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001876:	4a04      	ldr	r2, [pc, #16]	; (8001888 <__NVIC_SetPriorityGrouping+0x40>)
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	60d3      	str	r3, [r2, #12]
}
 800187c:	bf00      	nop
 800187e:	3714      	adds	r7, #20
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr
 8001888:	e000ed00 	.word	0xe000ed00
 800188c:	05fa0000 	.word	0x05fa0000

08001890 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001894:	4b04      	ldr	r3, [pc, #16]	; (80018a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	0a1b      	lsrs	r3, r3, #8
 800189a:	f003 0307 	and.w	r3, r3, #7
}
 800189e:	4618      	mov	r0, r3
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	e000ed00 	.word	0xe000ed00

080018ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4603      	mov	r3, r0
 80018b4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	db0b      	blt.n	80018d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018be:	88fb      	ldrh	r3, [r7, #6]
 80018c0:	f003 021f 	and.w	r2, r3, #31
 80018c4:	4907      	ldr	r1, [pc, #28]	; (80018e4 <__NVIC_EnableIRQ+0x38>)
 80018c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018ca:	095b      	lsrs	r3, r3, #5
 80018cc:	2001      	movs	r0, #1
 80018ce:	fa00 f202 	lsl.w	r2, r0, r2
 80018d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018d6:	bf00      	nop
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	e000e100 	.word	0xe000e100

080018e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	6039      	str	r1, [r7, #0]
 80018f2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	db0a      	blt.n	8001912 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	b2da      	uxtb	r2, r3
 8001900:	490c      	ldr	r1, [pc, #48]	; (8001934 <__NVIC_SetPriority+0x4c>)
 8001902:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001906:	0112      	lsls	r2, r2, #4
 8001908:	b2d2      	uxtb	r2, r2
 800190a:	440b      	add	r3, r1
 800190c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001910:	e00a      	b.n	8001928 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	b2da      	uxtb	r2, r3
 8001916:	4908      	ldr	r1, [pc, #32]	; (8001938 <__NVIC_SetPriority+0x50>)
 8001918:	88fb      	ldrh	r3, [r7, #6]
 800191a:	f003 030f 	and.w	r3, r3, #15
 800191e:	3b04      	subs	r3, #4
 8001920:	0112      	lsls	r2, r2, #4
 8001922:	b2d2      	uxtb	r2, r2
 8001924:	440b      	add	r3, r1
 8001926:	761a      	strb	r2, [r3, #24]
}
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	e000e100 	.word	0xe000e100
 8001938:	e000ed00 	.word	0xe000ed00

0800193c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800193c:	b480      	push	{r7}
 800193e:	b089      	sub	sp, #36	; 0x24
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	60b9      	str	r1, [r7, #8]
 8001946:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f003 0307 	and.w	r3, r3, #7
 800194e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	f1c3 0307 	rsb	r3, r3, #7
 8001956:	2b04      	cmp	r3, #4
 8001958:	bf28      	it	cs
 800195a:	2304      	movcs	r3, #4
 800195c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	3304      	adds	r3, #4
 8001962:	2b06      	cmp	r3, #6
 8001964:	d902      	bls.n	800196c <NVIC_EncodePriority+0x30>
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	3b03      	subs	r3, #3
 800196a:	e000      	b.n	800196e <NVIC_EncodePriority+0x32>
 800196c:	2300      	movs	r3, #0
 800196e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001970:	f04f 32ff 	mov.w	r2, #4294967295
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	43da      	mvns	r2, r3
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	401a      	ands	r2, r3
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001984:	f04f 31ff 	mov.w	r1, #4294967295
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	fa01 f303 	lsl.w	r3, r1, r3
 800198e:	43d9      	mvns	r1, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001994:	4313      	orrs	r3, r2
         );
}
 8001996:	4618      	mov	r0, r3
 8001998:	3724      	adds	r7, #36	; 0x24
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
	...

080019a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	3b01      	subs	r3, #1
 80019b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019b4:	d301      	bcc.n	80019ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019b6:	2301      	movs	r3, #1
 80019b8:	e00f      	b.n	80019da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019ba:	4a0a      	ldr	r2, [pc, #40]	; (80019e4 <SysTick_Config+0x40>)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	3b01      	subs	r3, #1
 80019c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019c2:	210f      	movs	r1, #15
 80019c4:	f04f 30ff 	mov.w	r0, #4294967295
 80019c8:	f7ff ff8e 	bl	80018e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019cc:	4b05      	ldr	r3, [pc, #20]	; (80019e4 <SysTick_Config+0x40>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019d2:	4b04      	ldr	r3, [pc, #16]	; (80019e4 <SysTick_Config+0x40>)
 80019d4:	2207      	movs	r2, #7
 80019d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	e000e010 	.word	0xe000e010

080019e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f7ff ff29 	bl	8001848 <__NVIC_SetPriorityGrouping>
}
 80019f6:	bf00      	nop
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b086      	sub	sp, #24
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	4603      	mov	r3, r0
 8001a06:	60b9      	str	r1, [r7, #8]
 8001a08:	607a      	str	r2, [r7, #4]
 8001a0a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a0c:	f7ff ff40 	bl	8001890 <__NVIC_GetPriorityGrouping>
 8001a10:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	68b9      	ldr	r1, [r7, #8]
 8001a16:	6978      	ldr	r0, [r7, #20]
 8001a18:	f7ff ff90 	bl	800193c <NVIC_EncodePriority>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a22:	4611      	mov	r1, r2
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff ff5f 	bl	80018e8 <__NVIC_SetPriority>
}
 8001a2a:	bf00      	nop
 8001a2c:	3718      	adds	r7, #24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b082      	sub	sp, #8
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	4603      	mov	r3, r0
 8001a3a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff ff33 	bl	80018ac <__NVIC_EnableIRQ>
}
 8001a46:	bf00      	nop
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b082      	sub	sp, #8
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f7ff ffa4 	bl	80019a4 <SysTick_Config>
 8001a5c:	4603      	mov	r3, r0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
	...

08001a68 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001a70:	f7ff feb0 	bl	80017d4 <HAL_GetTick>
 8001a74:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d101      	bne.n	8001a80 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e316      	b.n	80020ae <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a66      	ldr	r2, [pc, #408]	; (8001c20 <HAL_DMA_Init+0x1b8>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d04a      	beq.n	8001b20 <HAL_DMA_Init+0xb8>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a65      	ldr	r2, [pc, #404]	; (8001c24 <HAL_DMA_Init+0x1bc>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d045      	beq.n	8001b20 <HAL_DMA_Init+0xb8>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a63      	ldr	r2, [pc, #396]	; (8001c28 <HAL_DMA_Init+0x1c0>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d040      	beq.n	8001b20 <HAL_DMA_Init+0xb8>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a62      	ldr	r2, [pc, #392]	; (8001c2c <HAL_DMA_Init+0x1c4>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d03b      	beq.n	8001b20 <HAL_DMA_Init+0xb8>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a60      	ldr	r2, [pc, #384]	; (8001c30 <HAL_DMA_Init+0x1c8>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d036      	beq.n	8001b20 <HAL_DMA_Init+0xb8>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a5f      	ldr	r2, [pc, #380]	; (8001c34 <HAL_DMA_Init+0x1cc>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d031      	beq.n	8001b20 <HAL_DMA_Init+0xb8>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a5d      	ldr	r2, [pc, #372]	; (8001c38 <HAL_DMA_Init+0x1d0>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d02c      	beq.n	8001b20 <HAL_DMA_Init+0xb8>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a5c      	ldr	r2, [pc, #368]	; (8001c3c <HAL_DMA_Init+0x1d4>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d027      	beq.n	8001b20 <HAL_DMA_Init+0xb8>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a5a      	ldr	r2, [pc, #360]	; (8001c40 <HAL_DMA_Init+0x1d8>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d022      	beq.n	8001b20 <HAL_DMA_Init+0xb8>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a59      	ldr	r2, [pc, #356]	; (8001c44 <HAL_DMA_Init+0x1dc>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d01d      	beq.n	8001b20 <HAL_DMA_Init+0xb8>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a57      	ldr	r2, [pc, #348]	; (8001c48 <HAL_DMA_Init+0x1e0>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d018      	beq.n	8001b20 <HAL_DMA_Init+0xb8>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a56      	ldr	r2, [pc, #344]	; (8001c4c <HAL_DMA_Init+0x1e4>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d013      	beq.n	8001b20 <HAL_DMA_Init+0xb8>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a54      	ldr	r2, [pc, #336]	; (8001c50 <HAL_DMA_Init+0x1e8>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d00e      	beq.n	8001b20 <HAL_DMA_Init+0xb8>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a53      	ldr	r2, [pc, #332]	; (8001c54 <HAL_DMA_Init+0x1ec>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d009      	beq.n	8001b20 <HAL_DMA_Init+0xb8>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a51      	ldr	r2, [pc, #324]	; (8001c58 <HAL_DMA_Init+0x1f0>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d004      	beq.n	8001b20 <HAL_DMA_Init+0xb8>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a50      	ldr	r2, [pc, #320]	; (8001c5c <HAL_DMA_Init+0x1f4>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d101      	bne.n	8001b24 <HAL_DMA_Init+0xbc>
 8001b20:	2301      	movs	r3, #1
 8001b22:	e000      	b.n	8001b26 <HAL_DMA_Init+0xbe>
 8001b24:	2300      	movs	r3, #0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	f000 813b 	beq.w	8001da2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2202      	movs	r2, #2
 8001b38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a37      	ldr	r2, [pc, #220]	; (8001c20 <HAL_DMA_Init+0x1b8>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d04a      	beq.n	8001bdc <HAL_DMA_Init+0x174>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a36      	ldr	r2, [pc, #216]	; (8001c24 <HAL_DMA_Init+0x1bc>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d045      	beq.n	8001bdc <HAL_DMA_Init+0x174>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a34      	ldr	r2, [pc, #208]	; (8001c28 <HAL_DMA_Init+0x1c0>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d040      	beq.n	8001bdc <HAL_DMA_Init+0x174>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a33      	ldr	r2, [pc, #204]	; (8001c2c <HAL_DMA_Init+0x1c4>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d03b      	beq.n	8001bdc <HAL_DMA_Init+0x174>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a31      	ldr	r2, [pc, #196]	; (8001c30 <HAL_DMA_Init+0x1c8>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d036      	beq.n	8001bdc <HAL_DMA_Init+0x174>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a30      	ldr	r2, [pc, #192]	; (8001c34 <HAL_DMA_Init+0x1cc>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d031      	beq.n	8001bdc <HAL_DMA_Init+0x174>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a2e      	ldr	r2, [pc, #184]	; (8001c38 <HAL_DMA_Init+0x1d0>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d02c      	beq.n	8001bdc <HAL_DMA_Init+0x174>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a2d      	ldr	r2, [pc, #180]	; (8001c3c <HAL_DMA_Init+0x1d4>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d027      	beq.n	8001bdc <HAL_DMA_Init+0x174>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a2b      	ldr	r2, [pc, #172]	; (8001c40 <HAL_DMA_Init+0x1d8>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d022      	beq.n	8001bdc <HAL_DMA_Init+0x174>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a2a      	ldr	r2, [pc, #168]	; (8001c44 <HAL_DMA_Init+0x1dc>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d01d      	beq.n	8001bdc <HAL_DMA_Init+0x174>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a28      	ldr	r2, [pc, #160]	; (8001c48 <HAL_DMA_Init+0x1e0>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d018      	beq.n	8001bdc <HAL_DMA_Init+0x174>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a27      	ldr	r2, [pc, #156]	; (8001c4c <HAL_DMA_Init+0x1e4>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d013      	beq.n	8001bdc <HAL_DMA_Init+0x174>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a25      	ldr	r2, [pc, #148]	; (8001c50 <HAL_DMA_Init+0x1e8>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d00e      	beq.n	8001bdc <HAL_DMA_Init+0x174>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a24      	ldr	r2, [pc, #144]	; (8001c54 <HAL_DMA_Init+0x1ec>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d009      	beq.n	8001bdc <HAL_DMA_Init+0x174>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a22      	ldr	r2, [pc, #136]	; (8001c58 <HAL_DMA_Init+0x1f0>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d004      	beq.n	8001bdc <HAL_DMA_Init+0x174>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a21      	ldr	r2, [pc, #132]	; (8001c5c <HAL_DMA_Init+0x1f4>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d108      	bne.n	8001bee <HAL_DMA_Init+0x186>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f022 0201 	bic.w	r2, r2, #1
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	e007      	b.n	8001bfe <HAL_DMA_Init+0x196>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f022 0201 	bic.w	r2, r2, #1
 8001bfc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001bfe:	e02f      	b.n	8001c60 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c00:	f7ff fde8 	bl	80017d4 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b05      	cmp	r3, #5
 8001c0c:	d928      	bls.n	8001c60 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2220      	movs	r2, #32
 8001c12:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2203      	movs	r2, #3
 8001c18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e246      	b.n	80020ae <HAL_DMA_Init+0x646>
 8001c20:	40020010 	.word	0x40020010
 8001c24:	40020028 	.word	0x40020028
 8001c28:	40020040 	.word	0x40020040
 8001c2c:	40020058 	.word	0x40020058
 8001c30:	40020070 	.word	0x40020070
 8001c34:	40020088 	.word	0x40020088
 8001c38:	400200a0 	.word	0x400200a0
 8001c3c:	400200b8 	.word	0x400200b8
 8001c40:	40020410 	.word	0x40020410
 8001c44:	40020428 	.word	0x40020428
 8001c48:	40020440 	.word	0x40020440
 8001c4c:	40020458 	.word	0x40020458
 8001c50:	40020470 	.word	0x40020470
 8001c54:	40020488 	.word	0x40020488
 8001c58:	400204a0 	.word	0x400204a0
 8001c5c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d1c8      	bne.n	8001c00 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c76:	697a      	ldr	r2, [r7, #20]
 8001c78:	4b83      	ldr	r3, [pc, #524]	; (8001e88 <HAL_DMA_Init+0x420>)
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001c86:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	691b      	ldr	r3, [r3, #16]
 8001c8c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c92:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c9e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a1b      	ldr	r3, [r3, #32]
 8001ca4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001ca6:	697a      	ldr	r2, [r7, #20]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb0:	2b04      	cmp	r3, #4
 8001cb2:	d107      	bne.n	8001cc4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	697a      	ldr	r2, [r7, #20]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001cc4:	4b71      	ldr	r3, [pc, #452]	; (8001e8c <HAL_DMA_Init+0x424>)
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	4b71      	ldr	r3, [pc, #452]	; (8001e90 <HAL_DMA_Init+0x428>)
 8001cca:	4013      	ands	r3, r2
 8001ccc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001cd0:	d328      	bcc.n	8001d24 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	2b28      	cmp	r3, #40	; 0x28
 8001cd8:	d903      	bls.n	8001ce2 <HAL_DMA_Init+0x27a>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	2b2e      	cmp	r3, #46	; 0x2e
 8001ce0:	d917      	bls.n	8001d12 <HAL_DMA_Init+0x2aa>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	2b3e      	cmp	r3, #62	; 0x3e
 8001ce8:	d903      	bls.n	8001cf2 <HAL_DMA_Init+0x28a>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	2b42      	cmp	r3, #66	; 0x42
 8001cf0:	d90f      	bls.n	8001d12 <HAL_DMA_Init+0x2aa>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	2b46      	cmp	r3, #70	; 0x46
 8001cf8:	d903      	bls.n	8001d02 <HAL_DMA_Init+0x29a>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	2b48      	cmp	r3, #72	; 0x48
 8001d00:	d907      	bls.n	8001d12 <HAL_DMA_Init+0x2aa>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	2b4e      	cmp	r3, #78	; 0x4e
 8001d08:	d905      	bls.n	8001d16 <HAL_DMA_Init+0x2ae>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	2b52      	cmp	r3, #82	; 0x52
 8001d10:	d801      	bhi.n	8001d16 <HAL_DMA_Init+0x2ae>
 8001d12:	2301      	movs	r3, #1
 8001d14:	e000      	b.n	8001d18 <HAL_DMA_Init+0x2b0>
 8001d16:	2300      	movs	r3, #0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d003      	beq.n	8001d24 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001d22:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	697a      	ldr	r2, [r7, #20]
 8001d2a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	695b      	ldr	r3, [r3, #20]
 8001d32:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	f023 0307 	bic.w	r3, r3, #7
 8001d3a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d40:	697a      	ldr	r2, [r7, #20]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4a:	2b04      	cmp	r3, #4
 8001d4c:	d117      	bne.n	8001d7e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d52:	697a      	ldr	r2, [r7, #20]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d00e      	beq.n	8001d7e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f001 f9b9 	bl	80030d8 <DMA_CheckFifoParam>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d008      	beq.n	8001d7e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2240      	movs	r2, #64	; 0x40
 8001d70:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2201      	movs	r2, #1
 8001d76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e197      	b.n	80020ae <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	697a      	ldr	r2, [r7, #20]
 8001d84:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f001 f8f4 	bl	8002f74 <DMA_CalcBaseAndBitshift>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d94:	f003 031f 	and.w	r3, r3, #31
 8001d98:	223f      	movs	r2, #63	; 0x3f
 8001d9a:	409a      	lsls	r2, r3
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	609a      	str	r2, [r3, #8]
 8001da0:	e0cd      	b.n	8001f3e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a3b      	ldr	r2, [pc, #236]	; (8001e94 <HAL_DMA_Init+0x42c>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d022      	beq.n	8001df2 <HAL_DMA_Init+0x38a>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a39      	ldr	r2, [pc, #228]	; (8001e98 <HAL_DMA_Init+0x430>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d01d      	beq.n	8001df2 <HAL_DMA_Init+0x38a>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a38      	ldr	r2, [pc, #224]	; (8001e9c <HAL_DMA_Init+0x434>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d018      	beq.n	8001df2 <HAL_DMA_Init+0x38a>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a36      	ldr	r2, [pc, #216]	; (8001ea0 <HAL_DMA_Init+0x438>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d013      	beq.n	8001df2 <HAL_DMA_Init+0x38a>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a35      	ldr	r2, [pc, #212]	; (8001ea4 <HAL_DMA_Init+0x43c>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d00e      	beq.n	8001df2 <HAL_DMA_Init+0x38a>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a33      	ldr	r2, [pc, #204]	; (8001ea8 <HAL_DMA_Init+0x440>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d009      	beq.n	8001df2 <HAL_DMA_Init+0x38a>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a32      	ldr	r2, [pc, #200]	; (8001eac <HAL_DMA_Init+0x444>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d004      	beq.n	8001df2 <HAL_DMA_Init+0x38a>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a30      	ldr	r2, [pc, #192]	; (8001eb0 <HAL_DMA_Init+0x448>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d101      	bne.n	8001df6 <HAL_DMA_Init+0x38e>
 8001df2:	2301      	movs	r3, #1
 8001df4:	e000      	b.n	8001df8 <HAL_DMA_Init+0x390>
 8001df6:	2300      	movs	r3, #0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	f000 8097 	beq.w	8001f2c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a24      	ldr	r2, [pc, #144]	; (8001e94 <HAL_DMA_Init+0x42c>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d021      	beq.n	8001e4c <HAL_DMA_Init+0x3e4>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a22      	ldr	r2, [pc, #136]	; (8001e98 <HAL_DMA_Init+0x430>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d01c      	beq.n	8001e4c <HAL_DMA_Init+0x3e4>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a21      	ldr	r2, [pc, #132]	; (8001e9c <HAL_DMA_Init+0x434>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d017      	beq.n	8001e4c <HAL_DMA_Init+0x3e4>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a1f      	ldr	r2, [pc, #124]	; (8001ea0 <HAL_DMA_Init+0x438>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d012      	beq.n	8001e4c <HAL_DMA_Init+0x3e4>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a1e      	ldr	r2, [pc, #120]	; (8001ea4 <HAL_DMA_Init+0x43c>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d00d      	beq.n	8001e4c <HAL_DMA_Init+0x3e4>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a1c      	ldr	r2, [pc, #112]	; (8001ea8 <HAL_DMA_Init+0x440>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d008      	beq.n	8001e4c <HAL_DMA_Init+0x3e4>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a1b      	ldr	r2, [pc, #108]	; (8001eac <HAL_DMA_Init+0x444>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d003      	beq.n	8001e4c <HAL_DMA_Init+0x3e4>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a19      	ldr	r2, [pc, #100]	; (8001eb0 <HAL_DMA_Init+0x448>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2202      	movs	r2, #2
 8001e5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001e66:	697a      	ldr	r2, [r7, #20]
 8001e68:	4b12      	ldr	r3, [pc, #72]	; (8001eb4 <HAL_DMA_Init+0x44c>)
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	2b40      	cmp	r3, #64	; 0x40
 8001e74:	d020      	beq.n	8001eb8 <HAL_DMA_Init+0x450>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	2b80      	cmp	r3, #128	; 0x80
 8001e7c:	d102      	bne.n	8001e84 <HAL_DMA_Init+0x41c>
 8001e7e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e82:	e01a      	b.n	8001eba <HAL_DMA_Init+0x452>
 8001e84:	2300      	movs	r3, #0
 8001e86:	e018      	b.n	8001eba <HAL_DMA_Init+0x452>
 8001e88:	fe10803f 	.word	0xfe10803f
 8001e8c:	5c001000 	.word	0x5c001000
 8001e90:	ffff0000 	.word	0xffff0000
 8001e94:	58025408 	.word	0x58025408
 8001e98:	5802541c 	.word	0x5802541c
 8001e9c:	58025430 	.word	0x58025430
 8001ea0:	58025444 	.word	0x58025444
 8001ea4:	58025458 	.word	0x58025458
 8001ea8:	5802546c 	.word	0x5802546c
 8001eac:	58025480 	.word	0x58025480
 8001eb0:	58025494 	.word	0x58025494
 8001eb4:	fffe000f 	.word	0xfffe000f
 8001eb8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	68d2      	ldr	r2, [r2, #12]
 8001ebe:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001ec0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001ec8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	695b      	ldr	r3, [r3, #20]
 8001ece:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001ed0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	699b      	ldr	r3, [r3, #24]
 8001ed6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001ed8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	69db      	ldr	r3, [r3, #28]
 8001ede:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001ee0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a1b      	ldr	r3, [r3, #32]
 8001ee6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001ee8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001eea:	697a      	ldr	r2, [r7, #20]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	697a      	ldr	r2, [r7, #20]
 8001ef6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	461a      	mov	r2, r3
 8001efe:	4b6e      	ldr	r3, [pc, #440]	; (80020b8 <HAL_DMA_Init+0x650>)
 8001f00:	4413      	add	r3, r2
 8001f02:	4a6e      	ldr	r2, [pc, #440]	; (80020bc <HAL_DMA_Init+0x654>)
 8001f04:	fba2 2303 	umull	r2, r3, r2, r3
 8001f08:	091b      	lsrs	r3, r3, #4
 8001f0a:	009a      	lsls	r2, r3, #2
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f001 f82f 	bl	8002f74 <DMA_CalcBaseAndBitshift>
 8001f16:	4603      	mov	r3, r0
 8001f18:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f1e:	f003 031f 	and.w	r3, r3, #31
 8001f22:	2201      	movs	r2, #1
 8001f24:	409a      	lsls	r2, r3
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	605a      	str	r2, [r3, #4]
 8001f2a:	e008      	b.n	8001f3e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2240      	movs	r2, #64	; 0x40
 8001f30:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2203      	movs	r2, #3
 8001f36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e0b7      	b.n	80020ae <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a5f      	ldr	r2, [pc, #380]	; (80020c0 <HAL_DMA_Init+0x658>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d072      	beq.n	800202e <HAL_DMA_Init+0x5c6>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a5d      	ldr	r2, [pc, #372]	; (80020c4 <HAL_DMA_Init+0x65c>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d06d      	beq.n	800202e <HAL_DMA_Init+0x5c6>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a5c      	ldr	r2, [pc, #368]	; (80020c8 <HAL_DMA_Init+0x660>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d068      	beq.n	800202e <HAL_DMA_Init+0x5c6>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a5a      	ldr	r2, [pc, #360]	; (80020cc <HAL_DMA_Init+0x664>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d063      	beq.n	800202e <HAL_DMA_Init+0x5c6>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a59      	ldr	r2, [pc, #356]	; (80020d0 <HAL_DMA_Init+0x668>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d05e      	beq.n	800202e <HAL_DMA_Init+0x5c6>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a57      	ldr	r2, [pc, #348]	; (80020d4 <HAL_DMA_Init+0x66c>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d059      	beq.n	800202e <HAL_DMA_Init+0x5c6>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a56      	ldr	r2, [pc, #344]	; (80020d8 <HAL_DMA_Init+0x670>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d054      	beq.n	800202e <HAL_DMA_Init+0x5c6>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a54      	ldr	r2, [pc, #336]	; (80020dc <HAL_DMA_Init+0x674>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d04f      	beq.n	800202e <HAL_DMA_Init+0x5c6>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a53      	ldr	r2, [pc, #332]	; (80020e0 <HAL_DMA_Init+0x678>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d04a      	beq.n	800202e <HAL_DMA_Init+0x5c6>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a51      	ldr	r2, [pc, #324]	; (80020e4 <HAL_DMA_Init+0x67c>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d045      	beq.n	800202e <HAL_DMA_Init+0x5c6>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a50      	ldr	r2, [pc, #320]	; (80020e8 <HAL_DMA_Init+0x680>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d040      	beq.n	800202e <HAL_DMA_Init+0x5c6>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a4e      	ldr	r2, [pc, #312]	; (80020ec <HAL_DMA_Init+0x684>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d03b      	beq.n	800202e <HAL_DMA_Init+0x5c6>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a4d      	ldr	r2, [pc, #308]	; (80020f0 <HAL_DMA_Init+0x688>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d036      	beq.n	800202e <HAL_DMA_Init+0x5c6>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a4b      	ldr	r2, [pc, #300]	; (80020f4 <HAL_DMA_Init+0x68c>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d031      	beq.n	800202e <HAL_DMA_Init+0x5c6>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a4a      	ldr	r2, [pc, #296]	; (80020f8 <HAL_DMA_Init+0x690>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d02c      	beq.n	800202e <HAL_DMA_Init+0x5c6>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a48      	ldr	r2, [pc, #288]	; (80020fc <HAL_DMA_Init+0x694>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d027      	beq.n	800202e <HAL_DMA_Init+0x5c6>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a47      	ldr	r2, [pc, #284]	; (8002100 <HAL_DMA_Init+0x698>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d022      	beq.n	800202e <HAL_DMA_Init+0x5c6>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a45      	ldr	r2, [pc, #276]	; (8002104 <HAL_DMA_Init+0x69c>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d01d      	beq.n	800202e <HAL_DMA_Init+0x5c6>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a44      	ldr	r2, [pc, #272]	; (8002108 <HAL_DMA_Init+0x6a0>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d018      	beq.n	800202e <HAL_DMA_Init+0x5c6>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a42      	ldr	r2, [pc, #264]	; (800210c <HAL_DMA_Init+0x6a4>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d013      	beq.n	800202e <HAL_DMA_Init+0x5c6>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a41      	ldr	r2, [pc, #260]	; (8002110 <HAL_DMA_Init+0x6a8>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d00e      	beq.n	800202e <HAL_DMA_Init+0x5c6>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a3f      	ldr	r2, [pc, #252]	; (8002114 <HAL_DMA_Init+0x6ac>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d009      	beq.n	800202e <HAL_DMA_Init+0x5c6>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a3e      	ldr	r2, [pc, #248]	; (8002118 <HAL_DMA_Init+0x6b0>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d004      	beq.n	800202e <HAL_DMA_Init+0x5c6>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a3c      	ldr	r2, [pc, #240]	; (800211c <HAL_DMA_Init+0x6b4>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d101      	bne.n	8002032 <HAL_DMA_Init+0x5ca>
 800202e:	2301      	movs	r3, #1
 8002030:	e000      	b.n	8002034 <HAL_DMA_Init+0x5cc>
 8002032:	2300      	movs	r3, #0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d032      	beq.n	800209e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f001 f8c9 	bl	80031d0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	2b80      	cmp	r3, #128	; 0x80
 8002044:	d102      	bne.n	800204c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685a      	ldr	r2, [r3, #4]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002054:	b2d2      	uxtb	r2, r2
 8002056:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002060:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d010      	beq.n	800208c <HAL_DMA_Init+0x624>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	2b08      	cmp	r3, #8
 8002070:	d80c      	bhi.n	800208c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f001 f946 	bl	8003304 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002088:	605a      	str	r2, [r3, #4]
 800208a:	e008      	b.n	800209e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2201      	movs	r2, #1
 80020a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3718      	adds	r7, #24
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	a7fdabf8 	.word	0xa7fdabf8
 80020bc:	cccccccd 	.word	0xcccccccd
 80020c0:	40020010 	.word	0x40020010
 80020c4:	40020028 	.word	0x40020028
 80020c8:	40020040 	.word	0x40020040
 80020cc:	40020058 	.word	0x40020058
 80020d0:	40020070 	.word	0x40020070
 80020d4:	40020088 	.word	0x40020088
 80020d8:	400200a0 	.word	0x400200a0
 80020dc:	400200b8 	.word	0x400200b8
 80020e0:	40020410 	.word	0x40020410
 80020e4:	40020428 	.word	0x40020428
 80020e8:	40020440 	.word	0x40020440
 80020ec:	40020458 	.word	0x40020458
 80020f0:	40020470 	.word	0x40020470
 80020f4:	40020488 	.word	0x40020488
 80020f8:	400204a0 	.word	0x400204a0
 80020fc:	400204b8 	.word	0x400204b8
 8002100:	58025408 	.word	0x58025408
 8002104:	5802541c 	.word	0x5802541c
 8002108:	58025430 	.word	0x58025430
 800210c:	58025444 	.word	0x58025444
 8002110:	58025458 	.word	0x58025458
 8002114:	5802546c 	.word	0x5802546c
 8002118:	58025480 	.word	0x58025480
 800211c:	58025494 	.word	0x58025494

08002120 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b08a      	sub	sp, #40	; 0x28
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002128:	2300      	movs	r3, #0
 800212a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800212c:	4b67      	ldr	r3, [pc, #412]	; (80022cc <HAL_DMA_IRQHandler+0x1ac>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a67      	ldr	r2, [pc, #412]	; (80022d0 <HAL_DMA_IRQHandler+0x1b0>)
 8002132:	fba2 2303 	umull	r2, r3, r2, r3
 8002136:	0a9b      	lsrs	r3, r3, #10
 8002138:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800213e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002144:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002146:	6a3b      	ldr	r3, [r7, #32]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a5f      	ldr	r2, [pc, #380]	; (80022d4 <HAL_DMA_IRQHandler+0x1b4>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d04a      	beq.n	80021f2 <HAL_DMA_IRQHandler+0xd2>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a5d      	ldr	r2, [pc, #372]	; (80022d8 <HAL_DMA_IRQHandler+0x1b8>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d045      	beq.n	80021f2 <HAL_DMA_IRQHandler+0xd2>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a5c      	ldr	r2, [pc, #368]	; (80022dc <HAL_DMA_IRQHandler+0x1bc>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d040      	beq.n	80021f2 <HAL_DMA_IRQHandler+0xd2>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a5a      	ldr	r2, [pc, #360]	; (80022e0 <HAL_DMA_IRQHandler+0x1c0>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d03b      	beq.n	80021f2 <HAL_DMA_IRQHandler+0xd2>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a59      	ldr	r2, [pc, #356]	; (80022e4 <HAL_DMA_IRQHandler+0x1c4>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d036      	beq.n	80021f2 <HAL_DMA_IRQHandler+0xd2>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a57      	ldr	r2, [pc, #348]	; (80022e8 <HAL_DMA_IRQHandler+0x1c8>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d031      	beq.n	80021f2 <HAL_DMA_IRQHandler+0xd2>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a56      	ldr	r2, [pc, #344]	; (80022ec <HAL_DMA_IRQHandler+0x1cc>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d02c      	beq.n	80021f2 <HAL_DMA_IRQHandler+0xd2>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a54      	ldr	r2, [pc, #336]	; (80022f0 <HAL_DMA_IRQHandler+0x1d0>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d027      	beq.n	80021f2 <HAL_DMA_IRQHandler+0xd2>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a53      	ldr	r2, [pc, #332]	; (80022f4 <HAL_DMA_IRQHandler+0x1d4>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d022      	beq.n	80021f2 <HAL_DMA_IRQHandler+0xd2>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a51      	ldr	r2, [pc, #324]	; (80022f8 <HAL_DMA_IRQHandler+0x1d8>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d01d      	beq.n	80021f2 <HAL_DMA_IRQHandler+0xd2>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a50      	ldr	r2, [pc, #320]	; (80022fc <HAL_DMA_IRQHandler+0x1dc>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d018      	beq.n	80021f2 <HAL_DMA_IRQHandler+0xd2>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a4e      	ldr	r2, [pc, #312]	; (8002300 <HAL_DMA_IRQHandler+0x1e0>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d013      	beq.n	80021f2 <HAL_DMA_IRQHandler+0xd2>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a4d      	ldr	r2, [pc, #308]	; (8002304 <HAL_DMA_IRQHandler+0x1e4>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d00e      	beq.n	80021f2 <HAL_DMA_IRQHandler+0xd2>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a4b      	ldr	r2, [pc, #300]	; (8002308 <HAL_DMA_IRQHandler+0x1e8>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d009      	beq.n	80021f2 <HAL_DMA_IRQHandler+0xd2>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a4a      	ldr	r2, [pc, #296]	; (800230c <HAL_DMA_IRQHandler+0x1ec>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d004      	beq.n	80021f2 <HAL_DMA_IRQHandler+0xd2>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a48      	ldr	r2, [pc, #288]	; (8002310 <HAL_DMA_IRQHandler+0x1f0>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d101      	bne.n	80021f6 <HAL_DMA_IRQHandler+0xd6>
 80021f2:	2301      	movs	r3, #1
 80021f4:	e000      	b.n	80021f8 <HAL_DMA_IRQHandler+0xd8>
 80021f6:	2300      	movs	r3, #0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	f000 842b 	beq.w	8002a54 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002202:	f003 031f 	and.w	r3, r3, #31
 8002206:	2208      	movs	r2, #8
 8002208:	409a      	lsls	r2, r3
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	4013      	ands	r3, r2
 800220e:	2b00      	cmp	r3, #0
 8002210:	f000 80a2 	beq.w	8002358 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a2e      	ldr	r2, [pc, #184]	; (80022d4 <HAL_DMA_IRQHandler+0x1b4>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d04a      	beq.n	80022b4 <HAL_DMA_IRQHandler+0x194>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a2d      	ldr	r2, [pc, #180]	; (80022d8 <HAL_DMA_IRQHandler+0x1b8>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d045      	beq.n	80022b4 <HAL_DMA_IRQHandler+0x194>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a2b      	ldr	r2, [pc, #172]	; (80022dc <HAL_DMA_IRQHandler+0x1bc>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d040      	beq.n	80022b4 <HAL_DMA_IRQHandler+0x194>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a2a      	ldr	r2, [pc, #168]	; (80022e0 <HAL_DMA_IRQHandler+0x1c0>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d03b      	beq.n	80022b4 <HAL_DMA_IRQHandler+0x194>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a28      	ldr	r2, [pc, #160]	; (80022e4 <HAL_DMA_IRQHandler+0x1c4>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d036      	beq.n	80022b4 <HAL_DMA_IRQHandler+0x194>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a27      	ldr	r2, [pc, #156]	; (80022e8 <HAL_DMA_IRQHandler+0x1c8>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d031      	beq.n	80022b4 <HAL_DMA_IRQHandler+0x194>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a25      	ldr	r2, [pc, #148]	; (80022ec <HAL_DMA_IRQHandler+0x1cc>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d02c      	beq.n	80022b4 <HAL_DMA_IRQHandler+0x194>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a24      	ldr	r2, [pc, #144]	; (80022f0 <HAL_DMA_IRQHandler+0x1d0>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d027      	beq.n	80022b4 <HAL_DMA_IRQHandler+0x194>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a22      	ldr	r2, [pc, #136]	; (80022f4 <HAL_DMA_IRQHandler+0x1d4>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d022      	beq.n	80022b4 <HAL_DMA_IRQHandler+0x194>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a21      	ldr	r2, [pc, #132]	; (80022f8 <HAL_DMA_IRQHandler+0x1d8>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d01d      	beq.n	80022b4 <HAL_DMA_IRQHandler+0x194>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a1f      	ldr	r2, [pc, #124]	; (80022fc <HAL_DMA_IRQHandler+0x1dc>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d018      	beq.n	80022b4 <HAL_DMA_IRQHandler+0x194>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a1e      	ldr	r2, [pc, #120]	; (8002300 <HAL_DMA_IRQHandler+0x1e0>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d013      	beq.n	80022b4 <HAL_DMA_IRQHandler+0x194>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a1c      	ldr	r2, [pc, #112]	; (8002304 <HAL_DMA_IRQHandler+0x1e4>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d00e      	beq.n	80022b4 <HAL_DMA_IRQHandler+0x194>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a1b      	ldr	r2, [pc, #108]	; (8002308 <HAL_DMA_IRQHandler+0x1e8>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d009      	beq.n	80022b4 <HAL_DMA_IRQHandler+0x194>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a19      	ldr	r2, [pc, #100]	; (800230c <HAL_DMA_IRQHandler+0x1ec>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d004      	beq.n	80022b4 <HAL_DMA_IRQHandler+0x194>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a18      	ldr	r2, [pc, #96]	; (8002310 <HAL_DMA_IRQHandler+0x1f0>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d12f      	bne.n	8002314 <HAL_DMA_IRQHandler+0x1f4>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0304 	and.w	r3, r3, #4
 80022be:	2b00      	cmp	r3, #0
 80022c0:	bf14      	ite	ne
 80022c2:	2301      	movne	r3, #1
 80022c4:	2300      	moveq	r3, #0
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	e02e      	b.n	8002328 <HAL_DMA_IRQHandler+0x208>
 80022ca:	bf00      	nop
 80022cc:	24000000 	.word	0x24000000
 80022d0:	1b4e81b5 	.word	0x1b4e81b5
 80022d4:	40020010 	.word	0x40020010
 80022d8:	40020028 	.word	0x40020028
 80022dc:	40020040 	.word	0x40020040
 80022e0:	40020058 	.word	0x40020058
 80022e4:	40020070 	.word	0x40020070
 80022e8:	40020088 	.word	0x40020088
 80022ec:	400200a0 	.word	0x400200a0
 80022f0:	400200b8 	.word	0x400200b8
 80022f4:	40020410 	.word	0x40020410
 80022f8:	40020428 	.word	0x40020428
 80022fc:	40020440 	.word	0x40020440
 8002300:	40020458 	.word	0x40020458
 8002304:	40020470 	.word	0x40020470
 8002308:	40020488 	.word	0x40020488
 800230c:	400204a0 	.word	0x400204a0
 8002310:	400204b8 	.word	0x400204b8
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0308 	and.w	r3, r3, #8
 800231e:	2b00      	cmp	r3, #0
 8002320:	bf14      	ite	ne
 8002322:	2301      	movne	r3, #1
 8002324:	2300      	moveq	r3, #0
 8002326:	b2db      	uxtb	r3, r3
 8002328:	2b00      	cmp	r3, #0
 800232a:	d015      	beq.n	8002358 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f022 0204 	bic.w	r2, r2, #4
 800233a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002340:	f003 031f 	and.w	r3, r3, #31
 8002344:	2208      	movs	r2, #8
 8002346:	409a      	lsls	r2, r3
 8002348:	6a3b      	ldr	r3, [r7, #32]
 800234a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002350:	f043 0201 	orr.w	r2, r3, #1
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800235c:	f003 031f 	and.w	r3, r3, #31
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	fa22 f303 	lsr.w	r3, r2, r3
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	2b00      	cmp	r3, #0
 800236c:	d06e      	beq.n	800244c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a69      	ldr	r2, [pc, #420]	; (8002518 <HAL_DMA_IRQHandler+0x3f8>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d04a      	beq.n	800240e <HAL_DMA_IRQHandler+0x2ee>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a67      	ldr	r2, [pc, #412]	; (800251c <HAL_DMA_IRQHandler+0x3fc>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d045      	beq.n	800240e <HAL_DMA_IRQHandler+0x2ee>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a66      	ldr	r2, [pc, #408]	; (8002520 <HAL_DMA_IRQHandler+0x400>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d040      	beq.n	800240e <HAL_DMA_IRQHandler+0x2ee>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a64      	ldr	r2, [pc, #400]	; (8002524 <HAL_DMA_IRQHandler+0x404>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d03b      	beq.n	800240e <HAL_DMA_IRQHandler+0x2ee>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a63      	ldr	r2, [pc, #396]	; (8002528 <HAL_DMA_IRQHandler+0x408>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d036      	beq.n	800240e <HAL_DMA_IRQHandler+0x2ee>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a61      	ldr	r2, [pc, #388]	; (800252c <HAL_DMA_IRQHandler+0x40c>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d031      	beq.n	800240e <HAL_DMA_IRQHandler+0x2ee>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a60      	ldr	r2, [pc, #384]	; (8002530 <HAL_DMA_IRQHandler+0x410>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d02c      	beq.n	800240e <HAL_DMA_IRQHandler+0x2ee>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a5e      	ldr	r2, [pc, #376]	; (8002534 <HAL_DMA_IRQHandler+0x414>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d027      	beq.n	800240e <HAL_DMA_IRQHandler+0x2ee>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a5d      	ldr	r2, [pc, #372]	; (8002538 <HAL_DMA_IRQHandler+0x418>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d022      	beq.n	800240e <HAL_DMA_IRQHandler+0x2ee>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a5b      	ldr	r2, [pc, #364]	; (800253c <HAL_DMA_IRQHandler+0x41c>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d01d      	beq.n	800240e <HAL_DMA_IRQHandler+0x2ee>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a5a      	ldr	r2, [pc, #360]	; (8002540 <HAL_DMA_IRQHandler+0x420>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d018      	beq.n	800240e <HAL_DMA_IRQHandler+0x2ee>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a58      	ldr	r2, [pc, #352]	; (8002544 <HAL_DMA_IRQHandler+0x424>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d013      	beq.n	800240e <HAL_DMA_IRQHandler+0x2ee>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a57      	ldr	r2, [pc, #348]	; (8002548 <HAL_DMA_IRQHandler+0x428>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d00e      	beq.n	800240e <HAL_DMA_IRQHandler+0x2ee>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a55      	ldr	r2, [pc, #340]	; (800254c <HAL_DMA_IRQHandler+0x42c>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d009      	beq.n	800240e <HAL_DMA_IRQHandler+0x2ee>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a54      	ldr	r2, [pc, #336]	; (8002550 <HAL_DMA_IRQHandler+0x430>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d004      	beq.n	800240e <HAL_DMA_IRQHandler+0x2ee>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a52      	ldr	r2, [pc, #328]	; (8002554 <HAL_DMA_IRQHandler+0x434>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d10a      	bne.n	8002424 <HAL_DMA_IRQHandler+0x304>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	695b      	ldr	r3, [r3, #20]
 8002414:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002418:	2b00      	cmp	r3, #0
 800241a:	bf14      	ite	ne
 800241c:	2301      	movne	r3, #1
 800241e:	2300      	moveq	r3, #0
 8002420:	b2db      	uxtb	r3, r3
 8002422:	e003      	b.n	800242c <HAL_DMA_IRQHandler+0x30c>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2300      	movs	r3, #0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d00d      	beq.n	800244c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002434:	f003 031f 	and.w	r3, r3, #31
 8002438:	2201      	movs	r2, #1
 800243a:	409a      	lsls	r2, r3
 800243c:	6a3b      	ldr	r3, [r7, #32]
 800243e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002444:	f043 0202 	orr.w	r2, r3, #2
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002450:	f003 031f 	and.w	r3, r3, #31
 8002454:	2204      	movs	r2, #4
 8002456:	409a      	lsls	r2, r3
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	4013      	ands	r3, r2
 800245c:	2b00      	cmp	r3, #0
 800245e:	f000 808f 	beq.w	8002580 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a2c      	ldr	r2, [pc, #176]	; (8002518 <HAL_DMA_IRQHandler+0x3f8>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d04a      	beq.n	8002502 <HAL_DMA_IRQHandler+0x3e2>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a2a      	ldr	r2, [pc, #168]	; (800251c <HAL_DMA_IRQHandler+0x3fc>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d045      	beq.n	8002502 <HAL_DMA_IRQHandler+0x3e2>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a29      	ldr	r2, [pc, #164]	; (8002520 <HAL_DMA_IRQHandler+0x400>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d040      	beq.n	8002502 <HAL_DMA_IRQHandler+0x3e2>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a27      	ldr	r2, [pc, #156]	; (8002524 <HAL_DMA_IRQHandler+0x404>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d03b      	beq.n	8002502 <HAL_DMA_IRQHandler+0x3e2>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a26      	ldr	r2, [pc, #152]	; (8002528 <HAL_DMA_IRQHandler+0x408>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d036      	beq.n	8002502 <HAL_DMA_IRQHandler+0x3e2>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a24      	ldr	r2, [pc, #144]	; (800252c <HAL_DMA_IRQHandler+0x40c>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d031      	beq.n	8002502 <HAL_DMA_IRQHandler+0x3e2>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a23      	ldr	r2, [pc, #140]	; (8002530 <HAL_DMA_IRQHandler+0x410>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d02c      	beq.n	8002502 <HAL_DMA_IRQHandler+0x3e2>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a21      	ldr	r2, [pc, #132]	; (8002534 <HAL_DMA_IRQHandler+0x414>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d027      	beq.n	8002502 <HAL_DMA_IRQHandler+0x3e2>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a20      	ldr	r2, [pc, #128]	; (8002538 <HAL_DMA_IRQHandler+0x418>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d022      	beq.n	8002502 <HAL_DMA_IRQHandler+0x3e2>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a1e      	ldr	r2, [pc, #120]	; (800253c <HAL_DMA_IRQHandler+0x41c>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d01d      	beq.n	8002502 <HAL_DMA_IRQHandler+0x3e2>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a1d      	ldr	r2, [pc, #116]	; (8002540 <HAL_DMA_IRQHandler+0x420>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d018      	beq.n	8002502 <HAL_DMA_IRQHandler+0x3e2>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a1b      	ldr	r2, [pc, #108]	; (8002544 <HAL_DMA_IRQHandler+0x424>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d013      	beq.n	8002502 <HAL_DMA_IRQHandler+0x3e2>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a1a      	ldr	r2, [pc, #104]	; (8002548 <HAL_DMA_IRQHandler+0x428>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d00e      	beq.n	8002502 <HAL_DMA_IRQHandler+0x3e2>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a18      	ldr	r2, [pc, #96]	; (800254c <HAL_DMA_IRQHandler+0x42c>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d009      	beq.n	8002502 <HAL_DMA_IRQHandler+0x3e2>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a17      	ldr	r2, [pc, #92]	; (8002550 <HAL_DMA_IRQHandler+0x430>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d004      	beq.n	8002502 <HAL_DMA_IRQHandler+0x3e2>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a15      	ldr	r2, [pc, #84]	; (8002554 <HAL_DMA_IRQHandler+0x434>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d12a      	bne.n	8002558 <HAL_DMA_IRQHandler+0x438>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0302 	and.w	r3, r3, #2
 800250c:	2b00      	cmp	r3, #0
 800250e:	bf14      	ite	ne
 8002510:	2301      	movne	r3, #1
 8002512:	2300      	moveq	r3, #0
 8002514:	b2db      	uxtb	r3, r3
 8002516:	e023      	b.n	8002560 <HAL_DMA_IRQHandler+0x440>
 8002518:	40020010 	.word	0x40020010
 800251c:	40020028 	.word	0x40020028
 8002520:	40020040 	.word	0x40020040
 8002524:	40020058 	.word	0x40020058
 8002528:	40020070 	.word	0x40020070
 800252c:	40020088 	.word	0x40020088
 8002530:	400200a0 	.word	0x400200a0
 8002534:	400200b8 	.word	0x400200b8
 8002538:	40020410 	.word	0x40020410
 800253c:	40020428 	.word	0x40020428
 8002540:	40020440 	.word	0x40020440
 8002544:	40020458 	.word	0x40020458
 8002548:	40020470 	.word	0x40020470
 800254c:	40020488 	.word	0x40020488
 8002550:	400204a0 	.word	0x400204a0
 8002554:	400204b8 	.word	0x400204b8
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2300      	movs	r3, #0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d00d      	beq.n	8002580 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002568:	f003 031f 	and.w	r3, r3, #31
 800256c:	2204      	movs	r2, #4
 800256e:	409a      	lsls	r2, r3
 8002570:	6a3b      	ldr	r3, [r7, #32]
 8002572:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002578:	f043 0204 	orr.w	r2, r3, #4
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002584:	f003 031f 	and.w	r3, r3, #31
 8002588:	2210      	movs	r2, #16
 800258a:	409a      	lsls	r2, r3
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	4013      	ands	r3, r2
 8002590:	2b00      	cmp	r3, #0
 8002592:	f000 80a6 	beq.w	80026e2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a85      	ldr	r2, [pc, #532]	; (80027b0 <HAL_DMA_IRQHandler+0x690>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d04a      	beq.n	8002636 <HAL_DMA_IRQHandler+0x516>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a83      	ldr	r2, [pc, #524]	; (80027b4 <HAL_DMA_IRQHandler+0x694>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d045      	beq.n	8002636 <HAL_DMA_IRQHandler+0x516>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a82      	ldr	r2, [pc, #520]	; (80027b8 <HAL_DMA_IRQHandler+0x698>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d040      	beq.n	8002636 <HAL_DMA_IRQHandler+0x516>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a80      	ldr	r2, [pc, #512]	; (80027bc <HAL_DMA_IRQHandler+0x69c>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d03b      	beq.n	8002636 <HAL_DMA_IRQHandler+0x516>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a7f      	ldr	r2, [pc, #508]	; (80027c0 <HAL_DMA_IRQHandler+0x6a0>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d036      	beq.n	8002636 <HAL_DMA_IRQHandler+0x516>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a7d      	ldr	r2, [pc, #500]	; (80027c4 <HAL_DMA_IRQHandler+0x6a4>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d031      	beq.n	8002636 <HAL_DMA_IRQHandler+0x516>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a7c      	ldr	r2, [pc, #496]	; (80027c8 <HAL_DMA_IRQHandler+0x6a8>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d02c      	beq.n	8002636 <HAL_DMA_IRQHandler+0x516>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a7a      	ldr	r2, [pc, #488]	; (80027cc <HAL_DMA_IRQHandler+0x6ac>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d027      	beq.n	8002636 <HAL_DMA_IRQHandler+0x516>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a79      	ldr	r2, [pc, #484]	; (80027d0 <HAL_DMA_IRQHandler+0x6b0>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d022      	beq.n	8002636 <HAL_DMA_IRQHandler+0x516>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a77      	ldr	r2, [pc, #476]	; (80027d4 <HAL_DMA_IRQHandler+0x6b4>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d01d      	beq.n	8002636 <HAL_DMA_IRQHandler+0x516>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a76      	ldr	r2, [pc, #472]	; (80027d8 <HAL_DMA_IRQHandler+0x6b8>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d018      	beq.n	8002636 <HAL_DMA_IRQHandler+0x516>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a74      	ldr	r2, [pc, #464]	; (80027dc <HAL_DMA_IRQHandler+0x6bc>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d013      	beq.n	8002636 <HAL_DMA_IRQHandler+0x516>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a73      	ldr	r2, [pc, #460]	; (80027e0 <HAL_DMA_IRQHandler+0x6c0>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d00e      	beq.n	8002636 <HAL_DMA_IRQHandler+0x516>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a71      	ldr	r2, [pc, #452]	; (80027e4 <HAL_DMA_IRQHandler+0x6c4>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d009      	beq.n	8002636 <HAL_DMA_IRQHandler+0x516>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a70      	ldr	r2, [pc, #448]	; (80027e8 <HAL_DMA_IRQHandler+0x6c8>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d004      	beq.n	8002636 <HAL_DMA_IRQHandler+0x516>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a6e      	ldr	r2, [pc, #440]	; (80027ec <HAL_DMA_IRQHandler+0x6cc>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d10a      	bne.n	800264c <HAL_DMA_IRQHandler+0x52c>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0308 	and.w	r3, r3, #8
 8002640:	2b00      	cmp	r3, #0
 8002642:	bf14      	ite	ne
 8002644:	2301      	movne	r3, #1
 8002646:	2300      	moveq	r3, #0
 8002648:	b2db      	uxtb	r3, r3
 800264a:	e009      	b.n	8002660 <HAL_DMA_IRQHandler+0x540>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0304 	and.w	r3, r3, #4
 8002656:	2b00      	cmp	r3, #0
 8002658:	bf14      	ite	ne
 800265a:	2301      	movne	r3, #1
 800265c:	2300      	moveq	r3, #0
 800265e:	b2db      	uxtb	r3, r3
 8002660:	2b00      	cmp	r3, #0
 8002662:	d03e      	beq.n	80026e2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002668:	f003 031f 	and.w	r3, r3, #31
 800266c:	2210      	movs	r2, #16
 800266e:	409a      	lsls	r2, r3
 8002670:	6a3b      	ldr	r3, [r7, #32]
 8002672:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d018      	beq.n	80026b4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d108      	bne.n	80026a2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002694:	2b00      	cmp	r3, #0
 8002696:	d024      	beq.n	80026e2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	4798      	blx	r3
 80026a0:	e01f      	b.n	80026e2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d01b      	beq.n	80026e2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	4798      	blx	r3
 80026b2:	e016      	b.n	80026e2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d107      	bne.n	80026d2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f022 0208 	bic.w	r2, r2, #8
 80026d0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d003      	beq.n	80026e2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026e6:	f003 031f 	and.w	r3, r3, #31
 80026ea:	2220      	movs	r2, #32
 80026ec:	409a      	lsls	r2, r3
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	4013      	ands	r3, r2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	f000 8110 	beq.w	8002918 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a2c      	ldr	r2, [pc, #176]	; (80027b0 <HAL_DMA_IRQHandler+0x690>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d04a      	beq.n	8002798 <HAL_DMA_IRQHandler+0x678>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a2b      	ldr	r2, [pc, #172]	; (80027b4 <HAL_DMA_IRQHandler+0x694>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d045      	beq.n	8002798 <HAL_DMA_IRQHandler+0x678>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a29      	ldr	r2, [pc, #164]	; (80027b8 <HAL_DMA_IRQHandler+0x698>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d040      	beq.n	8002798 <HAL_DMA_IRQHandler+0x678>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a28      	ldr	r2, [pc, #160]	; (80027bc <HAL_DMA_IRQHandler+0x69c>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d03b      	beq.n	8002798 <HAL_DMA_IRQHandler+0x678>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a26      	ldr	r2, [pc, #152]	; (80027c0 <HAL_DMA_IRQHandler+0x6a0>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d036      	beq.n	8002798 <HAL_DMA_IRQHandler+0x678>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a25      	ldr	r2, [pc, #148]	; (80027c4 <HAL_DMA_IRQHandler+0x6a4>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d031      	beq.n	8002798 <HAL_DMA_IRQHandler+0x678>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a23      	ldr	r2, [pc, #140]	; (80027c8 <HAL_DMA_IRQHandler+0x6a8>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d02c      	beq.n	8002798 <HAL_DMA_IRQHandler+0x678>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a22      	ldr	r2, [pc, #136]	; (80027cc <HAL_DMA_IRQHandler+0x6ac>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d027      	beq.n	8002798 <HAL_DMA_IRQHandler+0x678>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a20      	ldr	r2, [pc, #128]	; (80027d0 <HAL_DMA_IRQHandler+0x6b0>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d022      	beq.n	8002798 <HAL_DMA_IRQHandler+0x678>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a1f      	ldr	r2, [pc, #124]	; (80027d4 <HAL_DMA_IRQHandler+0x6b4>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d01d      	beq.n	8002798 <HAL_DMA_IRQHandler+0x678>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a1d      	ldr	r2, [pc, #116]	; (80027d8 <HAL_DMA_IRQHandler+0x6b8>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d018      	beq.n	8002798 <HAL_DMA_IRQHandler+0x678>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a1c      	ldr	r2, [pc, #112]	; (80027dc <HAL_DMA_IRQHandler+0x6bc>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d013      	beq.n	8002798 <HAL_DMA_IRQHandler+0x678>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a1a      	ldr	r2, [pc, #104]	; (80027e0 <HAL_DMA_IRQHandler+0x6c0>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d00e      	beq.n	8002798 <HAL_DMA_IRQHandler+0x678>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a19      	ldr	r2, [pc, #100]	; (80027e4 <HAL_DMA_IRQHandler+0x6c4>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d009      	beq.n	8002798 <HAL_DMA_IRQHandler+0x678>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a17      	ldr	r2, [pc, #92]	; (80027e8 <HAL_DMA_IRQHandler+0x6c8>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d004      	beq.n	8002798 <HAL_DMA_IRQHandler+0x678>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a16      	ldr	r2, [pc, #88]	; (80027ec <HAL_DMA_IRQHandler+0x6cc>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d12b      	bne.n	80027f0 <HAL_DMA_IRQHandler+0x6d0>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0310 	and.w	r3, r3, #16
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	bf14      	ite	ne
 80027a6:	2301      	movne	r3, #1
 80027a8:	2300      	moveq	r3, #0
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	e02a      	b.n	8002804 <HAL_DMA_IRQHandler+0x6e4>
 80027ae:	bf00      	nop
 80027b0:	40020010 	.word	0x40020010
 80027b4:	40020028 	.word	0x40020028
 80027b8:	40020040 	.word	0x40020040
 80027bc:	40020058 	.word	0x40020058
 80027c0:	40020070 	.word	0x40020070
 80027c4:	40020088 	.word	0x40020088
 80027c8:	400200a0 	.word	0x400200a0
 80027cc:	400200b8 	.word	0x400200b8
 80027d0:	40020410 	.word	0x40020410
 80027d4:	40020428 	.word	0x40020428
 80027d8:	40020440 	.word	0x40020440
 80027dc:	40020458 	.word	0x40020458
 80027e0:	40020470 	.word	0x40020470
 80027e4:	40020488 	.word	0x40020488
 80027e8:	400204a0 	.word	0x400204a0
 80027ec:	400204b8 	.word	0x400204b8
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	bf14      	ite	ne
 80027fe:	2301      	movne	r3, #1
 8002800:	2300      	moveq	r3, #0
 8002802:	b2db      	uxtb	r3, r3
 8002804:	2b00      	cmp	r3, #0
 8002806:	f000 8087 	beq.w	8002918 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800280e:	f003 031f 	and.w	r3, r3, #31
 8002812:	2220      	movs	r2, #32
 8002814:	409a      	lsls	r2, r3
 8002816:	6a3b      	ldr	r3, [r7, #32]
 8002818:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b04      	cmp	r3, #4
 8002824:	d139      	bne.n	800289a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f022 0216 	bic.w	r2, r2, #22
 8002834:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	695a      	ldr	r2, [r3, #20]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002844:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284a:	2b00      	cmp	r3, #0
 800284c:	d103      	bne.n	8002856 <HAL_DMA_IRQHandler+0x736>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002852:	2b00      	cmp	r3, #0
 8002854:	d007      	beq.n	8002866 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f022 0208 	bic.w	r2, r2, #8
 8002864:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800286a:	f003 031f 	and.w	r3, r3, #31
 800286e:	223f      	movs	r2, #63	; 0x3f
 8002870:	409a      	lsls	r2, r3
 8002872:	6a3b      	ldr	r3, [r7, #32]
 8002874:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2201      	movs	r2, #1
 8002882:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800288a:	2b00      	cmp	r3, #0
 800288c:	f000 834a 	beq.w	8002f24 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	4798      	blx	r3
          }
          return;
 8002898:	e344      	b.n	8002f24 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d018      	beq.n	80028da <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d108      	bne.n	80028c8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d02c      	beq.n	8002918 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	4798      	blx	r3
 80028c6:	e027      	b.n	8002918 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d023      	beq.n	8002918 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	4798      	blx	r3
 80028d8:	e01e      	b.n	8002918 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d10f      	bne.n	8002908 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f022 0210 	bic.w	r2, r2, #16
 80028f6:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800290c:	2b00      	cmp	r3, #0
 800290e:	d003      	beq.n	8002918 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800291c:	2b00      	cmp	r3, #0
 800291e:	f000 8306 	beq.w	8002f2e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	2b00      	cmp	r3, #0
 800292c:	f000 8088 	beq.w	8002a40 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2204      	movs	r2, #4
 8002934:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a7a      	ldr	r2, [pc, #488]	; (8002b28 <HAL_DMA_IRQHandler+0xa08>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d04a      	beq.n	80029d8 <HAL_DMA_IRQHandler+0x8b8>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a79      	ldr	r2, [pc, #484]	; (8002b2c <HAL_DMA_IRQHandler+0xa0c>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d045      	beq.n	80029d8 <HAL_DMA_IRQHandler+0x8b8>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a77      	ldr	r2, [pc, #476]	; (8002b30 <HAL_DMA_IRQHandler+0xa10>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d040      	beq.n	80029d8 <HAL_DMA_IRQHandler+0x8b8>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a76      	ldr	r2, [pc, #472]	; (8002b34 <HAL_DMA_IRQHandler+0xa14>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d03b      	beq.n	80029d8 <HAL_DMA_IRQHandler+0x8b8>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a74      	ldr	r2, [pc, #464]	; (8002b38 <HAL_DMA_IRQHandler+0xa18>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d036      	beq.n	80029d8 <HAL_DMA_IRQHandler+0x8b8>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a73      	ldr	r2, [pc, #460]	; (8002b3c <HAL_DMA_IRQHandler+0xa1c>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d031      	beq.n	80029d8 <HAL_DMA_IRQHandler+0x8b8>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a71      	ldr	r2, [pc, #452]	; (8002b40 <HAL_DMA_IRQHandler+0xa20>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d02c      	beq.n	80029d8 <HAL_DMA_IRQHandler+0x8b8>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a70      	ldr	r2, [pc, #448]	; (8002b44 <HAL_DMA_IRQHandler+0xa24>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d027      	beq.n	80029d8 <HAL_DMA_IRQHandler+0x8b8>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a6e      	ldr	r2, [pc, #440]	; (8002b48 <HAL_DMA_IRQHandler+0xa28>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d022      	beq.n	80029d8 <HAL_DMA_IRQHandler+0x8b8>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a6d      	ldr	r2, [pc, #436]	; (8002b4c <HAL_DMA_IRQHandler+0xa2c>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d01d      	beq.n	80029d8 <HAL_DMA_IRQHandler+0x8b8>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a6b      	ldr	r2, [pc, #428]	; (8002b50 <HAL_DMA_IRQHandler+0xa30>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d018      	beq.n	80029d8 <HAL_DMA_IRQHandler+0x8b8>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a6a      	ldr	r2, [pc, #424]	; (8002b54 <HAL_DMA_IRQHandler+0xa34>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d013      	beq.n	80029d8 <HAL_DMA_IRQHandler+0x8b8>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a68      	ldr	r2, [pc, #416]	; (8002b58 <HAL_DMA_IRQHandler+0xa38>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d00e      	beq.n	80029d8 <HAL_DMA_IRQHandler+0x8b8>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a67      	ldr	r2, [pc, #412]	; (8002b5c <HAL_DMA_IRQHandler+0xa3c>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d009      	beq.n	80029d8 <HAL_DMA_IRQHandler+0x8b8>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a65      	ldr	r2, [pc, #404]	; (8002b60 <HAL_DMA_IRQHandler+0xa40>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d004      	beq.n	80029d8 <HAL_DMA_IRQHandler+0x8b8>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a64      	ldr	r2, [pc, #400]	; (8002b64 <HAL_DMA_IRQHandler+0xa44>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d108      	bne.n	80029ea <HAL_DMA_IRQHandler+0x8ca>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f022 0201 	bic.w	r2, r2, #1
 80029e6:	601a      	str	r2, [r3, #0]
 80029e8:	e007      	b.n	80029fa <HAL_DMA_IRQHandler+0x8da>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f022 0201 	bic.w	r2, r2, #1
 80029f8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	3301      	adds	r3, #1
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d307      	bcc.n	8002a16 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0301 	and.w	r3, r3, #1
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d1f2      	bne.n	80029fa <HAL_DMA_IRQHandler+0x8da>
 8002a14:	e000      	b.n	8002a18 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8002a16:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d004      	beq.n	8002a38 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2203      	movs	r2, #3
 8002a32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8002a36:	e003      	b.n	8002a40 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	f000 8272 	beq.w	8002f2e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	4798      	blx	r3
 8002a52:	e26c      	b.n	8002f2e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a43      	ldr	r2, [pc, #268]	; (8002b68 <HAL_DMA_IRQHandler+0xa48>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d022      	beq.n	8002aa4 <HAL_DMA_IRQHandler+0x984>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a42      	ldr	r2, [pc, #264]	; (8002b6c <HAL_DMA_IRQHandler+0xa4c>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d01d      	beq.n	8002aa4 <HAL_DMA_IRQHandler+0x984>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a40      	ldr	r2, [pc, #256]	; (8002b70 <HAL_DMA_IRQHandler+0xa50>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d018      	beq.n	8002aa4 <HAL_DMA_IRQHandler+0x984>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a3f      	ldr	r2, [pc, #252]	; (8002b74 <HAL_DMA_IRQHandler+0xa54>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d013      	beq.n	8002aa4 <HAL_DMA_IRQHandler+0x984>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a3d      	ldr	r2, [pc, #244]	; (8002b78 <HAL_DMA_IRQHandler+0xa58>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d00e      	beq.n	8002aa4 <HAL_DMA_IRQHandler+0x984>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a3c      	ldr	r2, [pc, #240]	; (8002b7c <HAL_DMA_IRQHandler+0xa5c>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d009      	beq.n	8002aa4 <HAL_DMA_IRQHandler+0x984>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a3a      	ldr	r2, [pc, #232]	; (8002b80 <HAL_DMA_IRQHandler+0xa60>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d004      	beq.n	8002aa4 <HAL_DMA_IRQHandler+0x984>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a39      	ldr	r2, [pc, #228]	; (8002b84 <HAL_DMA_IRQHandler+0xa64>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d101      	bne.n	8002aa8 <HAL_DMA_IRQHandler+0x988>
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e000      	b.n	8002aaa <HAL_DMA_IRQHandler+0x98a>
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	f000 823f 	beq.w	8002f2e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002abc:	f003 031f 	and.w	r3, r3, #31
 8002ac0:	2204      	movs	r2, #4
 8002ac2:	409a      	lsls	r2, r3
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f000 80cd 	beq.w	8002c68 <HAL_DMA_IRQHandler+0xb48>
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	f003 0304 	and.w	r3, r3, #4
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	f000 80c7 	beq.w	8002c68 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ade:	f003 031f 	and.w	r3, r3, #31
 8002ae2:	2204      	movs	r2, #4
 8002ae4:	409a      	lsls	r2, r3
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d049      	beq.n	8002b88 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d109      	bne.n	8002b12 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	f000 8210 	beq.w	8002f28 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002b10:	e20a      	b.n	8002f28 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	f000 8206 	beq.w	8002f28 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002b24:	e200      	b.n	8002f28 <HAL_DMA_IRQHandler+0xe08>
 8002b26:	bf00      	nop
 8002b28:	40020010 	.word	0x40020010
 8002b2c:	40020028 	.word	0x40020028
 8002b30:	40020040 	.word	0x40020040
 8002b34:	40020058 	.word	0x40020058
 8002b38:	40020070 	.word	0x40020070
 8002b3c:	40020088 	.word	0x40020088
 8002b40:	400200a0 	.word	0x400200a0
 8002b44:	400200b8 	.word	0x400200b8
 8002b48:	40020410 	.word	0x40020410
 8002b4c:	40020428 	.word	0x40020428
 8002b50:	40020440 	.word	0x40020440
 8002b54:	40020458 	.word	0x40020458
 8002b58:	40020470 	.word	0x40020470
 8002b5c:	40020488 	.word	0x40020488
 8002b60:	400204a0 	.word	0x400204a0
 8002b64:	400204b8 	.word	0x400204b8
 8002b68:	58025408 	.word	0x58025408
 8002b6c:	5802541c 	.word	0x5802541c
 8002b70:	58025430 	.word	0x58025430
 8002b74:	58025444 	.word	0x58025444
 8002b78:	58025458 	.word	0x58025458
 8002b7c:	5802546c 	.word	0x5802546c
 8002b80:	58025480 	.word	0x58025480
 8002b84:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	f003 0320 	and.w	r3, r3, #32
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d160      	bne.n	8002c54 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a8c      	ldr	r2, [pc, #560]	; (8002dc8 <HAL_DMA_IRQHandler+0xca8>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d04a      	beq.n	8002c32 <HAL_DMA_IRQHandler+0xb12>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a8a      	ldr	r2, [pc, #552]	; (8002dcc <HAL_DMA_IRQHandler+0xcac>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d045      	beq.n	8002c32 <HAL_DMA_IRQHandler+0xb12>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a89      	ldr	r2, [pc, #548]	; (8002dd0 <HAL_DMA_IRQHandler+0xcb0>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d040      	beq.n	8002c32 <HAL_DMA_IRQHandler+0xb12>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a87      	ldr	r2, [pc, #540]	; (8002dd4 <HAL_DMA_IRQHandler+0xcb4>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d03b      	beq.n	8002c32 <HAL_DMA_IRQHandler+0xb12>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a86      	ldr	r2, [pc, #536]	; (8002dd8 <HAL_DMA_IRQHandler+0xcb8>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d036      	beq.n	8002c32 <HAL_DMA_IRQHandler+0xb12>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a84      	ldr	r2, [pc, #528]	; (8002ddc <HAL_DMA_IRQHandler+0xcbc>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d031      	beq.n	8002c32 <HAL_DMA_IRQHandler+0xb12>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a83      	ldr	r2, [pc, #524]	; (8002de0 <HAL_DMA_IRQHandler+0xcc0>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d02c      	beq.n	8002c32 <HAL_DMA_IRQHandler+0xb12>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a81      	ldr	r2, [pc, #516]	; (8002de4 <HAL_DMA_IRQHandler+0xcc4>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d027      	beq.n	8002c32 <HAL_DMA_IRQHandler+0xb12>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a80      	ldr	r2, [pc, #512]	; (8002de8 <HAL_DMA_IRQHandler+0xcc8>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d022      	beq.n	8002c32 <HAL_DMA_IRQHandler+0xb12>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a7e      	ldr	r2, [pc, #504]	; (8002dec <HAL_DMA_IRQHandler+0xccc>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d01d      	beq.n	8002c32 <HAL_DMA_IRQHandler+0xb12>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a7d      	ldr	r2, [pc, #500]	; (8002df0 <HAL_DMA_IRQHandler+0xcd0>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d018      	beq.n	8002c32 <HAL_DMA_IRQHandler+0xb12>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a7b      	ldr	r2, [pc, #492]	; (8002df4 <HAL_DMA_IRQHandler+0xcd4>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d013      	beq.n	8002c32 <HAL_DMA_IRQHandler+0xb12>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a7a      	ldr	r2, [pc, #488]	; (8002df8 <HAL_DMA_IRQHandler+0xcd8>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d00e      	beq.n	8002c32 <HAL_DMA_IRQHandler+0xb12>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a78      	ldr	r2, [pc, #480]	; (8002dfc <HAL_DMA_IRQHandler+0xcdc>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d009      	beq.n	8002c32 <HAL_DMA_IRQHandler+0xb12>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a77      	ldr	r2, [pc, #476]	; (8002e00 <HAL_DMA_IRQHandler+0xce0>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d004      	beq.n	8002c32 <HAL_DMA_IRQHandler+0xb12>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a75      	ldr	r2, [pc, #468]	; (8002e04 <HAL_DMA_IRQHandler+0xce4>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d108      	bne.n	8002c44 <HAL_DMA_IRQHandler+0xb24>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f022 0208 	bic.w	r2, r2, #8
 8002c40:	601a      	str	r2, [r3, #0]
 8002c42:	e007      	b.n	8002c54 <HAL_DMA_IRQHandler+0xb34>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f022 0204 	bic.w	r2, r2, #4
 8002c52:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f000 8165 	beq.w	8002f28 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002c66:	e15f      	b.n	8002f28 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c6c:	f003 031f 	and.w	r3, r3, #31
 8002c70:	2202      	movs	r2, #2
 8002c72:	409a      	lsls	r2, r3
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	4013      	ands	r3, r2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	f000 80c5 	beq.w	8002e08 <HAL_DMA_IRQHandler+0xce8>
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	f003 0302 	and.w	r3, r3, #2
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	f000 80bf 	beq.w	8002e08 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c8e:	f003 031f 	and.w	r3, r3, #31
 8002c92:	2202      	movs	r2, #2
 8002c94:	409a      	lsls	r2, r3
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d018      	beq.n	8002cd6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d109      	bne.n	8002cc2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	f000 813a 	beq.w	8002f2c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002cc0:	e134      	b.n	8002f2c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	f000 8130 	beq.w	8002f2c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002cd4:	e12a      	b.n	8002f2c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	f003 0320 	and.w	r3, r3, #32
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d168      	bne.n	8002db2 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a38      	ldr	r2, [pc, #224]	; (8002dc8 <HAL_DMA_IRQHandler+0xca8>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d04a      	beq.n	8002d80 <HAL_DMA_IRQHandler+0xc60>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a37      	ldr	r2, [pc, #220]	; (8002dcc <HAL_DMA_IRQHandler+0xcac>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d045      	beq.n	8002d80 <HAL_DMA_IRQHandler+0xc60>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a35      	ldr	r2, [pc, #212]	; (8002dd0 <HAL_DMA_IRQHandler+0xcb0>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d040      	beq.n	8002d80 <HAL_DMA_IRQHandler+0xc60>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a34      	ldr	r2, [pc, #208]	; (8002dd4 <HAL_DMA_IRQHandler+0xcb4>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d03b      	beq.n	8002d80 <HAL_DMA_IRQHandler+0xc60>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a32      	ldr	r2, [pc, #200]	; (8002dd8 <HAL_DMA_IRQHandler+0xcb8>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d036      	beq.n	8002d80 <HAL_DMA_IRQHandler+0xc60>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a31      	ldr	r2, [pc, #196]	; (8002ddc <HAL_DMA_IRQHandler+0xcbc>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d031      	beq.n	8002d80 <HAL_DMA_IRQHandler+0xc60>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a2f      	ldr	r2, [pc, #188]	; (8002de0 <HAL_DMA_IRQHandler+0xcc0>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d02c      	beq.n	8002d80 <HAL_DMA_IRQHandler+0xc60>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a2e      	ldr	r2, [pc, #184]	; (8002de4 <HAL_DMA_IRQHandler+0xcc4>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d027      	beq.n	8002d80 <HAL_DMA_IRQHandler+0xc60>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a2c      	ldr	r2, [pc, #176]	; (8002de8 <HAL_DMA_IRQHandler+0xcc8>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d022      	beq.n	8002d80 <HAL_DMA_IRQHandler+0xc60>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a2b      	ldr	r2, [pc, #172]	; (8002dec <HAL_DMA_IRQHandler+0xccc>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d01d      	beq.n	8002d80 <HAL_DMA_IRQHandler+0xc60>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a29      	ldr	r2, [pc, #164]	; (8002df0 <HAL_DMA_IRQHandler+0xcd0>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d018      	beq.n	8002d80 <HAL_DMA_IRQHandler+0xc60>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a28      	ldr	r2, [pc, #160]	; (8002df4 <HAL_DMA_IRQHandler+0xcd4>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d013      	beq.n	8002d80 <HAL_DMA_IRQHandler+0xc60>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a26      	ldr	r2, [pc, #152]	; (8002df8 <HAL_DMA_IRQHandler+0xcd8>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d00e      	beq.n	8002d80 <HAL_DMA_IRQHandler+0xc60>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a25      	ldr	r2, [pc, #148]	; (8002dfc <HAL_DMA_IRQHandler+0xcdc>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d009      	beq.n	8002d80 <HAL_DMA_IRQHandler+0xc60>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a23      	ldr	r2, [pc, #140]	; (8002e00 <HAL_DMA_IRQHandler+0xce0>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d004      	beq.n	8002d80 <HAL_DMA_IRQHandler+0xc60>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a22      	ldr	r2, [pc, #136]	; (8002e04 <HAL_DMA_IRQHandler+0xce4>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d108      	bne.n	8002d92 <HAL_DMA_IRQHandler+0xc72>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f022 0214 	bic.w	r2, r2, #20
 8002d8e:	601a      	str	r2, [r3, #0]
 8002d90:	e007      	b.n	8002da2 <HAL_DMA_IRQHandler+0xc82>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f022 020a 	bic.w	r2, r2, #10
 8002da0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2201      	movs	r2, #1
 8002dae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	f000 80b8 	beq.w	8002f2c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002dc4:	e0b2      	b.n	8002f2c <HAL_DMA_IRQHandler+0xe0c>
 8002dc6:	bf00      	nop
 8002dc8:	40020010 	.word	0x40020010
 8002dcc:	40020028 	.word	0x40020028
 8002dd0:	40020040 	.word	0x40020040
 8002dd4:	40020058 	.word	0x40020058
 8002dd8:	40020070 	.word	0x40020070
 8002ddc:	40020088 	.word	0x40020088
 8002de0:	400200a0 	.word	0x400200a0
 8002de4:	400200b8 	.word	0x400200b8
 8002de8:	40020410 	.word	0x40020410
 8002dec:	40020428 	.word	0x40020428
 8002df0:	40020440 	.word	0x40020440
 8002df4:	40020458 	.word	0x40020458
 8002df8:	40020470 	.word	0x40020470
 8002dfc:	40020488 	.word	0x40020488
 8002e00:	400204a0 	.word	0x400204a0
 8002e04:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e0c:	f003 031f 	and.w	r3, r3, #31
 8002e10:	2208      	movs	r2, #8
 8002e12:	409a      	lsls	r2, r3
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	4013      	ands	r3, r2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	f000 8088 	beq.w	8002f2e <HAL_DMA_IRQHandler+0xe0e>
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	f003 0308 	and.w	r3, r3, #8
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f000 8082 	beq.w	8002f2e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a41      	ldr	r2, [pc, #260]	; (8002f34 <HAL_DMA_IRQHandler+0xe14>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d04a      	beq.n	8002eca <HAL_DMA_IRQHandler+0xdaa>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a3f      	ldr	r2, [pc, #252]	; (8002f38 <HAL_DMA_IRQHandler+0xe18>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d045      	beq.n	8002eca <HAL_DMA_IRQHandler+0xdaa>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a3e      	ldr	r2, [pc, #248]	; (8002f3c <HAL_DMA_IRQHandler+0xe1c>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d040      	beq.n	8002eca <HAL_DMA_IRQHandler+0xdaa>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a3c      	ldr	r2, [pc, #240]	; (8002f40 <HAL_DMA_IRQHandler+0xe20>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d03b      	beq.n	8002eca <HAL_DMA_IRQHandler+0xdaa>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a3b      	ldr	r2, [pc, #236]	; (8002f44 <HAL_DMA_IRQHandler+0xe24>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d036      	beq.n	8002eca <HAL_DMA_IRQHandler+0xdaa>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a39      	ldr	r2, [pc, #228]	; (8002f48 <HAL_DMA_IRQHandler+0xe28>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d031      	beq.n	8002eca <HAL_DMA_IRQHandler+0xdaa>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a38      	ldr	r2, [pc, #224]	; (8002f4c <HAL_DMA_IRQHandler+0xe2c>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d02c      	beq.n	8002eca <HAL_DMA_IRQHandler+0xdaa>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a36      	ldr	r2, [pc, #216]	; (8002f50 <HAL_DMA_IRQHandler+0xe30>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d027      	beq.n	8002eca <HAL_DMA_IRQHandler+0xdaa>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a35      	ldr	r2, [pc, #212]	; (8002f54 <HAL_DMA_IRQHandler+0xe34>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d022      	beq.n	8002eca <HAL_DMA_IRQHandler+0xdaa>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a33      	ldr	r2, [pc, #204]	; (8002f58 <HAL_DMA_IRQHandler+0xe38>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d01d      	beq.n	8002eca <HAL_DMA_IRQHandler+0xdaa>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a32      	ldr	r2, [pc, #200]	; (8002f5c <HAL_DMA_IRQHandler+0xe3c>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d018      	beq.n	8002eca <HAL_DMA_IRQHandler+0xdaa>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a30      	ldr	r2, [pc, #192]	; (8002f60 <HAL_DMA_IRQHandler+0xe40>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d013      	beq.n	8002eca <HAL_DMA_IRQHandler+0xdaa>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a2f      	ldr	r2, [pc, #188]	; (8002f64 <HAL_DMA_IRQHandler+0xe44>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d00e      	beq.n	8002eca <HAL_DMA_IRQHandler+0xdaa>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a2d      	ldr	r2, [pc, #180]	; (8002f68 <HAL_DMA_IRQHandler+0xe48>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d009      	beq.n	8002eca <HAL_DMA_IRQHandler+0xdaa>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a2c      	ldr	r2, [pc, #176]	; (8002f6c <HAL_DMA_IRQHandler+0xe4c>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d004      	beq.n	8002eca <HAL_DMA_IRQHandler+0xdaa>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a2a      	ldr	r2, [pc, #168]	; (8002f70 <HAL_DMA_IRQHandler+0xe50>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d108      	bne.n	8002edc <HAL_DMA_IRQHandler+0xdbc>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f022 021c 	bic.w	r2, r2, #28
 8002ed8:	601a      	str	r2, [r3, #0]
 8002eda:	e007      	b.n	8002eec <HAL_DMA_IRQHandler+0xdcc>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f022 020e 	bic.w	r2, r2, #14
 8002eea:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ef0:	f003 031f 	and.w	r3, r3, #31
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	409a      	lsls	r2, r3
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d009      	beq.n	8002f2e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	4798      	blx	r3
 8002f22:	e004      	b.n	8002f2e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8002f24:	bf00      	nop
 8002f26:	e002      	b.n	8002f2e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f28:	bf00      	nop
 8002f2a:	e000      	b.n	8002f2e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f2c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002f2e:	3728      	adds	r7, #40	; 0x28
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	40020010 	.word	0x40020010
 8002f38:	40020028 	.word	0x40020028
 8002f3c:	40020040 	.word	0x40020040
 8002f40:	40020058 	.word	0x40020058
 8002f44:	40020070 	.word	0x40020070
 8002f48:	40020088 	.word	0x40020088
 8002f4c:	400200a0 	.word	0x400200a0
 8002f50:	400200b8 	.word	0x400200b8
 8002f54:	40020410 	.word	0x40020410
 8002f58:	40020428 	.word	0x40020428
 8002f5c:	40020440 	.word	0x40020440
 8002f60:	40020458 	.word	0x40020458
 8002f64:	40020470 	.word	0x40020470
 8002f68:	40020488 	.word	0x40020488
 8002f6c:	400204a0 	.word	0x400204a0
 8002f70:	400204b8 	.word	0x400204b8

08002f74 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a42      	ldr	r2, [pc, #264]	; (800308c <DMA_CalcBaseAndBitshift+0x118>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d04a      	beq.n	800301c <DMA_CalcBaseAndBitshift+0xa8>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a41      	ldr	r2, [pc, #260]	; (8003090 <DMA_CalcBaseAndBitshift+0x11c>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d045      	beq.n	800301c <DMA_CalcBaseAndBitshift+0xa8>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a3f      	ldr	r2, [pc, #252]	; (8003094 <DMA_CalcBaseAndBitshift+0x120>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d040      	beq.n	800301c <DMA_CalcBaseAndBitshift+0xa8>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a3e      	ldr	r2, [pc, #248]	; (8003098 <DMA_CalcBaseAndBitshift+0x124>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d03b      	beq.n	800301c <DMA_CalcBaseAndBitshift+0xa8>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a3c      	ldr	r2, [pc, #240]	; (800309c <DMA_CalcBaseAndBitshift+0x128>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d036      	beq.n	800301c <DMA_CalcBaseAndBitshift+0xa8>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a3b      	ldr	r2, [pc, #236]	; (80030a0 <DMA_CalcBaseAndBitshift+0x12c>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d031      	beq.n	800301c <DMA_CalcBaseAndBitshift+0xa8>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a39      	ldr	r2, [pc, #228]	; (80030a4 <DMA_CalcBaseAndBitshift+0x130>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d02c      	beq.n	800301c <DMA_CalcBaseAndBitshift+0xa8>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a38      	ldr	r2, [pc, #224]	; (80030a8 <DMA_CalcBaseAndBitshift+0x134>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d027      	beq.n	800301c <DMA_CalcBaseAndBitshift+0xa8>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a36      	ldr	r2, [pc, #216]	; (80030ac <DMA_CalcBaseAndBitshift+0x138>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d022      	beq.n	800301c <DMA_CalcBaseAndBitshift+0xa8>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a35      	ldr	r2, [pc, #212]	; (80030b0 <DMA_CalcBaseAndBitshift+0x13c>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d01d      	beq.n	800301c <DMA_CalcBaseAndBitshift+0xa8>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a33      	ldr	r2, [pc, #204]	; (80030b4 <DMA_CalcBaseAndBitshift+0x140>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d018      	beq.n	800301c <DMA_CalcBaseAndBitshift+0xa8>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a32      	ldr	r2, [pc, #200]	; (80030b8 <DMA_CalcBaseAndBitshift+0x144>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d013      	beq.n	800301c <DMA_CalcBaseAndBitshift+0xa8>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a30      	ldr	r2, [pc, #192]	; (80030bc <DMA_CalcBaseAndBitshift+0x148>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d00e      	beq.n	800301c <DMA_CalcBaseAndBitshift+0xa8>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a2f      	ldr	r2, [pc, #188]	; (80030c0 <DMA_CalcBaseAndBitshift+0x14c>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d009      	beq.n	800301c <DMA_CalcBaseAndBitshift+0xa8>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a2d      	ldr	r2, [pc, #180]	; (80030c4 <DMA_CalcBaseAndBitshift+0x150>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d004      	beq.n	800301c <DMA_CalcBaseAndBitshift+0xa8>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a2c      	ldr	r2, [pc, #176]	; (80030c8 <DMA_CalcBaseAndBitshift+0x154>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d101      	bne.n	8003020 <DMA_CalcBaseAndBitshift+0xac>
 800301c:	2301      	movs	r3, #1
 800301e:	e000      	b.n	8003022 <DMA_CalcBaseAndBitshift+0xae>
 8003020:	2300      	movs	r3, #0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d024      	beq.n	8003070 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	b2db      	uxtb	r3, r3
 800302c:	3b10      	subs	r3, #16
 800302e:	4a27      	ldr	r2, [pc, #156]	; (80030cc <DMA_CalcBaseAndBitshift+0x158>)
 8003030:	fba2 2303 	umull	r2, r3, r2, r3
 8003034:	091b      	lsrs	r3, r3, #4
 8003036:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f003 0307 	and.w	r3, r3, #7
 800303e:	4a24      	ldr	r2, [pc, #144]	; (80030d0 <DMA_CalcBaseAndBitshift+0x15c>)
 8003040:	5cd3      	ldrb	r3, [r2, r3]
 8003042:	461a      	mov	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2b03      	cmp	r3, #3
 800304c:	d908      	bls.n	8003060 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	461a      	mov	r2, r3
 8003054:	4b1f      	ldr	r3, [pc, #124]	; (80030d4 <DMA_CalcBaseAndBitshift+0x160>)
 8003056:	4013      	ands	r3, r2
 8003058:	1d1a      	adds	r2, r3, #4
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	659a      	str	r2, [r3, #88]	; 0x58
 800305e:	e00d      	b.n	800307c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	461a      	mov	r2, r3
 8003066:	4b1b      	ldr	r3, [pc, #108]	; (80030d4 <DMA_CalcBaseAndBitshift+0x160>)
 8003068:	4013      	ands	r3, r2
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	6593      	str	r3, [r2, #88]	; 0x58
 800306e:	e005      	b.n	800307c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003080:	4618      	mov	r0, r3
 8003082:	3714      	adds	r7, #20
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr
 800308c:	40020010 	.word	0x40020010
 8003090:	40020028 	.word	0x40020028
 8003094:	40020040 	.word	0x40020040
 8003098:	40020058 	.word	0x40020058
 800309c:	40020070 	.word	0x40020070
 80030a0:	40020088 	.word	0x40020088
 80030a4:	400200a0 	.word	0x400200a0
 80030a8:	400200b8 	.word	0x400200b8
 80030ac:	40020410 	.word	0x40020410
 80030b0:	40020428 	.word	0x40020428
 80030b4:	40020440 	.word	0x40020440
 80030b8:	40020458 	.word	0x40020458
 80030bc:	40020470 	.word	0x40020470
 80030c0:	40020488 	.word	0x40020488
 80030c4:	400204a0 	.word	0x400204a0
 80030c8:	400204b8 	.word	0x400204b8
 80030cc:	aaaaaaab 	.word	0xaaaaaaab
 80030d0:	08013788 	.word	0x08013788
 80030d4:	fffffc00 	.word	0xfffffc00

080030d8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80030d8:	b480      	push	{r7}
 80030da:	b085      	sub	sp, #20
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030e0:	2300      	movs	r3, #0
 80030e2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d120      	bne.n	800312e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f0:	2b03      	cmp	r3, #3
 80030f2:	d858      	bhi.n	80031a6 <DMA_CheckFifoParam+0xce>
 80030f4:	a201      	add	r2, pc, #4	; (adr r2, 80030fc <DMA_CheckFifoParam+0x24>)
 80030f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030fa:	bf00      	nop
 80030fc:	0800310d 	.word	0x0800310d
 8003100:	0800311f 	.word	0x0800311f
 8003104:	0800310d 	.word	0x0800310d
 8003108:	080031a7 	.word	0x080031a7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003110:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d048      	beq.n	80031aa <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800311c:	e045      	b.n	80031aa <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003122:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003126:	d142      	bne.n	80031ae <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800312c:	e03f      	b.n	80031ae <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003136:	d123      	bne.n	8003180 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800313c:	2b03      	cmp	r3, #3
 800313e:	d838      	bhi.n	80031b2 <DMA_CheckFifoParam+0xda>
 8003140:	a201      	add	r2, pc, #4	; (adr r2, 8003148 <DMA_CheckFifoParam+0x70>)
 8003142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003146:	bf00      	nop
 8003148:	08003159 	.word	0x08003159
 800314c:	0800315f 	.word	0x0800315f
 8003150:	08003159 	.word	0x08003159
 8003154:	08003171 	.word	0x08003171
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	73fb      	strb	r3, [r7, #15]
        break;
 800315c:	e030      	b.n	80031c0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003162:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d025      	beq.n	80031b6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800316e:	e022      	b.n	80031b6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003174:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003178:	d11f      	bne.n	80031ba <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800317e:	e01c      	b.n	80031ba <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003184:	2b02      	cmp	r3, #2
 8003186:	d902      	bls.n	800318e <DMA_CheckFifoParam+0xb6>
 8003188:	2b03      	cmp	r3, #3
 800318a:	d003      	beq.n	8003194 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800318c:	e018      	b.n	80031c0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	73fb      	strb	r3, [r7, #15]
        break;
 8003192:	e015      	b.n	80031c0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003198:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d00e      	beq.n	80031be <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	73fb      	strb	r3, [r7, #15]
    break;
 80031a4:	e00b      	b.n	80031be <DMA_CheckFifoParam+0xe6>
        break;
 80031a6:	bf00      	nop
 80031a8:	e00a      	b.n	80031c0 <DMA_CheckFifoParam+0xe8>
        break;
 80031aa:	bf00      	nop
 80031ac:	e008      	b.n	80031c0 <DMA_CheckFifoParam+0xe8>
        break;
 80031ae:	bf00      	nop
 80031b0:	e006      	b.n	80031c0 <DMA_CheckFifoParam+0xe8>
        break;
 80031b2:	bf00      	nop
 80031b4:	e004      	b.n	80031c0 <DMA_CheckFifoParam+0xe8>
        break;
 80031b6:	bf00      	nop
 80031b8:	e002      	b.n	80031c0 <DMA_CheckFifoParam+0xe8>
        break;
 80031ba:	bf00      	nop
 80031bc:	e000      	b.n	80031c0 <DMA_CheckFifoParam+0xe8>
    break;
 80031be:	bf00      	nop
    }
  }

  return status;
 80031c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3714      	adds	r7, #20
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop

080031d0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a38      	ldr	r2, [pc, #224]	; (80032c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d022      	beq.n	800322e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a36      	ldr	r2, [pc, #216]	; (80032c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d01d      	beq.n	800322e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a35      	ldr	r2, [pc, #212]	; (80032cc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d018      	beq.n	800322e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a33      	ldr	r2, [pc, #204]	; (80032d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d013      	beq.n	800322e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a32      	ldr	r2, [pc, #200]	; (80032d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d00e      	beq.n	800322e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a30      	ldr	r2, [pc, #192]	; (80032d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d009      	beq.n	800322e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a2f      	ldr	r2, [pc, #188]	; (80032dc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d004      	beq.n	800322e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a2d      	ldr	r2, [pc, #180]	; (80032e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d101      	bne.n	8003232 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800322e:	2301      	movs	r3, #1
 8003230:	e000      	b.n	8003234 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003232:	2300      	movs	r3, #0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d01a      	beq.n	800326e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	b2db      	uxtb	r3, r3
 800323e:	3b08      	subs	r3, #8
 8003240:	4a28      	ldr	r2, [pc, #160]	; (80032e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003242:	fba2 2303 	umull	r2, r3, r2, r3
 8003246:	091b      	lsrs	r3, r3, #4
 8003248:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800324a:	68fa      	ldr	r2, [r7, #12]
 800324c:	4b26      	ldr	r3, [pc, #152]	; (80032e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800324e:	4413      	add	r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	461a      	mov	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a24      	ldr	r2, [pc, #144]	; (80032ec <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800325c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f003 031f 	and.w	r3, r3, #31
 8003264:	2201      	movs	r2, #1
 8003266:	409a      	lsls	r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800326c:	e024      	b.n	80032b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	b2db      	uxtb	r3, r3
 8003274:	3b10      	subs	r3, #16
 8003276:	4a1e      	ldr	r2, [pc, #120]	; (80032f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003278:	fba2 2303 	umull	r2, r3, r2, r3
 800327c:	091b      	lsrs	r3, r3, #4
 800327e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	4a1c      	ldr	r2, [pc, #112]	; (80032f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d806      	bhi.n	8003296 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	4a1b      	ldr	r2, [pc, #108]	; (80032f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d902      	bls.n	8003296 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	3308      	adds	r3, #8
 8003294:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003296:	68fa      	ldr	r2, [r7, #12]
 8003298:	4b18      	ldr	r3, [pc, #96]	; (80032fc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800329a:	4413      	add	r3, r2
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	461a      	mov	r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a16      	ldr	r2, [pc, #88]	; (8003300 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80032a8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f003 031f 	and.w	r3, r3, #31
 80032b0:	2201      	movs	r2, #1
 80032b2:	409a      	lsls	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80032b8:	bf00      	nop
 80032ba:	3714      	adds	r7, #20
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr
 80032c4:	58025408 	.word	0x58025408
 80032c8:	5802541c 	.word	0x5802541c
 80032cc:	58025430 	.word	0x58025430
 80032d0:	58025444 	.word	0x58025444
 80032d4:	58025458 	.word	0x58025458
 80032d8:	5802546c 	.word	0x5802546c
 80032dc:	58025480 	.word	0x58025480
 80032e0:	58025494 	.word	0x58025494
 80032e4:	cccccccd 	.word	0xcccccccd
 80032e8:	16009600 	.word	0x16009600
 80032ec:	58025880 	.word	0x58025880
 80032f0:	aaaaaaab 	.word	0xaaaaaaab
 80032f4:	400204b8 	.word	0x400204b8
 80032f8:	4002040f 	.word	0x4002040f
 80032fc:	10008200 	.word	0x10008200
 8003300:	40020880 	.word	0x40020880

08003304 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003304:	b480      	push	{r7}
 8003306:	b085      	sub	sp, #20
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	b2db      	uxtb	r3, r3
 8003312:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d04a      	beq.n	80033b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2b08      	cmp	r3, #8
 800331e:	d847      	bhi.n	80033b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a25      	ldr	r2, [pc, #148]	; (80033bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d022      	beq.n	8003370 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a24      	ldr	r2, [pc, #144]	; (80033c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d01d      	beq.n	8003370 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a22      	ldr	r2, [pc, #136]	; (80033c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d018      	beq.n	8003370 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a21      	ldr	r2, [pc, #132]	; (80033c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d013      	beq.n	8003370 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a1f      	ldr	r2, [pc, #124]	; (80033cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d00e      	beq.n	8003370 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a1e      	ldr	r2, [pc, #120]	; (80033d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d009      	beq.n	8003370 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a1c      	ldr	r2, [pc, #112]	; (80033d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d004      	beq.n	8003370 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a1b      	ldr	r2, [pc, #108]	; (80033d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d101      	bne.n	8003374 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003370:	2301      	movs	r3, #1
 8003372:	e000      	b.n	8003376 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003374:	2300      	movs	r3, #0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00a      	beq.n	8003390 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800337a:	68fa      	ldr	r2, [r7, #12]
 800337c:	4b17      	ldr	r3, [pc, #92]	; (80033dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800337e:	4413      	add	r3, r2
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	461a      	mov	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a15      	ldr	r2, [pc, #84]	; (80033e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800338c:	671a      	str	r2, [r3, #112]	; 0x70
 800338e:	e009      	b.n	80033a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003390:	68fa      	ldr	r2, [r7, #12]
 8003392:	4b14      	ldr	r3, [pc, #80]	; (80033e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003394:	4413      	add	r3, r2
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	461a      	mov	r2, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a11      	ldr	r2, [pc, #68]	; (80033e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80033a2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	3b01      	subs	r3, #1
 80033a8:	2201      	movs	r2, #1
 80033aa:	409a      	lsls	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80033b0:	bf00      	nop
 80033b2:	3714      	adds	r7, #20
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr
 80033bc:	58025408 	.word	0x58025408
 80033c0:	5802541c 	.word	0x5802541c
 80033c4:	58025430 	.word	0x58025430
 80033c8:	58025444 	.word	0x58025444
 80033cc:	58025458 	.word	0x58025458
 80033d0:	5802546c 	.word	0x5802546c
 80033d4:	58025480 	.word	0x58025480
 80033d8:	58025494 	.word	0x58025494
 80033dc:	1600963f 	.word	0x1600963f
 80033e0:	58025940 	.word	0x58025940
 80033e4:	1000823f 	.word	0x1000823f
 80033e8:	40020940 	.word	0x40020940

080033ec <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b098      	sub	sp, #96	; 0x60
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80033f4:	4a84      	ldr	r2, [pc, #528]	; (8003608 <HAL_FDCAN_Init+0x21c>)
 80033f6:	f107 030c 	add.w	r3, r7, #12
 80033fa:	4611      	mov	r1, r2
 80033fc:	224c      	movs	r2, #76	; 0x4c
 80033fe:	4618      	mov	r0, r3
 8003400:	f00f fcec 	bl	8012ddc <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d101      	bne.n	800340e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e1ca      	b.n	80037a4 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a7e      	ldr	r2, [pc, #504]	; (800360c <HAL_FDCAN_Init+0x220>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d106      	bne.n	8003426 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003420:	461a      	mov	r2, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d106      	bne.n	8003440 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f7fd fe1a 	bl	8001074 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	699a      	ldr	r2, [r3, #24]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f022 0210 	bic.w	r2, r2, #16
 800344e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003450:	f7fe f9c0 	bl	80017d4 <HAL_GetTick>
 8003454:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003456:	e014      	b.n	8003482 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003458:	f7fe f9bc 	bl	80017d4 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b0a      	cmp	r3, #10
 8003464:	d90d      	bls.n	8003482 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800346c:	f043 0201 	orr.w	r2, r3, #1
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2203      	movs	r2, #3
 800347a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e190      	b.n	80037a4 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	f003 0308 	and.w	r3, r3, #8
 800348c:	2b08      	cmp	r3, #8
 800348e:	d0e3      	beq.n	8003458 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	699a      	ldr	r2, [r3, #24]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f042 0201 	orr.w	r2, r2, #1
 800349e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80034a0:	f7fe f998 	bl	80017d4 <HAL_GetTick>
 80034a4:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80034a6:	e014      	b.n	80034d2 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80034a8:	f7fe f994 	bl	80017d4 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	2b0a      	cmp	r3, #10
 80034b4:	d90d      	bls.n	80034d2 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80034bc:	f043 0201 	orr.w	r2, r3, #1
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2203      	movs	r2, #3
 80034ca:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e168      	b.n	80037a4 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	f003 0301 	and.w	r3, r3, #1
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d0e3      	beq.n	80034a8 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	699a      	ldr	r2, [r3, #24]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f042 0202 	orr.w	r2, r2, #2
 80034ee:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	7c1b      	ldrb	r3, [r3, #16]
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d108      	bne.n	800350a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	699a      	ldr	r2, [r3, #24]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003506:	619a      	str	r2, [r3, #24]
 8003508:	e007      	b.n	800351a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	699a      	ldr	r2, [r3, #24]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003518:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	7c5b      	ldrb	r3, [r3, #17]
 800351e:	2b01      	cmp	r3, #1
 8003520:	d108      	bne.n	8003534 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	699a      	ldr	r2, [r3, #24]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003530:	619a      	str	r2, [r3, #24]
 8003532:	e007      	b.n	8003544 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	699a      	ldr	r2, [r3, #24]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003542:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	7c9b      	ldrb	r3, [r3, #18]
 8003548:	2b01      	cmp	r3, #1
 800354a:	d108      	bne.n	800355e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	699a      	ldr	r2, [r3, #24]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800355a:	619a      	str	r2, [r3, #24]
 800355c:	e007      	b.n	800356e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	699a      	ldr	r2, [r3, #24]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800356c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	699b      	ldr	r3, [r3, #24]
 8003574:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	689a      	ldr	r2, [r3, #8]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	430a      	orrs	r2, r1
 8003582:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	699a      	ldr	r2, [r3, #24]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8003592:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	691a      	ldr	r2, [r3, #16]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f022 0210 	bic.w	r2, r2, #16
 80035a2:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d108      	bne.n	80035be <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	699a      	ldr	r2, [r3, #24]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f042 0204 	orr.w	r2, r2, #4
 80035ba:	619a      	str	r2, [r3, #24]
 80035bc:	e030      	b.n	8003620 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d02c      	beq.n	8003620 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d020      	beq.n	8003610 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	699a      	ldr	r2, [r3, #24]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80035dc:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	691a      	ldr	r2, [r3, #16]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f042 0210 	orr.w	r2, r2, #16
 80035ec:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	2b03      	cmp	r3, #3
 80035f4:	d114      	bne.n	8003620 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	699a      	ldr	r2, [r3, #24]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f042 0220 	orr.w	r2, r2, #32
 8003604:	619a      	str	r2, [r3, #24]
 8003606:	e00b      	b.n	8003620 <HAL_FDCAN_Init+0x234>
 8003608:	08013694 	.word	0x08013694
 800360c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	699a      	ldr	r2, [r3, #24]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f042 0220 	orr.w	r2, r2, #32
 800361e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	699b      	ldr	r3, [r3, #24]
 8003624:	3b01      	subs	r3, #1
 8003626:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	69db      	ldr	r3, [r3, #28]
 800362c:	3b01      	subs	r3, #1
 800362e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003630:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a1b      	ldr	r3, [r3, #32]
 8003636:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003638:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	695b      	ldr	r3, [r3, #20]
 8003640:	3b01      	subs	r3, #1
 8003642:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003648:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800364a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003654:	d115      	bne.n	8003682 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800365a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003660:	3b01      	subs	r3, #1
 8003662:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003664:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366a:	3b01      	subs	r3, #1
 800366c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800366e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003676:	3b01      	subs	r3, #1
 8003678:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800367e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003680:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00a      	beq.n	80036a0 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	430a      	orrs	r2, r1
 800369c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036a8:	4413      	add	r3, r2
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d012      	beq.n	80036d4 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80036b6:	f023 0107 	bic.w	r1, r3, #7
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80036c4:	4413      	add	r3, r2
 80036c6:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	430a      	orrs	r2, r1
 80036d0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d012      	beq.n	8003702 <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80036e4:	f023 0107 	bic.w	r1, r3, #7
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80036f2:	4413      	add	r3, r2
 80036f4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	430a      	orrs	r2, r1
 80036fe:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003706:	2b00      	cmp	r3, #0
 8003708:	d013      	beq.n	8003732 <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003712:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003720:	4413      	add	r3, r2
 8003722:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003726:	011a      	lsls	r2, r3, #4
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	430a      	orrs	r2, r1
 800372e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003736:	2b00      	cmp	r3, #0
 8003738:	d013      	beq.n	8003762 <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003742:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003750:	4413      	add	r3, r2
 8003752:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003756:	021a      	lsls	r2, r3, #8
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	430a      	orrs	r2, r1
 800375e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a11      	ldr	r2, [pc, #68]	; (80037ac <HAL_FDCAN_Init+0x3c0>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d107      	bne.n	800377c <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	689a      	ldr	r2, [r3, #8]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f022 0203 	bic.w	r2, r2, #3
 800377a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f000 f80b 	bl	80037b0 <FDCAN_CalcultateRamBlockAddresses>
 800379a:	4603      	mov	r3, r0
 800379c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80037a0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3760      	adds	r7, #96	; 0x60
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	4000a000 	.word	0x4000a000

080037b0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b085      	sub	sp, #20
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037bc:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80037c6:	4ba7      	ldr	r3, [pc, #668]	; (8003a64 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80037c8:	4013      	ands	r3, r2
 80037ca:	68ba      	ldr	r2, [r7, #8]
 80037cc:	0091      	lsls	r1, r2, #2
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	6812      	ldr	r2, [r2, #0]
 80037d2:	430b      	orrs	r3, r1
 80037d4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037e0:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e8:	041a      	lsls	r2, r3, #16
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	430a      	orrs	r2, r1
 80037f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f8:	68ba      	ldr	r2, [r7, #8]
 80037fa:	4413      	add	r3, r2
 80037fc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003806:	4b97      	ldr	r3, [pc, #604]	; (8003a64 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003808:	4013      	ands	r3, r2
 800380a:	68ba      	ldr	r2, [r7, #8]
 800380c:	0091      	lsls	r1, r2, #2
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	6812      	ldr	r2, [r2, #0]
 8003812:	430b      	orrs	r3, r1
 8003814:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003820:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003828:	041a      	lsls	r2, r3, #16
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	430a      	orrs	r2, r1
 8003830:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003838:	005b      	lsls	r3, r3, #1
 800383a:	68ba      	ldr	r2, [r7, #8]
 800383c:	4413      	add	r3, r2
 800383e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003848:	4b86      	ldr	r3, [pc, #536]	; (8003a64 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800384a:	4013      	ands	r3, r2
 800384c:	68ba      	ldr	r2, [r7, #8]
 800384e:	0091      	lsls	r1, r2, #2
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	6812      	ldr	r2, [r2, #0]
 8003854:	430b      	orrs	r3, r1
 8003856:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003862:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386a:	041a      	lsls	r2, r3, #16
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	430a      	orrs	r2, r1
 8003872:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800387e:	fb02 f303 	mul.w	r3, r2, r3
 8003882:	68ba      	ldr	r2, [r7, #8]
 8003884:	4413      	add	r3, r2
 8003886:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003890:	4b74      	ldr	r3, [pc, #464]	; (8003a64 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003892:	4013      	ands	r3, r2
 8003894:	68ba      	ldr	r2, [r7, #8]
 8003896:	0091      	lsls	r1, r2, #2
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	6812      	ldr	r2, [r2, #0]
 800389c:	430b      	orrs	r3, r1
 800389e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80038aa:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038b2:	041a      	lsls	r2, r3, #16
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	430a      	orrs	r2, r1
 80038ba:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80038c6:	fb02 f303 	mul.w	r3, r2, r3
 80038ca:	68ba      	ldr	r2, [r7, #8]
 80038cc:	4413      	add	r3, r2
 80038ce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80038d8:	4b62      	ldr	r3, [pc, #392]	; (8003a64 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80038da:	4013      	ands	r3, r2
 80038dc:	68ba      	ldr	r2, [r7, #8]
 80038de:	0091      	lsls	r1, r2, #2
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	6812      	ldr	r2, [r2, #0]
 80038e4:	430b      	orrs	r3, r1
 80038e6:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80038f2:	fb02 f303 	mul.w	r3, r2, r3
 80038f6:	68ba      	ldr	r2, [r7, #8]
 80038f8:	4413      	add	r3, r2
 80038fa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8003904:	4b57      	ldr	r3, [pc, #348]	; (8003a64 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003906:	4013      	ands	r3, r2
 8003908:	68ba      	ldr	r2, [r7, #8]
 800390a:	0091      	lsls	r1, r2, #2
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	6812      	ldr	r2, [r2, #0]
 8003910:	430b      	orrs	r3, r1
 8003912:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800391e:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003926:	041a      	lsls	r2, r3, #16
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	430a      	orrs	r2, r1
 800392e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003936:	005b      	lsls	r3, r3, #1
 8003938:	68ba      	ldr	r2, [r7, #8]
 800393a:	4413      	add	r3, r2
 800393c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003946:	4b47      	ldr	r3, [pc, #284]	; (8003a64 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003948:	4013      	ands	r3, r2
 800394a:	68ba      	ldr	r2, [r7, #8]
 800394c:	0091      	lsls	r1, r2, #2
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	6812      	ldr	r2, [r2, #0]
 8003952:	430b      	orrs	r3, r1
 8003954:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003960:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003968:	041a      	lsls	r2, r3, #16
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	430a      	orrs	r2, r1
 8003970:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800397c:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003984:	061a      	lsls	r2, r3, #24
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	430a      	orrs	r2, r1
 800398c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003994:	4b34      	ldr	r3, [pc, #208]	; (8003a68 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8003996:	4413      	add	r3, r2
 8003998:	009a      	lsls	r2, r3, #2
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	441a      	add	r2, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039b6:	00db      	lsls	r3, r3, #3
 80039b8:	441a      	add	r2, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c6:	6879      	ldr	r1, [r7, #4]
 80039c8:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80039ca:	fb01 f303 	mul.w	r3, r1, r3
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	441a      	add	r2, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039de:	6879      	ldr	r1, [r7, #4]
 80039e0:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80039e2:	fb01 f303 	mul.w	r3, r1, r3
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	441a      	add	r2, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039f6:	6879      	ldr	r1, [r7, #4]
 80039f8:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80039fa:	fb01 f303 	mul.w	r3, r1, r3
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	441a      	add	r2, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a12:	00db      	lsls	r3, r3, #3
 8003a14:	441a      	add	r2, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a26:	6879      	ldr	r1, [r7, #4]
 8003a28:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8003a2a:	fb01 f303 	mul.w	r3, r1, r3
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	441a      	add	r2, r3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a42:	6879      	ldr	r1, [r7, #4]
 8003a44:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8003a46:	fb01 f303 	mul.w	r3, r1, r3
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	441a      	add	r2, r3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a5a:	4a04      	ldr	r2, [pc, #16]	; (8003a6c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d915      	bls.n	8003a8c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8003a60:	e006      	b.n	8003a70 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8003a62:	bf00      	nop
 8003a64:	ffff0003 	.word	0xffff0003
 8003a68:	10002b00 	.word	0x10002b00
 8003a6c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a76:	f043 0220 	orr.w	r2, r3, #32
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2203      	movs	r2, #3
 8003a84:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e010      	b.n	8003aae <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a90:	60fb      	str	r3, [r7, #12]
 8003a92:	e005      	b.n	8003aa0 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2200      	movs	r2, #0
 8003a98:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	3304      	adds	r3, #4
 8003a9e:	60fb      	str	r3, [r7, #12]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aa6:	68fa      	ldr	r2, [r7, #12]
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d3f3      	bcc.n	8003a94 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3714      	adds	r7, #20
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop

08003abc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b089      	sub	sp, #36	; 0x24
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003aca:	4b89      	ldr	r3, [pc, #548]	; (8003cf0 <HAL_GPIO_Init+0x234>)
 8003acc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003ace:	e194      	b.n	8003dfa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	2101      	movs	r1, #1
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8003adc:	4013      	ands	r3, r2
 8003ade:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	f000 8186 	beq.w	8003df4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d00b      	beq.n	8003b08 <HAL_GPIO_Init+0x4c>
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d007      	beq.n	8003b08 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003afc:	2b11      	cmp	r3, #17
 8003afe:	d003      	beq.n	8003b08 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	2b12      	cmp	r3, #18
 8003b06:	d130      	bne.n	8003b6a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	005b      	lsls	r3, r3, #1
 8003b12:	2203      	movs	r2, #3
 8003b14:	fa02 f303 	lsl.w	r3, r2, r3
 8003b18:	43db      	mvns	r3, r3
 8003b1a:	69ba      	ldr	r2, [r7, #24]
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	68da      	ldr	r2, [r3, #12]
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	005b      	lsls	r3, r3, #1
 8003b28:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2c:	69ba      	ldr	r2, [r7, #24]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	69ba      	ldr	r2, [r7, #24]
 8003b36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b3e:	2201      	movs	r2, #1
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	fa02 f303 	lsl.w	r3, r2, r3
 8003b46:	43db      	mvns	r3, r3
 8003b48:	69ba      	ldr	r2, [r7, #24]
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	091b      	lsrs	r3, r3, #4
 8003b54:	f003 0201 	and.w	r2, r3, #1
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5e:	69ba      	ldr	r2, [r7, #24]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	69ba      	ldr	r2, [r7, #24]
 8003b68:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	005b      	lsls	r3, r3, #1
 8003b74:	2203      	movs	r2, #3
 8003b76:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7a:	43db      	mvns	r3, r3
 8003b7c:	69ba      	ldr	r2, [r7, #24]
 8003b7e:	4013      	ands	r3, r2
 8003b80:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	689a      	ldr	r2, [r3, #8]
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	005b      	lsls	r3, r3, #1
 8003b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8e:	69ba      	ldr	r2, [r7, #24]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	69ba      	ldr	r2, [r7, #24]
 8003b98:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d003      	beq.n	8003baa <HAL_GPIO_Init+0xee>
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	2b12      	cmp	r3, #18
 8003ba8:	d123      	bne.n	8003bf2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	08da      	lsrs	r2, r3, #3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	3208      	adds	r2, #8
 8003bb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	f003 0307 	and.w	r3, r3, #7
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	220f      	movs	r2, #15
 8003bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc6:	43db      	mvns	r3, r3
 8003bc8:	69ba      	ldr	r2, [r7, #24]
 8003bca:	4013      	ands	r3, r2
 8003bcc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	691a      	ldr	r2, [r3, #16]
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	f003 0307 	and.w	r3, r3, #7
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	fa02 f303 	lsl.w	r3, r2, r3
 8003bde:	69ba      	ldr	r2, [r7, #24]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	08da      	lsrs	r2, r3, #3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	3208      	adds	r2, #8
 8003bec:	69b9      	ldr	r1, [r7, #24]
 8003bee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	005b      	lsls	r3, r3, #1
 8003bfc:	2203      	movs	r2, #3
 8003bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003c02:	43db      	mvns	r3, r3
 8003c04:	69ba      	ldr	r2, [r7, #24]
 8003c06:	4013      	ands	r3, r2
 8003c08:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	f003 0203 	and.w	r2, r3, #3
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	005b      	lsls	r3, r3, #1
 8003c16:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1a:	69ba      	ldr	r2, [r7, #24]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	69ba      	ldr	r2, [r7, #24]
 8003c24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f000 80e0 	beq.w	8003df4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c34:	4b2f      	ldr	r3, [pc, #188]	; (8003cf4 <HAL_GPIO_Init+0x238>)
 8003c36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003c3a:	4a2e      	ldr	r2, [pc, #184]	; (8003cf4 <HAL_GPIO_Init+0x238>)
 8003c3c:	f043 0302 	orr.w	r3, r3, #2
 8003c40:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003c44:	4b2b      	ldr	r3, [pc, #172]	; (8003cf4 <HAL_GPIO_Init+0x238>)
 8003c46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003c4a:	f003 0302 	and.w	r3, r3, #2
 8003c4e:	60fb      	str	r3, [r7, #12]
 8003c50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c52:	4a29      	ldr	r2, [pc, #164]	; (8003cf8 <HAL_GPIO_Init+0x23c>)
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	089b      	lsrs	r3, r3, #2
 8003c58:	3302      	adds	r3, #2
 8003c5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	f003 0303 	and.w	r3, r3, #3
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	220f      	movs	r2, #15
 8003c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6e:	43db      	mvns	r3, r3
 8003c70:	69ba      	ldr	r2, [r7, #24]
 8003c72:	4013      	ands	r3, r2
 8003c74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a20      	ldr	r2, [pc, #128]	; (8003cfc <HAL_GPIO_Init+0x240>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d052      	beq.n	8003d24 <HAL_GPIO_Init+0x268>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a1f      	ldr	r2, [pc, #124]	; (8003d00 <HAL_GPIO_Init+0x244>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d031      	beq.n	8003cea <HAL_GPIO_Init+0x22e>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a1e      	ldr	r2, [pc, #120]	; (8003d04 <HAL_GPIO_Init+0x248>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d02b      	beq.n	8003ce6 <HAL_GPIO_Init+0x22a>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a1d      	ldr	r2, [pc, #116]	; (8003d08 <HAL_GPIO_Init+0x24c>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d025      	beq.n	8003ce2 <HAL_GPIO_Init+0x226>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a1c      	ldr	r2, [pc, #112]	; (8003d0c <HAL_GPIO_Init+0x250>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d01f      	beq.n	8003cde <HAL_GPIO_Init+0x222>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a1b      	ldr	r2, [pc, #108]	; (8003d10 <HAL_GPIO_Init+0x254>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d019      	beq.n	8003cda <HAL_GPIO_Init+0x21e>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a1a      	ldr	r2, [pc, #104]	; (8003d14 <HAL_GPIO_Init+0x258>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d013      	beq.n	8003cd6 <HAL_GPIO_Init+0x21a>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a19      	ldr	r2, [pc, #100]	; (8003d18 <HAL_GPIO_Init+0x25c>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d00d      	beq.n	8003cd2 <HAL_GPIO_Init+0x216>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a18      	ldr	r2, [pc, #96]	; (8003d1c <HAL_GPIO_Init+0x260>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d007      	beq.n	8003cce <HAL_GPIO_Init+0x212>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a17      	ldr	r2, [pc, #92]	; (8003d20 <HAL_GPIO_Init+0x264>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d101      	bne.n	8003cca <HAL_GPIO_Init+0x20e>
 8003cc6:	2309      	movs	r3, #9
 8003cc8:	e02d      	b.n	8003d26 <HAL_GPIO_Init+0x26a>
 8003cca:	230a      	movs	r3, #10
 8003ccc:	e02b      	b.n	8003d26 <HAL_GPIO_Init+0x26a>
 8003cce:	2308      	movs	r3, #8
 8003cd0:	e029      	b.n	8003d26 <HAL_GPIO_Init+0x26a>
 8003cd2:	2307      	movs	r3, #7
 8003cd4:	e027      	b.n	8003d26 <HAL_GPIO_Init+0x26a>
 8003cd6:	2306      	movs	r3, #6
 8003cd8:	e025      	b.n	8003d26 <HAL_GPIO_Init+0x26a>
 8003cda:	2305      	movs	r3, #5
 8003cdc:	e023      	b.n	8003d26 <HAL_GPIO_Init+0x26a>
 8003cde:	2304      	movs	r3, #4
 8003ce0:	e021      	b.n	8003d26 <HAL_GPIO_Init+0x26a>
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e01f      	b.n	8003d26 <HAL_GPIO_Init+0x26a>
 8003ce6:	2302      	movs	r3, #2
 8003ce8:	e01d      	b.n	8003d26 <HAL_GPIO_Init+0x26a>
 8003cea:	2301      	movs	r3, #1
 8003cec:	e01b      	b.n	8003d26 <HAL_GPIO_Init+0x26a>
 8003cee:	bf00      	nop
 8003cf0:	58000080 	.word	0x58000080
 8003cf4:	58024400 	.word	0x58024400
 8003cf8:	58000400 	.word	0x58000400
 8003cfc:	58020000 	.word	0x58020000
 8003d00:	58020400 	.word	0x58020400
 8003d04:	58020800 	.word	0x58020800
 8003d08:	58020c00 	.word	0x58020c00
 8003d0c:	58021000 	.word	0x58021000
 8003d10:	58021400 	.word	0x58021400
 8003d14:	58021800 	.word	0x58021800
 8003d18:	58021c00 	.word	0x58021c00
 8003d1c:	58022000 	.word	0x58022000
 8003d20:	58022400 	.word	0x58022400
 8003d24:	2300      	movs	r3, #0
 8003d26:	69fa      	ldr	r2, [r7, #28]
 8003d28:	f002 0203 	and.w	r2, r2, #3
 8003d2c:	0092      	lsls	r2, r2, #2
 8003d2e:	4093      	lsls	r3, r2
 8003d30:	69ba      	ldr	r2, [r7, #24]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d36:	4938      	ldr	r1, [pc, #224]	; (8003e18 <HAL_GPIO_Init+0x35c>)
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	089b      	lsrs	r3, r3, #2
 8003d3c:	3302      	adds	r3, #2
 8003d3e:	69ba      	ldr	r2, [r7, #24]
 8003d40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	43db      	mvns	r3, r3
 8003d4e:	69ba      	ldr	r2, [r7, #24]
 8003d50:	4013      	ands	r3, r2
 8003d52:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d003      	beq.n	8003d68 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003d60:	69ba      	ldr	r2, [r7, #24]
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	69ba      	ldr	r2, [r7, #24]
 8003d6c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	43db      	mvns	r3, r3
 8003d78:	69ba      	ldr	r2, [r7, #24]
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d003      	beq.n	8003d92 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003d8a:	69ba      	ldr	r2, [r7, #24]
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	69ba      	ldr	r2, [r7, #24]
 8003d96:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	43db      	mvns	r3, r3
 8003da4:	69ba      	ldr	r2, [r7, #24]
 8003da6:	4013      	ands	r3, r2
 8003da8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d003      	beq.n	8003dbe <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8003db6:	69ba      	ldr	r2, [r7, #24]
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003dbe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003dc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	43db      	mvns	r3, r3
 8003dd2:	69ba      	ldr	r2, [r7, #24]
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d003      	beq.n	8003dec <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8003de4:	69ba      	ldr	r2, [r7, #24]
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003dec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	3301      	adds	r3, #1
 8003df8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	fa22 f303 	lsr.w	r3, r2, r3
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	f47f ae63 	bne.w	8003ad0 <HAL_GPIO_Init+0x14>
  }
}
 8003e0a:	bf00      	nop
 8003e0c:	3724      	adds	r7, #36	; 0x24
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	58000400 	.word	0x58000400

08003e1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	460b      	mov	r3, r1
 8003e26:	807b      	strh	r3, [r7, #2]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e2c:	787b      	ldrb	r3, [r7, #1]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d003      	beq.n	8003e3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e32:	887a      	ldrh	r2, [r7, #2]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003e38:	e003      	b.n	8003e42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003e3a:	887b      	ldrh	r3, [r7, #2]
 8003e3c:	041a      	lsls	r2, r3, #16
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	619a      	str	r2, [r3, #24]
}
 8003e42:	bf00      	nop
 8003e44:	370c      	adds	r7, #12
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr

08003e4e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003e4e:	b480      	push	{r7}
 8003e50:	b083      	sub	sp, #12
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
 8003e56:	460b      	mov	r3, r1
 8003e58:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	695a      	ldr	r2, [r3, #20]
 8003e5e:	887b      	ldrh	r3, [r7, #2]
 8003e60:	401a      	ands	r2, r3
 8003e62:	887b      	ldrh	r3, [r7, #2]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d104      	bne.n	8003e72 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003e68:	887b      	ldrh	r3, [r7, #2]
 8003e6a:	041a      	lsls	r2, r3, #16
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003e70:	e002      	b.n	8003e78 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8003e72:	887a      	ldrh	r2, [r7, #2]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	619a      	str	r2, [r3, #24]
}
 8003e78:	bf00      	nop
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003e84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e86:	b08f      	sub	sp, #60	; 0x3c
 8003e88:	af0a      	add	r7, sp, #40	; 0x28
 8003e8a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d101      	bne.n	8003e96 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e116      	b.n	80040c4 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d106      	bne.n	8003eb6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f00e fc3b 	bl	801272c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2203      	movs	r2, #3
 8003eba:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d102      	bne.n	8003ed0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f007 fd04 	bl	800b8e2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	603b      	str	r3, [r7, #0]
 8003ee0:	687e      	ldr	r6, [r7, #4]
 8003ee2:	466d      	mov	r5, sp
 8003ee4:	f106 0410 	add.w	r4, r6, #16
 8003ee8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003eea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003eec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003eee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ef0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003ef4:	e885 0003 	stmia.w	r5, {r0, r1}
 8003ef8:	1d33      	adds	r3, r6, #4
 8003efa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003efc:	6838      	ldr	r0, [r7, #0]
 8003efe:	f007 fbdb 	bl	800b6b8 <USB_CoreInit>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d005      	beq.n	8003f14 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2202      	movs	r2, #2
 8003f0c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e0d7      	b.n	80040c4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2100      	movs	r1, #0
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f007 fcf2 	bl	800b904 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f20:	2300      	movs	r3, #0
 8003f22:	73fb      	strb	r3, [r7, #15]
 8003f24:	e04a      	b.n	8003fbc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003f26:	7bfa      	ldrb	r2, [r7, #15]
 8003f28:	6879      	ldr	r1, [r7, #4]
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	00db      	lsls	r3, r3, #3
 8003f2e:	1a9b      	subs	r3, r3, r2
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	440b      	add	r3, r1
 8003f34:	333d      	adds	r3, #61	; 0x3d
 8003f36:	2201      	movs	r2, #1
 8003f38:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003f3a:	7bfa      	ldrb	r2, [r7, #15]
 8003f3c:	6879      	ldr	r1, [r7, #4]
 8003f3e:	4613      	mov	r3, r2
 8003f40:	00db      	lsls	r3, r3, #3
 8003f42:	1a9b      	subs	r3, r3, r2
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	440b      	add	r3, r1
 8003f48:	333c      	adds	r3, #60	; 0x3c
 8003f4a:	7bfa      	ldrb	r2, [r7, #15]
 8003f4c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003f4e:	7bfa      	ldrb	r2, [r7, #15]
 8003f50:	7bfb      	ldrb	r3, [r7, #15]
 8003f52:	b298      	uxth	r0, r3
 8003f54:	6879      	ldr	r1, [r7, #4]
 8003f56:	4613      	mov	r3, r2
 8003f58:	00db      	lsls	r3, r3, #3
 8003f5a:	1a9b      	subs	r3, r3, r2
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	440b      	add	r3, r1
 8003f60:	3342      	adds	r3, #66	; 0x42
 8003f62:	4602      	mov	r2, r0
 8003f64:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003f66:	7bfa      	ldrb	r2, [r7, #15]
 8003f68:	6879      	ldr	r1, [r7, #4]
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	00db      	lsls	r3, r3, #3
 8003f6e:	1a9b      	subs	r3, r3, r2
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	440b      	add	r3, r1
 8003f74:	333f      	adds	r3, #63	; 0x3f
 8003f76:	2200      	movs	r2, #0
 8003f78:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003f7a:	7bfa      	ldrb	r2, [r7, #15]
 8003f7c:	6879      	ldr	r1, [r7, #4]
 8003f7e:	4613      	mov	r3, r2
 8003f80:	00db      	lsls	r3, r3, #3
 8003f82:	1a9b      	subs	r3, r3, r2
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	440b      	add	r3, r1
 8003f88:	3344      	adds	r3, #68	; 0x44
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003f8e:	7bfa      	ldrb	r2, [r7, #15]
 8003f90:	6879      	ldr	r1, [r7, #4]
 8003f92:	4613      	mov	r3, r2
 8003f94:	00db      	lsls	r3, r3, #3
 8003f96:	1a9b      	subs	r3, r3, r2
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	440b      	add	r3, r1
 8003f9c:	3348      	adds	r3, #72	; 0x48
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003fa2:	7bfa      	ldrb	r2, [r7, #15]
 8003fa4:	6879      	ldr	r1, [r7, #4]
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	00db      	lsls	r3, r3, #3
 8003faa:	1a9b      	subs	r3, r3, r2
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	440b      	add	r3, r1
 8003fb0:	3350      	adds	r3, #80	; 0x50
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fb6:	7bfb      	ldrb	r3, [r7, #15]
 8003fb8:	3301      	adds	r3, #1
 8003fba:	73fb      	strb	r3, [r7, #15]
 8003fbc:	7bfa      	ldrb	r2, [r7, #15]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d3af      	bcc.n	8003f26 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	73fb      	strb	r3, [r7, #15]
 8003fca:	e044      	b.n	8004056 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003fcc:	7bfa      	ldrb	r2, [r7, #15]
 8003fce:	6879      	ldr	r1, [r7, #4]
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	00db      	lsls	r3, r3, #3
 8003fd4:	1a9b      	subs	r3, r3, r2
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	440b      	add	r3, r1
 8003fda:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003fde:	2200      	movs	r2, #0
 8003fe0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003fe2:	7bfa      	ldrb	r2, [r7, #15]
 8003fe4:	6879      	ldr	r1, [r7, #4]
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	00db      	lsls	r3, r3, #3
 8003fea:	1a9b      	subs	r3, r3, r2
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	440b      	add	r3, r1
 8003ff0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003ff4:	7bfa      	ldrb	r2, [r7, #15]
 8003ff6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003ff8:	7bfa      	ldrb	r2, [r7, #15]
 8003ffa:	6879      	ldr	r1, [r7, #4]
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	00db      	lsls	r3, r3, #3
 8004000:	1a9b      	subs	r3, r3, r2
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	440b      	add	r3, r1
 8004006:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800400a:	2200      	movs	r2, #0
 800400c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800400e:	7bfa      	ldrb	r2, [r7, #15]
 8004010:	6879      	ldr	r1, [r7, #4]
 8004012:	4613      	mov	r3, r2
 8004014:	00db      	lsls	r3, r3, #3
 8004016:	1a9b      	subs	r3, r3, r2
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	440b      	add	r3, r1
 800401c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004020:	2200      	movs	r2, #0
 8004022:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004024:	7bfa      	ldrb	r2, [r7, #15]
 8004026:	6879      	ldr	r1, [r7, #4]
 8004028:	4613      	mov	r3, r2
 800402a:	00db      	lsls	r3, r3, #3
 800402c:	1a9b      	subs	r3, r3, r2
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	440b      	add	r3, r1
 8004032:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004036:	2200      	movs	r2, #0
 8004038:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800403a:	7bfa      	ldrb	r2, [r7, #15]
 800403c:	6879      	ldr	r1, [r7, #4]
 800403e:	4613      	mov	r3, r2
 8004040:	00db      	lsls	r3, r3, #3
 8004042:	1a9b      	subs	r3, r3, r2
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	440b      	add	r3, r1
 8004048:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800404c:	2200      	movs	r2, #0
 800404e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004050:	7bfb      	ldrb	r3, [r7, #15]
 8004052:	3301      	adds	r3, #1
 8004054:	73fb      	strb	r3, [r7, #15]
 8004056:	7bfa      	ldrb	r2, [r7, #15]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	429a      	cmp	r2, r3
 800405e:	d3b5      	bcc.n	8003fcc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	603b      	str	r3, [r7, #0]
 8004066:	687e      	ldr	r6, [r7, #4]
 8004068:	466d      	mov	r5, sp
 800406a:	f106 0410 	add.w	r4, r6, #16
 800406e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004070:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004072:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004074:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004076:	e894 0003 	ldmia.w	r4, {r0, r1}
 800407a:	e885 0003 	stmia.w	r5, {r0, r1}
 800407e:	1d33      	adds	r3, r6, #4
 8004080:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004082:	6838      	ldr	r0, [r7, #0]
 8004084:	f007 fc68 	bl	800b958 <USB_DevInit>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d005      	beq.n	800409a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2202      	movs	r2, #2
 8004092:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e014      	b.n	80040c4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2201      	movs	r2, #1
 80040a6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d102      	bne.n	80040b8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f001 f8be 	bl	8005234 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4618      	mov	r0, r3
 80040be:	f008 fca7 	bl	800ca10 <USB_DevDisconnect>

  return HAL_OK;
 80040c2:	2300      	movs	r3, #0
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3714      	adds	r7, #20
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080040cc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d101      	bne.n	80040e8 <HAL_PCD_Start+0x1c>
 80040e4:	2302      	movs	r3, #2
 80040e6:	e020      	b.n	800412a <HAL_PCD_Start+0x5e>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d109      	bne.n	800410c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d005      	beq.n	800410c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004104:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4618      	mov	r0, r3
 8004112:	f008 fc65 	bl	800c9e0 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4618      	mov	r0, r3
 800411c:	f007 fbd0 	bl	800b8c0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	3710      	adds	r7, #16
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}

08004132 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004132:	b590      	push	{r4, r7, lr}
 8004134:	b08d      	sub	sp, #52	; 0x34
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004140:	6a3b      	ldr	r3, [r7, #32]
 8004142:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4618      	mov	r0, r3
 800414a:	f008 fd0c 	bl	800cb66 <USB_GetMode>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	f040 83ca 	bne.w	80048ea <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4618      	mov	r0, r3
 800415c:	f008 fc70 	bl	800ca40 <USB_ReadInterrupts>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	f000 83c0 	beq.w	80048e8 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4618      	mov	r0, r3
 800416e:	f008 fc67 	bl	800ca40 <USB_ReadInterrupts>
 8004172:	4603      	mov	r3, r0
 8004174:	f003 0302 	and.w	r3, r3, #2
 8004178:	2b02      	cmp	r3, #2
 800417a:	d107      	bne.n	800418c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	695a      	ldr	r2, [r3, #20]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f002 0202 	and.w	r2, r2, #2
 800418a:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4618      	mov	r0, r3
 8004192:	f008 fc55 	bl	800ca40 <USB_ReadInterrupts>
 8004196:	4603      	mov	r3, r0
 8004198:	f003 0310 	and.w	r3, r3, #16
 800419c:	2b10      	cmp	r3, #16
 800419e:	d161      	bne.n	8004264 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	699a      	ldr	r2, [r3, #24]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f022 0210 	bic.w	r2, r2, #16
 80041ae:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80041b0:	6a3b      	ldr	r3, [r7, #32]
 80041b2:	6a1b      	ldr	r3, [r3, #32]
 80041b4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	f003 020f 	and.w	r2, r3, #15
 80041bc:	4613      	mov	r3, r2
 80041be:	00db      	lsls	r3, r3, #3
 80041c0:	1a9b      	subs	r3, r3, r2
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	4413      	add	r3, r2
 80041cc:	3304      	adds	r3, #4
 80041ce:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80041d0:	69bb      	ldr	r3, [r7, #24]
 80041d2:	0c5b      	lsrs	r3, r3, #17
 80041d4:	f003 030f 	and.w	r3, r3, #15
 80041d8:	2b02      	cmp	r3, #2
 80041da:	d124      	bne.n	8004226 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80041dc:	69ba      	ldr	r2, [r7, #24]
 80041de:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80041e2:	4013      	ands	r3, r2
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d035      	beq.n	8004254 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	091b      	lsrs	r3, r3, #4
 80041f0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80041f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	461a      	mov	r2, r3
 80041fa:	6a38      	ldr	r0, [r7, #32]
 80041fc:	f008 facd 	bl	800c79a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	68da      	ldr	r2, [r3, #12]
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	091b      	lsrs	r3, r3, #4
 8004208:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800420c:	441a      	add	r2, r3
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	699a      	ldr	r2, [r3, #24]
 8004216:	69bb      	ldr	r3, [r7, #24]
 8004218:	091b      	lsrs	r3, r3, #4
 800421a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800421e:	441a      	add	r2, r3
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	619a      	str	r2, [r3, #24]
 8004224:	e016      	b.n	8004254 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	0c5b      	lsrs	r3, r3, #17
 800422a:	f003 030f 	and.w	r3, r3, #15
 800422e:	2b06      	cmp	r3, #6
 8004230:	d110      	bne.n	8004254 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004238:	2208      	movs	r2, #8
 800423a:	4619      	mov	r1, r3
 800423c:	6a38      	ldr	r0, [r7, #32]
 800423e:	f008 faac 	bl	800c79a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	699a      	ldr	r2, [r3, #24]
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	091b      	lsrs	r3, r3, #4
 800424a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800424e:	441a      	add	r2, r3
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	699a      	ldr	r2, [r3, #24]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f042 0210 	orr.w	r2, r2, #16
 8004262:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4618      	mov	r0, r3
 800426a:	f008 fbe9 	bl	800ca40 <USB_ReadInterrupts>
 800426e:	4603      	mov	r3, r0
 8004270:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004274:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004278:	d16e      	bne.n	8004358 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800427a:	2300      	movs	r3, #0
 800427c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4618      	mov	r0, r3
 8004284:	f008 fbef 	bl	800ca66 <USB_ReadDevAllOutEpInterrupt>
 8004288:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800428a:	e062      	b.n	8004352 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800428c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800428e:	f003 0301 	and.w	r3, r3, #1
 8004292:	2b00      	cmp	r3, #0
 8004294:	d057      	beq.n	8004346 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800429c:	b2d2      	uxtb	r2, r2
 800429e:	4611      	mov	r1, r2
 80042a0:	4618      	mov	r0, r3
 80042a2:	f008 fc14 	bl	800cace <USB_ReadDevOutEPInterrupt>
 80042a6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	f003 0301 	and.w	r3, r3, #1
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d00c      	beq.n	80042cc <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80042b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b4:	015a      	lsls	r2, r3, #5
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	4413      	add	r3, r2
 80042ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042be:	461a      	mov	r2, r3
 80042c0:	2301      	movs	r3, #1
 80042c2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80042c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 fe0a 	bl	8004ee0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	f003 0308 	and.w	r3, r3, #8
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00c      	beq.n	80042f0 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80042d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d8:	015a      	lsls	r2, r3, #5
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	4413      	add	r3, r2
 80042de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042e2:	461a      	mov	r2, r3
 80042e4:	2308      	movs	r3, #8
 80042e6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80042e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 ff04 	bl	80050f8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	f003 0310 	and.w	r3, r3, #16
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d008      	beq.n	800430c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80042fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fc:	015a      	lsls	r2, r3, #5
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	4413      	add	r3, r2
 8004302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004306:	461a      	mov	r2, r3
 8004308:	2310      	movs	r3, #16
 800430a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	f003 0320 	and.w	r3, r3, #32
 8004312:	2b00      	cmp	r3, #0
 8004314:	d008      	beq.n	8004328 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004318:	015a      	lsls	r2, r3, #5
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	4413      	add	r3, r2
 800431e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004322:	461a      	mov	r2, r3
 8004324:	2320      	movs	r3, #32
 8004326:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d009      	beq.n	8004346 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004334:	015a      	lsls	r2, r3, #5
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	4413      	add	r3, r2
 800433a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800433e:	461a      	mov	r2, r3
 8004340:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004344:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004348:	3301      	adds	r3, #1
 800434a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800434c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800434e:	085b      	lsrs	r3, r3, #1
 8004350:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004354:	2b00      	cmp	r3, #0
 8004356:	d199      	bne.n	800428c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4618      	mov	r0, r3
 800435e:	f008 fb6f 	bl	800ca40 <USB_ReadInterrupts>
 8004362:	4603      	mov	r3, r0
 8004364:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004368:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800436c:	f040 80c0 	bne.w	80044f0 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4618      	mov	r0, r3
 8004376:	f008 fb90 	bl	800ca9a <USB_ReadDevAllInEpInterrupt>
 800437a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800437c:	2300      	movs	r3, #0
 800437e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004380:	e0b2      	b.n	80044e8 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004384:	f003 0301 	and.w	r3, r3, #1
 8004388:	2b00      	cmp	r3, #0
 800438a:	f000 80a7 	beq.w	80044dc <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004394:	b2d2      	uxtb	r2, r2
 8004396:	4611      	mov	r1, r2
 8004398:	4618      	mov	r0, r3
 800439a:	f008 fbb6 	bl	800cb0a <USB_ReadDevInEPInterrupt>
 800439e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	f003 0301 	and.w	r3, r3, #1
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d057      	beq.n	800445a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80043aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ac:	f003 030f 	and.w	r3, r3, #15
 80043b0:	2201      	movs	r2, #1
 80043b2:	fa02 f303 	lsl.w	r3, r2, r3
 80043b6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	43db      	mvns	r3, r3
 80043c4:	69f9      	ldr	r1, [r7, #28]
 80043c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80043ca:	4013      	ands	r3, r2
 80043cc:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80043ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d0:	015a      	lsls	r2, r3, #5
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	4413      	add	r3, r2
 80043d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043da:	461a      	mov	r2, r3
 80043dc:	2301      	movs	r3, #1
 80043de:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	691b      	ldr	r3, [r3, #16]
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d132      	bne.n	800444e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80043e8:	6879      	ldr	r1, [r7, #4]
 80043ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043ec:	4613      	mov	r3, r2
 80043ee:	00db      	lsls	r3, r3, #3
 80043f0:	1a9b      	subs	r3, r3, r2
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	440b      	add	r3, r1
 80043f6:	3348      	adds	r3, #72	; 0x48
 80043f8:	6819      	ldr	r1, [r3, #0]
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043fe:	4613      	mov	r3, r2
 8004400:	00db      	lsls	r3, r3, #3
 8004402:	1a9b      	subs	r3, r3, r2
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	4403      	add	r3, r0
 8004408:	3344      	adds	r3, #68	; 0x44
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4419      	add	r1, r3
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004412:	4613      	mov	r3, r2
 8004414:	00db      	lsls	r3, r3, #3
 8004416:	1a9b      	subs	r3, r3, r2
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	4403      	add	r3, r0
 800441c:	3348      	adds	r3, #72	; 0x48
 800441e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004422:	2b00      	cmp	r3, #0
 8004424:	d113      	bne.n	800444e <HAL_PCD_IRQHandler+0x31c>
 8004426:	6879      	ldr	r1, [r7, #4]
 8004428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800442a:	4613      	mov	r3, r2
 800442c:	00db      	lsls	r3, r3, #3
 800442e:	1a9b      	subs	r3, r3, r2
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	440b      	add	r3, r1
 8004434:	3350      	adds	r3, #80	; 0x50
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d108      	bne.n	800444e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6818      	ldr	r0, [r3, #0]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004446:	461a      	mov	r2, r3
 8004448:	2101      	movs	r1, #1
 800444a:	f008 fbbf 	bl	800cbcc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800444e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004450:	b2db      	uxtb	r3, r3
 8004452:	4619      	mov	r1, r3
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f00e f9e8 	bl	801282a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	f003 0308 	and.w	r3, r3, #8
 8004460:	2b00      	cmp	r3, #0
 8004462:	d008      	beq.n	8004476 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004466:	015a      	lsls	r2, r3, #5
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	4413      	add	r3, r2
 800446c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004470:	461a      	mov	r2, r3
 8004472:	2308      	movs	r3, #8
 8004474:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	f003 0310 	and.w	r3, r3, #16
 800447c:	2b00      	cmp	r3, #0
 800447e:	d008      	beq.n	8004492 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004482:	015a      	lsls	r2, r3, #5
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	4413      	add	r3, r2
 8004488:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800448c:	461a      	mov	r2, r3
 800448e:	2310      	movs	r3, #16
 8004490:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004498:	2b00      	cmp	r3, #0
 800449a:	d008      	beq.n	80044ae <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800449c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449e:	015a      	lsls	r2, r3, #5
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	4413      	add	r3, r2
 80044a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044a8:	461a      	mov	r2, r3
 80044aa:	2340      	movs	r3, #64	; 0x40
 80044ac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	f003 0302 	and.w	r3, r3, #2
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d008      	beq.n	80044ca <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80044b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ba:	015a      	lsls	r2, r3, #5
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	4413      	add	r3, r2
 80044c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044c4:	461a      	mov	r2, r3
 80044c6:	2302      	movs	r3, #2
 80044c8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d003      	beq.n	80044dc <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80044d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f000 fc75 	bl	8004dc6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80044dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044de:	3301      	adds	r3, #1
 80044e0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80044e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e4:	085b      	lsrs	r3, r3, #1
 80044e6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80044e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	f47f af49 	bne.w	8004382 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4618      	mov	r0, r3
 80044f6:	f008 faa3 	bl	800ca40 <USB_ReadInterrupts>
 80044fa:	4603      	mov	r3, r0
 80044fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004500:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004504:	d122      	bne.n	800454c <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	69fa      	ldr	r2, [r7, #28]
 8004510:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004514:	f023 0301 	bic.w	r3, r3, #1
 8004518:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004520:	2b01      	cmp	r3, #1
 8004522:	d108      	bne.n	8004536 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800452c:	2100      	movs	r1, #0
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f000 fea4 	bl	800527c <HAL_PCDEx_LPM_Callback>
 8004534:	e002      	b.n	800453c <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f00e f9ee 	bl	8012918 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	695a      	ldr	r2, [r3, #20]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800454a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4618      	mov	r0, r3
 8004552:	f008 fa75 	bl	800ca40 <USB_ReadInterrupts>
 8004556:	4603      	mov	r3, r0
 8004558:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800455c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004560:	d112      	bne.n	8004588 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f003 0301 	and.w	r3, r3, #1
 800456e:	2b01      	cmp	r3, #1
 8004570:	d102      	bne.n	8004578 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f00e f9aa 	bl	80128cc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	695a      	ldr	r2, [r3, #20]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004586:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4618      	mov	r0, r3
 800458e:	f008 fa57 	bl	800ca40 <USB_ReadInterrupts>
 8004592:	4603      	mov	r3, r0
 8004594:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004598:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800459c:	d121      	bne.n	80045e2 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	695a      	ldr	r2, [r3, #20]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80045ac:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d111      	bne.n	80045dc <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045c6:	089b      	lsrs	r3, r3, #2
 80045c8:	f003 020f 	and.w	r2, r3, #15
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80045d2:	2101      	movs	r1, #1
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f000 fe51 	bl	800527c <HAL_PCDEx_LPM_Callback>
 80045da:	e002      	b.n	80045e2 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f00e f975 	bl	80128cc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4618      	mov	r0, r3
 80045e8:	f008 fa2a 	bl	800ca40 <USB_ReadInterrupts>
 80045ec:	4603      	mov	r3, r0
 80045ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045f6:	f040 80c7 	bne.w	8004788 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	69fa      	ldr	r2, [r7, #28]
 8004604:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004608:	f023 0301 	bic.w	r3, r3, #1
 800460c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2110      	movs	r1, #16
 8004614:	4618      	mov	r0, r3
 8004616:	f007 fafd 	bl	800bc14 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800461a:	2300      	movs	r3, #0
 800461c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800461e:	e056      	b.n	80046ce <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004622:	015a      	lsls	r2, r3, #5
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	4413      	add	r3, r2
 8004628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800462c:	461a      	mov	r2, r3
 800462e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004632:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004636:	015a      	lsls	r2, r3, #5
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	4413      	add	r3, r2
 800463c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004644:	0151      	lsls	r1, r2, #5
 8004646:	69fa      	ldr	r2, [r7, #28]
 8004648:	440a      	add	r2, r1
 800464a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800464e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004652:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004656:	015a      	lsls	r2, r3, #5
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	4413      	add	r3, r2
 800465c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004664:	0151      	lsls	r1, r2, #5
 8004666:	69fa      	ldr	r2, [r7, #28]
 8004668:	440a      	add	r2, r1
 800466a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800466e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004672:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004676:	015a      	lsls	r2, r3, #5
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	4413      	add	r3, r2
 800467c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004680:	461a      	mov	r2, r3
 8004682:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004686:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800468a:	015a      	lsls	r2, r3, #5
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	4413      	add	r3, r2
 8004690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004698:	0151      	lsls	r1, r2, #5
 800469a:	69fa      	ldr	r2, [r7, #28]
 800469c:	440a      	add	r2, r1
 800469e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80046a6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80046a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046aa:	015a      	lsls	r2, r3, #5
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	4413      	add	r3, r2
 80046b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046b8:	0151      	lsls	r1, r2, #5
 80046ba:	69fa      	ldr	r2, [r7, #28]
 80046bc:	440a      	add	r2, r1
 80046be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80046c6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ca:	3301      	adds	r3, #1
 80046cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d3a3      	bcc.n	8004620 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046de:	69db      	ldr	r3, [r3, #28]
 80046e0:	69fa      	ldr	r2, [r7, #28]
 80046e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046e6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80046ea:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d016      	beq.n	8004722 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046fe:	69fa      	ldr	r2, [r7, #28]
 8004700:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004704:	f043 030b 	orr.w	r3, r3, #11
 8004708:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004714:	69fa      	ldr	r2, [r7, #28]
 8004716:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800471a:	f043 030b 	orr.w	r3, r3, #11
 800471e:	6453      	str	r3, [r2, #68]	; 0x44
 8004720:	e015      	b.n	800474e <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004728:	695a      	ldr	r2, [r3, #20]
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004730:	4619      	mov	r1, r3
 8004732:	f242 032b 	movw	r3, #8235	; 0x202b
 8004736:	4313      	orrs	r3, r2
 8004738:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	69fa      	ldr	r2, [r7, #28]
 8004744:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004748:	f043 030b 	orr.w	r3, r3, #11
 800474c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	69fa      	ldr	r2, [r7, #28]
 8004758:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800475c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004760:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6818      	ldr	r0, [r3, #0]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	691b      	ldr	r3, [r3, #16]
 800476a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004772:	461a      	mov	r2, r3
 8004774:	f008 fa2a 	bl	800cbcc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	695a      	ldr	r2, [r3, #20]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004786:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4618      	mov	r0, r3
 800478e:	f008 f957 	bl	800ca40 <USB_ReadInterrupts>
 8004792:	4603      	mov	r3, r0
 8004794:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004798:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800479c:	d124      	bne.n	80047e8 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4618      	mov	r0, r3
 80047a4:	f008 f9ee 	bl	800cb84 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4618      	mov	r0, r3
 80047ae:	f007 fa92 	bl	800bcd6 <USB_GetDevSpeed>
 80047b2:	4603      	mov	r3, r0
 80047b4:	461a      	mov	r2, r3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681c      	ldr	r4, [r3, #0]
 80047be:	f001 fcfb 	bl	80061b8 <HAL_RCC_GetHCLKFreq>
 80047c2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	461a      	mov	r2, r3
 80047cc:	4620      	mov	r0, r4
 80047ce:	f006 ffd5 	bl	800b77c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f00e f851 	bl	801287a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	695a      	ldr	r2, [r3, #20]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80047e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4618      	mov	r0, r3
 80047ee:	f008 f927 	bl	800ca40 <USB_ReadInterrupts>
 80047f2:	4603      	mov	r3, r0
 80047f4:	f003 0308 	and.w	r3, r3, #8
 80047f8:	2b08      	cmp	r3, #8
 80047fa:	d10a      	bne.n	8004812 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f00e f82e 	bl	801285e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	695a      	ldr	r2, [r3, #20]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f002 0208 	and.w	r2, r2, #8
 8004810:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4618      	mov	r0, r3
 8004818:	f008 f912 	bl	800ca40 <USB_ReadInterrupts>
 800481c:	4603      	mov	r3, r0
 800481e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004822:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004826:	d10f      	bne.n	8004848 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004828:	2300      	movs	r3, #0
 800482a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800482c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482e:	b2db      	uxtb	r3, r3
 8004830:	4619      	mov	r1, r3
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f00e f890 	bl	8012958 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	695a      	ldr	r2, [r3, #20]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004846:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4618      	mov	r0, r3
 800484e:	f008 f8f7 	bl	800ca40 <USB_ReadInterrupts>
 8004852:	4603      	mov	r3, r0
 8004854:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004858:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800485c:	d10f      	bne.n	800487e <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800485e:	2300      	movs	r3, #0
 8004860:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004864:	b2db      	uxtb	r3, r3
 8004866:	4619      	mov	r1, r3
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f00e f863 	bl	8012934 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	695a      	ldr	r2, [r3, #20]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800487c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4618      	mov	r0, r3
 8004884:	f008 f8dc 	bl	800ca40 <USB_ReadInterrupts>
 8004888:	4603      	mov	r3, r0
 800488a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800488e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004892:	d10a      	bne.n	80048aa <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f00e f871 	bl	801297c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	695a      	ldr	r2, [r3, #20]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80048a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4618      	mov	r0, r3
 80048b0:	f008 f8c6 	bl	800ca40 <USB_ReadInterrupts>
 80048b4:	4603      	mov	r3, r0
 80048b6:	f003 0304 	and.w	r3, r3, #4
 80048ba:	2b04      	cmp	r3, #4
 80048bc:	d115      	bne.n	80048ea <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	f003 0304 	and.w	r3, r3, #4
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d002      	beq.n	80048d6 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f00e f861 	bl	8012998 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	6859      	ldr	r1, [r3, #4]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	69ba      	ldr	r2, [r7, #24]
 80048e2:	430a      	orrs	r2, r1
 80048e4:	605a      	str	r2, [r3, #4]
 80048e6:	e000      	b.n	80048ea <HAL_PCD_IRQHandler+0x7b8>
      return;
 80048e8:	bf00      	nop
    }
  }
}
 80048ea:	3734      	adds	r7, #52	; 0x34
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd90      	pop	{r4, r7, pc}

080048f0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	460b      	mov	r3, r1
 80048fa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004902:	2b01      	cmp	r3, #1
 8004904:	d101      	bne.n	800490a <HAL_PCD_SetAddress+0x1a>
 8004906:	2302      	movs	r3, #2
 8004908:	e013      	b.n	8004932 <HAL_PCD_SetAddress+0x42>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2201      	movs	r2, #1
 800490e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	78fa      	ldrb	r2, [r7, #3]
 8004916:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	78fa      	ldrb	r2, [r7, #3]
 8004920:	4611      	mov	r1, r2
 8004922:	4618      	mov	r0, r3
 8004924:	f008 f836 	bl	800c994 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004930:	2300      	movs	r3, #0
}
 8004932:	4618      	mov	r0, r3
 8004934:	3708      	adds	r7, #8
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}

0800493a <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800493a:	b580      	push	{r7, lr}
 800493c:	b084      	sub	sp, #16
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
 8004942:	4608      	mov	r0, r1
 8004944:	4611      	mov	r1, r2
 8004946:	461a      	mov	r2, r3
 8004948:	4603      	mov	r3, r0
 800494a:	70fb      	strb	r3, [r7, #3]
 800494c:	460b      	mov	r3, r1
 800494e:	803b      	strh	r3, [r7, #0]
 8004950:	4613      	mov	r3, r2
 8004952:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004954:	2300      	movs	r3, #0
 8004956:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004958:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800495c:	2b00      	cmp	r3, #0
 800495e:	da0f      	bge.n	8004980 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004960:	78fb      	ldrb	r3, [r7, #3]
 8004962:	f003 020f 	and.w	r2, r3, #15
 8004966:	4613      	mov	r3, r2
 8004968:	00db      	lsls	r3, r3, #3
 800496a:	1a9b      	subs	r3, r3, r2
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	3338      	adds	r3, #56	; 0x38
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	4413      	add	r3, r2
 8004974:	3304      	adds	r3, #4
 8004976:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2201      	movs	r2, #1
 800497c:	705a      	strb	r2, [r3, #1]
 800497e:	e00f      	b.n	80049a0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004980:	78fb      	ldrb	r3, [r7, #3]
 8004982:	f003 020f 	and.w	r2, r3, #15
 8004986:	4613      	mov	r3, r2
 8004988:	00db      	lsls	r3, r3, #3
 800498a:	1a9b      	subs	r3, r3, r2
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	4413      	add	r3, r2
 8004996:	3304      	adds	r3, #4
 8004998:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2200      	movs	r2, #0
 800499e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80049a0:	78fb      	ldrb	r3, [r7, #3]
 80049a2:	f003 030f 	and.w	r3, r3, #15
 80049a6:	b2da      	uxtb	r2, r3
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80049ac:	883a      	ldrh	r2, [r7, #0]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	78ba      	ldrb	r2, [r7, #2]
 80049b6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	785b      	ldrb	r3, [r3, #1]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d004      	beq.n	80049ca <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	b29a      	uxth	r2, r3
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80049ca:	78bb      	ldrb	r3, [r7, #2]
 80049cc:	2b02      	cmp	r3, #2
 80049ce:	d102      	bne.n	80049d6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2200      	movs	r2, #0
 80049d4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d101      	bne.n	80049e4 <HAL_PCD_EP_Open+0xaa>
 80049e0:	2302      	movs	r3, #2
 80049e2:	e00e      	b.n	8004a02 <HAL_PCD_EP_Open+0xc8>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	68f9      	ldr	r1, [r7, #12]
 80049f2:	4618      	mov	r0, r3
 80049f4:	f007 f994 	bl	800bd20 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8004a00:	7afb      	ldrb	r3, [r7, #11]
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3710      	adds	r7, #16
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}

08004a0a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a0a:	b580      	push	{r7, lr}
 8004a0c:	b084      	sub	sp, #16
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
 8004a12:	460b      	mov	r3, r1
 8004a14:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004a16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	da0f      	bge.n	8004a3e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a1e:	78fb      	ldrb	r3, [r7, #3]
 8004a20:	f003 020f 	and.w	r2, r3, #15
 8004a24:	4613      	mov	r3, r2
 8004a26:	00db      	lsls	r3, r3, #3
 8004a28:	1a9b      	subs	r3, r3, r2
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	3338      	adds	r3, #56	; 0x38
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	4413      	add	r3, r2
 8004a32:	3304      	adds	r3, #4
 8004a34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2201      	movs	r2, #1
 8004a3a:	705a      	strb	r2, [r3, #1]
 8004a3c:	e00f      	b.n	8004a5e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a3e:	78fb      	ldrb	r3, [r7, #3]
 8004a40:	f003 020f 	and.w	r2, r3, #15
 8004a44:	4613      	mov	r3, r2
 8004a46:	00db      	lsls	r3, r3, #3
 8004a48:	1a9b      	subs	r3, r3, r2
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	4413      	add	r3, r2
 8004a54:	3304      	adds	r3, #4
 8004a56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004a5e:	78fb      	ldrb	r3, [r7, #3]
 8004a60:	f003 030f 	and.w	r3, r3, #15
 8004a64:	b2da      	uxtb	r2, r3
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d101      	bne.n	8004a78 <HAL_PCD_EP_Close+0x6e>
 8004a74:	2302      	movs	r3, #2
 8004a76:	e00e      	b.n	8004a96 <HAL_PCD_EP_Close+0x8c>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	68f9      	ldr	r1, [r7, #12]
 8004a86:	4618      	mov	r0, r3
 8004a88:	f007 f9d2 	bl	800be30 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004a94:	2300      	movs	r3, #0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3710      	adds	r7, #16
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}

08004a9e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004a9e:	b580      	push	{r7, lr}
 8004aa0:	b086      	sub	sp, #24
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	60f8      	str	r0, [r7, #12]
 8004aa6:	607a      	str	r2, [r7, #4]
 8004aa8:	603b      	str	r3, [r7, #0]
 8004aaa:	460b      	mov	r3, r1
 8004aac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004aae:	7afb      	ldrb	r3, [r7, #11]
 8004ab0:	f003 020f 	and.w	r2, r3, #15
 8004ab4:	4613      	mov	r3, r2
 8004ab6:	00db      	lsls	r3, r3, #3
 8004ab8:	1a9b      	subs	r3, r3, r2
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004ac0:	68fa      	ldr	r2, [r7, #12]
 8004ac2:	4413      	add	r3, r2
 8004ac4:	3304      	adds	r3, #4
 8004ac6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	683a      	ldr	r2, [r7, #0]
 8004ad2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	2200      	movs	r2, #0
 8004ade:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ae0:	7afb      	ldrb	r3, [r7, #11]
 8004ae2:	f003 030f 	and.w	r3, r3, #15
 8004ae6:	b2da      	uxtb	r2, r3
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	691b      	ldr	r3, [r3, #16]
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d102      	bne.n	8004afa <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004afa:	7afb      	ldrb	r3, [r7, #11]
 8004afc:	f003 030f 	and.w	r3, r3, #15
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d109      	bne.n	8004b18 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6818      	ldr	r0, [r3, #0]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	691b      	ldr	r3, [r3, #16]
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	461a      	mov	r2, r3
 8004b10:	6979      	ldr	r1, [r7, #20]
 8004b12:	f007 fcb5 	bl	800c480 <USB_EP0StartXfer>
 8004b16:	e008      	b.n	8004b2a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6818      	ldr	r0, [r3, #0]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	691b      	ldr	r3, [r3, #16]
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	461a      	mov	r2, r3
 8004b24:	6979      	ldr	r1, [r7, #20]
 8004b26:	f007 fa5f 	bl	800bfe8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004b2a:	2300      	movs	r3, #0
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3718      	adds	r7, #24
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004b40:	78fb      	ldrb	r3, [r7, #3]
 8004b42:	f003 020f 	and.w	r2, r3, #15
 8004b46:	6879      	ldr	r1, [r7, #4]
 8004b48:	4613      	mov	r3, r2
 8004b4a:	00db      	lsls	r3, r3, #3
 8004b4c:	1a9b      	subs	r3, r3, r2
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	440b      	add	r3, r1
 8004b52:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004b56:	681b      	ldr	r3, [r3, #0]
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	370c      	adds	r7, #12
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b086      	sub	sp, #24
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	607a      	str	r2, [r7, #4]
 8004b6e:	603b      	str	r3, [r7, #0]
 8004b70:	460b      	mov	r3, r1
 8004b72:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b74:	7afb      	ldrb	r3, [r7, #11]
 8004b76:	f003 020f 	and.w	r2, r3, #15
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	00db      	lsls	r3, r3, #3
 8004b7e:	1a9b      	subs	r3, r3, r2
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	3338      	adds	r3, #56	; 0x38
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	4413      	add	r3, r2
 8004b88:	3304      	adds	r3, #4
 8004b8a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	683a      	ldr	r2, [r7, #0]
 8004b96:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ba4:	7afb      	ldrb	r3, [r7, #11]
 8004ba6:	f003 030f 	and.w	r3, r3, #15
 8004baa:	b2da      	uxtb	r2, r3
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d102      	bne.n	8004bbe <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004bbe:	7afb      	ldrb	r3, [r7, #11]
 8004bc0:	f003 030f 	and.w	r3, r3, #15
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d109      	bne.n	8004bdc <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6818      	ldr	r0, [r3, #0]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	691b      	ldr	r3, [r3, #16]
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	6979      	ldr	r1, [r7, #20]
 8004bd6:	f007 fc53 	bl	800c480 <USB_EP0StartXfer>
 8004bda:	e008      	b.n	8004bee <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6818      	ldr	r0, [r3, #0]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	461a      	mov	r2, r3
 8004be8:	6979      	ldr	r1, [r7, #20]
 8004bea:	f007 f9fd 	bl	800bfe8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004bee:	2300      	movs	r3, #0
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3718      	adds	r7, #24
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	460b      	mov	r3, r1
 8004c02:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004c04:	78fb      	ldrb	r3, [r7, #3]
 8004c06:	f003 020f 	and.w	r2, r3, #15
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d901      	bls.n	8004c16 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e050      	b.n	8004cb8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004c16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	da0f      	bge.n	8004c3e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c1e:	78fb      	ldrb	r3, [r7, #3]
 8004c20:	f003 020f 	and.w	r2, r3, #15
 8004c24:	4613      	mov	r3, r2
 8004c26:	00db      	lsls	r3, r3, #3
 8004c28:	1a9b      	subs	r3, r3, r2
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	3338      	adds	r3, #56	; 0x38
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	4413      	add	r3, r2
 8004c32:	3304      	adds	r3, #4
 8004c34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2201      	movs	r2, #1
 8004c3a:	705a      	strb	r2, [r3, #1]
 8004c3c:	e00d      	b.n	8004c5a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004c3e:	78fa      	ldrb	r2, [r7, #3]
 8004c40:	4613      	mov	r3, r2
 8004c42:	00db      	lsls	r3, r3, #3
 8004c44:	1a9b      	subs	r3, r3, r2
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	4413      	add	r3, r2
 8004c50:	3304      	adds	r3, #4
 8004c52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2200      	movs	r2, #0
 8004c58:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c60:	78fb      	ldrb	r3, [r7, #3]
 8004c62:	f003 030f 	and.w	r3, r3, #15
 8004c66:	b2da      	uxtb	r2, r3
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d101      	bne.n	8004c7a <HAL_PCD_EP_SetStall+0x82>
 8004c76:	2302      	movs	r3, #2
 8004c78:	e01e      	b.n	8004cb8 <HAL_PCD_EP_SetStall+0xc0>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	68f9      	ldr	r1, [r7, #12]
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f007 fdaf 	bl	800c7ec <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004c8e:	78fb      	ldrb	r3, [r7, #3]
 8004c90:	f003 030f 	and.w	r3, r3, #15
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d10a      	bne.n	8004cae <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6818      	ldr	r0, [r3, #0]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	691b      	ldr	r3, [r3, #16]
 8004ca0:	b2d9      	uxtb	r1, r3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004ca8:	461a      	mov	r2, r3
 8004caa:	f007 ff8f 	bl	800cbcc <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004cb6:	2300      	movs	r3, #0
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3710      	adds	r7, #16
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	460b      	mov	r3, r1
 8004cca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004ccc:	78fb      	ldrb	r3, [r7, #3]
 8004cce:	f003 020f 	and.w	r2, r3, #15
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d901      	bls.n	8004cde <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e042      	b.n	8004d64 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004cde:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	da0f      	bge.n	8004d06 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ce6:	78fb      	ldrb	r3, [r7, #3]
 8004ce8:	f003 020f 	and.w	r2, r3, #15
 8004cec:	4613      	mov	r3, r2
 8004cee:	00db      	lsls	r3, r3, #3
 8004cf0:	1a9b      	subs	r3, r3, r2
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	3338      	adds	r3, #56	; 0x38
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	4413      	add	r3, r2
 8004cfa:	3304      	adds	r3, #4
 8004cfc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2201      	movs	r2, #1
 8004d02:	705a      	strb	r2, [r3, #1]
 8004d04:	e00f      	b.n	8004d26 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d06:	78fb      	ldrb	r3, [r7, #3]
 8004d08:	f003 020f 	and.w	r2, r3, #15
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	00db      	lsls	r3, r3, #3
 8004d10:	1a9b      	subs	r3, r3, r2
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	4413      	add	r3, r2
 8004d1c:	3304      	adds	r3, #4
 8004d1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2200      	movs	r2, #0
 8004d24:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d2c:	78fb      	ldrb	r3, [r7, #3]
 8004d2e:	f003 030f 	and.w	r3, r3, #15
 8004d32:	b2da      	uxtb	r2, r3
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d101      	bne.n	8004d46 <HAL_PCD_EP_ClrStall+0x86>
 8004d42:	2302      	movs	r3, #2
 8004d44:	e00e      	b.n	8004d64 <HAL_PCD_EP_ClrStall+0xa4>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2201      	movs	r2, #1
 8004d4a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	68f9      	ldr	r1, [r7, #12]
 8004d54:	4618      	mov	r0, r3
 8004d56:	f007 fdb7 	bl	800c8c8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004d62:	2300      	movs	r3, #0
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3710      	adds	r7, #16
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b082      	sub	sp, #8
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	460b      	mov	r3, r1
 8004d76:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d101      	bne.n	8004d86 <HAL_PCD_EP_Flush+0x1a>
 8004d82:	2302      	movs	r3, #2
 8004d84:	e01b      	b.n	8004dbe <HAL_PCD_EP_Flush+0x52>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 8004d8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	da09      	bge.n	8004daa <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	78fb      	ldrb	r3, [r7, #3]
 8004d9c:	f003 030f 	and.w	r3, r3, #15
 8004da0:	4619      	mov	r1, r3
 8004da2:	4610      	mov	r0, r2
 8004da4:	f006 ff36 	bl	800bc14 <USB_FlushTxFifo>
 8004da8:	e004      	b.n	8004db4 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4618      	mov	r0, r3
 8004db0:	f006 ff56 	bl	800bc60 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004dbc:	2300      	movs	r3, #0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3708      	adds	r7, #8
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}

08004dc6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004dc6:	b580      	push	{r7, lr}
 8004dc8:	b08a      	sub	sp, #40	; 0x28
 8004dca:	af02      	add	r7, sp, #8
 8004dcc:	6078      	str	r0, [r7, #4]
 8004dce:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004dda:	683a      	ldr	r2, [r7, #0]
 8004ddc:	4613      	mov	r3, r2
 8004dde:	00db      	lsls	r3, r3, #3
 8004de0:	1a9b      	subs	r3, r3, r2
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	3338      	adds	r3, #56	; 0x38
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	4413      	add	r3, r2
 8004dea:	3304      	adds	r3, #4
 8004dec:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	699a      	ldr	r2, [r3, #24]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	695b      	ldr	r3, [r3, #20]
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d901      	bls.n	8004dfe <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e06c      	b.n	8004ed8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	695a      	ldr	r2, [r3, #20]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	699b      	ldr	r3, [r3, #24]
 8004e06:	1ad3      	subs	r3, r2, r3
 8004e08:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	69fa      	ldr	r2, [r7, #28]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d902      	bls.n	8004e1a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	3303      	adds	r3, #3
 8004e1e:	089b      	lsrs	r3, r3, #2
 8004e20:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004e22:	e02b      	b.n	8004e7c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	695a      	ldr	r2, [r3, #20]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	699b      	ldr	r3, [r3, #24]
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	69fa      	ldr	r2, [r7, #28]
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d902      	bls.n	8004e40 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	3303      	adds	r3, #3
 8004e44:	089b      	lsrs	r3, r3, #2
 8004e46:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	68d9      	ldr	r1, [r3, #12]
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	b2da      	uxtb	r2, r3
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	9300      	str	r3, [sp, #0]
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	6978      	ldr	r0, [r7, #20]
 8004e60:	f007 fc66 	bl	800c730 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	68da      	ldr	r2, [r3, #12]
 8004e68:	69fb      	ldr	r3, [r7, #28]
 8004e6a:	441a      	add	r2, r3
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	699a      	ldr	r2, [r3, #24]
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	441a      	add	r2, r3
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	015a      	lsls	r2, r3, #5
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	4413      	add	r3, r2
 8004e84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e88:	699b      	ldr	r3, [r3, #24]
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	69ba      	ldr	r2, [r7, #24]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d809      	bhi.n	8004ea6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	699a      	ldr	r2, [r3, #24]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d203      	bcs.n	8004ea6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	695b      	ldr	r3, [r3, #20]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d1be      	bne.n	8004e24 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	695a      	ldr	r2, [r3, #20]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	699b      	ldr	r3, [r3, #24]
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d811      	bhi.n	8004ed6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	f003 030f 	and.w	r3, r3, #15
 8004eb8:	2201      	movs	r2, #1
 8004eba:	fa02 f303 	lsl.w	r3, r2, r3
 8004ebe:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ec6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	43db      	mvns	r3, r3
 8004ecc:	6939      	ldr	r1, [r7, #16]
 8004ece:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004ed6:	2300      	movs	r3, #0
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3720      	adds	r7, #32
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}

08004ee0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b086      	sub	sp, #24
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	333c      	adds	r3, #60	; 0x3c
 8004ef8:	3304      	adds	r3, #4
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	015a      	lsls	r2, r3, #5
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	4413      	add	r3, r2
 8004f06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	f040 80a0 	bne.w	8005058 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	f003 0308 	and.w	r3, r3, #8
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d015      	beq.n	8004f4e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	4a72      	ldr	r2, [pc, #456]	; (80050f0 <PCD_EP_OutXfrComplete_int+0x210>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	f240 80dd 	bls.w	80050e6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	f000 80d7 	beq.w	80050e6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	015a      	lsls	r2, r3, #5
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	4413      	add	r3, r2
 8004f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f44:	461a      	mov	r2, r3
 8004f46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f4a:	6093      	str	r3, [r2, #8]
 8004f4c:	e0cb      	b.n	80050e6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	f003 0320 	and.w	r3, r3, #32
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d009      	beq.n	8004f6c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	015a      	lsls	r2, r3, #5
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	4413      	add	r3, r2
 8004f60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f64:	461a      	mov	r2, r3
 8004f66:	2320      	movs	r3, #32
 8004f68:	6093      	str	r3, [r2, #8]
 8004f6a:	e0bc      	b.n	80050e6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	f040 80b7 	bne.w	80050e6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	4a5d      	ldr	r2, [pc, #372]	; (80050f0 <PCD_EP_OutXfrComplete_int+0x210>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d90f      	bls.n	8004fa0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d00a      	beq.n	8004fa0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	015a      	lsls	r2, r3, #5
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	4413      	add	r3, r2
 8004f92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f96:	461a      	mov	r2, r3
 8004f98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f9c:	6093      	str	r3, [r2, #8]
 8004f9e:	e0a2      	b.n	80050e6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004fa0:	6879      	ldr	r1, [r7, #4]
 8004fa2:	683a      	ldr	r2, [r7, #0]
 8004fa4:	4613      	mov	r3, r2
 8004fa6:	00db      	lsls	r3, r3, #3
 8004fa8:	1a9b      	subs	r3, r3, r2
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	440b      	add	r3, r1
 8004fae:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004fb2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	0159      	lsls	r1, r3, #5
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	440b      	add	r3, r1
 8004fbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8004fc6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	683a      	ldr	r2, [r7, #0]
 8004fcc:	4613      	mov	r3, r2
 8004fce:	00db      	lsls	r3, r3, #3
 8004fd0:	1a9b      	subs	r3, r3, r2
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	4403      	add	r3, r0
 8004fd6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004fda:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004fdc:	6879      	ldr	r1, [r7, #4]
 8004fde:	683a      	ldr	r2, [r7, #0]
 8004fe0:	4613      	mov	r3, r2
 8004fe2:	00db      	lsls	r3, r3, #3
 8004fe4:	1a9b      	subs	r3, r3, r2
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	440b      	add	r3, r1
 8004fea:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004fee:	6819      	ldr	r1, [r3, #0]
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	683a      	ldr	r2, [r7, #0]
 8004ff4:	4613      	mov	r3, r2
 8004ff6:	00db      	lsls	r3, r3, #3
 8004ff8:	1a9b      	subs	r3, r3, r2
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	4403      	add	r3, r0
 8004ffe:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4419      	add	r1, r3
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	683a      	ldr	r2, [r7, #0]
 800500a:	4613      	mov	r3, r2
 800500c:	00db      	lsls	r3, r3, #3
 800500e:	1a9b      	subs	r3, r3, r2
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	4403      	add	r3, r0
 8005014:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005018:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d114      	bne.n	800504a <PCD_EP_OutXfrComplete_int+0x16a>
 8005020:	6879      	ldr	r1, [r7, #4]
 8005022:	683a      	ldr	r2, [r7, #0]
 8005024:	4613      	mov	r3, r2
 8005026:	00db      	lsls	r3, r3, #3
 8005028:	1a9b      	subs	r3, r3, r2
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	440b      	add	r3, r1
 800502e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d108      	bne.n	800504a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6818      	ldr	r0, [r3, #0]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005042:	461a      	mov	r2, r3
 8005044:	2101      	movs	r1, #1
 8005046:	f007 fdc1 	bl	800cbcc <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	b2db      	uxtb	r3, r3
 800504e:	4619      	mov	r1, r3
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f00d fbcf 	bl	80127f4 <HAL_PCD_DataOutStageCallback>
 8005056:	e046      	b.n	80050e6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	4a26      	ldr	r2, [pc, #152]	; (80050f4 <PCD_EP_OutXfrComplete_int+0x214>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d124      	bne.n	80050aa <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d00a      	beq.n	8005080 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	015a      	lsls	r2, r3, #5
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	4413      	add	r3, r2
 8005072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005076:	461a      	mov	r2, r3
 8005078:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800507c:	6093      	str	r3, [r2, #8]
 800507e:	e032      	b.n	80050e6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	f003 0320 	and.w	r3, r3, #32
 8005086:	2b00      	cmp	r3, #0
 8005088:	d008      	beq.n	800509c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	015a      	lsls	r2, r3, #5
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	4413      	add	r3, r2
 8005092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005096:	461a      	mov	r2, r3
 8005098:	2320      	movs	r3, #32
 800509a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	4619      	mov	r1, r3
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f00d fba6 	bl	80127f4 <HAL_PCD_DataOutStageCallback>
 80050a8:	e01d      	b.n	80050e6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d114      	bne.n	80050da <PCD_EP_OutXfrComplete_int+0x1fa>
 80050b0:	6879      	ldr	r1, [r7, #4]
 80050b2:	683a      	ldr	r2, [r7, #0]
 80050b4:	4613      	mov	r3, r2
 80050b6:	00db      	lsls	r3, r3, #3
 80050b8:	1a9b      	subs	r3, r3, r2
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	440b      	add	r3, r1
 80050be:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d108      	bne.n	80050da <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6818      	ldr	r0, [r3, #0]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80050d2:	461a      	mov	r2, r3
 80050d4:	2100      	movs	r1, #0
 80050d6:	f007 fd79 	bl	800cbcc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	4619      	mov	r1, r3
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f00d fb87 	bl	80127f4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80050e6:	2300      	movs	r3, #0
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3718      	adds	r7, #24
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}
 80050f0:	4f54300a 	.word	0x4f54300a
 80050f4:	4f54310a 	.word	0x4f54310a

080050f8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b086      	sub	sp, #24
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	333c      	adds	r3, #60	; 0x3c
 8005110:	3304      	adds	r3, #4
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	015a      	lsls	r2, r3, #5
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	4413      	add	r3, r2
 800511e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	4a15      	ldr	r2, [pc, #84]	; (8005180 <PCD_EP_OutSetupPacket_int+0x88>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d90e      	bls.n	800514c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005134:	2b00      	cmp	r3, #0
 8005136:	d009      	beq.n	800514c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	015a      	lsls	r2, r3, #5
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	4413      	add	r3, r2
 8005140:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005144:	461a      	mov	r2, r3
 8005146:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800514a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f00d fb3f 	bl	80127d0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	4a0a      	ldr	r2, [pc, #40]	; (8005180 <PCD_EP_OutSetupPacket_int+0x88>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d90c      	bls.n	8005174 <PCD_EP_OutSetupPacket_int+0x7c>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	2b01      	cmp	r3, #1
 8005160:	d108      	bne.n	8005174 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6818      	ldr	r0, [r3, #0]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800516c:	461a      	mov	r2, r3
 800516e:	2101      	movs	r1, #1
 8005170:	f007 fd2c 	bl	800cbcc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	3718      	adds	r7, #24
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	4f54300a 	.word	0x4f54300a

08005184 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005184:	b480      	push	{r7}
 8005186:	b085      	sub	sp, #20
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	460b      	mov	r3, r1
 800518e:	70fb      	strb	r3, [r7, #3]
 8005190:	4613      	mov	r3, r2
 8005192:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800519c:	78fb      	ldrb	r3, [r7, #3]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d107      	bne.n	80051b2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80051a2:	883b      	ldrh	r3, [r7, #0]
 80051a4:	0419      	lsls	r1, r3, #16
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	68ba      	ldr	r2, [r7, #8]
 80051ac:	430a      	orrs	r2, r1
 80051ae:	629a      	str	r2, [r3, #40]	; 0x28
 80051b0:	e028      	b.n	8005204 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051b8:	0c1b      	lsrs	r3, r3, #16
 80051ba:	68ba      	ldr	r2, [r7, #8]
 80051bc:	4413      	add	r3, r2
 80051be:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80051c0:	2300      	movs	r3, #0
 80051c2:	73fb      	strb	r3, [r7, #15]
 80051c4:	e00d      	b.n	80051e2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	7bfb      	ldrb	r3, [r7, #15]
 80051cc:	3340      	adds	r3, #64	; 0x40
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	4413      	add	r3, r2
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	0c1b      	lsrs	r3, r3, #16
 80051d6:	68ba      	ldr	r2, [r7, #8]
 80051d8:	4413      	add	r3, r2
 80051da:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80051dc:	7bfb      	ldrb	r3, [r7, #15]
 80051de:	3301      	adds	r3, #1
 80051e0:	73fb      	strb	r3, [r7, #15]
 80051e2:	7bfa      	ldrb	r2, [r7, #15]
 80051e4:	78fb      	ldrb	r3, [r7, #3]
 80051e6:	3b01      	subs	r3, #1
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d3ec      	bcc.n	80051c6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80051ec:	883b      	ldrh	r3, [r7, #0]
 80051ee:	0418      	lsls	r0, r3, #16
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6819      	ldr	r1, [r3, #0]
 80051f4:	78fb      	ldrb	r3, [r7, #3]
 80051f6:	3b01      	subs	r3, #1
 80051f8:	68ba      	ldr	r2, [r7, #8]
 80051fa:	4302      	orrs	r2, r0
 80051fc:	3340      	adds	r3, #64	; 0x40
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	440b      	add	r3, r1
 8005202:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005204:	2300      	movs	r3, #0
}
 8005206:	4618      	mov	r0, r3
 8005208:	3714      	adds	r7, #20
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr

08005212 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005212:	b480      	push	{r7}
 8005214:	b083      	sub	sp, #12
 8005216:	af00      	add	r7, sp, #0
 8005218:	6078      	str	r0, [r7, #4]
 800521a:	460b      	mov	r3, r1
 800521c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	887a      	ldrh	r2, [r7, #2]
 8005224:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005226:	2300      	movs	r3, #0
}
 8005228:	4618      	mov	r0, r3
 800522a:	370c      	adds	r7, #12
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr

08005234 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005234:	b480      	push	{r7}
 8005236:	b085      	sub	sp, #20
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2201      	movs	r2, #1
 8005246:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	699b      	ldr	r3, [r3, #24]
 8005256:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005262:	4b05      	ldr	r3, [pc, #20]	; (8005278 <HAL_PCDEx_ActivateLPM+0x44>)
 8005264:	4313      	orrs	r3, r2
 8005266:	68fa      	ldr	r2, [r7, #12]
 8005268:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800526a:	2300      	movs	r3, #0
}
 800526c:	4618      	mov	r0, r3
 800526e:	3714      	adds	r7, #20
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr
 8005278:	10000003 	.word	0x10000003

0800527c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	460b      	mov	r3, r1
 8005286:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005288:	bf00      	nop
 800528a:	370c      	adds	r7, #12
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800529c:	4b19      	ldr	r3, [pc, #100]	; (8005304 <HAL_PWREx_ConfigSupply+0x70>)
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	f003 0304 	and.w	r3, r3, #4
 80052a4:	2b04      	cmp	r3, #4
 80052a6:	d00a      	beq.n	80052be <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80052a8:	4b16      	ldr	r3, [pc, #88]	; (8005304 <HAL_PWREx_ConfigSupply+0x70>)
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	f003 0307 	and.w	r3, r3, #7
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d001      	beq.n	80052ba <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e01f      	b.n	80052fa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80052ba:	2300      	movs	r3, #0
 80052bc:	e01d      	b.n	80052fa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80052be:	4b11      	ldr	r3, [pc, #68]	; (8005304 <HAL_PWREx_ConfigSupply+0x70>)
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	f023 0207 	bic.w	r2, r3, #7
 80052c6:	490f      	ldr	r1, [pc, #60]	; (8005304 <HAL_PWREx_ConfigSupply+0x70>)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80052ce:	f7fc fa81 	bl	80017d4 <HAL_GetTick>
 80052d2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80052d4:	e009      	b.n	80052ea <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80052d6:	f7fc fa7d 	bl	80017d4 <HAL_GetTick>
 80052da:	4602      	mov	r2, r0
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	1ad3      	subs	r3, r2, r3
 80052e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052e4:	d901      	bls.n	80052ea <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e007      	b.n	80052fa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80052ea:	4b06      	ldr	r3, [pc, #24]	; (8005304 <HAL_PWREx_ConfigSupply+0x70>)
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052f6:	d1ee      	bne.n	80052d6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80052f8:	2300      	movs	r3, #0
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3710      	adds	r7, #16
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
 8005302:	bf00      	nop
 8005304:	58024800 	.word	0x58024800

08005308 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005308:	b480      	push	{r7}
 800530a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800530c:	4b05      	ldr	r3, [pc, #20]	; (8005324 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	4a04      	ldr	r2, [pc, #16]	; (8005324 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005312:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005316:	60d3      	str	r3, [r2, #12]
}
 8005318:	bf00      	nop
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr
 8005322:	bf00      	nop
 8005324:	58024800 	.word	0x58024800

08005328 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b08c      	sub	sp, #48	; 0x30
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d101      	bne.n	800533a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	e3ff      	b.n	8005b3a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 0301 	and.w	r3, r3, #1
 8005342:	2b00      	cmp	r3, #0
 8005344:	f000 8087 	beq.w	8005456 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005348:	4b99      	ldr	r3, [pc, #612]	; (80055b0 <HAL_RCC_OscConfig+0x288>)
 800534a:	691b      	ldr	r3, [r3, #16]
 800534c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005350:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005352:	4b97      	ldr	r3, [pc, #604]	; (80055b0 <HAL_RCC_OscConfig+0x288>)
 8005354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005356:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800535a:	2b10      	cmp	r3, #16
 800535c:	d007      	beq.n	800536e <HAL_RCC_OscConfig+0x46>
 800535e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005360:	2b18      	cmp	r3, #24
 8005362:	d110      	bne.n	8005386 <HAL_RCC_OscConfig+0x5e>
 8005364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005366:	f003 0303 	and.w	r3, r3, #3
 800536a:	2b02      	cmp	r3, #2
 800536c:	d10b      	bne.n	8005386 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800536e:	4b90      	ldr	r3, [pc, #576]	; (80055b0 <HAL_RCC_OscConfig+0x288>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005376:	2b00      	cmp	r3, #0
 8005378:	d06c      	beq.n	8005454 <HAL_RCC_OscConfig+0x12c>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d168      	bne.n	8005454 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e3d9      	b.n	8005b3a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800538e:	d106      	bne.n	800539e <HAL_RCC_OscConfig+0x76>
 8005390:	4b87      	ldr	r3, [pc, #540]	; (80055b0 <HAL_RCC_OscConfig+0x288>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a86      	ldr	r2, [pc, #536]	; (80055b0 <HAL_RCC_OscConfig+0x288>)
 8005396:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800539a:	6013      	str	r3, [r2, #0]
 800539c:	e02e      	b.n	80053fc <HAL_RCC_OscConfig+0xd4>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d10c      	bne.n	80053c0 <HAL_RCC_OscConfig+0x98>
 80053a6:	4b82      	ldr	r3, [pc, #520]	; (80055b0 <HAL_RCC_OscConfig+0x288>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a81      	ldr	r2, [pc, #516]	; (80055b0 <HAL_RCC_OscConfig+0x288>)
 80053ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053b0:	6013      	str	r3, [r2, #0]
 80053b2:	4b7f      	ldr	r3, [pc, #508]	; (80055b0 <HAL_RCC_OscConfig+0x288>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a7e      	ldr	r2, [pc, #504]	; (80055b0 <HAL_RCC_OscConfig+0x288>)
 80053b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053bc:	6013      	str	r3, [r2, #0]
 80053be:	e01d      	b.n	80053fc <HAL_RCC_OscConfig+0xd4>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053c8:	d10c      	bne.n	80053e4 <HAL_RCC_OscConfig+0xbc>
 80053ca:	4b79      	ldr	r3, [pc, #484]	; (80055b0 <HAL_RCC_OscConfig+0x288>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a78      	ldr	r2, [pc, #480]	; (80055b0 <HAL_RCC_OscConfig+0x288>)
 80053d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053d4:	6013      	str	r3, [r2, #0]
 80053d6:	4b76      	ldr	r3, [pc, #472]	; (80055b0 <HAL_RCC_OscConfig+0x288>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a75      	ldr	r2, [pc, #468]	; (80055b0 <HAL_RCC_OscConfig+0x288>)
 80053dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053e0:	6013      	str	r3, [r2, #0]
 80053e2:	e00b      	b.n	80053fc <HAL_RCC_OscConfig+0xd4>
 80053e4:	4b72      	ldr	r3, [pc, #456]	; (80055b0 <HAL_RCC_OscConfig+0x288>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a71      	ldr	r2, [pc, #452]	; (80055b0 <HAL_RCC_OscConfig+0x288>)
 80053ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053ee:	6013      	str	r3, [r2, #0]
 80053f0:	4b6f      	ldr	r3, [pc, #444]	; (80055b0 <HAL_RCC_OscConfig+0x288>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a6e      	ldr	r2, [pc, #440]	; (80055b0 <HAL_RCC_OscConfig+0x288>)
 80053f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d013      	beq.n	800542c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005404:	f7fc f9e6 	bl	80017d4 <HAL_GetTick>
 8005408:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800540a:	e008      	b.n	800541e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800540c:	f7fc f9e2 	bl	80017d4 <HAL_GetTick>
 8005410:	4602      	mov	r2, r0
 8005412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	2b64      	cmp	r3, #100	; 0x64
 8005418:	d901      	bls.n	800541e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800541a:	2303      	movs	r3, #3
 800541c:	e38d      	b.n	8005b3a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800541e:	4b64      	ldr	r3, [pc, #400]	; (80055b0 <HAL_RCC_OscConfig+0x288>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005426:	2b00      	cmp	r3, #0
 8005428:	d0f0      	beq.n	800540c <HAL_RCC_OscConfig+0xe4>
 800542a:	e014      	b.n	8005456 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800542c:	f7fc f9d2 	bl	80017d4 <HAL_GetTick>
 8005430:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005432:	e008      	b.n	8005446 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005434:	f7fc f9ce 	bl	80017d4 <HAL_GetTick>
 8005438:	4602      	mov	r2, r0
 800543a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543c:	1ad3      	subs	r3, r2, r3
 800543e:	2b64      	cmp	r3, #100	; 0x64
 8005440:	d901      	bls.n	8005446 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005442:	2303      	movs	r3, #3
 8005444:	e379      	b.n	8005b3a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005446:	4b5a      	ldr	r3, [pc, #360]	; (80055b0 <HAL_RCC_OscConfig+0x288>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800544e:	2b00      	cmp	r3, #0
 8005450:	d1f0      	bne.n	8005434 <HAL_RCC_OscConfig+0x10c>
 8005452:	e000      	b.n	8005456 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005454:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 0302 	and.w	r3, r3, #2
 800545e:	2b00      	cmp	r3, #0
 8005460:	f000 80ae 	beq.w	80055c0 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005464:	4b52      	ldr	r3, [pc, #328]	; (80055b0 <HAL_RCC_OscConfig+0x288>)
 8005466:	691b      	ldr	r3, [r3, #16]
 8005468:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800546c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800546e:	4b50      	ldr	r3, [pc, #320]	; (80055b0 <HAL_RCC_OscConfig+0x288>)
 8005470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005472:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005474:	6a3b      	ldr	r3, [r7, #32]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d007      	beq.n	800548a <HAL_RCC_OscConfig+0x162>
 800547a:	6a3b      	ldr	r3, [r7, #32]
 800547c:	2b18      	cmp	r3, #24
 800547e:	d13a      	bne.n	80054f6 <HAL_RCC_OscConfig+0x1ce>
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	f003 0303 	and.w	r3, r3, #3
 8005486:	2b00      	cmp	r3, #0
 8005488:	d135      	bne.n	80054f6 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800548a:	4b49      	ldr	r3, [pc, #292]	; (80055b0 <HAL_RCC_OscConfig+0x288>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 0304 	and.w	r3, r3, #4
 8005492:	2b00      	cmp	r3, #0
 8005494:	d005      	beq.n	80054a2 <HAL_RCC_OscConfig+0x17a>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d101      	bne.n	80054a2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e34b      	b.n	8005b3a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054a2:	f7fc f9c5 	bl	8001830 <HAL_GetREVID>
 80054a6:	4602      	mov	r2, r0
 80054a8:	f241 0303 	movw	r3, #4099	; 0x1003
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d817      	bhi.n	80054e0 <HAL_RCC_OscConfig+0x1b8>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	691b      	ldr	r3, [r3, #16]
 80054b4:	2b40      	cmp	r3, #64	; 0x40
 80054b6:	d108      	bne.n	80054ca <HAL_RCC_OscConfig+0x1a2>
 80054b8:	4b3d      	ldr	r3, [pc, #244]	; (80055b0 <HAL_RCC_OscConfig+0x288>)
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80054c0:	4a3b      	ldr	r2, [pc, #236]	; (80055b0 <HAL_RCC_OscConfig+0x288>)
 80054c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054c6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054c8:	e07a      	b.n	80055c0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054ca:	4b39      	ldr	r3, [pc, #228]	; (80055b0 <HAL_RCC_OscConfig+0x288>)
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	031b      	lsls	r3, r3, #12
 80054d8:	4935      	ldr	r1, [pc, #212]	; (80055b0 <HAL_RCC_OscConfig+0x288>)
 80054da:	4313      	orrs	r3, r2
 80054dc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054de:	e06f      	b.n	80055c0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054e0:	4b33      	ldr	r3, [pc, #204]	; (80055b0 <HAL_RCC_OscConfig+0x288>)
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	691b      	ldr	r3, [r3, #16]
 80054ec:	061b      	lsls	r3, r3, #24
 80054ee:	4930      	ldr	r1, [pc, #192]	; (80055b0 <HAL_RCC_OscConfig+0x288>)
 80054f0:	4313      	orrs	r3, r2
 80054f2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054f4:	e064      	b.n	80055c0 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	68db      	ldr	r3, [r3, #12]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d045      	beq.n	800558a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80054fe:	4b2c      	ldr	r3, [pc, #176]	; (80055b0 <HAL_RCC_OscConfig+0x288>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f023 0219 	bic.w	r2, r3, #25
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	4929      	ldr	r1, [pc, #164]	; (80055b0 <HAL_RCC_OscConfig+0x288>)
 800550c:	4313      	orrs	r3, r2
 800550e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005510:	f7fc f960 	bl	80017d4 <HAL_GetTick>
 8005514:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005516:	e008      	b.n	800552a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005518:	f7fc f95c 	bl	80017d4 <HAL_GetTick>
 800551c:	4602      	mov	r2, r0
 800551e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005520:	1ad3      	subs	r3, r2, r3
 8005522:	2b02      	cmp	r3, #2
 8005524:	d901      	bls.n	800552a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8005526:	2303      	movs	r3, #3
 8005528:	e307      	b.n	8005b3a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800552a:	4b21      	ldr	r3, [pc, #132]	; (80055b0 <HAL_RCC_OscConfig+0x288>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 0304 	and.w	r3, r3, #4
 8005532:	2b00      	cmp	r3, #0
 8005534:	d0f0      	beq.n	8005518 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005536:	f7fc f97b 	bl	8001830 <HAL_GetREVID>
 800553a:	4602      	mov	r2, r0
 800553c:	f241 0303 	movw	r3, #4099	; 0x1003
 8005540:	429a      	cmp	r2, r3
 8005542:	d817      	bhi.n	8005574 <HAL_RCC_OscConfig+0x24c>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	691b      	ldr	r3, [r3, #16]
 8005548:	2b40      	cmp	r3, #64	; 0x40
 800554a:	d108      	bne.n	800555e <HAL_RCC_OscConfig+0x236>
 800554c:	4b18      	ldr	r3, [pc, #96]	; (80055b0 <HAL_RCC_OscConfig+0x288>)
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005554:	4a16      	ldr	r2, [pc, #88]	; (80055b0 <HAL_RCC_OscConfig+0x288>)
 8005556:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800555a:	6053      	str	r3, [r2, #4]
 800555c:	e030      	b.n	80055c0 <HAL_RCC_OscConfig+0x298>
 800555e:	4b14      	ldr	r3, [pc, #80]	; (80055b0 <HAL_RCC_OscConfig+0x288>)
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	691b      	ldr	r3, [r3, #16]
 800556a:	031b      	lsls	r3, r3, #12
 800556c:	4910      	ldr	r1, [pc, #64]	; (80055b0 <HAL_RCC_OscConfig+0x288>)
 800556e:	4313      	orrs	r3, r2
 8005570:	604b      	str	r3, [r1, #4]
 8005572:	e025      	b.n	80055c0 <HAL_RCC_OscConfig+0x298>
 8005574:	4b0e      	ldr	r3, [pc, #56]	; (80055b0 <HAL_RCC_OscConfig+0x288>)
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	691b      	ldr	r3, [r3, #16]
 8005580:	061b      	lsls	r3, r3, #24
 8005582:	490b      	ldr	r1, [pc, #44]	; (80055b0 <HAL_RCC_OscConfig+0x288>)
 8005584:	4313      	orrs	r3, r2
 8005586:	604b      	str	r3, [r1, #4]
 8005588:	e01a      	b.n	80055c0 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800558a:	4b09      	ldr	r3, [pc, #36]	; (80055b0 <HAL_RCC_OscConfig+0x288>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a08      	ldr	r2, [pc, #32]	; (80055b0 <HAL_RCC_OscConfig+0x288>)
 8005590:	f023 0301 	bic.w	r3, r3, #1
 8005594:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005596:	f7fc f91d 	bl	80017d4 <HAL_GetTick>
 800559a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800559c:	e00a      	b.n	80055b4 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800559e:	f7fc f919 	bl	80017d4 <HAL_GetTick>
 80055a2:	4602      	mov	r2, r0
 80055a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a6:	1ad3      	subs	r3, r2, r3
 80055a8:	2b02      	cmp	r3, #2
 80055aa:	d903      	bls.n	80055b4 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80055ac:	2303      	movs	r3, #3
 80055ae:	e2c4      	b.n	8005b3a <HAL_RCC_OscConfig+0x812>
 80055b0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80055b4:	4ba4      	ldr	r3, [pc, #656]	; (8005848 <HAL_RCC_OscConfig+0x520>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f003 0304 	and.w	r3, r3, #4
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d1ee      	bne.n	800559e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f003 0310 	and.w	r3, r3, #16
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	f000 80a9 	beq.w	8005720 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055ce:	4b9e      	ldr	r3, [pc, #632]	; (8005848 <HAL_RCC_OscConfig+0x520>)
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80055d6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80055d8:	4b9b      	ldr	r3, [pc, #620]	; (8005848 <HAL_RCC_OscConfig+0x520>)
 80055da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055dc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80055de:	69bb      	ldr	r3, [r7, #24]
 80055e0:	2b08      	cmp	r3, #8
 80055e2:	d007      	beq.n	80055f4 <HAL_RCC_OscConfig+0x2cc>
 80055e4:	69bb      	ldr	r3, [r7, #24]
 80055e6:	2b18      	cmp	r3, #24
 80055e8:	d13a      	bne.n	8005660 <HAL_RCC_OscConfig+0x338>
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	f003 0303 	and.w	r3, r3, #3
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d135      	bne.n	8005660 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80055f4:	4b94      	ldr	r3, [pc, #592]	; (8005848 <HAL_RCC_OscConfig+0x520>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d005      	beq.n	800560c <HAL_RCC_OscConfig+0x2e4>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	69db      	ldr	r3, [r3, #28]
 8005604:	2b80      	cmp	r3, #128	; 0x80
 8005606:	d001      	beq.n	800560c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	e296      	b.n	8005b3a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800560c:	f7fc f910 	bl	8001830 <HAL_GetREVID>
 8005610:	4602      	mov	r2, r0
 8005612:	f241 0303 	movw	r3, #4099	; 0x1003
 8005616:	429a      	cmp	r2, r3
 8005618:	d817      	bhi.n	800564a <HAL_RCC_OscConfig+0x322>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a1b      	ldr	r3, [r3, #32]
 800561e:	2b20      	cmp	r3, #32
 8005620:	d108      	bne.n	8005634 <HAL_RCC_OscConfig+0x30c>
 8005622:	4b89      	ldr	r3, [pc, #548]	; (8005848 <HAL_RCC_OscConfig+0x520>)
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800562a:	4a87      	ldr	r2, [pc, #540]	; (8005848 <HAL_RCC_OscConfig+0x520>)
 800562c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005630:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005632:	e075      	b.n	8005720 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005634:	4b84      	ldr	r3, [pc, #528]	; (8005848 <HAL_RCC_OscConfig+0x520>)
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6a1b      	ldr	r3, [r3, #32]
 8005640:	069b      	lsls	r3, r3, #26
 8005642:	4981      	ldr	r1, [pc, #516]	; (8005848 <HAL_RCC_OscConfig+0x520>)
 8005644:	4313      	orrs	r3, r2
 8005646:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005648:	e06a      	b.n	8005720 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800564a:	4b7f      	ldr	r3, [pc, #508]	; (8005848 <HAL_RCC_OscConfig+0x520>)
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a1b      	ldr	r3, [r3, #32]
 8005656:	061b      	lsls	r3, r3, #24
 8005658:	497b      	ldr	r1, [pc, #492]	; (8005848 <HAL_RCC_OscConfig+0x520>)
 800565a:	4313      	orrs	r3, r2
 800565c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800565e:	e05f      	b.n	8005720 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	69db      	ldr	r3, [r3, #28]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d042      	beq.n	80056ee <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005668:	4b77      	ldr	r3, [pc, #476]	; (8005848 <HAL_RCC_OscConfig+0x520>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a76      	ldr	r2, [pc, #472]	; (8005848 <HAL_RCC_OscConfig+0x520>)
 800566e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005672:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005674:	f7fc f8ae 	bl	80017d4 <HAL_GetTick>
 8005678:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800567a:	e008      	b.n	800568e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800567c:	f7fc f8aa 	bl	80017d4 <HAL_GetTick>
 8005680:	4602      	mov	r2, r0
 8005682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005684:	1ad3      	subs	r3, r2, r3
 8005686:	2b02      	cmp	r3, #2
 8005688:	d901      	bls.n	800568e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800568a:	2303      	movs	r3, #3
 800568c:	e255      	b.n	8005b3a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800568e:	4b6e      	ldr	r3, [pc, #440]	; (8005848 <HAL_RCC_OscConfig+0x520>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005696:	2b00      	cmp	r3, #0
 8005698:	d0f0      	beq.n	800567c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800569a:	f7fc f8c9 	bl	8001830 <HAL_GetREVID>
 800569e:	4602      	mov	r2, r0
 80056a0:	f241 0303 	movw	r3, #4099	; 0x1003
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d817      	bhi.n	80056d8 <HAL_RCC_OscConfig+0x3b0>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6a1b      	ldr	r3, [r3, #32]
 80056ac:	2b20      	cmp	r3, #32
 80056ae:	d108      	bne.n	80056c2 <HAL_RCC_OscConfig+0x39a>
 80056b0:	4b65      	ldr	r3, [pc, #404]	; (8005848 <HAL_RCC_OscConfig+0x520>)
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80056b8:	4a63      	ldr	r2, [pc, #396]	; (8005848 <HAL_RCC_OscConfig+0x520>)
 80056ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80056be:	6053      	str	r3, [r2, #4]
 80056c0:	e02e      	b.n	8005720 <HAL_RCC_OscConfig+0x3f8>
 80056c2:	4b61      	ldr	r3, [pc, #388]	; (8005848 <HAL_RCC_OscConfig+0x520>)
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a1b      	ldr	r3, [r3, #32]
 80056ce:	069b      	lsls	r3, r3, #26
 80056d0:	495d      	ldr	r1, [pc, #372]	; (8005848 <HAL_RCC_OscConfig+0x520>)
 80056d2:	4313      	orrs	r3, r2
 80056d4:	604b      	str	r3, [r1, #4]
 80056d6:	e023      	b.n	8005720 <HAL_RCC_OscConfig+0x3f8>
 80056d8:	4b5b      	ldr	r3, [pc, #364]	; (8005848 <HAL_RCC_OscConfig+0x520>)
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6a1b      	ldr	r3, [r3, #32]
 80056e4:	061b      	lsls	r3, r3, #24
 80056e6:	4958      	ldr	r1, [pc, #352]	; (8005848 <HAL_RCC_OscConfig+0x520>)
 80056e8:	4313      	orrs	r3, r2
 80056ea:	60cb      	str	r3, [r1, #12]
 80056ec:	e018      	b.n	8005720 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80056ee:	4b56      	ldr	r3, [pc, #344]	; (8005848 <HAL_RCC_OscConfig+0x520>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a55      	ldr	r2, [pc, #340]	; (8005848 <HAL_RCC_OscConfig+0x520>)
 80056f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056fa:	f7fc f86b 	bl	80017d4 <HAL_GetTick>
 80056fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005700:	e008      	b.n	8005714 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005702:	f7fc f867 	bl	80017d4 <HAL_GetTick>
 8005706:	4602      	mov	r2, r0
 8005708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570a:	1ad3      	subs	r3, r2, r3
 800570c:	2b02      	cmp	r3, #2
 800570e:	d901      	bls.n	8005714 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8005710:	2303      	movs	r3, #3
 8005712:	e212      	b.n	8005b3a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005714:	4b4c      	ldr	r3, [pc, #304]	; (8005848 <HAL_RCC_OscConfig+0x520>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800571c:	2b00      	cmp	r3, #0
 800571e:	d1f0      	bne.n	8005702 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 0308 	and.w	r3, r3, #8
 8005728:	2b00      	cmp	r3, #0
 800572a:	d036      	beq.n	800579a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	695b      	ldr	r3, [r3, #20]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d019      	beq.n	8005768 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005734:	4b44      	ldr	r3, [pc, #272]	; (8005848 <HAL_RCC_OscConfig+0x520>)
 8005736:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005738:	4a43      	ldr	r2, [pc, #268]	; (8005848 <HAL_RCC_OscConfig+0x520>)
 800573a:	f043 0301 	orr.w	r3, r3, #1
 800573e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005740:	f7fc f848 	bl	80017d4 <HAL_GetTick>
 8005744:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005746:	e008      	b.n	800575a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005748:	f7fc f844 	bl	80017d4 <HAL_GetTick>
 800574c:	4602      	mov	r2, r0
 800574e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	2b02      	cmp	r3, #2
 8005754:	d901      	bls.n	800575a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8005756:	2303      	movs	r3, #3
 8005758:	e1ef      	b.n	8005b3a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800575a:	4b3b      	ldr	r3, [pc, #236]	; (8005848 <HAL_RCC_OscConfig+0x520>)
 800575c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800575e:	f003 0302 	and.w	r3, r3, #2
 8005762:	2b00      	cmp	r3, #0
 8005764:	d0f0      	beq.n	8005748 <HAL_RCC_OscConfig+0x420>
 8005766:	e018      	b.n	800579a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005768:	4b37      	ldr	r3, [pc, #220]	; (8005848 <HAL_RCC_OscConfig+0x520>)
 800576a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800576c:	4a36      	ldr	r2, [pc, #216]	; (8005848 <HAL_RCC_OscConfig+0x520>)
 800576e:	f023 0301 	bic.w	r3, r3, #1
 8005772:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005774:	f7fc f82e 	bl	80017d4 <HAL_GetTick>
 8005778:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800577a:	e008      	b.n	800578e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800577c:	f7fc f82a 	bl	80017d4 <HAL_GetTick>
 8005780:	4602      	mov	r2, r0
 8005782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005784:	1ad3      	subs	r3, r2, r3
 8005786:	2b02      	cmp	r3, #2
 8005788:	d901      	bls.n	800578e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800578a:	2303      	movs	r3, #3
 800578c:	e1d5      	b.n	8005b3a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800578e:	4b2e      	ldr	r3, [pc, #184]	; (8005848 <HAL_RCC_OscConfig+0x520>)
 8005790:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005792:	f003 0302 	and.w	r3, r3, #2
 8005796:	2b00      	cmp	r3, #0
 8005798:	d1f0      	bne.n	800577c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f003 0320 	and.w	r3, r3, #32
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d036      	beq.n	8005814 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	699b      	ldr	r3, [r3, #24]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d019      	beq.n	80057e2 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80057ae:	4b26      	ldr	r3, [pc, #152]	; (8005848 <HAL_RCC_OscConfig+0x520>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a25      	ldr	r2, [pc, #148]	; (8005848 <HAL_RCC_OscConfig+0x520>)
 80057b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80057b8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80057ba:	f7fc f80b 	bl	80017d4 <HAL_GetTick>
 80057be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80057c0:	e008      	b.n	80057d4 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80057c2:	f7fc f807 	bl	80017d4 <HAL_GetTick>
 80057c6:	4602      	mov	r2, r0
 80057c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ca:	1ad3      	subs	r3, r2, r3
 80057cc:	2b02      	cmp	r3, #2
 80057ce:	d901      	bls.n	80057d4 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80057d0:	2303      	movs	r3, #3
 80057d2:	e1b2      	b.n	8005b3a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80057d4:	4b1c      	ldr	r3, [pc, #112]	; (8005848 <HAL_RCC_OscConfig+0x520>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d0f0      	beq.n	80057c2 <HAL_RCC_OscConfig+0x49a>
 80057e0:	e018      	b.n	8005814 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80057e2:	4b19      	ldr	r3, [pc, #100]	; (8005848 <HAL_RCC_OscConfig+0x520>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a18      	ldr	r2, [pc, #96]	; (8005848 <HAL_RCC_OscConfig+0x520>)
 80057e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80057ec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80057ee:	f7fb fff1 	bl	80017d4 <HAL_GetTick>
 80057f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80057f4:	e008      	b.n	8005808 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80057f6:	f7fb ffed 	bl	80017d4 <HAL_GetTick>
 80057fa:	4602      	mov	r2, r0
 80057fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fe:	1ad3      	subs	r3, r2, r3
 8005800:	2b02      	cmp	r3, #2
 8005802:	d901      	bls.n	8005808 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8005804:	2303      	movs	r3, #3
 8005806:	e198      	b.n	8005b3a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005808:	4b0f      	ldr	r3, [pc, #60]	; (8005848 <HAL_RCC_OscConfig+0x520>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005810:	2b00      	cmp	r3, #0
 8005812:	d1f0      	bne.n	80057f6 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 0304 	and.w	r3, r3, #4
 800581c:	2b00      	cmp	r3, #0
 800581e:	f000 8085 	beq.w	800592c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005822:	4b0a      	ldr	r3, [pc, #40]	; (800584c <HAL_RCC_OscConfig+0x524>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a09      	ldr	r2, [pc, #36]	; (800584c <HAL_RCC_OscConfig+0x524>)
 8005828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800582c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800582e:	f7fb ffd1 	bl	80017d4 <HAL_GetTick>
 8005832:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005834:	e00c      	b.n	8005850 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005836:	f7fb ffcd 	bl	80017d4 <HAL_GetTick>
 800583a:	4602      	mov	r2, r0
 800583c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583e:	1ad3      	subs	r3, r2, r3
 8005840:	2b64      	cmp	r3, #100	; 0x64
 8005842:	d905      	bls.n	8005850 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8005844:	2303      	movs	r3, #3
 8005846:	e178      	b.n	8005b3a <HAL_RCC_OscConfig+0x812>
 8005848:	58024400 	.word	0x58024400
 800584c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005850:	4b96      	ldr	r3, [pc, #600]	; (8005aac <HAL_RCC_OscConfig+0x784>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005858:	2b00      	cmp	r3, #0
 800585a:	d0ec      	beq.n	8005836 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	2b01      	cmp	r3, #1
 8005862:	d106      	bne.n	8005872 <HAL_RCC_OscConfig+0x54a>
 8005864:	4b92      	ldr	r3, [pc, #584]	; (8005ab0 <HAL_RCC_OscConfig+0x788>)
 8005866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005868:	4a91      	ldr	r2, [pc, #580]	; (8005ab0 <HAL_RCC_OscConfig+0x788>)
 800586a:	f043 0301 	orr.w	r3, r3, #1
 800586e:	6713      	str	r3, [r2, #112]	; 0x70
 8005870:	e02d      	b.n	80058ce <HAL_RCC_OscConfig+0x5a6>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d10c      	bne.n	8005894 <HAL_RCC_OscConfig+0x56c>
 800587a:	4b8d      	ldr	r3, [pc, #564]	; (8005ab0 <HAL_RCC_OscConfig+0x788>)
 800587c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800587e:	4a8c      	ldr	r2, [pc, #560]	; (8005ab0 <HAL_RCC_OscConfig+0x788>)
 8005880:	f023 0301 	bic.w	r3, r3, #1
 8005884:	6713      	str	r3, [r2, #112]	; 0x70
 8005886:	4b8a      	ldr	r3, [pc, #552]	; (8005ab0 <HAL_RCC_OscConfig+0x788>)
 8005888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800588a:	4a89      	ldr	r2, [pc, #548]	; (8005ab0 <HAL_RCC_OscConfig+0x788>)
 800588c:	f023 0304 	bic.w	r3, r3, #4
 8005890:	6713      	str	r3, [r2, #112]	; 0x70
 8005892:	e01c      	b.n	80058ce <HAL_RCC_OscConfig+0x5a6>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	2b05      	cmp	r3, #5
 800589a:	d10c      	bne.n	80058b6 <HAL_RCC_OscConfig+0x58e>
 800589c:	4b84      	ldr	r3, [pc, #528]	; (8005ab0 <HAL_RCC_OscConfig+0x788>)
 800589e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058a0:	4a83      	ldr	r2, [pc, #524]	; (8005ab0 <HAL_RCC_OscConfig+0x788>)
 80058a2:	f043 0304 	orr.w	r3, r3, #4
 80058a6:	6713      	str	r3, [r2, #112]	; 0x70
 80058a8:	4b81      	ldr	r3, [pc, #516]	; (8005ab0 <HAL_RCC_OscConfig+0x788>)
 80058aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ac:	4a80      	ldr	r2, [pc, #512]	; (8005ab0 <HAL_RCC_OscConfig+0x788>)
 80058ae:	f043 0301 	orr.w	r3, r3, #1
 80058b2:	6713      	str	r3, [r2, #112]	; 0x70
 80058b4:	e00b      	b.n	80058ce <HAL_RCC_OscConfig+0x5a6>
 80058b6:	4b7e      	ldr	r3, [pc, #504]	; (8005ab0 <HAL_RCC_OscConfig+0x788>)
 80058b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ba:	4a7d      	ldr	r2, [pc, #500]	; (8005ab0 <HAL_RCC_OscConfig+0x788>)
 80058bc:	f023 0301 	bic.w	r3, r3, #1
 80058c0:	6713      	str	r3, [r2, #112]	; 0x70
 80058c2:	4b7b      	ldr	r3, [pc, #492]	; (8005ab0 <HAL_RCC_OscConfig+0x788>)
 80058c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058c6:	4a7a      	ldr	r2, [pc, #488]	; (8005ab0 <HAL_RCC_OscConfig+0x788>)
 80058c8:	f023 0304 	bic.w	r3, r3, #4
 80058cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d015      	beq.n	8005902 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058d6:	f7fb ff7d 	bl	80017d4 <HAL_GetTick>
 80058da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80058dc:	e00a      	b.n	80058f4 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058de:	f7fb ff79 	bl	80017d4 <HAL_GetTick>
 80058e2:	4602      	mov	r2, r0
 80058e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e6:	1ad3      	subs	r3, r2, r3
 80058e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d901      	bls.n	80058f4 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80058f0:	2303      	movs	r3, #3
 80058f2:	e122      	b.n	8005b3a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80058f4:	4b6e      	ldr	r3, [pc, #440]	; (8005ab0 <HAL_RCC_OscConfig+0x788>)
 80058f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058f8:	f003 0302 	and.w	r3, r3, #2
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d0ee      	beq.n	80058de <HAL_RCC_OscConfig+0x5b6>
 8005900:	e014      	b.n	800592c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005902:	f7fb ff67 	bl	80017d4 <HAL_GetTick>
 8005906:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005908:	e00a      	b.n	8005920 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800590a:	f7fb ff63 	bl	80017d4 <HAL_GetTick>
 800590e:	4602      	mov	r2, r0
 8005910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005912:	1ad3      	subs	r3, r2, r3
 8005914:	f241 3288 	movw	r2, #5000	; 0x1388
 8005918:	4293      	cmp	r3, r2
 800591a:	d901      	bls.n	8005920 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 800591c:	2303      	movs	r3, #3
 800591e:	e10c      	b.n	8005b3a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005920:	4b63      	ldr	r3, [pc, #396]	; (8005ab0 <HAL_RCC_OscConfig+0x788>)
 8005922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005924:	f003 0302 	and.w	r3, r3, #2
 8005928:	2b00      	cmp	r3, #0
 800592a:	d1ee      	bne.n	800590a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005930:	2b00      	cmp	r3, #0
 8005932:	f000 8101 	beq.w	8005b38 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005936:	4b5e      	ldr	r3, [pc, #376]	; (8005ab0 <HAL_RCC_OscConfig+0x788>)
 8005938:	691b      	ldr	r3, [r3, #16]
 800593a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800593e:	2b18      	cmp	r3, #24
 8005940:	f000 80bc 	beq.w	8005abc <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005948:	2b02      	cmp	r3, #2
 800594a:	f040 8095 	bne.w	8005a78 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800594e:	4b58      	ldr	r3, [pc, #352]	; (8005ab0 <HAL_RCC_OscConfig+0x788>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a57      	ldr	r2, [pc, #348]	; (8005ab0 <HAL_RCC_OscConfig+0x788>)
 8005954:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005958:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800595a:	f7fb ff3b 	bl	80017d4 <HAL_GetTick>
 800595e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005960:	e008      	b.n	8005974 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005962:	f7fb ff37 	bl	80017d4 <HAL_GetTick>
 8005966:	4602      	mov	r2, r0
 8005968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596a:	1ad3      	subs	r3, r2, r3
 800596c:	2b02      	cmp	r3, #2
 800596e:	d901      	bls.n	8005974 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8005970:	2303      	movs	r3, #3
 8005972:	e0e2      	b.n	8005b3a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005974:	4b4e      	ldr	r3, [pc, #312]	; (8005ab0 <HAL_RCC_OscConfig+0x788>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800597c:	2b00      	cmp	r3, #0
 800597e:	d1f0      	bne.n	8005962 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005980:	4b4b      	ldr	r3, [pc, #300]	; (8005ab0 <HAL_RCC_OscConfig+0x788>)
 8005982:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005984:	4b4b      	ldr	r3, [pc, #300]	; (8005ab4 <HAL_RCC_OscConfig+0x78c>)
 8005986:	4013      	ands	r3, r2
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005990:	0112      	lsls	r2, r2, #4
 8005992:	430a      	orrs	r2, r1
 8005994:	4946      	ldr	r1, [pc, #280]	; (8005ab0 <HAL_RCC_OscConfig+0x788>)
 8005996:	4313      	orrs	r3, r2
 8005998:	628b      	str	r3, [r1, #40]	; 0x28
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800599e:	3b01      	subs	r3, #1
 80059a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059a8:	3b01      	subs	r3, #1
 80059aa:	025b      	lsls	r3, r3, #9
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	431a      	orrs	r2, r3
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b4:	3b01      	subs	r3, #1
 80059b6:	041b      	lsls	r3, r3, #16
 80059b8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80059bc:	431a      	orrs	r2, r3
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059c2:	3b01      	subs	r3, #1
 80059c4:	061b      	lsls	r3, r3, #24
 80059c6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80059ca:	4939      	ldr	r1, [pc, #228]	; (8005ab0 <HAL_RCC_OscConfig+0x788>)
 80059cc:	4313      	orrs	r3, r2
 80059ce:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80059d0:	4b37      	ldr	r3, [pc, #220]	; (8005ab0 <HAL_RCC_OscConfig+0x788>)
 80059d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d4:	4a36      	ldr	r2, [pc, #216]	; (8005ab0 <HAL_RCC_OscConfig+0x788>)
 80059d6:	f023 0301 	bic.w	r3, r3, #1
 80059da:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80059dc:	4b34      	ldr	r3, [pc, #208]	; (8005ab0 <HAL_RCC_OscConfig+0x788>)
 80059de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059e0:	4b35      	ldr	r3, [pc, #212]	; (8005ab8 <HAL_RCC_OscConfig+0x790>)
 80059e2:	4013      	ands	r3, r2
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80059e8:	00d2      	lsls	r2, r2, #3
 80059ea:	4931      	ldr	r1, [pc, #196]	; (8005ab0 <HAL_RCC_OscConfig+0x788>)
 80059ec:	4313      	orrs	r3, r2
 80059ee:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80059f0:	4b2f      	ldr	r3, [pc, #188]	; (8005ab0 <HAL_RCC_OscConfig+0x788>)
 80059f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f4:	f023 020c 	bic.w	r2, r3, #12
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059fc:	492c      	ldr	r1, [pc, #176]	; (8005ab0 <HAL_RCC_OscConfig+0x788>)
 80059fe:	4313      	orrs	r3, r2
 8005a00:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005a02:	4b2b      	ldr	r3, [pc, #172]	; (8005ab0 <HAL_RCC_OscConfig+0x788>)
 8005a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a06:	f023 0202 	bic.w	r2, r3, #2
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a0e:	4928      	ldr	r1, [pc, #160]	; (8005ab0 <HAL_RCC_OscConfig+0x788>)
 8005a10:	4313      	orrs	r3, r2
 8005a12:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005a14:	4b26      	ldr	r3, [pc, #152]	; (8005ab0 <HAL_RCC_OscConfig+0x788>)
 8005a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a18:	4a25      	ldr	r2, [pc, #148]	; (8005ab0 <HAL_RCC_OscConfig+0x788>)
 8005a1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a20:	4b23      	ldr	r3, [pc, #140]	; (8005ab0 <HAL_RCC_OscConfig+0x788>)
 8005a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a24:	4a22      	ldr	r2, [pc, #136]	; (8005ab0 <HAL_RCC_OscConfig+0x788>)
 8005a26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a2a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005a2c:	4b20      	ldr	r3, [pc, #128]	; (8005ab0 <HAL_RCC_OscConfig+0x788>)
 8005a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a30:	4a1f      	ldr	r2, [pc, #124]	; (8005ab0 <HAL_RCC_OscConfig+0x788>)
 8005a32:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005a38:	4b1d      	ldr	r3, [pc, #116]	; (8005ab0 <HAL_RCC_OscConfig+0x788>)
 8005a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a3c:	4a1c      	ldr	r2, [pc, #112]	; (8005ab0 <HAL_RCC_OscConfig+0x788>)
 8005a3e:	f043 0301 	orr.w	r3, r3, #1
 8005a42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a44:	4b1a      	ldr	r3, [pc, #104]	; (8005ab0 <HAL_RCC_OscConfig+0x788>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a19      	ldr	r2, [pc, #100]	; (8005ab0 <HAL_RCC_OscConfig+0x788>)
 8005a4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a50:	f7fb fec0 	bl	80017d4 <HAL_GetTick>
 8005a54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005a56:	e008      	b.n	8005a6a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a58:	f7fb febc 	bl	80017d4 <HAL_GetTick>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a60:	1ad3      	subs	r3, r2, r3
 8005a62:	2b02      	cmp	r3, #2
 8005a64:	d901      	bls.n	8005a6a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8005a66:	2303      	movs	r3, #3
 8005a68:	e067      	b.n	8005b3a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005a6a:	4b11      	ldr	r3, [pc, #68]	; (8005ab0 <HAL_RCC_OscConfig+0x788>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d0f0      	beq.n	8005a58 <HAL_RCC_OscConfig+0x730>
 8005a76:	e05f      	b.n	8005b38 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a78:	4b0d      	ldr	r3, [pc, #52]	; (8005ab0 <HAL_RCC_OscConfig+0x788>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a0c      	ldr	r2, [pc, #48]	; (8005ab0 <HAL_RCC_OscConfig+0x788>)
 8005a7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a84:	f7fb fea6 	bl	80017d4 <HAL_GetTick>
 8005a88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005a8a:	e008      	b.n	8005a9e <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a8c:	f7fb fea2 	bl	80017d4 <HAL_GetTick>
 8005a90:	4602      	mov	r2, r0
 8005a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a94:	1ad3      	subs	r3, r2, r3
 8005a96:	2b02      	cmp	r3, #2
 8005a98:	d901      	bls.n	8005a9e <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8005a9a:	2303      	movs	r3, #3
 8005a9c:	e04d      	b.n	8005b3a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005a9e:	4b04      	ldr	r3, [pc, #16]	; (8005ab0 <HAL_RCC_OscConfig+0x788>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d1f0      	bne.n	8005a8c <HAL_RCC_OscConfig+0x764>
 8005aaa:	e045      	b.n	8005b38 <HAL_RCC_OscConfig+0x810>
 8005aac:	58024800 	.word	0x58024800
 8005ab0:	58024400 	.word	0x58024400
 8005ab4:	fffffc0c 	.word	0xfffffc0c
 8005ab8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005abc:	4b21      	ldr	r3, [pc, #132]	; (8005b44 <HAL_RCC_OscConfig+0x81c>)
 8005abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ac0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005ac2:	4b20      	ldr	r3, [pc, #128]	; (8005b44 <HAL_RCC_OscConfig+0x81c>)
 8005ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d031      	beq.n	8005b34 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	f003 0203 	and.w	r2, r3, #3
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d12a      	bne.n	8005b34 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	091b      	lsrs	r3, r3, #4
 8005ae2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d122      	bne.n	8005b34 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005af8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d11a      	bne.n	8005b34 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	0a5b      	lsrs	r3, r3, #9
 8005b02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b0a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d111      	bne.n	8005b34 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	0c1b      	lsrs	r3, r3, #16
 8005b14:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b1c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d108      	bne.n	8005b34 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	0e1b      	lsrs	r3, r3, #24
 8005b26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b2e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d001      	beq.n	8005b38 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8005b34:	2301      	movs	r3, #1
 8005b36:	e000      	b.n	8005b3a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8005b38:	2300      	movs	r3, #0
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3730      	adds	r7, #48	; 0x30
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
 8005b42:	bf00      	nop
 8005b44:	58024400 	.word	0x58024400

08005b48 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b086      	sub	sp, #24
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d101      	bne.n	8005b5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	e19c      	b.n	8005e96 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b5c:	4b8a      	ldr	r3, [pc, #552]	; (8005d88 <HAL_RCC_ClockConfig+0x240>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f003 030f 	and.w	r3, r3, #15
 8005b64:	683a      	ldr	r2, [r7, #0]
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d910      	bls.n	8005b8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b6a:	4b87      	ldr	r3, [pc, #540]	; (8005d88 <HAL_RCC_ClockConfig+0x240>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f023 020f 	bic.w	r2, r3, #15
 8005b72:	4985      	ldr	r1, [pc, #532]	; (8005d88 <HAL_RCC_ClockConfig+0x240>)
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b7a:	4b83      	ldr	r3, [pc, #524]	; (8005d88 <HAL_RCC_ClockConfig+0x240>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f003 030f 	and.w	r3, r3, #15
 8005b82:	683a      	ldr	r2, [r7, #0]
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d001      	beq.n	8005b8c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e184      	b.n	8005e96 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 0304 	and.w	r3, r3, #4
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d010      	beq.n	8005bba <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	691a      	ldr	r2, [r3, #16]
 8005b9c:	4b7b      	ldr	r3, [pc, #492]	; (8005d8c <HAL_RCC_ClockConfig+0x244>)
 8005b9e:	699b      	ldr	r3, [r3, #24]
 8005ba0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d908      	bls.n	8005bba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005ba8:	4b78      	ldr	r3, [pc, #480]	; (8005d8c <HAL_RCC_ClockConfig+0x244>)
 8005baa:	699b      	ldr	r3, [r3, #24]
 8005bac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	691b      	ldr	r3, [r3, #16]
 8005bb4:	4975      	ldr	r1, [pc, #468]	; (8005d8c <HAL_RCC_ClockConfig+0x244>)
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f003 0308 	and.w	r3, r3, #8
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d010      	beq.n	8005be8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	695a      	ldr	r2, [r3, #20]
 8005bca:	4b70      	ldr	r3, [pc, #448]	; (8005d8c <HAL_RCC_ClockConfig+0x244>)
 8005bcc:	69db      	ldr	r3, [r3, #28]
 8005bce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d908      	bls.n	8005be8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005bd6:	4b6d      	ldr	r3, [pc, #436]	; (8005d8c <HAL_RCC_ClockConfig+0x244>)
 8005bd8:	69db      	ldr	r3, [r3, #28]
 8005bda:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	695b      	ldr	r3, [r3, #20]
 8005be2:	496a      	ldr	r1, [pc, #424]	; (8005d8c <HAL_RCC_ClockConfig+0x244>)
 8005be4:	4313      	orrs	r3, r2
 8005be6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 0310 	and.w	r3, r3, #16
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d010      	beq.n	8005c16 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	699a      	ldr	r2, [r3, #24]
 8005bf8:	4b64      	ldr	r3, [pc, #400]	; (8005d8c <HAL_RCC_ClockConfig+0x244>)
 8005bfa:	69db      	ldr	r3, [r3, #28]
 8005bfc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d908      	bls.n	8005c16 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005c04:	4b61      	ldr	r3, [pc, #388]	; (8005d8c <HAL_RCC_ClockConfig+0x244>)
 8005c06:	69db      	ldr	r3, [r3, #28]
 8005c08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	699b      	ldr	r3, [r3, #24]
 8005c10:	495e      	ldr	r1, [pc, #376]	; (8005d8c <HAL_RCC_ClockConfig+0x244>)
 8005c12:	4313      	orrs	r3, r2
 8005c14:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 0320 	and.w	r3, r3, #32
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d010      	beq.n	8005c44 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	69da      	ldr	r2, [r3, #28]
 8005c26:	4b59      	ldr	r3, [pc, #356]	; (8005d8c <HAL_RCC_ClockConfig+0x244>)
 8005c28:	6a1b      	ldr	r3, [r3, #32]
 8005c2a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d908      	bls.n	8005c44 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005c32:	4b56      	ldr	r3, [pc, #344]	; (8005d8c <HAL_RCC_ClockConfig+0x244>)
 8005c34:	6a1b      	ldr	r3, [r3, #32]
 8005c36:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	69db      	ldr	r3, [r3, #28]
 8005c3e:	4953      	ldr	r1, [pc, #332]	; (8005d8c <HAL_RCC_ClockConfig+0x244>)
 8005c40:	4313      	orrs	r3, r2
 8005c42:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f003 0302 	and.w	r3, r3, #2
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d010      	beq.n	8005c72 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	68da      	ldr	r2, [r3, #12]
 8005c54:	4b4d      	ldr	r3, [pc, #308]	; (8005d8c <HAL_RCC_ClockConfig+0x244>)
 8005c56:	699b      	ldr	r3, [r3, #24]
 8005c58:	f003 030f 	and.w	r3, r3, #15
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d908      	bls.n	8005c72 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c60:	4b4a      	ldr	r3, [pc, #296]	; (8005d8c <HAL_RCC_ClockConfig+0x244>)
 8005c62:	699b      	ldr	r3, [r3, #24]
 8005c64:	f023 020f 	bic.w	r2, r3, #15
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	4947      	ldr	r1, [pc, #284]	; (8005d8c <HAL_RCC_ClockConfig+0x244>)
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f003 0301 	and.w	r3, r3, #1
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d055      	beq.n	8005d2a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005c7e:	4b43      	ldr	r3, [pc, #268]	; (8005d8c <HAL_RCC_ClockConfig+0x244>)
 8005c80:	699b      	ldr	r3, [r3, #24]
 8005c82:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	4940      	ldr	r1, [pc, #256]	; (8005d8c <HAL_RCC_ClockConfig+0x244>)
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	2b02      	cmp	r3, #2
 8005c96:	d107      	bne.n	8005ca8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005c98:	4b3c      	ldr	r3, [pc, #240]	; (8005d8c <HAL_RCC_ClockConfig+0x244>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d121      	bne.n	8005ce8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	e0f6      	b.n	8005e96 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	2b03      	cmp	r3, #3
 8005cae:	d107      	bne.n	8005cc0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005cb0:	4b36      	ldr	r3, [pc, #216]	; (8005d8c <HAL_RCC_ClockConfig+0x244>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d115      	bne.n	8005ce8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	e0ea      	b.n	8005e96 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d107      	bne.n	8005cd8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005cc8:	4b30      	ldr	r3, [pc, #192]	; (8005d8c <HAL_RCC_ClockConfig+0x244>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d109      	bne.n	8005ce8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	e0de      	b.n	8005e96 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005cd8:	4b2c      	ldr	r3, [pc, #176]	; (8005d8c <HAL_RCC_ClockConfig+0x244>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 0304 	and.w	r3, r3, #4
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d101      	bne.n	8005ce8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e0d6      	b.n	8005e96 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005ce8:	4b28      	ldr	r3, [pc, #160]	; (8005d8c <HAL_RCC_ClockConfig+0x244>)
 8005cea:	691b      	ldr	r3, [r3, #16]
 8005cec:	f023 0207 	bic.w	r2, r3, #7
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	4925      	ldr	r1, [pc, #148]	; (8005d8c <HAL_RCC_ClockConfig+0x244>)
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cfa:	f7fb fd6b 	bl	80017d4 <HAL_GetTick>
 8005cfe:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d00:	e00a      	b.n	8005d18 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d02:	f7fb fd67 	bl	80017d4 <HAL_GetTick>
 8005d06:	4602      	mov	r2, r0
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	1ad3      	subs	r3, r2, r3
 8005d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d901      	bls.n	8005d18 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005d14:	2303      	movs	r3, #3
 8005d16:	e0be      	b.n	8005e96 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d18:	4b1c      	ldr	r3, [pc, #112]	; (8005d8c <HAL_RCC_ClockConfig+0x244>)
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	00db      	lsls	r3, r3, #3
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d1eb      	bne.n	8005d02 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f003 0302 	and.w	r3, r3, #2
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d010      	beq.n	8005d58 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	68da      	ldr	r2, [r3, #12]
 8005d3a:	4b14      	ldr	r3, [pc, #80]	; (8005d8c <HAL_RCC_ClockConfig+0x244>)
 8005d3c:	699b      	ldr	r3, [r3, #24]
 8005d3e:	f003 030f 	and.w	r3, r3, #15
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d208      	bcs.n	8005d58 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d46:	4b11      	ldr	r3, [pc, #68]	; (8005d8c <HAL_RCC_ClockConfig+0x244>)
 8005d48:	699b      	ldr	r3, [r3, #24]
 8005d4a:	f023 020f 	bic.w	r2, r3, #15
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	490e      	ldr	r1, [pc, #56]	; (8005d8c <HAL_RCC_ClockConfig+0x244>)
 8005d54:	4313      	orrs	r3, r2
 8005d56:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d58:	4b0b      	ldr	r3, [pc, #44]	; (8005d88 <HAL_RCC_ClockConfig+0x240>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f003 030f 	and.w	r3, r3, #15
 8005d60:	683a      	ldr	r2, [r7, #0]
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d214      	bcs.n	8005d90 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d66:	4b08      	ldr	r3, [pc, #32]	; (8005d88 <HAL_RCC_ClockConfig+0x240>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f023 020f 	bic.w	r2, r3, #15
 8005d6e:	4906      	ldr	r1, [pc, #24]	; (8005d88 <HAL_RCC_ClockConfig+0x240>)
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d76:	4b04      	ldr	r3, [pc, #16]	; (8005d88 <HAL_RCC_ClockConfig+0x240>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f003 030f 	and.w	r3, r3, #15
 8005d7e:	683a      	ldr	r2, [r7, #0]
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d005      	beq.n	8005d90 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	e086      	b.n	8005e96 <HAL_RCC_ClockConfig+0x34e>
 8005d88:	52002000 	.word	0x52002000
 8005d8c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f003 0304 	and.w	r3, r3, #4
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d010      	beq.n	8005dbe <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	691a      	ldr	r2, [r3, #16]
 8005da0:	4b3f      	ldr	r3, [pc, #252]	; (8005ea0 <HAL_RCC_ClockConfig+0x358>)
 8005da2:	699b      	ldr	r3, [r3, #24]
 8005da4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d208      	bcs.n	8005dbe <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005dac:	4b3c      	ldr	r3, [pc, #240]	; (8005ea0 <HAL_RCC_ClockConfig+0x358>)
 8005dae:	699b      	ldr	r3, [r3, #24]
 8005db0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	691b      	ldr	r3, [r3, #16]
 8005db8:	4939      	ldr	r1, [pc, #228]	; (8005ea0 <HAL_RCC_ClockConfig+0x358>)
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f003 0308 	and.w	r3, r3, #8
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d010      	beq.n	8005dec <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	695a      	ldr	r2, [r3, #20]
 8005dce:	4b34      	ldr	r3, [pc, #208]	; (8005ea0 <HAL_RCC_ClockConfig+0x358>)
 8005dd0:	69db      	ldr	r3, [r3, #28]
 8005dd2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d208      	bcs.n	8005dec <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005dda:	4b31      	ldr	r3, [pc, #196]	; (8005ea0 <HAL_RCC_ClockConfig+0x358>)
 8005ddc:	69db      	ldr	r3, [r3, #28]
 8005dde:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	695b      	ldr	r3, [r3, #20]
 8005de6:	492e      	ldr	r1, [pc, #184]	; (8005ea0 <HAL_RCC_ClockConfig+0x358>)
 8005de8:	4313      	orrs	r3, r2
 8005dea:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f003 0310 	and.w	r3, r3, #16
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d010      	beq.n	8005e1a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	699a      	ldr	r2, [r3, #24]
 8005dfc:	4b28      	ldr	r3, [pc, #160]	; (8005ea0 <HAL_RCC_ClockConfig+0x358>)
 8005dfe:	69db      	ldr	r3, [r3, #28]
 8005e00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d208      	bcs.n	8005e1a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005e08:	4b25      	ldr	r3, [pc, #148]	; (8005ea0 <HAL_RCC_ClockConfig+0x358>)
 8005e0a:	69db      	ldr	r3, [r3, #28]
 8005e0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	699b      	ldr	r3, [r3, #24]
 8005e14:	4922      	ldr	r1, [pc, #136]	; (8005ea0 <HAL_RCC_ClockConfig+0x358>)
 8005e16:	4313      	orrs	r3, r2
 8005e18:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f003 0320 	and.w	r3, r3, #32
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d010      	beq.n	8005e48 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	69da      	ldr	r2, [r3, #28]
 8005e2a:	4b1d      	ldr	r3, [pc, #116]	; (8005ea0 <HAL_RCC_ClockConfig+0x358>)
 8005e2c:	6a1b      	ldr	r3, [r3, #32]
 8005e2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e32:	429a      	cmp	r2, r3
 8005e34:	d208      	bcs.n	8005e48 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005e36:	4b1a      	ldr	r3, [pc, #104]	; (8005ea0 <HAL_RCC_ClockConfig+0x358>)
 8005e38:	6a1b      	ldr	r3, [r3, #32]
 8005e3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	69db      	ldr	r3, [r3, #28]
 8005e42:	4917      	ldr	r1, [pc, #92]	; (8005ea0 <HAL_RCC_ClockConfig+0x358>)
 8005e44:	4313      	orrs	r3, r2
 8005e46:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005e48:	f000 f844 	bl	8005ed4 <HAL_RCC_GetSysClockFreq>
 8005e4c:	4601      	mov	r1, r0
 8005e4e:	4b14      	ldr	r3, [pc, #80]	; (8005ea0 <HAL_RCC_ClockConfig+0x358>)
 8005e50:	699b      	ldr	r3, [r3, #24]
 8005e52:	0a1b      	lsrs	r3, r3, #8
 8005e54:	f003 030f 	and.w	r3, r3, #15
 8005e58:	4a12      	ldr	r2, [pc, #72]	; (8005ea4 <HAL_RCC_ClockConfig+0x35c>)
 8005e5a:	5cd3      	ldrb	r3, [r2, r3]
 8005e5c:	f003 031f 	and.w	r3, r3, #31
 8005e60:	fa21 f303 	lsr.w	r3, r1, r3
 8005e64:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005e66:	4b0e      	ldr	r3, [pc, #56]	; (8005ea0 <HAL_RCC_ClockConfig+0x358>)
 8005e68:	699b      	ldr	r3, [r3, #24]
 8005e6a:	f003 030f 	and.w	r3, r3, #15
 8005e6e:	4a0d      	ldr	r2, [pc, #52]	; (8005ea4 <HAL_RCC_ClockConfig+0x35c>)
 8005e70:	5cd3      	ldrb	r3, [r2, r3]
 8005e72:	f003 031f 	and.w	r3, r3, #31
 8005e76:	693a      	ldr	r2, [r7, #16]
 8005e78:	fa22 f303 	lsr.w	r3, r2, r3
 8005e7c:	4a0a      	ldr	r2, [pc, #40]	; (8005ea8 <HAL_RCC_ClockConfig+0x360>)
 8005e7e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005e80:	4a0a      	ldr	r2, [pc, #40]	; (8005eac <HAL_RCC_ClockConfig+0x364>)
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005e86:	4b0a      	ldr	r3, [pc, #40]	; (8005eb0 <HAL_RCC_ClockConfig+0x368>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f7fb fc58 	bl	8001740 <HAL_InitTick>
 8005e90:	4603      	mov	r3, r0
 8005e92:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3718      	adds	r7, #24
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
 8005e9e:	bf00      	nop
 8005ea0:	58024400 	.word	0x58024400
 8005ea4:	08013778 	.word	0x08013778
 8005ea8:	24000004 	.word	0x24000004
 8005eac:	24000000 	.word	0x24000000
 8005eb0:	24000008 	.word	0x24000008

08005eb4 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 8005eb8:	4b05      	ldr	r3, [pc, #20]	; (8005ed0 <HAL_RCC_EnableCSS+0x1c>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a04      	ldr	r2, [pc, #16]	; (8005ed0 <HAL_RCC_EnableCSS+0x1c>)
 8005ebe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ec2:	6013      	str	r3, [r2, #0]
}
 8005ec4:	bf00      	nop
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr
 8005ece:	bf00      	nop
 8005ed0:	58024400 	.word	0x58024400

08005ed4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b089      	sub	sp, #36	; 0x24
 8005ed8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005eda:	4baf      	ldr	r3, [pc, #700]	; (8006198 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005edc:	691b      	ldr	r3, [r3, #16]
 8005ede:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ee2:	2b18      	cmp	r3, #24
 8005ee4:	f200 814e 	bhi.w	8006184 <HAL_RCC_GetSysClockFreq+0x2b0>
 8005ee8:	a201      	add	r2, pc, #4	; (adr r2, 8005ef0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eee:	bf00      	nop
 8005ef0:	08005f55 	.word	0x08005f55
 8005ef4:	08006185 	.word	0x08006185
 8005ef8:	08006185 	.word	0x08006185
 8005efc:	08006185 	.word	0x08006185
 8005f00:	08006185 	.word	0x08006185
 8005f04:	08006185 	.word	0x08006185
 8005f08:	08006185 	.word	0x08006185
 8005f0c:	08006185 	.word	0x08006185
 8005f10:	08005f7b 	.word	0x08005f7b
 8005f14:	08006185 	.word	0x08006185
 8005f18:	08006185 	.word	0x08006185
 8005f1c:	08006185 	.word	0x08006185
 8005f20:	08006185 	.word	0x08006185
 8005f24:	08006185 	.word	0x08006185
 8005f28:	08006185 	.word	0x08006185
 8005f2c:	08006185 	.word	0x08006185
 8005f30:	08005f81 	.word	0x08005f81
 8005f34:	08006185 	.word	0x08006185
 8005f38:	08006185 	.word	0x08006185
 8005f3c:	08006185 	.word	0x08006185
 8005f40:	08006185 	.word	0x08006185
 8005f44:	08006185 	.word	0x08006185
 8005f48:	08006185 	.word	0x08006185
 8005f4c:	08006185 	.word	0x08006185
 8005f50:	08005f87 	.word	0x08005f87
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f54:	4b90      	ldr	r3, [pc, #576]	; (8006198 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f003 0320 	and.w	r3, r3, #32
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d009      	beq.n	8005f74 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005f60:	4b8d      	ldr	r3, [pc, #564]	; (8006198 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	08db      	lsrs	r3, r3, #3
 8005f66:	f003 0303 	and.w	r3, r3, #3
 8005f6a:	4a8c      	ldr	r2, [pc, #560]	; (800619c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005f6c:	fa22 f303 	lsr.w	r3, r2, r3
 8005f70:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005f72:	e10a      	b.n	800618a <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005f74:	4b89      	ldr	r3, [pc, #548]	; (800619c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005f76:	61bb      	str	r3, [r7, #24]
    break;
 8005f78:	e107      	b.n	800618a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005f7a:	4b89      	ldr	r3, [pc, #548]	; (80061a0 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8005f7c:	61bb      	str	r3, [r7, #24]
    break;
 8005f7e:	e104      	b.n	800618a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005f80:	4b88      	ldr	r3, [pc, #544]	; (80061a4 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8005f82:	61bb      	str	r3, [r7, #24]
    break;
 8005f84:	e101      	b.n	800618a <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005f86:	4b84      	ldr	r3, [pc, #528]	; (8006198 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f8a:	f003 0303 	and.w	r3, r3, #3
 8005f8e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005f90:	4b81      	ldr	r3, [pc, #516]	; (8006198 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f94:	091b      	lsrs	r3, r3, #4
 8005f96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f9a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005f9c:	4b7e      	ldr	r3, [pc, #504]	; (8006198 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa0:	f003 0301 	and.w	r3, r3, #1
 8005fa4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005fa6:	4b7c      	ldr	r3, [pc, #496]	; (8006198 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005faa:	08db      	lsrs	r3, r3, #3
 8005fac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005fb0:	68fa      	ldr	r2, [r7, #12]
 8005fb2:	fb02 f303 	mul.w	r3, r2, r3
 8005fb6:	ee07 3a90 	vmov	s15, r3
 8005fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fbe:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	f000 80da 	beq.w	800617e <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d05a      	beq.n	8006086 <HAL_RCC_GetSysClockFreq+0x1b2>
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d302      	bcc.n	8005fda <HAL_RCC_GetSysClockFreq+0x106>
 8005fd4:	2b02      	cmp	r3, #2
 8005fd6:	d078      	beq.n	80060ca <HAL_RCC_GetSysClockFreq+0x1f6>
 8005fd8:	e099      	b.n	800610e <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005fda:	4b6f      	ldr	r3, [pc, #444]	; (8006198 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f003 0320 	and.w	r3, r3, #32
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d02d      	beq.n	8006042 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005fe6:	4b6c      	ldr	r3, [pc, #432]	; (8006198 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	08db      	lsrs	r3, r3, #3
 8005fec:	f003 0303 	and.w	r3, r3, #3
 8005ff0:	4a6a      	ldr	r2, [pc, #424]	; (800619c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005ff2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ff6:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	ee07 3a90 	vmov	s15, r3
 8005ffe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	ee07 3a90 	vmov	s15, r3
 8006008:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800600c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006010:	4b61      	ldr	r3, [pc, #388]	; (8006198 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006014:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006018:	ee07 3a90 	vmov	s15, r3
 800601c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006020:	ed97 6a02 	vldr	s12, [r7, #8]
 8006024:	eddf 5a60 	vldr	s11, [pc, #384]	; 80061a8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006028:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800602c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006030:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006034:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006038:	ee67 7a27 	vmul.f32	s15, s14, s15
 800603c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006040:	e087      	b.n	8006152 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	ee07 3a90 	vmov	s15, r3
 8006048:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800604c:	eddf 6a57 	vldr	s13, [pc, #348]	; 80061ac <HAL_RCC_GetSysClockFreq+0x2d8>
 8006050:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006054:	4b50      	ldr	r3, [pc, #320]	; (8006198 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006058:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800605c:	ee07 3a90 	vmov	s15, r3
 8006060:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006064:	ed97 6a02 	vldr	s12, [r7, #8]
 8006068:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80061a8 <HAL_RCC_GetSysClockFreq+0x2d4>
 800606c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006070:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006074:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006078:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800607c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006080:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006084:	e065      	b.n	8006152 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	ee07 3a90 	vmov	s15, r3
 800608c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006090:	eddf 6a47 	vldr	s13, [pc, #284]	; 80061b0 <HAL_RCC_GetSysClockFreq+0x2dc>
 8006094:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006098:	4b3f      	ldr	r3, [pc, #252]	; (8006198 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800609a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800609c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060a0:	ee07 3a90 	vmov	s15, r3
 80060a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060a8:	ed97 6a02 	vldr	s12, [r7, #8]
 80060ac:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80061a8 <HAL_RCC_GetSysClockFreq+0x2d4>
 80060b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060c4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060c8:	e043      	b.n	8006152 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	ee07 3a90 	vmov	s15, r3
 80060d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060d4:	eddf 6a37 	vldr	s13, [pc, #220]	; 80061b4 <HAL_RCC_GetSysClockFreq+0x2e0>
 80060d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060dc:	4b2e      	ldr	r3, [pc, #184]	; (8006198 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80060de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060e4:	ee07 3a90 	vmov	s15, r3
 80060e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060ec:	ed97 6a02 	vldr	s12, [r7, #8]
 80060f0:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80061a8 <HAL_RCC_GetSysClockFreq+0x2d4>
 80060f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006100:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006104:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006108:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800610c:	e021      	b.n	8006152 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	ee07 3a90 	vmov	s15, r3
 8006114:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006118:	eddf 6a25 	vldr	s13, [pc, #148]	; 80061b0 <HAL_RCC_GetSysClockFreq+0x2dc>
 800611c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006120:	4b1d      	ldr	r3, [pc, #116]	; (8006198 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006124:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006128:	ee07 3a90 	vmov	s15, r3
 800612c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006130:	ed97 6a02 	vldr	s12, [r7, #8]
 8006134:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80061a8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006138:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800613c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006140:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006144:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006148:	ee67 7a27 	vmul.f32	s15, s14, s15
 800614c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006150:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006152:	4b11      	ldr	r3, [pc, #68]	; (8006198 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006156:	0a5b      	lsrs	r3, r3, #9
 8006158:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800615c:	3301      	adds	r3, #1
 800615e:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	ee07 3a90 	vmov	s15, r3
 8006166:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800616a:	edd7 6a07 	vldr	s13, [r7, #28]
 800616e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006172:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006176:	ee17 3a90 	vmov	r3, s15
 800617a:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800617c:	e005      	b.n	800618a <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 800617e:	2300      	movs	r3, #0
 8006180:	61bb      	str	r3, [r7, #24]
    break;
 8006182:	e002      	b.n	800618a <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8006184:	4b06      	ldr	r3, [pc, #24]	; (80061a0 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8006186:	61bb      	str	r3, [r7, #24]
    break;
 8006188:	bf00      	nop
  }

  return sysclockfreq;
 800618a:	69bb      	ldr	r3, [r7, #24]
}
 800618c:	4618      	mov	r0, r3
 800618e:	3724      	adds	r7, #36	; 0x24
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr
 8006198:	58024400 	.word	0x58024400
 800619c:	03d09000 	.word	0x03d09000
 80061a0:	003d0900 	.word	0x003d0900
 80061a4:	017d7840 	.word	0x017d7840
 80061a8:	46000000 	.word	0x46000000
 80061ac:	4c742400 	.word	0x4c742400
 80061b0:	4a742400 	.word	0x4a742400
 80061b4:	4bbebc20 	.word	0x4bbebc20

080061b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b082      	sub	sp, #8
 80061bc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80061be:	f7ff fe89 	bl	8005ed4 <HAL_RCC_GetSysClockFreq>
 80061c2:	4601      	mov	r1, r0
 80061c4:	4b10      	ldr	r3, [pc, #64]	; (8006208 <HAL_RCC_GetHCLKFreq+0x50>)
 80061c6:	699b      	ldr	r3, [r3, #24]
 80061c8:	0a1b      	lsrs	r3, r3, #8
 80061ca:	f003 030f 	and.w	r3, r3, #15
 80061ce:	4a0f      	ldr	r2, [pc, #60]	; (800620c <HAL_RCC_GetHCLKFreq+0x54>)
 80061d0:	5cd3      	ldrb	r3, [r2, r3]
 80061d2:	f003 031f 	and.w	r3, r3, #31
 80061d6:	fa21 f303 	lsr.w	r3, r1, r3
 80061da:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80061dc:	4b0a      	ldr	r3, [pc, #40]	; (8006208 <HAL_RCC_GetHCLKFreq+0x50>)
 80061de:	699b      	ldr	r3, [r3, #24]
 80061e0:	f003 030f 	and.w	r3, r3, #15
 80061e4:	4a09      	ldr	r2, [pc, #36]	; (800620c <HAL_RCC_GetHCLKFreq+0x54>)
 80061e6:	5cd3      	ldrb	r3, [r2, r3]
 80061e8:	f003 031f 	and.w	r3, r3, #31
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	fa22 f303 	lsr.w	r3, r2, r3
 80061f2:	4a07      	ldr	r2, [pc, #28]	; (8006210 <HAL_RCC_GetHCLKFreq+0x58>)
 80061f4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80061f6:	4a07      	ldr	r2, [pc, #28]	; (8006214 <HAL_RCC_GetHCLKFreq+0x5c>)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80061fc:	4b04      	ldr	r3, [pc, #16]	; (8006210 <HAL_RCC_GetHCLKFreq+0x58>)
 80061fe:	681b      	ldr	r3, [r3, #0]
}
 8006200:	4618      	mov	r0, r3
 8006202:	3708      	adds	r7, #8
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}
 8006208:	58024400 	.word	0x58024400
 800620c:	08013778 	.word	0x08013778
 8006210:	24000004 	.word	0x24000004
 8006214:	24000000 	.word	0x24000000

08006218 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800621c:	f7ff ffcc 	bl	80061b8 <HAL_RCC_GetHCLKFreq>
 8006220:	4601      	mov	r1, r0
 8006222:	4b06      	ldr	r3, [pc, #24]	; (800623c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006224:	69db      	ldr	r3, [r3, #28]
 8006226:	091b      	lsrs	r3, r3, #4
 8006228:	f003 0307 	and.w	r3, r3, #7
 800622c:	4a04      	ldr	r2, [pc, #16]	; (8006240 <HAL_RCC_GetPCLK1Freq+0x28>)
 800622e:	5cd3      	ldrb	r3, [r2, r3]
 8006230:	f003 031f 	and.w	r3, r3, #31
 8006234:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006238:	4618      	mov	r0, r3
 800623a:	bd80      	pop	{r7, pc}
 800623c:	58024400 	.word	0x58024400
 8006240:	08013778 	.word	0x08013778

08006244 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006248:	f7ff ffb6 	bl	80061b8 <HAL_RCC_GetHCLKFreq>
 800624c:	4601      	mov	r1, r0
 800624e:	4b06      	ldr	r3, [pc, #24]	; (8006268 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006250:	69db      	ldr	r3, [r3, #28]
 8006252:	0a1b      	lsrs	r3, r3, #8
 8006254:	f003 0307 	and.w	r3, r3, #7
 8006258:	4a04      	ldr	r2, [pc, #16]	; (800626c <HAL_RCC_GetPCLK2Freq+0x28>)
 800625a:	5cd3      	ldrb	r3, [r2, r3]
 800625c:	f003 031f 	and.w	r3, r3, #31
 8006260:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006264:	4618      	mov	r0, r3
 8006266:	bd80      	pop	{r7, pc}
 8006268:	58024400 	.word	0x58024400
 800626c:	08013778 	.word	0x08013778

08006270 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8006274:	4b07      	ldr	r3, [pc, #28]	; (8006294 <HAL_RCC_NMI_IRQHandler+0x24>)
 8006276:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006278:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800627c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006280:	d105      	bne.n	800628e <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CCSCallback();
 8006282:	f000 f809 	bl	8006298 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8006286:	4b03      	ldr	r3, [pc, #12]	; (8006294 <HAL_RCC_NMI_IRQHandler+0x24>)
 8006288:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800628c:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 800628e:	bf00      	nop
 8006290:	bd80      	pop	{r7, pc}
 8006292:	bf00      	nop
 8006294:	58024400 	.word	0x58024400

08006298 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CCSCallback(void)
{
 8006298:	b480      	push	{r7}
 800629a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CCSCallback could be implemented in the user file
   */
}
 800629c:	bf00      	nop
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr
	...

080062a8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b086      	sub	sp, #24
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80062b0:	2300      	movs	r3, #0
 80062b2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80062b4:	2300      	movs	r3, #0
 80062b6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d03d      	beq.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062cc:	d013      	beq.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80062ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062d2:	d802      	bhi.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x32>
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d007      	beq.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80062d8:	e01f      	b.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x72>
 80062da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80062de:	d013      	beq.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80062e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80062e4:	d01c      	beq.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80062e6:	e018      	b.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062e8:	4baf      	ldr	r3, [pc, #700]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80062ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ec:	4aae      	ldr	r2, [pc, #696]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80062ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80062f4:	e015      	b.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	3304      	adds	r3, #4
 80062fa:	2102      	movs	r1, #2
 80062fc:	4618      	mov	r0, r3
 80062fe:	f001 fd33 	bl	8007d68 <RCCEx_PLL2_Config>
 8006302:	4603      	mov	r3, r0
 8006304:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006306:	e00c      	b.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	3324      	adds	r3, #36	; 0x24
 800630c:	2102      	movs	r1, #2
 800630e:	4618      	mov	r0, r3
 8006310:	f001 fddc 	bl	8007ecc <RCCEx_PLL3_Config>
 8006314:	4603      	mov	r3, r0
 8006316:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006318:	e003      	b.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	75fb      	strb	r3, [r7, #23]
      break;
 800631e:	e000      	b.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8006320:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006322:	7dfb      	ldrb	r3, [r7, #23]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d109      	bne.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006328:	4b9f      	ldr	r3, [pc, #636]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800632a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800632c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006334:	499c      	ldr	r1, [pc, #624]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006336:	4313      	orrs	r3, r2
 8006338:	650b      	str	r3, [r1, #80]	; 0x50
 800633a:	e001      	b.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800633c:	7dfb      	ldrb	r3, [r7, #23]
 800633e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006348:	2b00      	cmp	r3, #0
 800634a:	d03d      	beq.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006350:	2b04      	cmp	r3, #4
 8006352:	d826      	bhi.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8006354:	a201      	add	r2, pc, #4	; (adr r2, 800635c <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8006356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800635a:	bf00      	nop
 800635c:	08006371 	.word	0x08006371
 8006360:	0800637f 	.word	0x0800637f
 8006364:	08006391 	.word	0x08006391
 8006368:	080063a9 	.word	0x080063a9
 800636c:	080063a9 	.word	0x080063a9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006370:	4b8d      	ldr	r3, [pc, #564]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006374:	4a8c      	ldr	r2, [pc, #560]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006376:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800637a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800637c:	e015      	b.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	3304      	adds	r3, #4
 8006382:	2100      	movs	r1, #0
 8006384:	4618      	mov	r0, r3
 8006386:	f001 fcef 	bl	8007d68 <RCCEx_PLL2_Config>
 800638a:	4603      	mov	r3, r0
 800638c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800638e:	e00c      	b.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	3324      	adds	r3, #36	; 0x24
 8006394:	2100      	movs	r1, #0
 8006396:	4618      	mov	r0, r3
 8006398:	f001 fd98 	bl	8007ecc <RCCEx_PLL3_Config>
 800639c:	4603      	mov	r3, r0
 800639e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80063a0:	e003      	b.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	75fb      	strb	r3, [r7, #23]
      break;
 80063a6:	e000      	b.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 80063a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063aa:	7dfb      	ldrb	r3, [r7, #23]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d109      	bne.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80063b0:	4b7d      	ldr	r3, [pc, #500]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80063b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063b4:	f023 0207 	bic.w	r2, r3, #7
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063bc:	497a      	ldr	r1, [pc, #488]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80063be:	4313      	orrs	r3, r2
 80063c0:	650b      	str	r3, [r1, #80]	; 0x50
 80063c2:	e001      	b.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063c4:	7dfb      	ldrb	r3, [r7, #23]
 80063c6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d03e      	beq.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063d8:	2b80      	cmp	r3, #128	; 0x80
 80063da:	d01c      	beq.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80063dc:	2b80      	cmp	r3, #128	; 0x80
 80063de:	d804      	bhi.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x142>
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d008      	beq.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80063e4:	2b40      	cmp	r3, #64	; 0x40
 80063e6:	d00d      	beq.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80063e8:	e01e      	b.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80063ea:	2bc0      	cmp	r3, #192	; 0xc0
 80063ec:	d01f      	beq.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x186>
 80063ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063f2:	d01e      	beq.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80063f4:	e018      	b.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063f6:	4b6c      	ldr	r3, [pc, #432]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80063f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063fa:	4a6b      	ldr	r2, [pc, #428]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80063fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006400:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006402:	e017      	b.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	3304      	adds	r3, #4
 8006408:	2100      	movs	r1, #0
 800640a:	4618      	mov	r0, r3
 800640c:	f001 fcac 	bl	8007d68 <RCCEx_PLL2_Config>
 8006410:	4603      	mov	r3, r0
 8006412:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006414:	e00e      	b.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	3324      	adds	r3, #36	; 0x24
 800641a:	2100      	movs	r1, #0
 800641c:	4618      	mov	r0, r3
 800641e:	f001 fd55 	bl	8007ecc <RCCEx_PLL3_Config>
 8006422:	4603      	mov	r3, r0
 8006424:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006426:	e005      	b.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	75fb      	strb	r3, [r7, #23]
      break;
 800642c:	e002      	b.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800642e:	bf00      	nop
 8006430:	e000      	b.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8006432:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006434:	7dfb      	ldrb	r3, [r7, #23]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d109      	bne.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800643a:	4b5b      	ldr	r3, [pc, #364]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800643c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800643e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006446:	4958      	ldr	r1, [pc, #352]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006448:	4313      	orrs	r3, r2
 800644a:	650b      	str	r3, [r1, #80]	; 0x50
 800644c:	e001      	b.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800644e:	7dfb      	ldrb	r3, [r7, #23]
 8006450:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800645a:	2b00      	cmp	r3, #0
 800645c:	d044      	beq.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006464:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006468:	d01f      	beq.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x202>
 800646a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800646e:	d805      	bhi.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8006470:	2b00      	cmp	r3, #0
 8006472:	d00a      	beq.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006474:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006478:	d00e      	beq.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 800647a:	e01f      	b.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x214>
 800647c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006480:	d01f      	beq.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8006482:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006486:	d01e      	beq.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006488:	e018      	b.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800648a:	4b47      	ldr	r3, [pc, #284]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800648c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800648e:	4a46      	ldr	r2, [pc, #280]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006490:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006494:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006496:	e017      	b.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	3304      	adds	r3, #4
 800649c:	2100      	movs	r1, #0
 800649e:	4618      	mov	r0, r3
 80064a0:	f001 fc62 	bl	8007d68 <RCCEx_PLL2_Config>
 80064a4:	4603      	mov	r3, r0
 80064a6:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80064a8:	e00e      	b.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	3324      	adds	r3, #36	; 0x24
 80064ae:	2100      	movs	r1, #0
 80064b0:	4618      	mov	r0, r3
 80064b2:	f001 fd0b 	bl	8007ecc <RCCEx_PLL3_Config>
 80064b6:	4603      	mov	r3, r0
 80064b8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80064ba:	e005      	b.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80064bc:	2301      	movs	r3, #1
 80064be:	75fb      	strb	r3, [r7, #23]
      break;
 80064c0:	e002      	b.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80064c2:	bf00      	nop
 80064c4:	e000      	b.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80064c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064c8:	7dfb      	ldrb	r3, [r7, #23]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d10a      	bne.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80064ce:	4b36      	ldr	r3, [pc, #216]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80064d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064d2:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80064dc:	4932      	ldr	r1, [pc, #200]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80064de:	4313      	orrs	r3, r2
 80064e0:	658b      	str	r3, [r1, #88]	; 0x58
 80064e2:	e001      	b.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064e4:	7dfb      	ldrb	r3, [r7, #23]
 80064e6:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d044      	beq.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80064fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80064fe:	d01f      	beq.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006500:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006504:	d805      	bhi.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006506:	2b00      	cmp	r3, #0
 8006508:	d00a      	beq.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x278>
 800650a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800650e:	d00e      	beq.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006510:	e01f      	b.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8006512:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006516:	d01f      	beq.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006518:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800651c:	d01e      	beq.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800651e:	e018      	b.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006520:	4b21      	ldr	r3, [pc, #132]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006524:	4a20      	ldr	r2, [pc, #128]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006526:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800652a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800652c:	e017      	b.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	3304      	adds	r3, #4
 8006532:	2100      	movs	r1, #0
 8006534:	4618      	mov	r0, r3
 8006536:	f001 fc17 	bl	8007d68 <RCCEx_PLL2_Config>
 800653a:	4603      	mov	r3, r0
 800653c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800653e:	e00e      	b.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	3324      	adds	r3, #36	; 0x24
 8006544:	2100      	movs	r1, #0
 8006546:	4618      	mov	r0, r3
 8006548:	f001 fcc0 	bl	8007ecc <RCCEx_PLL3_Config>
 800654c:	4603      	mov	r3, r0
 800654e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006550:	e005      	b.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	75fb      	strb	r3, [r7, #23]
      break;
 8006556:	e002      	b.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8006558:	bf00      	nop
 800655a:	e000      	b.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 800655c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800655e:	7dfb      	ldrb	r3, [r7, #23]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d10a      	bne.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006564:	4b10      	ldr	r3, [pc, #64]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006568:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006572:	490d      	ldr	r1, [pc, #52]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006574:	4313      	orrs	r3, r2
 8006576:	658b      	str	r3, [r1, #88]	; 0x58
 8006578:	e001      	b.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800657a:	7dfb      	ldrb	r3, [r7, #23]
 800657c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006586:	2b00      	cmp	r3, #0
 8006588:	d035      	beq.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800658e:	2b10      	cmp	r3, #16
 8006590:	d00c      	beq.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x304>
 8006592:	2b10      	cmp	r3, #16
 8006594:	d802      	bhi.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8006596:	2b00      	cmp	r3, #0
 8006598:	d01b      	beq.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800659a:	e017      	b.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x324>
 800659c:	2b20      	cmp	r3, #32
 800659e:	d00c      	beq.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x312>
 80065a0:	2b30      	cmp	r3, #48	; 0x30
 80065a2:	d018      	beq.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 80065a4:	e012      	b.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x324>
 80065a6:	bf00      	nop
 80065a8:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065ac:	4baf      	ldr	r3, [pc, #700]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80065ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065b0:	4aae      	ldr	r2, [pc, #696]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80065b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80065b8:	e00e      	b.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	3304      	adds	r3, #4
 80065be:	2102      	movs	r1, #2
 80065c0:	4618      	mov	r0, r3
 80065c2:	f001 fbd1 	bl	8007d68 <RCCEx_PLL2_Config>
 80065c6:	4603      	mov	r3, r0
 80065c8:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80065ca:	e005      	b.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80065cc:	2301      	movs	r3, #1
 80065ce:	75fb      	strb	r3, [r7, #23]
      break;
 80065d0:	e002      	b.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80065d2:	bf00      	nop
 80065d4:	e000      	b.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80065d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065d8:	7dfb      	ldrb	r3, [r7, #23]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d109      	bne.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80065de:	4ba3      	ldr	r3, [pc, #652]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80065e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065e2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065ea:	49a0      	ldr	r1, [pc, #640]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80065ec:	4313      	orrs	r3, r2
 80065ee:	64cb      	str	r3, [r1, #76]	; 0x4c
 80065f0:	e001      	b.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065f2:	7dfb      	ldrb	r3, [r7, #23]
 80065f4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d042      	beq.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006606:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800660a:	d01f      	beq.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 800660c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006610:	d805      	bhi.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006612:	2b00      	cmp	r3, #0
 8006614:	d00a      	beq.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x384>
 8006616:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800661a:	d00e      	beq.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x392>
 800661c:	e01f      	b.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800661e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006622:	d01f      	beq.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8006624:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006628:	d01e      	beq.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800662a:	e018      	b.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800662c:	4b8f      	ldr	r3, [pc, #572]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800662e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006630:	4a8e      	ldr	r2, [pc, #568]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006632:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006636:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006638:	e017      	b.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	3304      	adds	r3, #4
 800663e:	2100      	movs	r1, #0
 8006640:	4618      	mov	r0, r3
 8006642:	f001 fb91 	bl	8007d68 <RCCEx_PLL2_Config>
 8006646:	4603      	mov	r3, r0
 8006648:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800664a:	e00e      	b.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	3324      	adds	r3, #36	; 0x24
 8006650:	2100      	movs	r1, #0
 8006652:	4618      	mov	r0, r3
 8006654:	f001 fc3a 	bl	8007ecc <RCCEx_PLL3_Config>
 8006658:	4603      	mov	r3, r0
 800665a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800665c:	e005      	b.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800665e:	2301      	movs	r3, #1
 8006660:	75fb      	strb	r3, [r7, #23]
      break;
 8006662:	e002      	b.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8006664:	bf00      	nop
 8006666:	e000      	b.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8006668:	bf00      	nop
    }

    if(ret == HAL_OK)
 800666a:	7dfb      	ldrb	r3, [r7, #23]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d109      	bne.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006670:	4b7e      	ldr	r3, [pc, #504]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006672:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006674:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800667c:	497b      	ldr	r1, [pc, #492]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800667e:	4313      	orrs	r3, r2
 8006680:	650b      	str	r3, [r1, #80]	; 0x50
 8006682:	e001      	b.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006684:	7dfb      	ldrb	r3, [r7, #23]
 8006686:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006690:	2b00      	cmp	r3, #0
 8006692:	d042      	beq.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006698:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800669c:	d01b      	beq.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800669e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066a2:	d805      	bhi.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d022      	beq.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0x446>
 80066a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066ac:	d00a      	beq.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80066ae:	e01b      	b.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x440>
 80066b0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80066b4:	d01d      	beq.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 80066b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80066ba:	d01c      	beq.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 80066bc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80066c0:	d01b      	beq.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x452>
 80066c2:	e011      	b.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	3304      	adds	r3, #4
 80066c8:	2101      	movs	r1, #1
 80066ca:	4618      	mov	r0, r3
 80066cc:	f001 fb4c 	bl	8007d68 <RCCEx_PLL2_Config>
 80066d0:	4603      	mov	r3, r0
 80066d2:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80066d4:	e012      	b.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	3324      	adds	r3, #36	; 0x24
 80066da:	2101      	movs	r1, #1
 80066dc:	4618      	mov	r0, r3
 80066de:	f001 fbf5 	bl	8007ecc <RCCEx_PLL3_Config>
 80066e2:	4603      	mov	r3, r0
 80066e4:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80066e6:	e009      	b.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80066e8:	2301      	movs	r3, #1
 80066ea:	75fb      	strb	r3, [r7, #23]
      break;
 80066ec:	e006      	b.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80066ee:	bf00      	nop
 80066f0:	e004      	b.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80066f2:	bf00      	nop
 80066f4:	e002      	b.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80066f6:	bf00      	nop
 80066f8:	e000      	b.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80066fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066fc:	7dfb      	ldrb	r3, [r7, #23]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d109      	bne.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006702:	4b5a      	ldr	r3, [pc, #360]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006704:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006706:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800670e:	4957      	ldr	r1, [pc, #348]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006710:	4313      	orrs	r3, r2
 8006712:	650b      	str	r3, [r1, #80]	; 0x50
 8006714:	e001      	b.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006716:	7dfb      	ldrb	r3, [r7, #23]
 8006718:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006722:	2b00      	cmp	r3, #0
 8006724:	d044      	beq.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800672c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006730:	d01b      	beq.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8006732:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006736:	d805      	bhi.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8006738:	2b00      	cmp	r3, #0
 800673a:	d022      	beq.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800673c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006740:	d00a      	beq.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8006742:	e01b      	b.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8006744:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006748:	d01d      	beq.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800674a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800674e:	d01c      	beq.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8006750:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006754:	d01b      	beq.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006756:	e011      	b.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	3304      	adds	r3, #4
 800675c:	2101      	movs	r1, #1
 800675e:	4618      	mov	r0, r3
 8006760:	f001 fb02 	bl	8007d68 <RCCEx_PLL2_Config>
 8006764:	4603      	mov	r3, r0
 8006766:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006768:	e012      	b.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	3324      	adds	r3, #36	; 0x24
 800676e:	2101      	movs	r1, #1
 8006770:	4618      	mov	r0, r3
 8006772:	f001 fbab 	bl	8007ecc <RCCEx_PLL3_Config>
 8006776:	4603      	mov	r3, r0
 8006778:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800677a:	e009      	b.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	75fb      	strb	r3, [r7, #23]
      break;
 8006780:	e006      	b.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8006782:	bf00      	nop
 8006784:	e004      	b.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8006786:	bf00      	nop
 8006788:	e002      	b.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800678a:	bf00      	nop
 800678c:	e000      	b.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800678e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006790:	7dfb      	ldrb	r3, [r7, #23]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d10a      	bne.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006796:	4b35      	ldr	r3, [pc, #212]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800679a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80067a4:	4931      	ldr	r1, [pc, #196]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80067a6:	4313      	orrs	r3, r2
 80067a8:	658b      	str	r3, [r1, #88]	; 0x58
 80067aa:	e001      	b.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067ac:	7dfb      	ldrb	r3, [r7, #23]
 80067ae:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d02d      	beq.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80067c4:	d005      	beq.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80067c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067ca:	d009      	beq.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x538>
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d013      	beq.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80067d0:	e00f      	b.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067d2:	4b26      	ldr	r3, [pc, #152]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80067d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067d6:	4a25      	ldr	r2, [pc, #148]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80067d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067dc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80067de:	e00c      	b.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	3304      	adds	r3, #4
 80067e4:	2101      	movs	r1, #1
 80067e6:	4618      	mov	r0, r3
 80067e8:	f001 fabe 	bl	8007d68 <RCCEx_PLL2_Config>
 80067ec:	4603      	mov	r3, r0
 80067ee:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80067f0:	e003      	b.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	75fb      	strb	r3, [r7, #23]
      break;
 80067f6:	e000      	b.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 80067f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067fa:	7dfb      	ldrb	r3, [r7, #23]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d109      	bne.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006800:	4b1a      	ldr	r3, [pc, #104]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006804:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800680c:	4917      	ldr	r1, [pc, #92]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800680e:	4313      	orrs	r3, r2
 8006810:	650b      	str	r3, [r1, #80]	; 0x50
 8006812:	e001      	b.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006814:	7dfb      	ldrb	r3, [r7, #23]
 8006816:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006820:	2b00      	cmp	r3, #0
 8006822:	d035      	beq.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006828:	2b03      	cmp	r3, #3
 800682a:	d81b      	bhi.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800682c:	a201      	add	r2, pc, #4	; (adr r2, 8006834 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 800682e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006832:	bf00      	nop
 8006834:	08006871 	.word	0x08006871
 8006838:	08006845 	.word	0x08006845
 800683c:	08006853 	.word	0x08006853
 8006840:	08006871 	.word	0x08006871
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006844:	4b09      	ldr	r3, [pc, #36]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006848:	4a08      	ldr	r2, [pc, #32]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800684a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800684e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006850:	e00f      	b.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	3304      	adds	r3, #4
 8006856:	2102      	movs	r1, #2
 8006858:	4618      	mov	r0, r3
 800685a:	f001 fa85 	bl	8007d68 <RCCEx_PLL2_Config>
 800685e:	4603      	mov	r3, r0
 8006860:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006862:	e006      	b.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006864:	2301      	movs	r3, #1
 8006866:	75fb      	strb	r3, [r7, #23]
      break;
 8006868:	e003      	b.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 800686a:	bf00      	nop
 800686c:	58024400 	.word	0x58024400
      break;
 8006870:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006872:	7dfb      	ldrb	r3, [r7, #23]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d109      	bne.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006878:	4bba      	ldr	r3, [pc, #744]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800687a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800687c:	f023 0203 	bic.w	r2, r3, #3
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006884:	49b7      	ldr	r1, [pc, #732]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006886:	4313      	orrs	r3, r2
 8006888:	64cb      	str	r3, [r1, #76]	; 0x4c
 800688a:	e001      	b.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800688c:	7dfb      	ldrb	r3, [r7, #23]
 800688e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006898:	2b00      	cmp	r3, #0
 800689a:	f000 8086 	beq.w	80069aa <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800689e:	4bb2      	ldr	r3, [pc, #712]	; (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4ab1      	ldr	r2, [pc, #708]	; (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80068a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068a8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80068aa:	f7fa ff93 	bl	80017d4 <HAL_GetTick>
 80068ae:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068b0:	e009      	b.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068b2:	f7fa ff8f 	bl	80017d4 <HAL_GetTick>
 80068b6:	4602      	mov	r2, r0
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	1ad3      	subs	r3, r2, r3
 80068bc:	2b64      	cmp	r3, #100	; 0x64
 80068be:	d902      	bls.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 80068c0:	2303      	movs	r3, #3
 80068c2:	75fb      	strb	r3, [r7, #23]
        break;
 80068c4:	e005      	b.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068c6:	4ba8      	ldr	r3, [pc, #672]	; (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d0ef      	beq.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 80068d2:	7dfb      	ldrb	r3, [r7, #23]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d166      	bne.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80068d8:	4ba2      	ldr	r3, [pc, #648]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80068da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80068e2:	4053      	eors	r3, r2
 80068e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d013      	beq.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80068ec:	4b9d      	ldr	r3, [pc, #628]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80068ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068f4:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80068f6:	4b9b      	ldr	r3, [pc, #620]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80068f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068fa:	4a9a      	ldr	r2, [pc, #616]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80068fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006900:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006902:	4b98      	ldr	r3, [pc, #608]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006906:	4a97      	ldr	r2, [pc, #604]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006908:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800690c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800690e:	4a95      	ldr	r2, [pc, #596]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800691a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800691e:	d115      	bne.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006920:	f7fa ff58 	bl	80017d4 <HAL_GetTick>
 8006924:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006926:	e00b      	b.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006928:	f7fa ff54 	bl	80017d4 <HAL_GetTick>
 800692c:	4602      	mov	r2, r0
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	1ad3      	subs	r3, r2, r3
 8006932:	f241 3288 	movw	r2, #5000	; 0x1388
 8006936:	4293      	cmp	r3, r2
 8006938:	d902      	bls.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 800693a:	2303      	movs	r3, #3
 800693c:	75fb      	strb	r3, [r7, #23]
            break;
 800693e:	e005      	b.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006940:	4b88      	ldr	r3, [pc, #544]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006944:	f003 0302 	and.w	r3, r3, #2
 8006948:	2b00      	cmp	r3, #0
 800694a:	d0ed      	beq.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 800694c:	7dfb      	ldrb	r3, [r7, #23]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d126      	bne.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006958:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800695c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006960:	d10d      	bne.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8006962:	4b80      	ldr	r3, [pc, #512]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006964:	691b      	ldr	r3, [r3, #16]
 8006966:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006970:	0919      	lsrs	r1, r3, #4
 8006972:	4b7e      	ldr	r3, [pc, #504]	; (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8006974:	400b      	ands	r3, r1
 8006976:	497b      	ldr	r1, [pc, #492]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006978:	4313      	orrs	r3, r2
 800697a:	610b      	str	r3, [r1, #16]
 800697c:	e005      	b.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800697e:	4b79      	ldr	r3, [pc, #484]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	4a78      	ldr	r2, [pc, #480]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006984:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006988:	6113      	str	r3, [r2, #16]
 800698a:	4b76      	ldr	r3, [pc, #472]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800698c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006994:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006998:	4972      	ldr	r1, [pc, #456]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800699a:	4313      	orrs	r3, r2
 800699c:	670b      	str	r3, [r1, #112]	; 0x70
 800699e:	e004      	b.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80069a0:	7dfb      	ldrb	r3, [r7, #23]
 80069a2:	75bb      	strb	r3, [r7, #22]
 80069a4:	e001      	b.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069a6:	7dfb      	ldrb	r3, [r7, #23]
 80069a8:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f003 0301 	and.w	r3, r3, #1
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d07d      	beq.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069ba:	2b28      	cmp	r3, #40	; 0x28
 80069bc:	d866      	bhi.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 80069be:	a201      	add	r2, pc, #4	; (adr r2, 80069c4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80069c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069c4:	08006a93 	.word	0x08006a93
 80069c8:	08006a8d 	.word	0x08006a8d
 80069cc:	08006a8d 	.word	0x08006a8d
 80069d0:	08006a8d 	.word	0x08006a8d
 80069d4:	08006a8d 	.word	0x08006a8d
 80069d8:	08006a8d 	.word	0x08006a8d
 80069dc:	08006a8d 	.word	0x08006a8d
 80069e0:	08006a8d 	.word	0x08006a8d
 80069e4:	08006a69 	.word	0x08006a69
 80069e8:	08006a8d 	.word	0x08006a8d
 80069ec:	08006a8d 	.word	0x08006a8d
 80069f0:	08006a8d 	.word	0x08006a8d
 80069f4:	08006a8d 	.word	0x08006a8d
 80069f8:	08006a8d 	.word	0x08006a8d
 80069fc:	08006a8d 	.word	0x08006a8d
 8006a00:	08006a8d 	.word	0x08006a8d
 8006a04:	08006a7b 	.word	0x08006a7b
 8006a08:	08006a8d 	.word	0x08006a8d
 8006a0c:	08006a8d 	.word	0x08006a8d
 8006a10:	08006a8d 	.word	0x08006a8d
 8006a14:	08006a8d 	.word	0x08006a8d
 8006a18:	08006a8d 	.word	0x08006a8d
 8006a1c:	08006a8d 	.word	0x08006a8d
 8006a20:	08006a8d 	.word	0x08006a8d
 8006a24:	08006a93 	.word	0x08006a93
 8006a28:	08006a8d 	.word	0x08006a8d
 8006a2c:	08006a8d 	.word	0x08006a8d
 8006a30:	08006a8d 	.word	0x08006a8d
 8006a34:	08006a8d 	.word	0x08006a8d
 8006a38:	08006a8d 	.word	0x08006a8d
 8006a3c:	08006a8d 	.word	0x08006a8d
 8006a40:	08006a8d 	.word	0x08006a8d
 8006a44:	08006a93 	.word	0x08006a93
 8006a48:	08006a8d 	.word	0x08006a8d
 8006a4c:	08006a8d 	.word	0x08006a8d
 8006a50:	08006a8d 	.word	0x08006a8d
 8006a54:	08006a8d 	.word	0x08006a8d
 8006a58:	08006a8d 	.word	0x08006a8d
 8006a5c:	08006a8d 	.word	0x08006a8d
 8006a60:	08006a8d 	.word	0x08006a8d
 8006a64:	08006a93 	.word	0x08006a93
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	3304      	adds	r3, #4
 8006a6c:	2101      	movs	r1, #1
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f001 f97a 	bl	8007d68 <RCCEx_PLL2_Config>
 8006a74:	4603      	mov	r3, r0
 8006a76:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006a78:	e00c      	b.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	3324      	adds	r3, #36	; 0x24
 8006a7e:	2101      	movs	r1, #1
 8006a80:	4618      	mov	r0, r3
 8006a82:	f001 fa23 	bl	8007ecc <RCCEx_PLL3_Config>
 8006a86:	4603      	mov	r3, r0
 8006a88:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006a8a:	e003      	b.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	75fb      	strb	r3, [r7, #23]
      break;
 8006a90:	e000      	b.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8006a92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a94:	7dfb      	ldrb	r3, [r7, #23]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d109      	bne.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006a9a:	4b32      	ldr	r3, [pc, #200]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a9e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006aa6:	492f      	ldr	r1, [pc, #188]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	654b      	str	r3, [r1, #84]	; 0x54
 8006aac:	e001      	b.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aae:	7dfb      	ldrb	r3, [r7, #23]
 8006ab0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f003 0302 	and.w	r3, r3, #2
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d037      	beq.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ac2:	2b05      	cmp	r3, #5
 8006ac4:	d820      	bhi.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8006ac6:	a201      	add	r2, pc, #4	; (adr r2, 8006acc <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8006ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006acc:	08006b0f 	.word	0x08006b0f
 8006ad0:	08006ae5 	.word	0x08006ae5
 8006ad4:	08006af7 	.word	0x08006af7
 8006ad8:	08006b0f 	.word	0x08006b0f
 8006adc:	08006b0f 	.word	0x08006b0f
 8006ae0:	08006b0f 	.word	0x08006b0f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	3304      	adds	r3, #4
 8006ae8:	2101      	movs	r1, #1
 8006aea:	4618      	mov	r0, r3
 8006aec:	f001 f93c 	bl	8007d68 <RCCEx_PLL2_Config>
 8006af0:	4603      	mov	r3, r0
 8006af2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006af4:	e00c      	b.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	3324      	adds	r3, #36	; 0x24
 8006afa:	2101      	movs	r1, #1
 8006afc:	4618      	mov	r0, r3
 8006afe:	f001 f9e5 	bl	8007ecc <RCCEx_PLL3_Config>
 8006b02:	4603      	mov	r3, r0
 8006b04:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006b06:	e003      	b.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	75fb      	strb	r3, [r7, #23]
      break;
 8006b0c:	e000      	b.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8006b0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b10:	7dfb      	ldrb	r3, [r7, #23]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d109      	bne.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006b16:	4b13      	ldr	r3, [pc, #76]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b1a:	f023 0207 	bic.w	r2, r3, #7
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b22:	4910      	ldr	r1, [pc, #64]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006b24:	4313      	orrs	r3, r2
 8006b26:	654b      	str	r3, [r1, #84]	; 0x54
 8006b28:	e001      	b.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b2a:	7dfb      	ldrb	r3, [r7, #23]
 8006b2c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f003 0304 	and.w	r3, r3, #4
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d040      	beq.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b40:	2b05      	cmp	r3, #5
 8006b42:	d827      	bhi.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8006b44:	a201      	add	r2, pc, #4	; (adr r2, 8006b4c <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8006b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b4a:	bf00      	nop
 8006b4c:	08006b9b 	.word	0x08006b9b
 8006b50:	08006b71 	.word	0x08006b71
 8006b54:	08006b83 	.word	0x08006b83
 8006b58:	08006b9b 	.word	0x08006b9b
 8006b5c:	08006b9b 	.word	0x08006b9b
 8006b60:	08006b9b 	.word	0x08006b9b
 8006b64:	58024400 	.word	0x58024400
 8006b68:	58024800 	.word	0x58024800
 8006b6c:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	3304      	adds	r3, #4
 8006b74:	2101      	movs	r1, #1
 8006b76:	4618      	mov	r0, r3
 8006b78:	f001 f8f6 	bl	8007d68 <RCCEx_PLL2_Config>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006b80:	e00c      	b.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	3324      	adds	r3, #36	; 0x24
 8006b86:	2101      	movs	r1, #1
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f001 f99f 	bl	8007ecc <RCCEx_PLL3_Config>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006b92:	e003      	b.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b94:	2301      	movs	r3, #1
 8006b96:	75fb      	strb	r3, [r7, #23]
      break;
 8006b98:	e000      	b.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8006b9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b9c:	7dfb      	ldrb	r3, [r7, #23]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d10a      	bne.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006ba2:	4bb2      	ldr	r3, [pc, #712]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ba6:	f023 0207 	bic.w	r2, r3, #7
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bb0:	49ae      	ldr	r1, [pc, #696]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	658b      	str	r3, [r1, #88]	; 0x58
 8006bb6:	e001      	b.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bb8:	7dfb      	ldrb	r3, [r7, #23]
 8006bba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f003 0320 	and.w	r3, r3, #32
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d044      	beq.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bd2:	d01b      	beq.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x964>
 8006bd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bd8:	d805      	bhi.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d022      	beq.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8006bde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006be2:	d00a      	beq.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x952>
 8006be4:	e01b      	b.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0x976>
 8006be6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bea:	d01d      	beq.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8006bec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006bf0:	d01c      	beq.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x984>
 8006bf2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006bf6:	d01b      	beq.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8006bf8:	e011      	b.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	3304      	adds	r3, #4
 8006bfe:	2100      	movs	r1, #0
 8006c00:	4618      	mov	r0, r3
 8006c02:	f001 f8b1 	bl	8007d68 <RCCEx_PLL2_Config>
 8006c06:	4603      	mov	r3, r0
 8006c08:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006c0a:	e012      	b.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	3324      	adds	r3, #36	; 0x24
 8006c10:	2102      	movs	r1, #2
 8006c12:	4618      	mov	r0, r3
 8006c14:	f001 f95a 	bl	8007ecc <RCCEx_PLL3_Config>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006c1c:	e009      	b.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	75fb      	strb	r3, [r7, #23]
      break;
 8006c22:	e006      	b.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006c24:	bf00      	nop
 8006c26:	e004      	b.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006c28:	bf00      	nop
 8006c2a:	e002      	b.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006c2c:	bf00      	nop
 8006c2e:	e000      	b.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006c30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c32:	7dfb      	ldrb	r3, [r7, #23]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d10a      	bne.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006c38:	4b8c      	ldr	r3, [pc, #560]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c3c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c46:	4989      	ldr	r1, [pc, #548]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	654b      	str	r3, [r1, #84]	; 0x54
 8006c4c:	e001      	b.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c4e:	7dfb      	ldrb	r3, [r7, #23]
 8006c50:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d044      	beq.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c68:	d01b      	beq.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8006c6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c6e:	d805      	bhi.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d022      	beq.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8006c74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c78:	d00a      	beq.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8006c7a:	e01b      	b.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8006c7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c80:	d01d      	beq.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8006c82:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006c86:	d01c      	beq.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8006c88:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c8c:	d01b      	beq.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8006c8e:	e011      	b.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	3304      	adds	r3, #4
 8006c94:	2100      	movs	r1, #0
 8006c96:	4618      	mov	r0, r3
 8006c98:	f001 f866 	bl	8007d68 <RCCEx_PLL2_Config>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006ca0:	e012      	b.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	3324      	adds	r3, #36	; 0x24
 8006ca6:	2102      	movs	r1, #2
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f001 f90f 	bl	8007ecc <RCCEx_PLL3_Config>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006cb2:	e009      	b.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	75fb      	strb	r3, [r7, #23]
      break;
 8006cb8:	e006      	b.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006cba:	bf00      	nop
 8006cbc:	e004      	b.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006cbe:	bf00      	nop
 8006cc0:	e002      	b.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006cc2:	bf00      	nop
 8006cc4:	e000      	b.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006cc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006cc8:	7dfb      	ldrb	r3, [r7, #23]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d10a      	bne.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006cce:	4b67      	ldr	r3, [pc, #412]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cd2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006cdc:	4963      	ldr	r1, [pc, #396]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	658b      	str	r3, [r1, #88]	; 0x58
 8006ce2:	e001      	b.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ce4:	7dfb      	ldrb	r3, [r7, #23]
 8006ce6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d044      	beq.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006cfa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006cfe:	d01b      	beq.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8006d00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d04:	d805      	bhi.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d022      	beq.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006d0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d0e:	d00a      	beq.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006d10:	e01b      	b.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8006d12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d16:	d01d      	beq.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8006d18:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006d1c:	d01c      	beq.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8006d1e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006d22:	d01b      	beq.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8006d24:	e011      	b.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	3304      	adds	r3, #4
 8006d2a:	2100      	movs	r1, #0
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f001 f81b 	bl	8007d68 <RCCEx_PLL2_Config>
 8006d32:	4603      	mov	r3, r0
 8006d34:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006d36:	e012      	b.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	3324      	adds	r3, #36	; 0x24
 8006d3c:	2102      	movs	r1, #2
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f001 f8c4 	bl	8007ecc <RCCEx_PLL3_Config>
 8006d44:	4603      	mov	r3, r0
 8006d46:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006d48:	e009      	b.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	75fb      	strb	r3, [r7, #23]
      break;
 8006d4e:	e006      	b.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006d50:	bf00      	nop
 8006d52:	e004      	b.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006d54:	bf00      	nop
 8006d56:	e002      	b.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006d58:	bf00      	nop
 8006d5a:	e000      	b.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006d5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d5e:	7dfb      	ldrb	r3, [r7, #23]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d10a      	bne.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006d64:	4b41      	ldr	r3, [pc, #260]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d68:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d72:	493e      	ldr	r1, [pc, #248]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006d74:	4313      	orrs	r3, r2
 8006d76:	658b      	str	r3, [r1, #88]	; 0x58
 8006d78:	e001      	b.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d7a:	7dfb      	ldrb	r3, [r7, #23]
 8006d7c:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f003 0308 	and.w	r3, r3, #8
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d01a      	beq.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d94:	d10a      	bne.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	3324      	adds	r3, #36	; 0x24
 8006d9a:	2102      	movs	r1, #2
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f001 f895 	bl	8007ecc <RCCEx_PLL3_Config>
 8006da2:	4603      	mov	r3, r0
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d001      	beq.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8006da8:	2301      	movs	r3, #1
 8006daa:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006dac:	4b2f      	ldr	r3, [pc, #188]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006db0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006dba:	492c      	ldr	r1, [pc, #176]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f003 0310 	and.w	r3, r3, #16
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d01a      	beq.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006dd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dd6:	d10a      	bne.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	3324      	adds	r3, #36	; 0x24
 8006ddc:	2102      	movs	r1, #2
 8006dde:	4618      	mov	r0, r3
 8006de0:	f001 f874 	bl	8007ecc <RCCEx_PLL3_Config>
 8006de4:	4603      	mov	r3, r0
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d001      	beq.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8006dea:	2301      	movs	r3, #1
 8006dec:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006dee:	4b1f      	ldr	r3, [pc, #124]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006df2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006dfc:	491b      	ldr	r1, [pc, #108]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d032      	beq.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006e14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e18:	d00d      	beq.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8006e1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e1e:	d016      	beq.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d111      	bne.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	3304      	adds	r3, #4
 8006e28:	2100      	movs	r1, #0
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f000 ff9c 	bl	8007d68 <RCCEx_PLL2_Config>
 8006e30:	4603      	mov	r3, r0
 8006e32:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006e34:	e00c      	b.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	3324      	adds	r3, #36	; 0x24
 8006e3a:	2102      	movs	r1, #2
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f001 f845 	bl	8007ecc <RCCEx_PLL3_Config>
 8006e42:	4603      	mov	r3, r0
 8006e44:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006e46:	e003      	b.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	75fb      	strb	r3, [r7, #23]
      break;
 8006e4c:	e000      	b.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8006e4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e50:	7dfb      	ldrb	r3, [r7, #23]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d10c      	bne.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006e56:	4b05      	ldr	r3, [pc, #20]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e5a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006e64:	4901      	ldr	r1, [pc, #4]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006e66:	4313      	orrs	r3, r2
 8006e68:	658b      	str	r3, [r1, #88]	; 0x58
 8006e6a:	e003      	b.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8006e6c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e70:	7dfb      	ldrb	r3, [r7, #23]
 8006e72:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d02f      	beq.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e8a:	d00c      	beq.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8006e8c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006e90:	d015      	beq.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8006e92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e96:	d10f      	bne.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e98:	4b79      	ldr	r3, [pc, #484]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e9c:	4a78      	ldr	r2, [pc, #480]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006e9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ea2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006ea4:	e00c      	b.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	3324      	adds	r3, #36	; 0x24
 8006eaa:	2101      	movs	r1, #1
 8006eac:	4618      	mov	r0, r3
 8006eae:	f001 f80d 	bl	8007ecc <RCCEx_PLL3_Config>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006eb6:	e003      	b.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	75fb      	strb	r3, [r7, #23]
      break;
 8006ebc:	e000      	b.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8006ebe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ec0:	7dfb      	ldrb	r3, [r7, #23]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d10a      	bne.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006ec6:	4b6e      	ldr	r3, [pc, #440]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ed4:	496a      	ldr	r1, [pc, #424]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	654b      	str	r3, [r1, #84]	; 0x54
 8006eda:	e001      	b.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006edc:	7dfb      	ldrb	r3, [r7, #23]
 8006ede:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d029      	beq.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d003      	beq.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8006ef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ef8:	d007      	beq.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8006efa:	e00f      	b.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006efc:	4b60      	ldr	r3, [pc, #384]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f00:	4a5f      	ldr	r2, [pc, #380]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006f02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f06:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006f08:	e00b      	b.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	3304      	adds	r3, #4
 8006f0e:	2102      	movs	r1, #2
 8006f10:	4618      	mov	r0, r3
 8006f12:	f000 ff29 	bl	8007d68 <RCCEx_PLL2_Config>
 8006f16:	4603      	mov	r3, r0
 8006f18:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006f1a:	e002      	b.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	75fb      	strb	r3, [r7, #23]
      break;
 8006f20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f22:	7dfb      	ldrb	r3, [r7, #23]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d109      	bne.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006f28:	4b55      	ldr	r3, [pc, #340]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006f2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f2c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f34:	4952      	ldr	r1, [pc, #328]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006f36:	4313      	orrs	r3, r2
 8006f38:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006f3a:	e001      	b.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f3c:	7dfb      	ldrb	r3, [r7, #23]
 8006f3e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d00a      	beq.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	3324      	adds	r3, #36	; 0x24
 8006f50:	2102      	movs	r1, #2
 8006f52:	4618      	mov	r0, r3
 8006f54:	f000 ffba 	bl	8007ecc <RCCEx_PLL3_Config>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d001      	beq.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d02f      	beq.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f76:	d00c      	beq.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006f78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f7c:	d802      	bhi.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d011      	beq.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8006f82:	e00d      	b.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8006f84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f88:	d00f      	beq.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8006f8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f8e:	d00e      	beq.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8006f90:	e006      	b.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f92:	4b3b      	ldr	r3, [pc, #236]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f96:	4a3a      	ldr	r2, [pc, #232]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006f98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f9c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006f9e:	e007      	b.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	75fb      	strb	r3, [r7, #23]
      break;
 8006fa4:	e004      	b.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8006fa6:	bf00      	nop
 8006fa8:	e002      	b.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8006faa:	bf00      	nop
 8006fac:	e000      	b.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8006fae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006fb0:	7dfb      	ldrb	r3, [r7, #23]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d109      	bne.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006fb6:	4b32      	ldr	r3, [pc, #200]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006fc2:	492f      	ldr	r1, [pc, #188]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	654b      	str	r3, [r1, #84]	; 0x54
 8006fc8:	e001      	b.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fca:	7dfb      	ldrb	r3, [r7, #23]
 8006fcc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d008      	beq.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006fda:	4b29      	ldr	r3, [pc, #164]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006fdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fde:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fe6:	4926      	ldr	r1, [pc, #152]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d009      	beq.n	800700c <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006ff8:	4b21      	ldr	r3, [pc, #132]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006ffa:	691b      	ldr	r3, [r3, #16]
 8006ffc:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007006:	491e      	ldr	r1, [pc, #120]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007008:	4313      	orrs	r3, r2
 800700a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007014:	2b00      	cmp	r3, #0
 8007016:	d008      	beq.n	800702a <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007018:	4b19      	ldr	r3, [pc, #100]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800701a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800701c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007024:	4916      	ldr	r1, [pc, #88]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007026:	4313      	orrs	r3, r2
 8007028:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007032:	2b00      	cmp	r3, #0
 8007034:	d00d      	beq.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007036:	4b12      	ldr	r3, [pc, #72]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007038:	691b      	ldr	r3, [r3, #16]
 800703a:	4a11      	ldr	r2, [pc, #68]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800703c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007040:	6113      	str	r3, [r2, #16]
 8007042:	4b0f      	ldr	r3, [pc, #60]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007044:	691a      	ldr	r2, [r3, #16]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800704c:	490c      	ldr	r1, [pc, #48]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800704e:	4313      	orrs	r3, r2
 8007050:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	2b00      	cmp	r3, #0
 8007058:	da08      	bge.n	800706c <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800705a:	4b09      	ldr	r3, [pc, #36]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800705c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800705e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007066:	4906      	ldr	r1, [pc, #24]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007068:	4313      	orrs	r3, r2
 800706a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 800706c:	7dbb      	ldrb	r3, [r7, #22]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d101      	bne.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8007072:	2300      	movs	r3, #0
 8007074:	e000      	b.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 8007076:	2301      	movs	r3, #1
}
 8007078:	4618      	mov	r0, r3
 800707a:	3718      	adds	r7, #24
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}
 8007080:	58024400 	.word	0x58024400

08007084 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b090      	sub	sp, #64	; 0x40
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007092:	d150      	bne.n	8007136 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8007094:	4ba1      	ldr	r3, [pc, #644]	; (800731c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007096:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007098:	f003 0307 	and.w	r3, r3, #7
 800709c:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800709e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a0:	2b04      	cmp	r3, #4
 80070a2:	d844      	bhi.n	800712e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 80070a4:	a201      	add	r2, pc, #4	; (adr r2, 80070ac <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 80070a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070aa:	bf00      	nop
 80070ac:	080070c1 	.word	0x080070c1
 80070b0:	080070d1 	.word	0x080070d1
 80070b4:	080070e1 	.word	0x080070e1
 80070b8:	08007129 	.word	0x08007129
 80070bc:	080070f1 	.word	0x080070f1
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80070c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070c4:	4618      	mov	r0, r3
 80070c6:	f000 fd03 	bl	8007ad0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80070ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070ce:	e241      	b.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070d0:	f107 0318 	add.w	r3, r7, #24
 80070d4:	4618      	mov	r0, r3
 80070d6:	f000 fa63 	bl	80075a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80070da:	69bb      	ldr	r3, [r7, #24]
 80070dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070de:	e239      	b.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070e0:	f107 030c 	add.w	r3, r7, #12
 80070e4:	4618      	mov	r0, r3
 80070e6:	f000 fba7 	bl	8007838 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070ee:	e231      	b.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80070f0:	4b8a      	ldr	r3, [pc, #552]	; (800731c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80070f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80070f8:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80070fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d102      	bne.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007100:	4b87      	ldr	r3, [pc, #540]	; (8007320 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007102:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007104:	e226      	b.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007108:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800710c:	d102      	bne.n	8007114 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 800710e:	4b85      	ldr	r3, [pc, #532]	; (8007324 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007110:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007112:	e21f      	b.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007116:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800711a:	d102      	bne.n	8007122 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 800711c:	4b82      	ldr	r3, [pc, #520]	; (8007328 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800711e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007120:	e218      	b.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007122:	2300      	movs	r3, #0
 8007124:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007126:	e215      	b.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007128:	4b80      	ldr	r3, [pc, #512]	; (800732c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800712a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800712c:	e212      	b.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800712e:	2300      	movs	r3, #0
 8007130:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007132:	bf00      	nop
 8007134:	e20e      	b.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800713c:	d14f      	bne.n	80071de <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800713e:	4b77      	ldr	r3, [pc, #476]	; (800731c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007140:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007142:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8007146:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800714a:	2b80      	cmp	r3, #128	; 0x80
 800714c:	d01c      	beq.n	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800714e:	2b80      	cmp	r3, #128	; 0x80
 8007150:	d804      	bhi.n	800715c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8007152:	2b00      	cmp	r3, #0
 8007154:	d008      	beq.n	8007168 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8007156:	2b40      	cmp	r3, #64	; 0x40
 8007158:	d00e      	beq.n	8007178 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800715a:	e03c      	b.n	80071d6 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 800715c:	2bc0      	cmp	r3, #192	; 0xc0
 800715e:	d037      	beq.n	80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8007160:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007164:	d018      	beq.n	8007198 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8007166:	e036      	b.n	80071d6 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007168:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800716c:	4618      	mov	r0, r3
 800716e:	f000 fcaf 	bl	8007ad0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007174:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007176:	e1ed      	b.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007178:	f107 0318 	add.w	r3, r7, #24
 800717c:	4618      	mov	r0, r3
 800717e:	f000 fa0f 	bl	80075a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007182:	69bb      	ldr	r3, [r7, #24]
 8007184:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007186:	e1e5      	b.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007188:	f107 030c 	add.w	r3, r7, #12
 800718c:	4618      	mov	r0, r3
 800718e:	f000 fb53 	bl	8007838 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007196:	e1dd      	b.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007198:	4b60      	ldr	r3, [pc, #384]	; (800731c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800719a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800719c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80071a0:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80071a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d102      	bne.n	80071ae <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80071a8:	4b5d      	ldr	r3, [pc, #372]	; (8007320 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80071aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80071ac:	e1d2      	b.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80071ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80071b4:	d102      	bne.n	80071bc <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 80071b6:	4b5b      	ldr	r3, [pc, #364]	; (8007324 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80071b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071ba:	e1cb      	b.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80071bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071c2:	d102      	bne.n	80071ca <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 80071c4:	4b58      	ldr	r3, [pc, #352]	; (8007328 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80071c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071c8:	e1c4      	b.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80071ca:	2300      	movs	r3, #0
 80071cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071ce:	e1c1      	b.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80071d0:	4b56      	ldr	r3, [pc, #344]	; (800732c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80071d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071d4:	e1be      	b.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 80071d6:	2300      	movs	r3, #0
 80071d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071da:	bf00      	nop
 80071dc:	e1ba      	b.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071e4:	d153      	bne.n	800728e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80071e6:	4b4d      	ldr	r3, [pc, #308]	; (800731c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80071e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071ea:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80071ee:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80071f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80071f6:	d01f      	beq.n	8007238 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 80071f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80071fc:	d805      	bhi.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d00a      	beq.n	8007218 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8007202:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007206:	d00f      	beq.n	8007228 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8007208:	e03d      	b.n	8007286 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 800720a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800720e:	d037      	beq.n	8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8007210:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007214:	d018      	beq.n	8007248 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8007216:	e036      	b.n	8007286 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007218:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800721c:	4618      	mov	r0, r3
 800721e:	f000 fc57 	bl	8007ad0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007224:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007226:	e195      	b.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007228:	f107 0318 	add.w	r3, r7, #24
 800722c:	4618      	mov	r0, r3
 800722e:	f000 f9b7 	bl	80075a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007232:	69bb      	ldr	r3, [r7, #24]
 8007234:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007236:	e18d      	b.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007238:	f107 030c 	add.w	r3, r7, #12
 800723c:	4618      	mov	r0, r3
 800723e:	f000 fafb 	bl	8007838 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007246:	e185      	b.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007248:	4b34      	ldr	r3, [pc, #208]	; (800731c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800724a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800724c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007250:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007254:	2b00      	cmp	r3, #0
 8007256:	d102      	bne.n	800725e <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007258:	4b31      	ldr	r3, [pc, #196]	; (8007320 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800725a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800725c:	e17a      	b.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800725e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007260:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007264:	d102      	bne.n	800726c <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 8007266:	4b2f      	ldr	r3, [pc, #188]	; (8007324 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007268:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800726a:	e173      	b.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800726c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800726e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007272:	d102      	bne.n	800727a <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 8007274:	4b2c      	ldr	r3, [pc, #176]	; (8007328 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007276:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007278:	e16c      	b.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800727a:	2300      	movs	r3, #0
 800727c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800727e:	e169      	b.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007280:	4b2a      	ldr	r3, [pc, #168]	; (800732c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8007282:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007284:	e166      	b.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8007286:	2300      	movs	r3, #0
 8007288:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800728a:	bf00      	nop
 800728c:	e162      	b.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007294:	d15d      	bne.n	8007352 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8007296:	4b21      	ldr	r3, [pc, #132]	; (800731c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800729a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800729e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80072a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80072a6:	d01f      	beq.n	80072e8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80072a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80072ac:	d805      	bhi.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d00a      	beq.n	80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 80072b2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80072b6:	d00f      	beq.n	80072d8 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 80072b8:	e047      	b.n	800734a <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 80072ba:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80072be:	d041      	beq.n	8007344 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 80072c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80072c4:	d018      	beq.n	80072f8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 80072c6:	e040      	b.n	800734a <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80072c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80072cc:	4618      	mov	r0, r3
 80072ce:	f000 fbff 	bl	8007ad0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80072d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072d6:	e13d      	b.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80072d8:	f107 0318 	add.w	r3, r7, #24
 80072dc:	4618      	mov	r0, r3
 80072de:	f000 f95f 	bl	80075a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80072e2:	69bb      	ldr	r3, [r7, #24]
 80072e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072e6:	e135      	b.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80072e8:	f107 030c 	add.w	r3, r7, #12
 80072ec:	4618      	mov	r0, r3
 80072ee:	f000 faa3 	bl	8007838 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072f6:	e12d      	b.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80072f8:	4b08      	ldr	r3, [pc, #32]	; (800731c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80072fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007300:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007304:	2b00      	cmp	r3, #0
 8007306:	d102      	bne.n	800730e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007308:	4b05      	ldr	r3, [pc, #20]	; (8007320 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800730a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800730c:	e122      	b.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800730e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007310:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007314:	d10c      	bne.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 8007316:	4b03      	ldr	r3, [pc, #12]	; (8007324 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007318:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800731a:	e11b      	b.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800731c:	58024400 	.word	0x58024400
 8007320:	03d09000 	.word	0x03d09000
 8007324:	003d0900 	.word	0x003d0900
 8007328:	017d7840 	.word	0x017d7840
 800732c:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007332:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007336:	d102      	bne.n	800733e <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8007338:	4b89      	ldr	r3, [pc, #548]	; (8007560 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800733a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800733c:	e10a      	b.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800733e:	2300      	movs	r3, #0
 8007340:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007342:	e107      	b.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007344:	4b87      	ldr	r3, [pc, #540]	; (8007564 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8007346:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007348:	e104      	b.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800734a:	2300      	movs	r3, #0
 800734c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800734e:	bf00      	nop
 8007350:	e100      	b.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007358:	d153      	bne.n	8007402 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800735a:	4b83      	ldr	r3, [pc, #524]	; (8007568 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800735c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800735e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007362:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007366:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800736a:	d01f      	beq.n	80073ac <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800736c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007370:	d805      	bhi.n	800737e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8007372:	2b00      	cmp	r3, #0
 8007374:	d00a      	beq.n	800738c <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8007376:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800737a:	d00f      	beq.n	800739c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 800737c:	e03d      	b.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 800737e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007382:	d037      	beq.n	80073f4 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8007384:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007388:	d018      	beq.n	80073bc <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800738a:	e036      	b.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800738c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007390:	4618      	mov	r0, r3
 8007392:	f000 fb9d 	bl	8007ad0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007398:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800739a:	e0db      	b.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800739c:	f107 0318 	add.w	r3, r7, #24
 80073a0:	4618      	mov	r0, r3
 80073a2:	f000 f8fd 	bl	80075a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80073a6:	69bb      	ldr	r3, [r7, #24]
 80073a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073aa:	e0d3      	b.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073ac:	f107 030c 	add.w	r3, r7, #12
 80073b0:	4618      	mov	r0, r3
 80073b2:	f000 fa41 	bl	8007838 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073ba:	e0cb      	b.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80073bc:	4b6a      	ldr	r3, [pc, #424]	; (8007568 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80073be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80073c4:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80073c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d102      	bne.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80073cc:	4b67      	ldr	r3, [pc, #412]	; (800756c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80073ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80073d0:	e0c0      	b.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80073d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80073d8:	d102      	bne.n	80073e0 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 80073da:	4b65      	ldr	r3, [pc, #404]	; (8007570 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80073dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073de:	e0b9      	b.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80073e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073e6:	d102      	bne.n	80073ee <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 80073e8:	4b5d      	ldr	r3, [pc, #372]	; (8007560 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80073ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073ec:	e0b2      	b.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80073ee:	2300      	movs	r3, #0
 80073f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073f2:	e0af      	b.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80073f4:	4b5b      	ldr	r3, [pc, #364]	; (8007564 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 80073f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073f8:	e0ac      	b.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 80073fa:	2300      	movs	r3, #0
 80073fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073fe:	bf00      	nop
 8007400:	e0a8      	b.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007408:	d13d      	bne.n	8007486 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800740a:	4b57      	ldr	r3, [pc, #348]	; (8007568 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800740c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800740e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007412:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007416:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800741a:	d00c      	beq.n	8007436 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800741c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007420:	d011      	beq.n	8007446 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8007422:	2b00      	cmp	r3, #0
 8007424:	d12b      	bne.n	800747e <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007426:	f107 0318 	add.w	r3, r7, #24
 800742a:	4618      	mov	r0, r3
 800742c:	f000 f8b8 	bl	80075a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007430:	69bb      	ldr	r3, [r7, #24]
 8007432:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007434:	e08e      	b.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007436:	f107 030c 	add.w	r3, r7, #12
 800743a:	4618      	mov	r0, r3
 800743c:	f000 f9fc 	bl	8007838 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007444:	e086      	b.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007446:	4b48      	ldr	r3, [pc, #288]	; (8007568 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800744a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800744e:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007452:	2b00      	cmp	r3, #0
 8007454:	d102      	bne.n	800745c <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007456:	4b45      	ldr	r3, [pc, #276]	; (800756c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8007458:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800745a:	e07b      	b.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800745c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800745e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007462:	d102      	bne.n	800746a <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 8007464:	4b42      	ldr	r3, [pc, #264]	; (8007570 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007466:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007468:	e074      	b.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800746a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800746c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007470:	d102      	bne.n	8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 8007472:	4b3b      	ldr	r3, [pc, #236]	; (8007560 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007474:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007476:	e06d      	b.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007478:	2300      	movs	r3, #0
 800747a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800747c:	e06a      	b.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800747e:	2300      	movs	r3, #0
 8007480:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007482:	bf00      	nop
 8007484:	e066      	b.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800748c:	d11f      	bne.n	80074ce <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800748e:	4b36      	ldr	r3, [pc, #216]	; (8007568 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007492:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007496:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800749a:	2b00      	cmp	r3, #0
 800749c:	d003      	beq.n	80074a6 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800749e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074a2:	d008      	beq.n	80074b6 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 80074a4:	e00f      	b.n	80074c6 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80074a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80074aa:	4618      	mov	r0, r3
 80074ac:	f000 fb10 	bl	8007ad0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80074b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074b4:	e04e      	b.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074b6:	f107 0318 	add.w	r3, r7, #24
 80074ba:	4618      	mov	r0, r3
 80074bc:	f000 f870 	bl	80075a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80074c0:	6a3b      	ldr	r3, [r7, #32]
 80074c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074c4:	e046      	b.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80074c6:	2300      	movs	r3, #0
 80074c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074ca:	bf00      	nop
 80074cc:	e042      	b.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80074d4:	d13c      	bne.n	8007550 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80074d6:	4b24      	ldr	r3, [pc, #144]	; (8007568 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80074d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074da:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80074de:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80074e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074e6:	d01e      	beq.n	8007526 <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 80074e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074ec:	d805      	bhi.n	80074fa <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d00d      	beq.n	800750e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80074f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80074f6:	d00e      	beq.n	8007516 <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 80074f8:	e026      	b.n	8007548 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 80074fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074fe:	d01d      	beq.n	800753c <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8007500:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007504:	d01d      	beq.n	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8007506:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800750a:	d014      	beq.n	8007536 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800750c:	e01c      	b.n	8007548 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800750e:	f000 f831 	bl	8007574 <HAL_RCCEx_GetD3PCLK1Freq>
 8007512:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8007514:	e01e      	b.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007516:	f107 0318 	add.w	r3, r7, #24
 800751a:	4618      	mov	r0, r3
 800751c:	f000 f840 	bl	80075a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007520:	69fb      	ldr	r3, [r7, #28]
 8007522:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007524:	e016      	b.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007526:	f107 030c 	add.w	r3, r7, #12
 800752a:	4618      	mov	r0, r3
 800752c:	f000 f984 	bl	8007838 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007534:	e00e      	b.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 8007536:	4b0d      	ldr	r3, [pc, #52]	; (800756c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8007538:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800753a:	e00b      	b.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 800753c:	4b0c      	ldr	r3, [pc, #48]	; (8007570 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800753e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007540:	e008      	b.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 8007542:	4b07      	ldr	r3, [pc, #28]	; (8007560 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007544:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007546:	e005      	b.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8007548:	2300      	movs	r3, #0
 800754a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800754c:	bf00      	nop
 800754e:	e001      	b.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 8007550:	2300      	movs	r3, #0
 8007552:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8007554:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007556:	4618      	mov	r0, r3
 8007558:	3740      	adds	r7, #64	; 0x40
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}
 800755e:	bf00      	nop
 8007560:	017d7840 	.word	0x017d7840
 8007564:	00bb8000 	.word	0x00bb8000
 8007568:	58024400 	.word	0x58024400
 800756c:	03d09000 	.word	0x03d09000
 8007570:	003d0900 	.word	0x003d0900

08007574 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007578:	f7fe fe1e 	bl	80061b8 <HAL_RCC_GetHCLKFreq>
 800757c:	4601      	mov	r1, r0
 800757e:	4b06      	ldr	r3, [pc, #24]	; (8007598 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007580:	6a1b      	ldr	r3, [r3, #32]
 8007582:	091b      	lsrs	r3, r3, #4
 8007584:	f003 0307 	and.w	r3, r3, #7
 8007588:	4a04      	ldr	r2, [pc, #16]	; (800759c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800758a:	5cd3      	ldrb	r3, [r2, r3]
 800758c:	f003 031f 	and.w	r3, r3, #31
 8007590:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007594:	4618      	mov	r0, r3
 8007596:	bd80      	pop	{r7, pc}
 8007598:	58024400 	.word	0x58024400
 800759c:	08013778 	.word	0x08013778

080075a0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b089      	sub	sp, #36	; 0x24
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80075a8:	4b9d      	ldr	r3, [pc, #628]	; (8007820 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80075aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ac:	f003 0303 	and.w	r3, r3, #3
 80075b0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80075b2:	4b9b      	ldr	r3, [pc, #620]	; (8007820 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80075b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075b6:	0b1b      	lsrs	r3, r3, #12
 80075b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80075bc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80075be:	4b98      	ldr	r3, [pc, #608]	; (8007820 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80075c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075c2:	091b      	lsrs	r3, r3, #4
 80075c4:	f003 0301 	and.w	r3, r3, #1
 80075c8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80075ca:	4b95      	ldr	r3, [pc, #596]	; (8007820 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80075cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075ce:	08db      	lsrs	r3, r3, #3
 80075d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80075d4:	693a      	ldr	r2, [r7, #16]
 80075d6:	fb02 f303 	mul.w	r3, r2, r3
 80075da:	ee07 3a90 	vmov	s15, r3
 80075de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075e2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	f000 810a 	beq.w	8007802 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 80075ee:	69bb      	ldr	r3, [r7, #24]
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	d05a      	beq.n	80076aa <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	d302      	bcc.n	80075fe <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 80075f8:	2b02      	cmp	r3, #2
 80075fa:	d078      	beq.n	80076ee <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 80075fc:	e099      	b.n	8007732 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80075fe:	4b88      	ldr	r3, [pc, #544]	; (8007820 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f003 0320 	and.w	r3, r3, #32
 8007606:	2b00      	cmp	r3, #0
 8007608:	d02d      	beq.n	8007666 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800760a:	4b85      	ldr	r3, [pc, #532]	; (8007820 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	08db      	lsrs	r3, r3, #3
 8007610:	f003 0303 	and.w	r3, r3, #3
 8007614:	4a83      	ldr	r2, [pc, #524]	; (8007824 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8007616:	fa22 f303 	lsr.w	r3, r2, r3
 800761a:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	ee07 3a90 	vmov	s15, r3
 8007622:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	ee07 3a90 	vmov	s15, r3
 800762c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007630:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007634:	4b7a      	ldr	r3, [pc, #488]	; (8007820 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007638:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800763c:	ee07 3a90 	vmov	s15, r3
 8007640:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007644:	ed97 6a03 	vldr	s12, [r7, #12]
 8007648:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007828 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800764c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007650:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007654:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007658:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800765c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007660:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007664:	e087      	b.n	8007776 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	ee07 3a90 	vmov	s15, r3
 800766c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007670:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800782c <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8007674:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007678:	4b69      	ldr	r3, [pc, #420]	; (8007820 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800767a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800767c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007680:	ee07 3a90 	vmov	s15, r3
 8007684:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007688:	ed97 6a03 	vldr	s12, [r7, #12]
 800768c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007828 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007690:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007694:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007698:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800769c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076a4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80076a8:	e065      	b.n	8007776 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	ee07 3a90 	vmov	s15, r3
 80076b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076b4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007830 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80076b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076bc:	4b58      	ldr	r3, [pc, #352]	; (8007820 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80076be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076c4:	ee07 3a90 	vmov	s15, r3
 80076c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076cc:	ed97 6a03 	vldr	s12, [r7, #12]
 80076d0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007828 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80076d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076e8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80076ec:	e043      	b.n	8007776 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	ee07 3a90 	vmov	s15, r3
 80076f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076f8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007834 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 80076fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007700:	4b47      	ldr	r3, [pc, #284]	; (8007820 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007704:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007708:	ee07 3a90 	vmov	s15, r3
 800770c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007710:	ed97 6a03 	vldr	s12, [r7, #12]
 8007714:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007828 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007718:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800771c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007720:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007724:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007728:	ee67 7a27 	vmul.f32	s15, s14, s15
 800772c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007730:	e021      	b.n	8007776 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	ee07 3a90 	vmov	s15, r3
 8007738:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800773c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8007830 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8007740:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007744:	4b36      	ldr	r3, [pc, #216]	; (8007820 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007748:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800774c:	ee07 3a90 	vmov	s15, r3
 8007750:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007754:	ed97 6a03 	vldr	s12, [r7, #12]
 8007758:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007828 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800775c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007760:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007764:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007768:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800776c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007770:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007774:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007776:	4b2a      	ldr	r3, [pc, #168]	; (8007820 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800777a:	0a5b      	lsrs	r3, r3, #9
 800777c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007780:	ee07 3a90 	vmov	s15, r3
 8007784:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007788:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800778c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007790:	edd7 6a07 	vldr	s13, [r7, #28]
 8007794:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007798:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800779c:	ee17 2a90 	vmov	r2, s15
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80077a4:	4b1e      	ldr	r3, [pc, #120]	; (8007820 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80077a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077a8:	0c1b      	lsrs	r3, r3, #16
 80077aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077ae:	ee07 3a90 	vmov	s15, r3
 80077b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80077ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077be:	edd7 6a07 	vldr	s13, [r7, #28]
 80077c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077ca:	ee17 2a90 	vmov	r2, s15
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80077d2:	4b13      	ldr	r3, [pc, #76]	; (8007820 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80077d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077d6:	0e1b      	lsrs	r3, r3, #24
 80077d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077dc:	ee07 3a90 	vmov	s15, r3
 80077e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80077e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80077f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077f8:	ee17 2a90 	vmov	r2, s15
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007800:	e008      	b.n	8007814 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2200      	movs	r2, #0
 8007806:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2200      	movs	r2, #0
 800780c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2200      	movs	r2, #0
 8007812:	609a      	str	r2, [r3, #8]
}
 8007814:	bf00      	nop
 8007816:	3724      	adds	r7, #36	; 0x24
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr
 8007820:	58024400 	.word	0x58024400
 8007824:	03d09000 	.word	0x03d09000
 8007828:	46000000 	.word	0x46000000
 800782c:	4c742400 	.word	0x4c742400
 8007830:	4a742400 	.word	0x4a742400
 8007834:	4bbebc20 	.word	0x4bbebc20

08007838 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007838:	b480      	push	{r7}
 800783a:	b089      	sub	sp, #36	; 0x24
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007840:	4b9d      	ldr	r3, [pc, #628]	; (8007ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007844:	f003 0303 	and.w	r3, r3, #3
 8007848:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800784a:	4b9b      	ldr	r3, [pc, #620]	; (8007ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800784c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800784e:	0d1b      	lsrs	r3, r3, #20
 8007850:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007854:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007856:	4b98      	ldr	r3, [pc, #608]	; (8007ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800785a:	0a1b      	lsrs	r3, r3, #8
 800785c:	f003 0301 	and.w	r3, r3, #1
 8007860:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007862:	4b95      	ldr	r3, [pc, #596]	; (8007ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007866:	08db      	lsrs	r3, r3, #3
 8007868:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800786c:	693a      	ldr	r2, [r7, #16]
 800786e:	fb02 f303 	mul.w	r3, r2, r3
 8007872:	ee07 3a90 	vmov	s15, r3
 8007876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800787a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	2b00      	cmp	r3, #0
 8007882:	f000 810a 	beq.w	8007a9a <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8007886:	69bb      	ldr	r3, [r7, #24]
 8007888:	2b01      	cmp	r3, #1
 800788a:	d05a      	beq.n	8007942 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 800788c:	2b01      	cmp	r3, #1
 800788e:	d302      	bcc.n	8007896 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8007890:	2b02      	cmp	r3, #2
 8007892:	d078      	beq.n	8007986 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8007894:	e099      	b.n	80079ca <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007896:	4b88      	ldr	r3, [pc, #544]	; (8007ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f003 0320 	and.w	r3, r3, #32
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d02d      	beq.n	80078fe <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80078a2:	4b85      	ldr	r3, [pc, #532]	; (8007ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	08db      	lsrs	r3, r3, #3
 80078a8:	f003 0303 	and.w	r3, r3, #3
 80078ac:	4a83      	ldr	r2, [pc, #524]	; (8007abc <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 80078ae:	fa22 f303 	lsr.w	r3, r2, r3
 80078b2:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	ee07 3a90 	vmov	s15, r3
 80078ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	ee07 3a90 	vmov	s15, r3
 80078c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078cc:	4b7a      	ldr	r3, [pc, #488]	; (8007ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80078ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078d4:	ee07 3a90 	vmov	s15, r3
 80078d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078dc:	ed97 6a03 	vldr	s12, [r7, #12]
 80078e0:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80078e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078f8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80078fc:	e087      	b.n	8007a0e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	ee07 3a90 	vmov	s15, r3
 8007904:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007908:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 800790c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007910:	4b69      	ldr	r3, [pc, #420]	; (8007ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007914:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007918:	ee07 3a90 	vmov	s15, r3
 800791c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007920:	ed97 6a03 	vldr	s12, [r7, #12]
 8007924:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007928:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800792c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007930:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007934:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007938:	ee67 7a27 	vmul.f32	s15, s14, s15
 800793c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007940:	e065      	b.n	8007a0e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	ee07 3a90 	vmov	s15, r3
 8007948:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800794c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8007950:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007954:	4b58      	ldr	r3, [pc, #352]	; (8007ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007958:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800795c:	ee07 3a90 	vmov	s15, r3
 8007960:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007964:	ed97 6a03 	vldr	s12, [r7, #12]
 8007968:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800796c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007970:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007974:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007978:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800797c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007980:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007984:	e043      	b.n	8007a0e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	ee07 3a90 	vmov	s15, r3
 800798c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007990:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007acc <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8007994:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007998:	4b47      	ldr	r3, [pc, #284]	; (8007ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800799a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800799c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079a0:	ee07 3a90 	vmov	s15, r3
 80079a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079a8:	ed97 6a03 	vldr	s12, [r7, #12]
 80079ac:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80079b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079c4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80079c8:	e021      	b.n	8007a0e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	ee07 3a90 	vmov	s15, r3
 80079d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079d4:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8007ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80079d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079dc:	4b36      	ldr	r3, [pc, #216]	; (8007ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80079de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079e4:	ee07 3a90 	vmov	s15, r3
 80079e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079ec:	ed97 6a03 	vldr	s12, [r7, #12]
 80079f0:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80079f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a08:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007a0c:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007a0e:	4b2a      	ldr	r3, [pc, #168]	; (8007ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a12:	0a5b      	lsrs	r3, r3, #9
 8007a14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a18:	ee07 3a90 	vmov	s15, r3
 8007a1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a24:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a28:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a34:	ee17 2a90 	vmov	r2, s15
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007a3c:	4b1e      	ldr	r3, [pc, #120]	; (8007ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a40:	0c1b      	lsrs	r3, r3, #16
 8007a42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a46:	ee07 3a90 	vmov	s15, r3
 8007a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a52:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a56:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a62:	ee17 2a90 	vmov	r2, s15
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007a6a:	4b13      	ldr	r3, [pc, #76]	; (8007ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a6e:	0e1b      	lsrs	r3, r3, #24
 8007a70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a74:	ee07 3a90 	vmov	s15, r3
 8007a78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a80:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a84:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a90:	ee17 2a90 	vmov	r2, s15
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007a98:	e008      	b.n	8007aac <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	609a      	str	r2, [r3, #8]
}
 8007aac:	bf00      	nop
 8007aae:	3724      	adds	r7, #36	; 0x24
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab6:	4770      	bx	lr
 8007ab8:	58024400 	.word	0x58024400
 8007abc:	03d09000 	.word	0x03d09000
 8007ac0:	46000000 	.word	0x46000000
 8007ac4:	4c742400 	.word	0x4c742400
 8007ac8:	4a742400 	.word	0x4a742400
 8007acc:	4bbebc20 	.word	0x4bbebc20

08007ad0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b089      	sub	sp, #36	; 0x24
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007ad8:	4b9d      	ldr	r3, [pc, #628]	; (8007d50 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007adc:	f003 0303 	and.w	r3, r3, #3
 8007ae0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8007ae2:	4b9b      	ldr	r3, [pc, #620]	; (8007d50 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ae6:	091b      	lsrs	r3, r3, #4
 8007ae8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007aec:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007aee:	4b98      	ldr	r3, [pc, #608]	; (8007d50 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007af2:	f003 0301 	and.w	r3, r3, #1
 8007af6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007af8:	4b95      	ldr	r3, [pc, #596]	; (8007d50 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007afc:	08db      	lsrs	r3, r3, #3
 8007afe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007b02:	693a      	ldr	r2, [r7, #16]
 8007b04:	fb02 f303 	mul.w	r3, r2, r3
 8007b08:	ee07 3a90 	vmov	s15, r3
 8007b0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b10:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	f000 810a 	beq.w	8007d30 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8007b1c:	69bb      	ldr	r3, [r7, #24]
 8007b1e:	2b01      	cmp	r3, #1
 8007b20:	d05a      	beq.n	8007bd8 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 8007b22:	2b01      	cmp	r3, #1
 8007b24:	d302      	bcc.n	8007b2c <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 8007b26:	2b02      	cmp	r3, #2
 8007b28:	d078      	beq.n	8007c1c <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8007b2a:	e099      	b.n	8007c60 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b2c:	4b88      	ldr	r3, [pc, #544]	; (8007d50 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f003 0320 	and.w	r3, r3, #32
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d02d      	beq.n	8007b94 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007b38:	4b85      	ldr	r3, [pc, #532]	; (8007d50 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	08db      	lsrs	r3, r3, #3
 8007b3e:	f003 0303 	and.w	r3, r3, #3
 8007b42:	4a84      	ldr	r2, [pc, #528]	; (8007d54 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8007b44:	fa22 f303 	lsr.w	r3, r2, r3
 8007b48:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	ee07 3a90 	vmov	s15, r3
 8007b50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	ee07 3a90 	vmov	s15, r3
 8007b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b62:	4b7b      	ldr	r3, [pc, #492]	; (8007d50 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b6a:	ee07 3a90 	vmov	s15, r3
 8007b6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b72:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b76:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007d58 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007b7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b8e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007b92:	e087      	b.n	8007ca4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	ee07 3a90 	vmov	s15, r3
 8007b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b9e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007d5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 8007ba2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ba6:	4b6a      	ldr	r3, [pc, #424]	; (8007d50 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007baa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bae:	ee07 3a90 	vmov	s15, r3
 8007bb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bba:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007d58 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007bbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bd2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007bd6:	e065      	b.n	8007ca4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	ee07 3a90 	vmov	s15, r3
 8007bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007be2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007d60 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8007be6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bea:	4b59      	ldr	r3, [pc, #356]	; (8007d50 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bf2:	ee07 3a90 	vmov	s15, r3
 8007bf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bfe:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007d58 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007c02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c16:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007c1a:	e043      	b.n	8007ca4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	ee07 3a90 	vmov	s15, r3
 8007c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c26:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007d64 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007c2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c2e:	4b48      	ldr	r3, [pc, #288]	; (8007d50 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c36:	ee07 3a90 	vmov	s15, r3
 8007c3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c42:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007d58 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007c46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c5a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007c5e:	e021      	b.n	8007ca4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007c60:	697b      	ldr	r3, [r7, #20]
 8007c62:	ee07 3a90 	vmov	s15, r3
 8007c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c6a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007d60 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8007c6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c72:	4b37      	ldr	r3, [pc, #220]	; (8007d50 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c7a:	ee07 3a90 	vmov	s15, r3
 8007c7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c82:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c86:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007d58 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007c8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c9e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007ca2:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8007ca4:	4b2a      	ldr	r3, [pc, #168]	; (8007d50 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ca8:	0a5b      	lsrs	r3, r3, #9
 8007caa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cae:	ee07 3a90 	vmov	s15, r3
 8007cb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cb6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007cba:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007cbe:	edd7 6a07 	vldr	s13, [r7, #28]
 8007cc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007cc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007cca:	ee17 2a90 	vmov	r2, s15
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8007cd2:	4b1f      	ldr	r3, [pc, #124]	; (8007d50 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cd6:	0c1b      	lsrs	r3, r3, #16
 8007cd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cdc:	ee07 3a90 	vmov	s15, r3
 8007ce0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ce4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ce8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007cec:	edd7 6a07 	vldr	s13, [r7, #28]
 8007cf0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007cf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007cf8:	ee17 2a90 	vmov	r2, s15
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8007d00:	4b13      	ldr	r3, [pc, #76]	; (8007d50 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d04:	0e1b      	lsrs	r3, r3, #24
 8007d06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d0a:	ee07 3a90 	vmov	s15, r3
 8007d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007d16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d26:	ee17 2a90 	vmov	r2, s15
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007d2e:	e008      	b.n	8007d42 <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2200      	movs	r2, #0
 8007d34:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	609a      	str	r2, [r3, #8]
}
 8007d42:	bf00      	nop
 8007d44:	3724      	adds	r7, #36	; 0x24
 8007d46:	46bd      	mov	sp, r7
 8007d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4c:	4770      	bx	lr
 8007d4e:	bf00      	nop
 8007d50:	58024400 	.word	0x58024400
 8007d54:	03d09000 	.word	0x03d09000
 8007d58:	46000000 	.word	0x46000000
 8007d5c:	4c742400 	.word	0x4c742400
 8007d60:	4a742400 	.word	0x4a742400
 8007d64:	4bbebc20 	.word	0x4bbebc20

08007d68 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b084      	sub	sp, #16
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
 8007d70:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007d72:	2300      	movs	r3, #0
 8007d74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007d76:	4b53      	ldr	r3, [pc, #332]	; (8007ec4 <RCCEx_PLL2_Config+0x15c>)
 8007d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d7a:	f003 0303 	and.w	r3, r3, #3
 8007d7e:	2b03      	cmp	r3, #3
 8007d80:	d101      	bne.n	8007d86 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007d82:	2301      	movs	r3, #1
 8007d84:	e099      	b.n	8007eba <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007d86:	4b4f      	ldr	r3, [pc, #316]	; (8007ec4 <RCCEx_PLL2_Config+0x15c>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a4e      	ldr	r2, [pc, #312]	; (8007ec4 <RCCEx_PLL2_Config+0x15c>)
 8007d8c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007d90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d92:	f7f9 fd1f 	bl	80017d4 <HAL_GetTick>
 8007d96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007d98:	e008      	b.n	8007dac <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007d9a:	f7f9 fd1b 	bl	80017d4 <HAL_GetTick>
 8007d9e:	4602      	mov	r2, r0
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	1ad3      	subs	r3, r2, r3
 8007da4:	2b02      	cmp	r3, #2
 8007da6:	d901      	bls.n	8007dac <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007da8:	2303      	movs	r3, #3
 8007daa:	e086      	b.n	8007eba <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007dac:	4b45      	ldr	r3, [pc, #276]	; (8007ec4 <RCCEx_PLL2_Config+0x15c>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d1f0      	bne.n	8007d9a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007db8:	4b42      	ldr	r3, [pc, #264]	; (8007ec4 <RCCEx_PLL2_Config+0x15c>)
 8007dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dbc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	031b      	lsls	r3, r3, #12
 8007dc6:	493f      	ldr	r1, [pc, #252]	; (8007ec4 <RCCEx_PLL2_Config+0x15c>)
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	628b      	str	r3, [r1, #40]	; 0x28
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	3b01      	subs	r3, #1
 8007dd2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	689b      	ldr	r3, [r3, #8]
 8007dda:	3b01      	subs	r3, #1
 8007ddc:	025b      	lsls	r3, r3, #9
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	431a      	orrs	r2, r3
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	68db      	ldr	r3, [r3, #12]
 8007de6:	3b01      	subs	r3, #1
 8007de8:	041b      	lsls	r3, r3, #16
 8007dea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007dee:	431a      	orrs	r2, r3
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	691b      	ldr	r3, [r3, #16]
 8007df4:	3b01      	subs	r3, #1
 8007df6:	061b      	lsls	r3, r3, #24
 8007df8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007dfc:	4931      	ldr	r1, [pc, #196]	; (8007ec4 <RCCEx_PLL2_Config+0x15c>)
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007e02:	4b30      	ldr	r3, [pc, #192]	; (8007ec4 <RCCEx_PLL2_Config+0x15c>)
 8007e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e06:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	695b      	ldr	r3, [r3, #20]
 8007e0e:	492d      	ldr	r1, [pc, #180]	; (8007ec4 <RCCEx_PLL2_Config+0x15c>)
 8007e10:	4313      	orrs	r3, r2
 8007e12:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007e14:	4b2b      	ldr	r3, [pc, #172]	; (8007ec4 <RCCEx_PLL2_Config+0x15c>)
 8007e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e18:	f023 0220 	bic.w	r2, r3, #32
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	699b      	ldr	r3, [r3, #24]
 8007e20:	4928      	ldr	r1, [pc, #160]	; (8007ec4 <RCCEx_PLL2_Config+0x15c>)
 8007e22:	4313      	orrs	r3, r2
 8007e24:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007e26:	4b27      	ldr	r3, [pc, #156]	; (8007ec4 <RCCEx_PLL2_Config+0x15c>)
 8007e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e2a:	4a26      	ldr	r2, [pc, #152]	; (8007ec4 <RCCEx_PLL2_Config+0x15c>)
 8007e2c:	f023 0310 	bic.w	r3, r3, #16
 8007e30:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007e32:	4b24      	ldr	r3, [pc, #144]	; (8007ec4 <RCCEx_PLL2_Config+0x15c>)
 8007e34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e36:	4b24      	ldr	r3, [pc, #144]	; (8007ec8 <RCCEx_PLL2_Config+0x160>)
 8007e38:	4013      	ands	r3, r2
 8007e3a:	687a      	ldr	r2, [r7, #4]
 8007e3c:	69d2      	ldr	r2, [r2, #28]
 8007e3e:	00d2      	lsls	r2, r2, #3
 8007e40:	4920      	ldr	r1, [pc, #128]	; (8007ec4 <RCCEx_PLL2_Config+0x15c>)
 8007e42:	4313      	orrs	r3, r2
 8007e44:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007e46:	4b1f      	ldr	r3, [pc, #124]	; (8007ec4 <RCCEx_PLL2_Config+0x15c>)
 8007e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e4a:	4a1e      	ldr	r2, [pc, #120]	; (8007ec4 <RCCEx_PLL2_Config+0x15c>)
 8007e4c:	f043 0310 	orr.w	r3, r3, #16
 8007e50:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d106      	bne.n	8007e66 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007e58:	4b1a      	ldr	r3, [pc, #104]	; (8007ec4 <RCCEx_PLL2_Config+0x15c>)
 8007e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e5c:	4a19      	ldr	r2, [pc, #100]	; (8007ec4 <RCCEx_PLL2_Config+0x15c>)
 8007e5e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007e62:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007e64:	e00f      	b.n	8007e86 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	d106      	bne.n	8007e7a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007e6c:	4b15      	ldr	r3, [pc, #84]	; (8007ec4 <RCCEx_PLL2_Config+0x15c>)
 8007e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e70:	4a14      	ldr	r2, [pc, #80]	; (8007ec4 <RCCEx_PLL2_Config+0x15c>)
 8007e72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e76:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007e78:	e005      	b.n	8007e86 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007e7a:	4b12      	ldr	r3, [pc, #72]	; (8007ec4 <RCCEx_PLL2_Config+0x15c>)
 8007e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e7e:	4a11      	ldr	r2, [pc, #68]	; (8007ec4 <RCCEx_PLL2_Config+0x15c>)
 8007e80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007e84:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007e86:	4b0f      	ldr	r3, [pc, #60]	; (8007ec4 <RCCEx_PLL2_Config+0x15c>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4a0e      	ldr	r2, [pc, #56]	; (8007ec4 <RCCEx_PLL2_Config+0x15c>)
 8007e8c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007e90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e92:	f7f9 fc9f 	bl	80017d4 <HAL_GetTick>
 8007e96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007e98:	e008      	b.n	8007eac <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007e9a:	f7f9 fc9b 	bl	80017d4 <HAL_GetTick>
 8007e9e:	4602      	mov	r2, r0
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	1ad3      	subs	r3, r2, r3
 8007ea4:	2b02      	cmp	r3, #2
 8007ea6:	d901      	bls.n	8007eac <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007ea8:	2303      	movs	r3, #3
 8007eaa:	e006      	b.n	8007eba <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007eac:	4b05      	ldr	r3, [pc, #20]	; (8007ec4 <RCCEx_PLL2_Config+0x15c>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d0f0      	beq.n	8007e9a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3710      	adds	r7, #16
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}
 8007ec2:	bf00      	nop
 8007ec4:	58024400 	.word	0x58024400
 8007ec8:	ffff0007 	.word	0xffff0007

08007ecc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b084      	sub	sp, #16
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
 8007ed4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007eda:	4b53      	ldr	r3, [pc, #332]	; (8008028 <RCCEx_PLL3_Config+0x15c>)
 8007edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ede:	f003 0303 	and.w	r3, r3, #3
 8007ee2:	2b03      	cmp	r3, #3
 8007ee4:	d101      	bne.n	8007eea <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	e099      	b.n	800801e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007eea:	4b4f      	ldr	r3, [pc, #316]	; (8008028 <RCCEx_PLL3_Config+0x15c>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4a4e      	ldr	r2, [pc, #312]	; (8008028 <RCCEx_PLL3_Config+0x15c>)
 8007ef0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ef4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ef6:	f7f9 fc6d 	bl	80017d4 <HAL_GetTick>
 8007efa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007efc:	e008      	b.n	8007f10 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007efe:	f7f9 fc69 	bl	80017d4 <HAL_GetTick>
 8007f02:	4602      	mov	r2, r0
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	1ad3      	subs	r3, r2, r3
 8007f08:	2b02      	cmp	r3, #2
 8007f0a:	d901      	bls.n	8007f10 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007f0c:	2303      	movs	r3, #3
 8007f0e:	e086      	b.n	800801e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007f10:	4b45      	ldr	r3, [pc, #276]	; (8008028 <RCCEx_PLL3_Config+0x15c>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d1f0      	bne.n	8007efe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007f1c:	4b42      	ldr	r3, [pc, #264]	; (8008028 <RCCEx_PLL3_Config+0x15c>)
 8007f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f20:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	051b      	lsls	r3, r3, #20
 8007f2a:	493f      	ldr	r1, [pc, #252]	; (8008028 <RCCEx_PLL3_Config+0x15c>)
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	628b      	str	r3, [r1, #40]	; 0x28
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	3b01      	subs	r3, #1
 8007f36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	689b      	ldr	r3, [r3, #8]
 8007f3e:	3b01      	subs	r3, #1
 8007f40:	025b      	lsls	r3, r3, #9
 8007f42:	b29b      	uxth	r3, r3
 8007f44:	431a      	orrs	r2, r3
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	68db      	ldr	r3, [r3, #12]
 8007f4a:	3b01      	subs	r3, #1
 8007f4c:	041b      	lsls	r3, r3, #16
 8007f4e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007f52:	431a      	orrs	r2, r3
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	691b      	ldr	r3, [r3, #16]
 8007f58:	3b01      	subs	r3, #1
 8007f5a:	061b      	lsls	r3, r3, #24
 8007f5c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007f60:	4931      	ldr	r1, [pc, #196]	; (8008028 <RCCEx_PLL3_Config+0x15c>)
 8007f62:	4313      	orrs	r3, r2
 8007f64:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007f66:	4b30      	ldr	r3, [pc, #192]	; (8008028 <RCCEx_PLL3_Config+0x15c>)
 8007f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f6a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	695b      	ldr	r3, [r3, #20]
 8007f72:	492d      	ldr	r1, [pc, #180]	; (8008028 <RCCEx_PLL3_Config+0x15c>)
 8007f74:	4313      	orrs	r3, r2
 8007f76:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007f78:	4b2b      	ldr	r3, [pc, #172]	; (8008028 <RCCEx_PLL3_Config+0x15c>)
 8007f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f7c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	699b      	ldr	r3, [r3, #24]
 8007f84:	4928      	ldr	r1, [pc, #160]	; (8008028 <RCCEx_PLL3_Config+0x15c>)
 8007f86:	4313      	orrs	r3, r2
 8007f88:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007f8a:	4b27      	ldr	r3, [pc, #156]	; (8008028 <RCCEx_PLL3_Config+0x15c>)
 8007f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f8e:	4a26      	ldr	r2, [pc, #152]	; (8008028 <RCCEx_PLL3_Config+0x15c>)
 8007f90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f94:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007f96:	4b24      	ldr	r3, [pc, #144]	; (8008028 <RCCEx_PLL3_Config+0x15c>)
 8007f98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f9a:	4b24      	ldr	r3, [pc, #144]	; (800802c <RCCEx_PLL3_Config+0x160>)
 8007f9c:	4013      	ands	r3, r2
 8007f9e:	687a      	ldr	r2, [r7, #4]
 8007fa0:	69d2      	ldr	r2, [r2, #28]
 8007fa2:	00d2      	lsls	r2, r2, #3
 8007fa4:	4920      	ldr	r1, [pc, #128]	; (8008028 <RCCEx_PLL3_Config+0x15c>)
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007faa:	4b1f      	ldr	r3, [pc, #124]	; (8008028 <RCCEx_PLL3_Config+0x15c>)
 8007fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fae:	4a1e      	ldr	r2, [pc, #120]	; (8008028 <RCCEx_PLL3_Config+0x15c>)
 8007fb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007fb4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d106      	bne.n	8007fca <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007fbc:	4b1a      	ldr	r3, [pc, #104]	; (8008028 <RCCEx_PLL3_Config+0x15c>)
 8007fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fc0:	4a19      	ldr	r2, [pc, #100]	; (8008028 <RCCEx_PLL3_Config+0x15c>)
 8007fc2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007fc6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007fc8:	e00f      	b.n	8007fea <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	d106      	bne.n	8007fde <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007fd0:	4b15      	ldr	r3, [pc, #84]	; (8008028 <RCCEx_PLL3_Config+0x15c>)
 8007fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fd4:	4a14      	ldr	r2, [pc, #80]	; (8008028 <RCCEx_PLL3_Config+0x15c>)
 8007fd6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007fda:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007fdc:	e005      	b.n	8007fea <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007fde:	4b12      	ldr	r3, [pc, #72]	; (8008028 <RCCEx_PLL3_Config+0x15c>)
 8007fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fe2:	4a11      	ldr	r2, [pc, #68]	; (8008028 <RCCEx_PLL3_Config+0x15c>)
 8007fe4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007fe8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007fea:	4b0f      	ldr	r3, [pc, #60]	; (8008028 <RCCEx_PLL3_Config+0x15c>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4a0e      	ldr	r2, [pc, #56]	; (8008028 <RCCEx_PLL3_Config+0x15c>)
 8007ff0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ff4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ff6:	f7f9 fbed 	bl	80017d4 <HAL_GetTick>
 8007ffa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007ffc:	e008      	b.n	8008010 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007ffe:	f7f9 fbe9 	bl	80017d4 <HAL_GetTick>
 8008002:	4602      	mov	r2, r0
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	1ad3      	subs	r3, r2, r3
 8008008:	2b02      	cmp	r3, #2
 800800a:	d901      	bls.n	8008010 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800800c:	2303      	movs	r3, #3
 800800e:	e006      	b.n	800801e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008010:	4b05      	ldr	r3, [pc, #20]	; (8008028 <RCCEx_PLL3_Config+0x15c>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008018:	2b00      	cmp	r3, #0
 800801a:	d0f0      	beq.n	8007ffe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800801c:	7bfb      	ldrb	r3, [r7, #15]
}
 800801e:	4618      	mov	r0, r3
 8008020:	3710      	adds	r7, #16
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}
 8008026:	bf00      	nop
 8008028:	58024400 	.word	0x58024400
 800802c:	ffff0007 	.word	0xffff0007

08008030 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b08a      	sub	sp, #40	; 0x28
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d101      	bne.n	8008042 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800803e:	2301      	movs	r3, #1
 8008040:	e07c      	b.n	800813c <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008048:	b2db      	uxtb	r3, r3
 800804a:	2b00      	cmp	r3, #0
 800804c:	d10c      	bne.n	8008068 <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2200      	movs	r2, #0
 8008052:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	699b      	ldr	r3, [r3, #24]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d102      	bne.n	8008062 <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2202      	movs	r2, #2
 8008060:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f7f9 f89a 	bl	800119c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2203      	movs	r2, #3
 800806c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f000 f867 	bl	8008144 <HAL_SD_InitCard>
 8008076:	4603      	mov	r3, r0
 8008078:	2b00      	cmp	r3, #0
 800807a:	d001      	beq.n	8008080 <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 800807c:	2301      	movs	r3, #1
 800807e:	e05d      	b.n	800813c <HAL_SD_Init+0x10c>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8008080:	f107 0308 	add.w	r3, r7, #8
 8008084:	4619      	mov	r1, r3
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f000 fdbe 	bl	8008c08 <HAL_SD_GetCardStatus>
 800808c:	4603      	mov	r3, r0
 800808e:	2b00      	cmp	r3, #0
 8008090:	d001      	beq.n	8008096 <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 8008092:	2301      	movs	r3, #1
 8008094:	e052      	b.n	800813c <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8008096:	7e3b      	ldrb	r3, [r7, #24]
 8008098:	b2db      	uxtb	r3, r3
 800809a:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800809c:	7e7b      	ldrb	r3, [r7, #25]
 800809e:	b2db      	uxtb	r3, r3
 80080a0:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080a6:	2b01      	cmp	r3, #1
 80080a8:	d10a      	bne.n	80080c0 <HAL_SD_Init+0x90>
 80080aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d102      	bne.n	80080b6 <HAL_SD_Init+0x86>
 80080b0:	6a3b      	ldr	r3, [r7, #32]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d004      	beq.n	80080c0 <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80080bc:	65da      	str	r2, [r3, #92]	; 0x5c
 80080be:	e00b      	b.n	80080d8 <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080c4:	2b01      	cmp	r3, #1
 80080c6:	d104      	bne.n	80080d2 <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80080ce:	65da      	str	r2, [r3, #92]	; 0x5c
 80080d0:	e002      	b.n	80080d8 <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2200      	movs	r2, #0
 80080d6:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	68db      	ldr	r3, [r3, #12]
 80080dc:	4619      	mov	r1, r3
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f000 fe74 	bl	8008dcc <HAL_SD_ConfigWideBusOperation>
 80080e4:	4603      	mov	r3, r0
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d001      	beq.n	80080ee <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 80080ea:	2301      	movs	r3, #1
 80080ec:	e026      	b.n	800813c <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 80080ee:	f7f9 fb71 	bl	80017d4 <HAL_GetTick>
 80080f2:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80080f4:	e011      	b.n	800811a <HAL_SD_Init+0xea>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 80080f6:	f7f9 fb6d 	bl	80017d4 <HAL_GetTick>
 80080fa:	4602      	mov	r2, r0
 80080fc:	69fb      	ldr	r3, [r7, #28]
 80080fe:	1ad3      	subs	r3, r2, r3
 8008100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008104:	d109      	bne.n	800811a <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800810c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2201      	movs	r2, #1
 8008112:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 8008116:	2303      	movs	r3, #3
 8008118:	e010      	b.n	800813c <HAL_SD_Init+0x10c>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f000 ff00 	bl	8008f20 <HAL_SD_GetCardState>
 8008120:	4603      	mov	r3, r0
 8008122:	2b04      	cmp	r3, #4
 8008124:	d1e7      	bne.n	80080f6 <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2200      	movs	r2, #0
 800812a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2200      	movs	r2, #0
 8008130:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2201      	movs	r2, #1
 8008136:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800813a:	2300      	movs	r3, #0
}
 800813c:	4618      	mov	r0, r3
 800813e:	3728      	adds	r7, #40	; 0x28
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}

08008144 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008144:	b5b0      	push	{r4, r5, r7, lr}
 8008146:	b08e      	sub	sp, #56	; 0x38
 8008148:	af04      	add	r7, sp, #16
 800814a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800814c:	2300      	movs	r3, #0
 800814e:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008150:	2300      	movs	r3, #0
 8008152:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008154:	2300      	movs	r3, #0
 8008156:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008158:	2300      	movs	r3, #0
 800815a:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800815c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8008160:	f7fe ff90 	bl	8007084 <HAL_RCCEx_GetPeriphCLKFreq>
 8008164:	6278      	str	r0, [r7, #36]	; 0x24
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 8008166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008168:	0a1b      	lsrs	r3, r3, #8
 800816a:	4a40      	ldr	r2, [pc, #256]	; (800826c <HAL_SD_InitCard+0x128>)
 800816c:	fba2 2303 	umull	r2, r3, r2, r3
 8008170:	091b      	lsrs	r3, r3, #4
 8008172:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	699b      	ldr	r3, [r3, #24]
 8008178:	2b02      	cmp	r3, #2
 800817a:	d107      	bne.n	800818c <HAL_SD_InitCard+0x48>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	681a      	ldr	r2, [r3, #0]
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f042 0210 	orr.w	r2, r2, #16
 800818a:	601a      	str	r2, [r3, #0]
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681d      	ldr	r5, [r3, #0]
 8008190:	466c      	mov	r4, sp
 8008192:	f107 0314 	add.w	r3, r7, #20
 8008196:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800819a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800819e:	f107 0308 	add.w	r3, r7, #8
 80081a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80081a4:	4628      	mov	r0, r5
 80081a6:	f002 fc9b 	bl	800aae0 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4618      	mov	r0, r3
 80081b0:	f002 fcde 	bl	800ab70 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 80081b4:	69bb      	ldr	r3, [r7, #24]
 80081b6:	005b      	lsls	r3, r3, #1
 80081b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80081be:	627b      	str	r3, [r7, #36]	; 0x24

  if(sdmmc_clk != 0U)
 80081c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d008      	beq.n	80081d8 <HAL_SD_InitCard+0x94>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 80081c6:	4a2a      	ldr	r2, [pc, #168]	; (8008270 <HAL_SD_InitCard+0x12c>)
 80081c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80081ce:	3301      	adds	r3, #1
 80081d0:	4618      	mov	r0, r3
 80081d2:	f7f9 fb0b 	bl	80017ec <HAL_Delay>
 80081d6:	e002      	b.n	80081de <HAL_SD_InitCard+0x9a>
  }
  else
  {
    HAL_Delay(2U);
 80081d8:	2002      	movs	r0, #2
 80081da:	f7f9 fb07 	bl	80017ec <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f000 ff7c 	bl	80090dc <SD_PowerON>
 80081e4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80081e6:	6a3b      	ldr	r3, [r7, #32]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d00b      	beq.n	8008204 <HAL_SD_InitCard+0xc0>
  {
    hsd->State = HAL_SD_STATE_READY;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2201      	movs	r2, #1
 80081f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081f8:	6a3b      	ldr	r3, [r7, #32]
 80081fa:	431a      	orrs	r2, r3
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008200:	2301      	movs	r3, #1
 8008202:	e02e      	b.n	8008262 <HAL_SD_InitCard+0x11e>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f000 feab 	bl	8008f60 <SD_InitCard>
 800820a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800820c:	6a3b      	ldr	r3, [r7, #32]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d00b      	beq.n	800822a <HAL_SD_InitCard+0xe6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2201      	movs	r2, #1
 8008216:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800821e:	6a3b      	ldr	r3, [r7, #32]
 8008220:	431a      	orrs	r2, r3
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008226:	2301      	movs	r3, #1
 8008228:	e01b      	b.n	8008262 <HAL_SD_InitCard+0x11e>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008232:	4618      	mov	r0, r3
 8008234:	f002 fd32 	bl	800ac9c <SDMMC_CmdBlockLength>
 8008238:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800823a:	6a3b      	ldr	r3, [r7, #32]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d00f      	beq.n	8008260 <HAL_SD_InitCard+0x11c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4a0b      	ldr	r2, [pc, #44]	; (8008274 <HAL_SD_InitCard+0x130>)
 8008246:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800824c:	6a3b      	ldr	r3, [r7, #32]
 800824e:	431a      	orrs	r2, r3
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2201      	movs	r2, #1
 8008258:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800825c:	2301      	movs	r3, #1
 800825e:	e000      	b.n	8008262 <HAL_SD_InitCard+0x11e>
  }

  return HAL_OK;
 8008260:	2300      	movs	r3, #0
}
 8008262:	4618      	mov	r0, r3
 8008264:	3728      	adds	r7, #40	; 0x28
 8008266:	46bd      	mov	sp, r7
 8008268:	bdb0      	pop	{r4, r5, r7, pc}
 800826a:	bf00      	nop
 800826c:	014f8b59 	.word	0x014f8b59
 8008270:	00012110 	.word	0x00012110
 8008274:	1fe00fff 	.word	0x1fe00fff

08008278 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b092      	sub	sp, #72	; 0x48
 800827c:	af00      	add	r7, sp, #0
 800827e:	60f8      	str	r0, [r7, #12]
 8008280:	60b9      	str	r1, [r7, #8]
 8008282:	607a      	str	r2, [r7, #4]
 8008284:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008286:	f7f9 faa5 	bl	80017d4 <HAL_GetTick>
 800828a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d107      	bne.n	80082aa <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800829e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80082a6:	2301      	movs	r3, #1
 80082a8:	e167      	b.n	800857a <HAL_SD_ReadBlocks+0x302>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80082b0:	b2db      	uxtb	r3, r3
 80082b2:	2b01      	cmp	r3, #1
 80082b4:	f040 815a 	bne.w	800856c <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	2200      	movs	r2, #0
 80082bc:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80082be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	441a      	add	r2, r3
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082c8:	429a      	cmp	r2, r3
 80082ca:	d907      	bls.n	80082dc <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082d0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80082d8:	2301      	movs	r3, #1
 80082da:	e14e      	b.n	800857a <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	2203      	movs	r2, #3
 80082e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	2200      	movs	r2, #0
 80082ea:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082f0:	2b01      	cmp	r3, #1
 80082f2:	d002      	beq.n	80082fa <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80082f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082f6:	025b      	lsls	r3, r3, #9
 80082f8:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80082fa:	f04f 33ff 	mov.w	r3, #4294967295
 80082fe:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	025b      	lsls	r3, r3, #9
 8008304:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008306:	2390      	movs	r3, #144	; 0x90
 8008308:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800830a:	2302      	movs	r3, #2
 800830c:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800830e:	2300      	movs	r3, #0
 8008310:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8008312:	2300      	movs	r3, #0
 8008314:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f107 0214 	add.w	r2, r7, #20
 800831e:	4611      	mov	r1, r2
 8008320:	4618      	mov	r0, r3
 8008322:	f002 fc8f 	bl	800ac44 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	68da      	ldr	r2, [r3, #12]
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008334:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	2b01      	cmp	r3, #1
 800833a:	d90a      	bls.n	8008352 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2202      	movs	r2, #2
 8008340:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008348:	4618      	mov	r0, r3
 800834a:	f002 fced 	bl	800ad28 <SDMMC_CmdReadMultiBlock>
 800834e:	6478      	str	r0, [r7, #68]	; 0x44
 8008350:	e009      	b.n	8008366 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	2201      	movs	r2, #1
 8008356:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800835e:	4618      	mov	r0, r3
 8008360:	f002 fcbf 	bl	800ace2 <SDMMC_CmdReadSingleBlock>
 8008364:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008366:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008368:	2b00      	cmp	r3, #0
 800836a:	d012      	beq.n	8008392 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4a84      	ldr	r2, [pc, #528]	; (8008584 <HAL_SD_ReadBlocks+0x30c>)
 8008372:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008378:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800837a:	431a      	orrs	r2, r3
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	2201      	movs	r2, #1
 8008384:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	2200      	movs	r2, #0
 800838c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800838e:	2301      	movs	r3, #1
 8008390:	e0f3      	b.n	800857a <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8008392:	69bb      	ldr	r3, [r7, #24]
 8008394:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008396:	e058      	b.n	800844a <HAL_SD_ReadBlocks+0x1d2>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800839e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d033      	beq.n	800840e <HAL_SD_ReadBlocks+0x196>
 80083a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083a8:	2b1f      	cmp	r3, #31
 80083aa:	d930      	bls.n	800840e <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80083ac:	2300      	movs	r3, #0
 80083ae:	643b      	str	r3, [r7, #64]	; 0x40
 80083b0:	e027      	b.n	8008402 <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	4618      	mov	r0, r3
 80083b8:	f002 fbbc 	bl	800ab34 <SDMMC_ReadFIFO>
 80083bc:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80083be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083c0:	b2da      	uxtb	r2, r3
 80083c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083c4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80083c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083c8:	3301      	adds	r3, #1
 80083ca:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80083cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ce:	0a1b      	lsrs	r3, r3, #8
 80083d0:	b2da      	uxtb	r2, r3
 80083d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083d4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80083d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083d8:	3301      	adds	r3, #1
 80083da:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80083dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083de:	0c1b      	lsrs	r3, r3, #16
 80083e0:	b2da      	uxtb	r2, r3
 80083e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083e4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80083e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083e8:	3301      	adds	r3, #1
 80083ea:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80083ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ee:	0e1b      	lsrs	r3, r3, #24
 80083f0:	b2da      	uxtb	r2, r3
 80083f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083f4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80083f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083f8:	3301      	adds	r3, #1
 80083fa:	637b      	str	r3, [r7, #52]	; 0x34
        for(count = 0U; count < 8U; count++)
 80083fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083fe:	3301      	adds	r3, #1
 8008400:	643b      	str	r3, [r7, #64]	; 0x40
 8008402:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008404:	2b07      	cmp	r3, #7
 8008406:	d9d4      	bls.n	80083b2 <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 8008408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800840a:	3b20      	subs	r3, #32
 800840c:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800840e:	f7f9 f9e1 	bl	80017d4 <HAL_GetTick>
 8008412:	4602      	mov	r2, r0
 8008414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008416:	1ad3      	subs	r3, r2, r3
 8008418:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800841a:	429a      	cmp	r2, r3
 800841c:	d902      	bls.n	8008424 <HAL_SD_ReadBlocks+0x1ac>
 800841e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008420:	2b00      	cmp	r3, #0
 8008422:	d112      	bne.n	800844a <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4a56      	ldr	r2, [pc, #344]	; (8008584 <HAL_SD_ReadBlocks+0x30c>)
 800842a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008430:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	2201      	movs	r2, #1
 800843c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	2200      	movs	r2, #0
 8008444:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8008446:	2303      	movs	r3, #3
 8008448:	e097      	b.n	800857a <HAL_SD_ReadBlocks+0x302>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008450:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8008454:	2b00      	cmp	r3, #0
 8008456:	d09f      	beq.n	8008398 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	68da      	ldr	r2, [r3, #12]
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008466:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800846e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008472:	2b00      	cmp	r3, #0
 8008474:	d022      	beq.n	80084bc <HAL_SD_ReadBlocks+0x244>
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	2b01      	cmp	r3, #1
 800847a:	d91f      	bls.n	80084bc <HAL_SD_ReadBlocks+0x244>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008480:	2b03      	cmp	r3, #3
 8008482:	d01b      	beq.n	80084bc <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4618      	mov	r0, r3
 800848a:	f002 fcb7 	bl	800adfc <SDMMC_CmdStopTransfer>
 800848e:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8008490:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008492:	2b00      	cmp	r3, #0
 8008494:	d012      	beq.n	80084bc <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4a3a      	ldr	r2, [pc, #232]	; (8008584 <HAL_SD_ReadBlocks+0x30c>)
 800849c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084a4:	431a      	orrs	r2, r3
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	2201      	movs	r2, #1
 80084ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	2200      	movs	r2, #0
 80084b6:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80084b8:	2301      	movs	r3, #1
 80084ba:	e05e      	b.n	800857a <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084c2:	f003 0308 	and.w	r3, r3, #8
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d012      	beq.n	80084f0 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	4a2d      	ldr	r2, [pc, #180]	; (8008584 <HAL_SD_ReadBlocks+0x30c>)
 80084d0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084d6:	f043 0208 	orr.w	r2, r3, #8
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	2201      	movs	r2, #1
 80084e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	2200      	movs	r2, #0
 80084ea:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80084ec:	2301      	movs	r3, #1
 80084ee:	e044      	b.n	800857a <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084f6:	f003 0302 	and.w	r3, r3, #2
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d012      	beq.n	8008524 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	4a20      	ldr	r2, [pc, #128]	; (8008584 <HAL_SD_ReadBlocks+0x30c>)
 8008504:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800850a:	f043 0202 	orr.w	r2, r3, #2
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	2201      	movs	r2, #1
 8008516:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	2200      	movs	r2, #0
 800851e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008520:	2301      	movs	r3, #1
 8008522:	e02a      	b.n	800857a <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800852a:	f003 0320 	and.w	r3, r3, #32
 800852e:	2b00      	cmp	r3, #0
 8008530:	d012      	beq.n	8008558 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4a13      	ldr	r2, [pc, #76]	; (8008584 <HAL_SD_ReadBlocks+0x30c>)
 8008538:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800853e:	f043 0220 	orr.w	r2, r3, #32
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	2201      	movs	r2, #1
 800854a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	2200      	movs	r2, #0
 8008552:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008554:	2301      	movs	r3, #1
 8008556:	e010      	b.n	800857a <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4a0a      	ldr	r2, [pc, #40]	; (8008588 <HAL_SD_ReadBlocks+0x310>)
 800855e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	2201      	movs	r2, #1
 8008564:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8008568:	2300      	movs	r3, #0
 800856a:	e006      	b.n	800857a <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008570:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008578:	2301      	movs	r3, #1
  }
}
 800857a:	4618      	mov	r0, r3
 800857c:	3748      	adds	r7, #72	; 0x48
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}
 8008582:	bf00      	nop
 8008584:	1fe00fff 	.word	0x1fe00fff
 8008588:	18000f3a 	.word	0x18000f3a

0800858c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b092      	sub	sp, #72	; 0x48
 8008590:	af00      	add	r7, sp, #0
 8008592:	60f8      	str	r0, [r7, #12]
 8008594:	60b9      	str	r1, [r7, #8]
 8008596:	607a      	str	r2, [r7, #4]
 8008598:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800859a:	f7f9 f91b 	bl	80017d4 <HAL_GetTick>
 800859e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d107      	bne.n	80085be <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085b2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80085ba:	2301      	movs	r3, #1
 80085bc:	e16b      	b.n	8008896 <HAL_SD_WriteBlocks+0x30a>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80085c4:	b2db      	uxtb	r3, r3
 80085c6:	2b01      	cmp	r3, #1
 80085c8:	f040 815e 	bne.w	8008888 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	2200      	movs	r2, #0
 80085d0:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80085d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	441a      	add	r2, r3
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085dc:	429a      	cmp	r2, r3
 80085de:	d907      	bls.n	80085f0 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085e4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80085ec:	2301      	movs	r3, #1
 80085ee:	e152      	b.n	8008896 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2203      	movs	r2, #3
 80085f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	2200      	movs	r2, #0
 80085fe:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008604:	2b01      	cmp	r3, #1
 8008606:	d002      	beq.n	800860e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8008608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800860a:	025b      	lsls	r3, r3, #9
 800860c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800860e:	f04f 33ff 	mov.w	r3, #4294967295
 8008612:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	025b      	lsls	r3, r3, #9
 8008618:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800861a:	2390      	movs	r3, #144	; 0x90
 800861c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800861e:	2300      	movs	r3, #0
 8008620:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008622:	2300      	movs	r3, #0
 8008624:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8008626:	2300      	movs	r3, #0
 8008628:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f107 0218 	add.w	r2, r7, #24
 8008632:	4611      	mov	r1, r2
 8008634:	4618      	mov	r0, r3
 8008636:	f002 fb05 	bl	800ac44 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	68da      	ldr	r2, [r3, #12]
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008648:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	2b01      	cmp	r3, #1
 800864e:	d90a      	bls.n	8008666 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	2220      	movs	r2, #32
 8008654:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800865c:	4618      	mov	r0, r3
 800865e:	f002 fba9 	bl	800adb4 <SDMMC_CmdWriteMultiBlock>
 8008662:	6478      	str	r0, [r7, #68]	; 0x44
 8008664:	e009      	b.n	800867a <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	2210      	movs	r2, #16
 800866a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008672:	4618      	mov	r0, r3
 8008674:	f002 fb7b 	bl	800ad6e <SDMMC_CmdWriteSingleBlock>
 8008678:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800867a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800867c:	2b00      	cmp	r3, #0
 800867e:	d012      	beq.n	80086a6 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4a86      	ldr	r2, [pc, #536]	; (80088a0 <HAL_SD_WriteBlocks+0x314>)
 8008686:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800868c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800868e:	431a      	orrs	r2, r3
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	2201      	movs	r2, #1
 8008698:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	2200      	movs	r2, #0
 80086a0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80086a2:	2301      	movs	r3, #1
 80086a4:	e0f7      	b.n	8008896 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80086a6:	69fb      	ldr	r3, [r7, #28]
 80086a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80086aa:	e05c      	b.n	8008766 <HAL_SD_WriteBlocks+0x1da>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d037      	beq.n	800872a <HAL_SD_WriteBlocks+0x19e>
 80086ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086bc:	2b1f      	cmp	r3, #31
 80086be:	d934      	bls.n	800872a <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80086c0:	2300      	movs	r3, #0
 80086c2:	643b      	str	r3, [r7, #64]	; 0x40
 80086c4:	e02b      	b.n	800871e <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 80086c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086c8:	781b      	ldrb	r3, [r3, #0]
 80086ca:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80086cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086ce:	3301      	adds	r3, #1
 80086d0:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 80086d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086d4:	781b      	ldrb	r3, [r3, #0]
 80086d6:	021a      	lsls	r2, r3, #8
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	4313      	orrs	r3, r2
 80086dc:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80086de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086e0:	3301      	adds	r3, #1
 80086e2:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 80086e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086e6:	781b      	ldrb	r3, [r3, #0]
 80086e8:	041a      	lsls	r2, r3, #16
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	4313      	orrs	r3, r2
 80086ee:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80086f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086f2:	3301      	adds	r3, #1
 80086f4:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 80086f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086f8:	781b      	ldrb	r3, [r3, #0]
 80086fa:	061a      	lsls	r2, r3, #24
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	4313      	orrs	r3, r2
 8008700:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008704:	3301      	adds	r3, #1
 8008706:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f107 0214 	add.w	r2, r7, #20
 8008710:	4611      	mov	r1, r2
 8008712:	4618      	mov	r0, r3
 8008714:	f002 fa1b 	bl	800ab4e <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8008718:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800871a:	3301      	adds	r3, #1
 800871c:	643b      	str	r3, [r7, #64]	; 0x40
 800871e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008720:	2b07      	cmp	r3, #7
 8008722:	d9d0      	bls.n	80086c6 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 8008724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008726:	3b20      	subs	r3, #32
 8008728:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800872a:	f7f9 f853 	bl	80017d4 <HAL_GetTick>
 800872e:	4602      	mov	r2, r0
 8008730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008732:	1ad3      	subs	r3, r2, r3
 8008734:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008736:	429a      	cmp	r2, r3
 8008738:	d902      	bls.n	8008740 <HAL_SD_WriteBlocks+0x1b4>
 800873a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800873c:	2b00      	cmp	r3, #0
 800873e:	d112      	bne.n	8008766 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4a56      	ldr	r2, [pc, #344]	; (80088a0 <HAL_SD_WriteBlocks+0x314>)
 8008746:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800874c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800874e:	431a      	orrs	r2, r3
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2201      	movs	r2, #1
 8008758:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2200      	movs	r2, #0
 8008760:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8008762:	2303      	movs	r3, #3
 8008764:	e097      	b.n	8008896 <HAL_SD_WriteBlocks+0x30a>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800876c:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8008770:	2b00      	cmp	r3, #0
 8008772:	d09b      	beq.n	80086ac <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	68da      	ldr	r2, [r3, #12]
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008782:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800878a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800878e:	2b00      	cmp	r3, #0
 8008790:	d022      	beq.n	80087d8 <HAL_SD_WriteBlocks+0x24c>
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	2b01      	cmp	r3, #1
 8008796:	d91f      	bls.n	80087d8 <HAL_SD_WriteBlocks+0x24c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800879c:	2b03      	cmp	r3, #3
 800879e:	d01b      	beq.n	80087d8 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4618      	mov	r0, r3
 80087a6:	f002 fb29 	bl	800adfc <SDMMC_CmdStopTransfer>
 80087aa:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80087ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d012      	beq.n	80087d8 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4a3a      	ldr	r2, [pc, #232]	; (80088a0 <HAL_SD_WriteBlocks+0x314>)
 80087b8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087c0:	431a      	orrs	r2, r3
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	2201      	movs	r2, #1
 80087ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	2200      	movs	r2, #0
 80087d2:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80087d4:	2301      	movs	r3, #1
 80087d6:	e05e      	b.n	8008896 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087de:	f003 0308 	and.w	r3, r3, #8
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d012      	beq.n	800880c <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	4a2d      	ldr	r2, [pc, #180]	; (80088a0 <HAL_SD_WriteBlocks+0x314>)
 80087ec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087f2:	f043 0208 	orr.w	r2, r3, #8
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	2201      	movs	r2, #1
 80087fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	2200      	movs	r2, #0
 8008806:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008808:	2301      	movs	r3, #1
 800880a:	e044      	b.n	8008896 <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008812:	f003 0302 	and.w	r3, r3, #2
 8008816:	2b00      	cmp	r3, #0
 8008818:	d012      	beq.n	8008840 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	4a20      	ldr	r2, [pc, #128]	; (80088a0 <HAL_SD_WriteBlocks+0x314>)
 8008820:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008826:	f043 0202 	orr.w	r2, r3, #2
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	2201      	movs	r2, #1
 8008832:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2200      	movs	r2, #0
 800883a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800883c:	2301      	movs	r3, #1
 800883e:	e02a      	b.n	8008896 <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008846:	f003 0310 	and.w	r3, r3, #16
 800884a:	2b00      	cmp	r3, #0
 800884c:	d012      	beq.n	8008874 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	4a13      	ldr	r2, [pc, #76]	; (80088a0 <HAL_SD_WriteBlocks+0x314>)
 8008854:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800885a:	f043 0210 	orr.w	r2, r3, #16
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2201      	movs	r2, #1
 8008866:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	2200      	movs	r2, #0
 800886e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008870:	2301      	movs	r3, #1
 8008872:	e010      	b.n	8008896 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	4a0a      	ldr	r2, [pc, #40]	; (80088a4 <HAL_SD_WriteBlocks+0x318>)
 800887a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	2201      	movs	r2, #1
 8008880:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8008884:	2300      	movs	r3, #0
 8008886:	e006      	b.n	8008896 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800888c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008894:	2301      	movs	r3, #1
  }
}
 8008896:	4618      	mov	r0, r3
 8008898:	3748      	adds	r7, #72	; 0x48
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}
 800889e:	bf00      	nop
 80088a0:	1fe00fff 	.word	0x1fe00fff
 80088a4:	18000f3a 	.word	0x18000f3a

080088a8 <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b083      	sub	sp, #12
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	4603      	mov	r3, r0
 80088b0:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 80088b2:	bf00      	nop
 80088b4:	370c      	adds	r7, #12
 80088b6:	46bd      	mov	sp, r7
 80088b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088bc:	4770      	bx	lr
	...

080088c0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80088c0:	b480      	push	{r7}
 80088c2:	b083      	sub	sp, #12
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
 80088c8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088ce:	0f9b      	lsrs	r3, r3, #30
 80088d0:	b2da      	uxtb	r2, r3
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088da:	0e9b      	lsrs	r3, r3, #26
 80088dc:	b2db      	uxtb	r3, r3
 80088de:	f003 030f 	and.w	r3, r3, #15
 80088e2:	b2da      	uxtb	r2, r3
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088ec:	0e1b      	lsrs	r3, r3, #24
 80088ee:	b2db      	uxtb	r3, r3
 80088f0:	f003 0303 	and.w	r3, r3, #3
 80088f4:	b2da      	uxtb	r2, r3
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088fe:	0c1b      	lsrs	r3, r3, #16
 8008900:	b2da      	uxtb	r2, r3
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800890a:	0a1b      	lsrs	r3, r3, #8
 800890c:	b2da      	uxtb	r2, r3
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008916:	b2da      	uxtb	r2, r3
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008920:	0d1b      	lsrs	r3, r3, #20
 8008922:	b29a      	uxth	r2, r3
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800892c:	0c1b      	lsrs	r3, r3, #16
 800892e:	b2db      	uxtb	r3, r3
 8008930:	f003 030f 	and.w	r3, r3, #15
 8008934:	b2da      	uxtb	r2, r3
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800893e:	0bdb      	lsrs	r3, r3, #15
 8008940:	b2db      	uxtb	r3, r3
 8008942:	f003 0301 	and.w	r3, r3, #1
 8008946:	b2da      	uxtb	r2, r3
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008950:	0b9b      	lsrs	r3, r3, #14
 8008952:	b2db      	uxtb	r3, r3
 8008954:	f003 0301 	and.w	r3, r3, #1
 8008958:	b2da      	uxtb	r2, r3
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008962:	0b5b      	lsrs	r3, r3, #13
 8008964:	b2db      	uxtb	r3, r3
 8008966:	f003 0301 	and.w	r3, r3, #1
 800896a:	b2da      	uxtb	r2, r3
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008974:	0b1b      	lsrs	r3, r3, #12
 8008976:	b2db      	uxtb	r3, r3
 8008978:	f003 0301 	and.w	r3, r3, #1
 800897c:	b2da      	uxtb	r2, r3
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	2200      	movs	r2, #0
 8008986:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800898c:	2b00      	cmp	r3, #0
 800898e:	d163      	bne.n	8008a58 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008994:	009a      	lsls	r2, r3, #2
 8008996:	f640 73fc 	movw	r3, #4092	; 0xffc
 800899a:	4013      	ands	r3, r2
 800899c:	687a      	ldr	r2, [r7, #4]
 800899e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80089a0:	0f92      	lsrs	r2, r2, #30
 80089a2:	431a      	orrs	r2, r3
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089ac:	0edb      	lsrs	r3, r3, #27
 80089ae:	b2db      	uxtb	r3, r3
 80089b0:	f003 0307 	and.w	r3, r3, #7
 80089b4:	b2da      	uxtb	r2, r3
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089be:	0e1b      	lsrs	r3, r3, #24
 80089c0:	b2db      	uxtb	r3, r3
 80089c2:	f003 0307 	and.w	r3, r3, #7
 80089c6:	b2da      	uxtb	r2, r3
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089d0:	0d5b      	lsrs	r3, r3, #21
 80089d2:	b2db      	uxtb	r3, r3
 80089d4:	f003 0307 	and.w	r3, r3, #7
 80089d8:	b2da      	uxtb	r2, r3
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089e2:	0c9b      	lsrs	r3, r3, #18
 80089e4:	b2db      	uxtb	r3, r3
 80089e6:	f003 0307 	and.w	r3, r3, #7
 80089ea:	b2da      	uxtb	r2, r3
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089f4:	0bdb      	lsrs	r3, r3, #15
 80089f6:	b2db      	uxtb	r3, r3
 80089f8:	f003 0307 	and.w	r3, r3, #7
 80089fc:	b2da      	uxtb	r2, r3
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	691b      	ldr	r3, [r3, #16]
 8008a06:	1c5a      	adds	r2, r3, #1
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	7e1b      	ldrb	r3, [r3, #24]
 8008a10:	b2db      	uxtb	r3, r3
 8008a12:	f003 0307 	and.w	r3, r3, #7
 8008a16:	3302      	adds	r3, #2
 8008a18:	2201      	movs	r2, #1
 8008a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a1e:	687a      	ldr	r2, [r7, #4]
 8008a20:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008a22:	fb02 f203 	mul.w	r2, r2, r3
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	7a1b      	ldrb	r3, [r3, #8]
 8008a2e:	b2db      	uxtb	r3, r3
 8008a30:	f003 030f 	and.w	r3, r3, #15
 8008a34:	2201      	movs	r2, #1
 8008a36:	409a      	lsls	r2, r3
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a40:	687a      	ldr	r2, [r7, #4]
 8008a42:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008a44:	0a52      	lsrs	r2, r2, #9
 8008a46:	fb02 f203 	mul.w	r2, r2, r3
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a54:	659a      	str	r2, [r3, #88]	; 0x58
 8008a56:	e031      	b.n	8008abc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a5c:	2b01      	cmp	r3, #1
 8008a5e:	d11d      	bne.n	8008a9c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a64:	041b      	lsls	r3, r3, #16
 8008a66:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a6e:	0c1b      	lsrs	r3, r3, #16
 8008a70:	431a      	orrs	r2, r3
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	691b      	ldr	r3, [r3, #16]
 8008a7a:	3301      	adds	r3, #1
 8008a7c:	029a      	lsls	r2, r3, #10
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a90:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	659a      	str	r2, [r3, #88]	; 0x58
 8008a9a:	e00f      	b.n	8008abc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	4a58      	ldr	r2, [pc, #352]	; (8008c04 <HAL_SD_GetCardCSD+0x344>)
 8008aa2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aa8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2201      	movs	r2, #1
 8008ab4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008ab8:	2301      	movs	r3, #1
 8008aba:	e09d      	b.n	8008bf8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ac0:	0b9b      	lsrs	r3, r3, #14
 8008ac2:	b2db      	uxtb	r3, r3
 8008ac4:	f003 0301 	and.w	r3, r3, #1
 8008ac8:	b2da      	uxtb	r2, r3
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ad2:	09db      	lsrs	r3, r3, #7
 8008ad4:	b2db      	uxtb	r3, r3
 8008ad6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ada:	b2da      	uxtb	r2, r3
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ae4:	b2db      	uxtb	r3, r3
 8008ae6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008aea:	b2da      	uxtb	r2, r3
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008af4:	0fdb      	lsrs	r3, r3, #31
 8008af6:	b2da      	uxtb	r2, r3
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b00:	0f5b      	lsrs	r3, r3, #29
 8008b02:	b2db      	uxtb	r3, r3
 8008b04:	f003 0303 	and.w	r3, r3, #3
 8008b08:	b2da      	uxtb	r2, r3
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b12:	0e9b      	lsrs	r3, r3, #26
 8008b14:	b2db      	uxtb	r3, r3
 8008b16:	f003 0307 	and.w	r3, r3, #7
 8008b1a:	b2da      	uxtb	r2, r3
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b24:	0d9b      	lsrs	r3, r3, #22
 8008b26:	b2db      	uxtb	r3, r3
 8008b28:	f003 030f 	and.w	r3, r3, #15
 8008b2c:	b2da      	uxtb	r2, r3
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b36:	0d5b      	lsrs	r3, r3, #21
 8008b38:	b2db      	uxtb	r3, r3
 8008b3a:	f003 0301 	and.w	r3, r3, #1
 8008b3e:	b2da      	uxtb	r2, r3
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b52:	0c1b      	lsrs	r3, r3, #16
 8008b54:	b2db      	uxtb	r3, r3
 8008b56:	f003 0301 	and.w	r3, r3, #1
 8008b5a:	b2da      	uxtb	r2, r3
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b66:	0bdb      	lsrs	r3, r3, #15
 8008b68:	b2db      	uxtb	r3, r3
 8008b6a:	f003 0301 	and.w	r3, r3, #1
 8008b6e:	b2da      	uxtb	r2, r3
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b7a:	0b9b      	lsrs	r3, r3, #14
 8008b7c:	b2db      	uxtb	r3, r3
 8008b7e:	f003 0301 	and.w	r3, r3, #1
 8008b82:	b2da      	uxtb	r2, r3
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b8e:	0b5b      	lsrs	r3, r3, #13
 8008b90:	b2db      	uxtb	r3, r3
 8008b92:	f003 0301 	and.w	r3, r3, #1
 8008b96:	b2da      	uxtb	r2, r3
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ba2:	0b1b      	lsrs	r3, r3, #12
 8008ba4:	b2db      	uxtb	r3, r3
 8008ba6:	f003 0301 	and.w	r3, r3, #1
 8008baa:	b2da      	uxtb	r2, r3
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bb6:	0a9b      	lsrs	r3, r3, #10
 8008bb8:	b2db      	uxtb	r3, r3
 8008bba:	f003 0303 	and.w	r3, r3, #3
 8008bbe:	b2da      	uxtb	r2, r3
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bca:	0a1b      	lsrs	r3, r3, #8
 8008bcc:	b2db      	uxtb	r3, r3
 8008bce:	f003 0303 	and.w	r3, r3, #3
 8008bd2:	b2da      	uxtb	r2, r3
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bde:	085b      	lsrs	r3, r3, #1
 8008be0:	b2db      	uxtb	r3, r3
 8008be2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008be6:	b2da      	uxtb	r2, r3
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	2201      	movs	r2, #1
 8008bf2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008bf6:	2300      	movs	r3, #0
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	370c      	adds	r7, #12
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c02:	4770      	bx	lr
 8008c04:	1fe00fff 	.word	0x1fe00fff

08008c08 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b094      	sub	sp, #80	; 0x50
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
 8008c10:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8008c12:	2300      	movs	r3, #0
 8008c14:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8008c18:	f107 0308 	add.w	r3, r7, #8
 8008c1c:	4619      	mov	r1, r3
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f000 fb64 	bl	80092ec <SD_SendSDStatus>
 8008c24:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d011      	beq.n	8008c50 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	4a4f      	ldr	r2, [pc, #316]	; (8008d70 <HAL_SD_GetCardStatus+0x168>)
 8008c32:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c3a:	431a      	orrs	r2, r3
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2201      	movs	r2, #1
 8008c44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8008c48:	2301      	movs	r3, #1
 8008c4a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8008c4e:	e070      	b.n	8008d32 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	099b      	lsrs	r3, r3, #6
 8008c54:	b2db      	uxtb	r3, r3
 8008c56:	f003 0303 	and.w	r3, r3, #3
 8008c5a:	b2da      	uxtb	r2, r3
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	095b      	lsrs	r3, r3, #5
 8008c64:	b2db      	uxtb	r3, r3
 8008c66:	f003 0301 	and.w	r3, r3, #1
 8008c6a:	b2da      	uxtb	r2, r3
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	0a1b      	lsrs	r3, r3, #8
 8008c74:	b29b      	uxth	r3, r3
 8008c76:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008c7a:	b29a      	uxth	r2, r3
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	0e1b      	lsrs	r3, r3, #24
 8008c80:	b29b      	uxth	r3, r3
 8008c82:	4313      	orrs	r3, r2
 8008c84:	b29a      	uxth	r2, r3
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	061a      	lsls	r2, r3, #24
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	021b      	lsls	r3, r3, #8
 8008c92:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008c96:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	0a1b      	lsrs	r3, r3, #8
 8008c9c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008ca0:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	0e1b      	lsrs	r3, r3, #24
 8008ca6:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8008cac:	693b      	ldr	r3, [r7, #16]
 8008cae:	b2da      	uxtb	r2, r3
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	0a1b      	lsrs	r3, r3, #8
 8008cb8:	b2da      	uxtb	r2, r3
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	0d1b      	lsrs	r3, r3, #20
 8008cc2:	b2db      	uxtb	r3, r3
 8008cc4:	f003 030f 	and.w	r3, r3, #15
 8008cc8:	b2da      	uxtb	r2, r3
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8008cce:	693b      	ldr	r3, [r7, #16]
 8008cd0:	0c1b      	lsrs	r3, r3, #16
 8008cd2:	b29b      	uxth	r3, r3
 8008cd4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008cd8:	b29a      	uxth	r2, r3
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	b29b      	uxth	r3, r3
 8008cde:	b2db      	uxtb	r3, r3
 8008ce0:	b29b      	uxth	r3, r3
 8008ce2:	4313      	orrs	r3, r2
 8008ce4:	b29a      	uxth	r2, r3
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	0a9b      	lsrs	r3, r3, #10
 8008cee:	b2db      	uxtb	r3, r3
 8008cf0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008cf4:	b2da      	uxtb	r2, r3
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8008cfa:	697b      	ldr	r3, [r7, #20]
 8008cfc:	0a1b      	lsrs	r3, r3, #8
 8008cfe:	b2db      	uxtb	r3, r3
 8008d00:	f003 0303 	and.w	r3, r3, #3
 8008d04:	b2da      	uxtb	r2, r3
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	091b      	lsrs	r3, r3, #4
 8008d0e:	b2db      	uxtb	r3, r3
 8008d10:	f003 030f 	and.w	r3, r3, #15
 8008d14:	b2da      	uxtb	r2, r3
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8008d1a:	697b      	ldr	r3, [r7, #20]
 8008d1c:	b2db      	uxtb	r3, r3
 8008d1e:	f003 030f 	and.w	r3, r3, #15
 8008d22:	b2da      	uxtb	r2, r3
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8008d28:	69bb      	ldr	r3, [r7, #24]
 8008d2a:	0e1b      	lsrs	r3, r3, #24
 8008d2c:	b2da      	uxtb	r2, r3
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f001 ffae 	bl	800ac9c <SDMMC_CmdBlockLength>
 8008d40:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8008d42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d00d      	beq.n	8008d64 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	4a08      	ldr	r2, [pc, #32]	; (8008d70 <HAL_SD_GetCardStatus+0x168>)
 8008d4e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d54:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2201      	movs	r2, #1
 8008d5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8008d5e:	2301      	movs	r3, #1
 8008d60:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 8008d64:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	3750      	adds	r7, #80	; 0x50
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}
 8008d70:	1fe00fff 	.word	0x1fe00fff

08008d74 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008d74:	b480      	push	{r7}
 8008d76:	b083      	sub	sp, #12
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
 8008d7c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008dbe:	2300      	movs	r3, #0
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	370c      	adds	r7, #12
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dca:	4770      	bx	lr

08008dcc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008dcc:	b5b0      	push	{r4, r5, r7, lr}
 8008dce:	b08e      	sub	sp, #56	; 0x38
 8008dd0:	af04      	add	r7, sp, #16
 8008dd2:	6078      	str	r0, [r7, #4]
 8008dd4:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2203      	movs	r2, #3
 8008de0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008de8:	2b03      	cmp	r3, #3
 8008dea:	d02e      	beq.n	8008e4a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008df2:	d106      	bne.n	8008e02 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008df8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	639a      	str	r2, [r3, #56]	; 0x38
 8008e00:	e029      	b.n	8008e56 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008e08:	d10a      	bne.n	8008e20 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f000 fb66 	bl	80094dc <SD_WideBus_Enable>
 8008e10:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e16:	6a3b      	ldr	r3, [r7, #32]
 8008e18:	431a      	orrs	r2, r3
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	639a      	str	r2, [r3, #56]	; 0x38
 8008e1e:	e01a      	b.n	8008e56 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d10a      	bne.n	8008e3c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f000 fba3 	bl	8009572 <SD_WideBus_Disable>
 8008e2c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e32:	6a3b      	ldr	r3, [r7, #32]
 8008e34:	431a      	orrs	r2, r3
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	639a      	str	r2, [r3, #56]	; 0x38
 8008e3a:	e00c      	b.n	8008e56 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e40:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	639a      	str	r2, [r3, #56]	; 0x38
 8008e48:	e005      	b.n	8008e56 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e4e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d007      	beq.n	8008e6e <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	4a2e      	ldr	r2, [pc, #184]	; (8008f1c <HAL_SD_ConfigWideBusOperation+0x150>)
 8008e64:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8008e66:	2301      	movs	r3, #1
 8008e68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008e6c:	e034      	b.n	8008ed8 <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	685b      	ldr	r3, [r3, #4]
 8008e72:	60bb      	str	r3, [r7, #8]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	689b      	ldr	r3, [r3, #8]
 8008e78:	60fb      	str	r3, [r7, #12]
    Init.BusWide             = WideMode;
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	613b      	str	r3, [r7, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	691b      	ldr	r3, [r3, #16]
 8008e82:	617b      	str	r3, [r7, #20]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	695b      	ldr	r3, [r3, #20]
 8008e88:	2b03      	cmp	r3, #3
 8008e8a:	d903      	bls.n	8008e94 <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	695b      	ldr	r3, [r3, #20]
 8008e90:	61bb      	str	r3, [r7, #24]
 8008e92:	e012      	b.n	8008eba <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e9c:	d103      	bne.n	8008ea6 <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	695b      	ldr	r3, [r3, #20]
 8008ea2:	61bb      	str	r3, [r7, #24]
 8008ea4:	e009      	b.n	8008eba <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008eaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008eae:	d102      	bne.n	8008eb6 <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 8008eb0:	2302      	movs	r3, #2
 8008eb2:	61bb      	str	r3, [r7, #24]
 8008eb4:	e001      	b.n	8008eba <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 8008eb6:	2304      	movs	r3, #4
 8008eb8:	61bb      	str	r3, [r7, #24]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681d      	ldr	r5, [r3, #0]
 8008ebe:	466c      	mov	r4, sp
 8008ec0:	f107 0314 	add.w	r3, r7, #20
 8008ec4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008ec8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008ecc:	f107 0308 	add.w	r3, r7, #8
 8008ed0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008ed2:	4628      	mov	r0, r5
 8008ed4:	f001 fe04 	bl	800aae0 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	f001 fedb 	bl	800ac9c <SDMMC_CmdBlockLength>
 8008ee6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008ee8:	6a3b      	ldr	r3, [r7, #32]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d00c      	beq.n	8008f08 <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	4a0a      	ldr	r2, [pc, #40]	; (8008f1c <HAL_SD_ConfigWideBusOperation+0x150>)
 8008ef4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008efa:	6a3b      	ldr	r3, [r7, #32]
 8008efc:	431a      	orrs	r2, r3
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8008f02:	2301      	movs	r3, #1
 8008f04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2201      	movs	r2, #1
 8008f0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8008f10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	3728      	adds	r7, #40	; 0x28
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bdb0      	pop	{r4, r5, r7, pc}
 8008f1c:	1fe00fff 	.word	0x1fe00fff

08008f20 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b086      	sub	sp, #24
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008f28:	2300      	movs	r3, #0
 8008f2a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008f2c:	f107 030c 	add.w	r3, r7, #12
 8008f30:	4619      	mov	r1, r3
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f000 faaa 	bl	800948c <SD_SendStatus>
 8008f38:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f3a:	697b      	ldr	r3, [r7, #20]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d005      	beq.n	8008f4c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f44:	697b      	ldr	r3, [r7, #20]
 8008f46:	431a      	orrs	r2, r3
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	0a5b      	lsrs	r3, r3, #9
 8008f50:	f003 030f 	and.w	r3, r3, #15
 8008f54:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008f56:	693b      	ldr	r3, [r7, #16]
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3718      	adds	r7, #24
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}

08008f60 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008f60:	b590      	push	{r4, r7, lr}
 8008f62:	b091      	sub	sp, #68	; 0x44
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008f68:	2301      	movs	r3, #1
 8008f6a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4618      	mov	r0, r3
 8008f72:	f001 fe0e 	bl	800ab92 <SDMMC_GetPowerState>
 8008f76:	4603      	mov	r3, r0
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d102      	bne.n	8008f82 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008f7c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008f80:	e0a8      	b.n	80090d4 <SD_InitCard+0x174>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f86:	2b03      	cmp	r3, #3
 8008f88:	d02e      	beq.n	8008fe8 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f002 f85a 	bl	800b048 <SDMMC_CmdSendCID>
 8008f94:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008f96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d001      	beq.n	8008fa0 <SD_InitCard+0x40>
    {
      return errorstate;
 8008f9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f9e:	e099      	b.n	80090d4 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	2100      	movs	r1, #0
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f001 fe39 	bl	800ac1e <SDMMC_GetResponse>
 8008fac:	4602      	mov	r2, r0
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	2104      	movs	r1, #4
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f001 fe30 	bl	800ac1e <SDMMC_GetResponse>
 8008fbe:	4602      	mov	r2, r0
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	2108      	movs	r1, #8
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f001 fe27 	bl	800ac1e <SDMMC_GetResponse>
 8008fd0:	4602      	mov	r2, r0
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	210c      	movs	r1, #12
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f001 fe1e 	bl	800ac1e <SDMMC_GetResponse>
 8008fe2:	4602      	mov	r2, r0
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fec:	2b03      	cmp	r3, #3
 8008fee:	d00d      	beq.n	800900c <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f107 020e 	add.w	r2, r7, #14
 8008ff8:	4611      	mov	r1, r2
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f002 f863 	bl	800b0c6 <SDMMC_CmdSetRelAdd>
 8009000:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009004:	2b00      	cmp	r3, #0
 8009006:	d001      	beq.n	800900c <SD_InitCard+0xac>
    {
      return errorstate;
 8009008:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800900a:	e063      	b.n	80090d4 <SD_InitCard+0x174>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009010:	2b03      	cmp	r3, #3
 8009012:	d036      	beq.n	8009082 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009014:	89fb      	ldrh	r3, [r7, #14]
 8009016:	461a      	mov	r2, r3
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681a      	ldr	r2, [r3, #0]
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009024:	041b      	lsls	r3, r3, #16
 8009026:	4619      	mov	r1, r3
 8009028:	4610      	mov	r0, r2
 800902a:	f002 f82c 	bl	800b086 <SDMMC_CmdSendCSD>
 800902e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009030:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009032:	2b00      	cmp	r3, #0
 8009034:	d001      	beq.n	800903a <SD_InitCard+0xda>
    {
      return errorstate;
 8009036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009038:	e04c      	b.n	80090d4 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	2100      	movs	r1, #0
 8009040:	4618      	mov	r0, r3
 8009042:	f001 fdec 	bl	800ac1e <SDMMC_GetResponse>
 8009046:	4602      	mov	r2, r0
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	2104      	movs	r1, #4
 8009052:	4618      	mov	r0, r3
 8009054:	f001 fde3 	bl	800ac1e <SDMMC_GetResponse>
 8009058:	4602      	mov	r2, r0
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	2108      	movs	r1, #8
 8009064:	4618      	mov	r0, r3
 8009066:	f001 fdda 	bl	800ac1e <SDMMC_GetResponse>
 800906a:	4602      	mov	r2, r0
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	210c      	movs	r1, #12
 8009076:	4618      	mov	r0, r3
 8009078:	f001 fdd1 	bl	800ac1e <SDMMC_GetResponse>
 800907c:	4602      	mov	r2, r0
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	2104      	movs	r1, #4
 8009088:	4618      	mov	r0, r3
 800908a:	f001 fdc8 	bl	800ac1e <SDMMC_GetResponse>
 800908e:	4603      	mov	r3, r0
 8009090:	0d1a      	lsrs	r2, r3, #20
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009096:	f107 0310 	add.w	r3, r7, #16
 800909a:	4619      	mov	r1, r3
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f7ff fc0f 	bl	80088c0 <HAL_SD_GetCardCSD>
 80090a2:	4603      	mov	r3, r0
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d002      	beq.n	80090ae <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80090a8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80090ac:	e012      	b.n	80090d4 <SD_InitCard+0x174>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6819      	ldr	r1, [r3, #0]
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80090b6:	041b      	lsls	r3, r3, #16
 80090b8:	f04f 0400 	mov.w	r4, #0
 80090bc:	461a      	mov	r2, r3
 80090be:	4623      	mov	r3, r4
 80090c0:	4608      	mov	r0, r1
 80090c2:	f001 fed7 	bl	800ae74 <SDMMC_CmdSelDesel>
 80090c6:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80090c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d001      	beq.n	80090d2 <SD_InitCard+0x172>
  {
    return errorstate;
 80090ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090d0:	e000      	b.n	80090d4 <SD_InitCard+0x174>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80090d2:	2300      	movs	r3, #0
}
 80090d4:	4618      	mov	r0, r3
 80090d6:	3744      	adds	r7, #68	; 0x44
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd90      	pop	{r4, r7, pc}

080090dc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b088      	sub	sp, #32
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80090e4:	2300      	movs	r3, #0
 80090e6:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 80090e8:	2300      	movs	r3, #0
 80090ea:	61fb      	str	r3, [r7, #28]
 80090ec:	2300      	movs	r3, #0
 80090ee:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 80090f0:	f7f8 fb70 	bl	80017d4 <HAL_GetTick>
 80090f4:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	4618      	mov	r0, r3
 80090fc:	f001 fede 	bl	800aebc <SDMMC_CmdGoIdleState>
 8009100:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009102:	693b      	ldr	r3, [r7, #16]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d001      	beq.n	800910c <SD_PowerON+0x30>
  {
    return errorstate;
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	e0e9      	b.n	80092e0 <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	4618      	mov	r0, r3
 8009112:	f001 fef1 	bl	800aef8 <SDMMC_CmdOperCond>
 8009116:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009118:	693b      	ldr	r3, [r7, #16]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d00d      	beq.n	800913a <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2200      	movs	r2, #0
 8009122:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	4618      	mov	r0, r3
 800912a:	f001 fec7 	bl	800aebc <SDMMC_CmdGoIdleState>
 800912e:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009130:	693b      	ldr	r3, [r7, #16]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d004      	beq.n	8009140 <SD_PowerON+0x64>
    {
      return errorstate;
 8009136:	693b      	ldr	r3, [r7, #16]
 8009138:	e0d2      	b.n	80092e0 <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2201      	movs	r2, #1
 800913e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009144:	2b01      	cmp	r3, #1
 8009146:	d137      	bne.n	80091b8 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	2100      	movs	r1, #0
 800914e:	4618      	mov	r0, r3
 8009150:	f001 fef2 	bl	800af38 <SDMMC_CmdAppCommand>
 8009154:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009156:	693b      	ldr	r3, [r7, #16]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d02d      	beq.n	80091b8 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800915c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009160:	e0be      	b.n	80092e0 <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	2100      	movs	r1, #0
 8009168:	4618      	mov	r0, r3
 800916a:	f001 fee5 	bl	800af38 <SDMMC_CmdAppCommand>
 800916e:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009170:	693b      	ldr	r3, [r7, #16]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d001      	beq.n	800917a <SD_PowerON+0x9e>
    {
      return errorstate;
 8009176:	693b      	ldr	r3, [r7, #16]
 8009178:	e0b2      	b.n	80092e0 <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	495a      	ldr	r1, [pc, #360]	; (80092e8 <SD_PowerON+0x20c>)
 8009180:	4618      	mov	r0, r3
 8009182:	f001 fefc 	bl	800af7e <SDMMC_CmdAppOperCommand>
 8009186:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d002      	beq.n	8009194 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800918e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009192:	e0a5      	b.n	80092e0 <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	2100      	movs	r1, #0
 800919a:	4618      	mov	r0, r3
 800919c:	f001 fd3f 	bl	800ac1e <SDMMC_GetResponse>
 80091a0:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80091a2:	69fb      	ldr	r3, [r7, #28]
 80091a4:	0fdb      	lsrs	r3, r3, #31
 80091a6:	2b01      	cmp	r3, #1
 80091a8:	d101      	bne.n	80091ae <SD_PowerON+0xd2>
 80091aa:	2301      	movs	r3, #1
 80091ac:	e000      	b.n	80091b0 <SD_PowerON+0xd4>
 80091ae:	2300      	movs	r3, #0
 80091b0:	61bb      	str	r3, [r7, #24]

    count++;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	3301      	adds	r3, #1
 80091b6:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80091be:	4293      	cmp	r3, r2
 80091c0:	d802      	bhi.n	80091c8 <SD_PowerON+0xec>
 80091c2:	69bb      	ldr	r3, [r7, #24]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d0cc      	beq.n	8009162 <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d902      	bls.n	80091d8 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80091d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80091d6:	e083      	b.n	80092e0 <SD_PowerON+0x204>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80091d8:	69fb      	ldr	r3, [r7, #28]
 80091da:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d07d      	beq.n	80092de <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2201      	movs	r2, #1
 80091e6:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	699b      	ldr	r3, [r3, #24]
 80091ec:	2b02      	cmp	r3, #2
 80091ee:	d176      	bne.n	80092de <SD_PowerON+0x202>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 80091f0:	69fb      	ldr	r3, [r7, #28]
 80091f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d071      	beq.n	80092de <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009200:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	681a      	ldr	r2, [r3, #0]
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f042 0208 	orr.w	r2, r2, #8
 8009210:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	4618      	mov	r0, r3
 8009218:	f001 ffbc 	bl	800b194 <SDMMC_CmdVoltageSwitch>
 800921c:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d00c      	beq.n	800923e <SD_PowerON+0x162>
        {
          return errorstate;
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	e05b      	b.n	80092e0 <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009228:	f7f8 fad4 	bl	80017d4 <HAL_GetTick>
 800922c:	4602      	mov	r2, r0
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	1ad3      	subs	r3, r2, r3
 8009232:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009236:	d102      	bne.n	800923e <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 8009238:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800923c:	e050      	b.n	80092e0 <SD_PowerON+0x204>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009244:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009248:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800924c:	d1ec      	bne.n	8009228 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8009256:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800925e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009262:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009266:	d002      	beq.n	800926e <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8009268:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800926c:	e038      	b.n	80092e0 <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 800926e:	2001      	movs	r0, #1
 8009270:	f7ff fb1a 	bl	80088a8 <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	681a      	ldr	r2, [r3, #0]
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f042 0204 	orr.w	r2, r2, #4
 8009282:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8009284:	e00a      	b.n	800929c <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009286:	f7f8 faa5 	bl	80017d4 <HAL_GetTick>
 800928a:	4602      	mov	r2, r0
 800928c:	697b      	ldr	r3, [r7, #20]
 800928e:	1ad3      	subs	r3, r2, r3
 8009290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009294:	d102      	bne.n	800929c <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 8009296:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800929a:	e021      	b.n	80092e0 <SD_PowerON+0x204>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80092aa:	d1ec      	bne.n	8009286 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80092b4:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80092c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80092c4:	d102      	bne.n	80092cc <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80092c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80092ca:	e009      	b.n	80092e0 <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	2213      	movs	r2, #19
 80092d2:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f04f 32ff 	mov.w	r2, #4294967295
 80092dc:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 80092de:	2300      	movs	r3, #0
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	3720      	adds	r7, #32
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}
 80092e8:	c1100000 	.word	0xc1100000

080092ec <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b08c      	sub	sp, #48	; 0x30
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
 80092f4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80092f6:	f7f8 fa6d 	bl	80017d4 <HAL_GetTick>
 80092fa:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	2100      	movs	r1, #0
 8009306:	4618      	mov	r0, r3
 8009308:	f001 fc89 	bl	800ac1e <SDMMC_GetResponse>
 800930c:	4603      	mov	r3, r0
 800930e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009312:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009316:	d102      	bne.n	800931e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009318:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800931c:	e0b0      	b.n	8009480 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	2140      	movs	r1, #64	; 0x40
 8009324:	4618      	mov	r0, r3
 8009326:	f001 fcb9 	bl	800ac9c <SDMMC_CmdBlockLength>
 800932a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800932c:	6a3b      	ldr	r3, [r7, #32]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d005      	beq.n	800933e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800933a:	6a3b      	ldr	r3, [r7, #32]
 800933c:	e0a0      	b.n	8009480 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681a      	ldr	r2, [r3, #0]
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009346:	041b      	lsls	r3, r3, #16
 8009348:	4619      	mov	r1, r3
 800934a:	4610      	mov	r0, r2
 800934c:	f001 fdf4 	bl	800af38 <SDMMC_CmdAppCommand>
 8009350:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009352:	6a3b      	ldr	r3, [r7, #32]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d005      	beq.n	8009364 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8009360:	6a3b      	ldr	r3, [r7, #32]
 8009362:	e08d      	b.n	8009480 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009364:	f04f 33ff 	mov.w	r3, #4294967295
 8009368:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800936a:	2340      	movs	r3, #64	; 0x40
 800936c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800936e:	2360      	movs	r3, #96	; 0x60
 8009370:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009372:	2302      	movs	r3, #2
 8009374:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009376:	2300      	movs	r3, #0
 8009378:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800937a:	2301      	movs	r3, #1
 800937c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f107 0208 	add.w	r2, r7, #8
 8009386:	4611      	mov	r1, r2
 8009388:	4618      	mov	r0, r3
 800938a:	f001 fc5b 	bl	800ac44 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	4618      	mov	r0, r3
 8009394:	f001 fedc 	bl	800b150 <SDMMC_CmdStatusRegister>
 8009398:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800939a:	6a3b      	ldr	r3, [r7, #32]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d02b      	beq.n	80093f8 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 80093a8:	6a3b      	ldr	r3, [r7, #32]
 80093aa:	e069      	b.n	8009480 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d013      	beq.n	80093e2 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 80093ba:	2300      	movs	r3, #0
 80093bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80093be:	e00d      	b.n	80093dc <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	4618      	mov	r0, r3
 80093c6:	f001 fbb5 	bl	800ab34 <SDMMC_ReadFIFO>
 80093ca:	4602      	mov	r2, r0
 80093cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ce:	601a      	str	r2, [r3, #0]
        pData++;
 80093d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093d2:	3304      	adds	r3, #4
 80093d4:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 80093d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093d8:	3301      	adds	r3, #1
 80093da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80093dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093de:	2b07      	cmp	r3, #7
 80093e0:	d9ee      	bls.n	80093c0 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80093e2:	f7f8 f9f7 	bl	80017d4 <HAL_GetTick>
 80093e6:	4602      	mov	r2, r0
 80093e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ea:	1ad3      	subs	r3, r2, r3
 80093ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093f0:	d102      	bne.n	80093f8 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80093f2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80093f6:	e043      	b.n	8009480 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093fe:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8009402:	2b00      	cmp	r3, #0
 8009404:	d0d2      	beq.n	80093ac <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800940c:	f003 0308 	and.w	r3, r3, #8
 8009410:	2b00      	cmp	r3, #0
 8009412:	d001      	beq.n	8009418 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009414:	2308      	movs	r3, #8
 8009416:	e033      	b.n	8009480 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800941e:	f003 0302 	and.w	r3, r3, #2
 8009422:	2b00      	cmp	r3, #0
 8009424:	d001      	beq.n	800942a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009426:	2302      	movs	r3, #2
 8009428:	e02a      	b.n	8009480 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009430:	f003 0320 	and.w	r3, r3, #32
 8009434:	2b00      	cmp	r3, #0
 8009436:	d017      	beq.n	8009468 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8009438:	2320      	movs	r3, #32
 800943a:	e021      	b.n	8009480 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	4618      	mov	r0, r3
 8009442:	f001 fb77 	bl	800ab34 <SDMMC_ReadFIFO>
 8009446:	4602      	mov	r2, r0
 8009448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800944a:	601a      	str	r2, [r3, #0]
    pData++;
 800944c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800944e:	3304      	adds	r3, #4
 8009450:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009452:	f7f8 f9bf 	bl	80017d4 <HAL_GetTick>
 8009456:	4602      	mov	r2, r0
 8009458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800945a:	1ad3      	subs	r3, r2, r3
 800945c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009460:	d102      	bne.n	8009468 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009462:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009466:	e00b      	b.n	8009480 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800946e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009472:	2b00      	cmp	r3, #0
 8009474:	d1e2      	bne.n	800943c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	4a03      	ldr	r2, [pc, #12]	; (8009488 <SD_SendSDStatus+0x19c>)
 800947c:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800947e:	2300      	movs	r3, #0
}
 8009480:	4618      	mov	r0, r3
 8009482:	3730      	adds	r7, #48	; 0x30
 8009484:	46bd      	mov	sp, r7
 8009486:	bd80      	pop	{r7, pc}
 8009488:	18000f3a 	.word	0x18000f3a

0800948c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b084      	sub	sp, #16
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
 8009494:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d102      	bne.n	80094a2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800949c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80094a0:	e018      	b.n	80094d4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681a      	ldr	r2, [r3, #0]
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094aa:	041b      	lsls	r3, r3, #16
 80094ac:	4619      	mov	r1, r3
 80094ae:	4610      	mov	r0, r2
 80094b0:	f001 fe2b 	bl	800b10a <SDMMC_CmdSendStatus>
 80094b4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d001      	beq.n	80094c0 <SD_SendStatus+0x34>
  {
    return errorstate;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	e009      	b.n	80094d4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	2100      	movs	r1, #0
 80094c6:	4618      	mov	r0, r3
 80094c8:	f001 fba9 	bl	800ac1e <SDMMC_GetResponse>
 80094cc:	4602      	mov	r2, r0
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80094d2:	2300      	movs	r3, #0
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	3710      	adds	r7, #16
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}

080094dc <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b086      	sub	sp, #24
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80094e4:	2300      	movs	r3, #0
 80094e6:	60fb      	str	r3, [r7, #12]
 80094e8:	2300      	movs	r3, #0
 80094ea:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	2100      	movs	r1, #0
 80094f2:	4618      	mov	r0, r3
 80094f4:	f001 fb93 	bl	800ac1e <SDMMC_GetResponse>
 80094f8:	4603      	mov	r3, r0
 80094fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009502:	d102      	bne.n	800950a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009504:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009508:	e02f      	b.n	800956a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800950a:	f107 030c 	add.w	r3, r7, #12
 800950e:	4619      	mov	r1, r3
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f000 f879 	bl	8009608 <SD_FindSCR>
 8009516:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009518:	697b      	ldr	r3, [r7, #20]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d001      	beq.n	8009522 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800951e:	697b      	ldr	r3, [r7, #20]
 8009520:	e023      	b.n	800956a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009522:	693b      	ldr	r3, [r7, #16]
 8009524:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009528:	2b00      	cmp	r3, #0
 800952a:	d01c      	beq.n	8009566 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681a      	ldr	r2, [r3, #0]
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009534:	041b      	lsls	r3, r3, #16
 8009536:	4619      	mov	r1, r3
 8009538:	4610      	mov	r0, r2
 800953a:	f001 fcfd 	bl	800af38 <SDMMC_CmdAppCommand>
 800953e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009540:	697b      	ldr	r3, [r7, #20]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d001      	beq.n	800954a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009546:	697b      	ldr	r3, [r7, #20]
 8009548:	e00f      	b.n	800956a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	2102      	movs	r1, #2
 8009550:	4618      	mov	r0, r3
 8009552:	f001 fd34 	bl	800afbe <SDMMC_CmdBusWidth>
 8009556:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d001      	beq.n	8009562 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800955e:	697b      	ldr	r3, [r7, #20]
 8009560:	e003      	b.n	800956a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009562:	2300      	movs	r3, #0
 8009564:	e001      	b.n	800956a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009566:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800956a:	4618      	mov	r0, r3
 800956c:	3718      	adds	r7, #24
 800956e:	46bd      	mov	sp, r7
 8009570:	bd80      	pop	{r7, pc}

08009572 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009572:	b580      	push	{r7, lr}
 8009574:	b086      	sub	sp, #24
 8009576:	af00      	add	r7, sp, #0
 8009578:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800957a:	2300      	movs	r3, #0
 800957c:	60fb      	str	r3, [r7, #12]
 800957e:	2300      	movs	r3, #0
 8009580:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	2100      	movs	r1, #0
 8009588:	4618      	mov	r0, r3
 800958a:	f001 fb48 	bl	800ac1e <SDMMC_GetResponse>
 800958e:	4603      	mov	r3, r0
 8009590:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009594:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009598:	d102      	bne.n	80095a0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800959a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800959e:	e02f      	b.n	8009600 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80095a0:	f107 030c 	add.w	r3, r7, #12
 80095a4:	4619      	mov	r1, r3
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f000 f82e 	bl	8009608 <SD_FindSCR>
 80095ac:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80095ae:	697b      	ldr	r3, [r7, #20]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d001      	beq.n	80095b8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	e023      	b.n	8009600 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80095b8:	693b      	ldr	r3, [r7, #16]
 80095ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d01c      	beq.n	80095fc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681a      	ldr	r2, [r3, #0]
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095ca:	041b      	lsls	r3, r3, #16
 80095cc:	4619      	mov	r1, r3
 80095ce:	4610      	mov	r0, r2
 80095d0:	f001 fcb2 	bl	800af38 <SDMMC_CmdAppCommand>
 80095d4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80095d6:	697b      	ldr	r3, [r7, #20]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d001      	beq.n	80095e0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80095dc:	697b      	ldr	r3, [r7, #20]
 80095de:	e00f      	b.n	8009600 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	2100      	movs	r1, #0
 80095e6:	4618      	mov	r0, r3
 80095e8:	f001 fce9 	bl	800afbe <SDMMC_CmdBusWidth>
 80095ec:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80095ee:	697b      	ldr	r3, [r7, #20]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d001      	beq.n	80095f8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80095f4:	697b      	ldr	r3, [r7, #20]
 80095f6:	e003      	b.n	8009600 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80095f8:	2300      	movs	r3, #0
 80095fa:	e001      	b.n	8009600 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80095fc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009600:	4618      	mov	r0, r3
 8009602:	3718      	adds	r7, #24
 8009604:	46bd      	mov	sp, r7
 8009606:	bd80      	pop	{r7, pc}

08009608 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b08e      	sub	sp, #56	; 0x38
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
 8009610:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009612:	f7f8 f8df 	bl	80017d4 <HAL_GetTick>
 8009616:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009618:	2300      	movs	r3, #0
 800961a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800961c:	2300      	movs	r3, #0
 800961e:	60bb      	str	r3, [r7, #8]
 8009620:	2300      	movs	r3, #0
 8009622:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	2108      	movs	r1, #8
 800962e:	4618      	mov	r0, r3
 8009630:	f001 fb34 	bl	800ac9c <SDMMC_CmdBlockLength>
 8009634:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009638:	2b00      	cmp	r3, #0
 800963a:	d001      	beq.n	8009640 <SD_FindSCR+0x38>
  {
    return errorstate;
 800963c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800963e:	e0ad      	b.n	800979c <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681a      	ldr	r2, [r3, #0]
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009648:	041b      	lsls	r3, r3, #16
 800964a:	4619      	mov	r1, r3
 800964c:	4610      	mov	r0, r2
 800964e:	f001 fc73 	bl	800af38 <SDMMC_CmdAppCommand>
 8009652:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009656:	2b00      	cmp	r3, #0
 8009658:	d001      	beq.n	800965e <SD_FindSCR+0x56>
  {
    return errorstate;
 800965a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800965c:	e09e      	b.n	800979c <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800965e:	f04f 33ff 	mov.w	r3, #4294967295
 8009662:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009664:	2308      	movs	r3, #8
 8009666:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009668:	2330      	movs	r3, #48	; 0x30
 800966a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800966c:	2302      	movs	r3, #2
 800966e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009670:	2300      	movs	r3, #0
 8009672:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009674:	2301      	movs	r3, #1
 8009676:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f107 0210 	add.w	r2, r7, #16
 8009680:	4611      	mov	r1, r2
 8009682:	4618      	mov	r0, r3
 8009684:	f001 fade 	bl	800ac44 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	4618      	mov	r0, r3
 800968e:	f001 fcb9 	bl	800b004 <SDMMC_CmdSendSCR>
 8009692:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009696:	2b00      	cmp	r3, #0
 8009698:	d027      	beq.n	80096ea <SD_FindSCR+0xe2>
  {
    return errorstate;
 800969a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800969c:	e07e      	b.n	800979c <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d113      	bne.n	80096d4 <SD_FindSCR+0xcc>
 80096ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d110      	bne.n	80096d4 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	4618      	mov	r0, r3
 80096b8:	f001 fa3c 	bl	800ab34 <SDMMC_ReadFIFO>
 80096bc:	4603      	mov	r3, r0
 80096be:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	4618      	mov	r0, r3
 80096c6:	f001 fa35 	bl	800ab34 <SDMMC_ReadFIFO>
 80096ca:	4603      	mov	r3, r0
 80096cc:	60fb      	str	r3, [r7, #12]
      index++;
 80096ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096d0:	3301      	adds	r3, #1
 80096d2:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80096d4:	f7f8 f87e 	bl	80017d4 <HAL_GetTick>
 80096d8:	4602      	mov	r2, r0
 80096da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096dc:	1ad3      	subs	r3, r2, r3
 80096de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096e2:	d102      	bne.n	80096ea <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80096e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80096e8:	e058      	b.n	800979c <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80096f0:	f240 532a 	movw	r3, #1322	; 0x52a
 80096f4:	4013      	ands	r3, r2
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d0d1      	beq.n	800969e <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009700:	f003 0308 	and.w	r3, r3, #8
 8009704:	2b00      	cmp	r3, #0
 8009706:	d005      	beq.n	8009714 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	2208      	movs	r2, #8
 800970e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009710:	2308      	movs	r3, #8
 8009712:	e043      	b.n	800979c <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800971a:	f003 0302 	and.w	r3, r3, #2
 800971e:	2b00      	cmp	r3, #0
 8009720:	d005      	beq.n	800972e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	2202      	movs	r2, #2
 8009728:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800972a:	2302      	movs	r3, #2
 800972c:	e036      	b.n	800979c <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009734:	f003 0320 	and.w	r3, r3, #32
 8009738:	2b00      	cmp	r3, #0
 800973a:	d005      	beq.n	8009748 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	2220      	movs	r2, #32
 8009742:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009744:	2320      	movs	r3, #32
 8009746:	e029      	b.n	800979c <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	4a15      	ldr	r2, [pc, #84]	; (80097a4 <SD_FindSCR+0x19c>)
 800974e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	061a      	lsls	r2, r3, #24
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	021b      	lsls	r3, r3, #8
 8009758:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800975c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	0a1b      	lsrs	r3, r3, #8
 8009762:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009766:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	0e1b      	lsrs	r3, r3, #24
 800976c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800976e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009770:	601a      	str	r2, [r3, #0]
    scr++;
 8009772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009774:	3304      	adds	r3, #4
 8009776:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	061a      	lsls	r2, r3, #24
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	021b      	lsls	r3, r3, #8
 8009780:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009784:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	0a1b      	lsrs	r3, r3, #8
 800978a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800978e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	0e1b      	lsrs	r3, r3, #24
 8009794:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009798:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800979a:	2300      	movs	r3, #0
}
 800979c:	4618      	mov	r0, r3
 800979e:	3738      	adds	r7, #56	; 0x38
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bd80      	pop	{r7, pc}
 80097a4:	18000f3a 	.word	0x18000f3a

080097a8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b084      	sub	sp, #16
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 80097b0:	2300      	movs	r3, #0
 80097b2:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d101      	bne.n	80097be <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 80097ba:	2301      	movs	r3, #1
 80097bc:	e0e2      	b.n	8009984 <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2200      	movs	r2, #0
 80097c2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	4a70      	ldr	r2, [pc, #448]	; (800998c <HAL_SPI_Init+0x1e4>)
 80097ca:	4293      	cmp	r3, r2
 80097cc:	d00f      	beq.n	80097ee <HAL_SPI_Init+0x46>
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	4a6f      	ldr	r2, [pc, #444]	; (8009990 <HAL_SPI_Init+0x1e8>)
 80097d4:	4293      	cmp	r3, r2
 80097d6:	d00a      	beq.n	80097ee <HAL_SPI_Init+0x46>
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	4a6d      	ldr	r2, [pc, #436]	; (8009994 <HAL_SPI_Init+0x1ec>)
 80097de:	4293      	cmp	r3, r2
 80097e0:	d005      	beq.n	80097ee <HAL_SPI_Init+0x46>
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	68db      	ldr	r3, [r3, #12]
 80097e6:	2b0f      	cmp	r3, #15
 80097e8:	d901      	bls.n	80097ee <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 80097ea:	2301      	movs	r3, #1
 80097ec:	e0ca      	b.n	8009984 <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f000 f8d2 	bl	8009998 <SPI_GetPacketSize>
 80097f4:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	4a64      	ldr	r2, [pc, #400]	; (800998c <HAL_SPI_Init+0x1e4>)
 80097fc:	4293      	cmp	r3, r2
 80097fe:	d00c      	beq.n	800981a <HAL_SPI_Init+0x72>
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	4a62      	ldr	r2, [pc, #392]	; (8009990 <HAL_SPI_Init+0x1e8>)
 8009806:	4293      	cmp	r3, r2
 8009808:	d007      	beq.n	800981a <HAL_SPI_Init+0x72>
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	4a61      	ldr	r2, [pc, #388]	; (8009994 <HAL_SPI_Init+0x1ec>)
 8009810:	4293      	cmp	r3, r2
 8009812:	d002      	beq.n	800981a <HAL_SPI_Init+0x72>
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	2b08      	cmp	r3, #8
 8009818:	d811      	bhi.n	800983e <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800981e:	4a5b      	ldr	r2, [pc, #364]	; (800998c <HAL_SPI_Init+0x1e4>)
 8009820:	4293      	cmp	r3, r2
 8009822:	d009      	beq.n	8009838 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4a59      	ldr	r2, [pc, #356]	; (8009990 <HAL_SPI_Init+0x1e8>)
 800982a:	4293      	cmp	r3, r2
 800982c:	d004      	beq.n	8009838 <HAL_SPI_Init+0x90>
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	4a58      	ldr	r2, [pc, #352]	; (8009994 <HAL_SPI_Init+0x1ec>)
 8009834:	4293      	cmp	r3, r2
 8009836:	d104      	bne.n	8009842 <HAL_SPI_Init+0x9a>
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	2b10      	cmp	r3, #16
 800983c:	d901      	bls.n	8009842 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800983e:	2301      	movs	r3, #1
 8009840:	e0a0      	b.n	8009984 <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009848:	b2db      	uxtb	r3, r3
 800984a:	2b00      	cmp	r3, #0
 800984c:	d106      	bne.n	800985c <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2200      	movs	r2, #0
 8009852:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f7f7 fd0c 	bl	8001274 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2202      	movs	r2, #2
 8009860:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	681a      	ldr	r2, [r3, #0]
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f022 0201 	bic.w	r2, r2, #1
 8009872:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	699b      	ldr	r3, [r3, #24]
 8009878:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800987c:	d110      	bne.n	80098a0 <HAL_SPI_Init+0xf8>
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	685b      	ldr	r3, [r3, #4]
 8009882:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009886:	d10b      	bne.n	80098a0 <HAL_SPI_Init+0xf8>
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800988c:	2b00      	cmp	r3, #0
 800988e:	d107      	bne.n	80098a0 <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	681a      	ldr	r2, [r3, #0]
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800989e:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	69da      	ldr	r2, [r3, #28]
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098a8:	431a      	orrs	r2, r3
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	431a      	orrs	r2, r3
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098b2:	ea42 0103 	orr.w	r1, r2, r3
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	68da      	ldr	r2, [r3, #12]
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	430a      	orrs	r2, r1
 80098c0:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098ca:	431a      	orrs	r2, r3
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098d0:	431a      	orrs	r2, r3
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	699b      	ldr	r3, [r3, #24]
 80098d6:	431a      	orrs	r2, r3
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	691b      	ldr	r3, [r3, #16]
 80098dc:	431a      	orrs	r2, r3
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	695b      	ldr	r3, [r3, #20]
 80098e2:	431a      	orrs	r2, r3
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	6a1b      	ldr	r3, [r3, #32]
 80098e8:	431a      	orrs	r2, r3
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	685b      	ldr	r3, [r3, #4]
 80098ee:	431a      	orrs	r2, r3
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098f4:	431a      	orrs	r2, r3
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	689b      	ldr	r3, [r3, #8]
 80098fa:	431a      	orrs	r2, r3
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009900:	ea42 0103 	orr.w	r1, r2, r3
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	430a      	orrs	r2, r1
 800990e:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	685b      	ldr	r3, [r3, #4]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d113      	bne.n	8009940 <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	689b      	ldr	r3, [r3, #8]
 800991e:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800992a:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	689b      	ldr	r3, [r3, #8]
 8009932:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800993e:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f022 0201 	bic.w	r2, r2, #1
 800994e:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	685b      	ldr	r3, [r3, #4]
 8009954:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009958:	2b00      	cmp	r3, #0
 800995a:	d00a      	beq.n	8009972 <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	68db      	ldr	r3, [r3, #12]
 8009962:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	430a      	orrs	r2, r1
 8009970:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2200      	movs	r2, #0
 8009976:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2201      	movs	r2, #1
 800997e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8009982:	2300      	movs	r3, #0
}
 8009984:	4618      	mov	r0, r3
 8009986:	3710      	adds	r7, #16
 8009988:	46bd      	mov	sp, r7
 800998a:	bd80      	pop	{r7, pc}
 800998c:	40013000 	.word	0x40013000
 8009990:	40003800 	.word	0x40003800
 8009994:	40003c00 	.word	0x40003c00

08009998 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8009998:	b480      	push	{r7}
 800999a:	b085      	sub	sp, #20
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099a4:	095b      	lsrs	r3, r3, #5
 80099a6:	3301      	adds	r3, #1
 80099a8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	68db      	ldr	r3, [r3, #12]
 80099ae:	3301      	adds	r3, #1
 80099b0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	3307      	adds	r3, #7
 80099b6:	08db      	lsrs	r3, r3, #3
 80099b8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80099ba:	68bb      	ldr	r3, [r7, #8]
 80099bc:	68fa      	ldr	r2, [r7, #12]
 80099be:	fb02 f303 	mul.w	r3, r2, r3
}
 80099c2:	4618      	mov	r0, r3
 80099c4:	3714      	adds	r7, #20
 80099c6:	46bd      	mov	sp, r7
 80099c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099cc:	4770      	bx	lr

080099ce <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80099ce:	b580      	push	{r7, lr}
 80099d0:	b082      	sub	sp, #8
 80099d2:	af00      	add	r7, sp, #0
 80099d4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d101      	bne.n	80099e0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80099dc:	2301      	movs	r3, #1
 80099de:	e042      	b.n	8009a66 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d106      	bne.n	80099f8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2200      	movs	r2, #0
 80099ee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f7f7 fc88 	bl	8001308 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2224      	movs	r2, #36	; 0x24
 80099fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	681a      	ldr	r2, [r3, #0]
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	f022 0201 	bic.w	r2, r2, #1
 8009a0e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009a10:	6878      	ldr	r0, [r7, #4]
 8009a12:	f000 f82d 	bl	8009a70 <UART_SetConfig>
 8009a16:	4603      	mov	r3, r0
 8009a18:	2b01      	cmp	r3, #1
 8009a1a:	d101      	bne.n	8009a20 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009a1c:	2301      	movs	r3, #1
 8009a1e:	e022      	b.n	8009a66 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d002      	beq.n	8009a2e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f000 fdd1 	bl	800a5d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	685a      	ldr	r2, [r3, #4]
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009a3c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	689a      	ldr	r2, [r3, #8]
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009a4c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	681a      	ldr	r2, [r3, #0]
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	f042 0201 	orr.w	r2, r2, #1
 8009a5c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f000 fe58 	bl	800a714 <UART_CheckIdleState>
 8009a64:	4603      	mov	r3, r0
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	3708      	adds	r7, #8
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}
	...

08009a70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009a70:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8009a74:	b08e      	sub	sp, #56	; 0x38
 8009a76:	af00      	add	r7, sp, #0
 8009a78:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	689a      	ldr	r2, [r3, #8]
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	691b      	ldr	r3, [r3, #16]
 8009a88:	431a      	orrs	r2, r3
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	695b      	ldr	r3, [r3, #20]
 8009a8e:	431a      	orrs	r2, r3
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	69db      	ldr	r3, [r3, #28]
 8009a94:	4313      	orrs	r3, r2
 8009a96:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a9e:	4313      	orrs	r3, r2
 8009aa0:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	681a      	ldr	r2, [r3, #0]
 8009aa8:	4bc1      	ldr	r3, [pc, #772]	; (8009db0 <UART_SetConfig+0x340>)
 8009aaa:	4013      	ands	r3, r2
 8009aac:	687a      	ldr	r2, [r7, #4]
 8009aae:	6812      	ldr	r2, [r2, #0]
 8009ab0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009ab2:	430b      	orrs	r3, r1
 8009ab4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	685b      	ldr	r3, [r3, #4]
 8009abc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	68da      	ldr	r2, [r3, #12]
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	430a      	orrs	r2, r1
 8009aca:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	699b      	ldr	r3, [r3, #24]
 8009ad0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	4ab7      	ldr	r2, [pc, #732]	; (8009db4 <UART_SetConfig+0x344>)
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	d004      	beq.n	8009ae6 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	6a1b      	ldr	r3, [r3, #32]
 8009ae0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009ae2:	4313      	orrs	r3, r2
 8009ae4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	689a      	ldr	r2, [r3, #8]
 8009aec:	4bb2      	ldr	r3, [pc, #712]	; (8009db8 <UART_SetConfig+0x348>)
 8009aee:	4013      	ands	r3, r2
 8009af0:	687a      	ldr	r2, [r7, #4]
 8009af2:	6812      	ldr	r2, [r2, #0]
 8009af4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009af6:	430b      	orrs	r3, r1
 8009af8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b00:	f023 010f 	bic.w	r1, r3, #15
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	430a      	orrs	r2, r1
 8009b0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	4aa9      	ldr	r2, [pc, #676]	; (8009dbc <UART_SetConfig+0x34c>)
 8009b16:	4293      	cmp	r3, r2
 8009b18:	d177      	bne.n	8009c0a <UART_SetConfig+0x19a>
 8009b1a:	4ba9      	ldr	r3, [pc, #676]	; (8009dc0 <UART_SetConfig+0x350>)
 8009b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009b22:	2b28      	cmp	r3, #40	; 0x28
 8009b24:	d86c      	bhi.n	8009c00 <UART_SetConfig+0x190>
 8009b26:	a201      	add	r2, pc, #4	; (adr r2, 8009b2c <UART_SetConfig+0xbc>)
 8009b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b2c:	08009bd1 	.word	0x08009bd1
 8009b30:	08009c01 	.word	0x08009c01
 8009b34:	08009c01 	.word	0x08009c01
 8009b38:	08009c01 	.word	0x08009c01
 8009b3c:	08009c01 	.word	0x08009c01
 8009b40:	08009c01 	.word	0x08009c01
 8009b44:	08009c01 	.word	0x08009c01
 8009b48:	08009c01 	.word	0x08009c01
 8009b4c:	08009bd9 	.word	0x08009bd9
 8009b50:	08009c01 	.word	0x08009c01
 8009b54:	08009c01 	.word	0x08009c01
 8009b58:	08009c01 	.word	0x08009c01
 8009b5c:	08009c01 	.word	0x08009c01
 8009b60:	08009c01 	.word	0x08009c01
 8009b64:	08009c01 	.word	0x08009c01
 8009b68:	08009c01 	.word	0x08009c01
 8009b6c:	08009be1 	.word	0x08009be1
 8009b70:	08009c01 	.word	0x08009c01
 8009b74:	08009c01 	.word	0x08009c01
 8009b78:	08009c01 	.word	0x08009c01
 8009b7c:	08009c01 	.word	0x08009c01
 8009b80:	08009c01 	.word	0x08009c01
 8009b84:	08009c01 	.word	0x08009c01
 8009b88:	08009c01 	.word	0x08009c01
 8009b8c:	08009be9 	.word	0x08009be9
 8009b90:	08009c01 	.word	0x08009c01
 8009b94:	08009c01 	.word	0x08009c01
 8009b98:	08009c01 	.word	0x08009c01
 8009b9c:	08009c01 	.word	0x08009c01
 8009ba0:	08009c01 	.word	0x08009c01
 8009ba4:	08009c01 	.word	0x08009c01
 8009ba8:	08009c01 	.word	0x08009c01
 8009bac:	08009bf1 	.word	0x08009bf1
 8009bb0:	08009c01 	.word	0x08009c01
 8009bb4:	08009c01 	.word	0x08009c01
 8009bb8:	08009c01 	.word	0x08009c01
 8009bbc:	08009c01 	.word	0x08009c01
 8009bc0:	08009c01 	.word	0x08009c01
 8009bc4:	08009c01 	.word	0x08009c01
 8009bc8:	08009c01 	.word	0x08009c01
 8009bcc:	08009bf9 	.word	0x08009bf9
 8009bd0:	2301      	movs	r3, #1
 8009bd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bd6:	e233      	b.n	800a040 <UART_SetConfig+0x5d0>
 8009bd8:	2304      	movs	r3, #4
 8009bda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bde:	e22f      	b.n	800a040 <UART_SetConfig+0x5d0>
 8009be0:	2308      	movs	r3, #8
 8009be2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009be6:	e22b      	b.n	800a040 <UART_SetConfig+0x5d0>
 8009be8:	2310      	movs	r3, #16
 8009bea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bee:	e227      	b.n	800a040 <UART_SetConfig+0x5d0>
 8009bf0:	2320      	movs	r3, #32
 8009bf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bf6:	e223      	b.n	800a040 <UART_SetConfig+0x5d0>
 8009bf8:	2340      	movs	r3, #64	; 0x40
 8009bfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bfe:	e21f      	b.n	800a040 <UART_SetConfig+0x5d0>
 8009c00:	2380      	movs	r3, #128	; 0x80
 8009c02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c06:	bf00      	nop
 8009c08:	e21a      	b.n	800a040 <UART_SetConfig+0x5d0>
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	4a6d      	ldr	r2, [pc, #436]	; (8009dc4 <UART_SetConfig+0x354>)
 8009c10:	4293      	cmp	r3, r2
 8009c12:	d132      	bne.n	8009c7a <UART_SetConfig+0x20a>
 8009c14:	4b6a      	ldr	r3, [pc, #424]	; (8009dc0 <UART_SetConfig+0x350>)
 8009c16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c18:	f003 0307 	and.w	r3, r3, #7
 8009c1c:	2b05      	cmp	r3, #5
 8009c1e:	d827      	bhi.n	8009c70 <UART_SetConfig+0x200>
 8009c20:	a201      	add	r2, pc, #4	; (adr r2, 8009c28 <UART_SetConfig+0x1b8>)
 8009c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c26:	bf00      	nop
 8009c28:	08009c41 	.word	0x08009c41
 8009c2c:	08009c49 	.word	0x08009c49
 8009c30:	08009c51 	.word	0x08009c51
 8009c34:	08009c59 	.word	0x08009c59
 8009c38:	08009c61 	.word	0x08009c61
 8009c3c:	08009c69 	.word	0x08009c69
 8009c40:	2300      	movs	r3, #0
 8009c42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c46:	e1fb      	b.n	800a040 <UART_SetConfig+0x5d0>
 8009c48:	2304      	movs	r3, #4
 8009c4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c4e:	e1f7      	b.n	800a040 <UART_SetConfig+0x5d0>
 8009c50:	2308      	movs	r3, #8
 8009c52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c56:	e1f3      	b.n	800a040 <UART_SetConfig+0x5d0>
 8009c58:	2310      	movs	r3, #16
 8009c5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c5e:	e1ef      	b.n	800a040 <UART_SetConfig+0x5d0>
 8009c60:	2320      	movs	r3, #32
 8009c62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c66:	e1eb      	b.n	800a040 <UART_SetConfig+0x5d0>
 8009c68:	2340      	movs	r3, #64	; 0x40
 8009c6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c6e:	e1e7      	b.n	800a040 <UART_SetConfig+0x5d0>
 8009c70:	2380      	movs	r3, #128	; 0x80
 8009c72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c76:	bf00      	nop
 8009c78:	e1e2      	b.n	800a040 <UART_SetConfig+0x5d0>
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	4a52      	ldr	r2, [pc, #328]	; (8009dc8 <UART_SetConfig+0x358>)
 8009c80:	4293      	cmp	r3, r2
 8009c82:	d132      	bne.n	8009cea <UART_SetConfig+0x27a>
 8009c84:	4b4e      	ldr	r3, [pc, #312]	; (8009dc0 <UART_SetConfig+0x350>)
 8009c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c88:	f003 0307 	and.w	r3, r3, #7
 8009c8c:	2b05      	cmp	r3, #5
 8009c8e:	d827      	bhi.n	8009ce0 <UART_SetConfig+0x270>
 8009c90:	a201      	add	r2, pc, #4	; (adr r2, 8009c98 <UART_SetConfig+0x228>)
 8009c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c96:	bf00      	nop
 8009c98:	08009cb1 	.word	0x08009cb1
 8009c9c:	08009cb9 	.word	0x08009cb9
 8009ca0:	08009cc1 	.word	0x08009cc1
 8009ca4:	08009cc9 	.word	0x08009cc9
 8009ca8:	08009cd1 	.word	0x08009cd1
 8009cac:	08009cd9 	.word	0x08009cd9
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cb6:	e1c3      	b.n	800a040 <UART_SetConfig+0x5d0>
 8009cb8:	2304      	movs	r3, #4
 8009cba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cbe:	e1bf      	b.n	800a040 <UART_SetConfig+0x5d0>
 8009cc0:	2308      	movs	r3, #8
 8009cc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cc6:	e1bb      	b.n	800a040 <UART_SetConfig+0x5d0>
 8009cc8:	2310      	movs	r3, #16
 8009cca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cce:	e1b7      	b.n	800a040 <UART_SetConfig+0x5d0>
 8009cd0:	2320      	movs	r3, #32
 8009cd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cd6:	e1b3      	b.n	800a040 <UART_SetConfig+0x5d0>
 8009cd8:	2340      	movs	r3, #64	; 0x40
 8009cda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cde:	e1af      	b.n	800a040 <UART_SetConfig+0x5d0>
 8009ce0:	2380      	movs	r3, #128	; 0x80
 8009ce2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ce6:	bf00      	nop
 8009ce8:	e1aa      	b.n	800a040 <UART_SetConfig+0x5d0>
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	4a37      	ldr	r2, [pc, #220]	; (8009dcc <UART_SetConfig+0x35c>)
 8009cf0:	4293      	cmp	r3, r2
 8009cf2:	d132      	bne.n	8009d5a <UART_SetConfig+0x2ea>
 8009cf4:	4b32      	ldr	r3, [pc, #200]	; (8009dc0 <UART_SetConfig+0x350>)
 8009cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cf8:	f003 0307 	and.w	r3, r3, #7
 8009cfc:	2b05      	cmp	r3, #5
 8009cfe:	d827      	bhi.n	8009d50 <UART_SetConfig+0x2e0>
 8009d00:	a201      	add	r2, pc, #4	; (adr r2, 8009d08 <UART_SetConfig+0x298>)
 8009d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d06:	bf00      	nop
 8009d08:	08009d21 	.word	0x08009d21
 8009d0c:	08009d29 	.word	0x08009d29
 8009d10:	08009d31 	.word	0x08009d31
 8009d14:	08009d39 	.word	0x08009d39
 8009d18:	08009d41 	.word	0x08009d41
 8009d1c:	08009d49 	.word	0x08009d49
 8009d20:	2300      	movs	r3, #0
 8009d22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d26:	e18b      	b.n	800a040 <UART_SetConfig+0x5d0>
 8009d28:	2304      	movs	r3, #4
 8009d2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d2e:	e187      	b.n	800a040 <UART_SetConfig+0x5d0>
 8009d30:	2308      	movs	r3, #8
 8009d32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d36:	e183      	b.n	800a040 <UART_SetConfig+0x5d0>
 8009d38:	2310      	movs	r3, #16
 8009d3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d3e:	e17f      	b.n	800a040 <UART_SetConfig+0x5d0>
 8009d40:	2320      	movs	r3, #32
 8009d42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d46:	e17b      	b.n	800a040 <UART_SetConfig+0x5d0>
 8009d48:	2340      	movs	r3, #64	; 0x40
 8009d4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d4e:	e177      	b.n	800a040 <UART_SetConfig+0x5d0>
 8009d50:	2380      	movs	r3, #128	; 0x80
 8009d52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d56:	bf00      	nop
 8009d58:	e172      	b.n	800a040 <UART_SetConfig+0x5d0>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	4a1c      	ldr	r2, [pc, #112]	; (8009dd0 <UART_SetConfig+0x360>)
 8009d60:	4293      	cmp	r3, r2
 8009d62:	d144      	bne.n	8009dee <UART_SetConfig+0x37e>
 8009d64:	4b16      	ldr	r3, [pc, #88]	; (8009dc0 <UART_SetConfig+0x350>)
 8009d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d68:	f003 0307 	and.w	r3, r3, #7
 8009d6c:	2b05      	cmp	r3, #5
 8009d6e:	d839      	bhi.n	8009de4 <UART_SetConfig+0x374>
 8009d70:	a201      	add	r2, pc, #4	; (adr r2, 8009d78 <UART_SetConfig+0x308>)
 8009d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d76:	bf00      	nop
 8009d78:	08009d91 	.word	0x08009d91
 8009d7c:	08009d99 	.word	0x08009d99
 8009d80:	08009da1 	.word	0x08009da1
 8009d84:	08009da9 	.word	0x08009da9
 8009d88:	08009dd5 	.word	0x08009dd5
 8009d8c:	08009ddd 	.word	0x08009ddd
 8009d90:	2300      	movs	r3, #0
 8009d92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d96:	e153      	b.n	800a040 <UART_SetConfig+0x5d0>
 8009d98:	2304      	movs	r3, #4
 8009d9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d9e:	e14f      	b.n	800a040 <UART_SetConfig+0x5d0>
 8009da0:	2308      	movs	r3, #8
 8009da2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009da6:	e14b      	b.n	800a040 <UART_SetConfig+0x5d0>
 8009da8:	2310      	movs	r3, #16
 8009daa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dae:	e147      	b.n	800a040 <UART_SetConfig+0x5d0>
 8009db0:	cfff69f3 	.word	0xcfff69f3
 8009db4:	58000c00 	.word	0x58000c00
 8009db8:	11fff4ff 	.word	0x11fff4ff
 8009dbc:	40011000 	.word	0x40011000
 8009dc0:	58024400 	.word	0x58024400
 8009dc4:	40004400 	.word	0x40004400
 8009dc8:	40004800 	.word	0x40004800
 8009dcc:	40004c00 	.word	0x40004c00
 8009dd0:	40005000 	.word	0x40005000
 8009dd4:	2320      	movs	r3, #32
 8009dd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dda:	e131      	b.n	800a040 <UART_SetConfig+0x5d0>
 8009ddc:	2340      	movs	r3, #64	; 0x40
 8009dde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009de2:	e12d      	b.n	800a040 <UART_SetConfig+0x5d0>
 8009de4:	2380      	movs	r3, #128	; 0x80
 8009de6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dea:	bf00      	nop
 8009dec:	e128      	b.n	800a040 <UART_SetConfig+0x5d0>
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	4ab6      	ldr	r2, [pc, #728]	; (800a0cc <UART_SetConfig+0x65c>)
 8009df4:	4293      	cmp	r3, r2
 8009df6:	d178      	bne.n	8009eea <UART_SetConfig+0x47a>
 8009df8:	4bb5      	ldr	r3, [pc, #724]	; (800a0d0 <UART_SetConfig+0x660>)
 8009dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dfc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009e00:	2b28      	cmp	r3, #40	; 0x28
 8009e02:	d86d      	bhi.n	8009ee0 <UART_SetConfig+0x470>
 8009e04:	a201      	add	r2, pc, #4	; (adr r2, 8009e0c <UART_SetConfig+0x39c>)
 8009e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e0a:	bf00      	nop
 8009e0c:	08009eb1 	.word	0x08009eb1
 8009e10:	08009ee1 	.word	0x08009ee1
 8009e14:	08009ee1 	.word	0x08009ee1
 8009e18:	08009ee1 	.word	0x08009ee1
 8009e1c:	08009ee1 	.word	0x08009ee1
 8009e20:	08009ee1 	.word	0x08009ee1
 8009e24:	08009ee1 	.word	0x08009ee1
 8009e28:	08009ee1 	.word	0x08009ee1
 8009e2c:	08009eb9 	.word	0x08009eb9
 8009e30:	08009ee1 	.word	0x08009ee1
 8009e34:	08009ee1 	.word	0x08009ee1
 8009e38:	08009ee1 	.word	0x08009ee1
 8009e3c:	08009ee1 	.word	0x08009ee1
 8009e40:	08009ee1 	.word	0x08009ee1
 8009e44:	08009ee1 	.word	0x08009ee1
 8009e48:	08009ee1 	.word	0x08009ee1
 8009e4c:	08009ec1 	.word	0x08009ec1
 8009e50:	08009ee1 	.word	0x08009ee1
 8009e54:	08009ee1 	.word	0x08009ee1
 8009e58:	08009ee1 	.word	0x08009ee1
 8009e5c:	08009ee1 	.word	0x08009ee1
 8009e60:	08009ee1 	.word	0x08009ee1
 8009e64:	08009ee1 	.word	0x08009ee1
 8009e68:	08009ee1 	.word	0x08009ee1
 8009e6c:	08009ec9 	.word	0x08009ec9
 8009e70:	08009ee1 	.word	0x08009ee1
 8009e74:	08009ee1 	.word	0x08009ee1
 8009e78:	08009ee1 	.word	0x08009ee1
 8009e7c:	08009ee1 	.word	0x08009ee1
 8009e80:	08009ee1 	.word	0x08009ee1
 8009e84:	08009ee1 	.word	0x08009ee1
 8009e88:	08009ee1 	.word	0x08009ee1
 8009e8c:	08009ed1 	.word	0x08009ed1
 8009e90:	08009ee1 	.word	0x08009ee1
 8009e94:	08009ee1 	.word	0x08009ee1
 8009e98:	08009ee1 	.word	0x08009ee1
 8009e9c:	08009ee1 	.word	0x08009ee1
 8009ea0:	08009ee1 	.word	0x08009ee1
 8009ea4:	08009ee1 	.word	0x08009ee1
 8009ea8:	08009ee1 	.word	0x08009ee1
 8009eac:	08009ed9 	.word	0x08009ed9
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009eb6:	e0c3      	b.n	800a040 <UART_SetConfig+0x5d0>
 8009eb8:	2304      	movs	r3, #4
 8009eba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ebe:	e0bf      	b.n	800a040 <UART_SetConfig+0x5d0>
 8009ec0:	2308      	movs	r3, #8
 8009ec2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ec6:	e0bb      	b.n	800a040 <UART_SetConfig+0x5d0>
 8009ec8:	2310      	movs	r3, #16
 8009eca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ece:	e0b7      	b.n	800a040 <UART_SetConfig+0x5d0>
 8009ed0:	2320      	movs	r3, #32
 8009ed2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ed6:	e0b3      	b.n	800a040 <UART_SetConfig+0x5d0>
 8009ed8:	2340      	movs	r3, #64	; 0x40
 8009eda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ede:	e0af      	b.n	800a040 <UART_SetConfig+0x5d0>
 8009ee0:	2380      	movs	r3, #128	; 0x80
 8009ee2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ee6:	bf00      	nop
 8009ee8:	e0aa      	b.n	800a040 <UART_SetConfig+0x5d0>
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	4a79      	ldr	r2, [pc, #484]	; (800a0d4 <UART_SetConfig+0x664>)
 8009ef0:	4293      	cmp	r3, r2
 8009ef2:	d132      	bne.n	8009f5a <UART_SetConfig+0x4ea>
 8009ef4:	4b76      	ldr	r3, [pc, #472]	; (800a0d0 <UART_SetConfig+0x660>)
 8009ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ef8:	f003 0307 	and.w	r3, r3, #7
 8009efc:	2b05      	cmp	r3, #5
 8009efe:	d827      	bhi.n	8009f50 <UART_SetConfig+0x4e0>
 8009f00:	a201      	add	r2, pc, #4	; (adr r2, 8009f08 <UART_SetConfig+0x498>)
 8009f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f06:	bf00      	nop
 8009f08:	08009f21 	.word	0x08009f21
 8009f0c:	08009f29 	.word	0x08009f29
 8009f10:	08009f31 	.word	0x08009f31
 8009f14:	08009f39 	.word	0x08009f39
 8009f18:	08009f41 	.word	0x08009f41
 8009f1c:	08009f49 	.word	0x08009f49
 8009f20:	2300      	movs	r3, #0
 8009f22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f26:	e08b      	b.n	800a040 <UART_SetConfig+0x5d0>
 8009f28:	2304      	movs	r3, #4
 8009f2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f2e:	e087      	b.n	800a040 <UART_SetConfig+0x5d0>
 8009f30:	2308      	movs	r3, #8
 8009f32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f36:	e083      	b.n	800a040 <UART_SetConfig+0x5d0>
 8009f38:	2310      	movs	r3, #16
 8009f3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f3e:	e07f      	b.n	800a040 <UART_SetConfig+0x5d0>
 8009f40:	2320      	movs	r3, #32
 8009f42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f46:	e07b      	b.n	800a040 <UART_SetConfig+0x5d0>
 8009f48:	2340      	movs	r3, #64	; 0x40
 8009f4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f4e:	e077      	b.n	800a040 <UART_SetConfig+0x5d0>
 8009f50:	2380      	movs	r3, #128	; 0x80
 8009f52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f56:	bf00      	nop
 8009f58:	e072      	b.n	800a040 <UART_SetConfig+0x5d0>
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	4a5e      	ldr	r2, [pc, #376]	; (800a0d8 <UART_SetConfig+0x668>)
 8009f60:	4293      	cmp	r3, r2
 8009f62:	d132      	bne.n	8009fca <UART_SetConfig+0x55a>
 8009f64:	4b5a      	ldr	r3, [pc, #360]	; (800a0d0 <UART_SetConfig+0x660>)
 8009f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f68:	f003 0307 	and.w	r3, r3, #7
 8009f6c:	2b05      	cmp	r3, #5
 8009f6e:	d827      	bhi.n	8009fc0 <UART_SetConfig+0x550>
 8009f70:	a201      	add	r2, pc, #4	; (adr r2, 8009f78 <UART_SetConfig+0x508>)
 8009f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f76:	bf00      	nop
 8009f78:	08009f91 	.word	0x08009f91
 8009f7c:	08009f99 	.word	0x08009f99
 8009f80:	08009fa1 	.word	0x08009fa1
 8009f84:	08009fa9 	.word	0x08009fa9
 8009f88:	08009fb1 	.word	0x08009fb1
 8009f8c:	08009fb9 	.word	0x08009fb9
 8009f90:	2300      	movs	r3, #0
 8009f92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f96:	e053      	b.n	800a040 <UART_SetConfig+0x5d0>
 8009f98:	2304      	movs	r3, #4
 8009f9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f9e:	e04f      	b.n	800a040 <UART_SetConfig+0x5d0>
 8009fa0:	2308      	movs	r3, #8
 8009fa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fa6:	e04b      	b.n	800a040 <UART_SetConfig+0x5d0>
 8009fa8:	2310      	movs	r3, #16
 8009faa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fae:	e047      	b.n	800a040 <UART_SetConfig+0x5d0>
 8009fb0:	2320      	movs	r3, #32
 8009fb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fb6:	e043      	b.n	800a040 <UART_SetConfig+0x5d0>
 8009fb8:	2340      	movs	r3, #64	; 0x40
 8009fba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fbe:	e03f      	b.n	800a040 <UART_SetConfig+0x5d0>
 8009fc0:	2380      	movs	r3, #128	; 0x80
 8009fc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fc6:	bf00      	nop
 8009fc8:	e03a      	b.n	800a040 <UART_SetConfig+0x5d0>
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	4a43      	ldr	r2, [pc, #268]	; (800a0dc <UART_SetConfig+0x66c>)
 8009fd0:	4293      	cmp	r3, r2
 8009fd2:	d132      	bne.n	800a03a <UART_SetConfig+0x5ca>
 8009fd4:	4b3e      	ldr	r3, [pc, #248]	; (800a0d0 <UART_SetConfig+0x660>)
 8009fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fd8:	f003 0307 	and.w	r3, r3, #7
 8009fdc:	2b05      	cmp	r3, #5
 8009fde:	d827      	bhi.n	800a030 <UART_SetConfig+0x5c0>
 8009fe0:	a201      	add	r2, pc, #4	; (adr r2, 8009fe8 <UART_SetConfig+0x578>)
 8009fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fe6:	bf00      	nop
 8009fe8:	0800a001 	.word	0x0800a001
 8009fec:	0800a009 	.word	0x0800a009
 8009ff0:	0800a011 	.word	0x0800a011
 8009ff4:	0800a019 	.word	0x0800a019
 8009ff8:	0800a021 	.word	0x0800a021
 8009ffc:	0800a029 	.word	0x0800a029
 800a000:	2302      	movs	r3, #2
 800a002:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a006:	e01b      	b.n	800a040 <UART_SetConfig+0x5d0>
 800a008:	2304      	movs	r3, #4
 800a00a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a00e:	e017      	b.n	800a040 <UART_SetConfig+0x5d0>
 800a010:	2308      	movs	r3, #8
 800a012:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a016:	e013      	b.n	800a040 <UART_SetConfig+0x5d0>
 800a018:	2310      	movs	r3, #16
 800a01a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a01e:	e00f      	b.n	800a040 <UART_SetConfig+0x5d0>
 800a020:	2320      	movs	r3, #32
 800a022:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a026:	e00b      	b.n	800a040 <UART_SetConfig+0x5d0>
 800a028:	2340      	movs	r3, #64	; 0x40
 800a02a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a02e:	e007      	b.n	800a040 <UART_SetConfig+0x5d0>
 800a030:	2380      	movs	r3, #128	; 0x80
 800a032:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a036:	bf00      	nop
 800a038:	e002      	b.n	800a040 <UART_SetConfig+0x5d0>
 800a03a:	2380      	movs	r3, #128	; 0x80
 800a03c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	4a25      	ldr	r2, [pc, #148]	; (800a0dc <UART_SetConfig+0x66c>)
 800a046:	4293      	cmp	r3, r2
 800a048:	f040 80b8 	bne.w	800a1bc <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a04c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a050:	2b08      	cmp	r3, #8
 800a052:	d019      	beq.n	800a088 <UART_SetConfig+0x618>
 800a054:	2b08      	cmp	r3, #8
 800a056:	dc04      	bgt.n	800a062 <UART_SetConfig+0x5f2>
 800a058:	2b02      	cmp	r3, #2
 800a05a:	d009      	beq.n	800a070 <UART_SetConfig+0x600>
 800a05c:	2b04      	cmp	r3, #4
 800a05e:	d00b      	beq.n	800a078 <UART_SetConfig+0x608>
 800a060:	e042      	b.n	800a0e8 <UART_SetConfig+0x678>
 800a062:	2b20      	cmp	r3, #32
 800a064:	d02b      	beq.n	800a0be <UART_SetConfig+0x64e>
 800a066:	2b40      	cmp	r3, #64	; 0x40
 800a068:	d02c      	beq.n	800a0c4 <UART_SetConfig+0x654>
 800a06a:	2b10      	cmp	r3, #16
 800a06c:	d014      	beq.n	800a098 <UART_SetConfig+0x628>
 800a06e:	e03b      	b.n	800a0e8 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a070:	f7fd fa80 	bl	8007574 <HAL_RCCEx_GetD3PCLK1Freq>
 800a074:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a076:	e03d      	b.n	800a0f4 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a078:	f107 0314 	add.w	r3, r7, #20
 800a07c:	4618      	mov	r0, r3
 800a07e:	f7fd fa8f 	bl	80075a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a082:	69bb      	ldr	r3, [r7, #24]
 800a084:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a086:	e035      	b.n	800a0f4 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a088:	f107 0308 	add.w	r3, r7, #8
 800a08c:	4618      	mov	r0, r3
 800a08e:	f7fd fbd3 	bl	8007838 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a096:	e02d      	b.n	800a0f4 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a098:	4b0d      	ldr	r3, [pc, #52]	; (800a0d0 <UART_SetConfig+0x660>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f003 0320 	and.w	r3, r3, #32
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d009      	beq.n	800a0b8 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a0a4:	4b0a      	ldr	r3, [pc, #40]	; (800a0d0 <UART_SetConfig+0x660>)
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	08db      	lsrs	r3, r3, #3
 800a0aa:	f003 0303 	and.w	r3, r3, #3
 800a0ae:	4a0c      	ldr	r2, [pc, #48]	; (800a0e0 <UART_SetConfig+0x670>)
 800a0b0:	fa22 f303 	lsr.w	r3, r2, r3
 800a0b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a0b6:	e01d      	b.n	800a0f4 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 800a0b8:	4b09      	ldr	r3, [pc, #36]	; (800a0e0 <UART_SetConfig+0x670>)
 800a0ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a0bc:	e01a      	b.n	800a0f4 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a0be:	4b09      	ldr	r3, [pc, #36]	; (800a0e4 <UART_SetConfig+0x674>)
 800a0c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a0c2:	e017      	b.n	800a0f4 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a0c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a0c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a0ca:	e013      	b.n	800a0f4 <UART_SetConfig+0x684>
 800a0cc:	40011400 	.word	0x40011400
 800a0d0:	58024400 	.word	0x58024400
 800a0d4:	40007800 	.word	0x40007800
 800a0d8:	40007c00 	.word	0x40007c00
 800a0dc:	58000c00 	.word	0x58000c00
 800a0e0:	03d09000 	.word	0x03d09000
 800a0e4:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a0f2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a0f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	f000 824d 	beq.w	800a596 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a100:	4aad      	ldr	r2, [pc, #692]	; (800a3b8 <UART_SetConfig+0x948>)
 800a102:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a106:	461a      	mov	r2, r3
 800a108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a10a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a10e:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	685a      	ldr	r2, [r3, #4]
 800a114:	4613      	mov	r3, r2
 800a116:	005b      	lsls	r3, r3, #1
 800a118:	4413      	add	r3, r2
 800a11a:	6a3a      	ldr	r2, [r7, #32]
 800a11c:	429a      	cmp	r2, r3
 800a11e:	d305      	bcc.n	800a12c <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	685b      	ldr	r3, [r3, #4]
 800a124:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a126:	6a3a      	ldr	r2, [r7, #32]
 800a128:	429a      	cmp	r2, r3
 800a12a:	d903      	bls.n	800a134 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 800a12c:	2301      	movs	r3, #1
 800a12e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a132:	e230      	b.n	800a596 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a136:	4618      	mov	r0, r3
 800a138:	f04f 0100 	mov.w	r1, #0
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a140:	4a9d      	ldr	r2, [pc, #628]	; (800a3b8 <UART_SetConfig+0x948>)
 800a142:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a146:	b29b      	uxth	r3, r3
 800a148:	f04f 0400 	mov.w	r4, #0
 800a14c:	461a      	mov	r2, r3
 800a14e:	4623      	mov	r3, r4
 800a150:	f7f6 f91e 	bl	8000390 <__aeabi_uldivmod>
 800a154:	4603      	mov	r3, r0
 800a156:	460c      	mov	r4, r1
 800a158:	4619      	mov	r1, r3
 800a15a:	4622      	mov	r2, r4
 800a15c:	f04f 0300 	mov.w	r3, #0
 800a160:	f04f 0400 	mov.w	r4, #0
 800a164:	0214      	lsls	r4, r2, #8
 800a166:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a16a:	020b      	lsls	r3, r1, #8
 800a16c:	687a      	ldr	r2, [r7, #4]
 800a16e:	6852      	ldr	r2, [r2, #4]
 800a170:	0852      	lsrs	r2, r2, #1
 800a172:	4611      	mov	r1, r2
 800a174:	f04f 0200 	mov.w	r2, #0
 800a178:	eb13 0b01 	adds.w	fp, r3, r1
 800a17c:	eb44 0c02 	adc.w	ip, r4, r2
 800a180:	4658      	mov	r0, fp
 800a182:	4661      	mov	r1, ip
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	685b      	ldr	r3, [r3, #4]
 800a188:	f04f 0400 	mov.w	r4, #0
 800a18c:	461a      	mov	r2, r3
 800a18e:	4623      	mov	r3, r4
 800a190:	f7f6 f8fe 	bl	8000390 <__aeabi_uldivmod>
 800a194:	4603      	mov	r3, r0
 800a196:	460c      	mov	r4, r1
 800a198:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a19a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a19c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a1a0:	d308      	bcc.n	800a1b4 <UART_SetConfig+0x744>
 800a1a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a1a8:	d204      	bcs.n	800a1b4 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1b0:	60da      	str	r2, [r3, #12]
 800a1b2:	e1f0      	b.n	800a596 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a1ba:	e1ec      	b.n	800a596 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	69db      	ldr	r3, [r3, #28]
 800a1c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a1c4:	f040 8100 	bne.w	800a3c8 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 800a1c8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a1cc:	2b40      	cmp	r3, #64	; 0x40
 800a1ce:	f200 80b7 	bhi.w	800a340 <UART_SetConfig+0x8d0>
 800a1d2:	a201      	add	r2, pc, #4	; (adr r2, 800a1d8 <UART_SetConfig+0x768>)
 800a1d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1d8:	0800a2dd 	.word	0x0800a2dd
 800a1dc:	0800a2e5 	.word	0x0800a2e5
 800a1e0:	0800a341 	.word	0x0800a341
 800a1e4:	0800a341 	.word	0x0800a341
 800a1e8:	0800a2ed 	.word	0x0800a2ed
 800a1ec:	0800a341 	.word	0x0800a341
 800a1f0:	0800a341 	.word	0x0800a341
 800a1f4:	0800a341 	.word	0x0800a341
 800a1f8:	0800a2fd 	.word	0x0800a2fd
 800a1fc:	0800a341 	.word	0x0800a341
 800a200:	0800a341 	.word	0x0800a341
 800a204:	0800a341 	.word	0x0800a341
 800a208:	0800a341 	.word	0x0800a341
 800a20c:	0800a341 	.word	0x0800a341
 800a210:	0800a341 	.word	0x0800a341
 800a214:	0800a341 	.word	0x0800a341
 800a218:	0800a30d 	.word	0x0800a30d
 800a21c:	0800a341 	.word	0x0800a341
 800a220:	0800a341 	.word	0x0800a341
 800a224:	0800a341 	.word	0x0800a341
 800a228:	0800a341 	.word	0x0800a341
 800a22c:	0800a341 	.word	0x0800a341
 800a230:	0800a341 	.word	0x0800a341
 800a234:	0800a341 	.word	0x0800a341
 800a238:	0800a341 	.word	0x0800a341
 800a23c:	0800a341 	.word	0x0800a341
 800a240:	0800a341 	.word	0x0800a341
 800a244:	0800a341 	.word	0x0800a341
 800a248:	0800a341 	.word	0x0800a341
 800a24c:	0800a341 	.word	0x0800a341
 800a250:	0800a341 	.word	0x0800a341
 800a254:	0800a341 	.word	0x0800a341
 800a258:	0800a333 	.word	0x0800a333
 800a25c:	0800a341 	.word	0x0800a341
 800a260:	0800a341 	.word	0x0800a341
 800a264:	0800a341 	.word	0x0800a341
 800a268:	0800a341 	.word	0x0800a341
 800a26c:	0800a341 	.word	0x0800a341
 800a270:	0800a341 	.word	0x0800a341
 800a274:	0800a341 	.word	0x0800a341
 800a278:	0800a341 	.word	0x0800a341
 800a27c:	0800a341 	.word	0x0800a341
 800a280:	0800a341 	.word	0x0800a341
 800a284:	0800a341 	.word	0x0800a341
 800a288:	0800a341 	.word	0x0800a341
 800a28c:	0800a341 	.word	0x0800a341
 800a290:	0800a341 	.word	0x0800a341
 800a294:	0800a341 	.word	0x0800a341
 800a298:	0800a341 	.word	0x0800a341
 800a29c:	0800a341 	.word	0x0800a341
 800a2a0:	0800a341 	.word	0x0800a341
 800a2a4:	0800a341 	.word	0x0800a341
 800a2a8:	0800a341 	.word	0x0800a341
 800a2ac:	0800a341 	.word	0x0800a341
 800a2b0:	0800a341 	.word	0x0800a341
 800a2b4:	0800a341 	.word	0x0800a341
 800a2b8:	0800a341 	.word	0x0800a341
 800a2bc:	0800a341 	.word	0x0800a341
 800a2c0:	0800a341 	.word	0x0800a341
 800a2c4:	0800a341 	.word	0x0800a341
 800a2c8:	0800a341 	.word	0x0800a341
 800a2cc:	0800a341 	.word	0x0800a341
 800a2d0:	0800a341 	.word	0x0800a341
 800a2d4:	0800a341 	.word	0x0800a341
 800a2d8:	0800a339 	.word	0x0800a339
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a2dc:	f7fb ff9c 	bl	8006218 <HAL_RCC_GetPCLK1Freq>
 800a2e0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a2e2:	e033      	b.n	800a34c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a2e4:	f7fb ffae 	bl	8006244 <HAL_RCC_GetPCLK2Freq>
 800a2e8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a2ea:	e02f      	b.n	800a34c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a2ec:	f107 0314 	add.w	r3, r7, #20
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	f7fd f955 	bl	80075a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a2f6:	69bb      	ldr	r3, [r7, #24]
 800a2f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a2fa:	e027      	b.n	800a34c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a2fc:	f107 0308 	add.w	r3, r7, #8
 800a300:	4618      	mov	r0, r3
 800a302:	f7fd fa99 	bl	8007838 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a30a:	e01f      	b.n	800a34c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a30c:	4b2b      	ldr	r3, [pc, #172]	; (800a3bc <UART_SetConfig+0x94c>)
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	f003 0320 	and.w	r3, r3, #32
 800a314:	2b00      	cmp	r3, #0
 800a316:	d009      	beq.n	800a32c <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a318:	4b28      	ldr	r3, [pc, #160]	; (800a3bc <UART_SetConfig+0x94c>)
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	08db      	lsrs	r3, r3, #3
 800a31e:	f003 0303 	and.w	r3, r3, #3
 800a322:	4a27      	ldr	r2, [pc, #156]	; (800a3c0 <UART_SetConfig+0x950>)
 800a324:	fa22 f303 	lsr.w	r3, r2, r3
 800a328:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a32a:	e00f      	b.n	800a34c <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 800a32c:	4b24      	ldr	r3, [pc, #144]	; (800a3c0 <UART_SetConfig+0x950>)
 800a32e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a330:	e00c      	b.n	800a34c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a332:	4b24      	ldr	r3, [pc, #144]	; (800a3c4 <UART_SetConfig+0x954>)
 800a334:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a336:	e009      	b.n	800a34c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a338:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a33c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a33e:	e005      	b.n	800a34c <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 800a340:	2300      	movs	r3, #0
 800a342:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a344:	2301      	movs	r3, #1
 800a346:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a34a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a34c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a34e:	2b00      	cmp	r3, #0
 800a350:	f000 8121 	beq.w	800a596 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a358:	4a17      	ldr	r2, [pc, #92]	; (800a3b8 <UART_SetConfig+0x948>)
 800a35a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a35e:	461a      	mov	r2, r3
 800a360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a362:	fbb3 f3f2 	udiv	r3, r3, r2
 800a366:	005a      	lsls	r2, r3, #1
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	685b      	ldr	r3, [r3, #4]
 800a36c:	085b      	lsrs	r3, r3, #1
 800a36e:	441a      	add	r2, r3
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	685b      	ldr	r3, [r3, #4]
 800a374:	fbb2 f3f3 	udiv	r3, r2, r3
 800a378:	b29b      	uxth	r3, r3
 800a37a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a37c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a37e:	2b0f      	cmp	r3, #15
 800a380:	d916      	bls.n	800a3b0 <UART_SetConfig+0x940>
 800a382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a388:	d212      	bcs.n	800a3b0 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a38a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a38c:	b29b      	uxth	r3, r3
 800a38e:	f023 030f 	bic.w	r3, r3, #15
 800a392:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a396:	085b      	lsrs	r3, r3, #1
 800a398:	b29b      	uxth	r3, r3
 800a39a:	f003 0307 	and.w	r3, r3, #7
 800a39e:	b29a      	uxth	r2, r3
 800a3a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a3a2:	4313      	orrs	r3, r2
 800a3a4:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a3ac:	60da      	str	r2, [r3, #12]
 800a3ae:	e0f2      	b.n	800a596 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800a3b0:	2301      	movs	r3, #1
 800a3b2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a3b6:	e0ee      	b.n	800a596 <UART_SetConfig+0xb26>
 800a3b8:	08013790 	.word	0x08013790
 800a3bc:	58024400 	.word	0x58024400
 800a3c0:	03d09000 	.word	0x03d09000
 800a3c4:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 800a3c8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a3cc:	2b40      	cmp	r3, #64	; 0x40
 800a3ce:	f200 80b7 	bhi.w	800a540 <UART_SetConfig+0xad0>
 800a3d2:	a201      	add	r2, pc, #4	; (adr r2, 800a3d8 <UART_SetConfig+0x968>)
 800a3d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3d8:	0800a4dd 	.word	0x0800a4dd
 800a3dc:	0800a4e5 	.word	0x0800a4e5
 800a3e0:	0800a541 	.word	0x0800a541
 800a3e4:	0800a541 	.word	0x0800a541
 800a3e8:	0800a4ed 	.word	0x0800a4ed
 800a3ec:	0800a541 	.word	0x0800a541
 800a3f0:	0800a541 	.word	0x0800a541
 800a3f4:	0800a541 	.word	0x0800a541
 800a3f8:	0800a4fd 	.word	0x0800a4fd
 800a3fc:	0800a541 	.word	0x0800a541
 800a400:	0800a541 	.word	0x0800a541
 800a404:	0800a541 	.word	0x0800a541
 800a408:	0800a541 	.word	0x0800a541
 800a40c:	0800a541 	.word	0x0800a541
 800a410:	0800a541 	.word	0x0800a541
 800a414:	0800a541 	.word	0x0800a541
 800a418:	0800a50d 	.word	0x0800a50d
 800a41c:	0800a541 	.word	0x0800a541
 800a420:	0800a541 	.word	0x0800a541
 800a424:	0800a541 	.word	0x0800a541
 800a428:	0800a541 	.word	0x0800a541
 800a42c:	0800a541 	.word	0x0800a541
 800a430:	0800a541 	.word	0x0800a541
 800a434:	0800a541 	.word	0x0800a541
 800a438:	0800a541 	.word	0x0800a541
 800a43c:	0800a541 	.word	0x0800a541
 800a440:	0800a541 	.word	0x0800a541
 800a444:	0800a541 	.word	0x0800a541
 800a448:	0800a541 	.word	0x0800a541
 800a44c:	0800a541 	.word	0x0800a541
 800a450:	0800a541 	.word	0x0800a541
 800a454:	0800a541 	.word	0x0800a541
 800a458:	0800a533 	.word	0x0800a533
 800a45c:	0800a541 	.word	0x0800a541
 800a460:	0800a541 	.word	0x0800a541
 800a464:	0800a541 	.word	0x0800a541
 800a468:	0800a541 	.word	0x0800a541
 800a46c:	0800a541 	.word	0x0800a541
 800a470:	0800a541 	.word	0x0800a541
 800a474:	0800a541 	.word	0x0800a541
 800a478:	0800a541 	.word	0x0800a541
 800a47c:	0800a541 	.word	0x0800a541
 800a480:	0800a541 	.word	0x0800a541
 800a484:	0800a541 	.word	0x0800a541
 800a488:	0800a541 	.word	0x0800a541
 800a48c:	0800a541 	.word	0x0800a541
 800a490:	0800a541 	.word	0x0800a541
 800a494:	0800a541 	.word	0x0800a541
 800a498:	0800a541 	.word	0x0800a541
 800a49c:	0800a541 	.word	0x0800a541
 800a4a0:	0800a541 	.word	0x0800a541
 800a4a4:	0800a541 	.word	0x0800a541
 800a4a8:	0800a541 	.word	0x0800a541
 800a4ac:	0800a541 	.word	0x0800a541
 800a4b0:	0800a541 	.word	0x0800a541
 800a4b4:	0800a541 	.word	0x0800a541
 800a4b8:	0800a541 	.word	0x0800a541
 800a4bc:	0800a541 	.word	0x0800a541
 800a4c0:	0800a541 	.word	0x0800a541
 800a4c4:	0800a541 	.word	0x0800a541
 800a4c8:	0800a541 	.word	0x0800a541
 800a4cc:	0800a541 	.word	0x0800a541
 800a4d0:	0800a541 	.word	0x0800a541
 800a4d4:	0800a541 	.word	0x0800a541
 800a4d8:	0800a539 	.word	0x0800a539
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a4dc:	f7fb fe9c 	bl	8006218 <HAL_RCC_GetPCLK1Freq>
 800a4e0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a4e2:	e033      	b.n	800a54c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a4e4:	f7fb feae 	bl	8006244 <HAL_RCC_GetPCLK2Freq>
 800a4e8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a4ea:	e02f      	b.n	800a54c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a4ec:	f107 0314 	add.w	r3, r7, #20
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	f7fd f855 	bl	80075a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a4f6:	69bb      	ldr	r3, [r7, #24]
 800a4f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a4fa:	e027      	b.n	800a54c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a4fc:	f107 0308 	add.w	r3, r7, #8
 800a500:	4618      	mov	r0, r3
 800a502:	f7fd f999 	bl	8007838 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a50a:	e01f      	b.n	800a54c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a50c:	4b2c      	ldr	r3, [pc, #176]	; (800a5c0 <UART_SetConfig+0xb50>)
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	f003 0320 	and.w	r3, r3, #32
 800a514:	2b00      	cmp	r3, #0
 800a516:	d009      	beq.n	800a52c <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a518:	4b29      	ldr	r3, [pc, #164]	; (800a5c0 <UART_SetConfig+0xb50>)
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	08db      	lsrs	r3, r3, #3
 800a51e:	f003 0303 	and.w	r3, r3, #3
 800a522:	4a28      	ldr	r2, [pc, #160]	; (800a5c4 <UART_SetConfig+0xb54>)
 800a524:	fa22 f303 	lsr.w	r3, r2, r3
 800a528:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a52a:	e00f      	b.n	800a54c <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 800a52c:	4b25      	ldr	r3, [pc, #148]	; (800a5c4 <UART_SetConfig+0xb54>)
 800a52e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a530:	e00c      	b.n	800a54c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a532:	4b25      	ldr	r3, [pc, #148]	; (800a5c8 <UART_SetConfig+0xb58>)
 800a534:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a536:	e009      	b.n	800a54c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a538:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a53c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a53e:	e005      	b.n	800a54c <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 800a540:	2300      	movs	r3, #0
 800a542:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a544:	2301      	movs	r3, #1
 800a546:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a54a:	bf00      	nop
    }

    if (pclk != 0U)
 800a54c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d021      	beq.n	800a596 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a556:	4a1d      	ldr	r2, [pc, #116]	; (800a5cc <UART_SetConfig+0xb5c>)
 800a558:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a55c:	461a      	mov	r2, r3
 800a55e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a560:	fbb3 f2f2 	udiv	r2, r3, r2
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	685b      	ldr	r3, [r3, #4]
 800a568:	085b      	lsrs	r3, r3, #1
 800a56a:	441a      	add	r2, r3
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	685b      	ldr	r3, [r3, #4]
 800a570:	fbb2 f3f3 	udiv	r3, r2, r3
 800a574:	b29b      	uxth	r3, r3
 800a576:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a57a:	2b0f      	cmp	r3, #15
 800a57c:	d908      	bls.n	800a590 <UART_SetConfig+0xb20>
 800a57e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a584:	d204      	bcs.n	800a590 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a58c:	60da      	str	r2, [r3, #12]
 800a58e:	e002      	b.n	800a596 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800a590:	2301      	movs	r3, #1
 800a592:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2201      	movs	r2, #1
 800a59a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2201      	movs	r2, #1
 800a5a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800a5b2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	3738      	adds	r7, #56	; 0x38
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800a5c0:	58024400 	.word	0x58024400
 800a5c4:	03d09000 	.word	0x03d09000
 800a5c8:	003d0900 	.word	0x003d0900
 800a5cc:	08013790 	.word	0x08013790

0800a5d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a5d0:	b480      	push	{r7}
 800a5d2:	b083      	sub	sp, #12
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5dc:	f003 0301 	and.w	r3, r3, #1
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d00a      	beq.n	800a5fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	685b      	ldr	r3, [r3, #4]
 800a5ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	430a      	orrs	r2, r1
 800a5f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5fe:	f003 0302 	and.w	r3, r3, #2
 800a602:	2b00      	cmp	r3, #0
 800a604:	d00a      	beq.n	800a61c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	685b      	ldr	r3, [r3, #4]
 800a60c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	430a      	orrs	r2, r1
 800a61a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a620:	f003 0304 	and.w	r3, r3, #4
 800a624:	2b00      	cmp	r3, #0
 800a626:	d00a      	beq.n	800a63e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	685b      	ldr	r3, [r3, #4]
 800a62e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	430a      	orrs	r2, r1
 800a63c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a642:	f003 0308 	and.w	r3, r3, #8
 800a646:	2b00      	cmp	r3, #0
 800a648:	d00a      	beq.n	800a660 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	685b      	ldr	r3, [r3, #4]
 800a650:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	430a      	orrs	r2, r1
 800a65e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a664:	f003 0310 	and.w	r3, r3, #16
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d00a      	beq.n	800a682 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	689b      	ldr	r3, [r3, #8]
 800a672:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	430a      	orrs	r2, r1
 800a680:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a686:	f003 0320 	and.w	r3, r3, #32
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d00a      	beq.n	800a6a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	689b      	ldr	r3, [r3, #8]
 800a694:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	430a      	orrs	r2, r1
 800a6a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d01a      	beq.n	800a6e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	685b      	ldr	r3, [r3, #4]
 800a6b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	430a      	orrs	r2, r1
 800a6c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a6ce:	d10a      	bne.n	800a6e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	685b      	ldr	r3, [r3, #4]
 800a6d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	430a      	orrs	r2, r1
 800a6e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d00a      	beq.n	800a708 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	685b      	ldr	r3, [r3, #4]
 800a6f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	430a      	orrs	r2, r1
 800a706:	605a      	str	r2, [r3, #4]
  }
}
 800a708:	bf00      	nop
 800a70a:	370c      	adds	r7, #12
 800a70c:	46bd      	mov	sp, r7
 800a70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a712:	4770      	bx	lr

0800a714 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b086      	sub	sp, #24
 800a718:	af02      	add	r7, sp, #8
 800a71a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2200      	movs	r2, #0
 800a720:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800a724:	f7f7 f856 	bl	80017d4 <HAL_GetTick>
 800a728:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	f003 0308 	and.w	r3, r3, #8
 800a734:	2b08      	cmp	r3, #8
 800a736:	d10e      	bne.n	800a756 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a738:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a73c:	9300      	str	r3, [sp, #0]
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	2200      	movs	r2, #0
 800a742:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a746:	6878      	ldr	r0, [r7, #4]
 800a748:	f000 f82c 	bl	800a7a4 <UART_WaitOnFlagUntilTimeout>
 800a74c:	4603      	mov	r3, r0
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d001      	beq.n	800a756 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a752:	2303      	movs	r3, #3
 800a754:	e022      	b.n	800a79c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	f003 0304 	and.w	r3, r3, #4
 800a760:	2b04      	cmp	r3, #4
 800a762:	d10e      	bne.n	800a782 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a764:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a768:	9300      	str	r3, [sp, #0]
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	2200      	movs	r2, #0
 800a76e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f000 f816 	bl	800a7a4 <UART_WaitOnFlagUntilTimeout>
 800a778:	4603      	mov	r3, r0
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d001      	beq.n	800a782 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a77e:	2303      	movs	r3, #3
 800a780:	e00c      	b.n	800a79c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2220      	movs	r2, #32
 800a786:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	2220      	movs	r2, #32
 800a78e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2200      	movs	r2, #0
 800a796:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a79a:	2300      	movs	r3, #0
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	3710      	adds	r7, #16
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}

0800a7a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b084      	sub	sp, #16
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	60f8      	str	r0, [r7, #12]
 800a7ac:	60b9      	str	r1, [r7, #8]
 800a7ae:	603b      	str	r3, [r7, #0]
 800a7b0:	4613      	mov	r3, r2
 800a7b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a7b4:	e062      	b.n	800a87c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a7b6:	69bb      	ldr	r3, [r7, #24]
 800a7b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7bc:	d05e      	beq.n	800a87c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a7be:	f7f7 f809 	bl	80017d4 <HAL_GetTick>
 800a7c2:	4602      	mov	r2, r0
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	1ad3      	subs	r3, r2, r3
 800a7c8:	69ba      	ldr	r2, [r7, #24]
 800a7ca:	429a      	cmp	r2, r3
 800a7cc:	d302      	bcc.n	800a7d4 <UART_WaitOnFlagUntilTimeout+0x30>
 800a7ce:	69bb      	ldr	r3, [r7, #24]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d11d      	bne.n	800a810 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	681a      	ldr	r2, [r3, #0]
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a7e2:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	689a      	ldr	r2, [r3, #8]
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	f022 0201 	bic.w	r2, r2, #1
 800a7f2:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	2220      	movs	r2, #32
 800a7f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	2220      	movs	r2, #32
 800a800:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	2200      	movs	r2, #0
 800a808:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800a80c:	2303      	movs	r3, #3
 800a80e:	e045      	b.n	800a89c <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	f003 0304 	and.w	r3, r3, #4
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d02e      	beq.n	800a87c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	69db      	ldr	r3, [r3, #28]
 800a824:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a828:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a82c:	d126      	bne.n	800a87c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a836:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	681a      	ldr	r2, [r3, #0]
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a846:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	689a      	ldr	r2, [r3, #8]
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	f022 0201 	bic.w	r2, r2, #1
 800a856:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	2220      	movs	r2, #32
 800a85c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	2220      	movs	r2, #32
 800a864:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	2220      	movs	r2, #32
 800a86c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	2200      	movs	r2, #0
 800a874:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800a878:	2303      	movs	r3, #3
 800a87a:	e00f      	b.n	800a89c <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	69da      	ldr	r2, [r3, #28]
 800a882:	68bb      	ldr	r3, [r7, #8]
 800a884:	4013      	ands	r3, r2
 800a886:	68ba      	ldr	r2, [r7, #8]
 800a888:	429a      	cmp	r2, r3
 800a88a:	bf0c      	ite	eq
 800a88c:	2301      	moveq	r3, #1
 800a88e:	2300      	movne	r3, #0
 800a890:	b2db      	uxtb	r3, r3
 800a892:	461a      	mov	r2, r3
 800a894:	79fb      	ldrb	r3, [r7, #7]
 800a896:	429a      	cmp	r2, r3
 800a898:	d08d      	beq.n	800a7b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a89a:	2300      	movs	r3, #0
}
 800a89c:	4618      	mov	r0, r3
 800a89e:	3710      	adds	r7, #16
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	bd80      	pop	{r7, pc}

0800a8a4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a8a4:	b480      	push	{r7}
 800a8a6:	b085      	sub	sp, #20
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a8b2:	2b01      	cmp	r3, #1
 800a8b4:	d101      	bne.n	800a8ba <HAL_UARTEx_DisableFifoMode+0x16>
 800a8b6:	2302      	movs	r3, #2
 800a8b8:	e027      	b.n	800a90a <HAL_UARTEx_DisableFifoMode+0x66>
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2201      	movs	r2, #1
 800a8be:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	2224      	movs	r2, #36	; 0x24
 800a8c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	681a      	ldr	r2, [r3, #0]
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	f022 0201 	bic.w	r2, r2, #1
 800a8e0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a8e8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	68fa      	ldr	r2, [r7, #12]
 800a8f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2220      	movs	r2, #32
 800a8fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2200      	movs	r2, #0
 800a904:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a908:	2300      	movs	r3, #0
}
 800a90a:	4618      	mov	r0, r3
 800a90c:	3714      	adds	r7, #20
 800a90e:	46bd      	mov	sp, r7
 800a910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a914:	4770      	bx	lr

0800a916 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a916:	b580      	push	{r7, lr}
 800a918:	b084      	sub	sp, #16
 800a91a:	af00      	add	r7, sp, #0
 800a91c:	6078      	str	r0, [r7, #4]
 800a91e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a926:	2b01      	cmp	r3, #1
 800a928:	d101      	bne.n	800a92e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a92a:	2302      	movs	r3, #2
 800a92c:	e02d      	b.n	800a98a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2201      	movs	r2, #1
 800a932:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2224      	movs	r2, #36	; 0x24
 800a93a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	681a      	ldr	r2, [r3, #0]
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	f022 0201 	bic.w	r2, r2, #1
 800a954:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	689b      	ldr	r3, [r3, #8]
 800a95c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	683a      	ldr	r2, [r7, #0]
 800a966:	430a      	orrs	r2, r1
 800a968:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a96a:	6878      	ldr	r0, [r7, #4]
 800a96c:	f000 f850 	bl	800aa10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	68fa      	ldr	r2, [r7, #12]
 800a976:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2220      	movs	r2, #32
 800a97c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2200      	movs	r2, #0
 800a984:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a988:	2300      	movs	r3, #0
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	3710      	adds	r7, #16
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd80      	pop	{r7, pc}

0800a992 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a992:	b580      	push	{r7, lr}
 800a994:	b084      	sub	sp, #16
 800a996:	af00      	add	r7, sp, #0
 800a998:	6078      	str	r0, [r7, #4]
 800a99a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a9a2:	2b01      	cmp	r3, #1
 800a9a4:	d101      	bne.n	800a9aa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a9a6:	2302      	movs	r3, #2
 800a9a8:	e02d      	b.n	800aa06 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2201      	movs	r2, #1
 800a9ae:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2224      	movs	r2, #36	; 0x24
 800a9b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	681a      	ldr	r2, [r3, #0]
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	f022 0201 	bic.w	r2, r2, #1
 800a9d0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	689b      	ldr	r3, [r3, #8]
 800a9d8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	683a      	ldr	r2, [r7, #0]
 800a9e2:	430a      	orrs	r2, r1
 800a9e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a9e6:	6878      	ldr	r0, [r7, #4]
 800a9e8:	f000 f812 	bl	800aa10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	68fa      	ldr	r2, [r7, #12]
 800a9f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2220      	movs	r2, #32
 800a9f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2200      	movs	r2, #0
 800aa00:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800aa04:	2300      	movs	r3, #0
}
 800aa06:	4618      	mov	r0, r3
 800aa08:	3710      	adds	r7, #16
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	bd80      	pop	{r7, pc}
	...

0800aa10 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800aa10:	b480      	push	{r7}
 800aa12:	b089      	sub	sp, #36	; 0x24
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800aa18:	4a2f      	ldr	r2, [pc, #188]	; (800aad8 <UARTEx_SetNbDataToProcess+0xc8>)
 800aa1a:	f107 0314 	add.w	r3, r7, #20
 800aa1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800aa22:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800aa26:	4a2d      	ldr	r2, [pc, #180]	; (800aadc <UARTEx_SetNbDataToProcess+0xcc>)
 800aa28:	f107 030c 	add.w	r3, r7, #12
 800aa2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800aa30:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d108      	bne.n	800aa4e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2201      	movs	r2, #1
 800aa40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2201      	movs	r2, #1
 800aa48:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800aa4c:	e03d      	b.n	800aaca <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800aa4e:	2310      	movs	r3, #16
 800aa50:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800aa52:	2310      	movs	r3, #16
 800aa54:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	689b      	ldr	r3, [r3, #8]
 800aa5c:	0e5b      	lsrs	r3, r3, #25
 800aa5e:	b2db      	uxtb	r3, r3
 800aa60:	f003 0307 	and.w	r3, r3, #7
 800aa64:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	689b      	ldr	r3, [r3, #8]
 800aa6c:	0f5b      	lsrs	r3, r3, #29
 800aa6e:	b2db      	uxtb	r3, r3
 800aa70:	f003 0307 	and.w	r3, r3, #7
 800aa74:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800aa76:	7fbb      	ldrb	r3, [r7, #30]
 800aa78:	7f3a      	ldrb	r2, [r7, #28]
 800aa7a:	f107 0120 	add.w	r1, r7, #32
 800aa7e:	440a      	add	r2, r1
 800aa80:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800aa84:	fb02 f303 	mul.w	r3, r2, r3
 800aa88:	7f3a      	ldrb	r2, [r7, #28]
 800aa8a:	f107 0120 	add.w	r1, r7, #32
 800aa8e:	440a      	add	r2, r1
 800aa90:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800aa94:	fb93 f3f2 	sdiv	r3, r3, r2
 800aa98:	b29a      	uxth	r2, r3
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800aaa0:	7ffb      	ldrb	r3, [r7, #31]
 800aaa2:	7f7a      	ldrb	r2, [r7, #29]
 800aaa4:	f107 0120 	add.w	r1, r7, #32
 800aaa8:	440a      	add	r2, r1
 800aaaa:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800aaae:	fb02 f303 	mul.w	r3, r2, r3
 800aab2:	7f7a      	ldrb	r2, [r7, #29]
 800aab4:	f107 0120 	add.w	r1, r7, #32
 800aab8:	440a      	add	r2, r1
 800aaba:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800aabe:	fb93 f3f2 	sdiv	r3, r3, r2
 800aac2:	b29a      	uxth	r2, r3
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800aaca:	bf00      	nop
 800aacc:	3724      	adds	r7, #36	; 0x24
 800aace:	46bd      	mov	sp, r7
 800aad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad4:	4770      	bx	lr
 800aad6:	bf00      	nop
 800aad8:	080136e0 	.word	0x080136e0
 800aadc:	080136e8 	.word	0x080136e8

0800aae0 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800aae0:	b084      	sub	sp, #16
 800aae2:	b480      	push	{r7}
 800aae4:	b085      	sub	sp, #20
 800aae6:	af00      	add	r7, sp, #0
 800aae8:	6078      	str	r0, [r7, #4]
 800aaea:	f107 001c 	add.w	r0, r7, #28
 800aaee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800aaf6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800aaf8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800aafa:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800aafc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800aafe:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800ab00:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800ab02:	431a      	orrs	r2, r3
             Init.ClockDiv
 800ab04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800ab06:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800ab08:	68fa      	ldr	r2, [r7, #12]
 800ab0a:	4313      	orrs	r3, r2
 800ab0c:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	685a      	ldr	r2, [r3, #4]
 800ab12:	4b07      	ldr	r3, [pc, #28]	; (800ab30 <SDMMC_Init+0x50>)
 800ab14:	4013      	ands	r3, r2
 800ab16:	68fa      	ldr	r2, [r7, #12]
 800ab18:	431a      	orrs	r2, r3
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800ab1e:	2300      	movs	r3, #0
}
 800ab20:	4618      	mov	r0, r3
 800ab22:	3714      	adds	r7, #20
 800ab24:	46bd      	mov	sp, r7
 800ab26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2a:	b004      	add	sp, #16
 800ab2c:	4770      	bx	lr
 800ab2e:	bf00      	nop
 800ab30:	ffc02c00 	.word	0xffc02c00

0800ab34 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800ab34:	b480      	push	{r7}
 800ab36:	b083      	sub	sp, #12
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800ab42:	4618      	mov	r0, r3
 800ab44:	370c      	adds	r7, #12
 800ab46:	46bd      	mov	sp, r7
 800ab48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4c:	4770      	bx	lr

0800ab4e <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800ab4e:	b480      	push	{r7}
 800ab50:	b083      	sub	sp, #12
 800ab52:	af00      	add	r7, sp, #0
 800ab54:	6078      	str	r0, [r7, #4]
 800ab56:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	681a      	ldr	r2, [r3, #0]
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ab62:	2300      	movs	r3, #0
}
 800ab64:	4618      	mov	r0, r3
 800ab66:	370c      	adds	r7, #12
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6e:	4770      	bx	lr

0800ab70 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800ab70:	b480      	push	{r7}
 800ab72:	b083      	sub	sp, #12
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	f043 0203 	orr.w	r2, r3, #3
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800ab84:	2300      	movs	r3, #0
}
 800ab86:	4618      	mov	r0, r3
 800ab88:	370c      	adds	r7, #12
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab90:	4770      	bx	lr

0800ab92 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800ab92:	b480      	push	{r7}
 800ab94:	b083      	sub	sp, #12
 800ab96:	af00      	add	r7, sp, #0
 800ab98:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	f003 0303 	and.w	r3, r3, #3
}
 800aba2:	4618      	mov	r0, r3
 800aba4:	370c      	adds	r7, #12
 800aba6:	46bd      	mov	sp, r7
 800aba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abac:	4770      	bx	lr
	...

0800abb0 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800abb0:	b480      	push	{r7}
 800abb2:	b085      	sub	sp, #20
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
 800abb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800abba:	2300      	movs	r3, #0
 800abbc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	681a      	ldr	r2, [r3, #0]
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800abce:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800abd0:	683b      	ldr	r3, [r7, #0]
 800abd2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800abd4:	431a      	orrs	r2, r3
                       Command->CPSM);
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800abda:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800abdc:	68fa      	ldr	r2, [r7, #12]
 800abde:	4313      	orrs	r3, r2
 800abe0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	68da      	ldr	r2, [r3, #12]
 800abe6:	4b06      	ldr	r3, [pc, #24]	; (800ac00 <SDMMC_SendCommand+0x50>)
 800abe8:	4013      	ands	r3, r2
 800abea:	68fa      	ldr	r2, [r7, #12]
 800abec:	431a      	orrs	r2, r3
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800abf2:	2300      	movs	r3, #0
}
 800abf4:	4618      	mov	r0, r3
 800abf6:	3714      	adds	r7, #20
 800abf8:	46bd      	mov	sp, r7
 800abfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfe:	4770      	bx	lr
 800ac00:	fffee0c0 	.word	0xfffee0c0

0800ac04 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800ac04:	b480      	push	{r7}
 800ac06:	b083      	sub	sp, #12
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	691b      	ldr	r3, [r3, #16]
 800ac10:	b2db      	uxtb	r3, r3
}
 800ac12:	4618      	mov	r0, r3
 800ac14:	370c      	adds	r7, #12
 800ac16:	46bd      	mov	sp, r7
 800ac18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1c:	4770      	bx	lr

0800ac1e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800ac1e:	b480      	push	{r7}
 800ac20:	b085      	sub	sp, #20
 800ac22:	af00      	add	r7, sp, #0
 800ac24:	6078      	str	r0, [r7, #4]
 800ac26:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	3314      	adds	r3, #20
 800ac2c:	461a      	mov	r2, r3
 800ac2e:	683b      	ldr	r3, [r7, #0]
 800ac30:	4413      	add	r3, r2
 800ac32:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	681b      	ldr	r3, [r3, #0]
}
 800ac38:	4618      	mov	r0, r3
 800ac3a:	3714      	adds	r7, #20
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac42:	4770      	bx	lr

0800ac44 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800ac44:	b480      	push	{r7}
 800ac46:	b085      	sub	sp, #20
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
 800ac4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ac4e:	2300      	movs	r3, #0
 800ac50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800ac52:	683b      	ldr	r3, [r7, #0]
 800ac54:	681a      	ldr	r2, [r3, #0]
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	685a      	ldr	r2, [r3, #4]
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ac62:	683b      	ldr	r3, [r7, #0]
 800ac64:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ac6a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800ac70:	431a      	orrs	r2, r3
                       Data->DPSM);
 800ac72:	683b      	ldr	r3, [r7, #0]
 800ac74:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800ac76:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ac78:	68fa      	ldr	r2, [r7, #12]
 800ac7a:	4313      	orrs	r3, r2
 800ac7c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac82:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	431a      	orrs	r2, r3
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800ac8e:	2300      	movs	r3, #0

}
 800ac90:	4618      	mov	r0, r3
 800ac92:	3714      	adds	r7, #20
 800ac94:	46bd      	mov	sp, r7
 800ac96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9a:	4770      	bx	lr

0800ac9c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b088      	sub	sp, #32
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
 800aca4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800acaa:	2310      	movs	r3, #16
 800acac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800acae:	f44f 7380 	mov.w	r3, #256	; 0x100
 800acb2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800acb4:	2300      	movs	r3, #0
 800acb6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800acb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800acbc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800acbe:	f107 0308 	add.w	r3, r7, #8
 800acc2:	4619      	mov	r1, r3
 800acc4:	6878      	ldr	r0, [r7, #4]
 800acc6:	f7ff ff73 	bl	800abb0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800acca:	f241 3288 	movw	r2, #5000	; 0x1388
 800acce:	2110      	movs	r1, #16
 800acd0:	6878      	ldr	r0, [r7, #4]
 800acd2:	f000 faaf 	bl	800b234 <SDMMC_GetCmdResp1>
 800acd6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800acd8:	69fb      	ldr	r3, [r7, #28]
}
 800acda:	4618      	mov	r0, r3
 800acdc:	3720      	adds	r7, #32
 800acde:	46bd      	mov	sp, r7
 800ace0:	bd80      	pop	{r7, pc}

0800ace2 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800ace2:	b580      	push	{r7, lr}
 800ace4:	b088      	sub	sp, #32
 800ace6:	af00      	add	r7, sp, #0
 800ace8:	6078      	str	r0, [r7, #4]
 800acea:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800acf0:	2311      	movs	r3, #17
 800acf2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800acf4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800acf8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800acfa:	2300      	movs	r3, #0
 800acfc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800acfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ad02:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad04:	f107 0308 	add.w	r3, r7, #8
 800ad08:	4619      	mov	r1, r3
 800ad0a:	6878      	ldr	r0, [r7, #4]
 800ad0c:	f7ff ff50 	bl	800abb0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ad10:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad14:	2111      	movs	r1, #17
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	f000 fa8c 	bl	800b234 <SDMMC_GetCmdResp1>
 800ad1c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad1e:	69fb      	ldr	r3, [r7, #28]
}
 800ad20:	4618      	mov	r0, r3
 800ad22:	3720      	adds	r7, #32
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bd80      	pop	{r7, pc}

0800ad28 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b088      	sub	sp, #32
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
 800ad30:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800ad36:	2312      	movs	r3, #18
 800ad38:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ad3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad40:	2300      	movs	r3, #0
 800ad42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ad48:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad4a:	f107 0308 	add.w	r3, r7, #8
 800ad4e:	4619      	mov	r1, r3
 800ad50:	6878      	ldr	r0, [r7, #4]
 800ad52:	f7ff ff2d 	bl	800abb0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ad56:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad5a:	2112      	movs	r1, #18
 800ad5c:	6878      	ldr	r0, [r7, #4]
 800ad5e:	f000 fa69 	bl	800b234 <SDMMC_GetCmdResp1>
 800ad62:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad64:	69fb      	ldr	r3, [r7, #28]
}
 800ad66:	4618      	mov	r0, r3
 800ad68:	3720      	adds	r7, #32
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	bd80      	pop	{r7, pc}

0800ad6e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ad6e:	b580      	push	{r7, lr}
 800ad70:	b088      	sub	sp, #32
 800ad72:	af00      	add	r7, sp, #0
 800ad74:	6078      	str	r0, [r7, #4]
 800ad76:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800ad7c:	2318      	movs	r3, #24
 800ad7e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad80:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ad84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad86:	2300      	movs	r3, #0
 800ad88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ad8e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad90:	f107 0308 	add.w	r3, r7, #8
 800ad94:	4619      	mov	r1, r3
 800ad96:	6878      	ldr	r0, [r7, #4]
 800ad98:	f7ff ff0a 	bl	800abb0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ad9c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ada0:	2118      	movs	r1, #24
 800ada2:	6878      	ldr	r0, [r7, #4]
 800ada4:	f000 fa46 	bl	800b234 <SDMMC_GetCmdResp1>
 800ada8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800adaa:	69fb      	ldr	r3, [r7, #28]
}
 800adac:	4618      	mov	r0, r3
 800adae:	3720      	adds	r7, #32
 800adb0:	46bd      	mov	sp, r7
 800adb2:	bd80      	pop	{r7, pc}

0800adb4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b088      	sub	sp, #32
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
 800adbc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800adc2:	2319      	movs	r3, #25
 800adc4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800adc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800adca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800adcc:	2300      	movs	r3, #0
 800adce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800add0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800add4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800add6:	f107 0308 	add.w	r3, r7, #8
 800adda:	4619      	mov	r1, r3
 800addc:	6878      	ldr	r0, [r7, #4]
 800adde:	f7ff fee7 	bl	800abb0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ade2:	f241 3288 	movw	r2, #5000	; 0x1388
 800ade6:	2119      	movs	r1, #25
 800ade8:	6878      	ldr	r0, [r7, #4]
 800adea:	f000 fa23 	bl	800b234 <SDMMC_GetCmdResp1>
 800adee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800adf0:	69fb      	ldr	r3, [r7, #28]
}
 800adf2:	4618      	mov	r0, r3
 800adf4:	3720      	adds	r7, #32
 800adf6:	46bd      	mov	sp, r7
 800adf8:	bd80      	pop	{r7, pc}
	...

0800adfc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b088      	sub	sp, #32
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800ae04:	2300      	movs	r3, #0
 800ae06:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800ae08:	230c      	movs	r3, #12
 800ae0a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ae0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ae10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae12:	2300      	movs	r3, #0
 800ae14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ae1a:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	68db      	ldr	r3, [r3, #12]
 800ae20:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	68db      	ldr	r3, [r3, #12]
 800ae2c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae34:	f107 0308 	add.w	r3, r7, #8
 800ae38:	4619      	mov	r1, r3
 800ae3a:	6878      	ldr	r0, [r7, #4]
 800ae3c:	f7ff feb8 	bl	800abb0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800ae40:	4a0b      	ldr	r2, [pc, #44]	; (800ae70 <SDMMC_CmdStopTransfer+0x74>)
 800ae42:	210c      	movs	r1, #12
 800ae44:	6878      	ldr	r0, [r7, #4]
 800ae46:	f000 f9f5 	bl	800b234 <SDMMC_GetCmdResp1>
 800ae4a:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	68db      	ldr	r3, [r3, #12]
 800ae50:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800ae58:	69fb      	ldr	r3, [r7, #28]
 800ae5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ae5e:	d101      	bne.n	800ae64 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800ae60:	2300      	movs	r3, #0
 800ae62:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800ae64:	69fb      	ldr	r3, [r7, #28]
}
 800ae66:	4618      	mov	r0, r3
 800ae68:	3720      	adds	r7, #32
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	bd80      	pop	{r7, pc}
 800ae6e:	bf00      	nop
 800ae70:	05f5e100 	.word	0x05f5e100

0800ae74 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b08a      	sub	sp, #40	; 0x28
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	60f8      	str	r0, [r7, #12]
 800ae7c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800ae84:	2307      	movs	r3, #7
 800ae86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ae88:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ae8c:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae8e:	2300      	movs	r3, #0
 800ae90:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ae96:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae98:	f107 0310 	add.w	r3, r7, #16
 800ae9c:	4619      	mov	r1, r3
 800ae9e:	68f8      	ldr	r0, [r7, #12]
 800aea0:	f7ff fe86 	bl	800abb0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800aea4:	f241 3288 	movw	r2, #5000	; 0x1388
 800aea8:	2107      	movs	r1, #7
 800aeaa:	68f8      	ldr	r0, [r7, #12]
 800aeac:	f000 f9c2 	bl	800b234 <SDMMC_GetCmdResp1>
 800aeb0:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800aeb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	3728      	adds	r7, #40	; 0x28
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	bd80      	pop	{r7, pc}

0800aebc <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	b088      	sub	sp, #32
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800aec4:	2300      	movs	r3, #0
 800aec6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800aec8:	2300      	movs	r3, #0
 800aeca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800aecc:	2300      	movs	r3, #0
 800aece:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aed0:	2300      	movs	r3, #0
 800aed2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aed4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aed8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aeda:	f107 0308 	add.w	r3, r7, #8
 800aede:	4619      	mov	r1, r3
 800aee0:	6878      	ldr	r0, [r7, #4]
 800aee2:	f7ff fe65 	bl	800abb0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800aee6:	6878      	ldr	r0, [r7, #4]
 800aee8:	f000 f976 	bl	800b1d8 <SDMMC_GetCmdError>
 800aeec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aeee:	69fb      	ldr	r3, [r7, #28]
}
 800aef0:	4618      	mov	r0, r3
 800aef2:	3720      	adds	r7, #32
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bd80      	pop	{r7, pc}

0800aef8 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b088      	sub	sp, #32
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800af00:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800af04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800af06:	2308      	movs	r3, #8
 800af08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800af0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af10:	2300      	movs	r3, #0
 800af12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800af18:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af1a:	f107 0308 	add.w	r3, r7, #8
 800af1e:	4619      	mov	r1, r3
 800af20:	6878      	ldr	r0, [r7, #4]
 800af22:	f7ff fe45 	bl	800abb0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800af26:	6878      	ldr	r0, [r7, #4]
 800af28:	f000 fb78 	bl	800b61c <SDMMC_GetCmdResp7>
 800af2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af2e:	69fb      	ldr	r3, [r7, #28]
}
 800af30:	4618      	mov	r0, r3
 800af32:	3720      	adds	r7, #32
 800af34:	46bd      	mov	sp, r7
 800af36:	bd80      	pop	{r7, pc}

0800af38 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b088      	sub	sp, #32
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
 800af40:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800af46:	2337      	movs	r3, #55	; 0x37
 800af48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800af4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af50:	2300      	movs	r3, #0
 800af52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800af58:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af5a:	f107 0308 	add.w	r3, r7, #8
 800af5e:	4619      	mov	r1, r3
 800af60:	6878      	ldr	r0, [r7, #4]
 800af62:	f7ff fe25 	bl	800abb0 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800af66:	f241 3288 	movw	r2, #5000	; 0x1388
 800af6a:	2137      	movs	r1, #55	; 0x37
 800af6c:	6878      	ldr	r0, [r7, #4]
 800af6e:	f000 f961 	bl	800b234 <SDMMC_GetCmdResp1>
 800af72:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af74:	69fb      	ldr	r3, [r7, #28]
}
 800af76:	4618      	mov	r0, r3
 800af78:	3720      	adds	r7, #32
 800af7a:	46bd      	mov	sp, r7
 800af7c:	bd80      	pop	{r7, pc}

0800af7e <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800af7e:	b580      	push	{r7, lr}
 800af80:	b088      	sub	sp, #32
 800af82:	af00      	add	r7, sp, #0
 800af84:	6078      	str	r0, [r7, #4]
 800af86:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800af8c:	2329      	movs	r3, #41	; 0x29
 800af8e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800af90:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af96:	2300      	movs	r3, #0
 800af98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800af9e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800afa0:	f107 0308 	add.w	r3, r7, #8
 800afa4:	4619      	mov	r1, r3
 800afa6:	6878      	ldr	r0, [r7, #4]
 800afa8:	f7ff fe02 	bl	800abb0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	f000 fa7d 	bl	800b4ac <SDMMC_GetCmdResp3>
 800afb2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800afb4:	69fb      	ldr	r3, [r7, #28]
}
 800afb6:	4618      	mov	r0, r3
 800afb8:	3720      	adds	r7, #32
 800afba:	46bd      	mov	sp, r7
 800afbc:	bd80      	pop	{r7, pc}

0800afbe <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800afbe:	b580      	push	{r7, lr}
 800afc0:	b088      	sub	sp, #32
 800afc2:	af00      	add	r7, sp, #0
 800afc4:	6078      	str	r0, [r7, #4]
 800afc6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800afc8:	683b      	ldr	r3, [r7, #0]
 800afca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800afcc:	2306      	movs	r3, #6
 800afce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800afd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800afd4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800afd6:	2300      	movs	r3, #0
 800afd8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800afda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800afde:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800afe0:	f107 0308 	add.w	r3, r7, #8
 800afe4:	4619      	mov	r1, r3
 800afe6:	6878      	ldr	r0, [r7, #4]
 800afe8:	f7ff fde2 	bl	800abb0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800afec:	f241 3288 	movw	r2, #5000	; 0x1388
 800aff0:	2106      	movs	r1, #6
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	f000 f91e 	bl	800b234 <SDMMC_GetCmdResp1>
 800aff8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800affa:	69fb      	ldr	r3, [r7, #28]
}
 800affc:	4618      	mov	r0, r3
 800affe:	3720      	adds	r7, #32
 800b000:	46bd      	mov	sp, r7
 800b002:	bd80      	pop	{r7, pc}

0800b004 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b088      	sub	sp, #32
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b00c:	2300      	movs	r3, #0
 800b00e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b010:	2333      	movs	r3, #51	; 0x33
 800b012:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b014:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b018:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b01a:	2300      	movs	r3, #0
 800b01c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b01e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b022:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b024:	f107 0308 	add.w	r3, r7, #8
 800b028:	4619      	mov	r1, r3
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	f7ff fdc0 	bl	800abb0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800b030:	f241 3288 	movw	r2, #5000	; 0x1388
 800b034:	2133      	movs	r1, #51	; 0x33
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	f000 f8fc 	bl	800b234 <SDMMC_GetCmdResp1>
 800b03c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b03e:	69fb      	ldr	r3, [r7, #28]
}
 800b040:	4618      	mov	r0, r3
 800b042:	3720      	adds	r7, #32
 800b044:	46bd      	mov	sp, r7
 800b046:	bd80      	pop	{r7, pc}

0800b048 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b088      	sub	sp, #32
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b050:	2300      	movs	r3, #0
 800b052:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b054:	2302      	movs	r3, #2
 800b056:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b058:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b05c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b05e:	2300      	movs	r3, #0
 800b060:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b062:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b066:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b068:	f107 0308 	add.w	r3, r7, #8
 800b06c:	4619      	mov	r1, r3
 800b06e:	6878      	ldr	r0, [r7, #4]
 800b070:	f7ff fd9e 	bl	800abb0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b074:	6878      	ldr	r0, [r7, #4]
 800b076:	f000 f9cf 	bl	800b418 <SDMMC_GetCmdResp2>
 800b07a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b07c:	69fb      	ldr	r3, [r7, #28]
}
 800b07e:	4618      	mov	r0, r3
 800b080:	3720      	adds	r7, #32
 800b082:	46bd      	mov	sp, r7
 800b084:	bd80      	pop	{r7, pc}

0800b086 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b086:	b580      	push	{r7, lr}
 800b088:	b088      	sub	sp, #32
 800b08a:	af00      	add	r7, sp, #0
 800b08c:	6078      	str	r0, [r7, #4]
 800b08e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b090:	683b      	ldr	r3, [r7, #0]
 800b092:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b094:	2309      	movs	r3, #9
 800b096:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b098:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b09c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b09e:	2300      	movs	r3, #0
 800b0a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b0a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b0a6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b0a8:	f107 0308 	add.w	r3, r7, #8
 800b0ac:	4619      	mov	r1, r3
 800b0ae:	6878      	ldr	r0, [r7, #4]
 800b0b0:	f7ff fd7e 	bl	800abb0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b0b4:	6878      	ldr	r0, [r7, #4]
 800b0b6:	f000 f9af 	bl	800b418 <SDMMC_GetCmdResp2>
 800b0ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b0bc:	69fb      	ldr	r3, [r7, #28]
}
 800b0be:	4618      	mov	r0, r3
 800b0c0:	3720      	adds	r7, #32
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bd80      	pop	{r7, pc}

0800b0c6 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b0c6:	b580      	push	{r7, lr}
 800b0c8:	b088      	sub	sp, #32
 800b0ca:	af00      	add	r7, sp, #0
 800b0cc:	6078      	str	r0, [r7, #4]
 800b0ce:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b0d4:	2303      	movs	r3, #3
 800b0d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b0d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b0dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b0de:	2300      	movs	r3, #0
 800b0e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b0e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b0e6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b0e8:	f107 0308 	add.w	r3, r7, #8
 800b0ec:	4619      	mov	r1, r3
 800b0ee:	6878      	ldr	r0, [r7, #4]
 800b0f0:	f7ff fd5e 	bl	800abb0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b0f4:	683a      	ldr	r2, [r7, #0]
 800b0f6:	2103      	movs	r1, #3
 800b0f8:	6878      	ldr	r0, [r7, #4]
 800b0fa:	f000 fa17 	bl	800b52c <SDMMC_GetCmdResp6>
 800b0fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b100:	69fb      	ldr	r3, [r7, #28]
}
 800b102:	4618      	mov	r0, r3
 800b104:	3720      	adds	r7, #32
 800b106:	46bd      	mov	sp, r7
 800b108:	bd80      	pop	{r7, pc}

0800b10a <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b10a:	b580      	push	{r7, lr}
 800b10c:	b088      	sub	sp, #32
 800b10e:	af00      	add	r7, sp, #0
 800b110:	6078      	str	r0, [r7, #4]
 800b112:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b114:	683b      	ldr	r3, [r7, #0]
 800b116:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b118:	230d      	movs	r3, #13
 800b11a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b11c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b120:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b122:	2300      	movs	r3, #0
 800b124:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b126:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b12a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b12c:	f107 0308 	add.w	r3, r7, #8
 800b130:	4619      	mov	r1, r3
 800b132:	6878      	ldr	r0, [r7, #4]
 800b134:	f7ff fd3c 	bl	800abb0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b138:	f241 3288 	movw	r2, #5000	; 0x1388
 800b13c:	210d      	movs	r1, #13
 800b13e:	6878      	ldr	r0, [r7, #4]
 800b140:	f000 f878 	bl	800b234 <SDMMC_GetCmdResp1>
 800b144:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b146:	69fb      	ldr	r3, [r7, #28]
}
 800b148:	4618      	mov	r0, r3
 800b14a:	3720      	adds	r7, #32
 800b14c:	46bd      	mov	sp, r7
 800b14e:	bd80      	pop	{r7, pc}

0800b150 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b088      	sub	sp, #32
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b158:	2300      	movs	r3, #0
 800b15a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800b15c:	230d      	movs	r3, #13
 800b15e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b160:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b164:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b166:	2300      	movs	r3, #0
 800b168:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b16a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b16e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b170:	f107 0308 	add.w	r3, r7, #8
 800b174:	4619      	mov	r1, r3
 800b176:	6878      	ldr	r0, [r7, #4]
 800b178:	f7ff fd1a 	bl	800abb0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800b17c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b180:	210d      	movs	r1, #13
 800b182:	6878      	ldr	r0, [r7, #4]
 800b184:	f000 f856 	bl	800b234 <SDMMC_GetCmdResp1>
 800b188:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b18a:	69fb      	ldr	r3, [r7, #28]
}
 800b18c:	4618      	mov	r0, r3
 800b18e:	3720      	adds	r7, #32
 800b190:	46bd      	mov	sp, r7
 800b192:	bd80      	pop	{r7, pc}

0800b194 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b088      	sub	sp, #32
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800b19c:	2300      	movs	r3, #0
 800b19e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800b1a0:	230b      	movs	r3, #11
 800b1a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b1a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b1a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b1ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b1b2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b1b4:	f107 0308 	add.w	r3, r7, #8
 800b1b8:	4619      	mov	r1, r3
 800b1ba:	6878      	ldr	r0, [r7, #4]
 800b1bc:	f7ff fcf8 	bl	800abb0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800b1c0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1c4:	210b      	movs	r1, #11
 800b1c6:	6878      	ldr	r0, [r7, #4]
 800b1c8:	f000 f834 	bl	800b234 <SDMMC_GetCmdResp1>
 800b1cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b1ce:	69fb      	ldr	r3, [r7, #28]
}
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	3720      	adds	r7, #32
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	bd80      	pop	{r7, pc}

0800b1d8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800b1d8:	b480      	push	{r7}
 800b1da:	b085      	sub	sp, #20
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b1e0:	4b11      	ldr	r3, [pc, #68]	; (800b228 <SDMMC_GetCmdError+0x50>)
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	4a11      	ldr	r2, [pc, #68]	; (800b22c <SDMMC_GetCmdError+0x54>)
 800b1e6:	fba2 2303 	umull	r2, r3, r2, r3
 800b1ea:	0a5b      	lsrs	r3, r3, #9
 800b1ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1f0:	fb02 f303 	mul.w	r3, r2, r3
 800b1f4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	1e5a      	subs	r2, r3, #1
 800b1fa:	60fa      	str	r2, [r7, #12]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d102      	bne.n	800b206 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b200:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b204:	e009      	b.n	800b21a <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b20a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d0f1      	beq.n	800b1f6 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	4a06      	ldr	r2, [pc, #24]	; (800b230 <SDMMC_GetCmdError+0x58>)
 800b216:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800b218:	2300      	movs	r3, #0
}
 800b21a:	4618      	mov	r0, r3
 800b21c:	3714      	adds	r7, #20
 800b21e:	46bd      	mov	sp, r7
 800b220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b224:	4770      	bx	lr
 800b226:	bf00      	nop
 800b228:	24000000 	.word	0x24000000
 800b22c:	10624dd3 	.word	0x10624dd3
 800b230:	002000c5 	.word	0x002000c5

0800b234 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b234:	b580      	push	{r7, lr}
 800b236:	b088      	sub	sp, #32
 800b238:	af00      	add	r7, sp, #0
 800b23a:	60f8      	str	r0, [r7, #12]
 800b23c:	460b      	mov	r3, r1
 800b23e:	607a      	str	r2, [r7, #4]
 800b240:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b242:	4b70      	ldr	r3, [pc, #448]	; (800b404 <SDMMC_GetCmdResp1+0x1d0>)
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	4a70      	ldr	r2, [pc, #448]	; (800b408 <SDMMC_GetCmdResp1+0x1d4>)
 800b248:	fba2 2303 	umull	r2, r3, r2, r3
 800b24c:	0a5a      	lsrs	r2, r3, #9
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	fb02 f303 	mul.w	r3, r2, r3
 800b254:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800b256:	69fb      	ldr	r3, [r7, #28]
 800b258:	1e5a      	subs	r2, r3, #1
 800b25a:	61fa      	str	r2, [r7, #28]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d102      	bne.n	800b266 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b260:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b264:	e0c9      	b.n	800b3fa <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b26a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800b26c:	69ba      	ldr	r2, [r7, #24]
 800b26e:	4b67      	ldr	r3, [pc, #412]	; (800b40c <SDMMC_GetCmdResp1+0x1d8>)
 800b270:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b272:	2b00      	cmp	r3, #0
 800b274:	d0ef      	beq.n	800b256 <SDMMC_GetCmdResp1+0x22>
 800b276:	69bb      	ldr	r3, [r7, #24]
 800b278:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d1ea      	bne.n	800b256 <SDMMC_GetCmdResp1+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b284:	f003 0304 	and.w	r3, r3, #4
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d004      	beq.n	800b296 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	2204      	movs	r2, #4
 800b290:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b292:	2304      	movs	r3, #4
 800b294:	e0b1      	b.n	800b3fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b29a:	f003 0301 	and.w	r3, r3, #1
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d004      	beq.n	800b2ac <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	2201      	movs	r2, #1
 800b2a6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b2a8:	2301      	movs	r3, #1
 800b2aa:	e0a6      	b.n	800b3fa <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	4a58      	ldr	r2, [pc, #352]	; (800b410 <SDMMC_GetCmdResp1+0x1dc>)
 800b2b0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b2b2:	68f8      	ldr	r0, [r7, #12]
 800b2b4:	f7ff fca6 	bl	800ac04 <SDMMC_GetCommandResponse>
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	461a      	mov	r2, r3
 800b2bc:	7afb      	ldrb	r3, [r7, #11]
 800b2be:	4293      	cmp	r3, r2
 800b2c0:	d001      	beq.n	800b2c6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b2c2:	2301      	movs	r3, #1
 800b2c4:	e099      	b.n	800b3fa <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b2c6:	2100      	movs	r1, #0
 800b2c8:	68f8      	ldr	r0, [r7, #12]
 800b2ca:	f7ff fca8 	bl	800ac1e <SDMMC_GetResponse>
 800b2ce:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b2d0:	697a      	ldr	r2, [r7, #20]
 800b2d2:	4b50      	ldr	r3, [pc, #320]	; (800b414 <SDMMC_GetCmdResp1+0x1e0>)
 800b2d4:	4013      	ands	r3, r2
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d101      	bne.n	800b2de <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b2da:	2300      	movs	r3, #0
 800b2dc:	e08d      	b.n	800b3fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b2de:	697b      	ldr	r3, [r7, #20]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	da02      	bge.n	800b2ea <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b2e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b2e8:	e087      	b.n	800b3fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b2ea:	697b      	ldr	r3, [r7, #20]
 800b2ec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d001      	beq.n	800b2f8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b2f4:	2340      	movs	r3, #64	; 0x40
 800b2f6:	e080      	b.n	800b3fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b2f8:	697b      	ldr	r3, [r7, #20]
 800b2fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d001      	beq.n	800b306 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b302:	2380      	movs	r3, #128	; 0x80
 800b304:	e079      	b.n	800b3fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b306:	697b      	ldr	r3, [r7, #20]
 800b308:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d002      	beq.n	800b316 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b310:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b314:	e071      	b.n	800b3fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b316:	697b      	ldr	r3, [r7, #20]
 800b318:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d002      	beq.n	800b326 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b320:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b324:	e069      	b.n	800b3fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b326:	697b      	ldr	r3, [r7, #20]
 800b328:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d002      	beq.n	800b336 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b330:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b334:	e061      	b.n	800b3fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b336:	697b      	ldr	r3, [r7, #20]
 800b338:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d002      	beq.n	800b346 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b340:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b344:	e059      	b.n	800b3fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b346:	697b      	ldr	r3, [r7, #20]
 800b348:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d002      	beq.n	800b356 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b350:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b354:	e051      	b.n	800b3fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b356:	697b      	ldr	r3, [r7, #20]
 800b358:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d002      	beq.n	800b366 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b360:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b364:	e049      	b.n	800b3fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b366:	697b      	ldr	r3, [r7, #20]
 800b368:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d002      	beq.n	800b376 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b370:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b374:	e041      	b.n	800b3fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b376:	697b      	ldr	r3, [r7, #20]
 800b378:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d002      	beq.n	800b386 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b380:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b384:	e039      	b.n	800b3fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b386:	697b      	ldr	r3, [r7, #20]
 800b388:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d002      	beq.n	800b396 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b390:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b394:	e031      	b.n	800b3fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b396:	697b      	ldr	r3, [r7, #20]
 800b398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d002      	beq.n	800b3a6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b3a0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b3a4:	e029      	b.n	800b3fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b3a6:	697b      	ldr	r3, [r7, #20]
 800b3a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d002      	beq.n	800b3b6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b3b0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b3b4:	e021      	b.n	800b3fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b3b6:	697b      	ldr	r3, [r7, #20]
 800b3b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d002      	beq.n	800b3c6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b3c0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b3c4:	e019      	b.n	800b3fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b3c6:	697b      	ldr	r3, [r7, #20]
 800b3c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d002      	beq.n	800b3d6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b3d0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b3d4:	e011      	b.n	800b3fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b3d6:	697b      	ldr	r3, [r7, #20]
 800b3d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d002      	beq.n	800b3e6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b3e0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b3e4:	e009      	b.n	800b3fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b3e6:	697b      	ldr	r3, [r7, #20]
 800b3e8:	f003 0308 	and.w	r3, r3, #8
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d002      	beq.n	800b3f6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b3f0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b3f4:	e001      	b.n	800b3fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b3f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	3720      	adds	r7, #32
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bd80      	pop	{r7, pc}
 800b402:	bf00      	nop
 800b404:	24000000 	.word	0x24000000
 800b408:	10624dd3 	.word	0x10624dd3
 800b40c:	00200045 	.word	0x00200045
 800b410:	002000c5 	.word	0x002000c5
 800b414:	fdffe008 	.word	0xfdffe008

0800b418 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800b418:	b480      	push	{r7}
 800b41a:	b085      	sub	sp, #20
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b420:	4b1f      	ldr	r3, [pc, #124]	; (800b4a0 <SDMMC_GetCmdResp2+0x88>)
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	4a1f      	ldr	r2, [pc, #124]	; (800b4a4 <SDMMC_GetCmdResp2+0x8c>)
 800b426:	fba2 2303 	umull	r2, r3, r2, r3
 800b42a:	0a5b      	lsrs	r3, r3, #9
 800b42c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b430:	fb02 f303 	mul.w	r3, r2, r3
 800b434:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	1e5a      	subs	r2, r3, #1
 800b43a:	60fa      	str	r2, [r7, #12]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d102      	bne.n	800b446 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b440:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b444:	e026      	b.n	800b494 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b44a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b44c:	68bb      	ldr	r3, [r7, #8]
 800b44e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b452:	2b00      	cmp	r3, #0
 800b454:	d0ef      	beq.n	800b436 <SDMMC_GetCmdResp2+0x1e>
 800b456:	68bb      	ldr	r3, [r7, #8]
 800b458:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d1ea      	bne.n	800b436 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b464:	f003 0304 	and.w	r3, r3, #4
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d004      	beq.n	800b476 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2204      	movs	r2, #4
 800b470:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b472:	2304      	movs	r3, #4
 800b474:	e00e      	b.n	800b494 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b47a:	f003 0301 	and.w	r3, r3, #1
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d004      	beq.n	800b48c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	2201      	movs	r2, #1
 800b486:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b488:	2301      	movs	r3, #1
 800b48a:	e003      	b.n	800b494 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	4a06      	ldr	r2, [pc, #24]	; (800b4a8 <SDMMC_GetCmdResp2+0x90>)
 800b490:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b492:	2300      	movs	r3, #0
}
 800b494:	4618      	mov	r0, r3
 800b496:	3714      	adds	r7, #20
 800b498:	46bd      	mov	sp, r7
 800b49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49e:	4770      	bx	lr
 800b4a0:	24000000 	.word	0x24000000
 800b4a4:	10624dd3 	.word	0x10624dd3
 800b4a8:	002000c5 	.word	0x002000c5

0800b4ac <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800b4ac:	b480      	push	{r7}
 800b4ae:	b085      	sub	sp, #20
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b4b4:	4b1a      	ldr	r3, [pc, #104]	; (800b520 <SDMMC_GetCmdResp3+0x74>)
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	4a1a      	ldr	r2, [pc, #104]	; (800b524 <SDMMC_GetCmdResp3+0x78>)
 800b4ba:	fba2 2303 	umull	r2, r3, r2, r3
 800b4be:	0a5b      	lsrs	r3, r3, #9
 800b4c0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4c4:	fb02 f303 	mul.w	r3, r2, r3
 800b4c8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	1e5a      	subs	r2, r3, #1
 800b4ce:	60fa      	str	r2, [r7, #12]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d102      	bne.n	800b4da <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b4d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b4d8:	e01b      	b.n	800b512 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4de:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b4e0:	68bb      	ldr	r3, [r7, #8]
 800b4e2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d0ef      	beq.n	800b4ca <SDMMC_GetCmdResp3+0x1e>
 800b4ea:	68bb      	ldr	r3, [r7, #8]
 800b4ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d1ea      	bne.n	800b4ca <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4f8:	f003 0304 	and.w	r3, r3, #4
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d004      	beq.n	800b50a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	2204      	movs	r2, #4
 800b504:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b506:	2304      	movs	r3, #4
 800b508:	e003      	b.n	800b512 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	4a06      	ldr	r2, [pc, #24]	; (800b528 <SDMMC_GetCmdResp3+0x7c>)
 800b50e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b510:	2300      	movs	r3, #0
}
 800b512:	4618      	mov	r0, r3
 800b514:	3714      	adds	r7, #20
 800b516:	46bd      	mov	sp, r7
 800b518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51c:	4770      	bx	lr
 800b51e:	bf00      	nop
 800b520:	24000000 	.word	0x24000000
 800b524:	10624dd3 	.word	0x10624dd3
 800b528:	002000c5 	.word	0x002000c5

0800b52c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b088      	sub	sp, #32
 800b530:	af00      	add	r7, sp, #0
 800b532:	60f8      	str	r0, [r7, #12]
 800b534:	460b      	mov	r3, r1
 800b536:	607a      	str	r2, [r7, #4]
 800b538:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b53a:	4b35      	ldr	r3, [pc, #212]	; (800b610 <SDMMC_GetCmdResp6+0xe4>)
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	4a35      	ldr	r2, [pc, #212]	; (800b614 <SDMMC_GetCmdResp6+0xe8>)
 800b540:	fba2 2303 	umull	r2, r3, r2, r3
 800b544:	0a5b      	lsrs	r3, r3, #9
 800b546:	f241 3288 	movw	r2, #5000	; 0x1388
 800b54a:	fb02 f303 	mul.w	r3, r2, r3
 800b54e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800b550:	69fb      	ldr	r3, [r7, #28]
 800b552:	1e5a      	subs	r2, r3, #1
 800b554:	61fa      	str	r2, [r7, #28]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d102      	bne.n	800b560 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b55a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b55e:	e052      	b.n	800b606 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b564:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b566:	69bb      	ldr	r3, [r7, #24]
 800b568:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d0ef      	beq.n	800b550 <SDMMC_GetCmdResp6+0x24>
 800b570:	69bb      	ldr	r3, [r7, #24]
 800b572:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b576:	2b00      	cmp	r3, #0
 800b578:	d1ea      	bne.n	800b550 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b57e:	f003 0304 	and.w	r3, r3, #4
 800b582:	2b00      	cmp	r3, #0
 800b584:	d004      	beq.n	800b590 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	2204      	movs	r2, #4
 800b58a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b58c:	2304      	movs	r3, #4
 800b58e:	e03a      	b.n	800b606 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b594:	f003 0301 	and.w	r3, r3, #1
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d004      	beq.n	800b5a6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	2201      	movs	r2, #1
 800b5a0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b5a2:	2301      	movs	r3, #1
 800b5a4:	e02f      	b.n	800b606 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b5a6:	68f8      	ldr	r0, [r7, #12]
 800b5a8:	f7ff fb2c 	bl	800ac04 <SDMMC_GetCommandResponse>
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	461a      	mov	r2, r3
 800b5b0:	7afb      	ldrb	r3, [r7, #11]
 800b5b2:	4293      	cmp	r3, r2
 800b5b4:	d001      	beq.n	800b5ba <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b5b6:	2301      	movs	r3, #1
 800b5b8:	e025      	b.n	800b606 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	4a16      	ldr	r2, [pc, #88]	; (800b618 <SDMMC_GetCmdResp6+0xec>)
 800b5be:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b5c0:	2100      	movs	r1, #0
 800b5c2:	68f8      	ldr	r0, [r7, #12]
 800b5c4:	f7ff fb2b 	bl	800ac1e <SDMMC_GetResponse>
 800b5c8:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b5ca:	697b      	ldr	r3, [r7, #20]
 800b5cc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d106      	bne.n	800b5e2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b5d4:	697b      	ldr	r3, [r7, #20]
 800b5d6:	0c1b      	lsrs	r3, r3, #16
 800b5d8:	b29a      	uxth	r2, r3
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800b5de:	2300      	movs	r3, #0
 800b5e0:	e011      	b.n	800b606 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b5e2:	697b      	ldr	r3, [r7, #20]
 800b5e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d002      	beq.n	800b5f2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b5ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b5f0:	e009      	b.n	800b606 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b5f2:	697b      	ldr	r3, [r7, #20]
 800b5f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d002      	beq.n	800b602 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b5fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b600:	e001      	b.n	800b606 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b602:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b606:	4618      	mov	r0, r3
 800b608:	3720      	adds	r7, #32
 800b60a:	46bd      	mov	sp, r7
 800b60c:	bd80      	pop	{r7, pc}
 800b60e:	bf00      	nop
 800b610:	24000000 	.word	0x24000000
 800b614:	10624dd3 	.word	0x10624dd3
 800b618:	002000c5 	.word	0x002000c5

0800b61c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800b61c:	b480      	push	{r7}
 800b61e:	b085      	sub	sp, #20
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b624:	4b22      	ldr	r3, [pc, #136]	; (800b6b0 <SDMMC_GetCmdResp7+0x94>)
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	4a22      	ldr	r2, [pc, #136]	; (800b6b4 <SDMMC_GetCmdResp7+0x98>)
 800b62a:	fba2 2303 	umull	r2, r3, r2, r3
 800b62e:	0a5b      	lsrs	r3, r3, #9
 800b630:	f241 3288 	movw	r2, #5000	; 0x1388
 800b634:	fb02 f303 	mul.w	r3, r2, r3
 800b638:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	1e5a      	subs	r2, r3, #1
 800b63e:	60fa      	str	r2, [r7, #12]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d102      	bne.n	800b64a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b644:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b648:	e02c      	b.n	800b6a4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b64e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b650:	68bb      	ldr	r3, [r7, #8]
 800b652:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b656:	2b00      	cmp	r3, #0
 800b658:	d0ef      	beq.n	800b63a <SDMMC_GetCmdResp7+0x1e>
 800b65a:	68bb      	ldr	r3, [r7, #8]
 800b65c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b660:	2b00      	cmp	r3, #0
 800b662:	d1ea      	bne.n	800b63a <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b668:	f003 0304 	and.w	r3, r3, #4
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d004      	beq.n	800b67a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	2204      	movs	r2, #4
 800b674:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b676:	2304      	movs	r3, #4
 800b678:	e014      	b.n	800b6a4 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b67e:	f003 0301 	and.w	r3, r3, #1
 800b682:	2b00      	cmp	r3, #0
 800b684:	d004      	beq.n	800b690 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	2201      	movs	r2, #1
 800b68a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b68c:	2301      	movs	r3, #1
 800b68e:	e009      	b.n	800b6a4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d002      	beq.n	800b6a2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	2240      	movs	r2, #64	; 0x40
 800b6a0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b6a2:	2300      	movs	r3, #0

}
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	3714      	adds	r7, #20
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ae:	4770      	bx	lr
 800b6b0:	24000000 	.word	0x24000000
 800b6b4:	10624dd3 	.word	0x10624dd3

0800b6b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b6b8:	b084      	sub	sp, #16
 800b6ba:	b580      	push	{r7, lr}
 800b6bc:	b084      	sub	sp, #16
 800b6be:	af00      	add	r7, sp, #0
 800b6c0:	6078      	str	r0, [r7, #4]
 800b6c2:	f107 001c 	add.w	r0, r7, #28
 800b6c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b6ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6cc:	2b01      	cmp	r3, #1
 800b6ce:	d120      	bne.n	800b712 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	68da      	ldr	r2, [r3, #12]
 800b6e0:	4b25      	ldr	r3, [pc, #148]	; (800b778 <USB_CoreInit+0xc0>)
 800b6e2:	4013      	ands	r3, r2
 800b6e4:	687a      	ldr	r2, [r7, #4]
 800b6e6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	68db      	ldr	r3, [r3, #12]
 800b6ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b6f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6f6:	2b01      	cmp	r3, #1
 800b6f8:	d105      	bne.n	800b706 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	68db      	ldr	r3, [r3, #12]
 800b6fe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800b706:	6878      	ldr	r0, [r7, #4]
 800b708:	f001 fabe 	bl	800cc88 <USB_CoreReset>
 800b70c:	4603      	mov	r3, r0
 800b70e:	73fb      	strb	r3, [r7, #15]
 800b710:	e01a      	b.n	800b748 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	68db      	ldr	r3, [r3, #12]
 800b716:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800b71e:	6878      	ldr	r0, [r7, #4]
 800b720:	f001 fab2 	bl	800cc88 <USB_CoreReset>
 800b724:	4603      	mov	r3, r0
 800b726:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b728:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d106      	bne.n	800b73c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b732:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	639a      	str	r2, [r3, #56]	; 0x38
 800b73a:	e005      	b.n	800b748 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b740:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b74a:	2b01      	cmp	r3, #1
 800b74c:	d10b      	bne.n	800b766 <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	689b      	ldr	r3, [r3, #8]
 800b752:	f043 0206 	orr.w	r2, r3, #6
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	689b      	ldr	r3, [r3, #8]
 800b75e:	f043 0220 	orr.w	r2, r3, #32
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b766:	7bfb      	ldrb	r3, [r7, #15]
}
 800b768:	4618      	mov	r0, r3
 800b76a:	3710      	adds	r7, #16
 800b76c:	46bd      	mov	sp, r7
 800b76e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b772:	b004      	add	sp, #16
 800b774:	4770      	bx	lr
 800b776:	bf00      	nop
 800b778:	ffbdffbf 	.word	0xffbdffbf

0800b77c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b77c:	b480      	push	{r7}
 800b77e:	b087      	sub	sp, #28
 800b780:	af00      	add	r7, sp, #0
 800b782:	60f8      	str	r0, [r7, #12]
 800b784:	60b9      	str	r1, [r7, #8]
 800b786:	4613      	mov	r3, r2
 800b788:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b78a:	79fb      	ldrb	r3, [r7, #7]
 800b78c:	2b02      	cmp	r3, #2
 800b78e:	d165      	bne.n	800b85c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b790:	68bb      	ldr	r3, [r7, #8]
 800b792:	4a41      	ldr	r2, [pc, #260]	; (800b898 <USB_SetTurnaroundTime+0x11c>)
 800b794:	4293      	cmp	r3, r2
 800b796:	d906      	bls.n	800b7a6 <USB_SetTurnaroundTime+0x2a>
 800b798:	68bb      	ldr	r3, [r7, #8]
 800b79a:	4a40      	ldr	r2, [pc, #256]	; (800b89c <USB_SetTurnaroundTime+0x120>)
 800b79c:	4293      	cmp	r3, r2
 800b79e:	d802      	bhi.n	800b7a6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b7a0:	230f      	movs	r3, #15
 800b7a2:	617b      	str	r3, [r7, #20]
 800b7a4:	e062      	b.n	800b86c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b7a6:	68bb      	ldr	r3, [r7, #8]
 800b7a8:	4a3c      	ldr	r2, [pc, #240]	; (800b89c <USB_SetTurnaroundTime+0x120>)
 800b7aa:	4293      	cmp	r3, r2
 800b7ac:	d906      	bls.n	800b7bc <USB_SetTurnaroundTime+0x40>
 800b7ae:	68bb      	ldr	r3, [r7, #8]
 800b7b0:	4a3b      	ldr	r2, [pc, #236]	; (800b8a0 <USB_SetTurnaroundTime+0x124>)
 800b7b2:	4293      	cmp	r3, r2
 800b7b4:	d802      	bhi.n	800b7bc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b7b6:	230e      	movs	r3, #14
 800b7b8:	617b      	str	r3, [r7, #20]
 800b7ba:	e057      	b.n	800b86c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b7bc:	68bb      	ldr	r3, [r7, #8]
 800b7be:	4a38      	ldr	r2, [pc, #224]	; (800b8a0 <USB_SetTurnaroundTime+0x124>)
 800b7c0:	4293      	cmp	r3, r2
 800b7c2:	d906      	bls.n	800b7d2 <USB_SetTurnaroundTime+0x56>
 800b7c4:	68bb      	ldr	r3, [r7, #8]
 800b7c6:	4a37      	ldr	r2, [pc, #220]	; (800b8a4 <USB_SetTurnaroundTime+0x128>)
 800b7c8:	4293      	cmp	r3, r2
 800b7ca:	d802      	bhi.n	800b7d2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b7cc:	230d      	movs	r3, #13
 800b7ce:	617b      	str	r3, [r7, #20]
 800b7d0:	e04c      	b.n	800b86c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b7d2:	68bb      	ldr	r3, [r7, #8]
 800b7d4:	4a33      	ldr	r2, [pc, #204]	; (800b8a4 <USB_SetTurnaroundTime+0x128>)
 800b7d6:	4293      	cmp	r3, r2
 800b7d8:	d906      	bls.n	800b7e8 <USB_SetTurnaroundTime+0x6c>
 800b7da:	68bb      	ldr	r3, [r7, #8]
 800b7dc:	4a32      	ldr	r2, [pc, #200]	; (800b8a8 <USB_SetTurnaroundTime+0x12c>)
 800b7de:	4293      	cmp	r3, r2
 800b7e0:	d802      	bhi.n	800b7e8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b7e2:	230c      	movs	r3, #12
 800b7e4:	617b      	str	r3, [r7, #20]
 800b7e6:	e041      	b.n	800b86c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b7e8:	68bb      	ldr	r3, [r7, #8]
 800b7ea:	4a2f      	ldr	r2, [pc, #188]	; (800b8a8 <USB_SetTurnaroundTime+0x12c>)
 800b7ec:	4293      	cmp	r3, r2
 800b7ee:	d906      	bls.n	800b7fe <USB_SetTurnaroundTime+0x82>
 800b7f0:	68bb      	ldr	r3, [r7, #8]
 800b7f2:	4a2e      	ldr	r2, [pc, #184]	; (800b8ac <USB_SetTurnaroundTime+0x130>)
 800b7f4:	4293      	cmp	r3, r2
 800b7f6:	d802      	bhi.n	800b7fe <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b7f8:	230b      	movs	r3, #11
 800b7fa:	617b      	str	r3, [r7, #20]
 800b7fc:	e036      	b.n	800b86c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b7fe:	68bb      	ldr	r3, [r7, #8]
 800b800:	4a2a      	ldr	r2, [pc, #168]	; (800b8ac <USB_SetTurnaroundTime+0x130>)
 800b802:	4293      	cmp	r3, r2
 800b804:	d906      	bls.n	800b814 <USB_SetTurnaroundTime+0x98>
 800b806:	68bb      	ldr	r3, [r7, #8]
 800b808:	4a29      	ldr	r2, [pc, #164]	; (800b8b0 <USB_SetTurnaroundTime+0x134>)
 800b80a:	4293      	cmp	r3, r2
 800b80c:	d802      	bhi.n	800b814 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b80e:	230a      	movs	r3, #10
 800b810:	617b      	str	r3, [r7, #20]
 800b812:	e02b      	b.n	800b86c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b814:	68bb      	ldr	r3, [r7, #8]
 800b816:	4a26      	ldr	r2, [pc, #152]	; (800b8b0 <USB_SetTurnaroundTime+0x134>)
 800b818:	4293      	cmp	r3, r2
 800b81a:	d906      	bls.n	800b82a <USB_SetTurnaroundTime+0xae>
 800b81c:	68bb      	ldr	r3, [r7, #8]
 800b81e:	4a25      	ldr	r2, [pc, #148]	; (800b8b4 <USB_SetTurnaroundTime+0x138>)
 800b820:	4293      	cmp	r3, r2
 800b822:	d802      	bhi.n	800b82a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b824:	2309      	movs	r3, #9
 800b826:	617b      	str	r3, [r7, #20]
 800b828:	e020      	b.n	800b86c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b82a:	68bb      	ldr	r3, [r7, #8]
 800b82c:	4a21      	ldr	r2, [pc, #132]	; (800b8b4 <USB_SetTurnaroundTime+0x138>)
 800b82e:	4293      	cmp	r3, r2
 800b830:	d906      	bls.n	800b840 <USB_SetTurnaroundTime+0xc4>
 800b832:	68bb      	ldr	r3, [r7, #8]
 800b834:	4a20      	ldr	r2, [pc, #128]	; (800b8b8 <USB_SetTurnaroundTime+0x13c>)
 800b836:	4293      	cmp	r3, r2
 800b838:	d802      	bhi.n	800b840 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b83a:	2308      	movs	r3, #8
 800b83c:	617b      	str	r3, [r7, #20]
 800b83e:	e015      	b.n	800b86c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b840:	68bb      	ldr	r3, [r7, #8]
 800b842:	4a1d      	ldr	r2, [pc, #116]	; (800b8b8 <USB_SetTurnaroundTime+0x13c>)
 800b844:	4293      	cmp	r3, r2
 800b846:	d906      	bls.n	800b856 <USB_SetTurnaroundTime+0xda>
 800b848:	68bb      	ldr	r3, [r7, #8]
 800b84a:	4a1c      	ldr	r2, [pc, #112]	; (800b8bc <USB_SetTurnaroundTime+0x140>)
 800b84c:	4293      	cmp	r3, r2
 800b84e:	d802      	bhi.n	800b856 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b850:	2307      	movs	r3, #7
 800b852:	617b      	str	r3, [r7, #20]
 800b854:	e00a      	b.n	800b86c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b856:	2306      	movs	r3, #6
 800b858:	617b      	str	r3, [r7, #20]
 800b85a:	e007      	b.n	800b86c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b85c:	79fb      	ldrb	r3, [r7, #7]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d102      	bne.n	800b868 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b862:	2309      	movs	r3, #9
 800b864:	617b      	str	r3, [r7, #20]
 800b866:	e001      	b.n	800b86c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b868:	2309      	movs	r3, #9
 800b86a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	68db      	ldr	r3, [r3, #12]
 800b870:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	68da      	ldr	r2, [r3, #12]
 800b87c:	697b      	ldr	r3, [r7, #20]
 800b87e:	029b      	lsls	r3, r3, #10
 800b880:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800b884:	431a      	orrs	r2, r3
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b88a:	2300      	movs	r3, #0
}
 800b88c:	4618      	mov	r0, r3
 800b88e:	371c      	adds	r7, #28
 800b890:	46bd      	mov	sp, r7
 800b892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b896:	4770      	bx	lr
 800b898:	00d8acbf 	.word	0x00d8acbf
 800b89c:	00e4e1bf 	.word	0x00e4e1bf
 800b8a0:	00f423ff 	.word	0x00f423ff
 800b8a4:	0106737f 	.word	0x0106737f
 800b8a8:	011a499f 	.word	0x011a499f
 800b8ac:	01312cff 	.word	0x01312cff
 800b8b0:	014ca43f 	.word	0x014ca43f
 800b8b4:	016e35ff 	.word	0x016e35ff
 800b8b8:	01a6ab1f 	.word	0x01a6ab1f
 800b8bc:	01e847ff 	.word	0x01e847ff

0800b8c0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b8c0:	b480      	push	{r7}
 800b8c2:	b083      	sub	sp, #12
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	689b      	ldr	r3, [r3, #8]
 800b8cc:	f043 0201 	orr.w	r2, r3, #1
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b8d4:	2300      	movs	r3, #0
}
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	370c      	adds	r7, #12
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e0:	4770      	bx	lr

0800b8e2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b8e2:	b480      	push	{r7}
 800b8e4:	b083      	sub	sp, #12
 800b8e6:	af00      	add	r7, sp, #0
 800b8e8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	689b      	ldr	r3, [r3, #8]
 800b8ee:	f023 0201 	bic.w	r2, r3, #1
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b8f6:	2300      	movs	r3, #0
}
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	370c      	adds	r7, #12
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b902:	4770      	bx	lr

0800b904 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b082      	sub	sp, #8
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
 800b90c:	460b      	mov	r3, r1
 800b90e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	68db      	ldr	r3, [r3, #12]
 800b914:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b91c:	78fb      	ldrb	r3, [r7, #3]
 800b91e:	2b01      	cmp	r3, #1
 800b920:	d106      	bne.n	800b930 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	68db      	ldr	r3, [r3, #12]
 800b926:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	60da      	str	r2, [r3, #12]
 800b92e:	e00b      	b.n	800b948 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800b930:	78fb      	ldrb	r3, [r7, #3]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d106      	bne.n	800b944 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	68db      	ldr	r3, [r3, #12]
 800b93a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	60da      	str	r2, [r3, #12]
 800b942:	e001      	b.n	800b948 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800b944:	2301      	movs	r3, #1
 800b946:	e003      	b.n	800b950 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800b948:	2032      	movs	r0, #50	; 0x32
 800b94a:	f7f5 ff4f 	bl	80017ec <HAL_Delay>

  return HAL_OK;
 800b94e:	2300      	movs	r3, #0
}
 800b950:	4618      	mov	r0, r3
 800b952:	3708      	adds	r7, #8
 800b954:	46bd      	mov	sp, r7
 800b956:	bd80      	pop	{r7, pc}

0800b958 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b958:	b084      	sub	sp, #16
 800b95a:	b580      	push	{r7, lr}
 800b95c:	b086      	sub	sp, #24
 800b95e:	af00      	add	r7, sp, #0
 800b960:	6078      	str	r0, [r7, #4]
 800b962:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b966:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b96a:	2300      	movs	r3, #0
 800b96c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b972:	2300      	movs	r3, #0
 800b974:	613b      	str	r3, [r7, #16]
 800b976:	e009      	b.n	800b98c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b978:	687a      	ldr	r2, [r7, #4]
 800b97a:	693b      	ldr	r3, [r7, #16]
 800b97c:	3340      	adds	r3, #64	; 0x40
 800b97e:	009b      	lsls	r3, r3, #2
 800b980:	4413      	add	r3, r2
 800b982:	2200      	movs	r2, #0
 800b984:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b986:	693b      	ldr	r3, [r7, #16]
 800b988:	3301      	adds	r3, #1
 800b98a:	613b      	str	r3, [r7, #16]
 800b98c:	693b      	ldr	r3, [r7, #16]
 800b98e:	2b0e      	cmp	r3, #14
 800b990:	d9f2      	bls.n	800b978 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b992:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b994:	2b00      	cmp	r3, #0
 800b996:	d11c      	bne.n	800b9d2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b99e:	685b      	ldr	r3, [r3, #4]
 800b9a0:	68fa      	ldr	r2, [r7, #12]
 800b9a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b9a6:	f043 0302 	orr.w	r3, r3, #2
 800b9aa:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9b0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	601a      	str	r2, [r3, #0]
 800b9d0:	e005      	b.n	800b9de <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9d6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b9e4:	461a      	mov	r2, r3
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9f0:	4619      	mov	r1, r3
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9f8:	461a      	mov	r2, r3
 800b9fa:	680b      	ldr	r3, [r1, #0]
 800b9fc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b9fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba00:	2b01      	cmp	r3, #1
 800ba02:	d10c      	bne.n	800ba1e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ba04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d104      	bne.n	800ba14 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ba0a:	2100      	movs	r1, #0
 800ba0c:	6878      	ldr	r0, [r7, #4]
 800ba0e:	f000 f949 	bl	800bca4 <USB_SetDevSpeed>
 800ba12:	e008      	b.n	800ba26 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ba14:	2101      	movs	r1, #1
 800ba16:	6878      	ldr	r0, [r7, #4]
 800ba18:	f000 f944 	bl	800bca4 <USB_SetDevSpeed>
 800ba1c:	e003      	b.n	800ba26 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ba1e:	2103      	movs	r1, #3
 800ba20:	6878      	ldr	r0, [r7, #4]
 800ba22:	f000 f93f 	bl	800bca4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ba26:	2110      	movs	r1, #16
 800ba28:	6878      	ldr	r0, [r7, #4]
 800ba2a:	f000 f8f3 	bl	800bc14 <USB_FlushTxFifo>
 800ba2e:	4603      	mov	r3, r0
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d001      	beq.n	800ba38 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800ba34:	2301      	movs	r3, #1
 800ba36:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ba38:	6878      	ldr	r0, [r7, #4]
 800ba3a:	f000 f911 	bl	800bc60 <USB_FlushRxFifo>
 800ba3e:	4603      	mov	r3, r0
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d001      	beq.n	800ba48 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800ba44:	2301      	movs	r3, #1
 800ba46:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba4e:	461a      	mov	r2, r3
 800ba50:	2300      	movs	r3, #0
 800ba52:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba5a:	461a      	mov	r2, r3
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba66:	461a      	mov	r2, r3
 800ba68:	2300      	movs	r3, #0
 800ba6a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	613b      	str	r3, [r7, #16]
 800ba70:	e043      	b.n	800bafa <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ba72:	693b      	ldr	r3, [r7, #16]
 800ba74:	015a      	lsls	r2, r3, #5
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	4413      	add	r3, r2
 800ba7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ba84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ba88:	d118      	bne.n	800babc <USB_DevInit+0x164>
    {
      if (i == 0U)
 800ba8a:	693b      	ldr	r3, [r7, #16]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d10a      	bne.n	800baa6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ba90:	693b      	ldr	r3, [r7, #16]
 800ba92:	015a      	lsls	r2, r3, #5
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	4413      	add	r3, r2
 800ba98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba9c:	461a      	mov	r2, r3
 800ba9e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800baa2:	6013      	str	r3, [r2, #0]
 800baa4:	e013      	b.n	800bace <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800baa6:	693b      	ldr	r3, [r7, #16]
 800baa8:	015a      	lsls	r2, r3, #5
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	4413      	add	r3, r2
 800baae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bab2:	461a      	mov	r2, r3
 800bab4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bab8:	6013      	str	r3, [r2, #0]
 800baba:	e008      	b.n	800bace <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800babc:	693b      	ldr	r3, [r7, #16]
 800babe:	015a      	lsls	r2, r3, #5
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	4413      	add	r3, r2
 800bac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bac8:	461a      	mov	r2, r3
 800baca:	2300      	movs	r3, #0
 800bacc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800bace:	693b      	ldr	r3, [r7, #16]
 800bad0:	015a      	lsls	r2, r3, #5
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	4413      	add	r3, r2
 800bad6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bada:	461a      	mov	r2, r3
 800badc:	2300      	movs	r3, #0
 800bade:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800bae0:	693b      	ldr	r3, [r7, #16]
 800bae2:	015a      	lsls	r2, r3, #5
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	4413      	add	r3, r2
 800bae8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800baec:	461a      	mov	r2, r3
 800baee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800baf2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800baf4:	693b      	ldr	r3, [r7, #16]
 800baf6:	3301      	adds	r3, #1
 800baf8:	613b      	str	r3, [r7, #16]
 800bafa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bafc:	693a      	ldr	r2, [r7, #16]
 800bafe:	429a      	cmp	r2, r3
 800bb00:	d3b7      	bcc.n	800ba72 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bb02:	2300      	movs	r3, #0
 800bb04:	613b      	str	r3, [r7, #16]
 800bb06:	e043      	b.n	800bb90 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bb08:	693b      	ldr	r3, [r7, #16]
 800bb0a:	015a      	lsls	r2, r3, #5
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	4413      	add	r3, r2
 800bb10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bb1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bb1e:	d118      	bne.n	800bb52 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800bb20:	693b      	ldr	r3, [r7, #16]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d10a      	bne.n	800bb3c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800bb26:	693b      	ldr	r3, [r7, #16]
 800bb28:	015a      	lsls	r2, r3, #5
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	4413      	add	r3, r2
 800bb2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb32:	461a      	mov	r2, r3
 800bb34:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bb38:	6013      	str	r3, [r2, #0]
 800bb3a:	e013      	b.n	800bb64 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800bb3c:	693b      	ldr	r3, [r7, #16]
 800bb3e:	015a      	lsls	r2, r3, #5
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	4413      	add	r3, r2
 800bb44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb48:	461a      	mov	r2, r3
 800bb4a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bb4e:	6013      	str	r3, [r2, #0]
 800bb50:	e008      	b.n	800bb64 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800bb52:	693b      	ldr	r3, [r7, #16]
 800bb54:	015a      	lsls	r2, r3, #5
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	4413      	add	r3, r2
 800bb5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb5e:	461a      	mov	r2, r3
 800bb60:	2300      	movs	r3, #0
 800bb62:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800bb64:	693b      	ldr	r3, [r7, #16]
 800bb66:	015a      	lsls	r2, r3, #5
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	4413      	add	r3, r2
 800bb6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb70:	461a      	mov	r2, r3
 800bb72:	2300      	movs	r3, #0
 800bb74:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800bb76:	693b      	ldr	r3, [r7, #16]
 800bb78:	015a      	lsls	r2, r3, #5
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	4413      	add	r3, r2
 800bb7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb82:	461a      	mov	r2, r3
 800bb84:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bb88:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bb8a:	693b      	ldr	r3, [r7, #16]
 800bb8c:	3301      	adds	r3, #1
 800bb8e:	613b      	str	r3, [r7, #16]
 800bb90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb92:	693a      	ldr	r2, [r7, #16]
 800bb94:	429a      	cmp	r2, r3
 800bb96:	d3b7      	bcc.n	800bb08 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb9e:	691b      	ldr	r3, [r3, #16]
 800bba0:	68fa      	ldr	r2, [r7, #12]
 800bba2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bba6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bbaa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	2200      	movs	r2, #0
 800bbb0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800bbb8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800bbba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d105      	bne.n	800bbcc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	699b      	ldr	r3, [r3, #24]
 800bbc4:	f043 0210 	orr.w	r2, r3, #16
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	699a      	ldr	r2, [r3, #24]
 800bbd0:	4b0e      	ldr	r3, [pc, #56]	; (800bc0c <USB_DevInit+0x2b4>)
 800bbd2:	4313      	orrs	r3, r2
 800bbd4:	687a      	ldr	r2, [r7, #4]
 800bbd6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800bbd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d005      	beq.n	800bbea <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	699b      	ldr	r3, [r3, #24]
 800bbe2:	f043 0208 	orr.w	r2, r3, #8
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800bbea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbec:	2b01      	cmp	r3, #1
 800bbee:	d105      	bne.n	800bbfc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	699a      	ldr	r2, [r3, #24]
 800bbf4:	4b06      	ldr	r3, [pc, #24]	; (800bc10 <USB_DevInit+0x2b8>)
 800bbf6:	4313      	orrs	r3, r2
 800bbf8:	687a      	ldr	r2, [r7, #4]
 800bbfa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800bbfc:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbfe:	4618      	mov	r0, r3
 800bc00:	3718      	adds	r7, #24
 800bc02:	46bd      	mov	sp, r7
 800bc04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bc08:	b004      	add	sp, #16
 800bc0a:	4770      	bx	lr
 800bc0c:	803c3800 	.word	0x803c3800
 800bc10:	40000004 	.word	0x40000004

0800bc14 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800bc14:	b480      	push	{r7}
 800bc16:	b085      	sub	sp, #20
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
 800bc1c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800bc1e:	2300      	movs	r3, #0
 800bc20:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bc22:	683b      	ldr	r3, [r7, #0]
 800bc24:	019b      	lsls	r3, r3, #6
 800bc26:	f043 0220 	orr.w	r2, r3, #32
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	3301      	adds	r3, #1
 800bc32:	60fb      	str	r3, [r7, #12]
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	4a09      	ldr	r2, [pc, #36]	; (800bc5c <USB_FlushTxFifo+0x48>)
 800bc38:	4293      	cmp	r3, r2
 800bc3a:	d901      	bls.n	800bc40 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800bc3c:	2303      	movs	r3, #3
 800bc3e:	e006      	b.n	800bc4e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	691b      	ldr	r3, [r3, #16]
 800bc44:	f003 0320 	and.w	r3, r3, #32
 800bc48:	2b20      	cmp	r3, #32
 800bc4a:	d0f0      	beq.n	800bc2e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800bc4c:	2300      	movs	r3, #0
}
 800bc4e:	4618      	mov	r0, r3
 800bc50:	3714      	adds	r7, #20
 800bc52:	46bd      	mov	sp, r7
 800bc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc58:	4770      	bx	lr
 800bc5a:	bf00      	nop
 800bc5c:	00030d40 	.word	0x00030d40

0800bc60 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bc60:	b480      	push	{r7}
 800bc62:	b085      	sub	sp, #20
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800bc68:	2300      	movs	r3, #0
 800bc6a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2210      	movs	r2, #16
 800bc70:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	3301      	adds	r3, #1
 800bc76:	60fb      	str	r3, [r7, #12]
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	4a09      	ldr	r2, [pc, #36]	; (800bca0 <USB_FlushRxFifo+0x40>)
 800bc7c:	4293      	cmp	r3, r2
 800bc7e:	d901      	bls.n	800bc84 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800bc80:	2303      	movs	r3, #3
 800bc82:	e006      	b.n	800bc92 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	691b      	ldr	r3, [r3, #16]
 800bc88:	f003 0310 	and.w	r3, r3, #16
 800bc8c:	2b10      	cmp	r3, #16
 800bc8e:	d0f0      	beq.n	800bc72 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800bc90:	2300      	movs	r3, #0
}
 800bc92:	4618      	mov	r0, r3
 800bc94:	3714      	adds	r7, #20
 800bc96:	46bd      	mov	sp, r7
 800bc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9c:	4770      	bx	lr
 800bc9e:	bf00      	nop
 800bca0:	00030d40 	.word	0x00030d40

0800bca4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800bca4:	b480      	push	{r7}
 800bca6:	b085      	sub	sp, #20
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
 800bcac:	460b      	mov	r3, r1
 800bcae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bcba:	681a      	ldr	r2, [r3, #0]
 800bcbc:	78fb      	ldrb	r3, [r7, #3]
 800bcbe:	68f9      	ldr	r1, [r7, #12]
 800bcc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bcc4:	4313      	orrs	r3, r2
 800bcc6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800bcc8:	2300      	movs	r3, #0
}
 800bcca:	4618      	mov	r0, r3
 800bccc:	3714      	adds	r7, #20
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd4:	4770      	bx	lr

0800bcd6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800bcd6:	b480      	push	{r7}
 800bcd8:	b087      	sub	sp, #28
 800bcda:	af00      	add	r7, sp, #0
 800bcdc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800bce2:	693b      	ldr	r3, [r7, #16]
 800bce4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bce8:	689b      	ldr	r3, [r3, #8]
 800bcea:	f003 0306 	and.w	r3, r3, #6
 800bcee:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d102      	bne.n	800bcfc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	75fb      	strb	r3, [r7, #23]
 800bcfa:	e00a      	b.n	800bd12 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	2b02      	cmp	r3, #2
 800bd00:	d002      	beq.n	800bd08 <USB_GetDevSpeed+0x32>
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	2b06      	cmp	r3, #6
 800bd06:	d102      	bne.n	800bd0e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800bd08:	2302      	movs	r3, #2
 800bd0a:	75fb      	strb	r3, [r7, #23]
 800bd0c:	e001      	b.n	800bd12 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800bd0e:	230f      	movs	r3, #15
 800bd10:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800bd12:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd14:	4618      	mov	r0, r3
 800bd16:	371c      	adds	r7, #28
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1e:	4770      	bx	lr

0800bd20 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bd20:	b480      	push	{r7}
 800bd22:	b085      	sub	sp, #20
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
 800bd28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	781b      	ldrb	r3, [r3, #0]
 800bd32:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bd34:	683b      	ldr	r3, [r7, #0]
 800bd36:	785b      	ldrb	r3, [r3, #1]
 800bd38:	2b01      	cmp	r3, #1
 800bd3a:	d139      	bne.n	800bdb0 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd42:	69da      	ldr	r2, [r3, #28]
 800bd44:	683b      	ldr	r3, [r7, #0]
 800bd46:	781b      	ldrb	r3, [r3, #0]
 800bd48:	f003 030f 	and.w	r3, r3, #15
 800bd4c:	2101      	movs	r1, #1
 800bd4e:	fa01 f303 	lsl.w	r3, r1, r3
 800bd52:	b29b      	uxth	r3, r3
 800bd54:	68f9      	ldr	r1, [r7, #12]
 800bd56:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bd5a:	4313      	orrs	r3, r2
 800bd5c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800bd5e:	68bb      	ldr	r3, [r7, #8]
 800bd60:	015a      	lsls	r2, r3, #5
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	4413      	add	r3, r2
 800bd66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d153      	bne.n	800be1c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bd74:	68bb      	ldr	r3, [r7, #8]
 800bd76:	015a      	lsls	r2, r3, #5
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	4413      	add	r3, r2
 800bd7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd80:	681a      	ldr	r2, [r3, #0]
 800bd82:	683b      	ldr	r3, [r7, #0]
 800bd84:	689b      	ldr	r3, [r3, #8]
 800bd86:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bd8a:	683b      	ldr	r3, [r7, #0]
 800bd8c:	78db      	ldrb	r3, [r3, #3]
 800bd8e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bd90:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bd92:	68bb      	ldr	r3, [r7, #8]
 800bd94:	059b      	lsls	r3, r3, #22
 800bd96:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bd98:	431a      	orrs	r2, r3
 800bd9a:	68bb      	ldr	r3, [r7, #8]
 800bd9c:	0159      	lsls	r1, r3, #5
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	440b      	add	r3, r1
 800bda2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bda6:	4619      	mov	r1, r3
 800bda8:	4b20      	ldr	r3, [pc, #128]	; (800be2c <USB_ActivateEndpoint+0x10c>)
 800bdaa:	4313      	orrs	r3, r2
 800bdac:	600b      	str	r3, [r1, #0]
 800bdae:	e035      	b.n	800be1c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bdb6:	69da      	ldr	r2, [r3, #28]
 800bdb8:	683b      	ldr	r3, [r7, #0]
 800bdba:	781b      	ldrb	r3, [r3, #0]
 800bdbc:	f003 030f 	and.w	r3, r3, #15
 800bdc0:	2101      	movs	r1, #1
 800bdc2:	fa01 f303 	lsl.w	r3, r1, r3
 800bdc6:	041b      	lsls	r3, r3, #16
 800bdc8:	68f9      	ldr	r1, [r7, #12]
 800bdca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bdce:	4313      	orrs	r3, r2
 800bdd0:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800bdd2:	68bb      	ldr	r3, [r7, #8]
 800bdd4:	015a      	lsls	r2, r3, #5
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	4413      	add	r3, r2
 800bdda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d119      	bne.n	800be1c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bde8:	68bb      	ldr	r3, [r7, #8]
 800bdea:	015a      	lsls	r2, r3, #5
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	4413      	add	r3, r2
 800bdf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdf4:	681a      	ldr	r2, [r3, #0]
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	689b      	ldr	r3, [r3, #8]
 800bdfa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800bdfe:	683b      	ldr	r3, [r7, #0]
 800be00:	78db      	ldrb	r3, [r3, #3]
 800be02:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800be04:	430b      	orrs	r3, r1
 800be06:	431a      	orrs	r2, r3
 800be08:	68bb      	ldr	r3, [r7, #8]
 800be0a:	0159      	lsls	r1, r3, #5
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	440b      	add	r3, r1
 800be10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be14:	4619      	mov	r1, r3
 800be16:	4b05      	ldr	r3, [pc, #20]	; (800be2c <USB_ActivateEndpoint+0x10c>)
 800be18:	4313      	orrs	r3, r2
 800be1a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800be1c:	2300      	movs	r3, #0
}
 800be1e:	4618      	mov	r0, r3
 800be20:	3714      	adds	r7, #20
 800be22:	46bd      	mov	sp, r7
 800be24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be28:	4770      	bx	lr
 800be2a:	bf00      	nop
 800be2c:	10008000 	.word	0x10008000

0800be30 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800be30:	b480      	push	{r7}
 800be32:	b085      	sub	sp, #20
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
 800be38:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	781b      	ldrb	r3, [r3, #0]
 800be42:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800be44:	683b      	ldr	r3, [r7, #0]
 800be46:	785b      	ldrb	r3, [r3, #1]
 800be48:	2b01      	cmp	r3, #1
 800be4a:	d161      	bne.n	800bf10 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800be4c:	68bb      	ldr	r3, [r7, #8]
 800be4e:	015a      	lsls	r2, r3, #5
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	4413      	add	r3, r2
 800be54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800be5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800be62:	d11f      	bne.n	800bea4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800be64:	68bb      	ldr	r3, [r7, #8]
 800be66:	015a      	lsls	r2, r3, #5
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	4413      	add	r3, r2
 800be6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	68ba      	ldr	r2, [r7, #8]
 800be74:	0151      	lsls	r1, r2, #5
 800be76:	68fa      	ldr	r2, [r7, #12]
 800be78:	440a      	add	r2, r1
 800be7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be7e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800be82:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800be84:	68bb      	ldr	r3, [r7, #8]
 800be86:	015a      	lsls	r2, r3, #5
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	4413      	add	r3, r2
 800be8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	68ba      	ldr	r2, [r7, #8]
 800be94:	0151      	lsls	r1, r2, #5
 800be96:	68fa      	ldr	r2, [r7, #12]
 800be98:	440a      	add	r2, r1
 800be9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be9e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bea2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800beaa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800beac:	683b      	ldr	r3, [r7, #0]
 800beae:	781b      	ldrb	r3, [r3, #0]
 800beb0:	f003 030f 	and.w	r3, r3, #15
 800beb4:	2101      	movs	r1, #1
 800beb6:	fa01 f303 	lsl.w	r3, r1, r3
 800beba:	b29b      	uxth	r3, r3
 800bebc:	43db      	mvns	r3, r3
 800bebe:	68f9      	ldr	r1, [r7, #12]
 800bec0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bec4:	4013      	ands	r3, r2
 800bec6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bece:	69da      	ldr	r2, [r3, #28]
 800bed0:	683b      	ldr	r3, [r7, #0]
 800bed2:	781b      	ldrb	r3, [r3, #0]
 800bed4:	f003 030f 	and.w	r3, r3, #15
 800bed8:	2101      	movs	r1, #1
 800beda:	fa01 f303 	lsl.w	r3, r1, r3
 800bede:	b29b      	uxth	r3, r3
 800bee0:	43db      	mvns	r3, r3
 800bee2:	68f9      	ldr	r1, [r7, #12]
 800bee4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bee8:	4013      	ands	r3, r2
 800beea:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800beec:	68bb      	ldr	r3, [r7, #8]
 800beee:	015a      	lsls	r2, r3, #5
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	4413      	add	r3, r2
 800bef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bef8:	681a      	ldr	r2, [r3, #0]
 800befa:	68bb      	ldr	r3, [r7, #8]
 800befc:	0159      	lsls	r1, r3, #5
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	440b      	add	r3, r1
 800bf02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf06:	4619      	mov	r1, r3
 800bf08:	4b35      	ldr	r3, [pc, #212]	; (800bfe0 <USB_DeactivateEndpoint+0x1b0>)
 800bf0a:	4013      	ands	r3, r2
 800bf0c:	600b      	str	r3, [r1, #0]
 800bf0e:	e060      	b.n	800bfd2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bf10:	68bb      	ldr	r3, [r7, #8]
 800bf12:	015a      	lsls	r2, r3, #5
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	4413      	add	r3, r2
 800bf18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bf22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bf26:	d11f      	bne.n	800bf68 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800bf28:	68bb      	ldr	r3, [r7, #8]
 800bf2a:	015a      	lsls	r2, r3, #5
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	4413      	add	r3, r2
 800bf30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	68ba      	ldr	r2, [r7, #8]
 800bf38:	0151      	lsls	r1, r2, #5
 800bf3a:	68fa      	ldr	r2, [r7, #12]
 800bf3c:	440a      	add	r2, r1
 800bf3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bf42:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bf46:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800bf48:	68bb      	ldr	r3, [r7, #8]
 800bf4a:	015a      	lsls	r2, r3, #5
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	4413      	add	r3, r2
 800bf50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	68ba      	ldr	r2, [r7, #8]
 800bf58:	0151      	lsls	r1, r2, #5
 800bf5a:	68fa      	ldr	r2, [r7, #12]
 800bf5c:	440a      	add	r2, r1
 800bf5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bf62:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bf66:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	781b      	ldrb	r3, [r3, #0]
 800bf74:	f003 030f 	and.w	r3, r3, #15
 800bf78:	2101      	movs	r1, #1
 800bf7a:	fa01 f303 	lsl.w	r3, r1, r3
 800bf7e:	041b      	lsls	r3, r3, #16
 800bf80:	43db      	mvns	r3, r3
 800bf82:	68f9      	ldr	r1, [r7, #12]
 800bf84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bf88:	4013      	ands	r3, r2
 800bf8a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf92:	69da      	ldr	r2, [r3, #28]
 800bf94:	683b      	ldr	r3, [r7, #0]
 800bf96:	781b      	ldrb	r3, [r3, #0]
 800bf98:	f003 030f 	and.w	r3, r3, #15
 800bf9c:	2101      	movs	r1, #1
 800bf9e:	fa01 f303 	lsl.w	r3, r1, r3
 800bfa2:	041b      	lsls	r3, r3, #16
 800bfa4:	43db      	mvns	r3, r3
 800bfa6:	68f9      	ldr	r1, [r7, #12]
 800bfa8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bfac:	4013      	ands	r3, r2
 800bfae:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800bfb0:	68bb      	ldr	r3, [r7, #8]
 800bfb2:	015a      	lsls	r2, r3, #5
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	4413      	add	r3, r2
 800bfb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfbc:	681a      	ldr	r2, [r3, #0]
 800bfbe:	68bb      	ldr	r3, [r7, #8]
 800bfc0:	0159      	lsls	r1, r3, #5
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	440b      	add	r3, r1
 800bfc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfca:	4619      	mov	r1, r3
 800bfcc:	4b05      	ldr	r3, [pc, #20]	; (800bfe4 <USB_DeactivateEndpoint+0x1b4>)
 800bfce:	4013      	ands	r3, r2
 800bfd0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800bfd2:	2300      	movs	r3, #0
}
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	3714      	adds	r7, #20
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfde:	4770      	bx	lr
 800bfe0:	ec337800 	.word	0xec337800
 800bfe4:	eff37800 	.word	0xeff37800

0800bfe8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b08a      	sub	sp, #40	; 0x28
 800bfec:	af02      	add	r7, sp, #8
 800bfee:	60f8      	str	r0, [r7, #12]
 800bff0:	60b9      	str	r1, [r7, #8]
 800bff2:	4613      	mov	r3, r2
 800bff4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800bffa:	68bb      	ldr	r3, [r7, #8]
 800bffc:	781b      	ldrb	r3, [r3, #0]
 800bffe:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c000:	68bb      	ldr	r3, [r7, #8]
 800c002:	785b      	ldrb	r3, [r3, #1]
 800c004:	2b01      	cmp	r3, #1
 800c006:	f040 8163 	bne.w	800c2d0 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c00a:	68bb      	ldr	r3, [r7, #8]
 800c00c:	695b      	ldr	r3, [r3, #20]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d132      	bne.n	800c078 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c012:	69bb      	ldr	r3, [r7, #24]
 800c014:	015a      	lsls	r2, r3, #5
 800c016:	69fb      	ldr	r3, [r7, #28]
 800c018:	4413      	add	r3, r2
 800c01a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c01e:	691a      	ldr	r2, [r3, #16]
 800c020:	69bb      	ldr	r3, [r7, #24]
 800c022:	0159      	lsls	r1, r3, #5
 800c024:	69fb      	ldr	r3, [r7, #28]
 800c026:	440b      	add	r3, r1
 800c028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c02c:	4619      	mov	r1, r3
 800c02e:	4ba5      	ldr	r3, [pc, #660]	; (800c2c4 <USB_EPStartXfer+0x2dc>)
 800c030:	4013      	ands	r3, r2
 800c032:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c034:	69bb      	ldr	r3, [r7, #24]
 800c036:	015a      	lsls	r2, r3, #5
 800c038:	69fb      	ldr	r3, [r7, #28]
 800c03a:	4413      	add	r3, r2
 800c03c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c040:	691b      	ldr	r3, [r3, #16]
 800c042:	69ba      	ldr	r2, [r7, #24]
 800c044:	0151      	lsls	r1, r2, #5
 800c046:	69fa      	ldr	r2, [r7, #28]
 800c048:	440a      	add	r2, r1
 800c04a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c04e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c052:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c054:	69bb      	ldr	r3, [r7, #24]
 800c056:	015a      	lsls	r2, r3, #5
 800c058:	69fb      	ldr	r3, [r7, #28]
 800c05a:	4413      	add	r3, r2
 800c05c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c060:	691a      	ldr	r2, [r3, #16]
 800c062:	69bb      	ldr	r3, [r7, #24]
 800c064:	0159      	lsls	r1, r3, #5
 800c066:	69fb      	ldr	r3, [r7, #28]
 800c068:	440b      	add	r3, r1
 800c06a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c06e:	4619      	mov	r1, r3
 800c070:	4b95      	ldr	r3, [pc, #596]	; (800c2c8 <USB_EPStartXfer+0x2e0>)
 800c072:	4013      	ands	r3, r2
 800c074:	610b      	str	r3, [r1, #16]
 800c076:	e074      	b.n	800c162 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c078:	69bb      	ldr	r3, [r7, #24]
 800c07a:	015a      	lsls	r2, r3, #5
 800c07c:	69fb      	ldr	r3, [r7, #28]
 800c07e:	4413      	add	r3, r2
 800c080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c084:	691a      	ldr	r2, [r3, #16]
 800c086:	69bb      	ldr	r3, [r7, #24]
 800c088:	0159      	lsls	r1, r3, #5
 800c08a:	69fb      	ldr	r3, [r7, #28]
 800c08c:	440b      	add	r3, r1
 800c08e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c092:	4619      	mov	r1, r3
 800c094:	4b8c      	ldr	r3, [pc, #560]	; (800c2c8 <USB_EPStartXfer+0x2e0>)
 800c096:	4013      	ands	r3, r2
 800c098:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c09a:	69bb      	ldr	r3, [r7, #24]
 800c09c:	015a      	lsls	r2, r3, #5
 800c09e:	69fb      	ldr	r3, [r7, #28]
 800c0a0:	4413      	add	r3, r2
 800c0a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0a6:	691a      	ldr	r2, [r3, #16]
 800c0a8:	69bb      	ldr	r3, [r7, #24]
 800c0aa:	0159      	lsls	r1, r3, #5
 800c0ac:	69fb      	ldr	r3, [r7, #28]
 800c0ae:	440b      	add	r3, r1
 800c0b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0b4:	4619      	mov	r1, r3
 800c0b6:	4b83      	ldr	r3, [pc, #524]	; (800c2c4 <USB_EPStartXfer+0x2dc>)
 800c0b8:	4013      	ands	r3, r2
 800c0ba:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800c0bc:	69bb      	ldr	r3, [r7, #24]
 800c0be:	015a      	lsls	r2, r3, #5
 800c0c0:	69fb      	ldr	r3, [r7, #28]
 800c0c2:	4413      	add	r3, r2
 800c0c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0c8:	691a      	ldr	r2, [r3, #16]
 800c0ca:	68bb      	ldr	r3, [r7, #8]
 800c0cc:	6959      	ldr	r1, [r3, #20]
 800c0ce:	68bb      	ldr	r3, [r7, #8]
 800c0d0:	689b      	ldr	r3, [r3, #8]
 800c0d2:	440b      	add	r3, r1
 800c0d4:	1e59      	subs	r1, r3, #1
 800c0d6:	68bb      	ldr	r3, [r7, #8]
 800c0d8:	689b      	ldr	r3, [r3, #8]
 800c0da:	fbb1 f3f3 	udiv	r3, r1, r3
 800c0de:	04d9      	lsls	r1, r3, #19
 800c0e0:	4b7a      	ldr	r3, [pc, #488]	; (800c2cc <USB_EPStartXfer+0x2e4>)
 800c0e2:	400b      	ands	r3, r1
 800c0e4:	69b9      	ldr	r1, [r7, #24]
 800c0e6:	0148      	lsls	r0, r1, #5
 800c0e8:	69f9      	ldr	r1, [r7, #28]
 800c0ea:	4401      	add	r1, r0
 800c0ec:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c0f0:	4313      	orrs	r3, r2
 800c0f2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c0f4:	69bb      	ldr	r3, [r7, #24]
 800c0f6:	015a      	lsls	r2, r3, #5
 800c0f8:	69fb      	ldr	r3, [r7, #28]
 800c0fa:	4413      	add	r3, r2
 800c0fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c100:	691a      	ldr	r2, [r3, #16]
 800c102:	68bb      	ldr	r3, [r7, #8]
 800c104:	695b      	ldr	r3, [r3, #20]
 800c106:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c10a:	69b9      	ldr	r1, [r7, #24]
 800c10c:	0148      	lsls	r0, r1, #5
 800c10e:	69f9      	ldr	r1, [r7, #28]
 800c110:	4401      	add	r1, r0
 800c112:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c116:	4313      	orrs	r3, r2
 800c118:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800c11a:	68bb      	ldr	r3, [r7, #8]
 800c11c:	78db      	ldrb	r3, [r3, #3]
 800c11e:	2b01      	cmp	r3, #1
 800c120:	d11f      	bne.n	800c162 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c122:	69bb      	ldr	r3, [r7, #24]
 800c124:	015a      	lsls	r2, r3, #5
 800c126:	69fb      	ldr	r3, [r7, #28]
 800c128:	4413      	add	r3, r2
 800c12a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c12e:	691b      	ldr	r3, [r3, #16]
 800c130:	69ba      	ldr	r2, [r7, #24]
 800c132:	0151      	lsls	r1, r2, #5
 800c134:	69fa      	ldr	r2, [r7, #28]
 800c136:	440a      	add	r2, r1
 800c138:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c13c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800c140:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800c142:	69bb      	ldr	r3, [r7, #24]
 800c144:	015a      	lsls	r2, r3, #5
 800c146:	69fb      	ldr	r3, [r7, #28]
 800c148:	4413      	add	r3, r2
 800c14a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c14e:	691b      	ldr	r3, [r3, #16]
 800c150:	69ba      	ldr	r2, [r7, #24]
 800c152:	0151      	lsls	r1, r2, #5
 800c154:	69fa      	ldr	r2, [r7, #28]
 800c156:	440a      	add	r2, r1
 800c158:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c15c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c160:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800c162:	79fb      	ldrb	r3, [r7, #7]
 800c164:	2b01      	cmp	r3, #1
 800c166:	d14b      	bne.n	800c200 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c168:	68bb      	ldr	r3, [r7, #8]
 800c16a:	691b      	ldr	r3, [r3, #16]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d009      	beq.n	800c184 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c170:	69bb      	ldr	r3, [r7, #24]
 800c172:	015a      	lsls	r2, r3, #5
 800c174:	69fb      	ldr	r3, [r7, #28]
 800c176:	4413      	add	r3, r2
 800c178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c17c:	461a      	mov	r2, r3
 800c17e:	68bb      	ldr	r3, [r7, #8]
 800c180:	691b      	ldr	r3, [r3, #16]
 800c182:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800c184:	68bb      	ldr	r3, [r7, #8]
 800c186:	78db      	ldrb	r3, [r3, #3]
 800c188:	2b01      	cmp	r3, #1
 800c18a:	d128      	bne.n	800c1de <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c18c:	69fb      	ldr	r3, [r7, #28]
 800c18e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c192:	689b      	ldr	r3, [r3, #8]
 800c194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d110      	bne.n	800c1be <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c19c:	69bb      	ldr	r3, [r7, #24]
 800c19e:	015a      	lsls	r2, r3, #5
 800c1a0:	69fb      	ldr	r3, [r7, #28]
 800c1a2:	4413      	add	r3, r2
 800c1a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	69ba      	ldr	r2, [r7, #24]
 800c1ac:	0151      	lsls	r1, r2, #5
 800c1ae:	69fa      	ldr	r2, [r7, #28]
 800c1b0:	440a      	add	r2, r1
 800c1b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c1b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c1ba:	6013      	str	r3, [r2, #0]
 800c1bc:	e00f      	b.n	800c1de <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c1be:	69bb      	ldr	r3, [r7, #24]
 800c1c0:	015a      	lsls	r2, r3, #5
 800c1c2:	69fb      	ldr	r3, [r7, #28]
 800c1c4:	4413      	add	r3, r2
 800c1c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	69ba      	ldr	r2, [r7, #24]
 800c1ce:	0151      	lsls	r1, r2, #5
 800c1d0:	69fa      	ldr	r2, [r7, #28]
 800c1d2:	440a      	add	r2, r1
 800c1d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c1d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c1dc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c1de:	69bb      	ldr	r3, [r7, #24]
 800c1e0:	015a      	lsls	r2, r3, #5
 800c1e2:	69fb      	ldr	r3, [r7, #28]
 800c1e4:	4413      	add	r3, r2
 800c1e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	69ba      	ldr	r2, [r7, #24]
 800c1ee:	0151      	lsls	r1, r2, #5
 800c1f0:	69fa      	ldr	r2, [r7, #28]
 800c1f2:	440a      	add	r2, r1
 800c1f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c1f8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c1fc:	6013      	str	r3, [r2, #0]
 800c1fe:	e133      	b.n	800c468 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c200:	69bb      	ldr	r3, [r7, #24]
 800c202:	015a      	lsls	r2, r3, #5
 800c204:	69fb      	ldr	r3, [r7, #28]
 800c206:	4413      	add	r3, r2
 800c208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	69ba      	ldr	r2, [r7, #24]
 800c210:	0151      	lsls	r1, r2, #5
 800c212:	69fa      	ldr	r2, [r7, #28]
 800c214:	440a      	add	r2, r1
 800c216:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c21a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c21e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c220:	68bb      	ldr	r3, [r7, #8]
 800c222:	78db      	ldrb	r3, [r3, #3]
 800c224:	2b01      	cmp	r3, #1
 800c226:	d015      	beq.n	800c254 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800c228:	68bb      	ldr	r3, [r7, #8]
 800c22a:	695b      	ldr	r3, [r3, #20]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	f000 811b 	beq.w	800c468 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c232:	69fb      	ldr	r3, [r7, #28]
 800c234:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c238:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c23a:	68bb      	ldr	r3, [r7, #8]
 800c23c:	781b      	ldrb	r3, [r3, #0]
 800c23e:	f003 030f 	and.w	r3, r3, #15
 800c242:	2101      	movs	r1, #1
 800c244:	fa01 f303 	lsl.w	r3, r1, r3
 800c248:	69f9      	ldr	r1, [r7, #28]
 800c24a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c24e:	4313      	orrs	r3, r2
 800c250:	634b      	str	r3, [r1, #52]	; 0x34
 800c252:	e109      	b.n	800c468 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c254:	69fb      	ldr	r3, [r7, #28]
 800c256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c25a:	689b      	ldr	r3, [r3, #8]
 800c25c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c260:	2b00      	cmp	r3, #0
 800c262:	d110      	bne.n	800c286 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c264:	69bb      	ldr	r3, [r7, #24]
 800c266:	015a      	lsls	r2, r3, #5
 800c268:	69fb      	ldr	r3, [r7, #28]
 800c26a:	4413      	add	r3, r2
 800c26c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	69ba      	ldr	r2, [r7, #24]
 800c274:	0151      	lsls	r1, r2, #5
 800c276:	69fa      	ldr	r2, [r7, #28]
 800c278:	440a      	add	r2, r1
 800c27a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c27e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c282:	6013      	str	r3, [r2, #0]
 800c284:	e00f      	b.n	800c2a6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c286:	69bb      	ldr	r3, [r7, #24]
 800c288:	015a      	lsls	r2, r3, #5
 800c28a:	69fb      	ldr	r3, [r7, #28]
 800c28c:	4413      	add	r3, r2
 800c28e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	69ba      	ldr	r2, [r7, #24]
 800c296:	0151      	lsls	r1, r2, #5
 800c298:	69fa      	ldr	r2, [r7, #28]
 800c29a:	440a      	add	r2, r1
 800c29c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c2a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c2a4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800c2a6:	68bb      	ldr	r3, [r7, #8]
 800c2a8:	68d9      	ldr	r1, [r3, #12]
 800c2aa:	68bb      	ldr	r3, [r7, #8]
 800c2ac:	781a      	ldrb	r2, [r3, #0]
 800c2ae:	68bb      	ldr	r3, [r7, #8]
 800c2b0:	695b      	ldr	r3, [r3, #20]
 800c2b2:	b298      	uxth	r0, r3
 800c2b4:	79fb      	ldrb	r3, [r7, #7]
 800c2b6:	9300      	str	r3, [sp, #0]
 800c2b8:	4603      	mov	r3, r0
 800c2ba:	68f8      	ldr	r0, [r7, #12]
 800c2bc:	f000 fa38 	bl	800c730 <USB_WritePacket>
 800c2c0:	e0d2      	b.n	800c468 <USB_EPStartXfer+0x480>
 800c2c2:	bf00      	nop
 800c2c4:	e007ffff 	.word	0xe007ffff
 800c2c8:	fff80000 	.word	0xfff80000
 800c2cc:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c2d0:	69bb      	ldr	r3, [r7, #24]
 800c2d2:	015a      	lsls	r2, r3, #5
 800c2d4:	69fb      	ldr	r3, [r7, #28]
 800c2d6:	4413      	add	r3, r2
 800c2d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2dc:	691a      	ldr	r2, [r3, #16]
 800c2de:	69bb      	ldr	r3, [r7, #24]
 800c2e0:	0159      	lsls	r1, r3, #5
 800c2e2:	69fb      	ldr	r3, [r7, #28]
 800c2e4:	440b      	add	r3, r1
 800c2e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2ea:	4619      	mov	r1, r3
 800c2ec:	4b61      	ldr	r3, [pc, #388]	; (800c474 <USB_EPStartXfer+0x48c>)
 800c2ee:	4013      	ands	r3, r2
 800c2f0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c2f2:	69bb      	ldr	r3, [r7, #24]
 800c2f4:	015a      	lsls	r2, r3, #5
 800c2f6:	69fb      	ldr	r3, [r7, #28]
 800c2f8:	4413      	add	r3, r2
 800c2fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2fe:	691a      	ldr	r2, [r3, #16]
 800c300:	69bb      	ldr	r3, [r7, #24]
 800c302:	0159      	lsls	r1, r3, #5
 800c304:	69fb      	ldr	r3, [r7, #28]
 800c306:	440b      	add	r3, r1
 800c308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c30c:	4619      	mov	r1, r3
 800c30e:	4b5a      	ldr	r3, [pc, #360]	; (800c478 <USB_EPStartXfer+0x490>)
 800c310:	4013      	ands	r3, r2
 800c312:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800c314:	68bb      	ldr	r3, [r7, #8]
 800c316:	695b      	ldr	r3, [r3, #20]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d123      	bne.n	800c364 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c31c:	69bb      	ldr	r3, [r7, #24]
 800c31e:	015a      	lsls	r2, r3, #5
 800c320:	69fb      	ldr	r3, [r7, #28]
 800c322:	4413      	add	r3, r2
 800c324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c328:	691a      	ldr	r2, [r3, #16]
 800c32a:	68bb      	ldr	r3, [r7, #8]
 800c32c:	689b      	ldr	r3, [r3, #8]
 800c32e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c332:	69b9      	ldr	r1, [r7, #24]
 800c334:	0148      	lsls	r0, r1, #5
 800c336:	69f9      	ldr	r1, [r7, #28]
 800c338:	4401      	add	r1, r0
 800c33a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c33e:	4313      	orrs	r3, r2
 800c340:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c342:	69bb      	ldr	r3, [r7, #24]
 800c344:	015a      	lsls	r2, r3, #5
 800c346:	69fb      	ldr	r3, [r7, #28]
 800c348:	4413      	add	r3, r2
 800c34a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c34e:	691b      	ldr	r3, [r3, #16]
 800c350:	69ba      	ldr	r2, [r7, #24]
 800c352:	0151      	lsls	r1, r2, #5
 800c354:	69fa      	ldr	r2, [r7, #28]
 800c356:	440a      	add	r2, r1
 800c358:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c35c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c360:	6113      	str	r3, [r2, #16]
 800c362:	e033      	b.n	800c3cc <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c364:	68bb      	ldr	r3, [r7, #8]
 800c366:	695a      	ldr	r2, [r3, #20]
 800c368:	68bb      	ldr	r3, [r7, #8]
 800c36a:	689b      	ldr	r3, [r3, #8]
 800c36c:	4413      	add	r3, r2
 800c36e:	1e5a      	subs	r2, r3, #1
 800c370:	68bb      	ldr	r3, [r7, #8]
 800c372:	689b      	ldr	r3, [r3, #8]
 800c374:	fbb2 f3f3 	udiv	r3, r2, r3
 800c378:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c37a:	69bb      	ldr	r3, [r7, #24]
 800c37c:	015a      	lsls	r2, r3, #5
 800c37e:	69fb      	ldr	r3, [r7, #28]
 800c380:	4413      	add	r3, r2
 800c382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c386:	691a      	ldr	r2, [r3, #16]
 800c388:	8afb      	ldrh	r3, [r7, #22]
 800c38a:	04d9      	lsls	r1, r3, #19
 800c38c:	4b3b      	ldr	r3, [pc, #236]	; (800c47c <USB_EPStartXfer+0x494>)
 800c38e:	400b      	ands	r3, r1
 800c390:	69b9      	ldr	r1, [r7, #24]
 800c392:	0148      	lsls	r0, r1, #5
 800c394:	69f9      	ldr	r1, [r7, #28]
 800c396:	4401      	add	r1, r0
 800c398:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c39c:	4313      	orrs	r3, r2
 800c39e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800c3a0:	69bb      	ldr	r3, [r7, #24]
 800c3a2:	015a      	lsls	r2, r3, #5
 800c3a4:	69fb      	ldr	r3, [r7, #28]
 800c3a6:	4413      	add	r3, r2
 800c3a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3ac:	691a      	ldr	r2, [r3, #16]
 800c3ae:	68bb      	ldr	r3, [r7, #8]
 800c3b0:	689b      	ldr	r3, [r3, #8]
 800c3b2:	8af9      	ldrh	r1, [r7, #22]
 800c3b4:	fb01 f303 	mul.w	r3, r1, r3
 800c3b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c3bc:	69b9      	ldr	r1, [r7, #24]
 800c3be:	0148      	lsls	r0, r1, #5
 800c3c0:	69f9      	ldr	r1, [r7, #28]
 800c3c2:	4401      	add	r1, r0
 800c3c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c3c8:	4313      	orrs	r3, r2
 800c3ca:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c3cc:	79fb      	ldrb	r3, [r7, #7]
 800c3ce:	2b01      	cmp	r3, #1
 800c3d0:	d10d      	bne.n	800c3ee <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c3d2:	68bb      	ldr	r3, [r7, #8]
 800c3d4:	68db      	ldr	r3, [r3, #12]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d009      	beq.n	800c3ee <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c3da:	68bb      	ldr	r3, [r7, #8]
 800c3dc:	68d9      	ldr	r1, [r3, #12]
 800c3de:	69bb      	ldr	r3, [r7, #24]
 800c3e0:	015a      	lsls	r2, r3, #5
 800c3e2:	69fb      	ldr	r3, [r7, #28]
 800c3e4:	4413      	add	r3, r2
 800c3e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3ea:	460a      	mov	r2, r1
 800c3ec:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800c3ee:	68bb      	ldr	r3, [r7, #8]
 800c3f0:	78db      	ldrb	r3, [r3, #3]
 800c3f2:	2b01      	cmp	r3, #1
 800c3f4:	d128      	bne.n	800c448 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c3f6:	69fb      	ldr	r3, [r7, #28]
 800c3f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3fc:	689b      	ldr	r3, [r3, #8]
 800c3fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c402:	2b00      	cmp	r3, #0
 800c404:	d110      	bne.n	800c428 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c406:	69bb      	ldr	r3, [r7, #24]
 800c408:	015a      	lsls	r2, r3, #5
 800c40a:	69fb      	ldr	r3, [r7, #28]
 800c40c:	4413      	add	r3, r2
 800c40e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	69ba      	ldr	r2, [r7, #24]
 800c416:	0151      	lsls	r1, r2, #5
 800c418:	69fa      	ldr	r2, [r7, #28]
 800c41a:	440a      	add	r2, r1
 800c41c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c420:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c424:	6013      	str	r3, [r2, #0]
 800c426:	e00f      	b.n	800c448 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c428:	69bb      	ldr	r3, [r7, #24]
 800c42a:	015a      	lsls	r2, r3, #5
 800c42c:	69fb      	ldr	r3, [r7, #28]
 800c42e:	4413      	add	r3, r2
 800c430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	69ba      	ldr	r2, [r7, #24]
 800c438:	0151      	lsls	r1, r2, #5
 800c43a:	69fa      	ldr	r2, [r7, #28]
 800c43c:	440a      	add	r2, r1
 800c43e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c442:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c446:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c448:	69bb      	ldr	r3, [r7, #24]
 800c44a:	015a      	lsls	r2, r3, #5
 800c44c:	69fb      	ldr	r3, [r7, #28]
 800c44e:	4413      	add	r3, r2
 800c450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	69ba      	ldr	r2, [r7, #24]
 800c458:	0151      	lsls	r1, r2, #5
 800c45a:	69fa      	ldr	r2, [r7, #28]
 800c45c:	440a      	add	r2, r1
 800c45e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c462:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c466:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c468:	2300      	movs	r3, #0
}
 800c46a:	4618      	mov	r0, r3
 800c46c:	3720      	adds	r7, #32
 800c46e:	46bd      	mov	sp, r7
 800c470:	bd80      	pop	{r7, pc}
 800c472:	bf00      	nop
 800c474:	fff80000 	.word	0xfff80000
 800c478:	e007ffff 	.word	0xe007ffff
 800c47c:	1ff80000 	.word	0x1ff80000

0800c480 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c480:	b480      	push	{r7}
 800c482:	b087      	sub	sp, #28
 800c484:	af00      	add	r7, sp, #0
 800c486:	60f8      	str	r0, [r7, #12]
 800c488:	60b9      	str	r1, [r7, #8]
 800c48a:	4613      	mov	r3, r2
 800c48c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800c492:	68bb      	ldr	r3, [r7, #8]
 800c494:	781b      	ldrb	r3, [r3, #0]
 800c496:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c498:	68bb      	ldr	r3, [r7, #8]
 800c49a:	785b      	ldrb	r3, [r3, #1]
 800c49c:	2b01      	cmp	r3, #1
 800c49e:	f040 80cd 	bne.w	800c63c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c4a2:	68bb      	ldr	r3, [r7, #8]
 800c4a4:	695b      	ldr	r3, [r3, #20]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d132      	bne.n	800c510 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c4aa:	693b      	ldr	r3, [r7, #16]
 800c4ac:	015a      	lsls	r2, r3, #5
 800c4ae:	697b      	ldr	r3, [r7, #20]
 800c4b0:	4413      	add	r3, r2
 800c4b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4b6:	691a      	ldr	r2, [r3, #16]
 800c4b8:	693b      	ldr	r3, [r7, #16]
 800c4ba:	0159      	lsls	r1, r3, #5
 800c4bc:	697b      	ldr	r3, [r7, #20]
 800c4be:	440b      	add	r3, r1
 800c4c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4c4:	4619      	mov	r1, r3
 800c4c6:	4b98      	ldr	r3, [pc, #608]	; (800c728 <USB_EP0StartXfer+0x2a8>)
 800c4c8:	4013      	ands	r3, r2
 800c4ca:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c4cc:	693b      	ldr	r3, [r7, #16]
 800c4ce:	015a      	lsls	r2, r3, #5
 800c4d0:	697b      	ldr	r3, [r7, #20]
 800c4d2:	4413      	add	r3, r2
 800c4d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4d8:	691b      	ldr	r3, [r3, #16]
 800c4da:	693a      	ldr	r2, [r7, #16]
 800c4dc:	0151      	lsls	r1, r2, #5
 800c4de:	697a      	ldr	r2, [r7, #20]
 800c4e0:	440a      	add	r2, r1
 800c4e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c4e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c4ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c4ec:	693b      	ldr	r3, [r7, #16]
 800c4ee:	015a      	lsls	r2, r3, #5
 800c4f0:	697b      	ldr	r3, [r7, #20]
 800c4f2:	4413      	add	r3, r2
 800c4f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4f8:	691a      	ldr	r2, [r3, #16]
 800c4fa:	693b      	ldr	r3, [r7, #16]
 800c4fc:	0159      	lsls	r1, r3, #5
 800c4fe:	697b      	ldr	r3, [r7, #20]
 800c500:	440b      	add	r3, r1
 800c502:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c506:	4619      	mov	r1, r3
 800c508:	4b88      	ldr	r3, [pc, #544]	; (800c72c <USB_EP0StartXfer+0x2ac>)
 800c50a:	4013      	ands	r3, r2
 800c50c:	610b      	str	r3, [r1, #16]
 800c50e:	e04e      	b.n	800c5ae <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c510:	693b      	ldr	r3, [r7, #16]
 800c512:	015a      	lsls	r2, r3, #5
 800c514:	697b      	ldr	r3, [r7, #20]
 800c516:	4413      	add	r3, r2
 800c518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c51c:	691a      	ldr	r2, [r3, #16]
 800c51e:	693b      	ldr	r3, [r7, #16]
 800c520:	0159      	lsls	r1, r3, #5
 800c522:	697b      	ldr	r3, [r7, #20]
 800c524:	440b      	add	r3, r1
 800c526:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c52a:	4619      	mov	r1, r3
 800c52c:	4b7f      	ldr	r3, [pc, #508]	; (800c72c <USB_EP0StartXfer+0x2ac>)
 800c52e:	4013      	ands	r3, r2
 800c530:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c532:	693b      	ldr	r3, [r7, #16]
 800c534:	015a      	lsls	r2, r3, #5
 800c536:	697b      	ldr	r3, [r7, #20]
 800c538:	4413      	add	r3, r2
 800c53a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c53e:	691a      	ldr	r2, [r3, #16]
 800c540:	693b      	ldr	r3, [r7, #16]
 800c542:	0159      	lsls	r1, r3, #5
 800c544:	697b      	ldr	r3, [r7, #20]
 800c546:	440b      	add	r3, r1
 800c548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c54c:	4619      	mov	r1, r3
 800c54e:	4b76      	ldr	r3, [pc, #472]	; (800c728 <USB_EP0StartXfer+0x2a8>)
 800c550:	4013      	ands	r3, r2
 800c552:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800c554:	68bb      	ldr	r3, [r7, #8]
 800c556:	695a      	ldr	r2, [r3, #20]
 800c558:	68bb      	ldr	r3, [r7, #8]
 800c55a:	689b      	ldr	r3, [r3, #8]
 800c55c:	429a      	cmp	r2, r3
 800c55e:	d903      	bls.n	800c568 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800c560:	68bb      	ldr	r3, [r7, #8]
 800c562:	689a      	ldr	r2, [r3, #8]
 800c564:	68bb      	ldr	r3, [r7, #8]
 800c566:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c568:	693b      	ldr	r3, [r7, #16]
 800c56a:	015a      	lsls	r2, r3, #5
 800c56c:	697b      	ldr	r3, [r7, #20]
 800c56e:	4413      	add	r3, r2
 800c570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c574:	691b      	ldr	r3, [r3, #16]
 800c576:	693a      	ldr	r2, [r7, #16]
 800c578:	0151      	lsls	r1, r2, #5
 800c57a:	697a      	ldr	r2, [r7, #20]
 800c57c:	440a      	add	r2, r1
 800c57e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c582:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c586:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c588:	693b      	ldr	r3, [r7, #16]
 800c58a:	015a      	lsls	r2, r3, #5
 800c58c:	697b      	ldr	r3, [r7, #20]
 800c58e:	4413      	add	r3, r2
 800c590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c594:	691a      	ldr	r2, [r3, #16]
 800c596:	68bb      	ldr	r3, [r7, #8]
 800c598:	695b      	ldr	r3, [r3, #20]
 800c59a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c59e:	6939      	ldr	r1, [r7, #16]
 800c5a0:	0148      	lsls	r0, r1, #5
 800c5a2:	6979      	ldr	r1, [r7, #20]
 800c5a4:	4401      	add	r1, r0
 800c5a6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c5aa:	4313      	orrs	r3, r2
 800c5ac:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c5ae:	79fb      	ldrb	r3, [r7, #7]
 800c5b0:	2b01      	cmp	r3, #1
 800c5b2:	d11e      	bne.n	800c5f2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c5b4:	68bb      	ldr	r3, [r7, #8]
 800c5b6:	691b      	ldr	r3, [r3, #16]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d009      	beq.n	800c5d0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c5bc:	693b      	ldr	r3, [r7, #16]
 800c5be:	015a      	lsls	r2, r3, #5
 800c5c0:	697b      	ldr	r3, [r7, #20]
 800c5c2:	4413      	add	r3, r2
 800c5c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5c8:	461a      	mov	r2, r3
 800c5ca:	68bb      	ldr	r3, [r7, #8]
 800c5cc:	691b      	ldr	r3, [r3, #16]
 800c5ce:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c5d0:	693b      	ldr	r3, [r7, #16]
 800c5d2:	015a      	lsls	r2, r3, #5
 800c5d4:	697b      	ldr	r3, [r7, #20]
 800c5d6:	4413      	add	r3, r2
 800c5d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	693a      	ldr	r2, [r7, #16]
 800c5e0:	0151      	lsls	r1, r2, #5
 800c5e2:	697a      	ldr	r2, [r7, #20]
 800c5e4:	440a      	add	r2, r1
 800c5e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c5ea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c5ee:	6013      	str	r3, [r2, #0]
 800c5f0:	e092      	b.n	800c718 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c5f2:	693b      	ldr	r3, [r7, #16]
 800c5f4:	015a      	lsls	r2, r3, #5
 800c5f6:	697b      	ldr	r3, [r7, #20]
 800c5f8:	4413      	add	r3, r2
 800c5fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	693a      	ldr	r2, [r7, #16]
 800c602:	0151      	lsls	r1, r2, #5
 800c604:	697a      	ldr	r2, [r7, #20]
 800c606:	440a      	add	r2, r1
 800c608:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c60c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c610:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800c612:	68bb      	ldr	r3, [r7, #8]
 800c614:	695b      	ldr	r3, [r3, #20]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d07e      	beq.n	800c718 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c61a:	697b      	ldr	r3, [r7, #20]
 800c61c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c620:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c622:	68bb      	ldr	r3, [r7, #8]
 800c624:	781b      	ldrb	r3, [r3, #0]
 800c626:	f003 030f 	and.w	r3, r3, #15
 800c62a:	2101      	movs	r1, #1
 800c62c:	fa01 f303 	lsl.w	r3, r1, r3
 800c630:	6979      	ldr	r1, [r7, #20]
 800c632:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c636:	4313      	orrs	r3, r2
 800c638:	634b      	str	r3, [r1, #52]	; 0x34
 800c63a:	e06d      	b.n	800c718 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c63c:	693b      	ldr	r3, [r7, #16]
 800c63e:	015a      	lsls	r2, r3, #5
 800c640:	697b      	ldr	r3, [r7, #20]
 800c642:	4413      	add	r3, r2
 800c644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c648:	691a      	ldr	r2, [r3, #16]
 800c64a:	693b      	ldr	r3, [r7, #16]
 800c64c:	0159      	lsls	r1, r3, #5
 800c64e:	697b      	ldr	r3, [r7, #20]
 800c650:	440b      	add	r3, r1
 800c652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c656:	4619      	mov	r1, r3
 800c658:	4b34      	ldr	r3, [pc, #208]	; (800c72c <USB_EP0StartXfer+0x2ac>)
 800c65a:	4013      	ands	r3, r2
 800c65c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c65e:	693b      	ldr	r3, [r7, #16]
 800c660:	015a      	lsls	r2, r3, #5
 800c662:	697b      	ldr	r3, [r7, #20]
 800c664:	4413      	add	r3, r2
 800c666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c66a:	691a      	ldr	r2, [r3, #16]
 800c66c:	693b      	ldr	r3, [r7, #16]
 800c66e:	0159      	lsls	r1, r3, #5
 800c670:	697b      	ldr	r3, [r7, #20]
 800c672:	440b      	add	r3, r1
 800c674:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c678:	4619      	mov	r1, r3
 800c67a:	4b2b      	ldr	r3, [pc, #172]	; (800c728 <USB_EP0StartXfer+0x2a8>)
 800c67c:	4013      	ands	r3, r2
 800c67e:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800c680:	68bb      	ldr	r3, [r7, #8]
 800c682:	695b      	ldr	r3, [r3, #20]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d003      	beq.n	800c690 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800c688:	68bb      	ldr	r3, [r7, #8]
 800c68a:	689a      	ldr	r2, [r3, #8]
 800c68c:	68bb      	ldr	r3, [r7, #8]
 800c68e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c690:	693b      	ldr	r3, [r7, #16]
 800c692:	015a      	lsls	r2, r3, #5
 800c694:	697b      	ldr	r3, [r7, #20]
 800c696:	4413      	add	r3, r2
 800c698:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c69c:	691b      	ldr	r3, [r3, #16]
 800c69e:	693a      	ldr	r2, [r7, #16]
 800c6a0:	0151      	lsls	r1, r2, #5
 800c6a2:	697a      	ldr	r2, [r7, #20]
 800c6a4:	440a      	add	r2, r1
 800c6a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c6aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c6ae:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800c6b0:	693b      	ldr	r3, [r7, #16]
 800c6b2:	015a      	lsls	r2, r3, #5
 800c6b4:	697b      	ldr	r3, [r7, #20]
 800c6b6:	4413      	add	r3, r2
 800c6b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6bc:	691a      	ldr	r2, [r3, #16]
 800c6be:	68bb      	ldr	r3, [r7, #8]
 800c6c0:	689b      	ldr	r3, [r3, #8]
 800c6c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c6c6:	6939      	ldr	r1, [r7, #16]
 800c6c8:	0148      	lsls	r0, r1, #5
 800c6ca:	6979      	ldr	r1, [r7, #20]
 800c6cc:	4401      	add	r1, r0
 800c6ce:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c6d2:	4313      	orrs	r3, r2
 800c6d4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800c6d6:	79fb      	ldrb	r3, [r7, #7]
 800c6d8:	2b01      	cmp	r3, #1
 800c6da:	d10d      	bne.n	800c6f8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c6dc:	68bb      	ldr	r3, [r7, #8]
 800c6de:	68db      	ldr	r3, [r3, #12]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d009      	beq.n	800c6f8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c6e4:	68bb      	ldr	r3, [r7, #8]
 800c6e6:	68d9      	ldr	r1, [r3, #12]
 800c6e8:	693b      	ldr	r3, [r7, #16]
 800c6ea:	015a      	lsls	r2, r3, #5
 800c6ec:	697b      	ldr	r3, [r7, #20]
 800c6ee:	4413      	add	r3, r2
 800c6f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6f4:	460a      	mov	r2, r1
 800c6f6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c6f8:	693b      	ldr	r3, [r7, #16]
 800c6fa:	015a      	lsls	r2, r3, #5
 800c6fc:	697b      	ldr	r3, [r7, #20]
 800c6fe:	4413      	add	r3, r2
 800c700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	693a      	ldr	r2, [r7, #16]
 800c708:	0151      	lsls	r1, r2, #5
 800c70a:	697a      	ldr	r2, [r7, #20]
 800c70c:	440a      	add	r2, r1
 800c70e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c712:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c716:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c718:	2300      	movs	r3, #0
}
 800c71a:	4618      	mov	r0, r3
 800c71c:	371c      	adds	r7, #28
 800c71e:	46bd      	mov	sp, r7
 800c720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c724:	4770      	bx	lr
 800c726:	bf00      	nop
 800c728:	e007ffff 	.word	0xe007ffff
 800c72c:	fff80000 	.word	0xfff80000

0800c730 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c730:	b480      	push	{r7}
 800c732:	b089      	sub	sp, #36	; 0x24
 800c734:	af00      	add	r7, sp, #0
 800c736:	60f8      	str	r0, [r7, #12]
 800c738:	60b9      	str	r1, [r7, #8]
 800c73a:	4611      	mov	r1, r2
 800c73c:	461a      	mov	r2, r3
 800c73e:	460b      	mov	r3, r1
 800c740:	71fb      	strb	r3, [r7, #7]
 800c742:	4613      	mov	r3, r2
 800c744:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800c74a:	68bb      	ldr	r3, [r7, #8]
 800c74c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800c74e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c752:	2b00      	cmp	r3, #0
 800c754:	d11a      	bne.n	800c78c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c756:	88bb      	ldrh	r3, [r7, #4]
 800c758:	3303      	adds	r3, #3
 800c75a:	089b      	lsrs	r3, r3, #2
 800c75c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c75e:	2300      	movs	r3, #0
 800c760:	61bb      	str	r3, [r7, #24]
 800c762:	e00f      	b.n	800c784 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c764:	79fb      	ldrb	r3, [r7, #7]
 800c766:	031a      	lsls	r2, r3, #12
 800c768:	697b      	ldr	r3, [r7, #20]
 800c76a:	4413      	add	r3, r2
 800c76c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c770:	461a      	mov	r2, r3
 800c772:	69fb      	ldr	r3, [r7, #28]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c778:	69fb      	ldr	r3, [r7, #28]
 800c77a:	3304      	adds	r3, #4
 800c77c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c77e:	69bb      	ldr	r3, [r7, #24]
 800c780:	3301      	adds	r3, #1
 800c782:	61bb      	str	r3, [r7, #24]
 800c784:	69ba      	ldr	r2, [r7, #24]
 800c786:	693b      	ldr	r3, [r7, #16]
 800c788:	429a      	cmp	r2, r3
 800c78a:	d3eb      	bcc.n	800c764 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c78c:	2300      	movs	r3, #0
}
 800c78e:	4618      	mov	r0, r3
 800c790:	3724      	adds	r7, #36	; 0x24
 800c792:	46bd      	mov	sp, r7
 800c794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c798:	4770      	bx	lr

0800c79a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c79a:	b480      	push	{r7}
 800c79c:	b089      	sub	sp, #36	; 0x24
 800c79e:	af00      	add	r7, sp, #0
 800c7a0:	60f8      	str	r0, [r7, #12]
 800c7a2:	60b9      	str	r1, [r7, #8]
 800c7a4:	4613      	mov	r3, r2
 800c7a6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800c7ac:	68bb      	ldr	r3, [r7, #8]
 800c7ae:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800c7b0:	88fb      	ldrh	r3, [r7, #6]
 800c7b2:	3303      	adds	r3, #3
 800c7b4:	089b      	lsrs	r3, r3, #2
 800c7b6:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	61bb      	str	r3, [r7, #24]
 800c7bc:	e00b      	b.n	800c7d6 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c7be:	697b      	ldr	r3, [r7, #20]
 800c7c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c7c4:	681a      	ldr	r2, [r3, #0]
 800c7c6:	69fb      	ldr	r3, [r7, #28]
 800c7c8:	601a      	str	r2, [r3, #0]
    pDest++;
 800c7ca:	69fb      	ldr	r3, [r7, #28]
 800c7cc:	3304      	adds	r3, #4
 800c7ce:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800c7d0:	69bb      	ldr	r3, [r7, #24]
 800c7d2:	3301      	adds	r3, #1
 800c7d4:	61bb      	str	r3, [r7, #24]
 800c7d6:	69ba      	ldr	r2, [r7, #24]
 800c7d8:	693b      	ldr	r3, [r7, #16]
 800c7da:	429a      	cmp	r2, r3
 800c7dc:	d3ef      	bcc.n	800c7be <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800c7de:	69fb      	ldr	r3, [r7, #28]
}
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	3724      	adds	r7, #36	; 0x24
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ea:	4770      	bx	lr

0800c7ec <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c7ec:	b480      	push	{r7}
 800c7ee:	b085      	sub	sp, #20
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
 800c7f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c7fa:	683b      	ldr	r3, [r7, #0]
 800c7fc:	781b      	ldrb	r3, [r3, #0]
 800c7fe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c800:	683b      	ldr	r3, [r7, #0]
 800c802:	785b      	ldrb	r3, [r3, #1]
 800c804:	2b01      	cmp	r3, #1
 800c806:	d12c      	bne.n	800c862 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c808:	68bb      	ldr	r3, [r7, #8]
 800c80a:	015a      	lsls	r2, r3, #5
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	4413      	add	r3, r2
 800c810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	2b00      	cmp	r3, #0
 800c818:	db12      	blt.n	800c840 <USB_EPSetStall+0x54>
 800c81a:	68bb      	ldr	r3, [r7, #8]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d00f      	beq.n	800c840 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c820:	68bb      	ldr	r3, [r7, #8]
 800c822:	015a      	lsls	r2, r3, #5
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	4413      	add	r3, r2
 800c828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	68ba      	ldr	r2, [r7, #8]
 800c830:	0151      	lsls	r1, r2, #5
 800c832:	68fa      	ldr	r2, [r7, #12]
 800c834:	440a      	add	r2, r1
 800c836:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c83a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c83e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c840:	68bb      	ldr	r3, [r7, #8]
 800c842:	015a      	lsls	r2, r3, #5
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	4413      	add	r3, r2
 800c848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	68ba      	ldr	r2, [r7, #8]
 800c850:	0151      	lsls	r1, r2, #5
 800c852:	68fa      	ldr	r2, [r7, #12]
 800c854:	440a      	add	r2, r1
 800c856:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c85a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c85e:	6013      	str	r3, [r2, #0]
 800c860:	e02b      	b.n	800c8ba <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c862:	68bb      	ldr	r3, [r7, #8]
 800c864:	015a      	lsls	r2, r3, #5
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	4413      	add	r3, r2
 800c86a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	2b00      	cmp	r3, #0
 800c872:	db12      	blt.n	800c89a <USB_EPSetStall+0xae>
 800c874:	68bb      	ldr	r3, [r7, #8]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d00f      	beq.n	800c89a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c87a:	68bb      	ldr	r3, [r7, #8]
 800c87c:	015a      	lsls	r2, r3, #5
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	4413      	add	r3, r2
 800c882:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	68ba      	ldr	r2, [r7, #8]
 800c88a:	0151      	lsls	r1, r2, #5
 800c88c:	68fa      	ldr	r2, [r7, #12]
 800c88e:	440a      	add	r2, r1
 800c890:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c894:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c898:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c89a:	68bb      	ldr	r3, [r7, #8]
 800c89c:	015a      	lsls	r2, r3, #5
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	4413      	add	r3, r2
 800c8a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	68ba      	ldr	r2, [r7, #8]
 800c8aa:	0151      	lsls	r1, r2, #5
 800c8ac:	68fa      	ldr	r2, [r7, #12]
 800c8ae:	440a      	add	r2, r1
 800c8b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c8b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c8b8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c8ba:	2300      	movs	r3, #0
}
 800c8bc:	4618      	mov	r0, r3
 800c8be:	3714      	adds	r7, #20
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c6:	4770      	bx	lr

0800c8c8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c8c8:	b480      	push	{r7}
 800c8ca:	b085      	sub	sp, #20
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
 800c8d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c8d6:	683b      	ldr	r3, [r7, #0]
 800c8d8:	781b      	ldrb	r3, [r3, #0]
 800c8da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c8dc:	683b      	ldr	r3, [r7, #0]
 800c8de:	785b      	ldrb	r3, [r3, #1]
 800c8e0:	2b01      	cmp	r3, #1
 800c8e2:	d128      	bne.n	800c936 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c8e4:	68bb      	ldr	r3, [r7, #8]
 800c8e6:	015a      	lsls	r2, r3, #5
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	4413      	add	r3, r2
 800c8ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	68ba      	ldr	r2, [r7, #8]
 800c8f4:	0151      	lsls	r1, r2, #5
 800c8f6:	68fa      	ldr	r2, [r7, #12]
 800c8f8:	440a      	add	r2, r1
 800c8fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c8fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c902:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c904:	683b      	ldr	r3, [r7, #0]
 800c906:	78db      	ldrb	r3, [r3, #3]
 800c908:	2b03      	cmp	r3, #3
 800c90a:	d003      	beq.n	800c914 <USB_EPClearStall+0x4c>
 800c90c:	683b      	ldr	r3, [r7, #0]
 800c90e:	78db      	ldrb	r3, [r3, #3]
 800c910:	2b02      	cmp	r3, #2
 800c912:	d138      	bne.n	800c986 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c914:	68bb      	ldr	r3, [r7, #8]
 800c916:	015a      	lsls	r2, r3, #5
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	4413      	add	r3, r2
 800c91c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	68ba      	ldr	r2, [r7, #8]
 800c924:	0151      	lsls	r1, r2, #5
 800c926:	68fa      	ldr	r2, [r7, #12]
 800c928:	440a      	add	r2, r1
 800c92a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c92e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c932:	6013      	str	r3, [r2, #0]
 800c934:	e027      	b.n	800c986 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c936:	68bb      	ldr	r3, [r7, #8]
 800c938:	015a      	lsls	r2, r3, #5
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	4413      	add	r3, r2
 800c93e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	68ba      	ldr	r2, [r7, #8]
 800c946:	0151      	lsls	r1, r2, #5
 800c948:	68fa      	ldr	r2, [r7, #12]
 800c94a:	440a      	add	r2, r1
 800c94c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c950:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c954:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c956:	683b      	ldr	r3, [r7, #0]
 800c958:	78db      	ldrb	r3, [r3, #3]
 800c95a:	2b03      	cmp	r3, #3
 800c95c:	d003      	beq.n	800c966 <USB_EPClearStall+0x9e>
 800c95e:	683b      	ldr	r3, [r7, #0]
 800c960:	78db      	ldrb	r3, [r3, #3]
 800c962:	2b02      	cmp	r3, #2
 800c964:	d10f      	bne.n	800c986 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c966:	68bb      	ldr	r3, [r7, #8]
 800c968:	015a      	lsls	r2, r3, #5
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	4413      	add	r3, r2
 800c96e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	68ba      	ldr	r2, [r7, #8]
 800c976:	0151      	lsls	r1, r2, #5
 800c978:	68fa      	ldr	r2, [r7, #12]
 800c97a:	440a      	add	r2, r1
 800c97c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c984:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c986:	2300      	movs	r3, #0
}
 800c988:	4618      	mov	r0, r3
 800c98a:	3714      	adds	r7, #20
 800c98c:	46bd      	mov	sp, r7
 800c98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c992:	4770      	bx	lr

0800c994 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800c994:	b480      	push	{r7}
 800c996:	b085      	sub	sp, #20
 800c998:	af00      	add	r7, sp, #0
 800c99a:	6078      	str	r0, [r7, #4]
 800c99c:	460b      	mov	r3, r1
 800c99e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	68fa      	ldr	r2, [r7, #12]
 800c9ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c9b2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800c9b6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9be:	681a      	ldr	r2, [r3, #0]
 800c9c0:	78fb      	ldrb	r3, [r7, #3]
 800c9c2:	011b      	lsls	r3, r3, #4
 800c9c4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800c9c8:	68f9      	ldr	r1, [r7, #12]
 800c9ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c9ce:	4313      	orrs	r3, r2
 800c9d0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c9d2:	2300      	movs	r3, #0
}
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	3714      	adds	r7, #20
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9de:	4770      	bx	lr

0800c9e0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b084      	sub	sp, #16
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9f2:	685b      	ldr	r3, [r3, #4]
 800c9f4:	68fa      	ldr	r2, [r7, #12]
 800c9f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c9fa:	f023 0302 	bic.w	r3, r3, #2
 800c9fe:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800ca00:	2003      	movs	r0, #3
 800ca02:	f7f4 fef3 	bl	80017ec <HAL_Delay>

  return HAL_OK;
 800ca06:	2300      	movs	r3, #0
}
 800ca08:	4618      	mov	r0, r3
 800ca0a:	3710      	adds	r7, #16
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	bd80      	pop	{r7, pc}

0800ca10 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ca10:	b580      	push	{r7, lr}
 800ca12:	b084      	sub	sp, #16
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca22:	685b      	ldr	r3, [r3, #4]
 800ca24:	68fa      	ldr	r2, [r7, #12]
 800ca26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ca2a:	f043 0302 	orr.w	r3, r3, #2
 800ca2e:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800ca30:	2003      	movs	r0, #3
 800ca32:	f7f4 fedb 	bl	80017ec <HAL_Delay>

  return HAL_OK;
 800ca36:	2300      	movs	r3, #0
}
 800ca38:	4618      	mov	r0, r3
 800ca3a:	3710      	adds	r7, #16
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	bd80      	pop	{r7, pc}

0800ca40 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ca40:	b480      	push	{r7}
 800ca42:	b085      	sub	sp, #20
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	695b      	ldr	r3, [r3, #20]
 800ca4c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	699b      	ldr	r3, [r3, #24]
 800ca52:	68fa      	ldr	r2, [r7, #12]
 800ca54:	4013      	ands	r3, r2
 800ca56:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ca58:	68fb      	ldr	r3, [r7, #12]
}
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	3714      	adds	r7, #20
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca64:	4770      	bx	lr

0800ca66 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ca66:	b480      	push	{r7}
 800ca68:	b085      	sub	sp, #20
 800ca6a:	af00      	add	r7, sp, #0
 800ca6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca78:	699b      	ldr	r3, [r3, #24]
 800ca7a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca82:	69db      	ldr	r3, [r3, #28]
 800ca84:	68ba      	ldr	r2, [r7, #8]
 800ca86:	4013      	ands	r3, r2
 800ca88:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ca8a:	68bb      	ldr	r3, [r7, #8]
 800ca8c:	0c1b      	lsrs	r3, r3, #16
}
 800ca8e:	4618      	mov	r0, r3
 800ca90:	3714      	adds	r7, #20
 800ca92:	46bd      	mov	sp, r7
 800ca94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca98:	4770      	bx	lr

0800ca9a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ca9a:	b480      	push	{r7}
 800ca9c:	b085      	sub	sp, #20
 800ca9e:	af00      	add	r7, sp, #0
 800caa0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800caac:	699b      	ldr	r3, [r3, #24]
 800caae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cab6:	69db      	ldr	r3, [r3, #28]
 800cab8:	68ba      	ldr	r2, [r7, #8]
 800caba:	4013      	ands	r3, r2
 800cabc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800cabe:	68bb      	ldr	r3, [r7, #8]
 800cac0:	b29b      	uxth	r3, r3
}
 800cac2:	4618      	mov	r0, r3
 800cac4:	3714      	adds	r7, #20
 800cac6:	46bd      	mov	sp, r7
 800cac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cacc:	4770      	bx	lr

0800cace <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800cace:	b480      	push	{r7}
 800cad0:	b085      	sub	sp, #20
 800cad2:	af00      	add	r7, sp, #0
 800cad4:	6078      	str	r0, [r7, #4]
 800cad6:	460b      	mov	r3, r1
 800cad8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800cade:	78fb      	ldrb	r3, [r7, #3]
 800cae0:	015a      	lsls	r2, r3, #5
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	4413      	add	r3, r2
 800cae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800caea:	689b      	ldr	r3, [r3, #8]
 800caec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800caf4:	695b      	ldr	r3, [r3, #20]
 800caf6:	68ba      	ldr	r2, [r7, #8]
 800caf8:	4013      	ands	r3, r2
 800cafa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800cafc:	68bb      	ldr	r3, [r7, #8]
}
 800cafe:	4618      	mov	r0, r3
 800cb00:	3714      	adds	r7, #20
 800cb02:	46bd      	mov	sp, r7
 800cb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb08:	4770      	bx	lr

0800cb0a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800cb0a:	b480      	push	{r7}
 800cb0c:	b087      	sub	sp, #28
 800cb0e:	af00      	add	r7, sp, #0
 800cb10:	6078      	str	r0, [r7, #4]
 800cb12:	460b      	mov	r3, r1
 800cb14:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800cb1a:	697b      	ldr	r3, [r7, #20]
 800cb1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb20:	691b      	ldr	r3, [r3, #16]
 800cb22:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800cb24:	697b      	ldr	r3, [r7, #20]
 800cb26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb2c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800cb2e:	78fb      	ldrb	r3, [r7, #3]
 800cb30:	f003 030f 	and.w	r3, r3, #15
 800cb34:	68fa      	ldr	r2, [r7, #12]
 800cb36:	fa22 f303 	lsr.w	r3, r2, r3
 800cb3a:	01db      	lsls	r3, r3, #7
 800cb3c:	b2db      	uxtb	r3, r3
 800cb3e:	693a      	ldr	r2, [r7, #16]
 800cb40:	4313      	orrs	r3, r2
 800cb42:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800cb44:	78fb      	ldrb	r3, [r7, #3]
 800cb46:	015a      	lsls	r2, r3, #5
 800cb48:	697b      	ldr	r3, [r7, #20]
 800cb4a:	4413      	add	r3, r2
 800cb4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb50:	689b      	ldr	r3, [r3, #8]
 800cb52:	693a      	ldr	r2, [r7, #16]
 800cb54:	4013      	ands	r3, r2
 800cb56:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800cb58:	68bb      	ldr	r3, [r7, #8]
}
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	371c      	adds	r7, #28
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb64:	4770      	bx	lr

0800cb66 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800cb66:	b480      	push	{r7}
 800cb68:	b083      	sub	sp, #12
 800cb6a:	af00      	add	r7, sp, #0
 800cb6c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	695b      	ldr	r3, [r3, #20]
 800cb72:	f003 0301 	and.w	r3, r3, #1
}
 800cb76:	4618      	mov	r0, r3
 800cb78:	370c      	adds	r7, #12
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb80:	4770      	bx	lr
	...

0800cb84 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800cb84:	b480      	push	{r7}
 800cb86:	b085      	sub	sp, #20
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb96:	681a      	ldr	r2, [r3, #0]
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb9e:	4619      	mov	r1, r3
 800cba0:	4b09      	ldr	r3, [pc, #36]	; (800cbc8 <USB_ActivateSetup+0x44>)
 800cba2:	4013      	ands	r3, r2
 800cba4:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cbac:	685b      	ldr	r3, [r3, #4]
 800cbae:	68fa      	ldr	r2, [r7, #12]
 800cbb0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cbb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cbb8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cbba:	2300      	movs	r3, #0
}
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	3714      	adds	r7, #20
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc6:	4770      	bx	lr
 800cbc8:	fffff800 	.word	0xfffff800

0800cbcc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800cbcc:	b480      	push	{r7}
 800cbce:	b087      	sub	sp, #28
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	60f8      	str	r0, [r7, #12]
 800cbd4:	460b      	mov	r3, r1
 800cbd6:	607a      	str	r2, [r7, #4]
 800cbd8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	333c      	adds	r3, #60	; 0x3c
 800cbe2:	3304      	adds	r3, #4
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800cbe8:	693b      	ldr	r3, [r7, #16]
 800cbea:	4a26      	ldr	r2, [pc, #152]	; (800cc84 <USB_EP0_OutStart+0xb8>)
 800cbec:	4293      	cmp	r3, r2
 800cbee:	d90a      	bls.n	800cc06 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cbf0:	697b      	ldr	r3, [r7, #20]
 800cbf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cbfc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cc00:	d101      	bne.n	800cc06 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800cc02:	2300      	movs	r3, #0
 800cc04:	e037      	b.n	800cc76 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800cc06:	697b      	ldr	r3, [r7, #20]
 800cc08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc0c:	461a      	mov	r2, r3
 800cc0e:	2300      	movs	r3, #0
 800cc10:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800cc12:	697b      	ldr	r3, [r7, #20]
 800cc14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc18:	691b      	ldr	r3, [r3, #16]
 800cc1a:	697a      	ldr	r2, [r7, #20]
 800cc1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc20:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cc24:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800cc26:	697b      	ldr	r3, [r7, #20]
 800cc28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc2c:	691b      	ldr	r3, [r3, #16]
 800cc2e:	697a      	ldr	r2, [r7, #20]
 800cc30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc34:	f043 0318 	orr.w	r3, r3, #24
 800cc38:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800cc3a:	697b      	ldr	r3, [r7, #20]
 800cc3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc40:	691b      	ldr	r3, [r3, #16]
 800cc42:	697a      	ldr	r2, [r7, #20]
 800cc44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc48:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800cc4c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800cc4e:	7afb      	ldrb	r3, [r7, #11]
 800cc50:	2b01      	cmp	r3, #1
 800cc52:	d10f      	bne.n	800cc74 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800cc54:	697b      	ldr	r3, [r7, #20]
 800cc56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc5a:	461a      	mov	r2, r3
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800cc60:	697b      	ldr	r3, [r7, #20]
 800cc62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	697a      	ldr	r2, [r7, #20]
 800cc6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc6e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800cc72:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cc74:	2300      	movs	r3, #0
}
 800cc76:	4618      	mov	r0, r3
 800cc78:	371c      	adds	r7, #28
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc80:	4770      	bx	lr
 800cc82:	bf00      	nop
 800cc84:	4f54300a 	.word	0x4f54300a

0800cc88 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800cc88:	b480      	push	{r7}
 800cc8a:	b085      	sub	sp, #20
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800cc90:	2300      	movs	r3, #0
 800cc92:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	3301      	adds	r3, #1
 800cc98:	60fb      	str	r3, [r7, #12]
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	4a13      	ldr	r2, [pc, #76]	; (800ccec <USB_CoreReset+0x64>)
 800cc9e:	4293      	cmp	r3, r2
 800cca0:	d901      	bls.n	800cca6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800cca2:	2303      	movs	r3, #3
 800cca4:	e01b      	b.n	800ccde <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	691b      	ldr	r3, [r3, #16]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	daf2      	bge.n	800cc94 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ccae:	2300      	movs	r3, #0
 800ccb0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	691b      	ldr	r3, [r3, #16]
 800ccb6:	f043 0201 	orr.w	r2, r3, #1
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	3301      	adds	r3, #1
 800ccc2:	60fb      	str	r3, [r7, #12]
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	4a09      	ldr	r2, [pc, #36]	; (800ccec <USB_CoreReset+0x64>)
 800ccc8:	4293      	cmp	r3, r2
 800ccca:	d901      	bls.n	800ccd0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800cccc:	2303      	movs	r3, #3
 800ccce:	e006      	b.n	800ccde <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	691b      	ldr	r3, [r3, #16]
 800ccd4:	f003 0301 	and.w	r3, r3, #1
 800ccd8:	2b01      	cmp	r3, #1
 800ccda:	d0f0      	beq.n	800ccbe <USB_CoreReset+0x36>

  return HAL_OK;
 800ccdc:	2300      	movs	r3, #0
}
 800ccde:	4618      	mov	r0, r3
 800cce0:	3714      	adds	r7, #20
 800cce2:	46bd      	mov	sp, r7
 800cce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce8:	4770      	bx	lr
 800ccea:	bf00      	nop
 800ccec:	00030d40 	.word	0x00030d40

0800ccf0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ccf0:	b580      	push	{r7, lr}
 800ccf2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800ccf4:	4904      	ldr	r1, [pc, #16]	; (800cd08 <MX_FATFS_Init+0x18>)
 800ccf6:	4805      	ldr	r0, [pc, #20]	; (800cd0c <MX_FATFS_Init+0x1c>)
 800ccf8:	f005 fb28 	bl	801234c <FATFS_LinkDriver>
 800ccfc:	4603      	mov	r3, r0
 800ccfe:	461a      	mov	r2, r3
 800cd00:	4b03      	ldr	r3, [pc, #12]	; (800cd10 <MX_FATFS_Init+0x20>)
 800cd02:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800cd04:	bf00      	nop
 800cd06:	bd80      	pop	{r7, pc}
 800cd08:	2400ad0c 	.word	0x2400ad0c
 800cd0c:	080137a8 	.word	0x080137a8
 800cd10:	2400ad08 	.word	0x2400ad08

0800cd14 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800cd14:	b480      	push	{r7}
 800cd16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800cd18:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd22:	4770      	bx	lr

0800cd24 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b082      	sub	sp, #8
 800cd28:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800cd2e:	f000 f879 	bl	800ce24 <BSP_SD_IsDetected>
 800cd32:	4603      	mov	r3, r0
 800cd34:	2b01      	cmp	r3, #1
 800cd36:	d001      	beq.n	800cd3c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800cd38:	2302      	movs	r3, #2
 800cd3a:	e012      	b.n	800cd62 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800cd3c:	480b      	ldr	r0, [pc, #44]	; (800cd6c <BSP_SD_Init+0x48>)
 800cd3e:	f7fb f977 	bl	8008030 <HAL_SD_Init>
 800cd42:	4603      	mov	r3, r0
 800cd44:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800cd46:	79fb      	ldrb	r3, [r7, #7]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d109      	bne.n	800cd60 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800cd4c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800cd50:	4806      	ldr	r0, [pc, #24]	; (800cd6c <BSP_SD_Init+0x48>)
 800cd52:	f7fc f83b 	bl	8008dcc <HAL_SD_ConfigWideBusOperation>
 800cd56:	4603      	mov	r3, r0
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d001      	beq.n	800cd60 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800cd5c:	2301      	movs	r3, #1
 800cd5e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800cd60:	79fb      	ldrb	r3, [r7, #7]
}
 800cd62:	4618      	mov	r0, r3
 800cd64:	3708      	adds	r7, #8
 800cd66:	46bd      	mov	sp, r7
 800cd68:	bd80      	pop	{r7, pc}
 800cd6a:	bf00      	nop
 800cd6c:	2400a56c 	.word	0x2400a56c

0800cd70 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b088      	sub	sp, #32
 800cd74:	af02      	add	r7, sp, #8
 800cd76:	60f8      	str	r0, [r7, #12]
 800cd78:	60b9      	str	r1, [r7, #8]
 800cd7a:	607a      	str	r2, [r7, #4]
 800cd7c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800cd7e:	2300      	movs	r3, #0
 800cd80:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800cd82:	683b      	ldr	r3, [r7, #0]
 800cd84:	9300      	str	r3, [sp, #0]
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	68ba      	ldr	r2, [r7, #8]
 800cd8a:	68f9      	ldr	r1, [r7, #12]
 800cd8c:	4806      	ldr	r0, [pc, #24]	; (800cda8 <BSP_SD_ReadBlocks+0x38>)
 800cd8e:	f7fb fa73 	bl	8008278 <HAL_SD_ReadBlocks>
 800cd92:	4603      	mov	r3, r0
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d001      	beq.n	800cd9c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800cd98:	2301      	movs	r3, #1
 800cd9a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800cd9c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd9e:	4618      	mov	r0, r3
 800cda0:	3718      	adds	r7, #24
 800cda2:	46bd      	mov	sp, r7
 800cda4:	bd80      	pop	{r7, pc}
 800cda6:	bf00      	nop
 800cda8:	2400a56c 	.word	0x2400a56c

0800cdac <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800cdac:	b580      	push	{r7, lr}
 800cdae:	b088      	sub	sp, #32
 800cdb0:	af02      	add	r7, sp, #8
 800cdb2:	60f8      	str	r0, [r7, #12]
 800cdb4:	60b9      	str	r1, [r7, #8]
 800cdb6:	607a      	str	r2, [r7, #4]
 800cdb8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800cdba:	2300      	movs	r3, #0
 800cdbc:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800cdbe:	683b      	ldr	r3, [r7, #0]
 800cdc0:	9300      	str	r3, [sp, #0]
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	68ba      	ldr	r2, [r7, #8]
 800cdc6:	68f9      	ldr	r1, [r7, #12]
 800cdc8:	4806      	ldr	r0, [pc, #24]	; (800cde4 <BSP_SD_WriteBlocks+0x38>)
 800cdca:	f7fb fbdf 	bl	800858c <HAL_SD_WriteBlocks>
 800cdce:	4603      	mov	r3, r0
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d001      	beq.n	800cdd8 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800cdd4:	2301      	movs	r3, #1
 800cdd6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800cdd8:	7dfb      	ldrb	r3, [r7, #23]
}
 800cdda:	4618      	mov	r0, r3
 800cddc:	3718      	adds	r7, #24
 800cdde:	46bd      	mov	sp, r7
 800cde0:	bd80      	pop	{r7, pc}
 800cde2:	bf00      	nop
 800cde4:	2400a56c 	.word	0x2400a56c

0800cde8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800cde8:	b580      	push	{r7, lr}
 800cdea:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800cdec:	4805      	ldr	r0, [pc, #20]	; (800ce04 <BSP_SD_GetCardState+0x1c>)
 800cdee:	f7fc f897 	bl	8008f20 <HAL_SD_GetCardState>
 800cdf2:	4603      	mov	r3, r0
 800cdf4:	2b04      	cmp	r3, #4
 800cdf6:	bf14      	ite	ne
 800cdf8:	2301      	movne	r3, #1
 800cdfa:	2300      	moveq	r3, #0
 800cdfc:	b2db      	uxtb	r3, r3
}
 800cdfe:	4618      	mov	r0, r3
 800ce00:	bd80      	pop	{r7, pc}
 800ce02:	bf00      	nop
 800ce04:	2400a56c 	.word	0x2400a56c

0800ce08 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b082      	sub	sp, #8
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800ce10:	6879      	ldr	r1, [r7, #4]
 800ce12:	4803      	ldr	r0, [pc, #12]	; (800ce20 <BSP_SD_GetCardInfo+0x18>)
 800ce14:	f7fb ffae 	bl	8008d74 <HAL_SD_GetCardInfo>
}
 800ce18:	bf00      	nop
 800ce1a:	3708      	adds	r7, #8
 800ce1c:	46bd      	mov	sp, r7
 800ce1e:	bd80      	pop	{r7, pc}
 800ce20:	2400a56c 	.word	0x2400a56c

0800ce24 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800ce24:	b480      	push	{r7}
 800ce26:	b083      	sub	sp, #12
 800ce28:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800ce2a:	2301      	movs	r3, #1
 800ce2c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 800ce2e:	79fb      	ldrb	r3, [r7, #7]
 800ce30:	b2db      	uxtb	r3, r3
}
 800ce32:	4618      	mov	r0, r3
 800ce34:	370c      	adds	r7, #12
 800ce36:	46bd      	mov	sp, r7
 800ce38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce3c:	4770      	bx	lr
	...

0800ce40 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b082      	sub	sp, #8
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	4603      	mov	r3, r0
 800ce48:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800ce4a:	4b0b      	ldr	r3, [pc, #44]	; (800ce78 <SD_CheckStatus+0x38>)
 800ce4c:	2201      	movs	r2, #1
 800ce4e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800ce50:	f7ff ffca 	bl	800cde8 <BSP_SD_GetCardState>
 800ce54:	4603      	mov	r3, r0
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d107      	bne.n	800ce6a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800ce5a:	4b07      	ldr	r3, [pc, #28]	; (800ce78 <SD_CheckStatus+0x38>)
 800ce5c:	781b      	ldrb	r3, [r3, #0]
 800ce5e:	b2db      	uxtb	r3, r3
 800ce60:	f023 0301 	bic.w	r3, r3, #1
 800ce64:	b2da      	uxtb	r2, r3
 800ce66:	4b04      	ldr	r3, [pc, #16]	; (800ce78 <SD_CheckStatus+0x38>)
 800ce68:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800ce6a:	4b03      	ldr	r3, [pc, #12]	; (800ce78 <SD_CheckStatus+0x38>)
 800ce6c:	781b      	ldrb	r3, [r3, #0]
 800ce6e:	b2db      	uxtb	r3, r3
}
 800ce70:	4618      	mov	r0, r3
 800ce72:	3708      	adds	r7, #8
 800ce74:	46bd      	mov	sp, r7
 800ce76:	bd80      	pop	{r7, pc}
 800ce78:	2400000d 	.word	0x2400000d

0800ce7c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b082      	sub	sp, #8
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	4603      	mov	r3, r0
 800ce84:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800ce86:	4b0b      	ldr	r3, [pc, #44]	; (800ceb4 <SD_initialize+0x38>)
 800ce88:	2201      	movs	r2, #1
 800ce8a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800ce8c:	f7ff ff4a 	bl	800cd24 <BSP_SD_Init>
 800ce90:	4603      	mov	r3, r0
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d107      	bne.n	800cea6 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800ce96:	79fb      	ldrb	r3, [r7, #7]
 800ce98:	4618      	mov	r0, r3
 800ce9a:	f7ff ffd1 	bl	800ce40 <SD_CheckStatus>
 800ce9e:	4603      	mov	r3, r0
 800cea0:	461a      	mov	r2, r3
 800cea2:	4b04      	ldr	r3, [pc, #16]	; (800ceb4 <SD_initialize+0x38>)
 800cea4:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800cea6:	4b03      	ldr	r3, [pc, #12]	; (800ceb4 <SD_initialize+0x38>)
 800cea8:	781b      	ldrb	r3, [r3, #0]
 800ceaa:	b2db      	uxtb	r3, r3
}
 800ceac:	4618      	mov	r0, r3
 800ceae:	3708      	adds	r7, #8
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	bd80      	pop	{r7, pc}
 800ceb4:	2400000d 	.word	0x2400000d

0800ceb8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b082      	sub	sp, #8
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	4603      	mov	r3, r0
 800cec0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800cec2:	79fb      	ldrb	r3, [r7, #7]
 800cec4:	4618      	mov	r0, r3
 800cec6:	f7ff ffbb 	bl	800ce40 <SD_CheckStatus>
 800ceca:	4603      	mov	r3, r0
}
 800cecc:	4618      	mov	r0, r3
 800cece:	3708      	adds	r7, #8
 800ced0:	46bd      	mov	sp, r7
 800ced2:	bd80      	pop	{r7, pc}

0800ced4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b086      	sub	sp, #24
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	60b9      	str	r1, [r7, #8]
 800cedc:	607a      	str	r2, [r7, #4]
 800cede:	603b      	str	r3, [r7, #0]
 800cee0:	4603      	mov	r3, r0
 800cee2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800cee4:	2301      	movs	r3, #1
 800cee6:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800cee8:	f04f 33ff 	mov.w	r3, #4294967295
 800ceec:	683a      	ldr	r2, [r7, #0]
 800ceee:	6879      	ldr	r1, [r7, #4]
 800cef0:	68b8      	ldr	r0, [r7, #8]
 800cef2:	f7ff ff3d 	bl	800cd70 <BSP_SD_ReadBlocks>
 800cef6:	4603      	mov	r3, r0
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d107      	bne.n	800cf0c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800cefc:	bf00      	nop
 800cefe:	f7ff ff73 	bl	800cde8 <BSP_SD_GetCardState>
 800cf02:	4603      	mov	r3, r0
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d1fa      	bne.n	800cefe <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800cf08:	2300      	movs	r3, #0
 800cf0a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800cf0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf0e:	4618      	mov	r0, r3
 800cf10:	3718      	adds	r7, #24
 800cf12:	46bd      	mov	sp, r7
 800cf14:	bd80      	pop	{r7, pc}

0800cf16 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800cf16:	b580      	push	{r7, lr}
 800cf18:	b086      	sub	sp, #24
 800cf1a:	af00      	add	r7, sp, #0
 800cf1c:	60b9      	str	r1, [r7, #8]
 800cf1e:	607a      	str	r2, [r7, #4]
 800cf20:	603b      	str	r3, [r7, #0]
 800cf22:	4603      	mov	r3, r0
 800cf24:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800cf26:	2301      	movs	r3, #1
 800cf28:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800cf2a:	f04f 33ff 	mov.w	r3, #4294967295
 800cf2e:	683a      	ldr	r2, [r7, #0]
 800cf30:	6879      	ldr	r1, [r7, #4]
 800cf32:	68b8      	ldr	r0, [r7, #8]
 800cf34:	f7ff ff3a 	bl	800cdac <BSP_SD_WriteBlocks>
 800cf38:	4603      	mov	r3, r0
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d107      	bne.n	800cf4e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800cf3e:	bf00      	nop
 800cf40:	f7ff ff52 	bl	800cde8 <BSP_SD_GetCardState>
 800cf44:	4603      	mov	r3, r0
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d1fa      	bne.n	800cf40 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800cf4e:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf50:	4618      	mov	r0, r3
 800cf52:	3718      	adds	r7, #24
 800cf54:	46bd      	mov	sp, r7
 800cf56:	bd80      	pop	{r7, pc}

0800cf58 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800cf58:	b580      	push	{r7, lr}
 800cf5a:	b08c      	sub	sp, #48	; 0x30
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	4603      	mov	r3, r0
 800cf60:	603a      	str	r2, [r7, #0]
 800cf62:	71fb      	strb	r3, [r7, #7]
 800cf64:	460b      	mov	r3, r1
 800cf66:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800cf68:	2301      	movs	r3, #1
 800cf6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800cf6e:	4b25      	ldr	r3, [pc, #148]	; (800d004 <SD_ioctl+0xac>)
 800cf70:	781b      	ldrb	r3, [r3, #0]
 800cf72:	b2db      	uxtb	r3, r3
 800cf74:	f003 0301 	and.w	r3, r3, #1
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d001      	beq.n	800cf80 <SD_ioctl+0x28>
 800cf7c:	2303      	movs	r3, #3
 800cf7e:	e03c      	b.n	800cffa <SD_ioctl+0xa2>

  switch (cmd)
 800cf80:	79bb      	ldrb	r3, [r7, #6]
 800cf82:	2b03      	cmp	r3, #3
 800cf84:	d834      	bhi.n	800cff0 <SD_ioctl+0x98>
 800cf86:	a201      	add	r2, pc, #4	; (adr r2, 800cf8c <SD_ioctl+0x34>)
 800cf88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf8c:	0800cf9d 	.word	0x0800cf9d
 800cf90:	0800cfa5 	.word	0x0800cfa5
 800cf94:	0800cfbd 	.word	0x0800cfbd
 800cf98:	0800cfd7 	.word	0x0800cfd7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cfa2:	e028      	b.n	800cff6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800cfa4:	f107 0308 	add.w	r3, r7, #8
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	f7ff ff2d 	bl	800ce08 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800cfae:	6a3a      	ldr	r2, [r7, #32]
 800cfb0:	683b      	ldr	r3, [r7, #0]
 800cfb2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cfba:	e01c      	b.n	800cff6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cfbc:	f107 0308 	add.w	r3, r7, #8
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	f7ff ff21 	bl	800ce08 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800cfc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfc8:	b29a      	uxth	r2, r3
 800cfca:	683b      	ldr	r3, [r7, #0]
 800cfcc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800cfce:	2300      	movs	r3, #0
 800cfd0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cfd4:	e00f      	b.n	800cff6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cfd6:	f107 0308 	add.w	r3, r7, #8
 800cfda:	4618      	mov	r0, r3
 800cfdc:	f7ff ff14 	bl	800ce08 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800cfe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfe2:	0a5a      	lsrs	r2, r3, #9
 800cfe4:	683b      	ldr	r3, [r7, #0]
 800cfe6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cfe8:	2300      	movs	r3, #0
 800cfea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cfee:	e002      	b.n	800cff6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800cff0:	2304      	movs	r3, #4
 800cff2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800cff6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800cffa:	4618      	mov	r0, r3
 800cffc:	3730      	adds	r7, #48	; 0x30
 800cffe:	46bd      	mov	sp, r7
 800d000:	bd80      	pop	{r7, pc}
 800d002:	bf00      	nop
 800d004:	2400000d 	.word	0x2400000d

0800d008 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d008:	b580      	push	{r7, lr}
 800d00a:	b084      	sub	sp, #16
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	6078      	str	r0, [r7, #4]
 800d010:	460b      	mov	r3, r1
 800d012:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 800d014:	f248 0074 	movw	r0, #32884	; 0x8074
 800d018:	f005 fed0 	bl	8012dbc <malloc>
 800d01c:	4603      	mov	r3, r0
 800d01e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d105      	bne.n	800d032 <USBD_MSC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	2200      	movs	r2, #0
 800d02a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800d02e:	2302      	movs	r3, #2
 800d030:	e034      	b.n	800d09c <USBD_MSC_Init+0x94>
  }

  pdev->pClassData = (void *)hmsc;
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	68fa      	ldr	r2, [r7, #12]
 800d036:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	7c1b      	ldrb	r3, [r3, #16]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d115      	bne.n	800d06e <USBD_MSC_Init+0x66>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800d042:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d046:	2202      	movs	r2, #2
 800d048:	2101      	movs	r1, #1
 800d04a:	6878      	ldr	r0, [r7, #4]
 800d04c:	f005 fd1d 	bl	8012a8a <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	2201      	movs	r2, #1
 800d054:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800d058:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d05c:	2202      	movs	r2, #2
 800d05e:	2181      	movs	r1, #129	; 0x81
 800d060:	6878      	ldr	r0, [r7, #4]
 800d062:	f005 fd12 	bl	8012a8a <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	2201      	movs	r2, #1
 800d06a:	871a      	strh	r2, [r3, #56]	; 0x38
 800d06c:	e012      	b.n	800d094 <USBD_MSC_Init+0x8c>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800d06e:	2340      	movs	r3, #64	; 0x40
 800d070:	2202      	movs	r2, #2
 800d072:	2101      	movs	r1, #1
 800d074:	6878      	ldr	r0, [r7, #4]
 800d076:	f005 fd08 	bl	8012a8a <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	2201      	movs	r2, #1
 800d07e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800d082:	2340      	movs	r3, #64	; 0x40
 800d084:	2202      	movs	r2, #2
 800d086:	2181      	movs	r1, #129	; 0x81
 800d088:	6878      	ldr	r0, [r7, #4]
 800d08a:	f005 fcfe 	bl	8012a8a <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	2201      	movs	r2, #1
 800d092:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 800d094:	6878      	ldr	r0, [r7, #4]
 800d096:	f000 f98e 	bl	800d3b6 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 800d09a:	2300      	movs	r3, #0
}
 800d09c:	4618      	mov	r0, r3
 800d09e:	3710      	adds	r7, #16
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	bd80      	pop	{r7, pc}

0800d0a4 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d0a4:	b580      	push	{r7, lr}
 800d0a6:	b082      	sub	sp, #8
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	6078      	str	r0, [r7, #4]
 800d0ac:	460b      	mov	r3, r1
 800d0ae:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 800d0b0:	2101      	movs	r1, #1
 800d0b2:	6878      	ldr	r0, [r7, #4]
 800d0b4:	f005 fd0f 	bl	8012ad6 <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	2200      	movs	r2, #0
 800d0bc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 800d0c0:	2181      	movs	r1, #129	; 0x81
 800d0c2:	6878      	ldr	r0, [r7, #4]
 800d0c4:	f005 fd07 	bl	8012ad6 <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	871a      	strh	r2, [r3, #56]	; 0x38

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 800d0ce:	6878      	ldr	r0, [r7, #4]
 800d0d0:	f000 f9cf 	bl	800d472 <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d009      	beq.n	800d0f2 <USBD_MSC_DeInit+0x4e>
  {
    (void)USBD_free(pdev->pClassData);
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d0e4:	4618      	mov	r0, r3
 800d0e6:	f005 fe71 	bl	8012dcc <free>
    pdev->pClassData = NULL;
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d0f2:	2300      	movs	r3, #0
}
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	3708      	adds	r7, #8
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	bd80      	pop	{r7, pc}

0800d0fc <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d0fc:	b580      	push	{r7, lr}
 800d0fe:	b086      	sub	sp, #24
 800d100:	af00      	add	r7, sp, #0
 800d102:	6078      	str	r0, [r7, #4]
 800d104:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d10c:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800d10e:	2300      	movs	r3, #0
 800d110:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 800d112:	2300      	movs	r3, #0
 800d114:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d116:	683b      	ldr	r3, [r7, #0]
 800d118:	781b      	ldrb	r3, [r3, #0]
 800d11a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d04d      	beq.n	800d1be <USBD_MSC_Setup+0xc2>
 800d122:	2b20      	cmp	r3, #32
 800d124:	f040 80c6 	bne.w	800d2b4 <USBD_MSC_Setup+0x1b8>
  {
    /* Class request */
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 800d128:	683b      	ldr	r3, [r7, #0]
 800d12a:	785b      	ldrb	r3, [r3, #1]
 800d12c:	2bfe      	cmp	r3, #254	; 0xfe
 800d12e:	d002      	beq.n	800d136 <USBD_MSC_Setup+0x3a>
 800d130:	2bff      	cmp	r3, #255	; 0xff
 800d132:	d024      	beq.n	800d17e <USBD_MSC_Setup+0x82>
 800d134:	e03b      	b.n	800d1ae <USBD_MSC_Setup+0xb2>
    {
    case BOT_GET_MAX_LUN:
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800d136:	683b      	ldr	r3, [r7, #0]
 800d138:	885b      	ldrh	r3, [r3, #2]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d118      	bne.n	800d170 <USBD_MSC_Setup+0x74>
 800d13e:	683b      	ldr	r3, [r7, #0]
 800d140:	88db      	ldrh	r3, [r3, #6]
 800d142:	2b01      	cmp	r3, #1
 800d144:	d114      	bne.n	800d170 <USBD_MSC_Setup+0x74>
          ((req->bmRequest & 0x80U) == 0x80U))
 800d146:	683b      	ldr	r3, [r7, #0]
 800d148:	781b      	ldrb	r3, [r3, #0]
 800d14a:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	da0f      	bge.n	800d170 <USBD_MSC_Setup+0x74>
      {
        hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d156:	699b      	ldr	r3, [r3, #24]
 800d158:	4798      	blx	r3
 800d15a:	4603      	mov	r3, r0
 800d15c:	461a      	mov	r2, r3
 800d15e:	693b      	ldr	r3, [r7, #16]
 800d160:	601a      	str	r2, [r3, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 800d162:	693b      	ldr	r3, [r7, #16]
 800d164:	2201      	movs	r2, #1
 800d166:	4619      	mov	r1, r3
 800d168:	6878      	ldr	r0, [r7, #4]
 800d16a:	f002 fdaa 	bl	800fcc2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800d16e:	e025      	b.n	800d1bc <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 800d170:	6839      	ldr	r1, [r7, #0]
 800d172:	6878      	ldr	r0, [r7, #4]
 800d174:	f002 fd34 	bl	800fbe0 <USBD_CtlError>
        ret = USBD_FAIL;
 800d178:	2303      	movs	r3, #3
 800d17a:	75fb      	strb	r3, [r7, #23]
      break;
 800d17c:	e01e      	b.n	800d1bc <USBD_MSC_Setup+0xc0>

    case BOT_RESET :
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800d17e:	683b      	ldr	r3, [r7, #0]
 800d180:	885b      	ldrh	r3, [r3, #2]
 800d182:	2b00      	cmp	r3, #0
 800d184:	d10c      	bne.n	800d1a0 <USBD_MSC_Setup+0xa4>
 800d186:	683b      	ldr	r3, [r7, #0]
 800d188:	88db      	ldrh	r3, [r3, #6]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d108      	bne.n	800d1a0 <USBD_MSC_Setup+0xa4>
          ((req->bmRequest & 0x80U) != 0x80U))
 800d18e:	683b      	ldr	r3, [r7, #0]
 800d190:	781b      	ldrb	r3, [r3, #0]
 800d192:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800d194:	2b00      	cmp	r3, #0
 800d196:	db03      	blt.n	800d1a0 <USBD_MSC_Setup+0xa4>
      {
        MSC_BOT_Reset(pdev);
 800d198:	6878      	ldr	r0, [r7, #4]
 800d19a:	f000 f947 	bl	800d42c <MSC_BOT_Reset>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800d19e:	e00d      	b.n	800d1bc <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 800d1a0:	6839      	ldr	r1, [r7, #0]
 800d1a2:	6878      	ldr	r0, [r7, #4]
 800d1a4:	f002 fd1c 	bl	800fbe0 <USBD_CtlError>
        ret = USBD_FAIL;
 800d1a8:	2303      	movs	r3, #3
 800d1aa:	75fb      	strb	r3, [r7, #23]
      break;
 800d1ac:	e006      	b.n	800d1bc <USBD_MSC_Setup+0xc0>

    default:
      USBD_CtlError(pdev, req);
 800d1ae:	6839      	ldr	r1, [r7, #0]
 800d1b0:	6878      	ldr	r0, [r7, #4]
 800d1b2:	f002 fd15 	bl	800fbe0 <USBD_CtlError>
      ret = USBD_FAIL;
 800d1b6:	2303      	movs	r3, #3
 800d1b8:	75fb      	strb	r3, [r7, #23]
      break;
 800d1ba:	bf00      	nop
    }
    break;
 800d1bc:	e081      	b.n	800d2c2 <USBD_MSC_Setup+0x1c6>
    /* Interface & Endpoint request */
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800d1be:	683b      	ldr	r3, [r7, #0]
 800d1c0:	785b      	ldrb	r3, [r3, #1]
 800d1c2:	2b0b      	cmp	r3, #11
 800d1c4:	d86d      	bhi.n	800d2a2 <USBD_MSC_Setup+0x1a6>
 800d1c6:	a201      	add	r2, pc, #4	; (adr r2, 800d1cc <USBD_MSC_Setup+0xd0>)
 800d1c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1cc:	0800d1fd 	.word	0x0800d1fd
 800d1d0:	0800d273 	.word	0x0800d273
 800d1d4:	0800d2a3 	.word	0x0800d2a3
 800d1d8:	0800d2a3 	.word	0x0800d2a3
 800d1dc:	0800d2a3 	.word	0x0800d2a3
 800d1e0:	0800d2a3 	.word	0x0800d2a3
 800d1e4:	0800d2a3 	.word	0x0800d2a3
 800d1e8:	0800d2a3 	.word	0x0800d2a3
 800d1ec:	0800d2a3 	.word	0x0800d2a3
 800d1f0:	0800d2a3 	.word	0x0800d2a3
 800d1f4:	0800d225 	.word	0x0800d225
 800d1f8:	0800d24d 	.word	0x0800d24d
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d202:	2b03      	cmp	r3, #3
 800d204:	d107      	bne.n	800d216 <USBD_MSC_Setup+0x11a>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d206:	f107 030e 	add.w	r3, r7, #14
 800d20a:	2202      	movs	r2, #2
 800d20c:	4619      	mov	r1, r3
 800d20e:	6878      	ldr	r0, [r7, #4]
 800d210:	f002 fd57 	bl	800fcc2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800d214:	e04d      	b.n	800d2b2 <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 800d216:	6839      	ldr	r1, [r7, #0]
 800d218:	6878      	ldr	r0, [r7, #4]
 800d21a:	f002 fce1 	bl	800fbe0 <USBD_CtlError>
        ret = USBD_FAIL;
 800d21e:	2303      	movs	r3, #3
 800d220:	75fb      	strb	r3, [r7, #23]
      break;
 800d222:	e046      	b.n	800d2b2 <USBD_MSC_Setup+0x1b6>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d22a:	2b03      	cmp	r3, #3
 800d22c:	d107      	bne.n	800d23e <USBD_MSC_Setup+0x142>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 800d22e:	693b      	ldr	r3, [r7, #16]
 800d230:	3304      	adds	r3, #4
 800d232:	2201      	movs	r2, #1
 800d234:	4619      	mov	r1, r3
 800d236:	6878      	ldr	r0, [r7, #4]
 800d238:	f002 fd43 	bl	800fcc2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800d23c:	e039      	b.n	800d2b2 <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 800d23e:	6839      	ldr	r1, [r7, #0]
 800d240:	6878      	ldr	r0, [r7, #4]
 800d242:	f002 fccd 	bl	800fbe0 <USBD_CtlError>
        ret = USBD_FAIL;
 800d246:	2303      	movs	r3, #3
 800d248:	75fb      	strb	r3, [r7, #23]
      break;
 800d24a:	e032      	b.n	800d2b2 <USBD_MSC_Setup+0x1b6>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d252:	2b03      	cmp	r3, #3
 800d254:	d106      	bne.n	800d264 <USBD_MSC_Setup+0x168>
      {
        hmsc->interface = (uint8_t)(req->wValue);
 800d256:	683b      	ldr	r3, [r7, #0]
 800d258:	885b      	ldrh	r3, [r3, #2]
 800d25a:	b2db      	uxtb	r3, r3
 800d25c:	461a      	mov	r2, r3
 800d25e:	693b      	ldr	r3, [r7, #16]
 800d260:	605a      	str	r2, [r3, #4]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800d262:	e026      	b.n	800d2b2 <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 800d264:	6839      	ldr	r1, [r7, #0]
 800d266:	6878      	ldr	r0, [r7, #4]
 800d268:	f002 fcba 	bl	800fbe0 <USBD_CtlError>
        ret = USBD_FAIL;
 800d26c:	2303      	movs	r3, #3
 800d26e:	75fb      	strb	r3, [r7, #23]
      break;
 800d270:	e01f      	b.n	800d2b2 <USBD_MSC_Setup+0x1b6>

    case USB_REQ_CLEAR_FEATURE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d278:	2b03      	cmp	r3, #3
 800d27a:	d119      	bne.n	800d2b0 <USBD_MSC_Setup+0x1b4>
      {
        if (req->wValue == USB_FEATURE_EP_HALT)
 800d27c:	683b      	ldr	r3, [r7, #0]
 800d27e:	885b      	ldrh	r3, [r3, #2]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d115      	bne.n	800d2b0 <USBD_MSC_Setup+0x1b4>
        {
          /* Flush the FIFO */
          (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800d284:	683b      	ldr	r3, [r7, #0]
 800d286:	889b      	ldrh	r3, [r3, #4]
 800d288:	b2db      	uxtb	r3, r3
 800d28a:	4619      	mov	r1, r3
 800d28c:	6878      	ldr	r0, [r7, #4]
 800d28e:	f005 fc41 	bl	8012b14 <USBD_LL_FlushEP>

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800d292:	683b      	ldr	r3, [r7, #0]
 800d294:	889b      	ldrh	r3, [r3, #4]
 800d296:	b2db      	uxtb	r3, r3
 800d298:	4619      	mov	r1, r3
 800d29a:	6878      	ldr	r0, [r7, #4]
 800d29c:	f000 fa90 	bl	800d7c0 <MSC_BOT_CplClrFeature>
        }
      }
      break;
 800d2a0:	e006      	b.n	800d2b0 <USBD_MSC_Setup+0x1b4>

    default:
      USBD_CtlError(pdev, req);
 800d2a2:	6839      	ldr	r1, [r7, #0]
 800d2a4:	6878      	ldr	r0, [r7, #4]
 800d2a6:	f002 fc9b 	bl	800fbe0 <USBD_CtlError>
      ret = USBD_FAIL;
 800d2aa:	2303      	movs	r3, #3
 800d2ac:	75fb      	strb	r3, [r7, #23]
      break;
 800d2ae:	e000      	b.n	800d2b2 <USBD_MSC_Setup+0x1b6>
      break;
 800d2b0:	bf00      	nop
    }
    break;
 800d2b2:	e006      	b.n	800d2c2 <USBD_MSC_Setup+0x1c6>

  default:
    USBD_CtlError(pdev, req);
 800d2b4:	6839      	ldr	r1, [r7, #0]
 800d2b6:	6878      	ldr	r0, [r7, #4]
 800d2b8:	f002 fc92 	bl	800fbe0 <USBD_CtlError>
    ret = USBD_FAIL;
 800d2bc:	2303      	movs	r3, #3
 800d2be:	75fb      	strb	r3, [r7, #23]
    break;
 800d2c0:	bf00      	nop
  }

  return (uint8_t)ret;
 800d2c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	3718      	adds	r7, #24
 800d2c8:	46bd      	mov	sp, r7
 800d2ca:	bd80      	pop	{r7, pc}

0800d2cc <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d2cc:	b580      	push	{r7, lr}
 800d2ce:	b082      	sub	sp, #8
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	6078      	str	r0, [r7, #4]
 800d2d4:	460b      	mov	r3, r1
 800d2d6:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 800d2d8:	78fb      	ldrb	r3, [r7, #3]
 800d2da:	4619      	mov	r1, r3
 800d2dc:	6878      	ldr	r0, [r7, #4]
 800d2de:	f000 f8d9 	bl	800d494 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 800d2e2:	2300      	movs	r3, #0
}
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	3708      	adds	r7, #8
 800d2e8:	46bd      	mov	sp, r7
 800d2ea:	bd80      	pop	{r7, pc}

0800d2ec <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d2ec:	b580      	push	{r7, lr}
 800d2ee:	b082      	sub	sp, #8
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	6078      	str	r0, [r7, #4]
 800d2f4:	460b      	mov	r3, r1
 800d2f6:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 800d2f8:	78fb      	ldrb	r3, [r7, #3]
 800d2fa:	4619      	mov	r1, r3
 800d2fc:	6878      	ldr	r0, [r7, #4]
 800d2fe:	f000 f8fd 	bl	800d4fc <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 800d302:	2300      	movs	r3, #0
}
 800d304:	4618      	mov	r0, r3
 800d306:	3708      	adds	r7, #8
 800d308:	46bd      	mov	sp, r7
 800d30a:	bd80      	pop	{r7, pc}

0800d30c <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 800d30c:	b480      	push	{r7}
 800d30e:	b083      	sub	sp, #12
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	2220      	movs	r2, #32
 800d318:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 800d31a:	4b03      	ldr	r3, [pc, #12]	; (800d328 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 800d31c:	4618      	mov	r0, r3
 800d31e:	370c      	adds	r7, #12
 800d320:	46bd      	mov	sp, r7
 800d322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d326:	4770      	bx	lr
 800d328:	24000048 	.word	0x24000048

0800d32c <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 800d32c:	b480      	push	{r7}
 800d32e:	b083      	sub	sp, #12
 800d330:	af00      	add	r7, sp, #0
 800d332:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	2220      	movs	r2, #32
 800d338:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 800d33a:	4b03      	ldr	r3, [pc, #12]	; (800d348 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 800d33c:	4618      	mov	r0, r3
 800d33e:	370c      	adds	r7, #12
 800d340:	46bd      	mov	sp, r7
 800d342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d346:	4770      	bx	lr
 800d348:	24000068 	.word	0x24000068

0800d34c <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d34c:	b480      	push	{r7}
 800d34e:	b083      	sub	sp, #12
 800d350:	af00      	add	r7, sp, #0
 800d352:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	2220      	movs	r2, #32
 800d358:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 800d35a:	4b03      	ldr	r3, [pc, #12]	; (800d368 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 800d35c:	4618      	mov	r0, r3
 800d35e:	370c      	adds	r7, #12
 800d360:	46bd      	mov	sp, r7
 800d362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d366:	4770      	bx	lr
 800d368:	24000088 	.word	0x24000088

0800d36c <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d36c:	b480      	push	{r7}
 800d36e:	b083      	sub	sp, #12
 800d370:	af00      	add	r7, sp, #0
 800d372:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	220a      	movs	r2, #10
 800d378:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 800d37a:	4b03      	ldr	r3, [pc, #12]	; (800d388 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d37c:	4618      	mov	r0, r3
 800d37e:	370c      	adds	r7, #12
 800d380:	46bd      	mov	sp, r7
 800d382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d386:	4770      	bx	lr
 800d388:	240000a8 	.word	0x240000a8

0800d38c <USBD_MSC_RegisterStorage>:
* @brief  USBD_MSC_RegisterStorage
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 800d38c:	b480      	push	{r7}
 800d38e:	b083      	sub	sp, #12
 800d390:	af00      	add	r7, sp, #0
 800d392:	6078      	str	r0, [r7, #4]
 800d394:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d396:	683b      	ldr	r3, [r7, #0]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d101      	bne.n	800d3a0 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d39c:	2303      	movs	r3, #3
 800d39e:	e004      	b.n	800d3aa <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	683a      	ldr	r2, [r7, #0]
 800d3a4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800d3a8:	2300      	movs	r3, #0
}
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	370c      	adds	r7, #12
 800d3ae:	46bd      	mov	sp, r7
 800d3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b4:	4770      	bx	lr

0800d3b6 <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 800d3b6:	b580      	push	{r7, lr}
 800d3b8:	b084      	sub	sp, #16
 800d3ba:	af00      	add	r7, sp, #0
 800d3bc:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d3c4:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	2200      	movs	r2, #0
 800d3ca:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	2200      	movs	r2, #0
 800d3d0:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800d3d2:	68fa      	ldr	r2, [r7, #12]
 800d3d4:	f248 0361 	movw	r3, #32865	; 0x8061
 800d3d8:	4413      	add	r3, r2
 800d3da:	2200      	movs	r2, #0
 800d3dc:	701a      	strb	r2, [r3, #0]
  hmsc->scsi_sense_head = 0U;
 800d3de:	68fa      	ldr	r2, [r7, #12]
 800d3e0:	f248 0360 	movw	r3, #32864	; 0x8060
 800d3e4:	4413      	add	r3, r2
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	701a      	strb	r2, [r3, #0]
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800d3ea:	68fa      	ldr	r2, [r7, #12]
 800d3ec:	f248 0362 	movw	r3, #32866	; 0x8062
 800d3f0:	4413      	add	r3, r2
 800d3f2:	2200      	movs	r2, #0
 800d3f4:	701a      	strb	r2, [r3, #0]

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	2000      	movs	r0, #0
 800d400:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 800d402:	2101      	movs	r1, #1
 800d404:	6878      	ldr	r0, [r7, #4]
 800d406:	f005 fb85 	bl	8012b14 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 800d40a:	2181      	movs	r1, #129	; 0x81
 800d40c:	6878      	ldr	r0, [r7, #4]
 800d40e:	f005 fb81 	bl	8012b14 <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	f248 0210 	movw	r2, #32784	; 0x8010
 800d418:	441a      	add	r2, r3
 800d41a:	231f      	movs	r3, #31
 800d41c:	2101      	movs	r1, #1
 800d41e:	6878      	ldr	r0, [r7, #4]
 800d420:	f005 fc41 	bl	8012ca6 <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 800d424:	bf00      	nop
 800d426:	3710      	adds	r7, #16
 800d428:	46bd      	mov	sp, r7
 800d42a:	bd80      	pop	{r7, pc}

0800d42c <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 800d42c:	b580      	push	{r7, lr}
 800d42e:	b084      	sub	sp, #16
 800d430:	af00      	add	r7, sp, #0
 800d432:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d43a:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	2200      	movs	r2, #0
 800d440:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	2201      	movs	r2, #1
 800d446:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 800d448:	2181      	movs	r1, #129	; 0x81
 800d44a:	6878      	ldr	r0, [r7, #4]
 800d44c:	f005 fba0 	bl	8012b90 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 800d450:	2101      	movs	r1, #1
 800d452:	6878      	ldr	r0, [r7, #4]
 800d454:	f005 fb9c 	bl	8012b90 <USBD_LL_ClearStallEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	f248 0210 	movw	r2, #32784	; 0x8010
 800d45e:	441a      	add	r2, r3
 800d460:	231f      	movs	r3, #31
 800d462:	2101      	movs	r1, #1
 800d464:	6878      	ldr	r0, [r7, #4]
 800d466:	f005 fc1e 	bl	8012ca6 <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 800d46a:	bf00      	nop
 800d46c:	3710      	adds	r7, #16
 800d46e:	46bd      	mov	sp, r7
 800d470:	bd80      	pop	{r7, pc}

0800d472 <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 800d472:	b480      	push	{r7}
 800d474:	b085      	sub	sp, #20
 800d476:	af00      	add	r7, sp, #0
 800d478:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d480:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	2200      	movs	r2, #0
 800d486:	721a      	strb	r2, [r3, #8]
}
 800d488:	bf00      	nop
 800d48a:	3714      	adds	r7, #20
 800d48c:	46bd      	mov	sp, r7
 800d48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d492:	4770      	bx	lr

0800d494 <MSC_BOT_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d494:	b580      	push	{r7, lr}
 800d496:	b084      	sub	sp, #16
 800d498:	af00      	add	r7, sp, #0
 800d49a:	6078      	str	r0, [r7, #4]
 800d49c:	460b      	mov	r3, r1
 800d49e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d4a6:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	7a1b      	ldrb	r3, [r3, #8]
 800d4ac:	2b02      	cmp	r3, #2
 800d4ae:	d004      	beq.n	800d4ba <MSC_BOT_DataIn+0x26>
 800d4b0:	2b02      	cmp	r3, #2
 800d4b2:	db1c      	blt.n	800d4ee <MSC_BOT_DataIn+0x5a>
 800d4b4:	2b04      	cmp	r3, #4
 800d4b6:	dc1a      	bgt.n	800d4ee <MSC_BOT_DataIn+0x5a>
 800d4b8:	e014      	b.n	800d4e4 <MSC_BOT_DataIn+0x50>
  {
  case USBD_BOT_DATA_IN:
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800d4ba:	68fa      	ldr	r2, [r7, #12]
 800d4bc:	f248 031d 	movw	r3, #32797	; 0x801d
 800d4c0:	4413      	add	r3, r2
 800d4c2:	7819      	ldrb	r1, [r3, #0]
 800d4c4:	68fa      	ldr	r2, [r7, #12]
 800d4c6:	f248 031f 	movw	r3, #32799	; 0x801f
 800d4ca:	4413      	add	r3, r2
 800d4cc:	461a      	mov	r2, r3
 800d4ce:	6878      	ldr	r0, [r7, #4]
 800d4d0:	f000 f99e 	bl	800d810 <SCSI_ProcessCmd>
 800d4d4:	4603      	mov	r3, r0
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	da0b      	bge.n	800d4f2 <MSC_BOT_DataIn+0x5e>
    {
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800d4da:	2101      	movs	r1, #1
 800d4dc:	6878      	ldr	r0, [r7, #4]
 800d4de:	f000 f90b 	bl	800d6f8 <MSC_BOT_SendCSW>
    }
    break;
 800d4e2:	e006      	b.n	800d4f2 <MSC_BOT_DataIn+0x5e>

  case USBD_BOT_SEND_DATA:
  case USBD_BOT_LAST_DATA_IN:
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800d4e4:	2100      	movs	r1, #0
 800d4e6:	6878      	ldr	r0, [r7, #4]
 800d4e8:	f000 f906 	bl	800d6f8 <MSC_BOT_SendCSW>
    break;
 800d4ec:	e002      	b.n	800d4f4 <MSC_BOT_DataIn+0x60>

  default:
    break;
 800d4ee:	bf00      	nop
 800d4f0:	e000      	b.n	800d4f4 <MSC_BOT_DataIn+0x60>
    break;
 800d4f2:	bf00      	nop
  }
}
 800d4f4:	bf00      	nop
 800d4f6:	3710      	adds	r7, #16
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	bd80      	pop	{r7, pc}

0800d4fc <MSC_BOT_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d4fc:	b580      	push	{r7, lr}
 800d4fe:	b084      	sub	sp, #16
 800d500:	af00      	add	r7, sp, #0
 800d502:	6078      	str	r0, [r7, #4]
 800d504:	460b      	mov	r3, r1
 800d506:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d50e:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	7a1b      	ldrb	r3, [r3, #8]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d002      	beq.n	800d51e <MSC_BOT_DataOut+0x22>
 800d518:	2b01      	cmp	r3, #1
 800d51a:	d004      	beq.n	800d526 <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 800d51c:	e018      	b.n	800d550 <MSC_BOT_DataOut+0x54>
      MSC_BOT_CBW_Decode(pdev);
 800d51e:	6878      	ldr	r0, [r7, #4]
 800d520:	f000 f81a 	bl	800d558 <MSC_BOT_CBW_Decode>
      break;
 800d524:	e014      	b.n	800d550 <MSC_BOT_DataOut+0x54>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800d526:	68fa      	ldr	r2, [r7, #12]
 800d528:	f248 031d 	movw	r3, #32797	; 0x801d
 800d52c:	4413      	add	r3, r2
 800d52e:	7819      	ldrb	r1, [r3, #0]
 800d530:	68fa      	ldr	r2, [r7, #12]
 800d532:	f248 031f 	movw	r3, #32799	; 0x801f
 800d536:	4413      	add	r3, r2
 800d538:	461a      	mov	r2, r3
 800d53a:	6878      	ldr	r0, [r7, #4]
 800d53c:	f000 f968 	bl	800d810 <SCSI_ProcessCmd>
 800d540:	4603      	mov	r3, r0
 800d542:	2b00      	cmp	r3, #0
 800d544:	da03      	bge.n	800d54e <MSC_BOT_DataOut+0x52>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800d546:	2101      	movs	r1, #1
 800d548:	6878      	ldr	r0, [r7, #4]
 800d54a:	f000 f8d5 	bl	800d6f8 <MSC_BOT_SendCSW>
      break;
 800d54e:	bf00      	nop
  }
}
 800d550:	bf00      	nop
 800d552:	3710      	adds	r7, #16
 800d554:	46bd      	mov	sp, r7
 800d556:	bd80      	pop	{r7, pc}

0800d558 <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 800d558:	b580      	push	{r7, lr}
 800d55a:	b084      	sub	sp, #16
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d566:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 800d568:	68fa      	ldr	r2, [r7, #12]
 800d56a:	f248 0314 	movw	r3, #32788	; 0x8014
 800d56e:	4413      	add	r3, r2
 800d570:	681a      	ldr	r2, [r3, #0]
 800d572:	68f9      	ldr	r1, [r7, #12]
 800d574:	f248 0334 	movw	r3, #32820	; 0x8034
 800d578:	440b      	add	r3, r1
 800d57a:	601a      	str	r2, [r3, #0]
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800d57c:	68fa      	ldr	r2, [r7, #12]
 800d57e:	f248 0318 	movw	r3, #32792	; 0x8018
 800d582:	4413      	add	r3, r2
 800d584:	681a      	ldr	r2, [r3, #0]
 800d586:	68f9      	ldr	r1, [r7, #12]
 800d588:	f248 0338 	movw	r3, #32824	; 0x8038
 800d58c:	440b      	add	r3, r1
 800d58e:	601a      	str	r2, [r3, #0]

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800d590:	2101      	movs	r1, #1
 800d592:	6878      	ldr	r0, [r7, #4]
 800d594:	f005 fba8 	bl	8012ce8 <USBD_LL_GetRxDataSize>
 800d598:	4603      	mov	r3, r0
 800d59a:	2b1f      	cmp	r3, #31
 800d59c:	d11c      	bne.n	800d5d8 <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800d59e:	68fa      	ldr	r2, [r7, #12]
 800d5a0:	f248 0310 	movw	r3, #32784	; 0x8010
 800d5a4:	4413      	add	r3, r2
 800d5a6:	681b      	ldr	r3, [r3, #0]
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800d5a8:	4a38      	ldr	r2, [pc, #224]	; (800d68c <MSC_BOT_CBW_Decode+0x134>)
 800d5aa:	4293      	cmp	r3, r2
 800d5ac:	d114      	bne.n	800d5d8 <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800d5ae:	68fa      	ldr	r2, [r7, #12]
 800d5b0:	f248 031d 	movw	r3, #32797	; 0x801d
 800d5b4:	4413      	add	r3, r2
 800d5b6:	781b      	ldrb	r3, [r3, #0]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800d5b8:	2b01      	cmp	r3, #1
 800d5ba:	d80d      	bhi.n	800d5d8 <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800d5bc:	68fa      	ldr	r2, [r7, #12]
 800d5be:	f248 031e 	movw	r3, #32798	; 0x801e
 800d5c2:	4413      	add	r3, r2
 800d5c4:	781b      	ldrb	r3, [r3, #0]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d006      	beq.n	800d5d8 <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.bCBLength > 16U))
 800d5ca:	68fa      	ldr	r2, [r7, #12]
 800d5cc:	f248 031e 	movw	r3, #32798	; 0x801e
 800d5d0:	4413      	add	r3, r2
 800d5d2:	781b      	ldrb	r3, [r3, #0]
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800d5d4:	2b10      	cmp	r3, #16
 800d5d6:	d910      	bls.n	800d5fa <MSC_BOT_CBW_Decode+0xa2>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800d5d8:	68fa      	ldr	r2, [r7, #12]
 800d5da:	f248 031d 	movw	r3, #32797	; 0x801d
 800d5de:	4413      	add	r3, r2
 800d5e0:	7819      	ldrb	r1, [r3, #0]
 800d5e2:	2320      	movs	r3, #32
 800d5e4:	2205      	movs	r2, #5
 800d5e6:	6878      	ldr	r0, [r7, #4]
 800d5e8:	f000 fd36 	bl	800e058 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	2202      	movs	r2, #2
 800d5f0:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800d5f2:	6878      	ldr	r0, [r7, #4]
 800d5f4:	f000 f8b2 	bl	800d75c <MSC_BOT_Abort>
 800d5f8:	e044      	b.n	800d684 <MSC_BOT_CBW_Decode+0x12c>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800d5fa:	68fa      	ldr	r2, [r7, #12]
 800d5fc:	f248 031d 	movw	r3, #32797	; 0x801d
 800d600:	4413      	add	r3, r2
 800d602:	7819      	ldrb	r1, [r3, #0]
 800d604:	68fa      	ldr	r2, [r7, #12]
 800d606:	f248 031f 	movw	r3, #32799	; 0x801f
 800d60a:	4413      	add	r3, r2
 800d60c:	461a      	mov	r2, r3
 800d60e:	6878      	ldr	r0, [r7, #4]
 800d610:	f000 f8fe 	bl	800d810 <SCSI_ProcessCmd>
 800d614:	4603      	mov	r3, r0
 800d616:	2b00      	cmp	r3, #0
 800d618:	da0c      	bge.n	800d634 <MSC_BOT_CBW_Decode+0xdc>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	7a1b      	ldrb	r3, [r3, #8]
 800d61e:	2b05      	cmp	r3, #5
 800d620:	d104      	bne.n	800d62c <MSC_BOT_CBW_Decode+0xd4>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800d622:	2101      	movs	r1, #1
 800d624:	6878      	ldr	r0, [r7, #4]
 800d626:	f000 f867 	bl	800d6f8 <MSC_BOT_SendCSW>
 800d62a:	e02b      	b.n	800d684 <MSC_BOT_CBW_Decode+0x12c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800d62c:	6878      	ldr	r0, [r7, #4]
 800d62e:	f000 f895 	bl	800d75c <MSC_BOT_Abort>
 800d632:	e027      	b.n	800d684 <MSC_BOT_CBW_Decode+0x12c>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	7a1b      	ldrb	r3, [r3, #8]
 800d638:	2b02      	cmp	r3, #2
 800d63a:	d022      	beq.n	800d682 <MSC_BOT_CBW_Decode+0x12a>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800d640:	2b01      	cmp	r3, #1
 800d642:	d01e      	beq.n	800d682 <MSC_BOT_CBW_Decode+0x12a>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800d648:	2b03      	cmp	r3, #3
 800d64a:	d01a      	beq.n	800d682 <MSC_BOT_CBW_Decode+0x12a>
    {
      if (hmsc->bot_data_length > 0U)
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	68db      	ldr	r3, [r3, #12]
 800d650:	2b00      	cmp	r3, #0
 800d652:	d009      	beq.n	800d668 <MSC_BOT_CBW_Decode+0x110>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	f103 0110 	add.w	r1, r3, #16
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	68db      	ldr	r3, [r3, #12]
 800d65e:	461a      	mov	r2, r3
 800d660:	6878      	ldr	r0, [r7, #4]
 800d662:	f000 f815 	bl	800d690 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 800d666:	e00d      	b.n	800d684 <MSC_BOT_CBW_Decode+0x12c>
      }
      else if (hmsc->bot_data_length == 0U)
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	68db      	ldr	r3, [r3, #12]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d104      	bne.n	800d67a <MSC_BOT_CBW_Decode+0x122>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800d670:	2100      	movs	r1, #0
 800d672:	6878      	ldr	r0, [r7, #4]
 800d674:	f000 f840 	bl	800d6f8 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 800d678:	e004      	b.n	800d684 <MSC_BOT_CBW_Decode+0x12c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800d67a:	6878      	ldr	r0, [r7, #4]
 800d67c:	f000 f86e 	bl	800d75c <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 800d680:	e000      	b.n	800d684 <MSC_BOT_CBW_Decode+0x12c>
      }
    }
    else
    {
      return;
 800d682:	bf00      	nop
    }
  }
}
 800d684:	3710      	adds	r7, #16
 800d686:	46bd      	mov	sp, r7
 800d688:	bd80      	pop	{r7, pc}
 800d68a:	bf00      	nop
 800d68c:	43425355 	.word	0x43425355

0800d690 <MSC_BOT_SendData>:
* @param  buf: pointer to data buffer
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b086      	sub	sp, #24
 800d694:	af00      	add	r7, sp, #0
 800d696:	60f8      	str	r0, [r7, #12]
 800d698:	60b9      	str	r1, [r7, #8]
 800d69a:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d6a2:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 800d6a4:	697a      	ldr	r2, [r7, #20]
 800d6a6:	f248 0318 	movw	r3, #32792	; 0x8018
 800d6aa:	4413      	add	r3, r2
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	687a      	ldr	r2, [r7, #4]
 800d6b0:	4293      	cmp	r3, r2
 800d6b2:	bf28      	it	cs
 800d6b4:	4613      	movcs	r3, r2
 800d6b6:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 800d6b8:	697a      	ldr	r2, [r7, #20]
 800d6ba:	f248 0338 	movw	r3, #32824	; 0x8038
 800d6be:	4413      	add	r3, r2
 800d6c0:	681a      	ldr	r2, [r3, #0]
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	1ad2      	subs	r2, r2, r3
 800d6c6:	6979      	ldr	r1, [r7, #20]
 800d6c8:	f248 0338 	movw	r3, #32824	; 0x8038
 800d6cc:	440b      	add	r3, r1
 800d6ce:	601a      	str	r2, [r3, #0]
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 800d6d0:	697a      	ldr	r2, [r7, #20]
 800d6d2:	f248 033c 	movw	r3, #32828	; 0x803c
 800d6d6:	4413      	add	r3, r2
 800d6d8:	2200      	movs	r2, #0
 800d6da:	701a      	strb	r2, [r3, #0]
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800d6dc:	697b      	ldr	r3, [r7, #20]
 800d6de:	2204      	movs	r2, #4
 800d6e0:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 800d6e2:	693b      	ldr	r3, [r7, #16]
 800d6e4:	68ba      	ldr	r2, [r7, #8]
 800d6e6:	2181      	movs	r1, #129	; 0x81
 800d6e8:	68f8      	ldr	r0, [r7, #12]
 800d6ea:	f005 fabb 	bl	8012c64 <USBD_LL_Transmit>
}
 800d6ee:	bf00      	nop
 800d6f0:	3718      	adds	r7, #24
 800d6f2:	46bd      	mov	sp, r7
 800d6f4:	bd80      	pop	{r7, pc}
	...

0800d6f8 <MSC_BOT_SendCSW>:
* @param  pdev: device instance
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	b084      	sub	sp, #16
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	6078      	str	r0, [r7, #4]
 800d700:	460b      	mov	r3, r1
 800d702:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d70a:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800d70c:	68fa      	ldr	r2, [r7, #12]
 800d70e:	f248 0330 	movw	r3, #32816	; 0x8030
 800d712:	4413      	add	r3, r2
 800d714:	4a10      	ldr	r2, [pc, #64]	; (800d758 <MSC_BOT_SendCSW+0x60>)
 800d716:	601a      	str	r2, [r3, #0]
  hmsc->csw.bStatus = CSW_Status;
 800d718:	68fa      	ldr	r2, [r7, #12]
 800d71a:	f248 033c 	movw	r3, #32828	; 0x803c
 800d71e:	4413      	add	r3, r2
 800d720:	78fa      	ldrb	r2, [r7, #3]
 800d722:	701a      	strb	r2, [r3, #0]
  hmsc->bot_state = USBD_BOT_IDLE;
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	2200      	movs	r2, #0
 800d728:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	f248 0230 	movw	r2, #32816	; 0x8030
 800d730:	441a      	add	r2, r3
 800d732:	230d      	movs	r3, #13
 800d734:	2181      	movs	r1, #129	; 0x81
 800d736:	6878      	ldr	r0, [r7, #4]
 800d738:	f005 fa94 	bl	8012c64 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	f248 0210 	movw	r2, #32784	; 0x8010
 800d742:	441a      	add	r2, r3
 800d744:	231f      	movs	r3, #31
 800d746:	2101      	movs	r1, #1
 800d748:	6878      	ldr	r0, [r7, #4]
 800d74a:	f005 faac 	bl	8012ca6 <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 800d74e:	bf00      	nop
 800d750:	3710      	adds	r7, #16
 800d752:	46bd      	mov	sp, r7
 800d754:	bd80      	pop	{r7, pc}
 800d756:	bf00      	nop
 800d758:	53425355 	.word	0x53425355

0800d75c <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 800d75c:	b580      	push	{r7, lr}
 800d75e:	b084      	sub	sp, #16
 800d760:	af00      	add	r7, sp, #0
 800d762:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d76a:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 800d76c:	68fa      	ldr	r2, [r7, #12]
 800d76e:	f248 031c 	movw	r3, #32796	; 0x801c
 800d772:	4413      	add	r3, r2
 800d774:	781b      	ldrb	r3, [r3, #0]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d10e      	bne.n	800d798 <MSC_BOT_Abort+0x3c>
      (hmsc->cbw.dDataLength != 0U) &&
 800d77a:	68fa      	ldr	r2, [r7, #12]
 800d77c:	f248 0318 	movw	r3, #32792	; 0x8018
 800d780:	4413      	add	r3, r2
 800d782:	681b      	ldr	r3, [r3, #0]
  if ((hmsc->cbw.bmFlags == 0U) &&
 800d784:	2b00      	cmp	r3, #0
 800d786:	d007      	beq.n	800d798 <MSC_BOT_Abort+0x3c>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d103      	bne.n	800d798 <MSC_BOT_Abort+0x3c>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800d790:	2101      	movs	r1, #1
 800d792:	6878      	ldr	r0, [r7, #4]
 800d794:	f005 f9dd 	bl	8012b52 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800d798:	2181      	movs	r1, #129	; 0x81
 800d79a:	6878      	ldr	r0, [r7, #4]
 800d79c:	f005 f9d9 	bl	8012b52 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	7a5b      	ldrb	r3, [r3, #9]
 800d7a4:	2b02      	cmp	r3, #2
 800d7a6:	d107      	bne.n	800d7b8 <MSC_BOT_Abort+0x5c>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800d7a8:	2181      	movs	r1, #129	; 0x81
 800d7aa:	6878      	ldr	r0, [r7, #4]
 800d7ac:	f005 f9d1 	bl	8012b52 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800d7b0:	2101      	movs	r1, #1
 800d7b2:	6878      	ldr	r0, [r7, #4]
 800d7b4:	f005 f9cd 	bl	8012b52 <USBD_LL_StallEP>
  }
}
 800d7b8:	bf00      	nop
 800d7ba:	3710      	adds	r7, #16
 800d7bc:	46bd      	mov	sp, r7
 800d7be:	bd80      	pop	{r7, pc}

0800d7c0 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d7c0:	b580      	push	{r7, lr}
 800d7c2:	b084      	sub	sp, #16
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	6078      	str	r0, [r7, #4]
 800d7c8:	460b      	mov	r3, r1
 800d7ca:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d7d2:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	7a5b      	ldrb	r3, [r3, #9]
 800d7d8:	2b02      	cmp	r3, #2
 800d7da:	d108      	bne.n	800d7ee <MSC_BOT_CplClrFeature+0x2e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800d7dc:	2181      	movs	r1, #129	; 0x81
 800d7de:	6878      	ldr	r0, [r7, #4]
 800d7e0:	f005 f9b7 	bl	8012b52 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800d7e4:	2101      	movs	r1, #1
 800d7e6:	6878      	ldr	r0, [r7, #4]
 800d7e8:	f005 f9b3 	bl	8012b52 <USBD_LL_StallEP>
 800d7ec:	e00d      	b.n	800d80a <MSC_BOT_CplClrFeature+0x4a>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800d7ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	da08      	bge.n	800d808 <MSC_BOT_CplClrFeature+0x48>
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	7a5b      	ldrb	r3, [r3, #9]
 800d7fa:	2b01      	cmp	r3, #1
 800d7fc:	d004      	beq.n	800d808 <MSC_BOT_CplClrFeature+0x48>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800d7fe:	2101      	movs	r1, #1
 800d800:	6878      	ldr	r0, [r7, #4]
 800d802:	f7ff ff79 	bl	800d6f8 <MSC_BOT_SendCSW>
 800d806:	e000      	b.n	800d80a <MSC_BOT_CplClrFeature+0x4a>
  }
  else
  {
    return;
 800d808:	bf00      	nop
  }
}
 800d80a:	3710      	adds	r7, #16
 800d80c:	46bd      	mov	sp, r7
 800d80e:	bd80      	pop	{r7, pc}

0800d810 <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 800d810:	b580      	push	{r7, lr}
 800d812:	b086      	sub	sp, #24
 800d814:	af00      	add	r7, sp, #0
 800d816:	60f8      	str	r0, [r7, #12]
 800d818:	460b      	mov	r3, r1
 800d81a:	607a      	str	r2, [r7, #4]
 800d81c:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d824:	613b      	str	r3, [r7, #16]

  switch (cmd[0])
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	781b      	ldrb	r3, [r3, #0]
 800d82a:	2b25      	cmp	r3, #37	; 0x25
 800d82c:	d06e      	beq.n	800d90c <SCSI_ProcessCmd+0xfc>
 800d82e:	2b25      	cmp	r3, #37	; 0x25
 800d830:	dc11      	bgt.n	800d856 <SCSI_ProcessCmd+0x46>
 800d832:	2b1a      	cmp	r3, #26
 800d834:	d04f      	beq.n	800d8d6 <SCSI_ProcessCmd+0xc6>
 800d836:	2b1a      	cmp	r3, #26
 800d838:	dc06      	bgt.n	800d848 <SCSI_ProcessCmd+0x38>
 800d83a:	2b03      	cmp	r3, #3
 800d83c:	d027      	beq.n	800d88e <SCSI_ProcessCmd+0x7e>
 800d83e:	2b12      	cmp	r3, #18
 800d840:	d02e      	beq.n	800d8a0 <SCSI_ProcessCmd+0x90>
 800d842:	2b00      	cmp	r3, #0
 800d844:	d01a      	beq.n	800d87c <SCSI_ProcessCmd+0x6c>
 800d846:	e0a0      	b.n	800d98a <SCSI_ProcessCmd+0x17a>
 800d848:	2b1e      	cmp	r3, #30
 800d84a:	d03b      	beq.n	800d8c4 <SCSI_ProcessCmd+0xb4>
 800d84c:	2b23      	cmp	r3, #35	; 0x23
 800d84e:	d054      	beq.n	800d8fa <SCSI_ProcessCmd+0xea>
 800d850:	2b1b      	cmp	r3, #27
 800d852:	d02e      	beq.n	800d8b2 <SCSI_ProcessCmd+0xa2>
 800d854:	e099      	b.n	800d98a <SCSI_ProcessCmd+0x17a>
 800d856:	2b5a      	cmp	r3, #90	; 0x5a
 800d858:	d046      	beq.n	800d8e8 <SCSI_ProcessCmd+0xd8>
 800d85a:	2b5a      	cmp	r3, #90	; 0x5a
 800d85c:	dc07      	bgt.n	800d86e <SCSI_ProcessCmd+0x5e>
 800d85e:	2b2a      	cmp	r3, #42	; 0x2a
 800d860:	d078      	beq.n	800d954 <SCSI_ProcessCmd+0x144>
 800d862:	2b2f      	cmp	r3, #47	; 0x2f
 800d864:	f000 8088 	beq.w	800d978 <SCSI_ProcessCmd+0x168>
 800d868:	2b28      	cmp	r3, #40	; 0x28
 800d86a:	d061      	beq.n	800d930 <SCSI_ProcessCmd+0x120>
 800d86c:	e08d      	b.n	800d98a <SCSI_ProcessCmd+0x17a>
 800d86e:	2ba8      	cmp	r3, #168	; 0xa8
 800d870:	d067      	beq.n	800d942 <SCSI_ProcessCmd+0x132>
 800d872:	2baa      	cmp	r3, #170	; 0xaa
 800d874:	d077      	beq.n	800d966 <SCSI_ProcessCmd+0x156>
 800d876:	2b9e      	cmp	r3, #158	; 0x9e
 800d878:	d051      	beq.n	800d91e <SCSI_ProcessCmd+0x10e>
 800d87a:	e086      	b.n	800d98a <SCSI_ProcessCmd+0x17a>
  {
  case SCSI_TEST_UNIT_READY:
    ret = SCSI_TestUnitReady(pdev, lun, cmd);
 800d87c:	7afb      	ldrb	r3, [r7, #11]
 800d87e:	687a      	ldr	r2, [r7, #4]
 800d880:	4619      	mov	r1, r3
 800d882:	68f8      	ldr	r0, [r7, #12]
 800d884:	f000 f893 	bl	800d9ae <SCSI_TestUnitReady>
 800d888:	4603      	mov	r3, r0
 800d88a:	75fb      	strb	r3, [r7, #23]
    break;
 800d88c:	e089      	b.n	800d9a2 <SCSI_ProcessCmd+0x192>

  case SCSI_REQUEST_SENSE:
    ret = SCSI_RequestSense(pdev, lun, cmd);
 800d88e:	7afb      	ldrb	r3, [r7, #11]
 800d890:	687a      	ldr	r2, [r7, #4]
 800d892:	4619      	mov	r1, r3
 800d894:	68f8      	ldr	r0, [r7, #12]
 800d896:	f000 fb47 	bl	800df28 <SCSI_RequestSense>
 800d89a:	4603      	mov	r3, r0
 800d89c:	75fb      	strb	r3, [r7, #23]
    break;
 800d89e:	e080      	b.n	800d9a2 <SCSI_ProcessCmd+0x192>

  case SCSI_INQUIRY:
    ret = SCSI_Inquiry(pdev, lun, cmd);
 800d8a0:	7afb      	ldrb	r3, [r7, #11]
 800d8a2:	687a      	ldr	r2, [r7, #4]
 800d8a4:	4619      	mov	r1, r3
 800d8a6:	68f8      	ldr	r0, [r7, #12]
 800d8a8:	f000 f8d2 	bl	800da50 <SCSI_Inquiry>
 800d8ac:	4603      	mov	r3, r0
 800d8ae:	75fb      	strb	r3, [r7, #23]
    break;
 800d8b0:	e077      	b.n	800d9a2 <SCSI_ProcessCmd+0x192>

  case SCSI_START_STOP_UNIT:
    ret = SCSI_StartStopUnit(pdev, lun, cmd);
 800d8b2:	7afb      	ldrb	r3, [r7, #11]
 800d8b4:	687a      	ldr	r2, [r7, #4]
 800d8b6:	4619      	mov	r1, r3
 800d8b8:	68f8      	ldr	r0, [r7, #12]
 800d8ba:	f000 fc27 	bl	800e10c <SCSI_StartStopUnit>
 800d8be:	4603      	mov	r3, r0
 800d8c0:	75fb      	strb	r3, [r7, #23]
    break;
 800d8c2:	e06e      	b.n	800d9a2 <SCSI_ProcessCmd+0x192>

  case SCSI_ALLOW_MEDIUM_REMOVAL:
    ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 800d8c4:	7afb      	ldrb	r3, [r7, #11]
 800d8c6:	687a      	ldr	r2, [r7, #4]
 800d8c8:	4619      	mov	r1, r3
 800d8ca:	68f8      	ldr	r0, [r7, #12]
 800d8cc:	f000 fc71 	bl	800e1b2 <SCSI_AllowPreventRemovable>
 800d8d0:	4603      	mov	r3, r0
 800d8d2:	75fb      	strb	r3, [r7, #23]
    break;
 800d8d4:	e065      	b.n	800d9a2 <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE6:
    ret = SCSI_ModeSense6(pdev, lun, cmd);
 800d8d6:	7afb      	ldrb	r3, [r7, #11]
 800d8d8:	687a      	ldr	r2, [r7, #4]
 800d8da:	4619      	mov	r1, r3
 800d8dc:	68f8      	ldr	r0, [r7, #12]
 800d8de:	f000 fad7 	bl	800de90 <SCSI_ModeSense6>
 800d8e2:	4603      	mov	r3, r0
 800d8e4:	75fb      	strb	r3, [r7, #23]
    break;
 800d8e6:	e05c      	b.n	800d9a2 <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE10:
    ret = SCSI_ModeSense10(pdev, lun, cmd);
 800d8e8:	7afb      	ldrb	r3, [r7, #11]
 800d8ea:	687a      	ldr	r2, [r7, #4]
 800d8ec:	4619      	mov	r1, r3
 800d8ee:	68f8      	ldr	r0, [r7, #12]
 800d8f0:	f000 faf4 	bl	800dedc <SCSI_ModeSense10>
 800d8f4:	4603      	mov	r3, r0
 800d8f6:	75fb      	strb	r3, [r7, #23]
    break;
 800d8f8:	e053      	b.n	800d9a2 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_FORMAT_CAPACITIES:
    ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800d8fa:	7afb      	ldrb	r3, [r7, #11]
 800d8fc:	687a      	ldr	r2, [r7, #4]
 800d8fe:	4619      	mov	r1, r3
 800d900:	68f8      	ldr	r0, [r7, #12]
 800d902:	f000 fa56 	bl	800ddb2 <SCSI_ReadFormatCapacity>
 800d906:	4603      	mov	r3, r0
 800d908:	75fb      	strb	r3, [r7, #23]
    break;
 800d90a:	e04a      	b.n	800d9a2 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY10:
    ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 800d90c:	7afb      	ldrb	r3, [r7, #11]
 800d90e:	687a      	ldr	r2, [r7, #4]
 800d910:	4619      	mov	r1, r3
 800d912:	68f8      	ldr	r0, [r7, #12]
 800d914:	f000 f910 	bl	800db38 <SCSI_ReadCapacity10>
 800d918:	4603      	mov	r3, r0
 800d91a:	75fb      	strb	r3, [r7, #23]
    break;
 800d91c:	e041      	b.n	800d9a2 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY16:
    ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 800d91e:	7afb      	ldrb	r3, [r7, #11]
 800d920:	687a      	ldr	r2, [r7, #4]
 800d922:	4619      	mov	r1, r3
 800d924:	68f8      	ldr	r0, [r7, #12]
 800d926:	f000 f98b 	bl	800dc40 <SCSI_ReadCapacity16>
 800d92a:	4603      	mov	r3, r0
 800d92c:	75fb      	strb	r3, [r7, #23]
    break;
 800d92e:	e038      	b.n	800d9a2 <SCSI_ProcessCmd+0x192>

  case SCSI_READ10:
    ret = SCSI_Read10(pdev, lun, cmd);
 800d930:	7afb      	ldrb	r3, [r7, #11]
 800d932:	687a      	ldr	r2, [r7, #4]
 800d934:	4619      	mov	r1, r3
 800d936:	68f8      	ldr	r0, [r7, #12]
 800d938:	f000 fc62 	bl	800e200 <SCSI_Read10>
 800d93c:	4603      	mov	r3, r0
 800d93e:	75fb      	strb	r3, [r7, #23]
    break;
 800d940:	e02f      	b.n	800d9a2 <SCSI_ProcessCmd+0x192>

  case SCSI_READ12:
    ret = SCSI_Read12(pdev, lun, cmd);
 800d942:	7afb      	ldrb	r3, [r7, #11]
 800d944:	687a      	ldr	r2, [r7, #4]
 800d946:	4619      	mov	r1, r3
 800d948:	68f8      	ldr	r0, [r7, #12]
 800d94a:	f000 fd0b 	bl	800e364 <SCSI_Read12>
 800d94e:	4603      	mov	r3, r0
 800d950:	75fb      	strb	r3, [r7, #23]
    break;
 800d952:	e026      	b.n	800d9a2 <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE10:
    ret = SCSI_Write10(pdev, lun, cmd);
 800d954:	7afb      	ldrb	r3, [r7, #11]
 800d956:	687a      	ldr	r2, [r7, #4]
 800d958:	4619      	mov	r1, r3
 800d95a:	68f8      	ldr	r0, [r7, #12]
 800d95c:	f000 fdbe 	bl	800e4dc <SCSI_Write10>
 800d960:	4603      	mov	r3, r0
 800d962:	75fb      	strb	r3, [r7, #23]
    break;
 800d964:	e01d      	b.n	800d9a2 <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE12:
    ret = SCSI_Write12(pdev, lun, cmd);
 800d966:	7afb      	ldrb	r3, [r7, #11]
 800d968:	687a      	ldr	r2, [r7, #4]
 800d96a:	4619      	mov	r1, r3
 800d96c:	68f8      	ldr	r0, [r7, #12]
 800d96e:	f000 fe8d 	bl	800e68c <SCSI_Write12>
 800d972:	4603      	mov	r3, r0
 800d974:	75fb      	strb	r3, [r7, #23]
    break;
 800d976:	e014      	b.n	800d9a2 <SCSI_ProcessCmd+0x192>

  case SCSI_VERIFY10:
    ret = SCSI_Verify10(pdev, lun, cmd);
 800d978:	7afb      	ldrb	r3, [r7, #11]
 800d97a:	687a      	ldr	r2, [r7, #4]
 800d97c:	4619      	mov	r1, r3
 800d97e:	68f8      	ldr	r0, [r7, #12]
 800d980:	f000 ff6c 	bl	800e85c <SCSI_Verify10>
 800d984:	4603      	mov	r3, r0
 800d986:	75fb      	strb	r3, [r7, #23]
    break;
 800d988:	e00b      	b.n	800d9a2 <SCSI_ProcessCmd+0x192>

  default:
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 800d98a:	7af9      	ldrb	r1, [r7, #11]
 800d98c:	2320      	movs	r3, #32
 800d98e:	2205      	movs	r2, #5
 800d990:	68f8      	ldr	r0, [r7, #12]
 800d992:	f000 fb61 	bl	800e058 <SCSI_SenseCode>
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800d996:	693b      	ldr	r3, [r7, #16]
 800d998:	2202      	movs	r2, #2
 800d99a:	725a      	strb	r2, [r3, #9]
    ret = -1;
 800d99c:	23ff      	movs	r3, #255	; 0xff
 800d99e:	75fb      	strb	r3, [r7, #23]
    break;
 800d9a0:	bf00      	nop
  }

  return ret;
 800d9a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	3718      	adds	r7, #24
 800d9aa:	46bd      	mov	sp, r7
 800d9ac:	bd80      	pop	{r7, pc}

0800d9ae <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800d9ae:	b580      	push	{r7, lr}
 800d9b0:	b086      	sub	sp, #24
 800d9b2:	af00      	add	r7, sp, #0
 800d9b4:	60f8      	str	r0, [r7, #12]
 800d9b6:	460b      	mov	r3, r1
 800d9b8:	607a      	str	r2, [r7, #4]
 800d9ba:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d9c2:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 800d9c4:	697a      	ldr	r2, [r7, #20]
 800d9c6:	f248 0318 	movw	r3, #32792	; 0x8018
 800d9ca:	4413      	add	r3, r2
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d00c      	beq.n	800d9ec <SCSI_TestUnitReady+0x3e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800d9d2:	697a      	ldr	r2, [r7, #20]
 800d9d4:	f248 031d 	movw	r3, #32797	; 0x801d
 800d9d8:	4413      	add	r3, r2
 800d9da:	7819      	ldrb	r1, [r3, #0]
 800d9dc:	2320      	movs	r3, #32
 800d9de:	2205      	movs	r2, #5
 800d9e0:	68f8      	ldr	r0, [r7, #12]
 800d9e2:	f000 fb39 	bl	800e058 <SCSI_SenseCode>

    return -1;
 800d9e6:	f04f 33ff 	mov.w	r3, #4294967295
 800d9ea:	e02c      	b.n	800da46 <SCSI_TestUnitReady+0x98>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800d9ec:	697a      	ldr	r2, [r7, #20]
 800d9ee:	f248 0362 	movw	r3, #32866	; 0x8062
 800d9f2:	4413      	add	r3, r2
 800d9f4:	781b      	ldrb	r3, [r3, #0]
 800d9f6:	2b02      	cmp	r3, #2
 800d9f8:	d10b      	bne.n	800da12 <SCSI_TestUnitReady+0x64>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800d9fa:	7af9      	ldrb	r1, [r7, #11]
 800d9fc:	233a      	movs	r3, #58	; 0x3a
 800d9fe:	2202      	movs	r2, #2
 800da00:	68f8      	ldr	r0, [r7, #12]
 800da02:	f000 fb29 	bl	800e058 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800da06:	697b      	ldr	r3, [r7, #20]
 800da08:	2205      	movs	r2, #5
 800da0a:	721a      	strb	r2, [r3, #8]
    return -1;
 800da0c:	f04f 33ff 	mov.w	r3, #4294967295
 800da10:	e019      	b.n	800da46 <SCSI_TestUnitReady+0x98>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800da18:	689b      	ldr	r3, [r3, #8]
 800da1a:	7afa      	ldrb	r2, [r7, #11]
 800da1c:	4610      	mov	r0, r2
 800da1e:	4798      	blx	r3
 800da20:	4603      	mov	r3, r0
 800da22:	2b00      	cmp	r3, #0
 800da24:	d00b      	beq.n	800da3e <SCSI_TestUnitReady+0x90>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800da26:	7af9      	ldrb	r1, [r7, #11]
 800da28:	233a      	movs	r3, #58	; 0x3a
 800da2a:	2202      	movs	r2, #2
 800da2c:	68f8      	ldr	r0, [r7, #12]
 800da2e:	f000 fb13 	bl	800e058 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800da32:	697b      	ldr	r3, [r7, #20]
 800da34:	2205      	movs	r2, #5
 800da36:	721a      	strb	r2, [r3, #8]

    return -1;
 800da38:	f04f 33ff 	mov.w	r3, #4294967295
 800da3c:	e003      	b.n	800da46 <SCSI_TestUnitReady+0x98>
  }
  hmsc->bot_data_length = 0U;
 800da3e:	697b      	ldr	r3, [r7, #20]
 800da40:	2200      	movs	r2, #0
 800da42:	60da      	str	r2, [r3, #12]

  return 0;
 800da44:	2300      	movs	r3, #0
}
 800da46:	4618      	mov	r0, r3
 800da48:	3718      	adds	r7, #24
 800da4a:	46bd      	mov	sp, r7
 800da4c:	bd80      	pop	{r7, pc}
	...

0800da50 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800da50:	b580      	push	{r7, lr}
 800da52:	b088      	sub	sp, #32
 800da54:	af00      	add	r7, sp, #0
 800da56:	60f8      	str	r0, [r7, #12]
 800da58:	460b      	mov	r3, r1
 800da5a:	607a      	str	r2, [r7, #4]
 800da5c:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800da64:	61bb      	str	r3, [r7, #24]

  if (hmsc->cbw.dDataLength == 0U)
 800da66:	69ba      	ldr	r2, [r7, #24]
 800da68:	f248 0318 	movw	r3, #32792	; 0x8018
 800da6c:	4413      	add	r3, r2
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	2b00      	cmp	r3, #0
 800da72:	d10c      	bne.n	800da8e <SCSI_Inquiry+0x3e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800da74:	69ba      	ldr	r2, [r7, #24]
 800da76:	f248 031d 	movw	r3, #32797	; 0x801d
 800da7a:	4413      	add	r3, r2
 800da7c:	7819      	ldrb	r1, [r3, #0]
 800da7e:	2320      	movs	r3, #32
 800da80:	2205      	movs	r2, #5
 800da82:	68f8      	ldr	r0, [r7, #12]
 800da84:	f000 fae8 	bl	800e058 <SCSI_SenseCode>
    return -1;
 800da88:	f04f 33ff 	mov.w	r3, #4294967295
 800da8c:	e04c      	b.n	800db28 <SCSI_Inquiry+0xd8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	3301      	adds	r3, #1
 800da92:	781b      	ldrb	r3, [r3, #0]
 800da94:	f003 0301 	and.w	r3, r3, #1
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d022      	beq.n	800dae2 <SCSI_Inquiry+0x92>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	3302      	adds	r3, #2
 800daa0:	781b      	ldrb	r3, [r3, #0]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d105      	bne.n	800dab2 <SCSI_Inquiry+0x62>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 800daa6:	2206      	movs	r2, #6
 800daa8:	4921      	ldr	r1, [pc, #132]	; (800db30 <SCSI_Inquiry+0xe0>)
 800daaa:	69b8      	ldr	r0, [r7, #24]
 800daac:	f001 f862 	bl	800eb74 <SCSI_UpdateBotData>
 800dab0:	e039      	b.n	800db26 <SCSI_Inquiry+0xd6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	3302      	adds	r3, #2
 800dab6:	781b      	ldrb	r3, [r3, #0]
 800dab8:	2b80      	cmp	r3, #128	; 0x80
 800daba:	d105      	bne.n	800dac8 <SCSI_Inquiry+0x78>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 800dabc:	2208      	movs	r2, #8
 800dabe:	491d      	ldr	r1, [pc, #116]	; (800db34 <SCSI_Inquiry+0xe4>)
 800dac0:	69b8      	ldr	r0, [r7, #24]
 800dac2:	f001 f857 	bl	800eb74 <SCSI_UpdateBotData>
 800dac6:	e02e      	b.n	800db26 <SCSI_Inquiry+0xd6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 800dac8:	69ba      	ldr	r2, [r7, #24]
 800daca:	f248 031d 	movw	r3, #32797	; 0x801d
 800dace:	4413      	add	r3, r2
 800dad0:	7819      	ldrb	r1, [r3, #0]
 800dad2:	2324      	movs	r3, #36	; 0x24
 800dad4:	2205      	movs	r2, #5
 800dad6:	68f8      	ldr	r0, [r7, #12]
 800dad8:	f000 fabe 	bl	800e058 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 800dadc:	f04f 33ff 	mov.w	r3, #4294967295
 800dae0:	e022      	b.n	800db28 <SCSI_Inquiry+0xd8>
    }
  }
  else
  {
    pPage = (uint8_t *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dae8:	69d9      	ldr	r1, [r3, #28]
 800daea:	7afa      	ldrb	r2, [r7, #11]
 800daec:	4613      	mov	r3, r2
 800daee:	00db      	lsls	r3, r3, #3
 800daf0:	4413      	add	r3, r2
 800daf2:	009b      	lsls	r3, r3, #2
 800daf4:	440b      	add	r3, r1
 800daf6:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 800daf8:	697b      	ldr	r3, [r7, #20]
 800dafa:	3304      	adds	r3, #4
 800dafc:	781b      	ldrb	r3, [r3, #0]
 800dafe:	b29b      	uxth	r3, r3
 800db00:	3305      	adds	r3, #5
 800db02:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	3304      	adds	r3, #4
 800db08:	781b      	ldrb	r3, [r3, #0]
 800db0a:	b29b      	uxth	r3, r3
 800db0c:	8bfa      	ldrh	r2, [r7, #30]
 800db0e:	429a      	cmp	r2, r3
 800db10:	d303      	bcc.n	800db1a <SCSI_Inquiry+0xca>
    {
      len = params[4];
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	3304      	adds	r3, #4
 800db16:	781b      	ldrb	r3, [r3, #0]
 800db18:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 800db1a:	8bfb      	ldrh	r3, [r7, #30]
 800db1c:	461a      	mov	r2, r3
 800db1e:	6979      	ldr	r1, [r7, #20]
 800db20:	69b8      	ldr	r0, [r7, #24]
 800db22:	f001 f827 	bl	800eb74 <SCSI_UpdateBotData>
  }

  return 0;
 800db26:	2300      	movs	r3, #0
}
 800db28:	4618      	mov	r0, r3
 800db2a:	3720      	adds	r7, #32
 800db2c:	46bd      	mov	sp, r7
 800db2e:	bd80      	pop	{r7, pc}
 800db30:	240000b4 	.word	0x240000b4
 800db34:	240000bc 	.word	0x240000bc

0800db38 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800db38:	b590      	push	{r4, r7, lr}
 800db3a:	b087      	sub	sp, #28
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	60f8      	str	r0, [r7, #12]
 800db40:	460b      	mov	r3, r1
 800db42:	607a      	str	r2, [r7, #4]
 800db44:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800db4c:	617b      	str	r3, [r7, #20]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800db54:	685c      	ldr	r4, [r3, #4]
 800db56:	697a      	ldr	r2, [r7, #20]
 800db58:	f248 0368 	movw	r3, #32872	; 0x8068
 800db5c:	4413      	add	r3, r2
 800db5e:	6979      	ldr	r1, [r7, #20]
 800db60:	f248 0264 	movw	r2, #32868	; 0x8064
 800db64:	440a      	add	r2, r1
 800db66:	7af8      	ldrb	r0, [r7, #11]
 800db68:	4619      	mov	r1, r3
 800db6a:	47a0      	blx	r4
 800db6c:	4603      	mov	r3, r0
 800db6e:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800db70:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800db74:	2b00      	cmp	r3, #0
 800db76:	d106      	bne.n	800db86 <SCSI_ReadCapacity10+0x4e>
 800db78:	697a      	ldr	r2, [r7, #20]
 800db7a:	f248 0362 	movw	r3, #32866	; 0x8062
 800db7e:	4413      	add	r3, r2
 800db80:	781b      	ldrb	r3, [r3, #0]
 800db82:	2b02      	cmp	r3, #2
 800db84:	d108      	bne.n	800db98 <SCSI_ReadCapacity10+0x60>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800db86:	7af9      	ldrb	r1, [r7, #11]
 800db88:	233a      	movs	r3, #58	; 0x3a
 800db8a:	2202      	movs	r2, #2
 800db8c:	68f8      	ldr	r0, [r7, #12]
 800db8e:	f000 fa63 	bl	800e058 <SCSI_SenseCode>
    return -1;
 800db92:	f04f 33ff 	mov.w	r3, #4294967295
 800db96:	e04f      	b.n	800dc38 <SCSI_ReadCapacity10+0x100>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800db98:	697a      	ldr	r2, [r7, #20]
 800db9a:	f248 0368 	movw	r3, #32872	; 0x8068
 800db9e:	4413      	add	r3, r2
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	3b01      	subs	r3, #1
 800dba4:	0e1b      	lsrs	r3, r3, #24
 800dba6:	b2da      	uxtb	r2, r3
 800dba8:	697b      	ldr	r3, [r7, #20]
 800dbaa:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800dbac:	697a      	ldr	r2, [r7, #20]
 800dbae:	f248 0368 	movw	r3, #32872	; 0x8068
 800dbb2:	4413      	add	r3, r2
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	3b01      	subs	r3, #1
 800dbb8:	0c1b      	lsrs	r3, r3, #16
 800dbba:	b2da      	uxtb	r2, r3
 800dbbc:	697b      	ldr	r3, [r7, #20]
 800dbbe:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800dbc0:	697a      	ldr	r2, [r7, #20]
 800dbc2:	f248 0368 	movw	r3, #32872	; 0x8068
 800dbc6:	4413      	add	r3, r2
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	3b01      	subs	r3, #1
 800dbcc:	0a1b      	lsrs	r3, r3, #8
 800dbce:	b2da      	uxtb	r2, r3
 800dbd0:	697b      	ldr	r3, [r7, #20]
 800dbd2:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800dbd4:	697a      	ldr	r2, [r7, #20]
 800dbd6:	f248 0368 	movw	r3, #32872	; 0x8068
 800dbda:	4413      	add	r3, r2
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	b2db      	uxtb	r3, r3
 800dbe0:	3b01      	subs	r3, #1
 800dbe2:	b2da      	uxtb	r2, r3
 800dbe4:	697b      	ldr	r3, [r7, #20]
 800dbe6:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800dbe8:	697a      	ldr	r2, [r7, #20]
 800dbea:	f248 0364 	movw	r3, #32868	; 0x8064
 800dbee:	4413      	add	r3, r2
 800dbf0:	881b      	ldrh	r3, [r3, #0]
 800dbf2:	161b      	asrs	r3, r3, #24
 800dbf4:	b2da      	uxtb	r2, r3
 800dbf6:	697b      	ldr	r3, [r7, #20]
 800dbf8:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800dbfa:	697a      	ldr	r2, [r7, #20]
 800dbfc:	f248 0364 	movw	r3, #32868	; 0x8064
 800dc00:	4413      	add	r3, r2
 800dc02:	881b      	ldrh	r3, [r3, #0]
 800dc04:	141b      	asrs	r3, r3, #16
 800dc06:	b2da      	uxtb	r2, r3
 800dc08:	697b      	ldr	r3, [r7, #20]
 800dc0a:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800dc0c:	697a      	ldr	r2, [r7, #20]
 800dc0e:	f248 0364 	movw	r3, #32868	; 0x8064
 800dc12:	4413      	add	r3, r2
 800dc14:	881b      	ldrh	r3, [r3, #0]
 800dc16:	0a1b      	lsrs	r3, r3, #8
 800dc18:	b29b      	uxth	r3, r3
 800dc1a:	b2da      	uxtb	r2, r3
 800dc1c:	697b      	ldr	r3, [r7, #20]
 800dc1e:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800dc20:	697a      	ldr	r2, [r7, #20]
 800dc22:	f248 0364 	movw	r3, #32868	; 0x8064
 800dc26:	4413      	add	r3, r2
 800dc28:	881b      	ldrh	r3, [r3, #0]
 800dc2a:	b2da      	uxtb	r2, r3
 800dc2c:	697b      	ldr	r3, [r7, #20]
 800dc2e:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 800dc30:	697b      	ldr	r3, [r7, #20]
 800dc32:	2208      	movs	r2, #8
 800dc34:	60da      	str	r2, [r3, #12]

  return 0;
 800dc36:	2300      	movs	r3, #0

}
 800dc38:	4618      	mov	r0, r3
 800dc3a:	371c      	adds	r7, #28
 800dc3c:	46bd      	mov	sp, r7
 800dc3e:	bd90      	pop	{r4, r7, pc}

0800dc40 <SCSI_ReadCapacity16>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800dc40:	b590      	push	{r4, r7, lr}
 800dc42:	b089      	sub	sp, #36	; 0x24
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	60f8      	str	r0, [r7, #12]
 800dc48:	460b      	mov	r3, r1
 800dc4a:	607a      	str	r2, [r7, #4]
 800dc4c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dc54:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dc5c:	685c      	ldr	r4, [r3, #4]
 800dc5e:	69ba      	ldr	r2, [r7, #24]
 800dc60:	f248 0368 	movw	r3, #32872	; 0x8068
 800dc64:	4413      	add	r3, r2
 800dc66:	69b9      	ldr	r1, [r7, #24]
 800dc68:	f248 0264 	movw	r2, #32868	; 0x8064
 800dc6c:	440a      	add	r2, r1
 800dc6e:	7af8      	ldrb	r0, [r7, #11]
 800dc70:	4619      	mov	r1, r3
 800dc72:	47a0      	blx	r4
 800dc74:	4603      	mov	r3, r0
 800dc76:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800dc78:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d106      	bne.n	800dc8e <SCSI_ReadCapacity16+0x4e>
 800dc80:	69ba      	ldr	r2, [r7, #24]
 800dc82:	f248 0362 	movw	r3, #32866	; 0x8062
 800dc86:	4413      	add	r3, r2
 800dc88:	781b      	ldrb	r3, [r3, #0]
 800dc8a:	2b02      	cmp	r3, #2
 800dc8c:	d108      	bne.n	800dca0 <SCSI_ReadCapacity16+0x60>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800dc8e:	7af9      	ldrb	r1, [r7, #11]
 800dc90:	233a      	movs	r3, #58	; 0x3a
 800dc92:	2202      	movs	r2, #2
 800dc94:	68f8      	ldr	r0, [r7, #12]
 800dc96:	f000 f9df 	bl	800e058 <SCSI_SenseCode>
    return -1;
 800dc9a:	f04f 33ff 	mov.w	r3, #4294967295
 800dc9e:	e084      	b.n	800ddaa <SCSI_ReadCapacity16+0x16a>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	330a      	adds	r3, #10
 800dca4:	781b      	ldrb	r3, [r3, #0]
 800dca6:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	330b      	adds	r3, #11
 800dcac:	781b      	ldrb	r3, [r3, #0]
 800dcae:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800dcb0:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	330c      	adds	r3, #12
 800dcb6:	781b      	ldrb	r3, [r3, #0]
 800dcb8:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800dcba:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 800dcbc:	687a      	ldr	r2, [r7, #4]
 800dcbe:	320d      	adds	r2, #13
 800dcc0:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800dcc2:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800dcc4:	69bb      	ldr	r3, [r7, #24]
 800dcc6:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800dcc8:	2300      	movs	r3, #0
 800dcca:	77fb      	strb	r3, [r7, #31]
 800dccc:	e007      	b.n	800dcde <SCSI_ReadCapacity16+0x9e>
  {
    hmsc->bot_data[idx] = 0U;
 800dcce:	7ffb      	ldrb	r3, [r7, #31]
 800dcd0:	69ba      	ldr	r2, [r7, #24]
 800dcd2:	4413      	add	r3, r2
 800dcd4:	2200      	movs	r2, #0
 800dcd6:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800dcd8:	7ffb      	ldrb	r3, [r7, #31]
 800dcda:	3301      	adds	r3, #1
 800dcdc:	77fb      	strb	r3, [r7, #31]
 800dcde:	7ffa      	ldrb	r2, [r7, #31]
 800dce0:	69bb      	ldr	r3, [r7, #24]
 800dce2:	68db      	ldr	r3, [r3, #12]
 800dce4:	429a      	cmp	r2, r3
 800dce6:	d3f2      	bcc.n	800dcce <SCSI_ReadCapacity16+0x8e>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800dce8:	69ba      	ldr	r2, [r7, #24]
 800dcea:	f248 0368 	movw	r3, #32872	; 0x8068
 800dcee:	4413      	add	r3, r2
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	3b01      	subs	r3, #1
 800dcf4:	0e1b      	lsrs	r3, r3, #24
 800dcf6:	b2da      	uxtb	r2, r3
 800dcf8:	69bb      	ldr	r3, [r7, #24]
 800dcfa:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800dcfc:	69ba      	ldr	r2, [r7, #24]
 800dcfe:	f248 0368 	movw	r3, #32872	; 0x8068
 800dd02:	4413      	add	r3, r2
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	3b01      	subs	r3, #1
 800dd08:	0c1b      	lsrs	r3, r3, #16
 800dd0a:	b2da      	uxtb	r2, r3
 800dd0c:	69bb      	ldr	r3, [r7, #24]
 800dd0e:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800dd10:	69ba      	ldr	r2, [r7, #24]
 800dd12:	f248 0368 	movw	r3, #32872	; 0x8068
 800dd16:	4413      	add	r3, r2
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	3b01      	subs	r3, #1
 800dd1c:	0a1b      	lsrs	r3, r3, #8
 800dd1e:	b2da      	uxtb	r2, r3
 800dd20:	69bb      	ldr	r3, [r7, #24]
 800dd22:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800dd24:	69ba      	ldr	r2, [r7, #24]
 800dd26:	f248 0368 	movw	r3, #32872	; 0x8068
 800dd2a:	4413      	add	r3, r2
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	b2db      	uxtb	r3, r3
 800dd30:	3b01      	subs	r3, #1
 800dd32:	b2da      	uxtb	r2, r3
 800dd34:	69bb      	ldr	r3, [r7, #24]
 800dd36:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800dd38:	69ba      	ldr	r2, [r7, #24]
 800dd3a:	f248 0364 	movw	r3, #32868	; 0x8064
 800dd3e:	4413      	add	r3, r2
 800dd40:	881b      	ldrh	r3, [r3, #0]
 800dd42:	161b      	asrs	r3, r3, #24
 800dd44:	b2da      	uxtb	r2, r3
 800dd46:	69bb      	ldr	r3, [r7, #24]
 800dd48:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800dd4a:	69ba      	ldr	r2, [r7, #24]
 800dd4c:	f248 0364 	movw	r3, #32868	; 0x8064
 800dd50:	4413      	add	r3, r2
 800dd52:	881b      	ldrh	r3, [r3, #0]
 800dd54:	141b      	asrs	r3, r3, #16
 800dd56:	b2da      	uxtb	r2, r3
 800dd58:	69bb      	ldr	r3, [r7, #24]
 800dd5a:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800dd5c:	69ba      	ldr	r2, [r7, #24]
 800dd5e:	f248 0364 	movw	r3, #32868	; 0x8064
 800dd62:	4413      	add	r3, r2
 800dd64:	881b      	ldrh	r3, [r3, #0]
 800dd66:	0a1b      	lsrs	r3, r3, #8
 800dd68:	b29b      	uxth	r3, r3
 800dd6a:	b2da      	uxtb	r2, r3
 800dd6c:	69bb      	ldr	r3, [r7, #24]
 800dd6e:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 800dd70:	69ba      	ldr	r2, [r7, #24]
 800dd72:	f248 0364 	movw	r3, #32868	; 0x8064
 800dd76:	4413      	add	r3, r2
 800dd78:	881b      	ldrh	r3, [r3, #0]
 800dd7a:	b2da      	uxtb	r2, r3
 800dd7c:	69bb      	ldr	r3, [r7, #24]
 800dd7e:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	330a      	adds	r3, #10
 800dd84:	781b      	ldrb	r3, [r3, #0]
 800dd86:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	330b      	adds	r3, #11
 800dd8c:	781b      	ldrb	r3, [r3, #0]
 800dd8e:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800dd90:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	330c      	adds	r3, #12
 800dd96:	781b      	ldrb	r3, [r3, #0]
 800dd98:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800dd9a:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 800dd9c:	687a      	ldr	r2, [r7, #4]
 800dd9e:	320d      	adds	r2, #13
 800dda0:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800dda2:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800dda4:	69bb      	ldr	r3, [r7, #24]
 800dda6:	60da      	str	r2, [r3, #12]

  return 0;
 800dda8:	2300      	movs	r3, #0
}
 800ddaa:	4618      	mov	r0, r3
 800ddac:	3724      	adds	r7, #36	; 0x24
 800ddae:	46bd      	mov	sp, r7
 800ddb0:	bd90      	pop	{r4, r7, pc}

0800ddb2 <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ddb2:	b580      	push	{r7, lr}
 800ddb4:	b088      	sub	sp, #32
 800ddb6:	af00      	add	r7, sp, #0
 800ddb8:	60f8      	str	r0, [r7, #12]
 800ddba:	460b      	mov	r3, r1
 800ddbc:	607a      	str	r2, [r7, #4]
 800ddbe:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ddc6:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ddce:	685b      	ldr	r3, [r3, #4]
 800ddd0:	f107 0214 	add.w	r2, r7, #20
 800ddd4:	f107 0110 	add.w	r1, r7, #16
 800ddd8:	7af8      	ldrb	r0, [r7, #11]
 800ddda:	4798      	blx	r3
 800dddc:	4603      	mov	r3, r0
 800ddde:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800dde0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d106      	bne.n	800ddf6 <SCSI_ReadFormatCapacity+0x44>
 800dde8:	69ba      	ldr	r2, [r7, #24]
 800ddea:	f248 0362 	movw	r3, #32866	; 0x8062
 800ddee:	4413      	add	r3, r2
 800ddf0:	781b      	ldrb	r3, [r3, #0]
 800ddf2:	2b02      	cmp	r3, #2
 800ddf4:	d108      	bne.n	800de08 <SCSI_ReadFormatCapacity+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800ddf6:	7af9      	ldrb	r1, [r7, #11]
 800ddf8:	233a      	movs	r3, #58	; 0x3a
 800ddfa:	2202      	movs	r2, #2
 800ddfc:	68f8      	ldr	r0, [r7, #12]
 800ddfe:	f000 f92b 	bl	800e058 <SCSI_SenseCode>
    return -1;
 800de02:	f04f 33ff 	mov.w	r3, #4294967295
 800de06:	e03e      	b.n	800de86 <SCSI_ReadFormatCapacity+0xd4>
  }

  for (i = 0U; i < 12U ; i++)
 800de08:	2300      	movs	r3, #0
 800de0a:	83fb      	strh	r3, [r7, #30]
 800de0c:	e007      	b.n	800de1e <SCSI_ReadFormatCapacity+0x6c>
  {
    hmsc->bot_data[i] = 0U;
 800de0e:	8bfb      	ldrh	r3, [r7, #30]
 800de10:	69ba      	ldr	r2, [r7, #24]
 800de12:	4413      	add	r3, r2
 800de14:	2200      	movs	r2, #0
 800de16:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 800de18:	8bfb      	ldrh	r3, [r7, #30]
 800de1a:	3301      	adds	r3, #1
 800de1c:	83fb      	strh	r3, [r7, #30]
 800de1e:	8bfb      	ldrh	r3, [r7, #30]
 800de20:	2b0b      	cmp	r3, #11
 800de22:	d9f4      	bls.n	800de0e <SCSI_ReadFormatCapacity+0x5c>
  }

  hmsc->bot_data[3] = 0x08U;
 800de24:	69bb      	ldr	r3, [r7, #24]
 800de26:	2208      	movs	r2, #8
 800de28:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800de2a:	693b      	ldr	r3, [r7, #16]
 800de2c:	3b01      	subs	r3, #1
 800de2e:	0e1b      	lsrs	r3, r3, #24
 800de30:	b2da      	uxtb	r2, r3
 800de32:	69bb      	ldr	r3, [r7, #24]
 800de34:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800de36:	693b      	ldr	r3, [r7, #16]
 800de38:	3b01      	subs	r3, #1
 800de3a:	0c1b      	lsrs	r3, r3, #16
 800de3c:	b2da      	uxtb	r2, r3
 800de3e:	69bb      	ldr	r3, [r7, #24]
 800de40:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800de42:	693b      	ldr	r3, [r7, #16]
 800de44:	3b01      	subs	r3, #1
 800de46:	0a1b      	lsrs	r3, r3, #8
 800de48:	b2da      	uxtb	r2, r3
 800de4a:	69bb      	ldr	r3, [r7, #24]
 800de4c:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800de4e:	693b      	ldr	r3, [r7, #16]
 800de50:	b2db      	uxtb	r3, r3
 800de52:	3b01      	subs	r3, #1
 800de54:	b2da      	uxtb	r2, r3
 800de56:	69bb      	ldr	r3, [r7, #24]
 800de58:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 800de5a:	69bb      	ldr	r3, [r7, #24]
 800de5c:	2202      	movs	r2, #2
 800de5e:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 800de60:	8abb      	ldrh	r3, [r7, #20]
 800de62:	141b      	asrs	r3, r3, #16
 800de64:	b2da      	uxtb	r2, r3
 800de66:	69bb      	ldr	r3, [r7, #24]
 800de68:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800de6a:	8abb      	ldrh	r3, [r7, #20]
 800de6c:	0a1b      	lsrs	r3, r3, #8
 800de6e:	b29b      	uxth	r3, r3
 800de70:	b2da      	uxtb	r2, r3
 800de72:	69bb      	ldr	r3, [r7, #24]
 800de74:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 800de76:	8abb      	ldrh	r3, [r7, #20]
 800de78:	b2da      	uxtb	r2, r3
 800de7a:	69bb      	ldr	r3, [r7, #24]
 800de7c:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 800de7e:	69bb      	ldr	r3, [r7, #24]
 800de80:	220c      	movs	r2, #12
 800de82:	60da      	str	r2, [r3, #12]

  return 0;
 800de84:	2300      	movs	r3, #0
}
 800de86:	4618      	mov	r0, r3
 800de88:	3720      	adds	r7, #32
 800de8a:	46bd      	mov	sp, r7
 800de8c:	bd80      	pop	{r7, pc}
	...

0800de90 <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800de90:	b580      	push	{r7, lr}
 800de92:	b086      	sub	sp, #24
 800de94:	af00      	add	r7, sp, #0
 800de96:	60f8      	str	r0, [r7, #12]
 800de98:	460b      	mov	r3, r1
 800de9a:	607a      	str	r2, [r7, #4]
 800de9c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dea4:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 800dea6:	2317      	movs	r3, #23
 800dea8:	82fb      	strh	r3, [r7, #22]

  if (params[4] <= len)
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	3304      	adds	r3, #4
 800deae:	781b      	ldrb	r3, [r3, #0]
 800deb0:	b29b      	uxth	r3, r3
 800deb2:	8afa      	ldrh	r2, [r7, #22]
 800deb4:	429a      	cmp	r2, r3
 800deb6:	d303      	bcc.n	800dec0 <SCSI_ModeSense6+0x30>
  {
    len = params[4];
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	3304      	adds	r3, #4
 800debc:	781b      	ldrb	r3, [r3, #0]
 800debe:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 800dec0:	8afb      	ldrh	r3, [r7, #22]
 800dec2:	461a      	mov	r2, r3
 800dec4:	4904      	ldr	r1, [pc, #16]	; (800ded8 <SCSI_ModeSense6+0x48>)
 800dec6:	6938      	ldr	r0, [r7, #16]
 800dec8:	f000 fe54 	bl	800eb74 <SCSI_UpdateBotData>

  return 0;
 800decc:	2300      	movs	r3, #0
}
 800dece:	4618      	mov	r0, r3
 800ded0:	3718      	adds	r7, #24
 800ded2:	46bd      	mov	sp, r7
 800ded4:	bd80      	pop	{r7, pc}
 800ded6:	bf00      	nop
 800ded8:	240000c4 	.word	0x240000c4

0800dedc <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800dedc:	b580      	push	{r7, lr}
 800dede:	b086      	sub	sp, #24
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	60f8      	str	r0, [r7, #12]
 800dee4:	460b      	mov	r3, r1
 800dee6:	607a      	str	r2, [r7, #4]
 800dee8:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800def0:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 800def2:	231b      	movs	r3, #27
 800def4:	82fb      	strh	r3, [r7, #22]

  if (params[8] <= len)
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	3308      	adds	r3, #8
 800defa:	781b      	ldrb	r3, [r3, #0]
 800defc:	b29b      	uxth	r3, r3
 800defe:	8afa      	ldrh	r2, [r7, #22]
 800df00:	429a      	cmp	r2, r3
 800df02:	d303      	bcc.n	800df0c <SCSI_ModeSense10+0x30>
  {
    len = params[8];
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	3308      	adds	r3, #8
 800df08:	781b      	ldrb	r3, [r3, #0]
 800df0a:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 800df0c:	8afb      	ldrh	r3, [r7, #22]
 800df0e:	461a      	mov	r2, r3
 800df10:	4904      	ldr	r1, [pc, #16]	; (800df24 <SCSI_ModeSense10+0x48>)
 800df12:	6938      	ldr	r0, [r7, #16]
 800df14:	f000 fe2e 	bl	800eb74 <SCSI_UpdateBotData>

  return 0;
 800df18:	2300      	movs	r3, #0
}
 800df1a:	4618      	mov	r0, r3
 800df1c:	3718      	adds	r7, #24
 800df1e:	46bd      	mov	sp, r7
 800df20:	bd80      	pop	{r7, pc}
 800df22:	bf00      	nop
 800df24:	240000dc 	.word	0x240000dc

0800df28 <SCSI_RequestSense>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800df28:	b580      	push	{r7, lr}
 800df2a:	b086      	sub	sp, #24
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	60f8      	str	r0, [r7, #12]
 800df30:	460b      	mov	r3, r1
 800df32:	607a      	str	r2, [r7, #4]
 800df34:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800df3c:	613b      	str	r3, [r7, #16]

  if (hmsc->cbw.dDataLength == 0U)
 800df3e:	693a      	ldr	r2, [r7, #16]
 800df40:	f248 0318 	movw	r3, #32792	; 0x8018
 800df44:	4413      	add	r3, r2
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d10c      	bne.n	800df66 <SCSI_RequestSense+0x3e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800df4c:	693a      	ldr	r2, [r7, #16]
 800df4e:	f248 031d 	movw	r3, #32797	; 0x801d
 800df52:	4413      	add	r3, r2
 800df54:	7819      	ldrb	r1, [r3, #0]
 800df56:	2320      	movs	r3, #32
 800df58:	2205      	movs	r2, #5
 800df5a:	68f8      	ldr	r0, [r7, #12]
 800df5c:	f000 f87c 	bl	800e058 <SCSI_SenseCode>
    return -1;
 800df60:	f04f 33ff 	mov.w	r3, #4294967295
 800df64:	e074      	b.n	800e050 <SCSI_RequestSense+0x128>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800df66:	2300      	movs	r3, #0
 800df68:	75fb      	strb	r3, [r7, #23]
 800df6a:	e007      	b.n	800df7c <SCSI_RequestSense+0x54>
  {
    hmsc->bot_data[i] = 0U;
 800df6c:	7dfb      	ldrb	r3, [r7, #23]
 800df6e:	693a      	ldr	r2, [r7, #16]
 800df70:	4413      	add	r3, r2
 800df72:	2200      	movs	r2, #0
 800df74:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800df76:	7dfb      	ldrb	r3, [r7, #23]
 800df78:	3301      	adds	r3, #1
 800df7a:	75fb      	strb	r3, [r7, #23]
 800df7c:	7dfb      	ldrb	r3, [r7, #23]
 800df7e:	2b11      	cmp	r3, #17
 800df80:	d9f4      	bls.n	800df6c <SCSI_RequestSense+0x44>
  }

  hmsc->bot_data[0] = 0x70U;
 800df82:	693b      	ldr	r3, [r7, #16]
 800df84:	2270      	movs	r2, #112	; 0x70
 800df86:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800df88:	693b      	ldr	r3, [r7, #16]
 800df8a:	220c      	movs	r2, #12
 800df8c:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800df8e:	693a      	ldr	r2, [r7, #16]
 800df90:	f248 0360 	movw	r3, #32864	; 0x8060
 800df94:	4413      	add	r3, r2
 800df96:	781a      	ldrb	r2, [r3, #0]
 800df98:	6939      	ldr	r1, [r7, #16]
 800df9a:	f248 0361 	movw	r3, #32865	; 0x8061
 800df9e:	440b      	add	r3, r1
 800dfa0:	781b      	ldrb	r3, [r3, #0]
 800dfa2:	429a      	cmp	r2, r3
 800dfa4:	d045      	beq.n	800e032 <SCSI_RequestSense+0x10a>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800dfa6:	693a      	ldr	r2, [r7, #16]
 800dfa8:	f248 0360 	movw	r3, #32864	; 0x8060
 800dfac:	4413      	add	r3, r2
 800dfae:	781b      	ldrb	r3, [r3, #0]
 800dfb0:	4619      	mov	r1, r3
 800dfb2:	693a      	ldr	r2, [r7, #16]
 800dfb4:	f241 0308 	movw	r3, #4104	; 0x1008
 800dfb8:	440b      	add	r3, r1
 800dfba:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 800dfbe:	693b      	ldr	r3, [r7, #16]
 800dfc0:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800dfc2:	693a      	ldr	r2, [r7, #16]
 800dfc4:	f248 0360 	movw	r3, #32864	; 0x8060
 800dfc8:	4413      	add	r3, r2
 800dfca:	781b      	ldrb	r3, [r3, #0]
 800dfcc:	4619      	mov	r1, r3
 800dfce:	693a      	ldr	r2, [r7, #16]
 800dfd0:	f241 0308 	movw	r3, #4104	; 0x1008
 800dfd4:	440b      	add	r3, r1
 800dfd6:	00db      	lsls	r3, r3, #3
 800dfd8:	4413      	add	r3, r2
 800dfda:	791a      	ldrb	r2, [r3, #4]
 800dfdc:	693b      	ldr	r3, [r7, #16]
 800dfde:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800dfe0:	693a      	ldr	r2, [r7, #16]
 800dfe2:	f248 0360 	movw	r3, #32864	; 0x8060
 800dfe6:	4413      	add	r3, r2
 800dfe8:	781b      	ldrb	r3, [r3, #0]
 800dfea:	4619      	mov	r1, r3
 800dfec:	693a      	ldr	r2, [r7, #16]
 800dfee:	f241 0308 	movw	r3, #4104	; 0x1008
 800dff2:	440b      	add	r3, r1
 800dff4:	00db      	lsls	r3, r3, #3
 800dff6:	4413      	add	r3, r2
 800dff8:	795a      	ldrb	r2, [r3, #5]
 800dffa:	693b      	ldr	r3, [r7, #16]
 800dffc:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 800dffe:	693a      	ldr	r2, [r7, #16]
 800e000:	f248 0360 	movw	r3, #32864	; 0x8060
 800e004:	4413      	add	r3, r2
 800e006:	781b      	ldrb	r3, [r3, #0]
 800e008:	3301      	adds	r3, #1
 800e00a:	b2d9      	uxtb	r1, r3
 800e00c:	693a      	ldr	r2, [r7, #16]
 800e00e:	f248 0360 	movw	r3, #32864	; 0x8060
 800e012:	4413      	add	r3, r2
 800e014:	460a      	mov	r2, r1
 800e016:	701a      	strb	r2, [r3, #0]

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800e018:	693a      	ldr	r2, [r7, #16]
 800e01a:	f248 0360 	movw	r3, #32864	; 0x8060
 800e01e:	4413      	add	r3, r2
 800e020:	781b      	ldrb	r3, [r3, #0]
 800e022:	2b04      	cmp	r3, #4
 800e024:	d105      	bne.n	800e032 <SCSI_RequestSense+0x10a>
    {
      hmsc->scsi_sense_head = 0U;
 800e026:	693a      	ldr	r2, [r7, #16]
 800e028:	f248 0360 	movw	r3, #32864	; 0x8060
 800e02c:	4413      	add	r3, r2
 800e02e:	2200      	movs	r2, #0
 800e030:	701a      	strb	r2, [r3, #0]
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800e032:	693b      	ldr	r3, [r7, #16]
 800e034:	2212      	movs	r2, #18
 800e036:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	3304      	adds	r3, #4
 800e03c:	781b      	ldrb	r3, [r3, #0]
 800e03e:	2b12      	cmp	r3, #18
 800e040:	d805      	bhi.n	800e04e <SCSI_RequestSense+0x126>
  {
    hmsc->bot_data_length = params[4];
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	3304      	adds	r3, #4
 800e046:	781b      	ldrb	r3, [r3, #0]
 800e048:	461a      	mov	r2, r3
 800e04a:	693b      	ldr	r3, [r7, #16]
 800e04c:	60da      	str	r2, [r3, #12]
  }

  return 0;
 800e04e:	2300      	movs	r3, #0
}
 800e050:	4618      	mov	r0, r3
 800e052:	3718      	adds	r7, #24
 800e054:	46bd      	mov	sp, r7
 800e056:	bd80      	pop	{r7, pc}

0800e058 <SCSI_SenseCode>:
* @param  ASC: Additional Sense Code
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800e058:	b480      	push	{r7}
 800e05a:	b085      	sub	sp, #20
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	6078      	str	r0, [r7, #4]
 800e060:	4608      	mov	r0, r1
 800e062:	4611      	mov	r1, r2
 800e064:	461a      	mov	r2, r3
 800e066:	4603      	mov	r3, r0
 800e068:	70fb      	strb	r3, [r7, #3]
 800e06a:	460b      	mov	r3, r1
 800e06c:	70bb      	strb	r3, [r7, #2]
 800e06e:	4613      	mov	r3, r2
 800e070:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e078:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800e07a:	68fa      	ldr	r2, [r7, #12]
 800e07c:	f248 0361 	movw	r3, #32865	; 0x8061
 800e080:	4413      	add	r3, r2
 800e082:	781b      	ldrb	r3, [r3, #0]
 800e084:	4619      	mov	r1, r3
 800e086:	68fa      	ldr	r2, [r7, #12]
 800e088:	f241 0308 	movw	r3, #4104	; 0x1008
 800e08c:	440b      	add	r3, r1
 800e08e:	78b9      	ldrb	r1, [r7, #2]
 800e090:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800e094:	68fa      	ldr	r2, [r7, #12]
 800e096:	f248 0361 	movw	r3, #32865	; 0x8061
 800e09a:	4413      	add	r3, r2
 800e09c:	781b      	ldrb	r3, [r3, #0]
 800e09e:	4619      	mov	r1, r3
 800e0a0:	68fa      	ldr	r2, [r7, #12]
 800e0a2:	f241 0308 	movw	r3, #4104	; 0x1008
 800e0a6:	440b      	add	r3, r1
 800e0a8:	00db      	lsls	r3, r3, #3
 800e0aa:	4413      	add	r3, r2
 800e0ac:	787a      	ldrb	r2, [r7, #1]
 800e0ae:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 800e0b0:	68fa      	ldr	r2, [r7, #12]
 800e0b2:	f248 0361 	movw	r3, #32865	; 0x8061
 800e0b6:	4413      	add	r3, r2
 800e0b8:	781b      	ldrb	r3, [r3, #0]
 800e0ba:	4619      	mov	r1, r3
 800e0bc:	68fa      	ldr	r2, [r7, #12]
 800e0be:	f241 0308 	movw	r3, #4104	; 0x1008
 800e0c2:	440b      	add	r3, r1
 800e0c4:	00db      	lsls	r3, r3, #3
 800e0c6:	4413      	add	r3, r2
 800e0c8:	2200      	movs	r2, #0
 800e0ca:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 800e0cc:	68fa      	ldr	r2, [r7, #12]
 800e0ce:	f248 0361 	movw	r3, #32865	; 0x8061
 800e0d2:	4413      	add	r3, r2
 800e0d4:	781b      	ldrb	r3, [r3, #0]
 800e0d6:	3301      	adds	r3, #1
 800e0d8:	b2d9      	uxtb	r1, r3
 800e0da:	68fa      	ldr	r2, [r7, #12]
 800e0dc:	f248 0361 	movw	r3, #32865	; 0x8061
 800e0e0:	4413      	add	r3, r2
 800e0e2:	460a      	mov	r2, r1
 800e0e4:	701a      	strb	r2, [r3, #0]

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800e0e6:	68fa      	ldr	r2, [r7, #12]
 800e0e8:	f248 0361 	movw	r3, #32865	; 0x8061
 800e0ec:	4413      	add	r3, r2
 800e0ee:	781b      	ldrb	r3, [r3, #0]
 800e0f0:	2b04      	cmp	r3, #4
 800e0f2:	d105      	bne.n	800e100 <SCSI_SenseCode+0xa8>
  {
    hmsc->scsi_sense_tail = 0U;
 800e0f4:	68fa      	ldr	r2, [r7, #12]
 800e0f6:	f248 0361 	movw	r3, #32865	; 0x8061
 800e0fa:	4413      	add	r3, r2
 800e0fc:	2200      	movs	r2, #0
 800e0fe:	701a      	strb	r2, [r3, #0]
  }
}
 800e100:	bf00      	nop
 800e102:	3714      	adds	r7, #20
 800e104:	46bd      	mov	sp, r7
 800e106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e10a:	4770      	bx	lr

0800e10c <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e10c:	b580      	push	{r7, lr}
 800e10e:	b086      	sub	sp, #24
 800e110:	af00      	add	r7, sp, #0
 800e112:	60f8      	str	r0, [r7, #12]
 800e114:	460b      	mov	r3, r1
 800e116:	607a      	str	r2, [r7, #4]
 800e118:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e120:	617b      	str	r3, [r7, #20]

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800e122:	697a      	ldr	r2, [r7, #20]
 800e124:	f248 0362 	movw	r3, #32866	; 0x8062
 800e128:	4413      	add	r3, r2
 800e12a:	781b      	ldrb	r3, [r3, #0]
 800e12c:	2b01      	cmp	r3, #1
 800e12e:	d10f      	bne.n	800e150 <SCSI_StartStopUnit+0x44>
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	3304      	adds	r3, #4
 800e134:	781b      	ldrb	r3, [r3, #0]
 800e136:	f003 0303 	and.w	r3, r3, #3
 800e13a:	2b02      	cmp	r3, #2
 800e13c:	d108      	bne.n	800e150 <SCSI_StartStopUnit+0x44>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800e13e:	7af9      	ldrb	r1, [r7, #11]
 800e140:	2324      	movs	r3, #36	; 0x24
 800e142:	2205      	movs	r2, #5
 800e144:	68f8      	ldr	r0, [r7, #12]
 800e146:	f7ff ff87 	bl	800e058 <SCSI_SenseCode>

    return -1;
 800e14a:	f04f 33ff 	mov.w	r3, #4294967295
 800e14e:	e02c      	b.n	800e1aa <SCSI_StartStopUnit+0x9e>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	3304      	adds	r3, #4
 800e154:	781b      	ldrb	r3, [r3, #0]
 800e156:	f003 0303 	and.w	r3, r3, #3
 800e15a:	2b01      	cmp	r3, #1
 800e15c:	d106      	bne.n	800e16c <SCSI_StartStopUnit+0x60>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800e15e:	697a      	ldr	r2, [r7, #20]
 800e160:	f248 0362 	movw	r3, #32866	; 0x8062
 800e164:	4413      	add	r3, r2
 800e166:	2200      	movs	r2, #0
 800e168:	701a      	strb	r2, [r3, #0]
 800e16a:	e01a      	b.n	800e1a2 <SCSI_StartStopUnit+0x96>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	3304      	adds	r3, #4
 800e170:	781b      	ldrb	r3, [r3, #0]
 800e172:	f003 0303 	and.w	r3, r3, #3
 800e176:	2b02      	cmp	r3, #2
 800e178:	d106      	bne.n	800e188 <SCSI_StartStopUnit+0x7c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 800e17a:	697a      	ldr	r2, [r7, #20]
 800e17c:	f248 0362 	movw	r3, #32866	; 0x8062
 800e180:	4413      	add	r3, r2
 800e182:	2202      	movs	r2, #2
 800e184:	701a      	strb	r2, [r3, #0]
 800e186:	e00c      	b.n	800e1a2 <SCSI_StartStopUnit+0x96>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	3304      	adds	r3, #4
 800e18c:	781b      	ldrb	r3, [r3, #0]
 800e18e:	f003 0303 	and.w	r3, r3, #3
 800e192:	2b03      	cmp	r3, #3
 800e194:	d105      	bne.n	800e1a2 <SCSI_StartStopUnit+0x96>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800e196:	697a      	ldr	r2, [r7, #20]
 800e198:	f248 0362 	movw	r3, #32866	; 0x8062
 800e19c:	4413      	add	r3, r2
 800e19e:	2200      	movs	r2, #0
 800e1a0:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 800e1a2:	697b      	ldr	r3, [r7, #20]
 800e1a4:	2200      	movs	r2, #0
 800e1a6:	60da      	str	r2, [r3, #12]

  return 0;
 800e1a8:	2300      	movs	r3, #0
}
 800e1aa:	4618      	mov	r0, r3
 800e1ac:	3718      	adds	r7, #24
 800e1ae:	46bd      	mov	sp, r7
 800e1b0:	bd80      	pop	{r7, pc}

0800e1b2 <SCSI_AllowPreventRemovable>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e1b2:	b480      	push	{r7}
 800e1b4:	b087      	sub	sp, #28
 800e1b6:	af00      	add	r7, sp, #0
 800e1b8:	60f8      	str	r0, [r7, #12]
 800e1ba:	460b      	mov	r3, r1
 800e1bc:	607a      	str	r2, [r7, #4]
 800e1be:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e1c6:	617b      	str	r3, [r7, #20]

  if (params[4] == 0U)
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	3304      	adds	r3, #4
 800e1cc:	781b      	ldrb	r3, [r3, #0]
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d106      	bne.n	800e1e0 <SCSI_AllowPreventRemovable+0x2e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800e1d2:	697a      	ldr	r2, [r7, #20]
 800e1d4:	f248 0362 	movw	r3, #32866	; 0x8062
 800e1d8:	4413      	add	r3, r2
 800e1da:	2200      	movs	r2, #0
 800e1dc:	701a      	strb	r2, [r3, #0]
 800e1de:	e005      	b.n	800e1ec <SCSI_AllowPreventRemovable+0x3a>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 800e1e0:	697a      	ldr	r2, [r7, #20]
 800e1e2:	f248 0362 	movw	r3, #32866	; 0x8062
 800e1e6:	4413      	add	r3, r2
 800e1e8:	2201      	movs	r2, #1
 800e1ea:	701a      	strb	r2, [r3, #0]
  }

  hmsc->bot_data_length = 0U;
 800e1ec:	697b      	ldr	r3, [r7, #20]
 800e1ee:	2200      	movs	r2, #0
 800e1f0:	60da      	str	r2, [r3, #12]

  return 0;
 800e1f2:	2300      	movs	r3, #0
}
 800e1f4:	4618      	mov	r0, r3
 800e1f6:	371c      	adds	r7, #28
 800e1f8:	46bd      	mov	sp, r7
 800e1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1fe:	4770      	bx	lr

0800e200 <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e200:	b580      	push	{r7, lr}
 800e202:	b086      	sub	sp, #24
 800e204:	af00      	add	r7, sp, #0
 800e206:	60f8      	str	r0, [r7, #12]
 800e208:	460b      	mov	r3, r1
 800e20a:	607a      	str	r2, [r7, #4]
 800e20c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e214:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800e216:	697b      	ldr	r3, [r7, #20]
 800e218:	7a1b      	ldrb	r3, [r3, #8]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	f040 8094 	bne.w	800e348 <SCSI_Read10+0x148>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800e220:	697a      	ldr	r2, [r7, #20]
 800e222:	f248 031c 	movw	r3, #32796	; 0x801c
 800e226:	4413      	add	r3, r2
 800e228:	781b      	ldrb	r3, [r3, #0]
 800e22a:	b25b      	sxtb	r3, r3
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	db0c      	blt.n	800e24a <SCSI_Read10+0x4a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e230:	697a      	ldr	r2, [r7, #20]
 800e232:	f248 031d 	movw	r3, #32797	; 0x801d
 800e236:	4413      	add	r3, r2
 800e238:	7819      	ldrb	r1, [r3, #0]
 800e23a:	2320      	movs	r3, #32
 800e23c:	2205      	movs	r2, #5
 800e23e:	68f8      	ldr	r0, [r7, #12]
 800e240:	f7ff ff0a 	bl	800e058 <SCSI_SenseCode>
      return -1;
 800e244:	f04f 33ff 	mov.w	r3, #4294967295
 800e248:	e088      	b.n	800e35c <SCSI_Read10+0x15c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800e24a:	697a      	ldr	r2, [r7, #20]
 800e24c:	f248 0362 	movw	r3, #32866	; 0x8062
 800e250:	4413      	add	r3, r2
 800e252:	781b      	ldrb	r3, [r3, #0]
 800e254:	2b02      	cmp	r3, #2
 800e256:	d108      	bne.n	800e26a <SCSI_Read10+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e258:	7af9      	ldrb	r1, [r7, #11]
 800e25a:	233a      	movs	r3, #58	; 0x3a
 800e25c:	2202      	movs	r2, #2
 800e25e:	68f8      	ldr	r0, [r7, #12]
 800e260:	f7ff fefa 	bl	800e058 <SCSI_SenseCode>

      return -1;
 800e264:	f04f 33ff 	mov.w	r3, #4294967295
 800e268:	e078      	b.n	800e35c <SCSI_Read10+0x15c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e270:	689b      	ldr	r3, [r3, #8]
 800e272:	7afa      	ldrb	r2, [r7, #11]
 800e274:	4610      	mov	r0, r2
 800e276:	4798      	blx	r3
 800e278:	4603      	mov	r3, r0
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d008      	beq.n	800e290 <SCSI_Read10+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e27e:	7af9      	ldrb	r1, [r7, #11]
 800e280:	233a      	movs	r3, #58	; 0x3a
 800e282:	2202      	movs	r2, #2
 800e284:	68f8      	ldr	r0, [r7, #12]
 800e286:	f7ff fee7 	bl	800e058 <SCSI_SenseCode>
      return -1;
 800e28a:	f04f 33ff 	mov.w	r3, #4294967295
 800e28e:	e065      	b.n	800e35c <SCSI_Read10+0x15c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	3302      	adds	r3, #2
 800e294:	781b      	ldrb	r3, [r3, #0]
 800e296:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	3303      	adds	r3, #3
 800e29c:	781b      	ldrb	r3, [r3, #0]
 800e29e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e2a0:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	3304      	adds	r3, #4
 800e2a6:	781b      	ldrb	r3, [r3, #0]
 800e2a8:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800e2aa:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800e2ac:	687a      	ldr	r2, [r7, #4]
 800e2ae:	3205      	adds	r2, #5
 800e2b0:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800e2b2:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e2b4:	6979      	ldr	r1, [r7, #20]
 800e2b6:	f248 036c 	movw	r3, #32876	; 0x806c
 800e2ba:	440b      	add	r3, r1
 800e2bc:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	3307      	adds	r3, #7
 800e2c2:	781b      	ldrb	r3, [r3, #0]
 800e2c4:	021b      	lsls	r3, r3, #8
 800e2c6:	687a      	ldr	r2, [r7, #4]
 800e2c8:	3208      	adds	r2, #8
 800e2ca:	7812      	ldrb	r2, [r2, #0]
 800e2cc:	431a      	orrs	r2, r3
 800e2ce:	6979      	ldr	r1, [r7, #20]
 800e2d0:	f248 0370 	movw	r3, #32880	; 0x8070
 800e2d4:	440b      	add	r3, r1
 800e2d6:	601a      	str	r2, [r3, #0]

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800e2d8:	697a      	ldr	r2, [r7, #20]
 800e2da:	f248 036c 	movw	r3, #32876	; 0x806c
 800e2de:	4413      	add	r3, r2
 800e2e0:	6818      	ldr	r0, [r3, #0]
 800e2e2:	697a      	ldr	r2, [r7, #20]
 800e2e4:	f248 0370 	movw	r3, #32880	; 0x8070
 800e2e8:	4413      	add	r3, r2
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	7af9      	ldrb	r1, [r7, #11]
 800e2ee:	4602      	mov	r2, r0
 800e2f0:	68f8      	ldr	r0, [r7, #12]
 800e2f2:	f000 faeb 	bl	800e8cc <SCSI_CheckAddressRange>
 800e2f6:	4603      	mov	r3, r0
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	da02      	bge.n	800e302 <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800e2fc:	f04f 33ff 	mov.w	r3, #4294967295
 800e300:	e02c      	b.n	800e35c <SCSI_Read10+0x15c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800e302:	697a      	ldr	r2, [r7, #20]
 800e304:	f248 0318 	movw	r3, #32792	; 0x8018
 800e308:	4413      	add	r3, r2
 800e30a:	681a      	ldr	r2, [r3, #0]
 800e30c:	6979      	ldr	r1, [r7, #20]
 800e30e:	f248 0370 	movw	r3, #32880	; 0x8070
 800e312:	440b      	add	r3, r1
 800e314:	6819      	ldr	r1, [r3, #0]
 800e316:	6978      	ldr	r0, [r7, #20]
 800e318:	f248 0364 	movw	r3, #32868	; 0x8064
 800e31c:	4403      	add	r3, r0
 800e31e:	881b      	ldrh	r3, [r3, #0]
 800e320:	fb03 f301 	mul.w	r3, r3, r1
 800e324:	429a      	cmp	r2, r3
 800e326:	d00c      	beq.n	800e342 <SCSI_Read10+0x142>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e328:	697a      	ldr	r2, [r7, #20]
 800e32a:	f248 031d 	movw	r3, #32797	; 0x801d
 800e32e:	4413      	add	r3, r2
 800e330:	7819      	ldrb	r1, [r3, #0]
 800e332:	2320      	movs	r3, #32
 800e334:	2205      	movs	r2, #5
 800e336:	68f8      	ldr	r0, [r7, #12]
 800e338:	f7ff fe8e 	bl	800e058 <SCSI_SenseCode>
      return -1;
 800e33c:	f04f 33ff 	mov.w	r3, #4294967295
 800e340:	e00c      	b.n	800e35c <SCSI_Read10+0x15c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800e342:	697b      	ldr	r3, [r7, #20]
 800e344:	2202      	movs	r2, #2
 800e346:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800e348:	697b      	ldr	r3, [r7, #20]
 800e34a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800e34e:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800e350:	7afb      	ldrb	r3, [r7, #11]
 800e352:	4619      	mov	r1, r3
 800e354:	68f8      	ldr	r0, [r7, #12]
 800e356:	f000 fadd 	bl	800e914 <SCSI_ProcessRead>
 800e35a:	4603      	mov	r3, r0
}
 800e35c:	4618      	mov	r0, r3
 800e35e:	3718      	adds	r7, #24
 800e360:	46bd      	mov	sp, r7
 800e362:	bd80      	pop	{r7, pc}

0800e364 <SCSI_Read12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e364:	b580      	push	{r7, lr}
 800e366:	b086      	sub	sp, #24
 800e368:	af00      	add	r7, sp, #0
 800e36a:	60f8      	str	r0, [r7, #12]
 800e36c:	460b      	mov	r3, r1
 800e36e:	607a      	str	r2, [r7, #4]
 800e370:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e378:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800e37a:	697b      	ldr	r3, [r7, #20]
 800e37c:	7a1b      	ldrb	r3, [r3, #8]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	f040 809e 	bne.w	800e4c0 <SCSI_Read12+0x15c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800e384:	697a      	ldr	r2, [r7, #20]
 800e386:	f248 031c 	movw	r3, #32796	; 0x801c
 800e38a:	4413      	add	r3, r2
 800e38c:	781b      	ldrb	r3, [r3, #0]
 800e38e:	b25b      	sxtb	r3, r3
 800e390:	2b00      	cmp	r3, #0
 800e392:	db0c      	blt.n	800e3ae <SCSI_Read12+0x4a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e394:	697a      	ldr	r2, [r7, #20]
 800e396:	f248 031d 	movw	r3, #32797	; 0x801d
 800e39a:	4413      	add	r3, r2
 800e39c:	7819      	ldrb	r1, [r3, #0]
 800e39e:	2320      	movs	r3, #32
 800e3a0:	2205      	movs	r2, #5
 800e3a2:	68f8      	ldr	r0, [r7, #12]
 800e3a4:	f7ff fe58 	bl	800e058 <SCSI_SenseCode>
      return -1;
 800e3a8:	f04f 33ff 	mov.w	r3, #4294967295
 800e3ac:	e092      	b.n	800e4d4 <SCSI_Read12+0x170>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800e3ae:	697a      	ldr	r2, [r7, #20]
 800e3b0:	f248 0362 	movw	r3, #32866	; 0x8062
 800e3b4:	4413      	add	r3, r2
 800e3b6:	781b      	ldrb	r3, [r3, #0]
 800e3b8:	2b02      	cmp	r3, #2
 800e3ba:	d108      	bne.n	800e3ce <SCSI_Read12+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e3bc:	7af9      	ldrb	r1, [r7, #11]
 800e3be:	233a      	movs	r3, #58	; 0x3a
 800e3c0:	2202      	movs	r2, #2
 800e3c2:	68f8      	ldr	r0, [r7, #12]
 800e3c4:	f7ff fe48 	bl	800e058 <SCSI_SenseCode>
      return -1;
 800e3c8:	f04f 33ff 	mov.w	r3, #4294967295
 800e3cc:	e082      	b.n	800e4d4 <SCSI_Read12+0x170>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e3d4:	689b      	ldr	r3, [r3, #8]
 800e3d6:	7afa      	ldrb	r2, [r7, #11]
 800e3d8:	4610      	mov	r0, r2
 800e3da:	4798      	blx	r3
 800e3dc:	4603      	mov	r3, r0
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d008      	beq.n	800e3f4 <SCSI_Read12+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e3e2:	7af9      	ldrb	r1, [r7, #11]
 800e3e4:	233a      	movs	r3, #58	; 0x3a
 800e3e6:	2202      	movs	r2, #2
 800e3e8:	68f8      	ldr	r0, [r7, #12]
 800e3ea:	f7ff fe35 	bl	800e058 <SCSI_SenseCode>
      return -1;
 800e3ee:	f04f 33ff 	mov.w	r3, #4294967295
 800e3f2:	e06f      	b.n	800e4d4 <SCSI_Read12+0x170>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	3302      	adds	r3, #2
 800e3f8:	781b      	ldrb	r3, [r3, #0]
 800e3fa:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	3303      	adds	r3, #3
 800e400:	781b      	ldrb	r3, [r3, #0]
 800e402:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e404:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	3304      	adds	r3, #4
 800e40a:	781b      	ldrb	r3, [r3, #0]
 800e40c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800e40e:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800e410:	687a      	ldr	r2, [r7, #4]
 800e412:	3205      	adds	r2, #5
 800e414:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800e416:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e418:	6979      	ldr	r1, [r7, #20]
 800e41a:	f248 036c 	movw	r3, #32876	; 0x806c
 800e41e:	440b      	add	r3, r1
 800e420:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	3306      	adds	r3, #6
 800e426:	781b      	ldrb	r3, [r3, #0]
 800e428:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	3307      	adds	r3, #7
 800e42e:	781b      	ldrb	r3, [r3, #0]
 800e430:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800e432:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	3308      	adds	r3, #8
 800e438:	781b      	ldrb	r3, [r3, #0]
 800e43a:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800e43c:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800e43e:	687a      	ldr	r2, [r7, #4]
 800e440:	3209      	adds	r2, #9
 800e442:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800e444:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800e446:	6979      	ldr	r1, [r7, #20]
 800e448:	f248 0370 	movw	r3, #32880	; 0x8070
 800e44c:	440b      	add	r3, r1
 800e44e:	601a      	str	r2, [r3, #0]

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800e450:	697a      	ldr	r2, [r7, #20]
 800e452:	f248 036c 	movw	r3, #32876	; 0x806c
 800e456:	4413      	add	r3, r2
 800e458:	6818      	ldr	r0, [r3, #0]
 800e45a:	697a      	ldr	r2, [r7, #20]
 800e45c:	f248 0370 	movw	r3, #32880	; 0x8070
 800e460:	4413      	add	r3, r2
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	7af9      	ldrb	r1, [r7, #11]
 800e466:	4602      	mov	r2, r0
 800e468:	68f8      	ldr	r0, [r7, #12]
 800e46a:	f000 fa2f 	bl	800e8cc <SCSI_CheckAddressRange>
 800e46e:	4603      	mov	r3, r0
 800e470:	2b00      	cmp	r3, #0
 800e472:	da02      	bge.n	800e47a <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800e474:	f04f 33ff 	mov.w	r3, #4294967295
 800e478:	e02c      	b.n	800e4d4 <SCSI_Read12+0x170>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800e47a:	697a      	ldr	r2, [r7, #20]
 800e47c:	f248 0318 	movw	r3, #32792	; 0x8018
 800e480:	4413      	add	r3, r2
 800e482:	681a      	ldr	r2, [r3, #0]
 800e484:	6979      	ldr	r1, [r7, #20]
 800e486:	f248 0370 	movw	r3, #32880	; 0x8070
 800e48a:	440b      	add	r3, r1
 800e48c:	6819      	ldr	r1, [r3, #0]
 800e48e:	6978      	ldr	r0, [r7, #20]
 800e490:	f248 0364 	movw	r3, #32868	; 0x8064
 800e494:	4403      	add	r3, r0
 800e496:	881b      	ldrh	r3, [r3, #0]
 800e498:	fb03 f301 	mul.w	r3, r3, r1
 800e49c:	429a      	cmp	r2, r3
 800e49e:	d00c      	beq.n	800e4ba <SCSI_Read12+0x156>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e4a0:	697a      	ldr	r2, [r7, #20]
 800e4a2:	f248 031d 	movw	r3, #32797	; 0x801d
 800e4a6:	4413      	add	r3, r2
 800e4a8:	7819      	ldrb	r1, [r3, #0]
 800e4aa:	2320      	movs	r3, #32
 800e4ac:	2205      	movs	r2, #5
 800e4ae:	68f8      	ldr	r0, [r7, #12]
 800e4b0:	f7ff fdd2 	bl	800e058 <SCSI_SenseCode>
      return -1;
 800e4b4:	f04f 33ff 	mov.w	r3, #4294967295
 800e4b8:	e00c      	b.n	800e4d4 <SCSI_Read12+0x170>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800e4ba:	697b      	ldr	r3, [r7, #20]
 800e4bc:	2202      	movs	r2, #2
 800e4be:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800e4c0:	697b      	ldr	r3, [r7, #20]
 800e4c2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800e4c6:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800e4c8:	7afb      	ldrb	r3, [r7, #11]
 800e4ca:	4619      	mov	r1, r3
 800e4cc:	68f8      	ldr	r0, [r7, #12]
 800e4ce:	f000 fa21 	bl	800e914 <SCSI_ProcessRead>
 800e4d2:	4603      	mov	r3, r0
}
 800e4d4:	4618      	mov	r0, r3
 800e4d6:	3718      	adds	r7, #24
 800e4d8:	46bd      	mov	sp, r7
 800e4da:	bd80      	pop	{r7, pc}

0800e4dc <SCSI_Write10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e4dc:	b580      	push	{r7, lr}
 800e4de:	b086      	sub	sp, #24
 800e4e0:	af00      	add	r7, sp, #0
 800e4e2:	60f8      	str	r0, [r7, #12]
 800e4e4:	460b      	mov	r3, r1
 800e4e6:	607a      	str	r2, [r7, #4]
 800e4e8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e4f0:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800e4f2:	697b      	ldr	r3, [r7, #20]
 800e4f4:	7a1b      	ldrb	r3, [r3, #8]
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	f040 80be 	bne.w	800e678 <SCSI_Write10+0x19c>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800e4fc:	697a      	ldr	r2, [r7, #20]
 800e4fe:	f248 0318 	movw	r3, #32792	; 0x8018
 800e502:	4413      	add	r3, r2
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	2b00      	cmp	r3, #0
 800e508:	d10c      	bne.n	800e524 <SCSI_Write10+0x48>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e50a:	697a      	ldr	r2, [r7, #20]
 800e50c:	f248 031d 	movw	r3, #32797	; 0x801d
 800e510:	4413      	add	r3, r2
 800e512:	7819      	ldrb	r1, [r3, #0]
 800e514:	2320      	movs	r3, #32
 800e516:	2205      	movs	r2, #5
 800e518:	68f8      	ldr	r0, [r7, #12]
 800e51a:	f7ff fd9d 	bl	800e058 <SCSI_SenseCode>
      return -1;
 800e51e:	f04f 33ff 	mov.w	r3, #4294967295
 800e522:	e0af      	b.n	800e684 <SCSI_Write10+0x1a8>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800e524:	697a      	ldr	r2, [r7, #20]
 800e526:	f248 031c 	movw	r3, #32796	; 0x801c
 800e52a:	4413      	add	r3, r2
 800e52c:	781b      	ldrb	r3, [r3, #0]
 800e52e:	b25b      	sxtb	r3, r3
 800e530:	2b00      	cmp	r3, #0
 800e532:	da0c      	bge.n	800e54e <SCSI_Write10+0x72>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e534:	697a      	ldr	r2, [r7, #20]
 800e536:	f248 031d 	movw	r3, #32797	; 0x801d
 800e53a:	4413      	add	r3, r2
 800e53c:	7819      	ldrb	r1, [r3, #0]
 800e53e:	2320      	movs	r3, #32
 800e540:	2205      	movs	r2, #5
 800e542:	68f8      	ldr	r0, [r7, #12]
 800e544:	f7ff fd88 	bl	800e058 <SCSI_SenseCode>
      return -1;
 800e548:	f04f 33ff 	mov.w	r3, #4294967295
 800e54c:	e09a      	b.n	800e684 <SCSI_Write10+0x1a8>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e554:	689b      	ldr	r3, [r3, #8]
 800e556:	7afa      	ldrb	r2, [r7, #11]
 800e558:	4610      	mov	r0, r2
 800e55a:	4798      	blx	r3
 800e55c:	4603      	mov	r3, r0
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d008      	beq.n	800e574 <SCSI_Write10+0x98>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e562:	7af9      	ldrb	r1, [r7, #11]
 800e564:	233a      	movs	r3, #58	; 0x3a
 800e566:	2202      	movs	r2, #2
 800e568:	68f8      	ldr	r0, [r7, #12]
 800e56a:	f7ff fd75 	bl	800e058 <SCSI_SenseCode>
      return -1;
 800e56e:	f04f 33ff 	mov.w	r3, #4294967295
 800e572:	e087      	b.n	800e684 <SCSI_Write10+0x1a8>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e57a:	68db      	ldr	r3, [r3, #12]
 800e57c:	7afa      	ldrb	r2, [r7, #11]
 800e57e:	4610      	mov	r0, r2
 800e580:	4798      	blx	r3
 800e582:	4603      	mov	r3, r0
 800e584:	2b00      	cmp	r3, #0
 800e586:	d008      	beq.n	800e59a <SCSI_Write10+0xbe>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800e588:	7af9      	ldrb	r1, [r7, #11]
 800e58a:	2327      	movs	r3, #39	; 0x27
 800e58c:	2202      	movs	r2, #2
 800e58e:	68f8      	ldr	r0, [r7, #12]
 800e590:	f7ff fd62 	bl	800e058 <SCSI_SenseCode>
      return -1;
 800e594:	f04f 33ff 	mov.w	r3, #4294967295
 800e598:	e074      	b.n	800e684 <SCSI_Write10+0x1a8>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	3302      	adds	r3, #2
 800e59e:	781b      	ldrb	r3, [r3, #0]
 800e5a0:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	3303      	adds	r3, #3
 800e5a6:	781b      	ldrb	r3, [r3, #0]
 800e5a8:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e5aa:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	3304      	adds	r3, #4
 800e5b0:	781b      	ldrb	r3, [r3, #0]
 800e5b2:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800e5b4:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800e5b6:	687a      	ldr	r2, [r7, #4]
 800e5b8:	3205      	adds	r2, #5
 800e5ba:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800e5bc:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e5be:	6979      	ldr	r1, [r7, #20]
 800e5c0:	f248 036c 	movw	r3, #32876	; 0x806c
 800e5c4:	440b      	add	r3, r1
 800e5c6:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	3307      	adds	r3, #7
 800e5cc:	781b      	ldrb	r3, [r3, #0]
 800e5ce:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800e5d0:	687a      	ldr	r2, [r7, #4]
 800e5d2:	3208      	adds	r2, #8
 800e5d4:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800e5d6:	431a      	orrs	r2, r3
 800e5d8:	6979      	ldr	r1, [r7, #20]
 800e5da:	f248 0370 	movw	r3, #32880	; 0x8070
 800e5de:	440b      	add	r3, r1
 800e5e0:	601a      	str	r2, [r3, #0]

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800e5e2:	697a      	ldr	r2, [r7, #20]
 800e5e4:	f248 036c 	movw	r3, #32876	; 0x806c
 800e5e8:	4413      	add	r3, r2
 800e5ea:	6818      	ldr	r0, [r3, #0]
 800e5ec:	697a      	ldr	r2, [r7, #20]
 800e5ee:	f248 0370 	movw	r3, #32880	; 0x8070
 800e5f2:	4413      	add	r3, r2
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	7af9      	ldrb	r1, [r7, #11]
 800e5f8:	4602      	mov	r2, r0
 800e5fa:	68f8      	ldr	r0, [r7, #12]
 800e5fc:	f000 f966 	bl	800e8cc <SCSI_CheckAddressRange>
 800e600:	4603      	mov	r3, r0
 800e602:	2b00      	cmp	r3, #0
 800e604:	da02      	bge.n	800e60c <SCSI_Write10+0x130>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800e606:	f04f 33ff 	mov.w	r3, #4294967295
 800e60a:	e03b      	b.n	800e684 <SCSI_Write10+0x1a8>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800e60c:	697a      	ldr	r2, [r7, #20]
 800e60e:	f248 0370 	movw	r3, #32880	; 0x8070
 800e612:	4413      	add	r3, r2
 800e614:	681a      	ldr	r2, [r3, #0]
 800e616:	6979      	ldr	r1, [r7, #20]
 800e618:	f248 0364 	movw	r3, #32868	; 0x8064
 800e61c:	440b      	add	r3, r1
 800e61e:	881b      	ldrh	r3, [r3, #0]
 800e620:	fb03 f302 	mul.w	r3, r3, r2
 800e624:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800e626:	697a      	ldr	r2, [r7, #20]
 800e628:	f248 0318 	movw	r3, #32792	; 0x8018
 800e62c:	4413      	add	r3, r2
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	693a      	ldr	r2, [r7, #16]
 800e632:	429a      	cmp	r2, r3
 800e634:	d00c      	beq.n	800e650 <SCSI_Write10+0x174>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e636:	697a      	ldr	r2, [r7, #20]
 800e638:	f248 031d 	movw	r3, #32797	; 0x801d
 800e63c:	4413      	add	r3, r2
 800e63e:	7819      	ldrb	r1, [r3, #0]
 800e640:	2320      	movs	r3, #32
 800e642:	2205      	movs	r2, #5
 800e644:	68f8      	ldr	r0, [r7, #12]
 800e646:	f7ff fd07 	bl	800e058 <SCSI_SenseCode>
      return -1;
 800e64a:	f04f 33ff 	mov.w	r3, #4294967295
 800e64e:	e019      	b.n	800e684 <SCSI_Write10+0x1a8>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800e650:	693b      	ldr	r3, [r7, #16]
 800e652:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e656:	bf28      	it	cs
 800e658:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 800e65c:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800e65e:	697b      	ldr	r3, [r7, #20]
 800e660:	2201      	movs	r2, #1
 800e662:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800e664:	697b      	ldr	r3, [r7, #20]
 800e666:	f103 0210 	add.w	r2, r3, #16
 800e66a:	693b      	ldr	r3, [r7, #16]
 800e66c:	2101      	movs	r1, #1
 800e66e:	68f8      	ldr	r0, [r7, #12]
 800e670:	f004 fb19 	bl	8012ca6 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800e674:	2300      	movs	r3, #0
 800e676:	e005      	b.n	800e684 <SCSI_Write10+0x1a8>
    return SCSI_ProcessWrite(pdev, lun);
 800e678:	7afb      	ldrb	r3, [r7, #11]
 800e67a:	4619      	mov	r1, r3
 800e67c:	68f8      	ldr	r0, [r7, #12]
 800e67e:	f000 f9d7 	bl	800ea30 <SCSI_ProcessWrite>
 800e682:	4603      	mov	r3, r0
}
 800e684:	4618      	mov	r0, r3
 800e686:	3718      	adds	r7, #24
 800e688:	46bd      	mov	sp, r7
 800e68a:	bd80      	pop	{r7, pc}

0800e68c <SCSI_Write12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e68c:	b580      	push	{r7, lr}
 800e68e:	b086      	sub	sp, #24
 800e690:	af00      	add	r7, sp, #0
 800e692:	60f8      	str	r0, [r7, #12]
 800e694:	460b      	mov	r3, r1
 800e696:	607a      	str	r2, [r7, #4]
 800e698:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e6a0:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800e6a2:	697b      	ldr	r3, [r7, #20]
 800e6a4:	7a1b      	ldrb	r3, [r3, #8]
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	f040 80ce 	bne.w	800e848 <SCSI_Write12+0x1bc>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800e6ac:	697a      	ldr	r2, [r7, #20]
 800e6ae:	f248 0318 	movw	r3, #32792	; 0x8018
 800e6b2:	4413      	add	r3, r2
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d10c      	bne.n	800e6d4 <SCSI_Write12+0x48>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e6ba:	697a      	ldr	r2, [r7, #20]
 800e6bc:	f248 031d 	movw	r3, #32797	; 0x801d
 800e6c0:	4413      	add	r3, r2
 800e6c2:	7819      	ldrb	r1, [r3, #0]
 800e6c4:	2320      	movs	r3, #32
 800e6c6:	2205      	movs	r2, #5
 800e6c8:	68f8      	ldr	r0, [r7, #12]
 800e6ca:	f7ff fcc5 	bl	800e058 <SCSI_SenseCode>
      return -1;
 800e6ce:	f04f 33ff 	mov.w	r3, #4294967295
 800e6d2:	e0bf      	b.n	800e854 <SCSI_Write12+0x1c8>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800e6d4:	697a      	ldr	r2, [r7, #20]
 800e6d6:	f248 031c 	movw	r3, #32796	; 0x801c
 800e6da:	4413      	add	r3, r2
 800e6dc:	781b      	ldrb	r3, [r3, #0]
 800e6de:	b25b      	sxtb	r3, r3
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	da0c      	bge.n	800e6fe <SCSI_Write12+0x72>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e6e4:	697a      	ldr	r2, [r7, #20]
 800e6e6:	f248 031d 	movw	r3, #32797	; 0x801d
 800e6ea:	4413      	add	r3, r2
 800e6ec:	7819      	ldrb	r1, [r3, #0]
 800e6ee:	2320      	movs	r3, #32
 800e6f0:	2205      	movs	r2, #5
 800e6f2:	68f8      	ldr	r0, [r7, #12]
 800e6f4:	f7ff fcb0 	bl	800e058 <SCSI_SenseCode>
      return -1;
 800e6f8:	f04f 33ff 	mov.w	r3, #4294967295
 800e6fc:	e0aa      	b.n	800e854 <SCSI_Write12+0x1c8>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e704:	689b      	ldr	r3, [r3, #8]
 800e706:	7afa      	ldrb	r2, [r7, #11]
 800e708:	4610      	mov	r0, r2
 800e70a:	4798      	blx	r3
 800e70c:	4603      	mov	r3, r0
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d00b      	beq.n	800e72a <SCSI_Write12+0x9e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e712:	7af9      	ldrb	r1, [r7, #11]
 800e714:	233a      	movs	r3, #58	; 0x3a
 800e716:	2202      	movs	r2, #2
 800e718:	68f8      	ldr	r0, [r7, #12]
 800e71a:	f7ff fc9d 	bl	800e058 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800e71e:	697b      	ldr	r3, [r7, #20]
 800e720:	2205      	movs	r2, #5
 800e722:	721a      	strb	r2, [r3, #8]
      return -1;
 800e724:	f04f 33ff 	mov.w	r3, #4294967295
 800e728:	e094      	b.n	800e854 <SCSI_Write12+0x1c8>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e730:	68db      	ldr	r3, [r3, #12]
 800e732:	7afa      	ldrb	r2, [r7, #11]
 800e734:	4610      	mov	r0, r2
 800e736:	4798      	blx	r3
 800e738:	4603      	mov	r3, r0
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d00b      	beq.n	800e756 <SCSI_Write12+0xca>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800e73e:	7af9      	ldrb	r1, [r7, #11]
 800e740:	2327      	movs	r3, #39	; 0x27
 800e742:	2202      	movs	r2, #2
 800e744:	68f8      	ldr	r0, [r7, #12]
 800e746:	f7ff fc87 	bl	800e058 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800e74a:	697b      	ldr	r3, [r7, #20]
 800e74c:	2205      	movs	r2, #5
 800e74e:	721a      	strb	r2, [r3, #8]
      return -1;
 800e750:	f04f 33ff 	mov.w	r3, #4294967295
 800e754:	e07e      	b.n	800e854 <SCSI_Write12+0x1c8>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	3302      	adds	r3, #2
 800e75a:	781b      	ldrb	r3, [r3, #0]
 800e75c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	3303      	adds	r3, #3
 800e762:	781b      	ldrb	r3, [r3, #0]
 800e764:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e766:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	3304      	adds	r3, #4
 800e76c:	781b      	ldrb	r3, [r3, #0]
 800e76e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800e770:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800e772:	687a      	ldr	r2, [r7, #4]
 800e774:	3205      	adds	r2, #5
 800e776:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800e778:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e77a:	6979      	ldr	r1, [r7, #20]
 800e77c:	f248 036c 	movw	r3, #32876	; 0x806c
 800e780:	440b      	add	r3, r1
 800e782:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	3306      	adds	r3, #6
 800e788:	781b      	ldrb	r3, [r3, #0]
 800e78a:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	3307      	adds	r3, #7
 800e790:	781b      	ldrb	r3, [r3, #0]
 800e792:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800e794:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	3308      	adds	r3, #8
 800e79a:	781b      	ldrb	r3, [r3, #0]
 800e79c:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800e79e:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800e7a0:	687a      	ldr	r2, [r7, #4]
 800e7a2:	3209      	adds	r2, #9
 800e7a4:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800e7a6:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800e7a8:	6979      	ldr	r1, [r7, #20]
 800e7aa:	f248 0370 	movw	r3, #32880	; 0x8070
 800e7ae:	440b      	add	r3, r1
 800e7b0:	601a      	str	r2, [r3, #0]

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800e7b2:	697a      	ldr	r2, [r7, #20]
 800e7b4:	f248 036c 	movw	r3, #32876	; 0x806c
 800e7b8:	4413      	add	r3, r2
 800e7ba:	6818      	ldr	r0, [r3, #0]
 800e7bc:	697a      	ldr	r2, [r7, #20]
 800e7be:	f248 0370 	movw	r3, #32880	; 0x8070
 800e7c2:	4413      	add	r3, r2
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	7af9      	ldrb	r1, [r7, #11]
 800e7c8:	4602      	mov	r2, r0
 800e7ca:	68f8      	ldr	r0, [r7, #12]
 800e7cc:	f000 f87e 	bl	800e8cc <SCSI_CheckAddressRange>
 800e7d0:	4603      	mov	r3, r0
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	da02      	bge.n	800e7dc <SCSI_Write12+0x150>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800e7d6:	f04f 33ff 	mov.w	r3, #4294967295
 800e7da:	e03b      	b.n	800e854 <SCSI_Write12+0x1c8>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800e7dc:	697a      	ldr	r2, [r7, #20]
 800e7de:	f248 0370 	movw	r3, #32880	; 0x8070
 800e7e2:	4413      	add	r3, r2
 800e7e4:	681a      	ldr	r2, [r3, #0]
 800e7e6:	6979      	ldr	r1, [r7, #20]
 800e7e8:	f248 0364 	movw	r3, #32868	; 0x8064
 800e7ec:	440b      	add	r3, r1
 800e7ee:	881b      	ldrh	r3, [r3, #0]
 800e7f0:	fb03 f302 	mul.w	r3, r3, r2
 800e7f4:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800e7f6:	697a      	ldr	r2, [r7, #20]
 800e7f8:	f248 0318 	movw	r3, #32792	; 0x8018
 800e7fc:	4413      	add	r3, r2
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	693a      	ldr	r2, [r7, #16]
 800e802:	429a      	cmp	r2, r3
 800e804:	d00c      	beq.n	800e820 <SCSI_Write12+0x194>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e806:	697a      	ldr	r2, [r7, #20]
 800e808:	f248 031d 	movw	r3, #32797	; 0x801d
 800e80c:	4413      	add	r3, r2
 800e80e:	7819      	ldrb	r1, [r3, #0]
 800e810:	2320      	movs	r3, #32
 800e812:	2205      	movs	r2, #5
 800e814:	68f8      	ldr	r0, [r7, #12]
 800e816:	f7ff fc1f 	bl	800e058 <SCSI_SenseCode>
      return -1;
 800e81a:	f04f 33ff 	mov.w	r3, #4294967295
 800e81e:	e019      	b.n	800e854 <SCSI_Write12+0x1c8>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800e820:	693b      	ldr	r3, [r7, #16]
 800e822:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e826:	bf28      	it	cs
 800e828:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 800e82c:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800e82e:	697b      	ldr	r3, [r7, #20]
 800e830:	2201      	movs	r2, #1
 800e832:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800e834:	697b      	ldr	r3, [r7, #20]
 800e836:	f103 0210 	add.w	r2, r3, #16
 800e83a:	693b      	ldr	r3, [r7, #16]
 800e83c:	2101      	movs	r1, #1
 800e83e:	68f8      	ldr	r0, [r7, #12]
 800e840:	f004 fa31 	bl	8012ca6 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800e844:	2300      	movs	r3, #0
 800e846:	e005      	b.n	800e854 <SCSI_Write12+0x1c8>
    return SCSI_ProcessWrite(pdev, lun);
 800e848:	7afb      	ldrb	r3, [r7, #11]
 800e84a:	4619      	mov	r1, r3
 800e84c:	68f8      	ldr	r0, [r7, #12]
 800e84e:	f000 f8ef 	bl	800ea30 <SCSI_ProcessWrite>
 800e852:	4603      	mov	r3, r0
}
 800e854:	4618      	mov	r0, r3
 800e856:	3718      	adds	r7, #24
 800e858:	46bd      	mov	sp, r7
 800e85a:	bd80      	pop	{r7, pc}

0800e85c <SCSI_Verify10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e85c:	b580      	push	{r7, lr}
 800e85e:	b086      	sub	sp, #24
 800e860:	af00      	add	r7, sp, #0
 800e862:	60f8      	str	r0, [r7, #12]
 800e864:	460b      	mov	r3, r1
 800e866:	607a      	str	r2, [r7, #4]
 800e868:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e870:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	3301      	adds	r3, #1
 800e876:	781b      	ldrb	r3, [r3, #0]
 800e878:	f003 0302 	and.w	r3, r3, #2
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d008      	beq.n	800e892 <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800e880:	7af9      	ldrb	r1, [r7, #11]
 800e882:	2324      	movs	r3, #36	; 0x24
 800e884:	2205      	movs	r2, #5
 800e886:	68f8      	ldr	r0, [r7, #12]
 800e888:	f7ff fbe6 	bl	800e058 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800e88c:	f04f 33ff 	mov.w	r3, #4294967295
 800e890:	e018      	b.n	800e8c4 <SCSI_Verify10+0x68>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800e892:	697a      	ldr	r2, [r7, #20]
 800e894:	f248 036c 	movw	r3, #32876	; 0x806c
 800e898:	4413      	add	r3, r2
 800e89a:	6818      	ldr	r0, [r3, #0]
 800e89c:	697a      	ldr	r2, [r7, #20]
 800e89e:	f248 0370 	movw	r3, #32880	; 0x8070
 800e8a2:	4413      	add	r3, r2
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	7af9      	ldrb	r1, [r7, #11]
 800e8a8:	4602      	mov	r2, r0
 800e8aa:	68f8      	ldr	r0, [r7, #12]
 800e8ac:	f000 f80e 	bl	800e8cc <SCSI_CheckAddressRange>
 800e8b0:	4603      	mov	r3, r0
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	da02      	bge.n	800e8bc <SCSI_Verify10+0x60>
  {
    return -1; /* error */
 800e8b6:	f04f 33ff 	mov.w	r3, #4294967295
 800e8ba:	e003      	b.n	800e8c4 <SCSI_Verify10+0x68>
  }

  hmsc->bot_data_length = 0U;
 800e8bc:	697b      	ldr	r3, [r7, #20]
 800e8be:	2200      	movs	r2, #0
 800e8c0:	60da      	str	r2, [r3, #12]

  return 0;
 800e8c2:	2300      	movs	r3, #0
}
 800e8c4:	4618      	mov	r0, r3
 800e8c6:	3718      	adds	r7, #24
 800e8c8:	46bd      	mov	sp, r7
 800e8ca:	bd80      	pop	{r7, pc}

0800e8cc <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800e8cc:	b580      	push	{r7, lr}
 800e8ce:	b086      	sub	sp, #24
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	60f8      	str	r0, [r7, #12]
 800e8d4:	607a      	str	r2, [r7, #4]
 800e8d6:	603b      	str	r3, [r7, #0]
 800e8d8:	460b      	mov	r3, r1
 800e8da:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e8e2:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800e8e4:	687a      	ldr	r2, [r7, #4]
 800e8e6:	683b      	ldr	r3, [r7, #0]
 800e8e8:	441a      	add	r2, r3
 800e8ea:	6979      	ldr	r1, [r7, #20]
 800e8ec:	f248 0368 	movw	r3, #32872	; 0x8068
 800e8f0:	440b      	add	r3, r1
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	429a      	cmp	r2, r3
 800e8f6:	d908      	bls.n	800e90a <SCSI_CheckAddressRange+0x3e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800e8f8:	7af9      	ldrb	r1, [r7, #11]
 800e8fa:	2321      	movs	r3, #33	; 0x21
 800e8fc:	2205      	movs	r2, #5
 800e8fe:	68f8      	ldr	r0, [r7, #12]
 800e900:	f7ff fbaa 	bl	800e058 <SCSI_SenseCode>
    return -1;
 800e904:	f04f 33ff 	mov.w	r3, #4294967295
 800e908:	e000      	b.n	800e90c <SCSI_CheckAddressRange+0x40>
  }

  return 0;
 800e90a:	2300      	movs	r3, #0
}
 800e90c:	4618      	mov	r0, r3
 800e90e:	3718      	adds	r7, #24
 800e910:	46bd      	mov	sp, r7
 800e912:	bd80      	pop	{r7, pc}

0800e914 <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800e914:	b5b0      	push	{r4, r5, r7, lr}
 800e916:	b084      	sub	sp, #16
 800e918:	af00      	add	r7, sp, #0
 800e91a:	6078      	str	r0, [r7, #4]
 800e91c:	460b      	mov	r3, r1
 800e91e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e926:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800e928:	68fa      	ldr	r2, [r7, #12]
 800e92a:	f248 0370 	movw	r3, #32880	; 0x8070
 800e92e:	4413      	add	r3, r2
 800e930:	681a      	ldr	r2, [r3, #0]
 800e932:	68f9      	ldr	r1, [r7, #12]
 800e934:	f248 0364 	movw	r3, #32868	; 0x8064
 800e938:	440b      	add	r3, r1
 800e93a:	881b      	ldrh	r3, [r3, #0]
 800e93c:	fb03 f302 	mul.w	r3, r3, r2
 800e940:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 800e942:	68bb      	ldr	r3, [r7, #8]
 800e944:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e948:	bf28      	it	cs
 800e94a:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 800e94e:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e956:	691c      	ldr	r4, [r3, #16]
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	f103 0110 	add.w	r1, r3, #16
 800e95e:	68fa      	ldr	r2, [r7, #12]
 800e960:	f248 036c 	movw	r3, #32876	; 0x806c
 800e964:	4413      	add	r3, r2
 800e966:	681d      	ldr	r5, [r3, #0]
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 800e968:	68fa      	ldr	r2, [r7, #12]
 800e96a:	f248 0364 	movw	r3, #32868	; 0x8064
 800e96e:	4413      	add	r3, r2
 800e970:	881b      	ldrh	r3, [r3, #0]
 800e972:	461a      	mov	r2, r3
 800e974:	68bb      	ldr	r3, [r7, #8]
 800e976:	fbb3 f3f2 	udiv	r3, r3, r2
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 800e97a:	b29b      	uxth	r3, r3
 800e97c:	78f8      	ldrb	r0, [r7, #3]
 800e97e:	462a      	mov	r2, r5
 800e980:	47a0      	blx	r4
 800e982:	4603      	mov	r3, r0
 800e984:	2b00      	cmp	r3, #0
 800e986:	da08      	bge.n	800e99a <SCSI_ProcessRead+0x86>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800e988:	78f9      	ldrb	r1, [r7, #3]
 800e98a:	2311      	movs	r3, #17
 800e98c:	2204      	movs	r2, #4
 800e98e:	6878      	ldr	r0, [r7, #4]
 800e990:	f7ff fb62 	bl	800e058 <SCSI_SenseCode>
    return -1;
 800e994:	f04f 33ff 	mov.w	r3, #4294967295
 800e998:	e046      	b.n	800ea28 <SCSI_ProcessRead+0x114>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	f103 0210 	add.w	r2, r3, #16
 800e9a0:	68bb      	ldr	r3, [r7, #8]
 800e9a2:	2181      	movs	r1, #129	; 0x81
 800e9a4:	6878      	ldr	r0, [r7, #4]
 800e9a6:	f004 f95d 	bl	8012c64 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800e9aa:	68fa      	ldr	r2, [r7, #12]
 800e9ac:	f248 036c 	movw	r3, #32876	; 0x806c
 800e9b0:	4413      	add	r3, r2
 800e9b2:	681a      	ldr	r2, [r3, #0]
 800e9b4:	68f9      	ldr	r1, [r7, #12]
 800e9b6:	f248 0364 	movw	r3, #32868	; 0x8064
 800e9ba:	440b      	add	r3, r1
 800e9bc:	881b      	ldrh	r3, [r3, #0]
 800e9be:	4619      	mov	r1, r3
 800e9c0:	68bb      	ldr	r3, [r7, #8]
 800e9c2:	fbb3 f3f1 	udiv	r3, r3, r1
 800e9c6:	441a      	add	r2, r3
 800e9c8:	68f9      	ldr	r1, [r7, #12]
 800e9ca:	f248 036c 	movw	r3, #32876	; 0x806c
 800e9ce:	440b      	add	r3, r1
 800e9d0:	601a      	str	r2, [r3, #0]
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800e9d2:	68fa      	ldr	r2, [r7, #12]
 800e9d4:	f248 0370 	movw	r3, #32880	; 0x8070
 800e9d8:	4413      	add	r3, r2
 800e9da:	681a      	ldr	r2, [r3, #0]
 800e9dc:	68f9      	ldr	r1, [r7, #12]
 800e9de:	f248 0364 	movw	r3, #32868	; 0x8064
 800e9e2:	440b      	add	r3, r1
 800e9e4:	881b      	ldrh	r3, [r3, #0]
 800e9e6:	4619      	mov	r1, r3
 800e9e8:	68bb      	ldr	r3, [r7, #8]
 800e9ea:	fbb3 f3f1 	udiv	r3, r3, r1
 800e9ee:	1ad2      	subs	r2, r2, r3
 800e9f0:	68f9      	ldr	r1, [r7, #12]
 800e9f2:	f248 0370 	movw	r3, #32880	; 0x8070
 800e9f6:	440b      	add	r3, r1
 800e9f8:	601a      	str	r2, [r3, #0]

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800e9fa:	68fa      	ldr	r2, [r7, #12]
 800e9fc:	f248 0338 	movw	r3, #32824	; 0x8038
 800ea00:	4413      	add	r3, r2
 800ea02:	681a      	ldr	r2, [r3, #0]
 800ea04:	68bb      	ldr	r3, [r7, #8]
 800ea06:	1ad2      	subs	r2, r2, r3
 800ea08:	68f9      	ldr	r1, [r7, #12]
 800ea0a:	f248 0338 	movw	r3, #32824	; 0x8038
 800ea0e:	440b      	add	r3, r1
 800ea10:	601a      	str	r2, [r3, #0]

  if (hmsc->scsi_blk_len == 0U)
 800ea12:	68fa      	ldr	r2, [r7, #12]
 800ea14:	f248 0370 	movw	r3, #32880	; 0x8070
 800ea18:	4413      	add	r3, r2
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d102      	bne.n	800ea26 <SCSI_ProcessRead+0x112>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	2203      	movs	r2, #3
 800ea24:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 800ea26:	2300      	movs	r3, #0
}
 800ea28:	4618      	mov	r0, r3
 800ea2a:	3710      	adds	r7, #16
 800ea2c:	46bd      	mov	sp, r7
 800ea2e:	bdb0      	pop	{r4, r5, r7, pc}

0800ea30 <SCSI_ProcessWrite>:
*         Handle Write Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800ea30:	b5b0      	push	{r4, r5, r7, lr}
 800ea32:	b084      	sub	sp, #16
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	6078      	str	r0, [r7, #4]
 800ea38:	460b      	mov	r3, r1
 800ea3a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ea42:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800ea44:	68fa      	ldr	r2, [r7, #12]
 800ea46:	f248 0370 	movw	r3, #32880	; 0x8070
 800ea4a:	4413      	add	r3, r2
 800ea4c:	681a      	ldr	r2, [r3, #0]
 800ea4e:	68f9      	ldr	r1, [r7, #12]
 800ea50:	f248 0364 	movw	r3, #32868	; 0x8064
 800ea54:	440b      	add	r3, r1
 800ea56:	881b      	ldrh	r3, [r3, #0]
 800ea58:	fb03 f302 	mul.w	r3, r3, r2
 800ea5c:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 800ea5e:	68bb      	ldr	r3, [r7, #8]
 800ea60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ea64:	bf28      	it	cs
 800ea66:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 800ea6a:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ea72:	695c      	ldr	r4, [r3, #20]
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	f103 0110 	add.w	r1, r3, #16
 800ea7a:	68fa      	ldr	r2, [r7, #12]
 800ea7c:	f248 036c 	movw	r3, #32876	; 0x806c
 800ea80:	4413      	add	r3, r2
 800ea82:	681d      	ldr	r5, [r3, #0]
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 800ea84:	68fa      	ldr	r2, [r7, #12]
 800ea86:	f248 0364 	movw	r3, #32868	; 0x8064
 800ea8a:	4413      	add	r3, r2
 800ea8c:	881b      	ldrh	r3, [r3, #0]
 800ea8e:	461a      	mov	r2, r3
 800ea90:	68bb      	ldr	r3, [r7, #8]
 800ea92:	fbb3 f3f2 	udiv	r3, r3, r2
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800ea96:	b29b      	uxth	r3, r3
 800ea98:	78f8      	ldrb	r0, [r7, #3]
 800ea9a:	462a      	mov	r2, r5
 800ea9c:	47a0      	blx	r4
 800ea9e:	4603      	mov	r3, r0
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	da08      	bge.n	800eab6 <SCSI_ProcessWrite+0x86>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800eaa4:	78f9      	ldrb	r1, [r7, #3]
 800eaa6:	2303      	movs	r3, #3
 800eaa8:	2204      	movs	r2, #4
 800eaaa:	6878      	ldr	r0, [r7, #4]
 800eaac:	f7ff fad4 	bl	800e058 <SCSI_SenseCode>
    return -1;
 800eab0:	f04f 33ff 	mov.w	r3, #4294967295
 800eab4:	e05a      	b.n	800eb6c <SCSI_ProcessWrite+0x13c>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800eab6:	68fa      	ldr	r2, [r7, #12]
 800eab8:	f248 036c 	movw	r3, #32876	; 0x806c
 800eabc:	4413      	add	r3, r2
 800eabe:	681a      	ldr	r2, [r3, #0]
 800eac0:	68f9      	ldr	r1, [r7, #12]
 800eac2:	f248 0364 	movw	r3, #32868	; 0x8064
 800eac6:	440b      	add	r3, r1
 800eac8:	881b      	ldrh	r3, [r3, #0]
 800eaca:	4619      	mov	r1, r3
 800eacc:	68bb      	ldr	r3, [r7, #8]
 800eace:	fbb3 f3f1 	udiv	r3, r3, r1
 800ead2:	441a      	add	r2, r3
 800ead4:	68f9      	ldr	r1, [r7, #12]
 800ead6:	f248 036c 	movw	r3, #32876	; 0x806c
 800eada:	440b      	add	r3, r1
 800eadc:	601a      	str	r2, [r3, #0]
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800eade:	68fa      	ldr	r2, [r7, #12]
 800eae0:	f248 0370 	movw	r3, #32880	; 0x8070
 800eae4:	4413      	add	r3, r2
 800eae6:	681a      	ldr	r2, [r3, #0]
 800eae8:	68f9      	ldr	r1, [r7, #12]
 800eaea:	f248 0364 	movw	r3, #32868	; 0x8064
 800eaee:	440b      	add	r3, r1
 800eaf0:	881b      	ldrh	r3, [r3, #0]
 800eaf2:	4619      	mov	r1, r3
 800eaf4:	68bb      	ldr	r3, [r7, #8]
 800eaf6:	fbb3 f3f1 	udiv	r3, r3, r1
 800eafa:	1ad2      	subs	r2, r2, r3
 800eafc:	68f9      	ldr	r1, [r7, #12]
 800eafe:	f248 0370 	movw	r3, #32880	; 0x8070
 800eb02:	440b      	add	r3, r1
 800eb04:	601a      	str	r2, [r3, #0]

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800eb06:	68fa      	ldr	r2, [r7, #12]
 800eb08:	f248 0338 	movw	r3, #32824	; 0x8038
 800eb0c:	4413      	add	r3, r2
 800eb0e:	681a      	ldr	r2, [r3, #0]
 800eb10:	68bb      	ldr	r3, [r7, #8]
 800eb12:	1ad2      	subs	r2, r2, r3
 800eb14:	68f9      	ldr	r1, [r7, #12]
 800eb16:	f248 0338 	movw	r3, #32824	; 0x8038
 800eb1a:	440b      	add	r3, r1
 800eb1c:	601a      	str	r2, [r3, #0]

  if (hmsc->scsi_blk_len == 0U)
 800eb1e:	68fa      	ldr	r2, [r7, #12]
 800eb20:	f248 0370 	movw	r3, #32880	; 0x8070
 800eb24:	4413      	add	r3, r2
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d104      	bne.n	800eb36 <SCSI_ProcessWrite+0x106>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800eb2c:	2100      	movs	r1, #0
 800eb2e:	6878      	ldr	r0, [r7, #4]
 800eb30:	f7fe fde2 	bl	800d6f8 <MSC_BOT_SendCSW>
 800eb34:	e019      	b.n	800eb6a <SCSI_ProcessWrite+0x13a>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800eb36:	68fa      	ldr	r2, [r7, #12]
 800eb38:	f248 0370 	movw	r3, #32880	; 0x8070
 800eb3c:	4413      	add	r3, r2
 800eb3e:	681a      	ldr	r2, [r3, #0]
 800eb40:	68f9      	ldr	r1, [r7, #12]
 800eb42:	f248 0364 	movw	r3, #32868	; 0x8064
 800eb46:	440b      	add	r3, r1
 800eb48:	881b      	ldrh	r3, [r3, #0]
 800eb4a:	fb03 f302 	mul.w	r3, r3, r2
 800eb4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eb52:	bf28      	it	cs
 800eb54:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 800eb58:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	f103 0210 	add.w	r2, r3, #16
 800eb60:	68bb      	ldr	r3, [r7, #8]
 800eb62:	2101      	movs	r1, #1
 800eb64:	6878      	ldr	r0, [r7, #4]
 800eb66:	f004 f89e 	bl	8012ca6 <USBD_LL_PrepareReceive>
  }

  return 0;
 800eb6a:	2300      	movs	r3, #0
}
 800eb6c:	4618      	mov	r0, r3
 800eb6e:	3710      	adds	r7, #16
 800eb70:	46bd      	mov	sp, r7
 800eb72:	bdb0      	pop	{r4, r5, r7, pc}

0800eb74 <SCSI_UpdateBotData>:
* @param  length: Data length
* @retval status
*/
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 800eb74:	b480      	push	{r7}
 800eb76:	b087      	sub	sp, #28
 800eb78:	af00      	add	r7, sp, #0
 800eb7a:	60f8      	str	r0, [r7, #12]
 800eb7c:	60b9      	str	r1, [r7, #8]
 800eb7e:	4613      	mov	r3, r2
 800eb80:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 800eb82:	88fb      	ldrh	r3, [r7, #6]
 800eb84:	82fb      	strh	r3, [r7, #22]

  hmsc->bot_data_length = len;
 800eb86:	8afa      	ldrh	r2, [r7, #22]
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 800eb8c:	e00b      	b.n	800eba6 <SCSI_UpdateBotData+0x32>
  {
    len--;
 800eb8e:	8afb      	ldrh	r3, [r7, #22]
 800eb90:	3b01      	subs	r3, #1
 800eb92:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 800eb94:	8afb      	ldrh	r3, [r7, #22]
 800eb96:	68ba      	ldr	r2, [r7, #8]
 800eb98:	441a      	add	r2, r3
 800eb9a:	8afb      	ldrh	r3, [r7, #22]
 800eb9c:	7811      	ldrb	r1, [r2, #0]
 800eb9e:	68fa      	ldr	r2, [r7, #12]
 800eba0:	4413      	add	r3, r2
 800eba2:	460a      	mov	r2, r1
 800eba4:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 800eba6:	8afb      	ldrh	r3, [r7, #22]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d1f0      	bne.n	800eb8e <SCSI_UpdateBotData+0x1a>
  }

  return 0;
 800ebac:	2300      	movs	r3, #0
}
 800ebae:	4618      	mov	r0, r3
 800ebb0:	371c      	adds	r7, #28
 800ebb2:	46bd      	mov	sp, r7
 800ebb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb8:	4770      	bx	lr

0800ebba <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ebba:	b580      	push	{r7, lr}
 800ebbc:	b086      	sub	sp, #24
 800ebbe:	af00      	add	r7, sp, #0
 800ebc0:	60f8      	str	r0, [r7, #12]
 800ebc2:	60b9      	str	r1, [r7, #8]
 800ebc4:	4613      	mov	r3, r2
 800ebc6:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d101      	bne.n	800ebd2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800ebce:	2303      	movs	r3, #3
 800ebd0:	e025      	b.n	800ec1e <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d003      	beq.n	800ebe4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	2200      	movs	r2, #0
 800ebe0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d003      	beq.n	800ebf6 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	2200      	movs	r2, #0
 800ebf2:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ebf6:	68bb      	ldr	r3, [r7, #8]
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d003      	beq.n	800ec04 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	68ba      	ldr	r2, [r7, #8]
 800ec00:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	2201      	movs	r2, #1
 800ec08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	79fa      	ldrb	r2, [r7, #7]
 800ec10:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ec12:	68f8      	ldr	r0, [r7, #12]
 800ec14:	f003 fece 	bl	80129b4 <USBD_LL_Init>
 800ec18:	4603      	mov	r3, r0
 800ec1a:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ec1c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec1e:	4618      	mov	r0, r3
 800ec20:	3718      	adds	r7, #24
 800ec22:	46bd      	mov	sp, r7
 800ec24:	bd80      	pop	{r7, pc}

0800ec26 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ec26:	b580      	push	{r7, lr}
 800ec28:	b084      	sub	sp, #16
 800ec2a:	af00      	add	r7, sp, #0
 800ec2c:	6078      	str	r0, [r7, #4]
 800ec2e:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ec30:	2300      	movs	r3, #0
 800ec32:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ec34:	683b      	ldr	r3, [r7, #0]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d101      	bne.n	800ec3e <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800ec3a:	2303      	movs	r3, #3
 800ec3c:	e010      	b.n	800ec60 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	683a      	ldr	r2, [r7, #0]
 800ec42:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec4e:	f107 020e 	add.w	r2, r7, #14
 800ec52:	4610      	mov	r0, r2
 800ec54:	4798      	blx	r3
 800ec56:	4602      	mov	r2, r0
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800ec5e:	2300      	movs	r3, #0
}
 800ec60:	4618      	mov	r0, r3
 800ec62:	3710      	adds	r7, #16
 800ec64:	46bd      	mov	sp, r7
 800ec66:	bd80      	pop	{r7, pc}

0800ec68 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ec68:	b580      	push	{r7, lr}
 800ec6a:	b082      	sub	sp, #8
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ec70:	6878      	ldr	r0, [r7, #4]
 800ec72:	f003 feef 	bl	8012a54 <USBD_LL_Start>
 800ec76:	4603      	mov	r3, r0
}
 800ec78:	4618      	mov	r0, r3
 800ec7a:	3708      	adds	r7, #8
 800ec7c:	46bd      	mov	sp, r7
 800ec7e:	bd80      	pop	{r7, pc}

0800ec80 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800ec80:	b480      	push	{r7}
 800ec82:	b083      	sub	sp, #12
 800ec84:	af00      	add	r7, sp, #0
 800ec86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ec88:	2300      	movs	r3, #0
}
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	370c      	adds	r7, #12
 800ec8e:	46bd      	mov	sp, r7
 800ec90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec94:	4770      	bx	lr

0800ec96 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ec96:	b580      	push	{r7, lr}
 800ec98:	b084      	sub	sp, #16
 800ec9a:	af00      	add	r7, sp, #0
 800ec9c:	6078      	str	r0, [r7, #4]
 800ec9e:	460b      	mov	r3, r1
 800eca0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800eca2:	2303      	movs	r3, #3
 800eca4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d009      	beq.n	800ecc4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	78fa      	ldrb	r2, [r7, #3]
 800ecba:	4611      	mov	r1, r2
 800ecbc:	6878      	ldr	r0, [r7, #4]
 800ecbe:	4798      	blx	r3
 800ecc0:	4603      	mov	r3, r0
 800ecc2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800ecc4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	3710      	adds	r7, #16
 800ecca:	46bd      	mov	sp, r7
 800eccc:	bd80      	pop	{r7, pc}

0800ecce <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ecce:	b580      	push	{r7, lr}
 800ecd0:	b082      	sub	sp, #8
 800ecd2:	af00      	add	r7, sp, #0
 800ecd4:	6078      	str	r0, [r7, #4]
 800ecd6:	460b      	mov	r3, r1
 800ecd8:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d007      	beq.n	800ecf4 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ecea:	685b      	ldr	r3, [r3, #4]
 800ecec:	78fa      	ldrb	r2, [r7, #3]
 800ecee:	4611      	mov	r1, r2
 800ecf0:	6878      	ldr	r0, [r7, #4]
 800ecf2:	4798      	blx	r3
  }

  return USBD_OK;
 800ecf4:	2300      	movs	r3, #0
}
 800ecf6:	4618      	mov	r0, r3
 800ecf8:	3708      	adds	r7, #8
 800ecfa:	46bd      	mov	sp, r7
 800ecfc:	bd80      	pop	{r7, pc}

0800ecfe <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ecfe:	b580      	push	{r7, lr}
 800ed00:	b084      	sub	sp, #16
 800ed02:	af00      	add	r7, sp, #0
 800ed04:	6078      	str	r0, [r7, #4]
 800ed06:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ed0e:	6839      	ldr	r1, [r7, #0]
 800ed10:	4618      	mov	r0, r3
 800ed12:	f000 ff2b 	bl	800fb6c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	2201      	movs	r2, #1
 800ed1a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800ed24:	461a      	mov	r2, r3
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ed32:	f003 031f 	and.w	r3, r3, #31
 800ed36:	2b01      	cmp	r3, #1
 800ed38:	d00e      	beq.n	800ed58 <USBD_LL_SetupStage+0x5a>
 800ed3a:	2b01      	cmp	r3, #1
 800ed3c:	d302      	bcc.n	800ed44 <USBD_LL_SetupStage+0x46>
 800ed3e:	2b02      	cmp	r3, #2
 800ed40:	d014      	beq.n	800ed6c <USBD_LL_SetupStage+0x6e>
 800ed42:	e01d      	b.n	800ed80 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ed4a:	4619      	mov	r1, r3
 800ed4c:	6878      	ldr	r0, [r7, #4]
 800ed4e:	f000 fa17 	bl	800f180 <USBD_StdDevReq>
 800ed52:	4603      	mov	r3, r0
 800ed54:	73fb      	strb	r3, [r7, #15]
      break;
 800ed56:	e020      	b.n	800ed9a <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ed5e:	4619      	mov	r1, r3
 800ed60:	6878      	ldr	r0, [r7, #4]
 800ed62:	f000 fa7b 	bl	800f25c <USBD_StdItfReq>
 800ed66:	4603      	mov	r3, r0
 800ed68:	73fb      	strb	r3, [r7, #15]
      break;
 800ed6a:	e016      	b.n	800ed9a <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ed72:	4619      	mov	r1, r3
 800ed74:	6878      	ldr	r0, [r7, #4]
 800ed76:	f000 fab7 	bl	800f2e8 <USBD_StdEPReq>
 800ed7a:	4603      	mov	r3, r0
 800ed7c:	73fb      	strb	r3, [r7, #15]
      break;
 800ed7e:	e00c      	b.n	800ed9a <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ed86:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ed8a:	b2db      	uxtb	r3, r3
 800ed8c:	4619      	mov	r1, r3
 800ed8e:	6878      	ldr	r0, [r7, #4]
 800ed90:	f003 fedf 	bl	8012b52 <USBD_LL_StallEP>
 800ed94:	4603      	mov	r3, r0
 800ed96:	73fb      	strb	r3, [r7, #15]
      break;
 800ed98:	bf00      	nop
  }

  return ret;
 800ed9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	3710      	adds	r7, #16
 800eda0:	46bd      	mov	sp, r7
 800eda2:	bd80      	pop	{r7, pc}

0800eda4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800eda4:	b580      	push	{r7, lr}
 800eda6:	b086      	sub	sp, #24
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	60f8      	str	r0, [r7, #12]
 800edac:	460b      	mov	r3, r1
 800edae:	607a      	str	r2, [r7, #4]
 800edb0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800edb2:	7afb      	ldrb	r3, [r7, #11]
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d137      	bne.n	800ee28 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800edbe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800edc6:	2b03      	cmp	r3, #3
 800edc8:	d14a      	bne.n	800ee60 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800edca:	693b      	ldr	r3, [r7, #16]
 800edcc:	689a      	ldr	r2, [r3, #8]
 800edce:	693b      	ldr	r3, [r7, #16]
 800edd0:	68db      	ldr	r3, [r3, #12]
 800edd2:	429a      	cmp	r2, r3
 800edd4:	d913      	bls.n	800edfe <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800edd6:	693b      	ldr	r3, [r7, #16]
 800edd8:	689a      	ldr	r2, [r3, #8]
 800edda:	693b      	ldr	r3, [r7, #16]
 800eddc:	68db      	ldr	r3, [r3, #12]
 800edde:	1ad2      	subs	r2, r2, r3
 800ede0:	693b      	ldr	r3, [r7, #16]
 800ede2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ede4:	693b      	ldr	r3, [r7, #16]
 800ede6:	68da      	ldr	r2, [r3, #12]
 800ede8:	693b      	ldr	r3, [r7, #16]
 800edea:	689b      	ldr	r3, [r3, #8]
 800edec:	4293      	cmp	r3, r2
 800edee:	bf28      	it	cs
 800edf0:	4613      	movcs	r3, r2
 800edf2:	461a      	mov	r2, r3
 800edf4:	6879      	ldr	r1, [r7, #4]
 800edf6:	68f8      	ldr	r0, [r7, #12]
 800edf8:	f000 ff8f 	bl	800fd1a <USBD_CtlContinueRx>
 800edfc:	e030      	b.n	800ee60 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee04:	691b      	ldr	r3, [r3, #16]
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d00a      	beq.n	800ee20 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800ee10:	2b03      	cmp	r3, #3
 800ee12:	d105      	bne.n	800ee20 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee1a:	691b      	ldr	r3, [r3, #16]
 800ee1c:	68f8      	ldr	r0, [r7, #12]
 800ee1e:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800ee20:	68f8      	ldr	r0, [r7, #12]
 800ee22:	f000 ff8b 	bl	800fd3c <USBD_CtlSendStatus>
 800ee26:	e01b      	b.n	800ee60 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee2e:	699b      	ldr	r3, [r3, #24]
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d013      	beq.n	800ee5c <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800ee3a:	2b03      	cmp	r3, #3
 800ee3c:	d10e      	bne.n	800ee5c <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee44:	699b      	ldr	r3, [r3, #24]
 800ee46:	7afa      	ldrb	r2, [r7, #11]
 800ee48:	4611      	mov	r1, r2
 800ee4a:	68f8      	ldr	r0, [r7, #12]
 800ee4c:	4798      	blx	r3
 800ee4e:	4603      	mov	r3, r0
 800ee50:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800ee52:	7dfb      	ldrb	r3, [r7, #23]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d003      	beq.n	800ee60 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800ee58:	7dfb      	ldrb	r3, [r7, #23]
 800ee5a:	e002      	b.n	800ee62 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800ee5c:	2303      	movs	r3, #3
 800ee5e:	e000      	b.n	800ee62 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800ee60:	2300      	movs	r3, #0
}
 800ee62:	4618      	mov	r0, r3
 800ee64:	3718      	adds	r7, #24
 800ee66:	46bd      	mov	sp, r7
 800ee68:	bd80      	pop	{r7, pc}

0800ee6a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ee6a:	b580      	push	{r7, lr}
 800ee6c:	b086      	sub	sp, #24
 800ee6e:	af00      	add	r7, sp, #0
 800ee70:	60f8      	str	r0, [r7, #12]
 800ee72:	460b      	mov	r3, r1
 800ee74:	607a      	str	r2, [r7, #4]
 800ee76:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ee78:	7afb      	ldrb	r3, [r7, #11]
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d16a      	bne.n	800ef54 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	3314      	adds	r3, #20
 800ee82:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ee8a:	2b02      	cmp	r3, #2
 800ee8c:	d155      	bne.n	800ef3a <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800ee8e:	693b      	ldr	r3, [r7, #16]
 800ee90:	689a      	ldr	r2, [r3, #8]
 800ee92:	693b      	ldr	r3, [r7, #16]
 800ee94:	68db      	ldr	r3, [r3, #12]
 800ee96:	429a      	cmp	r2, r3
 800ee98:	d914      	bls.n	800eec4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ee9a:	693b      	ldr	r3, [r7, #16]
 800ee9c:	689a      	ldr	r2, [r3, #8]
 800ee9e:	693b      	ldr	r3, [r7, #16]
 800eea0:	68db      	ldr	r3, [r3, #12]
 800eea2:	1ad2      	subs	r2, r2, r3
 800eea4:	693b      	ldr	r3, [r7, #16]
 800eea6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800eea8:	693b      	ldr	r3, [r7, #16]
 800eeaa:	689b      	ldr	r3, [r3, #8]
 800eeac:	461a      	mov	r2, r3
 800eeae:	6879      	ldr	r1, [r7, #4]
 800eeb0:	68f8      	ldr	r0, [r7, #12]
 800eeb2:	f000 ff21 	bl	800fcf8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800eeb6:	2300      	movs	r3, #0
 800eeb8:	2200      	movs	r2, #0
 800eeba:	2100      	movs	r1, #0
 800eebc:	68f8      	ldr	r0, [r7, #12]
 800eebe:	f003 fef2 	bl	8012ca6 <USBD_LL_PrepareReceive>
 800eec2:	e03a      	b.n	800ef3a <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800eec4:	693b      	ldr	r3, [r7, #16]
 800eec6:	68da      	ldr	r2, [r3, #12]
 800eec8:	693b      	ldr	r3, [r7, #16]
 800eeca:	689b      	ldr	r3, [r3, #8]
 800eecc:	429a      	cmp	r2, r3
 800eece:	d11c      	bne.n	800ef0a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800eed0:	693b      	ldr	r3, [r7, #16]
 800eed2:	685a      	ldr	r2, [r3, #4]
 800eed4:	693b      	ldr	r3, [r7, #16]
 800eed6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800eed8:	429a      	cmp	r2, r3
 800eeda:	d316      	bcc.n	800ef0a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800eedc:	693b      	ldr	r3, [r7, #16]
 800eede:	685a      	ldr	r2, [r3, #4]
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800eee6:	429a      	cmp	r2, r3
 800eee8:	d20f      	bcs.n	800ef0a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800eeea:	2200      	movs	r2, #0
 800eeec:	2100      	movs	r1, #0
 800eeee:	68f8      	ldr	r0, [r7, #12]
 800eef0:	f000 ff02 	bl	800fcf8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	2200      	movs	r2, #0
 800eef8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800eefc:	2300      	movs	r3, #0
 800eefe:	2200      	movs	r2, #0
 800ef00:	2100      	movs	r1, #0
 800ef02:	68f8      	ldr	r0, [r7, #12]
 800ef04:	f003 fecf 	bl	8012ca6 <USBD_LL_PrepareReceive>
 800ef08:	e017      	b.n	800ef3a <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef10:	68db      	ldr	r3, [r3, #12]
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d00a      	beq.n	800ef2c <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800ef1c:	2b03      	cmp	r3, #3
 800ef1e:	d105      	bne.n	800ef2c <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef26:	68db      	ldr	r3, [r3, #12]
 800ef28:	68f8      	ldr	r0, [r7, #12]
 800ef2a:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ef2c:	2180      	movs	r1, #128	; 0x80
 800ef2e:	68f8      	ldr	r0, [r7, #12]
 800ef30:	f003 fe0f 	bl	8012b52 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ef34:	68f8      	ldr	r0, [r7, #12]
 800ef36:	f000 ff14 	bl	800fd62 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ef40:	2b01      	cmp	r3, #1
 800ef42:	d123      	bne.n	800ef8c <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800ef44:	68f8      	ldr	r0, [r7, #12]
 800ef46:	f7ff fe9b 	bl	800ec80 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	2200      	movs	r2, #0
 800ef4e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ef52:	e01b      	b.n	800ef8c <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef5a:	695b      	ldr	r3, [r3, #20]
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d013      	beq.n	800ef88 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800ef66:	2b03      	cmp	r3, #3
 800ef68:	d10e      	bne.n	800ef88 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef70:	695b      	ldr	r3, [r3, #20]
 800ef72:	7afa      	ldrb	r2, [r7, #11]
 800ef74:	4611      	mov	r1, r2
 800ef76:	68f8      	ldr	r0, [r7, #12]
 800ef78:	4798      	blx	r3
 800ef7a:	4603      	mov	r3, r0
 800ef7c:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800ef7e:	7dfb      	ldrb	r3, [r7, #23]
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d003      	beq.n	800ef8c <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800ef84:	7dfb      	ldrb	r3, [r7, #23]
 800ef86:	e002      	b.n	800ef8e <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800ef88:	2303      	movs	r3, #3
 800ef8a:	e000      	b.n	800ef8e <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800ef8c:	2300      	movs	r3, #0
}
 800ef8e:	4618      	mov	r0, r3
 800ef90:	3718      	adds	r7, #24
 800ef92:	46bd      	mov	sp, r7
 800ef94:	bd80      	pop	{r7, pc}

0800ef96 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ef96:	b580      	push	{r7, lr}
 800ef98:	b082      	sub	sp, #8
 800ef9a:	af00      	add	r7, sp, #0
 800ef9c:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	2201      	movs	r2, #1
 800efa2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	2200      	movs	r2, #0
 800efaa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	2200      	movs	r2, #0
 800efb2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	2200      	movs	r2, #0
 800efb8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d009      	beq.n	800efda <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800efcc:	685b      	ldr	r3, [r3, #4]
 800efce:	687a      	ldr	r2, [r7, #4]
 800efd0:	6852      	ldr	r2, [r2, #4]
 800efd2:	b2d2      	uxtb	r2, r2
 800efd4:	4611      	mov	r1, r2
 800efd6:	6878      	ldr	r0, [r7, #4]
 800efd8:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800efda:	2340      	movs	r3, #64	; 0x40
 800efdc:	2200      	movs	r2, #0
 800efde:	2100      	movs	r1, #0
 800efe0:	6878      	ldr	r0, [r7, #4]
 800efe2:	f003 fd52 	bl	8012a8a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	2201      	movs	r2, #1
 800efea:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	2240      	movs	r2, #64	; 0x40
 800eff2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800eff6:	2340      	movs	r3, #64	; 0x40
 800eff8:	2200      	movs	r2, #0
 800effa:	2180      	movs	r1, #128	; 0x80
 800effc:	6878      	ldr	r0, [r7, #4]
 800effe:	f003 fd44 	bl	8012a8a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	2201      	movs	r2, #1
 800f006:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	2240      	movs	r2, #64	; 0x40
 800f00c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800f00e:	2300      	movs	r3, #0
}
 800f010:	4618      	mov	r0, r3
 800f012:	3708      	adds	r7, #8
 800f014:	46bd      	mov	sp, r7
 800f016:	bd80      	pop	{r7, pc}

0800f018 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800f018:	b480      	push	{r7}
 800f01a:	b083      	sub	sp, #12
 800f01c:	af00      	add	r7, sp, #0
 800f01e:	6078      	str	r0, [r7, #4]
 800f020:	460b      	mov	r3, r1
 800f022:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	78fa      	ldrb	r2, [r7, #3]
 800f028:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800f02a:	2300      	movs	r3, #0
}
 800f02c:	4618      	mov	r0, r3
 800f02e:	370c      	adds	r7, #12
 800f030:	46bd      	mov	sp, r7
 800f032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f036:	4770      	bx	lr

0800f038 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800f038:	b480      	push	{r7}
 800f03a:	b083      	sub	sp, #12
 800f03c:	af00      	add	r7, sp, #0
 800f03e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	2204      	movs	r2, #4
 800f050:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800f054:	2300      	movs	r3, #0
}
 800f056:	4618      	mov	r0, r3
 800f058:	370c      	adds	r7, #12
 800f05a:	46bd      	mov	sp, r7
 800f05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f060:	4770      	bx	lr

0800f062 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800f062:	b480      	push	{r7}
 800f064:	b083      	sub	sp, #12
 800f066:	af00      	add	r7, sp, #0
 800f068:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f070:	2b04      	cmp	r3, #4
 800f072:	d105      	bne.n	800f080 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800f080:	2300      	movs	r3, #0
}
 800f082:	4618      	mov	r0, r3
 800f084:	370c      	adds	r7, #12
 800f086:	46bd      	mov	sp, r7
 800f088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f08c:	4770      	bx	lr

0800f08e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f08e:	b580      	push	{r7, lr}
 800f090:	b082      	sub	sp, #8
 800f092:	af00      	add	r7, sp, #0
 800f094:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f09c:	2b03      	cmp	r3, #3
 800f09e:	d10b      	bne.n	800f0b8 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f0a6:	69db      	ldr	r3, [r3, #28]
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d005      	beq.n	800f0b8 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f0b2:	69db      	ldr	r3, [r3, #28]
 800f0b4:	6878      	ldr	r0, [r7, #4]
 800f0b6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f0b8:	2300      	movs	r3, #0
}
 800f0ba:	4618      	mov	r0, r3
 800f0bc:	3708      	adds	r7, #8
 800f0be:	46bd      	mov	sp, r7
 800f0c0:	bd80      	pop	{r7, pc}

0800f0c2 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800f0c2:	b480      	push	{r7}
 800f0c4:	b083      	sub	sp, #12
 800f0c6:	af00      	add	r7, sp, #0
 800f0c8:	6078      	str	r0, [r7, #4]
 800f0ca:	460b      	mov	r3, r1
 800f0cc:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800f0ce:	2300      	movs	r3, #0
}
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	370c      	adds	r7, #12
 800f0d4:	46bd      	mov	sp, r7
 800f0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0da:	4770      	bx	lr

0800f0dc <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800f0dc:	b480      	push	{r7}
 800f0de:	b083      	sub	sp, #12
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	6078      	str	r0, [r7, #4]
 800f0e4:	460b      	mov	r3, r1
 800f0e6:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800f0e8:	2300      	movs	r3, #0
}
 800f0ea:	4618      	mov	r0, r3
 800f0ec:	370c      	adds	r7, #12
 800f0ee:	46bd      	mov	sp, r7
 800f0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0f4:	4770      	bx	lr

0800f0f6 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800f0f6:	b480      	push	{r7}
 800f0f8:	b083      	sub	sp, #12
 800f0fa:	af00      	add	r7, sp, #0
 800f0fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f0fe:	2300      	movs	r3, #0
}
 800f100:	4618      	mov	r0, r3
 800f102:	370c      	adds	r7, #12
 800f104:	46bd      	mov	sp, r7
 800f106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f10a:	4770      	bx	lr

0800f10c <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800f10c:	b580      	push	{r7, lr}
 800f10e:	b082      	sub	sp, #8
 800f110:	af00      	add	r7, sp, #0
 800f112:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	2201      	movs	r2, #1
 800f118:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f122:	2b00      	cmp	r3, #0
 800f124:	d009      	beq.n	800f13a <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f12c:	685b      	ldr	r3, [r3, #4]
 800f12e:	687a      	ldr	r2, [r7, #4]
 800f130:	6852      	ldr	r2, [r2, #4]
 800f132:	b2d2      	uxtb	r2, r2
 800f134:	4611      	mov	r1, r2
 800f136:	6878      	ldr	r0, [r7, #4]
 800f138:	4798      	blx	r3
  }

  return USBD_OK;
 800f13a:	2300      	movs	r3, #0
}
 800f13c:	4618      	mov	r0, r3
 800f13e:	3708      	adds	r7, #8
 800f140:	46bd      	mov	sp, r7
 800f142:	bd80      	pop	{r7, pc}

0800f144 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f144:	b480      	push	{r7}
 800f146:	b087      	sub	sp, #28
 800f148:	af00      	add	r7, sp, #0
 800f14a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f150:	697b      	ldr	r3, [r7, #20]
 800f152:	781b      	ldrb	r3, [r3, #0]
 800f154:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f156:	697b      	ldr	r3, [r7, #20]
 800f158:	3301      	adds	r3, #1
 800f15a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f15c:	697b      	ldr	r3, [r7, #20]
 800f15e:	781b      	ldrb	r3, [r3, #0]
 800f160:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f162:	8a3b      	ldrh	r3, [r7, #16]
 800f164:	021b      	lsls	r3, r3, #8
 800f166:	b21a      	sxth	r2, r3
 800f168:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f16c:	4313      	orrs	r3, r2
 800f16e:	b21b      	sxth	r3, r3
 800f170:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f172:	89fb      	ldrh	r3, [r7, #14]
}
 800f174:	4618      	mov	r0, r3
 800f176:	371c      	adds	r7, #28
 800f178:	46bd      	mov	sp, r7
 800f17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f17e:	4770      	bx	lr

0800f180 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f180:	b580      	push	{r7, lr}
 800f182:	b084      	sub	sp, #16
 800f184:	af00      	add	r7, sp, #0
 800f186:	6078      	str	r0, [r7, #4]
 800f188:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f18a:	2300      	movs	r3, #0
 800f18c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f18e:	683b      	ldr	r3, [r7, #0]
 800f190:	781b      	ldrb	r3, [r3, #0]
 800f192:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f196:	2b20      	cmp	r3, #32
 800f198:	d004      	beq.n	800f1a4 <USBD_StdDevReq+0x24>
 800f19a:	2b40      	cmp	r3, #64	; 0x40
 800f19c:	d002      	beq.n	800f1a4 <USBD_StdDevReq+0x24>
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d00a      	beq.n	800f1b8 <USBD_StdDevReq+0x38>
 800f1a2:	e050      	b.n	800f246 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f1aa:	689b      	ldr	r3, [r3, #8]
 800f1ac:	6839      	ldr	r1, [r7, #0]
 800f1ae:	6878      	ldr	r0, [r7, #4]
 800f1b0:	4798      	blx	r3
 800f1b2:	4603      	mov	r3, r0
 800f1b4:	73fb      	strb	r3, [r7, #15]
    break;
 800f1b6:	e04b      	b.n	800f250 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800f1b8:	683b      	ldr	r3, [r7, #0]
 800f1ba:	785b      	ldrb	r3, [r3, #1]
 800f1bc:	2b09      	cmp	r3, #9
 800f1be:	d83c      	bhi.n	800f23a <USBD_StdDevReq+0xba>
 800f1c0:	a201      	add	r2, pc, #4	; (adr r2, 800f1c8 <USBD_StdDevReq+0x48>)
 800f1c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1c6:	bf00      	nop
 800f1c8:	0800f21d 	.word	0x0800f21d
 800f1cc:	0800f231 	.word	0x0800f231
 800f1d0:	0800f23b 	.word	0x0800f23b
 800f1d4:	0800f227 	.word	0x0800f227
 800f1d8:	0800f23b 	.word	0x0800f23b
 800f1dc:	0800f1fb 	.word	0x0800f1fb
 800f1e0:	0800f1f1 	.word	0x0800f1f1
 800f1e4:	0800f23b 	.word	0x0800f23b
 800f1e8:	0800f213 	.word	0x0800f213
 800f1ec:	0800f205 	.word	0x0800f205
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800f1f0:	6839      	ldr	r1, [r7, #0]
 800f1f2:	6878      	ldr	r0, [r7, #4]
 800f1f4:	f000 f9ce 	bl	800f594 <USBD_GetDescriptor>
      break;
 800f1f8:	e024      	b.n	800f244 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800f1fa:	6839      	ldr	r1, [r7, #0]
 800f1fc:	6878      	ldr	r0, [r7, #4]
 800f1fe:	f000 fb33 	bl	800f868 <USBD_SetAddress>
      break;
 800f202:	e01f      	b.n	800f244 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800f204:	6839      	ldr	r1, [r7, #0]
 800f206:	6878      	ldr	r0, [r7, #4]
 800f208:	f000 fb70 	bl	800f8ec <USBD_SetConfig>
 800f20c:	4603      	mov	r3, r0
 800f20e:	73fb      	strb	r3, [r7, #15]
      break;
 800f210:	e018      	b.n	800f244 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800f212:	6839      	ldr	r1, [r7, #0]
 800f214:	6878      	ldr	r0, [r7, #4]
 800f216:	f000 fc0d 	bl	800fa34 <USBD_GetConfig>
      break;
 800f21a:	e013      	b.n	800f244 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800f21c:	6839      	ldr	r1, [r7, #0]
 800f21e:	6878      	ldr	r0, [r7, #4]
 800f220:	f000 fc3c 	bl	800fa9c <USBD_GetStatus>
      break;
 800f224:	e00e      	b.n	800f244 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800f226:	6839      	ldr	r1, [r7, #0]
 800f228:	6878      	ldr	r0, [r7, #4]
 800f22a:	f000 fc6a 	bl	800fb02 <USBD_SetFeature>
      break;
 800f22e:	e009      	b.n	800f244 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800f230:	6839      	ldr	r1, [r7, #0]
 800f232:	6878      	ldr	r0, [r7, #4]
 800f234:	f000 fc79 	bl	800fb2a <USBD_ClrFeature>
      break;
 800f238:	e004      	b.n	800f244 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800f23a:	6839      	ldr	r1, [r7, #0]
 800f23c:	6878      	ldr	r0, [r7, #4]
 800f23e:	f000 fccf 	bl	800fbe0 <USBD_CtlError>
      break;
 800f242:	bf00      	nop
    }
    break;
 800f244:	e004      	b.n	800f250 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800f246:	6839      	ldr	r1, [r7, #0]
 800f248:	6878      	ldr	r0, [r7, #4]
 800f24a:	f000 fcc9 	bl	800fbe0 <USBD_CtlError>
    break;
 800f24e:	bf00      	nop
  }

  return ret;
 800f250:	7bfb      	ldrb	r3, [r7, #15]
}
 800f252:	4618      	mov	r0, r3
 800f254:	3710      	adds	r7, #16
 800f256:	46bd      	mov	sp, r7
 800f258:	bd80      	pop	{r7, pc}
 800f25a:	bf00      	nop

0800f25c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f25c:	b580      	push	{r7, lr}
 800f25e:	b084      	sub	sp, #16
 800f260:	af00      	add	r7, sp, #0
 800f262:	6078      	str	r0, [r7, #4]
 800f264:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f266:	2300      	movs	r3, #0
 800f268:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f26a:	683b      	ldr	r3, [r7, #0]
 800f26c:	781b      	ldrb	r3, [r3, #0]
 800f26e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f272:	2b20      	cmp	r3, #32
 800f274:	d003      	beq.n	800f27e <USBD_StdItfReq+0x22>
 800f276:	2b40      	cmp	r3, #64	; 0x40
 800f278:	d001      	beq.n	800f27e <USBD_StdItfReq+0x22>
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d12a      	bne.n	800f2d4 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f284:	3b01      	subs	r3, #1
 800f286:	2b02      	cmp	r3, #2
 800f288:	d81d      	bhi.n	800f2c6 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f28a:	683b      	ldr	r3, [r7, #0]
 800f28c:	889b      	ldrh	r3, [r3, #4]
 800f28e:	b2db      	uxtb	r3, r3
 800f290:	2b01      	cmp	r3, #1
 800f292:	d813      	bhi.n	800f2bc <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f29a:	689b      	ldr	r3, [r3, #8]
 800f29c:	6839      	ldr	r1, [r7, #0]
 800f29e:	6878      	ldr	r0, [r7, #4]
 800f2a0:	4798      	blx	r3
 800f2a2:	4603      	mov	r3, r0
 800f2a4:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800f2a6:	683b      	ldr	r3, [r7, #0]
 800f2a8:	88db      	ldrh	r3, [r3, #6]
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d110      	bne.n	800f2d0 <USBD_StdItfReq+0x74>
 800f2ae:	7bfb      	ldrb	r3, [r7, #15]
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d10d      	bne.n	800f2d0 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800f2b4:	6878      	ldr	r0, [r7, #4]
 800f2b6:	f000 fd41 	bl	800fd3c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800f2ba:	e009      	b.n	800f2d0 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800f2bc:	6839      	ldr	r1, [r7, #0]
 800f2be:	6878      	ldr	r0, [r7, #4]
 800f2c0:	f000 fc8e 	bl	800fbe0 <USBD_CtlError>
      break;
 800f2c4:	e004      	b.n	800f2d0 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800f2c6:	6839      	ldr	r1, [r7, #0]
 800f2c8:	6878      	ldr	r0, [r7, #4]
 800f2ca:	f000 fc89 	bl	800fbe0 <USBD_CtlError>
      break;
 800f2ce:	e000      	b.n	800f2d2 <USBD_StdItfReq+0x76>
      break;
 800f2d0:	bf00      	nop
    }
    break;
 800f2d2:	e004      	b.n	800f2de <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800f2d4:	6839      	ldr	r1, [r7, #0]
 800f2d6:	6878      	ldr	r0, [r7, #4]
 800f2d8:	f000 fc82 	bl	800fbe0 <USBD_CtlError>
    break;
 800f2dc:	bf00      	nop
  }

  return ret;
 800f2de:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2e0:	4618      	mov	r0, r3
 800f2e2:	3710      	adds	r7, #16
 800f2e4:	46bd      	mov	sp, r7
 800f2e6:	bd80      	pop	{r7, pc}

0800f2e8 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f2e8:	b580      	push	{r7, lr}
 800f2ea:	b084      	sub	sp, #16
 800f2ec:	af00      	add	r7, sp, #0
 800f2ee:	6078      	str	r0, [r7, #4]
 800f2f0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800f2f2:	2300      	movs	r3, #0
 800f2f4:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800f2f6:	683b      	ldr	r3, [r7, #0]
 800f2f8:	889b      	ldrh	r3, [r3, #4]
 800f2fa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f2fc:	683b      	ldr	r3, [r7, #0]
 800f2fe:	781b      	ldrb	r3, [r3, #0]
 800f300:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f304:	2b20      	cmp	r3, #32
 800f306:	d004      	beq.n	800f312 <USBD_StdEPReq+0x2a>
 800f308:	2b40      	cmp	r3, #64	; 0x40
 800f30a:	d002      	beq.n	800f312 <USBD_StdEPReq+0x2a>
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d00a      	beq.n	800f326 <USBD_StdEPReq+0x3e>
 800f310:	e135      	b.n	800f57e <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f318:	689b      	ldr	r3, [r3, #8]
 800f31a:	6839      	ldr	r1, [r7, #0]
 800f31c:	6878      	ldr	r0, [r7, #4]
 800f31e:	4798      	blx	r3
 800f320:	4603      	mov	r3, r0
 800f322:	73fb      	strb	r3, [r7, #15]
    break;
 800f324:	e130      	b.n	800f588 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800f326:	683b      	ldr	r3, [r7, #0]
 800f328:	785b      	ldrb	r3, [r3, #1]
 800f32a:	2b01      	cmp	r3, #1
 800f32c:	d03e      	beq.n	800f3ac <USBD_StdEPReq+0xc4>
 800f32e:	2b03      	cmp	r3, #3
 800f330:	d002      	beq.n	800f338 <USBD_StdEPReq+0x50>
 800f332:	2b00      	cmp	r3, #0
 800f334:	d077      	beq.n	800f426 <USBD_StdEPReq+0x13e>
 800f336:	e11c      	b.n	800f572 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f33e:	2b02      	cmp	r3, #2
 800f340:	d002      	beq.n	800f348 <USBD_StdEPReq+0x60>
 800f342:	2b03      	cmp	r3, #3
 800f344:	d015      	beq.n	800f372 <USBD_StdEPReq+0x8a>
 800f346:	e02b      	b.n	800f3a0 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f348:	7bbb      	ldrb	r3, [r7, #14]
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d00c      	beq.n	800f368 <USBD_StdEPReq+0x80>
 800f34e:	7bbb      	ldrb	r3, [r7, #14]
 800f350:	2b80      	cmp	r3, #128	; 0x80
 800f352:	d009      	beq.n	800f368 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800f354:	7bbb      	ldrb	r3, [r7, #14]
 800f356:	4619      	mov	r1, r3
 800f358:	6878      	ldr	r0, [r7, #4]
 800f35a:	f003 fbfa 	bl	8012b52 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f35e:	2180      	movs	r1, #128	; 0x80
 800f360:	6878      	ldr	r0, [r7, #4]
 800f362:	f003 fbf6 	bl	8012b52 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800f366:	e020      	b.n	800f3aa <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800f368:	6839      	ldr	r1, [r7, #0]
 800f36a:	6878      	ldr	r0, [r7, #4]
 800f36c:	f000 fc38 	bl	800fbe0 <USBD_CtlError>
        break;
 800f370:	e01b      	b.n	800f3aa <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800f372:	683b      	ldr	r3, [r7, #0]
 800f374:	885b      	ldrh	r3, [r3, #2]
 800f376:	2b00      	cmp	r3, #0
 800f378:	d10e      	bne.n	800f398 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f37a:	7bbb      	ldrb	r3, [r7, #14]
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d00b      	beq.n	800f398 <USBD_StdEPReq+0xb0>
 800f380:	7bbb      	ldrb	r3, [r7, #14]
 800f382:	2b80      	cmp	r3, #128	; 0x80
 800f384:	d008      	beq.n	800f398 <USBD_StdEPReq+0xb0>
 800f386:	683b      	ldr	r3, [r7, #0]
 800f388:	88db      	ldrh	r3, [r3, #6]
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d104      	bne.n	800f398 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800f38e:	7bbb      	ldrb	r3, [r7, #14]
 800f390:	4619      	mov	r1, r3
 800f392:	6878      	ldr	r0, [r7, #4]
 800f394:	f003 fbdd 	bl	8012b52 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800f398:	6878      	ldr	r0, [r7, #4]
 800f39a:	f000 fccf 	bl	800fd3c <USBD_CtlSendStatus>

        break;
 800f39e:	e004      	b.n	800f3aa <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800f3a0:	6839      	ldr	r1, [r7, #0]
 800f3a2:	6878      	ldr	r0, [r7, #4]
 800f3a4:	f000 fc1c 	bl	800fbe0 <USBD_CtlError>
        break;
 800f3a8:	bf00      	nop
      }
      break;
 800f3aa:	e0e7      	b.n	800f57c <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f3b2:	2b02      	cmp	r3, #2
 800f3b4:	d002      	beq.n	800f3bc <USBD_StdEPReq+0xd4>
 800f3b6:	2b03      	cmp	r3, #3
 800f3b8:	d015      	beq.n	800f3e6 <USBD_StdEPReq+0xfe>
 800f3ba:	e02d      	b.n	800f418 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f3bc:	7bbb      	ldrb	r3, [r7, #14]
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d00c      	beq.n	800f3dc <USBD_StdEPReq+0xf4>
 800f3c2:	7bbb      	ldrb	r3, [r7, #14]
 800f3c4:	2b80      	cmp	r3, #128	; 0x80
 800f3c6:	d009      	beq.n	800f3dc <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800f3c8:	7bbb      	ldrb	r3, [r7, #14]
 800f3ca:	4619      	mov	r1, r3
 800f3cc:	6878      	ldr	r0, [r7, #4]
 800f3ce:	f003 fbc0 	bl	8012b52 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f3d2:	2180      	movs	r1, #128	; 0x80
 800f3d4:	6878      	ldr	r0, [r7, #4]
 800f3d6:	f003 fbbc 	bl	8012b52 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800f3da:	e023      	b.n	800f424 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800f3dc:	6839      	ldr	r1, [r7, #0]
 800f3de:	6878      	ldr	r0, [r7, #4]
 800f3e0:	f000 fbfe 	bl	800fbe0 <USBD_CtlError>
        break;
 800f3e4:	e01e      	b.n	800f424 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800f3e6:	683b      	ldr	r3, [r7, #0]
 800f3e8:	885b      	ldrh	r3, [r3, #2]
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d119      	bne.n	800f422 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800f3ee:	7bbb      	ldrb	r3, [r7, #14]
 800f3f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d004      	beq.n	800f402 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f3f8:	7bbb      	ldrb	r3, [r7, #14]
 800f3fa:	4619      	mov	r1, r3
 800f3fc:	6878      	ldr	r0, [r7, #4]
 800f3fe:	f003 fbc7 	bl	8012b90 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800f402:	6878      	ldr	r0, [r7, #4]
 800f404:	f000 fc9a 	bl	800fd3c <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f40e:	689b      	ldr	r3, [r3, #8]
 800f410:	6839      	ldr	r1, [r7, #0]
 800f412:	6878      	ldr	r0, [r7, #4]
 800f414:	4798      	blx	r3
        }
        break;
 800f416:	e004      	b.n	800f422 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800f418:	6839      	ldr	r1, [r7, #0]
 800f41a:	6878      	ldr	r0, [r7, #4]
 800f41c:	f000 fbe0 	bl	800fbe0 <USBD_CtlError>
        break;
 800f420:	e000      	b.n	800f424 <USBD_StdEPReq+0x13c>
        break;
 800f422:	bf00      	nop
      }
      break;
 800f424:	e0aa      	b.n	800f57c <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f42c:	2b02      	cmp	r3, #2
 800f42e:	d002      	beq.n	800f436 <USBD_StdEPReq+0x14e>
 800f430:	2b03      	cmp	r3, #3
 800f432:	d032      	beq.n	800f49a <USBD_StdEPReq+0x1b2>
 800f434:	e097      	b.n	800f566 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f436:	7bbb      	ldrb	r3, [r7, #14]
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d007      	beq.n	800f44c <USBD_StdEPReq+0x164>
 800f43c:	7bbb      	ldrb	r3, [r7, #14]
 800f43e:	2b80      	cmp	r3, #128	; 0x80
 800f440:	d004      	beq.n	800f44c <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800f442:	6839      	ldr	r1, [r7, #0]
 800f444:	6878      	ldr	r0, [r7, #4]
 800f446:	f000 fbcb 	bl	800fbe0 <USBD_CtlError>
          break;
 800f44a:	e091      	b.n	800f570 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f44c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f450:	2b00      	cmp	r3, #0
 800f452:	da0b      	bge.n	800f46c <USBD_StdEPReq+0x184>
 800f454:	7bbb      	ldrb	r3, [r7, #14]
 800f456:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f45a:	4613      	mov	r3, r2
 800f45c:	009b      	lsls	r3, r3, #2
 800f45e:	4413      	add	r3, r2
 800f460:	009b      	lsls	r3, r3, #2
 800f462:	3310      	adds	r3, #16
 800f464:	687a      	ldr	r2, [r7, #4]
 800f466:	4413      	add	r3, r2
 800f468:	3304      	adds	r3, #4
 800f46a:	e00b      	b.n	800f484 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800f46c:	7bbb      	ldrb	r3, [r7, #14]
 800f46e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f472:	4613      	mov	r3, r2
 800f474:	009b      	lsls	r3, r3, #2
 800f476:	4413      	add	r3, r2
 800f478:	009b      	lsls	r3, r3, #2
 800f47a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f47e:	687a      	ldr	r2, [r7, #4]
 800f480:	4413      	add	r3, r2
 800f482:	3304      	adds	r3, #4
 800f484:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800f486:	68bb      	ldr	r3, [r7, #8]
 800f488:	2200      	movs	r2, #0
 800f48a:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f48c:	68bb      	ldr	r3, [r7, #8]
 800f48e:	2202      	movs	r2, #2
 800f490:	4619      	mov	r1, r3
 800f492:	6878      	ldr	r0, [r7, #4]
 800f494:	f000 fc15 	bl	800fcc2 <USBD_CtlSendData>
        break;
 800f498:	e06a      	b.n	800f570 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800f49a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	da11      	bge.n	800f4c6 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f4a2:	7bbb      	ldrb	r3, [r7, #14]
 800f4a4:	f003 020f 	and.w	r2, r3, #15
 800f4a8:	6879      	ldr	r1, [r7, #4]
 800f4aa:	4613      	mov	r3, r2
 800f4ac:	009b      	lsls	r3, r3, #2
 800f4ae:	4413      	add	r3, r2
 800f4b0:	009b      	lsls	r3, r3, #2
 800f4b2:	440b      	add	r3, r1
 800f4b4:	3324      	adds	r3, #36	; 0x24
 800f4b6:	881b      	ldrh	r3, [r3, #0]
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d117      	bne.n	800f4ec <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800f4bc:	6839      	ldr	r1, [r7, #0]
 800f4be:	6878      	ldr	r0, [r7, #4]
 800f4c0:	f000 fb8e 	bl	800fbe0 <USBD_CtlError>
            break;
 800f4c4:	e054      	b.n	800f570 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f4c6:	7bbb      	ldrb	r3, [r7, #14]
 800f4c8:	f003 020f 	and.w	r2, r3, #15
 800f4cc:	6879      	ldr	r1, [r7, #4]
 800f4ce:	4613      	mov	r3, r2
 800f4d0:	009b      	lsls	r3, r3, #2
 800f4d2:	4413      	add	r3, r2
 800f4d4:	009b      	lsls	r3, r3, #2
 800f4d6:	440b      	add	r3, r1
 800f4d8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800f4dc:	881b      	ldrh	r3, [r3, #0]
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d104      	bne.n	800f4ec <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800f4e2:	6839      	ldr	r1, [r7, #0]
 800f4e4:	6878      	ldr	r0, [r7, #4]
 800f4e6:	f000 fb7b 	bl	800fbe0 <USBD_CtlError>
            break;
 800f4ea:	e041      	b.n	800f570 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f4ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	da0b      	bge.n	800f50c <USBD_StdEPReq+0x224>
 800f4f4:	7bbb      	ldrb	r3, [r7, #14]
 800f4f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f4fa:	4613      	mov	r3, r2
 800f4fc:	009b      	lsls	r3, r3, #2
 800f4fe:	4413      	add	r3, r2
 800f500:	009b      	lsls	r3, r3, #2
 800f502:	3310      	adds	r3, #16
 800f504:	687a      	ldr	r2, [r7, #4]
 800f506:	4413      	add	r3, r2
 800f508:	3304      	adds	r3, #4
 800f50a:	e00b      	b.n	800f524 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800f50c:	7bbb      	ldrb	r3, [r7, #14]
 800f50e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f512:	4613      	mov	r3, r2
 800f514:	009b      	lsls	r3, r3, #2
 800f516:	4413      	add	r3, r2
 800f518:	009b      	lsls	r3, r3, #2
 800f51a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f51e:	687a      	ldr	r2, [r7, #4]
 800f520:	4413      	add	r3, r2
 800f522:	3304      	adds	r3, #4
 800f524:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f526:	7bbb      	ldrb	r3, [r7, #14]
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d002      	beq.n	800f532 <USBD_StdEPReq+0x24a>
 800f52c:	7bbb      	ldrb	r3, [r7, #14]
 800f52e:	2b80      	cmp	r3, #128	; 0x80
 800f530:	d103      	bne.n	800f53a <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800f532:	68bb      	ldr	r3, [r7, #8]
 800f534:	2200      	movs	r2, #0
 800f536:	601a      	str	r2, [r3, #0]
 800f538:	e00e      	b.n	800f558 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f53a:	7bbb      	ldrb	r3, [r7, #14]
 800f53c:	4619      	mov	r1, r3
 800f53e:	6878      	ldr	r0, [r7, #4]
 800f540:	f003 fb45 	bl	8012bce <USBD_LL_IsStallEP>
 800f544:	4603      	mov	r3, r0
 800f546:	2b00      	cmp	r3, #0
 800f548:	d003      	beq.n	800f552 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800f54a:	68bb      	ldr	r3, [r7, #8]
 800f54c:	2201      	movs	r2, #1
 800f54e:	601a      	str	r2, [r3, #0]
 800f550:	e002      	b.n	800f558 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800f552:	68bb      	ldr	r3, [r7, #8]
 800f554:	2200      	movs	r2, #0
 800f556:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f558:	68bb      	ldr	r3, [r7, #8]
 800f55a:	2202      	movs	r2, #2
 800f55c:	4619      	mov	r1, r3
 800f55e:	6878      	ldr	r0, [r7, #4]
 800f560:	f000 fbaf 	bl	800fcc2 <USBD_CtlSendData>
          break;
 800f564:	e004      	b.n	800f570 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800f566:	6839      	ldr	r1, [r7, #0]
 800f568:	6878      	ldr	r0, [r7, #4]
 800f56a:	f000 fb39 	bl	800fbe0 <USBD_CtlError>
        break;
 800f56e:	bf00      	nop
      }
      break;
 800f570:	e004      	b.n	800f57c <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800f572:	6839      	ldr	r1, [r7, #0]
 800f574:	6878      	ldr	r0, [r7, #4]
 800f576:	f000 fb33 	bl	800fbe0 <USBD_CtlError>
      break;
 800f57a:	bf00      	nop
    }
    break;
 800f57c:	e004      	b.n	800f588 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800f57e:	6839      	ldr	r1, [r7, #0]
 800f580:	6878      	ldr	r0, [r7, #4]
 800f582:	f000 fb2d 	bl	800fbe0 <USBD_CtlError>
    break;
 800f586:	bf00      	nop
  }

  return ret;
 800f588:	7bfb      	ldrb	r3, [r7, #15]
}
 800f58a:	4618      	mov	r0, r3
 800f58c:	3710      	adds	r7, #16
 800f58e:	46bd      	mov	sp, r7
 800f590:	bd80      	pop	{r7, pc}
	...

0800f594 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f594:	b580      	push	{r7, lr}
 800f596:	b084      	sub	sp, #16
 800f598:	af00      	add	r7, sp, #0
 800f59a:	6078      	str	r0, [r7, #4]
 800f59c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f59e:	2300      	movs	r3, #0
 800f5a0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f5a2:	2300      	movs	r3, #0
 800f5a4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f5a6:	2300      	movs	r3, #0
 800f5a8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f5aa:	683b      	ldr	r3, [r7, #0]
 800f5ac:	885b      	ldrh	r3, [r3, #2]
 800f5ae:	0a1b      	lsrs	r3, r3, #8
 800f5b0:	b29b      	uxth	r3, r3
 800f5b2:	3b01      	subs	r3, #1
 800f5b4:	2b06      	cmp	r3, #6
 800f5b6:	f200 8128 	bhi.w	800f80a <USBD_GetDescriptor+0x276>
 800f5ba:	a201      	add	r2, pc, #4	; (adr r2, 800f5c0 <USBD_GetDescriptor+0x2c>)
 800f5bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5c0:	0800f5dd 	.word	0x0800f5dd
 800f5c4:	0800f5f5 	.word	0x0800f5f5
 800f5c8:	0800f635 	.word	0x0800f635
 800f5cc:	0800f80b 	.word	0x0800f80b
 800f5d0:	0800f80b 	.word	0x0800f80b
 800f5d4:	0800f7ab 	.word	0x0800f7ab
 800f5d8:	0800f7d7 	.word	0x0800f7d7
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	687a      	ldr	r2, [r7, #4]
 800f5e6:	7c12      	ldrb	r2, [r2, #16]
 800f5e8:	f107 0108 	add.w	r1, r7, #8
 800f5ec:	4610      	mov	r0, r2
 800f5ee:	4798      	blx	r3
 800f5f0:	60f8      	str	r0, [r7, #12]
    break;
 800f5f2:	e112      	b.n	800f81a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	7c1b      	ldrb	r3, [r3, #16]
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d10d      	bne.n	800f618 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f604:	f107 0208 	add.w	r2, r7, #8
 800f608:	4610      	mov	r0, r2
 800f60a:	4798      	blx	r3
 800f60c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	3301      	adds	r3, #1
 800f612:	2202      	movs	r2, #2
 800f614:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800f616:	e100      	b.n	800f81a <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f61e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f620:	f107 0208 	add.w	r2, r7, #8
 800f624:	4610      	mov	r0, r2
 800f626:	4798      	blx	r3
 800f628:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	3301      	adds	r3, #1
 800f62e:	2202      	movs	r2, #2
 800f630:	701a      	strb	r2, [r3, #0]
    break;
 800f632:	e0f2      	b.n	800f81a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800f634:	683b      	ldr	r3, [r7, #0]
 800f636:	885b      	ldrh	r3, [r3, #2]
 800f638:	b2db      	uxtb	r3, r3
 800f63a:	2b05      	cmp	r3, #5
 800f63c:	f200 80ac 	bhi.w	800f798 <USBD_GetDescriptor+0x204>
 800f640:	a201      	add	r2, pc, #4	; (adr r2, 800f648 <USBD_GetDescriptor+0xb4>)
 800f642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f646:	bf00      	nop
 800f648:	0800f661 	.word	0x0800f661
 800f64c:	0800f695 	.word	0x0800f695
 800f650:	0800f6c9 	.word	0x0800f6c9
 800f654:	0800f6fd 	.word	0x0800f6fd
 800f658:	0800f731 	.word	0x0800f731
 800f65c:	0800f765 	.word	0x0800f765
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f666:	685b      	ldr	r3, [r3, #4]
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d00b      	beq.n	800f684 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f672:	685b      	ldr	r3, [r3, #4]
 800f674:	687a      	ldr	r2, [r7, #4]
 800f676:	7c12      	ldrb	r2, [r2, #16]
 800f678:	f107 0108 	add.w	r1, r7, #8
 800f67c:	4610      	mov	r0, r2
 800f67e:	4798      	blx	r3
 800f680:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f682:	e091      	b.n	800f7a8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f684:	6839      	ldr	r1, [r7, #0]
 800f686:	6878      	ldr	r0, [r7, #4]
 800f688:	f000 faaa 	bl	800fbe0 <USBD_CtlError>
        err++;
 800f68c:	7afb      	ldrb	r3, [r7, #11]
 800f68e:	3301      	adds	r3, #1
 800f690:	72fb      	strb	r3, [r7, #11]
      break;
 800f692:	e089      	b.n	800f7a8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f69a:	689b      	ldr	r3, [r3, #8]
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d00b      	beq.n	800f6b8 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f6a6:	689b      	ldr	r3, [r3, #8]
 800f6a8:	687a      	ldr	r2, [r7, #4]
 800f6aa:	7c12      	ldrb	r2, [r2, #16]
 800f6ac:	f107 0108 	add.w	r1, r7, #8
 800f6b0:	4610      	mov	r0, r2
 800f6b2:	4798      	blx	r3
 800f6b4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f6b6:	e077      	b.n	800f7a8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f6b8:	6839      	ldr	r1, [r7, #0]
 800f6ba:	6878      	ldr	r0, [r7, #4]
 800f6bc:	f000 fa90 	bl	800fbe0 <USBD_CtlError>
        err++;
 800f6c0:	7afb      	ldrb	r3, [r7, #11]
 800f6c2:	3301      	adds	r3, #1
 800f6c4:	72fb      	strb	r3, [r7, #11]
      break;
 800f6c6:	e06f      	b.n	800f7a8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f6ce:	68db      	ldr	r3, [r3, #12]
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d00b      	beq.n	800f6ec <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f6da:	68db      	ldr	r3, [r3, #12]
 800f6dc:	687a      	ldr	r2, [r7, #4]
 800f6de:	7c12      	ldrb	r2, [r2, #16]
 800f6e0:	f107 0108 	add.w	r1, r7, #8
 800f6e4:	4610      	mov	r0, r2
 800f6e6:	4798      	blx	r3
 800f6e8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f6ea:	e05d      	b.n	800f7a8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f6ec:	6839      	ldr	r1, [r7, #0]
 800f6ee:	6878      	ldr	r0, [r7, #4]
 800f6f0:	f000 fa76 	bl	800fbe0 <USBD_CtlError>
        err++;
 800f6f4:	7afb      	ldrb	r3, [r7, #11]
 800f6f6:	3301      	adds	r3, #1
 800f6f8:	72fb      	strb	r3, [r7, #11]
      break;
 800f6fa:	e055      	b.n	800f7a8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f702:	691b      	ldr	r3, [r3, #16]
 800f704:	2b00      	cmp	r3, #0
 800f706:	d00b      	beq.n	800f720 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f70e:	691b      	ldr	r3, [r3, #16]
 800f710:	687a      	ldr	r2, [r7, #4]
 800f712:	7c12      	ldrb	r2, [r2, #16]
 800f714:	f107 0108 	add.w	r1, r7, #8
 800f718:	4610      	mov	r0, r2
 800f71a:	4798      	blx	r3
 800f71c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f71e:	e043      	b.n	800f7a8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f720:	6839      	ldr	r1, [r7, #0]
 800f722:	6878      	ldr	r0, [r7, #4]
 800f724:	f000 fa5c 	bl	800fbe0 <USBD_CtlError>
        err++;
 800f728:	7afb      	ldrb	r3, [r7, #11]
 800f72a:	3301      	adds	r3, #1
 800f72c:	72fb      	strb	r3, [r7, #11]
      break;
 800f72e:	e03b      	b.n	800f7a8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f736:	695b      	ldr	r3, [r3, #20]
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d00b      	beq.n	800f754 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f742:	695b      	ldr	r3, [r3, #20]
 800f744:	687a      	ldr	r2, [r7, #4]
 800f746:	7c12      	ldrb	r2, [r2, #16]
 800f748:	f107 0108 	add.w	r1, r7, #8
 800f74c:	4610      	mov	r0, r2
 800f74e:	4798      	blx	r3
 800f750:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f752:	e029      	b.n	800f7a8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f754:	6839      	ldr	r1, [r7, #0]
 800f756:	6878      	ldr	r0, [r7, #4]
 800f758:	f000 fa42 	bl	800fbe0 <USBD_CtlError>
        err++;
 800f75c:	7afb      	ldrb	r3, [r7, #11]
 800f75e:	3301      	adds	r3, #1
 800f760:	72fb      	strb	r3, [r7, #11]
      break;
 800f762:	e021      	b.n	800f7a8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f76a:	699b      	ldr	r3, [r3, #24]
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d00b      	beq.n	800f788 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f776:	699b      	ldr	r3, [r3, #24]
 800f778:	687a      	ldr	r2, [r7, #4]
 800f77a:	7c12      	ldrb	r2, [r2, #16]
 800f77c:	f107 0108 	add.w	r1, r7, #8
 800f780:	4610      	mov	r0, r2
 800f782:	4798      	blx	r3
 800f784:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f786:	e00f      	b.n	800f7a8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f788:	6839      	ldr	r1, [r7, #0]
 800f78a:	6878      	ldr	r0, [r7, #4]
 800f78c:	f000 fa28 	bl	800fbe0 <USBD_CtlError>
        err++;
 800f790:	7afb      	ldrb	r3, [r7, #11]
 800f792:	3301      	adds	r3, #1
 800f794:	72fb      	strb	r3, [r7, #11]
      break;
 800f796:	e007      	b.n	800f7a8 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800f798:	6839      	ldr	r1, [r7, #0]
 800f79a:	6878      	ldr	r0, [r7, #4]
 800f79c:	f000 fa20 	bl	800fbe0 <USBD_CtlError>
      err++;
 800f7a0:	7afb      	ldrb	r3, [r7, #11]
 800f7a2:	3301      	adds	r3, #1
 800f7a4:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800f7a6:	bf00      	nop
    }
    break;
 800f7a8:	e037      	b.n	800f81a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	7c1b      	ldrb	r3, [r3, #16]
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d109      	bne.n	800f7c6 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f7b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f7ba:	f107 0208 	add.w	r2, r7, #8
 800f7be:	4610      	mov	r0, r2
 800f7c0:	4798      	blx	r3
 800f7c2:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800f7c4:	e029      	b.n	800f81a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800f7c6:	6839      	ldr	r1, [r7, #0]
 800f7c8:	6878      	ldr	r0, [r7, #4]
 800f7ca:	f000 fa09 	bl	800fbe0 <USBD_CtlError>
      err++;
 800f7ce:	7afb      	ldrb	r3, [r7, #11]
 800f7d0:	3301      	adds	r3, #1
 800f7d2:	72fb      	strb	r3, [r7, #11]
    break;
 800f7d4:	e021      	b.n	800f81a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	7c1b      	ldrb	r3, [r3, #16]
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d10d      	bne.n	800f7fa <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f7e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f7e6:	f107 0208 	add.w	r2, r7, #8
 800f7ea:	4610      	mov	r0, r2
 800f7ec:	4798      	blx	r3
 800f7ee:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	3301      	adds	r3, #1
 800f7f4:	2207      	movs	r2, #7
 800f7f6:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800f7f8:	e00f      	b.n	800f81a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800f7fa:	6839      	ldr	r1, [r7, #0]
 800f7fc:	6878      	ldr	r0, [r7, #4]
 800f7fe:	f000 f9ef 	bl	800fbe0 <USBD_CtlError>
      err++;
 800f802:	7afb      	ldrb	r3, [r7, #11]
 800f804:	3301      	adds	r3, #1
 800f806:	72fb      	strb	r3, [r7, #11]
    break;
 800f808:	e007      	b.n	800f81a <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800f80a:	6839      	ldr	r1, [r7, #0]
 800f80c:	6878      	ldr	r0, [r7, #4]
 800f80e:	f000 f9e7 	bl	800fbe0 <USBD_CtlError>
    err++;
 800f812:	7afb      	ldrb	r3, [r7, #11]
 800f814:	3301      	adds	r3, #1
 800f816:	72fb      	strb	r3, [r7, #11]
    break;
 800f818:	bf00      	nop
  }

  if (err != 0U)
 800f81a:	7afb      	ldrb	r3, [r7, #11]
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d11e      	bne.n	800f85e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800f820:	683b      	ldr	r3, [r7, #0]
 800f822:	88db      	ldrh	r3, [r3, #6]
 800f824:	2b00      	cmp	r3, #0
 800f826:	d016      	beq.n	800f856 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 800f828:	893b      	ldrh	r3, [r7, #8]
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d00e      	beq.n	800f84c <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800f82e:	683b      	ldr	r3, [r7, #0]
 800f830:	88da      	ldrh	r2, [r3, #6]
 800f832:	893b      	ldrh	r3, [r7, #8]
 800f834:	4293      	cmp	r3, r2
 800f836:	bf28      	it	cs
 800f838:	4613      	movcs	r3, r2
 800f83a:	b29b      	uxth	r3, r3
 800f83c:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800f83e:	893b      	ldrh	r3, [r7, #8]
 800f840:	461a      	mov	r2, r3
 800f842:	68f9      	ldr	r1, [r7, #12]
 800f844:	6878      	ldr	r0, [r7, #4]
 800f846:	f000 fa3c 	bl	800fcc2 <USBD_CtlSendData>
 800f84a:	e009      	b.n	800f860 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800f84c:	6839      	ldr	r1, [r7, #0]
 800f84e:	6878      	ldr	r0, [r7, #4]
 800f850:	f000 f9c6 	bl	800fbe0 <USBD_CtlError>
 800f854:	e004      	b.n	800f860 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800f856:	6878      	ldr	r0, [r7, #4]
 800f858:	f000 fa70 	bl	800fd3c <USBD_CtlSendStatus>
 800f85c:	e000      	b.n	800f860 <USBD_GetDescriptor+0x2cc>
    return;
 800f85e:	bf00      	nop
    }
  }
}
 800f860:	3710      	adds	r7, #16
 800f862:	46bd      	mov	sp, r7
 800f864:	bd80      	pop	{r7, pc}
 800f866:	bf00      	nop

0800f868 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f868:	b580      	push	{r7, lr}
 800f86a:	b084      	sub	sp, #16
 800f86c:	af00      	add	r7, sp, #0
 800f86e:	6078      	str	r0, [r7, #4]
 800f870:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f872:	683b      	ldr	r3, [r7, #0]
 800f874:	889b      	ldrh	r3, [r3, #4]
 800f876:	2b00      	cmp	r3, #0
 800f878:	d130      	bne.n	800f8dc <USBD_SetAddress+0x74>
 800f87a:	683b      	ldr	r3, [r7, #0]
 800f87c:	88db      	ldrh	r3, [r3, #6]
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d12c      	bne.n	800f8dc <USBD_SetAddress+0x74>
 800f882:	683b      	ldr	r3, [r7, #0]
 800f884:	885b      	ldrh	r3, [r3, #2]
 800f886:	2b7f      	cmp	r3, #127	; 0x7f
 800f888:	d828      	bhi.n	800f8dc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f88a:	683b      	ldr	r3, [r7, #0]
 800f88c:	885b      	ldrh	r3, [r3, #2]
 800f88e:	b2db      	uxtb	r3, r3
 800f890:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f894:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f89c:	2b03      	cmp	r3, #3
 800f89e:	d104      	bne.n	800f8aa <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800f8a0:	6839      	ldr	r1, [r7, #0]
 800f8a2:	6878      	ldr	r0, [r7, #4]
 800f8a4:	f000 f99c 	bl	800fbe0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f8a8:	e01c      	b.n	800f8e4 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	7bfa      	ldrb	r2, [r7, #15]
 800f8ae:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f8b2:	7bfb      	ldrb	r3, [r7, #15]
 800f8b4:	4619      	mov	r1, r3
 800f8b6:	6878      	ldr	r0, [r7, #4]
 800f8b8:	f003 f9b5 	bl	8012c26 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f8bc:	6878      	ldr	r0, [r7, #4]
 800f8be:	f000 fa3d 	bl	800fd3c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f8c2:	7bfb      	ldrb	r3, [r7, #15]
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d004      	beq.n	800f8d2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	2202      	movs	r2, #2
 800f8cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f8d0:	e008      	b.n	800f8e4 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	2201      	movs	r2, #1
 800f8d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f8da:	e003      	b.n	800f8e4 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f8dc:	6839      	ldr	r1, [r7, #0]
 800f8de:	6878      	ldr	r0, [r7, #4]
 800f8e0:	f000 f97e 	bl	800fbe0 <USBD_CtlError>
  }
}
 800f8e4:	bf00      	nop
 800f8e6:	3710      	adds	r7, #16
 800f8e8:	46bd      	mov	sp, r7
 800f8ea:	bd80      	pop	{r7, pc}

0800f8ec <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f8ec:	b580      	push	{r7, lr}
 800f8ee:	b084      	sub	sp, #16
 800f8f0:	af00      	add	r7, sp, #0
 800f8f2:	6078      	str	r0, [r7, #4]
 800f8f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f8f6:	2300      	movs	r3, #0
 800f8f8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f8fa:	683b      	ldr	r3, [r7, #0]
 800f8fc:	885b      	ldrh	r3, [r3, #2]
 800f8fe:	b2da      	uxtb	r2, r3
 800f900:	4b4b      	ldr	r3, [pc, #300]	; (800fa30 <USBD_SetConfig+0x144>)
 800f902:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f904:	4b4a      	ldr	r3, [pc, #296]	; (800fa30 <USBD_SetConfig+0x144>)
 800f906:	781b      	ldrb	r3, [r3, #0]
 800f908:	2b01      	cmp	r3, #1
 800f90a:	d905      	bls.n	800f918 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f90c:	6839      	ldr	r1, [r7, #0]
 800f90e:	6878      	ldr	r0, [r7, #4]
 800f910:	f000 f966 	bl	800fbe0 <USBD_CtlError>
    return USBD_FAIL;
 800f914:	2303      	movs	r3, #3
 800f916:	e087      	b.n	800fa28 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f91e:	2b02      	cmp	r3, #2
 800f920:	d002      	beq.n	800f928 <USBD_SetConfig+0x3c>
 800f922:	2b03      	cmp	r3, #3
 800f924:	d025      	beq.n	800f972 <USBD_SetConfig+0x86>
 800f926:	e071      	b.n	800fa0c <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800f928:	4b41      	ldr	r3, [pc, #260]	; (800fa30 <USBD_SetConfig+0x144>)
 800f92a:	781b      	ldrb	r3, [r3, #0]
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d01c      	beq.n	800f96a <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800f930:	4b3f      	ldr	r3, [pc, #252]	; (800fa30 <USBD_SetConfig+0x144>)
 800f932:	781b      	ldrb	r3, [r3, #0]
 800f934:	461a      	mov	r2, r3
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800f93a:	4b3d      	ldr	r3, [pc, #244]	; (800fa30 <USBD_SetConfig+0x144>)
 800f93c:	781b      	ldrb	r3, [r3, #0]
 800f93e:	4619      	mov	r1, r3
 800f940:	6878      	ldr	r0, [r7, #4]
 800f942:	f7ff f9a8 	bl	800ec96 <USBD_SetClassConfig>
 800f946:	4603      	mov	r3, r0
 800f948:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800f94a:	7bfb      	ldrb	r3, [r7, #15]
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d004      	beq.n	800f95a <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800f950:	6839      	ldr	r1, [r7, #0]
 800f952:	6878      	ldr	r0, [r7, #4]
 800f954:	f000 f944 	bl	800fbe0 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800f958:	e065      	b.n	800fa26 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800f95a:	6878      	ldr	r0, [r7, #4]
 800f95c:	f000 f9ee 	bl	800fd3c <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	2203      	movs	r2, #3
 800f964:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800f968:	e05d      	b.n	800fa26 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800f96a:	6878      	ldr	r0, [r7, #4]
 800f96c:	f000 f9e6 	bl	800fd3c <USBD_CtlSendStatus>
    break;
 800f970:	e059      	b.n	800fa26 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800f972:	4b2f      	ldr	r3, [pc, #188]	; (800fa30 <USBD_SetConfig+0x144>)
 800f974:	781b      	ldrb	r3, [r3, #0]
 800f976:	2b00      	cmp	r3, #0
 800f978:	d112      	bne.n	800f9a0 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	2202      	movs	r2, #2
 800f97e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800f982:	4b2b      	ldr	r3, [pc, #172]	; (800fa30 <USBD_SetConfig+0x144>)
 800f984:	781b      	ldrb	r3, [r3, #0]
 800f986:	461a      	mov	r2, r3
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f98c:	4b28      	ldr	r3, [pc, #160]	; (800fa30 <USBD_SetConfig+0x144>)
 800f98e:	781b      	ldrb	r3, [r3, #0]
 800f990:	4619      	mov	r1, r3
 800f992:	6878      	ldr	r0, [r7, #4]
 800f994:	f7ff f99b 	bl	800ecce <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800f998:	6878      	ldr	r0, [r7, #4]
 800f99a:	f000 f9cf 	bl	800fd3c <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800f99e:	e042      	b.n	800fa26 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800f9a0:	4b23      	ldr	r3, [pc, #140]	; (800fa30 <USBD_SetConfig+0x144>)
 800f9a2:	781b      	ldrb	r3, [r3, #0]
 800f9a4:	461a      	mov	r2, r3
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	685b      	ldr	r3, [r3, #4]
 800f9aa:	429a      	cmp	r2, r3
 800f9ac:	d02a      	beq.n	800fa04 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	685b      	ldr	r3, [r3, #4]
 800f9b2:	b2db      	uxtb	r3, r3
 800f9b4:	4619      	mov	r1, r3
 800f9b6:	6878      	ldr	r0, [r7, #4]
 800f9b8:	f7ff f989 	bl	800ecce <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800f9bc:	4b1c      	ldr	r3, [pc, #112]	; (800fa30 <USBD_SetConfig+0x144>)
 800f9be:	781b      	ldrb	r3, [r3, #0]
 800f9c0:	461a      	mov	r2, r3
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800f9c6:	4b1a      	ldr	r3, [pc, #104]	; (800fa30 <USBD_SetConfig+0x144>)
 800f9c8:	781b      	ldrb	r3, [r3, #0]
 800f9ca:	4619      	mov	r1, r3
 800f9cc:	6878      	ldr	r0, [r7, #4]
 800f9ce:	f7ff f962 	bl	800ec96 <USBD_SetClassConfig>
 800f9d2:	4603      	mov	r3, r0
 800f9d4:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800f9d6:	7bfb      	ldrb	r3, [r7, #15]
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d00f      	beq.n	800f9fc <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800f9dc:	6839      	ldr	r1, [r7, #0]
 800f9de:	6878      	ldr	r0, [r7, #4]
 800f9e0:	f000 f8fe 	bl	800fbe0 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	685b      	ldr	r3, [r3, #4]
 800f9e8:	b2db      	uxtb	r3, r3
 800f9ea:	4619      	mov	r1, r3
 800f9ec:	6878      	ldr	r0, [r7, #4]
 800f9ee:	f7ff f96e 	bl	800ecce <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	2202      	movs	r2, #2
 800f9f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800f9fa:	e014      	b.n	800fa26 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800f9fc:	6878      	ldr	r0, [r7, #4]
 800f9fe:	f000 f99d 	bl	800fd3c <USBD_CtlSendStatus>
    break;
 800fa02:	e010      	b.n	800fa26 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800fa04:	6878      	ldr	r0, [r7, #4]
 800fa06:	f000 f999 	bl	800fd3c <USBD_CtlSendStatus>
    break;
 800fa0a:	e00c      	b.n	800fa26 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800fa0c:	6839      	ldr	r1, [r7, #0]
 800fa0e:	6878      	ldr	r0, [r7, #4]
 800fa10:	f000 f8e6 	bl	800fbe0 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fa14:	4b06      	ldr	r3, [pc, #24]	; (800fa30 <USBD_SetConfig+0x144>)
 800fa16:	781b      	ldrb	r3, [r3, #0]
 800fa18:	4619      	mov	r1, r3
 800fa1a:	6878      	ldr	r0, [r7, #4]
 800fa1c:	f7ff f957 	bl	800ecce <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800fa20:	2303      	movs	r3, #3
 800fa22:	73fb      	strb	r3, [r7, #15]
    break;
 800fa24:	bf00      	nop
  }

  return ret;
 800fa26:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa28:	4618      	mov	r0, r3
 800fa2a:	3710      	adds	r7, #16
 800fa2c:	46bd      	mov	sp, r7
 800fa2e:	bd80      	pop	{r7, pc}
 800fa30:	2400a1f8 	.word	0x2400a1f8

0800fa34 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fa34:	b580      	push	{r7, lr}
 800fa36:	b082      	sub	sp, #8
 800fa38:	af00      	add	r7, sp, #0
 800fa3a:	6078      	str	r0, [r7, #4]
 800fa3c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800fa3e:	683b      	ldr	r3, [r7, #0]
 800fa40:	88db      	ldrh	r3, [r3, #6]
 800fa42:	2b01      	cmp	r3, #1
 800fa44:	d004      	beq.n	800fa50 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800fa46:	6839      	ldr	r1, [r7, #0]
 800fa48:	6878      	ldr	r0, [r7, #4]
 800fa4a:	f000 f8c9 	bl	800fbe0 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800fa4e:	e021      	b.n	800fa94 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fa56:	2b01      	cmp	r3, #1
 800fa58:	db17      	blt.n	800fa8a <USBD_GetConfig+0x56>
 800fa5a:	2b02      	cmp	r3, #2
 800fa5c:	dd02      	ble.n	800fa64 <USBD_GetConfig+0x30>
 800fa5e:	2b03      	cmp	r3, #3
 800fa60:	d00b      	beq.n	800fa7a <USBD_GetConfig+0x46>
 800fa62:	e012      	b.n	800fa8a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	2200      	movs	r2, #0
 800fa68:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	3308      	adds	r3, #8
 800fa6e:	2201      	movs	r2, #1
 800fa70:	4619      	mov	r1, r3
 800fa72:	6878      	ldr	r0, [r7, #4]
 800fa74:	f000 f925 	bl	800fcc2 <USBD_CtlSendData>
      break;
 800fa78:	e00c      	b.n	800fa94 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	3304      	adds	r3, #4
 800fa7e:	2201      	movs	r2, #1
 800fa80:	4619      	mov	r1, r3
 800fa82:	6878      	ldr	r0, [r7, #4]
 800fa84:	f000 f91d 	bl	800fcc2 <USBD_CtlSendData>
      break;
 800fa88:	e004      	b.n	800fa94 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800fa8a:	6839      	ldr	r1, [r7, #0]
 800fa8c:	6878      	ldr	r0, [r7, #4]
 800fa8e:	f000 f8a7 	bl	800fbe0 <USBD_CtlError>
      break;
 800fa92:	bf00      	nop
}
 800fa94:	bf00      	nop
 800fa96:	3708      	adds	r7, #8
 800fa98:	46bd      	mov	sp, r7
 800fa9a:	bd80      	pop	{r7, pc}

0800fa9c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fa9c:	b580      	push	{r7, lr}
 800fa9e:	b082      	sub	sp, #8
 800faa0:	af00      	add	r7, sp, #0
 800faa2:	6078      	str	r0, [r7, #4]
 800faa4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800faac:	3b01      	subs	r3, #1
 800faae:	2b02      	cmp	r3, #2
 800fab0:	d81e      	bhi.n	800faf0 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800fab2:	683b      	ldr	r3, [r7, #0]
 800fab4:	88db      	ldrh	r3, [r3, #6]
 800fab6:	2b02      	cmp	r3, #2
 800fab8:	d004      	beq.n	800fac4 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800faba:	6839      	ldr	r1, [r7, #0]
 800fabc:	6878      	ldr	r0, [r7, #4]
 800fabe:	f000 f88f 	bl	800fbe0 <USBD_CtlError>
      break;
 800fac2:	e01a      	b.n	800fafa <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	2201      	movs	r2, #1
 800fac8:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d005      	beq.n	800fae0 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	68db      	ldr	r3, [r3, #12]
 800fad8:	f043 0202 	orr.w	r2, r3, #2
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	330c      	adds	r3, #12
 800fae4:	2202      	movs	r2, #2
 800fae6:	4619      	mov	r1, r3
 800fae8:	6878      	ldr	r0, [r7, #4]
 800faea:	f000 f8ea 	bl	800fcc2 <USBD_CtlSendData>
    break;
 800faee:	e004      	b.n	800fafa <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800faf0:	6839      	ldr	r1, [r7, #0]
 800faf2:	6878      	ldr	r0, [r7, #4]
 800faf4:	f000 f874 	bl	800fbe0 <USBD_CtlError>
    break;
 800faf8:	bf00      	nop
  }
}
 800fafa:	bf00      	nop
 800fafc:	3708      	adds	r7, #8
 800fafe:	46bd      	mov	sp, r7
 800fb00:	bd80      	pop	{r7, pc}

0800fb02 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fb02:	b580      	push	{r7, lr}
 800fb04:	b082      	sub	sp, #8
 800fb06:	af00      	add	r7, sp, #0
 800fb08:	6078      	str	r0, [r7, #4]
 800fb0a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fb0c:	683b      	ldr	r3, [r7, #0]
 800fb0e:	885b      	ldrh	r3, [r3, #2]
 800fb10:	2b01      	cmp	r3, #1
 800fb12:	d106      	bne.n	800fb22 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	2201      	movs	r2, #1
 800fb18:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800fb1c:	6878      	ldr	r0, [r7, #4]
 800fb1e:	f000 f90d 	bl	800fd3c <USBD_CtlSendStatus>
  }
}
 800fb22:	bf00      	nop
 800fb24:	3708      	adds	r7, #8
 800fb26:	46bd      	mov	sp, r7
 800fb28:	bd80      	pop	{r7, pc}

0800fb2a <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fb2a:	b580      	push	{r7, lr}
 800fb2c:	b082      	sub	sp, #8
 800fb2e:	af00      	add	r7, sp, #0
 800fb30:	6078      	str	r0, [r7, #4]
 800fb32:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fb3a:	3b01      	subs	r3, #1
 800fb3c:	2b02      	cmp	r3, #2
 800fb3e:	d80b      	bhi.n	800fb58 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fb40:	683b      	ldr	r3, [r7, #0]
 800fb42:	885b      	ldrh	r3, [r3, #2]
 800fb44:	2b01      	cmp	r3, #1
 800fb46:	d10c      	bne.n	800fb62 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	2200      	movs	r2, #0
 800fb4c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800fb50:	6878      	ldr	r0, [r7, #4]
 800fb52:	f000 f8f3 	bl	800fd3c <USBD_CtlSendStatus>
      }
      break;
 800fb56:	e004      	b.n	800fb62 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800fb58:	6839      	ldr	r1, [r7, #0]
 800fb5a:	6878      	ldr	r0, [r7, #4]
 800fb5c:	f000 f840 	bl	800fbe0 <USBD_CtlError>
      break;
 800fb60:	e000      	b.n	800fb64 <USBD_ClrFeature+0x3a>
      break;
 800fb62:	bf00      	nop
  }
}
 800fb64:	bf00      	nop
 800fb66:	3708      	adds	r7, #8
 800fb68:	46bd      	mov	sp, r7
 800fb6a:	bd80      	pop	{r7, pc}

0800fb6c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800fb6c:	b580      	push	{r7, lr}
 800fb6e:	b084      	sub	sp, #16
 800fb70:	af00      	add	r7, sp, #0
 800fb72:	6078      	str	r0, [r7, #4]
 800fb74:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800fb76:	683b      	ldr	r3, [r7, #0]
 800fb78:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	781a      	ldrb	r2, [r3, #0]
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	3301      	adds	r3, #1
 800fb86:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	781a      	ldrb	r2, [r3, #0]
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	3301      	adds	r3, #1
 800fb94:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800fb96:	68f8      	ldr	r0, [r7, #12]
 800fb98:	f7ff fad4 	bl	800f144 <SWAPBYTE>
 800fb9c:	4603      	mov	r3, r0
 800fb9e:	461a      	mov	r2, r3
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	3301      	adds	r3, #1
 800fba8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	3301      	adds	r3, #1
 800fbae:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800fbb0:	68f8      	ldr	r0, [r7, #12]
 800fbb2:	f7ff fac7 	bl	800f144 <SWAPBYTE>
 800fbb6:	4603      	mov	r3, r0
 800fbb8:	461a      	mov	r2, r3
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	3301      	adds	r3, #1
 800fbc2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	3301      	adds	r3, #1
 800fbc8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800fbca:	68f8      	ldr	r0, [r7, #12]
 800fbcc:	f7ff faba 	bl	800f144 <SWAPBYTE>
 800fbd0:	4603      	mov	r3, r0
 800fbd2:	461a      	mov	r2, r3
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	80da      	strh	r2, [r3, #6]
}
 800fbd8:	bf00      	nop
 800fbda:	3710      	adds	r7, #16
 800fbdc:	46bd      	mov	sp, r7
 800fbde:	bd80      	pop	{r7, pc}

0800fbe0 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fbe0:	b580      	push	{r7, lr}
 800fbe2:	b082      	sub	sp, #8
 800fbe4:	af00      	add	r7, sp, #0
 800fbe6:	6078      	str	r0, [r7, #4]
 800fbe8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800fbea:	2180      	movs	r1, #128	; 0x80
 800fbec:	6878      	ldr	r0, [r7, #4]
 800fbee:	f002 ffb0 	bl	8012b52 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800fbf2:	2100      	movs	r1, #0
 800fbf4:	6878      	ldr	r0, [r7, #4]
 800fbf6:	f002 ffac 	bl	8012b52 <USBD_LL_StallEP>
}
 800fbfa:	bf00      	nop
 800fbfc:	3708      	adds	r7, #8
 800fbfe:	46bd      	mov	sp, r7
 800fc00:	bd80      	pop	{r7, pc}

0800fc02 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800fc02:	b580      	push	{r7, lr}
 800fc04:	b086      	sub	sp, #24
 800fc06:	af00      	add	r7, sp, #0
 800fc08:	60f8      	str	r0, [r7, #12]
 800fc0a:	60b9      	str	r1, [r7, #8]
 800fc0c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800fc0e:	2300      	movs	r3, #0
 800fc10:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d036      	beq.n	800fc86 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800fc1c:	6938      	ldr	r0, [r7, #16]
 800fc1e:	f000 f836 	bl	800fc8e <USBD_GetLen>
 800fc22:	4603      	mov	r3, r0
 800fc24:	3301      	adds	r3, #1
 800fc26:	b29b      	uxth	r3, r3
 800fc28:	005b      	lsls	r3, r3, #1
 800fc2a:	b29a      	uxth	r2, r3
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800fc30:	7dfb      	ldrb	r3, [r7, #23]
 800fc32:	68ba      	ldr	r2, [r7, #8]
 800fc34:	4413      	add	r3, r2
 800fc36:	687a      	ldr	r2, [r7, #4]
 800fc38:	7812      	ldrb	r2, [r2, #0]
 800fc3a:	701a      	strb	r2, [r3, #0]
  idx++;
 800fc3c:	7dfb      	ldrb	r3, [r7, #23]
 800fc3e:	3301      	adds	r3, #1
 800fc40:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800fc42:	7dfb      	ldrb	r3, [r7, #23]
 800fc44:	68ba      	ldr	r2, [r7, #8]
 800fc46:	4413      	add	r3, r2
 800fc48:	2203      	movs	r2, #3
 800fc4a:	701a      	strb	r2, [r3, #0]
  idx++;
 800fc4c:	7dfb      	ldrb	r3, [r7, #23]
 800fc4e:	3301      	adds	r3, #1
 800fc50:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800fc52:	e013      	b.n	800fc7c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800fc54:	7dfb      	ldrb	r3, [r7, #23]
 800fc56:	68ba      	ldr	r2, [r7, #8]
 800fc58:	4413      	add	r3, r2
 800fc5a:	693a      	ldr	r2, [r7, #16]
 800fc5c:	7812      	ldrb	r2, [r2, #0]
 800fc5e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800fc60:	693b      	ldr	r3, [r7, #16]
 800fc62:	3301      	adds	r3, #1
 800fc64:	613b      	str	r3, [r7, #16]
    idx++;
 800fc66:	7dfb      	ldrb	r3, [r7, #23]
 800fc68:	3301      	adds	r3, #1
 800fc6a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800fc6c:	7dfb      	ldrb	r3, [r7, #23]
 800fc6e:	68ba      	ldr	r2, [r7, #8]
 800fc70:	4413      	add	r3, r2
 800fc72:	2200      	movs	r2, #0
 800fc74:	701a      	strb	r2, [r3, #0]
    idx++;
 800fc76:	7dfb      	ldrb	r3, [r7, #23]
 800fc78:	3301      	adds	r3, #1
 800fc7a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800fc7c:	693b      	ldr	r3, [r7, #16]
 800fc7e:	781b      	ldrb	r3, [r3, #0]
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d1e7      	bne.n	800fc54 <USBD_GetString+0x52>
 800fc84:	e000      	b.n	800fc88 <USBD_GetString+0x86>
    return;
 800fc86:	bf00      	nop
  }
}
 800fc88:	3718      	adds	r7, #24
 800fc8a:	46bd      	mov	sp, r7
 800fc8c:	bd80      	pop	{r7, pc}

0800fc8e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800fc8e:	b480      	push	{r7}
 800fc90:	b085      	sub	sp, #20
 800fc92:	af00      	add	r7, sp, #0
 800fc94:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800fc96:	2300      	movs	r3, #0
 800fc98:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800fc9e:	e005      	b.n	800fcac <USBD_GetLen+0x1e>
  {
    len++;
 800fca0:	7bfb      	ldrb	r3, [r7, #15]
 800fca2:	3301      	adds	r3, #1
 800fca4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800fca6:	68bb      	ldr	r3, [r7, #8]
 800fca8:	3301      	adds	r3, #1
 800fcaa:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800fcac:	68bb      	ldr	r3, [r7, #8]
 800fcae:	781b      	ldrb	r3, [r3, #0]
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d1f5      	bne.n	800fca0 <USBD_GetLen+0x12>
  }

  return len;
 800fcb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800fcb6:	4618      	mov	r0, r3
 800fcb8:	3714      	adds	r7, #20
 800fcba:	46bd      	mov	sp, r7
 800fcbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcc0:	4770      	bx	lr

0800fcc2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800fcc2:	b580      	push	{r7, lr}
 800fcc4:	b084      	sub	sp, #16
 800fcc6:	af00      	add	r7, sp, #0
 800fcc8:	60f8      	str	r0, [r7, #12]
 800fcca:	60b9      	str	r1, [r7, #8]
 800fccc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	2202      	movs	r2, #2
 800fcd2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	687a      	ldr	r2, [r7, #4]
 800fcda:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	687a      	ldr	r2, [r7, #4]
 800fce0:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	68ba      	ldr	r2, [r7, #8]
 800fce6:	2100      	movs	r1, #0
 800fce8:	68f8      	ldr	r0, [r7, #12]
 800fcea:	f002 ffbb 	bl	8012c64 <USBD_LL_Transmit>

  return USBD_OK;
 800fcee:	2300      	movs	r3, #0
}
 800fcf0:	4618      	mov	r0, r3
 800fcf2:	3710      	adds	r7, #16
 800fcf4:	46bd      	mov	sp, r7
 800fcf6:	bd80      	pop	{r7, pc}

0800fcf8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800fcf8:	b580      	push	{r7, lr}
 800fcfa:	b084      	sub	sp, #16
 800fcfc:	af00      	add	r7, sp, #0
 800fcfe:	60f8      	str	r0, [r7, #12]
 800fd00:	60b9      	str	r1, [r7, #8]
 800fd02:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	68ba      	ldr	r2, [r7, #8]
 800fd08:	2100      	movs	r1, #0
 800fd0a:	68f8      	ldr	r0, [r7, #12]
 800fd0c:	f002 ffaa 	bl	8012c64 <USBD_LL_Transmit>

  return USBD_OK;
 800fd10:	2300      	movs	r3, #0
}
 800fd12:	4618      	mov	r0, r3
 800fd14:	3710      	adds	r7, #16
 800fd16:	46bd      	mov	sp, r7
 800fd18:	bd80      	pop	{r7, pc}

0800fd1a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800fd1a:	b580      	push	{r7, lr}
 800fd1c:	b084      	sub	sp, #16
 800fd1e:	af00      	add	r7, sp, #0
 800fd20:	60f8      	str	r0, [r7, #12]
 800fd22:	60b9      	str	r1, [r7, #8]
 800fd24:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	68ba      	ldr	r2, [r7, #8]
 800fd2a:	2100      	movs	r1, #0
 800fd2c:	68f8      	ldr	r0, [r7, #12]
 800fd2e:	f002 ffba 	bl	8012ca6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fd32:	2300      	movs	r3, #0
}
 800fd34:	4618      	mov	r0, r3
 800fd36:	3710      	adds	r7, #16
 800fd38:	46bd      	mov	sp, r7
 800fd3a:	bd80      	pop	{r7, pc}

0800fd3c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800fd3c:	b580      	push	{r7, lr}
 800fd3e:	b082      	sub	sp, #8
 800fd40:	af00      	add	r7, sp, #0
 800fd42:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	2204      	movs	r2, #4
 800fd48:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800fd4c:	2300      	movs	r3, #0
 800fd4e:	2200      	movs	r2, #0
 800fd50:	2100      	movs	r1, #0
 800fd52:	6878      	ldr	r0, [r7, #4]
 800fd54:	f002 ff86 	bl	8012c64 <USBD_LL_Transmit>

  return USBD_OK;
 800fd58:	2300      	movs	r3, #0
}
 800fd5a:	4618      	mov	r0, r3
 800fd5c:	3708      	adds	r7, #8
 800fd5e:	46bd      	mov	sp, r7
 800fd60:	bd80      	pop	{r7, pc}

0800fd62 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800fd62:	b580      	push	{r7, lr}
 800fd64:	b082      	sub	sp, #8
 800fd66:	af00      	add	r7, sp, #0
 800fd68:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	2205      	movs	r2, #5
 800fd6e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fd72:	2300      	movs	r3, #0
 800fd74:	2200      	movs	r2, #0
 800fd76:	2100      	movs	r1, #0
 800fd78:	6878      	ldr	r0, [r7, #4]
 800fd7a:	f002 ff94 	bl	8012ca6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fd7e:	2300      	movs	r3, #0
}
 800fd80:	4618      	mov	r0, r3
 800fd82:	3708      	adds	r7, #8
 800fd84:	46bd      	mov	sp, r7
 800fd86:	bd80      	pop	{r7, pc}

0800fd88 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800fd88:	b580      	push	{r7, lr}
 800fd8a:	b084      	sub	sp, #16
 800fd8c:	af00      	add	r7, sp, #0
 800fd8e:	4603      	mov	r3, r0
 800fd90:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800fd92:	79fb      	ldrb	r3, [r7, #7]
 800fd94:	4a08      	ldr	r2, [pc, #32]	; (800fdb8 <disk_status+0x30>)
 800fd96:	009b      	lsls	r3, r3, #2
 800fd98:	4413      	add	r3, r2
 800fd9a:	685b      	ldr	r3, [r3, #4]
 800fd9c:	685b      	ldr	r3, [r3, #4]
 800fd9e:	79fa      	ldrb	r2, [r7, #7]
 800fda0:	4905      	ldr	r1, [pc, #20]	; (800fdb8 <disk_status+0x30>)
 800fda2:	440a      	add	r2, r1
 800fda4:	7a12      	ldrb	r2, [r2, #8]
 800fda6:	4610      	mov	r0, r2
 800fda8:	4798      	blx	r3
 800fdaa:	4603      	mov	r3, r0
 800fdac:	73fb      	strb	r3, [r7, #15]
  return stat;
 800fdae:	7bfb      	ldrb	r3, [r7, #15]
}
 800fdb0:	4618      	mov	r0, r3
 800fdb2:	3710      	adds	r7, #16
 800fdb4:	46bd      	mov	sp, r7
 800fdb6:	bd80      	pop	{r7, pc}
 800fdb8:	2400a224 	.word	0x2400a224

0800fdbc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800fdbc:	b580      	push	{r7, lr}
 800fdbe:	b084      	sub	sp, #16
 800fdc0:	af00      	add	r7, sp, #0
 800fdc2:	4603      	mov	r3, r0
 800fdc4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800fdc6:	2300      	movs	r3, #0
 800fdc8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800fdca:	79fb      	ldrb	r3, [r7, #7]
 800fdcc:	4a0d      	ldr	r2, [pc, #52]	; (800fe04 <disk_initialize+0x48>)
 800fdce:	5cd3      	ldrb	r3, [r2, r3]
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d111      	bne.n	800fdf8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800fdd4:	79fb      	ldrb	r3, [r7, #7]
 800fdd6:	4a0b      	ldr	r2, [pc, #44]	; (800fe04 <disk_initialize+0x48>)
 800fdd8:	2101      	movs	r1, #1
 800fdda:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800fddc:	79fb      	ldrb	r3, [r7, #7]
 800fdde:	4a09      	ldr	r2, [pc, #36]	; (800fe04 <disk_initialize+0x48>)
 800fde0:	009b      	lsls	r3, r3, #2
 800fde2:	4413      	add	r3, r2
 800fde4:	685b      	ldr	r3, [r3, #4]
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	79fa      	ldrb	r2, [r7, #7]
 800fdea:	4906      	ldr	r1, [pc, #24]	; (800fe04 <disk_initialize+0x48>)
 800fdec:	440a      	add	r2, r1
 800fdee:	7a12      	ldrb	r2, [r2, #8]
 800fdf0:	4610      	mov	r0, r2
 800fdf2:	4798      	blx	r3
 800fdf4:	4603      	mov	r3, r0
 800fdf6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800fdf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800fdfa:	4618      	mov	r0, r3
 800fdfc:	3710      	adds	r7, #16
 800fdfe:	46bd      	mov	sp, r7
 800fe00:	bd80      	pop	{r7, pc}
 800fe02:	bf00      	nop
 800fe04:	2400a224 	.word	0x2400a224

0800fe08 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800fe08:	b590      	push	{r4, r7, lr}
 800fe0a:	b087      	sub	sp, #28
 800fe0c:	af00      	add	r7, sp, #0
 800fe0e:	60b9      	str	r1, [r7, #8]
 800fe10:	607a      	str	r2, [r7, #4]
 800fe12:	603b      	str	r3, [r7, #0]
 800fe14:	4603      	mov	r3, r0
 800fe16:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800fe18:	7bfb      	ldrb	r3, [r7, #15]
 800fe1a:	4a0a      	ldr	r2, [pc, #40]	; (800fe44 <disk_read+0x3c>)
 800fe1c:	009b      	lsls	r3, r3, #2
 800fe1e:	4413      	add	r3, r2
 800fe20:	685b      	ldr	r3, [r3, #4]
 800fe22:	689c      	ldr	r4, [r3, #8]
 800fe24:	7bfb      	ldrb	r3, [r7, #15]
 800fe26:	4a07      	ldr	r2, [pc, #28]	; (800fe44 <disk_read+0x3c>)
 800fe28:	4413      	add	r3, r2
 800fe2a:	7a18      	ldrb	r0, [r3, #8]
 800fe2c:	683b      	ldr	r3, [r7, #0]
 800fe2e:	687a      	ldr	r2, [r7, #4]
 800fe30:	68b9      	ldr	r1, [r7, #8]
 800fe32:	47a0      	blx	r4
 800fe34:	4603      	mov	r3, r0
 800fe36:	75fb      	strb	r3, [r7, #23]
  return res;
 800fe38:	7dfb      	ldrb	r3, [r7, #23]
}
 800fe3a:	4618      	mov	r0, r3
 800fe3c:	371c      	adds	r7, #28
 800fe3e:	46bd      	mov	sp, r7
 800fe40:	bd90      	pop	{r4, r7, pc}
 800fe42:	bf00      	nop
 800fe44:	2400a224 	.word	0x2400a224

0800fe48 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800fe48:	b590      	push	{r4, r7, lr}
 800fe4a:	b087      	sub	sp, #28
 800fe4c:	af00      	add	r7, sp, #0
 800fe4e:	60b9      	str	r1, [r7, #8]
 800fe50:	607a      	str	r2, [r7, #4]
 800fe52:	603b      	str	r3, [r7, #0]
 800fe54:	4603      	mov	r3, r0
 800fe56:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800fe58:	7bfb      	ldrb	r3, [r7, #15]
 800fe5a:	4a0a      	ldr	r2, [pc, #40]	; (800fe84 <disk_write+0x3c>)
 800fe5c:	009b      	lsls	r3, r3, #2
 800fe5e:	4413      	add	r3, r2
 800fe60:	685b      	ldr	r3, [r3, #4]
 800fe62:	68dc      	ldr	r4, [r3, #12]
 800fe64:	7bfb      	ldrb	r3, [r7, #15]
 800fe66:	4a07      	ldr	r2, [pc, #28]	; (800fe84 <disk_write+0x3c>)
 800fe68:	4413      	add	r3, r2
 800fe6a:	7a18      	ldrb	r0, [r3, #8]
 800fe6c:	683b      	ldr	r3, [r7, #0]
 800fe6e:	687a      	ldr	r2, [r7, #4]
 800fe70:	68b9      	ldr	r1, [r7, #8]
 800fe72:	47a0      	blx	r4
 800fe74:	4603      	mov	r3, r0
 800fe76:	75fb      	strb	r3, [r7, #23]
  return res;
 800fe78:	7dfb      	ldrb	r3, [r7, #23]
}
 800fe7a:	4618      	mov	r0, r3
 800fe7c:	371c      	adds	r7, #28
 800fe7e:	46bd      	mov	sp, r7
 800fe80:	bd90      	pop	{r4, r7, pc}
 800fe82:	bf00      	nop
 800fe84:	2400a224 	.word	0x2400a224

0800fe88 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800fe88:	b580      	push	{r7, lr}
 800fe8a:	b084      	sub	sp, #16
 800fe8c:	af00      	add	r7, sp, #0
 800fe8e:	4603      	mov	r3, r0
 800fe90:	603a      	str	r2, [r7, #0]
 800fe92:	71fb      	strb	r3, [r7, #7]
 800fe94:	460b      	mov	r3, r1
 800fe96:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800fe98:	79fb      	ldrb	r3, [r7, #7]
 800fe9a:	4a09      	ldr	r2, [pc, #36]	; (800fec0 <disk_ioctl+0x38>)
 800fe9c:	009b      	lsls	r3, r3, #2
 800fe9e:	4413      	add	r3, r2
 800fea0:	685b      	ldr	r3, [r3, #4]
 800fea2:	691b      	ldr	r3, [r3, #16]
 800fea4:	79fa      	ldrb	r2, [r7, #7]
 800fea6:	4906      	ldr	r1, [pc, #24]	; (800fec0 <disk_ioctl+0x38>)
 800fea8:	440a      	add	r2, r1
 800feaa:	7a10      	ldrb	r0, [r2, #8]
 800feac:	79b9      	ldrb	r1, [r7, #6]
 800feae:	683a      	ldr	r2, [r7, #0]
 800feb0:	4798      	blx	r3
 800feb2:	4603      	mov	r3, r0
 800feb4:	73fb      	strb	r3, [r7, #15]
  return res;
 800feb6:	7bfb      	ldrb	r3, [r7, #15]
}
 800feb8:	4618      	mov	r0, r3
 800feba:	3710      	adds	r7, #16
 800febc:	46bd      	mov	sp, r7
 800febe:	bd80      	pop	{r7, pc}
 800fec0:	2400a224 	.word	0x2400a224

0800fec4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800fec4:	b480      	push	{r7}
 800fec6:	b085      	sub	sp, #20
 800fec8:	af00      	add	r7, sp, #0
 800feca:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	3301      	adds	r3, #1
 800fed0:	781b      	ldrb	r3, [r3, #0]
 800fed2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800fed4:	89fb      	ldrh	r3, [r7, #14]
 800fed6:	021b      	lsls	r3, r3, #8
 800fed8:	b21a      	sxth	r2, r3
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	781b      	ldrb	r3, [r3, #0]
 800fede:	b21b      	sxth	r3, r3
 800fee0:	4313      	orrs	r3, r2
 800fee2:	b21b      	sxth	r3, r3
 800fee4:	81fb      	strh	r3, [r7, #14]
	return rv;
 800fee6:	89fb      	ldrh	r3, [r7, #14]
}
 800fee8:	4618      	mov	r0, r3
 800feea:	3714      	adds	r7, #20
 800feec:	46bd      	mov	sp, r7
 800feee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fef2:	4770      	bx	lr

0800fef4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800fef4:	b480      	push	{r7}
 800fef6:	b085      	sub	sp, #20
 800fef8:	af00      	add	r7, sp, #0
 800fefa:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	3303      	adds	r3, #3
 800ff00:	781b      	ldrb	r3, [r3, #0]
 800ff02:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	021b      	lsls	r3, r3, #8
 800ff08:	687a      	ldr	r2, [r7, #4]
 800ff0a:	3202      	adds	r2, #2
 800ff0c:	7812      	ldrb	r2, [r2, #0]
 800ff0e:	4313      	orrs	r3, r2
 800ff10:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	021b      	lsls	r3, r3, #8
 800ff16:	687a      	ldr	r2, [r7, #4]
 800ff18:	3201      	adds	r2, #1
 800ff1a:	7812      	ldrb	r2, [r2, #0]
 800ff1c:	4313      	orrs	r3, r2
 800ff1e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	021b      	lsls	r3, r3, #8
 800ff24:	687a      	ldr	r2, [r7, #4]
 800ff26:	7812      	ldrb	r2, [r2, #0]
 800ff28:	4313      	orrs	r3, r2
 800ff2a:	60fb      	str	r3, [r7, #12]
	return rv;
 800ff2c:	68fb      	ldr	r3, [r7, #12]
}
 800ff2e:	4618      	mov	r0, r3
 800ff30:	3714      	adds	r7, #20
 800ff32:	46bd      	mov	sp, r7
 800ff34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff38:	4770      	bx	lr

0800ff3a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800ff3a:	b480      	push	{r7}
 800ff3c:	b083      	sub	sp, #12
 800ff3e:	af00      	add	r7, sp, #0
 800ff40:	6078      	str	r0, [r7, #4]
 800ff42:	460b      	mov	r3, r1
 800ff44:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	1c5a      	adds	r2, r3, #1
 800ff4a:	607a      	str	r2, [r7, #4]
 800ff4c:	887a      	ldrh	r2, [r7, #2]
 800ff4e:	b2d2      	uxtb	r2, r2
 800ff50:	701a      	strb	r2, [r3, #0]
 800ff52:	887b      	ldrh	r3, [r7, #2]
 800ff54:	0a1b      	lsrs	r3, r3, #8
 800ff56:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	1c5a      	adds	r2, r3, #1
 800ff5c:	607a      	str	r2, [r7, #4]
 800ff5e:	887a      	ldrh	r2, [r7, #2]
 800ff60:	b2d2      	uxtb	r2, r2
 800ff62:	701a      	strb	r2, [r3, #0]
}
 800ff64:	bf00      	nop
 800ff66:	370c      	adds	r7, #12
 800ff68:	46bd      	mov	sp, r7
 800ff6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff6e:	4770      	bx	lr

0800ff70 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800ff70:	b480      	push	{r7}
 800ff72:	b083      	sub	sp, #12
 800ff74:	af00      	add	r7, sp, #0
 800ff76:	6078      	str	r0, [r7, #4]
 800ff78:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	1c5a      	adds	r2, r3, #1
 800ff7e:	607a      	str	r2, [r7, #4]
 800ff80:	683a      	ldr	r2, [r7, #0]
 800ff82:	b2d2      	uxtb	r2, r2
 800ff84:	701a      	strb	r2, [r3, #0]
 800ff86:	683b      	ldr	r3, [r7, #0]
 800ff88:	0a1b      	lsrs	r3, r3, #8
 800ff8a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	1c5a      	adds	r2, r3, #1
 800ff90:	607a      	str	r2, [r7, #4]
 800ff92:	683a      	ldr	r2, [r7, #0]
 800ff94:	b2d2      	uxtb	r2, r2
 800ff96:	701a      	strb	r2, [r3, #0]
 800ff98:	683b      	ldr	r3, [r7, #0]
 800ff9a:	0a1b      	lsrs	r3, r3, #8
 800ff9c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	1c5a      	adds	r2, r3, #1
 800ffa2:	607a      	str	r2, [r7, #4]
 800ffa4:	683a      	ldr	r2, [r7, #0]
 800ffa6:	b2d2      	uxtb	r2, r2
 800ffa8:	701a      	strb	r2, [r3, #0]
 800ffaa:	683b      	ldr	r3, [r7, #0]
 800ffac:	0a1b      	lsrs	r3, r3, #8
 800ffae:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	1c5a      	adds	r2, r3, #1
 800ffb4:	607a      	str	r2, [r7, #4]
 800ffb6:	683a      	ldr	r2, [r7, #0]
 800ffb8:	b2d2      	uxtb	r2, r2
 800ffba:	701a      	strb	r2, [r3, #0]
}
 800ffbc:	bf00      	nop
 800ffbe:	370c      	adds	r7, #12
 800ffc0:	46bd      	mov	sp, r7
 800ffc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffc6:	4770      	bx	lr

0800ffc8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ffc8:	b480      	push	{r7}
 800ffca:	b087      	sub	sp, #28
 800ffcc:	af00      	add	r7, sp, #0
 800ffce:	60f8      	str	r0, [r7, #12]
 800ffd0:	60b9      	str	r1, [r7, #8]
 800ffd2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800ffd8:	68bb      	ldr	r3, [r7, #8]
 800ffda:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d00d      	beq.n	800fffe <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800ffe2:	693a      	ldr	r2, [r7, #16]
 800ffe4:	1c53      	adds	r3, r2, #1
 800ffe6:	613b      	str	r3, [r7, #16]
 800ffe8:	697b      	ldr	r3, [r7, #20]
 800ffea:	1c59      	adds	r1, r3, #1
 800ffec:	6179      	str	r1, [r7, #20]
 800ffee:	7812      	ldrb	r2, [r2, #0]
 800fff0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	3b01      	subs	r3, #1
 800fff6:	607b      	str	r3, [r7, #4]
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d1f1      	bne.n	800ffe2 <mem_cpy+0x1a>
	}
}
 800fffe:	bf00      	nop
 8010000:	371c      	adds	r7, #28
 8010002:	46bd      	mov	sp, r7
 8010004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010008:	4770      	bx	lr

0801000a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801000a:	b480      	push	{r7}
 801000c:	b087      	sub	sp, #28
 801000e:	af00      	add	r7, sp, #0
 8010010:	60f8      	str	r0, [r7, #12]
 8010012:	60b9      	str	r1, [r7, #8]
 8010014:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801001a:	697b      	ldr	r3, [r7, #20]
 801001c:	1c5a      	adds	r2, r3, #1
 801001e:	617a      	str	r2, [r7, #20]
 8010020:	68ba      	ldr	r2, [r7, #8]
 8010022:	b2d2      	uxtb	r2, r2
 8010024:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	3b01      	subs	r3, #1
 801002a:	607b      	str	r3, [r7, #4]
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	2b00      	cmp	r3, #0
 8010030:	d1f3      	bne.n	801001a <mem_set+0x10>
}
 8010032:	bf00      	nop
 8010034:	371c      	adds	r7, #28
 8010036:	46bd      	mov	sp, r7
 8010038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801003c:	4770      	bx	lr

0801003e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801003e:	b480      	push	{r7}
 8010040:	b089      	sub	sp, #36	; 0x24
 8010042:	af00      	add	r7, sp, #0
 8010044:	60f8      	str	r0, [r7, #12]
 8010046:	60b9      	str	r1, [r7, #8]
 8010048:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	61fb      	str	r3, [r7, #28]
 801004e:	68bb      	ldr	r3, [r7, #8]
 8010050:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8010052:	2300      	movs	r3, #0
 8010054:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8010056:	69fb      	ldr	r3, [r7, #28]
 8010058:	1c5a      	adds	r2, r3, #1
 801005a:	61fa      	str	r2, [r7, #28]
 801005c:	781b      	ldrb	r3, [r3, #0]
 801005e:	4619      	mov	r1, r3
 8010060:	69bb      	ldr	r3, [r7, #24]
 8010062:	1c5a      	adds	r2, r3, #1
 8010064:	61ba      	str	r2, [r7, #24]
 8010066:	781b      	ldrb	r3, [r3, #0]
 8010068:	1acb      	subs	r3, r1, r3
 801006a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	3b01      	subs	r3, #1
 8010070:	607b      	str	r3, [r7, #4]
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	2b00      	cmp	r3, #0
 8010076:	d002      	beq.n	801007e <mem_cmp+0x40>
 8010078:	697b      	ldr	r3, [r7, #20]
 801007a:	2b00      	cmp	r3, #0
 801007c:	d0eb      	beq.n	8010056 <mem_cmp+0x18>

	return r;
 801007e:	697b      	ldr	r3, [r7, #20]
}
 8010080:	4618      	mov	r0, r3
 8010082:	3724      	adds	r7, #36	; 0x24
 8010084:	46bd      	mov	sp, r7
 8010086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801008a:	4770      	bx	lr

0801008c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801008c:	b480      	push	{r7}
 801008e:	b083      	sub	sp, #12
 8010090:	af00      	add	r7, sp, #0
 8010092:	6078      	str	r0, [r7, #4]
 8010094:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8010096:	e002      	b.n	801009e <chk_chr+0x12>
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	3301      	adds	r3, #1
 801009c:	607b      	str	r3, [r7, #4]
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	781b      	ldrb	r3, [r3, #0]
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d005      	beq.n	80100b2 <chk_chr+0x26>
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	781b      	ldrb	r3, [r3, #0]
 80100aa:	461a      	mov	r2, r3
 80100ac:	683b      	ldr	r3, [r7, #0]
 80100ae:	4293      	cmp	r3, r2
 80100b0:	d1f2      	bne.n	8010098 <chk_chr+0xc>
	return *str;
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	781b      	ldrb	r3, [r3, #0]
}
 80100b6:	4618      	mov	r0, r3
 80100b8:	370c      	adds	r7, #12
 80100ba:	46bd      	mov	sp, r7
 80100bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100c0:	4770      	bx	lr
	...

080100c4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80100c4:	b480      	push	{r7}
 80100c6:	b085      	sub	sp, #20
 80100c8:	af00      	add	r7, sp, #0
 80100ca:	6078      	str	r0, [r7, #4]
 80100cc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80100ce:	2300      	movs	r3, #0
 80100d0:	60bb      	str	r3, [r7, #8]
 80100d2:	68bb      	ldr	r3, [r7, #8]
 80100d4:	60fb      	str	r3, [r7, #12]
 80100d6:	e029      	b.n	801012c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80100d8:	4a27      	ldr	r2, [pc, #156]	; (8010178 <chk_lock+0xb4>)
 80100da:	68fb      	ldr	r3, [r7, #12]
 80100dc:	011b      	lsls	r3, r3, #4
 80100de:	4413      	add	r3, r2
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d01d      	beq.n	8010122 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80100e6:	4a24      	ldr	r2, [pc, #144]	; (8010178 <chk_lock+0xb4>)
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	011b      	lsls	r3, r3, #4
 80100ec:	4413      	add	r3, r2
 80100ee:	681a      	ldr	r2, [r3, #0]
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	429a      	cmp	r2, r3
 80100f6:	d116      	bne.n	8010126 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80100f8:	4a1f      	ldr	r2, [pc, #124]	; (8010178 <chk_lock+0xb4>)
 80100fa:	68fb      	ldr	r3, [r7, #12]
 80100fc:	011b      	lsls	r3, r3, #4
 80100fe:	4413      	add	r3, r2
 8010100:	3304      	adds	r3, #4
 8010102:	681a      	ldr	r2, [r3, #0]
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8010108:	429a      	cmp	r2, r3
 801010a:	d10c      	bne.n	8010126 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801010c:	4a1a      	ldr	r2, [pc, #104]	; (8010178 <chk_lock+0xb4>)
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	011b      	lsls	r3, r3, #4
 8010112:	4413      	add	r3, r2
 8010114:	3308      	adds	r3, #8
 8010116:	681a      	ldr	r2, [r3, #0]
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 801011c:	429a      	cmp	r2, r3
 801011e:	d102      	bne.n	8010126 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8010120:	e007      	b.n	8010132 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8010122:	2301      	movs	r3, #1
 8010124:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	3301      	adds	r3, #1
 801012a:	60fb      	str	r3, [r7, #12]
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	2b01      	cmp	r3, #1
 8010130:	d9d2      	bls.n	80100d8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	2b02      	cmp	r3, #2
 8010136:	d109      	bne.n	801014c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8010138:	68bb      	ldr	r3, [r7, #8]
 801013a:	2b00      	cmp	r3, #0
 801013c:	d102      	bne.n	8010144 <chk_lock+0x80>
 801013e:	683b      	ldr	r3, [r7, #0]
 8010140:	2b02      	cmp	r3, #2
 8010142:	d101      	bne.n	8010148 <chk_lock+0x84>
 8010144:	2300      	movs	r3, #0
 8010146:	e010      	b.n	801016a <chk_lock+0xa6>
 8010148:	2312      	movs	r3, #18
 801014a:	e00e      	b.n	801016a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 801014c:	683b      	ldr	r3, [r7, #0]
 801014e:	2b00      	cmp	r3, #0
 8010150:	d108      	bne.n	8010164 <chk_lock+0xa0>
 8010152:	4a09      	ldr	r2, [pc, #36]	; (8010178 <chk_lock+0xb4>)
 8010154:	68fb      	ldr	r3, [r7, #12]
 8010156:	011b      	lsls	r3, r3, #4
 8010158:	4413      	add	r3, r2
 801015a:	330c      	adds	r3, #12
 801015c:	881b      	ldrh	r3, [r3, #0]
 801015e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010162:	d101      	bne.n	8010168 <chk_lock+0xa4>
 8010164:	2310      	movs	r3, #16
 8010166:	e000      	b.n	801016a <chk_lock+0xa6>
 8010168:	2300      	movs	r3, #0
}
 801016a:	4618      	mov	r0, r3
 801016c:	3714      	adds	r7, #20
 801016e:	46bd      	mov	sp, r7
 8010170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010174:	4770      	bx	lr
 8010176:	bf00      	nop
 8010178:	2400a204 	.word	0x2400a204

0801017c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 801017c:	b480      	push	{r7}
 801017e:	b083      	sub	sp, #12
 8010180:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010182:	2300      	movs	r3, #0
 8010184:	607b      	str	r3, [r7, #4]
 8010186:	e002      	b.n	801018e <enq_lock+0x12>
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	3301      	adds	r3, #1
 801018c:	607b      	str	r3, [r7, #4]
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	2b01      	cmp	r3, #1
 8010192:	d806      	bhi.n	80101a2 <enq_lock+0x26>
 8010194:	4a09      	ldr	r2, [pc, #36]	; (80101bc <enq_lock+0x40>)
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	011b      	lsls	r3, r3, #4
 801019a:	4413      	add	r3, r2
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d1f2      	bne.n	8010188 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	2b02      	cmp	r3, #2
 80101a6:	bf14      	ite	ne
 80101a8:	2301      	movne	r3, #1
 80101aa:	2300      	moveq	r3, #0
 80101ac:	b2db      	uxtb	r3, r3
}
 80101ae:	4618      	mov	r0, r3
 80101b0:	370c      	adds	r7, #12
 80101b2:	46bd      	mov	sp, r7
 80101b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101b8:	4770      	bx	lr
 80101ba:	bf00      	nop
 80101bc:	2400a204 	.word	0x2400a204

080101c0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80101c0:	b480      	push	{r7}
 80101c2:	b085      	sub	sp, #20
 80101c4:	af00      	add	r7, sp, #0
 80101c6:	6078      	str	r0, [r7, #4]
 80101c8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80101ca:	2300      	movs	r3, #0
 80101cc:	60fb      	str	r3, [r7, #12]
 80101ce:	e01f      	b.n	8010210 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80101d0:	4a41      	ldr	r2, [pc, #260]	; (80102d8 <inc_lock+0x118>)
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	011b      	lsls	r3, r3, #4
 80101d6:	4413      	add	r3, r2
 80101d8:	681a      	ldr	r2, [r3, #0]
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	429a      	cmp	r2, r3
 80101e0:	d113      	bne.n	801020a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80101e2:	4a3d      	ldr	r2, [pc, #244]	; (80102d8 <inc_lock+0x118>)
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	011b      	lsls	r3, r3, #4
 80101e8:	4413      	add	r3, r2
 80101ea:	3304      	adds	r3, #4
 80101ec:	681a      	ldr	r2, [r3, #0]
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80101f2:	429a      	cmp	r2, r3
 80101f4:	d109      	bne.n	801020a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80101f6:	4a38      	ldr	r2, [pc, #224]	; (80102d8 <inc_lock+0x118>)
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	011b      	lsls	r3, r3, #4
 80101fc:	4413      	add	r3, r2
 80101fe:	3308      	adds	r3, #8
 8010200:	681a      	ldr	r2, [r3, #0]
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8010206:	429a      	cmp	r2, r3
 8010208:	d006      	beq.n	8010218 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	3301      	adds	r3, #1
 801020e:	60fb      	str	r3, [r7, #12]
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	2b01      	cmp	r3, #1
 8010214:	d9dc      	bls.n	80101d0 <inc_lock+0x10>
 8010216:	e000      	b.n	801021a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8010218:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	2b02      	cmp	r3, #2
 801021e:	d132      	bne.n	8010286 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010220:	2300      	movs	r3, #0
 8010222:	60fb      	str	r3, [r7, #12]
 8010224:	e002      	b.n	801022c <inc_lock+0x6c>
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	3301      	adds	r3, #1
 801022a:	60fb      	str	r3, [r7, #12]
 801022c:	68fb      	ldr	r3, [r7, #12]
 801022e:	2b01      	cmp	r3, #1
 8010230:	d806      	bhi.n	8010240 <inc_lock+0x80>
 8010232:	4a29      	ldr	r2, [pc, #164]	; (80102d8 <inc_lock+0x118>)
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	011b      	lsls	r3, r3, #4
 8010238:	4413      	add	r3, r2
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	2b00      	cmp	r3, #0
 801023e:	d1f2      	bne.n	8010226 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	2b02      	cmp	r3, #2
 8010244:	d101      	bne.n	801024a <inc_lock+0x8a>
 8010246:	2300      	movs	r3, #0
 8010248:	e040      	b.n	80102cc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	681a      	ldr	r2, [r3, #0]
 801024e:	4922      	ldr	r1, [pc, #136]	; (80102d8 <inc_lock+0x118>)
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	011b      	lsls	r3, r3, #4
 8010254:	440b      	add	r3, r1
 8010256:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	689a      	ldr	r2, [r3, #8]
 801025c:	491e      	ldr	r1, [pc, #120]	; (80102d8 <inc_lock+0x118>)
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	011b      	lsls	r3, r3, #4
 8010262:	440b      	add	r3, r1
 8010264:	3304      	adds	r3, #4
 8010266:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	695a      	ldr	r2, [r3, #20]
 801026c:	491a      	ldr	r1, [pc, #104]	; (80102d8 <inc_lock+0x118>)
 801026e:	68fb      	ldr	r3, [r7, #12]
 8010270:	011b      	lsls	r3, r3, #4
 8010272:	440b      	add	r3, r1
 8010274:	3308      	adds	r3, #8
 8010276:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8010278:	4a17      	ldr	r2, [pc, #92]	; (80102d8 <inc_lock+0x118>)
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	011b      	lsls	r3, r3, #4
 801027e:	4413      	add	r3, r2
 8010280:	330c      	adds	r3, #12
 8010282:	2200      	movs	r2, #0
 8010284:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8010286:	683b      	ldr	r3, [r7, #0]
 8010288:	2b00      	cmp	r3, #0
 801028a:	d009      	beq.n	80102a0 <inc_lock+0xe0>
 801028c:	4a12      	ldr	r2, [pc, #72]	; (80102d8 <inc_lock+0x118>)
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	011b      	lsls	r3, r3, #4
 8010292:	4413      	add	r3, r2
 8010294:	330c      	adds	r3, #12
 8010296:	881b      	ldrh	r3, [r3, #0]
 8010298:	2b00      	cmp	r3, #0
 801029a:	d001      	beq.n	80102a0 <inc_lock+0xe0>
 801029c:	2300      	movs	r3, #0
 801029e:	e015      	b.n	80102cc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80102a0:	683b      	ldr	r3, [r7, #0]
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d108      	bne.n	80102b8 <inc_lock+0xf8>
 80102a6:	4a0c      	ldr	r2, [pc, #48]	; (80102d8 <inc_lock+0x118>)
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	011b      	lsls	r3, r3, #4
 80102ac:	4413      	add	r3, r2
 80102ae:	330c      	adds	r3, #12
 80102b0:	881b      	ldrh	r3, [r3, #0]
 80102b2:	3301      	adds	r3, #1
 80102b4:	b29a      	uxth	r2, r3
 80102b6:	e001      	b.n	80102bc <inc_lock+0xfc>
 80102b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80102bc:	4906      	ldr	r1, [pc, #24]	; (80102d8 <inc_lock+0x118>)
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	011b      	lsls	r3, r3, #4
 80102c2:	440b      	add	r3, r1
 80102c4:	330c      	adds	r3, #12
 80102c6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	3301      	adds	r3, #1
}
 80102cc:	4618      	mov	r0, r3
 80102ce:	3714      	adds	r7, #20
 80102d0:	46bd      	mov	sp, r7
 80102d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d6:	4770      	bx	lr
 80102d8:	2400a204 	.word	0x2400a204

080102dc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80102dc:	b480      	push	{r7}
 80102de:	b085      	sub	sp, #20
 80102e0:	af00      	add	r7, sp, #0
 80102e2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	3b01      	subs	r3, #1
 80102e8:	607b      	str	r3, [r7, #4]
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	2b01      	cmp	r3, #1
 80102ee:	d825      	bhi.n	801033c <dec_lock+0x60>
		n = Files[i].ctr;
 80102f0:	4a17      	ldr	r2, [pc, #92]	; (8010350 <dec_lock+0x74>)
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	011b      	lsls	r3, r3, #4
 80102f6:	4413      	add	r3, r2
 80102f8:	330c      	adds	r3, #12
 80102fa:	881b      	ldrh	r3, [r3, #0]
 80102fc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80102fe:	89fb      	ldrh	r3, [r7, #14]
 8010300:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010304:	d101      	bne.n	801030a <dec_lock+0x2e>
 8010306:	2300      	movs	r3, #0
 8010308:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801030a:	89fb      	ldrh	r3, [r7, #14]
 801030c:	2b00      	cmp	r3, #0
 801030e:	d002      	beq.n	8010316 <dec_lock+0x3a>
 8010310:	89fb      	ldrh	r3, [r7, #14]
 8010312:	3b01      	subs	r3, #1
 8010314:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8010316:	4a0e      	ldr	r2, [pc, #56]	; (8010350 <dec_lock+0x74>)
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	011b      	lsls	r3, r3, #4
 801031c:	4413      	add	r3, r2
 801031e:	330c      	adds	r3, #12
 8010320:	89fa      	ldrh	r2, [r7, #14]
 8010322:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8010324:	89fb      	ldrh	r3, [r7, #14]
 8010326:	2b00      	cmp	r3, #0
 8010328:	d105      	bne.n	8010336 <dec_lock+0x5a>
 801032a:	4a09      	ldr	r2, [pc, #36]	; (8010350 <dec_lock+0x74>)
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	011b      	lsls	r3, r3, #4
 8010330:	4413      	add	r3, r2
 8010332:	2200      	movs	r2, #0
 8010334:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8010336:	2300      	movs	r3, #0
 8010338:	737b      	strb	r3, [r7, #13]
 801033a:	e001      	b.n	8010340 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 801033c:	2302      	movs	r3, #2
 801033e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8010340:	7b7b      	ldrb	r3, [r7, #13]
}
 8010342:	4618      	mov	r0, r3
 8010344:	3714      	adds	r7, #20
 8010346:	46bd      	mov	sp, r7
 8010348:	f85d 7b04 	ldr.w	r7, [sp], #4
 801034c:	4770      	bx	lr
 801034e:	bf00      	nop
 8010350:	2400a204 	.word	0x2400a204

08010354 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8010354:	b480      	push	{r7}
 8010356:	b085      	sub	sp, #20
 8010358:	af00      	add	r7, sp, #0
 801035a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 801035c:	2300      	movs	r3, #0
 801035e:	60fb      	str	r3, [r7, #12]
 8010360:	e010      	b.n	8010384 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8010362:	4a0d      	ldr	r2, [pc, #52]	; (8010398 <clear_lock+0x44>)
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	011b      	lsls	r3, r3, #4
 8010368:	4413      	add	r3, r2
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	687a      	ldr	r2, [r7, #4]
 801036e:	429a      	cmp	r2, r3
 8010370:	d105      	bne.n	801037e <clear_lock+0x2a>
 8010372:	4a09      	ldr	r2, [pc, #36]	; (8010398 <clear_lock+0x44>)
 8010374:	68fb      	ldr	r3, [r7, #12]
 8010376:	011b      	lsls	r3, r3, #4
 8010378:	4413      	add	r3, r2
 801037a:	2200      	movs	r2, #0
 801037c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801037e:	68fb      	ldr	r3, [r7, #12]
 8010380:	3301      	adds	r3, #1
 8010382:	60fb      	str	r3, [r7, #12]
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	2b01      	cmp	r3, #1
 8010388:	d9eb      	bls.n	8010362 <clear_lock+0xe>
	}
}
 801038a:	bf00      	nop
 801038c:	3714      	adds	r7, #20
 801038e:	46bd      	mov	sp, r7
 8010390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010394:	4770      	bx	lr
 8010396:	bf00      	nop
 8010398:	2400a204 	.word	0x2400a204

0801039c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 801039c:	b580      	push	{r7, lr}
 801039e:	b086      	sub	sp, #24
 80103a0:	af00      	add	r7, sp, #0
 80103a2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80103a4:	2300      	movs	r3, #0
 80103a6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	78db      	ldrb	r3, [r3, #3]
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d034      	beq.n	801041a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103b4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	7858      	ldrb	r0, [r3, #1]
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80103c0:	2301      	movs	r3, #1
 80103c2:	697a      	ldr	r2, [r7, #20]
 80103c4:	f7ff fd40 	bl	800fe48 <disk_write>
 80103c8:	4603      	mov	r3, r0
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d002      	beq.n	80103d4 <sync_window+0x38>
			res = FR_DISK_ERR;
 80103ce:	2301      	movs	r3, #1
 80103d0:	73fb      	strb	r3, [r7, #15]
 80103d2:	e022      	b.n	801041a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	2200      	movs	r2, #0
 80103d8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	6a1b      	ldr	r3, [r3, #32]
 80103de:	697a      	ldr	r2, [r7, #20]
 80103e0:	1ad2      	subs	r2, r2, r3
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	699b      	ldr	r3, [r3, #24]
 80103e6:	429a      	cmp	r2, r3
 80103e8:	d217      	bcs.n	801041a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	789b      	ldrb	r3, [r3, #2]
 80103ee:	613b      	str	r3, [r7, #16]
 80103f0:	e010      	b.n	8010414 <sync_window+0x78>
					wsect += fs->fsize;
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	699b      	ldr	r3, [r3, #24]
 80103f6:	697a      	ldr	r2, [r7, #20]
 80103f8:	4413      	add	r3, r2
 80103fa:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	7858      	ldrb	r0, [r3, #1]
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010406:	2301      	movs	r3, #1
 8010408:	697a      	ldr	r2, [r7, #20]
 801040a:	f7ff fd1d 	bl	800fe48 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801040e:	693b      	ldr	r3, [r7, #16]
 8010410:	3b01      	subs	r3, #1
 8010412:	613b      	str	r3, [r7, #16]
 8010414:	693b      	ldr	r3, [r7, #16]
 8010416:	2b01      	cmp	r3, #1
 8010418:	d8eb      	bhi.n	80103f2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801041a:	7bfb      	ldrb	r3, [r7, #15]
}
 801041c:	4618      	mov	r0, r3
 801041e:	3718      	adds	r7, #24
 8010420:	46bd      	mov	sp, r7
 8010422:	bd80      	pop	{r7, pc}

08010424 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8010424:	b580      	push	{r7, lr}
 8010426:	b084      	sub	sp, #16
 8010428:	af00      	add	r7, sp, #0
 801042a:	6078      	str	r0, [r7, #4]
 801042c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801042e:	2300      	movs	r3, #0
 8010430:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010436:	683a      	ldr	r2, [r7, #0]
 8010438:	429a      	cmp	r2, r3
 801043a:	d01b      	beq.n	8010474 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 801043c:	6878      	ldr	r0, [r7, #4]
 801043e:	f7ff ffad 	bl	801039c <sync_window>
 8010442:	4603      	mov	r3, r0
 8010444:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8010446:	7bfb      	ldrb	r3, [r7, #15]
 8010448:	2b00      	cmp	r3, #0
 801044a:	d113      	bne.n	8010474 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	7858      	ldrb	r0, [r3, #1]
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010456:	2301      	movs	r3, #1
 8010458:	683a      	ldr	r2, [r7, #0]
 801045a:	f7ff fcd5 	bl	800fe08 <disk_read>
 801045e:	4603      	mov	r3, r0
 8010460:	2b00      	cmp	r3, #0
 8010462:	d004      	beq.n	801046e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8010464:	f04f 33ff 	mov.w	r3, #4294967295
 8010468:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801046a:	2301      	movs	r3, #1
 801046c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	683a      	ldr	r2, [r7, #0]
 8010472:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8010474:	7bfb      	ldrb	r3, [r7, #15]
}
 8010476:	4618      	mov	r0, r3
 8010478:	3710      	adds	r7, #16
 801047a:	46bd      	mov	sp, r7
 801047c:	bd80      	pop	{r7, pc}
	...

08010480 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8010480:	b580      	push	{r7, lr}
 8010482:	b084      	sub	sp, #16
 8010484:	af00      	add	r7, sp, #0
 8010486:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8010488:	6878      	ldr	r0, [r7, #4]
 801048a:	f7ff ff87 	bl	801039c <sync_window>
 801048e:	4603      	mov	r3, r0
 8010490:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8010492:	7bfb      	ldrb	r3, [r7, #15]
 8010494:	2b00      	cmp	r3, #0
 8010496:	d158      	bne.n	801054a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	781b      	ldrb	r3, [r3, #0]
 801049c:	2b03      	cmp	r3, #3
 801049e:	d148      	bne.n	8010532 <sync_fs+0xb2>
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	791b      	ldrb	r3, [r3, #4]
 80104a4:	2b01      	cmp	r3, #1
 80104a6:	d144      	bne.n	8010532 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	3330      	adds	r3, #48	; 0x30
 80104ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80104b0:	2100      	movs	r1, #0
 80104b2:	4618      	mov	r0, r3
 80104b4:	f7ff fda9 	bl	801000a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	3330      	adds	r3, #48	; 0x30
 80104bc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80104c0:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80104c4:	4618      	mov	r0, r3
 80104c6:	f7ff fd38 	bl	800ff3a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	3330      	adds	r3, #48	; 0x30
 80104ce:	4921      	ldr	r1, [pc, #132]	; (8010554 <sync_fs+0xd4>)
 80104d0:	4618      	mov	r0, r3
 80104d2:	f7ff fd4d 	bl	800ff70 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	3330      	adds	r3, #48	; 0x30
 80104da:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80104de:	491e      	ldr	r1, [pc, #120]	; (8010558 <sync_fs+0xd8>)
 80104e0:	4618      	mov	r0, r3
 80104e2:	f7ff fd45 	bl	800ff70 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	3330      	adds	r3, #48	; 0x30
 80104ea:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	691b      	ldr	r3, [r3, #16]
 80104f2:	4619      	mov	r1, r3
 80104f4:	4610      	mov	r0, r2
 80104f6:	f7ff fd3b 	bl	800ff70 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	3330      	adds	r3, #48	; 0x30
 80104fe:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	68db      	ldr	r3, [r3, #12]
 8010506:	4619      	mov	r1, r3
 8010508:	4610      	mov	r0, r2
 801050a:	f7ff fd31 	bl	800ff70 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	69db      	ldr	r3, [r3, #28]
 8010512:	1c5a      	adds	r2, r3, #1
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	7858      	ldrb	r0, [r3, #1]
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010526:	2301      	movs	r3, #1
 8010528:	f7ff fc8e 	bl	800fe48 <disk_write>
			fs->fsi_flag = 0;
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	2200      	movs	r2, #0
 8010530:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	785b      	ldrb	r3, [r3, #1]
 8010536:	2200      	movs	r2, #0
 8010538:	2100      	movs	r1, #0
 801053a:	4618      	mov	r0, r3
 801053c:	f7ff fca4 	bl	800fe88 <disk_ioctl>
 8010540:	4603      	mov	r3, r0
 8010542:	2b00      	cmp	r3, #0
 8010544:	d001      	beq.n	801054a <sync_fs+0xca>
 8010546:	2301      	movs	r3, #1
 8010548:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801054a:	7bfb      	ldrb	r3, [r7, #15]
}
 801054c:	4618      	mov	r0, r3
 801054e:	3710      	adds	r7, #16
 8010550:	46bd      	mov	sp, r7
 8010552:	bd80      	pop	{r7, pc}
 8010554:	41615252 	.word	0x41615252
 8010558:	61417272 	.word	0x61417272

0801055c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 801055c:	b480      	push	{r7}
 801055e:	b083      	sub	sp, #12
 8010560:	af00      	add	r7, sp, #0
 8010562:	6078      	str	r0, [r7, #4]
 8010564:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8010566:	683b      	ldr	r3, [r7, #0]
 8010568:	3b02      	subs	r3, #2
 801056a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	695b      	ldr	r3, [r3, #20]
 8010570:	3b02      	subs	r3, #2
 8010572:	683a      	ldr	r2, [r7, #0]
 8010574:	429a      	cmp	r2, r3
 8010576:	d301      	bcc.n	801057c <clust2sect+0x20>
 8010578:	2300      	movs	r3, #0
 801057a:	e008      	b.n	801058e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	895b      	ldrh	r3, [r3, #10]
 8010580:	461a      	mov	r2, r3
 8010582:	683b      	ldr	r3, [r7, #0]
 8010584:	fb03 f202 	mul.w	r2, r3, r2
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801058c:	4413      	add	r3, r2
}
 801058e:	4618      	mov	r0, r3
 8010590:	370c      	adds	r7, #12
 8010592:	46bd      	mov	sp, r7
 8010594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010598:	4770      	bx	lr

0801059a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801059a:	b580      	push	{r7, lr}
 801059c:	b086      	sub	sp, #24
 801059e:	af00      	add	r7, sp, #0
 80105a0:	6078      	str	r0, [r7, #4]
 80105a2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80105aa:	683b      	ldr	r3, [r7, #0]
 80105ac:	2b01      	cmp	r3, #1
 80105ae:	d904      	bls.n	80105ba <get_fat+0x20>
 80105b0:	693b      	ldr	r3, [r7, #16]
 80105b2:	695b      	ldr	r3, [r3, #20]
 80105b4:	683a      	ldr	r2, [r7, #0]
 80105b6:	429a      	cmp	r2, r3
 80105b8:	d302      	bcc.n	80105c0 <get_fat+0x26>
		val = 1;	/* Internal error */
 80105ba:	2301      	movs	r3, #1
 80105bc:	617b      	str	r3, [r7, #20]
 80105be:	e08c      	b.n	80106da <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80105c0:	f04f 33ff 	mov.w	r3, #4294967295
 80105c4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80105c6:	693b      	ldr	r3, [r7, #16]
 80105c8:	781b      	ldrb	r3, [r3, #0]
 80105ca:	2b02      	cmp	r3, #2
 80105cc:	d045      	beq.n	801065a <get_fat+0xc0>
 80105ce:	2b03      	cmp	r3, #3
 80105d0:	d05d      	beq.n	801068e <get_fat+0xf4>
 80105d2:	2b01      	cmp	r3, #1
 80105d4:	d177      	bne.n	80106c6 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80105d6:	683b      	ldr	r3, [r7, #0]
 80105d8:	60fb      	str	r3, [r7, #12]
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	085b      	lsrs	r3, r3, #1
 80105de:	68fa      	ldr	r2, [r7, #12]
 80105e0:	4413      	add	r3, r2
 80105e2:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80105e4:	693b      	ldr	r3, [r7, #16]
 80105e6:	6a1a      	ldr	r2, [r3, #32]
 80105e8:	68fb      	ldr	r3, [r7, #12]
 80105ea:	0a5b      	lsrs	r3, r3, #9
 80105ec:	4413      	add	r3, r2
 80105ee:	4619      	mov	r1, r3
 80105f0:	6938      	ldr	r0, [r7, #16]
 80105f2:	f7ff ff17 	bl	8010424 <move_window>
 80105f6:	4603      	mov	r3, r0
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d167      	bne.n	80106cc <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 80105fc:	68fb      	ldr	r3, [r7, #12]
 80105fe:	1c5a      	adds	r2, r3, #1
 8010600:	60fa      	str	r2, [r7, #12]
 8010602:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010606:	693a      	ldr	r2, [r7, #16]
 8010608:	4413      	add	r3, r2
 801060a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801060e:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010610:	693b      	ldr	r3, [r7, #16]
 8010612:	6a1a      	ldr	r2, [r3, #32]
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	0a5b      	lsrs	r3, r3, #9
 8010618:	4413      	add	r3, r2
 801061a:	4619      	mov	r1, r3
 801061c:	6938      	ldr	r0, [r7, #16]
 801061e:	f7ff ff01 	bl	8010424 <move_window>
 8010622:	4603      	mov	r3, r0
 8010624:	2b00      	cmp	r3, #0
 8010626:	d153      	bne.n	80106d0 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8010628:	68fb      	ldr	r3, [r7, #12]
 801062a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801062e:	693a      	ldr	r2, [r7, #16]
 8010630:	4413      	add	r3, r2
 8010632:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010636:	021b      	lsls	r3, r3, #8
 8010638:	461a      	mov	r2, r3
 801063a:	68bb      	ldr	r3, [r7, #8]
 801063c:	4313      	orrs	r3, r2
 801063e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8010640:	683b      	ldr	r3, [r7, #0]
 8010642:	f003 0301 	and.w	r3, r3, #1
 8010646:	2b00      	cmp	r3, #0
 8010648:	d002      	beq.n	8010650 <get_fat+0xb6>
 801064a:	68bb      	ldr	r3, [r7, #8]
 801064c:	091b      	lsrs	r3, r3, #4
 801064e:	e002      	b.n	8010656 <get_fat+0xbc>
 8010650:	68bb      	ldr	r3, [r7, #8]
 8010652:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010656:	617b      	str	r3, [r7, #20]
			break;
 8010658:	e03f      	b.n	80106da <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801065a:	693b      	ldr	r3, [r7, #16]
 801065c:	6a1a      	ldr	r2, [r3, #32]
 801065e:	683b      	ldr	r3, [r7, #0]
 8010660:	0a1b      	lsrs	r3, r3, #8
 8010662:	4413      	add	r3, r2
 8010664:	4619      	mov	r1, r3
 8010666:	6938      	ldr	r0, [r7, #16]
 8010668:	f7ff fedc 	bl	8010424 <move_window>
 801066c:	4603      	mov	r3, r0
 801066e:	2b00      	cmp	r3, #0
 8010670:	d130      	bne.n	80106d4 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8010672:	693b      	ldr	r3, [r7, #16]
 8010674:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010678:	683b      	ldr	r3, [r7, #0]
 801067a:	005b      	lsls	r3, r3, #1
 801067c:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8010680:	4413      	add	r3, r2
 8010682:	4618      	mov	r0, r3
 8010684:	f7ff fc1e 	bl	800fec4 <ld_word>
 8010688:	4603      	mov	r3, r0
 801068a:	617b      	str	r3, [r7, #20]
			break;
 801068c:	e025      	b.n	80106da <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801068e:	693b      	ldr	r3, [r7, #16]
 8010690:	6a1a      	ldr	r2, [r3, #32]
 8010692:	683b      	ldr	r3, [r7, #0]
 8010694:	09db      	lsrs	r3, r3, #7
 8010696:	4413      	add	r3, r2
 8010698:	4619      	mov	r1, r3
 801069a:	6938      	ldr	r0, [r7, #16]
 801069c:	f7ff fec2 	bl	8010424 <move_window>
 80106a0:	4603      	mov	r3, r0
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d118      	bne.n	80106d8 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80106a6:	693b      	ldr	r3, [r7, #16]
 80106a8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80106ac:	683b      	ldr	r3, [r7, #0]
 80106ae:	009b      	lsls	r3, r3, #2
 80106b0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80106b4:	4413      	add	r3, r2
 80106b6:	4618      	mov	r0, r3
 80106b8:	f7ff fc1c 	bl	800fef4 <ld_dword>
 80106bc:	4603      	mov	r3, r0
 80106be:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80106c2:	617b      	str	r3, [r7, #20]
			break;
 80106c4:	e009      	b.n	80106da <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80106c6:	2301      	movs	r3, #1
 80106c8:	617b      	str	r3, [r7, #20]
 80106ca:	e006      	b.n	80106da <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80106cc:	bf00      	nop
 80106ce:	e004      	b.n	80106da <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80106d0:	bf00      	nop
 80106d2:	e002      	b.n	80106da <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80106d4:	bf00      	nop
 80106d6:	e000      	b.n	80106da <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80106d8:	bf00      	nop
		}
	}

	return val;
 80106da:	697b      	ldr	r3, [r7, #20]
}
 80106dc:	4618      	mov	r0, r3
 80106de:	3718      	adds	r7, #24
 80106e0:	46bd      	mov	sp, r7
 80106e2:	bd80      	pop	{r7, pc}

080106e4 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80106e4:	b590      	push	{r4, r7, lr}
 80106e6:	b089      	sub	sp, #36	; 0x24
 80106e8:	af00      	add	r7, sp, #0
 80106ea:	60f8      	str	r0, [r7, #12]
 80106ec:	60b9      	str	r1, [r7, #8]
 80106ee:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80106f0:	2302      	movs	r3, #2
 80106f2:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80106f4:	68bb      	ldr	r3, [r7, #8]
 80106f6:	2b01      	cmp	r3, #1
 80106f8:	f240 80d6 	bls.w	80108a8 <put_fat+0x1c4>
 80106fc:	68fb      	ldr	r3, [r7, #12]
 80106fe:	695b      	ldr	r3, [r3, #20]
 8010700:	68ba      	ldr	r2, [r7, #8]
 8010702:	429a      	cmp	r2, r3
 8010704:	f080 80d0 	bcs.w	80108a8 <put_fat+0x1c4>
		switch (fs->fs_type) {
 8010708:	68fb      	ldr	r3, [r7, #12]
 801070a:	781b      	ldrb	r3, [r3, #0]
 801070c:	2b02      	cmp	r3, #2
 801070e:	d073      	beq.n	80107f8 <put_fat+0x114>
 8010710:	2b03      	cmp	r3, #3
 8010712:	f000 8091 	beq.w	8010838 <put_fat+0x154>
 8010716:	2b01      	cmp	r3, #1
 8010718:	f040 80c6 	bne.w	80108a8 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801071c:	68bb      	ldr	r3, [r7, #8]
 801071e:	61bb      	str	r3, [r7, #24]
 8010720:	69bb      	ldr	r3, [r7, #24]
 8010722:	085b      	lsrs	r3, r3, #1
 8010724:	69ba      	ldr	r2, [r7, #24]
 8010726:	4413      	add	r3, r2
 8010728:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	6a1a      	ldr	r2, [r3, #32]
 801072e:	69bb      	ldr	r3, [r7, #24]
 8010730:	0a5b      	lsrs	r3, r3, #9
 8010732:	4413      	add	r3, r2
 8010734:	4619      	mov	r1, r3
 8010736:	68f8      	ldr	r0, [r7, #12]
 8010738:	f7ff fe74 	bl	8010424 <move_window>
 801073c:	4603      	mov	r3, r0
 801073e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010740:	7ffb      	ldrb	r3, [r7, #31]
 8010742:	2b00      	cmp	r3, #0
 8010744:	f040 80a9 	bne.w	801089a <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801074e:	69bb      	ldr	r3, [r7, #24]
 8010750:	1c59      	adds	r1, r3, #1
 8010752:	61b9      	str	r1, [r7, #24]
 8010754:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010758:	4413      	add	r3, r2
 801075a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801075c:	68bb      	ldr	r3, [r7, #8]
 801075e:	f003 0301 	and.w	r3, r3, #1
 8010762:	2b00      	cmp	r3, #0
 8010764:	d00d      	beq.n	8010782 <put_fat+0x9e>
 8010766:	697b      	ldr	r3, [r7, #20]
 8010768:	781b      	ldrb	r3, [r3, #0]
 801076a:	b25b      	sxtb	r3, r3
 801076c:	f003 030f 	and.w	r3, r3, #15
 8010770:	b25a      	sxtb	r2, r3
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	b2db      	uxtb	r3, r3
 8010776:	011b      	lsls	r3, r3, #4
 8010778:	b25b      	sxtb	r3, r3
 801077a:	4313      	orrs	r3, r2
 801077c:	b25b      	sxtb	r3, r3
 801077e:	b2db      	uxtb	r3, r3
 8010780:	e001      	b.n	8010786 <put_fat+0xa2>
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	b2db      	uxtb	r3, r3
 8010786:	697a      	ldr	r2, [r7, #20]
 8010788:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	2201      	movs	r2, #1
 801078e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	6a1a      	ldr	r2, [r3, #32]
 8010794:	69bb      	ldr	r3, [r7, #24]
 8010796:	0a5b      	lsrs	r3, r3, #9
 8010798:	4413      	add	r3, r2
 801079a:	4619      	mov	r1, r3
 801079c:	68f8      	ldr	r0, [r7, #12]
 801079e:	f7ff fe41 	bl	8010424 <move_window>
 80107a2:	4603      	mov	r3, r0
 80107a4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80107a6:	7ffb      	ldrb	r3, [r7, #31]
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d178      	bne.n	801089e <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 80107ac:	68fb      	ldr	r3, [r7, #12]
 80107ae:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80107b2:	69bb      	ldr	r3, [r7, #24]
 80107b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80107b8:	4413      	add	r3, r2
 80107ba:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80107bc:	68bb      	ldr	r3, [r7, #8]
 80107be:	f003 0301 	and.w	r3, r3, #1
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	d003      	beq.n	80107ce <put_fat+0xea>
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	091b      	lsrs	r3, r3, #4
 80107ca:	b2db      	uxtb	r3, r3
 80107cc:	e00e      	b.n	80107ec <put_fat+0x108>
 80107ce:	697b      	ldr	r3, [r7, #20]
 80107d0:	781b      	ldrb	r3, [r3, #0]
 80107d2:	b25b      	sxtb	r3, r3
 80107d4:	f023 030f 	bic.w	r3, r3, #15
 80107d8:	b25a      	sxtb	r2, r3
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	0a1b      	lsrs	r3, r3, #8
 80107de:	b25b      	sxtb	r3, r3
 80107e0:	f003 030f 	and.w	r3, r3, #15
 80107e4:	b25b      	sxtb	r3, r3
 80107e6:	4313      	orrs	r3, r2
 80107e8:	b25b      	sxtb	r3, r3
 80107ea:	b2db      	uxtb	r3, r3
 80107ec:	697a      	ldr	r2, [r7, #20]
 80107ee:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	2201      	movs	r2, #1
 80107f4:	70da      	strb	r2, [r3, #3]
			break;
 80107f6:	e057      	b.n	80108a8 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	6a1a      	ldr	r2, [r3, #32]
 80107fc:	68bb      	ldr	r3, [r7, #8]
 80107fe:	0a1b      	lsrs	r3, r3, #8
 8010800:	4413      	add	r3, r2
 8010802:	4619      	mov	r1, r3
 8010804:	68f8      	ldr	r0, [r7, #12]
 8010806:	f7ff fe0d 	bl	8010424 <move_window>
 801080a:	4603      	mov	r3, r0
 801080c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801080e:	7ffb      	ldrb	r3, [r7, #31]
 8010810:	2b00      	cmp	r3, #0
 8010812:	d146      	bne.n	80108a2 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8010814:	68fb      	ldr	r3, [r7, #12]
 8010816:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801081a:	68bb      	ldr	r3, [r7, #8]
 801081c:	005b      	lsls	r3, r3, #1
 801081e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8010822:	4413      	add	r3, r2
 8010824:	687a      	ldr	r2, [r7, #4]
 8010826:	b292      	uxth	r2, r2
 8010828:	4611      	mov	r1, r2
 801082a:	4618      	mov	r0, r3
 801082c:	f7ff fb85 	bl	800ff3a <st_word>
			fs->wflag = 1;
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	2201      	movs	r2, #1
 8010834:	70da      	strb	r2, [r3, #3]
			break;
 8010836:	e037      	b.n	80108a8 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8010838:	68fb      	ldr	r3, [r7, #12]
 801083a:	6a1a      	ldr	r2, [r3, #32]
 801083c:	68bb      	ldr	r3, [r7, #8]
 801083e:	09db      	lsrs	r3, r3, #7
 8010840:	4413      	add	r3, r2
 8010842:	4619      	mov	r1, r3
 8010844:	68f8      	ldr	r0, [r7, #12]
 8010846:	f7ff fded 	bl	8010424 <move_window>
 801084a:	4603      	mov	r3, r0
 801084c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801084e:	7ffb      	ldrb	r3, [r7, #31]
 8010850:	2b00      	cmp	r3, #0
 8010852:	d128      	bne.n	80108a6 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010860:	68bb      	ldr	r3, [r7, #8]
 8010862:	009b      	lsls	r3, r3, #2
 8010864:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8010868:	4413      	add	r3, r2
 801086a:	4618      	mov	r0, r3
 801086c:	f7ff fb42 	bl	800fef4 <ld_dword>
 8010870:	4603      	mov	r3, r0
 8010872:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8010876:	4323      	orrs	r3, r4
 8010878:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010880:	68bb      	ldr	r3, [r7, #8]
 8010882:	009b      	lsls	r3, r3, #2
 8010884:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8010888:	4413      	add	r3, r2
 801088a:	6879      	ldr	r1, [r7, #4]
 801088c:	4618      	mov	r0, r3
 801088e:	f7ff fb6f 	bl	800ff70 <st_dword>
			fs->wflag = 1;
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	2201      	movs	r2, #1
 8010896:	70da      	strb	r2, [r3, #3]
			break;
 8010898:	e006      	b.n	80108a8 <put_fat+0x1c4>
			if (res != FR_OK) break;
 801089a:	bf00      	nop
 801089c:	e004      	b.n	80108a8 <put_fat+0x1c4>
			if (res != FR_OK) break;
 801089e:	bf00      	nop
 80108a0:	e002      	b.n	80108a8 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80108a2:	bf00      	nop
 80108a4:	e000      	b.n	80108a8 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80108a6:	bf00      	nop
		}
	}
	return res;
 80108a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80108aa:	4618      	mov	r0, r3
 80108ac:	3724      	adds	r7, #36	; 0x24
 80108ae:	46bd      	mov	sp, r7
 80108b0:	bd90      	pop	{r4, r7, pc}

080108b2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80108b2:	b580      	push	{r7, lr}
 80108b4:	b088      	sub	sp, #32
 80108b6:	af00      	add	r7, sp, #0
 80108b8:	60f8      	str	r0, [r7, #12]
 80108ba:	60b9      	str	r1, [r7, #8]
 80108bc:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80108be:	2300      	movs	r3, #0
 80108c0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80108c2:	68fb      	ldr	r3, [r7, #12]
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80108c8:	68bb      	ldr	r3, [r7, #8]
 80108ca:	2b01      	cmp	r3, #1
 80108cc:	d904      	bls.n	80108d8 <remove_chain+0x26>
 80108ce:	69bb      	ldr	r3, [r7, #24]
 80108d0:	695b      	ldr	r3, [r3, #20]
 80108d2:	68ba      	ldr	r2, [r7, #8]
 80108d4:	429a      	cmp	r2, r3
 80108d6:	d301      	bcc.n	80108dc <remove_chain+0x2a>
 80108d8:	2302      	movs	r3, #2
 80108da:	e04b      	b.n	8010974 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d00c      	beq.n	80108fc <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80108e2:	f04f 32ff 	mov.w	r2, #4294967295
 80108e6:	6879      	ldr	r1, [r7, #4]
 80108e8:	69b8      	ldr	r0, [r7, #24]
 80108ea:	f7ff fefb 	bl	80106e4 <put_fat>
 80108ee:	4603      	mov	r3, r0
 80108f0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80108f2:	7ffb      	ldrb	r3, [r7, #31]
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d001      	beq.n	80108fc <remove_chain+0x4a>
 80108f8:	7ffb      	ldrb	r3, [r7, #31]
 80108fa:	e03b      	b.n	8010974 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80108fc:	68b9      	ldr	r1, [r7, #8]
 80108fe:	68f8      	ldr	r0, [r7, #12]
 8010900:	f7ff fe4b 	bl	801059a <get_fat>
 8010904:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8010906:	697b      	ldr	r3, [r7, #20]
 8010908:	2b00      	cmp	r3, #0
 801090a:	d031      	beq.n	8010970 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801090c:	697b      	ldr	r3, [r7, #20]
 801090e:	2b01      	cmp	r3, #1
 8010910:	d101      	bne.n	8010916 <remove_chain+0x64>
 8010912:	2302      	movs	r3, #2
 8010914:	e02e      	b.n	8010974 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8010916:	697b      	ldr	r3, [r7, #20]
 8010918:	f1b3 3fff 	cmp.w	r3, #4294967295
 801091c:	d101      	bne.n	8010922 <remove_chain+0x70>
 801091e:	2301      	movs	r3, #1
 8010920:	e028      	b.n	8010974 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8010922:	2200      	movs	r2, #0
 8010924:	68b9      	ldr	r1, [r7, #8]
 8010926:	69b8      	ldr	r0, [r7, #24]
 8010928:	f7ff fedc 	bl	80106e4 <put_fat>
 801092c:	4603      	mov	r3, r0
 801092e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8010930:	7ffb      	ldrb	r3, [r7, #31]
 8010932:	2b00      	cmp	r3, #0
 8010934:	d001      	beq.n	801093a <remove_chain+0x88>
 8010936:	7ffb      	ldrb	r3, [r7, #31]
 8010938:	e01c      	b.n	8010974 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801093a:	69bb      	ldr	r3, [r7, #24]
 801093c:	691a      	ldr	r2, [r3, #16]
 801093e:	69bb      	ldr	r3, [r7, #24]
 8010940:	695b      	ldr	r3, [r3, #20]
 8010942:	3b02      	subs	r3, #2
 8010944:	429a      	cmp	r2, r3
 8010946:	d20b      	bcs.n	8010960 <remove_chain+0xae>
			fs->free_clst++;
 8010948:	69bb      	ldr	r3, [r7, #24]
 801094a:	691b      	ldr	r3, [r3, #16]
 801094c:	1c5a      	adds	r2, r3, #1
 801094e:	69bb      	ldr	r3, [r7, #24]
 8010950:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8010952:	69bb      	ldr	r3, [r7, #24]
 8010954:	791b      	ldrb	r3, [r3, #4]
 8010956:	f043 0301 	orr.w	r3, r3, #1
 801095a:	b2da      	uxtb	r2, r3
 801095c:	69bb      	ldr	r3, [r7, #24]
 801095e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8010960:	697b      	ldr	r3, [r7, #20]
 8010962:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8010964:	69bb      	ldr	r3, [r7, #24]
 8010966:	695b      	ldr	r3, [r3, #20]
 8010968:	68ba      	ldr	r2, [r7, #8]
 801096a:	429a      	cmp	r2, r3
 801096c:	d3c6      	bcc.n	80108fc <remove_chain+0x4a>
 801096e:	e000      	b.n	8010972 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8010970:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8010972:	2300      	movs	r3, #0
}
 8010974:	4618      	mov	r0, r3
 8010976:	3720      	adds	r7, #32
 8010978:	46bd      	mov	sp, r7
 801097a:	bd80      	pop	{r7, pc}

0801097c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801097c:	b580      	push	{r7, lr}
 801097e:	b088      	sub	sp, #32
 8010980:	af00      	add	r7, sp, #0
 8010982:	6078      	str	r0, [r7, #4]
 8010984:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801098c:	683b      	ldr	r3, [r7, #0]
 801098e:	2b00      	cmp	r3, #0
 8010990:	d10d      	bne.n	80109ae <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8010992:	693b      	ldr	r3, [r7, #16]
 8010994:	68db      	ldr	r3, [r3, #12]
 8010996:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8010998:	69bb      	ldr	r3, [r7, #24]
 801099a:	2b00      	cmp	r3, #0
 801099c:	d004      	beq.n	80109a8 <create_chain+0x2c>
 801099e:	693b      	ldr	r3, [r7, #16]
 80109a0:	695b      	ldr	r3, [r3, #20]
 80109a2:	69ba      	ldr	r2, [r7, #24]
 80109a4:	429a      	cmp	r2, r3
 80109a6:	d31b      	bcc.n	80109e0 <create_chain+0x64>
 80109a8:	2301      	movs	r3, #1
 80109aa:	61bb      	str	r3, [r7, #24]
 80109ac:	e018      	b.n	80109e0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80109ae:	6839      	ldr	r1, [r7, #0]
 80109b0:	6878      	ldr	r0, [r7, #4]
 80109b2:	f7ff fdf2 	bl	801059a <get_fat>
 80109b6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	2b01      	cmp	r3, #1
 80109bc:	d801      	bhi.n	80109c2 <create_chain+0x46>
 80109be:	2301      	movs	r3, #1
 80109c0:	e070      	b.n	8010aa4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109c8:	d101      	bne.n	80109ce <create_chain+0x52>
 80109ca:	68fb      	ldr	r3, [r7, #12]
 80109cc:	e06a      	b.n	8010aa4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80109ce:	693b      	ldr	r3, [r7, #16]
 80109d0:	695b      	ldr	r3, [r3, #20]
 80109d2:	68fa      	ldr	r2, [r7, #12]
 80109d4:	429a      	cmp	r2, r3
 80109d6:	d201      	bcs.n	80109dc <create_chain+0x60>
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	e063      	b.n	8010aa4 <create_chain+0x128>
		scl = clst;
 80109dc:	683b      	ldr	r3, [r7, #0]
 80109de:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80109e0:	69bb      	ldr	r3, [r7, #24]
 80109e2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80109e4:	69fb      	ldr	r3, [r7, #28]
 80109e6:	3301      	adds	r3, #1
 80109e8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80109ea:	693b      	ldr	r3, [r7, #16]
 80109ec:	695b      	ldr	r3, [r3, #20]
 80109ee:	69fa      	ldr	r2, [r7, #28]
 80109f0:	429a      	cmp	r2, r3
 80109f2:	d307      	bcc.n	8010a04 <create_chain+0x88>
				ncl = 2;
 80109f4:	2302      	movs	r3, #2
 80109f6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80109f8:	69fa      	ldr	r2, [r7, #28]
 80109fa:	69bb      	ldr	r3, [r7, #24]
 80109fc:	429a      	cmp	r2, r3
 80109fe:	d901      	bls.n	8010a04 <create_chain+0x88>
 8010a00:	2300      	movs	r3, #0
 8010a02:	e04f      	b.n	8010aa4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8010a04:	69f9      	ldr	r1, [r7, #28]
 8010a06:	6878      	ldr	r0, [r7, #4]
 8010a08:	f7ff fdc7 	bl	801059a <get_fat>
 8010a0c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d00e      	beq.n	8010a32 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8010a14:	68fb      	ldr	r3, [r7, #12]
 8010a16:	2b01      	cmp	r3, #1
 8010a18:	d003      	beq.n	8010a22 <create_chain+0xa6>
 8010a1a:	68fb      	ldr	r3, [r7, #12]
 8010a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a20:	d101      	bne.n	8010a26 <create_chain+0xaa>
 8010a22:	68fb      	ldr	r3, [r7, #12]
 8010a24:	e03e      	b.n	8010aa4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8010a26:	69fa      	ldr	r2, [r7, #28]
 8010a28:	69bb      	ldr	r3, [r7, #24]
 8010a2a:	429a      	cmp	r2, r3
 8010a2c:	d1da      	bne.n	80109e4 <create_chain+0x68>
 8010a2e:	2300      	movs	r3, #0
 8010a30:	e038      	b.n	8010aa4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8010a32:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8010a34:	f04f 32ff 	mov.w	r2, #4294967295
 8010a38:	69f9      	ldr	r1, [r7, #28]
 8010a3a:	6938      	ldr	r0, [r7, #16]
 8010a3c:	f7ff fe52 	bl	80106e4 <put_fat>
 8010a40:	4603      	mov	r3, r0
 8010a42:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8010a44:	7dfb      	ldrb	r3, [r7, #23]
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d109      	bne.n	8010a5e <create_chain+0xe2>
 8010a4a:	683b      	ldr	r3, [r7, #0]
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d006      	beq.n	8010a5e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8010a50:	69fa      	ldr	r2, [r7, #28]
 8010a52:	6839      	ldr	r1, [r7, #0]
 8010a54:	6938      	ldr	r0, [r7, #16]
 8010a56:	f7ff fe45 	bl	80106e4 <put_fat>
 8010a5a:	4603      	mov	r3, r0
 8010a5c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8010a5e:	7dfb      	ldrb	r3, [r7, #23]
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d116      	bne.n	8010a92 <create_chain+0x116>
		fs->last_clst = ncl;
 8010a64:	693b      	ldr	r3, [r7, #16]
 8010a66:	69fa      	ldr	r2, [r7, #28]
 8010a68:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8010a6a:	693b      	ldr	r3, [r7, #16]
 8010a6c:	691a      	ldr	r2, [r3, #16]
 8010a6e:	693b      	ldr	r3, [r7, #16]
 8010a70:	695b      	ldr	r3, [r3, #20]
 8010a72:	3b02      	subs	r3, #2
 8010a74:	429a      	cmp	r2, r3
 8010a76:	d804      	bhi.n	8010a82 <create_chain+0x106>
 8010a78:	693b      	ldr	r3, [r7, #16]
 8010a7a:	691b      	ldr	r3, [r3, #16]
 8010a7c:	1e5a      	subs	r2, r3, #1
 8010a7e:	693b      	ldr	r3, [r7, #16]
 8010a80:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8010a82:	693b      	ldr	r3, [r7, #16]
 8010a84:	791b      	ldrb	r3, [r3, #4]
 8010a86:	f043 0301 	orr.w	r3, r3, #1
 8010a8a:	b2da      	uxtb	r2, r3
 8010a8c:	693b      	ldr	r3, [r7, #16]
 8010a8e:	711a      	strb	r2, [r3, #4]
 8010a90:	e007      	b.n	8010aa2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8010a92:	7dfb      	ldrb	r3, [r7, #23]
 8010a94:	2b01      	cmp	r3, #1
 8010a96:	d102      	bne.n	8010a9e <create_chain+0x122>
 8010a98:	f04f 33ff 	mov.w	r3, #4294967295
 8010a9c:	e000      	b.n	8010aa0 <create_chain+0x124>
 8010a9e:	2301      	movs	r3, #1
 8010aa0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8010aa2:	69fb      	ldr	r3, [r7, #28]
}
 8010aa4:	4618      	mov	r0, r3
 8010aa6:	3720      	adds	r7, #32
 8010aa8:	46bd      	mov	sp, r7
 8010aaa:	bd80      	pop	{r7, pc}

08010aac <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8010aac:	b480      	push	{r7}
 8010aae:	b087      	sub	sp, #28
 8010ab0:	af00      	add	r7, sp, #0
 8010ab2:	6078      	str	r0, [r7, #4]
 8010ab4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ac0:	3304      	adds	r3, #4
 8010ac2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8010ac4:	683b      	ldr	r3, [r7, #0]
 8010ac6:	0a5b      	lsrs	r3, r3, #9
 8010ac8:	68fa      	ldr	r2, [r7, #12]
 8010aca:	8952      	ldrh	r2, [r2, #10]
 8010acc:	fbb3 f3f2 	udiv	r3, r3, r2
 8010ad0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8010ad2:	693b      	ldr	r3, [r7, #16]
 8010ad4:	1d1a      	adds	r2, r3, #4
 8010ad6:	613a      	str	r2, [r7, #16]
 8010ad8:	681b      	ldr	r3, [r3, #0]
 8010ada:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8010adc:	68bb      	ldr	r3, [r7, #8]
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d101      	bne.n	8010ae6 <clmt_clust+0x3a>
 8010ae2:	2300      	movs	r3, #0
 8010ae4:	e010      	b.n	8010b08 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8010ae6:	697a      	ldr	r2, [r7, #20]
 8010ae8:	68bb      	ldr	r3, [r7, #8]
 8010aea:	429a      	cmp	r2, r3
 8010aec:	d307      	bcc.n	8010afe <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8010aee:	697a      	ldr	r2, [r7, #20]
 8010af0:	68bb      	ldr	r3, [r7, #8]
 8010af2:	1ad3      	subs	r3, r2, r3
 8010af4:	617b      	str	r3, [r7, #20]
 8010af6:	693b      	ldr	r3, [r7, #16]
 8010af8:	3304      	adds	r3, #4
 8010afa:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8010afc:	e7e9      	b.n	8010ad2 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8010afe:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8010b00:	693b      	ldr	r3, [r7, #16]
 8010b02:	681a      	ldr	r2, [r3, #0]
 8010b04:	697b      	ldr	r3, [r7, #20]
 8010b06:	4413      	add	r3, r2
}
 8010b08:	4618      	mov	r0, r3
 8010b0a:	371c      	adds	r7, #28
 8010b0c:	46bd      	mov	sp, r7
 8010b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b12:	4770      	bx	lr

08010b14 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8010b14:	b580      	push	{r7, lr}
 8010b16:	b086      	sub	sp, #24
 8010b18:	af00      	add	r7, sp, #0
 8010b1a:	6078      	str	r0, [r7, #4]
 8010b1c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8010b24:	683b      	ldr	r3, [r7, #0]
 8010b26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010b2a:	d204      	bcs.n	8010b36 <dir_sdi+0x22>
 8010b2c:	683b      	ldr	r3, [r7, #0]
 8010b2e:	f003 031f 	and.w	r3, r3, #31
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d001      	beq.n	8010b3a <dir_sdi+0x26>
		return FR_INT_ERR;
 8010b36:	2302      	movs	r3, #2
 8010b38:	e063      	b.n	8010c02 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	683a      	ldr	r2, [r7, #0]
 8010b3e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	689b      	ldr	r3, [r3, #8]
 8010b44:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8010b46:	697b      	ldr	r3, [r7, #20]
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d106      	bne.n	8010b5a <dir_sdi+0x46>
 8010b4c:	693b      	ldr	r3, [r7, #16]
 8010b4e:	781b      	ldrb	r3, [r3, #0]
 8010b50:	2b02      	cmp	r3, #2
 8010b52:	d902      	bls.n	8010b5a <dir_sdi+0x46>
		clst = fs->dirbase;
 8010b54:	693b      	ldr	r3, [r7, #16]
 8010b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b58:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8010b5a:	697b      	ldr	r3, [r7, #20]
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d10c      	bne.n	8010b7a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8010b60:	683b      	ldr	r3, [r7, #0]
 8010b62:	095b      	lsrs	r3, r3, #5
 8010b64:	693a      	ldr	r2, [r7, #16]
 8010b66:	8912      	ldrh	r2, [r2, #8]
 8010b68:	4293      	cmp	r3, r2
 8010b6a:	d301      	bcc.n	8010b70 <dir_sdi+0x5c>
 8010b6c:	2302      	movs	r3, #2
 8010b6e:	e048      	b.n	8010c02 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8010b70:	693b      	ldr	r3, [r7, #16]
 8010b72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	61da      	str	r2, [r3, #28]
 8010b78:	e029      	b.n	8010bce <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8010b7a:	693b      	ldr	r3, [r7, #16]
 8010b7c:	895b      	ldrh	r3, [r3, #10]
 8010b7e:	025b      	lsls	r3, r3, #9
 8010b80:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8010b82:	e019      	b.n	8010bb8 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	6979      	ldr	r1, [r7, #20]
 8010b88:	4618      	mov	r0, r3
 8010b8a:	f7ff fd06 	bl	801059a <get_fat>
 8010b8e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010b90:	697b      	ldr	r3, [r7, #20]
 8010b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b96:	d101      	bne.n	8010b9c <dir_sdi+0x88>
 8010b98:	2301      	movs	r3, #1
 8010b9a:	e032      	b.n	8010c02 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8010b9c:	697b      	ldr	r3, [r7, #20]
 8010b9e:	2b01      	cmp	r3, #1
 8010ba0:	d904      	bls.n	8010bac <dir_sdi+0x98>
 8010ba2:	693b      	ldr	r3, [r7, #16]
 8010ba4:	695b      	ldr	r3, [r3, #20]
 8010ba6:	697a      	ldr	r2, [r7, #20]
 8010ba8:	429a      	cmp	r2, r3
 8010baa:	d301      	bcc.n	8010bb0 <dir_sdi+0x9c>
 8010bac:	2302      	movs	r3, #2
 8010bae:	e028      	b.n	8010c02 <dir_sdi+0xee>
			ofs -= csz;
 8010bb0:	683a      	ldr	r2, [r7, #0]
 8010bb2:	68fb      	ldr	r3, [r7, #12]
 8010bb4:	1ad3      	subs	r3, r2, r3
 8010bb6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8010bb8:	683a      	ldr	r2, [r7, #0]
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	429a      	cmp	r2, r3
 8010bbe:	d2e1      	bcs.n	8010b84 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8010bc0:	6979      	ldr	r1, [r7, #20]
 8010bc2:	6938      	ldr	r0, [r7, #16]
 8010bc4:	f7ff fcca 	bl	801055c <clust2sect>
 8010bc8:	4602      	mov	r2, r0
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	697a      	ldr	r2, [r7, #20]
 8010bd2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	69db      	ldr	r3, [r3, #28]
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d101      	bne.n	8010be0 <dir_sdi+0xcc>
 8010bdc:	2302      	movs	r3, #2
 8010bde:	e010      	b.n	8010c02 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	69da      	ldr	r2, [r3, #28]
 8010be4:	683b      	ldr	r3, [r7, #0]
 8010be6:	0a5b      	lsrs	r3, r3, #9
 8010be8:	441a      	add	r2, r3
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8010bee:	693b      	ldr	r3, [r7, #16]
 8010bf0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010bf4:	683b      	ldr	r3, [r7, #0]
 8010bf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010bfa:	441a      	add	r2, r3
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8010c00:	2300      	movs	r3, #0
}
 8010c02:	4618      	mov	r0, r3
 8010c04:	3718      	adds	r7, #24
 8010c06:	46bd      	mov	sp, r7
 8010c08:	bd80      	pop	{r7, pc}

08010c0a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8010c0a:	b580      	push	{r7, lr}
 8010c0c:	b086      	sub	sp, #24
 8010c0e:	af00      	add	r7, sp, #0
 8010c10:	6078      	str	r0, [r7, #4]
 8010c12:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	695b      	ldr	r3, [r3, #20]
 8010c1e:	3320      	adds	r3, #32
 8010c20:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	69db      	ldr	r3, [r3, #28]
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d003      	beq.n	8010c32 <dir_next+0x28>
 8010c2a:	68bb      	ldr	r3, [r7, #8]
 8010c2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010c30:	d301      	bcc.n	8010c36 <dir_next+0x2c>
 8010c32:	2304      	movs	r3, #4
 8010c34:	e0aa      	b.n	8010d8c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8010c36:	68bb      	ldr	r3, [r7, #8]
 8010c38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	f040 8098 	bne.w	8010d72 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	69db      	ldr	r3, [r3, #28]
 8010c46:	1c5a      	adds	r2, r3, #1
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	699b      	ldr	r3, [r3, #24]
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d10b      	bne.n	8010c6c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8010c54:	68bb      	ldr	r3, [r7, #8]
 8010c56:	095b      	lsrs	r3, r3, #5
 8010c58:	68fa      	ldr	r2, [r7, #12]
 8010c5a:	8912      	ldrh	r2, [r2, #8]
 8010c5c:	4293      	cmp	r3, r2
 8010c5e:	f0c0 8088 	bcc.w	8010d72 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	2200      	movs	r2, #0
 8010c66:	61da      	str	r2, [r3, #28]
 8010c68:	2304      	movs	r3, #4
 8010c6a:	e08f      	b.n	8010d8c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8010c6c:	68bb      	ldr	r3, [r7, #8]
 8010c6e:	0a5b      	lsrs	r3, r3, #9
 8010c70:	68fa      	ldr	r2, [r7, #12]
 8010c72:	8952      	ldrh	r2, [r2, #10]
 8010c74:	3a01      	subs	r2, #1
 8010c76:	4013      	ands	r3, r2
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d17a      	bne.n	8010d72 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8010c7c:	687a      	ldr	r2, [r7, #4]
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	699b      	ldr	r3, [r3, #24]
 8010c82:	4619      	mov	r1, r3
 8010c84:	4610      	mov	r0, r2
 8010c86:	f7ff fc88 	bl	801059a <get_fat>
 8010c8a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8010c8c:	697b      	ldr	r3, [r7, #20]
 8010c8e:	2b01      	cmp	r3, #1
 8010c90:	d801      	bhi.n	8010c96 <dir_next+0x8c>
 8010c92:	2302      	movs	r3, #2
 8010c94:	e07a      	b.n	8010d8c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8010c96:	697b      	ldr	r3, [r7, #20]
 8010c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c9c:	d101      	bne.n	8010ca2 <dir_next+0x98>
 8010c9e:	2301      	movs	r3, #1
 8010ca0:	e074      	b.n	8010d8c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8010ca2:	68fb      	ldr	r3, [r7, #12]
 8010ca4:	695b      	ldr	r3, [r3, #20]
 8010ca6:	697a      	ldr	r2, [r7, #20]
 8010ca8:	429a      	cmp	r2, r3
 8010caa:	d358      	bcc.n	8010d5e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8010cac:	683b      	ldr	r3, [r7, #0]
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d104      	bne.n	8010cbc <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	2200      	movs	r2, #0
 8010cb6:	61da      	str	r2, [r3, #28]
 8010cb8:	2304      	movs	r3, #4
 8010cba:	e067      	b.n	8010d8c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8010cbc:	687a      	ldr	r2, [r7, #4]
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	699b      	ldr	r3, [r3, #24]
 8010cc2:	4619      	mov	r1, r3
 8010cc4:	4610      	mov	r0, r2
 8010cc6:	f7ff fe59 	bl	801097c <create_chain>
 8010cca:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8010ccc:	697b      	ldr	r3, [r7, #20]
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d101      	bne.n	8010cd6 <dir_next+0xcc>
 8010cd2:	2307      	movs	r3, #7
 8010cd4:	e05a      	b.n	8010d8c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8010cd6:	697b      	ldr	r3, [r7, #20]
 8010cd8:	2b01      	cmp	r3, #1
 8010cda:	d101      	bne.n	8010ce0 <dir_next+0xd6>
 8010cdc:	2302      	movs	r3, #2
 8010cde:	e055      	b.n	8010d8c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010ce0:	697b      	ldr	r3, [r7, #20]
 8010ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ce6:	d101      	bne.n	8010cec <dir_next+0xe2>
 8010ce8:	2301      	movs	r3, #1
 8010cea:	e04f      	b.n	8010d8c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8010cec:	68f8      	ldr	r0, [r7, #12]
 8010cee:	f7ff fb55 	bl	801039c <sync_window>
 8010cf2:	4603      	mov	r3, r0
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d001      	beq.n	8010cfc <dir_next+0xf2>
 8010cf8:	2301      	movs	r3, #1
 8010cfa:	e047      	b.n	8010d8c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8010cfc:	68fb      	ldr	r3, [r7, #12]
 8010cfe:	3330      	adds	r3, #48	; 0x30
 8010d00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010d04:	2100      	movs	r1, #0
 8010d06:	4618      	mov	r0, r3
 8010d08:	f7ff f97f 	bl	801000a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8010d0c:	2300      	movs	r3, #0
 8010d0e:	613b      	str	r3, [r7, #16]
 8010d10:	6979      	ldr	r1, [r7, #20]
 8010d12:	68f8      	ldr	r0, [r7, #12]
 8010d14:	f7ff fc22 	bl	801055c <clust2sect>
 8010d18:	4602      	mov	r2, r0
 8010d1a:	68fb      	ldr	r3, [r7, #12]
 8010d1c:	62da      	str	r2, [r3, #44]	; 0x2c
 8010d1e:	e012      	b.n	8010d46 <dir_next+0x13c>
						fs->wflag = 1;
 8010d20:	68fb      	ldr	r3, [r7, #12]
 8010d22:	2201      	movs	r2, #1
 8010d24:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8010d26:	68f8      	ldr	r0, [r7, #12]
 8010d28:	f7ff fb38 	bl	801039c <sync_window>
 8010d2c:	4603      	mov	r3, r0
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d001      	beq.n	8010d36 <dir_next+0x12c>
 8010d32:	2301      	movs	r3, #1
 8010d34:	e02a      	b.n	8010d8c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8010d36:	693b      	ldr	r3, [r7, #16]
 8010d38:	3301      	adds	r3, #1
 8010d3a:	613b      	str	r3, [r7, #16]
 8010d3c:	68fb      	ldr	r3, [r7, #12]
 8010d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d40:	1c5a      	adds	r2, r3, #1
 8010d42:	68fb      	ldr	r3, [r7, #12]
 8010d44:	62da      	str	r2, [r3, #44]	; 0x2c
 8010d46:	68fb      	ldr	r3, [r7, #12]
 8010d48:	895b      	ldrh	r3, [r3, #10]
 8010d4a:	461a      	mov	r2, r3
 8010d4c:	693b      	ldr	r3, [r7, #16]
 8010d4e:	4293      	cmp	r3, r2
 8010d50:	d3e6      	bcc.n	8010d20 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d56:	693b      	ldr	r3, [r7, #16]
 8010d58:	1ad2      	subs	r2, r2, r3
 8010d5a:	68fb      	ldr	r3, [r7, #12]
 8010d5c:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	697a      	ldr	r2, [r7, #20]
 8010d62:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8010d64:	6979      	ldr	r1, [r7, #20]
 8010d66:	68f8      	ldr	r0, [r7, #12]
 8010d68:	f7ff fbf8 	bl	801055c <clust2sect>
 8010d6c:	4602      	mov	r2, r0
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	68ba      	ldr	r2, [r7, #8]
 8010d76:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8010d78:	68fb      	ldr	r3, [r7, #12]
 8010d7a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010d7e:	68bb      	ldr	r3, [r7, #8]
 8010d80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010d84:	441a      	add	r2, r3
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8010d8a:	2300      	movs	r3, #0
}
 8010d8c:	4618      	mov	r0, r3
 8010d8e:	3718      	adds	r7, #24
 8010d90:	46bd      	mov	sp, r7
 8010d92:	bd80      	pop	{r7, pc}

08010d94 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8010d94:	b580      	push	{r7, lr}
 8010d96:	b086      	sub	sp, #24
 8010d98:	af00      	add	r7, sp, #0
 8010d9a:	6078      	str	r0, [r7, #4]
 8010d9c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	681b      	ldr	r3, [r3, #0]
 8010da2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8010da4:	2100      	movs	r1, #0
 8010da6:	6878      	ldr	r0, [r7, #4]
 8010da8:	f7ff feb4 	bl	8010b14 <dir_sdi>
 8010dac:	4603      	mov	r3, r0
 8010dae:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010db0:	7dfb      	ldrb	r3, [r7, #23]
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d12b      	bne.n	8010e0e <dir_alloc+0x7a>
		n = 0;
 8010db6:	2300      	movs	r3, #0
 8010db8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	69db      	ldr	r3, [r3, #28]
 8010dbe:	4619      	mov	r1, r3
 8010dc0:	68f8      	ldr	r0, [r7, #12]
 8010dc2:	f7ff fb2f 	bl	8010424 <move_window>
 8010dc6:	4603      	mov	r3, r0
 8010dc8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8010dca:	7dfb      	ldrb	r3, [r7, #23]
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d11d      	bne.n	8010e0c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	6a1b      	ldr	r3, [r3, #32]
 8010dd4:	781b      	ldrb	r3, [r3, #0]
 8010dd6:	2be5      	cmp	r3, #229	; 0xe5
 8010dd8:	d004      	beq.n	8010de4 <dir_alloc+0x50>
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	6a1b      	ldr	r3, [r3, #32]
 8010dde:	781b      	ldrb	r3, [r3, #0]
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d107      	bne.n	8010df4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8010de4:	693b      	ldr	r3, [r7, #16]
 8010de6:	3301      	adds	r3, #1
 8010de8:	613b      	str	r3, [r7, #16]
 8010dea:	693a      	ldr	r2, [r7, #16]
 8010dec:	683b      	ldr	r3, [r7, #0]
 8010dee:	429a      	cmp	r2, r3
 8010df0:	d102      	bne.n	8010df8 <dir_alloc+0x64>
 8010df2:	e00c      	b.n	8010e0e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8010df4:	2300      	movs	r3, #0
 8010df6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8010df8:	2101      	movs	r1, #1
 8010dfa:	6878      	ldr	r0, [r7, #4]
 8010dfc:	f7ff ff05 	bl	8010c0a <dir_next>
 8010e00:	4603      	mov	r3, r0
 8010e02:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8010e04:	7dfb      	ldrb	r3, [r7, #23]
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d0d7      	beq.n	8010dba <dir_alloc+0x26>
 8010e0a:	e000      	b.n	8010e0e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8010e0c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8010e0e:	7dfb      	ldrb	r3, [r7, #23]
 8010e10:	2b04      	cmp	r3, #4
 8010e12:	d101      	bne.n	8010e18 <dir_alloc+0x84>
 8010e14:	2307      	movs	r3, #7
 8010e16:	75fb      	strb	r3, [r7, #23]
	return res;
 8010e18:	7dfb      	ldrb	r3, [r7, #23]
}
 8010e1a:	4618      	mov	r0, r3
 8010e1c:	3718      	adds	r7, #24
 8010e1e:	46bd      	mov	sp, r7
 8010e20:	bd80      	pop	{r7, pc}

08010e22 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8010e22:	b580      	push	{r7, lr}
 8010e24:	b084      	sub	sp, #16
 8010e26:	af00      	add	r7, sp, #0
 8010e28:	6078      	str	r0, [r7, #4]
 8010e2a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8010e2c:	683b      	ldr	r3, [r7, #0]
 8010e2e:	331a      	adds	r3, #26
 8010e30:	4618      	mov	r0, r3
 8010e32:	f7ff f847 	bl	800fec4 <ld_word>
 8010e36:	4603      	mov	r3, r0
 8010e38:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	781b      	ldrb	r3, [r3, #0]
 8010e3e:	2b03      	cmp	r3, #3
 8010e40:	d109      	bne.n	8010e56 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8010e42:	683b      	ldr	r3, [r7, #0]
 8010e44:	3314      	adds	r3, #20
 8010e46:	4618      	mov	r0, r3
 8010e48:	f7ff f83c 	bl	800fec4 <ld_word>
 8010e4c:	4603      	mov	r3, r0
 8010e4e:	041b      	lsls	r3, r3, #16
 8010e50:	68fa      	ldr	r2, [r7, #12]
 8010e52:	4313      	orrs	r3, r2
 8010e54:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8010e56:	68fb      	ldr	r3, [r7, #12]
}
 8010e58:	4618      	mov	r0, r3
 8010e5a:	3710      	adds	r7, #16
 8010e5c:	46bd      	mov	sp, r7
 8010e5e:	bd80      	pop	{r7, pc}

08010e60 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8010e60:	b580      	push	{r7, lr}
 8010e62:	b084      	sub	sp, #16
 8010e64:	af00      	add	r7, sp, #0
 8010e66:	60f8      	str	r0, [r7, #12]
 8010e68:	60b9      	str	r1, [r7, #8]
 8010e6a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8010e6c:	68bb      	ldr	r3, [r7, #8]
 8010e6e:	331a      	adds	r3, #26
 8010e70:	687a      	ldr	r2, [r7, #4]
 8010e72:	b292      	uxth	r2, r2
 8010e74:	4611      	mov	r1, r2
 8010e76:	4618      	mov	r0, r3
 8010e78:	f7ff f85f 	bl	800ff3a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8010e7c:	68fb      	ldr	r3, [r7, #12]
 8010e7e:	781b      	ldrb	r3, [r3, #0]
 8010e80:	2b03      	cmp	r3, #3
 8010e82:	d109      	bne.n	8010e98 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8010e84:	68bb      	ldr	r3, [r7, #8]
 8010e86:	f103 0214 	add.w	r2, r3, #20
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	0c1b      	lsrs	r3, r3, #16
 8010e8e:	b29b      	uxth	r3, r3
 8010e90:	4619      	mov	r1, r3
 8010e92:	4610      	mov	r0, r2
 8010e94:	f7ff f851 	bl	800ff3a <st_word>
	}
}
 8010e98:	bf00      	nop
 8010e9a:	3710      	adds	r7, #16
 8010e9c:	46bd      	mov	sp, r7
 8010e9e:	bd80      	pop	{r7, pc}

08010ea0 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8010ea0:	b580      	push	{r7, lr}
 8010ea2:	b086      	sub	sp, #24
 8010ea4:	af00      	add	r7, sp, #0
 8010ea6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	681b      	ldr	r3, [r3, #0]
 8010eac:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8010eae:	2100      	movs	r1, #0
 8010eb0:	6878      	ldr	r0, [r7, #4]
 8010eb2:	f7ff fe2f 	bl	8010b14 <dir_sdi>
 8010eb6:	4603      	mov	r3, r0
 8010eb8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8010eba:	7dfb      	ldrb	r3, [r7, #23]
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d001      	beq.n	8010ec4 <dir_find+0x24>
 8010ec0:	7dfb      	ldrb	r3, [r7, #23]
 8010ec2:	e03e      	b.n	8010f42 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	69db      	ldr	r3, [r3, #28]
 8010ec8:	4619      	mov	r1, r3
 8010eca:	6938      	ldr	r0, [r7, #16]
 8010ecc:	f7ff faaa 	bl	8010424 <move_window>
 8010ed0:	4603      	mov	r3, r0
 8010ed2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8010ed4:	7dfb      	ldrb	r3, [r7, #23]
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d12f      	bne.n	8010f3a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	6a1b      	ldr	r3, [r3, #32]
 8010ede:	781b      	ldrb	r3, [r3, #0]
 8010ee0:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8010ee2:	7bfb      	ldrb	r3, [r7, #15]
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d102      	bne.n	8010eee <dir_find+0x4e>
 8010ee8:	2304      	movs	r3, #4
 8010eea:	75fb      	strb	r3, [r7, #23]
 8010eec:	e028      	b.n	8010f40 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	6a1b      	ldr	r3, [r3, #32]
 8010ef2:	330b      	adds	r3, #11
 8010ef4:	781b      	ldrb	r3, [r3, #0]
 8010ef6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010efa:	b2da      	uxtb	r2, r3
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	6a1b      	ldr	r3, [r3, #32]
 8010f04:	330b      	adds	r3, #11
 8010f06:	781b      	ldrb	r3, [r3, #0]
 8010f08:	f003 0308 	and.w	r3, r3, #8
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d10a      	bne.n	8010f26 <dir_find+0x86>
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	6a18      	ldr	r0, [r3, #32]
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	3324      	adds	r3, #36	; 0x24
 8010f18:	220b      	movs	r2, #11
 8010f1a:	4619      	mov	r1, r3
 8010f1c:	f7ff f88f 	bl	801003e <mem_cmp>
 8010f20:	4603      	mov	r3, r0
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d00b      	beq.n	8010f3e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8010f26:	2100      	movs	r1, #0
 8010f28:	6878      	ldr	r0, [r7, #4]
 8010f2a:	f7ff fe6e 	bl	8010c0a <dir_next>
 8010f2e:	4603      	mov	r3, r0
 8010f30:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8010f32:	7dfb      	ldrb	r3, [r7, #23]
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d0c5      	beq.n	8010ec4 <dir_find+0x24>
 8010f38:	e002      	b.n	8010f40 <dir_find+0xa0>
		if (res != FR_OK) break;
 8010f3a:	bf00      	nop
 8010f3c:	e000      	b.n	8010f40 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8010f3e:	bf00      	nop

	return res;
 8010f40:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f42:	4618      	mov	r0, r3
 8010f44:	3718      	adds	r7, #24
 8010f46:	46bd      	mov	sp, r7
 8010f48:	bd80      	pop	{r7, pc}

08010f4a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8010f4a:	b580      	push	{r7, lr}
 8010f4c:	b084      	sub	sp, #16
 8010f4e:	af00      	add	r7, sp, #0
 8010f50:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	681b      	ldr	r3, [r3, #0]
 8010f56:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8010f58:	2101      	movs	r1, #1
 8010f5a:	6878      	ldr	r0, [r7, #4]
 8010f5c:	f7ff ff1a 	bl	8010d94 <dir_alloc>
 8010f60:	4603      	mov	r3, r0
 8010f62:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8010f64:	7bfb      	ldrb	r3, [r7, #15]
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d11c      	bne.n	8010fa4 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	69db      	ldr	r3, [r3, #28]
 8010f6e:	4619      	mov	r1, r3
 8010f70:	68b8      	ldr	r0, [r7, #8]
 8010f72:	f7ff fa57 	bl	8010424 <move_window>
 8010f76:	4603      	mov	r3, r0
 8010f78:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010f7a:	7bfb      	ldrb	r3, [r7, #15]
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d111      	bne.n	8010fa4 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	6a1b      	ldr	r3, [r3, #32]
 8010f84:	2220      	movs	r2, #32
 8010f86:	2100      	movs	r1, #0
 8010f88:	4618      	mov	r0, r3
 8010f8a:	f7ff f83e 	bl	801000a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	6a18      	ldr	r0, [r3, #32]
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	3324      	adds	r3, #36	; 0x24
 8010f96:	220b      	movs	r2, #11
 8010f98:	4619      	mov	r1, r3
 8010f9a:	f7ff f815 	bl	800ffc8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8010f9e:	68bb      	ldr	r3, [r7, #8]
 8010fa0:	2201      	movs	r2, #1
 8010fa2:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8010fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8010fa6:	4618      	mov	r0, r3
 8010fa8:	3710      	adds	r7, #16
 8010faa:	46bd      	mov	sp, r7
 8010fac:	bd80      	pop	{r7, pc}
	...

08010fb0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8010fb0:	b580      	push	{r7, lr}
 8010fb2:	b088      	sub	sp, #32
 8010fb4:	af00      	add	r7, sp, #0
 8010fb6:	6078      	str	r0, [r7, #4]
 8010fb8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8010fba:	683b      	ldr	r3, [r7, #0]
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	60fb      	str	r3, [r7, #12]
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	3324      	adds	r3, #36	; 0x24
 8010fc4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8010fc6:	220b      	movs	r2, #11
 8010fc8:	2120      	movs	r1, #32
 8010fca:	68b8      	ldr	r0, [r7, #8]
 8010fcc:	f7ff f81d 	bl	801000a <mem_set>
	si = i = 0; ni = 8;
 8010fd0:	2300      	movs	r3, #0
 8010fd2:	613b      	str	r3, [r7, #16]
 8010fd4:	693b      	ldr	r3, [r7, #16]
 8010fd6:	617b      	str	r3, [r7, #20]
 8010fd8:	2308      	movs	r3, #8
 8010fda:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8010fdc:	697b      	ldr	r3, [r7, #20]
 8010fde:	1c5a      	adds	r2, r3, #1
 8010fe0:	617a      	str	r2, [r7, #20]
 8010fe2:	68fa      	ldr	r2, [r7, #12]
 8010fe4:	4413      	add	r3, r2
 8010fe6:	781b      	ldrb	r3, [r3, #0]
 8010fe8:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8010fea:	7ffb      	ldrb	r3, [r7, #31]
 8010fec:	2b20      	cmp	r3, #32
 8010fee:	d94e      	bls.n	801108e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8010ff0:	7ffb      	ldrb	r3, [r7, #31]
 8010ff2:	2b2f      	cmp	r3, #47	; 0x2f
 8010ff4:	d006      	beq.n	8011004 <create_name+0x54>
 8010ff6:	7ffb      	ldrb	r3, [r7, #31]
 8010ff8:	2b5c      	cmp	r3, #92	; 0x5c
 8010ffa:	d110      	bne.n	801101e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8010ffc:	e002      	b.n	8011004 <create_name+0x54>
 8010ffe:	697b      	ldr	r3, [r7, #20]
 8011000:	3301      	adds	r3, #1
 8011002:	617b      	str	r3, [r7, #20]
 8011004:	68fa      	ldr	r2, [r7, #12]
 8011006:	697b      	ldr	r3, [r7, #20]
 8011008:	4413      	add	r3, r2
 801100a:	781b      	ldrb	r3, [r3, #0]
 801100c:	2b2f      	cmp	r3, #47	; 0x2f
 801100e:	d0f6      	beq.n	8010ffe <create_name+0x4e>
 8011010:	68fa      	ldr	r2, [r7, #12]
 8011012:	697b      	ldr	r3, [r7, #20]
 8011014:	4413      	add	r3, r2
 8011016:	781b      	ldrb	r3, [r3, #0]
 8011018:	2b5c      	cmp	r3, #92	; 0x5c
 801101a:	d0f0      	beq.n	8010ffe <create_name+0x4e>
			break;
 801101c:	e038      	b.n	8011090 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 801101e:	7ffb      	ldrb	r3, [r7, #31]
 8011020:	2b2e      	cmp	r3, #46	; 0x2e
 8011022:	d003      	beq.n	801102c <create_name+0x7c>
 8011024:	693a      	ldr	r2, [r7, #16]
 8011026:	69bb      	ldr	r3, [r7, #24]
 8011028:	429a      	cmp	r2, r3
 801102a:	d30c      	bcc.n	8011046 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 801102c:	69bb      	ldr	r3, [r7, #24]
 801102e:	2b0b      	cmp	r3, #11
 8011030:	d002      	beq.n	8011038 <create_name+0x88>
 8011032:	7ffb      	ldrb	r3, [r7, #31]
 8011034:	2b2e      	cmp	r3, #46	; 0x2e
 8011036:	d001      	beq.n	801103c <create_name+0x8c>
 8011038:	2306      	movs	r3, #6
 801103a:	e044      	b.n	80110c6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 801103c:	2308      	movs	r3, #8
 801103e:	613b      	str	r3, [r7, #16]
 8011040:	230b      	movs	r3, #11
 8011042:	61bb      	str	r3, [r7, #24]
			continue;
 8011044:	e022      	b.n	801108c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8011046:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801104a:	2b00      	cmp	r3, #0
 801104c:	da04      	bge.n	8011058 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 801104e:	7ffb      	ldrb	r3, [r7, #31]
 8011050:	3b80      	subs	r3, #128	; 0x80
 8011052:	4a1f      	ldr	r2, [pc, #124]	; (80110d0 <create_name+0x120>)
 8011054:	5cd3      	ldrb	r3, [r2, r3]
 8011056:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8011058:	7ffb      	ldrb	r3, [r7, #31]
 801105a:	4619      	mov	r1, r3
 801105c:	481d      	ldr	r0, [pc, #116]	; (80110d4 <create_name+0x124>)
 801105e:	f7ff f815 	bl	801008c <chk_chr>
 8011062:	4603      	mov	r3, r0
 8011064:	2b00      	cmp	r3, #0
 8011066:	d001      	beq.n	801106c <create_name+0xbc>
 8011068:	2306      	movs	r3, #6
 801106a:	e02c      	b.n	80110c6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 801106c:	7ffb      	ldrb	r3, [r7, #31]
 801106e:	2b60      	cmp	r3, #96	; 0x60
 8011070:	d905      	bls.n	801107e <create_name+0xce>
 8011072:	7ffb      	ldrb	r3, [r7, #31]
 8011074:	2b7a      	cmp	r3, #122	; 0x7a
 8011076:	d802      	bhi.n	801107e <create_name+0xce>
 8011078:	7ffb      	ldrb	r3, [r7, #31]
 801107a:	3b20      	subs	r3, #32
 801107c:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 801107e:	693b      	ldr	r3, [r7, #16]
 8011080:	1c5a      	adds	r2, r3, #1
 8011082:	613a      	str	r2, [r7, #16]
 8011084:	68ba      	ldr	r2, [r7, #8]
 8011086:	4413      	add	r3, r2
 8011088:	7ffa      	ldrb	r2, [r7, #31]
 801108a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 801108c:	e7a6      	b.n	8010fdc <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 801108e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8011090:	68fa      	ldr	r2, [r7, #12]
 8011092:	697b      	ldr	r3, [r7, #20]
 8011094:	441a      	add	r2, r3
 8011096:	683b      	ldr	r3, [r7, #0]
 8011098:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 801109a:	693b      	ldr	r3, [r7, #16]
 801109c:	2b00      	cmp	r3, #0
 801109e:	d101      	bne.n	80110a4 <create_name+0xf4>
 80110a0:	2306      	movs	r3, #6
 80110a2:	e010      	b.n	80110c6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80110a4:	68bb      	ldr	r3, [r7, #8]
 80110a6:	781b      	ldrb	r3, [r3, #0]
 80110a8:	2be5      	cmp	r3, #229	; 0xe5
 80110aa:	d102      	bne.n	80110b2 <create_name+0x102>
 80110ac:	68bb      	ldr	r3, [r7, #8]
 80110ae:	2205      	movs	r2, #5
 80110b0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80110b2:	7ffb      	ldrb	r3, [r7, #31]
 80110b4:	2b20      	cmp	r3, #32
 80110b6:	d801      	bhi.n	80110bc <create_name+0x10c>
 80110b8:	2204      	movs	r2, #4
 80110ba:	e000      	b.n	80110be <create_name+0x10e>
 80110bc:	2200      	movs	r2, #0
 80110be:	68bb      	ldr	r3, [r7, #8]
 80110c0:	330b      	adds	r3, #11
 80110c2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80110c4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80110c6:	4618      	mov	r0, r3
 80110c8:	3720      	adds	r7, #32
 80110ca:	46bd      	mov	sp, r7
 80110cc:	bd80      	pop	{r7, pc}
 80110ce:	bf00      	nop
 80110d0:	080137bc 	.word	0x080137bc
 80110d4:	080136f0 	.word	0x080136f0

080110d8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80110d8:	b580      	push	{r7, lr}
 80110da:	b086      	sub	sp, #24
 80110dc:	af00      	add	r7, sp, #0
 80110de:	6078      	str	r0, [r7, #4]
 80110e0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80110e6:	693b      	ldr	r3, [r7, #16]
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80110ec:	e002      	b.n	80110f4 <follow_path+0x1c>
 80110ee:	683b      	ldr	r3, [r7, #0]
 80110f0:	3301      	adds	r3, #1
 80110f2:	603b      	str	r3, [r7, #0]
 80110f4:	683b      	ldr	r3, [r7, #0]
 80110f6:	781b      	ldrb	r3, [r3, #0]
 80110f8:	2b2f      	cmp	r3, #47	; 0x2f
 80110fa:	d0f8      	beq.n	80110ee <follow_path+0x16>
 80110fc:	683b      	ldr	r3, [r7, #0]
 80110fe:	781b      	ldrb	r3, [r3, #0]
 8011100:	2b5c      	cmp	r3, #92	; 0x5c
 8011102:	d0f4      	beq.n	80110ee <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8011104:	693b      	ldr	r3, [r7, #16]
 8011106:	2200      	movs	r2, #0
 8011108:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801110a:	683b      	ldr	r3, [r7, #0]
 801110c:	781b      	ldrb	r3, [r3, #0]
 801110e:	2b1f      	cmp	r3, #31
 8011110:	d80a      	bhi.n	8011128 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	2280      	movs	r2, #128	; 0x80
 8011116:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 801111a:	2100      	movs	r1, #0
 801111c:	6878      	ldr	r0, [r7, #4]
 801111e:	f7ff fcf9 	bl	8010b14 <dir_sdi>
 8011122:	4603      	mov	r3, r0
 8011124:	75fb      	strb	r3, [r7, #23]
 8011126:	e043      	b.n	80111b0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8011128:	463b      	mov	r3, r7
 801112a:	4619      	mov	r1, r3
 801112c:	6878      	ldr	r0, [r7, #4]
 801112e:	f7ff ff3f 	bl	8010fb0 <create_name>
 8011132:	4603      	mov	r3, r0
 8011134:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011136:	7dfb      	ldrb	r3, [r7, #23]
 8011138:	2b00      	cmp	r3, #0
 801113a:	d134      	bne.n	80111a6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 801113c:	6878      	ldr	r0, [r7, #4]
 801113e:	f7ff feaf 	bl	8010ea0 <dir_find>
 8011142:	4603      	mov	r3, r0
 8011144:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801114c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801114e:	7dfb      	ldrb	r3, [r7, #23]
 8011150:	2b00      	cmp	r3, #0
 8011152:	d00a      	beq.n	801116a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8011154:	7dfb      	ldrb	r3, [r7, #23]
 8011156:	2b04      	cmp	r3, #4
 8011158:	d127      	bne.n	80111aa <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801115a:	7afb      	ldrb	r3, [r7, #11]
 801115c:	f003 0304 	and.w	r3, r3, #4
 8011160:	2b00      	cmp	r3, #0
 8011162:	d122      	bne.n	80111aa <follow_path+0xd2>
 8011164:	2305      	movs	r3, #5
 8011166:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8011168:	e01f      	b.n	80111aa <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801116a:	7afb      	ldrb	r3, [r7, #11]
 801116c:	f003 0304 	and.w	r3, r3, #4
 8011170:	2b00      	cmp	r3, #0
 8011172:	d11c      	bne.n	80111ae <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8011174:	693b      	ldr	r3, [r7, #16]
 8011176:	799b      	ldrb	r3, [r3, #6]
 8011178:	f003 0310 	and.w	r3, r3, #16
 801117c:	2b00      	cmp	r3, #0
 801117e:	d102      	bne.n	8011186 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8011180:	2305      	movs	r3, #5
 8011182:	75fb      	strb	r3, [r7, #23]
 8011184:	e014      	b.n	80111b0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8011186:	68fb      	ldr	r3, [r7, #12]
 8011188:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	695b      	ldr	r3, [r3, #20]
 8011190:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011194:	4413      	add	r3, r2
 8011196:	4619      	mov	r1, r3
 8011198:	68f8      	ldr	r0, [r7, #12]
 801119a:	f7ff fe42 	bl	8010e22 <ld_clust>
 801119e:	4602      	mov	r2, r0
 80111a0:	693b      	ldr	r3, [r7, #16]
 80111a2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80111a4:	e7c0      	b.n	8011128 <follow_path+0x50>
			if (res != FR_OK) break;
 80111a6:	bf00      	nop
 80111a8:	e002      	b.n	80111b0 <follow_path+0xd8>
				break;
 80111aa:	bf00      	nop
 80111ac:	e000      	b.n	80111b0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80111ae:	bf00      	nop
			}
		}
	}

	return res;
 80111b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80111b2:	4618      	mov	r0, r3
 80111b4:	3718      	adds	r7, #24
 80111b6:	46bd      	mov	sp, r7
 80111b8:	bd80      	pop	{r7, pc}

080111ba <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80111ba:	b480      	push	{r7}
 80111bc:	b087      	sub	sp, #28
 80111be:	af00      	add	r7, sp, #0
 80111c0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80111c2:	f04f 33ff 	mov.w	r3, #4294967295
 80111c6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d031      	beq.n	8011234 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	681b      	ldr	r3, [r3, #0]
 80111d4:	617b      	str	r3, [r7, #20]
 80111d6:	e002      	b.n	80111de <get_ldnumber+0x24>
 80111d8:	697b      	ldr	r3, [r7, #20]
 80111da:	3301      	adds	r3, #1
 80111dc:	617b      	str	r3, [r7, #20]
 80111de:	697b      	ldr	r3, [r7, #20]
 80111e0:	781b      	ldrb	r3, [r3, #0]
 80111e2:	2b20      	cmp	r3, #32
 80111e4:	d903      	bls.n	80111ee <get_ldnumber+0x34>
 80111e6:	697b      	ldr	r3, [r7, #20]
 80111e8:	781b      	ldrb	r3, [r3, #0]
 80111ea:	2b3a      	cmp	r3, #58	; 0x3a
 80111ec:	d1f4      	bne.n	80111d8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80111ee:	697b      	ldr	r3, [r7, #20]
 80111f0:	781b      	ldrb	r3, [r3, #0]
 80111f2:	2b3a      	cmp	r3, #58	; 0x3a
 80111f4:	d11c      	bne.n	8011230 <get_ldnumber+0x76>
			tp = *path;
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80111fc:	68fb      	ldr	r3, [r7, #12]
 80111fe:	1c5a      	adds	r2, r3, #1
 8011200:	60fa      	str	r2, [r7, #12]
 8011202:	781b      	ldrb	r3, [r3, #0]
 8011204:	3b30      	subs	r3, #48	; 0x30
 8011206:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8011208:	68bb      	ldr	r3, [r7, #8]
 801120a:	2b09      	cmp	r3, #9
 801120c:	d80e      	bhi.n	801122c <get_ldnumber+0x72>
 801120e:	68fa      	ldr	r2, [r7, #12]
 8011210:	697b      	ldr	r3, [r7, #20]
 8011212:	429a      	cmp	r2, r3
 8011214:	d10a      	bne.n	801122c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8011216:	68bb      	ldr	r3, [r7, #8]
 8011218:	2b00      	cmp	r3, #0
 801121a:	d107      	bne.n	801122c <get_ldnumber+0x72>
					vol = (int)i;
 801121c:	68bb      	ldr	r3, [r7, #8]
 801121e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8011220:	697b      	ldr	r3, [r7, #20]
 8011222:	3301      	adds	r3, #1
 8011224:	617b      	str	r3, [r7, #20]
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	697a      	ldr	r2, [r7, #20]
 801122a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801122c:	693b      	ldr	r3, [r7, #16]
 801122e:	e002      	b.n	8011236 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8011230:	2300      	movs	r3, #0
 8011232:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8011234:	693b      	ldr	r3, [r7, #16]
}
 8011236:	4618      	mov	r0, r3
 8011238:	371c      	adds	r7, #28
 801123a:	46bd      	mov	sp, r7
 801123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011240:	4770      	bx	lr
	...

08011244 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8011244:	b580      	push	{r7, lr}
 8011246:	b082      	sub	sp, #8
 8011248:	af00      	add	r7, sp, #0
 801124a:	6078      	str	r0, [r7, #4]
 801124c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	2200      	movs	r2, #0
 8011252:	70da      	strb	r2, [r3, #3]
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	f04f 32ff 	mov.w	r2, #4294967295
 801125a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801125c:	6839      	ldr	r1, [r7, #0]
 801125e:	6878      	ldr	r0, [r7, #4]
 8011260:	f7ff f8e0 	bl	8010424 <move_window>
 8011264:	4603      	mov	r3, r0
 8011266:	2b00      	cmp	r3, #0
 8011268:	d001      	beq.n	801126e <check_fs+0x2a>
 801126a:	2304      	movs	r3, #4
 801126c:	e038      	b.n	80112e0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	3330      	adds	r3, #48	; 0x30
 8011272:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011276:	4618      	mov	r0, r3
 8011278:	f7fe fe24 	bl	800fec4 <ld_word>
 801127c:	4603      	mov	r3, r0
 801127e:	461a      	mov	r2, r3
 8011280:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8011284:	429a      	cmp	r2, r3
 8011286:	d001      	beq.n	801128c <check_fs+0x48>
 8011288:	2303      	movs	r3, #3
 801128a:	e029      	b.n	80112e0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011292:	2be9      	cmp	r3, #233	; 0xe9
 8011294:	d009      	beq.n	80112aa <check_fs+0x66>
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801129c:	2beb      	cmp	r3, #235	; 0xeb
 801129e:	d11e      	bne.n	80112de <check_fs+0x9a>
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80112a6:	2b90      	cmp	r3, #144	; 0x90
 80112a8:	d119      	bne.n	80112de <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	3330      	adds	r3, #48	; 0x30
 80112ae:	3336      	adds	r3, #54	; 0x36
 80112b0:	4618      	mov	r0, r3
 80112b2:	f7fe fe1f 	bl	800fef4 <ld_dword>
 80112b6:	4603      	mov	r3, r0
 80112b8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80112bc:	4a0a      	ldr	r2, [pc, #40]	; (80112e8 <check_fs+0xa4>)
 80112be:	4293      	cmp	r3, r2
 80112c0:	d101      	bne.n	80112c6 <check_fs+0x82>
 80112c2:	2300      	movs	r3, #0
 80112c4:	e00c      	b.n	80112e0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	3330      	adds	r3, #48	; 0x30
 80112ca:	3352      	adds	r3, #82	; 0x52
 80112cc:	4618      	mov	r0, r3
 80112ce:	f7fe fe11 	bl	800fef4 <ld_dword>
 80112d2:	4602      	mov	r2, r0
 80112d4:	4b05      	ldr	r3, [pc, #20]	; (80112ec <check_fs+0xa8>)
 80112d6:	429a      	cmp	r2, r3
 80112d8:	d101      	bne.n	80112de <check_fs+0x9a>
 80112da:	2300      	movs	r3, #0
 80112dc:	e000      	b.n	80112e0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80112de:	2302      	movs	r3, #2
}
 80112e0:	4618      	mov	r0, r3
 80112e2:	3708      	adds	r7, #8
 80112e4:	46bd      	mov	sp, r7
 80112e6:	bd80      	pop	{r7, pc}
 80112e8:	00544146 	.word	0x00544146
 80112ec:	33544146 	.word	0x33544146

080112f0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80112f0:	b580      	push	{r7, lr}
 80112f2:	b096      	sub	sp, #88	; 0x58
 80112f4:	af00      	add	r7, sp, #0
 80112f6:	60f8      	str	r0, [r7, #12]
 80112f8:	60b9      	str	r1, [r7, #8]
 80112fa:	4613      	mov	r3, r2
 80112fc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80112fe:	68bb      	ldr	r3, [r7, #8]
 8011300:	2200      	movs	r2, #0
 8011302:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8011304:	68f8      	ldr	r0, [r7, #12]
 8011306:	f7ff ff58 	bl	80111ba <get_ldnumber>
 801130a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801130c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801130e:	2b00      	cmp	r3, #0
 8011310:	da01      	bge.n	8011316 <find_volume+0x26>
 8011312:	230b      	movs	r3, #11
 8011314:	e22e      	b.n	8011774 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8011316:	4aa8      	ldr	r2, [pc, #672]	; (80115b8 <find_volume+0x2c8>)
 8011318:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801131a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801131e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8011320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011322:	2b00      	cmp	r3, #0
 8011324:	d101      	bne.n	801132a <find_volume+0x3a>
 8011326:	230c      	movs	r3, #12
 8011328:	e224      	b.n	8011774 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801132a:	68bb      	ldr	r3, [r7, #8]
 801132c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801132e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8011330:	79fb      	ldrb	r3, [r7, #7]
 8011332:	f023 0301 	bic.w	r3, r3, #1
 8011336:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8011338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801133a:	781b      	ldrb	r3, [r3, #0]
 801133c:	2b00      	cmp	r3, #0
 801133e:	d01a      	beq.n	8011376 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8011340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011342:	785b      	ldrb	r3, [r3, #1]
 8011344:	4618      	mov	r0, r3
 8011346:	f7fe fd1f 	bl	800fd88 <disk_status>
 801134a:	4603      	mov	r3, r0
 801134c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8011350:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011354:	f003 0301 	and.w	r3, r3, #1
 8011358:	2b00      	cmp	r3, #0
 801135a:	d10c      	bne.n	8011376 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801135c:	79fb      	ldrb	r3, [r7, #7]
 801135e:	2b00      	cmp	r3, #0
 8011360:	d007      	beq.n	8011372 <find_volume+0x82>
 8011362:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011366:	f003 0304 	and.w	r3, r3, #4
 801136a:	2b00      	cmp	r3, #0
 801136c:	d001      	beq.n	8011372 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801136e:	230a      	movs	r3, #10
 8011370:	e200      	b.n	8011774 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 8011372:	2300      	movs	r3, #0
 8011374:	e1fe      	b.n	8011774 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8011376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011378:	2200      	movs	r2, #0
 801137a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801137c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801137e:	b2da      	uxtb	r2, r3
 8011380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011382:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8011384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011386:	785b      	ldrb	r3, [r3, #1]
 8011388:	4618      	mov	r0, r3
 801138a:	f7fe fd17 	bl	800fdbc <disk_initialize>
 801138e:	4603      	mov	r3, r0
 8011390:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8011394:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011398:	f003 0301 	and.w	r3, r3, #1
 801139c:	2b00      	cmp	r3, #0
 801139e:	d001      	beq.n	80113a4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80113a0:	2303      	movs	r3, #3
 80113a2:	e1e7      	b.n	8011774 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80113a4:	79fb      	ldrb	r3, [r7, #7]
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d007      	beq.n	80113ba <find_volume+0xca>
 80113aa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80113ae:	f003 0304 	and.w	r3, r3, #4
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d001      	beq.n	80113ba <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80113b6:	230a      	movs	r3, #10
 80113b8:	e1dc      	b.n	8011774 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80113ba:	2300      	movs	r3, #0
 80113bc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80113be:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80113c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80113c2:	f7ff ff3f 	bl	8011244 <check_fs>
 80113c6:	4603      	mov	r3, r0
 80113c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80113cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80113d0:	2b02      	cmp	r3, #2
 80113d2:	d14b      	bne.n	801146c <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80113d4:	2300      	movs	r3, #0
 80113d6:	643b      	str	r3, [r7, #64]	; 0x40
 80113d8:	e01f      	b.n	801141a <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80113da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113dc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80113e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80113e2:	011b      	lsls	r3, r3, #4
 80113e4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80113e8:	4413      	add	r3, r2
 80113ea:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80113ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113ee:	3304      	adds	r3, #4
 80113f0:	781b      	ldrb	r3, [r3, #0]
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d006      	beq.n	8011404 <find_volume+0x114>
 80113f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113f8:	3308      	adds	r3, #8
 80113fa:	4618      	mov	r0, r3
 80113fc:	f7fe fd7a 	bl	800fef4 <ld_dword>
 8011400:	4602      	mov	r2, r0
 8011402:	e000      	b.n	8011406 <find_volume+0x116>
 8011404:	2200      	movs	r2, #0
 8011406:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011408:	009b      	lsls	r3, r3, #2
 801140a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801140e:	440b      	add	r3, r1
 8011410:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011414:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011416:	3301      	adds	r3, #1
 8011418:	643b      	str	r3, [r7, #64]	; 0x40
 801141a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801141c:	2b03      	cmp	r3, #3
 801141e:	d9dc      	bls.n	80113da <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8011420:	2300      	movs	r3, #0
 8011422:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8011424:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011426:	2b00      	cmp	r3, #0
 8011428:	d002      	beq.n	8011430 <find_volume+0x140>
 801142a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801142c:	3b01      	subs	r3, #1
 801142e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8011430:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011432:	009b      	lsls	r3, r3, #2
 8011434:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8011438:	4413      	add	r3, r2
 801143a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801143e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8011440:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011442:	2b00      	cmp	r3, #0
 8011444:	d005      	beq.n	8011452 <find_volume+0x162>
 8011446:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011448:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801144a:	f7ff fefb 	bl	8011244 <check_fs>
 801144e:	4603      	mov	r3, r0
 8011450:	e000      	b.n	8011454 <find_volume+0x164>
 8011452:	2303      	movs	r3, #3
 8011454:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8011458:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801145c:	2b01      	cmp	r3, #1
 801145e:	d905      	bls.n	801146c <find_volume+0x17c>
 8011460:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011462:	3301      	adds	r3, #1
 8011464:	643b      	str	r3, [r7, #64]	; 0x40
 8011466:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011468:	2b03      	cmp	r3, #3
 801146a:	d9e1      	bls.n	8011430 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801146c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011470:	2b04      	cmp	r3, #4
 8011472:	d101      	bne.n	8011478 <find_volume+0x188>
 8011474:	2301      	movs	r3, #1
 8011476:	e17d      	b.n	8011774 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8011478:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801147c:	2b01      	cmp	r3, #1
 801147e:	d901      	bls.n	8011484 <find_volume+0x194>
 8011480:	230d      	movs	r3, #13
 8011482:	e177      	b.n	8011774 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8011484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011486:	3330      	adds	r3, #48	; 0x30
 8011488:	330b      	adds	r3, #11
 801148a:	4618      	mov	r0, r3
 801148c:	f7fe fd1a 	bl	800fec4 <ld_word>
 8011490:	4603      	mov	r3, r0
 8011492:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011496:	d001      	beq.n	801149c <find_volume+0x1ac>
 8011498:	230d      	movs	r3, #13
 801149a:	e16b      	b.n	8011774 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801149c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801149e:	3330      	adds	r3, #48	; 0x30
 80114a0:	3316      	adds	r3, #22
 80114a2:	4618      	mov	r0, r3
 80114a4:	f7fe fd0e 	bl	800fec4 <ld_word>
 80114a8:	4603      	mov	r3, r0
 80114aa:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80114ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d106      	bne.n	80114c0 <find_volume+0x1d0>
 80114b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114b4:	3330      	adds	r3, #48	; 0x30
 80114b6:	3324      	adds	r3, #36	; 0x24
 80114b8:	4618      	mov	r0, r3
 80114ba:	f7fe fd1b 	bl	800fef4 <ld_dword>
 80114be:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80114c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80114c4:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80114c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114c8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80114cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114ce:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80114d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114d2:	789b      	ldrb	r3, [r3, #2]
 80114d4:	2b01      	cmp	r3, #1
 80114d6:	d005      	beq.n	80114e4 <find_volume+0x1f4>
 80114d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114da:	789b      	ldrb	r3, [r3, #2]
 80114dc:	2b02      	cmp	r3, #2
 80114de:	d001      	beq.n	80114e4 <find_volume+0x1f4>
 80114e0:	230d      	movs	r3, #13
 80114e2:	e147      	b.n	8011774 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80114e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114e6:	789b      	ldrb	r3, [r3, #2]
 80114e8:	461a      	mov	r2, r3
 80114ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80114ec:	fb02 f303 	mul.w	r3, r2, r3
 80114f0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80114f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80114f8:	b29a      	uxth	r2, r3
 80114fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114fc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80114fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011500:	895b      	ldrh	r3, [r3, #10]
 8011502:	2b00      	cmp	r3, #0
 8011504:	d008      	beq.n	8011518 <find_volume+0x228>
 8011506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011508:	895b      	ldrh	r3, [r3, #10]
 801150a:	461a      	mov	r2, r3
 801150c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801150e:	895b      	ldrh	r3, [r3, #10]
 8011510:	3b01      	subs	r3, #1
 8011512:	4013      	ands	r3, r2
 8011514:	2b00      	cmp	r3, #0
 8011516:	d001      	beq.n	801151c <find_volume+0x22c>
 8011518:	230d      	movs	r3, #13
 801151a:	e12b      	b.n	8011774 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801151c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801151e:	3330      	adds	r3, #48	; 0x30
 8011520:	3311      	adds	r3, #17
 8011522:	4618      	mov	r0, r3
 8011524:	f7fe fcce 	bl	800fec4 <ld_word>
 8011528:	4603      	mov	r3, r0
 801152a:	461a      	mov	r2, r3
 801152c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801152e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8011530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011532:	891b      	ldrh	r3, [r3, #8]
 8011534:	f003 030f 	and.w	r3, r3, #15
 8011538:	b29b      	uxth	r3, r3
 801153a:	2b00      	cmp	r3, #0
 801153c:	d001      	beq.n	8011542 <find_volume+0x252>
 801153e:	230d      	movs	r3, #13
 8011540:	e118      	b.n	8011774 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8011542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011544:	3330      	adds	r3, #48	; 0x30
 8011546:	3313      	adds	r3, #19
 8011548:	4618      	mov	r0, r3
 801154a:	f7fe fcbb 	bl	800fec4 <ld_word>
 801154e:	4603      	mov	r3, r0
 8011550:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8011552:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011554:	2b00      	cmp	r3, #0
 8011556:	d106      	bne.n	8011566 <find_volume+0x276>
 8011558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801155a:	3330      	adds	r3, #48	; 0x30
 801155c:	3320      	adds	r3, #32
 801155e:	4618      	mov	r0, r3
 8011560:	f7fe fcc8 	bl	800fef4 <ld_dword>
 8011564:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8011566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011568:	3330      	adds	r3, #48	; 0x30
 801156a:	330e      	adds	r3, #14
 801156c:	4618      	mov	r0, r3
 801156e:	f7fe fca9 	bl	800fec4 <ld_word>
 8011572:	4603      	mov	r3, r0
 8011574:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8011576:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011578:	2b00      	cmp	r3, #0
 801157a:	d101      	bne.n	8011580 <find_volume+0x290>
 801157c:	230d      	movs	r3, #13
 801157e:	e0f9      	b.n	8011774 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8011580:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011582:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011584:	4413      	add	r3, r2
 8011586:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011588:	8912      	ldrh	r2, [r2, #8]
 801158a:	0912      	lsrs	r2, r2, #4
 801158c:	b292      	uxth	r2, r2
 801158e:	4413      	add	r3, r2
 8011590:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8011592:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011596:	429a      	cmp	r2, r3
 8011598:	d201      	bcs.n	801159e <find_volume+0x2ae>
 801159a:	230d      	movs	r3, #13
 801159c:	e0ea      	b.n	8011774 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801159e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80115a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115a2:	1ad3      	subs	r3, r2, r3
 80115a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80115a6:	8952      	ldrh	r2, [r2, #10]
 80115a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80115ac:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80115ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d103      	bne.n	80115bc <find_volume+0x2cc>
 80115b4:	230d      	movs	r3, #13
 80115b6:	e0dd      	b.n	8011774 <find_volume+0x484>
 80115b8:	2400a1fc 	.word	0x2400a1fc
		fmt = FS_FAT32;
 80115bc:	2303      	movs	r3, #3
 80115be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80115c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115c4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80115c8:	4293      	cmp	r3, r2
 80115ca:	d802      	bhi.n	80115d2 <find_volume+0x2e2>
 80115cc:	2302      	movs	r3, #2
 80115ce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80115d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115d4:	f640 72f5 	movw	r2, #4085	; 0xff5
 80115d8:	4293      	cmp	r3, r2
 80115da:	d802      	bhi.n	80115e2 <find_volume+0x2f2>
 80115dc:	2301      	movs	r3, #1
 80115de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80115e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115e4:	1c9a      	adds	r2, r3, #2
 80115e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115e8:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80115ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115ec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80115ee:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80115f0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80115f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80115f4:	441a      	add	r2, r3
 80115f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115f8:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80115fa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80115fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115fe:	441a      	add	r2, r3
 8011600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011602:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8011604:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011608:	2b03      	cmp	r3, #3
 801160a:	d11e      	bne.n	801164a <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801160c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801160e:	3330      	adds	r3, #48	; 0x30
 8011610:	332a      	adds	r3, #42	; 0x2a
 8011612:	4618      	mov	r0, r3
 8011614:	f7fe fc56 	bl	800fec4 <ld_word>
 8011618:	4603      	mov	r3, r0
 801161a:	2b00      	cmp	r3, #0
 801161c:	d001      	beq.n	8011622 <find_volume+0x332>
 801161e:	230d      	movs	r3, #13
 8011620:	e0a8      	b.n	8011774 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8011622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011624:	891b      	ldrh	r3, [r3, #8]
 8011626:	2b00      	cmp	r3, #0
 8011628:	d001      	beq.n	801162e <find_volume+0x33e>
 801162a:	230d      	movs	r3, #13
 801162c:	e0a2      	b.n	8011774 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801162e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011630:	3330      	adds	r3, #48	; 0x30
 8011632:	332c      	adds	r3, #44	; 0x2c
 8011634:	4618      	mov	r0, r3
 8011636:	f7fe fc5d 	bl	800fef4 <ld_dword>
 801163a:	4602      	mov	r2, r0
 801163c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801163e:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8011640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011642:	695b      	ldr	r3, [r3, #20]
 8011644:	009b      	lsls	r3, r3, #2
 8011646:	647b      	str	r3, [r7, #68]	; 0x44
 8011648:	e01f      	b.n	801168a <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801164a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801164c:	891b      	ldrh	r3, [r3, #8]
 801164e:	2b00      	cmp	r3, #0
 8011650:	d101      	bne.n	8011656 <find_volume+0x366>
 8011652:	230d      	movs	r3, #13
 8011654:	e08e      	b.n	8011774 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8011656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011658:	6a1a      	ldr	r2, [r3, #32]
 801165a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801165c:	441a      	add	r2, r3
 801165e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011660:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8011662:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011666:	2b02      	cmp	r3, #2
 8011668:	d103      	bne.n	8011672 <find_volume+0x382>
 801166a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801166c:	695b      	ldr	r3, [r3, #20]
 801166e:	005b      	lsls	r3, r3, #1
 8011670:	e00a      	b.n	8011688 <find_volume+0x398>
 8011672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011674:	695a      	ldr	r2, [r3, #20]
 8011676:	4613      	mov	r3, r2
 8011678:	005b      	lsls	r3, r3, #1
 801167a:	4413      	add	r3, r2
 801167c:	085a      	lsrs	r2, r3, #1
 801167e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011680:	695b      	ldr	r3, [r3, #20]
 8011682:	f003 0301 	and.w	r3, r3, #1
 8011686:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8011688:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801168a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801168c:	699a      	ldr	r2, [r3, #24]
 801168e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011690:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8011694:	0a5b      	lsrs	r3, r3, #9
 8011696:	429a      	cmp	r2, r3
 8011698:	d201      	bcs.n	801169e <find_volume+0x3ae>
 801169a:	230d      	movs	r3, #13
 801169c:	e06a      	b.n	8011774 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801169e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116a0:	f04f 32ff 	mov.w	r2, #4294967295
 80116a4:	611a      	str	r2, [r3, #16]
 80116a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116a8:	691a      	ldr	r2, [r3, #16]
 80116aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116ac:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80116ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116b0:	2280      	movs	r2, #128	; 0x80
 80116b2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80116b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80116b8:	2b03      	cmp	r3, #3
 80116ba:	d149      	bne.n	8011750 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80116bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116be:	3330      	adds	r3, #48	; 0x30
 80116c0:	3330      	adds	r3, #48	; 0x30
 80116c2:	4618      	mov	r0, r3
 80116c4:	f7fe fbfe 	bl	800fec4 <ld_word>
 80116c8:	4603      	mov	r3, r0
 80116ca:	2b01      	cmp	r3, #1
 80116cc:	d140      	bne.n	8011750 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 80116ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80116d0:	3301      	adds	r3, #1
 80116d2:	4619      	mov	r1, r3
 80116d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80116d6:	f7fe fea5 	bl	8010424 <move_window>
 80116da:	4603      	mov	r3, r0
 80116dc:	2b00      	cmp	r3, #0
 80116de:	d137      	bne.n	8011750 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 80116e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116e2:	2200      	movs	r2, #0
 80116e4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80116e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116e8:	3330      	adds	r3, #48	; 0x30
 80116ea:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80116ee:	4618      	mov	r0, r3
 80116f0:	f7fe fbe8 	bl	800fec4 <ld_word>
 80116f4:	4603      	mov	r3, r0
 80116f6:	461a      	mov	r2, r3
 80116f8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80116fc:	429a      	cmp	r2, r3
 80116fe:	d127      	bne.n	8011750 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8011700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011702:	3330      	adds	r3, #48	; 0x30
 8011704:	4618      	mov	r0, r3
 8011706:	f7fe fbf5 	bl	800fef4 <ld_dword>
 801170a:	4602      	mov	r2, r0
 801170c:	4b1b      	ldr	r3, [pc, #108]	; (801177c <find_volume+0x48c>)
 801170e:	429a      	cmp	r2, r3
 8011710:	d11e      	bne.n	8011750 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8011712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011714:	3330      	adds	r3, #48	; 0x30
 8011716:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801171a:	4618      	mov	r0, r3
 801171c:	f7fe fbea 	bl	800fef4 <ld_dword>
 8011720:	4602      	mov	r2, r0
 8011722:	4b17      	ldr	r3, [pc, #92]	; (8011780 <find_volume+0x490>)
 8011724:	429a      	cmp	r2, r3
 8011726:	d113      	bne.n	8011750 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8011728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801172a:	3330      	adds	r3, #48	; 0x30
 801172c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8011730:	4618      	mov	r0, r3
 8011732:	f7fe fbdf 	bl	800fef4 <ld_dword>
 8011736:	4602      	mov	r2, r0
 8011738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801173a:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801173c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801173e:	3330      	adds	r3, #48	; 0x30
 8011740:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8011744:	4618      	mov	r0, r3
 8011746:	f7fe fbd5 	bl	800fef4 <ld_dword>
 801174a:	4602      	mov	r2, r0
 801174c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801174e:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8011750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011752:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8011756:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8011758:	4b0a      	ldr	r3, [pc, #40]	; (8011784 <find_volume+0x494>)
 801175a:	881b      	ldrh	r3, [r3, #0]
 801175c:	3301      	adds	r3, #1
 801175e:	b29a      	uxth	r2, r3
 8011760:	4b08      	ldr	r3, [pc, #32]	; (8011784 <find_volume+0x494>)
 8011762:	801a      	strh	r2, [r3, #0]
 8011764:	4b07      	ldr	r3, [pc, #28]	; (8011784 <find_volume+0x494>)
 8011766:	881a      	ldrh	r2, [r3, #0]
 8011768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801176a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801176c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801176e:	f7fe fdf1 	bl	8010354 <clear_lock>
#endif
	return FR_OK;
 8011772:	2300      	movs	r3, #0
}
 8011774:	4618      	mov	r0, r3
 8011776:	3758      	adds	r7, #88	; 0x58
 8011778:	46bd      	mov	sp, r7
 801177a:	bd80      	pop	{r7, pc}
 801177c:	41615252 	.word	0x41615252
 8011780:	61417272 	.word	0x61417272
 8011784:	2400a200 	.word	0x2400a200

08011788 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8011788:	b580      	push	{r7, lr}
 801178a:	b084      	sub	sp, #16
 801178c:	af00      	add	r7, sp, #0
 801178e:	6078      	str	r0, [r7, #4]
 8011790:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8011792:	2309      	movs	r3, #9
 8011794:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	2b00      	cmp	r3, #0
 801179a:	d01c      	beq.n	80117d6 <validate+0x4e>
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	681b      	ldr	r3, [r3, #0]
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d018      	beq.n	80117d6 <validate+0x4e>
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	681b      	ldr	r3, [r3, #0]
 80117a8:	781b      	ldrb	r3, [r3, #0]
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d013      	beq.n	80117d6 <validate+0x4e>
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	889a      	ldrh	r2, [r3, #4]
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	681b      	ldr	r3, [r3, #0]
 80117b6:	88db      	ldrh	r3, [r3, #6]
 80117b8:	429a      	cmp	r2, r3
 80117ba:	d10c      	bne.n	80117d6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	681b      	ldr	r3, [r3, #0]
 80117c0:	785b      	ldrb	r3, [r3, #1]
 80117c2:	4618      	mov	r0, r3
 80117c4:	f7fe fae0 	bl	800fd88 <disk_status>
 80117c8:	4603      	mov	r3, r0
 80117ca:	f003 0301 	and.w	r3, r3, #1
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d101      	bne.n	80117d6 <validate+0x4e>
			res = FR_OK;
 80117d2:	2300      	movs	r3, #0
 80117d4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80117d6:	7bfb      	ldrb	r3, [r7, #15]
 80117d8:	2b00      	cmp	r3, #0
 80117da:	d102      	bne.n	80117e2 <validate+0x5a>
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	681b      	ldr	r3, [r3, #0]
 80117e0:	e000      	b.n	80117e4 <validate+0x5c>
 80117e2:	2300      	movs	r3, #0
 80117e4:	683a      	ldr	r2, [r7, #0]
 80117e6:	6013      	str	r3, [r2, #0]
	return res;
 80117e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80117ea:	4618      	mov	r0, r3
 80117ec:	3710      	adds	r7, #16
 80117ee:	46bd      	mov	sp, r7
 80117f0:	bd80      	pop	{r7, pc}
	...

080117f4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80117f4:	b580      	push	{r7, lr}
 80117f6:	b088      	sub	sp, #32
 80117f8:	af00      	add	r7, sp, #0
 80117fa:	60f8      	str	r0, [r7, #12]
 80117fc:	60b9      	str	r1, [r7, #8]
 80117fe:	4613      	mov	r3, r2
 8011800:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8011802:	68bb      	ldr	r3, [r7, #8]
 8011804:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8011806:	f107 0310 	add.w	r3, r7, #16
 801180a:	4618      	mov	r0, r3
 801180c:	f7ff fcd5 	bl	80111ba <get_ldnumber>
 8011810:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8011812:	69fb      	ldr	r3, [r7, #28]
 8011814:	2b00      	cmp	r3, #0
 8011816:	da01      	bge.n	801181c <f_mount+0x28>
 8011818:	230b      	movs	r3, #11
 801181a:	e02b      	b.n	8011874 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801181c:	4a17      	ldr	r2, [pc, #92]	; (801187c <f_mount+0x88>)
 801181e:	69fb      	ldr	r3, [r7, #28]
 8011820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011824:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8011826:	69bb      	ldr	r3, [r7, #24]
 8011828:	2b00      	cmp	r3, #0
 801182a:	d005      	beq.n	8011838 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801182c:	69b8      	ldr	r0, [r7, #24]
 801182e:	f7fe fd91 	bl	8010354 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8011832:	69bb      	ldr	r3, [r7, #24]
 8011834:	2200      	movs	r2, #0
 8011836:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8011838:	68fb      	ldr	r3, [r7, #12]
 801183a:	2b00      	cmp	r3, #0
 801183c:	d002      	beq.n	8011844 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801183e:	68fb      	ldr	r3, [r7, #12]
 8011840:	2200      	movs	r2, #0
 8011842:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8011844:	68fa      	ldr	r2, [r7, #12]
 8011846:	490d      	ldr	r1, [pc, #52]	; (801187c <f_mount+0x88>)
 8011848:	69fb      	ldr	r3, [r7, #28]
 801184a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801184e:	68fb      	ldr	r3, [r7, #12]
 8011850:	2b00      	cmp	r3, #0
 8011852:	d002      	beq.n	801185a <f_mount+0x66>
 8011854:	79fb      	ldrb	r3, [r7, #7]
 8011856:	2b01      	cmp	r3, #1
 8011858:	d001      	beq.n	801185e <f_mount+0x6a>
 801185a:	2300      	movs	r3, #0
 801185c:	e00a      	b.n	8011874 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801185e:	f107 010c 	add.w	r1, r7, #12
 8011862:	f107 0308 	add.w	r3, r7, #8
 8011866:	2200      	movs	r2, #0
 8011868:	4618      	mov	r0, r3
 801186a:	f7ff fd41 	bl	80112f0 <find_volume>
 801186e:	4603      	mov	r3, r0
 8011870:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8011872:	7dfb      	ldrb	r3, [r7, #23]
}
 8011874:	4618      	mov	r0, r3
 8011876:	3720      	adds	r7, #32
 8011878:	46bd      	mov	sp, r7
 801187a:	bd80      	pop	{r7, pc}
 801187c:	2400a1fc 	.word	0x2400a1fc

08011880 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8011880:	b580      	push	{r7, lr}
 8011882:	b098      	sub	sp, #96	; 0x60
 8011884:	af00      	add	r7, sp, #0
 8011886:	60f8      	str	r0, [r7, #12]
 8011888:	60b9      	str	r1, [r7, #8]
 801188a:	4613      	mov	r3, r2
 801188c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801188e:	68fb      	ldr	r3, [r7, #12]
 8011890:	2b00      	cmp	r3, #0
 8011892:	d101      	bne.n	8011898 <f_open+0x18>
 8011894:	2309      	movs	r3, #9
 8011896:	e1ad      	b.n	8011bf4 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8011898:	79fb      	ldrb	r3, [r7, #7]
 801189a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801189e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80118a0:	79fa      	ldrb	r2, [r7, #7]
 80118a2:	f107 0110 	add.w	r1, r7, #16
 80118a6:	f107 0308 	add.w	r3, r7, #8
 80118aa:	4618      	mov	r0, r3
 80118ac:	f7ff fd20 	bl	80112f0 <find_volume>
 80118b0:	4603      	mov	r3, r0
 80118b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80118b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	f040 8191 	bne.w	8011be2 <f_open+0x362>
		dj.obj.fs = fs;
 80118c0:	693b      	ldr	r3, [r7, #16]
 80118c2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80118c4:	68ba      	ldr	r2, [r7, #8]
 80118c6:	f107 0314 	add.w	r3, r7, #20
 80118ca:	4611      	mov	r1, r2
 80118cc:	4618      	mov	r0, r3
 80118ce:	f7ff fc03 	bl	80110d8 <follow_path>
 80118d2:	4603      	mov	r3, r0
 80118d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80118d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d11a      	bne.n	8011916 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80118e0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80118e4:	b25b      	sxtb	r3, r3
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	da03      	bge.n	80118f2 <f_open+0x72>
				res = FR_INVALID_NAME;
 80118ea:	2306      	movs	r3, #6
 80118ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80118f0:	e011      	b.n	8011916 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80118f2:	79fb      	ldrb	r3, [r7, #7]
 80118f4:	f023 0301 	bic.w	r3, r3, #1
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	bf14      	ite	ne
 80118fc:	2301      	movne	r3, #1
 80118fe:	2300      	moveq	r3, #0
 8011900:	b2db      	uxtb	r3, r3
 8011902:	461a      	mov	r2, r3
 8011904:	f107 0314 	add.w	r3, r7, #20
 8011908:	4611      	mov	r1, r2
 801190a:	4618      	mov	r0, r3
 801190c:	f7fe fbda 	bl	80100c4 <chk_lock>
 8011910:	4603      	mov	r3, r0
 8011912:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8011916:	79fb      	ldrb	r3, [r7, #7]
 8011918:	f003 031c 	and.w	r3, r3, #28
 801191c:	2b00      	cmp	r3, #0
 801191e:	d07f      	beq.n	8011a20 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8011920:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011924:	2b00      	cmp	r3, #0
 8011926:	d017      	beq.n	8011958 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8011928:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801192c:	2b04      	cmp	r3, #4
 801192e:	d10e      	bne.n	801194e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8011930:	f7fe fc24 	bl	801017c <enq_lock>
 8011934:	4603      	mov	r3, r0
 8011936:	2b00      	cmp	r3, #0
 8011938:	d006      	beq.n	8011948 <f_open+0xc8>
 801193a:	f107 0314 	add.w	r3, r7, #20
 801193e:	4618      	mov	r0, r3
 8011940:	f7ff fb03 	bl	8010f4a <dir_register>
 8011944:	4603      	mov	r3, r0
 8011946:	e000      	b.n	801194a <f_open+0xca>
 8011948:	2312      	movs	r3, #18
 801194a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801194e:	79fb      	ldrb	r3, [r7, #7]
 8011950:	f043 0308 	orr.w	r3, r3, #8
 8011954:	71fb      	strb	r3, [r7, #7]
 8011956:	e010      	b.n	801197a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8011958:	7ebb      	ldrb	r3, [r7, #26]
 801195a:	f003 0311 	and.w	r3, r3, #17
 801195e:	2b00      	cmp	r3, #0
 8011960:	d003      	beq.n	801196a <f_open+0xea>
					res = FR_DENIED;
 8011962:	2307      	movs	r3, #7
 8011964:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8011968:	e007      	b.n	801197a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801196a:	79fb      	ldrb	r3, [r7, #7]
 801196c:	f003 0304 	and.w	r3, r3, #4
 8011970:	2b00      	cmp	r3, #0
 8011972:	d002      	beq.n	801197a <f_open+0xfa>
 8011974:	2308      	movs	r3, #8
 8011976:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801197a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801197e:	2b00      	cmp	r3, #0
 8011980:	d168      	bne.n	8011a54 <f_open+0x1d4>
 8011982:	79fb      	ldrb	r3, [r7, #7]
 8011984:	f003 0308 	and.w	r3, r3, #8
 8011988:	2b00      	cmp	r3, #0
 801198a:	d063      	beq.n	8011a54 <f_open+0x1d4>
				dw = GET_FATTIME();
 801198c:	f7fb f9c2 	bl	800cd14 <get_fattime>
 8011990:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8011992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011994:	330e      	adds	r3, #14
 8011996:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011998:	4618      	mov	r0, r3
 801199a:	f7fe fae9 	bl	800ff70 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801199e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119a0:	3316      	adds	r3, #22
 80119a2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80119a4:	4618      	mov	r0, r3
 80119a6:	f7fe fae3 	bl	800ff70 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80119aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119ac:	330b      	adds	r3, #11
 80119ae:	2220      	movs	r2, #32
 80119b0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80119b2:	693b      	ldr	r3, [r7, #16]
 80119b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80119b6:	4611      	mov	r1, r2
 80119b8:	4618      	mov	r0, r3
 80119ba:	f7ff fa32 	bl	8010e22 <ld_clust>
 80119be:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80119c0:	693b      	ldr	r3, [r7, #16]
 80119c2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80119c4:	2200      	movs	r2, #0
 80119c6:	4618      	mov	r0, r3
 80119c8:	f7ff fa4a 	bl	8010e60 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80119cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119ce:	331c      	adds	r3, #28
 80119d0:	2100      	movs	r1, #0
 80119d2:	4618      	mov	r0, r3
 80119d4:	f7fe facc 	bl	800ff70 <st_dword>
					fs->wflag = 1;
 80119d8:	693b      	ldr	r3, [r7, #16]
 80119da:	2201      	movs	r2, #1
 80119dc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80119de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d037      	beq.n	8011a54 <f_open+0x1d4>
						dw = fs->winsect;
 80119e4:	693b      	ldr	r3, [r7, #16]
 80119e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119e8:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80119ea:	f107 0314 	add.w	r3, r7, #20
 80119ee:	2200      	movs	r2, #0
 80119f0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80119f2:	4618      	mov	r0, r3
 80119f4:	f7fe ff5d 	bl	80108b2 <remove_chain>
 80119f8:	4603      	mov	r3, r0
 80119fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80119fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d126      	bne.n	8011a54 <f_open+0x1d4>
							res = move_window(fs, dw);
 8011a06:	693b      	ldr	r3, [r7, #16]
 8011a08:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011a0a:	4618      	mov	r0, r3
 8011a0c:	f7fe fd0a 	bl	8010424 <move_window>
 8011a10:	4603      	mov	r3, r0
 8011a12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8011a16:	693b      	ldr	r3, [r7, #16]
 8011a18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011a1a:	3a01      	subs	r2, #1
 8011a1c:	60da      	str	r2, [r3, #12]
 8011a1e:	e019      	b.n	8011a54 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8011a20:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d115      	bne.n	8011a54 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8011a28:	7ebb      	ldrb	r3, [r7, #26]
 8011a2a:	f003 0310 	and.w	r3, r3, #16
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d003      	beq.n	8011a3a <f_open+0x1ba>
					res = FR_NO_FILE;
 8011a32:	2304      	movs	r3, #4
 8011a34:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8011a38:	e00c      	b.n	8011a54 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8011a3a:	79fb      	ldrb	r3, [r7, #7]
 8011a3c:	f003 0302 	and.w	r3, r3, #2
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	d007      	beq.n	8011a54 <f_open+0x1d4>
 8011a44:	7ebb      	ldrb	r3, [r7, #26]
 8011a46:	f003 0301 	and.w	r3, r3, #1
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	d002      	beq.n	8011a54 <f_open+0x1d4>
						res = FR_DENIED;
 8011a4e:	2307      	movs	r3, #7
 8011a50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8011a54:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d128      	bne.n	8011aae <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8011a5c:	79fb      	ldrb	r3, [r7, #7]
 8011a5e:	f003 0308 	and.w	r3, r3, #8
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d003      	beq.n	8011a6e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8011a66:	79fb      	ldrb	r3, [r7, #7]
 8011a68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011a6c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8011a6e:	693b      	ldr	r3, [r7, #16]
 8011a70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a72:	68fb      	ldr	r3, [r7, #12]
 8011a74:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8011a76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011a78:	68fb      	ldr	r3, [r7, #12]
 8011a7a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011a7c:	79fb      	ldrb	r3, [r7, #7]
 8011a7e:	f023 0301 	bic.w	r3, r3, #1
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	bf14      	ite	ne
 8011a86:	2301      	movne	r3, #1
 8011a88:	2300      	moveq	r3, #0
 8011a8a:	b2db      	uxtb	r3, r3
 8011a8c:	461a      	mov	r2, r3
 8011a8e:	f107 0314 	add.w	r3, r7, #20
 8011a92:	4611      	mov	r1, r2
 8011a94:	4618      	mov	r0, r3
 8011a96:	f7fe fb93 	bl	80101c0 <inc_lock>
 8011a9a:	4602      	mov	r2, r0
 8011a9c:	68fb      	ldr	r3, [r7, #12]
 8011a9e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8011aa0:	68fb      	ldr	r3, [r7, #12]
 8011aa2:	691b      	ldr	r3, [r3, #16]
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	d102      	bne.n	8011aae <f_open+0x22e>
 8011aa8:	2302      	movs	r3, #2
 8011aaa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8011aae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011ab2:	2b00      	cmp	r3, #0
 8011ab4:	f040 8095 	bne.w	8011be2 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8011ab8:	693b      	ldr	r3, [r7, #16]
 8011aba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011abc:	4611      	mov	r1, r2
 8011abe:	4618      	mov	r0, r3
 8011ac0:	f7ff f9af 	bl	8010e22 <ld_clust>
 8011ac4:	4602      	mov	r2, r0
 8011ac6:	68fb      	ldr	r3, [r7, #12]
 8011ac8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8011aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011acc:	331c      	adds	r3, #28
 8011ace:	4618      	mov	r0, r3
 8011ad0:	f7fe fa10 	bl	800fef4 <ld_dword>
 8011ad4:	4602      	mov	r2, r0
 8011ad6:	68fb      	ldr	r3, [r7, #12]
 8011ad8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8011ada:	68fb      	ldr	r3, [r7, #12]
 8011adc:	2200      	movs	r2, #0
 8011ade:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8011ae0:	693a      	ldr	r2, [r7, #16]
 8011ae2:	68fb      	ldr	r3, [r7, #12]
 8011ae4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8011ae6:	693b      	ldr	r3, [r7, #16]
 8011ae8:	88da      	ldrh	r2, [r3, #6]
 8011aea:	68fb      	ldr	r3, [r7, #12]
 8011aec:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8011aee:	68fb      	ldr	r3, [r7, #12]
 8011af0:	79fa      	ldrb	r2, [r7, #7]
 8011af2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8011af4:	68fb      	ldr	r3, [r7, #12]
 8011af6:	2200      	movs	r2, #0
 8011af8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8011afa:	68fb      	ldr	r3, [r7, #12]
 8011afc:	2200      	movs	r2, #0
 8011afe:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8011b00:	68fb      	ldr	r3, [r7, #12]
 8011b02:	2200      	movs	r2, #0
 8011b04:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8011b06:	68fb      	ldr	r3, [r7, #12]
 8011b08:	3330      	adds	r3, #48	; 0x30
 8011b0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011b0e:	2100      	movs	r1, #0
 8011b10:	4618      	mov	r0, r3
 8011b12:	f7fe fa7a 	bl	801000a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8011b16:	79fb      	ldrb	r3, [r7, #7]
 8011b18:	f003 0320 	and.w	r3, r3, #32
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	d060      	beq.n	8011be2 <f_open+0x362>
 8011b20:	68fb      	ldr	r3, [r7, #12]
 8011b22:	68db      	ldr	r3, [r3, #12]
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d05c      	beq.n	8011be2 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8011b28:	68fb      	ldr	r3, [r7, #12]
 8011b2a:	68da      	ldr	r2, [r3, #12]
 8011b2c:	68fb      	ldr	r3, [r7, #12]
 8011b2e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8011b30:	693b      	ldr	r3, [r7, #16]
 8011b32:	895b      	ldrh	r3, [r3, #10]
 8011b34:	025b      	lsls	r3, r3, #9
 8011b36:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8011b38:	68fb      	ldr	r3, [r7, #12]
 8011b3a:	689b      	ldr	r3, [r3, #8]
 8011b3c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8011b3e:	68fb      	ldr	r3, [r7, #12]
 8011b40:	68db      	ldr	r3, [r3, #12]
 8011b42:	657b      	str	r3, [r7, #84]	; 0x54
 8011b44:	e016      	b.n	8011b74 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8011b46:	68fb      	ldr	r3, [r7, #12]
 8011b48:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011b4a:	4618      	mov	r0, r3
 8011b4c:	f7fe fd25 	bl	801059a <get_fat>
 8011b50:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8011b52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011b54:	2b01      	cmp	r3, #1
 8011b56:	d802      	bhi.n	8011b5e <f_open+0x2de>
 8011b58:	2302      	movs	r3, #2
 8011b5a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8011b5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b64:	d102      	bne.n	8011b6c <f_open+0x2ec>
 8011b66:	2301      	movs	r3, #1
 8011b68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8011b6c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011b6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011b70:	1ad3      	subs	r3, r2, r3
 8011b72:	657b      	str	r3, [r7, #84]	; 0x54
 8011b74:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d103      	bne.n	8011b84 <f_open+0x304>
 8011b7c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011b7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011b80:	429a      	cmp	r2, r3
 8011b82:	d8e0      	bhi.n	8011b46 <f_open+0x2c6>
				}
				fp->clust = clst;
 8011b84:	68fb      	ldr	r3, [r7, #12]
 8011b86:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011b88:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8011b8a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d127      	bne.n	8011be2 <f_open+0x362>
 8011b92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011b94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d022      	beq.n	8011be2 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8011b9c:	693b      	ldr	r3, [r7, #16]
 8011b9e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011ba0:	4618      	mov	r0, r3
 8011ba2:	f7fe fcdb 	bl	801055c <clust2sect>
 8011ba6:	6478      	str	r0, [r7, #68]	; 0x44
 8011ba8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d103      	bne.n	8011bb6 <f_open+0x336>
						res = FR_INT_ERR;
 8011bae:	2302      	movs	r3, #2
 8011bb0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8011bb4:	e015      	b.n	8011be2 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8011bb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011bb8:	0a5a      	lsrs	r2, r3, #9
 8011bba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011bbc:	441a      	add	r2, r3
 8011bbe:	68fb      	ldr	r3, [r7, #12]
 8011bc0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8011bc2:	693b      	ldr	r3, [r7, #16]
 8011bc4:	7858      	ldrb	r0, [r3, #1]
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011bcc:	68fb      	ldr	r3, [r7, #12]
 8011bce:	6a1a      	ldr	r2, [r3, #32]
 8011bd0:	2301      	movs	r3, #1
 8011bd2:	f7fe f919 	bl	800fe08 <disk_read>
 8011bd6:	4603      	mov	r3, r0
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d002      	beq.n	8011be2 <f_open+0x362>
 8011bdc:	2301      	movs	r3, #1
 8011bde:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8011be2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d002      	beq.n	8011bf0 <f_open+0x370>
 8011bea:	68fb      	ldr	r3, [r7, #12]
 8011bec:	2200      	movs	r2, #0
 8011bee:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8011bf0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8011bf4:	4618      	mov	r0, r3
 8011bf6:	3760      	adds	r7, #96	; 0x60
 8011bf8:	46bd      	mov	sp, r7
 8011bfa:	bd80      	pop	{r7, pc}

08011bfc <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8011bfc:	b580      	push	{r7, lr}
 8011bfe:	b08e      	sub	sp, #56	; 0x38
 8011c00:	af00      	add	r7, sp, #0
 8011c02:	60f8      	str	r0, [r7, #12]
 8011c04:	60b9      	str	r1, [r7, #8]
 8011c06:	607a      	str	r2, [r7, #4]
 8011c08:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8011c0a:	68bb      	ldr	r3, [r7, #8]
 8011c0c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8011c0e:	683b      	ldr	r3, [r7, #0]
 8011c10:	2200      	movs	r2, #0
 8011c12:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8011c14:	68fb      	ldr	r3, [r7, #12]
 8011c16:	f107 0214 	add.w	r2, r7, #20
 8011c1a:	4611      	mov	r1, r2
 8011c1c:	4618      	mov	r0, r3
 8011c1e:	f7ff fdb3 	bl	8011788 <validate>
 8011c22:	4603      	mov	r3, r0
 8011c24:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8011c28:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	d107      	bne.n	8011c40 <f_read+0x44>
 8011c30:	68fb      	ldr	r3, [r7, #12]
 8011c32:	7d5b      	ldrb	r3, [r3, #21]
 8011c34:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011c38:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d002      	beq.n	8011c46 <f_read+0x4a>
 8011c40:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011c44:	e115      	b.n	8011e72 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8011c46:	68fb      	ldr	r3, [r7, #12]
 8011c48:	7d1b      	ldrb	r3, [r3, #20]
 8011c4a:	f003 0301 	and.w	r3, r3, #1
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	d101      	bne.n	8011c56 <f_read+0x5a>
 8011c52:	2307      	movs	r3, #7
 8011c54:	e10d      	b.n	8011e72 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8011c56:	68fb      	ldr	r3, [r7, #12]
 8011c58:	68da      	ldr	r2, [r3, #12]
 8011c5a:	68fb      	ldr	r3, [r7, #12]
 8011c5c:	699b      	ldr	r3, [r3, #24]
 8011c5e:	1ad3      	subs	r3, r2, r3
 8011c60:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8011c62:	687a      	ldr	r2, [r7, #4]
 8011c64:	6a3b      	ldr	r3, [r7, #32]
 8011c66:	429a      	cmp	r2, r3
 8011c68:	f240 80fe 	bls.w	8011e68 <f_read+0x26c>
 8011c6c:	6a3b      	ldr	r3, [r7, #32]
 8011c6e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8011c70:	e0fa      	b.n	8011e68 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8011c72:	68fb      	ldr	r3, [r7, #12]
 8011c74:	699b      	ldr	r3, [r3, #24]
 8011c76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	f040 80c6 	bne.w	8011e0c <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8011c80:	68fb      	ldr	r3, [r7, #12]
 8011c82:	699b      	ldr	r3, [r3, #24]
 8011c84:	0a5b      	lsrs	r3, r3, #9
 8011c86:	697a      	ldr	r2, [r7, #20]
 8011c88:	8952      	ldrh	r2, [r2, #10]
 8011c8a:	3a01      	subs	r2, #1
 8011c8c:	4013      	ands	r3, r2
 8011c8e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8011c90:	69fb      	ldr	r3, [r7, #28]
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	d12f      	bne.n	8011cf6 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8011c96:	68fb      	ldr	r3, [r7, #12]
 8011c98:	699b      	ldr	r3, [r3, #24]
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d103      	bne.n	8011ca6 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8011c9e:	68fb      	ldr	r3, [r7, #12]
 8011ca0:	689b      	ldr	r3, [r3, #8]
 8011ca2:	633b      	str	r3, [r7, #48]	; 0x30
 8011ca4:	e013      	b.n	8011cce <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	d007      	beq.n	8011cbe <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8011cae:	68fb      	ldr	r3, [r7, #12]
 8011cb0:	699b      	ldr	r3, [r3, #24]
 8011cb2:	4619      	mov	r1, r3
 8011cb4:	68f8      	ldr	r0, [r7, #12]
 8011cb6:	f7fe fef9 	bl	8010aac <clmt_clust>
 8011cba:	6338      	str	r0, [r7, #48]	; 0x30
 8011cbc:	e007      	b.n	8011cce <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8011cbe:	68fa      	ldr	r2, [r7, #12]
 8011cc0:	68fb      	ldr	r3, [r7, #12]
 8011cc2:	69db      	ldr	r3, [r3, #28]
 8011cc4:	4619      	mov	r1, r3
 8011cc6:	4610      	mov	r0, r2
 8011cc8:	f7fe fc67 	bl	801059a <get_fat>
 8011ccc:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8011cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cd0:	2b01      	cmp	r3, #1
 8011cd2:	d804      	bhi.n	8011cde <f_read+0xe2>
 8011cd4:	68fb      	ldr	r3, [r7, #12]
 8011cd6:	2202      	movs	r2, #2
 8011cd8:	755a      	strb	r2, [r3, #21]
 8011cda:	2302      	movs	r3, #2
 8011cdc:	e0c9      	b.n	8011e72 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ce4:	d104      	bne.n	8011cf0 <f_read+0xf4>
 8011ce6:	68fb      	ldr	r3, [r7, #12]
 8011ce8:	2201      	movs	r2, #1
 8011cea:	755a      	strb	r2, [r3, #21]
 8011cec:	2301      	movs	r3, #1
 8011cee:	e0c0      	b.n	8011e72 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8011cf0:	68fb      	ldr	r3, [r7, #12]
 8011cf2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011cf4:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8011cf6:	697a      	ldr	r2, [r7, #20]
 8011cf8:	68fb      	ldr	r3, [r7, #12]
 8011cfa:	69db      	ldr	r3, [r3, #28]
 8011cfc:	4619      	mov	r1, r3
 8011cfe:	4610      	mov	r0, r2
 8011d00:	f7fe fc2c 	bl	801055c <clust2sect>
 8011d04:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8011d06:	69bb      	ldr	r3, [r7, #24]
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d104      	bne.n	8011d16 <f_read+0x11a>
 8011d0c:	68fb      	ldr	r3, [r7, #12]
 8011d0e:	2202      	movs	r2, #2
 8011d10:	755a      	strb	r2, [r3, #21]
 8011d12:	2302      	movs	r3, #2
 8011d14:	e0ad      	b.n	8011e72 <f_read+0x276>
			sect += csect;
 8011d16:	69ba      	ldr	r2, [r7, #24]
 8011d18:	69fb      	ldr	r3, [r7, #28]
 8011d1a:	4413      	add	r3, r2
 8011d1c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	0a5b      	lsrs	r3, r3, #9
 8011d22:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8011d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	d039      	beq.n	8011d9e <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8011d2a:	69fa      	ldr	r2, [r7, #28]
 8011d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d2e:	4413      	add	r3, r2
 8011d30:	697a      	ldr	r2, [r7, #20]
 8011d32:	8952      	ldrh	r2, [r2, #10]
 8011d34:	4293      	cmp	r3, r2
 8011d36:	d905      	bls.n	8011d44 <f_read+0x148>
					cc = fs->csize - csect;
 8011d38:	697b      	ldr	r3, [r7, #20]
 8011d3a:	895b      	ldrh	r3, [r3, #10]
 8011d3c:	461a      	mov	r2, r3
 8011d3e:	69fb      	ldr	r3, [r7, #28]
 8011d40:	1ad3      	subs	r3, r2, r3
 8011d42:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011d44:	697b      	ldr	r3, [r7, #20]
 8011d46:	7858      	ldrb	r0, [r3, #1]
 8011d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d4a:	69ba      	ldr	r2, [r7, #24]
 8011d4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011d4e:	f7fe f85b 	bl	800fe08 <disk_read>
 8011d52:	4603      	mov	r3, r0
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	d004      	beq.n	8011d62 <f_read+0x166>
 8011d58:	68fb      	ldr	r3, [r7, #12]
 8011d5a:	2201      	movs	r2, #1
 8011d5c:	755a      	strb	r2, [r3, #21]
 8011d5e:	2301      	movs	r3, #1
 8011d60:	e087      	b.n	8011e72 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8011d62:	68fb      	ldr	r3, [r7, #12]
 8011d64:	7d1b      	ldrb	r3, [r3, #20]
 8011d66:	b25b      	sxtb	r3, r3
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	da14      	bge.n	8011d96 <f_read+0x19a>
 8011d6c:	68fb      	ldr	r3, [r7, #12]
 8011d6e:	6a1a      	ldr	r2, [r3, #32]
 8011d70:	69bb      	ldr	r3, [r7, #24]
 8011d72:	1ad3      	subs	r3, r2, r3
 8011d74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011d76:	429a      	cmp	r2, r3
 8011d78:	d90d      	bls.n	8011d96 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8011d7a:	68fb      	ldr	r3, [r7, #12]
 8011d7c:	6a1a      	ldr	r2, [r3, #32]
 8011d7e:	69bb      	ldr	r3, [r7, #24]
 8011d80:	1ad3      	subs	r3, r2, r3
 8011d82:	025b      	lsls	r3, r3, #9
 8011d84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011d86:	18d0      	adds	r0, r2, r3
 8011d88:	68fb      	ldr	r3, [r7, #12]
 8011d8a:	3330      	adds	r3, #48	; 0x30
 8011d8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011d90:	4619      	mov	r1, r3
 8011d92:	f7fe f919 	bl	800ffc8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8011d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d98:	025b      	lsls	r3, r3, #9
 8011d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8011d9c:	e050      	b.n	8011e40 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8011d9e:	68fb      	ldr	r3, [r7, #12]
 8011da0:	6a1b      	ldr	r3, [r3, #32]
 8011da2:	69ba      	ldr	r2, [r7, #24]
 8011da4:	429a      	cmp	r2, r3
 8011da6:	d02e      	beq.n	8011e06 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8011da8:	68fb      	ldr	r3, [r7, #12]
 8011daa:	7d1b      	ldrb	r3, [r3, #20]
 8011dac:	b25b      	sxtb	r3, r3
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	da18      	bge.n	8011de4 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011db2:	697b      	ldr	r3, [r7, #20]
 8011db4:	7858      	ldrb	r0, [r3, #1]
 8011db6:	68fb      	ldr	r3, [r7, #12]
 8011db8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011dbc:	68fb      	ldr	r3, [r7, #12]
 8011dbe:	6a1a      	ldr	r2, [r3, #32]
 8011dc0:	2301      	movs	r3, #1
 8011dc2:	f7fe f841 	bl	800fe48 <disk_write>
 8011dc6:	4603      	mov	r3, r0
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	d004      	beq.n	8011dd6 <f_read+0x1da>
 8011dcc:	68fb      	ldr	r3, [r7, #12]
 8011dce:	2201      	movs	r2, #1
 8011dd0:	755a      	strb	r2, [r3, #21]
 8011dd2:	2301      	movs	r3, #1
 8011dd4:	e04d      	b.n	8011e72 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8011dd6:	68fb      	ldr	r3, [r7, #12]
 8011dd8:	7d1b      	ldrb	r3, [r3, #20]
 8011dda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011dde:	b2da      	uxtb	r2, r3
 8011de0:	68fb      	ldr	r3, [r7, #12]
 8011de2:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8011de4:	697b      	ldr	r3, [r7, #20]
 8011de6:	7858      	ldrb	r0, [r3, #1]
 8011de8:	68fb      	ldr	r3, [r7, #12]
 8011dea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011dee:	2301      	movs	r3, #1
 8011df0:	69ba      	ldr	r2, [r7, #24]
 8011df2:	f7fe f809 	bl	800fe08 <disk_read>
 8011df6:	4603      	mov	r3, r0
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d004      	beq.n	8011e06 <f_read+0x20a>
 8011dfc:	68fb      	ldr	r3, [r7, #12]
 8011dfe:	2201      	movs	r2, #1
 8011e00:	755a      	strb	r2, [r3, #21]
 8011e02:	2301      	movs	r3, #1
 8011e04:	e035      	b.n	8011e72 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8011e06:	68fb      	ldr	r3, [r7, #12]
 8011e08:	69ba      	ldr	r2, [r7, #24]
 8011e0a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8011e0c:	68fb      	ldr	r3, [r7, #12]
 8011e0e:	699b      	ldr	r3, [r3, #24]
 8011e10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011e14:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8011e18:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8011e1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	429a      	cmp	r2, r3
 8011e20:	d901      	bls.n	8011e26 <f_read+0x22a>
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8011e26:	68fb      	ldr	r3, [r7, #12]
 8011e28:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011e2c:	68fb      	ldr	r3, [r7, #12]
 8011e2e:	699b      	ldr	r3, [r3, #24]
 8011e30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011e34:	4413      	add	r3, r2
 8011e36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011e38:	4619      	mov	r1, r3
 8011e3a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011e3c:	f7fe f8c4 	bl	800ffc8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8011e40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e44:	4413      	add	r3, r2
 8011e46:	627b      	str	r3, [r7, #36]	; 0x24
 8011e48:	68fb      	ldr	r3, [r7, #12]
 8011e4a:	699a      	ldr	r2, [r3, #24]
 8011e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e4e:	441a      	add	r2, r3
 8011e50:	68fb      	ldr	r3, [r7, #12]
 8011e52:	619a      	str	r2, [r3, #24]
 8011e54:	683b      	ldr	r3, [r7, #0]
 8011e56:	681a      	ldr	r2, [r3, #0]
 8011e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e5a:	441a      	add	r2, r3
 8011e5c:	683b      	ldr	r3, [r7, #0]
 8011e5e:	601a      	str	r2, [r3, #0]
 8011e60:	687a      	ldr	r2, [r7, #4]
 8011e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e64:	1ad3      	subs	r3, r2, r3
 8011e66:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	f47f af01 	bne.w	8011c72 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8011e70:	2300      	movs	r3, #0
}
 8011e72:	4618      	mov	r0, r3
 8011e74:	3738      	adds	r7, #56	; 0x38
 8011e76:	46bd      	mov	sp, r7
 8011e78:	bd80      	pop	{r7, pc}

08011e7a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8011e7a:	b580      	push	{r7, lr}
 8011e7c:	b08c      	sub	sp, #48	; 0x30
 8011e7e:	af00      	add	r7, sp, #0
 8011e80:	60f8      	str	r0, [r7, #12]
 8011e82:	60b9      	str	r1, [r7, #8]
 8011e84:	607a      	str	r2, [r7, #4]
 8011e86:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8011e88:	68bb      	ldr	r3, [r7, #8]
 8011e8a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8011e8c:	683b      	ldr	r3, [r7, #0]
 8011e8e:	2200      	movs	r2, #0
 8011e90:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8011e92:	68fb      	ldr	r3, [r7, #12]
 8011e94:	f107 0210 	add.w	r2, r7, #16
 8011e98:	4611      	mov	r1, r2
 8011e9a:	4618      	mov	r0, r3
 8011e9c:	f7ff fc74 	bl	8011788 <validate>
 8011ea0:	4603      	mov	r3, r0
 8011ea2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8011ea6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d107      	bne.n	8011ebe <f_write+0x44>
 8011eae:	68fb      	ldr	r3, [r7, #12]
 8011eb0:	7d5b      	ldrb	r3, [r3, #21]
 8011eb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8011eb6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d002      	beq.n	8011ec4 <f_write+0x4a>
 8011ebe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011ec2:	e14b      	b.n	801215c <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8011ec4:	68fb      	ldr	r3, [r7, #12]
 8011ec6:	7d1b      	ldrb	r3, [r3, #20]
 8011ec8:	f003 0302 	and.w	r3, r3, #2
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d101      	bne.n	8011ed4 <f_write+0x5a>
 8011ed0:	2307      	movs	r3, #7
 8011ed2:	e143      	b.n	801215c <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8011ed4:	68fb      	ldr	r3, [r7, #12]
 8011ed6:	699a      	ldr	r2, [r3, #24]
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	441a      	add	r2, r3
 8011edc:	68fb      	ldr	r3, [r7, #12]
 8011ede:	699b      	ldr	r3, [r3, #24]
 8011ee0:	429a      	cmp	r2, r3
 8011ee2:	f080 812d 	bcs.w	8012140 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8011ee6:	68fb      	ldr	r3, [r7, #12]
 8011ee8:	699b      	ldr	r3, [r3, #24]
 8011eea:	43db      	mvns	r3, r3
 8011eec:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8011eee:	e127      	b.n	8012140 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8011ef0:	68fb      	ldr	r3, [r7, #12]
 8011ef2:	699b      	ldr	r3, [r3, #24]
 8011ef4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	f040 80e3 	bne.w	80120c4 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8011efe:	68fb      	ldr	r3, [r7, #12]
 8011f00:	699b      	ldr	r3, [r3, #24]
 8011f02:	0a5b      	lsrs	r3, r3, #9
 8011f04:	693a      	ldr	r2, [r7, #16]
 8011f06:	8952      	ldrh	r2, [r2, #10]
 8011f08:	3a01      	subs	r2, #1
 8011f0a:	4013      	ands	r3, r2
 8011f0c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8011f0e:	69bb      	ldr	r3, [r7, #24]
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	d143      	bne.n	8011f9c <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8011f14:	68fb      	ldr	r3, [r7, #12]
 8011f16:	699b      	ldr	r3, [r3, #24]
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	d10c      	bne.n	8011f36 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8011f1c:	68fb      	ldr	r3, [r7, #12]
 8011f1e:	689b      	ldr	r3, [r3, #8]
 8011f20:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8011f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d11a      	bne.n	8011f5e <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8011f28:	68fb      	ldr	r3, [r7, #12]
 8011f2a:	2100      	movs	r1, #0
 8011f2c:	4618      	mov	r0, r3
 8011f2e:	f7fe fd25 	bl	801097c <create_chain>
 8011f32:	62b8      	str	r0, [r7, #40]	; 0x28
 8011f34:	e013      	b.n	8011f5e <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8011f36:	68fb      	ldr	r3, [r7, #12]
 8011f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d007      	beq.n	8011f4e <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8011f3e:	68fb      	ldr	r3, [r7, #12]
 8011f40:	699b      	ldr	r3, [r3, #24]
 8011f42:	4619      	mov	r1, r3
 8011f44:	68f8      	ldr	r0, [r7, #12]
 8011f46:	f7fe fdb1 	bl	8010aac <clmt_clust>
 8011f4a:	62b8      	str	r0, [r7, #40]	; 0x28
 8011f4c:	e007      	b.n	8011f5e <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8011f4e:	68fa      	ldr	r2, [r7, #12]
 8011f50:	68fb      	ldr	r3, [r7, #12]
 8011f52:	69db      	ldr	r3, [r3, #28]
 8011f54:	4619      	mov	r1, r3
 8011f56:	4610      	mov	r0, r2
 8011f58:	f7fe fd10 	bl	801097c <create_chain>
 8011f5c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	f000 80f2 	beq.w	801214a <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f68:	2b01      	cmp	r3, #1
 8011f6a:	d104      	bne.n	8011f76 <f_write+0xfc>
 8011f6c:	68fb      	ldr	r3, [r7, #12]
 8011f6e:	2202      	movs	r2, #2
 8011f70:	755a      	strb	r2, [r3, #21]
 8011f72:	2302      	movs	r3, #2
 8011f74:	e0f2      	b.n	801215c <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f7c:	d104      	bne.n	8011f88 <f_write+0x10e>
 8011f7e:	68fb      	ldr	r3, [r7, #12]
 8011f80:	2201      	movs	r2, #1
 8011f82:	755a      	strb	r2, [r3, #21]
 8011f84:	2301      	movs	r3, #1
 8011f86:	e0e9      	b.n	801215c <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8011f88:	68fb      	ldr	r3, [r7, #12]
 8011f8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011f8c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8011f8e:	68fb      	ldr	r3, [r7, #12]
 8011f90:	689b      	ldr	r3, [r3, #8]
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d102      	bne.n	8011f9c <f_write+0x122>
 8011f96:	68fb      	ldr	r3, [r7, #12]
 8011f98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011f9a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8011f9c:	68fb      	ldr	r3, [r7, #12]
 8011f9e:	7d1b      	ldrb	r3, [r3, #20]
 8011fa0:	b25b      	sxtb	r3, r3
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	da18      	bge.n	8011fd8 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011fa6:	693b      	ldr	r3, [r7, #16]
 8011fa8:	7858      	ldrb	r0, [r3, #1]
 8011faa:	68fb      	ldr	r3, [r7, #12]
 8011fac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011fb0:	68fb      	ldr	r3, [r7, #12]
 8011fb2:	6a1a      	ldr	r2, [r3, #32]
 8011fb4:	2301      	movs	r3, #1
 8011fb6:	f7fd ff47 	bl	800fe48 <disk_write>
 8011fba:	4603      	mov	r3, r0
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d004      	beq.n	8011fca <f_write+0x150>
 8011fc0:	68fb      	ldr	r3, [r7, #12]
 8011fc2:	2201      	movs	r2, #1
 8011fc4:	755a      	strb	r2, [r3, #21]
 8011fc6:	2301      	movs	r3, #1
 8011fc8:	e0c8      	b.n	801215c <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011fca:	68fb      	ldr	r3, [r7, #12]
 8011fcc:	7d1b      	ldrb	r3, [r3, #20]
 8011fce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011fd2:	b2da      	uxtb	r2, r3
 8011fd4:	68fb      	ldr	r3, [r7, #12]
 8011fd6:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8011fd8:	693a      	ldr	r2, [r7, #16]
 8011fda:	68fb      	ldr	r3, [r7, #12]
 8011fdc:	69db      	ldr	r3, [r3, #28]
 8011fde:	4619      	mov	r1, r3
 8011fe0:	4610      	mov	r0, r2
 8011fe2:	f7fe fabb 	bl	801055c <clust2sect>
 8011fe6:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8011fe8:	697b      	ldr	r3, [r7, #20]
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d104      	bne.n	8011ff8 <f_write+0x17e>
 8011fee:	68fb      	ldr	r3, [r7, #12]
 8011ff0:	2202      	movs	r2, #2
 8011ff2:	755a      	strb	r2, [r3, #21]
 8011ff4:	2302      	movs	r3, #2
 8011ff6:	e0b1      	b.n	801215c <f_write+0x2e2>
			sect += csect;
 8011ff8:	697a      	ldr	r2, [r7, #20]
 8011ffa:	69bb      	ldr	r3, [r7, #24]
 8011ffc:	4413      	add	r3, r2
 8011ffe:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	0a5b      	lsrs	r3, r3, #9
 8012004:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8012006:	6a3b      	ldr	r3, [r7, #32]
 8012008:	2b00      	cmp	r3, #0
 801200a:	d03c      	beq.n	8012086 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801200c:	69ba      	ldr	r2, [r7, #24]
 801200e:	6a3b      	ldr	r3, [r7, #32]
 8012010:	4413      	add	r3, r2
 8012012:	693a      	ldr	r2, [r7, #16]
 8012014:	8952      	ldrh	r2, [r2, #10]
 8012016:	4293      	cmp	r3, r2
 8012018:	d905      	bls.n	8012026 <f_write+0x1ac>
					cc = fs->csize - csect;
 801201a:	693b      	ldr	r3, [r7, #16]
 801201c:	895b      	ldrh	r3, [r3, #10]
 801201e:	461a      	mov	r2, r3
 8012020:	69bb      	ldr	r3, [r7, #24]
 8012022:	1ad3      	subs	r3, r2, r3
 8012024:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012026:	693b      	ldr	r3, [r7, #16]
 8012028:	7858      	ldrb	r0, [r3, #1]
 801202a:	6a3b      	ldr	r3, [r7, #32]
 801202c:	697a      	ldr	r2, [r7, #20]
 801202e:	69f9      	ldr	r1, [r7, #28]
 8012030:	f7fd ff0a 	bl	800fe48 <disk_write>
 8012034:	4603      	mov	r3, r0
 8012036:	2b00      	cmp	r3, #0
 8012038:	d004      	beq.n	8012044 <f_write+0x1ca>
 801203a:	68fb      	ldr	r3, [r7, #12]
 801203c:	2201      	movs	r2, #1
 801203e:	755a      	strb	r2, [r3, #21]
 8012040:	2301      	movs	r3, #1
 8012042:	e08b      	b.n	801215c <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8012044:	68fb      	ldr	r3, [r7, #12]
 8012046:	6a1a      	ldr	r2, [r3, #32]
 8012048:	697b      	ldr	r3, [r7, #20]
 801204a:	1ad3      	subs	r3, r2, r3
 801204c:	6a3a      	ldr	r2, [r7, #32]
 801204e:	429a      	cmp	r2, r3
 8012050:	d915      	bls.n	801207e <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8012052:	68fb      	ldr	r3, [r7, #12]
 8012054:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8012058:	68fb      	ldr	r3, [r7, #12]
 801205a:	6a1a      	ldr	r2, [r3, #32]
 801205c:	697b      	ldr	r3, [r7, #20]
 801205e:	1ad3      	subs	r3, r2, r3
 8012060:	025b      	lsls	r3, r3, #9
 8012062:	69fa      	ldr	r2, [r7, #28]
 8012064:	4413      	add	r3, r2
 8012066:	f44f 7200 	mov.w	r2, #512	; 0x200
 801206a:	4619      	mov	r1, r3
 801206c:	f7fd ffac 	bl	800ffc8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8012070:	68fb      	ldr	r3, [r7, #12]
 8012072:	7d1b      	ldrb	r3, [r3, #20]
 8012074:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012078:	b2da      	uxtb	r2, r3
 801207a:	68fb      	ldr	r3, [r7, #12]
 801207c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801207e:	6a3b      	ldr	r3, [r7, #32]
 8012080:	025b      	lsls	r3, r3, #9
 8012082:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8012084:	e03f      	b.n	8012106 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8012086:	68fb      	ldr	r3, [r7, #12]
 8012088:	6a1b      	ldr	r3, [r3, #32]
 801208a:	697a      	ldr	r2, [r7, #20]
 801208c:	429a      	cmp	r2, r3
 801208e:	d016      	beq.n	80120be <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8012090:	68fb      	ldr	r3, [r7, #12]
 8012092:	699a      	ldr	r2, [r3, #24]
 8012094:	68fb      	ldr	r3, [r7, #12]
 8012096:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8012098:	429a      	cmp	r2, r3
 801209a:	d210      	bcs.n	80120be <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801209c:	693b      	ldr	r3, [r7, #16]
 801209e:	7858      	ldrb	r0, [r3, #1]
 80120a0:	68fb      	ldr	r3, [r7, #12]
 80120a2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80120a6:	2301      	movs	r3, #1
 80120a8:	697a      	ldr	r2, [r7, #20]
 80120aa:	f7fd fead 	bl	800fe08 <disk_read>
 80120ae:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	d004      	beq.n	80120be <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80120b4:	68fb      	ldr	r3, [r7, #12]
 80120b6:	2201      	movs	r2, #1
 80120b8:	755a      	strb	r2, [r3, #21]
 80120ba:	2301      	movs	r3, #1
 80120bc:	e04e      	b.n	801215c <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80120be:	68fb      	ldr	r3, [r7, #12]
 80120c0:	697a      	ldr	r2, [r7, #20]
 80120c2:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80120c4:	68fb      	ldr	r3, [r7, #12]
 80120c6:	699b      	ldr	r3, [r3, #24]
 80120c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80120cc:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80120d0:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80120d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	429a      	cmp	r2, r3
 80120d8:	d901      	bls.n	80120de <f_write+0x264>
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80120de:	68fb      	ldr	r3, [r7, #12]
 80120e0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80120e4:	68fb      	ldr	r3, [r7, #12]
 80120e6:	699b      	ldr	r3, [r3, #24]
 80120e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80120ec:	4413      	add	r3, r2
 80120ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80120f0:	69f9      	ldr	r1, [r7, #28]
 80120f2:	4618      	mov	r0, r3
 80120f4:	f7fd ff68 	bl	800ffc8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80120f8:	68fb      	ldr	r3, [r7, #12]
 80120fa:	7d1b      	ldrb	r3, [r3, #20]
 80120fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8012100:	b2da      	uxtb	r2, r3
 8012102:	68fb      	ldr	r3, [r7, #12]
 8012104:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8012106:	69fa      	ldr	r2, [r7, #28]
 8012108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801210a:	4413      	add	r3, r2
 801210c:	61fb      	str	r3, [r7, #28]
 801210e:	68fb      	ldr	r3, [r7, #12]
 8012110:	699a      	ldr	r2, [r3, #24]
 8012112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012114:	441a      	add	r2, r3
 8012116:	68fb      	ldr	r3, [r7, #12]
 8012118:	619a      	str	r2, [r3, #24]
 801211a:	68fb      	ldr	r3, [r7, #12]
 801211c:	68da      	ldr	r2, [r3, #12]
 801211e:	68fb      	ldr	r3, [r7, #12]
 8012120:	699b      	ldr	r3, [r3, #24]
 8012122:	429a      	cmp	r2, r3
 8012124:	bf38      	it	cc
 8012126:	461a      	movcc	r2, r3
 8012128:	68fb      	ldr	r3, [r7, #12]
 801212a:	60da      	str	r2, [r3, #12]
 801212c:	683b      	ldr	r3, [r7, #0]
 801212e:	681a      	ldr	r2, [r3, #0]
 8012130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012132:	441a      	add	r2, r3
 8012134:	683b      	ldr	r3, [r7, #0]
 8012136:	601a      	str	r2, [r3, #0]
 8012138:	687a      	ldr	r2, [r7, #4]
 801213a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801213c:	1ad3      	subs	r3, r2, r3
 801213e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	2b00      	cmp	r3, #0
 8012144:	f47f aed4 	bne.w	8011ef0 <f_write+0x76>
 8012148:	e000      	b.n	801214c <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801214a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801214c:	68fb      	ldr	r3, [r7, #12]
 801214e:	7d1b      	ldrb	r3, [r3, #20]
 8012150:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012154:	b2da      	uxtb	r2, r3
 8012156:	68fb      	ldr	r3, [r7, #12]
 8012158:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801215a:	2300      	movs	r3, #0
}
 801215c:	4618      	mov	r0, r3
 801215e:	3730      	adds	r7, #48	; 0x30
 8012160:	46bd      	mov	sp, r7
 8012162:	bd80      	pop	{r7, pc}

08012164 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8012164:	b580      	push	{r7, lr}
 8012166:	b086      	sub	sp, #24
 8012168:	af00      	add	r7, sp, #0
 801216a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	f107 0208 	add.w	r2, r7, #8
 8012172:	4611      	mov	r1, r2
 8012174:	4618      	mov	r0, r3
 8012176:	f7ff fb07 	bl	8011788 <validate>
 801217a:	4603      	mov	r3, r0
 801217c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801217e:	7dfb      	ldrb	r3, [r7, #23]
 8012180:	2b00      	cmp	r3, #0
 8012182:	d168      	bne.n	8012256 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	7d1b      	ldrb	r3, [r3, #20]
 8012188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801218c:	2b00      	cmp	r3, #0
 801218e:	d062      	beq.n	8012256 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	7d1b      	ldrb	r3, [r3, #20]
 8012194:	b25b      	sxtb	r3, r3
 8012196:	2b00      	cmp	r3, #0
 8012198:	da15      	bge.n	80121c6 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801219a:	68bb      	ldr	r3, [r7, #8]
 801219c:	7858      	ldrb	r0, [r3, #1]
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	6a1a      	ldr	r2, [r3, #32]
 80121a8:	2301      	movs	r3, #1
 80121aa:	f7fd fe4d 	bl	800fe48 <disk_write>
 80121ae:	4603      	mov	r3, r0
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d001      	beq.n	80121b8 <f_sync+0x54>
 80121b4:	2301      	movs	r3, #1
 80121b6:	e04f      	b.n	8012258 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	7d1b      	ldrb	r3, [r3, #20]
 80121bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80121c0:	b2da      	uxtb	r2, r3
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80121c6:	f7fa fda5 	bl	800cd14 <get_fattime>
 80121ca:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80121cc:	68ba      	ldr	r2, [r7, #8]
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121d2:	4619      	mov	r1, r3
 80121d4:	4610      	mov	r0, r2
 80121d6:	f7fe f925 	bl	8010424 <move_window>
 80121da:	4603      	mov	r3, r0
 80121dc:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80121de:	7dfb      	ldrb	r3, [r7, #23]
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d138      	bne.n	8012256 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80121e8:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80121ea:	68fb      	ldr	r3, [r7, #12]
 80121ec:	330b      	adds	r3, #11
 80121ee:	781a      	ldrb	r2, [r3, #0]
 80121f0:	68fb      	ldr	r3, [r7, #12]
 80121f2:	330b      	adds	r3, #11
 80121f4:	f042 0220 	orr.w	r2, r2, #32
 80121f8:	b2d2      	uxtb	r2, r2
 80121fa:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	6818      	ldr	r0, [r3, #0]
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	689b      	ldr	r3, [r3, #8]
 8012204:	461a      	mov	r2, r3
 8012206:	68f9      	ldr	r1, [r7, #12]
 8012208:	f7fe fe2a 	bl	8010e60 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801220c:	68fb      	ldr	r3, [r7, #12]
 801220e:	f103 021c 	add.w	r2, r3, #28
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	68db      	ldr	r3, [r3, #12]
 8012216:	4619      	mov	r1, r3
 8012218:	4610      	mov	r0, r2
 801221a:	f7fd fea9 	bl	800ff70 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801221e:	68fb      	ldr	r3, [r7, #12]
 8012220:	3316      	adds	r3, #22
 8012222:	6939      	ldr	r1, [r7, #16]
 8012224:	4618      	mov	r0, r3
 8012226:	f7fd fea3 	bl	800ff70 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801222a:	68fb      	ldr	r3, [r7, #12]
 801222c:	3312      	adds	r3, #18
 801222e:	2100      	movs	r1, #0
 8012230:	4618      	mov	r0, r3
 8012232:	f7fd fe82 	bl	800ff3a <st_word>
					fs->wflag = 1;
 8012236:	68bb      	ldr	r3, [r7, #8]
 8012238:	2201      	movs	r2, #1
 801223a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801223c:	68bb      	ldr	r3, [r7, #8]
 801223e:	4618      	mov	r0, r3
 8012240:	f7fe f91e 	bl	8010480 <sync_fs>
 8012244:	4603      	mov	r3, r0
 8012246:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	7d1b      	ldrb	r3, [r3, #20]
 801224c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012250:	b2da      	uxtb	r2, r3
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8012256:	7dfb      	ldrb	r3, [r7, #23]
}
 8012258:	4618      	mov	r0, r3
 801225a:	3718      	adds	r7, #24
 801225c:	46bd      	mov	sp, r7
 801225e:	bd80      	pop	{r7, pc}

08012260 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8012260:	b580      	push	{r7, lr}
 8012262:	b084      	sub	sp, #16
 8012264:	af00      	add	r7, sp, #0
 8012266:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8012268:	6878      	ldr	r0, [r7, #4]
 801226a:	f7ff ff7b 	bl	8012164 <f_sync>
 801226e:	4603      	mov	r3, r0
 8012270:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8012272:	7bfb      	ldrb	r3, [r7, #15]
 8012274:	2b00      	cmp	r3, #0
 8012276:	d118      	bne.n	80122aa <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	f107 0208 	add.w	r2, r7, #8
 801227e:	4611      	mov	r1, r2
 8012280:	4618      	mov	r0, r3
 8012282:	f7ff fa81 	bl	8011788 <validate>
 8012286:	4603      	mov	r3, r0
 8012288:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801228a:	7bfb      	ldrb	r3, [r7, #15]
 801228c:	2b00      	cmp	r3, #0
 801228e:	d10c      	bne.n	80122aa <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	691b      	ldr	r3, [r3, #16]
 8012294:	4618      	mov	r0, r3
 8012296:	f7fe f821 	bl	80102dc <dec_lock>
 801229a:	4603      	mov	r3, r0
 801229c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801229e:	7bfb      	ldrb	r3, [r7, #15]
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	d102      	bne.n	80122aa <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	2200      	movs	r2, #0
 80122a8:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80122aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80122ac:	4618      	mov	r0, r3
 80122ae:	3710      	adds	r7, #16
 80122b0:	46bd      	mov	sp, r7
 80122b2:	bd80      	pop	{r7, pc}

080122b4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80122b4:	b480      	push	{r7}
 80122b6:	b087      	sub	sp, #28
 80122b8:	af00      	add	r7, sp, #0
 80122ba:	60f8      	str	r0, [r7, #12]
 80122bc:	60b9      	str	r1, [r7, #8]
 80122be:	4613      	mov	r3, r2
 80122c0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80122c2:	2301      	movs	r3, #1
 80122c4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80122c6:	2300      	movs	r3, #0
 80122c8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80122ca:	4b1f      	ldr	r3, [pc, #124]	; (8012348 <FATFS_LinkDriverEx+0x94>)
 80122cc:	7a5b      	ldrb	r3, [r3, #9]
 80122ce:	b2db      	uxtb	r3, r3
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d131      	bne.n	8012338 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80122d4:	4b1c      	ldr	r3, [pc, #112]	; (8012348 <FATFS_LinkDriverEx+0x94>)
 80122d6:	7a5b      	ldrb	r3, [r3, #9]
 80122d8:	b2db      	uxtb	r3, r3
 80122da:	461a      	mov	r2, r3
 80122dc:	4b1a      	ldr	r3, [pc, #104]	; (8012348 <FATFS_LinkDriverEx+0x94>)
 80122de:	2100      	movs	r1, #0
 80122e0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80122e2:	4b19      	ldr	r3, [pc, #100]	; (8012348 <FATFS_LinkDriverEx+0x94>)
 80122e4:	7a5b      	ldrb	r3, [r3, #9]
 80122e6:	b2db      	uxtb	r3, r3
 80122e8:	4a17      	ldr	r2, [pc, #92]	; (8012348 <FATFS_LinkDriverEx+0x94>)
 80122ea:	009b      	lsls	r3, r3, #2
 80122ec:	4413      	add	r3, r2
 80122ee:	68fa      	ldr	r2, [r7, #12]
 80122f0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80122f2:	4b15      	ldr	r3, [pc, #84]	; (8012348 <FATFS_LinkDriverEx+0x94>)
 80122f4:	7a5b      	ldrb	r3, [r3, #9]
 80122f6:	b2db      	uxtb	r3, r3
 80122f8:	461a      	mov	r2, r3
 80122fa:	4b13      	ldr	r3, [pc, #76]	; (8012348 <FATFS_LinkDriverEx+0x94>)
 80122fc:	4413      	add	r3, r2
 80122fe:	79fa      	ldrb	r2, [r7, #7]
 8012300:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8012302:	4b11      	ldr	r3, [pc, #68]	; (8012348 <FATFS_LinkDriverEx+0x94>)
 8012304:	7a5b      	ldrb	r3, [r3, #9]
 8012306:	b2db      	uxtb	r3, r3
 8012308:	1c5a      	adds	r2, r3, #1
 801230a:	b2d1      	uxtb	r1, r2
 801230c:	4a0e      	ldr	r2, [pc, #56]	; (8012348 <FATFS_LinkDriverEx+0x94>)
 801230e:	7251      	strb	r1, [r2, #9]
 8012310:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8012312:	7dbb      	ldrb	r3, [r7, #22]
 8012314:	3330      	adds	r3, #48	; 0x30
 8012316:	b2da      	uxtb	r2, r3
 8012318:	68bb      	ldr	r3, [r7, #8]
 801231a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801231c:	68bb      	ldr	r3, [r7, #8]
 801231e:	3301      	adds	r3, #1
 8012320:	223a      	movs	r2, #58	; 0x3a
 8012322:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8012324:	68bb      	ldr	r3, [r7, #8]
 8012326:	3302      	adds	r3, #2
 8012328:	222f      	movs	r2, #47	; 0x2f
 801232a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801232c:	68bb      	ldr	r3, [r7, #8]
 801232e:	3303      	adds	r3, #3
 8012330:	2200      	movs	r2, #0
 8012332:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8012334:	2300      	movs	r3, #0
 8012336:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8012338:	7dfb      	ldrb	r3, [r7, #23]
}
 801233a:	4618      	mov	r0, r3
 801233c:	371c      	adds	r7, #28
 801233e:	46bd      	mov	sp, r7
 8012340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012344:	4770      	bx	lr
 8012346:	bf00      	nop
 8012348:	2400a224 	.word	0x2400a224

0801234c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801234c:	b580      	push	{r7, lr}
 801234e:	b082      	sub	sp, #8
 8012350:	af00      	add	r7, sp, #0
 8012352:	6078      	str	r0, [r7, #4]
 8012354:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8012356:	2200      	movs	r2, #0
 8012358:	6839      	ldr	r1, [r7, #0]
 801235a:	6878      	ldr	r0, [r7, #4]
 801235c:	f7ff ffaa 	bl	80122b4 <FATFS_LinkDriverEx>
 8012360:	4603      	mov	r3, r0
}
 8012362:	4618      	mov	r0, r3
 8012364:	3708      	adds	r7, #8
 8012366:	46bd      	mov	sp, r7
 8012368:	bd80      	pop	{r7, pc}
	...

0801236c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801236c:	b580      	push	{r7, lr}
 801236e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8012370:	2200      	movs	r2, #0
 8012372:	4913      	ldr	r1, [pc, #76]	; (80123c0 <MX_USB_DEVICE_Init+0x54>)
 8012374:	4813      	ldr	r0, [pc, #76]	; (80123c4 <MX_USB_DEVICE_Init+0x58>)
 8012376:	f7fc fc20 	bl	800ebba <USBD_Init>
 801237a:	4603      	mov	r3, r0
 801237c:	2b00      	cmp	r3, #0
 801237e:	d001      	beq.n	8012384 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8012380:	f7ee fe5a 	bl	8001038 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8012384:	4910      	ldr	r1, [pc, #64]	; (80123c8 <MX_USB_DEVICE_Init+0x5c>)
 8012386:	480f      	ldr	r0, [pc, #60]	; (80123c4 <MX_USB_DEVICE_Init+0x58>)
 8012388:	f7fc fc4d 	bl	800ec26 <USBD_RegisterClass>
 801238c:	4603      	mov	r3, r0
 801238e:	2b00      	cmp	r3, #0
 8012390:	d001      	beq.n	8012396 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8012392:	f7ee fe51 	bl	8001038 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8012396:	490d      	ldr	r1, [pc, #52]	; (80123cc <MX_USB_DEVICE_Init+0x60>)
 8012398:	480a      	ldr	r0, [pc, #40]	; (80123c4 <MX_USB_DEVICE_Init+0x58>)
 801239a:	f7fa fff7 	bl	800d38c <USBD_MSC_RegisterStorage>
 801239e:	4603      	mov	r3, r0
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d001      	beq.n	80123a8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80123a4:	f7ee fe48 	bl	8001038 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80123a8:	4806      	ldr	r0, [pc, #24]	; (80123c4 <MX_USB_DEVICE_Init+0x58>)
 80123aa:	f7fc fc5d 	bl	800ec68 <USBD_Start>
 80123ae:	4603      	mov	r3, r0
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d001      	beq.n	80123b8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80123b4:	f7ee fe40 	bl	8001038 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 80123b8:	f7f2 ffa6 	bl	8005308 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80123bc:	bf00      	nop
 80123be:	bd80      	pop	{r7, pc}
 80123c0:	240000f8 	.word	0x240000f8
 80123c4:	2400b170 	.word	0x2400b170
 80123c8:	24000010 	.word	0x24000010
 80123cc:	24000148 	.word	0x24000148

080123d0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80123d0:	b480      	push	{r7}
 80123d2:	b083      	sub	sp, #12
 80123d4:	af00      	add	r7, sp, #0
 80123d6:	4603      	mov	r3, r0
 80123d8:	6039      	str	r1, [r7, #0]
 80123da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80123dc:	683b      	ldr	r3, [r7, #0]
 80123de:	2212      	movs	r2, #18
 80123e0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80123e2:	4b03      	ldr	r3, [pc, #12]	; (80123f0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80123e4:	4618      	mov	r0, r3
 80123e6:	370c      	adds	r7, #12
 80123e8:	46bd      	mov	sp, r7
 80123ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123ee:	4770      	bx	lr
 80123f0:	24000114 	.word	0x24000114

080123f4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80123f4:	b480      	push	{r7}
 80123f6:	b083      	sub	sp, #12
 80123f8:	af00      	add	r7, sp, #0
 80123fa:	4603      	mov	r3, r0
 80123fc:	6039      	str	r1, [r7, #0]
 80123fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8012400:	683b      	ldr	r3, [r7, #0]
 8012402:	2204      	movs	r2, #4
 8012404:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8012406:	4b03      	ldr	r3, [pc, #12]	; (8012414 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8012408:	4618      	mov	r0, r3
 801240a:	370c      	adds	r7, #12
 801240c:	46bd      	mov	sp, r7
 801240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012412:	4770      	bx	lr
 8012414:	24000128 	.word	0x24000128

08012418 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012418:	b580      	push	{r7, lr}
 801241a:	b082      	sub	sp, #8
 801241c:	af00      	add	r7, sp, #0
 801241e:	4603      	mov	r3, r0
 8012420:	6039      	str	r1, [r7, #0]
 8012422:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012424:	79fb      	ldrb	r3, [r7, #7]
 8012426:	2b00      	cmp	r3, #0
 8012428:	d105      	bne.n	8012436 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801242a:	683a      	ldr	r2, [r7, #0]
 801242c:	4907      	ldr	r1, [pc, #28]	; (801244c <USBD_FS_ProductStrDescriptor+0x34>)
 801242e:	4808      	ldr	r0, [pc, #32]	; (8012450 <USBD_FS_ProductStrDescriptor+0x38>)
 8012430:	f7fd fbe7 	bl	800fc02 <USBD_GetString>
 8012434:	e004      	b.n	8012440 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8012436:	683a      	ldr	r2, [r7, #0]
 8012438:	4904      	ldr	r1, [pc, #16]	; (801244c <USBD_FS_ProductStrDescriptor+0x34>)
 801243a:	4805      	ldr	r0, [pc, #20]	; (8012450 <USBD_FS_ProductStrDescriptor+0x38>)
 801243c:	f7fd fbe1 	bl	800fc02 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012440:	4b02      	ldr	r3, [pc, #8]	; (801244c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8012442:	4618      	mov	r0, r3
 8012444:	3708      	adds	r7, #8
 8012446:	46bd      	mov	sp, r7
 8012448:	bd80      	pop	{r7, pc}
 801244a:	bf00      	nop
 801244c:	2400b440 	.word	0x2400b440
 8012450:	08013734 	.word	0x08013734

08012454 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012454:	b580      	push	{r7, lr}
 8012456:	b082      	sub	sp, #8
 8012458:	af00      	add	r7, sp, #0
 801245a:	4603      	mov	r3, r0
 801245c:	6039      	str	r1, [r7, #0]
 801245e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8012460:	683a      	ldr	r2, [r7, #0]
 8012462:	4904      	ldr	r1, [pc, #16]	; (8012474 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8012464:	4804      	ldr	r0, [pc, #16]	; (8012478 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8012466:	f7fd fbcc 	bl	800fc02 <USBD_GetString>
  return USBD_StrDesc;
 801246a:	4b02      	ldr	r3, [pc, #8]	; (8012474 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801246c:	4618      	mov	r0, r3
 801246e:	3708      	adds	r7, #8
 8012470:	46bd      	mov	sp, r7
 8012472:	bd80      	pop	{r7, pc}
 8012474:	2400b440 	.word	0x2400b440
 8012478:	08013748 	.word	0x08013748

0801247c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801247c:	b580      	push	{r7, lr}
 801247e:	b082      	sub	sp, #8
 8012480:	af00      	add	r7, sp, #0
 8012482:	4603      	mov	r3, r0
 8012484:	6039      	str	r1, [r7, #0]
 8012486:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8012488:	683b      	ldr	r3, [r7, #0]
 801248a:	221a      	movs	r2, #26
 801248c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801248e:	f000 f843 	bl	8012518 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8012492:	4b02      	ldr	r3, [pc, #8]	; (801249c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8012494:	4618      	mov	r0, r3
 8012496:	3708      	adds	r7, #8
 8012498:	46bd      	mov	sp, r7
 801249a:	bd80      	pop	{r7, pc}
 801249c:	2400012c 	.word	0x2400012c

080124a0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80124a0:	b580      	push	{r7, lr}
 80124a2:	b082      	sub	sp, #8
 80124a4:	af00      	add	r7, sp, #0
 80124a6:	4603      	mov	r3, r0
 80124a8:	6039      	str	r1, [r7, #0]
 80124aa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80124ac:	79fb      	ldrb	r3, [r7, #7]
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d105      	bne.n	80124be <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80124b2:	683a      	ldr	r2, [r7, #0]
 80124b4:	4907      	ldr	r1, [pc, #28]	; (80124d4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80124b6:	4808      	ldr	r0, [pc, #32]	; (80124d8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80124b8:	f7fd fba3 	bl	800fc02 <USBD_GetString>
 80124bc:	e004      	b.n	80124c8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80124be:	683a      	ldr	r2, [r7, #0]
 80124c0:	4904      	ldr	r1, [pc, #16]	; (80124d4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80124c2:	4805      	ldr	r0, [pc, #20]	; (80124d8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80124c4:	f7fd fb9d 	bl	800fc02 <USBD_GetString>
  }
  return USBD_StrDesc;
 80124c8:	4b02      	ldr	r3, [pc, #8]	; (80124d4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80124ca:	4618      	mov	r0, r3
 80124cc:	3708      	adds	r7, #8
 80124ce:	46bd      	mov	sp, r7
 80124d0:	bd80      	pop	{r7, pc}
 80124d2:	bf00      	nop
 80124d4:	2400b440 	.word	0x2400b440
 80124d8:	0801375c 	.word	0x0801375c

080124dc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80124dc:	b580      	push	{r7, lr}
 80124de:	b082      	sub	sp, #8
 80124e0:	af00      	add	r7, sp, #0
 80124e2:	4603      	mov	r3, r0
 80124e4:	6039      	str	r1, [r7, #0]
 80124e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80124e8:	79fb      	ldrb	r3, [r7, #7]
 80124ea:	2b00      	cmp	r3, #0
 80124ec:	d105      	bne.n	80124fa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80124ee:	683a      	ldr	r2, [r7, #0]
 80124f0:	4907      	ldr	r1, [pc, #28]	; (8012510 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80124f2:	4808      	ldr	r0, [pc, #32]	; (8012514 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80124f4:	f7fd fb85 	bl	800fc02 <USBD_GetString>
 80124f8:	e004      	b.n	8012504 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80124fa:	683a      	ldr	r2, [r7, #0]
 80124fc:	4904      	ldr	r1, [pc, #16]	; (8012510 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80124fe:	4805      	ldr	r0, [pc, #20]	; (8012514 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012500:	f7fd fb7f 	bl	800fc02 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012504:	4b02      	ldr	r3, [pc, #8]	; (8012510 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8012506:	4618      	mov	r0, r3
 8012508:	3708      	adds	r7, #8
 801250a:	46bd      	mov	sp, r7
 801250c:	bd80      	pop	{r7, pc}
 801250e:	bf00      	nop
 8012510:	2400b440 	.word	0x2400b440
 8012514:	08013768 	.word	0x08013768

08012518 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8012518:	b580      	push	{r7, lr}
 801251a:	b084      	sub	sp, #16
 801251c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801251e:	4b0f      	ldr	r3, [pc, #60]	; (801255c <Get_SerialNum+0x44>)
 8012520:	681b      	ldr	r3, [r3, #0]
 8012522:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8012524:	4b0e      	ldr	r3, [pc, #56]	; (8012560 <Get_SerialNum+0x48>)
 8012526:	681b      	ldr	r3, [r3, #0]
 8012528:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801252a:	4b0e      	ldr	r3, [pc, #56]	; (8012564 <Get_SerialNum+0x4c>)
 801252c:	681b      	ldr	r3, [r3, #0]
 801252e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8012530:	68fa      	ldr	r2, [r7, #12]
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	4413      	add	r3, r2
 8012536:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8012538:	68fb      	ldr	r3, [r7, #12]
 801253a:	2b00      	cmp	r3, #0
 801253c:	d009      	beq.n	8012552 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801253e:	2208      	movs	r2, #8
 8012540:	4909      	ldr	r1, [pc, #36]	; (8012568 <Get_SerialNum+0x50>)
 8012542:	68f8      	ldr	r0, [r7, #12]
 8012544:	f000 f814 	bl	8012570 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8012548:	2204      	movs	r2, #4
 801254a:	4908      	ldr	r1, [pc, #32]	; (801256c <Get_SerialNum+0x54>)
 801254c:	68b8      	ldr	r0, [r7, #8]
 801254e:	f000 f80f 	bl	8012570 <IntToUnicode>
  }
}
 8012552:	bf00      	nop
 8012554:	3710      	adds	r7, #16
 8012556:	46bd      	mov	sp, r7
 8012558:	bd80      	pop	{r7, pc}
 801255a:	bf00      	nop
 801255c:	1ff1e800 	.word	0x1ff1e800
 8012560:	1ff1e804 	.word	0x1ff1e804
 8012564:	1ff1e808 	.word	0x1ff1e808
 8012568:	2400012e 	.word	0x2400012e
 801256c:	2400013e 	.word	0x2400013e

08012570 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8012570:	b480      	push	{r7}
 8012572:	b087      	sub	sp, #28
 8012574:	af00      	add	r7, sp, #0
 8012576:	60f8      	str	r0, [r7, #12]
 8012578:	60b9      	str	r1, [r7, #8]
 801257a:	4613      	mov	r3, r2
 801257c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801257e:	2300      	movs	r3, #0
 8012580:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8012582:	2300      	movs	r3, #0
 8012584:	75fb      	strb	r3, [r7, #23]
 8012586:	e027      	b.n	80125d8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8012588:	68fb      	ldr	r3, [r7, #12]
 801258a:	0f1b      	lsrs	r3, r3, #28
 801258c:	2b09      	cmp	r3, #9
 801258e:	d80b      	bhi.n	80125a8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8012590:	68fb      	ldr	r3, [r7, #12]
 8012592:	0f1b      	lsrs	r3, r3, #28
 8012594:	b2da      	uxtb	r2, r3
 8012596:	7dfb      	ldrb	r3, [r7, #23]
 8012598:	005b      	lsls	r3, r3, #1
 801259a:	4619      	mov	r1, r3
 801259c:	68bb      	ldr	r3, [r7, #8]
 801259e:	440b      	add	r3, r1
 80125a0:	3230      	adds	r2, #48	; 0x30
 80125a2:	b2d2      	uxtb	r2, r2
 80125a4:	701a      	strb	r2, [r3, #0]
 80125a6:	e00a      	b.n	80125be <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80125a8:	68fb      	ldr	r3, [r7, #12]
 80125aa:	0f1b      	lsrs	r3, r3, #28
 80125ac:	b2da      	uxtb	r2, r3
 80125ae:	7dfb      	ldrb	r3, [r7, #23]
 80125b0:	005b      	lsls	r3, r3, #1
 80125b2:	4619      	mov	r1, r3
 80125b4:	68bb      	ldr	r3, [r7, #8]
 80125b6:	440b      	add	r3, r1
 80125b8:	3237      	adds	r2, #55	; 0x37
 80125ba:	b2d2      	uxtb	r2, r2
 80125bc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80125be:	68fb      	ldr	r3, [r7, #12]
 80125c0:	011b      	lsls	r3, r3, #4
 80125c2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80125c4:	7dfb      	ldrb	r3, [r7, #23]
 80125c6:	005b      	lsls	r3, r3, #1
 80125c8:	3301      	adds	r3, #1
 80125ca:	68ba      	ldr	r2, [r7, #8]
 80125cc:	4413      	add	r3, r2
 80125ce:	2200      	movs	r2, #0
 80125d0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80125d2:	7dfb      	ldrb	r3, [r7, #23]
 80125d4:	3301      	adds	r3, #1
 80125d6:	75fb      	strb	r3, [r7, #23]
 80125d8:	7dfa      	ldrb	r2, [r7, #23]
 80125da:	79fb      	ldrb	r3, [r7, #7]
 80125dc:	429a      	cmp	r2, r3
 80125de:	d3d3      	bcc.n	8012588 <IntToUnicode+0x18>
  }
}
 80125e0:	bf00      	nop
 80125e2:	371c      	adds	r7, #28
 80125e4:	46bd      	mov	sp, r7
 80125e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ea:	4770      	bx	lr

080125ec <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 80125ec:	b480      	push	{r7}
 80125ee:	b083      	sub	sp, #12
 80125f0:	af00      	add	r7, sp, #0
 80125f2:	4603      	mov	r3, r0
 80125f4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 80125f6:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 80125f8:	4618      	mov	r0, r3
 80125fa:	370c      	adds	r7, #12
 80125fc:	46bd      	mov	sp, r7
 80125fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012602:	4770      	bx	lr

08012604 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8012604:	b580      	push	{r7, lr}
 8012606:	b08e      	sub	sp, #56	; 0x38
 8012608:	af00      	add	r7, sp, #0
 801260a:	4603      	mov	r3, r0
 801260c:	60b9      	str	r1, [r7, #8]
 801260e:	607a      	str	r2, [r7, #4]
 8012610:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
	HAL_SD_CardInfoTypeDef info;
	  int8_t ret = -1;
 8012612:	23ff      	movs	r3, #255	; 0xff
 8012614:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	  HAL_SD_GetCardInfo(&hsd1, &info);
 8012618:	f107 0310 	add.w	r3, r7, #16
 801261c:	4619      	mov	r1, r3
 801261e:	480a      	ldr	r0, [pc, #40]	; (8012648 <STORAGE_GetCapacity_FS+0x44>)
 8012620:	f7f6 fba8 	bl	8008d74 <HAL_SD_GetCardInfo>

	  *block_num =  info.LogBlockNbr  - 1;
 8012624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012626:	1e5a      	subs	r2, r3, #1
 8012628:	68bb      	ldr	r3, [r7, #8]
 801262a:	601a      	str	r2, [r3, #0]
	  *block_size = info.LogBlockSize;
 801262c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801262e:	b29a      	uxth	r2, r3
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	801a      	strh	r2, [r3, #0]
	  ret = 0;
 8012634:	2300      	movs	r3, #0
 8012636:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  return ret;
 801263a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
  /* USER CODE END 3 */
}
 801263e:	4618      	mov	r0, r3
 8012640:	3738      	adds	r7, #56	; 0x38
 8012642:	46bd      	mov	sp, r7
 8012644:	bd80      	pop	{r7, pc}
 8012646:	bf00      	nop
 8012648:	2400a56c 	.word	0x2400a56c

0801264c <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 801264c:	b480      	push	{r7}
 801264e:	b083      	sub	sp, #12
 8012650:	af00      	add	r7, sp, #0
 8012652:	4603      	mov	r3, r0
 8012654:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8012656:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8012658:	4618      	mov	r0, r3
 801265a:	370c      	adds	r7, #12
 801265c:	46bd      	mov	sp, r7
 801265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012662:	4770      	bx	lr

08012664 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8012664:	b480      	push	{r7}
 8012666:	b083      	sub	sp, #12
 8012668:	af00      	add	r7, sp, #0
 801266a:	4603      	mov	r3, r0
 801266c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 801266e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8012670:	4618      	mov	r0, r3
 8012672:	370c      	adds	r7, #12
 8012674:	46bd      	mov	sp, r7
 8012676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801267a:	4770      	bx	lr

0801267c <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801267c:	b580      	push	{r7, lr}
 801267e:	b088      	sub	sp, #32
 8012680:	af02      	add	r7, sp, #8
 8012682:	60b9      	str	r1, [r7, #8]
 8012684:	607a      	str	r2, [r7, #4]
 8012686:	461a      	mov	r2, r3
 8012688:	4603      	mov	r3, r0
 801268a:	73fb      	strb	r3, [r7, #15]
 801268c:	4613      	mov	r3, r2
 801268e:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	int8_t ret = -1;
 8012690:	23ff      	movs	r3, #255	; 0xff
 8012692:	75fb      	strb	r3, [r7, #23]

	HAL_SD_ReadBlocks(&hsd1, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8012694:	89ba      	ldrh	r2, [r7, #12]
 8012696:	f04f 33ff 	mov.w	r3, #4294967295
 801269a:	9300      	str	r3, [sp, #0]
 801269c:	4613      	mov	r3, r2
 801269e:	687a      	ldr	r2, [r7, #4]
 80126a0:	68b9      	ldr	r1, [r7, #8]
 80126a2:	4809      	ldr	r0, [pc, #36]	; (80126c8 <STORAGE_Read_FS+0x4c>)
 80126a4:	f7f5 fde8 	bl	8008278 <HAL_SD_ReadBlocks>

	/* Wait until SD card is ready to use for new operation */
	while (HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER){}
 80126a8:	bf00      	nop
 80126aa:	4807      	ldr	r0, [pc, #28]	; (80126c8 <STORAGE_Read_FS+0x4c>)
 80126ac:	f7f6 fc38 	bl	8008f20 <HAL_SD_GetCardState>
 80126b0:	4603      	mov	r3, r0
 80126b2:	2b04      	cmp	r3, #4
 80126b4:	d1f9      	bne.n	80126aa <STORAGE_Read_FS+0x2e>
	ret = 0;
 80126b6:	2300      	movs	r3, #0
 80126b8:	75fb      	strb	r3, [r7, #23]
	return ret;
 80126ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 6 */
}
 80126be:	4618      	mov	r0, r3
 80126c0:	3718      	adds	r7, #24
 80126c2:	46bd      	mov	sp, r7
 80126c4:	bd80      	pop	{r7, pc}
 80126c6:	bf00      	nop
 80126c8:	2400a56c 	.word	0x2400a56c

080126cc <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80126cc:	b580      	push	{r7, lr}
 80126ce:	b088      	sub	sp, #32
 80126d0:	af02      	add	r7, sp, #8
 80126d2:	60b9      	str	r1, [r7, #8]
 80126d4:	607a      	str	r2, [r7, #4]
 80126d6:	461a      	mov	r2, r3
 80126d8:	4603      	mov	r3, r0
 80126da:	73fb      	strb	r3, [r7, #15]
 80126dc:	4613      	mov	r3, r2
 80126de:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	int8_t ret = -1;
 80126e0:	23ff      	movs	r3, #255	; 0xff
 80126e2:	75fb      	strb	r3, [r7, #23]

	HAL_SD_WriteBlocks(&hsd1, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 80126e4:	89ba      	ldrh	r2, [r7, #12]
 80126e6:	f04f 33ff 	mov.w	r3, #4294967295
 80126ea:	9300      	str	r3, [sp, #0]
 80126ec:	4613      	mov	r3, r2
 80126ee:	687a      	ldr	r2, [r7, #4]
 80126f0:	68b9      	ldr	r1, [r7, #8]
 80126f2:	4809      	ldr	r0, [pc, #36]	; (8012718 <STORAGE_Write_FS+0x4c>)
 80126f4:	f7f5 ff4a 	bl	800858c <HAL_SD_WriteBlocks>


	/* Wait until SD card is ready to use for new operation */
	while (HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER){}
 80126f8:	bf00      	nop
 80126fa:	4807      	ldr	r0, [pc, #28]	; (8012718 <STORAGE_Write_FS+0x4c>)
 80126fc:	f7f6 fc10 	bl	8008f20 <HAL_SD_GetCardState>
 8012700:	4603      	mov	r3, r0
 8012702:	2b04      	cmp	r3, #4
 8012704:	d1f9      	bne.n	80126fa <STORAGE_Write_FS+0x2e>
	ret = 0;
 8012706:	2300      	movs	r3, #0
 8012708:	75fb      	strb	r3, [r7, #23]
	return ret;
 801270a:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 7 */
}
 801270e:	4618      	mov	r0, r3
 8012710:	3718      	adds	r7, #24
 8012712:	46bd      	mov	sp, r7
 8012714:	bd80      	pop	{r7, pc}
 8012716:	bf00      	nop
 8012718:	2400a56c 	.word	0x2400a56c

0801271c <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 801271c:	b480      	push	{r7}
 801271e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8012720:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8012722:	4618      	mov	r0, r3
 8012724:	46bd      	mov	sp, r7
 8012726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801272a:	4770      	bx	lr

0801272c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801272c:	b580      	push	{r7, lr}
 801272e:	b08a      	sub	sp, #40	; 0x28
 8012730:	af00      	add	r7, sp, #0
 8012732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012734:	f107 0314 	add.w	r3, r7, #20
 8012738:	2200      	movs	r2, #0
 801273a:	601a      	str	r2, [r3, #0]
 801273c:	605a      	str	r2, [r3, #4]
 801273e:	609a      	str	r2, [r3, #8]
 8012740:	60da      	str	r2, [r3, #12]
 8012742:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	681b      	ldr	r3, [r3, #0]
 8012748:	4a1e      	ldr	r2, [pc, #120]	; (80127c4 <HAL_PCD_MspInit+0x98>)
 801274a:	4293      	cmp	r3, r2
 801274c:	d136      	bne.n	80127bc <HAL_PCD_MspInit+0x90>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801274e:	4b1e      	ldr	r3, [pc, #120]	; (80127c8 <HAL_PCD_MspInit+0x9c>)
 8012750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012754:	4a1c      	ldr	r2, [pc, #112]	; (80127c8 <HAL_PCD_MspInit+0x9c>)
 8012756:	f043 0301 	orr.w	r3, r3, #1
 801275a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801275e:	4b1a      	ldr	r3, [pc, #104]	; (80127c8 <HAL_PCD_MspInit+0x9c>)
 8012760:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012764:	f003 0301 	and.w	r3, r3, #1
 8012768:	613b      	str	r3, [r7, #16]
 801276a:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801276c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8012770:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012772:	2302      	movs	r3, #2
 8012774:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012776:	2300      	movs	r3, #0
 8012778:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801277a:	2300      	movs	r3, #0
 801277c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 801277e:	230a      	movs	r3, #10
 8012780:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012782:	f107 0314 	add.w	r3, r7, #20
 8012786:	4619      	mov	r1, r3
 8012788:	4810      	ldr	r0, [pc, #64]	; (80127cc <HAL_PCD_MspInit+0xa0>)
 801278a:	f7f1 f997 	bl	8003abc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801278e:	4b0e      	ldr	r3, [pc, #56]	; (80127c8 <HAL_PCD_MspInit+0x9c>)
 8012790:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8012794:	4a0c      	ldr	r2, [pc, #48]	; (80127c8 <HAL_PCD_MspInit+0x9c>)
 8012796:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801279a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 801279e:	4b0a      	ldr	r3, [pc, #40]	; (80127c8 <HAL_PCD_MspInit+0x9c>)
 80127a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80127a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80127a8:	60fb      	str	r3, [r7, #12]
 80127aa:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80127ac:	2200      	movs	r2, #0
 80127ae:	2100      	movs	r1, #0
 80127b0:	2065      	movs	r0, #101	; 0x65
 80127b2:	f7ef f924 	bl	80019fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80127b6:	2065      	movs	r0, #101	; 0x65
 80127b8:	f7ef f93b 	bl	8001a32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80127bc:	bf00      	nop
 80127be:	3728      	adds	r7, #40	; 0x28
 80127c0:	46bd      	mov	sp, r7
 80127c2:	bd80      	pop	{r7, pc}
 80127c4:	40080000 	.word	0x40080000
 80127c8:	58024400 	.word	0x58024400
 80127cc:	58020000 	.word	0x58020000

080127d0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80127d0:	b580      	push	{r7, lr}
 80127d2:	b082      	sub	sp, #8
 80127d4:	af00      	add	r7, sp, #0
 80127d6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80127e4:	4619      	mov	r1, r3
 80127e6:	4610      	mov	r0, r2
 80127e8:	f7fc fa89 	bl	800ecfe <USBD_LL_SetupStage>
}
 80127ec:	bf00      	nop
 80127ee:	3708      	adds	r7, #8
 80127f0:	46bd      	mov	sp, r7
 80127f2:	bd80      	pop	{r7, pc}

080127f4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80127f4:	b580      	push	{r7, lr}
 80127f6:	b082      	sub	sp, #8
 80127f8:	af00      	add	r7, sp, #0
 80127fa:	6078      	str	r0, [r7, #4]
 80127fc:	460b      	mov	r3, r1
 80127fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8012806:	78fa      	ldrb	r2, [r7, #3]
 8012808:	6879      	ldr	r1, [r7, #4]
 801280a:	4613      	mov	r3, r2
 801280c:	00db      	lsls	r3, r3, #3
 801280e:	1a9b      	subs	r3, r3, r2
 8012810:	009b      	lsls	r3, r3, #2
 8012812:	440b      	add	r3, r1
 8012814:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8012818:	681a      	ldr	r2, [r3, #0]
 801281a:	78fb      	ldrb	r3, [r7, #3]
 801281c:	4619      	mov	r1, r3
 801281e:	f7fc fac1 	bl	800eda4 <USBD_LL_DataOutStage>
}
 8012822:	bf00      	nop
 8012824:	3708      	adds	r7, #8
 8012826:	46bd      	mov	sp, r7
 8012828:	bd80      	pop	{r7, pc}

0801282a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801282a:	b580      	push	{r7, lr}
 801282c:	b082      	sub	sp, #8
 801282e:	af00      	add	r7, sp, #0
 8012830:	6078      	str	r0, [r7, #4]
 8012832:	460b      	mov	r3, r1
 8012834:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801283c:	78fa      	ldrb	r2, [r7, #3]
 801283e:	6879      	ldr	r1, [r7, #4]
 8012840:	4613      	mov	r3, r2
 8012842:	00db      	lsls	r3, r3, #3
 8012844:	1a9b      	subs	r3, r3, r2
 8012846:	009b      	lsls	r3, r3, #2
 8012848:	440b      	add	r3, r1
 801284a:	3348      	adds	r3, #72	; 0x48
 801284c:	681a      	ldr	r2, [r3, #0]
 801284e:	78fb      	ldrb	r3, [r7, #3]
 8012850:	4619      	mov	r1, r3
 8012852:	f7fc fb0a 	bl	800ee6a <USBD_LL_DataInStage>
}
 8012856:	bf00      	nop
 8012858:	3708      	adds	r7, #8
 801285a:	46bd      	mov	sp, r7
 801285c:	bd80      	pop	{r7, pc}

0801285e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801285e:	b580      	push	{r7, lr}
 8012860:	b082      	sub	sp, #8
 8012862:	af00      	add	r7, sp, #0
 8012864:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801286c:	4618      	mov	r0, r3
 801286e:	f7fc fc0e 	bl	800f08e <USBD_LL_SOF>
}
 8012872:	bf00      	nop
 8012874:	3708      	adds	r7, #8
 8012876:	46bd      	mov	sp, r7
 8012878:	bd80      	pop	{r7, pc}

0801287a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801287a:	b580      	push	{r7, lr}
 801287c:	b084      	sub	sp, #16
 801287e:	af00      	add	r7, sp, #0
 8012880:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8012882:	2301      	movs	r3, #1
 8012884:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	68db      	ldr	r3, [r3, #12]
 801288a:	2b00      	cmp	r3, #0
 801288c:	d102      	bne.n	8012894 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801288e:	2300      	movs	r3, #0
 8012890:	73fb      	strb	r3, [r7, #15]
 8012892:	e008      	b.n	80128a6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	68db      	ldr	r3, [r3, #12]
 8012898:	2b02      	cmp	r3, #2
 801289a:	d102      	bne.n	80128a2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801289c:	2301      	movs	r3, #1
 801289e:	73fb      	strb	r3, [r7, #15]
 80128a0:	e001      	b.n	80128a6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80128a2:	f7ee fbc9 	bl	8001038 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80128ac:	7bfa      	ldrb	r2, [r7, #15]
 80128ae:	4611      	mov	r1, r2
 80128b0:	4618      	mov	r0, r3
 80128b2:	f7fc fbb1 	bl	800f018 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80128bc:	4618      	mov	r0, r3
 80128be:	f7fc fb6a 	bl	800ef96 <USBD_LL_Reset>
}
 80128c2:	bf00      	nop
 80128c4:	3710      	adds	r7, #16
 80128c6:	46bd      	mov	sp, r7
 80128c8:	bd80      	pop	{r7, pc}
	...

080128cc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80128cc:	b580      	push	{r7, lr}
 80128ce:	b082      	sub	sp, #8
 80128d0:	af00      	add	r7, sp, #0
 80128d2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80128da:	4618      	mov	r0, r3
 80128dc:	f7fc fbac 	bl	800f038 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	681b      	ldr	r3, [r3, #0]
 80128e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80128e8:	681b      	ldr	r3, [r3, #0]
 80128ea:	687a      	ldr	r2, [r7, #4]
 80128ec:	6812      	ldr	r2, [r2, #0]
 80128ee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80128f2:	f043 0301 	orr.w	r3, r3, #1
 80128f6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	6a1b      	ldr	r3, [r3, #32]
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	d005      	beq.n	801290c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012900:	4b04      	ldr	r3, [pc, #16]	; (8012914 <HAL_PCD_SuspendCallback+0x48>)
 8012902:	691b      	ldr	r3, [r3, #16]
 8012904:	4a03      	ldr	r2, [pc, #12]	; (8012914 <HAL_PCD_SuspendCallback+0x48>)
 8012906:	f043 0306 	orr.w	r3, r3, #6
 801290a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801290c:	bf00      	nop
 801290e:	3708      	adds	r7, #8
 8012910:	46bd      	mov	sp, r7
 8012912:	bd80      	pop	{r7, pc}
 8012914:	e000ed00 	.word	0xe000ed00

08012918 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012918:	b580      	push	{r7, lr}
 801291a:	b082      	sub	sp, #8
 801291c:	af00      	add	r7, sp, #0
 801291e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012926:	4618      	mov	r0, r3
 8012928:	f7fc fb9b 	bl	800f062 <USBD_LL_Resume>
}
 801292c:	bf00      	nop
 801292e:	3708      	adds	r7, #8
 8012930:	46bd      	mov	sp, r7
 8012932:	bd80      	pop	{r7, pc}

08012934 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012934:	b580      	push	{r7, lr}
 8012936:	b082      	sub	sp, #8
 8012938:	af00      	add	r7, sp, #0
 801293a:	6078      	str	r0, [r7, #4]
 801293c:	460b      	mov	r3, r1
 801293e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012946:	78fa      	ldrb	r2, [r7, #3]
 8012948:	4611      	mov	r1, r2
 801294a:	4618      	mov	r0, r3
 801294c:	f7fc fbc6 	bl	800f0dc <USBD_LL_IsoOUTIncomplete>
}
 8012950:	bf00      	nop
 8012952:	3708      	adds	r7, #8
 8012954:	46bd      	mov	sp, r7
 8012956:	bd80      	pop	{r7, pc}

08012958 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012958:	b580      	push	{r7, lr}
 801295a:	b082      	sub	sp, #8
 801295c:	af00      	add	r7, sp, #0
 801295e:	6078      	str	r0, [r7, #4]
 8012960:	460b      	mov	r3, r1
 8012962:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801296a:	78fa      	ldrb	r2, [r7, #3]
 801296c:	4611      	mov	r1, r2
 801296e:	4618      	mov	r0, r3
 8012970:	f7fc fba7 	bl	800f0c2 <USBD_LL_IsoINIncomplete>
}
 8012974:	bf00      	nop
 8012976:	3708      	adds	r7, #8
 8012978:	46bd      	mov	sp, r7
 801297a:	bd80      	pop	{r7, pc}

0801297c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801297c:	b580      	push	{r7, lr}
 801297e:	b082      	sub	sp, #8
 8012980:	af00      	add	r7, sp, #0
 8012982:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801298a:	4618      	mov	r0, r3
 801298c:	f7fc fbb3 	bl	800f0f6 <USBD_LL_DevConnected>
}
 8012990:	bf00      	nop
 8012992:	3708      	adds	r7, #8
 8012994:	46bd      	mov	sp, r7
 8012996:	bd80      	pop	{r7, pc}

08012998 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012998:	b580      	push	{r7, lr}
 801299a:	b082      	sub	sp, #8
 801299c:	af00      	add	r7, sp, #0
 801299e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80129a6:	4618      	mov	r0, r3
 80129a8:	f7fc fbb0 	bl	800f10c <USBD_LL_DevDisconnected>
}
 80129ac:	bf00      	nop
 80129ae:	3708      	adds	r7, #8
 80129b0:	46bd      	mov	sp, r7
 80129b2:	bd80      	pop	{r7, pc}

080129b4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80129b4:	b580      	push	{r7, lr}
 80129b6:	b082      	sub	sp, #8
 80129b8:	af00      	add	r7, sp, #0
 80129ba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	781b      	ldrb	r3, [r3, #0]
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d13e      	bne.n	8012a42 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80129c4:	4a21      	ldr	r2, [pc, #132]	; (8012a4c <USBD_LL_Init+0x98>)
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	4a1f      	ldr	r2, [pc, #124]	; (8012a4c <USBD_LL_Init+0x98>)
 80129d0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80129d4:	4b1d      	ldr	r3, [pc, #116]	; (8012a4c <USBD_LL_Init+0x98>)
 80129d6:	4a1e      	ldr	r2, [pc, #120]	; (8012a50 <USBD_LL_Init+0x9c>)
 80129d8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80129da:	4b1c      	ldr	r3, [pc, #112]	; (8012a4c <USBD_LL_Init+0x98>)
 80129dc:	2209      	movs	r2, #9
 80129de:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80129e0:	4b1a      	ldr	r3, [pc, #104]	; (8012a4c <USBD_LL_Init+0x98>)
 80129e2:	2202      	movs	r2, #2
 80129e4:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80129e6:	4b19      	ldr	r3, [pc, #100]	; (8012a4c <USBD_LL_Init+0x98>)
 80129e8:	2200      	movs	r2, #0
 80129ea:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80129ec:	4b17      	ldr	r3, [pc, #92]	; (8012a4c <USBD_LL_Init+0x98>)
 80129ee:	2202      	movs	r2, #2
 80129f0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80129f2:	4b16      	ldr	r3, [pc, #88]	; (8012a4c <USBD_LL_Init+0x98>)
 80129f4:	2200      	movs	r2, #0
 80129f6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80129f8:	4b14      	ldr	r3, [pc, #80]	; (8012a4c <USBD_LL_Init+0x98>)
 80129fa:	2200      	movs	r2, #0
 80129fc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80129fe:	4b13      	ldr	r3, [pc, #76]	; (8012a4c <USBD_LL_Init+0x98>)
 8012a00:	2200      	movs	r2, #0
 8012a02:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8012a04:	4b11      	ldr	r3, [pc, #68]	; (8012a4c <USBD_LL_Init+0x98>)
 8012a06:	2200      	movs	r2, #0
 8012a08:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8012a0a:	4b10      	ldr	r3, [pc, #64]	; (8012a4c <USBD_LL_Init+0x98>)
 8012a0c:	2200      	movs	r2, #0
 8012a0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8012a10:	4b0e      	ldr	r3, [pc, #56]	; (8012a4c <USBD_LL_Init+0x98>)
 8012a12:	2200      	movs	r2, #0
 8012a14:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8012a16:	480d      	ldr	r0, [pc, #52]	; (8012a4c <USBD_LL_Init+0x98>)
 8012a18:	f7f1 fa34 	bl	8003e84 <HAL_PCD_Init>
 8012a1c:	4603      	mov	r3, r0
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d001      	beq.n	8012a26 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8012a22:	f7ee fb09 	bl	8001038 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8012a26:	2180      	movs	r1, #128	; 0x80
 8012a28:	4808      	ldr	r0, [pc, #32]	; (8012a4c <USBD_LL_Init+0x98>)
 8012a2a:	f7f2 fbf2 	bl	8005212 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8012a2e:	2240      	movs	r2, #64	; 0x40
 8012a30:	2100      	movs	r1, #0
 8012a32:	4806      	ldr	r0, [pc, #24]	; (8012a4c <USBD_LL_Init+0x98>)
 8012a34:	f7f2 fba6 	bl	8005184 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8012a38:	2280      	movs	r2, #128	; 0x80
 8012a3a:	2101      	movs	r1, #1
 8012a3c:	4803      	ldr	r0, [pc, #12]	; (8012a4c <USBD_LL_Init+0x98>)
 8012a3e:	f7f2 fba1 	bl	8005184 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8012a42:	2300      	movs	r3, #0
}
 8012a44:	4618      	mov	r0, r3
 8012a46:	3708      	adds	r7, #8
 8012a48:	46bd      	mov	sp, r7
 8012a4a:	bd80      	pop	{r7, pc}
 8012a4c:	2400b640 	.word	0x2400b640
 8012a50:	40080000 	.word	0x40080000

08012a54 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8012a54:	b580      	push	{r7, lr}
 8012a56:	b084      	sub	sp, #16
 8012a58:	af00      	add	r7, sp, #0
 8012a5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012a5c:	2300      	movs	r3, #0
 8012a5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012a60:	2300      	movs	r3, #0
 8012a62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012a6a:	4618      	mov	r0, r3
 8012a6c:	f7f1 fb2e 	bl	80040cc <HAL_PCD_Start>
 8012a70:	4603      	mov	r3, r0
 8012a72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012a74:	7bfb      	ldrb	r3, [r7, #15]
 8012a76:	4618      	mov	r0, r3
 8012a78:	f000 f94a 	bl	8012d10 <USBD_Get_USB_Status>
 8012a7c:	4603      	mov	r3, r0
 8012a7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012a80:	7bbb      	ldrb	r3, [r7, #14]
}
 8012a82:	4618      	mov	r0, r3
 8012a84:	3710      	adds	r7, #16
 8012a86:	46bd      	mov	sp, r7
 8012a88:	bd80      	pop	{r7, pc}

08012a8a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8012a8a:	b580      	push	{r7, lr}
 8012a8c:	b084      	sub	sp, #16
 8012a8e:	af00      	add	r7, sp, #0
 8012a90:	6078      	str	r0, [r7, #4]
 8012a92:	4608      	mov	r0, r1
 8012a94:	4611      	mov	r1, r2
 8012a96:	461a      	mov	r2, r3
 8012a98:	4603      	mov	r3, r0
 8012a9a:	70fb      	strb	r3, [r7, #3]
 8012a9c:	460b      	mov	r3, r1
 8012a9e:	70bb      	strb	r3, [r7, #2]
 8012aa0:	4613      	mov	r3, r2
 8012aa2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012aa4:	2300      	movs	r3, #0
 8012aa6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012aa8:	2300      	movs	r3, #0
 8012aaa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8012ab2:	78bb      	ldrb	r3, [r7, #2]
 8012ab4:	883a      	ldrh	r2, [r7, #0]
 8012ab6:	78f9      	ldrb	r1, [r7, #3]
 8012ab8:	f7f1 ff3f 	bl	800493a <HAL_PCD_EP_Open>
 8012abc:	4603      	mov	r3, r0
 8012abe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012ac0:	7bfb      	ldrb	r3, [r7, #15]
 8012ac2:	4618      	mov	r0, r3
 8012ac4:	f000 f924 	bl	8012d10 <USBD_Get_USB_Status>
 8012ac8:	4603      	mov	r3, r0
 8012aca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012acc:	7bbb      	ldrb	r3, [r7, #14]
}
 8012ace:	4618      	mov	r0, r3
 8012ad0:	3710      	adds	r7, #16
 8012ad2:	46bd      	mov	sp, r7
 8012ad4:	bd80      	pop	{r7, pc}

08012ad6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012ad6:	b580      	push	{r7, lr}
 8012ad8:	b084      	sub	sp, #16
 8012ada:	af00      	add	r7, sp, #0
 8012adc:	6078      	str	r0, [r7, #4]
 8012ade:	460b      	mov	r3, r1
 8012ae0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012ae2:	2300      	movs	r3, #0
 8012ae4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012ae6:	2300      	movs	r3, #0
 8012ae8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012af0:	78fa      	ldrb	r2, [r7, #3]
 8012af2:	4611      	mov	r1, r2
 8012af4:	4618      	mov	r0, r3
 8012af6:	f7f1 ff88 	bl	8004a0a <HAL_PCD_EP_Close>
 8012afa:	4603      	mov	r3, r0
 8012afc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012afe:	7bfb      	ldrb	r3, [r7, #15]
 8012b00:	4618      	mov	r0, r3
 8012b02:	f000 f905 	bl	8012d10 <USBD_Get_USB_Status>
 8012b06:	4603      	mov	r3, r0
 8012b08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012b0a:	7bbb      	ldrb	r3, [r7, #14]
}
 8012b0c:	4618      	mov	r0, r3
 8012b0e:	3710      	adds	r7, #16
 8012b10:	46bd      	mov	sp, r7
 8012b12:	bd80      	pop	{r7, pc}

08012b14 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012b14:	b580      	push	{r7, lr}
 8012b16:	b084      	sub	sp, #16
 8012b18:	af00      	add	r7, sp, #0
 8012b1a:	6078      	str	r0, [r7, #4]
 8012b1c:	460b      	mov	r3, r1
 8012b1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012b20:	2300      	movs	r3, #0
 8012b22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012b24:	2300      	movs	r3, #0
 8012b26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012b2e:	78fa      	ldrb	r2, [r7, #3]
 8012b30:	4611      	mov	r1, r2
 8012b32:	4618      	mov	r0, r3
 8012b34:	f7f2 f91a 	bl	8004d6c <HAL_PCD_EP_Flush>
 8012b38:	4603      	mov	r3, r0
 8012b3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012b3c:	7bfb      	ldrb	r3, [r7, #15]
 8012b3e:	4618      	mov	r0, r3
 8012b40:	f000 f8e6 	bl	8012d10 <USBD_Get_USB_Status>
 8012b44:	4603      	mov	r3, r0
 8012b46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012b48:	7bbb      	ldrb	r3, [r7, #14]
}
 8012b4a:	4618      	mov	r0, r3
 8012b4c:	3710      	adds	r7, #16
 8012b4e:	46bd      	mov	sp, r7
 8012b50:	bd80      	pop	{r7, pc}

08012b52 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012b52:	b580      	push	{r7, lr}
 8012b54:	b084      	sub	sp, #16
 8012b56:	af00      	add	r7, sp, #0
 8012b58:	6078      	str	r0, [r7, #4]
 8012b5a:	460b      	mov	r3, r1
 8012b5c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012b5e:	2300      	movs	r3, #0
 8012b60:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012b62:	2300      	movs	r3, #0
 8012b64:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012b6c:	78fa      	ldrb	r2, [r7, #3]
 8012b6e:	4611      	mov	r1, r2
 8012b70:	4618      	mov	r0, r3
 8012b72:	f7f2 f841 	bl	8004bf8 <HAL_PCD_EP_SetStall>
 8012b76:	4603      	mov	r3, r0
 8012b78:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012b7a:	7bfb      	ldrb	r3, [r7, #15]
 8012b7c:	4618      	mov	r0, r3
 8012b7e:	f000 f8c7 	bl	8012d10 <USBD_Get_USB_Status>
 8012b82:	4603      	mov	r3, r0
 8012b84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012b86:	7bbb      	ldrb	r3, [r7, #14]
}
 8012b88:	4618      	mov	r0, r3
 8012b8a:	3710      	adds	r7, #16
 8012b8c:	46bd      	mov	sp, r7
 8012b8e:	bd80      	pop	{r7, pc}

08012b90 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012b90:	b580      	push	{r7, lr}
 8012b92:	b084      	sub	sp, #16
 8012b94:	af00      	add	r7, sp, #0
 8012b96:	6078      	str	r0, [r7, #4]
 8012b98:	460b      	mov	r3, r1
 8012b9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012b9c:	2300      	movs	r3, #0
 8012b9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012ba0:	2300      	movs	r3, #0
 8012ba2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012baa:	78fa      	ldrb	r2, [r7, #3]
 8012bac:	4611      	mov	r1, r2
 8012bae:	4618      	mov	r0, r3
 8012bb0:	f7f2 f886 	bl	8004cc0 <HAL_PCD_EP_ClrStall>
 8012bb4:	4603      	mov	r3, r0
 8012bb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012bb8:	7bfb      	ldrb	r3, [r7, #15]
 8012bba:	4618      	mov	r0, r3
 8012bbc:	f000 f8a8 	bl	8012d10 <USBD_Get_USB_Status>
 8012bc0:	4603      	mov	r3, r0
 8012bc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012bc4:	7bbb      	ldrb	r3, [r7, #14]
}
 8012bc6:	4618      	mov	r0, r3
 8012bc8:	3710      	adds	r7, #16
 8012bca:	46bd      	mov	sp, r7
 8012bcc:	bd80      	pop	{r7, pc}

08012bce <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012bce:	b480      	push	{r7}
 8012bd0:	b085      	sub	sp, #20
 8012bd2:	af00      	add	r7, sp, #0
 8012bd4:	6078      	str	r0, [r7, #4]
 8012bd6:	460b      	mov	r3, r1
 8012bd8:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012be0:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8012be2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	da0b      	bge.n	8012c02 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8012bea:	78fb      	ldrb	r3, [r7, #3]
 8012bec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012bf0:	68f9      	ldr	r1, [r7, #12]
 8012bf2:	4613      	mov	r3, r2
 8012bf4:	00db      	lsls	r3, r3, #3
 8012bf6:	1a9b      	subs	r3, r3, r2
 8012bf8:	009b      	lsls	r3, r3, #2
 8012bfa:	440b      	add	r3, r1
 8012bfc:	333e      	adds	r3, #62	; 0x3e
 8012bfe:	781b      	ldrb	r3, [r3, #0]
 8012c00:	e00b      	b.n	8012c1a <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8012c02:	78fb      	ldrb	r3, [r7, #3]
 8012c04:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012c08:	68f9      	ldr	r1, [r7, #12]
 8012c0a:	4613      	mov	r3, r2
 8012c0c:	00db      	lsls	r3, r3, #3
 8012c0e:	1a9b      	subs	r3, r3, r2
 8012c10:	009b      	lsls	r3, r3, #2
 8012c12:	440b      	add	r3, r1
 8012c14:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012c18:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012c1a:	4618      	mov	r0, r3
 8012c1c:	3714      	adds	r7, #20
 8012c1e:	46bd      	mov	sp, r7
 8012c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c24:	4770      	bx	lr

08012c26 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8012c26:	b580      	push	{r7, lr}
 8012c28:	b084      	sub	sp, #16
 8012c2a:	af00      	add	r7, sp, #0
 8012c2c:	6078      	str	r0, [r7, #4]
 8012c2e:	460b      	mov	r3, r1
 8012c30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012c32:	2300      	movs	r3, #0
 8012c34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012c36:	2300      	movs	r3, #0
 8012c38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012c40:	78fa      	ldrb	r2, [r7, #3]
 8012c42:	4611      	mov	r1, r2
 8012c44:	4618      	mov	r0, r3
 8012c46:	f7f1 fe53 	bl	80048f0 <HAL_PCD_SetAddress>
 8012c4a:	4603      	mov	r3, r0
 8012c4c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012c4e:	7bfb      	ldrb	r3, [r7, #15]
 8012c50:	4618      	mov	r0, r3
 8012c52:	f000 f85d 	bl	8012d10 <USBD_Get_USB_Status>
 8012c56:	4603      	mov	r3, r0
 8012c58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012c5a:	7bbb      	ldrb	r3, [r7, #14]
}
 8012c5c:	4618      	mov	r0, r3
 8012c5e:	3710      	adds	r7, #16
 8012c60:	46bd      	mov	sp, r7
 8012c62:	bd80      	pop	{r7, pc}

08012c64 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012c64:	b580      	push	{r7, lr}
 8012c66:	b086      	sub	sp, #24
 8012c68:	af00      	add	r7, sp, #0
 8012c6a:	60f8      	str	r0, [r7, #12]
 8012c6c:	607a      	str	r2, [r7, #4]
 8012c6e:	603b      	str	r3, [r7, #0]
 8012c70:	460b      	mov	r3, r1
 8012c72:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012c74:	2300      	movs	r3, #0
 8012c76:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012c78:	2300      	movs	r3, #0
 8012c7a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8012c7c:	68fb      	ldr	r3, [r7, #12]
 8012c7e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8012c82:	7af9      	ldrb	r1, [r7, #11]
 8012c84:	683b      	ldr	r3, [r7, #0]
 8012c86:	687a      	ldr	r2, [r7, #4]
 8012c88:	f7f1 ff6c 	bl	8004b64 <HAL_PCD_EP_Transmit>
 8012c8c:	4603      	mov	r3, r0
 8012c8e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012c90:	7dfb      	ldrb	r3, [r7, #23]
 8012c92:	4618      	mov	r0, r3
 8012c94:	f000 f83c 	bl	8012d10 <USBD_Get_USB_Status>
 8012c98:	4603      	mov	r3, r0
 8012c9a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012c9c:	7dbb      	ldrb	r3, [r7, #22]
}
 8012c9e:	4618      	mov	r0, r3
 8012ca0:	3718      	adds	r7, #24
 8012ca2:	46bd      	mov	sp, r7
 8012ca4:	bd80      	pop	{r7, pc}

08012ca6 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012ca6:	b580      	push	{r7, lr}
 8012ca8:	b086      	sub	sp, #24
 8012caa:	af00      	add	r7, sp, #0
 8012cac:	60f8      	str	r0, [r7, #12]
 8012cae:	607a      	str	r2, [r7, #4]
 8012cb0:	603b      	str	r3, [r7, #0]
 8012cb2:	460b      	mov	r3, r1
 8012cb4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012cb6:	2300      	movs	r3, #0
 8012cb8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012cba:	2300      	movs	r3, #0
 8012cbc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8012cbe:	68fb      	ldr	r3, [r7, #12]
 8012cc0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8012cc4:	7af9      	ldrb	r1, [r7, #11]
 8012cc6:	683b      	ldr	r3, [r7, #0]
 8012cc8:	687a      	ldr	r2, [r7, #4]
 8012cca:	f7f1 fee8 	bl	8004a9e <HAL_PCD_EP_Receive>
 8012cce:	4603      	mov	r3, r0
 8012cd0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012cd2:	7dfb      	ldrb	r3, [r7, #23]
 8012cd4:	4618      	mov	r0, r3
 8012cd6:	f000 f81b 	bl	8012d10 <USBD_Get_USB_Status>
 8012cda:	4603      	mov	r3, r0
 8012cdc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012cde:	7dbb      	ldrb	r3, [r7, #22]
}
 8012ce0:	4618      	mov	r0, r3
 8012ce2:	3718      	adds	r7, #24
 8012ce4:	46bd      	mov	sp, r7
 8012ce6:	bd80      	pop	{r7, pc}

08012ce8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012ce8:	b580      	push	{r7, lr}
 8012cea:	b082      	sub	sp, #8
 8012cec:	af00      	add	r7, sp, #0
 8012cee:	6078      	str	r0, [r7, #4]
 8012cf0:	460b      	mov	r3, r1
 8012cf2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012cfa:	78fa      	ldrb	r2, [r7, #3]
 8012cfc:	4611      	mov	r1, r2
 8012cfe:	4618      	mov	r0, r3
 8012d00:	f7f1 ff18 	bl	8004b34 <HAL_PCD_EP_GetRxCount>
 8012d04:	4603      	mov	r3, r0
}
 8012d06:	4618      	mov	r0, r3
 8012d08:	3708      	adds	r7, #8
 8012d0a:	46bd      	mov	sp, r7
 8012d0c:	bd80      	pop	{r7, pc}
	...

08012d10 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8012d10:	b480      	push	{r7}
 8012d12:	b085      	sub	sp, #20
 8012d14:	af00      	add	r7, sp, #0
 8012d16:	4603      	mov	r3, r0
 8012d18:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012d1a:	2300      	movs	r3, #0
 8012d1c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8012d1e:	79fb      	ldrb	r3, [r7, #7]
 8012d20:	2b03      	cmp	r3, #3
 8012d22:	d817      	bhi.n	8012d54 <USBD_Get_USB_Status+0x44>
 8012d24:	a201      	add	r2, pc, #4	; (adr r2, 8012d2c <USBD_Get_USB_Status+0x1c>)
 8012d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d2a:	bf00      	nop
 8012d2c:	08012d3d 	.word	0x08012d3d
 8012d30:	08012d43 	.word	0x08012d43
 8012d34:	08012d49 	.word	0x08012d49
 8012d38:	08012d4f 	.word	0x08012d4f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8012d3c:	2300      	movs	r3, #0
 8012d3e:	73fb      	strb	r3, [r7, #15]
    break;
 8012d40:	e00b      	b.n	8012d5a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012d42:	2303      	movs	r3, #3
 8012d44:	73fb      	strb	r3, [r7, #15]
    break;
 8012d46:	e008      	b.n	8012d5a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012d48:	2301      	movs	r3, #1
 8012d4a:	73fb      	strb	r3, [r7, #15]
    break;
 8012d4c:	e005      	b.n	8012d5a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012d4e:	2303      	movs	r3, #3
 8012d50:	73fb      	strb	r3, [r7, #15]
    break;
 8012d52:	e002      	b.n	8012d5a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8012d54:	2303      	movs	r3, #3
 8012d56:	73fb      	strb	r3, [r7, #15]
    break;
 8012d58:	bf00      	nop
  }
  return usb_status;
 8012d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8012d5c:	4618      	mov	r0, r3
 8012d5e:	3714      	adds	r7, #20
 8012d60:	46bd      	mov	sp, r7
 8012d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d66:	4770      	bx	lr

08012d68 <__errno>:
 8012d68:	4b01      	ldr	r3, [pc, #4]	; (8012d70 <__errno+0x8>)
 8012d6a:	6818      	ldr	r0, [r3, #0]
 8012d6c:	4770      	bx	lr
 8012d6e:	bf00      	nop
 8012d70:	24000168 	.word	0x24000168

08012d74 <__libc_init_array>:
 8012d74:	b570      	push	{r4, r5, r6, lr}
 8012d76:	4e0d      	ldr	r6, [pc, #52]	; (8012dac <__libc_init_array+0x38>)
 8012d78:	4c0d      	ldr	r4, [pc, #52]	; (8012db0 <__libc_init_array+0x3c>)
 8012d7a:	1ba4      	subs	r4, r4, r6
 8012d7c:	10a4      	asrs	r4, r4, #2
 8012d7e:	2500      	movs	r5, #0
 8012d80:	42a5      	cmp	r5, r4
 8012d82:	d109      	bne.n	8012d98 <__libc_init_array+0x24>
 8012d84:	4e0b      	ldr	r6, [pc, #44]	; (8012db4 <__libc_init_array+0x40>)
 8012d86:	4c0c      	ldr	r4, [pc, #48]	; (8012db8 <__libc_init_array+0x44>)
 8012d88:	f000 fc38 	bl	80135fc <_init>
 8012d8c:	1ba4      	subs	r4, r4, r6
 8012d8e:	10a4      	asrs	r4, r4, #2
 8012d90:	2500      	movs	r5, #0
 8012d92:	42a5      	cmp	r5, r4
 8012d94:	d105      	bne.n	8012da2 <__libc_init_array+0x2e>
 8012d96:	bd70      	pop	{r4, r5, r6, pc}
 8012d98:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012d9c:	4798      	blx	r3
 8012d9e:	3501      	adds	r5, #1
 8012da0:	e7ee      	b.n	8012d80 <__libc_init_array+0xc>
 8012da2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012da6:	4798      	blx	r3
 8012da8:	3501      	adds	r5, #1
 8012daa:	e7f2      	b.n	8012d92 <__libc_init_array+0x1e>
 8012dac:	0801389c 	.word	0x0801389c
 8012db0:	0801389c 	.word	0x0801389c
 8012db4:	0801389c 	.word	0x0801389c
 8012db8:	080138a0 	.word	0x080138a0

08012dbc <malloc>:
 8012dbc:	4b02      	ldr	r3, [pc, #8]	; (8012dc8 <malloc+0xc>)
 8012dbe:	4601      	mov	r1, r0
 8012dc0:	6818      	ldr	r0, [r3, #0]
 8012dc2:	f000 b86d 	b.w	8012ea0 <_malloc_r>
 8012dc6:	bf00      	nop
 8012dc8:	24000168 	.word	0x24000168

08012dcc <free>:
 8012dcc:	4b02      	ldr	r3, [pc, #8]	; (8012dd8 <free+0xc>)
 8012dce:	4601      	mov	r1, r0
 8012dd0:	6818      	ldr	r0, [r3, #0]
 8012dd2:	f000 b817 	b.w	8012e04 <_free_r>
 8012dd6:	bf00      	nop
 8012dd8:	24000168 	.word	0x24000168

08012ddc <memcpy>:
 8012ddc:	b510      	push	{r4, lr}
 8012dde:	1e43      	subs	r3, r0, #1
 8012de0:	440a      	add	r2, r1
 8012de2:	4291      	cmp	r1, r2
 8012de4:	d100      	bne.n	8012de8 <memcpy+0xc>
 8012de6:	bd10      	pop	{r4, pc}
 8012de8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012dec:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012df0:	e7f7      	b.n	8012de2 <memcpy+0x6>

08012df2 <memset>:
 8012df2:	4402      	add	r2, r0
 8012df4:	4603      	mov	r3, r0
 8012df6:	4293      	cmp	r3, r2
 8012df8:	d100      	bne.n	8012dfc <memset+0xa>
 8012dfa:	4770      	bx	lr
 8012dfc:	f803 1b01 	strb.w	r1, [r3], #1
 8012e00:	e7f9      	b.n	8012df6 <memset+0x4>
	...

08012e04 <_free_r>:
 8012e04:	b538      	push	{r3, r4, r5, lr}
 8012e06:	4605      	mov	r5, r0
 8012e08:	2900      	cmp	r1, #0
 8012e0a:	d045      	beq.n	8012e98 <_free_r+0x94>
 8012e0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012e10:	1f0c      	subs	r4, r1, #4
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	bfb8      	it	lt
 8012e16:	18e4      	addlt	r4, r4, r3
 8012e18:	f000 f8cc 	bl	8012fb4 <__malloc_lock>
 8012e1c:	4a1f      	ldr	r2, [pc, #124]	; (8012e9c <_free_r+0x98>)
 8012e1e:	6813      	ldr	r3, [r2, #0]
 8012e20:	4610      	mov	r0, r2
 8012e22:	b933      	cbnz	r3, 8012e32 <_free_r+0x2e>
 8012e24:	6063      	str	r3, [r4, #4]
 8012e26:	6014      	str	r4, [r2, #0]
 8012e28:	4628      	mov	r0, r5
 8012e2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012e2e:	f000 b8c2 	b.w	8012fb6 <__malloc_unlock>
 8012e32:	42a3      	cmp	r3, r4
 8012e34:	d90c      	bls.n	8012e50 <_free_r+0x4c>
 8012e36:	6821      	ldr	r1, [r4, #0]
 8012e38:	1862      	adds	r2, r4, r1
 8012e3a:	4293      	cmp	r3, r2
 8012e3c:	bf04      	itt	eq
 8012e3e:	681a      	ldreq	r2, [r3, #0]
 8012e40:	685b      	ldreq	r3, [r3, #4]
 8012e42:	6063      	str	r3, [r4, #4]
 8012e44:	bf04      	itt	eq
 8012e46:	1852      	addeq	r2, r2, r1
 8012e48:	6022      	streq	r2, [r4, #0]
 8012e4a:	6004      	str	r4, [r0, #0]
 8012e4c:	e7ec      	b.n	8012e28 <_free_r+0x24>
 8012e4e:	4613      	mov	r3, r2
 8012e50:	685a      	ldr	r2, [r3, #4]
 8012e52:	b10a      	cbz	r2, 8012e58 <_free_r+0x54>
 8012e54:	42a2      	cmp	r2, r4
 8012e56:	d9fa      	bls.n	8012e4e <_free_r+0x4a>
 8012e58:	6819      	ldr	r1, [r3, #0]
 8012e5a:	1858      	adds	r0, r3, r1
 8012e5c:	42a0      	cmp	r0, r4
 8012e5e:	d10b      	bne.n	8012e78 <_free_r+0x74>
 8012e60:	6820      	ldr	r0, [r4, #0]
 8012e62:	4401      	add	r1, r0
 8012e64:	1858      	adds	r0, r3, r1
 8012e66:	4282      	cmp	r2, r0
 8012e68:	6019      	str	r1, [r3, #0]
 8012e6a:	d1dd      	bne.n	8012e28 <_free_r+0x24>
 8012e6c:	6810      	ldr	r0, [r2, #0]
 8012e6e:	6852      	ldr	r2, [r2, #4]
 8012e70:	605a      	str	r2, [r3, #4]
 8012e72:	4401      	add	r1, r0
 8012e74:	6019      	str	r1, [r3, #0]
 8012e76:	e7d7      	b.n	8012e28 <_free_r+0x24>
 8012e78:	d902      	bls.n	8012e80 <_free_r+0x7c>
 8012e7a:	230c      	movs	r3, #12
 8012e7c:	602b      	str	r3, [r5, #0]
 8012e7e:	e7d3      	b.n	8012e28 <_free_r+0x24>
 8012e80:	6820      	ldr	r0, [r4, #0]
 8012e82:	1821      	adds	r1, r4, r0
 8012e84:	428a      	cmp	r2, r1
 8012e86:	bf04      	itt	eq
 8012e88:	6811      	ldreq	r1, [r2, #0]
 8012e8a:	6852      	ldreq	r2, [r2, #4]
 8012e8c:	6062      	str	r2, [r4, #4]
 8012e8e:	bf04      	itt	eq
 8012e90:	1809      	addeq	r1, r1, r0
 8012e92:	6021      	streq	r1, [r4, #0]
 8012e94:	605c      	str	r4, [r3, #4]
 8012e96:	e7c7      	b.n	8012e28 <_free_r+0x24>
 8012e98:	bd38      	pop	{r3, r4, r5, pc}
 8012e9a:	bf00      	nop
 8012e9c:	2400a230 	.word	0x2400a230

08012ea0 <_malloc_r>:
 8012ea0:	b570      	push	{r4, r5, r6, lr}
 8012ea2:	1ccd      	adds	r5, r1, #3
 8012ea4:	f025 0503 	bic.w	r5, r5, #3
 8012ea8:	3508      	adds	r5, #8
 8012eaa:	2d0c      	cmp	r5, #12
 8012eac:	bf38      	it	cc
 8012eae:	250c      	movcc	r5, #12
 8012eb0:	2d00      	cmp	r5, #0
 8012eb2:	4606      	mov	r6, r0
 8012eb4:	db01      	blt.n	8012eba <_malloc_r+0x1a>
 8012eb6:	42a9      	cmp	r1, r5
 8012eb8:	d903      	bls.n	8012ec2 <_malloc_r+0x22>
 8012eba:	230c      	movs	r3, #12
 8012ebc:	6033      	str	r3, [r6, #0]
 8012ebe:	2000      	movs	r0, #0
 8012ec0:	bd70      	pop	{r4, r5, r6, pc}
 8012ec2:	f000 f877 	bl	8012fb4 <__malloc_lock>
 8012ec6:	4a21      	ldr	r2, [pc, #132]	; (8012f4c <_malloc_r+0xac>)
 8012ec8:	6814      	ldr	r4, [r2, #0]
 8012eca:	4621      	mov	r1, r4
 8012ecc:	b991      	cbnz	r1, 8012ef4 <_malloc_r+0x54>
 8012ece:	4c20      	ldr	r4, [pc, #128]	; (8012f50 <_malloc_r+0xb0>)
 8012ed0:	6823      	ldr	r3, [r4, #0]
 8012ed2:	b91b      	cbnz	r3, 8012edc <_malloc_r+0x3c>
 8012ed4:	4630      	mov	r0, r6
 8012ed6:	f000 f83d 	bl	8012f54 <_sbrk_r>
 8012eda:	6020      	str	r0, [r4, #0]
 8012edc:	4629      	mov	r1, r5
 8012ede:	4630      	mov	r0, r6
 8012ee0:	f000 f838 	bl	8012f54 <_sbrk_r>
 8012ee4:	1c43      	adds	r3, r0, #1
 8012ee6:	d124      	bne.n	8012f32 <_malloc_r+0x92>
 8012ee8:	230c      	movs	r3, #12
 8012eea:	6033      	str	r3, [r6, #0]
 8012eec:	4630      	mov	r0, r6
 8012eee:	f000 f862 	bl	8012fb6 <__malloc_unlock>
 8012ef2:	e7e4      	b.n	8012ebe <_malloc_r+0x1e>
 8012ef4:	680b      	ldr	r3, [r1, #0]
 8012ef6:	1b5b      	subs	r3, r3, r5
 8012ef8:	d418      	bmi.n	8012f2c <_malloc_r+0x8c>
 8012efa:	2b0b      	cmp	r3, #11
 8012efc:	d90f      	bls.n	8012f1e <_malloc_r+0x7e>
 8012efe:	600b      	str	r3, [r1, #0]
 8012f00:	50cd      	str	r5, [r1, r3]
 8012f02:	18cc      	adds	r4, r1, r3
 8012f04:	4630      	mov	r0, r6
 8012f06:	f000 f856 	bl	8012fb6 <__malloc_unlock>
 8012f0a:	f104 000b 	add.w	r0, r4, #11
 8012f0e:	1d23      	adds	r3, r4, #4
 8012f10:	f020 0007 	bic.w	r0, r0, #7
 8012f14:	1ac3      	subs	r3, r0, r3
 8012f16:	d0d3      	beq.n	8012ec0 <_malloc_r+0x20>
 8012f18:	425a      	negs	r2, r3
 8012f1a:	50e2      	str	r2, [r4, r3]
 8012f1c:	e7d0      	b.n	8012ec0 <_malloc_r+0x20>
 8012f1e:	428c      	cmp	r4, r1
 8012f20:	684b      	ldr	r3, [r1, #4]
 8012f22:	bf16      	itet	ne
 8012f24:	6063      	strne	r3, [r4, #4]
 8012f26:	6013      	streq	r3, [r2, #0]
 8012f28:	460c      	movne	r4, r1
 8012f2a:	e7eb      	b.n	8012f04 <_malloc_r+0x64>
 8012f2c:	460c      	mov	r4, r1
 8012f2e:	6849      	ldr	r1, [r1, #4]
 8012f30:	e7cc      	b.n	8012ecc <_malloc_r+0x2c>
 8012f32:	1cc4      	adds	r4, r0, #3
 8012f34:	f024 0403 	bic.w	r4, r4, #3
 8012f38:	42a0      	cmp	r0, r4
 8012f3a:	d005      	beq.n	8012f48 <_malloc_r+0xa8>
 8012f3c:	1a21      	subs	r1, r4, r0
 8012f3e:	4630      	mov	r0, r6
 8012f40:	f000 f808 	bl	8012f54 <_sbrk_r>
 8012f44:	3001      	adds	r0, #1
 8012f46:	d0cf      	beq.n	8012ee8 <_malloc_r+0x48>
 8012f48:	6025      	str	r5, [r4, #0]
 8012f4a:	e7db      	b.n	8012f04 <_malloc_r+0x64>
 8012f4c:	2400a230 	.word	0x2400a230
 8012f50:	2400a234 	.word	0x2400a234

08012f54 <_sbrk_r>:
 8012f54:	b538      	push	{r3, r4, r5, lr}
 8012f56:	4c06      	ldr	r4, [pc, #24]	; (8012f70 <_sbrk_r+0x1c>)
 8012f58:	2300      	movs	r3, #0
 8012f5a:	4605      	mov	r5, r0
 8012f5c:	4608      	mov	r0, r1
 8012f5e:	6023      	str	r3, [r4, #0]
 8012f60:	f7ee fac6 	bl	80014f0 <_sbrk>
 8012f64:	1c43      	adds	r3, r0, #1
 8012f66:	d102      	bne.n	8012f6e <_sbrk_r+0x1a>
 8012f68:	6823      	ldr	r3, [r4, #0]
 8012f6a:	b103      	cbz	r3, 8012f6e <_sbrk_r+0x1a>
 8012f6c:	602b      	str	r3, [r5, #0]
 8012f6e:	bd38      	pop	{r3, r4, r5, pc}
 8012f70:	2400ba48 	.word	0x2400ba48

08012f74 <siprintf>:
 8012f74:	b40e      	push	{r1, r2, r3}
 8012f76:	b500      	push	{lr}
 8012f78:	b09c      	sub	sp, #112	; 0x70
 8012f7a:	ab1d      	add	r3, sp, #116	; 0x74
 8012f7c:	9002      	str	r0, [sp, #8]
 8012f7e:	9006      	str	r0, [sp, #24]
 8012f80:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012f84:	4809      	ldr	r0, [pc, #36]	; (8012fac <siprintf+0x38>)
 8012f86:	9107      	str	r1, [sp, #28]
 8012f88:	9104      	str	r1, [sp, #16]
 8012f8a:	4909      	ldr	r1, [pc, #36]	; (8012fb0 <siprintf+0x3c>)
 8012f8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8012f90:	9105      	str	r1, [sp, #20]
 8012f92:	6800      	ldr	r0, [r0, #0]
 8012f94:	9301      	str	r3, [sp, #4]
 8012f96:	a902      	add	r1, sp, #8
 8012f98:	f000 f868 	bl	801306c <_svfiprintf_r>
 8012f9c:	9b02      	ldr	r3, [sp, #8]
 8012f9e:	2200      	movs	r2, #0
 8012fa0:	701a      	strb	r2, [r3, #0]
 8012fa2:	b01c      	add	sp, #112	; 0x70
 8012fa4:	f85d eb04 	ldr.w	lr, [sp], #4
 8012fa8:	b003      	add	sp, #12
 8012faa:	4770      	bx	lr
 8012fac:	24000168 	.word	0x24000168
 8012fb0:	ffff0208 	.word	0xffff0208

08012fb4 <__malloc_lock>:
 8012fb4:	4770      	bx	lr

08012fb6 <__malloc_unlock>:
 8012fb6:	4770      	bx	lr

08012fb8 <__ssputs_r>:
 8012fb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012fbc:	688e      	ldr	r6, [r1, #8]
 8012fbe:	429e      	cmp	r6, r3
 8012fc0:	4682      	mov	sl, r0
 8012fc2:	460c      	mov	r4, r1
 8012fc4:	4690      	mov	r8, r2
 8012fc6:	4699      	mov	r9, r3
 8012fc8:	d837      	bhi.n	801303a <__ssputs_r+0x82>
 8012fca:	898a      	ldrh	r2, [r1, #12]
 8012fcc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012fd0:	d031      	beq.n	8013036 <__ssputs_r+0x7e>
 8012fd2:	6825      	ldr	r5, [r4, #0]
 8012fd4:	6909      	ldr	r1, [r1, #16]
 8012fd6:	1a6f      	subs	r7, r5, r1
 8012fd8:	6965      	ldr	r5, [r4, #20]
 8012fda:	2302      	movs	r3, #2
 8012fdc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012fe0:	fb95 f5f3 	sdiv	r5, r5, r3
 8012fe4:	f109 0301 	add.w	r3, r9, #1
 8012fe8:	443b      	add	r3, r7
 8012fea:	429d      	cmp	r5, r3
 8012fec:	bf38      	it	cc
 8012fee:	461d      	movcc	r5, r3
 8012ff0:	0553      	lsls	r3, r2, #21
 8012ff2:	d530      	bpl.n	8013056 <__ssputs_r+0x9e>
 8012ff4:	4629      	mov	r1, r5
 8012ff6:	f7ff ff53 	bl	8012ea0 <_malloc_r>
 8012ffa:	4606      	mov	r6, r0
 8012ffc:	b950      	cbnz	r0, 8013014 <__ssputs_r+0x5c>
 8012ffe:	230c      	movs	r3, #12
 8013000:	f8ca 3000 	str.w	r3, [sl]
 8013004:	89a3      	ldrh	r3, [r4, #12]
 8013006:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801300a:	81a3      	strh	r3, [r4, #12]
 801300c:	f04f 30ff 	mov.w	r0, #4294967295
 8013010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013014:	463a      	mov	r2, r7
 8013016:	6921      	ldr	r1, [r4, #16]
 8013018:	f7ff fee0 	bl	8012ddc <memcpy>
 801301c:	89a3      	ldrh	r3, [r4, #12]
 801301e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013022:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013026:	81a3      	strh	r3, [r4, #12]
 8013028:	6126      	str	r6, [r4, #16]
 801302a:	6165      	str	r5, [r4, #20]
 801302c:	443e      	add	r6, r7
 801302e:	1bed      	subs	r5, r5, r7
 8013030:	6026      	str	r6, [r4, #0]
 8013032:	60a5      	str	r5, [r4, #8]
 8013034:	464e      	mov	r6, r9
 8013036:	454e      	cmp	r6, r9
 8013038:	d900      	bls.n	801303c <__ssputs_r+0x84>
 801303a:	464e      	mov	r6, r9
 801303c:	4632      	mov	r2, r6
 801303e:	4641      	mov	r1, r8
 8013040:	6820      	ldr	r0, [r4, #0]
 8013042:	f000 fa93 	bl	801356c <memmove>
 8013046:	68a3      	ldr	r3, [r4, #8]
 8013048:	1b9b      	subs	r3, r3, r6
 801304a:	60a3      	str	r3, [r4, #8]
 801304c:	6823      	ldr	r3, [r4, #0]
 801304e:	441e      	add	r6, r3
 8013050:	6026      	str	r6, [r4, #0]
 8013052:	2000      	movs	r0, #0
 8013054:	e7dc      	b.n	8013010 <__ssputs_r+0x58>
 8013056:	462a      	mov	r2, r5
 8013058:	f000 faa1 	bl	801359e <_realloc_r>
 801305c:	4606      	mov	r6, r0
 801305e:	2800      	cmp	r0, #0
 8013060:	d1e2      	bne.n	8013028 <__ssputs_r+0x70>
 8013062:	6921      	ldr	r1, [r4, #16]
 8013064:	4650      	mov	r0, sl
 8013066:	f7ff fecd 	bl	8012e04 <_free_r>
 801306a:	e7c8      	b.n	8012ffe <__ssputs_r+0x46>

0801306c <_svfiprintf_r>:
 801306c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013070:	461d      	mov	r5, r3
 8013072:	898b      	ldrh	r3, [r1, #12]
 8013074:	061f      	lsls	r7, r3, #24
 8013076:	b09d      	sub	sp, #116	; 0x74
 8013078:	4680      	mov	r8, r0
 801307a:	460c      	mov	r4, r1
 801307c:	4616      	mov	r6, r2
 801307e:	d50f      	bpl.n	80130a0 <_svfiprintf_r+0x34>
 8013080:	690b      	ldr	r3, [r1, #16]
 8013082:	b96b      	cbnz	r3, 80130a0 <_svfiprintf_r+0x34>
 8013084:	2140      	movs	r1, #64	; 0x40
 8013086:	f7ff ff0b 	bl	8012ea0 <_malloc_r>
 801308a:	6020      	str	r0, [r4, #0]
 801308c:	6120      	str	r0, [r4, #16]
 801308e:	b928      	cbnz	r0, 801309c <_svfiprintf_r+0x30>
 8013090:	230c      	movs	r3, #12
 8013092:	f8c8 3000 	str.w	r3, [r8]
 8013096:	f04f 30ff 	mov.w	r0, #4294967295
 801309a:	e0c8      	b.n	801322e <_svfiprintf_r+0x1c2>
 801309c:	2340      	movs	r3, #64	; 0x40
 801309e:	6163      	str	r3, [r4, #20]
 80130a0:	2300      	movs	r3, #0
 80130a2:	9309      	str	r3, [sp, #36]	; 0x24
 80130a4:	2320      	movs	r3, #32
 80130a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80130aa:	2330      	movs	r3, #48	; 0x30
 80130ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80130b0:	9503      	str	r5, [sp, #12]
 80130b2:	f04f 0b01 	mov.w	fp, #1
 80130b6:	4637      	mov	r7, r6
 80130b8:	463d      	mov	r5, r7
 80130ba:	f815 3b01 	ldrb.w	r3, [r5], #1
 80130be:	b10b      	cbz	r3, 80130c4 <_svfiprintf_r+0x58>
 80130c0:	2b25      	cmp	r3, #37	; 0x25
 80130c2:	d13e      	bne.n	8013142 <_svfiprintf_r+0xd6>
 80130c4:	ebb7 0a06 	subs.w	sl, r7, r6
 80130c8:	d00b      	beq.n	80130e2 <_svfiprintf_r+0x76>
 80130ca:	4653      	mov	r3, sl
 80130cc:	4632      	mov	r2, r6
 80130ce:	4621      	mov	r1, r4
 80130d0:	4640      	mov	r0, r8
 80130d2:	f7ff ff71 	bl	8012fb8 <__ssputs_r>
 80130d6:	3001      	adds	r0, #1
 80130d8:	f000 80a4 	beq.w	8013224 <_svfiprintf_r+0x1b8>
 80130dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80130de:	4453      	add	r3, sl
 80130e0:	9309      	str	r3, [sp, #36]	; 0x24
 80130e2:	783b      	ldrb	r3, [r7, #0]
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	f000 809d 	beq.w	8013224 <_svfiprintf_r+0x1b8>
 80130ea:	2300      	movs	r3, #0
 80130ec:	f04f 32ff 	mov.w	r2, #4294967295
 80130f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80130f4:	9304      	str	r3, [sp, #16]
 80130f6:	9307      	str	r3, [sp, #28]
 80130f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80130fc:	931a      	str	r3, [sp, #104]	; 0x68
 80130fe:	462f      	mov	r7, r5
 8013100:	2205      	movs	r2, #5
 8013102:	f817 1b01 	ldrb.w	r1, [r7], #1
 8013106:	4850      	ldr	r0, [pc, #320]	; (8013248 <_svfiprintf_r+0x1dc>)
 8013108:	f7ed f8f2 	bl	80002f0 <memchr>
 801310c:	9b04      	ldr	r3, [sp, #16]
 801310e:	b9d0      	cbnz	r0, 8013146 <_svfiprintf_r+0xda>
 8013110:	06d9      	lsls	r1, r3, #27
 8013112:	bf44      	itt	mi
 8013114:	2220      	movmi	r2, #32
 8013116:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801311a:	071a      	lsls	r2, r3, #28
 801311c:	bf44      	itt	mi
 801311e:	222b      	movmi	r2, #43	; 0x2b
 8013120:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013124:	782a      	ldrb	r2, [r5, #0]
 8013126:	2a2a      	cmp	r2, #42	; 0x2a
 8013128:	d015      	beq.n	8013156 <_svfiprintf_r+0xea>
 801312a:	9a07      	ldr	r2, [sp, #28]
 801312c:	462f      	mov	r7, r5
 801312e:	2000      	movs	r0, #0
 8013130:	250a      	movs	r5, #10
 8013132:	4639      	mov	r1, r7
 8013134:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013138:	3b30      	subs	r3, #48	; 0x30
 801313a:	2b09      	cmp	r3, #9
 801313c:	d94d      	bls.n	80131da <_svfiprintf_r+0x16e>
 801313e:	b1b8      	cbz	r0, 8013170 <_svfiprintf_r+0x104>
 8013140:	e00f      	b.n	8013162 <_svfiprintf_r+0xf6>
 8013142:	462f      	mov	r7, r5
 8013144:	e7b8      	b.n	80130b8 <_svfiprintf_r+0x4c>
 8013146:	4a40      	ldr	r2, [pc, #256]	; (8013248 <_svfiprintf_r+0x1dc>)
 8013148:	1a80      	subs	r0, r0, r2
 801314a:	fa0b f000 	lsl.w	r0, fp, r0
 801314e:	4318      	orrs	r0, r3
 8013150:	9004      	str	r0, [sp, #16]
 8013152:	463d      	mov	r5, r7
 8013154:	e7d3      	b.n	80130fe <_svfiprintf_r+0x92>
 8013156:	9a03      	ldr	r2, [sp, #12]
 8013158:	1d11      	adds	r1, r2, #4
 801315a:	6812      	ldr	r2, [r2, #0]
 801315c:	9103      	str	r1, [sp, #12]
 801315e:	2a00      	cmp	r2, #0
 8013160:	db01      	blt.n	8013166 <_svfiprintf_r+0xfa>
 8013162:	9207      	str	r2, [sp, #28]
 8013164:	e004      	b.n	8013170 <_svfiprintf_r+0x104>
 8013166:	4252      	negs	r2, r2
 8013168:	f043 0302 	orr.w	r3, r3, #2
 801316c:	9207      	str	r2, [sp, #28]
 801316e:	9304      	str	r3, [sp, #16]
 8013170:	783b      	ldrb	r3, [r7, #0]
 8013172:	2b2e      	cmp	r3, #46	; 0x2e
 8013174:	d10c      	bne.n	8013190 <_svfiprintf_r+0x124>
 8013176:	787b      	ldrb	r3, [r7, #1]
 8013178:	2b2a      	cmp	r3, #42	; 0x2a
 801317a:	d133      	bne.n	80131e4 <_svfiprintf_r+0x178>
 801317c:	9b03      	ldr	r3, [sp, #12]
 801317e:	1d1a      	adds	r2, r3, #4
 8013180:	681b      	ldr	r3, [r3, #0]
 8013182:	9203      	str	r2, [sp, #12]
 8013184:	2b00      	cmp	r3, #0
 8013186:	bfb8      	it	lt
 8013188:	f04f 33ff 	movlt.w	r3, #4294967295
 801318c:	3702      	adds	r7, #2
 801318e:	9305      	str	r3, [sp, #20]
 8013190:	4d2e      	ldr	r5, [pc, #184]	; (801324c <_svfiprintf_r+0x1e0>)
 8013192:	7839      	ldrb	r1, [r7, #0]
 8013194:	2203      	movs	r2, #3
 8013196:	4628      	mov	r0, r5
 8013198:	f7ed f8aa 	bl	80002f0 <memchr>
 801319c:	b138      	cbz	r0, 80131ae <_svfiprintf_r+0x142>
 801319e:	2340      	movs	r3, #64	; 0x40
 80131a0:	1b40      	subs	r0, r0, r5
 80131a2:	fa03 f000 	lsl.w	r0, r3, r0
 80131a6:	9b04      	ldr	r3, [sp, #16]
 80131a8:	4303      	orrs	r3, r0
 80131aa:	3701      	adds	r7, #1
 80131ac:	9304      	str	r3, [sp, #16]
 80131ae:	7839      	ldrb	r1, [r7, #0]
 80131b0:	4827      	ldr	r0, [pc, #156]	; (8013250 <_svfiprintf_r+0x1e4>)
 80131b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80131b6:	2206      	movs	r2, #6
 80131b8:	1c7e      	adds	r6, r7, #1
 80131ba:	f7ed f899 	bl	80002f0 <memchr>
 80131be:	2800      	cmp	r0, #0
 80131c0:	d038      	beq.n	8013234 <_svfiprintf_r+0x1c8>
 80131c2:	4b24      	ldr	r3, [pc, #144]	; (8013254 <_svfiprintf_r+0x1e8>)
 80131c4:	bb13      	cbnz	r3, 801320c <_svfiprintf_r+0x1a0>
 80131c6:	9b03      	ldr	r3, [sp, #12]
 80131c8:	3307      	adds	r3, #7
 80131ca:	f023 0307 	bic.w	r3, r3, #7
 80131ce:	3308      	adds	r3, #8
 80131d0:	9303      	str	r3, [sp, #12]
 80131d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80131d4:	444b      	add	r3, r9
 80131d6:	9309      	str	r3, [sp, #36]	; 0x24
 80131d8:	e76d      	b.n	80130b6 <_svfiprintf_r+0x4a>
 80131da:	fb05 3202 	mla	r2, r5, r2, r3
 80131de:	2001      	movs	r0, #1
 80131e0:	460f      	mov	r7, r1
 80131e2:	e7a6      	b.n	8013132 <_svfiprintf_r+0xc6>
 80131e4:	2300      	movs	r3, #0
 80131e6:	3701      	adds	r7, #1
 80131e8:	9305      	str	r3, [sp, #20]
 80131ea:	4619      	mov	r1, r3
 80131ec:	250a      	movs	r5, #10
 80131ee:	4638      	mov	r0, r7
 80131f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80131f4:	3a30      	subs	r2, #48	; 0x30
 80131f6:	2a09      	cmp	r2, #9
 80131f8:	d903      	bls.n	8013202 <_svfiprintf_r+0x196>
 80131fa:	2b00      	cmp	r3, #0
 80131fc:	d0c8      	beq.n	8013190 <_svfiprintf_r+0x124>
 80131fe:	9105      	str	r1, [sp, #20]
 8013200:	e7c6      	b.n	8013190 <_svfiprintf_r+0x124>
 8013202:	fb05 2101 	mla	r1, r5, r1, r2
 8013206:	2301      	movs	r3, #1
 8013208:	4607      	mov	r7, r0
 801320a:	e7f0      	b.n	80131ee <_svfiprintf_r+0x182>
 801320c:	ab03      	add	r3, sp, #12
 801320e:	9300      	str	r3, [sp, #0]
 8013210:	4622      	mov	r2, r4
 8013212:	4b11      	ldr	r3, [pc, #68]	; (8013258 <_svfiprintf_r+0x1ec>)
 8013214:	a904      	add	r1, sp, #16
 8013216:	4640      	mov	r0, r8
 8013218:	f3af 8000 	nop.w
 801321c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8013220:	4681      	mov	r9, r0
 8013222:	d1d6      	bne.n	80131d2 <_svfiprintf_r+0x166>
 8013224:	89a3      	ldrh	r3, [r4, #12]
 8013226:	065b      	lsls	r3, r3, #25
 8013228:	f53f af35 	bmi.w	8013096 <_svfiprintf_r+0x2a>
 801322c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801322e:	b01d      	add	sp, #116	; 0x74
 8013230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013234:	ab03      	add	r3, sp, #12
 8013236:	9300      	str	r3, [sp, #0]
 8013238:	4622      	mov	r2, r4
 801323a:	4b07      	ldr	r3, [pc, #28]	; (8013258 <_svfiprintf_r+0x1ec>)
 801323c:	a904      	add	r1, sp, #16
 801323e:	4640      	mov	r0, r8
 8013240:	f000 f882 	bl	8013348 <_printf_i>
 8013244:	e7ea      	b.n	801321c <_svfiprintf_r+0x1b0>
 8013246:	bf00      	nop
 8013248:	08013860 	.word	0x08013860
 801324c:	08013866 	.word	0x08013866
 8013250:	0801386a 	.word	0x0801386a
 8013254:	00000000 	.word	0x00000000
 8013258:	08012fb9 	.word	0x08012fb9

0801325c <_printf_common>:
 801325c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013260:	4691      	mov	r9, r2
 8013262:	461f      	mov	r7, r3
 8013264:	688a      	ldr	r2, [r1, #8]
 8013266:	690b      	ldr	r3, [r1, #16]
 8013268:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801326c:	4293      	cmp	r3, r2
 801326e:	bfb8      	it	lt
 8013270:	4613      	movlt	r3, r2
 8013272:	f8c9 3000 	str.w	r3, [r9]
 8013276:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801327a:	4606      	mov	r6, r0
 801327c:	460c      	mov	r4, r1
 801327e:	b112      	cbz	r2, 8013286 <_printf_common+0x2a>
 8013280:	3301      	adds	r3, #1
 8013282:	f8c9 3000 	str.w	r3, [r9]
 8013286:	6823      	ldr	r3, [r4, #0]
 8013288:	0699      	lsls	r1, r3, #26
 801328a:	bf42      	ittt	mi
 801328c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8013290:	3302      	addmi	r3, #2
 8013292:	f8c9 3000 	strmi.w	r3, [r9]
 8013296:	6825      	ldr	r5, [r4, #0]
 8013298:	f015 0506 	ands.w	r5, r5, #6
 801329c:	d107      	bne.n	80132ae <_printf_common+0x52>
 801329e:	f104 0a19 	add.w	sl, r4, #25
 80132a2:	68e3      	ldr	r3, [r4, #12]
 80132a4:	f8d9 2000 	ldr.w	r2, [r9]
 80132a8:	1a9b      	subs	r3, r3, r2
 80132aa:	42ab      	cmp	r3, r5
 80132ac:	dc28      	bgt.n	8013300 <_printf_common+0xa4>
 80132ae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80132b2:	6822      	ldr	r2, [r4, #0]
 80132b4:	3300      	adds	r3, #0
 80132b6:	bf18      	it	ne
 80132b8:	2301      	movne	r3, #1
 80132ba:	0692      	lsls	r2, r2, #26
 80132bc:	d42d      	bmi.n	801331a <_printf_common+0xbe>
 80132be:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80132c2:	4639      	mov	r1, r7
 80132c4:	4630      	mov	r0, r6
 80132c6:	47c0      	blx	r8
 80132c8:	3001      	adds	r0, #1
 80132ca:	d020      	beq.n	801330e <_printf_common+0xb2>
 80132cc:	6823      	ldr	r3, [r4, #0]
 80132ce:	68e5      	ldr	r5, [r4, #12]
 80132d0:	f8d9 2000 	ldr.w	r2, [r9]
 80132d4:	f003 0306 	and.w	r3, r3, #6
 80132d8:	2b04      	cmp	r3, #4
 80132da:	bf08      	it	eq
 80132dc:	1aad      	subeq	r5, r5, r2
 80132de:	68a3      	ldr	r3, [r4, #8]
 80132e0:	6922      	ldr	r2, [r4, #16]
 80132e2:	bf0c      	ite	eq
 80132e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80132e8:	2500      	movne	r5, #0
 80132ea:	4293      	cmp	r3, r2
 80132ec:	bfc4      	itt	gt
 80132ee:	1a9b      	subgt	r3, r3, r2
 80132f0:	18ed      	addgt	r5, r5, r3
 80132f2:	f04f 0900 	mov.w	r9, #0
 80132f6:	341a      	adds	r4, #26
 80132f8:	454d      	cmp	r5, r9
 80132fa:	d11a      	bne.n	8013332 <_printf_common+0xd6>
 80132fc:	2000      	movs	r0, #0
 80132fe:	e008      	b.n	8013312 <_printf_common+0xb6>
 8013300:	2301      	movs	r3, #1
 8013302:	4652      	mov	r2, sl
 8013304:	4639      	mov	r1, r7
 8013306:	4630      	mov	r0, r6
 8013308:	47c0      	blx	r8
 801330a:	3001      	adds	r0, #1
 801330c:	d103      	bne.n	8013316 <_printf_common+0xba>
 801330e:	f04f 30ff 	mov.w	r0, #4294967295
 8013312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013316:	3501      	adds	r5, #1
 8013318:	e7c3      	b.n	80132a2 <_printf_common+0x46>
 801331a:	18e1      	adds	r1, r4, r3
 801331c:	1c5a      	adds	r2, r3, #1
 801331e:	2030      	movs	r0, #48	; 0x30
 8013320:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013324:	4422      	add	r2, r4
 8013326:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801332a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801332e:	3302      	adds	r3, #2
 8013330:	e7c5      	b.n	80132be <_printf_common+0x62>
 8013332:	2301      	movs	r3, #1
 8013334:	4622      	mov	r2, r4
 8013336:	4639      	mov	r1, r7
 8013338:	4630      	mov	r0, r6
 801333a:	47c0      	blx	r8
 801333c:	3001      	adds	r0, #1
 801333e:	d0e6      	beq.n	801330e <_printf_common+0xb2>
 8013340:	f109 0901 	add.w	r9, r9, #1
 8013344:	e7d8      	b.n	80132f8 <_printf_common+0x9c>
	...

08013348 <_printf_i>:
 8013348:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801334c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8013350:	460c      	mov	r4, r1
 8013352:	7e09      	ldrb	r1, [r1, #24]
 8013354:	b085      	sub	sp, #20
 8013356:	296e      	cmp	r1, #110	; 0x6e
 8013358:	4617      	mov	r7, r2
 801335a:	4606      	mov	r6, r0
 801335c:	4698      	mov	r8, r3
 801335e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013360:	f000 80b3 	beq.w	80134ca <_printf_i+0x182>
 8013364:	d822      	bhi.n	80133ac <_printf_i+0x64>
 8013366:	2963      	cmp	r1, #99	; 0x63
 8013368:	d036      	beq.n	80133d8 <_printf_i+0x90>
 801336a:	d80a      	bhi.n	8013382 <_printf_i+0x3a>
 801336c:	2900      	cmp	r1, #0
 801336e:	f000 80b9 	beq.w	80134e4 <_printf_i+0x19c>
 8013372:	2958      	cmp	r1, #88	; 0x58
 8013374:	f000 8083 	beq.w	801347e <_printf_i+0x136>
 8013378:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801337c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8013380:	e032      	b.n	80133e8 <_printf_i+0xa0>
 8013382:	2964      	cmp	r1, #100	; 0x64
 8013384:	d001      	beq.n	801338a <_printf_i+0x42>
 8013386:	2969      	cmp	r1, #105	; 0x69
 8013388:	d1f6      	bne.n	8013378 <_printf_i+0x30>
 801338a:	6820      	ldr	r0, [r4, #0]
 801338c:	6813      	ldr	r3, [r2, #0]
 801338e:	0605      	lsls	r5, r0, #24
 8013390:	f103 0104 	add.w	r1, r3, #4
 8013394:	d52a      	bpl.n	80133ec <_printf_i+0xa4>
 8013396:	681b      	ldr	r3, [r3, #0]
 8013398:	6011      	str	r1, [r2, #0]
 801339a:	2b00      	cmp	r3, #0
 801339c:	da03      	bge.n	80133a6 <_printf_i+0x5e>
 801339e:	222d      	movs	r2, #45	; 0x2d
 80133a0:	425b      	negs	r3, r3
 80133a2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80133a6:	486f      	ldr	r0, [pc, #444]	; (8013564 <_printf_i+0x21c>)
 80133a8:	220a      	movs	r2, #10
 80133aa:	e039      	b.n	8013420 <_printf_i+0xd8>
 80133ac:	2973      	cmp	r1, #115	; 0x73
 80133ae:	f000 809d 	beq.w	80134ec <_printf_i+0x1a4>
 80133b2:	d808      	bhi.n	80133c6 <_printf_i+0x7e>
 80133b4:	296f      	cmp	r1, #111	; 0x6f
 80133b6:	d020      	beq.n	80133fa <_printf_i+0xb2>
 80133b8:	2970      	cmp	r1, #112	; 0x70
 80133ba:	d1dd      	bne.n	8013378 <_printf_i+0x30>
 80133bc:	6823      	ldr	r3, [r4, #0]
 80133be:	f043 0320 	orr.w	r3, r3, #32
 80133c2:	6023      	str	r3, [r4, #0]
 80133c4:	e003      	b.n	80133ce <_printf_i+0x86>
 80133c6:	2975      	cmp	r1, #117	; 0x75
 80133c8:	d017      	beq.n	80133fa <_printf_i+0xb2>
 80133ca:	2978      	cmp	r1, #120	; 0x78
 80133cc:	d1d4      	bne.n	8013378 <_printf_i+0x30>
 80133ce:	2378      	movs	r3, #120	; 0x78
 80133d0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80133d4:	4864      	ldr	r0, [pc, #400]	; (8013568 <_printf_i+0x220>)
 80133d6:	e055      	b.n	8013484 <_printf_i+0x13c>
 80133d8:	6813      	ldr	r3, [r2, #0]
 80133da:	1d19      	adds	r1, r3, #4
 80133dc:	681b      	ldr	r3, [r3, #0]
 80133de:	6011      	str	r1, [r2, #0]
 80133e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80133e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80133e8:	2301      	movs	r3, #1
 80133ea:	e08c      	b.n	8013506 <_printf_i+0x1be>
 80133ec:	681b      	ldr	r3, [r3, #0]
 80133ee:	6011      	str	r1, [r2, #0]
 80133f0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80133f4:	bf18      	it	ne
 80133f6:	b21b      	sxthne	r3, r3
 80133f8:	e7cf      	b.n	801339a <_printf_i+0x52>
 80133fa:	6813      	ldr	r3, [r2, #0]
 80133fc:	6825      	ldr	r5, [r4, #0]
 80133fe:	1d18      	adds	r0, r3, #4
 8013400:	6010      	str	r0, [r2, #0]
 8013402:	0628      	lsls	r0, r5, #24
 8013404:	d501      	bpl.n	801340a <_printf_i+0xc2>
 8013406:	681b      	ldr	r3, [r3, #0]
 8013408:	e002      	b.n	8013410 <_printf_i+0xc8>
 801340a:	0668      	lsls	r0, r5, #25
 801340c:	d5fb      	bpl.n	8013406 <_printf_i+0xbe>
 801340e:	881b      	ldrh	r3, [r3, #0]
 8013410:	4854      	ldr	r0, [pc, #336]	; (8013564 <_printf_i+0x21c>)
 8013412:	296f      	cmp	r1, #111	; 0x6f
 8013414:	bf14      	ite	ne
 8013416:	220a      	movne	r2, #10
 8013418:	2208      	moveq	r2, #8
 801341a:	2100      	movs	r1, #0
 801341c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013420:	6865      	ldr	r5, [r4, #4]
 8013422:	60a5      	str	r5, [r4, #8]
 8013424:	2d00      	cmp	r5, #0
 8013426:	f2c0 8095 	blt.w	8013554 <_printf_i+0x20c>
 801342a:	6821      	ldr	r1, [r4, #0]
 801342c:	f021 0104 	bic.w	r1, r1, #4
 8013430:	6021      	str	r1, [r4, #0]
 8013432:	2b00      	cmp	r3, #0
 8013434:	d13d      	bne.n	80134b2 <_printf_i+0x16a>
 8013436:	2d00      	cmp	r5, #0
 8013438:	f040 808e 	bne.w	8013558 <_printf_i+0x210>
 801343c:	4665      	mov	r5, ip
 801343e:	2a08      	cmp	r2, #8
 8013440:	d10b      	bne.n	801345a <_printf_i+0x112>
 8013442:	6823      	ldr	r3, [r4, #0]
 8013444:	07db      	lsls	r3, r3, #31
 8013446:	d508      	bpl.n	801345a <_printf_i+0x112>
 8013448:	6923      	ldr	r3, [r4, #16]
 801344a:	6862      	ldr	r2, [r4, #4]
 801344c:	429a      	cmp	r2, r3
 801344e:	bfde      	ittt	le
 8013450:	2330      	movle	r3, #48	; 0x30
 8013452:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013456:	f105 35ff 	addle.w	r5, r5, #4294967295
 801345a:	ebac 0305 	sub.w	r3, ip, r5
 801345e:	6123      	str	r3, [r4, #16]
 8013460:	f8cd 8000 	str.w	r8, [sp]
 8013464:	463b      	mov	r3, r7
 8013466:	aa03      	add	r2, sp, #12
 8013468:	4621      	mov	r1, r4
 801346a:	4630      	mov	r0, r6
 801346c:	f7ff fef6 	bl	801325c <_printf_common>
 8013470:	3001      	adds	r0, #1
 8013472:	d14d      	bne.n	8013510 <_printf_i+0x1c8>
 8013474:	f04f 30ff 	mov.w	r0, #4294967295
 8013478:	b005      	add	sp, #20
 801347a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801347e:	4839      	ldr	r0, [pc, #228]	; (8013564 <_printf_i+0x21c>)
 8013480:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8013484:	6813      	ldr	r3, [r2, #0]
 8013486:	6821      	ldr	r1, [r4, #0]
 8013488:	1d1d      	adds	r5, r3, #4
 801348a:	681b      	ldr	r3, [r3, #0]
 801348c:	6015      	str	r5, [r2, #0]
 801348e:	060a      	lsls	r2, r1, #24
 8013490:	d50b      	bpl.n	80134aa <_printf_i+0x162>
 8013492:	07ca      	lsls	r2, r1, #31
 8013494:	bf44      	itt	mi
 8013496:	f041 0120 	orrmi.w	r1, r1, #32
 801349a:	6021      	strmi	r1, [r4, #0]
 801349c:	b91b      	cbnz	r3, 80134a6 <_printf_i+0x15e>
 801349e:	6822      	ldr	r2, [r4, #0]
 80134a0:	f022 0220 	bic.w	r2, r2, #32
 80134a4:	6022      	str	r2, [r4, #0]
 80134a6:	2210      	movs	r2, #16
 80134a8:	e7b7      	b.n	801341a <_printf_i+0xd2>
 80134aa:	064d      	lsls	r5, r1, #25
 80134ac:	bf48      	it	mi
 80134ae:	b29b      	uxthmi	r3, r3
 80134b0:	e7ef      	b.n	8013492 <_printf_i+0x14a>
 80134b2:	4665      	mov	r5, ip
 80134b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80134b8:	fb02 3311 	mls	r3, r2, r1, r3
 80134bc:	5cc3      	ldrb	r3, [r0, r3]
 80134be:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80134c2:	460b      	mov	r3, r1
 80134c4:	2900      	cmp	r1, #0
 80134c6:	d1f5      	bne.n	80134b4 <_printf_i+0x16c>
 80134c8:	e7b9      	b.n	801343e <_printf_i+0xf6>
 80134ca:	6813      	ldr	r3, [r2, #0]
 80134cc:	6825      	ldr	r5, [r4, #0]
 80134ce:	6961      	ldr	r1, [r4, #20]
 80134d0:	1d18      	adds	r0, r3, #4
 80134d2:	6010      	str	r0, [r2, #0]
 80134d4:	0628      	lsls	r0, r5, #24
 80134d6:	681b      	ldr	r3, [r3, #0]
 80134d8:	d501      	bpl.n	80134de <_printf_i+0x196>
 80134da:	6019      	str	r1, [r3, #0]
 80134dc:	e002      	b.n	80134e4 <_printf_i+0x19c>
 80134de:	066a      	lsls	r2, r5, #25
 80134e0:	d5fb      	bpl.n	80134da <_printf_i+0x192>
 80134e2:	8019      	strh	r1, [r3, #0]
 80134e4:	2300      	movs	r3, #0
 80134e6:	6123      	str	r3, [r4, #16]
 80134e8:	4665      	mov	r5, ip
 80134ea:	e7b9      	b.n	8013460 <_printf_i+0x118>
 80134ec:	6813      	ldr	r3, [r2, #0]
 80134ee:	1d19      	adds	r1, r3, #4
 80134f0:	6011      	str	r1, [r2, #0]
 80134f2:	681d      	ldr	r5, [r3, #0]
 80134f4:	6862      	ldr	r2, [r4, #4]
 80134f6:	2100      	movs	r1, #0
 80134f8:	4628      	mov	r0, r5
 80134fa:	f7ec fef9 	bl	80002f0 <memchr>
 80134fe:	b108      	cbz	r0, 8013504 <_printf_i+0x1bc>
 8013500:	1b40      	subs	r0, r0, r5
 8013502:	6060      	str	r0, [r4, #4]
 8013504:	6863      	ldr	r3, [r4, #4]
 8013506:	6123      	str	r3, [r4, #16]
 8013508:	2300      	movs	r3, #0
 801350a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801350e:	e7a7      	b.n	8013460 <_printf_i+0x118>
 8013510:	6923      	ldr	r3, [r4, #16]
 8013512:	462a      	mov	r2, r5
 8013514:	4639      	mov	r1, r7
 8013516:	4630      	mov	r0, r6
 8013518:	47c0      	blx	r8
 801351a:	3001      	adds	r0, #1
 801351c:	d0aa      	beq.n	8013474 <_printf_i+0x12c>
 801351e:	6823      	ldr	r3, [r4, #0]
 8013520:	079b      	lsls	r3, r3, #30
 8013522:	d413      	bmi.n	801354c <_printf_i+0x204>
 8013524:	68e0      	ldr	r0, [r4, #12]
 8013526:	9b03      	ldr	r3, [sp, #12]
 8013528:	4298      	cmp	r0, r3
 801352a:	bfb8      	it	lt
 801352c:	4618      	movlt	r0, r3
 801352e:	e7a3      	b.n	8013478 <_printf_i+0x130>
 8013530:	2301      	movs	r3, #1
 8013532:	464a      	mov	r2, r9
 8013534:	4639      	mov	r1, r7
 8013536:	4630      	mov	r0, r6
 8013538:	47c0      	blx	r8
 801353a:	3001      	adds	r0, #1
 801353c:	d09a      	beq.n	8013474 <_printf_i+0x12c>
 801353e:	3501      	adds	r5, #1
 8013540:	68e3      	ldr	r3, [r4, #12]
 8013542:	9a03      	ldr	r2, [sp, #12]
 8013544:	1a9b      	subs	r3, r3, r2
 8013546:	42ab      	cmp	r3, r5
 8013548:	dcf2      	bgt.n	8013530 <_printf_i+0x1e8>
 801354a:	e7eb      	b.n	8013524 <_printf_i+0x1dc>
 801354c:	2500      	movs	r5, #0
 801354e:	f104 0919 	add.w	r9, r4, #25
 8013552:	e7f5      	b.n	8013540 <_printf_i+0x1f8>
 8013554:	2b00      	cmp	r3, #0
 8013556:	d1ac      	bne.n	80134b2 <_printf_i+0x16a>
 8013558:	7803      	ldrb	r3, [r0, #0]
 801355a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801355e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013562:	e76c      	b.n	801343e <_printf_i+0xf6>
 8013564:	08013871 	.word	0x08013871
 8013568:	08013882 	.word	0x08013882

0801356c <memmove>:
 801356c:	4288      	cmp	r0, r1
 801356e:	b510      	push	{r4, lr}
 8013570:	eb01 0302 	add.w	r3, r1, r2
 8013574:	d807      	bhi.n	8013586 <memmove+0x1a>
 8013576:	1e42      	subs	r2, r0, #1
 8013578:	4299      	cmp	r1, r3
 801357a:	d00a      	beq.n	8013592 <memmove+0x26>
 801357c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013580:	f802 4f01 	strb.w	r4, [r2, #1]!
 8013584:	e7f8      	b.n	8013578 <memmove+0xc>
 8013586:	4283      	cmp	r3, r0
 8013588:	d9f5      	bls.n	8013576 <memmove+0xa>
 801358a:	1881      	adds	r1, r0, r2
 801358c:	1ad2      	subs	r2, r2, r3
 801358e:	42d3      	cmn	r3, r2
 8013590:	d100      	bne.n	8013594 <memmove+0x28>
 8013592:	bd10      	pop	{r4, pc}
 8013594:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013598:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801359c:	e7f7      	b.n	801358e <memmove+0x22>

0801359e <_realloc_r>:
 801359e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80135a0:	4607      	mov	r7, r0
 80135a2:	4614      	mov	r4, r2
 80135a4:	460e      	mov	r6, r1
 80135a6:	b921      	cbnz	r1, 80135b2 <_realloc_r+0x14>
 80135a8:	4611      	mov	r1, r2
 80135aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80135ae:	f7ff bc77 	b.w	8012ea0 <_malloc_r>
 80135b2:	b922      	cbnz	r2, 80135be <_realloc_r+0x20>
 80135b4:	f7ff fc26 	bl	8012e04 <_free_r>
 80135b8:	4625      	mov	r5, r4
 80135ba:	4628      	mov	r0, r5
 80135bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80135be:	f000 f814 	bl	80135ea <_malloc_usable_size_r>
 80135c2:	42a0      	cmp	r0, r4
 80135c4:	d20f      	bcs.n	80135e6 <_realloc_r+0x48>
 80135c6:	4621      	mov	r1, r4
 80135c8:	4638      	mov	r0, r7
 80135ca:	f7ff fc69 	bl	8012ea0 <_malloc_r>
 80135ce:	4605      	mov	r5, r0
 80135d0:	2800      	cmp	r0, #0
 80135d2:	d0f2      	beq.n	80135ba <_realloc_r+0x1c>
 80135d4:	4631      	mov	r1, r6
 80135d6:	4622      	mov	r2, r4
 80135d8:	f7ff fc00 	bl	8012ddc <memcpy>
 80135dc:	4631      	mov	r1, r6
 80135de:	4638      	mov	r0, r7
 80135e0:	f7ff fc10 	bl	8012e04 <_free_r>
 80135e4:	e7e9      	b.n	80135ba <_realloc_r+0x1c>
 80135e6:	4635      	mov	r5, r6
 80135e8:	e7e7      	b.n	80135ba <_realloc_r+0x1c>

080135ea <_malloc_usable_size_r>:
 80135ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80135ee:	1f18      	subs	r0, r3, #4
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	bfbc      	itt	lt
 80135f4:	580b      	ldrlt	r3, [r1, r0]
 80135f6:	18c0      	addlt	r0, r0, r3
 80135f8:	4770      	bx	lr
	...

080135fc <_init>:
 80135fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80135fe:	bf00      	nop
 8013600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013602:	bc08      	pop	{r3}
 8013604:	469e      	mov	lr, r3
 8013606:	4770      	bx	lr

08013608 <_fini>:
 8013608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801360a:	bf00      	nop
 801360c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801360e:	bc08      	pop	{r3}
 8013610:	469e      	mov	lr, r3
 8013612:	4770      	bx	lr
